// Generated by Haxe 3.4.7
#ifndef INCLUDED_scripts_MyScripts
#define INCLUDED_scripts_MyScripts

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(scripts,MyScripts)

namespace scripts{


class HXCPP_CLASS_ATTRIBUTES MyScripts_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MyScripts_obj OBJ_;
		MyScripts_obj();

	public:
		enum { _hx_ClassId = 0x3ece1014 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="scripts.MyScripts")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"scripts.MyScripts"); }

		hx::ObjectPtr< MyScripts_obj > __new() {
			hx::ObjectPtr< MyScripts_obj > __this = new MyScripts_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< MyScripts_obj > __alloc(hx::Ctx *_hx_ctx) {
			MyScripts_obj *__this = (MyScripts_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MyScripts_obj), false, "scripts.MyScripts"));
			*(void **)__this = MyScripts_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MyScripts_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MyScripts","\xdc","\xa9","\xa9","\x75"); }

};

} // end namespace scripts

#endif /* INCLUDED_scripts_MyScripts */ 
