// Generated by Haxe 3.4.7
#ifndef INCLUDED_scripts_StencylPreloader
#define INCLUDED_scripts_StencylPreloader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(lime,app,_Event_Void_Void)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(scripts,StencylPreloader)

namespace scripts{


class HXCPP_CLASS_ATTRIBUTES StencylPreloader_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef StencylPreloader_obj OBJ_;
		StencylPreloader_obj();

	public:
		enum { _hx_ClassId = 0x777847d2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="scripts.StencylPreloader")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"scripts.StencylPreloader"); }
		static hx::ObjectPtr< StencylPreloader_obj > __new();
		static hx::ObjectPtr< StencylPreloader_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~StencylPreloader_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("StencylPreloader","\x0a","\xf7","\x9a","\x77"); }

		 ::lime::app::_Event_Void_Void onComplete;
		bool adPlaying;
		bool ready;
		void onUpdate(int loaded,int total);
		::Dynamic onUpdate_dyn();

		void onLoaded();
		::Dynamic onLoaded_dyn();

		void adFinished();
		::Dynamic adFinished_dyn();

		void unload();
		::Dynamic unload_dyn();

};

} // end namespace scripts

#endif /* INCLUDED_scripts_StencylPreloader */ 
