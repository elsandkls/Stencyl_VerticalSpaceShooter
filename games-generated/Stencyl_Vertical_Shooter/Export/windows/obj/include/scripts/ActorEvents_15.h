// Generated by Haxe 3.4.7
#ifndef INCLUDED_scripts_ActorEvents_15
#define INCLUDED_scripts_ActorEvents_15

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_behavior_ActorScript
#include <com/stencyl/behavior/ActorScript.h>
#endif
HX_DECLARE_CLASS2(com,stencyl,Engine)
HX_DECLARE_CLASS3(com,stencyl,behavior,ActorScript)
HX_DECLARE_CLASS3(com,stencyl,behavior,Script)
HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(scripts,ActorEvents_15)

namespace scripts{


class HXCPP_CLASS_ATTRIBUTES ActorEvents_15_obj : public  ::com::stencyl::behavior::ActorScript_obj
{
	public:
		typedef  ::com::stencyl::behavior::ActorScript_obj super;
		typedef ActorEvents_15_obj OBJ_;
		ActorEvents_15_obj();

	public:
		enum { _hx_ClassId = 0x0d0a64d9 };

		void __construct(int dummy, ::com::stencyl::models::Actor actor, ::com::stencyl::Engine dummy2);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="scripts.ActorEvents_15")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"scripts.ActorEvents_15"); }
		static hx::ObjectPtr< ActorEvents_15_obj > __new(int dummy, ::com::stencyl::models::Actor actor, ::com::stencyl::Engine dummy2);
		static hx::ObjectPtr< ActorEvents_15_obj > __alloc(hx::Ctx *_hx_ctx,int dummy, ::com::stencyl::models::Actor actor, ::com::stencyl::Engine dummy2);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ActorEvents_15_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ActorEvents_15","\xf5","\xc9","\x1c","\x66"); }

		void init();

		void forwardMessage(::String msg);

};

} // end namespace scripts

#endif /* INCLUDED_scripts_ActorEvents_15 */ 
