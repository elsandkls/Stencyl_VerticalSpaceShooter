// Generated by Haxe 3.4.7
#ifndef INCLUDED_de_polygonal_ds_IntHashSet
#define INCLUDED_de_polygonal_ds_IntHashSet

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_de_polygonal_ds_Set
#include <de/polygonal/ds/Set.h>
#endif
HX_DECLARE_CLASS3(de,polygonal,ds,Collection)
HX_DECLARE_CLASS3(de,polygonal,ds,Hashable)
HX_DECLARE_CLASS3(de,polygonal,ds,IntHashSet)
HX_DECLARE_CLASS3(de,polygonal,ds,IntHashSetIterator)
HX_DECLARE_CLASS3(de,polygonal,ds,Itr)
HX_DECLARE_CLASS3(de,polygonal,ds,Set)

namespace de{
namespace polygonal{
namespace ds{


class HXCPP_CLASS_ATTRIBUTES IntHashSet_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef IntHashSet_obj OBJ_;
		IntHashSet_obj();

	public:
		enum { _hx_ClassId = 0x33332838 };

		void __construct(int slotCount,hx::Null< int >  __o_initialCapacity);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="de.polygonal.ds.IntHashSet")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"de.polygonal.ds.IntHashSet"); }
		static hx::ObjectPtr< IntHashSet_obj > __new(int slotCount,hx::Null< int >  __o_initialCapacity);
		static hx::ObjectPtr< IntHashSet_obj > __alloc(hx::Ctx *_hx_ctx,int slotCount,hx::Null< int >  __o_initialCapacity);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~IntHashSet_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		bool unset_5889326f( ::Dynamic val);

		bool set_5889326f( ::Dynamic val);

		bool has_5889326f( ::Dynamic val);

		::cpp::VirtualArray toArray_615cc599();

		bool remove_5889326f( ::Dynamic val);

		bool contains_5889326f( ::Dynamic val);
		::String __ToString() const { return HX_HCSTRING("IntHashSet","\x65","\xa3","\x8c","\x5a"); }

		static void __boot();
		static int VAL_ABSENT;
		static int EMPTY_SLOT;
		static int NULL_POINTER;
		int key;
		int capacity;
		int growthRate;
		bool reuseIterator;
		Float get_loadFactor();
		::Dynamic get_loadFactor_dyn();

		int slotCount;
		::Array< int > mHash;
		::Array< int > mData;
		::Array< int > mNext;
		int mMask;
		int mFree;
		int mSize;
		int mMinCapacity;
		 ::de::polygonal::ds::IntHashSetIterator mIterator;
		int getCollisionCount();
		::Dynamic getCollisionCount_dyn();

		bool hasFront(int val);
		::Dynamic hasFront_dyn();

		 ::de::polygonal::ds::IntHashSet rehash(int slotCount);
		::Dynamic rehash_dyn();

		 ::de::polygonal::ds::IntHashSet pack();
		::Dynamic pack_dyn();

		 ::de::polygonal::ds::IntHashSet iter( ::Dynamic f);
		::Dynamic iter_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		int hashCode(int x);
		::Dynamic hashCode_dyn();

		void grow();
		::Dynamic grow_dyn();

		bool has(int val);
		::Dynamic has_dyn();

		bool set(int val);
		::Dynamic set_dyn();

		bool unset(int val);
		::Dynamic unset_dyn();

		int get_size();
		::Dynamic get_size_dyn();

		void free();
		::Dynamic free_dyn();

		bool contains(int val);
		::Dynamic contains_dyn();

		bool remove(int val);
		::Dynamic remove_dyn();

		void clear(hx::Null< bool >  gc);
		::Dynamic clear_dyn();

		::Dynamic iterator();
		::Dynamic iterator_dyn();

		bool isEmpty();
		::Dynamic isEmpty_dyn();

		::Array< int > toArray();
		::Dynamic toArray_dyn();

		::Dynamic clone(hx::Null< bool >  byRef, ::Dynamic copier);
		::Dynamic clone_dyn();

};

} // end namespace de
} // end namespace polygonal
} // end namespace ds

#endif /* INCLUDED_de_polygonal_ds_IntHashSet */ 
