// Generated by Haxe 3.4.7
#ifndef INCLUDED_de_polygonal_ds_tools_ArrayTools
#define INCLUDED_de_polygonal_ds_tools_ArrayTools

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(de,polygonal,ds,tools,ArrayTools)

namespace de{
namespace polygonal{
namespace ds{
namespace tools{


class HXCPP_CLASS_ATTRIBUTES ArrayTools_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ArrayTools_obj OBJ_;
		ArrayTools_obj();

	public:
		enum { _hx_ClassId = 0x3064aaca };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="de.polygonal.ds.tools.ArrayTools")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"de.polygonal.ds.tools.ArrayTools"); }

		hx::ObjectPtr< ArrayTools_obj > __new() {
			hx::ObjectPtr< ArrayTools_obj > __this = new ArrayTools_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ArrayTools_obj > __alloc(hx::Ctx *_hx_ctx) {
			ArrayTools_obj *__this = (ArrayTools_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ArrayTools_obj), false, "de.polygonal.ds.tools.ArrayTools"));
			*(void **)__this = ArrayTools_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ArrayTools_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ArrayTools","\xe2","\xad","\x0c","\x05"); }

		static ::cpp::VirtualArray alloc(int len);
		static ::Dynamic alloc_dyn();

		static ::cpp::VirtualArray trim(::cpp::VirtualArray a,int len);
		static ::Dynamic trim_dyn();

		static void swap(::cpp::VirtualArray array,int a,int b);
		static ::Dynamic swap_dyn();

		static  ::Dynamic getFront(::cpp::VirtualArray array,int index);
		static ::Dynamic getFront_dyn();

		static ::cpp::VirtualArray init(::cpp::VirtualArray a, ::Dynamic val,hx::Null< int >  first,hx::Null< int >  n);
		static ::Dynamic init_dyn();

		static void blit(::cpp::VirtualArray src,int srcPos,::cpp::VirtualArray dst,int dstPos,int n);
		static ::Dynamic blit_dyn();

		static void iter(::cpp::VirtualArray src, ::Dynamic f,hx::Null< int >  n);
		static ::Dynamic iter_dyn();

		static int binarySearchCmp(::cpp::VirtualArray a, ::Dynamic x,int min,int max, ::Dynamic comparator);
		static ::Dynamic binarySearchCmp_dyn();

		static int binarySearchf(::Array< Float > a,Float x,int min,int max);
		static ::Dynamic binarySearchf_dyn();

		static int binarySearchi(::Array< int > a,int x,int min,int max);
		static ::Dynamic binarySearchi_dyn();

		static void shuffle(::cpp::VirtualArray a,::Array< Float > rvals);
		static ::Dynamic shuffle_dyn();

		static void sortRange(::Array< Float > a, ::Dynamic cmp,bool useInsertionSort,int first,int n);
		static ::Dynamic sortRange_dyn();

		static ::Array< ::Dynamic> quickPerm(int n);
		static ::Dynamic quickPerm_dyn();

		static bool equals(::cpp::VirtualArray a,::cpp::VirtualArray b);
		static ::Dynamic equals_dyn();

		static ::Array< ::Dynamic> split(::cpp::VirtualArray a,int n,int k);
		static ::Dynamic split_dyn();

		static void _quickSort(::Array< Float > a,int first,int n, ::Dynamic cmp);
		static ::Dynamic _quickSort_dyn();

};

} // end namespace de
} // end namespace polygonal
} // end namespace ds
} // end namespace tools

#endif /* INCLUDED_de_polygonal_ds_tools_ArrayTools */ 
