// Generated by Haxe 3.4.7
#ifndef INCLUDED_de_polygonal_ds_HashTable
#define INCLUDED_de_polygonal_ds_HashTable

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_de_polygonal_ds_Map
#include <de/polygonal/ds/Map.h>
#endif
HX_DECLARE_CLASS3(de,polygonal,ds,Collection)
HX_DECLARE_CLASS3(de,polygonal,ds,HashTable)
HX_DECLARE_CLASS3(de,polygonal,ds,HashTableValIterator)
HX_DECLARE_CLASS3(de,polygonal,ds,Hashable)
HX_DECLARE_CLASS3(de,polygonal,ds,IntIntHashTable)
HX_DECLARE_CLASS3(de,polygonal,ds,Itr)
HX_DECLARE_CLASS3(de,polygonal,ds,Map)
HX_DECLARE_CLASS3(de,polygonal,ds,Set)

namespace de{
namespace polygonal{
namespace ds{


class HXCPP_CLASS_ATTRIBUTES HashTable_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef HashTable_obj OBJ_;
		HashTable_obj();

	public:
		enum { _hx_ClassId = 0x04bf03cd };

		void __construct(int slotCount,hx::Null< int >  __o_initialCapacity);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="de.polygonal.ds.HashTable")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"de.polygonal.ds.HashTable"); }
		static hx::ObjectPtr< HashTable_obj > __new(int slotCount,hx::Null< int >  __o_initialCapacity);
		static hx::ObjectPtr< HashTable_obj > __alloc(hx::Ctx *_hx_ctx,int slotCount,hx::Null< int >  __o_initialCapacity);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~HashTable_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("HashTable","\x40","\xcd","\x55","\xe1"); }

		int key;
		int capacity;
		Float get_loadFactor();
		::Dynamic get_loadFactor_dyn();

		int get_slotCount();
		::Dynamic get_slotCount_dyn();

		bool reuseIterator;
		int get_growthRate();
		::Dynamic get_growthRate_dyn();

		int set_growthRate(int value);
		::Dynamic set_growthRate_dyn();

		 ::de::polygonal::ds::IntIntHashTable mH;
		::cpp::VirtualArray mKeys;
		::cpp::VirtualArray mVals;
		::Array< int > mNext;
		int mFree;
		int mSize;
		int mMinCapacity;
		 ::de::polygonal::ds::HashTableValIterator mIterator;
		::Array< int > mTmpIntBuffer;
		::cpp::VirtualArray mTmpKeyBuffer;
		int getCollisionCount();
		::Dynamic getCollisionCount_dyn();

		 ::Dynamic getFront( ::Dynamic key);
		::Dynamic getFront_dyn();

		bool setIfAbsent( ::Dynamic key, ::Dynamic val);
		::Dynamic setIfAbsent_dyn();

		 ::de::polygonal::ds::HashTable rehash(int slotCount);
		::Dynamic rehash_dyn();

		bool remap( ::Dynamic key, ::Dynamic val);
		::Dynamic remap_dyn();

		::cpp::VirtualArray toKeyArray();
		::Dynamic toKeyArray_dyn();

		 ::de::polygonal::ds::HashTable pack();
		::Dynamic pack_dyn();

		 ::de::polygonal::ds::HashTable iter( ::Dynamic f);
		::Dynamic iter_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		void grow();
		::Dynamic grow_dyn();

		bool has( ::Dynamic val);
		::Dynamic has_dyn();

		bool hasKey( ::Dynamic key);
		::Dynamic hasKey_dyn();

		 ::Dynamic get( ::Dynamic key);
		::Dynamic get_dyn();

		int getAll( ::Dynamic key,::cpp::VirtualArray out);
		::Dynamic getAll_dyn();

		bool set( ::Dynamic key, ::Dynamic val);
		::Dynamic set_dyn();

		bool unset( ::Dynamic key);
		::Dynamic unset_dyn();

		::Dynamic toValSet();
		::Dynamic toValSet_dyn();

		::Dynamic toKeySet();
		::Dynamic toKeySet_dyn();

		::Dynamic keys();
		::Dynamic keys_dyn();

		int get_size();
		::Dynamic get_size_dyn();

		void free();
		::Dynamic free_dyn();

		bool contains( ::Dynamic val);
		::Dynamic contains_dyn();

		bool remove( ::Dynamic val);
		::Dynamic remove_dyn();

		void clear(hx::Null< bool >  gc);
		::Dynamic clear_dyn();

		::Dynamic iterator();
		::Dynamic iterator_dyn();

		bool isEmpty();
		::Dynamic isEmpty_dyn();

		::cpp::VirtualArray toArray();
		::Dynamic toArray_dyn();

		::Dynamic clone(hx::Null< bool >  byRef, ::Dynamic copier);
		::Dynamic clone_dyn();

};

} // end namespace de
} // end namespace polygonal
} // end namespace ds

#endif /* INCLUDED_de_polygonal_ds_HashTable */ 
