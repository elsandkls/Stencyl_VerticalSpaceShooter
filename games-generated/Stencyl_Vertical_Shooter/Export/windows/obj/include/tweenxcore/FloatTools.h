// Generated by Haxe 3.4.7
#ifndef INCLUDED_tweenxcore_FloatTools
#define INCLUDED_tweenxcore_FloatTools

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(tweenxcore,FloatTools)

namespace tweenxcore{


class HXCPP_CLASS_ATTRIBUTES FloatTools_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FloatTools_obj OBJ_;
		FloatTools_obj();

	public:
		enum { _hx_ClassId = 0x0ad8fd77 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="tweenxcore.FloatTools")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"tweenxcore.FloatTools"); }

		hx::ObjectPtr< FloatTools_obj > __new() {
			hx::ObjectPtr< FloatTools_obj > __this = new FloatTools_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< FloatTools_obj > __alloc(hx::Ctx *_hx_ctx) {
			FloatTools_obj *__this = (FloatTools_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FloatTools_obj), false, "tweenxcore.FloatTools"));
			*(void **)__this = FloatTools_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FloatTools_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FloatTools","\xff","\x6a","\x78","\x29"); }

		static Float revert(Float rate);
		static ::Dynamic revert_dyn();

		static Float clamp(Float value,hx::Null< Float >  min,hx::Null< Float >  max);
		static ::Dynamic clamp_dyn();

		static Float lerp(Float rate,Float from,Float to);
		static ::Dynamic lerp_dyn();

		static Float inverseLerp(Float value,Float from,Float to);
		static ::Dynamic inverseLerp_dyn();

		static Float repeat(Float value,hx::Null< Float >  from,hx::Null< Float >  to);
		static ::Dynamic repeat_dyn();

		static Float shake(Float rate,hx::Null< Float >  center, ::Dynamic randomFunc);
		static ::Dynamic shake_dyn();

		static Float spread(Float rate,Float scale);
		static ::Dynamic spread_dyn();

		static Float sinByRate(Float rate);
		static ::Dynamic sinByRate_dyn();

		static Float cosByRate(Float rate);
		static ::Dynamic cosByRate_dyn();

		static Float yoyo(Float rate, ::Dynamic easing);
		static ::Dynamic yoyo_dyn();

		static Float zigzag(Float rate, ::Dynamic easing);
		static ::Dynamic zigzag_dyn();

		static Float mixEasing(Float rate, ::Dynamic easing1, ::Dynamic easing2,hx::Null< Float >  easing2Strength);
		static ::Dynamic mixEasing_dyn();

		static Float crossfadeEasing(Float rate, ::Dynamic easing1, ::Dynamic easing2, ::Dynamic easing2StrengthEasing,hx::Null< Float >  easing2StrengthStart,hx::Null< Float >  easing2StrengthEnd);
		static ::Dynamic crossfadeEasing_dyn();

		static Float connectEasing(Float time, ::Dynamic easing1, ::Dynamic easing2,hx::Null< Float >  switchTime,hx::Null< Float >  switchValue);
		static ::Dynamic connectEasing_dyn();

		static Float oneTwoEasing(Float time, ::Dynamic easingOne, ::Dynamic easingTwo,hx::Null< Float >  switchTime);
		static ::Dynamic oneTwoEasing_dyn();

		static int binarySearch(::Array< Float > sortedValues,Float value,hx::Null< int >  boundaryMode);
		static ::Dynamic binarySearch_dyn();

		static Float polyline(Float rate,::Array< Float > values);
		static ::Dynamic polyline_dyn();

		static Float bezier2(Float rate,Float from,Float control,Float to);
		static ::Dynamic bezier2_dyn();

		static Float bezier3(Float rate,Float from,Float control1,Float control2,Float to);
		static ::Dynamic bezier3_dyn();

		static Float bezier(Float rate,::Array< Float > values);
		static ::Dynamic bezier_dyn();

		static Float _bezier(Float rate,::Array< Float > values);
		static ::Dynamic _bezier_dyn();

		static Float uniformQuadraticBSpline(Float rate,::Array< Float > values);
		static ::Dynamic uniformQuadraticBSpline_dyn();

		static Float frameToSecond(Float frame,Float fps);
		static ::Dynamic frameToSecond_dyn();

		static Float secondToFrame(Float second,Float fps);
		static ::Dynamic secondToFrame_dyn();

		static Float degreeToRate(Float degree);
		static ::Dynamic degreeToRate_dyn();

		static Float rateToDegree(Float rate);
		static ::Dynamic rateToDegree_dyn();

		static Float radianToRate(Float radian);
		static ::Dynamic radianToRate_dyn();

		static Float rateToRadian(Float rate);
		static ::Dynamic rateToRadian_dyn();

		static Float millisecondToBeat(Float millisecond,Float bpm);
		static ::Dynamic millisecondToBeat_dyn();

		static Float beatToMillisecond(Float beat,Float bpm);
		static ::Dynamic beatToMillisecond_dyn();

};

} // end namespace tweenxcore

#endif /* INCLUDED_tweenxcore_FloatTools */ 
