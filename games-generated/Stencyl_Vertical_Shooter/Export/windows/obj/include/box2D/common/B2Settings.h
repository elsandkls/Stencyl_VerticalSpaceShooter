// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_common_B2Settings
#define INCLUDED_box2D_common_B2Settings

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,common,B2Settings)

namespace box2D{
namespace common{


class HXCPP_CLASS_ATTRIBUTES B2Settings_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2Settings_obj OBJ_;
		B2Settings_obj();

	public:
		enum { _hx_ClassId = 0x55501c17 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="box2D.common.B2Settings")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"box2D.common.B2Settings"); }

		hx::ObjectPtr< B2Settings_obj > __new() {
			hx::ObjectPtr< B2Settings_obj > __this = new B2Settings_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< B2Settings_obj > __alloc(hx::Ctx *_hx_ctx) {
			B2Settings_obj *__this = (B2Settings_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Settings_obj), false, "box2D.common.B2Settings"));
			*(void **)__this = B2Settings_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2Settings_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2Settings","\xb3","\xa2","\x48","\x2b"); }

		static void __boot();
		static ::String VERSION;
		static Float b2_pi;
		static int b2_maxManifoldPoints;
		static Float b2_aabbExtension;
		static Float b2_aabbMultiplier;
		static Float b2_linearSlop;
		static Float b2_polygonRadius;
		static Float b2_angularSlop;
		static Float b2_toiSlop;
		static int b2_maxTOIContactsPerIsland;
		static int b2_maxTOIJointsPerIsland;
		static Float b2_velocityThreshold;
		static Float b2_maxLinearCorrection;
		static Float b2_maxAngularCorrection;
		static Float b2_maxTranslation;
		static Float b2_maxTranslationSquared;
		static Float b2_maxRotation;
		static Float b2_maxRotationSquared;
		static Float b2_contactBaumgarte;
		static Float b2MixFriction(Float friction1,Float friction2);
		static ::Dynamic b2MixFriction_dyn();

		static Float b2MixRestitution(Float restitution1,Float restitution2);
		static ::Dynamic b2MixRestitution_dyn();

		static Float b2_timeToSleep;
		static Float b2_linearSleepTolerance;
		static Float b2_angularSleepTolerance;
		static void b2Assert(bool a);
		static ::Dynamic b2Assert_dyn();

};

} // end namespace box2D
} // end namespace common

#endif /* INCLUDED_box2D_common_B2Settings */ 
