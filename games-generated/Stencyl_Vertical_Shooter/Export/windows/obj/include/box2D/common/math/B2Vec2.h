// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_common_math_B2Vec2
#define INCLUDED_box2D_common_math_B2Vec2

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(box2D,common,math,B2Mat22)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)

namespace box2D{
namespace common{
namespace math{


class HXCPP_CLASS_ATTRIBUTES B2Vec2_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2Vec2_obj OBJ_;
		B2Vec2_obj();

	public:
		enum { _hx_ClassId = 0x54ce01fe };

		void __construct(hx::Null< Float >  __o_x_,hx::Null< Float >  __o_y_);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="box2D.common.math.B2Vec2")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"box2D.common.math.B2Vec2"); }
		static hx::ObjectPtr< B2Vec2_obj > __new(hx::Null< Float >  __o_x_,hx::Null< Float >  __o_y_);
		static hx::ObjectPtr< B2Vec2_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x_,hx::Null< Float >  __o_y_);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2Vec2_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2Vec2","\x2e","\x25","\xbc","\x66"); }

		static void __boot();
		static  ::box2D::common::math::B2Vec2 make(Float x_,Float y_);
		static ::Dynamic make_dyn();

		static ::Array< ::Dynamic> pool;
		static int pooli;
		static void freePool();
		static ::Dynamic freePool_dyn();

		static  ::box2D::common::math::B2Vec2 getFromPool();
		static ::Dynamic getFromPool_dyn();

		void setZero();
		::Dynamic setZero_dyn();

		void set(hx::Null< Float >  x_,hx::Null< Float >  y_);
		::Dynamic set_dyn();

		void setV( ::box2D::common::math::B2Vec2 v);
		::Dynamic setV_dyn();

		 ::box2D::common::math::B2Vec2 getNegative();
		::Dynamic getNegative_dyn();

		 ::box2D::common::math::B2Vec2 getNegativePooled();
		::Dynamic getNegativePooled_dyn();

		void negativeSelf();
		::Dynamic negativeSelf_dyn();

		 ::box2D::common::math::B2Vec2 copy(hx::Null< bool >  fromPool);
		::Dynamic copy_dyn();

		void add( ::box2D::common::math::B2Vec2 v);
		::Dynamic add_dyn();

		void subtract( ::box2D::common::math::B2Vec2 v);
		::Dynamic subtract_dyn();

		void multiply(Float a);
		::Dynamic multiply_dyn();

		void mulM( ::box2D::common::math::B2Mat22 A);
		::Dynamic mulM_dyn();

		void mulTM( ::box2D::common::math::B2Mat22 A);
		::Dynamic mulTM_dyn();

		void crossVF(Float s);
		::Dynamic crossVF_dyn();

		void crossFV(Float s);
		::Dynamic crossFV_dyn();

		void minV( ::box2D::common::math::B2Vec2 b);
		::Dynamic minV_dyn();

		void maxV( ::box2D::common::math::B2Vec2 b);
		::Dynamic maxV_dyn();

		void abs();
		::Dynamic abs_dyn();

		Float length();
		::Dynamic length_dyn();

		Float lengthSquared();
		::Dynamic lengthSquared_dyn();

		Float normalize();
		::Dynamic normalize_dyn();

		Float perpDot( ::box2D::common::math::B2Vec2 b);
		::Dynamic perpDot_dyn();

		Float winding( ::box2D::common::math::B2Vec2 b, ::box2D::common::math::B2Vec2 c);
		::Dynamic winding_dyn();

		bool isValid();
		::Dynamic isValid_dyn();

		Float x;
		Float y;
		virtual ::String toString();
		::Dynamic toString_dyn();

		void reset();
		::Dynamic reset_dyn();

};

} // end namespace box2D
} // end namespace common
} // end namespace math

#endif /* INCLUDED_box2D_common_math_B2Vec2 */ 
