// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_common_math_B2Vec3
#define INCLUDED_box2D_common_math_B2Vec3

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_eeaf305335253a6b_32_new)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec3)

namespace box2D{
namespace common{
namespace math{


class HXCPP_CLASS_ATTRIBUTES B2Vec3_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2Vec3_obj OBJ_;
		B2Vec3_obj();

	public:
		enum { _hx_ClassId = 0x54ce01ff };

		void __construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="box2D.common.math.B2Vec3")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"box2D.common.math.B2Vec3"); }

		hx::ObjectPtr< B2Vec3_obj > __new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z) {
			hx::ObjectPtr< B2Vec3_obj > __this = new B2Vec3_obj();
			__this->__construct(__o_x,__o_y,__o_z);
			return __this;
		}

		static hx::ObjectPtr< B2Vec3_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z) {
			B2Vec3_obj *__this = (B2Vec3_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Vec3_obj), false, "box2D.common.math.B2Vec3"));
			*(void **)__this = B2Vec3_obj::_hx_vtable;
{
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float z = __o_z.Default(0);
            	HX_STACKFRAME(&_hx_pos_eeaf305335253a6b_32_new)
HXLINE(  33)		( ( ::box2D::common::math::B2Vec3)(__this) )->x = x;
HXLINE(  34)		( ( ::box2D::common::math::B2Vec3)(__this) )->y = y;
HXLINE(  35)		( ( ::box2D::common::math::B2Vec3)(__this) )->z = z;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2Vec3_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2Vec3","\x2f","\x25","\xbc","\x66"); }

		void setZero();
		::Dynamic setZero_dyn();

		void set(Float x,Float y,Float z);
		::Dynamic set_dyn();

		void setV( ::box2D::common::math::B2Vec3 v);
		::Dynamic setV_dyn();

		 ::box2D::common::math::B2Vec3 getNegative();
		::Dynamic getNegative_dyn();

		void negativeSelf();
		::Dynamic negativeSelf_dyn();

		 ::box2D::common::math::B2Vec3 copy();
		::Dynamic copy_dyn();

		void add( ::box2D::common::math::B2Vec3 v);
		::Dynamic add_dyn();

		void subtract( ::box2D::common::math::B2Vec3 v);
		::Dynamic subtract_dyn();

		void multiply(Float a);
		::Dynamic multiply_dyn();

		Float x;
		Float y;
		Float z;
};

} // end namespace box2D
} // end namespace common
} // end namespace math

#endif /* INCLUDED_box2D_common_math_B2Vec3 */ 
