// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_collision_shapes_B2CircleShape
#define INCLUDED_box2D_collision_shapes_B2CircleShape

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
HX_DECLARE_CLASS2(box2D,collision,B2AABB)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastInput)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastOutput)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2CircleShape)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2MassData)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Transform)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)

namespace box2D{
namespace collision{
namespace shapes{


class HXCPP_CLASS_ATTRIBUTES B2CircleShape_obj : public  ::box2D::collision::shapes::B2Shape_obj
{
	public:
		typedef  ::box2D::collision::shapes::B2Shape_obj super;
		typedef B2CircleShape_obj OBJ_;
		B2CircleShape_obj();

	public:
		enum { _hx_ClassId = 0x1c30786e };

		void __construct(hx::Null< Float >  __o_radius);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.collision.shapes.B2CircleShape")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.collision.shapes.B2CircleShape"); }
		static hx::ObjectPtr< B2CircleShape_obj > __new(hx::Null< Float >  __o_radius);
		static hx::ObjectPtr< B2CircleShape_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_radius);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2CircleShape_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2CircleShape","\x21","\xc3","\x2b","\x76"); }

		 ::box2D::collision::shapes::B2Shape copy();

		void set( ::box2D::collision::shapes::B2Shape other);

		bool testPoint( ::box2D::common::math::B2Transform transform, ::box2D::common::math::B2Vec2 p);

		bool rayCast( ::box2D::collision::B2RayCastOutput output, ::box2D::collision::B2RayCastInput input, ::box2D::common::math::B2Transform transform);

		void computeAABB( ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Transform transform);

		void computeMass( ::box2D::collision::shapes::B2MassData massData,Float density);

		Float computeSubmergedArea( ::box2D::common::math::B2Vec2 normal,Float offset, ::box2D::common::math::B2Transform xf, ::box2D::common::math::B2Vec2 c);

		 ::box2D::common::math::B2Vec2 getLocalPosition();
		::Dynamic getLocalPosition_dyn();

		void setLocalPosition( ::box2D::common::math::B2Vec2 position);
		::Dynamic setLocalPosition_dyn();

		Float getRadius();
		::Dynamic getRadius_dyn();

		void setRadius(Float radius);
		::Dynamic setRadius_dyn();

		 ::box2D::common::math::B2Vec2 m_p;
};

} // end namespace box2D
} // end namespace collision
} // end namespace shapes

#endif /* INCLUDED_box2D_collision_shapes_B2CircleShape */ 
