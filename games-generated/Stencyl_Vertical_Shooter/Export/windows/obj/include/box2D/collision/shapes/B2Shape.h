// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#define INCLUDED_box2D_collision_shapes_B2Shape

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,collision,B2AABB)
HX_DECLARE_CLASS2(box2D,collision,B2DistanceInput)
HX_DECLARE_CLASS2(box2D,collision,B2DistanceOutput)
HX_DECLARE_CLASS2(box2D,collision,B2DistanceProxy)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastInput)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastOutput)
HX_DECLARE_CLASS2(box2D,collision,B2SimplexCache)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2MassData)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Transform)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)

namespace box2D{
namespace collision{
namespace shapes{


class HXCPP_CLASS_ATTRIBUTES B2Shape_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2Shape_obj OBJ_;
		B2Shape_obj();

	public:
		enum { _hx_ClassId = 0x19eeb38a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="box2D.collision.shapes.B2Shape")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"box2D.collision.shapes.B2Shape"); }
		static hx::ObjectPtr< B2Shape_obj > __new();
		static hx::ObjectPtr< B2Shape_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2Shape_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2Shape","\x51","\xfb","\xaa","\xc5"); }

		static void __boot();
		static bool testOverlap( ::box2D::collision::shapes::B2Shape shape1, ::box2D::common::math::B2Transform transform1, ::box2D::collision::shapes::B2Shape shape2, ::box2D::common::math::B2Transform transform2);
		static ::Dynamic testOverlap_dyn();

		static bool initialized;
		static  ::box2D::collision::B2DistanceInput distanceInput;
		static  ::box2D::collision::B2DistanceProxy proxyA;
		static  ::box2D::collision::B2DistanceProxy proxyB;
		static  ::box2D::collision::B2SimplexCache simplexCache;
		static  ::box2D::collision::B2DistanceOutput distanceOutput;
		static int e_unknownShape;
		static int e_circleShape;
		static int e_polygonShape;
		static int e_edgeShape;
		static int e_shapeTypeCount;
		static int e_hitCollide;
		static int e_missCollide;
		static int e_startsInsideCollide;
		virtual  ::box2D::collision::shapes::B2Shape copy();
		::Dynamic copy_dyn();

		virtual void set( ::box2D::collision::shapes::B2Shape other);
		::Dynamic set_dyn();

		int getType();
		::Dynamic getType_dyn();

		virtual bool testPoint( ::box2D::common::math::B2Transform xf, ::box2D::common::math::B2Vec2 p);
		::Dynamic testPoint_dyn();

		virtual bool rayCast( ::box2D::collision::B2RayCastOutput output, ::box2D::collision::B2RayCastInput input, ::box2D::common::math::B2Transform transform);
		::Dynamic rayCast_dyn();

		virtual void computeAABB( ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Transform xf);
		::Dynamic computeAABB_dyn();

		virtual void computeMass( ::box2D::collision::shapes::B2MassData massData,Float density);
		::Dynamic computeMass_dyn();

		virtual Float computeSubmergedArea( ::box2D::common::math::B2Vec2 normal,Float offset, ::box2D::common::math::B2Transform xf, ::box2D::common::math::B2Vec2 c);
		::Dynamic computeSubmergedArea_dyn();

		int m_type;
		Float m_radius;
};

} // end namespace box2D
} // end namespace collision
} // end namespace shapes

#endif /* INCLUDED_box2D_collision_shapes_B2Shape */ 
