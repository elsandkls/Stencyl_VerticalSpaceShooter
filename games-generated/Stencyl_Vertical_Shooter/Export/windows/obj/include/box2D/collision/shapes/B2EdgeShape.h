// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_collision_shapes_B2EdgeShape
#define INCLUDED_box2D_collision_shapes_B2EdgeShape

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
HX_DECLARE_CLASS2(box2D,collision,B2AABB)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastInput)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastOutput)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2EdgeShape)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2MassData)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Transform)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)

namespace box2D{
namespace collision{
namespace shapes{


class HXCPP_CLASS_ATTRIBUTES B2EdgeShape_obj : public  ::box2D::collision::shapes::B2Shape_obj
{
	public:
		typedef  ::box2D::collision::shapes::B2Shape_obj super;
		typedef B2EdgeShape_obj OBJ_;
		B2EdgeShape_obj();

	public:
		enum { _hx_ClassId = 0x1f4c50c5 };

		void __construct( ::box2D::common::math::B2Vec2 v1, ::box2D::common::math::B2Vec2 v2);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.collision.shapes.B2EdgeShape")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.collision.shapes.B2EdgeShape"); }
		static hx::ObjectPtr< B2EdgeShape_obj > __new( ::box2D::common::math::B2Vec2 v1, ::box2D::common::math::B2Vec2 v2);
		static hx::ObjectPtr< B2EdgeShape_obj > __alloc(hx::Ctx *_hx_ctx, ::box2D::common::math::B2Vec2 v1, ::box2D::common::math::B2Vec2 v2);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2EdgeShape_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2EdgeShape","\xd4","\x7d","\x21","\x27"); }

		bool testPoint( ::box2D::common::math::B2Transform transform, ::box2D::common::math::B2Vec2 p);

		bool rayCast( ::box2D::collision::B2RayCastOutput output, ::box2D::collision::B2RayCastInput input, ::box2D::common::math::B2Transform transform);

		void computeAABB( ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Transform transform);

		void computeMass( ::box2D::collision::shapes::B2MassData massData,Float density);

		Float computeSubmergedArea( ::box2D::common::math::B2Vec2 normal,Float offset, ::box2D::common::math::B2Transform xf, ::box2D::common::math::B2Vec2 c);

		Float getLength();
		::Dynamic getLength_dyn();

		 ::box2D::common::math::B2Vec2 getVertex1();
		::Dynamic getVertex1_dyn();

		 ::box2D::common::math::B2Vec2 getVertex2();
		::Dynamic getVertex2_dyn();

		 ::box2D::common::math::B2Vec2 getCoreVertex1();
		::Dynamic getCoreVertex1_dyn();

		 ::box2D::common::math::B2Vec2 getCoreVertex2();
		::Dynamic getCoreVertex2_dyn();

		 ::box2D::common::math::B2Vec2 getNormalVector();
		::Dynamic getNormalVector_dyn();

		 ::box2D::common::math::B2Vec2 getDirectionVector();
		::Dynamic getDirectionVector_dyn();

		 ::box2D::common::math::B2Vec2 getCorner1Vector();
		::Dynamic getCorner1Vector_dyn();

		 ::box2D::common::math::B2Vec2 getCorner2Vector();
		::Dynamic getCorner2Vector_dyn();

		bool corner1IsConvex();
		::Dynamic corner1IsConvex_dyn();

		bool corner2IsConvex();
		::Dynamic corner2IsConvex_dyn();

		 ::box2D::common::math::B2Vec2 getFirstVertex( ::box2D::common::math::B2Transform xf);
		::Dynamic getFirstVertex_dyn();

		 ::box2D::collision::shapes::B2EdgeShape getNextEdge();
		::Dynamic getNextEdge_dyn();

		 ::box2D::collision::shapes::B2EdgeShape getPrevEdge();
		::Dynamic getPrevEdge_dyn();

		 ::box2D::common::math::B2Vec2 s_supportVec;
		 ::box2D::common::math::B2Vec2 support( ::box2D::common::math::B2Transform xf,Float dX,Float dY);
		::Dynamic support_dyn();

		 ::box2D::collision::shapes::B2Shape copy();

		void setPrevEdge( ::box2D::collision::shapes::B2EdgeShape edge, ::box2D::common::math::B2Vec2 core, ::box2D::common::math::B2Vec2 cornerDir,bool convex);
		::Dynamic setPrevEdge_dyn();

		void setNextEdge( ::box2D::collision::shapes::B2EdgeShape edge, ::box2D::common::math::B2Vec2 core, ::box2D::common::math::B2Vec2 cornerDir,bool convex);
		::Dynamic setNextEdge_dyn();

		 ::box2D::common::math::B2Vec2 m_v1;
		 ::box2D::common::math::B2Vec2 m_v2;
		 ::box2D::common::math::B2Vec2 m_v0;
		 ::box2D::common::math::B2Vec2 m_v3;
		bool m_hasVertex0;
		bool m_hasVertex3;
		 ::box2D::common::math::B2Vec2 m_coreV1;
		 ::box2D::common::math::B2Vec2 m_coreV2;
		Float m_length;
		 ::box2D::common::math::B2Vec2 m_normal;
		 ::box2D::common::math::B2Vec2 m_direction;
		 ::box2D::common::math::B2Vec2 m_cornerDir1;
		 ::box2D::common::math::B2Vec2 m_cornerDir2;
		bool m_cornerConvex1;
		bool m_cornerConvex2;
		 ::box2D::collision::shapes::B2EdgeShape m_nextEdge;
		 ::box2D::collision::shapes::B2EdgeShape m_prevEdge;
};

} // end namespace box2D
} // end namespace collision
} // end namespace shapes

#endif /* INCLUDED_box2D_collision_shapes_B2EdgeShape */ 
