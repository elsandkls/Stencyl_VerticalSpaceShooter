// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_collision_B2Collision
#define INCLUDED_box2D_collision_B2Collision

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,collision,B2AABB)
HX_DECLARE_CLASS2(box2D,collision,B2Collision)
HX_DECLARE_CLASS2(box2D,collision,B2Manifold)
HX_DECLARE_CLASS2(box2D,collision,ClipVertex)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2CircleShape)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2PolygonShape)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Transform)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)

namespace box2D{
namespace collision{


class HXCPP_CLASS_ATTRIBUTES B2Collision_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2Collision_obj OBJ_;
		B2Collision_obj();

	public:
		enum { _hx_ClassId = 0x071913a9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="box2D.collision.B2Collision")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"box2D.collision.B2Collision"); }

		hx::ObjectPtr< B2Collision_obj > __new() {
			hx::ObjectPtr< B2Collision_obj > __this = new B2Collision_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< B2Collision_obj > __alloc(hx::Ctx *_hx_ctx) {
			B2Collision_obj *__this = (B2Collision_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Collision_obj), false, "box2D.collision.B2Collision"));
			*(void **)__this = B2Collision_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2Collision_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2Collision","\xa2","\x98","\xf0","\x44"); }

		static void __boot();
		static int b2_nullFeature;
		static int clipSegmentToLine(::Array< ::Dynamic> vOut,::Array< ::Dynamic> vIn, ::box2D::common::math::B2Vec2 normal,Float offset);
		static ::Dynamic clipSegmentToLine_dyn();

		static Float edgeSeparation( ::box2D::collision::shapes::B2PolygonShape poly1, ::box2D::common::math::B2Transform xf1,int edge1, ::box2D::collision::shapes::B2PolygonShape poly2, ::box2D::common::math::B2Transform xf2);
		static ::Dynamic edgeSeparation_dyn();

		static Float findMaxSeparation(::Array< int > edgeIndex, ::box2D::collision::shapes::B2PolygonShape poly1, ::box2D::common::math::B2Transform xf1, ::box2D::collision::shapes::B2PolygonShape poly2, ::box2D::common::math::B2Transform xf2);
		static ::Dynamic findMaxSeparation_dyn();

		static void findIncidentEdge(::Array< ::Dynamic> c, ::box2D::collision::shapes::B2PolygonShape poly1, ::box2D::common::math::B2Transform xf1,int edge1, ::box2D::collision::shapes::B2PolygonShape poly2, ::box2D::common::math::B2Transform xf2);
		static ::Dynamic findIncidentEdge_dyn();

		static ::Array< ::Dynamic> makeClipPointVector();
		static ::Dynamic makeClipPointVector_dyn();

		static ::Array< ::Dynamic> s_incidentEdge;
		static ::Array< ::Dynamic> s_clipPoints1;
		static ::Array< ::Dynamic> s_clipPoints2;
		static ::Array< int > s_edgeAO;
		static ::Array< int > s_edgeBO;
		static  ::box2D::common::math::B2Vec2 s_localTangent;
		static  ::box2D::common::math::B2Vec2 s_localNormal;
		static  ::box2D::common::math::B2Vec2 s_planePoint;
		static  ::box2D::common::math::B2Vec2 s_normal;
		static  ::box2D::common::math::B2Vec2 s_tangent;
		static  ::box2D::common::math::B2Vec2 s_tangent2;
		static  ::box2D::common::math::B2Vec2 s_v11;
		static  ::box2D::common::math::B2Vec2 s_v12;
		static  ::box2D::common::math::B2Vec2 b2CollidePolyTempVec;
		static void collidePolygons( ::box2D::collision::B2Manifold manifold, ::box2D::collision::shapes::B2PolygonShape polyA, ::box2D::common::math::B2Transform xfA, ::box2D::collision::shapes::B2PolygonShape polyB, ::box2D::common::math::B2Transform xfB);
		static ::Dynamic collidePolygons_dyn();

		static void collideCircles( ::box2D::collision::B2Manifold manifold, ::box2D::collision::shapes::B2CircleShape circle1, ::box2D::common::math::B2Transform xf1, ::box2D::collision::shapes::B2CircleShape circle2, ::box2D::common::math::B2Transform xf2);
		static ::Dynamic collideCircles_dyn();

		static void collidePolygonAndCircle( ::box2D::collision::B2Manifold manifold, ::box2D::collision::shapes::B2PolygonShape polygon, ::box2D::common::math::B2Transform xf1, ::box2D::collision::shapes::B2CircleShape circle, ::box2D::common::math::B2Transform xf2);
		static ::Dynamic collidePolygonAndCircle_dyn();

		static bool testOverlap( ::box2D::collision::B2AABB a, ::box2D::collision::B2AABB b);
		static ::Dynamic testOverlap_dyn();

};

} // end namespace box2D
} // end namespace collision

#endif /* INCLUDED_box2D_collision_B2Collision */ 
