// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_collision_IBroadPhase
#define INCLUDED_box2D_collision_IBroadPhase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,collision,B2AABB)
HX_DECLARE_CLASS2(box2D,collision,B2DynamicTreeNode)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastInput)
HX_DECLARE_CLASS2(box2D,collision,IBroadPhase)
HX_DECLARE_CLASS2(box2D,collision,QueryCallback)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2ContactManager)
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)

namespace box2D{
namespace collision{


class HXCPP_CLASS_ATTRIBUTES IBroadPhase_obj {
	public:
		typedef hx::Object super;
		HX_DO_INTERFACE_RTTI;

		 ::box2D::collision::B2DynamicTreeNode (hx::Object :: *_hx_createProxy)( ::box2D::collision::B2AABB aabb, ::box2D::dynamics::B2Fixture userData); 
		static inline  ::box2D::collision::B2DynamicTreeNode createProxy( ::Dynamic _hx_, ::box2D::collision::B2AABB aabb, ::box2D::dynamics::B2Fixture userData) {
			return (_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_createProxy)(aabb,userData);
		}
		void (hx::Object :: *_hx_destroyProxy)( ::box2D::collision::B2DynamicTreeNode proxy); 
		static inline void destroyProxy( ::Dynamic _hx_, ::box2D::collision::B2DynamicTreeNode proxy) {
			(_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_destroyProxy)(proxy);
		}
		void (hx::Object :: *_hx_moveProxy)( ::box2D::collision::B2DynamicTreeNode proxy, ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Vec2 displacement); 
		static inline void moveProxy( ::Dynamic _hx_, ::box2D::collision::B2DynamicTreeNode proxy, ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Vec2 displacement) {
			(_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_moveProxy)(proxy,aabb,displacement);
		}
		bool (hx::Object :: *_hx_testOverlap)( ::box2D::collision::B2DynamicTreeNode proxyA, ::box2D::collision::B2DynamicTreeNode proxyB); 
		static inline bool testOverlap( ::Dynamic _hx_, ::box2D::collision::B2DynamicTreeNode proxyA, ::box2D::collision::B2DynamicTreeNode proxyB) {
			return (_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_testOverlap)(proxyA,proxyB);
		}
		 ::box2D::dynamics::B2Fixture (hx::Object :: *_hx_getUserData)( ::box2D::collision::B2DynamicTreeNode proxy); 
		static inline  ::box2D::dynamics::B2Fixture getUserData( ::Dynamic _hx_, ::box2D::collision::B2DynamicTreeNode proxy) {
			return (_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_getUserData)(proxy);
		}
		 ::box2D::collision::B2AABB (hx::Object :: *_hx_getFatAABB)( ::box2D::collision::B2DynamicTreeNode proxy); 
		static inline  ::box2D::collision::B2AABB getFatAABB( ::Dynamic _hx_, ::box2D::collision::B2DynamicTreeNode proxy) {
			return (_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_getFatAABB)(proxy);
		}
		int (hx::Object :: *_hx_getProxyCount)(); 
		static inline int getProxyCount( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_getProxyCount)();
		}
		void (hx::Object :: *_hx_updatePairs)( ::box2D::dynamics::B2ContactManager manager); 
		static inline void updatePairs( ::Dynamic _hx_, ::box2D::dynamics::B2ContactManager manager) {
			(_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_updatePairs)(manager);
		}
		void (hx::Object :: *_hx_query)(::Dynamic callbackMethod, ::box2D::collision::B2AABB aabb); 
		static inline void query( ::Dynamic _hx_,::Dynamic callbackMethod, ::box2D::collision::B2AABB aabb) {
			(_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_query)(callbackMethod,aabb);
		}
		void (hx::Object :: *_hx_rayCast)( ::Dynamic callbackMethod, ::box2D::collision::B2RayCastInput input); 
		static inline void rayCast( ::Dynamic _hx_, ::Dynamic callbackMethod, ::box2D::collision::B2RayCastInput input) {
			(_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_rayCast)(callbackMethod,input);
		}
		void (hx::Object :: *_hx_validate)(); 
		static inline void validate( ::Dynamic _hx_) {
			(_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_validate)();
		}
		void (hx::Object :: *_hx_rebalance)(int iterations); 
		static inline void rebalance( ::Dynamic _hx_,int iterations) {
			(_hx_.mPtr->*( static_cast< ::box2D::collision::IBroadPhase_obj *>(_hx_.mPtr->_hx_getInterface(0xc33f592d)))->_hx_rebalance)(iterations);
		}
};

} // end namespace box2D
} // end namespace collision

#endif /* INCLUDED_box2D_collision_IBroadPhase */ 
