// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_collision_shapes_B2PolygonShape
#define INCLUDED_box2D_collision_shapes_B2PolygonShape

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
HX_DECLARE_CLASS2(box2D,collision,B2AABB)
HX_DECLARE_CLASS2(box2D,collision,B2OBB)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastInput)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastOutput)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2MassData)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2PolygonShape)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Mat22)
HX_DECLARE_CLASS3(box2D,common,math,B2Transform)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)

namespace box2D{
namespace collision{
namespace shapes{


class HXCPP_CLASS_ATTRIBUTES B2PolygonShape_obj : public  ::box2D::collision::shapes::B2Shape_obj
{
	public:
		typedef  ::box2D::collision::shapes::B2Shape_obj super;
		typedef B2PolygonShape_obj OBJ_;
		B2PolygonShape_obj();

	public:
		enum { _hx_ClassId = 0x2e1514fe };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.collision.shapes.B2PolygonShape")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.collision.shapes.B2PolygonShape"); }
		static hx::ObjectPtr< B2PolygonShape_obj > __new();
		static hx::ObjectPtr< B2PolygonShape_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2PolygonShape_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2PolygonShape","\x17","\x64","\xb6","\x25"); }

		static void __boot();
		static  ::box2D::collision::shapes::B2PolygonShape asArray(::cpp::VirtualArray vertices,int vertexCount);
		static ::Dynamic asArray_dyn();

		static  ::box2D::collision::shapes::B2PolygonShape asVector(::Array< ::Dynamic> vertices,int vertexCount);
		static ::Dynamic asVector_dyn();

		static  ::box2D::collision::shapes::B2PolygonShape asBox(Float hx,Float hy);
		static ::Dynamic asBox_dyn();

		static  ::box2D::common::math::B2Mat22 s_mat;
		static  ::box2D::collision::shapes::B2PolygonShape asOrientedBox(Float hx,Float hy, ::box2D::common::math::B2Vec2 center,hx::Null< Float >  angle);
		static ::Dynamic asOrientedBox_dyn();

		static  ::box2D::collision::shapes::B2PolygonShape asEdge( ::box2D::common::math::B2Vec2 v1, ::box2D::common::math::B2Vec2 v2);
		static ::Dynamic asEdge_dyn();

		static  ::box2D::common::math::B2Vec2 computeCentroid(::Array< ::Dynamic> vs,int count);
		static ::Dynamic computeCentroid_dyn();

		static void computeOBB( ::box2D::collision::B2OBB obb,::Array< ::Dynamic> vs,int count);
		static ::Dynamic computeOBB_dyn();

		 ::box2D::collision::shapes::B2Shape copy();

		void set( ::box2D::collision::shapes::B2Shape other);

		void setAsArray(::cpp::VirtualArray vertices,hx::Null< int >  vertexCount);
		::Dynamic setAsArray_dyn();

		void setAsVector(::Array< ::Dynamic> vertices,hx::Null< int >  vertexCount);
		::Dynamic setAsVector_dyn();

		void setAsBox(Float hx,Float hy);
		::Dynamic setAsBox_dyn();

		void setAsOrientedBox(Float hx,Float hy, ::box2D::common::math::B2Vec2 center,hx::Null< Float >  angle);
		::Dynamic setAsOrientedBox_dyn();

		void setAsEdge( ::box2D::common::math::B2Vec2 v1, ::box2D::common::math::B2Vec2 v2);
		::Dynamic setAsEdge_dyn();

		bool testPoint( ::box2D::common::math::B2Transform xf, ::box2D::common::math::B2Vec2 p);

		bool rayCast( ::box2D::collision::B2RayCastOutput output, ::box2D::collision::B2RayCastInput input, ::box2D::common::math::B2Transform transform);

		void computeAABB( ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Transform xf);

		void computeMass( ::box2D::collision::shapes::B2MassData massData,Float density);

		Float computeSubmergedArea( ::box2D::common::math::B2Vec2 normal,Float offset, ::box2D::common::math::B2Transform xf, ::box2D::common::math::B2Vec2 c);

		int getVertexCount();
		::Dynamic getVertexCount_dyn();

		::Array< ::Dynamic> getVertices();
		::Dynamic getVertices_dyn();

		::Array< ::Dynamic> getNormals();
		::Dynamic getNormals_dyn();

		int getSupport( ::box2D::common::math::B2Vec2 d);
		::Dynamic getSupport_dyn();

		 ::box2D::common::math::B2Vec2 getSupportVertex( ::box2D::common::math::B2Vec2 d);
		::Dynamic getSupportVertex_dyn();

		bool validate();
		::Dynamic validate_dyn();

		void reserve(int count);
		::Dynamic reserve_dyn();

		 ::box2D::common::math::B2Vec2 m_centroid;
		::Array< ::Dynamic> m_vertices;
		::Array< ::Dynamic> m_normals;
		int m_vertexCount;
};

} // end namespace box2D
} // end namespace collision
} // end namespace shapes

#endif /* INCLUDED_box2D_collision_shapes_B2PolygonShape */ 
