// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_collision_B2DynamicTree
#define INCLUDED_box2D_collision_B2DynamicTree

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,collision,B2AABB)
HX_DECLARE_CLASS2(box2D,collision,B2DynamicTree)
HX_DECLARE_CLASS2(box2D,collision,B2DynamicTreeNode)
HX_DECLARE_CLASS2(box2D,collision,B2RayCastInput)
HX_DECLARE_CLASS2(box2D,collision,QueryCallback)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)

namespace box2D{
namespace collision{


class HXCPP_CLASS_ATTRIBUTES B2DynamicTree_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2DynamicTree_obj OBJ_;
		B2DynamicTree_obj();

	public:
		enum { _hx_ClassId = 0x24af6f58 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.collision.B2DynamicTree")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.collision.B2DynamicTree"); }
		static hx::ObjectPtr< B2DynamicTree_obj > __new();
		static hx::ObjectPtr< B2DynamicTree_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2DynamicTree_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2DynamicTree","\xad","\xec","\xc7","\x29"); }

		 ::box2D::collision::B2DynamicTreeNode createProxy( ::box2D::collision::B2AABB aabb, ::box2D::dynamics::B2Fixture userData);
		::Dynamic createProxy_dyn();

		void destroyProxy( ::box2D::collision::B2DynamicTreeNode proxy);
		::Dynamic destroyProxy_dyn();

		bool moveProxy( ::box2D::collision::B2DynamicTreeNode proxy, ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Vec2 displacement);
		::Dynamic moveProxy_dyn();

		void rebalance(int iterations);
		::Dynamic rebalance_dyn();

		 ::box2D::collision::B2AABB getFatAABB( ::box2D::collision::B2DynamicTreeNode proxy);
		::Dynamic getFatAABB_dyn();

		 ::box2D::dynamics::B2Fixture getUserData( ::box2D::collision::B2DynamicTreeNode proxy);
		::Dynamic getUserData_dyn();

		int stackQueuePos;
		::Array< ::Dynamic> stackQueue;
		void query(::Dynamic callbackMethod, ::box2D::collision::B2AABB aabb);
		::Dynamic query_dyn();

		void rayCast( ::Dynamic callbackMethod, ::box2D::collision::B2RayCastInput input);
		::Dynamic rayCast_dyn();

		 ::box2D::collision::B2DynamicTreeNode allocateNode();
		::Dynamic allocateNode_dyn();

		void freeNode( ::box2D::collision::B2DynamicTreeNode node);
		::Dynamic freeNode_dyn();

		void insertLeaf( ::box2D::collision::B2DynamicTreeNode leaf);
		::Dynamic insertLeaf_dyn();

		 ::box2D::collision::B2AABB oldAABB;
		void removeLeaf( ::box2D::collision::B2DynamicTreeNode leaf);
		::Dynamic removeLeaf_dyn();

		 ::box2D::collision::B2DynamicTreeNode m_root;
		 ::box2D::collision::B2DynamicTreeNode m_freeList;
		int m_path;
		int m_insertionCount;
};

} // end namespace box2D
} // end namespace collision

#endif /* INCLUDED_box2D_collision_B2DynamicTree */ 
