// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_B2Body
#define INCLUDED_box2D_dynamics_B2Body

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(box2D,collision,shapes,B2EdgeShape)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2MassData)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Sweep)
HX_DECLARE_CLASS3(box2D,common,math,B2Transform)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2Body)
HX_DECLARE_CLASS2(box2D,dynamics,B2BodyDef)
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)
HX_DECLARE_CLASS2(box2D,dynamics,B2FixtureDef)
HX_DECLARE_CLASS2(box2D,dynamics,B2World)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2ContactEdge)
HX_DECLARE_CLASS3(box2D,dynamics,controllers,B2ControllerEdge)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2JointEdge)
HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace box2D{
namespace dynamics{


class HXCPP_CLASS_ATTRIBUTES B2Body_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2Body_obj OBJ_;
		B2Body_obj();

	public:
		enum { _hx_ClassId = 0x28b6bfe3 };

		void __construct( ::box2D::dynamics::B2BodyDef bd, ::box2D::dynamics::B2World world);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.B2Body")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.B2Body"); }
		static hx::ObjectPtr< B2Body_obj > __new( ::box2D::dynamics::B2BodyDef bd, ::box2D::dynamics::B2World world);
		static hx::ObjectPtr< B2Body_obj > __alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::B2BodyDef bd, ::box2D::dynamics::B2World world);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2Body_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2Body","\x72","\x78","\x8b","\x59"); }

		static void __boot();
		static  ::box2D::common::math::B2Transform s_xf1;
		static int e_islandFlag;
		static int e_awakeFlag;
		static int e_allowSleepFlag;
		static int e_bulletFlag;
		static int e_fixedRotationFlag;
		static int e_activeFlag;
		static int e_ignoreGravityFlag;
		static int e_alwaysActiveFlag;
		static int e_pausedFlag;
		static int b2_staticBody;
		static int b2_kinematicBody;
		static int b2_dynamicBody;
		Float connectEdges( ::box2D::collision::shapes::B2EdgeShape s1, ::box2D::collision::shapes::B2EdgeShape s2,Float angle1);
		::Dynamic connectEdges_dyn();

		 ::box2D::dynamics::B2Fixture createFixture( ::box2D::dynamics::B2FixtureDef def);
		::Dynamic createFixture_dyn();

		 ::box2D::dynamics::B2Fixture createFixture2( ::box2D::collision::shapes::B2Shape shape,hx::Null< Float >  density);
		::Dynamic createFixture2_dyn();

		void DestroyFixture( ::box2D::dynamics::B2Fixture fixture);
		::Dynamic DestroyFixture_dyn();

		void setPositionAndAngle( ::box2D::common::math::B2Vec2 position,Float angle);
		::Dynamic setPositionAndAngle_dyn();

		void setPositionFast( ::box2D::common::math::B2Vec2 position);
		::Dynamic setPositionFast_dyn();

		void setTransform( ::box2D::common::math::B2Transform xf);
		::Dynamic setTransform_dyn();

		 ::box2D::common::math::B2Transform getTransform();
		::Dynamic getTransform_dyn();

		 ::box2D::common::math::B2Vec2 getPosition();
		::Dynamic getPosition_dyn();

		void setPosition( ::box2D::common::math::B2Vec2 position);
		::Dynamic setPosition_dyn();

		Float getAngle();
		::Dynamic getAngle_dyn();

		void setAngle(Float angle);
		::Dynamic setAngle_dyn();

		 ::box2D::common::math::B2Vec2 getWorldCenter();
		::Dynamic getWorldCenter_dyn();

		 ::box2D::common::math::B2Vec2 getLocalCenter();
		::Dynamic getLocalCenter_dyn();

		void setLinearVelocity( ::box2D::common::math::B2Vec2 v);
		::Dynamic setLinearVelocity_dyn();

		 ::box2D::common::math::B2Vec2 getLinearVelocity();
		::Dynamic getLinearVelocity_dyn();

		void setAngularVelocity(Float omega);
		::Dynamic setAngularVelocity_dyn();

		Float getAngularVelocity();
		::Dynamic getAngularVelocity_dyn();

		 ::box2D::dynamics::B2BodyDef getDefinition();
		::Dynamic getDefinition_dyn();

		void applyForce( ::box2D::common::math::B2Vec2 force, ::box2D::common::math::B2Vec2 point);
		::Dynamic applyForce_dyn();

		void applyTorque(Float torque);
		::Dynamic applyTorque_dyn();

		void applyImpulse( ::box2D::common::math::B2Vec2 impulse, ::box2D::common::math::B2Vec2 point);
		::Dynamic applyImpulse_dyn();

		 ::box2D::dynamics::B2Body split( ::Dynamic callbackMethod);
		::Dynamic split_dyn();

		void merge( ::box2D::dynamics::B2Body other);
		::Dynamic merge_dyn();

		Float getMass();
		::Dynamic getMass_dyn();

		Float getInertia();
		::Dynamic getInertia_dyn();

		void getMassData( ::box2D::collision::shapes::B2MassData data);
		::Dynamic getMassData_dyn();

		void setMassData( ::box2D::collision::shapes::B2MassData massData);
		::Dynamic setMassData_dyn();

		void resetMassData();
		::Dynamic resetMassData_dyn();

		 ::box2D::common::math::B2Vec2 getWorldPoint( ::box2D::common::math::B2Vec2 localPoint);
		::Dynamic getWorldPoint_dyn();

		 ::box2D::common::math::B2Vec2 getWorldVector( ::box2D::common::math::B2Vec2 localVector);
		::Dynamic getWorldVector_dyn();

		 ::box2D::common::math::B2Vec2 getLocalPoint( ::box2D::common::math::B2Vec2 worldPoint);
		::Dynamic getLocalPoint_dyn();

		 ::box2D::common::math::B2Vec2 getLocalVector( ::box2D::common::math::B2Vec2 worldVector);
		::Dynamic getLocalVector_dyn();

		 ::box2D::common::math::B2Vec2 getLinearVelocityFromWorldPoint( ::box2D::common::math::B2Vec2 worldPoint);
		::Dynamic getLinearVelocityFromWorldPoint_dyn();

		 ::box2D::common::math::B2Vec2 getLinearVelocityFromLocalPoint( ::box2D::common::math::B2Vec2 localPoint);
		::Dynamic getLinearVelocityFromLocalPoint_dyn();

		Float getLinearDamping();
		::Dynamic getLinearDamping_dyn();

		void setLinearDamping(Float linearDamping);
		::Dynamic setLinearDamping_dyn();

		Float getAngularDamping();
		::Dynamic getAngularDamping_dyn();

		void setAngularDamping(Float angularDamping);
		::Dynamic setAngularDamping_dyn();

		void setType(int type);
		::Dynamic setType_dyn();

		int getType();
		::Dynamic getType_dyn();

		void setBullet(bool flag);
		::Dynamic setBullet_dyn();

		bool isBullet();
		::Dynamic isBullet_dyn();

		void setSleepingAllowed(bool flag);
		::Dynamic setSleepingAllowed_dyn();

		void setAwake(bool flag);
		::Dynamic setAwake_dyn();

		bool isAwake();
		::Dynamic isAwake_dyn();

		void setFixedRotation(bool fixed);
		::Dynamic setFixedRotation_dyn();

		bool isFixedRotation();
		::Dynamic isFixedRotation_dyn();

		void setActive(bool flag);
		::Dynamic setActive_dyn();

		bool isActive();
		::Dynamic isActive_dyn();

		bool isSleepingAllowed();
		::Dynamic isSleepingAllowed_dyn();

		 ::box2D::dynamics::B2Fixture getFixtureList();
		::Dynamic getFixtureList_dyn();

		 ::box2D::dynamics::joints::B2JointEdge getJointList();
		::Dynamic getJointList_dyn();

		 ::box2D::dynamics::controllers::B2ControllerEdge getControllerList();
		::Dynamic getControllerList_dyn();

		 ::box2D::dynamics::contacts::B2ContactEdge getContactList();
		::Dynamic getContactList_dyn();

		 ::box2D::dynamics::B2Body getNext();
		::Dynamic getNext_dyn();

		 ::com::stencyl::models::Actor getUserData();
		::Dynamic getUserData_dyn();

		void setUserData( ::com::stencyl::models::Actor data);
		::Dynamic setUserData_dyn();

		 ::box2D::dynamics::B2World getWorld();
		::Dynamic getWorld_dyn();

		void setFriction(Float friction);
		::Dynamic setFriction_dyn();

		void setBounciness(Float bounciness);
		::Dynamic setBounciness_dyn();

		void setPaused(bool flag);
		::Dynamic setPaused_dyn();

		bool isPaused();
		::Dynamic isPaused_dyn();

		void setIgnoreGravity(bool flag);
		::Dynamic setIgnoreGravity_dyn();

		bool isIgnoringGravity();
		::Dynamic isIgnoringGravity_dyn();

		void setAlwaysActive(bool flag);
		::Dynamic setAlwaysActive_dyn();

		bool isAlwaysActive();
		::Dynamic isAlwaysActive_dyn();

		void synchronizeFixtures();
		::Dynamic synchronizeFixtures_dyn();

		void synchronizeTransform();
		::Dynamic synchronizeTransform_dyn();

		bool shouldCollide( ::box2D::dynamics::B2Body other);
		::Dynamic shouldCollide_dyn();

		void advance(Float t);
		::Dynamic advance_dyn();

		int m_flags;
		int m_type;
		int m_islandIndex;
		 ::box2D::common::math::B2Transform m_xf;
		 ::box2D::common::math::B2Sweep m_sweep;
		 ::box2D::common::math::B2Vec2 m_linearVelocity;
		Float m_angularVelocity;
		 ::box2D::common::math::B2Vec2 m_force;
		Float m_torque;
		 ::box2D::dynamics::B2World m_world;
		 ::box2D::dynamics::B2Body m_prev;
		 ::box2D::dynamics::B2Body m_next;
		 ::box2D::dynamics::B2Fixture m_fixtureList;
		int m_fixtureCount;
		 ::box2D::dynamics::controllers::B2ControllerEdge m_controllerList;
		int m_controllerCount;
		 ::box2D::dynamics::joints::B2JointEdge m_jointList;
		 ::box2D::dynamics::contacts::B2ContactEdge m_contactList;
		Float m_mass;
		Float m_invMass;
		Float m_I;
		Float m_invI;
		Float m_inertiaScale;
		Float m_linearDamping;
		Float m_angularDamping;
		Float m_sleepTime;
		 ::com::stencyl::models::Actor m_userData;
		int groupID;
		 ::box2D::common::math::B2Vec2 origin;
		 ::box2D::common::math::B2Vec2 size;
};

} // end namespace box2D
} // end namespace dynamics

#endif /* INCLUDED_box2D_dynamics_B2Body */ 
