// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_B2World
#define INCLUDED_box2D_dynamics_B2World

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,collision,B2AABB)
HX_DECLARE_CLASS2(box2D,collision,IBroadPhase)
HX_DECLARE_CLASS2(box2D,collision,QueryCallback)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS2(box2D,common,B2Color)
HX_DECLARE_CLASS3(box2D,common,math,B2Sweep)
HX_DECLARE_CLASS3(box2D,common,math,B2Transform)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,AABBQueryCallback)
HX_DECLARE_CLASS2(box2D,dynamics,B2Body)
HX_DECLARE_CLASS2(box2D,dynamics,B2BodyDef)
HX_DECLARE_CLASS2(box2D,dynamics,B2ContactFilter)
HX_DECLARE_CLASS2(box2D,dynamics,B2ContactListener)
HX_DECLARE_CLASS2(box2D,dynamics,B2ContactManager)
HX_DECLARE_CLASS2(box2D,dynamics,B2DebugDraw)
HX_DECLARE_CLASS2(box2D,dynamics,B2DestructionListener)
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)
HX_DECLARE_CLASS2(box2D,dynamics,B2Island)
HX_DECLARE_CLASS2(box2D,dynamics,B2TimeStep)
HX_DECLARE_CLASS2(box2D,dynamics,B2World)
HX_DECLARE_CLASS2(box2D,dynamics,PointQueryCallback)
HX_DECLARE_CLASS2(box2D,dynamics,ShapeQueryCallback)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2Contact)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2ContactSolver)
HX_DECLARE_CLASS3(box2D,dynamics,controllers,B2Controller)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2Joint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2JointDef)

namespace box2D{
namespace dynamics{


class HXCPP_CLASS_ATTRIBUTES B2World_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2World_obj OBJ_;
		B2World_obj();

	public:
		enum { _hx_ClassId = 0x1578f655 };

		void __construct( ::box2D::common::math::B2Vec2 gravity,bool doSleep);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.B2World")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.B2World"); }
		static hx::ObjectPtr< B2World_obj > __new( ::box2D::common::math::B2Vec2 gravity,bool doSleep);
		static hx::ObjectPtr< B2World_obj > __alloc(hx::Ctx *_hx_ctx, ::box2D::common::math::B2Vec2 gravity,bool doSleep);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2World_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2World","\x82","\xae","\xf2","\x17"); }

		static void __boot();
		static  ::box2D::dynamics::B2TimeStep s_timestep2;
		static  ::box2D::common::math::B2Transform s_xf;
		static  ::box2D::common::math::B2Sweep s_backupA;
		static  ::box2D::common::math::B2Sweep s_backupB;
		static  ::box2D::dynamics::B2TimeStep s_timestep;
		static ::Array< ::Dynamic> s_queue;
		static  ::box2D::common::B2Color s_jointColor;
		static bool m_warmStarting;
		static bool m_continuousPhysics;
		static int e_newFixture;
		static int e_locked;
		void setDestructionListener( ::box2D::dynamics::B2DestructionListener listener);
		::Dynamic setDestructionListener_dyn();

		void setContactFilter( ::box2D::dynamics::B2ContactFilter filter);
		::Dynamic setContactFilter_dyn();

		void setContactListener( ::box2D::dynamics::B2ContactListener listener);
		::Dynamic setContactListener_dyn();

		void setDebugDraw( ::box2D::dynamics::B2DebugDraw debugDraw);
		::Dynamic setDebugDraw_dyn();

		void setBroadPhase(::Dynamic broadPhase);
		::Dynamic setBroadPhase_dyn();

		void validate();
		::Dynamic validate_dyn();

		int getProxyCount();
		::Dynamic getProxyCount_dyn();

		 ::box2D::dynamics::B2Body createBody( ::box2D::dynamics::B2BodyDef def);
		::Dynamic createBody_dyn();

		void destroyBody( ::box2D::dynamics::B2Body b);
		::Dynamic destroyBody_dyn();

		 ::box2D::dynamics::joints::B2Joint createJoint( ::box2D::dynamics::joints::B2JointDef def);
		::Dynamic createJoint_dyn();

		void destroyJoint( ::box2D::dynamics::joints::B2Joint j);
		::Dynamic destroyJoint_dyn();

		 ::box2D::dynamics::controllers::B2Controller addController( ::box2D::dynamics::controllers::B2Controller c);
		::Dynamic addController_dyn();

		void removeController( ::box2D::dynamics::controllers::B2Controller c);
		::Dynamic removeController_dyn();

		 ::box2D::dynamics::controllers::B2Controller createController( ::box2D::dynamics::controllers::B2Controller controller);
		::Dynamic createController_dyn();

		void destroyController( ::box2D::dynamics::controllers::B2Controller controller);
		::Dynamic destroyController_dyn();

		void setWarmStarting(bool flag);
		::Dynamic setWarmStarting_dyn();

		void setContinuousPhysics(bool flag);
		::Dynamic setContinuousPhysics_dyn();

		int getBodyCount();
		::Dynamic getBodyCount_dyn();

		int getJointCount();
		::Dynamic getJointCount_dyn();

		int getContactCount();
		::Dynamic getContactCount_dyn();

		void setGravity( ::box2D::common::math::B2Vec2 gravity);
		::Dynamic setGravity_dyn();

		 ::box2D::common::math::B2Vec2 getGravity();
		::Dynamic getGravity_dyn();

		 ::box2D::dynamics::B2Body getGroundBody();
		::Dynamic getGroundBody_dyn();

		void step(Float dt,int velocityIterations,int positionIterations);
		::Dynamic step_dyn();

		void clearForces();
		::Dynamic clearForces_dyn();

		void drawDebugData();
		::Dynamic drawDebugData_dyn();

		void queryAABB( ::Dynamic callbackMethod, ::box2D::collision::B2AABB aabb);
		::Dynamic queryAABB_dyn();

		void queryShape( ::Dynamic callbackMethod, ::box2D::collision::shapes::B2Shape shape, ::box2D::common::math::B2Transform transform);
		::Dynamic queryShape_dyn();

		void queryPoint( ::Dynamic callbackMethod, ::box2D::common::math::B2Vec2 p);
		::Dynamic queryPoint_dyn();

		void rayCast( ::Dynamic callbackMethod, ::box2D::common::math::B2Vec2 point1, ::box2D::common::math::B2Vec2 point2);
		::Dynamic rayCast_dyn();

		 ::box2D::dynamics::B2Fixture rayCastOne( ::box2D::common::math::B2Vec2 point1, ::box2D::common::math::B2Vec2 point2);
		::Dynamic rayCastOne_dyn();

		::Array< ::Dynamic> rayCastAll( ::box2D::common::math::B2Vec2 point1, ::box2D::common::math::B2Vec2 point2);
		::Dynamic rayCastAll_dyn();

		 ::box2D::dynamics::B2Body getBodyList();
		::Dynamic getBodyList_dyn();

		 ::box2D::dynamics::joints::B2Joint getJointList();
		::Dynamic getJointList_dyn();

		 ::box2D::dynamics::contacts::B2Contact getContactList();
		::Dynamic getContactList_dyn();

		bool isLocked();
		::Dynamic isLocked_dyn();

		::Array< ::Dynamic> s_stack;
		void solve( ::box2D::dynamics::B2TimeStep step);
		::Dynamic solve_dyn();

		void solveTOI( ::box2D::dynamics::B2TimeStep step);
		::Dynamic solveTOI_dyn();

		void drawJoint( ::box2D::dynamics::joints::B2Joint joint);
		::Dynamic drawJoint_dyn();

		void drawShape( ::box2D::collision::shapes::B2Shape shape, ::box2D::common::math::B2Transform xf, ::box2D::common::B2Color color);
		::Dynamic drawShape_dyn();

		 ::box2D::collision::B2AABB m_aabb;
		void setScreenBounds( ::box2D::collision::B2AABB bounds);
		::Dynamic setScreenBounds_dyn();

		 ::box2D::collision::B2AABB getScreenBounds();
		::Dynamic getScreenBounds_dyn();

		int m_flags;
		 ::box2D::dynamics::B2ContactManager m_contactManager;
		 ::box2D::dynamics::contacts::B2ContactSolver m_contactSolver;
		 ::box2D::dynamics::B2Island m_island;
		 ::box2D::dynamics::B2Body m_bodyList;
		 ::box2D::dynamics::joints::B2Joint m_jointList;
		 ::box2D::dynamics::contacts::B2Contact m_contactList;
		int m_bodyCount;
		int m_contactCount;
		int m_jointCount;
		 ::box2D::dynamics::controllers::B2Controller m_controllerList;
		int m_controllerCount;
		 ::box2D::common::math::B2Vec2 m_gravity;
		bool m_allowSleep;
		 ::box2D::dynamics::B2Body m_groundBody;
		 ::box2D::dynamics::B2DestructionListener m_destructionListener;
		 ::box2D::dynamics::B2DebugDraw m_debugDraw;
		Float m_inv_dt0;
		 ::box2D::dynamics::AABBQueryCallback aabbQueryCallback;
		 ::box2D::dynamics::ShapeQueryCallback shapeQueryCallback;
		 ::box2D::dynamics::PointQueryCallback pointQueryCallback;
};

} // end namespace box2D
} // end namespace dynamics

#endif /* INCLUDED_box2D_dynamics_B2World */ 
