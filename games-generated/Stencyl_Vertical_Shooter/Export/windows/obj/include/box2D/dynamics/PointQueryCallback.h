// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_PointQueryCallback
#define INCLUDED_box2D_dynamics_PointQueryCallback

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_box2D_collision_QueryCallback
#include <box2D/collision/QueryCallback.h>
#endif
HX_DECLARE_CLASS2(box2D,collision,B2DynamicTreeNode)
HX_DECLARE_CLASS2(box2D,collision,IBroadPhase)
HX_DECLARE_CLASS2(box2D,collision,QueryCallback)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)
HX_DECLARE_CLASS2(box2D,dynamics,PointQueryCallback)

namespace box2D{
namespace dynamics{


class HXCPP_CLASS_ATTRIBUTES PointQueryCallback_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef PointQueryCallback_obj OBJ_;
		PointQueryCallback_obj();

	public:
		enum { _hx_ClassId = 0x20dd2fc6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.PointQueryCallback")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.PointQueryCallback"); }
		static hx::ObjectPtr< PointQueryCallback_obj > __new();
		static hx::ObjectPtr< PointQueryCallback_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PointQueryCallback_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("PointQueryCallback","\x9d","\x76","\x7d","\x18"); }

		::Dynamic broadPhase;
		 ::Dynamic callbackMethod;
		Dynamic callbackMethod_dyn() { return callbackMethod;}
		 ::box2D::common::math::B2Vec2 p;
		bool queryCallback( ::box2D::collision::B2DynamicTreeNode proxy);
		::Dynamic queryCallback_dyn();

};

} // end namespace box2D
} // end namespace dynamics

#endif /* INCLUDED_box2D_dynamics_PointQueryCallback */ 
