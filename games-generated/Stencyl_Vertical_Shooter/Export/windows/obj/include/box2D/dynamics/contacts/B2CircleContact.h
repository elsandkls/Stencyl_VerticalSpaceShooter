// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_contacts_B2CircleContact
#define INCLUDED_box2D_dynamics_contacts_B2CircleContact

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2CircleContact)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2Contact)

namespace box2D{
namespace dynamics{
namespace contacts{


class HXCPP_CLASS_ATTRIBUTES B2CircleContact_obj : public  ::box2D::dynamics::contacts::B2Contact_obj
{
	public:
		typedef  ::box2D::dynamics::contacts::B2Contact_obj super;
		typedef B2CircleContact_obj OBJ_;
		B2CircleContact_obj();

	public:
		enum { _hx_ClassId = 0x2a17f3dc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.contacts.B2CircleContact")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.contacts.B2CircleContact"); }
		static hx::ObjectPtr< B2CircleContact_obj > __new();
		static hx::ObjectPtr< B2CircleContact_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2CircleContact_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2CircleContact","\xa0","\x5a","\xfb","\xdc"); }

		static  ::box2D::dynamics::contacts::B2Contact create( ::Dynamic allocator);
		static ::Dynamic create_dyn();

		static void destroy( ::box2D::dynamics::contacts::B2Contact contact, ::Dynamic allocator);
		static ::Dynamic destroy_dyn();

		void reset( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB);

		void evaluate();

};

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts

#endif /* INCLUDED_box2D_dynamics_contacts_B2CircleContact */ 
