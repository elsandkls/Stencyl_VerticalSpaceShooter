// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_B2ContactFilter
#define INCLUDED_box2D_dynamics_B2ContactFilter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,dynamics,B2ContactFilter)
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)

namespace box2D{
namespace dynamics{


class HXCPP_CLASS_ATTRIBUTES B2ContactFilter_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2ContactFilter_obj OBJ_;
		B2ContactFilter_obj();

	public:
		enum { _hx_ClassId = 0x4c7c5117 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="box2D.dynamics.B2ContactFilter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"box2D.dynamics.B2ContactFilter"); }
		static hx::ObjectPtr< B2ContactFilter_obj > __new();
		static hx::ObjectPtr< B2ContactFilter_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2ContactFilter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2ContactFilter","\xa8","\x8e","\xe9","\x50"); }

		static void __boot();
		static  ::box2D::dynamics::B2ContactFilter b2_defaultFilter;
		bool shouldCollide( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB);
		::Dynamic shouldCollide_dyn();

		bool rayCollide( ::Dynamic userData, ::box2D::dynamics::B2Fixture fixture);
		::Dynamic rayCollide_dyn();

};

} // end namespace box2D
} // end namespace dynamics

#endif /* INCLUDED_box2D_dynamics_B2ContactFilter */ 
