// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_joints_B2PrismaticJoint
#define INCLUDED_box2D_dynamics_joints_B2PrismaticJoint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
HX_DECLARE_CLASS3(box2D,common,math,B2Mat33)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec3)
HX_DECLARE_CLASS2(box2D,dynamics,B2TimeStep)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2Joint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2JointDef)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2PrismaticJoint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2PrismaticJointDef)

namespace box2D{
namespace dynamics{
namespace joints{


class HXCPP_CLASS_ATTRIBUTES B2PrismaticJoint_obj : public  ::box2D::dynamics::joints::B2Joint_obj
{
	public:
		typedef  ::box2D::dynamics::joints::B2Joint_obj super;
		typedef B2PrismaticJoint_obj OBJ_;
		B2PrismaticJoint_obj();

	public:
		enum { _hx_ClassId = 0x0a894446 };

		void __construct( ::box2D::dynamics::joints::B2PrismaticJointDef def);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.joints.B2PrismaticJoint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.joints.B2PrismaticJoint"); }
		static hx::ObjectPtr< B2PrismaticJoint_obj > __new( ::box2D::dynamics::joints::B2PrismaticJointDef def);
		static hx::ObjectPtr< B2PrismaticJoint_obj > __alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::joints::B2PrismaticJointDef def);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2PrismaticJoint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2PrismaticJoint","\xac","\x83","\xe1","\x75"); }

		 ::box2D::common::math::B2Vec2 getAnchorA();

		 ::box2D::common::math::B2Vec2 getAnchorB();

		 ::box2D::common::math::B2Vec2 getReactionForce(Float inv_dt);

		Float getReactionTorque(Float inv_dt);

		Float getJointTranslation();
		::Dynamic getJointTranslation_dyn();

		Float getJointSpeed();
		::Dynamic getJointSpeed_dyn();

		bool isLimitEnabled();
		::Dynamic isLimitEnabled_dyn();

		void enableLimit(bool flag);
		::Dynamic enableLimit_dyn();

		Float getLowerLimit();
		::Dynamic getLowerLimit_dyn();

		Float getUpperLimit();
		::Dynamic getUpperLimit_dyn();

		void setLimits(Float lower,Float upper);
		::Dynamic setLimits_dyn();

		bool isMotorEnabled();
		::Dynamic isMotorEnabled_dyn();

		void enableMotor(bool flag);
		::Dynamic enableMotor_dyn();

		void setMotorSpeed(Float speed);
		::Dynamic setMotorSpeed_dyn();

		Float getMotorSpeed();
		::Dynamic getMotorSpeed_dyn();

		void setMaxMotorForce(Float force);
		::Dynamic setMaxMotorForce_dyn();

		Float getMotorForce();
		::Dynamic getMotorForce_dyn();

		void initVelocityConstraints( ::box2D::dynamics::B2TimeStep step);

		void solveVelocityConstraints( ::box2D::dynamics::B2TimeStep step);

		bool solvePositionConstraints(Float baumgarte);

		 ::box2D::common::math::B2Vec2 m_localAnchor1;
		 ::box2D::common::math::B2Vec2 m_localAnchor2;
		 ::box2D::common::math::B2Vec2 m_localXAxis1;
		 ::box2D::common::math::B2Vec2 m_localYAxis1;
		Float m_refAngle;
		 ::box2D::common::math::B2Vec2 m_axis;
		 ::box2D::common::math::B2Vec2 m_perp;
		Float m_s1;
		Float m_s2;
		Float m_a1;
		Float m_a2;
		 ::box2D::common::math::B2Mat33 m_K;
		 ::box2D::common::math::B2Vec3 m_impulse;
		Float m_motorMass;
		Float m_motorImpulse;
		Float m_lowerTranslation;
		Float m_upperTranslation;
		Float m_maxMotorForce;
		Float m_motorSpeed;
		bool m_enableLimit;
		bool m_enableMotor;
		int m_limitState;
};

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints

#endif /* INCLUDED_box2D_dynamics_joints_B2PrismaticJoint */ 
