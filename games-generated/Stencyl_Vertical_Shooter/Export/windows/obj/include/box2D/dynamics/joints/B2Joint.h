// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#define INCLUDED_box2D_dynamics_joints_B2Joint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2Body)
HX_DECLARE_CLASS2(box2D,dynamics,B2TimeStep)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2Joint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2JointDef)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2JointEdge)

namespace box2D{
namespace dynamics{
namespace joints{


class HXCPP_CLASS_ATTRIBUTES B2Joint_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2Joint_obj OBJ_;
		B2Joint_obj();

	public:
		enum { _hx_ClassId = 0x13310c20 };

		void __construct( ::box2D::dynamics::joints::B2JointDef def);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.joints.B2Joint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.joints.B2Joint"); }
		static hx::ObjectPtr< B2Joint_obj > __new( ::box2D::dynamics::joints::B2JointDef def);
		static hx::ObjectPtr< B2Joint_obj > __alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::joints::B2JointDef def);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2Joint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2Joint","\x7a","\x51","\xb6","\x9b"); }

		static void __boot();
		static  ::box2D::dynamics::joints::B2Joint create( ::box2D::dynamics::joints::B2JointDef def, ::Dynamic allocator);
		static ::Dynamic create_dyn();

		static void destroy( ::box2D::dynamics::joints::B2Joint joint, ::Dynamic allocator);
		static ::Dynamic destroy_dyn();

		static int e_unknownJoint;
		static int e_revoluteJoint;
		static int e_prismaticJoint;
		static int e_distanceJoint;
		static int e_pulleyJoint;
		static int e_mouseJoint;
		static int e_gearJoint;
		static int e_lineJoint;
		static int e_weldJoint;
		static int e_frictionJoint;
		static int e_inactiveLimit;
		static int e_atLowerLimit;
		static int e_atUpperLimit;
		static int e_equalLimits;
		int getType();
		::Dynamic getType_dyn();

		virtual  ::box2D::common::math::B2Vec2 getAnchorA();
		::Dynamic getAnchorA_dyn();

		virtual  ::box2D::common::math::B2Vec2 getAnchorB();
		::Dynamic getAnchorB_dyn();

		virtual  ::box2D::common::math::B2Vec2 getReactionForce(Float inv_dt);
		::Dynamic getReactionForce_dyn();

		virtual Float getReactionTorque(Float inv_dt);
		::Dynamic getReactionTorque_dyn();

		 ::box2D::dynamics::B2Body getBodyA();
		::Dynamic getBodyA_dyn();

		 ::box2D::dynamics::B2Body getBodyB();
		::Dynamic getBodyB_dyn();

		 ::box2D::dynamics::joints::B2Joint getNext();
		::Dynamic getNext_dyn();

		 ::Dynamic getUserData();
		::Dynamic getUserData_dyn();

		void setUserData( ::Dynamic data);
		::Dynamic setUserData_dyn();

		bool isActive();
		::Dynamic isActive_dyn();

		virtual void initVelocityConstraints( ::box2D::dynamics::B2TimeStep step);
		::Dynamic initVelocityConstraints_dyn();

		virtual void solveVelocityConstraints( ::box2D::dynamics::B2TimeStep step);
		::Dynamic solveVelocityConstraints_dyn();

		void finalizeVelocityConstraints();
		::Dynamic finalizeVelocityConstraints_dyn();

		virtual bool solvePositionConstraints(Float baumgarte);
		::Dynamic solvePositionConstraints_dyn();

		int m_type;
		 ::box2D::dynamics::joints::B2Joint m_prev;
		 ::box2D::dynamics::joints::B2Joint m_next;
		 ::box2D::dynamics::joints::B2JointEdge m_edgeA;
		 ::box2D::dynamics::joints::B2JointEdge m_edgeB;
		 ::box2D::dynamics::B2Body m_bodyA;
		 ::box2D::dynamics::B2Body m_bodyB;
		bool m_islandFlag;
		bool m_collideConnected;
		 ::Dynamic m_userData;
		 ::box2D::common::math::B2Vec2 m_localCenterA;
		 ::box2D::common::math::B2Vec2 m_localCenterB;
		Float m_invMassA;
		Float m_invMassB;
		Float m_invIA;
		Float m_invIB;
		int ID;
};

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints

#endif /* INCLUDED_box2D_dynamics_joints_B2Joint */ 
