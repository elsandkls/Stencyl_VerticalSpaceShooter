// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_joints_B2PulleyJoint
#define INCLUDED_box2D_dynamics_joints_B2PulleyJoint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2Body)
HX_DECLARE_CLASS2(box2D,dynamics,B2TimeStep)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2Joint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2JointDef)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2PulleyJoint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2PulleyJointDef)

namespace box2D{
namespace dynamics{
namespace joints{


class HXCPP_CLASS_ATTRIBUTES B2PulleyJoint_obj : public  ::box2D::dynamics::joints::B2Joint_obj
{
	public:
		typedef  ::box2D::dynamics::joints::B2Joint_obj super;
		typedef B2PulleyJoint_obj OBJ_;
		B2PulleyJoint_obj();

	public:
		enum { _hx_ClassId = 0x56325dcb };

		void __construct( ::box2D::dynamics::joints::B2PulleyJointDef def);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.joints.B2PulleyJoint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.joints.B2PulleyJoint"); }
		static hx::ObjectPtr< B2PulleyJoint_obj > __new( ::box2D::dynamics::joints::B2PulleyJointDef def);
		static hx::ObjectPtr< B2PulleyJoint_obj > __alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::joints::B2PulleyJointDef def);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2PulleyJoint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2PulleyJoint","\x41","\xaf","\x2a","\xc8"); }

		static void __boot();
		static Float b2_minPulleyLength;
		 ::box2D::common::math::B2Vec2 getAnchorA();

		 ::box2D::common::math::B2Vec2 getAnchorB();

		 ::box2D::common::math::B2Vec2 getReactionForce(Float inv_dt);

		Float getReactionTorque(Float inv_dt);

		 ::box2D::common::math::B2Vec2 getGroundAnchorA();
		::Dynamic getGroundAnchorA_dyn();

		 ::box2D::common::math::B2Vec2 getGroundAnchorB();
		::Dynamic getGroundAnchorB_dyn();

		Float getLength1();
		::Dynamic getLength1_dyn();

		Float getLength2();
		::Dynamic getLength2_dyn();

		Float getRatio();
		::Dynamic getRatio_dyn();

		void initVelocityConstraints( ::box2D::dynamics::B2TimeStep step);

		void solveVelocityConstraints( ::box2D::dynamics::B2TimeStep step);

		bool solvePositionConstraints(Float baumgarte);

		 ::box2D::dynamics::B2Body m_ground;
		 ::box2D::common::math::B2Vec2 m_groundAnchor1;
		 ::box2D::common::math::B2Vec2 m_groundAnchor2;
		 ::box2D::common::math::B2Vec2 m_localAnchor1;
		 ::box2D::common::math::B2Vec2 m_localAnchor2;
		 ::box2D::common::math::B2Vec2 m_u1;
		 ::box2D::common::math::B2Vec2 m_u2;
		Float m_constant;
		Float m_ratio;
		Float m_maxLength1;
		Float m_maxLength2;
		Float m_pulleyMass;
		Float m_limitMass1;
		Float m_limitMass2;
		Float m_impulse;
		Float m_limitImpulse1;
		Float m_limitImpulse2;
		int m_state;
		int m_limitState1;
		int m_limitState2;
};

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints

#endif /* INCLUDED_box2D_dynamics_joints_B2PulleyJoint */ 
