// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_joints_B2DistanceJoint
#define INCLUDED_box2D_dynamics_joints_B2DistanceJoint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2TimeStep)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2DistanceJoint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2DistanceJointDef)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2Joint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2JointDef)

namespace box2D{
namespace dynamics{
namespace joints{


class HXCPP_CLASS_ATTRIBUTES B2DistanceJoint_obj : public  ::box2D::dynamics::joints::B2Joint_obj
{
	public:
		typedef  ::box2D::dynamics::joints::B2Joint_obj super;
		typedef B2DistanceJoint_obj OBJ_;
		B2DistanceJoint_obj();

	public:
		enum { _hx_ClassId = 0x16652bd7 };

		void __construct( ::box2D::dynamics::joints::B2DistanceJointDef def);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.joints.B2DistanceJoint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.joints.B2DistanceJoint"); }
		static hx::ObjectPtr< B2DistanceJoint_obj > __new( ::box2D::dynamics::joints::B2DistanceJointDef def);
		static hx::ObjectPtr< B2DistanceJoint_obj > __alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::joints::B2DistanceJointDef def);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2DistanceJoint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2DistanceJoint","\x05","\x1e","\x5b","\xd0"); }

		 ::box2D::common::math::B2Vec2 getAnchorA();

		 ::box2D::common::math::B2Vec2 getAnchorB();

		 ::box2D::common::math::B2Vec2 getReactionForce(Float inv_dt);

		Float getReactionTorque(Float inv_dt);

		Float getLength();
		::Dynamic getLength_dyn();

		void setLength(Float length);
		::Dynamic setLength_dyn();

		Float getFrequency();
		::Dynamic getFrequency_dyn();

		void setFrequency(Float hz);
		::Dynamic setFrequency_dyn();

		Float getDampingRatio();
		::Dynamic getDampingRatio_dyn();

		void setDampingRatio(Float ratio);
		::Dynamic setDampingRatio_dyn();

		void initVelocityConstraints( ::box2D::dynamics::B2TimeStep step);

		void solveVelocityConstraints( ::box2D::dynamics::B2TimeStep step);

		bool solvePositionConstraints(Float baumgarte);

		 ::box2D::common::math::B2Vec2 m_localAnchor1;
		 ::box2D::common::math::B2Vec2 m_localAnchor2;
		 ::box2D::common::math::B2Vec2 m_u;
		Float m_frequencyHz;
		Float m_dampingRatio;
		Float m_gamma;
		Float m_bias;
		Float m_impulse;
		Float m_mass;
		Float m_length;
};

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints

#endif /* INCLUDED_box2D_dynamics_joints_B2DistanceJoint */ 
