// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactFactory
#define INCLUDED_box2D_dynamics_contacts_B2ContactFactory

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2Contact)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2ContactFactory)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2ContactRegister)

namespace box2D{
namespace dynamics{
namespace contacts{


class HXCPP_CLASS_ATTRIBUTES B2ContactFactory_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2ContactFactory_obj OBJ_;
		B2ContactFactory_obj();

	public:
		enum { _hx_ClassId = 0x45ee3b1e };

		void __construct( ::Dynamic allocator);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.contacts.B2ContactFactory")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.contacts.B2ContactFactory"); }
		static hx::ObjectPtr< B2ContactFactory_obj > __new( ::Dynamic allocator);
		static hx::ObjectPtr< B2ContactFactory_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic allocator);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2ContactFactory_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2ContactFactory","\xda","\xbf","\x04","\x1a"); }

		void addType( ::Dynamic createFcn, ::Dynamic destroyFcn,int type1,int type2);
		::Dynamic addType_dyn();

		void initializeRegisters();
		::Dynamic initializeRegisters_dyn();

		 ::box2D::dynamics::contacts::B2Contact create( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB);
		::Dynamic create_dyn();

		void destroy( ::box2D::dynamics::contacts::B2Contact contact);
		::Dynamic destroy_dyn();

		::Array< ::Dynamic> m_registers;
		 ::Dynamic m_allocator;
};

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts

#endif /* INCLUDED_box2D_dynamics_contacts_B2ContactFactory */ 
