// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#define INCLUDED_box2D_dynamics_contacts_B2Contact

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,collision,B2Manifold)
HX_DECLARE_CLASS2(box2D,collision,B2TOIInput)
HX_DECLARE_CLASS2(box2D,collision,B2WorldManifold)
HX_DECLARE_CLASS3(box2D,common,math,B2Sweep)
HX_DECLARE_CLASS2(box2D,dynamics,B2ContactListener)
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2Contact)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2ContactEdge)

namespace box2D{
namespace dynamics{
namespace contacts{


class HXCPP_CLASS_ATTRIBUTES B2Contact_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2Contact_obj OBJ_;
		B2Contact_obj();

	public:
		enum { _hx_ClassId = 0x5f46c30c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.contacts.B2Contact")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.contacts.B2Contact"); }
		static hx::ObjectPtr< B2Contact_obj > __new();
		static hx::ObjectPtr< B2Contact_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2Contact_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2Contact","\xd0","\xfe","\xdc","\x74"); }

		static void __boot();
		static int e_sensorFlag;
		static int e_continuousFlag;
		static int e_islandFlag;
		static int e_toiFlag;
		static int e_touchingFlag;
		static int e_enabledFlag;
		static int e_filterFlag;
		static  ::box2D::collision::B2TOIInput s_input;
		 ::box2D::collision::B2Manifold getManifold();
		::Dynamic getManifold_dyn();

		void getWorldManifold( ::box2D::collision::B2WorldManifold worldManifold);
		::Dynamic getWorldManifold_dyn();

		bool isTouching();
		::Dynamic isTouching_dyn();

		bool isContinuous();
		::Dynamic isContinuous_dyn();

		void setSensor(bool sensor);
		::Dynamic setSensor_dyn();

		bool isSensor();
		::Dynamic isSensor_dyn();

		void setEnabled(bool flag);
		::Dynamic setEnabled_dyn();

		bool isEnabled();
		::Dynamic isEnabled_dyn();

		 ::box2D::dynamics::contacts::B2Contact getNext();
		::Dynamic getNext_dyn();

		 ::box2D::dynamics::B2Fixture getFixtureA();
		::Dynamic getFixtureA_dyn();

		 ::box2D::dynamics::B2Fixture getFixtureB();
		::Dynamic getFixtureB_dyn();

		void flagForFiltering();
		::Dynamic flagForFiltering_dyn();

		virtual void reset( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB);
		::Dynamic reset_dyn();

		void update( ::box2D::dynamics::B2ContactListener listener);
		::Dynamic update_dyn();

		virtual void evaluate();
		::Dynamic evaluate_dyn();

		Float computeTOI( ::box2D::common::math::B2Sweep sweepA, ::box2D::common::math::B2Sweep sweepB);
		::Dynamic computeTOI_dyn();

		int m_flags;
		 ::box2D::dynamics::contacts::B2Contact m_prev;
		 ::box2D::dynamics::contacts::B2Contact m_next;
		 ::box2D::dynamics::contacts::B2ContactEdge m_nodeA;
		 ::box2D::dynamics::contacts::B2ContactEdge m_nodeB;
		 ::box2D::dynamics::B2Fixture m_fixtureA;
		 ::box2D::dynamics::B2Fixture m_fixtureB;
		 ::box2D::collision::B2Manifold m_manifold;
		 ::box2D::collision::B2Manifold m_oldManifold;
		Float m_toi;
		int key;
};

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts

#endif /* INCLUDED_box2D_dynamics_contacts_B2Contact */ 
