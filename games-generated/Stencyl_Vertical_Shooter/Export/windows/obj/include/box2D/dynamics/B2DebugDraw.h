// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_B2DebugDraw
#define INCLUDED_box2D_dynamics_B2DebugDraw

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,common,B2Color)
HX_DECLARE_CLASS3(box2D,common,math,B2Transform)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2DebugDraw)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace box2D{
namespace dynamics{


class HXCPP_CLASS_ATTRIBUTES B2DebugDraw_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2DebugDraw_obj OBJ_;
		B2DebugDraw_obj();

	public:
		enum { _hx_ClassId = 0x6958df16 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.B2DebugDraw")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.B2DebugDraw"); }
		static hx::ObjectPtr< B2DebugDraw_obj > __new();
		static hx::ObjectPtr< B2DebugDraw_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2DebugDraw_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2DebugDraw","\x27","\xc0","\x71","\x8f"); }

		static void __boot();
		static int e_shapeBit;
		static int e_jointBit;
		static int e_aabbBit;
		static int e_pairBit;
		static int e_centerOfMassBit;
		static int e_controllerBit;
		void setFlags(int flags);
		::Dynamic setFlags_dyn();

		int getFlags();
		::Dynamic getFlags_dyn();

		void appendFlags(int flags);
		::Dynamic appendFlags_dyn();

		void clearFlags(int flags);
		::Dynamic clearFlags_dyn();

		void setSprite( ::openfl::display::Sprite sprite);
		::Dynamic setSprite_dyn();

		 ::openfl::display::Sprite getSprite();
		::Dynamic getSprite_dyn();

		void setDrawScale(Float drawScale);
		::Dynamic setDrawScale_dyn();

		Float getDrawScale();
		::Dynamic getDrawScale_dyn();

		void setLineThickness(Float lineThickness);
		::Dynamic setLineThickness_dyn();

		Float getLineThickness();
		::Dynamic getLineThickness_dyn();

		void setAlpha(Float alpha);
		::Dynamic setAlpha_dyn();

		Float getAlpha();
		::Dynamic getAlpha_dyn();

		void setFillAlpha(Float alpha);
		::Dynamic setFillAlpha_dyn();

		Float getFillAlpha();
		::Dynamic getFillAlpha_dyn();

		void setXFormScale(Float xformScale);
		::Dynamic setXFormScale_dyn();

		Float getXFormScale();
		::Dynamic getXFormScale_dyn();

		void drawPolygon(::Array< ::Dynamic> vertices,int vertexCount, ::box2D::common::B2Color color);
		::Dynamic drawPolygon_dyn();

		void drawSolidPolygon(::Array< ::Dynamic> vertices,int vertexCount, ::box2D::common::B2Color color);
		::Dynamic drawSolidPolygon_dyn();

		void drawCircle( ::box2D::common::math::B2Vec2 center,Float radius, ::box2D::common::B2Color color);
		::Dynamic drawCircle_dyn();

		void drawSolidCircle( ::box2D::common::math::B2Vec2 center,Float radius, ::box2D::common::math::B2Vec2 axis, ::box2D::common::B2Color color);
		::Dynamic drawSolidCircle_dyn();

		void drawSegment( ::box2D::common::math::B2Vec2 p1, ::box2D::common::math::B2Vec2 p2, ::box2D::common::B2Color color);
		::Dynamic drawSegment_dyn();

		void drawTransform( ::box2D::common::math::B2Transform xf);
		::Dynamic drawTransform_dyn();

		int m_drawFlags;
		 ::openfl::display::Sprite m_sprite;
		Float m_drawScale;
		Float m_lineThickness;
		Float m_alpha;
		Float m_fillAlpha;
		Float m_xformScale;
};

} // end namespace box2D
} // end namespace dynamics

#endif /* INCLUDED_box2D_dynamics_B2DebugDraw */ 
