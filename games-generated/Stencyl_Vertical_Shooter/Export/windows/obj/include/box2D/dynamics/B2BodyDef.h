// Generated by Haxe 3.4.7
#ifndef INCLUDED_box2D_dynamics_B2BodyDef
#define INCLUDED_box2D_dynamics_B2BodyDef

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2BodyDef)
HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace box2D{
namespace dynamics{


class HXCPP_CLASS_ATTRIBUTES B2BodyDef_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef B2BodyDef_obj OBJ_;
		B2BodyDef_obj();

	public:
		enum { _hx_ClassId = 0x03f7c9ce };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="box2D.dynamics.B2BodyDef")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"box2D.dynamics.B2BodyDef"); }
		static hx::ObjectPtr< B2BodyDef_obj > __new();
		static hx::ObjectPtr< B2BodyDef_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~B2BodyDef_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("B2BodyDef","\x73","\xcc","\x7d","\x8c"); }

		int type;
		 ::box2D::common::math::B2Vec2 position;
		Float angle;
		 ::box2D::common::math::B2Vec2 linearVelocity;
		Float angularVelocity;
		Float linearDamping;
		Float angularDamping;
		bool allowSleep;
		bool awake;
		bool fixedRotation;
		bool bullet;
		bool active;
		 ::com::stencyl::models::Actor userData;
		Float inertiaScale;
		int groupID;
		bool ignoreGravity;
		Float friction;
		Float bounciness;
		Float mass;
		Float aMass;
};

} // end namespace box2D
} // end namespace dynamics

#endif /* INCLUDED_box2D_dynamics_B2BodyDef */ 
