// Generated by Haxe 3.4.7
#ifndef INCLUDED_mbs_io_MbsReader
#define INCLUDED_mbs_io_MbsReader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mbs_io_MbsIO
#include <mbs/io/MbsIO.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(mbs,core,ComposedType)
HX_DECLARE_CLASS2(mbs,core,MbsObject)
HX_DECLARE_CLASS2(mbs,core,MbsType)
HX_DECLARE_CLASS2(mbs,core,MbsTypedefSet)
HX_DECLARE_CLASS3(mbs,core,header,MbsHeader)
HX_DECLARE_CLASS2(mbs,io,MbsIO)
HX_DECLARE_CLASS2(mbs,io,MbsReader)

namespace mbs{
namespace io{


class HXCPP_CLASS_ATTRIBUTES MbsReader_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MbsReader_obj OBJ_;
		MbsReader_obj();

	public:
		enum { _hx_ClassId = 0x653ad5dd };

		void __construct( ::mbs::core::MbsTypedefSet typedefSet,bool readStoredTypeInformation,bool initStringList);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mbs.io.MbsReader")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"mbs.io.MbsReader"); }
		static hx::ObjectPtr< MbsReader_obj > __new( ::mbs::core::MbsTypedefSet typedefSet,bool readStoredTypeInformation,bool initStringList);
		static hx::ObjectPtr< MbsReader_obj > __alloc(hx::Ctx *_hx_ctx, ::mbs::core::MbsTypedefSet typedefSet,bool readStoredTypeInformation,bool initStringList);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MbsReader_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("MbsReader","\x41","\xb7","\x36","\x37"); }

		 ::haxe::io::Bytes data;
		::Array< ::String > stringTable;
		::Array< ::Dynamic> typeTable;
		int rootAddress;
		 ::haxe::ds::StringMap subTypeMap;
		bool initStringList;
		int stringTableAddress;
		bool readStoredTypeInformation;
		 ::mbs::core::MbsTypedefSet typedefSet;
		 ::mbs::core::header::MbsHeader header;
		::String canReadFile(::String file);
		::Dynamic canReadFile_dyn();

		::String canRead( ::haxe::io::Bytes data);
		::Dynamic canRead_dyn();

		void readData( ::haxe::io::Bytes data);
		::Dynamic readData_dyn();

		void reconfigureComposition( ::mbs::core::ComposedType type);
		::Dynamic reconfigureComposition_dyn();

		 ::Dynamic getRoot();
		::Dynamic getRoot_dyn();

		int readInt(int pos);
		::Dynamic readInt_dyn();

		bool readBool(int pos);
		::Dynamic readBool_dyn();

		Float readFloat(int pos);
		::Dynamic readFloat_dyn();

		::String readString(int pos);
		::Dynamic readString_dyn();

		 ::mbs::core::MbsType readTypecode(int pos);
		::Dynamic readTypecode_dyn();

		::Array< ::Dynamic> getTypeTable();
		::Dynamic getTypeTable_dyn();

		void writeInt(int address,int value);
		::Dynamic writeInt_dyn();

		void writeBool(int address,bool value);
		::Dynamic writeBool_dyn();

		void writeFloat(int address,Float value);
		::Dynamic writeFloat_dyn();

		void writeString(int address,::String value);
		::Dynamic writeString_dyn();

		bool isReader();
		::Dynamic isReader_dyn();

		bool isWriter();
		::Dynamic isWriter_dyn();

		int allocate(int size);
		::Dynamic allocate_dyn();

		void writeTypecode(int address, ::mbs::core::MbsType type);
		::Dynamic writeTypecode_dyn();

};

} // end namespace mbs
} // end namespace io

#endif /* INCLUDED_mbs_io_MbsReader */ 
