// Generated by Haxe 3.4.7
#ifndef INCLUDED_mbs_io_MbsIO
#define INCLUDED_mbs_io_MbsIO

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(mbs,core,MbsType)
HX_DECLARE_CLASS2(mbs,io,MbsIO)

namespace mbs{
namespace io{


class HXCPP_CLASS_ATTRIBUTES MbsIO_obj {
	public:
		typedef hx::Object super;
		HX_DO_INTERFACE_RTTI;

		bool (hx::Object :: *_hx_readBool)(int address); 
		static inline bool readBool( ::Dynamic _hx_,int address) {
			return (_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_readBool)(address);
		}
		Float (hx::Object :: *_hx_readFloat)(int address); 
		static inline Float readFloat( ::Dynamic _hx_,int address) {
			return (_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_readFloat)(address);
		}
		int (hx::Object :: *_hx_readInt)(int address); 
		static inline int readInt( ::Dynamic _hx_,int address) {
			return (_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_readInt)(address);
		}
		::String (hx::Object :: *_hx_readString)(int address); 
		static inline ::String readString( ::Dynamic _hx_,int address) {
			return (_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_readString)(address);
		}
		void (hx::Object :: *_hx_writeInt)(int address,int value); 
		static inline void writeInt( ::Dynamic _hx_,int address,int value) {
			(_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_writeInt)(address,value);
		}
		void (hx::Object :: *_hx_writeBool)(int address,bool value); 
		static inline void writeBool( ::Dynamic _hx_,int address,bool value) {
			(_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_writeBool)(address,value);
		}
		void (hx::Object :: *_hx_writeFloat)(int address,Float value); 
		static inline void writeFloat( ::Dynamic _hx_,int address,Float value) {
			(_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_writeFloat)(address,value);
		}
		void (hx::Object :: *_hx_writeString)(int address,::String value); 
		static inline void writeString( ::Dynamic _hx_,int address,::String value) {
			(_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_writeString)(address,value);
		}
		bool (hx::Object :: *_hx_isReader)(); 
		static inline bool isReader( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_isReader)();
		}
		bool (hx::Object :: *_hx_isWriter)(); 
		static inline bool isWriter( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_isWriter)();
		}
		int (hx::Object :: *_hx_allocate)(int size); 
		static inline int allocate( ::Dynamic _hx_,int size) {
			return (_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_allocate)(size);
		}
		void (hx::Object :: *_hx_writeTypecode)(int address, ::mbs::core::MbsType type); 
		static inline void writeTypecode( ::Dynamic _hx_,int address, ::mbs::core::MbsType type) {
			(_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_writeTypecode)(address,type);
		}
		 ::mbs::core::MbsType (hx::Object :: *_hx_readTypecode)(int address); 
		static inline  ::mbs::core::MbsType readTypecode( ::Dynamic _hx_,int address) {
			return (_hx_.mPtr->*( static_cast< ::mbs::io::MbsIO_obj *>(_hx_.mPtr->_hx_getInterface(0x692ab760)))->_hx_readTypecode)(address);
		}
};

} // end namespace mbs
} // end namespace io

#endif /* INCLUDED_mbs_io_MbsIO */ 
