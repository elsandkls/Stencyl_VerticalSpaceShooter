// Generated by Haxe 3.4.7
#ifndef INCLUDED_mbs_core_MbsTypes
#define INCLUDED_mbs_core_MbsTypes

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(mbs,core,MbsType)
HX_DECLARE_CLASS2(mbs,core,MbsTypes)

namespace mbs{
namespace core{


class HXCPP_CLASS_ATTRIBUTES MbsTypes_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MbsTypes_obj OBJ_;
		MbsTypes_obj();

	public:
		enum { _hx_ClassId = 0x7f50c738 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="mbs.core.MbsTypes")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"mbs.core.MbsTypes"); }

		hx::ObjectPtr< MbsTypes_obj > __new() {
			hx::ObjectPtr< MbsTypes_obj > __this = new MbsTypes_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< MbsTypes_obj > __alloc(hx::Ctx *_hx_ctx) {
			MbsTypes_obj *__this = (MbsTypes_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MbsTypes_obj), false, "mbs.core.MbsTypes"));
			*(void **)__this = MbsTypes_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MbsTypes_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MbsTypes","\x3b","\x28","\x67","\xc8"); }

		static void __boot();
		static  ::mbs::core::MbsType BOOLEAN;
		static  ::mbs::core::MbsType INTEGER;
		static  ::mbs::core::MbsType FLOAT;
		static  ::mbs::core::MbsType STRING;
		static  ::mbs::core::MbsType LIST;
		static  ::mbs::core::MbsType DYNAMIC;
};

} // end namespace mbs
} // end namespace core

#endif /* INCLUDED_mbs_core_MbsTypes */ 
