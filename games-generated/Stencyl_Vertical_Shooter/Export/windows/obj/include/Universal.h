// Generated by Haxe 3.4.7
#ifndef INCLUDED_Universal
#define INCLUDED_Universal

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(Universal)
HX_DECLARE_CLASS2(lime,ui,Window)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)



class HXCPP_CLASS_ATTRIBUTES Universal_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Universal_obj OBJ_;
		Universal_obj();

	public:
		enum { _hx_ClassId = 0x4d69b16b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Universal")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Universal"); }
		static hx::ObjectPtr< Universal_obj > __new();
		static hx::ObjectPtr< Universal_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Universal_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Universal","\x6b","\xb1","\x69","\x4d"); }

		static void __boot();
		static  ::lime::ui::Window window;
		static Float logicalWidth;
		static Float logicalHeight;
		static Float windowWidth;
		static Float windowHeight;
		static void initWindow( ::lime::ui::Window window);
		static ::Dynamic initWindow_dyn();

		static hx::Class am;
		static  ::Dynamic oldTrace;
		static void setupTracing( ::Dynamic forceEnable);
		static ::Dynamic setupTracing_dyn();

		static void reloadGame();
		static ::Dynamic reloadGame_dyn();

		static void addReloadListener( ::Dynamic reloadListener);
		static ::Dynamic addReloadListener_dyn();

		 ::openfl::display::Shape maskLayer;
		void onAdded( ::openfl::events::Event event);
		::Dynamic onAdded_dyn();

		void initServices();
		::Dynamic initServices_dyn();

		void initScreen(bool isFullScreen);
		::Dynamic initScreen_dyn();

		Float getDesiredScale(Float checkWidth,Float checkHeight,int baseWidth,int baseHeight);
		::Dynamic getDesiredScale_dyn();

		void preloaderComplete();
		::Dynamic preloaderComplete_dyn();

};


#endif /* INCLUDED_Universal */ 
