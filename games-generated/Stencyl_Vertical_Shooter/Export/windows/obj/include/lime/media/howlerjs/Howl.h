// Generated by Haxe 3.4.7
#ifndef INCLUDED_lime_media_howlerjs_Howl
#define INCLUDED_lime_media_howlerjs_Howl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_82dc381e218fb676_10_new)
HX_DECLARE_CLASS3(lime,media,howlerjs,Howl)

namespace lime{
namespace media{
namespace howlerjs{


class HXCPP_CLASS_ATTRIBUTES Howl_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Howl_obj OBJ_;
		Howl_obj();

	public:
		enum { _hx_ClassId = 0x2f9ac6fd };

		void __construct( ::Dynamic options);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.media.howlerjs.Howl")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.media.howlerjs.Howl"); }

		hx::ObjectPtr< Howl_obj > __new( ::Dynamic options) {
			hx::ObjectPtr< Howl_obj > __this = new Howl_obj();
			__this->__construct(options);
			return __this;
		}

		static hx::ObjectPtr< Howl_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic options) {
			Howl_obj *__this = (Howl_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Howl_obj), false, "lime.media.howlerjs.Howl"));
			*(void **)__this = Howl_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_82dc381e218fb676_10_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Howl_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Howl","\xfc","\xfe","\xeb","\x2f"); }

		int duration( ::Dynamic id);
		::Dynamic duration_dyn();

		 ::lime::media::howlerjs::Howl fade(Float from,Float to,int len, ::Dynamic id);
		::Dynamic fade_dyn();

		 ::lime::media::howlerjs::Howl load();
		::Dynamic load_dyn();

		 ::Dynamic loop( ::Dynamic loop, ::Dynamic id);
		::Dynamic loop_dyn();

		 ::lime::media::howlerjs::Howl mute(bool muted, ::Dynamic id);
		::Dynamic mute_dyn();

		 ::lime::media::howlerjs::Howl off(::String event, ::Dynamic fn, ::Dynamic id);
		::Dynamic off_dyn();

		 ::lime::media::howlerjs::Howl on(::String event, ::Dynamic fn, ::Dynamic id);
		::Dynamic on_dyn();

		 ::lime::media::howlerjs::Howl once(::String event, ::Dynamic fn, ::Dynamic id);
		::Dynamic once_dyn();

		 ::lime::media::howlerjs::Howl pause( ::Dynamic id);
		::Dynamic pause_dyn();

		int play( ::Dynamic sprite);
		::Dynamic play_dyn();

		bool playing( ::Dynamic id);
		::Dynamic playing_dyn();

		 ::Dynamic rate( ::Dynamic rate, ::Dynamic id);
		::Dynamic rate_dyn();

		 ::Dynamic seek( ::Dynamic seek, ::Dynamic id);
		::Dynamic seek_dyn();

		::String state();
		::Dynamic state_dyn();

		 ::lime::media::howlerjs::Howl stop( ::Dynamic id);
		::Dynamic stop_dyn();

		void unload();
		::Dynamic unload_dyn();

		 ::Dynamic volume( ::Dynamic vol, ::Dynamic id);
		::Dynamic volume_dyn();

		 ::Dynamic pos( ::Dynamic x, ::Dynamic y, ::Dynamic z, ::Dynamic id);
		::Dynamic pos_dyn();

		 ::Dynamic stereo( ::Dynamic pan, ::Dynamic id);
		::Dynamic stereo_dyn();

};

} // end namespace lime
} // end namespace media
} // end namespace howlerjs

#endif /* INCLUDED_lime_media_howlerjs_Howl */ 
