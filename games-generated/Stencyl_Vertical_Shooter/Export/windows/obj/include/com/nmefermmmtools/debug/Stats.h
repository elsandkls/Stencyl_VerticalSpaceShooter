// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_nmefermmmtools_debug_Stats
#define INCLUDED_com_nmefermmmtools_debug_Stats

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS3(com,nmefermmmtools,debug,Stats)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,text,TextField)

namespace com{
namespace nmefermmmtools{
namespace debug{


class HXCPP_CLASS_ATTRIBUTES Stats_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Stats_obj OBJ_;
		Stats_obj();

	public:
		enum { _hx_ClassId = 0x217a7bc8 };

		void __construct(hx::Null< bool >  __o_alignRight);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.nmefermmmtools.debug.Stats")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.nmefermmmtools.debug.Stats"); }
		static hx::ObjectPtr< Stats_obj > __new(hx::Null< bool >  __o_alignRight);
		static hx::ObjectPtr< Stats_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< bool >  __o_alignRight);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Stats_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Stats","\xff","\xe5","\x38","\x17"); }

		static void __boot();
		static bool FPS_ONLY;
		static int GRAPH_WIDTH;
		static int XPOS;
		static int GRAPH_HEIGHT;
		static int TEXT_HEIGHT;
		 ::openfl::text::TextField text;
		int timer;
		int fps;
		int ms;
		int ms_prev;
		Float mem;
		Float mem_max;
		 ::openfl::display::BitmapData graph;
		 ::openfl::geom::Rectangle rectangle;
		bool alignRight;
		bool start;
		int fps_graph;
		int mem_graph;
		int ms_graph;
		int mem_max_graph;
		 ::openfl::display::Stage _stage;
		::String fpsStr;
		::String memStr;
		::String memMaxStr;
		::String msStr;
		void init( ::openfl::events::Event e);
		::Dynamic init_dyn();

		void destroy( ::openfl::events::Event e);
		::Dynamic destroy_dyn();

		void update( ::openfl::events::Event e);
		::Dynamic update_dyn();

		int normalizeMem(Float _mem);
		::Dynamic normalizeMem_dyn();

};

} // end namespace com
} // end namespace nmefermmmtools
} // end namespace debug

#endif /* INCLUDED_com_nmefermmmtools_debug_Stats */ 
