// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_io_mbs_scene_MbsTileset
#define INCLUDED_com_stencyl_io_mbs_scene_MbsTileset

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_io_mbs_MbsResource
#include <com/stencyl/io/mbs/MbsResource.h>
#endif
HX_DECLARE_CLASS4(com,stencyl,io,mbs,MbsResource)
HX_DECLARE_CLASS5(com,stencyl,io,mbs,scene,MbsTileset)
HX_DECLARE_CLASS2(mbs,core,ComposedType)
HX_DECLARE_CLASS2(mbs,core,MbsField)
HX_DECLARE_CLASS2(mbs,core,MbsObject)
HX_DECLARE_CLASS2(mbs,core,MbsType)
HX_DECLARE_CLASS2(mbs,io,MbsIO)
HX_DECLARE_CLASS2(mbs,io,MbsList)
HX_DECLARE_CLASS2(mbs,io,MbsListBase)

namespace com{
namespace stencyl{
namespace io{
namespace mbs{
namespace scene{


class HXCPP_CLASS_ATTRIBUTES MbsTileset_obj : public  ::com::stencyl::io::mbs::MbsResource_obj
{
	public:
		typedef  ::com::stencyl::io::mbs::MbsResource_obj super;
		typedef MbsTileset_obj OBJ_;
		MbsTileset_obj();

	public:
		enum { _hx_ClassId = 0x0525537d };

		void __construct(::Dynamic data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.io.mbs.scene.MbsTileset")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.io.mbs.scene.MbsTileset"); }
		static hx::ObjectPtr< MbsTileset_obj > __new(::Dynamic data);
		static hx::ObjectPtr< MbsTileset_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MbsTileset_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MbsTileset","\x76","\x2d","\x5e","\x5b"); }

		static  ::mbs::core::MbsField across;
		static  ::mbs::core::MbsField down;
		static  ::mbs::core::MbsField readableImages;
		static  ::mbs::core::MbsField tileWidth;
		static  ::mbs::core::MbsField tileHeight;
		static  ::mbs::core::MbsField tiles;
		static  ::mbs::core::ComposedType MBS_TILESET;
		static void initializeType();
		static ::Dynamic initializeType_dyn();

		static  ::mbs::io::MbsList new_MbsTileset_list(::Dynamic data);
		static ::Dynamic new_MbsTileset_list_dyn();

		 ::mbs::core::MbsType getMbsType();

		 ::mbs::io::MbsList _tiles;
		void allocateNew();

		int getAcross();
		::Dynamic getAcross_dyn();

		void setAcross(int _val);
		::Dynamic setAcross_dyn();

		int getDown();
		::Dynamic getDown_dyn();

		void setDown(int _val);
		::Dynamic setDown_dyn();

		bool getReadableImages();
		::Dynamic getReadableImages_dyn();

		void setReadableImages(bool _val);
		::Dynamic setReadableImages_dyn();

		int getTileWidth();
		::Dynamic getTileWidth_dyn();

		void setTileWidth(int _val);
		::Dynamic setTileWidth_dyn();

		int getTileHeight();
		::Dynamic getTileHeight_dyn();

		void setTileHeight(int _val);
		::Dynamic setTileHeight_dyn();

		 ::mbs::io::MbsList getTiles();
		::Dynamic getTiles_dyn();

		 ::mbs::io::MbsList createTiles(int _length);
		::Dynamic createTiles_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace io
} // end namespace mbs
} // end namespace scene

#endif /* INCLUDED_com_stencyl_io_mbs_scene_MbsTileset */ 
