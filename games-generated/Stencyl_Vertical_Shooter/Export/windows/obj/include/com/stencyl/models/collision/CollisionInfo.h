// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_collision_CollisionInfo
#define INCLUDED_com_stencyl_models_collision_CollisionInfo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(com,stencyl,models,collision,CollisionInfo)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Mask)

namespace com{
namespace stencyl{
namespace models{
namespace collision{


class HXCPP_CLASS_ATTRIBUTES CollisionInfo_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef CollisionInfo_obj OBJ_;
		CollisionInfo_obj();

	public:
		enum { _hx_ClassId = 0x7c8101eb };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.collision.CollisionInfo")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.collision.CollisionInfo"); }
		static hx::ObjectPtr< CollisionInfo_obj > __new();
		static hx::ObjectPtr< CollisionInfo_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CollisionInfo_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CollisionInfo","\xe0","\x7d","\xe1","\x6d"); }

		static void __boot();
		static ::Array< ::Dynamic> infoArray;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static  ::com::stencyl::models::collision::CollisionInfo getCollisionInfo();
		static ::Dynamic getCollisionInfo_dyn();

		static void recycle( ::com::stencyl::models::collision::CollisionInfo info);
		static ::Dynamic recycle_dyn();

		Float max;
		Float min;
		 ::com::stencyl::models::collision::Mask maskA;
		 ::com::stencyl::models::collision::Mask maskB;
		bool solidCollision;
		void reset();
		::Dynamic reset_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace collision

#endif /* INCLUDED_com_stencyl_models_collision_CollisionInfo */ 
