// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_Joystick
#define INCLUDED_com_stencyl_models_Joystick

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS3(com,stencyl,models,Joystick)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,events,TouchEvent)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace com{
namespace stencyl{
namespace models{


class HXCPP_CLASS_ATTRIBUTES Joystick_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Joystick_obj OBJ_;
		Joystick_obj();

	public:
		enum { _hx_ClassId = 0x2b4bfb11 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.Joystick")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.Joystick"); }
		static hx::ObjectPtr< Joystick_obj > __new();
		static hx::ObjectPtr< Joystick_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Joystick_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Joystick","\xdc","\x9c","\xa3","\x75"); }

		static void __boot();
		static  ::haxe::ds::IntMap joystickMap;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static int fixedCenter;
		static int showWherePressed;
		static int viewOffsetX;
		static int viewOffsetY;
		static bool initialized;
		static void addJoystick(int id,Float x,Float y,hx::Null< int >  type,hx::Null< Float >  boundsX,hx::Null< Float >  boundsY,hx::Null< Float >  boundsWidth,hx::Null< Float >  boundsHeight,hx::Null< bool >  hide);
		static ::Dynamic addJoystick_dyn();

		static void removeJoystick(int id);
		static ::Dynamic removeJoystick_dyn();

		static Float getJoystickDisDir(int id,hx::Null< bool >  distance);
		static ::Dynamic getJoystickDisDir_dyn();

		static void setJoystickCenter(int id,Float x,Float y);
		static ::Dynamic setJoystickCenter_dyn();

		static Float getJoystickCenter(int id,hx::Null< bool >  x);
		static ::Dynamic getJoystickCenter_dyn();

		static void setJoystickRadius(int id,hx::Null< bool >  outer,Float radius);
		static ::Dynamic setJoystickRadius_dyn();

		static Float getJoystickRadius(int id,hx::Null< bool >  outer);
		static ::Dynamic getJoystickRadius_dyn();

		static void alwaysHideRJ(int id);
		static ::Dynamic alwaysHideRJ_dyn();

		static void setDefaultDirection(int id,Float direction);
		static ::Dynamic setDefaultDirection_dyn();

		static bool isJoystickPressed(int id);
		static ::Dynamic isJoystickPressed_dyn();

		static void setTouchRegionForRJ(int id,hx::Null< Float >  boundsX,hx::Null< Float >  boundsY,hx::Null< Float >  boundsWidth,hx::Null< Float >  boundsHeight);
		static ::Dynamic setTouchRegionForRJ_dyn();

		static Float getTouchRegionPropertyForRJ(int id,int property);
		static ::Dynamic getTouchRegionPropertyForRJ_dyn();

		static void setJoystickImage(int id,bool outerImage,::String imageName);
		static ::Dynamic setJoystickImage_dyn();

		static void setJoystickAlpha(int id,hx::Null< bool >  outer,hx::Null< Float >  imageAlpha,hx::Null< bool >  whenReleased);
		static ::Dynamic setJoystickAlpha_dyn();

		 ::openfl::geom::Point center;
		Float outerRadius;
		Float innerRadius;
		 ::openfl::geom::Rectangle joystickBounds;
		int joystickTouchID;
		int id;
		Float joystickDistance;
		Float joystickDirection;
		Float joystickDefaultDirection;
		int joystickType;
		bool hideWhenReleased;
		 ::openfl::display::Bitmap outerImage;
		 ::openfl::display::Bitmap innerImage;
		Float outerAlphaWhenReleased;
		Float outerAlphaWhenPressed;
		Float innerAlphaWhenReleased;
		Float innerAlphaWhenPressed;
		bool isPressed;
		void start();
		::Dynamic start_dyn();

		void stop();
		::Dynamic stop_dyn();

		void onTouchBegin( ::openfl::events::TouchEvent e);
		::Dynamic onTouchBegin_dyn();

		void onTouchMove( ::openfl::events::TouchEvent e);
		::Dynamic onTouchMove_dyn();

		void onTouchEnd( ::openfl::events::TouchEvent e);
		::Dynamic onTouchEnd_dyn();

		void onMouseDown( ::openfl::events::MouseEvent e);
		::Dynamic onMouseDown_dyn();

		void onMouseMove( ::openfl::events::MouseEvent e);
		::Dynamic onMouseMove_dyn();

		void onMouseUp( ::openfl::events::MouseEvent e);
		::Dynamic onMouseUp_dyn();

		void onBegin(Float x,Float y,int currentTouch);
		::Dynamic onBegin_dyn();

		void onMove(Float x,Float y,int currentTouch);
		::Dynamic onMove_dyn();

		void onEnd(Float x,Float y,int currentTouch);
		::Dynamic onEnd_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models

#endif /* INCLUDED_com_stencyl_models_Joystick */ 
