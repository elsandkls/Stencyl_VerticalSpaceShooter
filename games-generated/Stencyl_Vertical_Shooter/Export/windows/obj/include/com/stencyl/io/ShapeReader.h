// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_io_ShapeReader
#define INCLUDED_com_stencyl_io_ShapeReader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(box2D,collision,shapes,B2CircleShape)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS3(com,stencyl,io,ShapeReader)
HX_DECLARE_CLASS5(com,stencyl,io,mbs,shape,MbsPoint)
HX_DECLARE_CLASS2(mbs,core,MbsObject)
HX_DECLARE_CLASS2(mbs,io,MbsList)
HX_DECLARE_CLASS2(mbs,io,MbsListBase)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace com{
namespace stencyl{
namespace io{


class HXCPP_CLASS_ATTRIBUTES ShapeReader_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ShapeReader_obj OBJ_;
		ShapeReader_obj();

	public:
		enum { _hx_ClassId = 0x1e0604d3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.stencyl.io.ShapeReader")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.stencyl.io.ShapeReader"); }

		hx::ObjectPtr< ShapeReader_obj > __new() {
			hx::ObjectPtr< ShapeReader_obj > __this = new ShapeReader_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< ShapeReader_obj > __alloc(hx::Ctx *_hx_ctx) {
			ShapeReader_obj *__this = (ShapeReader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ShapeReader_obj), false, "com.stencyl.io.ShapeReader"));
			*(void **)__this = ShapeReader_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ShapeReader_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ShapeReader","\x24","\x23","\x06","\x73"); }

		static  ::openfl::geom::Point readPoint( ::com::stencyl::io::mbs::shape::MbsPoint r);
		static ::Dynamic readPoint_dyn();

		static ::Array< ::Dynamic> readPoints( ::mbs::io::MbsList list);
		static ::Dynamic readPoints_dyn();

		static  ::box2D::collision::shapes::B2CircleShape createCircle(Float radius,Float x,Float y,hx::Null< Float >  imgWidth,hx::Null< Float >  imgHeight);
		static ::Dynamic createCircle_dyn();

		static  ::Dynamic createPolygon(::String type,::Array< ::Dynamic> points,hx::Null< int >  imgWidth,hx::Null< int >  imgHeight);
		static ::Dynamic createPolygon_dyn();

		static bool CheckVertexDirection(::Array< ::Dynamic> v);
		static ::Dynamic CheckVertexDirection_dyn();

		static bool EnsureCorrectVertexDirection(::Array< ::Dynamic> v);
		static ::Dynamic EnsureCorrectVertexDirection_dyn();

		static void ReverseVertices(::Array< ::Dynamic> v);
		static ::Dynamic ReverseVertices_dyn();

		static Float getWidth(::Array< ::Dynamic> vertices);
		static ::Dynamic getWidth_dyn();

		static Float getHeight(::Array< ::Dynamic> vertices);
		static ::Dynamic getHeight_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace io

#endif /* INCLUDED_com_stencyl_io_ShapeReader */ 
