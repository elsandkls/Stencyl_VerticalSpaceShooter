// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_graphics_transitions_SlideTransition
#define INCLUDED_com_stencyl_graphics_transitions_SlideTransition

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
HX_DECLARE_CLASS4(com,stencyl,graphics,transitions,SlideTransition)
HX_DECLARE_CLASS4(com,stencyl,graphics,transitions,Transition)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,TweenFloat2)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,TweenObject)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace com{
namespace stencyl{
namespace graphics{
namespace transitions{


class HXCPP_CLASS_ATTRIBUTES SlideTransition_obj : public  ::com::stencyl::graphics::transitions::Transition_obj
{
	public:
		typedef  ::com::stencyl::graphics::transitions::Transition_obj super;
		typedef SlideTransition_obj OBJ_;
		SlideTransition_obj();

	public:
		enum { _hx_ClassId = 0x6fdbe19e };

		void __construct( ::openfl::display::Sprite sceneSpr, ::openfl::display::Shape sceneCol,Float duration,::String slideDirection);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.graphics.transitions.SlideTransition")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.graphics.transitions.SlideTransition"); }
		static hx::ObjectPtr< SlideTransition_obj > __new( ::openfl::display::Sprite sceneSpr, ::openfl::display::Shape sceneCol,Float duration,::String slideDirection);
		static hx::ObjectPtr< SlideTransition_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display::Sprite sceneSpr, ::openfl::display::Shape sceneCol,Float duration,::String slideDirection);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SlideTransition_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("SlideTransition","\x06","\x26","\x8f","\xe0"); }

		static void __boot();
		static ::String SLIDE_UP;
		static ::String SLIDE_DOWN;
		static ::String SLIDE_LEFT;
		static ::String SLIDE_RIGHT;
		 ::openfl::display::Sprite sceneSpr;
		 ::openfl::display::Shape sceneCol;
		 ::openfl::display::BitmapData oldBitmap;
		 ::openfl::display::BitmapData newBitmap;
		 ::openfl::display::BitmapData drawBitmap;
		 ::openfl::display::Graphics graphics;
		 ::openfl::geom::Matrix oldSceneMatrix;
		 ::openfl::geom::Matrix newSceneMatrix;
		 ::com::stencyl::utils::motion::TweenFloat2 osm_xy;
		 ::com::stencyl::utils::motion::TweenFloat2 nsm_xy;
		Float tx;
		Float ty;
		 ::openfl::display::Shape rect;
		void start();

		void update(Float elapsedTime);

		void draw( ::openfl::display::Graphics g);

		void cleanup();

};

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace transitions

#endif /* INCLUDED_com_stencyl_graphics_transitions_SlideTransition */ 
