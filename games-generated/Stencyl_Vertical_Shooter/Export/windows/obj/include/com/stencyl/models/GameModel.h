// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_GameModel
#define INCLUDED_com_stencyl_models_GameModel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS5(com,stencyl,io,mbs,game,MbsGame)
HX_DECLARE_CLASS3(com,stencyl,models,CollisionGroupDef)
HX_DECLARE_CLASS3(com,stencyl,models,GameModel)
HX_DECLARE_CLASS3(com,stencyl,models,GroupDef)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(mbs,core,MbsObject)

namespace com{
namespace stencyl{
namespace models{


class HXCPP_CLASS_ATTRIBUTES GameModel_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GameModel_obj OBJ_;
		GameModel_obj();

	public:
		enum { _hx_ClassId = 0x20f00262 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.GameModel")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.GameModel"); }
		static hx::ObjectPtr< GameModel_obj > __new();
		static hx::ObjectPtr< GameModel_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GameModel_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GameModel","\x37","\xf2","\x45","\xe3"); }

		static void __boot();
		static  ::com::stencyl::models::GameModel instance;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static ::Array< ::Dynamic> collisionMap;
		static int INHERIT_ID;
		static int REGION_ID;
		static int PLAYER_ID;
		static int TERRAIN_ID;
		static int DOODAD_ID;
		static int ACTOR_ID;
		static  ::com::stencyl::models::GameModel get();
		static ::Dynamic get_dyn();

		static  ::haxe::ds::StringMap readGameAttributes( ::com::stencyl::io::mbs::game::MbsGame mg);
		static ::Dynamic readGameAttributes_dyn();

		::Array< ::Dynamic> groups;
		 ::haxe::ds::IntMap groupsCollidesWith;
		::Array< ::Dynamic> collisionGroups;
		 ::haxe::ds::StringMap gameAttributes;
		 ::haxe::ds::IntMap shapes;
		 ::haxe::ds::IntMap atlases;
		 ::haxe::ds::IntMap scenes;
		 ::haxe::ds::IntMap autotileFormats;
		void loadScenes();
		::Dynamic loadScenes_dyn();

		 ::haxe::ds::IntMap readShapes( ::com::stencyl::io::mbs::game::MbsGame mg);
		::Dynamic readShapes_dyn();

		 ::haxe::ds::IntMap readAtlases( ::com::stencyl::io::mbs::game::MbsGame mg);
		::Dynamic readAtlases_dyn();

		 ::haxe::ds::IntMap readAutotileFormats( ::com::stencyl::io::mbs::game::MbsGame mg);
		::Dynamic readAutotileFormats_dyn();

		::Array< ::Dynamic> readGroups( ::com::stencyl::io::mbs::game::MbsGame mg);
		::Dynamic readGroups_dyn();

		::Array< ::Dynamic> readCollisionGroups( ::com::stencyl::io::mbs::game::MbsGame mg);
		::Dynamic readCollisionGroups_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models

#endif /* INCLUDED_com_stencyl_models_GameModel */ 
