// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_behavior_Script
#define INCLUDED_com_stencyl_behavior_Script

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2Joint)
HX_DECLARE_CLASS2(com,stencyl,Engine)
HX_DECLARE_CLASS3(com,stencyl,behavior,Behavior)
HX_DECLARE_CLASS3(com,stencyl,behavior,Script)
HX_DECLARE_CLASS3(com,stencyl,behavior,TimedTask)
HX_DECLARE_CLASS3(com,stencyl,graphics,BitmapWrapper)
HX_DECLARE_CLASS3(com,stencyl,graphics,EngineScaleUpdateListener)
HX_DECLARE_CLASS3(com,stencyl,graphics,G)
HX_DECLARE_CLASS4(com,stencyl,graphics,transitions,Transition)
HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS3(com,stencyl,models,Font)
HX_DECLARE_CLASS3(com,stencyl,models,Region)
HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS3(com,stencyl,models,Scene)
HX_DECLARE_CLASS3(com,stencyl,models,Sound)
HX_DECLARE_CLASS3(com,stencyl,models,Terrain)
HX_DECLARE_CLASS4(com,stencyl,models,actor,ActorType)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Collision)
HX_DECLARE_CLASS4(com,stencyl,models,actor,CollisionPoint)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Group)
HX_DECLARE_CLASS4(com,stencyl,models,scene,Layer)
HX_DECLARE_CLASS4(com,stencyl,models,scene,Tile)
HX_DECLARE_CLASS4(com,stencyl,models,scene,TileLayer)
HX_DECLARE_CLASS5(com,stencyl,models,scene,layers,RegularLayer)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,EasingFunction)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,filters,ColorMatrixFilter)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace com{
namespace stencyl{
namespace behavior{


class HXCPP_CLASS_ATTRIBUTES Script_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Script_obj OBJ_;
		Script_obj();

	public:
		enum { _hx_ClassId = 0x17cc67f4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.behavior.Script")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.behavior.Script"); }
		static hx::ObjectPtr< Script_obj > __new();
		static hx::ObjectPtr< Script_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Script_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Script","\x2b","\xc2","\xf4","\x7b"); }

		static void __boot();
		static  ::com::stencyl::Engine engine;
		static int FRONT;
		static int MIDDLE;
		static int BACK;
		static int CHANNELS;
		static  ::com::stencyl::models::Actor lastCreatedActor;
		static  ::box2D::dynamics::joints::B2Joint lastCreatedJoint;
		static  ::com::stencyl::models::Region lastCreatedRegion;
		static  ::com::stencyl::models::Terrain lastCreatedTerrainRegion;
		static Float mpx;
		static Float mpy;
		static Float mrx;
		static Float mry;
		static  ::box2D::common::math::B2Vec2 dummyVec;
		static bool imageApiAutoscale;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static bool sameAs( ::Dynamic o, ::Dynamic o2);
		static ::Dynamic sameAs_dyn();

		static bool sameAsAny( ::Dynamic o, ::Dynamic one, ::Dynamic two);
		static ::Dynamic sameAsAny_dyn();

		static bool asBoolean( ::Dynamic o);
		static ::Dynamic asBoolean_dyn();

		static bool strCompare(::String one,::String two,int whichWay);
		static ::Dynamic strCompare_dyn();

		static bool strCompareBefore(::String a,::String b);
		static ::Dynamic strCompareBefore_dyn();

		static bool strCompareAfter(::String a,::String b);
		static ::Dynamic strCompareAfter_dyn();

		static Float asNumber( ::Dynamic o);
		static ::Dynamic asNumber_dyn();

		static bool hasValue( ::Dynamic o);
		static ::Dynamic hasValue_dyn();

		static bool isPrimitive( ::Dynamic o);
		static ::Dynamic isPrimitive_dyn();

		static  ::Dynamic getDefaultValue( ::Dynamic o);
		static ::Dynamic getDefaultValue_dyn();

		static  ::com::stencyl::models::actor::Group getGroupByName(::String groupName);
		static ::Dynamic getGroupByName_dyn();

		static  ::com::stencyl::models::Region getLastCreatedRegion();
		static ::Dynamic getLastCreatedRegion_dyn();

		static ::Array< ::Dynamic> getAllRegions();
		static ::Dynamic getAllRegions_dyn();

		static  ::com::stencyl::models::Region getRegion(int regionID);
		static ::Dynamic getRegion_dyn();

		static void removeRegion(int regionID);
		static ::Dynamic removeRegion_dyn();

		static  ::com::stencyl::models::Region createBoxRegion(Float x,Float y,Float w,Float h);
		static ::Dynamic createBoxRegion_dyn();

		static  ::com::stencyl::models::Region createCircularRegion(Float x,Float y,Float r);
		static ::Dynamic createCircularRegion_dyn();

		static bool isInRegion( ::com::stencyl::models::Actor a, ::com::stencyl::models::Region r);
		static ::Dynamic isInRegion_dyn();

		static ::Array< ::Dynamic> getActorsInRegion( ::com::stencyl::models::Region r);
		static ::Dynamic getActorsInRegion_dyn();

		static bool sceneHasBehavior(::String behaviorName);
		static ::Dynamic sceneHasBehavior_dyn();

		static void enableBehaviorForScene(::String behaviorName);
		static ::Dynamic enableBehaviorForScene_dyn();

		static void disableBehaviorForScene(::String behaviorName);
		static ::Dynamic disableBehaviorForScene_dyn();

		static bool isBehaviorEnabledForScene(::String behaviorName);
		static ::Dynamic isBehaviorEnabledForScene_dyn();

		static  ::Dynamic getValueForScene(::String behaviorName,::String attributeName);
		static ::Dynamic getValueForScene_dyn();

		static void setValueForScene(::String behaviorName,::String attributeName, ::Dynamic value);
		static ::Dynamic setValueForScene_dyn();

		static  ::Dynamic shoutToScene(::String msg,::cpp::VirtualArray args);
		static ::Dynamic shoutToScene_dyn();

		static  ::Dynamic sayToScene(::String behaviorName,::String msg,::cpp::VirtualArray args);
		static ::Dynamic sayToScene_dyn();

		static void setGameAttribute(::String name, ::Dynamic value);
		static ::Dynamic setGameAttribute_dyn();

		static  ::Dynamic getGameAttribute(::String name);
		static ::Dynamic getGameAttribute_dyn();

		static  ::com::stencyl::behavior::TimedTask runLater(Float delay, ::Dynamic toExecute, ::com::stencyl::models::Actor actor);
		static ::Dynamic runLater_dyn();

		static  ::com::stencyl::behavior::TimedTask runPeriodically(Float interval, ::Dynamic toExecute, ::com::stencyl::models::Actor actor);
		static ::Dynamic runPeriodically_dyn();

		static int getStepSize();
		static ::Dynamic getStepSize_dyn();

		static  ::com::stencyl::models::Scene getScene();
		static ::Dynamic getScene_dyn();

		static int getCurrentScene();
		static ::Dynamic getCurrentScene_dyn();

		static int getIDForScene(::String sceneName);
		static ::Dynamic getIDForScene_dyn();

		static ::String getCurrentSceneName();
		static ::Dynamic getCurrentSceneName_dyn();

		static int getSceneWidth();
		static ::Dynamic getSceneWidth_dyn();

		static int getSceneHeight();
		static ::Dynamic getSceneHeight_dyn();

		static int getTileWidth();
		static ::Dynamic getTileWidth_dyn();

		static int getTileHeight();
		static ::Dynamic getTileHeight_dyn();

		static void reloadCurrentScene( ::com::stencyl::graphics::transitions::Transition leave, ::com::stencyl::graphics::transitions::Transition enter);
		static ::Dynamic reloadCurrentScene_dyn();

		static void switchScene(int sceneID, ::com::stencyl::graphics::transitions::Transition leave, ::com::stencyl::graphics::transitions::Transition enter);
		static ::Dynamic switchScene_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createPixelizeOut(Float duration,hx::Null< int >  pixelSize);
		static ::Dynamic createPixelizeOut_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createPixelizeIn(Float duration,hx::Null< int >  pixelSize);
		static ::Dynamic createPixelizeIn_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createBubblesOut(Float duration,hx::Null< int >  color);
		static ::Dynamic createBubblesOut_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createBubblesIn(Float duration,hx::Null< int >  color);
		static ::Dynamic createBubblesIn_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createBlindsOut(Float duration,hx::Null< int >  color);
		static ::Dynamic createBlindsOut_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createBlindsIn(Float duration,hx::Null< int >  color);
		static ::Dynamic createBlindsIn_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createRectangleOut(Float duration,hx::Null< int >  color);
		static ::Dynamic createRectangleOut_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createRectangleIn(Float duration,hx::Null< int >  color);
		static ::Dynamic createRectangleIn_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createSlideTransition(Float duration,::String direction);
		static ::Dynamic createSlideTransition_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createSlideUpTransition(Float duration);
		static ::Dynamic createSlideUpTransition_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createSlideDownTransition(Float duration);
		static ::Dynamic createSlideDownTransition_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createSlideLeftTransition(Float duration);
		static ::Dynamic createSlideLeftTransition_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createSlideRightTransition(Float duration);
		static ::Dynamic createSlideRightTransition_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createCrossfadeTransition(Float duration);
		static ::Dynamic createCrossfadeTransition_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createFadeOut(Float duration,hx::Null< int >  color);
		static ::Dynamic createFadeOut_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createFadeIn(Float duration,hx::Null< int >  color);
		static ::Dynamic createFadeIn_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createCircleOut(Float duration,hx::Null< int >  color);
		static ::Dynamic createCircleOut_dyn();

		static  ::com::stencyl::graphics::transitions::Transition createCircleIn(Float duration,hx::Null< int >  color);
		static ::Dynamic createCircleIn_dyn();

		static void setBlendModeForLayer( ::com::stencyl::models::scene::layers::RegularLayer layer, ::Dynamic mode);
		static ::Dynamic setBlendModeForLayer_dyn();

		static void showTileLayer( ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic showTileLayer_dyn();

		static void hideTileLayer( ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic hideTileLayer_dyn();

		static void fadeTileLayerTo( ::com::stencyl::models::scene::layers::RegularLayer layer,Float alphaPct,Float duration, ::com::stencyl::utils::motion::EasingFunction easing);
		static ::Dynamic fadeTileLayerTo_dyn();

		static Float getTileLayerOpacity( ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic getTileLayerOpacity_dyn();

		static void setDrawingLayer( ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic setDrawingLayer_dyn();

		static void setDrawingLayerToActorLayer( ::com::stencyl::models::Actor a);
		static ::Dynamic setDrawingLayerToActorLayer_dyn();

		static void setDrawingLayerToSceneLayer();
		static ::Dynamic setDrawingLayerToSceneLayer_dyn();

		static Float getScreenX();
		static ::Dynamic getScreenX_dyn();

		static Float getScreenY();
		static ::Dynamic getScreenY_dyn();

		static Float getScreenXCenter();
		static ::Dynamic getScreenXCenter_dyn();

		static Float getScreenYCenter();
		static ::Dynamic getScreenYCenter_dyn();

		static  ::com::stencyl::models::Actor getCamera();
		static ::Dynamic getCamera_dyn();

		static bool isCtrlDown();
		static ::Dynamic isCtrlDown_dyn();

		static bool isShiftDown();
		static ::Dynamic isShiftDown_dyn();

		static void simulateKeyPress(::String abstractKey);
		static ::Dynamic simulateKeyPress_dyn();

		static void simulateKeyRelease(::String abstractKey);
		static ::Dynamic simulateKeyRelease_dyn();

		static bool isKeyDown(::String abstractKey);
		static ::Dynamic isKeyDown_dyn();

		static bool isKeyPressed(::String abstractKey);
		static ::Dynamic isKeyPressed_dyn();

		static bool isKeyReleased(::String abstractKey);
		static ::Dynamic isKeyReleased_dyn();

		static bool isMouseDown();
		static ::Dynamic isMouseDown_dyn();

		static bool isMousePressed();
		static ::Dynamic isMousePressed_dyn();

		static bool isMouseReleased();
		static ::Dynamic isMouseReleased_dyn();

		static Float getMouseX();
		static ::Dynamic getMouseX_dyn();

		static Float getMouseY();
		static ::Dynamic getMouseY_dyn();

		static Float getMouseWorldX();
		static ::Dynamic getMouseWorldX_dyn();

		static Float getMouseWorldY();
		static ::Dynamic getMouseWorldY_dyn();

		static Float getMousePressedX();
		static ::Dynamic getMousePressedX_dyn();

		static Float getMousePressedY();
		static ::Dynamic getMousePressedY_dyn();

		static Float getMouseReleasedX();
		static ::Dynamic getMouseReleasedX_dyn();

		static Float getMouseReleasedY();
		static ::Dynamic getMouseReleasedY_dyn();

		static void showCursor();
		static ::Dynamic showCursor_dyn();

		static void hideCursor();
		static ::Dynamic hideCursor_dyn();

		static ::String charFromCharCode(int code);
		static ::Dynamic charFromCharCode_dyn();

		static  ::com::stencyl::models::Actor getLastCreatedActor();
		static ::Dynamic getLastCreatedActor_dyn();

		static  ::com::stencyl::models::Actor createActor( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layerConst);
		static ::Dynamic createActor_dyn();

		static  ::com::stencyl::models::Actor createRecycledActor( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layerConst);
		static ::Dynamic createRecycledActor_dyn();

		static  ::com::stencyl::models::Actor createRecycledActorOnLayer( ::com::stencyl::models::actor::ActorType type,Float x,Float y, ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic createRecycledActorOnLayer_dyn();

		static void recycleActor( ::com::stencyl::models::Actor a);
		static ::Dynamic recycleActor_dyn();

		static void createActorInNextScene( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layerConst);
		static ::Dynamic createActorInNextScene_dyn();

		static  ::com::stencyl::models::actor::ActorType getActorTypeByName(::String typeName);
		static ::Dynamic getActorTypeByName_dyn();

		static  ::com::stencyl::models::actor::ActorType getActorType(int actorTypeID);
		static ::Dynamic getActorType_dyn();

		static ::Array< ::Dynamic> getAllActorTypes();
		static ::Dynamic getAllActorTypes_dyn();

		static ::Array< ::Dynamic> getActorsOfType( ::com::stencyl::models::actor::ActorType type);
		static ::Dynamic getActorsOfType_dyn();

		static  ::com::stencyl::models::Actor getActor(int actorID);
		static ::Dynamic getActor_dyn();

		static  ::com::stencyl::models::actor::Group getActorGroup(int groupID);
		static ::Dynamic getActorGroup_dyn();

		static void setGravity(Float x,Float y);
		static ::Dynamic setGravity_dyn();

		static  ::box2D::common::math::B2Vec2 getGravity();
		static ::Dynamic getGravity_dyn();

		static void enableContinuousCollisions();
		static ::Dynamic enableContinuousCollisions_dyn();

		static Float toPhysicalUnits(Float value);
		static ::Dynamic toPhysicalUnits_dyn();

		static Float toPixelUnits(Float value);
		static ::Dynamic toPixelUnits_dyn();

		static void makeActorNotPassThroughTerrain( ::com::stencyl::models::Actor actor);
		static ::Dynamic makeActorNotPassThroughTerrain_dyn();

		static void makeActorPassThroughTerrain( ::com::stencyl::models::Actor actor);
		static ::Dynamic makeActorPassThroughTerrain_dyn();

		static void mute();
		static ::Dynamic mute_dyn();

		static void unmute();
		static ::Dynamic unmute_dyn();

		static  ::com::stencyl::models::Sound getSound(int soundID);
		static ::Dynamic getSound_dyn();

		static  ::com::stencyl::models::Sound getSoundByName(::String soundName);
		static ::Dynamic getSoundByName_dyn();

		static void playSound( ::com::stencyl::models::Sound clip);
		static ::Dynamic playSound_dyn();

		static void loopSound( ::com::stencyl::models::Sound clip);
		static ::Dynamic loopSound_dyn();

		static void playSoundOnChannel( ::com::stencyl::models::Sound clip,int channelNum);
		static ::Dynamic playSoundOnChannel_dyn();

		static void loopSoundOnChannel( ::com::stencyl::models::Sound clip,int channelNum);
		static ::Dynamic loopSoundOnChannel_dyn();

		static void stopSoundOnChannel(int channelNum);
		static ::Dynamic stopSoundOnChannel_dyn();

		static void pauseSoundOnChannel(int channelNum);
		static ::Dynamic pauseSoundOnChannel_dyn();

		static void resumeSoundOnChannel(int channelNum);
		static ::Dynamic resumeSoundOnChannel_dyn();

		static void setVolumeForChannel(Float volume,int channelNum);
		static ::Dynamic setVolumeForChannel_dyn();

		static void setPanningForChannel(Float pan,int channelNum);
		static ::Dynamic setPanningForChannel_dyn();

		static void stopAllSounds();
		static ::Dynamic stopAllSounds_dyn();

		static void setVolumeForAllSounds(Float volume);
		static ::Dynamic setVolumeForAllSounds_dyn();

		static void fadeInSoundOnChannel(int channelNum,Float time);
		static ::Dynamic fadeInSoundOnChannel_dyn();

		static void fadeOutSoundOnChannel(int channelNum,Float time);
		static ::Dynamic fadeOutSoundOnChannel_dyn();

		static void fadeSoundOnChannel(int channelNum,Float time,Float percent);
		static ::Dynamic fadeSoundOnChannel_dyn();

		static void fadeInForAllSounds(Float time);
		static ::Dynamic fadeInForAllSounds_dyn();

		static void fadeOutForAllSounds(Float time);
		static ::Dynamic fadeOutForAllSounds_dyn();

		static void fadeForAllSounds(Float time,Float percent);
		static ::Dynamic fadeForAllSounds_dyn();

		static Float getPositionForChannel(int channelNum);
		static ::Dynamic getPositionForChannel_dyn();

		static void setPositionForChannel(int channelNum,int position);
		static ::Dynamic setPositionForChannel_dyn();

		static Float getSoundLengthForChannel(int channelNum);
		static ::Dynamic getSoundLengthForChannel_dyn();

		static Float getSoundLength( ::com::stencyl::models::Sound clip);
		static ::Dynamic getSoundLength_dyn();

		static void setColorBackground(int c,hx::Null< int >  c2);
		static ::Dynamic setColorBackground_dyn();

		static void setScrollSpeedForBackground( ::com::stencyl::models::scene::layers::RegularLayer layer,Float xSpeed,Float ySpeed);
		static ::Dynamic setScrollSpeedForBackground_dyn();

		static void setScrollFactorForLayer( ::com::stencyl::models::scene::layers::RegularLayer layer,Float scrollFactorX,Float scrollFactorY);
		static ::Dynamic setScrollFactorForLayer_dyn();

		static void changeBackground( ::com::stencyl::models::scene::layers::RegularLayer layer,::String newBackName);
		static ::Dynamic changeBackground_dyn();

		static void changeBackgroundImage( ::com::stencyl::models::scene::layers::RegularLayer layer, ::openfl::display::BitmapData newImg);
		static ::Dynamic changeBackgroundImage_dyn();

		static void addBackground(::String backgroundName,::String layerName,int order);
		static ::Dynamic addBackground_dyn();

		static void addBackgroundFromImage( ::openfl::display::BitmapData image,bool tiled,::String layerName,int order);
		static ::Dynamic addBackgroundFromImage_dyn();

		static void addTileLayer(::String layerName,int order);
		static ::Dynamic addTileLayer_dyn();

		static  ::openfl::geom::Rectangle dummyRect;
		static  ::openfl::geom::Point dummyPoint;
		static  ::openfl::display::BitmapData newImage(int width,int height);
		static ::Dynamic newImage_dyn();

		static  ::openfl::display::BitmapData captureScreenshot();
		static ::Dynamic captureScreenshot_dyn();

		static  ::openfl::display::BitmapData getImageForActor( ::com::stencyl::models::Actor a);
		static ::Dynamic getImageForActor_dyn();

		static  ::openfl::display::BitmapData getExternalImage(::String path);
		static ::Dynamic getExternalImage_dyn();

		static void loadImageFromURL(::String URL, ::Dynamic onComplete);
		static ::Dynamic loadImageFromURL_dyn();

		static  ::openfl::display::BitmapData getSubImage( ::openfl::display::BitmapData img,int x,int y,int width,int height);
		static ::Dynamic getSubImage_dyn();

		static void setOrderForImage( ::com::stencyl::graphics::BitmapWrapper img,int order);
		static ::Dynamic setOrderForImage_dyn();

		static int getOrderForImage( ::com::stencyl::graphics::BitmapWrapper img);
		static ::Dynamic getOrderForImage_dyn();

		static void bringImageBack( ::com::stencyl::graphics::BitmapWrapper img);
		static ::Dynamic bringImageBack_dyn();

		static void bringImageForward( ::com::stencyl::graphics::BitmapWrapper img);
		static ::Dynamic bringImageForward_dyn();

		static void bringImageToBack( ::com::stencyl::graphics::BitmapWrapper img);
		static ::Dynamic bringImageToBack_dyn();

		static void bringImagetoFront( ::com::stencyl::graphics::BitmapWrapper img);
		static ::Dynamic bringImagetoFront_dyn();

		static void attachImageToActor( ::com::stencyl::graphics::BitmapWrapper img, ::com::stencyl::models::Actor a,int x,int y,hx::Null< int >  pos);
		static ::Dynamic attachImageToActor_dyn();

		static void attachImageToHUD( ::com::stencyl::graphics::BitmapWrapper img,int x,int y);
		static ::Dynamic attachImageToHUD_dyn();

		static void attachImageToLayer( ::com::stencyl::graphics::BitmapWrapper img, ::com::stencyl::models::scene::Layer layer,int x,int y,hx::Null< int >  pos);
		static ::Dynamic attachImageToLayer_dyn();

		static void removeImage( ::com::stencyl::graphics::BitmapWrapper img);
		static ::Dynamic removeImage_dyn();

		static  ::openfl::display::BitmapData resizeImage( ::openfl::display::BitmapData img,hx::Null< Float >  xScale,hx::Null< Float >  yScale,hx::Null< bool >  smoothing);
		static ::Dynamic resizeImage_dyn();

		static void drawImageOnImage( ::openfl::display::BitmapData source, ::openfl::display::BitmapData dest,int x,int y, ::Dynamic blendMode);
		static ::Dynamic drawImageOnImage_dyn();

		static void drawTextOnImage( ::openfl::display::BitmapData img,::String text,int x,int y, ::com::stencyl::models::Font font);
		static ::Dynamic drawTextOnImage_dyn();

		static void clearImagePartially( ::openfl::display::BitmapData img,int x,int y,int width,int height);
		static ::Dynamic clearImagePartially_dyn();

		static void clearImage( ::openfl::display::BitmapData img);
		static ::Dynamic clearImage_dyn();

		static void clearImageUsingMask( ::openfl::display::BitmapData dest, ::openfl::display::BitmapData mask,int x,int y);
		static ::Dynamic clearImageUsingMask_dyn();

		static void retainImageUsingMask( ::openfl::display::BitmapData dest, ::openfl::display::BitmapData mask,int x,int y);
		static ::Dynamic retainImageUsingMask_dyn();

		static void fillImage( ::openfl::display::BitmapData img,int color);
		static ::Dynamic fillImage_dyn();

		static void filterImage( ::openfl::display::BitmapData img, ::openfl::filters::BitmapFilter filter);
		static ::Dynamic filterImage_dyn();

		static void imageSetPixel( ::openfl::display::BitmapData img,int x,int y,int color);
		static ::Dynamic imageSetPixel_dyn();

		static int imageGetPixel( ::openfl::display::BitmapData img,int x,int y);
		static ::Dynamic imageGetPixel_dyn();

		static void imageSwapColor( ::openfl::display::BitmapData img,int originalColor,int newColor);
		static ::Dynamic imageSwapColor_dyn();

		static void flipImageHorizontal( ::openfl::display::BitmapData img);
		static ::Dynamic flipImageHorizontal_dyn();

		static void flipImageVertical( ::openfl::display::BitmapData img);
		static ::Dynamic flipImageVertical_dyn();

		static void setXForImage( ::com::stencyl::graphics::BitmapWrapper img,Float value);
		static ::Dynamic setXForImage_dyn();

		static void setYForImage( ::com::stencyl::graphics::BitmapWrapper img,Float value);
		static ::Dynamic setYForImage_dyn();

		static void fadeImageTo( ::com::stencyl::graphics::BitmapWrapper img,Float value,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		static ::Dynamic fadeImageTo_dyn();

		static void setOriginForImage( ::com::stencyl::graphics::BitmapWrapper img,Float x,Float y);
		static ::Dynamic setOriginForImage_dyn();

		static void growImageTo( ::com::stencyl::graphics::BitmapWrapper img,hx::Null< Float >  scaleX,hx::Null< Float >  scaleY,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		static ::Dynamic growImageTo_dyn();

		static void spinImageTo( ::com::stencyl::graphics::BitmapWrapper img,Float angle,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		static ::Dynamic spinImageTo_dyn();

		static void moveImageTo( ::com::stencyl::graphics::BitmapWrapper img,Float x,Float y,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		static ::Dynamic moveImageTo_dyn();

		static void spinImageBy( ::com::stencyl::graphics::BitmapWrapper img,Float angle,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		static ::Dynamic spinImageBy_dyn();

		static void moveImageBy( ::com::stencyl::graphics::BitmapWrapper img,Float x,Float y,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		static ::Dynamic moveImageBy_dyn();

		static void setFilterForImage( ::com::stencyl::graphics::BitmapWrapper img, ::openfl::filters::BitmapFilter filter);
		static ::Dynamic setFilterForImage_dyn();

		static void clearFiltersForImage( ::com::stencyl::graphics::BitmapWrapper img);
		static ::Dynamic clearFiltersForImage_dyn();

		static ::String imageToText( ::openfl::display::BitmapData img);
		static ::Dynamic imageToText_dyn();

		static  ::openfl::display::BitmapData imageFromText(::String text);
		static ::Dynamic imageFromText_dyn();

		static ::String BASE_64_ENCODINGS;
		static ::String BASE_64_PADDING;
		static ::String toBase64( ::haxe::io::Bytes bytes);
		static ::Dynamic toBase64_dyn();

		static  ::haxe::io::Bytes fromBase64(::String base64);
		static ::Dynamic fromBase64_dyn();

		static void startShakingScreen(hx::Null< Float >  intensity,hx::Null< Float >  duration);
		static ::Dynamic startShakingScreen_dyn();

		static void stopShakingScreen();
		static ::Dynamic stopShakingScreen_dyn();

		static int getTopLayer();
		static ::Dynamic getTopLayer_dyn();

		static int getBottomLayer();
		static ::Dynamic getBottomLayer_dyn();

		static int getMiddleLayer();
		static ::Dynamic getMiddleLayer_dyn();

		static  ::com::stencyl::models::scene::TileLayer getTileLayerAt( ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic getTileLayerAt_dyn();

		static int getTilesetIDByName(::String tilesetName);
		static ::Dynamic getTilesetIDByName_dyn();

		static void setTileAt(int row,int col, ::com::stencyl::models::scene::layers::RegularLayer layer,int tilesetID,int tileID);
		static ::Dynamic setTileAt_dyn();

		static bool tileExistsAt(int row,int col, ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic tileExistsAt_dyn();

		static bool tileCollisionAt(int row,int col, ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic tileCollisionAt_dyn();

		static int getTilePosition( ::Dynamic axis,Float val);
		static ::Dynamic getTilePosition_dyn();

		static int getTileIDAt(int row,int col, ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic getTileIDAt_dyn();

		static int getTileColIDAt(int row,int col, ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic getTileColIDAt_dyn();

		static ::String getTileDataAt(int row,int col, ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic getTileDataAt_dyn();

		static int getTilesetIDAt(int row,int col, ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic getTilesetIDAt_dyn();

		static  ::com::stencyl::models::scene::Tile getTileAt(int row,int col, ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic getTileAt_dyn();

		static void removeTileAt(int row,int col, ::com::stencyl::models::scene::layers::RegularLayer layer);
		static ::Dynamic removeTileAt_dyn();

		static  ::com::stencyl::models::scene::Tile getTileForCollision( ::com::stencyl::models::actor::Collision event, ::com::stencyl::models::actor::CollisionPoint point);
		static ::Dynamic getTileForCollision_dyn();

		static ::String getTileDataForCollision( ::com::stencyl::models::actor::Collision event, ::com::stencyl::models::actor::CollisionPoint point);
		static ::Dynamic getTileDataForCollision_dyn();

		static void createDynamicTile( ::box2D::collision::shapes::B2Shape shape,Float x,Float y,int layerID,Float width,Float height);
		static ::Dynamic createDynamicTile_dyn();

		static  ::com::stencyl::models::Font getFont(int fontID);
		static ::Dynamic getFont_dyn();

		static void pause();
		static ::Dynamic pause_dyn();

		static void unpause();
		static ::Dynamic unpause_dyn();

		static void toggleFullScreen();
		static ::Dynamic toggleFullScreen_dyn();

		static void pauseAll();
		static ::Dynamic pauseAll_dyn();

		static void unpauseAll();
		static ::Dynamic unpauseAll_dyn();

		static int getScreenWidth();
		static ::Dynamic getScreenWidth_dyn();

		static int getScreenHeight();
		static ::Dynamic getScreenHeight_dyn();

		static int getStageWidth();
		static ::Dynamic getStageWidth_dyn();

		static int getStageHeight();
		static ::Dynamic getStageHeight_dyn();

		static void setOffscreenTolerance(Float top,Float left,Float bottom,Float right);
		static ::Dynamic setOffscreenTolerance_dyn();

		static bool isTransitioning();
		static ::Dynamic isTransitioning_dyn();

		static void setTimeScale(Float scale);
		static ::Dynamic setTimeScale_dyn();

		static Float randomFloat();
		static ::Dynamic randomFloat_dyn();

		static Float randomFloatBetween(Float low,Float high);
		static ::Dynamic randomFloatBetween_dyn();

		static int randomInt(int low,int high);
		static ::Dynamic randomInt_dyn();

		static void saveGame(::String fileName, ::Dynamic onComplete);
		static ::Dynamic saveGame_dyn();

		static void loadGame(::String fileName, ::Dynamic onComplete);
		static ::Dynamic loadGame_dyn();

		static void saveData(::String fileName,::String name, ::Dynamic value, ::Dynamic onComplete);
		static ::Dynamic saveData_dyn();

		static  ::Dynamic loadData(::String fileName,::String name, ::Dynamic onComplete);
		static ::Dynamic loadData_dyn();

		static  ::Dynamic checkData(::String fileName,::String name);
		static ::Dynamic checkData_dyn();

		static void defaultURLHandler( ::openfl::events::Event event);
		static ::Dynamic defaultURLHandler_dyn();

		static void openURLInBrowser(::String URL);
		static ::Dynamic openURLInBrowser_dyn();

		static void visitURL(::String URL, ::Dynamic fn);
		static ::Dynamic visitURL_dyn();

		static void postToURL(::String URL,::String data, ::Dynamic fn);
		static ::Dynamic postToURL_dyn();

		static ::String convertToPseudoUnicode(::String internationalText);
		static ::Dynamic convertToPseudoUnicode_dyn();

		static void simpleTweet(::String message,::String gameURL);
		static ::Dynamic simpleTweet_dyn();

		static void newgroundsShowAd();
		static ::Dynamic newgroundsShowAd_dyn();

		static void newgroundsSetMedalPosition(int x,int y);
		static ::Dynamic newgroundsSetMedalPosition_dyn();

		static void newgroundsUnlockMedal(::String medalName);
		static ::Dynamic newgroundsUnlockMedal_dyn();

		static void newgroundsSubmitScore(::String boardName,Float value);
		static ::Dynamic newgroundsSubmitScore_dyn();

		static void newgroundsShowScore(::String boardName);
		static ::Dynamic newgroundsShowScore_dyn();

		static void newgroundsHelper( ::openfl::events::MouseEvent event);
		static ::Dynamic newgroundsHelper_dyn();

		static void kongregateInitAPI();
		static ::Dynamic kongregateInitAPI_dyn();

		static void kongregateSubmitStat(::String name,Float stat);
		static ::Dynamic kongregateSubmitStat_dyn();

		static bool kongregateIsGuest();
		static ::Dynamic kongregateIsGuest_dyn();

		static ::String kongregateGetUsername();
		static ::Dynamic kongregateGetUsername_dyn();

		static int kongregateGetUserID();
		static ::Dynamic kongregateGetUserID_dyn();

		static void loadAtlas(int atlasID);
		static ::Dynamic loadAtlas_dyn();

		static void unloadAtlas(int atlasID);
		static ::Dynamic unloadAtlas_dyn();

		static bool atlasIsLoaded(int atlasID);
		static ::Dynamic atlasIsLoaded_dyn();

		static void initGooglePlayGames();
		static ::Dynamic initGooglePlayGames_dyn();

		static void stopGooglePlayGames();
		static ::Dynamic stopGooglePlayGames_dyn();

		static bool getGPGConnectionInfo(int info);
		static ::Dynamic getGPGConnectionInfo_dyn();

		static void showGPGAchievements();
		static ::Dynamic showGPGAchievements_dyn();

		static void showGPGLeaderboards();
		static ::Dynamic showGPGLeaderboards_dyn();

		static void showGPGLeaderboard(::String id);
		static ::Dynamic showGPGLeaderboard_dyn();

		static void showGPGQuests();
		static ::Dynamic showGPGQuests_dyn();

		static void unlockGPGAchievement(::String id);
		static ::Dynamic unlockGPGAchievement_dyn();

		static void incrementGPGAchievement(::String id,int amount);
		static ::Dynamic incrementGPGAchievement_dyn();

		static void submitGPGScore(::String id,int amount);
		static ::Dynamic submitGPGScore_dyn();

		static void updateGPGEvent(::String id,int amount);
		static ::Dynamic updateGPGEvent_dyn();

		static ::Array< ::String > getCompletedGPGQuests();
		static ::Dynamic getCompletedGPGQuests_dyn();

		static void gameCenterInitialize();
		static ::Dynamic gameCenterInitialize_dyn();

		static bool gameCenterIsAuthenticated();
		static ::Dynamic gameCenterIsAuthenticated_dyn();

		static ::String gameCenterGetPlayerName();
		static ::Dynamic gameCenterGetPlayerName_dyn();

		static ::String gameCenterGetPlayerID();
		static ::Dynamic gameCenterGetPlayerID_dyn();

		static void gameCenterShowLeaderboard(::String categoryID);
		static ::Dynamic gameCenterShowLeaderboard_dyn();

		static void gameCenterShowAchievements();
		static ::Dynamic gameCenterShowAchievements_dyn();

		static void gameCenterSubmitScore(Float score,::String categoryID);
		static ::Dynamic gameCenterSubmitScore_dyn();

		static void gameCenterSubmitAchievement(::String achievementID,Float percent);
		static ::Dynamic gameCenterSubmitAchievement_dyn();

		static void gameCenterResetAchievements();
		static ::Dynamic gameCenterResetAchievements_dyn();

		static void gameCenterShowBanner(::String title,::String msg);
		static ::Dynamic gameCenterShowBanner_dyn();

		static bool purchasesAreInitialized();
		static ::Dynamic purchasesAreInitialized_dyn();

		static void purchasesRestore();
		static ::Dynamic purchasesRestore_dyn();

		static void purchasesBuy(::String productID);
		static ::Dynamic purchasesBuy_dyn();

		static bool purchasesHasBought(::String productID);
		static ::Dynamic purchasesHasBought_dyn();

		static ::String purchasesGetTitle(::String productID);
		static ::Dynamic purchasesGetTitle_dyn();

		static ::String purchasesGetDescription(::String productID);
		static ::Dynamic purchasesGetDescription_dyn();

		static ::String purchasesGetPrice(::String productID);
		static ::Dynamic purchasesGetPrice_dyn();

		static void purchasesRequestProductInfo(::cpp::VirtualArray productIDlist);
		static ::Dynamic purchasesRequestProductInfo_dyn();

		static void purchasesUse(::String productID);
		static ::Dynamic purchasesUse_dyn();

		static void purchasesGoogleConsume(::String productID);
		static ::Dynamic purchasesGoogleConsume_dyn();

		static int purchasesGetQuantity(::String productID);
		static ::Dynamic purchasesGetQuantity_dyn();

		static void showAlert(::String title,::String msg);
		static ::Dynamic showAlert_dyn();

		static void vibrate(hx::Null< Float >  time);
		static ::Dynamic vibrate_dyn();

		static void showKeyboard();
		static ::Dynamic showKeyboard_dyn();

		static void hideKeyboard();
		static ::Dynamic hideKeyboard_dyn();

		static void setKeyboardText(::String text);
		static ::Dynamic setKeyboardText_dyn();

		static void setIconBadgeNumber(int n);
		static ::Dynamic setIconBadgeNumber_dyn();

		static void enableDebugDrawing();
		static ::Dynamic enableDebugDrawing_dyn();

		static void disableDebugDrawing();
		static ::Dynamic disableDebugDrawing_dyn();

		static ::String gameURL();
		static ::Dynamic gameURL_dyn();

		static void exitGame();
		static ::Dynamic exitGame_dyn();

		static  ::openfl::filters::ColorMatrixFilter createGrayscaleFilter();
		static ::Dynamic createGrayscaleFilter_dyn();

		static  ::openfl::filters::ColorMatrixFilter createSepiaFilter();
		static ::Dynamic createSepiaFilter_dyn();

		static  ::openfl::filters::ColorMatrixFilter createNegativeFilter();
		static ::Dynamic createNegativeFilter_dyn();

		static  ::openfl::filters::ColorMatrixFilter createTintFilter(int color,hx::Null< Float >  amount);
		static ::Dynamic createTintFilter_dyn();

		static  ::openfl::filters::ColorMatrixFilter createHueFilter(Float h);
		static ::Dynamic createHueFilter_dyn();

		static  ::openfl::filters::ColorMatrixFilter createSaturationFilter(Float s);
		static ::Dynamic createSaturationFilter_dyn();

		static  ::openfl::filters::ColorMatrixFilter createBrightnessFilter(Float b);
		static ::Dynamic createBrightnessFilter_dyn();

		 ::com::stencyl::behavior::Behavior wrapper;
		 ::haxe::ds::StringMap propertyChangeListeners;
		 ::haxe::ds::ObjectMap equalityPairs;
		bool checkProperties;
		 ::haxe::ds::StringMap nameMap;
		 ::haxe::ds::StringMap attributeTweens;
		bool scriptInit;
		::String toInternalName(::String displayName);
		::Dynamic toInternalName_dyn();

		virtual void forwardMessage(::String msg);
		::Dynamic forwardMessage_dyn();

		void clearListeners();
		::Dynamic clearListeners_dyn();

		 ::com::stencyl::models::actor::Group internalGetGroup( ::Dynamic arg, ::Dynamic arg2, ::Dynamic arg3);
		::Dynamic internalGetGroup_dyn();

		virtual void init();
		::Dynamic init_dyn();

		void addMobileKeyboardListener(int type, ::Dynamic func);
		::Dynamic addMobileKeyboardListener_dyn();

		void addMobileAdListener(int type, ::Dynamic func);
		::Dynamic addMobileAdListener_dyn();

		void addGameCenterListener(int type, ::Dynamic func);
		::Dynamic addGameCenterListener_dyn();

		void addPurchaseListener(int type, ::Dynamic func);
		::Dynamic addPurchaseListener_dyn();

		void addWhenCreatedListener( ::com::stencyl::models::Actor a, ::Dynamic func);
		::Dynamic addWhenCreatedListener_dyn();

		void addWhenKilledListener( ::com::stencyl::models::Actor a, ::Dynamic func);
		::Dynamic addWhenKilledListener_dyn();

		void addWhenUpdatedListener( ::com::stencyl::models::Actor a, ::Dynamic func);
		::Dynamic addWhenUpdatedListener_dyn();

		void addWhenDrawingListener( ::com::stencyl::models::Actor a, ::Dynamic func);
		::Dynamic addWhenDrawingListener_dyn();

		void addActorEntersRegionListener( ::com::stencyl::models::Region reg, ::Dynamic func);
		::Dynamic addActorEntersRegionListener_dyn();

		void addActorExitsRegionListener( ::com::stencyl::models::Region reg, ::Dynamic func);
		::Dynamic addActorExitsRegionListener_dyn();

		void addActorPositionListener( ::com::stencyl::models::Actor a, ::Dynamic func);
		::Dynamic addActorPositionListener_dyn();

		void addActorTypeGroupPositionListener( ::Dynamic obj, ::Dynamic func);
		::Dynamic addActorTypeGroupPositionListener_dyn();

		void addSwipeListener( ::Dynamic func);
		::Dynamic addSwipeListener_dyn();

		void addMultiTouchStartListener( ::Dynamic func);
		::Dynamic addMultiTouchStartListener_dyn();

		void addMultiTouchMoveListener( ::Dynamic func);
		::Dynamic addMultiTouchMoveListener_dyn();

		void addMultiTouchEndListener( ::Dynamic func);
		::Dynamic addMultiTouchEndListener_dyn();

		void addKeyStateListener(::String key, ::Dynamic func);
		::Dynamic addKeyStateListener_dyn();

		void addAnyKeyPressedListener( ::Dynamic func);
		::Dynamic addAnyKeyPressedListener_dyn();

		void addAnyKeyReleasedListener( ::Dynamic func);
		::Dynamic addAnyKeyReleasedListener_dyn();

		void addAnyGamepadPressedListener( ::Dynamic func);
		::Dynamic addAnyGamepadPressedListener_dyn();

		void addAnyGamepadReleasedListener( ::Dynamic func);
		::Dynamic addAnyGamepadReleasedListener_dyn();

		void addMousePressedListener( ::Dynamic func);
		::Dynamic addMousePressedListener_dyn();

		void addMouseReleasedListener( ::Dynamic func);
		::Dynamic addMouseReleasedListener_dyn();

		void addMouseMovedListener( ::Dynamic func);
		::Dynamic addMouseMovedListener_dyn();

		void addMouseDraggedListener( ::Dynamic func);
		::Dynamic addMouseDraggedListener_dyn();

		void addMouseOverActorListener( ::com::stencyl::models::Actor a, ::Dynamic func);
		::Dynamic addMouseOverActorListener_dyn();

		void addPropertyChangeListener(::String propertyKey,::String propertyKey2, ::Dynamic func);
		::Dynamic addPropertyChangeListener_dyn();

		void propertyChanged(::String propertyKey, ::Dynamic property);
		::Dynamic propertyChanged_dyn();

		void addCollisionListener( ::com::stencyl::models::Actor a, ::Dynamic func);
		::Dynamic addCollisionListener_dyn();

		void addSceneCollisionListener( ::Dynamic obj, ::Dynamic obj2, ::Dynamic func);
		::Dynamic addSceneCollisionListener_dyn();

		void addWhenTypeGroupCreatedListener( ::Dynamic obj, ::Dynamic func);
		::Dynamic addWhenTypeGroupCreatedListener_dyn();

		void addWhenTypeGroupKilledListener( ::Dynamic obj, ::Dynamic func);
		::Dynamic addWhenTypeGroupKilledListener_dyn();

		void addSoundListener( ::Dynamic obj, ::Dynamic func);
		::Dynamic addSoundListener_dyn();

		void addFocusChangeListener( ::Dynamic func);
		::Dynamic addFocusChangeListener_dyn();

		void addPauseListener( ::Dynamic func);
		::Dynamic addPauseListener_dyn();

		void addFullscreenListener( ::Dynamic func);
		::Dynamic addFullscreenListener_dyn();

		void addGameScaleListener( ::Dynamic func);
		::Dynamic addGameScaleListener_dyn();

		void addScreenSizeListener( ::Dynamic func);
		::Dynamic addScreenSizeListener_dyn();

		virtual void disableThisBehavior();
		::Dynamic disableThisBehavior_dyn();

		void tweenNumber(::String attributeName,Float value,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		::Dynamic tweenNumber_dyn();

		void abortTweenNumber(::String attributeName);
		::Dynamic abortTweenNumber_dyn();

		void pauseTweens();
		::Dynamic pauseTweens_dyn();

		void unpauseTweens();
		::Dynamic unpauseTweens_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace behavior

#endif /* INCLUDED_com_stencyl_behavior_Script */ 
