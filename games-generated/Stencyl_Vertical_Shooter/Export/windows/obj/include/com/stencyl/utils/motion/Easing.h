// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#define INCLUDED_com_stencyl_utils_motion_Easing

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(com,stencyl,utils,motion,BackIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,BackInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,BackOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,BackOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,BounceIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,BounceInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,BounceOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,BounceOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,CircIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,CircInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,CircOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,CircOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,CubicIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,CubicInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,CubicOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,CubicOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,Easing)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,EasingFunction)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,ElasticIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,ElasticInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,ElasticOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,ElasticOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,ExpoIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,ExpoInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,ExpoOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,ExpoOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,Linear)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuadIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuadInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuadOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuadOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuartIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuartInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuartOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuartOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuintIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuintInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuintOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,QuintOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,SineIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,SineInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,SineOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,SineOutIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,WarpIn)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,WarpInOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,WarpOut)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,WarpOutIn)

namespace com{
namespace stencyl{
namespace utils{
namespace motion{


class HXCPP_CLASS_ATTRIBUTES Easing_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Easing_obj OBJ_;
		Easing_obj();

	public:
		enum { _hx_ClassId = 0x2f73c8bf };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.stencyl.utils.motion.Easing")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.stencyl.utils.motion.Easing"); }

		hx::ObjectPtr< Easing_obj > __new() {
			hx::ObjectPtr< Easing_obj > __this = new Easing_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Easing_obj > __alloc(hx::Ctx *_hx_ctx) {
			Easing_obj *__this = (Easing_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Easing_obj), false, "com.stencyl.utils.motion.Easing"));
			*(void **)__this = Easing_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Easing_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Easing","\xcb","\xc0","\xd1","\xbc"); }

		static void __boot();
		static  ::com::stencyl::utils::motion::Linear linear;
		static  ::com::stencyl::utils::motion::SineIn sineIn;
		static  ::com::stencyl::utils::motion::SineOut sineOut;
		static  ::com::stencyl::utils::motion::SineInOut sineInOut;
		static  ::com::stencyl::utils::motion::SineOutIn sineOutIn;
		static  ::com::stencyl::utils::motion::QuadIn quadIn;
		static  ::com::stencyl::utils::motion::QuadOut quadOut;
		static  ::com::stencyl::utils::motion::QuadInOut quadInOut;
		static  ::com::stencyl::utils::motion::QuadOutIn quadOutIn;
		static  ::com::stencyl::utils::motion::CubicIn cubicIn;
		static  ::com::stencyl::utils::motion::CubicOut cubicOut;
		static  ::com::stencyl::utils::motion::CubicInOut cubicInOut;
		static  ::com::stencyl::utils::motion::CubicOutIn cubicOutIn;
		static  ::com::stencyl::utils::motion::QuartIn quartIn;
		static  ::com::stencyl::utils::motion::QuartOut quartOut;
		static  ::com::stencyl::utils::motion::QuartInOut quartInOut;
		static  ::com::stencyl::utils::motion::QuartOutIn quartOutIn;
		static  ::com::stencyl::utils::motion::QuintIn quintIn;
		static  ::com::stencyl::utils::motion::QuintOut quintOut;
		static  ::com::stencyl::utils::motion::QuintInOut quintInOut;
		static  ::com::stencyl::utils::motion::QuintOutIn quintOutIn;
		static  ::com::stencyl::utils::motion::ExpoIn expoIn;
		static  ::com::stencyl::utils::motion::ExpoOut expoOut;
		static  ::com::stencyl::utils::motion::ExpoInOut expoInOut;
		static  ::com::stencyl::utils::motion::ExpoOutIn expoOutIn;
		static  ::com::stencyl::utils::motion::CircIn circIn;
		static  ::com::stencyl::utils::motion::CircOut circOut;
		static  ::com::stencyl::utils::motion::CircInOut circInOut;
		static  ::com::stencyl::utils::motion::CircOutIn circOutIn;
		static  ::com::stencyl::utils::motion::BounceIn bounceIn;
		static  ::com::stencyl::utils::motion::BounceOut bounceOut;
		static  ::com::stencyl::utils::motion::BounceInOut bounceInOut;
		static  ::com::stencyl::utils::motion::BounceOutIn bounceOutIn;
		static  ::com::stencyl::utils::motion::BackIn backIn;
		static  ::com::stencyl::utils::motion::BackOut backOut;
		static  ::com::stencyl::utils::motion::BackInOut backInOut;
		static  ::com::stencyl::utils::motion::BackOutIn backOutIn;
		static  ::com::stencyl::utils::motion::ElasticIn elasticIn;
		static  ::com::stencyl::utils::motion::ElasticOut elasticOut;
		static  ::com::stencyl::utils::motion::ElasticInOut elasticInOut;
		static  ::com::stencyl::utils::motion::ElasticOutIn elasticOutIn;
		static  ::com::stencyl::utils::motion::WarpOut warpOut;
		static  ::com::stencyl::utils::motion::WarpIn warpIn;
		static  ::com::stencyl::utils::motion::WarpInOut warpInOut;
		static  ::com::stencyl::utils::motion::WarpOutIn warpOutIn;
};

} // end namespace com
} // end namespace stencyl
} // end namespace utils
} // end namespace motion

#endif /* INCLUDED_com_stencyl_utils_motion_Easing */ 
