// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_utils_ColorMatrix
#define INCLUDED_com_stencyl_utils_ColorMatrix

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,utils,ARGB)
HX_DECLARE_CLASS3(com,stencyl,utils,ColorDeficiencyTypes)
HX_DECLARE_CLASS3(com,stencyl,utils,ColorMatrix)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,filters,ColorMatrixFilter)

namespace com{
namespace stencyl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES ColorMatrix_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ColorMatrix_obj OBJ_;
		ColorMatrix_obj();

	public:
		enum { _hx_ClassId = 0x54915c26 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.utils.ColorMatrix")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.utils.ColorMatrix"); }
		static hx::ObjectPtr< ColorMatrix_obj > __new();
		static hx::ObjectPtr< ColorMatrix_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ColorMatrix_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ColorMatrix","\xe4","\x5f","\x23","\x5a"); }

		static void __boot();
		static  ::com::stencyl::utils::ColorMatrix mulMatrixMatrix( ::com::stencyl::utils::ColorMatrix A, ::com::stencyl::utils::ColorMatrix B, ::com::stencyl::utils::ColorMatrix C);
		static ::Dynamic mulMatrixMatrix_dyn();

		static  ::com::stencyl::utils::ColorMatrix blendMatrixMatrix( ::com::stencyl::utils::ColorMatrix A, ::com::stencyl::utils::ColorMatrix B, ::com::stencyl::utils::ColorMatrix C,Float amount);
		static ::Dynamic blendMatrixMatrix_dyn();

		static Float LUMA_R;
		static Float LUMA_G;
		static Float LUMA_B;
		static Float LUMA_R2;
		static Float LUMA_G2;
		static Float LUMA_B2;
		static Float INV3;
		Float m11;
		Float m12;
		Float m13;
		Float m14;
		Float m15;
		Float m21;
		Float m22;
		Float m23;
		Float m24;
		Float m25;
		Float m31;
		Float m32;
		Float m33;
		Float m34;
		Float m35;
		Float m41;
		Float m42;
		Float m43;
		Float m44;
		Float m45;
		::Array< Float > matrix;
		 ::com::stencyl::utils::ColorMatrix preHue;
		 ::com::stencyl::utils::ColorMatrix postHue;
		bool hueInitialized;
		 ::openfl::filters::ColorMatrixFilter getFilter();
		::Dynamic getFilter_dyn();

		 ::com::stencyl::utils::ColorMatrix identity();
		::Dynamic identity_dyn();

		 ::com::stencyl::utils::ColorMatrix invert();
		::Dynamic invert_dyn();

		 ::com::stencyl::utils::ColorMatrix adjustSaturation(Float s);
		::Dynamic adjustSaturation_dyn();

		 ::com::stencyl::utils::ColorMatrix adjustBrightness(Float x);
		::Dynamic adjustBrightness_dyn();

		 ::com::stencyl::utils::ColorMatrix adjustBrightnessRGB(Float r,Float g,Float b);
		::Dynamic adjustBrightnessRGB_dyn();

		 ::com::stencyl::utils::ColorMatrix adjustContrast(Float x);
		::Dynamic adjustContrast_dyn();

		 ::com::stencyl::utils::ColorMatrix adjustContrastRGB(Float r,Float g,Float b);
		::Dynamic adjustContrastRGB_dyn();

		 ::com::stencyl::utils::ColorMatrix adjustHue(Float angle);
		::Dynamic adjustHue_dyn();

		 ::com::stencyl::utils::ColorMatrix luminance2Alpha();
		::Dynamic luminance2Alpha_dyn();

		 ::com::stencyl::utils::ColorMatrix adjustAlphaContrast(Float amount);
		::Dynamic adjustAlphaContrast_dyn();

		 ::com::stencyl::utils::ColorMatrix colorize(int rgb, ::Dynamic amount);
		::Dynamic colorize_dyn();

		 ::com::stencyl::utils::ColorMatrix rotateHue(Float angle);
		::Dynamic rotateHue_dyn();

		 ::com::stencyl::utils::ColorMatrix setChannels( ::Dynamic r, ::Dynamic g, ::Dynamic b, ::Dynamic a);
		::Dynamic setChannels_dyn();

		 ::com::stencyl::utils::ColorMatrix average( ::Dynamic r, ::Dynamic g, ::Dynamic b);
		::Dynamic average_dyn();

		 ::com::stencyl::utils::ColorMatrix threshold(Float threshold, ::Dynamic factor);
		::Dynamic threshold_dyn();

		 ::com::stencyl::utils::ColorMatrix desaturate();
		::Dynamic desaturate_dyn();

		 ::com::stencyl::utils::ColorMatrix setMultiplicators( ::Dynamic red, ::Dynamic green, ::Dynamic blue, ::Dynamic alpha);
		::Dynamic setMultiplicators_dyn();

		 ::com::stencyl::utils::ColorMatrix clearChannels( ::Dynamic red, ::Dynamic green, ::Dynamic blue, ::Dynamic alpha);
		::Dynamic clearChannels_dyn();

		 ::com::stencyl::utils::ColorMatrix thresholdAlpha(Float threshold, ::Dynamic factor);
		::Dynamic thresholdAlpha_dyn();

		 ::com::stencyl::utils::ColorMatrix averageRGB2Alpha();
		::Dynamic averageRGB2Alpha_dyn();

		 ::com::stencyl::utils::ColorMatrix invertAlpha();
		::Dynamic invertAlpha_dyn();

		 ::com::stencyl::utils::ColorMatrix rgb2Alpha(Float r,Float g,Float b);
		::Dynamic rgb2Alpha_dyn();

		 ::com::stencyl::utils::ColorMatrix setAlpha(Float alpha);
		::Dynamic setAlpha_dyn();

		 ::com::stencyl::utils::ColorMatrix rotateRed(Float angle);
		::Dynamic rotateRed_dyn();

		 ::com::stencyl::utils::ColorMatrix rotateGreen(Float angle);
		::Dynamic rotateGreen_dyn();

		 ::com::stencyl::utils::ColorMatrix rotateBlue(Float angle);
		::Dynamic rotateBlue_dyn();

		 ::com::stencyl::utils::ColorMatrix shearRed(Float green,Float blue);
		::Dynamic shearRed_dyn();

		 ::com::stencyl::utils::ColorMatrix shearGreen(Float red,Float blue);
		::Dynamic shearGreen_dyn();

		 ::com::stencyl::utils::ColorMatrix shearBlue(Float red,Float green);
		::Dynamic shearBlue_dyn();

		 ::com::stencyl::utils::ColorMatrix applyColorDeficiency( ::com::stencyl::utils::ColorDeficiencyTypes type);
		::Dynamic applyColorDeficiency_dyn();

		 ::com::stencyl::utils::ARGB applyMatrix( ::com::stencyl::utils::ARGB argb, ::com::stencyl::utils::ARGB out);
		::Dynamic applyMatrix_dyn();

		::Array< Float > transformVector(::Array< Float > values);
		::Dynamic transformVector_dyn();

		void initHue();
		::Dynamic initHue_dyn();

		::Array< Float > toArray(::Array< Float > out);
		::Dynamic toArray_dyn();

		void set(Float i11,Float i12,Float i13,Float i14,Float i15,Float i21,Float i22,Float i23,Float i24,Float i25,Float i31,Float i32,Float i33,Float i34,Float i35,Float i41,Float i42,Float i43,Float i44,Float i45);
		::Dynamic set_dyn();

		void mul(Float i11,Float i12,Float i13,Float i14,Float i15,Float i21,Float i22,Float i23,Float i24,Float i25,Float i31,Float i32,Float i33,Float i34,Float i35,Float i41,Float i42,Float i43,Float i44,Float i45);
		::Dynamic mul_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace utils

#endif /* INCLUDED_com_stencyl_utils_ColorMatrix */ 
