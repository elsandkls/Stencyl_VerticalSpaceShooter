// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_collision_Pixelmask
#define INCLUDED_com_stencyl_models_collision_Pixelmask

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_models_collision_Hitbox
#include <com/stencyl/models/collision/Hitbox.h>
#endif
HX_DECLARE_CLASS4(com,stencyl,models,collision,Hitbox)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Mask)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Pixelmask)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace com{
namespace stencyl{
namespace models{
namespace collision{


class HXCPP_CLASS_ATTRIBUTES Pixelmask_obj : public  ::com::stencyl::models::collision::Hitbox_obj
{
	public:
		typedef  ::com::stencyl::models::collision::Hitbox_obj super;
		typedef Pixelmask_obj OBJ_;
		Pixelmask_obj();

	public:
		enum { _hx_ClassId = 0x3c8b8f79 };

		void __construct( ::Dynamic source,hx::Null< int >  __o_x,hx::Null< int >  __o_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.collision.Pixelmask")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.collision.Pixelmask"); }
		static hx::ObjectPtr< Pixelmask_obj > __new( ::Dynamic source,hx::Null< int >  __o_x,hx::Null< int >  __o_y);
		static hx::ObjectPtr< Pixelmask_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic source,hx::Null< int >  __o_x,hx::Null< int >  __o_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Pixelmask_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Pixelmask","\x52","\xa2","\xd9","\xb8"); }

		int threshold;
		bool collideMask( ::com::stencyl::models::collision::Mask other);

		bool collideHitbox( ::com::stencyl::models::collision::Hitbox other);

		bool collidePixelmask( ::com::stencyl::models::collision::Pixelmask other);
		::Dynamic collidePixelmask_dyn();

		 ::openfl::display::BitmapData get_data();
		::Dynamic get_data_dyn();

		 ::openfl::display::BitmapData set_data( ::openfl::display::BitmapData value);
		::Dynamic set_data_dyn();

		 ::openfl::display::BitmapData _data;
		 ::openfl::geom::Rectangle _rect;
		 ::openfl::geom::Point _point;
		 ::openfl::geom::Point _point2;
};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace collision

#endif /* INCLUDED_com_stencyl_models_collision_Pixelmask */ 
