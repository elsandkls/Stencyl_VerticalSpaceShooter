// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_utils_Utils
#define INCLUDED_com_stencyl_utils_Utils

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(cloner,Cloner)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Collision)
HX_DECLARE_CLASS3(com,stencyl,utils,Utils)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(lime,app,Future)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,ITileContainer)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,media,SoundTransform)
HX_DECLARE_CLASS2(openfl,net,SharedObject)

namespace com{
namespace stencyl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Utils_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Utils_obj OBJ_;
		Utils_obj();

	public:
		enum { _hx_ClassId = 0x5b8fbe0b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.stencyl.utils.Utils")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.stencyl.utils.Utils"); }

		hx::ObjectPtr< Utils_obj > __new() {
			hx::ObjectPtr< Utils_obj > __this = new Utils_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Utils_obj > __alloc(hx::Ctx *_hx_ctx) {
			Utils_obj *__this = (Utils_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Utils_obj), false, "com.stencyl.utils.Utils"));
			*(void **)__this = Utils_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Utils_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Utils","\x11","\x1a","\x0c","\x3e"); }

		static void __boot();
		static int INTEGER_MAX;
		static Float NUMBER_MAX_VALUE;
		static int blackColor;
		static int width;
		static int height;
		static Float elapsed;
		static Float rate;
		static  ::openfl::geom::Rectangle bounds;
		static  ::openfl::geom::Point camera;
		static bool toBoolean(::String s);
		static ::Dynamic toBoolean_dyn();

		static void clear(::cpp::VirtualArray arr);
		static ::Dynamic clear_dyn();

		static void removeValueFromArray(::cpp::VirtualArray arr, ::Dynamic value);
		static ::Dynamic removeValueFromArray_dyn();

		static bool contains(::cpp::VirtualArray arr, ::Dynamic value);
		static ::Dynamic contains_dyn();

		static bool mapContainsValue( ::haxe::ds::StringMap map, ::Dynamic value);
		static ::Dynamic mapContainsValue_dyn();

		static int mapCount( ::haxe::ds::StringMap map);
		static ::Dynamic mapCount_dyn();

		static ::cpp::VirtualArray mapToList( ::haxe::ds::StringMap map,::String type);
		static ::Dynamic mapToList_dyn();

		static  ::cloner::Cloner cloner;
		static  ::Dynamic clone( ::Dynamic obj);
		static ::Dynamic clone_dyn();

		static  ::haxe::ds::StringMap copyMap( ::haxe::ds::StringMap map);
		static ::Dynamic copyMap_dyn();

		static void applyToAllChildren( ::openfl::display::DisplayObjectContainer container, ::Dynamic fun);
		static ::Dynamic applyToAllChildren_dyn();

		static void removeAllChildren( ::openfl::display::DisplayObjectContainer container);
		static ::Dynamic removeAllChildren_dyn();

		static void removeAllTiles(::Dynamic container);
		static ::Dynamic removeAllTiles_dyn();

		static void demouse( ::openfl::display::DisplayObjectContainer container);
		static ::Dynamic demouse_dyn();

		static  ::openfl::geom::Point getAnchorPoint( ::openfl::display::DisplayObject obj);
		static ::Dynamic getAnchorPoint_dyn();

		static void setCamera(hx::Null< Float >  x,hx::Null< Float >  y);
		static ::Dynamic setCamera_dyn();

		static void resetCamera();
		static ::Dynamic resetCamera_dyn();

		static Float get_volume();
		static ::Dynamic get_volume_dyn();

		static Float set_volume(Float value);
		static ::Dynamic set_volume_dyn();

		static Float get_pan();
		static ::Dynamic get_pan_dyn();

		static Float set_pan(Float value);
		static ::Dynamic set_pan_dyn();

		static int sign(Float value);
		static ::Dynamic sign_dyn();

		static Float approach(Float value,Float target,Float amount);
		static ::Dynamic approach_dyn();

		static Float lerp(Float a,Float b,hx::Null< Float >  t);
		static ::Dynamic lerp_dyn();

		static int colorLerp(int fromColor,int toColor,hx::Null< Float >  t);
		static ::Dynamic colorLerp_dyn();

		static void stepTowards( ::Dynamic object,Float x,Float y,hx::Null< Float >  distance);
		static ::Dynamic stepTowards_dyn();

		static void anchorTo( ::Dynamic object, ::Dynamic anchor,hx::Null< Float >  distance);
		static ::Dynamic anchorTo_dyn();

		static Float angle(Float x1,Float y1,Float x2,Float y2);
		static ::Dynamic angle_dyn();

		static void angleXY( ::Dynamic object,Float angle,hx::Null< Float >  length,hx::Null< Float >  x,hx::Null< Float >  y);
		static ::Dynamic angleXY_dyn();

		static void rotateAround( ::Dynamic object, ::Dynamic anchor,hx::Null< Float >  angle,hx::Null< bool >  relative);
		static ::Dynamic rotateAround_dyn();

		static Float distance(Float x1,Float y1,hx::Null< Float >  x2,hx::Null< Float >  y2);
		static ::Dynamic distance_dyn();

		static Float distanceSquared(Float x1,Float y1,hx::Null< Float >  x2,hx::Null< Float >  y2);
		static ::Dynamic distanceSquared_dyn();

		static Float distanceRects(Float x1,Float y1,Float w1,Float h1,Float x2,Float y2,Float w2,Float h2);
		static ::Dynamic distanceRects_dyn();

		static Float distanceRectPoint(Float px,Float py,Float rx,Float ry,Float rw,Float rh);
		static ::Dynamic distanceRectPoint_dyn();

		static Float clamp(Float value,Float min,Float max);
		static ::Dynamic clamp_dyn();

		static void clampInRect( ::Dynamic object,Float x,Float y,Float width,Float height,hx::Null< Float >  padding);
		static ::Dynamic clampInRect_dyn();

		static Float scale(Float value,Float min,Float max,Float min2,Float max2);
		static ::Dynamic scale_dyn();

		static Float scaleClamp(Float value,Float min,Float max,Float min2,Float max2);
		static ::Dynamic scaleClamp_dyn();

		static int indexOf(::cpp::VirtualArray a, ::Dynamic v);
		static ::Dynamic indexOf_dyn();

		static  ::Dynamic next( ::Dynamic current,::cpp::VirtualArray options,hx::Null< bool >  loop);
		static ::Dynamic next_dyn();

		static  ::Dynamic prev( ::Dynamic current,::cpp::VirtualArray options,hx::Null< bool >  loop);
		static ::Dynamic prev_dyn();

		static  ::Dynamic swap( ::Dynamic current, ::Dynamic a, ::Dynamic b);
		static ::Dynamic swap_dyn();

		static int getColorRGB(hx::Null< int >  R,hx::Null< int >  G,hx::Null< int >  B);
		static ::Dynamic getColorRGB_dyn();

		static int getRed(int color);
		static ::Dynamic getRed_dyn();

		static int getGreen(int color);
		static ::Dynamic getGreen_dyn();

		static int getBlue(int color);
		static ::Dynamic getBlue_dyn();

		static int convertColor(int color);
		static ::Dynamic convertColor_dyn();

		static Float timeFlag();
		static ::Dynamic timeFlag_dyn();

		static ::Array< int > frames(int from,int to,hx::Null< int >  skip);
		static ::Dynamic frames_dyn();

		static Float time;
		static Float set_time(Float value);
		static ::Dynamic set_time_dyn();

		static void saveToSharedObject( ::openfl::net::SharedObject so,::String name, ::Dynamic value);
		static ::Dynamic saveToSharedObject_dyn();

		static  ::Dynamic loadFromSharedObject( ::openfl::net::SharedObject so,::String name);
		static ::Dynamic loadFromSharedObject_dyn();

		static void flushSharedObject( ::openfl::net::SharedObject so, ::Dynamic onComplete);
		static ::Dynamic flushSharedObject_dyn();

		static void saveMap( ::haxe::ds::StringMap map,::String fileName, ::Dynamic onComplete);
		static ::Dynamic saveMap_dyn();

		static void loadMap( ::haxe::ds::StringMap map,::String fileName, ::Dynamic onComplete);
		static ::Dynamic loadMap_dyn();

		static void convertLegacySharedObject(::String name,hx::Null< bool >  overwrite);
		static ::Dynamic convertLegacySharedObject_dyn();

		static  ::haxe::io::Bytes getConfigBytes(::String path);
		static ::Dynamic getConfigBytes_dyn();

		static ::String getConfigText(::String path);
		static ::Dynamic getConfigText_dyn();

		static  ::lime::app::Future getConfigBitmap(::String path);
		static ::Dynamic getConfigBitmap_dyn();

		static  ::haxe::io::Bytes loadBytes(::String path);
		static ::Dynamic loadBytes_dyn();

		static ::String loadText(::String path);
		static ::Dynamic loadText_dyn();

		static  ::openfl::display::BitmapData loadBitmapData(::String path);
		static ::Dynamic loadBitmapData_dyn();

		static void saveImage( ::openfl::display::BitmapData image,::String outputFile);
		static ::Dynamic saveImage_dyn();

		static Float _time;
		static Float _updateTime;
		static Float _renderTime;
		static Float _gameTime;
		static Float _flashTime;
		static  ::haxe::ds::StringMap _bitmap;
		static int _seed;
		static int _getSeed;
		static Float _volume;
		static Float _pan;
		static  ::openfl::media::SoundTransform _soundTransform;
		static Float DEG;
		static Float RAD;
		static  ::openfl::display::Stage stage;
		static  ::openfl::geom::Point point;
		static  ::openfl::geom::Point point2;
		static  ::openfl::geom::Point zero;
		static  ::openfl::geom::Rectangle rect;
		static  ::openfl::geom::Matrix matrix;
		static  ::openfl::display::Sprite sprite;
		static  ::com::stencyl::models::actor::Collision collision;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace utils

#endif /* INCLUDED_com_stencyl_utils_Utils */ 
