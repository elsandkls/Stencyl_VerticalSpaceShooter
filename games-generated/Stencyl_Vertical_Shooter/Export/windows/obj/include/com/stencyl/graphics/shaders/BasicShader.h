// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#define INCLUDED_com_stencyl_graphics_shaders_BasicShader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(com,stencyl,graphics,shaders,BasicShader)
HX_DECLARE_CLASS4(com,stencyl,graphics,shaders,PostProcess)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{


class HXCPP_CLASS_ATTRIBUTES BasicShader_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BasicShader_obj OBJ_;
		BasicShader_obj();

	public:
		enum { _hx_ClassId = 0x488ca67b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.graphics.shaders.BasicShader")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.graphics.shaders.BasicShader"); }
		static hx::ObjectPtr< BasicShader_obj > __new();
		static hx::ObjectPtr< BasicShader_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BasicShader_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BasicShader","\x53","\x2c","\x34","\xb4"); }

		 ::com::stencyl::graphics::shaders::BasicShader multipassParent;
		 ::com::stencyl::graphics::shaders::BasicShader multipassTarget;
		 ::com::stencyl::graphics::shaders::PostProcess model;
		void setProperty(::String name, ::Dynamic value);
		::Dynamic setProperty_dyn();

		 ::Dynamic getProperty(::String name);
		::Dynamic getProperty_dyn();

		void tweenProperty(::String name,Float targetValue,hx::Null< Float >  duration, ::Dynamic easing);
		::Dynamic tweenProperty_dyn();

		void enable();
		::Dynamic enable_dyn();

		void disable();
		::Dynamic disable_dyn();

		void setTimeScale(Float amount);
		::Dynamic setTimeScale_dyn();

		 ::com::stencyl::graphics::shaders::BasicShader combine( ::com::stencyl::graphics::shaders::BasicShader shader);
		::Dynamic combine_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders

#endif /* INCLUDED_com_stencyl_graphics_shaders_BasicShader */ 
