// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_utils_PolyDecompBayazit
#define INCLUDED_com_stencyl_utils_PolyDecompBayazit

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,utils,PolyDecompBayazit)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace com{
namespace stencyl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES PolyDecompBayazit_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef PolyDecompBayazit_obj OBJ_;
		PolyDecompBayazit_obj();

	public:
		enum { _hx_ClassId = 0x4dd68520 };

		void __construct(::Array< ::Dynamic> points);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.utils.PolyDecompBayazit")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.utils.PolyDecompBayazit"); }
		static hx::ObjectPtr< PolyDecompBayazit_obj > __new(::Array< ::Dynamic> points);
		static hx::ObjectPtr< PolyDecompBayazit_obj > __alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> points);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PolyDecompBayazit_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PolyDecompBayazit","\xc2","\x5e","\x15","\x1a"); }

		static Float area( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c);
		static ::Dynamic area_dyn();

		static bool right( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c);
		static ::Dynamic right_dyn();

		static bool rightOn( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c);
		static ::Dynamic rightOn_dyn();

		static bool left( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c);
		static ::Dynamic left_dyn();

		static bool leftOn( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c);
		static ::Dynamic leftOn_dyn();

		static Float sqdist( ::openfl::geom::Point a, ::openfl::geom::Point b);
		static ::Dynamic sqdist_dyn();

		static  ::openfl::geom::Point getIntersection( ::openfl::geom::Point start1, ::openfl::geom::Point end1, ::openfl::geom::Point start2, ::openfl::geom::Point end2);
		static ::Dynamic getIntersection_dyn();

		void combineColinearPoints();
		::Dynamic combineColinearPoints_dyn();

		::Array< ::Dynamic> points;
		void combineClosePoints();
		::Dynamic combineClosePoints_dyn();

		 ::openfl::geom::Point at(int i);
		::Dynamic at_dyn();

		bool isReflex(int i);
		::Dynamic isReflex_dyn();

		 ::com::stencyl::utils::PolyDecompBayazit polyFromRange(int lower,int upper);
		::Dynamic polyFromRange_dyn();

		void decompose( ::Dynamic cb);
		::Dynamic decompose_dyn();

		void makeCCW();
		::Dynamic makeCCW_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace utils

#endif /* INCLUDED_com_stencyl_utils_PolyDecompBayazit */ 
