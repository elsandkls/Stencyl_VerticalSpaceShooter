// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#define INCLUDED_com_stencyl_graphics_shaders_PostProcess

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
HX_DECLARE_CLASS4(com,stencyl,graphics,shaders,BasicShader)
HX_DECLARE_CLASS4(com,stencyl,graphics,shaders,PostProcess)
HX_DECLARE_CLASS4(com,stencyl,graphics,shaders,Shader)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,EasingFunction)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectRenderer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,OpenGLRenderer)
HX_DECLARE_CLASS3(openfl,display3D,textures,RectangleTexture)
HX_DECLARE_CLASS3(openfl,display3D,textures,TextureBase)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{


class HXCPP_CLASS_ATTRIBUTES PostProcess_obj : public  ::openfl::display::DisplayObject_obj
{
	public:
		typedef  ::openfl::display::DisplayObject_obj super;
		typedef PostProcess_obj OBJ_;
		PostProcess_obj();

	public:
		enum { _hx_ClassId = 0x1822ba5b };

		void __construct( ::com::stencyl::graphics::shaders::BasicShader shader,::String fragmentShader,hx::Null< bool >  __o_literalText);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.graphics.shaders.PostProcess")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.graphics.shaders.PostProcess"); }
		static hx::ObjectPtr< PostProcess_obj > __new( ::com::stencyl::graphics::shaders::BasicShader shader,::String fragmentShader,hx::Null< bool >  __o_literalText);
		static hx::ObjectPtr< PostProcess_obj > __alloc(hx::Ctx *_hx_ctx, ::com::stencyl::graphics::shaders::BasicShader shader,::String fragmentShader,hx::Null< bool >  __o_literalText);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PostProcess_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PostProcess","\xcf","\x29","\xb5","\x11"); }

		static void __boot();
		static int UNIFORM_NOT_FOUND;
		static ::String CONTEXT_LOST;
		static ::String CONTEXT_RESTORED;
		static bool get_isSupported();
		static ::Dynamic get_isSupported_dyn();

		static ::String vertexShader;
		static ::Array< Float > get_vertices();
		static ::Dynamic get_vertices_dyn();

		bool _hx___added;
		bool _hx___initialized;
		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl;
		void _hx___enterFrame(int deltaTime);

		void _hx___renderGL( ::openfl::display::OpenGLRenderer renderer);

		void _hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer);

		void setUniform(::String uniform, ::Dynamic value);
		::Dynamic setUniform_dyn();

		Float getUniform(::String uniform);
		::Dynamic getUniform_dyn();

		void tweenUniform(::String name,Float targetValue,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		::Dynamic tweenUniform_dyn();

		void rebuild();
		::Dynamic rebuild_dyn();

		void createTexture(int width,int height);
		::Dynamic createTexture_dyn();

		void capture();
		::Dynamic capture_dyn();

		 ::openfl::display3D::textures::RectangleTexture texture;
		 ::com::stencyl::graphics::shaders::Shader fullScreenShader;
		 ::lime::graphics::opengl::GLObject buffer;
		 ::com::stencyl::graphics::shaders::BasicShader basicShader;
		Float time;
		Float timeScale;
		int vertexSlot;
		int texCoordSlot;
		int imageUniform;
		int resolutionUniform;
		int resolutionUsUniform;
		int timeUniform;
		 ::haxe::ds::StringMap uniforms;
		::Array< ::Dynamic> changedUniforms;
		 ::haxe::ds::StringMap uniformTweens;
};

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders

#endif /* INCLUDED_com_stencyl_graphics_shaders_PostProcess */ 
