// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_graphics_GLUtil
#define INCLUDED_com_stencyl_graphics_GLUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,graphics,GLUtil)
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS2(lime,graphics,RenderContext)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectRenderer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,OpenGLRenderer)
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace com{
namespace stencyl{
namespace graphics{


class HXCPP_CLASS_ATTRIBUTES GLUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GLUtil_obj OBJ_;
		GLUtil_obj();

	public:
		enum { _hx_ClassId = 0x1b5ac901 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.stencyl.graphics.GLUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.stencyl.graphics.GLUtil"); }

		hx::ObjectPtr< GLUtil_obj > __new() {
			hx::ObjectPtr< GLUtil_obj > __this = new GLUtil_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< GLUtil_obj > __alloc(hx::Ctx *_hx_ctx) {
			GLUtil_obj *__this = (GLUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GLUtil_obj), false, "com.stencyl.graphics.GLUtil"));
			*(void **)__this = GLUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GLUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GLUtil","\xc7","\x38","\x52","\x5e"); }

		static void __boot();
		static  ::lime::_internal::backend::native::NativeOpenGLRenderContext gl;
		static  ::openfl::display::OpenGLRenderer renderer;
		static  ::lime::graphics::RenderContext context;
		static  ::openfl::display3D::Context3D context3D;
		static  ::Dynamic textureMaxSize;
		static int MAX_TEXTURE_CAP;
		static void initialize();
		static ::Dynamic initialize_dyn();

		static void uploadTexture( ::openfl::display::BitmapData img,bool dispose);
		static ::Dynamic uploadTexture_dyn();

		static void disposeSoftwareBuffer( ::openfl::display::BitmapData img);
		static ::Dynamic disposeSoftwareBuffer_dyn();

		static  ::openfl::display::BitmapData createNewTexture(int size);
		static ::Dynamic createNewTexture_dyn();

		static void clearTexture( ::openfl::display::BitmapData img);
		static ::Dynamic clearTexture_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace graphics

#endif /* INCLUDED_com_stencyl_graphics_GLUtil */ 
