// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_actor_Sprite
#define INCLUDED_com_stencyl_models_actor_Sprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Sprite)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)

namespace com{
namespace stencyl{
namespace models{
namespace actor{


class HXCPP_CLASS_ATTRIBUTES Sprite_obj : public  ::com::stencyl::models::Resource_obj
{
	public:
		typedef  ::com::stencyl::models::Resource_obj super;
		typedef Sprite_obj OBJ_;
		Sprite_obj();

	public:
		enum { _hx_ClassId = 0x6f2c5c85 };

		void __construct(int ID,int atlasID,::String name,int defaultAnimation,bool readableImages);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.actor.Sprite")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.actor.Sprite"); }
		static hx::ObjectPtr< Sprite_obj > __new(int ID,int atlasID,::String name,int defaultAnimation,bool readableImages);
		static hx::ObjectPtr< Sprite_obj > __alloc(hx::Ctx *_hx_ctx,int ID,int atlasID,::String name,int defaultAnimation,bool readableImages);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Sprite_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Sprite","\x25","\x50","\x2a","\xf8"); }

		int defaultAnimation;
		 ::haxe::ds::IntMap animations;
		bool readableImages;
		void loadGraphics();

		void unloadGraphics();

		void reloadGraphics(int subID);

		int get_width();
		::Dynamic get_width_dyn();

		int get_height();
		::Dynamic get_height_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace actor

#endif /* INCLUDED_com_stencyl_models_actor_Sprite */ 
