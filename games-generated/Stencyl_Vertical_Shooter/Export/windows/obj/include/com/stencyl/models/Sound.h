// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_Sound
#define INCLUDED_com_stencyl_models_Sound

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS3(com,stencyl,models,Sound)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)
HX_DECLARE_CLASS2(openfl,media,SoundChannel)

namespace com{
namespace stencyl{
namespace models{


class HXCPP_CLASS_ATTRIBUTES Sound_obj : public  ::com::stencyl::models::Resource_obj
{
	public:
		typedef  ::com::stencyl::models::Resource_obj super;
		typedef Sound_obj OBJ_;
		Sound_obj();

	public:
		enum { _hx_ClassId = 0x248da576 };

		void __construct(int ID,::String name,bool streaming,bool looping,Float panning,Float volume,::String ext,int atlasID);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.Sound")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.Sound"); }
		static hx::ObjectPtr< Sound_obj > __new(int ID,::String name,bool streaming,bool looping,Float panning,Float volume,::String ext,int atlasID);
		static hx::ObjectPtr< Sound_obj > __alloc(hx::Ctx *_hx_ctx,int ID,::String name,bool streaming,bool looping,Float panning,Float volume,::String ext,int atlasID);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Sound_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Sound","\xaf","\xfc","\xf9","\x13"); }

		bool streaming;
		bool looping;
		Float panning;
		Float volume;
		::String ext;
		 ::openfl::media::Sound src;
		void loadGraphics();

		void unloadGraphics();

		 ::openfl::media::SoundChannel play(hx::Null< int >  channelNum,hx::Null< Float >  position);
		::Dynamic play_dyn();

		 ::openfl::media::SoundChannel loop(hx::Null< int >  channelNum,hx::Null< Float >  position);
		::Dynamic loop_dyn();

		 ::openfl::media::Sound getStreamingSource();
		::Dynamic getStreamingSource_dyn();

		void stopInstances();
		::Dynamic stopInstances_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models

#endif /* INCLUDED_com_stencyl_models_Sound */ 
