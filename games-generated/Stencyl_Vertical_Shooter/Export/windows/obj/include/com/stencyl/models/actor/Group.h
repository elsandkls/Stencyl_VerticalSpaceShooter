// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_actor_Group
#define INCLUDED_com_stencyl_models_actor_Group

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Group)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace com{
namespace stencyl{
namespace models{
namespace actor{


class HXCPP_CLASS_ATTRIBUTES Group_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Group_obj OBJ_;
		Group_obj();

	public:
		enum { _hx_ClassId = 0x728bc2bf };

		void __construct(int ID,::String name);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.actor.Group")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.actor.Group"); }
		static hx::ObjectPtr< Group_obj > __new(int ID,::String name);
		static hx::ObjectPtr< Group_obj > __alloc(hx::Ctx *_hx_ctx,int ID,::String name);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Group_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Group","\x1f","\x23","\x22","\x2d"); }

		::Array< ::Dynamic> list;
		::String name;
		int ID;
		::String sID;
		void addChild( ::com::stencyl::models::Actor a);
		::Dynamic addChild_dyn();

		void removeChild( ::com::stencyl::models::Actor a);
		::Dynamic removeChild_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace actor

#endif /* INCLUDED_com_stencyl_models_actor_Group */ 
