// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_Scene
#define INCLUDED_com_stencyl_models_Scene

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2JointDef)
HX_DECLARE_CLASS3(com,stencyl,graphics,EngineScaleUpdateListener)
HX_DECLARE_CLASS5(com,stencyl,io,mbs,scene,MbsActorInstance)
HX_DECLARE_CLASS6(com,stencyl,io,mbs,scene,physics,MbsJoint)
HX_DECLARE_CLASS6(com,stencyl,io,mbs,scene,physics,MbsRegion)
HX_DECLARE_CLASS6(com,stencyl,io,mbs,scene,physics,MbsTerrainRegion)
HX_DECLARE_CLASS3(com,stencyl,models,Background)
HX_DECLARE_CLASS3(com,stencyl,models,Scene)
HX_DECLARE_CLASS4(com,stencyl,models,scene,ActorInstance)
HX_DECLARE_CLASS4(com,stencyl,models,scene,RegionDef)
HX_DECLARE_CLASS4(com,stencyl,models,scene,TerrainDef)
HX_DECLARE_CLASS4(com,stencyl,models,scene,Tile)
HX_DECLARE_CLASS4(com,stencyl,models,scene,TileLayer)
HX_DECLARE_CLASS4(com,stencyl,models,scene,Wireframe)
HX_DECLARE_CLASS3(com,stencyl,utils,PolyDecompBayazit)
HX_DECLARE_CLASS3(de,polygonal,ds,Collection)
HX_DECLARE_CLASS3(de,polygonal,ds,Hashable)
HX_DECLARE_CLASS3(de,polygonal,ds,IntHashTable)
HX_DECLARE_CLASS3(de,polygonal,ds,Map)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(mbs,core,MbsObject)
HX_DECLARE_CLASS2(mbs,io,MbsDynamicList)
HX_DECLARE_CLASS2(mbs,io,MbsIntList)
HX_DECLARE_CLASS2(mbs,io,MbsList)
HX_DECLARE_CLASS2(mbs,io,MbsListBase)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)

namespace com{
namespace stencyl{
namespace models{


class HXCPP_CLASS_ATTRIBUTES Scene_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Scene_obj OBJ_;
		Scene_obj();

	public:
		enum { _hx_ClassId = 0x1c92f1f3 };

		void __construct(int ID,::String name);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.Scene")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.Scene"); }
		static hx::ObjectPtr< Scene_obj > __new(int ID,::String name);
		static hx::ObjectPtr< Scene_obj > __alloc(hx::Ctx *_hx_ctx,int ID,::String name);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Scene_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Scene","\x2c","\x49","\xff","\x0b"); }

		static void __boot();
		static int MAX_VERTICES;
		int ID;
		::String name;
		int sceneWidth;
		int sceneHeight;
		int tileWidth;
		int tileHeight;
		Float gravityX;
		Float gravityY;
		int eventID;
		::Dynamic colorBackground;
		 ::de::polygonal::ds::IntHashTable layers;
		 ::haxe::ds::IntMap actors;
		 ::haxe::ds::StringMap behaviorValues;
		::Array< int > atlases;
		bool retainsAtlases;
		::Array< ::Dynamic> wireframes;
		 ::haxe::ds::IntMap joints;
		 ::haxe::ds::IntMap regions;
		 ::haxe::ds::IntMap terrainRegions;
		::Array< ::Dynamic> animatedTiles;
		void load();
		::Dynamic load_dyn();

		void unload();
		::Dynamic unload_dyn();

		 ::haxe::ds::IntMap readRegions( ::mbs::io::MbsList list);
		::Dynamic readRegions_dyn();

		 ::com::stencyl::models::scene::RegionDef readRegion( ::com::stencyl::io::mbs::scene::physics::MbsRegion r);
		::Dynamic readRegion_dyn();

		::Array< ::Dynamic> shapeList;
		int currW;
		int currH;
		void addPolygonRegion( ::com::stencyl::utils::PolyDecompBayazit p);
		::Dynamic addPolygonRegion_dyn();

		void addPolygonTerrain( ::com::stencyl::utils::PolyDecompBayazit p);
		::Dynamic addPolygonTerrain_dyn();

		 ::haxe::ds::IntMap readTerrainRegions( ::mbs::io::MbsList list);
		::Dynamic readTerrainRegions_dyn();

		 ::com::stencyl::models::scene::TerrainDef readTerrainRegion( ::com::stencyl::io::mbs::scene::physics::MbsTerrainRegion r);
		::Dynamic readTerrainRegion_dyn();

		 ::haxe::ds::IntMap readJoints( ::mbs::io::MbsDynamicList list);
		::Dynamic readJoints_dyn();

		 ::box2D::dynamics::joints::B2JointDef readJoint( ::com::stencyl::io::mbs::scene::physics::MbsJoint r);
		::Dynamic readJoint_dyn();

		 ::de::polygonal::ds::IntHashTable readAllLayers( ::mbs::io::MbsDynamicList list, ::de::polygonal::ds::IntHashTable rawLayers);
		::Dynamic readAllLayers_dyn();

		::Dynamic readColorBackground( ::mbs::core::MbsObject r);
		::Dynamic readColorBackground_dyn();

		 ::de::polygonal::ds::IntHashTable readRawLayers( ::openfl::utils::ByteArrayData bytes,int numTileLayers);
		::Dynamic readRawLayers_dyn();

		 ::com::stencyl::models::scene::TileLayer readRawLayer( ::openfl::utils::ByteArrayData bytes,int length);
		::Dynamic readRawLayer_dyn();

		::Array< int > readAtlases( ::mbs::io::MbsIntList r);
		::Dynamic readAtlases_dyn();

		::Array< ::Dynamic> readWireframes( ::mbs::io::MbsList list);
		::Dynamic readWireframes_dyn();

		 ::haxe::ds::IntMap readActors( ::mbs::io::MbsList list);
		::Dynamic readActors_dyn();

		 ::com::stencyl::models::scene::ActorInstance readActorInstance( ::com::stencyl::io::mbs::scene::MbsActorInstance r);
		::Dynamic readActorInstance_dyn();

		int getID();
		::Dynamic getID_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models

#endif /* INCLUDED_com_stencyl_models_Scene */ 
