// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_utils_Mathematics
#define INCLUDED_com_stencyl_utils_Mathematics

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,utils,Mathematics)

namespace com{
namespace stencyl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Mathematics_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Mathematics_obj OBJ_;
		Mathematics_obj();

	public:
		enum { _hx_ClassId = 0x5832e29c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.stencyl.utils.Mathematics")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.stencyl.utils.Mathematics"); }

		hx::ObjectPtr< Mathematics_obj > __new() {
			hx::ObjectPtr< Mathematics_obj > __this = new Mathematics_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Mathematics_obj > __alloc(hx::Ctx *_hx_ctx) {
			Mathematics_obj *__this = (Mathematics_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mathematics_obj), false, "com.stencyl.utils.Mathematics"));
			*(void **)__this = Mathematics_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Mathematics_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Mathematics","\xf6","\xd5","\xb8","\x94"); }

		static int round(Float x);
		static ::Dynamic round_dyn();

		static int clamp(int x,int min,int max);
		static ::Dynamic clamp_dyn();

		static Float fclamp(Float x,Float min,Float max);
		static ::Dynamic fclamp_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace utils

#endif /* INCLUDED_com_stencyl_utils_Mathematics */ 
