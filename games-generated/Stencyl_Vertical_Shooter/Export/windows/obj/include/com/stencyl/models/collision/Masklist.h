// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_collision_Masklist
#define INCLUDED_com_stencyl_models_collision_Masklist

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_models_collision_Hitbox
#include <com/stencyl/models/collision/Hitbox.h>
#endif
HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Hitbox)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Mask)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Masklist)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace com{
namespace stencyl{
namespace models{
namespace collision{


class HXCPP_CLASS_ATTRIBUTES Masklist_obj : public  ::com::stencyl::models::collision::Hitbox_obj
{
	public:
		typedef  ::com::stencyl::models::collision::Hitbox_obj super;
		typedef Masklist_obj OBJ_;
		Masklist_obj();

	public:
		enum { _hx_ClassId = 0x2d683423 };

		void __construct(::cpp::VirtualArray masks, ::com::stencyl::models::Actor par);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.collision.Masklist")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.collision.Masklist"); }
		static hx::ObjectPtr< Masklist_obj > __new(::cpp::VirtualArray masks, ::com::stencyl::models::Actor par);
		static hx::ObjectPtr< Masklist_obj > __alloc(hx::Ctx *_hx_ctx,::cpp::VirtualArray masks, ::com::stencyl::models::Actor par);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Masklist_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Masklist","\x6a","\xff","\x6b","\xd4"); }

		bool collide( ::com::stencyl::models::collision::Mask mask);

		bool collideMasklist( ::com::stencyl::models::collision::Masklist other);

		 ::com::stencyl::models::collision::Mask add( ::com::stencyl::models::collision::Mask mask);
		::Dynamic add_dyn();

		 ::com::stencyl::models::collision::Mask remove( ::com::stencyl::models::collision::Mask mask);
		::Dynamic remove_dyn();

		void removeAt(hx::Null< int >  index);
		::Dynamic removeAt_dyn();

		void removeAll();
		::Dynamic removeAll_dyn();

		 ::com::stencyl::models::collision::Mask getMask(hx::Null< int >  index);
		::Dynamic getMask_dyn();

		void assignTo( ::com::stencyl::models::Actor parent);

		void update();

		int count;
		int get_count();
		::Dynamic get_count_dyn();

		::Array< ::Dynamic> _masks;
		::Array< ::Dynamic> _temp;
		int _count;
};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace collision

#endif /* INCLUDED_com_stencyl_models_collision_Masklist */ 
