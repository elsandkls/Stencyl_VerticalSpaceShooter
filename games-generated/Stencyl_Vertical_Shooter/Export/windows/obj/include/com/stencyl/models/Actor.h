// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_Actor
#define INCLUDED_com_stencyl_models_Actor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(box2D,collision,B2WorldManifold)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2MassData)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2PolygonShape)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2Body)
HX_DECLARE_CLASS2(box2D,dynamics,B2BodyDef)
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2Contact)
HX_DECLARE_CLASS2(com,stencyl,Engine)
HX_DECLARE_CLASS3(com,stencyl,behavior,Behavior)
HX_DECLARE_CLASS3(com,stencyl,behavior,BehaviorManager)
HX_DECLARE_CLASS3(com,stencyl,graphics,AbstractAnimation)
HX_DECLARE_CLASS3(com,stencyl,graphics,BitmapAnimation)
HX_DECLARE_CLASS3(com,stencyl,graphics,BitmapWrapper)
HX_DECLARE_CLASS3(com,stencyl,graphics,EngineScaleUpdateListener)
HX_DECLARE_CLASS3(com,stencyl,graphics,G)
HX_DECLARE_CLASS4(com,stencyl,graphics,fonts,Label)
HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS4(com,stencyl,models,actor,ActorTweenProperties)
HX_DECLARE_CLASS4(com,stencyl,models,actor,ActorType)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Animation)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Collision)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Group)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Sprite)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Hitbox)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Mask)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Masklist)
HX_DECLARE_CLASS4(com,stencyl,models,scene,Layer)
HX_DECLARE_CLASS5(com,stencyl,models,scene,layers,RegularLayer)
HX_DECLARE_CLASS4(com,stencyl,utils,motion,EasingFunction)
HX_DECLARE_CLASS3(de,polygonal,ds,Collection)
HX_DECLARE_CLASS3(de,polygonal,ds,Hashable)
HX_DECLARE_CLASS3(de,polygonal,ds,IntHashTable)
HX_DECLARE_CLASS3(de,polygonal,ds,Map)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Transform)

namespace com{
namespace stencyl{
namespace models{


class HXCPP_CLASS_ATTRIBUTES Actor_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Actor_obj OBJ_;
		Actor_obj();

	public:
		enum { _hx_ClassId = 0x4fb21980 };

		void __construct( ::com::stencyl::Engine engine,int ID,int groupID,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< int >  __o_layerID,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height, ::com::stencyl::models::actor::Sprite sprite, ::haxe::ds::StringMap behaviorValues, ::com::stencyl::models::actor::ActorType actorType, ::box2D::dynamics::B2BodyDef bodyDef,hx::Null< bool >  __o_isSensor,hx::Null< bool >  __o_isStationary,hx::Null< bool >  __o_isKinematic,hx::Null< bool >  __o_canRotate, ::Dynamic shape,hx::Null< bool >  __o_autoScale,hx::Null< bool >  __o_ignoreGravity,hx::Null< int >  __o_physicsMode);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.Actor")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.Actor"); }
		static hx::ObjectPtr< Actor_obj > __new( ::com::stencyl::Engine engine,int ID,int groupID,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< int >  __o_layerID,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height, ::com::stencyl::models::actor::Sprite sprite, ::haxe::ds::StringMap behaviorValues, ::com::stencyl::models::actor::ActorType actorType, ::box2D::dynamics::B2BodyDef bodyDef,hx::Null< bool >  __o_isSensor,hx::Null< bool >  __o_isStationary,hx::Null< bool >  __o_isKinematic,hx::Null< bool >  __o_canRotate, ::Dynamic shape,hx::Null< bool >  __o_autoScale,hx::Null< bool >  __o_ignoreGravity,hx::Null< int >  __o_physicsMode);
		static hx::ObjectPtr< Actor_obj > __alloc(hx::Ctx *_hx_ctx, ::com::stencyl::Engine engine,int ID,int groupID,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< int >  __o_layerID,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height, ::com::stencyl::models::actor::Sprite sprite, ::haxe::ds::StringMap behaviorValues, ::com::stencyl::models::actor::ActorType actorType, ::box2D::dynamics::B2BodyDef bodyDef,hx::Null< bool >  __o_isSensor,hx::Null< bool >  __o_isStationary,hx::Null< bool >  __o_isKinematic,hx::Null< bool >  __o_canRotate, ::Dynamic shape,hx::Null< bool >  __o_autoScale,hx::Null< bool >  __o_ignoreGravity,hx::Null< int >  __o_physicsMode);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Actor_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Actor","\xd5","\x3a","\xd4","\xae"); }

		static void __boot();
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static int GROUP_OFFSET;
		static  ::com::stencyl::models::actor::Animation recycledAnimation;
		static  ::com::stencyl::models::Actor lastCollided;
		static  ::box2D::collision::shapes::B2PolygonShape createBox(Float width,Float height);
		static ::Dynamic createBox_dyn();

		static  ::box2D::collision::B2WorldManifold manifold;
		static void scaleShape( ::box2D::collision::shapes::B2Shape shape, ::box2D::common::math::B2Vec2 center,Float factor);
		static ::Dynamic scaleShape_dyn();

		 ::com::stencyl::Engine engine;
		Float createTime;
		int ID;
		int groupID;
		 ::com::stencyl::models::scene::Layer cachedLayer;
		 ::com::stencyl::models::scene::Layer layer;
		int typeID;
		 ::com::stencyl::models::actor::ActorType type;
		bool recycled;
		bool paused;
		bool isRegion;
		bool isTerrainRegion;
		bool isTerrain;
		bool destroyed;
		bool drawActor;
		bool isHUD;
		bool alwaysSimulate;
		bool isCamera;
		bool killLeaveScreen;
		int physicsMode;
		bool autoScale;
		bool dead;
		bool dying;
		bool fixedRotation;
		bool ignoreGravity;
		bool defaultGravity;
		bool collidable;
		bool solid;
		bool resetOrigin;
		Float realX;
		Float realY;
		Float realAngle;
		Float realScaleX;
		Float realScaleY;
		Float lastX;
		Float lastY;
		Float lastAngle;
		 ::openfl::geom::Point lastScale;
		Float colX;
		Float colY;
		Float xSpeed;
		Float ySpeed;
		Float rSpeed;
		bool continuousCollision;
		 ::com::stencyl::models::actor::ActorTweenProperties tweenProps;
		Float cacheWidth;
		Float cacheHeight;
		 ::com::stencyl::graphics::BitmapAnimation currAnimation;
		::String currAnimationName;
		 ::haxe::ds::StringMap animationMap;
		::Array< ::Dynamic> bitmapFilters;
		 ::com::stencyl::models::actor::Sprite sprite;
		 ::haxe::ds::StringMap shapeMap;
		 ::haxe::ds::StringMap originMap;
		::String defaultAnim;
		 ::openfl::geom::Point currOrigin;
		 ::openfl::geom::Point currOffset;
		 ::openfl::geom::Point cacheAnchor;
		 ::openfl::geom::Transform transformObj;
		 ::openfl::geom::Point transformPoint;
		 ::openfl::geom::Matrix transformMatrix;
		bool updateMatrix;
		 ::openfl::geom::Matrix drawMatrix;
		 ::com::stencyl::graphics::fonts::Label label;
		::Array< ::Dynamic> attachedImages;
		bool smoothMove;
		bool firstMove;
		bool snapOnSet;
		Float drawX;
		Float drawY;
		Float moveMultiplier;
		Float moveXDistance;
		Float moveYDistance;
		Float minMove;
		Float maxMove;
		 ::com::stencyl::behavior::BehaviorManager behaviors;
		 ::haxe::ds::StringMap registry;
		 ::haxe::ds::IntMap allListeners;
		::cpp::VirtualArray allListenerReferences;
		::cpp::VirtualArray whenCreatedListeners;
		::cpp::VirtualArray whenUpdatedListeners;
		::cpp::VirtualArray whenDrawingListeners;
		::cpp::VirtualArray whenKilledListeners;
		::cpp::VirtualArray mouseOverListeners;
		::cpp::VirtualArray positionListeners;
		::cpp::VirtualArray collisionListeners;
		int positionListenerCount;
		int collisionListenerCount;
		int mouseState;
		bool lastScreenState;
		bool lastSceneState;
		bool isOnScreenCache;
		 ::box2D::dynamics::B2Body body;
		 ::box2D::dynamics::B2BodyDef bodyDef;
		 ::box2D::collision::shapes::B2MassData md;
		 ::openfl::geom::Point bodyScale;
		bool handlesCollisions;
		 ::de::polygonal::ds::IntHashTable contacts;
		 ::de::polygonal::ds::IntHashTable regionContacts;
		 ::de::polygonal::ds::IntHashTable collisions;
		 ::box2D::common::math::B2Vec2 dummy;
		 ::box2D::common::math::B2Vec2 zero;
		void destroy();
		::Dynamic destroy_dyn();

		void resetListeners();
		::Dynamic resetListeners_dyn();

		 ::com::stencyl::models::collision::Hitbox defaultHitbox;
		 ::com::stencyl::models::collision::Masklist defaultMasklist;
		void addAnim( ::com::stencyl::models::actor::Animation anim);
		::Dynamic addAnim_dyn();

		void reloadAnimationGraphics(int animID);
		::Dynamic reloadAnimationGraphics_dyn();

		void initScripts();
		::Dynamic initScripts_dyn();

		void initFromBody( ::box2D::dynamics::B2BodyDef bodyDef);
		::Dynamic initFromBody_dyn();

		void initBody(int groupID,bool isSensor,bool isStationary,bool isKinematic,bool canRotate, ::Dynamic shape);
		::Dynamic initBody_dyn();

		void addAnimation(::String name, ::com::stencyl::graphics::BitmapAnimation sprite);
		::Dynamic addAnimation_dyn();

		::String getAnimation();
		::Dynamic getAnimation_dyn();

		void setAnimation(::String name);
		::Dynamic setAnimation_dyn();

		void switchToDefaultAnimation();
		::Dynamic switchToDefaultAnimation_dyn();

		bool isAnimationPlaying();
		::Dynamic isAnimationPlaying_dyn();

		int getCurrentFrame();
		::Dynamic getCurrentFrame_dyn();

		void setCurrentFrame(int frame);
		::Dynamic setCurrentFrame_dyn();

		int getNumFrames();
		::Dynamic getNumFrames_dyn();

		bool defaultShapeChanged();
		::Dynamic defaultShapeChanged_dyn();

		void switchAnimation(::String name,hx::Null< bool >  defaultShapeChanged);
		::Dynamic switchAnimation_dyn();

		void updateChildrenPositions();
		::Dynamic updateChildrenPositions_dyn();

		void removeAttachedImages();
		::Dynamic removeAttachedImages_dyn();

		void update(Float elapsedTime);
		::Dynamic update_dyn();

		virtual void innerUpdate(Float elapsedTime,bool hudCheck);
		::Dynamic innerUpdate_dyn();

		void internalUpdate(Float elapsedTime,bool doAll);
		::Dynamic internalUpdate_dyn();

		void updateDrawingMatrix(hx::Null< bool >  force);
		::Dynamic updateDrawingMatrix_dyn();

		void updateTweenAlpha();
		::Dynamic updateTweenAlpha_dyn();

		void updateTweenScaleXY();
		::Dynamic updateTweenScaleXY_dyn();

		void updateTweenAngle();
		::Dynamic updateTweenAngle_dyn();

		void updateTweenXY();
		::Dynamic updateTweenXY_dyn();

		void updateBodyScale();
		::Dynamic updateBodyScale_dyn();

		void scaleBody(Float width,Float height);
		::Dynamic scaleBody_dyn();

		void checkScreenState();
		::Dynamic checkScreenState_dyn();

		int contactCount;
		int collisionsCount;
		void handleCollisions();
		::Dynamic handleCollisions_dyn();

		void addContact( ::box2D::dynamics::contacts::B2Contact point);
		::Dynamic addContact_dyn();

		void removeContact( ::box2D::dynamics::contacts::B2Contact point);
		::Dynamic removeContact_dyn();

		void addRegionContact( ::box2D::dynamics::contacts::B2Contact point);
		::Dynamic addRegionContact_dyn();

		void removeRegionContact( ::box2D::dynamics::contacts::B2Contact point);
		::Dynamic removeRegionContact_dyn();

		int getID();
		::Dynamic getID_dyn();

		::String getName();
		::Dynamic getName_dyn();

		int getGroupID();
		::Dynamic getGroupID_dyn();

		int getLayerID();
		::Dynamic getLayerID_dyn();

		 ::com::stencyl::models::scene::Layer getLayer();
		::Dynamic getLayer_dyn();

		::String getLayerName();
		::Dynamic getLayerName_dyn();

		int getLayerOrder();
		::Dynamic getLayerOrder_dyn();

		 ::com::stencyl::models::actor::ActorType getType();
		::Dynamic getType_dyn();

		bool isPausable();
		::Dynamic isPausable_dyn();

		bool isPaused();
		::Dynamic isPaused_dyn();

		void pause();
		::Dynamic pause_dyn();

		void unpause();
		::Dynamic unpause_dyn();

		 ::com::stencyl::models::actor::Group getGroup();
		::Dynamic getGroup_dyn();

		bool getIsRegion();
		::Dynamic getIsRegion_dyn();

		bool getIsTerrainRegion();
		::Dynamic getIsTerrainRegion_dyn();

		void moveToLayer( ::com::stencyl::models::scene::layers::RegularLayer layer);
		::Dynamic moveToLayer_dyn();

		void bringToFront();
		::Dynamic bringToFront_dyn();

		void bringForward();
		::Dynamic bringForward_dyn();

		void sendToBack();
		::Dynamic sendToBack_dyn();

		void sendBackward();
		::Dynamic sendBackward_dyn();

		void moveToBottom();
		::Dynamic moveToBottom_dyn();

		void moveToTop();
		::Dynamic moveToTop_dyn();

		void moveDown();
		::Dynamic moveDown_dyn();

		void moveUp();
		::Dynamic moveUp_dyn();

		int getZIndex();
		::Dynamic getZIndex_dyn();

		void setZIndex(int zindex);
		::Dynamic setZIndex_dyn();

		void enableSmoothMotion();
		::Dynamic enableSmoothMotion_dyn();

		Float getX(hx::Null< bool >  round);
		::Dynamic getX_dyn();

		Float getY(hx::Null< bool >  round);
		::Dynamic getY_dyn();

		Float getXCenter();
		::Dynamic getXCenter_dyn();

		Float getYCenter();
		::Dynamic getYCenter_dyn();

		Float getScreenX();
		::Dynamic getScreenX_dyn();

		Float getScreenY();
		::Dynamic getScreenY_dyn();

		void setX(Float x,hx::Null< bool >  resetSpeed,hx::Null< bool >  noCollision);
		::Dynamic setX_dyn();

		void setY(Float y,hx::Null< bool >  resetSpeed,hx::Null< bool >  noCollision);
		::Dynamic setY_dyn();

		void setXY(Float x,Float y,hx::Null< bool >  resetSpeed,hx::Null< bool >  noCollision);
		::Dynamic setXY_dyn();

		void setXCenter(Float x);
		::Dynamic setXCenter_dyn();

		void setYCenter(Float y);
		::Dynamic setYCenter_dyn();

		void setScreenX(Float x);
		::Dynamic setScreenX_dyn();

		void setScreenY(Float y);
		::Dynamic setScreenY_dyn();

		virtual void follow( ::com::stencyl::models::Actor a);
		::Dynamic follow_dyn();

		void followWithOffset( ::com::stencyl::models::Actor a,int ox,int oy);
		::Dynamic followWithOffset_dyn();

		void setOriginPoint(int x,int y);
		::Dynamic setOriginPoint_dyn();

		Float getXVelocity();
		::Dynamic getXVelocity_dyn();

		Float getYVelocity();
		::Dynamic getYVelocity_dyn();

		void setXVelocity(Float dx);
		::Dynamic setXVelocity_dyn();

		void setYVelocity(Float dy);
		::Dynamic setYVelocity_dyn();

		void setVelocity(Float angle,Float speed);
		::Dynamic setVelocity_dyn();

		void accelerateX(Float dx);
		::Dynamic accelerateX_dyn();

		void accelerateY(Float dy);
		::Dynamic accelerateY_dyn();

		void accelerate(Float angle,Float speed);
		::Dynamic accelerate_dyn();

		Float getAngle();
		::Dynamic getAngle_dyn();

		Float getAngleInDegrees();
		::Dynamic getAngleInDegrees_dyn();

		void setAngle(Float angle,hx::Null< bool >  inRadians);
		::Dynamic setAngle_dyn();

		void rotate(Float angle,hx::Null< bool >  inRadians);
		::Dynamic rotate_dyn();

		Float getAngularVelocity();
		::Dynamic getAngularVelocity_dyn();

		void setAngularVelocity(Float omega);
		::Dynamic setAngularVelocity_dyn();

		void changeAngularVelocity(Float omega);
		::Dynamic changeAngularVelocity_dyn();

		void push(Float dirX,Float dirY,Float magnitude);
		::Dynamic push_dyn();

		void pushInDirection(Float angle,Float speed);
		::Dynamic pushInDirection_dyn();

		void applyImpulse(Float dirX,Float dirY,Float magnitude);
		::Dynamic applyImpulse_dyn();

		void applyImpulseInDirection(Float angle,Float speed);
		::Dynamic applyImpulseInDirection_dyn();

		void applyTorque(Float torque);
		::Dynamic applyTorque_dyn();

		virtual Float getWidth();
		::Dynamic getWidth_dyn();

		virtual Float getHeight();
		::Dynamic getHeight_dyn();

		Float getPhysicsWidth();
		::Dynamic getPhysicsWidth_dyn();

		Float getPhysicsHeight();
		::Dynamic getPhysicsHeight_dyn();

		 ::box2D::dynamics::B2Body getBody();
		::Dynamic getBody_dyn();

		void enableRotation();
		::Dynamic enableRotation_dyn();

		void disableRotation();
		::Dynamic disableRotation_dyn();

		void setIgnoreGravity(bool state);
		::Dynamic setIgnoreGravity_dyn();

		bool ignoresGravity();
		::Dynamic ignoresGravity_dyn();

		Float getFriction();
		::Dynamic getFriction_dyn();

		Float getBounciness();
		::Dynamic getBounciness_dyn();

		Float getMass();
		::Dynamic getMass_dyn();

		Float getAngularMass();
		::Dynamic getAngularMass_dyn();

		Float getLinearDamping();
		::Dynamic getLinearDamping_dyn();

		Float getAngularDamping();
		::Dynamic getAngularDamping_dyn();

		void setFriction(Float value);
		::Dynamic setFriction_dyn();

		void setBounciness(Float value);
		::Dynamic setBounciness_dyn();

		void setMass(Float newMass);
		::Dynamic setMass_dyn();

		void setAngularMass(Float newAMass);
		::Dynamic setAngularMass_dyn();

		void setLinearDamping(Float newDamping);
		::Dynamic setLinearDamping_dyn();

		void setAngularDamping(Float newDamping);
		::Dynamic setAngularDamping_dyn();

		virtual bool isMouseOver();
		::Dynamic isMouseOver_dyn();

		bool isMouseHover();
		::Dynamic isMouseHover_dyn();

		bool isMouseDown();
		::Dynamic isMouseDown_dyn();

		bool isMousePressed();
		::Dynamic isMousePressed_dyn();

		bool isMouseReleased();
		::Dynamic isMouseReleased_dyn();

		void cancelTweens();
		::Dynamic cancelTweens_dyn();

		void fadeTo(Float value,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		::Dynamic fadeTo_dyn();

		void growTo(hx::Null< Float >  scaleX,hx::Null< Float >  scaleY,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		::Dynamic growTo_dyn();

		void spinTo(Float angle,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		::Dynamic spinTo_dyn();

		void moveTo(Float x,Float y,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		::Dynamic moveTo_dyn();

		void spinBy(Float angle,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		::Dynamic spinBy_dyn();

		void moveBy(Float x,Float y,hx::Null< Float >  duration, ::com::stencyl::utils::motion::EasingFunction easing);
		::Dynamic moveBy_dyn();

		void drawImage( ::com::stencyl::graphics::G g);
		::Dynamic drawImage_dyn();

		 ::openfl::display::BitmapData getCurrentImage();
		::Dynamic getCurrentImage_dyn();

		void enableActorDrawing();
		::Dynamic enableActorDrawing_dyn();

		void disableActorDrawing();
		::Dynamic disableActorDrawing_dyn();

		bool drawsImage();
		::Dynamic drawsImage_dyn();

		void setFilter(::Array< ::Dynamic> filter);
		::Dynamic setFilter_dyn();

		void clearFilters();
		::Dynamic clearFilters_dyn();

		void setBlendMode( ::Dynamic blendMode);
		::Dynamic setBlendMode_dyn();

		void resetBlendMode();
		::Dynamic resetBlendMode_dyn();

		void addBehavior( ::com::stencyl::behavior::Behavior b);
		::Dynamic addBehavior_dyn();

		bool hasBehavior(::String name);
		::Dynamic hasBehavior_dyn();

		void enableBehavior(::String name);
		::Dynamic enableBehavior_dyn();

		void disableBehavior(::String name);
		::Dynamic disableBehavior_dyn();

		bool isBehaviorEnabled(::String name);
		::Dynamic isBehaviorEnabled_dyn();

		void enableAllBehaviors();
		::Dynamic enableAllBehaviors_dyn();

		 ::Dynamic getValue(::String behaviorName,::String attributeName);
		::Dynamic getValue_dyn();

		void setValue(::String behaviorName,::String attributeName, ::Dynamic value);
		::Dynamic setValue_dyn();

		 ::Dynamic shout(::String msg,::cpp::VirtualArray args);
		::Dynamic shout_dyn();

		 ::Dynamic say(::String behaviorName,::String msg,::cpp::VirtualArray args);
		::Dynamic say_dyn();

		void setActorValue(::String name, ::Dynamic value);
		::Dynamic setActorValue_dyn();

		 ::Dynamic getActorValue(::String name);
		::Dynamic getActorValue_dyn();

		 ::Dynamic hasActorValue(::String name);
		::Dynamic hasActorValue_dyn();

		void registerListener(::cpp::VirtualArray type, ::Dynamic listener);
		::Dynamic registerListener_dyn();

		void removeAllListeners();
		::Dynamic removeAllListeners_dyn();

		void anchorToScreen();
		::Dynamic anchorToScreen_dyn();

		void unanchorFromScreen();
		::Dynamic unanchorFromScreen_dyn();

		bool isAnchoredToScreen();
		::Dynamic isAnchoredToScreen_dyn();

		void makeAlwaysSimulate(hx::Null< bool >  alterBody);
		::Dynamic makeAlwaysSimulate_dyn();

		void makeSometimesSimulate(hx::Null< bool >  alterBody);
		::Dynamic makeSometimesSimulate_dyn();

		bool alwaysSimulates();
		::Dynamic alwaysSimulates_dyn();

		void die();
		::Dynamic die_dyn();

		bool isDying();
		::Dynamic isDying_dyn();

		bool isAlive();
		::Dynamic isAlive_dyn();

		bool isOnScreen();
		::Dynamic isOnScreen_dyn();

		bool isInScene();
		::Dynamic isInScene_dyn();

		 ::com::stencyl::models::Actor getLastCollidedActor();
		::Dynamic getLastCollidedActor_dyn();

		void killSelfAfterLeavingScreen();
		::Dynamic killSelfAfterLeavingScreen_dyn();

		virtual ::String toString();

		void addRectangularShape(Float x,Float y,Float w,Float h);
		::Dynamic addRectangularShape_dyn();

		void addCircularShape(Float x,Float y,Float r);
		::Dynamic addCircularShape_dyn();

		void addVertex(::Array< ::Dynamic> vertices,Float x,Float y);
		::Dynamic addVertex_dyn();

		void addPolygonalShape(::Array< ::Dynamic> vertices);
		::Dynamic addPolygonalShape_dyn();

		 ::box2D::dynamics::B2Fixture createFixture( ::box2D::collision::shapes::B2Shape newShape);
		::Dynamic createFixture_dyn();

		 ::box2D::dynamics::B2Fixture getLastCreatedFixture();
		::Dynamic getLastCreatedFixture_dyn();

		virtual void setLocation(Float x,Float y);
		::Dynamic setLocation_dyn();

		 ::com::stencyl::models::collision::Mask get_shape();
		::Dynamic get_shape_dyn();

		 ::com::stencyl::models::collision::Mask set_shape( ::com::stencyl::models::collision::Mask value);
		::Dynamic set_shape_dyn();

		 ::com::stencyl::models::Actor collide(int groupID,Float x,Float y);
		::Dynamic collide_dyn();

		 ::com::stencyl::models::Actor collideTypes(::Array< int > types,Float x,Float y);
		::Dynamic collideTypes_dyn();

		 ::com::stencyl::models::Actor collideWith( ::com::stencyl::models::Actor e,Float x,Float y);
		::Dynamic collideWith_dyn();

		void collideInto(int groupID,Float x,Float y,::Array< ::Dynamic> array);
		::Dynamic collideInto_dyn();

		void clearCollisionInfoList();
		::Dynamic clearCollisionInfoList_dyn();

		void disposeRemovedCollisionInfo();
		::Dynamic disposeRemovedCollisionInfo_dyn();

		void clearCollidedList();
		::Dynamic clearCollidedList_dyn();

		 ::com::stencyl::models::actor::Collision addCollision( ::com::stencyl::models::actor::Collision info);
		::Dynamic addCollision_dyn();

		int alreadyCollided( ::com::stencyl::models::actor::Collision info2);
		::Dynamic alreadyCollided_dyn();

		void resetReal(Float x,Float y);
		::Dynamic resetReal_dyn();

		Float adjustByWidth(bool posDir);
		::Dynamic adjustByWidth_dyn();

		Float adjustByHeight(bool posDir);
		::Dynamic adjustByHeight_dyn();

		 ::com::stencyl::models::actor::Collision getAllCollisionInfo(Float xDir,Float yDir);
		::Dynamic getAllCollisionInfo_dyn();

		void moveActorBy(Float x,Float y,hx::Null< bool >  noCollision,hx::Null< bool >  sweep);
		::Dynamic moveActorBy_dyn();

		void moveActorTo(Float x,Float y,hx::Null< bool >  noCollision,hx::Null< bool >  sweep);
		::Dynamic moveActorTo_dyn();

		void moveActorTowards(Float x,Float y,Float amount,hx::Null< bool >  noCollision,hx::Null< bool >  sweep);
		::Dynamic moveActorTowards_dyn();

		void moveCollideX( ::com::stencyl::models::actor::Collision info,Float sign);
		::Dynamic moveCollideX_dyn();

		void moveCollideY( ::com::stencyl::models::actor::Collision info,Float sign);
		::Dynamic moveCollideY_dyn();

		void fillCollisionInfo( ::com::stencyl::models::actor::Collision info, ::com::stencyl::models::Actor a,Float xDir,Float yDir);
		::Dynamic fillCollisionInfo_dyn();

		void handleCollisionsSimple();
		::Dynamic handleCollisionsSimple_dyn();

		 ::com::stencyl::models::collision::Mask HITBOX;
		 ::com::stencyl::models::collision::Mask _mask;
		 ::com::stencyl::models::collision::Mask colMask;
		Float _x;
		Float _y;
		Float _moveX;
		Float _moveY;
		 ::openfl::geom::Point _point;
		 ::de::polygonal::ds::IntHashTable simpleCollisions;
		::Array< ::Dynamic> collidedList;
		int listChecked;
};

} // end namespace com
} // end namespace stencyl
} // end namespace models

#endif /* INCLUDED_com_stencyl_models_Actor */ 
