// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_Config
#define INCLUDED_com_stencyl_Config

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(com,stencyl,Config)
HX_DECLARE_CLASS3(com,stencyl,graphics,Scale)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace com{
namespace stencyl{


class HXCPP_CLASS_ATTRIBUTES Config_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Config_obj OBJ_;
		Config_obj();

	public:
		enum { _hx_ClassId = 0x67d0316d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.stencyl.Config")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.stencyl.Config"); }

		hx::ObjectPtr< Config_obj > __new() {
			hx::ObjectPtr< Config_obj > __this = new Config_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Config_obj > __alloc(hx::Ctx *_hx_ctx) {
			Config_obj *__this = (Config_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Config_obj), false, "com.stencyl.Config"));
			*(void **)__this = Config_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Config_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Config","\xe2","\xca","\x66","\xfc"); }

		static void __boot();
		static bool landscape;
		static bool autorotate;
		static int scaleMode;
		static int stageWidth;
		static int stageHeight;
		static int initSceneID;
		static int physicsMode;
		static Float gameScale;
		static bool forceHiResAssets;
		static bool antialias;
		static bool pixelsnap;
		static bool startInFullScreen;
		static bool disposeImages;
		static  ::haxe::ds::StringMap keys;
		static ::Array< ::Dynamic> scales;
		static ::String toolsetInterfaceHost;
		static  ::Dynamic toolsetInterfacePort;
		static  ::Dynamic buildConfig;
		static bool adPositionBottom;
		static bool testAds;
		static bool releaseMode;
		static bool useGciLogging;
		static bool showConsole;
		static bool debugDraw;
		static bool disableBackButton;
		static  ::Dynamic data;
		static  ::haxe::ds::StringMap defines;
		static void load();
		static ::Dynamic load_dyn();

		static  ::Dynamic loadMap( ::Dynamic jsonData, ::Dynamic mapData);
		static ::Dynamic loadMap_dyn();

		static void loadFromString(::String text,hx::Null< bool >  handleReload);
		static ::Dynamic loadFromString_dyn();

		static void setStaticFields();
		static ::Dynamic setStaticFields_dyn();

		static  ::haxe::ds::StringMap asMap( ::Dynamic anon);
		static ::Dynamic asMap_dyn();

};

} // end namespace com
} // end namespace stencyl

#endif /* INCLUDED_com_stencyl_Config */ 
