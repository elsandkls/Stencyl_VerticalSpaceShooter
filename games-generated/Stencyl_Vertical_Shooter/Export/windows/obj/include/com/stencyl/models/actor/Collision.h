// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_actor_Collision
#define INCLUDED_com_stencyl_models_actor_Collision

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(box2D,collision,B2Manifold)
HX_DECLARE_CLASS2(box2D,dynamics,B2Fixture)
HX_DECLARE_CLASS3(box2D,dynamics,contacts,B2Contact)
HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Collision)
HX_DECLARE_CLASS4(com,stencyl,models,actor,CollisionPoint)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Mask)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace com{
namespace stencyl{
namespace models{
namespace actor{


class HXCPP_CLASS_ATTRIBUTES Collision_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Collision_obj OBJ_;
		Collision_obj();

	public:
		enum { _hx_ClassId = 0x014f77f2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.actor.Collision")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.actor.Collision"); }
		static hx::ObjectPtr< Collision_obj > __new();
		static hx::ObjectPtr< Collision_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Collision_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Collision","\x52","\x88","\x0d","\x7d"); }

		static void __boot();
		static ::Array< ::Dynamic> recycledCollisions;
		static  ::haxe::ds::IntMap collisionResponses;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static void addResponse( ::Dynamic firstObject, ::Dynamic secondObject,::String response);
		static ::Dynamic addResponse_dyn();

		static void preSolve( ::box2D::dynamics::contacts::B2Contact contact, ::box2D::collision::B2Manifold oldManifold);
		static ::Dynamic preSolve_dyn();

		static  ::com::stencyl::models::actor::Collision get();
		static ::Dynamic get_dyn();

		static void recycle( ::com::stencyl::models::actor::Collision c);
		static ::Dynamic recycle_dyn();

		bool thisFromTop;
		bool thisFromLeft;
		bool thisFromBottom;
		bool thisFromRight;
		bool thisCollidedWithActor;
		bool thisCollidedWithTile;
		bool thisCollidedWithSensor;
		bool thisCollidedWithTerrain;
		bool otherFromTop;
		bool otherFromLeft;
		bool otherFromBottom;
		bool otherFromRight;
		bool otherCollidedWithActor;
		bool otherCollidedWithTile;
		bool otherCollidedWithSensor;
		bool otherCollidedWithTerrain;
		::Array< ::Dynamic> points;
		 ::com::stencyl::models::Actor thisActor;
		 ::com::stencyl::models::Actor otherActor;
		 ::box2D::dynamics::B2Fixture thisShape;
		 ::box2D::dynamics::B2Fixture otherShape;
		 ::com::stencyl::models::Actor actorA;
		 ::com::stencyl::models::Actor actorB;
		 ::com::stencyl::models::collision::Mask maskA;
		 ::com::stencyl::models::collision::Mask maskB;
		int groupA;
		int groupB;
		 ::openfl::geom::Rectangle bounds;
		bool useBounds;
		bool remove;
		bool solidCollision;
		 ::com::stencyl::models::actor::Collision linkedCollision;
		void clear();
		::Dynamic clear_dyn();

		 ::com::stencyl::models::actor::Collision switchData( ::com::stencyl::models::actor::Collision c);
		::Dynamic switchData_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace actor

#endif /* INCLUDED_com_stencyl_models_actor_Collision */ 
