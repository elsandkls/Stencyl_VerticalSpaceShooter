// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_actor_Animation
#define INCLUDED_com_stencyl_models_actor_Animation

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Animation)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Sprite)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)

namespace com{
namespace stencyl{
namespace models{
namespace actor{


class HXCPP_CLASS_ATTRIBUTES Animation_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Animation_obj OBJ_;
		Animation_obj();

	public:
		enum { _hx_ClassId = 0x7149be84 };

		void __construct(int animID,::String animName, ::com::stencyl::models::actor::Sprite parent, ::haxe::ds::IntMap simpleShapes, ::haxe::ds::IntMap physicsShapes,bool looping,bool sync,int imgWidth,int imgHeight,Float originX,Float originY,::Array< int > durations,int frameCount,int framesAcross,int framesDown);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.actor.Animation")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.actor.Animation"); }
		static hx::ObjectPtr< Animation_obj > __new(int animID,::String animName, ::com::stencyl::models::actor::Sprite parent, ::haxe::ds::IntMap simpleShapes, ::haxe::ds::IntMap physicsShapes,bool looping,bool sync,int imgWidth,int imgHeight,Float originX,Float originY,::Array< int > durations,int frameCount,int framesAcross,int framesDown);
		static hx::ObjectPtr< Animation_obj > __alloc(hx::Ctx *_hx_ctx,int animID,::String animName, ::com::stencyl::models::actor::Sprite parent, ::haxe::ds::IntMap simpleShapes, ::haxe::ds::IntMap physicsShapes,bool looping,bool sync,int imgWidth,int imgHeight,Float originX,Float originY,::Array< int > durations,int frameCount,int framesAcross,int framesDown);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Animation_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Animation","\xe4","\xce","\x07","\xed"); }

		static void __boot();
		static ::Array< ::Dynamic> allAnimations;
		static  ::openfl::display::BitmapData UNLOADED;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static void updateAll(Float elapsedTime);
		static ::Dynamic updateAll_dyn();

		int animID;
		::String animName;
		 ::com::stencyl::models::actor::Sprite parent;
		 ::haxe::ds::IntMap simpleShapes;
		 ::haxe::ds::IntMap physicsShapes;
		bool looping;
		bool sync;
		::Array< int > durations;
		::Array< ::Dynamic> frames;
		int frameWidth;
		int frameHeight;
		Float originX;
		Float originY;
		Float sharedTimer;
		int sharedFrameIndex;
		int imgWidth;
		int imgHeight;
		int frameCount;
		int framesAcross;
		int framesDown;
		bool graphicsLoaded;
		void loadGraphics();
		::Dynamic loadGraphics_dyn();

		void unloadGraphics();
		::Dynamic unloadGraphics_dyn();

		bool checkImageReadable();
		::Dynamic checkImageReadable_dyn();

		void update(Float elapsedTime);
		::Dynamic update_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace actor

#endif /* INCLUDED_com_stencyl_models_actor_Animation */ 
