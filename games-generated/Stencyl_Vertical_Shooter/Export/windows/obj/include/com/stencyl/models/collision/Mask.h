// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_collision_Mask
#define INCLUDED_com_stencyl_models_collision_Mask

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS4(com,stencyl,models,collision,CollisionInfo)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Hitbox)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Mask)
HX_DECLARE_CLASS4(com,stencyl,models,collision,Masklist)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace com{
namespace stencyl{
namespace models{
namespace collision{


class HXCPP_CLASS_ATTRIBUTES Mask_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Mask_obj OBJ_;
		Mask_obj();

	public:
		enum { _hx_ClassId = 0x2ff29145 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.collision.Mask")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.collision.Mask"); }
		static hx::ObjectPtr< Mask_obj > __new();
		static hx::ObjectPtr< Mask_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Mask_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Mask","\x0c","\x6d","\x2f","\x33"); }

		 ::com::stencyl::models::Actor parent;
		int groupID;
		 ::com::stencyl::models::collision::Masklist list;
		 ::openfl::geom::Rectangle lastBounds;
		 ::com::stencyl::models::collision::Mask lastCheckedMask;
		int lastColID;
		bool solid;
		::Array< int > collideTypes;
		virtual bool collide( ::com::stencyl::models::collision::Mask mask);
		::Dynamic collide_dyn();

		virtual bool collideMask( ::com::stencyl::models::collision::Mask other);
		::Dynamic collideMask_dyn();

		virtual bool collideMasklist( ::com::stencyl::models::collision::Masklist other);
		::Dynamic collideMasklist_dyn();

		virtual void assignTo( ::com::stencyl::models::Actor parent);
		::Dynamic assignTo_dyn();

		void debugDraw( ::openfl::display::Graphics graphics,Float scaleX,Float scaleY);
		::Dynamic debugDraw_dyn();

		virtual void update();
		::Dynamic update_dyn();

		void projectMask( ::openfl::geom::Point axis, ::com::stencyl::models::collision::CollisionInfo collisionInfo);
		::Dynamic projectMask_dyn();

		::String _class;
		 ::haxe::ds::StringMap _check;
};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace collision

#endif /* INCLUDED_com_stencyl_models_collision_Mask */ 
