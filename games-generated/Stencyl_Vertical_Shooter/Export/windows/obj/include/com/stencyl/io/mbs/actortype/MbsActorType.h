// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_io_mbs_actortype_MbsActorType
#define INCLUDED_com_stencyl_io_mbs_actortype_MbsActorType

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_io_mbs_MbsResource
#include <com/stencyl/io/mbs/MbsResource.h>
#endif
HX_DECLARE_CLASS4(com,stencyl,io,mbs,MbsResource)
HX_DECLARE_CLASS5(com,stencyl,io,mbs,actortype,MbsActorType)
HX_DECLARE_CLASS2(mbs,core,ComposedType)
HX_DECLARE_CLASS2(mbs,core,MbsField)
HX_DECLARE_CLASS2(mbs,core,MbsObject)
HX_DECLARE_CLASS2(mbs,core,MbsType)
HX_DECLARE_CLASS2(mbs,io,MbsIO)
HX_DECLARE_CLASS2(mbs,io,MbsList)
HX_DECLARE_CLASS2(mbs,io,MbsListBase)

namespace com{
namespace stencyl{
namespace io{
namespace mbs{
namespace actortype{


class HXCPP_CLASS_ATTRIBUTES MbsActorType_obj : public  ::com::stencyl::io::mbs::MbsResource_obj
{
	public:
		typedef  ::com::stencyl::io::mbs::MbsResource_obj super;
		typedef MbsActorType_obj OBJ_;
		MbsActorType_obj();

	public:
		enum { _hx_ClassId = 0x2e6073b3 };

		void __construct(::Dynamic data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.io.mbs.actortype.MbsActorType")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.io.mbs.actortype.MbsActorType"); }
		static hx::ObjectPtr< MbsActorType_obj > __new(::Dynamic data);
		static hx::ObjectPtr< MbsActorType_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MbsActorType_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MbsActorType","\x11","\xc9","\xe1","\x3f"); }

		static  ::mbs::core::MbsField angularDamping;
		static  ::mbs::core::MbsField autoScale;
		static  ::mbs::core::MbsField bodyType;
		static  ::mbs::core::MbsField continuous;
		static  ::mbs::core::MbsField eventSnippetID;
		static  ::mbs::core::MbsField fixedRotation;
		static  ::mbs::core::MbsField friction;
		static  ::mbs::core::MbsField groupID;
		static  ::mbs::core::MbsField ignoreGravity;
		static  ::mbs::core::MbsField inertia;
		static  ::mbs::core::MbsField linearDamping;
		static  ::mbs::core::MbsField mass;
		static  ::mbs::core::MbsField pausable;
		static  ::mbs::core::MbsField physicsMode;
		static  ::mbs::core::MbsField restitution;
		static  ::mbs::core::MbsField sprite;
		static  ::mbs::core::MbsField isStatic;
		static  ::mbs::core::MbsField snippets;
		static  ::mbs::core::ComposedType MBS_ACTOR_TYPE;
		static void initializeType();
		static ::Dynamic initializeType_dyn();

		static  ::mbs::io::MbsList new_MbsActorType_list(::Dynamic data);
		static ::Dynamic new_MbsActorType_list_dyn();

		 ::mbs::core::MbsType getMbsType();

		 ::mbs::io::MbsList _snippets;
		void allocateNew();

		Float getAngularDamping();
		::Dynamic getAngularDamping_dyn();

		void setAngularDamping(Float _val);
		::Dynamic setAngularDamping_dyn();

		bool getAutoScale();
		::Dynamic getAutoScale_dyn();

		void setAutoScale(bool _val);
		::Dynamic setAutoScale_dyn();

		int getBodyType();
		::Dynamic getBodyType_dyn();

		void setBodyType(int _val);
		::Dynamic setBodyType_dyn();

		bool getContinuous();
		::Dynamic getContinuous_dyn();

		void setContinuous(bool _val);
		::Dynamic setContinuous_dyn();

		int getEventSnippetID();
		::Dynamic getEventSnippetID_dyn();

		void setEventSnippetID(int _val);
		::Dynamic setEventSnippetID_dyn();

		bool getFixedRotation();
		::Dynamic getFixedRotation_dyn();

		void setFixedRotation(bool _val);
		::Dynamic setFixedRotation_dyn();

		Float getFriction();
		::Dynamic getFriction_dyn();

		void setFriction(Float _val);
		::Dynamic setFriction_dyn();

		int getGroupID();
		::Dynamic getGroupID_dyn();

		void setGroupID(int _val);
		::Dynamic setGroupID_dyn();

		bool getIgnoreGravity();
		::Dynamic getIgnoreGravity_dyn();

		void setIgnoreGravity(bool _val);
		::Dynamic setIgnoreGravity_dyn();

		Float getInertia();
		::Dynamic getInertia_dyn();

		void setInertia(Float _val);
		::Dynamic setInertia_dyn();

		Float getLinearDamping();
		::Dynamic getLinearDamping_dyn();

		void setLinearDamping(Float _val);
		::Dynamic setLinearDamping_dyn();

		Float getMass();
		::Dynamic getMass_dyn();

		void setMass(Float _val);
		::Dynamic setMass_dyn();

		bool getPausable();
		::Dynamic getPausable_dyn();

		void setPausable(bool _val);
		::Dynamic setPausable_dyn();

		int getPhysicsMode();
		::Dynamic getPhysicsMode_dyn();

		void setPhysicsMode(int _val);
		::Dynamic setPhysicsMode_dyn();

		Float getRestitution();
		::Dynamic getRestitution_dyn();

		void setRestitution(Float _val);
		::Dynamic setRestitution_dyn();

		int getSprite();
		::Dynamic getSprite_dyn();

		void setSprite(int _val);
		::Dynamic setSprite_dyn();

		bool getIsStatic();
		::Dynamic getIsStatic_dyn();

		void setIsStatic(bool _val);
		::Dynamic setIsStatic_dyn();

		 ::mbs::io::MbsList getSnippets();
		::Dynamic getSnippets_dyn();

		 ::mbs::io::MbsList createSnippets(int _length);
		::Dynamic createSnippets_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace io
} // end namespace mbs
} // end namespace actortype

#endif /* INCLUDED_com_stencyl_io_mbs_actortype_MbsActorType */ 
