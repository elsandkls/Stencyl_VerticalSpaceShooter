// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_io_mbs_game_MbsGame
#define INCLUDED_com_stencyl_io_mbs_game_MbsGame

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_mbs_core_MbsObject
#include <mbs/core/MbsObject.h>
#endif
HX_DECLARE_CLASS5(com,stencyl,io,mbs,game,MbsGame)
HX_DECLARE_CLASS2(mbs,core,ComposedType)
HX_DECLARE_CLASS2(mbs,core,MbsField)
HX_DECLARE_CLASS2(mbs,core,MbsObject)
HX_DECLARE_CLASS2(mbs,core,MbsType)
HX_DECLARE_CLASS2(mbs,io,MbsIO)
HX_DECLARE_CLASS2(mbs,io,MbsList)
HX_DECLARE_CLASS2(mbs,io,MbsListBase)

namespace com{
namespace stencyl{
namespace io{
namespace mbs{
namespace game{


class HXCPP_CLASS_ATTRIBUTES MbsGame_obj : public  ::mbs::core::MbsObject_obj
{
	public:
		typedef  ::mbs::core::MbsObject_obj super;
		typedef MbsGame_obj OBJ_;
		MbsGame_obj();

	public:
		enum { _hx_ClassId = 0x05ad9bf9 };

		void __construct(::Dynamic data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.io.mbs.game.MbsGame")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.io.mbs.game.MbsGame"); }
		static hx::ObjectPtr< MbsGame_obj > __new(::Dynamic data);
		static hx::ObjectPtr< MbsGame_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MbsGame_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MbsGame","\x70","\xea","\x3a","\x17"); }

		static  ::mbs::core::MbsField shapes;
		static  ::mbs::core::MbsField atlases;
		static  ::mbs::core::MbsField autotileFormats;
		static  ::mbs::core::MbsField groups;
		static  ::mbs::core::MbsField cgroups;
		static  ::mbs::core::MbsField gameAttributes;
		static  ::mbs::core::ComposedType MBS_GAME;
		static void initializeType();
		static ::Dynamic initializeType_dyn();

		static  ::mbs::io::MbsList new_MbsGame_list(::Dynamic data);
		static ::Dynamic new_MbsGame_list_dyn();

		 ::mbs::core::MbsType getMbsType();

		 ::mbs::io::MbsList _shapes;
		 ::mbs::io::MbsList _atlases;
		 ::mbs::io::MbsList _autotileFormats;
		 ::mbs::io::MbsList _groups;
		 ::mbs::io::MbsList _cgroups;
		 ::mbs::io::MbsList _gameAttributes;
		void allocateNew();
		::Dynamic allocateNew_dyn();

		 ::mbs::io::MbsList getShapes();
		::Dynamic getShapes_dyn();

		 ::mbs::io::MbsList createShapes(int _length);
		::Dynamic createShapes_dyn();

		 ::mbs::io::MbsList getAtlases();
		::Dynamic getAtlases_dyn();

		 ::mbs::io::MbsList createAtlases(int _length);
		::Dynamic createAtlases_dyn();

		 ::mbs::io::MbsList getAutotileFormats();
		::Dynamic getAutotileFormats_dyn();

		 ::mbs::io::MbsList createAutotileFormats(int _length);
		::Dynamic createAutotileFormats_dyn();

		 ::mbs::io::MbsList getGroups();
		::Dynamic getGroups_dyn();

		 ::mbs::io::MbsList createGroups(int _length);
		::Dynamic createGroups_dyn();

		 ::mbs::io::MbsList getCgroups();
		::Dynamic getCgroups_dyn();

		 ::mbs::io::MbsList createCgroups(int _length);
		::Dynamic createCgroups_dyn();

		 ::mbs::io::MbsList getGameAttributes();
		::Dynamic getGameAttributes_dyn();

		 ::mbs::io::MbsList createGameAttributes(int _length);
		::Dynamic createGameAttributes_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace io
} // end namespace mbs
} // end namespace game

#endif /* INCLUDED_com_stencyl_io_mbs_game_MbsGame */ 
