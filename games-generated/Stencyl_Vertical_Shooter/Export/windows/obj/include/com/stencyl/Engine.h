// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_Engine
#define INCLUDED_com_stencyl_Engine

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Universal)
HX_DECLARE_CLASS3(box2D,collision,shapes,B2Shape)
HX_DECLARE_CLASS3(box2D,common,math,B2Vec2)
HX_DECLARE_CLASS2(box2D,dynamics,B2Body)
HX_DECLARE_CLASS2(box2D,dynamics,B2DebugDraw)
HX_DECLARE_CLASS2(box2D,dynamics,B2World)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2DistanceJoint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2Joint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2LineJoint)
HX_DECLARE_CLASS3(box2D,dynamics,joints,B2RevoluteJoint)
HX_DECLARE_CLASS3(com,nmefermmmtools,debug,Stats)
HX_DECLARE_CLASS2(com,stencyl,Engine)
HX_DECLARE_CLASS3(com,stencyl,behavior,BehaviorManager)
HX_DECLARE_CLASS3(com,stencyl,behavior,TimedTask)
HX_DECLARE_CLASS3(com,stencyl,event,EventMaster)
HX_DECLARE_CLASS3(com,stencyl,event,NativeListener)
HX_DECLARE_CLASS3(com,stencyl,graphics,G)
HX_DECLARE_CLASS4(com,stencyl,graphics,shaders,PostProcess)
HX_DECLARE_CLASS4(com,stencyl,graphics,transitions,Transition)
HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS3(com,stencyl,models,Background)
HX_DECLARE_CLASS3(com,stencyl,models,Region)
HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS3(com,stencyl,models,Scene)
HX_DECLARE_CLASS3(com,stencyl,models,SoundChannel)
HX_DECLARE_CLASS3(com,stencyl,models,Terrain)
HX_DECLARE_CLASS4(com,stencyl,models,actor,ActorType)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Collision)
HX_DECLARE_CLASS4(com,stencyl,models,actor,Group)
HX_DECLARE_CLASS4(com,stencyl,models,scene,ActorInstance)
HX_DECLARE_CLASS4(com,stencyl,models,scene,DeferredActor)
HX_DECLARE_CLASS4(com,stencyl,models,scene,Layer)
HX_DECLARE_CLASS4(com,stencyl,models,scene,Tile)
HX_DECLARE_CLASS5(com,stencyl,models,scene,layers,BackgroundLayer)
HX_DECLARE_CLASS5(com,stencyl,models,scene,layers,RegularLayer)
HX_DECLARE_CLASS3(de,polygonal,ds,Collection)
HX_DECLARE_CLASS3(de,polygonal,ds,Hashable)
HX_DECLARE_CLASS3(de,polygonal,ds,IntHashTable)
HX_DECLARE_CLASS3(de,polygonal,ds,Map)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,MovieClip)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)

namespace com{
namespace stencyl{


class HXCPP_CLASS_ATTRIBUTES Engine_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Engine_obj OBJ_;
		Engine_obj();

	public:
		enum { _hx_ClassId = 0x03762cd1 };

		void __construct( ::Universal root);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.Engine")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.Engine"); }
		static hx::ObjectPtr< Engine_obj > __new( ::Universal root);
		static hx::ObjectPtr< Engine_obj > __alloc(hx::Ctx *_hx_ctx, ::Universal root);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Engine_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Engine","\xe2","\xbb","\x18","\x31"); }

		static void __boot();
		static  ::Dynamic __meta__;
		static ::String DOODAD;
		static ::String INTERNAL_SHIFT;
		static ::String INTERNAL_CTRL;
		static bool NO_PHYSICS;
		static bool DEBUG_DRAW;
		static ::String IMG_BASE;
		static Float SCALE;
		static bool checkedWideScreen;
		static bool isStandardIOS;
		static bool isExtendedIOS;
		static bool isIPhone6;
		static bool isIPhone6Plus;
		static bool isIPhoneX;
		static bool isIPhoneXMax;
		static bool isIPhoneXR;
		static bool isTabletIOS;
		static  ::com::stencyl::Engine engine;
		static bool landscape;
		static bool limitCameraToScene;
		static Float cameraX;
		static Float cameraY;
		static Float screenScaleX;
		static Float screenScaleY;
		static Float unzoomedScaleX;
		static Float unzoomedScaleY;
		static int screenOffsetX;
		static int screenOffsetY;
		static int screenWidth;
		static int screenHeight;
		static int sceneWidth;
		static int sceneHeight;
		static int screenWidthHalf;
		static int screenHeightHalf;
		static bool paused;
		static bool started;
		static bool inFocus;
		static  ::com::stencyl::event::EventMaster events;
		static int ITERATIONS;
		static Float physicsScale;
		static int paddingLeft;
		static int paddingRight;
		static int paddingTop;
		static int paddingBottom;
		static ::String ngID;
		static ::String ngKey;
		static  ::openfl::display::MovieClip movieClip;
		static  ::openfl::display::Stage stage;
		static int STEP_SIZE;
		static int MS_PER_SEC;
		static Float elapsedTime;
		static Float timeScale;
		static int totalElapsedTime;
		static bool debug;
		static  ::box2D::dynamics::B2DebugDraw debugDrawer;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static void initBehaviors( ::com::stencyl::behavior::BehaviorManager manager, ::haxe::ds::StringMap behaviorValues, ::Dynamic parent, ::com::stencyl::Engine game,bool initialize);
		static ::Dynamic initBehaviors_dyn();

		static Float toPhysicalUnits(Float value);
		static ::Dynamic toPhysicalUnits_dyn();

		static Float toPixelUnits(Float value);
		static ::Dynamic toPixelUnits_dyn();

		static  ::box2D::common::math::B2Vec2 vToPhysicalUnits( ::box2D::common::math::B2Vec2 v);
		static ::Dynamic vToPhysicalUnits_dyn();

		static  ::box2D::common::math::B2Vec2 vToPixelUnits( ::box2D::common::math::B2Vec2 v);
		static ::Dynamic vToPixelUnits_dyn();

		static void invokeListeners(::cpp::VirtualArray listeners);
		static ::Dynamic invokeListeners_dyn();

		static void invokeListeners2(::cpp::VirtualArray listeners, ::Dynamic value);
		static ::Dynamic invokeListeners2_dyn();

		static void invokeListeners3(::cpp::VirtualArray listeners, ::Dynamic value, ::Dynamic value2);
		static ::Dynamic invokeListeners3_dyn();

		static void invokeListeners4(::cpp::VirtualArray listeners, ::Dynamic value, ::Dynamic value2, ::Dynamic value3);
		static ::Dynamic invokeListeners4_dyn();

		static void invokeListeners5(::cpp::VirtualArray listeners, ::Dynamic value, ::Dynamic value2, ::Dynamic value3, ::Dynamic value4);
		static ::Dynamic invokeListeners5_dyn();

		static void invokeListeners6(::cpp::VirtualArray listeners, ::Dynamic value, ::Dynamic value2, ::Dynamic value3, ::Dynamic value4, ::Dynamic value5);
		static ::Dynamic invokeListeners6_dyn();

		Float zoomMultiplier;
		bool isHUDZoomable;
		 ::box2D::dynamics::B2World world;
		Float gravityX;
		Float gravityY;
		Float physicalWidth;
		Float physicalHeight;
		 ::com::stencyl::graphics::transitions::Transition leave;
		 ::com::stencyl::graphics::transitions::Transition enter;
		int sceneToEnter;
		int shakeTimer;
		Float shakeIntensity;
		bool isShaking;
		 ::com::stencyl::models::Scene scene;
		 ::com::stencyl::models::Actor camera;
		bool sceneInitialized;
		::Array< ::Dynamic> channels;
		::Array< ::Dynamic> tasks;
		 ::de::polygonal::ds::IntHashTable regions;
		 ::haxe::ds::IntMap terrainRegions;
		 ::haxe::ds::IntMap joints;
		 ::Universal root;
		 ::openfl::display::Shape colorLayer;
		 ::openfl::display::Shape maskLayer;
		 ::openfl::display::Sprite master;
		 ::com::stencyl::models::scene::Layer hudLayer;
		 ::openfl::display::Sprite transitionLayer;
		 ::openfl::display::Sprite debugLayer;
		 ::com::stencyl::graphics::G g;
		 ::haxe::ds::IntMap groups;
		 ::haxe::ds::StringMap reverseGroups;
		 ::de::polygonal::ds::IntHashTable allActors;
		int nextID;
		 ::haxe::ds::IntMap actorsOfType;
		 ::haxe::ds::IntMap recycledActorsOfType;
		::Array< ::Dynamic> actorsToCreateInNextScene;
		 ::de::polygonal::ds::IntHashTable layers;
		 ::haxe::ds::StringMap layersByName;
		::Array< ::Dynamic> interactiveLayers;
		::Array< ::Dynamic> backgroundLayers;
		 ::haxe::ds::StringMap dynamicTiles;
		::Array< ::Dynamic> animatedTiles;
		 ::com::stencyl::models::scene::Layer topLayer;
		 ::com::stencyl::models::scene::Layer bottomLayer;
		 ::com::stencyl::models::scene::Layer middleLayer;
		 ::haxe::ds::IntMap layersToDraw;
		bool tileUpdated;
		 ::haxe::ds::IntMap loadedAtlases;
		 ::haxe::ds::IntMap atlasesToLoad;
		 ::haxe::ds::IntMap atlasesToUnload;
		::Array< ::Dynamic> actorsToCreate;
		 ::haxe::ds::StringMap gameAttributes;
		 ::com::stencyl::behavior::BehaviorManager behaviors;
		Float lastTime;
		Float acc;
		Float mx;
		Float my;
		 ::de::polygonal::ds::IntHashTable collisionPairs;
		::Array< ::Dynamic> disableCollisionList;
		bool keyPollOccurred;
		 ::haxe::ds::StringMap whenKeyPressedListeners;
		bool hasKeyPressedListeners;
		::cpp::VirtualArray whenAnyKeyPressedListeners;
		::cpp::VirtualArray whenAnyKeyReleasedListeners;
		::cpp::VirtualArray whenAnyGamepadPressedListeners;
		::cpp::VirtualArray whenAnyGamepadReleasedListeners;
		 ::haxe::ds::ObjectMap whenTypeGroupCreatedListeners;
		 ::haxe::ds::ObjectMap whenTypeGroupDiesListeners;
		 ::haxe::ds::IntMap typeGroupPositionListeners;
		 ::haxe::ds::IntMap collisionListeners;
		 ::haxe::ds::ObjectMap soundListeners;
		 ::haxe::ds::IntMap channelListeners;
		::cpp::VirtualArray whenUpdatedListeners;
		::cpp::VirtualArray whenDrawingListeners;
		::cpp::VirtualArray whenMousePressedListeners;
		::cpp::VirtualArray whenMouseReleasedListeners;
		::cpp::VirtualArray whenMouseMovedListeners;
		::cpp::VirtualArray whenMouseDraggedListeners;
		::cpp::VirtualArray whenPausedListeners;
		::cpp::VirtualArray fullscreenListeners;
		::cpp::VirtualArray screenSizeListeners;
		::cpp::VirtualArray gameScaleListeners;
		::cpp::VirtualArray whenSwipedListeners;
		::cpp::VirtualArray whenMTStartListeners;
		::cpp::VirtualArray whenMTDragListeners;
		::cpp::VirtualArray whenMTEndListeners;
		::cpp::VirtualArray whenFocusChangedListeners;
		::Array< ::Dynamic> nativeListeners;
		 ::com::stencyl::graphics::shaders::PostProcess shader;
		 ::openfl::display::Sprite shaderLayer;
		::Array< ::Dynamic> shaders;
		bool isFullScreen;
		bool ignoreResize;
		 ::com::nmefermmmtools::debug::Stats stats;
		void onKeyDown( ::openfl::events::KeyboardEvent e);
		::Dynamic onKeyDown_dyn();

		void onWindowResize( ::openfl::events::Event event);
		::Dynamic onWindowResize_dyn();

		void onWindowRestore();
		::Dynamic onWindowRestore_dyn();

		void onWindowMaximize();
		::Dynamic onWindowMaximize_dyn();

		void onWindowFullScreen();
		::Dynamic onWindowFullScreen_dyn();

		bool isInFullScreen();
		::Dynamic isInFullScreen_dyn();

		void setFullScreen(bool value);
		::Dynamic setFullScreen_dyn();

		void toggleFullScreen();
		::Dynamic toggleFullScreen_dyn();

		void reloadScreen();
		::Dynamic reloadScreen_dyn();

		void addShader( ::com::stencyl::graphics::shaders::PostProcess pp);
		::Dynamic addShader_dyn();

		void clearShaders();
		::Dynamic clearShaders_dyn();

		void toggleShadersForHUD();
		::Dynamic toggleShadersForHUD_dyn();

		void resetShaders();
		::Dynamic resetShaders_dyn();

		void begin(int initSceneID);
		::Dynamic begin_dyn();

		void setStatsVisible(bool value);
		::Dynamic setStatsVisible_dyn();

		void loadScene(int sceneID);
		::Dynamic loadScene_dyn();

		void initPhysics();
		::Dynamic initPhysics_dyn();

		void loadActors();
		::Dynamic loadActors_dyn();

		void loadDeferredActors();
		::Dynamic loadDeferredActors_dyn();

		void initActorScripts();
		::Dynamic initActorScripts_dyn();

		void loadCamera();
		::Dynamic loadCamera_dyn();

		void loadRegions();
		::Dynamic loadRegions_dyn();

		void loadTerrainRegions();
		::Dynamic loadTerrainRegions_dyn();

		void loadJoints();
		::Dynamic loadJoints_dyn();

		void loadTerrain();
		::Dynamic loadTerrain_dyn();

		void initLayers();
		::Dynamic initLayers_dyn();

		void setColorBackground(::Dynamic bg);
		::Dynamic setColorBackground_dyn();

		void optimizePool();
		::Dynamic optimizePool_dyn();

		void cleanup();
		::Dynamic cleanup_dyn();

		void switchScene(int sceneID, ::com::stencyl::graphics::transitions::Transition leave, ::com::stencyl::graphics::transitions::Transition enter);
		::Dynamic switchScene_dyn();

		void enterScene();
		::Dynamic enterScene_dyn();

		bool isTransitioning();
		::Dynamic isTransitioning_dyn();

		bool isTransitioningOut();
		::Dynamic isTransitioningOut_dyn();

		void createActorInNextScene( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layer);
		::Dynamic createActorInNextScene_dyn();

		 ::com::stencyl::models::Actor createActor( ::com::stencyl::models::scene::ActorInstance ai,hx::Null< bool >  offset);
		::Dynamic createActor_dyn();

		void removeActor( ::com::stencyl::models::Actor a);
		::Dynamic removeActor_dyn();

		void removeActorFromLayer( ::com::stencyl::models::Actor a, ::com::stencyl::models::scene::Layer layer);
		::Dynamic removeActorFromLayer_dyn();

		void moveActorToLayer( ::com::stencyl::models::Actor a, ::com::stencyl::models::scene::Layer layer);
		::Dynamic moveActorToLayer_dyn();

		void recycleActor( ::com::stencyl::models::Actor a);
		::Dynamic recycleActor_dyn();

		 ::com::stencyl::models::Actor getRecycledActorOfType( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layerConst);
		::Dynamic getRecycledActorOfType_dyn();

		 ::com::stencyl::models::Actor getRecycledActorOfTypeOnLayer( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layerID);
		::Dynamic getRecycledActorOfTypeOnLayer_dyn();

		 ::com::stencyl::models::Actor createActorOfType( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layerID);
		::Dynamic createActorOfType_dyn();

		int getTopLayer();
		::Dynamic getTopLayer_dyn();

		int getBottomLayer();
		::Dynamic getBottomLayer_dyn();

		int getMiddleLayer();
		::Dynamic getMiddleLayer_dyn();

		void update(Float elapsedTime);
		::Dynamic update_dyn();

		void onUpdate( ::openfl::events::Event event);
		::Dynamic onUpdate_dyn();

		void postUpdate(Float currTime);
		::Dynamic postUpdate_dyn();

		void onFocus( ::openfl::events::Event event);
		::Dynamic onFocus_dyn();

		void onFocusLost( ::openfl::events::Event event);
		::Dynamic onFocusLost_dyn();

		void focusChanged(bool lost);
		::Dynamic focusChanged_dyn();

		void handleCollision( ::com::stencyl::models::Actor a, ::com::stencyl::models::actor::Collision event);
		::Dynamic handleCollision_dyn();

		void soundFinished(int channelNum);
		::Dynamic soundFinished_dyn();

		void addTask( ::com::stencyl::behavior::TimedTask task);
		::Dynamic addTask_dyn();

		void removeTask( ::com::stencyl::behavior::TimedTask taskToRemove);
		::Dynamic removeTask_dyn();

		void shakeScreen(Float intensity,Float duration);
		::Dynamic shakeScreen_dyn();

		void stopShakingScreen();
		::Dynamic stopShakingScreen_dyn();

		void cameraFollow( ::com::stencyl::models::Actor actor,hx::Null< bool >  lockX,hx::Null< bool >  lockY);
		::Dynamic cameraFollow_dyn();

		void moveCamera(Float x,Float y);
		::Dynamic moveCamera_dyn();

		void setZoom(Float m,hx::Null< bool >  changeSize);
		::Dynamic setZoom_dyn();

		void pause();
		::Dynamic pause_dyn();

		void unpause();
		::Dynamic unpause_dyn();

		bool isPaused();
		::Dynamic isPaused_dyn();

		void draw();
		::Dynamic draw_dyn();

		 ::Dynamic getValue(::String behaviorName,::String attributeName);
		::Dynamic getValue_dyn();

		void setValue(::String behaviorName,::String attributeName, ::Dynamic value);
		::Dynamic setValue_dyn();

		 ::Dynamic say(::String behaviorName,::String msg,::cpp::VirtualArray args);
		::Dynamic say_dyn();

		 ::Dynamic shout(::String msg,::cpp::VirtualArray args);
		::Dynamic shout_dyn();

		 ::com::stencyl::models::Actor getActor(int ID);
		::Dynamic getActor_dyn();

		::Array< ::Dynamic> getActorsOfType( ::com::stencyl::models::actor::ActorType type);
		::Dynamic getActorsOfType_dyn();

		::Array< ::Dynamic> getRecycledActorsOfType( ::com::stencyl::models::actor::ActorType type);
		::Dynamic getRecycledActorsOfType_dyn();

		 ::com::stencyl::models::scene::layers::RegularLayer getLayer(int refType,::String ref);
		::Dynamic getLayer_dyn();

		 ::com::stencyl::models::scene::layers::RegularLayer getLayerById(int id,hx::Null< bool >  withFallback);
		::Dynamic getLayerById_dyn();

		 ::com::stencyl::models::scene::layers::RegularLayer getLayerByName(::String name,hx::Null< bool >  withFallback);
		::Dynamic getLayerByName_dyn();

		 ::com::stencyl::models::scene::Layer getLayerByOrder(int layerConst);
		::Dynamic getLayerByOrder_dyn();

		void sendToBack( ::com::stencyl::models::Actor a);
		::Dynamic sendToBack_dyn();

		void sendBackward( ::com::stencyl::models::Actor a);
		::Dynamic sendBackward_dyn();

		void bringToFront( ::com::stencyl::models::Actor a);
		::Dynamic bringToFront_dyn();

		void bringForward( ::com::stencyl::models::Actor a);
		::Dynamic bringForward_dyn();

		int getNumberOfActorsWithinLayer( ::com::stencyl::models::scene::layers::RegularLayer layer);
		::Dynamic getNumberOfActorsWithinLayer_dyn();

		int getNumberOfLayers();
		::Dynamic getNumberOfLayers_dyn();

		int getOrderOfLayer( ::com::stencyl::models::scene::layers::RegularLayer layer);
		::Dynamic getOrderOfLayer_dyn();

		void moveLayerToOrder( ::com::stencyl::models::scene::layers::RegularLayer layer,int order);
		::Dynamic moveLayerToOrder_dyn();

		int getNextLayerID();
		::Dynamic getNextLayerID_dyn();

		void insertLayer( ::com::stencyl::models::scene::layers::RegularLayer layer,int order);
		::Dynamic insertLayer_dyn();

		void removeLayer( ::com::stencyl::models::scene::layers::RegularLayer layer);
		::Dynamic removeLayer_dyn();

		void refreshLayers();
		::Dynamic refreshLayers_dyn();

		Float getPhysicalWidth();
		::Dynamic getPhysicalWidth_dyn();

		Float getPhysicalHeight();
		::Dynamic getPhysicalHeight_dyn();

		void enableGlobalSleeping();
		::Dynamic enableGlobalSleeping_dyn();

		void disableGlobalSleeping();
		::Dynamic disableGlobalSleeping_dyn();

		 ::com::stencyl::models::actor::Group getGroup(int ID, ::com::stencyl::models::Actor a);
		::Dynamic getGroup_dyn();

		 ::com::stencyl::models::actor::Group getGroupByName(::String groupName);
		::Dynamic getGroupByName_dyn();

		int nextJointID();
		::Dynamic nextJointID_dyn();

		void addJoint( ::box2D::dynamics::joints::B2Joint j);
		::Dynamic addJoint_dyn();

		 ::box2D::dynamics::joints::B2Joint getJoint(int ID);
		::Dynamic getJoint_dyn();

		void destroyJoint( ::box2D::dynamics::joints::B2Joint j);
		::Dynamic destroyJoint_dyn();

		 ::box2D::dynamics::joints::B2DistanceJoint createStickJoint( ::box2D::dynamics::B2Body one, ::box2D::dynamics::B2Body two,hx::Null< int >  jointID,hx::Null< bool >  collide,hx::Null< Float >  damping,hx::Null< Float >  frequencyHz);
		::Dynamic createStickJoint_dyn();

		 ::box2D::dynamics::joints::B2DistanceJoint createCustomStickJoint( ::box2D::dynamics::B2Body one,Float x1,Float y1, ::box2D::dynamics::B2Body two,Float x2,Float y2);
		::Dynamic createCustomStickJoint_dyn();

		 ::box2D::dynamics::joints::B2RevoluteJoint createHingeJoint( ::box2D::dynamics::B2Body one, ::box2D::dynamics::B2Body two, ::box2D::common::math::B2Vec2 pt,hx::Null< int >  jointID,hx::Null< bool >  collide,hx::Null< bool >  limit,hx::Null< bool >  motor,hx::Null< Float >  lower,hx::Null< Float >  upper,hx::Null< Float >  torque,hx::Null< Float >  speed);
		::Dynamic createHingeJoint_dyn();

		 ::box2D::dynamics::joints::B2LineJoint createSlidingJoint( ::box2D::dynamics::B2Body one, ::box2D::dynamics::B2Body two, ::box2D::common::math::B2Vec2 dir,hx::Null< int >  jointID,hx::Null< bool >  collide,hx::Null< bool >  limit,hx::Null< bool >  motor,hx::Null< Float >  lower,hx::Null< Float >  upper,hx::Null< Float >  force,hx::Null< Float >  speed);
		::Dynamic createSlidingJoint_dyn();

		 ::com::stencyl::models::Region createRegion(Float x,Float y, ::box2D::collision::shapes::B2Shape shape,hx::Null< bool >  offset);
		::Dynamic createRegion_dyn();

		 ::com::stencyl::models::Region createBoxRegion(Float x,Float y,Float w,Float h);
		::Dynamic createBoxRegion_dyn();

		 ::com::stencyl::models::Region createCircularRegion(Float x,Float y,Float r);
		::Dynamic createCircularRegion_dyn();

		void addRegion( ::com::stencyl::models::Region r);
		::Dynamic addRegion_dyn();

		void removeRegion(int ID);
		::Dynamic removeRegion_dyn();

		 ::com::stencyl::models::Region getRegion(int ID);
		::Dynamic getRegion_dyn();

		 ::de::polygonal::ds::IntHashTable getRegions();
		::Dynamic getRegions_dyn();

		int nextRegionID();
		::Dynamic nextRegionID_dyn();

		bool isInRegion( ::com::stencyl::models::Actor a, ::com::stencyl::models::Region r);
		::Dynamic isInRegion_dyn();

		 ::com::stencyl::models::Terrain createTerrainRegion(Float x,Float y, ::box2D::collision::shapes::B2Shape shape,hx::Null< bool >  offset,hx::Null< int >  groupID);
		::Dynamic createTerrainRegion_dyn();

		 ::com::stencyl::models::Terrain createBoxTerrainRegion(Float x,Float y,Float w,Float h,hx::Null< int >  groupID);
		::Dynamic createBoxTerrainRegion_dyn();

		 ::com::stencyl::models::Terrain createCircularTerrainRegion(Float x,Float y,Float r,hx::Null< int >  groupID);
		::Dynamic createCircularTerrainRegion_dyn();

		void addTerrainRegion( ::com::stencyl::models::Terrain r);
		::Dynamic addTerrainRegion_dyn();

		void removeTerrainRegion(int ID);
		::Dynamic removeTerrainRegion_dyn();

		 ::com::stencyl::models::Terrain getTerrainRegion(int ID);
		::Dynamic getTerrainRegion_dyn();

		 ::haxe::ds::IntMap getTerrainRegions();
		::Dynamic getTerrainRegions_dyn();

		int nextTerrainRegionID();
		::Dynamic nextTerrainRegionID_dyn();

		void setGameAttribute(::String name, ::Dynamic value);
		::Dynamic setGameAttribute_dyn();

		 ::Dynamic getGameAttribute(::String name);
		::Dynamic getGameAttribute_dyn();

		void setOffscreenTolerance(int top,int left,int bottom,int right);
		::Dynamic setOffscreenTolerance_dyn();

		void setScrollFactor(int id,Float amountX, ::Dynamic amountY);
		::Dynamic setScrollFactor_dyn();

		void setLayerScrollFactor( ::com::stencyl::models::scene::layers::RegularLayer layer,Float amountX, ::Dynamic amountY);
		::Dynamic setLayerScrollFactor_dyn();

};

} // end namespace com
} // end namespace stencyl

#endif /* INCLUDED_com_stencyl_Engine */ 
