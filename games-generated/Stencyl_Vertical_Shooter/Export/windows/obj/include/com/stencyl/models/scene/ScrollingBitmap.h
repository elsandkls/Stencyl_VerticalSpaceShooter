// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_scene_ScrollingBitmap
#define INCLUDED_com_stencyl_models_scene_ScrollingBitmap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS4(com,stencyl,models,scene,ScrollingBitmap)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace com{
namespace stencyl{
namespace models{
namespace scene{


class HXCPP_CLASS_ATTRIBUTES ScrollingBitmap_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef ScrollingBitmap_obj OBJ_;
		ScrollingBitmap_obj();

	public:
		enum { _hx_ClassId = 0x1ce28a71 };

		void __construct( ::Dynamic img,Float dx,Float dy,hx::Null< Float >  __o_px,hx::Null< Float >  __o_py,hx::Null< int >  __o_ID,hx::Null< bool >  __o_repeats);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.scene.ScrollingBitmap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.scene.ScrollingBitmap"); }
		static hx::ObjectPtr< ScrollingBitmap_obj > __new( ::Dynamic img,Float dx,Float dy,hx::Null< Float >  __o_px,hx::Null< Float >  __o_py,hx::Null< int >  __o_ID,hx::Null< bool >  __o_repeats);
		static hx::ObjectPtr< ScrollingBitmap_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic img,Float dx,Float dy,hx::Null< Float >  __o_px,hx::Null< Float >  __o_py,hx::Null< int >  __o_ID,hx::Null< bool >  __o_repeats);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ScrollingBitmap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ScrollingBitmap","\xa4","\xac","\x08","\x9f"); }

		 ::openfl::display::Bitmap image1;
		 ::openfl::display::Bitmap image2;
		 ::openfl::display::Bitmap image3;
		 ::openfl::display::Bitmap image4;
		 ::openfl::display::Bitmap image5;
		 ::openfl::display::Bitmap image6;
		 ::openfl::display::Bitmap image7;
		 ::openfl::display::Bitmap image8;
		 ::openfl::display::Bitmap image9;
		Float speed;
		Float curStep;
		bool running;
		bool parallax;
		bool scrolling;
		Float cacheWidth;
		Float cacheHeight;
		Float xP;
		Float yP;
		Float xPos;
		Float yPos;
		Float xVelocity;
		Float yVelocity;
		Float parallaxX;
		Float parallaxY;
		int backgroundID;
		bool repeats;
		void update(Float x,Float y,Float elapsedTime);
		::Dynamic update_dyn();

		void resetPositions();
		::Dynamic resetPositions_dyn();

		void start();
		::Dynamic start_dyn();

		void stop();
		::Dynamic stop_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace scene

#endif /* INCLUDED_com_stencyl_models_scene_ScrollingBitmap */ 
