// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_Input
#define INCLUDED_com_stencyl_Input

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(RoxGestureAgent)
HX_DECLARE_CLASS0(RoxGestureEvent)
HX_DECLARE_CLASS2(com,stencyl,Control)
HX_DECLARE_CLASS2(com,stencyl,Input)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(lime,ui,Joystick)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,events,TouchEvent)

namespace com{
namespace stencyl{


class HXCPP_CLASS_ATTRIBUTES Input_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Input_obj OBJ_;
		Input_obj();

	public:
		enum { _hx_ClassId = 0x105727bf };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.stencyl.Input")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.stencyl.Input"); }

		hx::ObjectPtr< Input_obj > __new() {
			hx::ObjectPtr< Input_obj > __this = new Input_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Input_obj > __alloc(hx::Ctx *_hx_ctx) {
			Input_obj *__this = (Input_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Input_obj), false, "com.stencyl.Input"));
			*(void **)__this = Input_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Input_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Input","\xea","\x33","\x4b","\x51"); }

		static void __boot();
		static Float mouseX;
		static Float mouseY;
		static bool mouseWheel;
		static int mouseWheelDelta;
		static bool mouseDown;
		static bool mousePressed;
		static bool mouseReleased;
		static bool rightMouseDown;
		static bool rightMousePressed;
		static bool rightMouseReleased;
		static bool middleMouseDown;
		static bool middleMousePressed;
		static bool middleMouseReleased;
		static Float accelX;
		static Float accelY;
		static Float accelZ;
		static  ::haxe::ds::StringMap multiTouchPoints;
		static int numTouches;
		static bool swipedUp;
		static bool swipedDown;
		static bool swipedLeft;
		static bool swipedRight;
		static bool _enabled;
		static  ::RoxGestureAgent _roxAgent;
		static int _swipeDirection;
		static Float _joySensitivity;
		static  ::haxe::ds::IntMap _joyHatState;
		static  ::haxe::ds::IntMap _joyAxisState;
		static  ::haxe::ds::IntMap _joyAxisPressure;
		static  ::haxe::ds::IntMap _joyButtonState;
		static ::Array< bool > _key;
		static ::Array< ::Dynamic> _controlsToReset;
		static  ::haxe::ds::StringMap _controlMap;
		static  ::haxe::ds::IntMap _keyControlMap;
		static  ::haxe::ds::StringMap _joyControlMap;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static void define(::String controlName,::Array< int > keyCodes);
		static ::Dynamic define_dyn();

		static void mapKey(int keyCode,::String controlName);
		static ::Dynamic mapKey_dyn();

		static void unmapKey(int keyCode);
		static ::Dynamic unmapKey_dyn();

		static ::Array< int > getKeys(::String controlName);
		static ::Dynamic getKeys_dyn();

		static void mapJoystickButton(::String id,::String controlName);
		static ::Dynamic mapJoystickButton_dyn();

		static void unmapJoystickButton(::String id);
		static ::Dynamic unmapJoystickButton_dyn();

		static void unmapControl(::String controlName);
		static ::Dynamic unmapControl_dyn();

		static void unmapKeyboardFromControl(::String controlName);
		static ::Dynamic unmapKeyboardFromControl_dyn();

		static void unmapJoystickFromControl(::String controlName);
		static ::Dynamic unmapJoystickFromControl_dyn();

		static void setJoySensitivity(Float val);
		static ::Dynamic setJoySensitivity_dyn();

		static void saveJoystickConfig(::String filename);
		static ::Dynamic saveJoystickConfig_dyn();

		static void loadJoystickConfig(::String filename);
		static ::Dynamic loadJoystickConfig_dyn();

		static void clearJoystickConfig();
		static ::Dynamic clearJoystickConfig_dyn();

		static void loadInputConfig();
		static ::Dynamic loadInputConfig_dyn();

		static bool check(::String controlName);
		static ::Dynamic check_dyn();

		static bool pressed(::String controlName);
		static ::Dynamic pressed_dyn();

		static bool released(::String controlName);
		static ::Dynamic released_dyn();

		static Float getButtonPressure(::String controlName);
		static ::Dynamic getButtonPressure_dyn();

		static void simulateKeyPress(::String controlName);
		static ::Dynamic simulateKeyPress_dyn();

		static void simulateKeyRelease(::String controlName);
		static ::Dynamic simulateKeyRelease_dyn();

		static void enableJoystick();
		static ::Dynamic enableJoystick_dyn();

		static void enable();
		static ::Dynamic enable_dyn();

		static void update();
		static ::Dynamic update_dyn();

		static void onSwipe( ::RoxGestureEvent e);
		static ::Dynamic onSwipe_dyn();

		static void controlPressed( ::com::stencyl::Control control,Float pressure);
		static ::Dynamic controlPressed_dyn();

		static void controlReleased( ::com::stencyl::Control control);
		static ::Dynamic controlReleased_dyn();

		static void controlStateUpdated( ::com::stencyl::Control control);
		static ::Dynamic controlStateUpdated_dyn();

		static void onKeyDown( ::openfl::events::KeyboardEvent e);
		static ::Dynamic onKeyDown_dyn();

		static void onKeyUp( ::openfl::events::KeyboardEvent e);
		static ::Dynamic onKeyUp_dyn();

		static void onMouseDown( ::openfl::events::MouseEvent e);
		static ::Dynamic onMouseDown_dyn();

		static void onMouseUp( ::openfl::events::MouseEvent e);
		static ::Dynamic onMouseUp_dyn();

		static void onRightMouseDown( ::openfl::events::MouseEvent e);
		static ::Dynamic onRightMouseDown_dyn();

		static void onRightMouseUp( ::openfl::events::MouseEvent e);
		static ::Dynamic onRightMouseUp_dyn();

		static void onMiddleMouseDown( ::openfl::events::MouseEvent e);
		static ::Dynamic onMiddleMouseDown_dyn();

		static void onMiddleMouseUp( ::openfl::events::MouseEvent e);
		static ::Dynamic onMiddleMouseUp_dyn();

		static void onMouseWheel( ::openfl::events::MouseEvent e);
		static ::Dynamic onMouseWheel_dyn();

		static void onJoystickConnected( ::lime::ui::Joystick joystick);
		static ::Dynamic onJoystickConnected_dyn();

		static void onJoyAxisMove( ::lime::ui::Joystick joystick,int axis,Float value);
		static ::Dynamic onJoyAxisMove_dyn();

		static void onJoyBallMove( ::lime::ui::Joystick joystick,int trackball,Float x,Float y);
		static ::Dynamic onJoyBallMove_dyn();

		static void onJoyHatMove( ::lime::ui::Joystick joystick,int hat,int position);
		static ::Dynamic onJoyHatMove_dyn();

		static void onJoyButtonDown( ::lime::ui::Joystick joystick,int button);
		static ::Dynamic onJoyButtonDown_dyn();

		static void onJoyButtonUp( ::lime::ui::Joystick joystick,int button);
		static ::Dynamic onJoyButtonUp_dyn();

		static void joyPress(::String id,Float pressure);
		static ::Dynamic joyPress_dyn();

		static void joyRelease(::String id);
		static ::Dynamic joyRelease_dyn();

		static void onTouchBegin( ::openfl::events::TouchEvent e);
		static ::Dynamic onTouchBegin_dyn();

		static void onTouchMove( ::openfl::events::TouchEvent e);
		static ::Dynamic onTouchMove_dyn();

		static void onTouchEnd( ::openfl::events::TouchEvent e);
		static ::Dynamic onTouchEnd_dyn();

};

} // end namespace com
} // end namespace stencyl

#endif /* INCLUDED_com_stencyl_Input */ 
