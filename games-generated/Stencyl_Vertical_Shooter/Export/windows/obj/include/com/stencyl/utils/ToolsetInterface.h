// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_utils_ToolsetInterface
#define INCLUDED_com_stencyl_utils_ToolsetInterface

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,utils,HscriptRunner)
HX_DECLARE_CLASS3(com,stencyl,utils,ToolsetInterface)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IOErrorEvent)
HX_DECLARE_CLASS2(openfl,events,ProgressEvent)
HX_DECLARE_CLASS2(openfl,events,SecurityErrorEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,net,Socket)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)

namespace com{
namespace stencyl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES ToolsetInterface_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ToolsetInterface_obj OBJ_;
		ToolsetInterface_obj();

	public:
		enum { _hx_ClassId = 0x5c881775 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.utils.ToolsetInterface")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.utils.ToolsetInterface"); }
		static hx::ObjectPtr< ToolsetInterface_obj > __new();
		static hx::ObjectPtr< ToolsetInterface_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ToolsetInterface_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ToolsetInterface","\x2f","\xcd","\x6d","\x29"); }

		static void __boot();
		static  ::com::stencyl::utils::ToolsetInterface instance;
		static bool connected;
		static bool ready;
		static  ::haxe::ds::StringMap assetUpdatedListeners;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static void cancelConnection();
		static ::Dynamic cancelConnection_dyn();

		static void preloadedUpdate();
		static ::Dynamic preloadedUpdate_dyn();

		static int INT_LENGTH;
		static ::Array< ::Dynamic> traceQueue;
		static void gciTrace( ::Dynamic v, ::Dynamic pos);
		static ::Dynamic gciTrace_dyn();

		static void imageTrace( ::openfl::display::BitmapData img, ::Dynamic pos);
		static ::Dynamic imageTrace_dyn();

		static void addAssetUpdatedListener(::String assetID, ::Dynamic listener);
		static ::Dynamic addAssetUpdatedListener_dyn();

		static void removeAssetUpdatedListener(::String assetID, ::Dynamic listener);
		static ::Dynamic removeAssetUpdatedListener_dyn();

		static void clearAssetUpdatedListeners();
		static ::Dynamic clearAssetUpdatedListeners_dyn();

		static bool paused;
		static bool wasPaused;
		static void pause();
		static ::Dynamic pause_dyn();

		 ::openfl::net::Socket socket;
		::String response;
		 ::com::stencyl::utils::HscriptRunner hscript;
		void configureListeners();
		::Dynamic configureListeners_dyn();

		void unconfigureListeners();
		::Dynamic unconfigureListeners_dyn();

		void closeHandler( ::openfl::events::Event event);
		::Dynamic closeHandler_dyn();

		void connectHandler( ::openfl::events::Event event);
		::Dynamic connectHandler_dyn();

		void ioErrorHandler( ::openfl::events::IOErrorEvent event);
		::Dynamic ioErrorHandler_dyn();

		void securityErrorHandler( ::openfl::events::SecurityErrorEvent event);
		::Dynamic securityErrorHandler_dyn();

		bool waiting;
		bool readingHeader;
		 ::haxe::ds::StringMap currentHeader;
		 ::openfl::utils::ByteArrayData bytes;
		int bytesExpected;
		void socketDataHandler( ::openfl::events::ProgressEvent event);
		::Dynamic socketDataHandler_dyn();

		 ::haxe::ds::StringMap parseHeader( ::openfl::utils::ByteArrayData bytes);
		::Dynamic parseHeader_dyn();

		void packetReady( ::haxe::ds::StringMap header, ::openfl::utils::ByteArrayData content);
		::Dynamic packetReady_dyn();

		void sendData( ::haxe::ds::StringMap header,::String data);
		::Dynamic sendData_dyn();

		void sendBinaryData( ::haxe::ds::StringMap header, ::haxe::io::Bytes dataBytes);
		::Dynamic sendBinaryData_dyn();

		 ::openfl::utils::ByteArrayData createPacket( ::openfl::utils::ByteArrayData header, ::openfl::utils::ByteArrayData data);
		::Dynamic createPacket_dyn();

		 ::openfl::utils::ByteArrayData generateHTTPHeader( ::haxe::ds::StringMap keyValues, ::openfl::utils::ByteArrayData data);
		::Dynamic generateHTTPHeader_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace utils

#endif /* INCLUDED_com_stencyl_utils_ToolsetInterface */ 
