// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_graphics_fonts_BitmapFont
#define INCLUDED_com_stencyl_graphics_fonts_BitmapFont

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS4(com,stencyl,graphics,fonts,BitmapFont)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,ITileContainer)
HX_DECLARE_CLASS2(openfl,display,Tilemap)
HX_DECLARE_CLASS2(openfl,display,Tileset)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace com{
namespace stencyl{
namespace graphics{
namespace fonts{


class HXCPP_CLASS_ATTRIBUTES BitmapFont_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BitmapFont_obj OBJ_;
		BitmapFont_obj();

	public:
		enum { _hx_ClassId = 0x47b1b4ec };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.graphics.fonts.BitmapFont")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.graphics.fonts.BitmapFont"); }
		static hx::ObjectPtr< BitmapFont_obj > __new();
		static hx::ObjectPtr< BitmapFont_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BitmapFont_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BitmapFont","\x7e","\xc1","\xce","\x2b"); }

		static void __boot();
		static  ::haxe::ds::StringMap _storedFonts;
		static  ::openfl::geom::Point ZERO_POINT;
		static void store(::String pHandle, ::com::stencyl::graphics::fonts::BitmapFont pFont);
		static ::Dynamic store_dyn();

		static  ::com::stencyl::graphics::fonts::BitmapFont fetch(::String pHandle);
		static ::Dynamic fetch_dyn();

		 ::haxe::ds::IntMap _glyphs;
		int _num_letters;
		 ::openfl::display::Tileset _tileset;
		::String _glyphString;
		int _maxHeight;
		 ::openfl::geom::Point _point;
		bool isDefault;
		int lineSpacing;
		 ::com::stencyl::graphics::fonts::BitmapFont loadPixelizer( ::openfl::display::BitmapData pBitmapData,::String pLetters);
		::Dynamic loadPixelizer_dyn();

		 ::com::stencyl::graphics::fonts::BitmapFont loadAngelCode( ::openfl::display::BitmapData pBitmapData, ::Xml pXMLData);
		::Dynamic loadAngelCode_dyn();

		void reset();
		::Dynamic reset_dyn();

		 ::openfl::display::BitmapData prepareBitmapData( ::openfl::display::BitmapData pBitmapData,::Array< ::Dynamic> pRects);
		::Dynamic prepareBitmapData_dyn();

		void dispose();
		::Dynamic dispose_dyn();

		void setGlyph(int pCharID, ::openfl::geom::Rectangle pRect,int pGlyphID, ::Dynamic pOffsetX, ::Dynamic pOffsetY, ::Dynamic pAdvanceX);
		::Dynamic setGlyph_dyn();

		void render( ::openfl::display::Tilemap tilemap,::String pText,Float pAlpha,int pOffsetX,int pOffsetY,int pLetterSpacing,Float pScale, ::Dynamic pAngle);
		::Dynamic render_dyn();

		void renderToImg( ::openfl::display::BitmapData pBitmapData,::String pText,int pColor,Float pAlpha,int pOffsetX,int pOffsetY,int pLetterSpacing,Float pScale, ::Dynamic pAngle, ::Dynamic pUseColorTransform);
		::Dynamic renderToImg_dyn();

		int toARGB(int rgb,int newAlpha);
		::Dynamic toARGB_dyn();

		int getTextWidth(::String pText, ::Dynamic pLetterSpacing, ::Dynamic pFontScale);
		::Dynamic getTextWidth_dyn();

		int getFontHeight();
		::Dynamic getFontHeight_dyn();

		int numLetters;
		int get_numLetters();
		::Dynamic get_numLetters_dyn();

		bool containsCharacter(::String _hx_char);
		::Dynamic containsCharacter_dyn();

		 ::openfl::display::Tileset getTileset();
		::Dynamic getTileset_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace fonts

#endif /* INCLUDED_com_stencyl_graphics_fonts_BitmapFont */ 
