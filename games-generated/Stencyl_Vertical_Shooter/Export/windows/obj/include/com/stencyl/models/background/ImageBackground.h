// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_background_ImageBackground
#define INCLUDED_com_stencyl_models_background_ImageBackground

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Background
#include <com/stencyl/models/Background.h>
#endif
HX_DECLARE_CLASS3(com,stencyl,models,Background)
HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS4(com,stencyl,models,background,ImageBackground)
HX_DECLARE_CLASS5(com,stencyl,models,scene,layers,BackgroundLayer)
HX_DECLARE_CLASS5(com,stencyl,models,scene,layers,RegularLayer)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace com{
namespace stencyl{
namespace models{
namespace background{


class HXCPP_CLASS_ATTRIBUTES ImageBackground_obj : public  ::com::stencyl::models::Resource_obj
{
	public:
		typedef  ::com::stencyl::models::Resource_obj super;
		typedef ImageBackground_obj OBJ_;
		ImageBackground_obj();

	public:
		enum { _hx_ClassId = 0x412d1b86 };

		void __construct(int ID,int atlasID,::String name,::Array< int > durations,Float parallaxX,Float parallaxY,bool repeats);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.background.ImageBackground")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.background.ImageBackground"); }
		static hx::ObjectPtr< ImageBackground_obj > __new(int ID,int atlasID,::String name,::Array< int > durations,Float parallaxX,Float parallaxY,bool repeats);
		static hx::ObjectPtr< ImageBackground_obj > __alloc(hx::Ctx *_hx_ctx,int ID,int atlasID,::String name,::Array< int > durations,Float parallaxX,Float parallaxY,bool repeats);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ImageBackground_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("ImageBackground","\x09","\x9f","\x10","\x36"); }

		int currFrame;
		Float currTime;
		 ::openfl::display::BitmapData img;
		::cpp::VirtualArray frames;
		::Array< int > durations;
		Float parallaxX;
		Float parallaxY;
		bool repeats;
		bool repeated;
		bool graphicsLoaded;
		virtual void update();
		::Dynamic update_dyn();

		virtual void draw( ::openfl::display::Graphics g,int cameraX,int cameraY,int screenWidth,int screenHeight);
		::Dynamic draw_dyn();

		void drawRepeated( ::com::stencyl::models::scene::layers::BackgroundLayer bitmap,int screenWidth,int screenHeight);
		::Dynamic drawRepeated_dyn();

		void loadGraphics();

		void unloadGraphics();

		void reloadGraphics(int subID);

};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace background

#endif /* INCLUDED_com_stencyl_models_background_ImageBackground */ 
