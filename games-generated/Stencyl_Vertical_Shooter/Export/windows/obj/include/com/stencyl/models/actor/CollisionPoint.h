// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_actor_CollisionPoint
#define INCLUDED_com_stencyl_models_actor_CollisionPoint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_2affaea92302fa95_16_new)
HX_DECLARE_CLASS4(com,stencyl,models,actor,CollisionPoint)

namespace com{
namespace stencyl{
namespace models{
namespace actor{


class HXCPP_CLASS_ATTRIBUTES CollisionPoint_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef CollisionPoint_obj OBJ_;
		CollisionPoint_obj();

	public:
		enum { _hx_ClassId = 0x745b9efe };

		void __construct(Float x,Float y,Float normalX,Float normalY);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="com.stencyl.models.actor.CollisionPoint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"com.stencyl.models.actor.CollisionPoint"); }

		hx::ObjectPtr< CollisionPoint_obj > __new(Float x,Float y,Float normalX,Float normalY) {
			hx::ObjectPtr< CollisionPoint_obj > __this = new CollisionPoint_obj();
			__this->__construct(x,y,normalX,normalY);
			return __this;
		}

		static hx::ObjectPtr< CollisionPoint_obj > __alloc(hx::Ctx *_hx_ctx,Float x,Float y,Float normalX,Float normalY) {
			CollisionPoint_obj *__this = (CollisionPoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CollisionPoint_obj), false, "com.stencyl.models.actor.CollisionPoint"));
			*(void **)__this = CollisionPoint_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_2affaea92302fa95_16_new)
HXLINE(  17)		( ( ::com::stencyl::models::actor::CollisionPoint)(__this) )->x = x;
HXLINE(  18)		( ( ::com::stencyl::models::actor::CollisionPoint)(__this) )->y = y;
HXLINE(  19)		( ( ::com::stencyl::models::actor::CollisionPoint)(__this) )->normalX = normalX;
HXLINE(  20)		( ( ::com::stencyl::models::actor::CollisionPoint)(__this) )->normalY = normalY;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CollisionPoint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CollisionPoint","\x9e","\x32","\xe6","\xbf"); }

		static void __boot();
		static ::Array< ::Dynamic> freedCollisionPoints;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static  ::com::stencyl::models::actor::CollisionPoint get(Float x,Float y,Float normalX,Float normalY);
		static ::Dynamic get_dyn();

		static void free( ::com::stencyl::models::actor::CollisionPoint cp);
		static ::Dynamic free_dyn();

		Float x;
		Float y;
		Float normalX;
		Float normalY;
};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace actor

#endif /* INCLUDED_com_stencyl_models_actor_CollisionPoint */ 
