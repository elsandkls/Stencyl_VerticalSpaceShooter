// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_utils_LazyIntMap
#define INCLUDED_com_stencyl_utils_LazyIntMap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,utils,LazyIntMap)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)

namespace com{
namespace stencyl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES LazyIntMap_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef LazyIntMap_obj OBJ_;
		LazyIntMap_obj();

	public:
		enum { _hx_ClassId = 0x7ef8a6b7 };

		void __construct( ::haxe::ds::IntMap map, ::Dynamic initializer);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.utils.LazyIntMap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.utils.LazyIntMap"); }
		static hx::ObjectPtr< LazyIntMap_obj > __new( ::haxe::ds::IntMap map, ::Dynamic initializer);
		static hx::ObjectPtr< LazyIntMap_obj > __alloc(hx::Ctx *_hx_ctx, ::haxe::ds::IntMap map, ::Dynamic initializer);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~LazyIntMap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("LazyIntMap","\xa1","\x8c","\x4c","\xc0"); }

		 ::haxe::ds::IntMap map;
		 ::Dynamic initializer;
		Dynamic initializer_dyn() { return initializer;}
		 ::Dynamic get(int key);
		::Dynamic get_dyn();

		void set(int key, ::Dynamic value);
		::Dynamic set_dyn();

		bool exists(int key);
		::Dynamic exists_dyn();

		bool remove(int key);
		::Dynamic remove_dyn();

		 ::Dynamic keys();
		::Dynamic keys_dyn();

		 ::Dynamic iterator();
		::Dynamic iterator_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace utils

#endif /* INCLUDED_com_stencyl_utils_LazyIntMap */ 
