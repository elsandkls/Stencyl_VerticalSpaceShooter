// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_graphics_G
#define INCLUDED_com_stencyl_graphics_G

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(com,stencyl,graphics,G)
HX_DECLARE_CLASS3(com,stencyl,models,Actor)
HX_DECLARE_CLASS3(com,stencyl,models,Font)
HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace com{
namespace stencyl{
namespace graphics{


class HXCPP_CLASS_ATTRIBUTES G_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef G_obj OBJ_;
		G_obj();

	public:
		enum { _hx_ClassId = 0x2d9d8f31 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.graphics.G")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.graphics.G"); }
		static hx::ObjectPtr< G_obj > __new();
		static hx::ObjectPtr< G_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~G_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("G","\x47","\x00","\x00","\x00"); }

		static void __boot();
		static  ::haxe::ds::IntMap fontCache;
		static void resetStatics();
		static ::Dynamic resetStatics_dyn();

		static  ::haxe::ds::StringMap drawnStringCache;
		static ::Array< ::String > drawnStringCacheKeys;
		static void visitStringCache();
		static ::Dynamic visitStringCache_dyn();

		 ::com::stencyl::models::Font defaultFont;
		 ::openfl::display::Graphics graphics;
		Float x;
		Float y;
		Float scaleX;
		Float scaleY;
		Float alpha;
		 ::Dynamic blendMode;
		int strokeSize;
		int fillColor;
		int strokeColor;
		 ::com::stencyl::models::Font font;
		::Array< ::Dynamic> fontData;
		 ::openfl::geom::Matrix mtx;
		 ::openfl::geom::Rectangle rect;
		 ::openfl::geom::Rectangle rect2;
		 ::openfl::geom::Point point;
		 ::openfl::geom::Point point2;
		::Array< Float > data;
		bool drawPoly;
		int pointCounter;
		Float firstX;
		Float firstY;
		bool drawActor;
		 ::com::stencyl::models::Actor actor;
		void resetGraphicsSettings();
		::Dynamic resetGraphicsSettings_dyn();

		void setFont( ::com::stencyl::models::Font newFont);
		::Dynamic setFont_dyn();

		void startGraphics();
		::Dynamic startGraphics_dyn();

		void endGraphics();
		::Dynamic endGraphics_dyn();

		void translate(Float x,Float y);
		::Dynamic translate_dyn();

		void moveTo(Float x,Float y);
		::Dynamic moveTo_dyn();

		void translateToScreen();
		::Dynamic translateToScreen_dyn();

		void translateToActor( ::com::stencyl::models::Actor a);
		::Dynamic translateToActor_dyn();

		::String getCacheKey(::String string, ::com::stencyl::models::Font font,Float alpha);
		::Dynamic getCacheKey_dyn();

		void drawString(::String s,Float x,Float y);
		::Dynamic drawString_dyn();

		void drawLine(Float x1,Float y1,Float x2,Float y2);
		::Dynamic drawLine_dyn();

		void fillPixel(Float x,Float y);
		::Dynamic fillPixel_dyn();

		void drawRect(Float x,Float y,Float w,Float h);
		::Dynamic drawRect_dyn();

		void fillRect(Float x,Float y,Float w,Float h);
		::Dynamic fillRect_dyn();

		void drawRoundRect(Float x,Float y,Float w,Float h,Float arc);
		::Dynamic drawRoundRect_dyn();

		void fillRoundRect(Float x,Float y,Float w,Float h,Float arc);
		::Dynamic fillRoundRect_dyn();

		void drawCircle(Float x,Float y,Float r);
		::Dynamic drawCircle_dyn();

		void fillCircle(Float x,Float y,Float r);
		::Dynamic fillCircle_dyn();

		void beginFillPolygon();
		::Dynamic beginFillPolygon_dyn();

		void endDrawingPolygon();
		::Dynamic endDrawingPolygon_dyn();

		void beginDrawPolygon();
		::Dynamic beginDrawPolygon_dyn();

		void addPointToPolygon(Float x,Float y);
		::Dynamic addPointToPolygon_dyn();

		void drawImage( ::openfl::display::BitmapData img,Float x,Float y,hx::Null< Float >  angle, ::openfl::geom::Matrix matrix);
		::Dynamic drawImage_dyn();

		int toARGB(int rgb,int newAlpha);
		::Dynamic toARGB_dyn();

		void resetFont();
		::Dynamic resetFont_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace graphics

#endif /* INCLUDED_com_stencyl_graphics_G */ 
