// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_models_scene_Tileset
#define INCLUDED_com_stencyl_models_scene_Tileset

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS4(com,stencyl,models,scene,Tile)
HX_DECLARE_CLASS4(com,stencyl,models,scene,Tileset)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,Tileset)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace com{
namespace stencyl{
namespace models{
namespace scene{


class HXCPP_CLASS_ATTRIBUTES Tileset_obj : public  ::com::stencyl::models::Resource_obj
{
	public:
		typedef  ::com::stencyl::models::Resource_obj super;
		typedef Tileset_obj OBJ_;
		Tileset_obj();

	public:
		enum { _hx_ClassId = 0x4eff5f7d };

		void __construct(int ID,int atlasID,::String name,int framesAcross,int framesDown,int tileWidth,int tileHeight,bool readable,::Array< ::Dynamic> tiles);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.models.scene.Tileset")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.models.scene.Tileset"); }
		static hx::ObjectPtr< Tileset_obj > __new(int ID,int atlasID,::String name,int framesAcross,int framesDown,int tileWidth,int tileHeight,bool readable,::Array< ::Dynamic> tiles);
		static hx::ObjectPtr< Tileset_obj > __alloc(hx::Ctx *_hx_ctx,int ID,int atlasID,::String name,int framesAcross,int framesDown,int tileWidth,int tileHeight,bool readable,::Array< ::Dynamic> tiles);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Tileset_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Tileset","\x14","\xa9","\xe4","\x12"); }

		static void __boot();
		static  ::openfl::geom::Rectangle temp;
		int framesAcross;
		int framesDown;
		int tileWidth;
		int tileHeight;
		::Array< ::Dynamic> tiles;
		bool readableImages;
		 ::openfl::display::BitmapData pixels;
		bool graphicsLoaded;
		 ::openfl::display::Tileset flTileset;
		 ::haxe::ds::IntMap sheetMap;
		void setupFLTileset();
		::Dynamic setupFLTileset_dyn();

		 ::openfl::geom::Rectangle getImageSourceForTile(int tileID,int tileWidth,int tileHeight);
		::Dynamic getImageSourceForTile_dyn();

		void loadGraphics();

		void unloadGraphics();

		void reloadGraphics(int subID);

		 ::openfl::display::BitmapData convertPixels( ::openfl::display::BitmapData oldPixels);
		::Dynamic convertPixels_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace scene

#endif /* INCLUDED_com_stencyl_models_scene_Tileset */ 
