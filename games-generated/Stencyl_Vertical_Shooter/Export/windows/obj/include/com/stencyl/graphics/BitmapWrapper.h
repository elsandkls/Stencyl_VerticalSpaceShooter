// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_graphics_BitmapWrapper
#define INCLUDED_com_stencyl_graphics_BitmapWrapper

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_EngineScaleUpdateListener
#include <com/stencyl/graphics/EngineScaleUpdateListener.h>
#endif
HX_DECLARE_CLASS3(com,stencyl,graphics,BitmapTweenProperties)
HX_DECLARE_CLASS3(com,stencyl,graphics,BitmapWrapper)
HX_DECLARE_CLASS3(com,stencyl,graphics,EngineScaleUpdateListener)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace com{
namespace stencyl{
namespace graphics{


class HXCPP_CLASS_ATTRIBUTES BitmapWrapper_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef BitmapWrapper_obj OBJ_;
		BitmapWrapper_obj();

	public:
		enum { _hx_ClassId = 0x328feeee };

		void __construct( ::openfl::display::Bitmap img);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.graphics.BitmapWrapper")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.graphics.BitmapWrapper"); }
		static hx::ObjectPtr< BitmapWrapper_obj > __new( ::openfl::display::Bitmap img);
		static hx::ObjectPtr< BitmapWrapper_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display::Bitmap img);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BitmapWrapper_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("BitmapWrapper","\x04","\xa9","\xe2","\x05"); }

		 ::openfl::display::Bitmap img;
		Float offsetX;
		Float offsetY;
		 ::openfl::geom::Point cacheParentAnchor;
		bool smoothing;
		Float imgX;
		Float imgY;
		 ::com::stencyl::graphics::BitmapTweenProperties tweenProps;
		Float set_imgX(Float x);
		::Dynamic set_imgX_dyn();

		Float get_imgX();
		::Dynamic get_imgX_dyn();

		Float set_imgY(Float y);
		::Dynamic set_imgY_dyn();

		Float get_imgY();
		::Dynamic get_imgY_dyn();

		bool set_smoothing(bool smoothing);
		::Dynamic set_smoothing_dyn();

		bool get_smoothing();
		::Dynamic get_smoothing_dyn();

		void setOrigin(Float x,Float y);
		::Dynamic setOrigin_dyn();

		void updateScale();
		::Dynamic updateScale_dyn();

		void updatePosition();
		::Dynamic updatePosition_dyn();

		 ::com::stencyl::graphics::BitmapTweenProperties get_tweenProps();
		::Dynamic get_tweenProps_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace graphics

#endif /* INCLUDED_com_stencyl_graphics_BitmapWrapper */ 
