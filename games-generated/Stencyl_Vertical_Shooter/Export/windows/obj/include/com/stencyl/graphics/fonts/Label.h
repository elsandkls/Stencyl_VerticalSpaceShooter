// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_graphics_fonts_Label
#define INCLUDED_com_stencyl_graphics_fonts_Label

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_EngineScaleUpdateListener
#include <com/stencyl/graphics/EngineScaleUpdateListener.h>
#endif
HX_DECLARE_CLASS3(com,stencyl,graphics,EngineScaleUpdateListener)
HX_DECLARE_CLASS4(com,stencyl,graphics,fonts,BitmapFont)
HX_DECLARE_CLASS4(com,stencyl,graphics,fonts,Label)
HX_DECLARE_CLASS3(com,stencyl,models,Font)
HX_DECLARE_CLASS3(com,stencyl,models,Resource)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,ITileContainer)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Tilemap)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace com{
namespace stencyl{
namespace graphics{
namespace fonts{


class HXCPP_CLASS_ATTRIBUTES Label_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Label_obj OBJ_;
		Label_obj();

	public:
		enum { _hx_ClassId = 0x0e7a4126 };

		void __construct( ::com::stencyl::graphics::fonts::BitmapFont pFont);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.graphics.fonts.Label")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.graphics.fonts.Label"); }
		static hx::ObjectPtr< Label_obj > __new( ::com::stencyl::graphics::fonts::BitmapFont pFont);
		static hx::ObjectPtr< Label_obj > __alloc(hx::Ctx *_hx_ctx, ::com::stencyl::graphics::fonts::BitmapFont pFont);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Label_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Label","\xd4","\x7d","\xdc","\x02"); }

		 ::com::stencyl::models::Font _stencylFont;
		 ::com::stencyl::graphics::fonts::BitmapFont _font;
		::String _text;
		int _color;
		bool _useColor;
		bool _outline;
		int _outlineColor;
		bool _shadow;
		int _shadowColor;
		bool _background;
		int _backgroundColor;
		int _alignment;
		int _padding;
		int _lineSpacing;
		int _letterSpacing;
		Float _fontScale;
		bool _autoUpperCase;
		bool _wordWrap;
		bool _fixedWidth;
		bool _pendingTextChange;
		int _fieldWidth;
		bool _multiLine;
		Float _alpha;
		Float labelX;
		Float labelY;
		 ::openfl::display::Tilemap _shadowTilemap;
		 ::openfl::display::Tilemap _outlineTilemap;
		 ::openfl::display::Tilemap _characterTilemap;
		 ::openfl::geom::Point cacheParentAnchor;
		void destroy();
		::Dynamic destroy_dyn();

		::String get_text();
		::Dynamic get_text_dyn();

		::String set_text(::String pText);
		::Dynamic set_text_dyn();

		void updateBitmapData();
		::Dynamic updateBitmapData_dyn();

		void update();
		::Dynamic update_dyn();

		bool get_background();
		::Dynamic get_background_dyn();

		bool set_background(bool value);
		::Dynamic set_background_dyn();

		int get_backgroundColor();
		::Dynamic get_backgroundColor_dyn();

		int set_backgroundColor(int value);
		::Dynamic set_backgroundColor_dyn();

		bool get_shadow();
		::Dynamic get_shadow_dyn();

		bool set_shadow(bool value);
		::Dynamic set_shadow_dyn();

		int get_shadowColor();
		::Dynamic get_shadowColor_dyn();

		int set_shadowColor(int value);
		::Dynamic set_shadowColor_dyn();

		int get_padding();
		::Dynamic get_padding_dyn();

		int set_padding(int value);
		::Dynamic set_padding_dyn();

		int get_color();
		::Dynamic get_color_dyn();

		int set_color(int value);
		::Dynamic set_color_dyn();

		bool get_useColor();
		::Dynamic get_useColor_dyn();

		bool set_useColor(bool value);
		::Dynamic set_useColor_dyn();

		int setWidth(int pWidth);
		::Dynamic setWidth_dyn();

		int get_alignment();
		::Dynamic get_alignment_dyn();

		int set_alignment(int pAlignment);
		::Dynamic set_alignment_dyn();

		bool get_multiLine();
		::Dynamic get_multiLine_dyn();

		bool set_multiLine(bool pMultiLine);
		::Dynamic set_multiLine_dyn();

		bool get_outline();
		::Dynamic get_outline_dyn();

		bool set_outline(bool value);
		::Dynamic set_outline_dyn();

		int get_outlineColor();
		::Dynamic get_outlineColor_dyn();

		int set_outlineColor(int value);
		::Dynamic set_outlineColor_dyn();

		 ::com::stencyl::graphics::fonts::BitmapFont get_font();
		::Dynamic get_font_dyn();

		 ::com::stencyl::graphics::fonts::BitmapFont set_font( ::com::stencyl::graphics::fonts::BitmapFont pFont);
		::Dynamic set_font_dyn();

		 ::com::stencyl::models::Font get_stencylFont();
		::Dynamic get_stencylFont_dyn();

		 ::com::stencyl::models::Font set_stencylFont( ::com::stencyl::models::Font pFont);
		::Dynamic set_stencylFont_dyn();

		int get_lineSpacing();
		::Dynamic get_lineSpacing_dyn();

		int set_lineSpacing(int pSpacing);
		::Dynamic set_lineSpacing_dyn();

		void setAlpha(Float pAlpha);
		::Dynamic setAlpha_dyn();

		Float getAlpha();
		::Dynamic getAlpha_dyn();

		Float get_fontScale();
		::Dynamic get_fontScale_dyn();

		Float set_fontScale(Float pScale);
		::Dynamic set_fontScale_dyn();

		int get_letterSpacing();
		::Dynamic get_letterSpacing_dyn();

		int set_letterSpacing(int pSpacing);
		::Dynamic set_letterSpacing_dyn();

		bool get_autoUpperCase();
		::Dynamic get_autoUpperCase_dyn();

		bool set_autoUpperCase(bool value);
		::Dynamic set_autoUpperCase_dyn();

		bool get_wordWrap();
		::Dynamic get_wordWrap_dyn();

		bool set_wordWrap(bool value);
		::Dynamic set_wordWrap_dyn();

		bool get_fixedWidth();
		::Dynamic get_fixedWidth_dyn();

		bool set_fixedWidth(bool value);
		::Dynamic set_fixedWidth_dyn();

		Float set_labelX(Float x);
		::Dynamic set_labelX_dyn();

		Float get_labelX();
		::Dynamic get_labelX_dyn();

		Float set_labelY(Float y);
		::Dynamic set_labelY_dyn();

		Float get_labelY();
		::Dynamic get_labelY_dyn();

		void updatePosition();
		::Dynamic updatePosition_dyn();

		void updateScale();
		::Dynamic updateScale_dyn();

		void updateGlyphs( ::Dynamic textGlyphs, ::Dynamic shadowGlyphs, ::Dynamic outlineGlyphs);
		::Dynamic updateGlyphs_dyn();

		void tint( ::openfl::display::Tilemap tilemap,int color);
		::Dynamic tint_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace fonts

#endif /* INCLUDED_com_stencyl_graphics_fonts_Label */ 
