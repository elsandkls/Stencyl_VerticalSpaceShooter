// Generated by Haxe 3.4.7
#ifndef INCLUDED_com_stencyl_io_mbs_MbsFont
#define INCLUDED_com_stencyl_io_mbs_MbsFont

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_com_stencyl_io_mbs_MbsResource
#include <com/stencyl/io/mbs/MbsResource.h>
#endif
HX_DECLARE_CLASS4(com,stencyl,io,mbs,MbsFont)
HX_DECLARE_CLASS4(com,stencyl,io,mbs,MbsResource)
HX_DECLARE_CLASS2(mbs,core,ComposedType)
HX_DECLARE_CLASS2(mbs,core,MbsField)
HX_DECLARE_CLASS2(mbs,core,MbsObject)
HX_DECLARE_CLASS2(mbs,core,MbsType)
HX_DECLARE_CLASS2(mbs,io,MbsIO)
HX_DECLARE_CLASS2(mbs,io,MbsList)
HX_DECLARE_CLASS2(mbs,io,MbsListBase)

namespace com{
namespace stencyl{
namespace io{
namespace mbs{


class HXCPP_CLASS_ATTRIBUTES MbsFont_obj : public  ::com::stencyl::io::mbs::MbsResource_obj
{
	public:
		typedef  ::com::stencyl::io::mbs::MbsResource_obj super;
		typedef MbsFont_obj OBJ_;
		MbsFont_obj();

	public:
		enum { _hx_ClassId = 0x1cd5e350 };

		void __construct(::Dynamic data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="com.stencyl.io.mbs.MbsFont")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"com.stencyl.io.mbs.MbsFont"); }
		static hx::ObjectPtr< MbsFont_obj > __new(::Dynamic data);
		static hx::ObjectPtr< MbsFont_obj > __alloc(hx::Ctx *_hx_ctx,::Dynamic data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MbsFont_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MbsFont","\x4d","\x54","\x9c","\x16"); }

		static  ::mbs::core::MbsField alphabet;
		static  ::mbs::core::MbsField readableImages;
		static  ::mbs::core::MbsField height;
		static  ::mbs::core::MbsField offsets;
		static  ::mbs::core::MbsField prerendered;
		static  ::mbs::core::MbsField rowHeight;
		static  ::mbs::core::ComposedType MBS_FONT;
		static void initializeType();
		static ::Dynamic initializeType_dyn();

		static  ::mbs::io::MbsList new_MbsFont_list(::Dynamic data);
		static ::Dynamic new_MbsFont_list_dyn();

		 ::mbs::core::MbsType getMbsType();

		void allocateNew();

		::String getAlphabet();
		::Dynamic getAlphabet_dyn();

		void setAlphabet(::String _val);
		::Dynamic setAlphabet_dyn();

		bool getReadableImages();
		::Dynamic getReadableImages_dyn();

		void setReadableImages(bool _val);
		::Dynamic setReadableImages_dyn();

		int getHeight();
		::Dynamic getHeight_dyn();

		void setHeight(int _val);
		::Dynamic setHeight_dyn();

		::String getOffsets();
		::Dynamic getOffsets_dyn();

		void setOffsets(::String _val);
		::Dynamic setOffsets_dyn();

		bool getPrerendered();
		::Dynamic getPrerendered_dyn();

		void setPrerendered(bool _val);
		::Dynamic setPrerendered_dyn();

		int getRowHeight();
		::Dynamic getRowHeight_dyn();

		void setRowHeight(int _val);
		::Dynamic setRowHeight_dyn();

};

} // end namespace com
} // end namespace stencyl
} // end namespace io
} // end namespace mbs

#endif /* INCLUDED_com_stencyl_io_mbs_MbsFont */ 
