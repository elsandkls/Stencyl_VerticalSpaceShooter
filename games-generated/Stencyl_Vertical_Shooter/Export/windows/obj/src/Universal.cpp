// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Universal
#include <Universal.h>
#endif
#ifndef INCLUDED_com_stencyl_Config
#include <com/stencyl/Config.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_Scale
#include <com/stencyl/graphics/Scale.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics__ScaleMode_ScaleMode_Impl_
#include <com/stencyl/graphics/_ScaleMode/ScaleMode_Impl_.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_ToolsetInterface
#include <com/stencyl/utils/ToolsetInterface.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_ActivityEvent
#include <openfl/events/ActivityEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FullScreenEvent
#include <openfl/events/FullScreenEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_57_new,"Universal","new",0x5d31e3dd,"Universal.new","Universal.hx",57,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_64_onAdded,"Universal","onAdded",0x6c7b891e,"Universal.onAdded","Universal.hx",64,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_74_initServices,"Universal","initServices",0x0ca62eb1,"Universal.initServices","Universal.hx",74,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_90_initScreen,"Universal","initScreen",0x129e9cbf,"Universal.initScreen","Universal.hx",90,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_360_getDesiredScale,"Universal","getDesiredScale",0x02303d83,"Universal.getDesiredScale","Universal.hx",360,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_405_preloaderComplete,"Universal","preloaderComplete",0xdcd65b8c,"Universal.preloaderComplete","Universal.hx",405,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_45_initWindow,"Universal","initWindow",0x1dcdf543,"Universal.initWindow","Universal.hx",45,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_447_setupTracing,"Universal","setupTracing",0xc8e06ae8,"Universal.setupTracing","Universal.hx",447,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_472_setupTracing,"Universal","setupTracing",0xc8e06ae8,"Universal.setupTracing","Universal.hx",472,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_479_reloadGame,"Universal","reloadGame",0x56629a0e,"Universal.reloadGame","Universal.hx",479,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_483_addReloadListener,"Universal","addReloadListener",0xc2a4832b,"Universal.addReloadListener","Universal.hx",483,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_37_boot,"Universal","boot",0x268e7e15,"Universal.boot","Universal.hx",37,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_38_boot,"Universal","boot",0x268e7e15,"Universal.boot","Universal.hx",38,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_39_boot,"Universal","boot",0x268e7e15,"Universal.boot","Universal.hx",39,0x7fd80633)
HX_LOCAL_STACK_FRAME(_hx_pos_dc2aa8825c60d6e3_40_boot,"Universal","boot",0x268e7e15,"Universal.boot","Universal.hx",40,0x7fd80633)

void Universal_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_57_new)
HXLINE(  58)		super::__construct();
HXLINE(  60)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null(),null(),null());
            	}

Dynamic Universal_obj::__CreateEmpty() { return new Universal_obj; }

void *Universal_obj::_hx_vtable = 0;

Dynamic Universal_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Universal_obj > _hx_result = new Universal_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Universal_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x4d69b16b;
		}
	}
}

void Universal_obj::onAdded( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_64_onAdded)
HXLINE(  65)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAdded_dyn(),null());
HXLINE(  67)		this->initServices();
HXLINE(  69)		this->maskLayer =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  70)		this->initScreen(::com::stencyl::Config_obj::startInFullScreen);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Universal_obj,onAdded,(void))

void Universal_obj::initServices(){
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_74_initServices)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Universal_obj,initServices,(void))

void Universal_obj::initScreen(bool isFullScreen){
            	HX_GC_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_90_initScreen)
HXLINE(  91)		::haxe::Log_obj::trace(HX_("initScreen",9c,96,a2,4b),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),91,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 101)		 ::Dynamic _hx_tmp;
HXDLIN( 101)		if (isFullScreen) {
HXLINE( 101)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE( 101)			_hx_tmp = (int)2;
            		}
HXDLIN( 101)		this->stage->set_displayState(_hx_tmp);
HXLINE( 106)		this->stage->_hx___setLogicalSize((int)0,(int)0);
HXLINE( 110)		if (!(isFullScreen)) {
HXLINE( 112)			 ::lime::ui::Window _hx_tmp1 = ::Universal_obj::window;
HXDLIN( 112)			int _hx_tmp2 = ::Std_obj::_hx_int((::com::stencyl::Config_obj::stageWidth * ::com::stencyl::Config_obj::gameScale));
HXDLIN( 112)			_hx_tmp1->resize(_hx_tmp2,::Std_obj::_hx_int((::com::stencyl::Config_obj::stageHeight * ::com::stencyl::Config_obj::gameScale)));
            		}
HXLINE( 116)		::openfl::Lib_obj::get_current()->set_x((int)0);
HXLINE( 117)		::openfl::Lib_obj::get_current()->set_y((int)0);
HXLINE( 118)		::openfl::Lib_obj::get_current()->set_scaleX((int)1);
HXLINE( 119)		::openfl::Lib_obj::get_current()->set_scaleY((int)1);
HXLINE( 121)		this->set_x((int)0);
HXLINE( 122)		this->set_y((int)0);
HXLINE( 123)		this->set_scaleX((int)1);
HXLINE( 124)		this->set_scaleY((int)1);
HXLINE( 126)		::com::stencyl::Engine_obj::stage = this->stage;
HXLINE( 129)		 ::haxe::ds::ObjectMap scales =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE( 130)		{
HXLINE( 130)			int _g = (int)0;
HXDLIN( 130)			::Array< ::Dynamic> _g1 = ::com::stencyl::Config_obj::scales;
HXDLIN( 130)			while((_g < _g1->length)){
HXLINE( 130)				 ::com::stencyl::graphics::Scale scale = _g1->__get(_g).StaticCast<  ::com::stencyl::graphics::Scale >();
HXDLIN( 130)				_g = (_g + (int)1);
HXLINE( 132)				scales->set(scale,true);
            			}
            		}
HXLINE( 135)		Float _hx_tmp3;
HXDLIN( 135)		if (isFullScreen) {
HXLINE( 135)			int _hx_int = this->stage->get_fullScreenWidth();
HXDLIN( 135)			if ((_hx_int < (int)0)) {
HXLINE( 135)				_hx_tmp3 = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE( 135)				_hx_tmp3 = (_hx_int + ((Float)0.0));
            			}
            		}
            		else {
HXLINE( 135)			_hx_tmp3 = (::com::stencyl::Config_obj::stageWidth * ::com::stencyl::Config_obj::gameScale);
            		}
HXDLIN( 135)		::Universal_obj::windowWidth = _hx_tmp3;
HXLINE( 136)		Float _hx_tmp4;
HXDLIN( 136)		if (isFullScreen) {
HXLINE( 136)			int int1 = this->stage->get_fullScreenHeight();
HXDLIN( 136)			if ((int1 < (int)0)) {
HXLINE( 136)				_hx_tmp4 = (((Float)4294967296.0) + int1);
            			}
            			else {
HXLINE( 136)				_hx_tmp4 = (int1 + ((Float)0.0));
            			}
            		}
            		else {
HXLINE( 136)			_hx_tmp4 = (::com::stencyl::Config_obj::stageHeight * ::com::stencyl::Config_obj::gameScale);
            		}
HXDLIN( 136)		::Universal_obj::windowHeight = _hx_tmp4;
HXLINE( 138)		 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 138)		_hx_tmp5((HX_("Game Width: ",fe,e3,f1,4d) + ::com::stencyl::Config_obj::stageWidth),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),138,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 139)		 ::Dynamic _hx_tmp6 = ::haxe::Log_obj::trace;
HXDLIN( 139)		_hx_tmp6((HX_("Game Height: ",3b,6c,2a,69) + ::com::stencyl::Config_obj::stageHeight),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),139,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 140)		 ::Dynamic _hx_tmp7 = ::haxe::Log_obj::trace;
HXDLIN( 140)		_hx_tmp7((HX_("Game Scale: ",82,25,f8,81) + ::com::stencyl::Config_obj::gameScale),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),140,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 141)		 ::Dynamic _hx_tmp8 = ::haxe::Log_obj::trace;
HXDLIN( 141)		_hx_tmp8((HX_("Window Width: ",fc,f9,1f,ef) + ::Universal_obj::windowWidth),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),141,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 142)		 ::Dynamic _hx_tmp9 = ::haxe::Log_obj::trace;
HXDLIN( 142)		_hx_tmp9((HX_("Window Height: ",7d,94,4f,d0) + ::Universal_obj::windowHeight),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),142,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 143)		 ::Dynamic _hx_tmp10 = ::haxe::Log_obj::trace;
HXDLIN( 143)		int int2 = this->stage->get_fullScreenWidth();
HXDLIN( 143)		Float _hx_tmp11;
HXDLIN( 143)		if ((int2 < (int)0)) {
HXLINE( 143)			_hx_tmp11 = (((Float)4294967296.0) + int2);
            		}
            		else {
HXLINE( 143)			_hx_tmp11 = (int2 + ((Float)0.0));
            		}
HXDLIN( 143)		::String _hx_tmp12 = (HX_("FullScreen Width: ",67,87,99,9f) + ::Std_obj::string(_hx_tmp11));
HXDLIN( 143)		_hx_tmp10(_hx_tmp12,hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),143,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 144)		 ::Dynamic _hx_tmp13 = ::haxe::Log_obj::trace;
HXDLIN( 144)		int int3 = this->stage->get_fullScreenHeight();
HXDLIN( 144)		Float _hx_tmp14;
HXDLIN( 144)		if ((int3 < (int)0)) {
HXLINE( 144)			_hx_tmp14 = (((Float)4294967296.0) + int3);
            		}
            		else {
HXLINE( 144)			_hx_tmp14 = (int3 + ((Float)0.0));
            		}
HXDLIN( 144)		::String _hx_tmp15 = (HX_("FullScreen Height: ",b2,c4,31,8a) + ::Std_obj::string(_hx_tmp14));
HXDLIN( 144)		_hx_tmp13(_hx_tmp15,hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),144,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 145)		 ::Dynamic _hx_tmp16 = ::haxe::Log_obj::trace;
HXDLIN( 145)		::String _hx_tmp17 = (HX_("Enabled Scales: ",4e,75,63,16) + ::Std_obj::string(::com::stencyl::Config_obj::scales));
HXDLIN( 145)		_hx_tmp16(_hx_tmp17,hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),145,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 146)		 ::Dynamic _hx_tmp18 = ::haxe::Log_obj::trace;
HXDLIN( 146)		::String _hx_tmp19 = (HX_("Scale Mode: ",df,f3,14,ba) + ::com::stencyl::graphics::_ScaleMode::ScaleMode_Impl__obj::toString(::com::stencyl::Config_obj::scaleMode));
HXDLIN( 146)		_hx_tmp18(_hx_tmp19,hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),146,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 214)		Float theoreticalWindowedScale = this->getDesiredScale(::Universal_obj::windowWidth,::Universal_obj::windowHeight,::com::stencyl::Config_obj::stageWidth,::com::stencyl::Config_obj::stageHeight);
HXLINE( 215)		Float theoreticalFullscreenScale;
HXDLIN( 215)		int int4 = this->stage->get_fullScreenWidth();
HXDLIN( 215)		if ((int4 < (int)0)) {
HXLINE( 215)			theoreticalFullscreenScale = (((Float)4294967296.0) + int4);
            		}
            		else {
HXLINE( 215)			theoreticalFullscreenScale = (int4 + ((Float)0.0));
            		}
HXDLIN( 215)		int int5 = this->stage->get_fullScreenHeight();
HXDLIN( 215)		Float theoreticalFullscreenScale1;
HXDLIN( 215)		if ((int5 < (int)0)) {
HXLINE( 215)			theoreticalFullscreenScale1 = (((Float)4294967296.0) + int5);
            		}
            		else {
HXLINE( 215)			theoreticalFullscreenScale1 = (int5 + ((Float)0.0));
            		}
HXDLIN( 215)		Float theoreticalFullscreenScale2 = this->getDesiredScale(theoreticalFullscreenScale,theoreticalFullscreenScale1,::com::stencyl::Config_obj::stageWidth,::com::stencyl::Config_obj::stageHeight);
HXLINE( 217)		Float theoreticalScale;
HXDLIN( 217)		if (::com::stencyl::Config_obj::forceHiResAssets) {
HXLINE( 217)			theoreticalScale = theoreticalFullscreenScale2;
            		}
            		else {
HXLINE( 217)			theoreticalScale = theoreticalWindowedScale;
            		}
HXLINE( 220)		bool _hx_tmp20;
HXDLIN( 220)		if ((theoreticalScale == (int)4)) {
HXLINE( 220)			_hx_tmp20 = scales->exists(::com::stencyl::graphics::Scale_obj::_4X);
            		}
            		else {
HXLINE( 220)			_hx_tmp20 = false;
            		}
HXDLIN( 220)		if (_hx_tmp20) {
HXLINE( 222)			::com::stencyl::Engine_obj::SCALE = (int)4;
HXLINE( 223)			::com::stencyl::Engine_obj::IMG_BASE = HX_("4x",c4,2d,00,00);
            		}
            		else {
HXLINE( 226)			bool _hx_tmp21;
HXDLIN( 226)			if ((theoreticalScale >= (int)3)) {
HXLINE( 226)				_hx_tmp21 = scales->exists(::com::stencyl::graphics::Scale_obj::_3X);
            			}
            			else {
HXLINE( 226)				_hx_tmp21 = false;
            			}
HXDLIN( 226)			if (_hx_tmp21) {
HXLINE( 228)				::com::stencyl::Engine_obj::SCALE = (int)3;
HXLINE( 229)				::com::stencyl::Engine_obj::IMG_BASE = HX_("3x",e5,2c,00,00);
            			}
            			else {
HXLINE( 232)				bool _hx_tmp22;
HXDLIN( 232)				if ((theoreticalScale >= (int)2)) {
HXLINE( 232)					_hx_tmp22 = scales->exists(::com::stencyl::graphics::Scale_obj::_2X);
            				}
            				else {
HXLINE( 232)					_hx_tmp22 = false;
            				}
HXDLIN( 232)				if (_hx_tmp22) {
HXLINE( 234)					::com::stencyl::Engine_obj::SCALE = (int)2;
HXLINE( 235)					::com::stencyl::Engine_obj::IMG_BASE = HX_("2x",06,2c,00,00);
            				}
            				else {
HXLINE( 238)					bool _hx_tmp23;
HXDLIN( 238)					if ((theoreticalScale >= ((Float)1.5))) {
HXLINE( 238)						_hx_tmp23 = scales->exists(::com::stencyl::graphics::Scale_obj::_1_5X);
            					}
            					else {
HXLINE( 238)						_hx_tmp23 = false;
            					}
HXDLIN( 238)					if (_hx_tmp23) {
HXLINE( 240)						::com::stencyl::Engine_obj::SCALE = ((Float)1.5);
HXLINE( 241)						::com::stencyl::Engine_obj::IMG_BASE = HX_("1.5x",c0,8a,86,20);
            					}
            					else {
HXLINE( 246)						::com::stencyl::Engine_obj::SCALE = (int)1;
HXLINE( 247)						::com::stencyl::Engine_obj::IMG_BASE = HX_("1x",27,2b,00,00);
            					}
            				}
            			}
            		}
HXLINE( 250)		 ::Dynamic _hx_tmp24 = ::haxe::Log_obj::trace;
HXDLIN( 250)		_hx_tmp24((HX_("Theoretical Scale: ",58,11,dd,ea) + theoreticalScale),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),250,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 251)		 ::Dynamic _hx_tmp25 = ::haxe::Log_obj::trace;
HXDLIN( 251)		_hx_tmp25((HX_("Asset Scale: ",40,cd,33,ee) + ::com::stencyl::Engine_obj::IMG_BASE),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),251,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 255)		Float scaledStageWidth = (::com::stencyl::Config_obj::stageWidth * ::com::stencyl::Engine_obj::SCALE);
HXLINE( 256)		Float scaledStageHeight = (::com::stencyl::Config_obj::stageHeight * ::com::stencyl::Engine_obj::SCALE);
HXLINE( 260)		Float fitWidthScale = ((Float)::Universal_obj::windowWidth / (Float)scaledStageWidth);
HXLINE( 261)		Float fitHeightScale = ((Float)::Universal_obj::windowHeight / (Float)scaledStageHeight);
HXLINE( 263)		bool _hx_tmp26;
HXDLIN( 263)		bool _hx_tmp27;
HXDLIN( 263)		if (!(::com::stencyl::Config_obj::forceHiResAssets)) {
HXLINE( 263)			_hx_tmp27 = (::Universal_obj::windowWidth != ::com::stencyl::Config_obj::stageWidth);
            		}
            		else {
HXLINE( 263)			_hx_tmp27 = true;
            		}
HXDLIN( 263)		if (!(_hx_tmp27)) {
HXLINE( 263)			_hx_tmp26 = (::Universal_obj::windowHeight != ::com::stencyl::Config_obj::stageHeight);
            		}
            		else {
HXLINE( 263)			_hx_tmp26 = true;
            		}
HXDLIN( 263)		if (_hx_tmp26) {
HXLINE( 268)			if ((::com::stencyl::Config_obj::scaleMode == (int)1)) {
HXLINE( 270)				if ((::com::stencyl::Engine_obj::SCALE != theoreticalWindowedScale)) {
HXLINE( 272)					this->set_scaleX(((Float)theoreticalWindowedScale / (Float)::com::stencyl::Engine_obj::SCALE));
HXLINE( 273)					this->set_scaleY(this->get_scaleX());
            				}
            			}
            			else {
HXLINE( 281)				if ((::com::stencyl::Config_obj::scaleMode == (int)2)) {
HXLINE( 283)					this->set_scaleX(fitWidthScale);
HXLINE( 284)					this->set_scaleY(fitHeightScale);
            				}
            				else {
HXLINE( 289)					bool _hx_tmp28;
HXDLIN( 289)					if ((::com::stencyl::Config_obj::scaleMode != (int)3)) {
HXLINE( 289)						_hx_tmp28 = (::com::stencyl::Config_obj::scaleMode == (int)5);
            					}
            					else {
HXLINE( 289)						_hx_tmp28 = true;
            					}
HXDLIN( 289)					if (_hx_tmp28) {
HXLINE( 291)						this->set_scaleX(::Math_obj::min(fitWidthScale,fitHeightScale));
HXLINE( 292)						this->set_scaleY(this->get_scaleX());
            					}
            					else {
HXLINE( 296)						if ((::com::stencyl::Config_obj::scaleMode == (int)4)) {
HXLINE( 298)							this->set_scaleX(::Math_obj::max(fitWidthScale,fitHeightScale));
HXLINE( 299)							this->set_scaleY(this->get_scaleX());
            						}
            						else {
HXLINE( 303)							if ((::com::stencyl::Config_obj::scaleMode == (int)0)) {
HXLINE( 305)								if ((::com::stencyl::Engine_obj::SCALE != theoreticalWindowedScale)) {
HXLINE( 307)									this->set_scaleX(((Float)theoreticalWindowedScale / (Float)::com::stencyl::Engine_obj::SCALE));
HXLINE( 308)									this->set_scaleY(this->get_scaleX());
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 312)			bool _hx_tmp29;
HXDLIN( 312)			if ((::com::stencyl::Config_obj::scaleMode != (int)5)) {
HXLINE( 312)				_hx_tmp29 = (::com::stencyl::Config_obj::scaleMode != (int)1);
            			}
            			else {
HXLINE( 312)				_hx_tmp29 = false;
            			}
HXDLIN( 312)			if (_hx_tmp29) {
HXLINE( 314)				{
HXLINE( 314)					 ::Universal _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 314)					Float _hx_tmp30 = _g2->get_x();
HXDLIN( 314)					Float _hx_tmp31 = ::Universal_obj::windowWidth;
HXDLIN( 314)					_g2->set_x((_hx_tmp30 + ((Float)(_hx_tmp31 - (scaledStageWidth * this->get_scaleX())) / (Float)(int)2)));
            				}
HXLINE( 315)				{
HXLINE( 315)					 ::Universal _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 315)					Float _hx_tmp32 = _g3->get_y();
HXDLIN( 315)					Float _hx_tmp33 = ::Universal_obj::windowHeight;
HXDLIN( 315)					_g3->set_y((_hx_tmp32 + ((Float)(_hx_tmp33 - (scaledStageHeight * this->get_scaleY())) / (Float)(int)2)));
            				}
            			}
            		}
HXLINE( 319)		::Universal_obj::logicalWidth = ::com::stencyl::Config_obj::stageWidth;
HXLINE( 320)		::Universal_obj::logicalHeight = ::com::stencyl::Config_obj::stageHeight;
HXLINE( 322)		bool _hx_tmp34;
HXDLIN( 322)		if (isFullScreen) {
HXLINE( 322)			if ((::com::stencyl::Config_obj::scaleMode != (int)5)) {
HXLINE( 322)				_hx_tmp34 = (::com::stencyl::Config_obj::scaleMode == (int)1);
            			}
            			else {
HXLINE( 322)				_hx_tmp34 = true;
            			}
            		}
            		else {
HXLINE( 322)			_hx_tmp34 = false;
            		}
HXDLIN( 322)		if (_hx_tmp34) {
HXLINE( 324)			Float _hx_tmp35 = ::Universal_obj::windowWidth;
HXDLIN( 324)			Float _hx_tmp36 = ((Float)_hx_tmp35 / (Float)this->get_scaleX());
HXDLIN( 324)			::Universal_obj::logicalWidth = ((Float)_hx_tmp36 / (Float)::com::stencyl::Engine_obj::SCALE);
HXLINE( 325)			Float _hx_tmp37 = ::Universal_obj::windowHeight;
HXDLIN( 325)			Float _hx_tmp38 = ((Float)_hx_tmp37 / (Float)this->get_scaleY());
HXDLIN( 325)			::Universal_obj::logicalHeight = ((Float)_hx_tmp38 / (Float)::com::stencyl::Engine_obj::SCALE);
HXLINE( 329)			bool _hx_tmp39;
HXDLIN( 329)			int _hx_tmp40 = ::Std_obj::_hx_int(::Universal_obj::logicalWidth);
HXDLIN( 329)			if ((_hx_tmp40 == ::Universal_obj::logicalWidth)) {
HXLINE( 329)				int _hx_tmp41 = ::Std_obj::_hx_int(::Universal_obj::logicalHeight);
HXDLIN( 329)				_hx_tmp39 = (_hx_tmp41 != ::Universal_obj::logicalHeight);
            			}
            			else {
HXLINE( 329)				_hx_tmp39 = true;
            			}
HXDLIN( 329)			if (_hx_tmp39) {
HXLINE( 331)				::Universal_obj::logicalWidth = ::Std_obj::_hx_int(::Universal_obj::logicalWidth);
HXLINE( 332)				::Universal_obj::logicalHeight = ::Std_obj::_hx_int(::Universal_obj::logicalHeight);
HXLINE( 334)				this->set_scaleX(((Float)((Float)::Universal_obj::windowWidth / (Float)::com::stencyl::Engine_obj::SCALE) / (Float)::Universal_obj::logicalWidth));
HXLINE( 335)				this->set_scaleY(((Float)((Float)::Universal_obj::windowHeight / (Float)::com::stencyl::Engine_obj::SCALE) / (Float)::Universal_obj::logicalHeight));
            			}
            		}
HXLINE( 339)		::com::stencyl::Engine_obj::screenScaleX = this->get_scaleX();
HXLINE( 340)		::com::stencyl::Engine_obj::screenScaleY = this->get_scaleY();
HXLINE( 342)		this->maskLayer->get_graphics()->clear();
HXLINE( 343)		bool _hx_tmp42;
HXDLIN( 343)		if (isFullScreen) {
HXLINE( 343)			if ((::com::stencyl::Config_obj::scaleMode != (int)3)) {
HXLINE( 343)				_hx_tmp42 = (::com::stencyl::Config_obj::scaleMode == (int)0);
            			}
            			else {
HXLINE( 343)				_hx_tmp42 = true;
            			}
            		}
            		else {
HXLINE( 343)			_hx_tmp42 = false;
            		}
HXDLIN( 343)		if (_hx_tmp42) {
HXLINE( 345)			 ::openfl::display::Graphics _hx_tmp43 = this->maskLayer->get_graphics();
HXDLIN( 345)			_hx_tmp43->beginFill(this->stage->get_color(),null());
HXLINE( 346)			 ::openfl::display::Graphics _hx_tmp44 = this->maskLayer->get_graphics();
HXDLIN( 346)			Float _hx_tmp45 = -(this->get_x());
HXDLIN( 346)			Float _hx_tmp46 = -(this->get_y());
HXDLIN( 346)			Float _hx_tmp47 = ::Universal_obj::windowWidth;
HXDLIN( 346)			_hx_tmp44->drawRect(_hx_tmp45,_hx_tmp46,_hx_tmp47,this->get_y());
HXLINE( 347)			 ::openfl::display::Graphics _hx_tmp48 = this->maskLayer->get_graphics();
HXDLIN( 347)			Float _hx_tmp49 = -(this->get_x());
HXDLIN( 347)			_hx_tmp48->drawRect(_hx_tmp49,(int)0,this->get_x(),scaledStageHeight);
HXLINE( 348)			 ::openfl::display::Graphics _hx_tmp50 = this->maskLayer->get_graphics();
HXDLIN( 348)			_hx_tmp50->drawRect(scaledStageWidth,(int)0,this->get_x(),scaledStageHeight);
HXLINE( 349)			 ::openfl::display::Graphics _hx_tmp51 = this->maskLayer->get_graphics();
HXDLIN( 349)			Float _hx_tmp52 = -(this->get_x());
HXDLIN( 349)			Float _hx_tmp53 = ::Universal_obj::windowWidth;
HXDLIN( 349)			_hx_tmp51->drawRect(_hx_tmp52,scaledStageHeight,_hx_tmp53,this->get_y());
HXLINE( 350)			this->maskLayer->get_graphics()->endFill();
            		}
HXLINE( 353)		 ::Dynamic _hx_tmp54 = ::haxe::Log_obj::trace;
HXDLIN( 353)		_hx_tmp54((HX_("Logical Width: ",95,9c,84,80) + ::Universal_obj::logicalWidth),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),353,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 354)		 ::Dynamic _hx_tmp55 = ::haxe::Log_obj::trace;
HXDLIN( 354)		_hx_tmp55((HX_("Logical Height: ",c4,37,f9,76) + ::Universal_obj::logicalHeight),hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),354,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 355)		 ::Dynamic _hx_tmp56 = ::haxe::Log_obj::trace;
HXDLIN( 355)		::String _hx_tmp57 = (HX_("Scale X: ",48,88,d6,af) + this->get_scaleX());
HXDLIN( 355)		_hx_tmp56(_hx_tmp57,hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),355,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
HXLINE( 356)		 ::Dynamic _hx_tmp58 = ::haxe::Log_obj::trace;
HXDLIN( 356)		::String _hx_tmp59 = (HX_("Scale Y: ",89,4a,d7,af) + this->get_scaleY());
HXDLIN( 356)		_hx_tmp58(_hx_tmp59,hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),356,HX_("Universal",6b,b1,69,4d),HX_("initScreen",9c,96,a2,4b)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Universal_obj,initScreen,(void))

Float Universal_obj::getDesiredScale(Float checkWidth,Float checkHeight,int baseWidth,int baseHeight){
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_360_getDesiredScale)
HXLINE( 361)		int x1 = baseWidth;
HXLINE( 362)		int y1 = baseHeight;
HXLINE( 364)		int x2 = (x1 * (int)2);
HXLINE( 365)		int y2 = (y1 * (int)2);
HXLINE( 367)		int x3 = (x1 * (int)3);
HXLINE( 368)		int y3 = (y1 * (int)3);
HXLINE( 370)		int x4 = (x2 * (int)2);
HXLINE( 371)		int y4 = (y2 * (int)2);
HXLINE( 373)		Float x15 = ((Float)x3 / (Float)(int)2);
HXLINE( 374)		Float y15 = ((Float)y3 / (Float)(int)2);
HXLINE( 377)		bool _hx_tmp;
HXDLIN( 377)		if ((checkWidth >= x4)) {
HXLINE( 377)			_hx_tmp = (checkHeight >= y4);
            		}
            		else {
HXLINE( 377)			_hx_tmp = false;
            		}
HXDLIN( 377)		if (_hx_tmp) {
HXLINE( 379)			return (int)4;
            		}
            		else {
HXLINE( 382)			bool _hx_tmp1;
HXDLIN( 382)			if ((checkWidth >= x3)) {
HXLINE( 382)				_hx_tmp1 = (checkHeight >= y3);
            			}
            			else {
HXLINE( 382)				_hx_tmp1 = false;
            			}
HXDLIN( 382)			if (_hx_tmp1) {
HXLINE( 384)				return (int)3;
            			}
            			else {
HXLINE( 387)				bool _hx_tmp2;
HXDLIN( 387)				if ((checkWidth >= x2)) {
HXLINE( 387)					_hx_tmp2 = (checkHeight >= y2);
            				}
            				else {
HXLINE( 387)					_hx_tmp2 = false;
            				}
HXDLIN( 387)				if (_hx_tmp2) {
HXLINE( 389)					return (int)2;
            				}
            				else {
HXLINE( 392)					bool _hx_tmp3;
HXDLIN( 392)					if ((checkWidth >= x15)) {
HXLINE( 392)						_hx_tmp3 = (checkHeight >= y15);
            					}
            					else {
HXLINE( 392)						_hx_tmp3 = false;
            					}
HXDLIN( 392)					if (_hx_tmp3) {
HXLINE( 394)						return ((Float)1.5);
            					}
            					else {
HXLINE( 399)						return (int)1;
            					}
            				}
            			}
            		}
HXLINE( 377)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Universal_obj,getDesiredScale,return )

void Universal_obj::preloaderComplete(){
            	HX_GC_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_405_preloaderComplete)
HXLINE( 412)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 414)			 ::com::stencyl::Engine_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 419)				if (::com::stencyl::Config_obj::useGciLogging) {
HXLINE( 421)					::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Universal.hx",33,06,d8,7f),421,HX_("Universal",6b,b1,69,4d),HX_("preloaderComplete",4f,07,c0,8b)));
HXLINE( 422)					::com::stencyl::utils::ToolsetInterface_obj::preloadedUpdate();
            				}
HXLINE( 426)				this->stage->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 430)		 ::openfl::display::Stage _hx_tmp = this->stage;
HXDLIN( 430)		_hx_tmp->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("resize",f4,59,7b,08),false,false));
HXLINE( 432)		if (this->stage->window->_hx___fullscreen) {
HXLINE( 434)			 ::openfl::display::Stage _hx_tmp1 = this->stage;
HXDLIN( 434)			_hx_tmp1->dispatchEvent( ::openfl::events::FullScreenEvent_obj::__alloc( HX_CTX ,HX_("fullScreen",5b,ae,48,2e),false,false,true,true));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Universal_obj,preloaderComplete,(void))

 ::lime::ui::Window Universal_obj::window;

Float Universal_obj::logicalWidth;

Float Universal_obj::logicalHeight;

Float Universal_obj::windowWidth;

Float Universal_obj::windowHeight;

void Universal_obj::initWindow( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_45_initWindow)
HXLINE(  46)		::Universal_obj::window = window;
HXLINE(  48)		window->stage->align = (int)6;
HXLINE(  49)		window->stage->set_scaleMode((int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Universal_obj,initWindow,(void))

hx::Class Universal_obj::am;

 ::Dynamic Universal_obj::oldTrace;

void Universal_obj::setupTracing( ::Dynamic __o_forceEnable){
 ::Dynamic forceEnable = __o_forceEnable.Default(false);
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_447_setupTracing)
HXLINE( 448)		if (hx::IsNull( ::Universal_obj::oldTrace )) {
HXLINE( 449)			::Universal_obj::oldTrace = ::haxe::Log_obj::trace;
            		}
HXLINE( 451)		bool enable;
HXDLIN( 451)		if (!(forceEnable)) {
HXLINE( 451)			enable = !(::com::stencyl::Config_obj::releaseMode);
            		}
            		else {
HXLINE( 451)			enable = true;
            		}
HXLINE( 453)		if (enable) {
HXLINE( 460)			::haxe::Log_obj::trace = ::Universal_obj::oldTrace;
HXLINE( 464)			if (::com::stencyl::Config_obj::useGciLogging) {
HXLINE( 465)				::haxe::Log_obj::trace = ::com::stencyl::utils::ToolsetInterface_obj::gciTrace_dyn();
            			}
HXLINE( 468)			::lime::utils::Log_obj::level = (int)5;
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			void _hx_run( ::Dynamic v, ::Dynamic pos){
            				HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_472_setupTracing)
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 472)			::haxe::Log_obj::trace =  ::Dynamic(new _hx_Closure_0());
HXLINE( 473)			::lime::utils::Log_obj::level = (int)0;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Universal_obj,setupTracing,(void))

void Universal_obj::reloadGame(){
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_479_reloadGame)
HXDLIN( 479)		hx::Class _hx_tmp = ::Universal_obj::am;
HXDLIN( 479)		::Reflect_obj::callMethod(_hx_tmp,::Reflect_obj::field(::Universal_obj::am,HX_("reloadGame",eb,93,66,8f)),::cpp::VirtualArray_obj::__new(0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Universal_obj,reloadGame,(void))

void Universal_obj::addReloadListener( ::Dynamic reloadListener){
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_483_addReloadListener)
HXLINE( 484)		::Array< ::Dynamic> reloadListeners = ( (::Array< ::Dynamic>)(::Reflect_obj::field(::Universal_obj::am,HX_("reloadListeners",e6,3e,63,9c))) );
HXLINE( 485)		reloadListeners->push(reloadListener);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Universal_obj,addReloadListener,(void))


hx::ObjectPtr< Universal_obj > Universal_obj::__new() {
	hx::ObjectPtr< Universal_obj > __this = new Universal_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Universal_obj > Universal_obj::__alloc(hx::Ctx *_hx_ctx) {
	Universal_obj *__this = (Universal_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Universal_obj), true, "Universal"));
	*(void **)__this = Universal_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Universal_obj::Universal_obj()
{
}

void Universal_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Universal);
	HX_MARK_MEMBER_NAME(maskLayer,"maskLayer");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Universal_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maskLayer,"maskLayer");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Universal_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onAdded") ) { return hx::Val( onAdded_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"maskLayer") ) { return hx::Val( maskLayer ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initScreen") ) { return hx::Val( initScreen_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"initServices") ) { return hx::Val( initServices_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getDesiredScale") ) { return hx::Val( getDesiredScale_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"preloaderComplete") ) { return hx::Val( preloaderComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Universal_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"am") ) { outValue = ( am ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { outValue = ( window ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"oldTrace") ) { outValue = ( oldTrace ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initWindow") ) { outValue = initWindow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reloadGame") ) { outValue = reloadGame_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windowWidth") ) { outValue = ( windowWidth ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"logicalWidth") ) { outValue = ( logicalWidth ); return true; }
		if (HX_FIELD_EQ(inName,"windowHeight") ) { outValue = ( windowHeight ); return true; }
		if (HX_FIELD_EQ(inName,"setupTracing") ) { outValue = setupTracing_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"logicalHeight") ) { outValue = ( logicalHeight ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"addReloadListener") ) { outValue = addReloadListener_dyn(); return true; }
	}
	return false;
}

hx::Val Universal_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"maskLayer") ) { maskLayer=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Universal_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"am") ) { am=ioValue.Cast< hx::Class >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=ioValue.Cast<  ::lime::ui::Window >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"oldTrace") ) { oldTrace=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"windowWidth") ) { windowWidth=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"logicalWidth") ) { logicalWidth=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"windowHeight") ) { windowHeight=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"logicalHeight") ) { logicalHeight=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void Universal_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("maskLayer","\x45","\xd9","\x28","\xf6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Universal_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(Universal_obj,maskLayer),HX_HCSTRING("maskLayer","\x45","\xd9","\x28","\xf6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Universal_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::ui::Window*/ ,(void *) &Universal_obj::window,HX_HCSTRING("window","\xf0","\x93","\x8c","\x52")},
	{hx::fsFloat,(void *) &Universal_obj::logicalWidth,HX_HCSTRING("logicalWidth","\x7d","\x4b","\x6c","\xec")},
	{hx::fsFloat,(void *) &Universal_obj::logicalHeight,HX_HCSTRING("logicalHeight","\x90","\x3a","\xa5","\xa8")},
	{hx::fsFloat,(void *) &Universal_obj::windowWidth,HX_HCSTRING("windowWidth","\xf6","\x4b","\x35","\xbb")},
	{hx::fsFloat,(void *) &Universal_obj::windowHeight,HX_HCSTRING("windowHeight","\xf7","\xa3","\xbc","\xc9")},
	{hx::fsObject /*::hx::Class*/ ,(void *) &Universal_obj::am,HX_HCSTRING("am","\xec","\x54","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Universal_obj::oldTrace,HX_HCSTRING("oldTrace","\x5e","\xa8","\xea","\xfc")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Universal_obj_sMemberFields[] = {
	HX_HCSTRING("maskLayer","\x45","\xd9","\x28","\xf6"),
	HX_HCSTRING("onAdded","\x21","\x73","\x81","\xb2"),
	HX_HCSTRING("initServices","\xce","\x19","\x02","\x8a"),
	HX_HCSTRING("initScreen","\x9c","\x96","\xa2","\x4b"),
	HX_HCSTRING("getDesiredScale","\x86","\x62","\x04","\x78"),
	HX_HCSTRING("preloaderComplete","\x4f","\x07","\xc0","\x8b"),
	::String(null()) };

static void Universal_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Universal_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Universal_obj::window,"window");
	HX_MARK_MEMBER_NAME(Universal_obj::logicalWidth,"logicalWidth");
	HX_MARK_MEMBER_NAME(Universal_obj::logicalHeight,"logicalHeight");
	HX_MARK_MEMBER_NAME(Universal_obj::windowWidth,"windowWidth");
	HX_MARK_MEMBER_NAME(Universal_obj::windowHeight,"windowHeight");
	HX_MARK_MEMBER_NAME(Universal_obj::am,"am");
	HX_MARK_MEMBER_NAME(Universal_obj::oldTrace,"oldTrace");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Universal_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Universal_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Universal_obj::window,"window");
	HX_VISIT_MEMBER_NAME(Universal_obj::logicalWidth,"logicalWidth");
	HX_VISIT_MEMBER_NAME(Universal_obj::logicalHeight,"logicalHeight");
	HX_VISIT_MEMBER_NAME(Universal_obj::windowWidth,"windowWidth");
	HX_VISIT_MEMBER_NAME(Universal_obj::windowHeight,"windowHeight");
	HX_VISIT_MEMBER_NAME(Universal_obj::am,"am");
	HX_VISIT_MEMBER_NAME(Universal_obj::oldTrace,"oldTrace");
};

#endif

hx::Class Universal_obj::__mClass;

static ::String Universal_obj_sStaticFields[] = {
	HX_HCSTRING("window","\xf0","\x93","\x8c","\x52"),
	HX_HCSTRING("logicalWidth","\x7d","\x4b","\x6c","\xec"),
	HX_HCSTRING("logicalHeight","\x90","\x3a","\xa5","\xa8"),
	HX_HCSTRING("windowWidth","\xf6","\x4b","\x35","\xbb"),
	HX_HCSTRING("windowHeight","\xf7","\xa3","\xbc","\xc9"),
	HX_HCSTRING("initWindow","\x20","\xef","\xd1","\x56"),
	HX_HCSTRING("am","\xec","\x54","\x00","\x00"),
	HX_HCSTRING("oldTrace","\x5e","\xa8","\xea","\xfc"),
	HX_HCSTRING("setupTracing","\x05","\x56","\x3c","\x46"),
	HX_HCSTRING("reloadGame","\xeb","\x93","\x66","\x8f"),
	HX_HCSTRING("addReloadListener","\xee","\x2e","\x8e","\x71"),
	::String(null())
};

void Universal_obj::__register()
{
	hx::Object *dummy = new Universal_obj;
	Universal_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Universal","\x6b","\xb1","\x69","\x4d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Universal_obj::__GetStatic;
	__mClass->mSetStaticField = &Universal_obj::__SetStatic;
	__mClass->mMarkFunc = Universal_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Universal_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Universal_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Universal_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Universal_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Universal_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Universal_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Universal_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_37_boot)
HXDLIN(  37)		logicalWidth = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_38_boot)
HXDLIN(  38)		logicalHeight = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_39_boot)
HXDLIN(  39)		windowWidth = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_dc2aa8825c60d6e3_40_boot)
HXDLIN(  40)		windowHeight = ((Float)0.0);
            	}
}

