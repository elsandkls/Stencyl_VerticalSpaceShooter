// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_de_polygonal_ds_tools_NativeArrayTools
#include <de/polygonal/ds/tools/NativeArrayTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_33_alloc,"de.polygonal.ds.tools.NativeArrayTools","alloc",0x1a3d751c,"de.polygonal.ds.tools.NativeArrayTools.alloc","de/polygonal/ds/tools/NativeArrayTools.hx",33,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_75_get,"de.polygonal.ds.tools.NativeArrayTools","get",0x4f17097d,"de.polygonal.ds.tools.NativeArrayTools.get","de/polygonal/ds/tools/NativeArrayTools.hx",75,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_102_set,"de.polygonal.ds.tools.NativeArrayTools","set",0x4f202489,"de.polygonal.ds.tools.NativeArrayTools.set","de/polygonal/ds/tools/NativeArrayTools.hx",102,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_111_size,"de.polygonal.ds.tools.NativeArrayTools","size",0xed02e1fa,"de.polygonal.ds.tools.NativeArrayTools.size","de/polygonal/ds/tools/NativeArrayTools.hx",111,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_131_toArray,"de.polygonal.ds.tools.NativeArrayTools","toArray",0xc5504285,"de.polygonal.ds.tools.NativeArrayTools.toArray","de/polygonal/ds/tools/NativeArrayTools.hx",131,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_157_ofArray,"de.polygonal.ds.tools.NativeArrayTools","ofArray",0x5c2eb169,"de.polygonal.ds.tools.NativeArrayTools.ofArray","de/polygonal/ds/tools/NativeArrayTools.hx",157,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_186_blit,"de.polygonal.ds.tools.NativeArrayTools","blit",0xe1c8796e,"de.polygonal.ds.tools.NativeArrayTools.blit","de/polygonal/ds/tools/NativeArrayTools.hx",186,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_252_copy,"de.polygonal.ds.tools.NativeArrayTools","copy",0xe273fcee,"de.polygonal.ds.tools.NativeArrayTools.copy","de/polygonal/ds/tools/NativeArrayTools.hx",252,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_280_zero,"de.polygonal.ds.tools.NativeArrayTools","zero",0xf1a05061,"de.polygonal.ds.tools.NativeArrayTools.zero","de/polygonal/ds/tools/NativeArrayTools.hx",280,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_302_init,"de.polygonal.ds.tools.NativeArrayTools","init",0xe66a7c49,"de.polygonal.ds.tools.NativeArrayTools.init","de/polygonal/ds/tools/NativeArrayTools.hx",302,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_318_nullify,"de.polygonal.ds.tools.NativeArrayTools","nullify",0xf0307e3c,"de.polygonal.ds.tools.NativeArrayTools.nullify","de/polygonal/ds/tools/NativeArrayTools.hx",318,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_341_binarySearchCmp,"de.polygonal.ds.tools.NativeArrayTools","binarySearchCmp",0x29270b24,"de.polygonal.ds.tools.NativeArrayTools.binarySearchCmp","de/polygonal/ds/tools/NativeArrayTools.hx",341,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_369_binarySearchf,"de.polygonal.ds.tools.NativeArrayTools","binarySearchf",0xecd089a4,"de.polygonal.ds.tools.NativeArrayTools.binarySearchf","de/polygonal/ds/tools/NativeArrayTools.hx",369,0x45ab20c9)
HX_LOCAL_STACK_FRAME(_hx_pos_dc01f2a61f9a1480_396_binarySearchi,"de.polygonal.ds.tools.NativeArrayTools","binarySearchi",0xecd089a7,"de.polygonal.ds.tools.NativeArrayTools.binarySearchi","de/polygonal/ds/tools/NativeArrayTools.hx",396,0x45ab20c9)
namespace de{
namespace polygonal{
namespace ds{
namespace tools{

void NativeArrayTools_obj::__construct() { }

Dynamic NativeArrayTools_obj::__CreateEmpty() { return new NativeArrayTools_obj; }

void *NativeArrayTools_obj::_hx_vtable = 0;

Dynamic NativeArrayTools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeArrayTools_obj > _hx_result = new NativeArrayTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NativeArrayTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x061d66a5;
}

::cpp::VirtualArray NativeArrayTools_obj::alloc(int len){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_33_alloc)
HXLINE(  51)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXLINE(  52)		_hx_array_set_size_exact(a,len);
HXLINE(  53)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeArrayTools_obj,alloc,return )

 ::Dynamic NativeArrayTools_obj::get(::cpp::VirtualArray src,int index){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_75_get)
HXDLIN(  75)		return src->__get(index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NativeArrayTools_obj,get,return )

void NativeArrayTools_obj::set(::cpp::VirtualArray dst,int index, ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_102_set)
HXDLIN( 102)		dst->set(index,val);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NativeArrayTools_obj,set,(void))

int NativeArrayTools_obj::size(::cpp::VirtualArray a){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_111_size)
HXDLIN( 111)		return a->get_length();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeArrayTools_obj,size,return )

::cpp::VirtualArray NativeArrayTools_obj::toArray(::cpp::VirtualArray src,int first,int len,::cpp::VirtualArray dst){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_131_toArray)
HXLINE( 136)		bool _hx_tmp;
HXDLIN( 136)		if ((first == (int)0)) {
HXLINE( 136)			_hx_tmp = (len == src->get_length());
            		}
            		else {
HXLINE( 136)			_hx_tmp = false;
            		}
HXDLIN( 136)		if (_hx_tmp) {
HXLINE( 136)			return src->copy();
            		}
HXLINE( 139)		if ((len == (int)0)) {
HXLINE( 139)			return ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 140)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXDLIN( 140)		_hx_array_set_size_exact(a,len);
HXDLIN( 140)		::cpp::VirtualArray out = a;
HXLINE( 141)		if ((first == (int)0)) {
HXLINE( 143)			int _g1 = (int)0;
HXDLIN( 143)			int _g = len;
HXDLIN( 143)			while((_g1 < _g)){
HXLINE( 143)				_g1 = (_g1 + (int)1);
HXDLIN( 143)				int i = (_g1 - (int)1);
HXDLIN( 143)				out->set(i,src->__get(i));
            			}
            		}
            		else {
HXLINE( 147)			 ::Dynamic j;
HXLINE( 148)			{
HXLINE( 148)				int _g11 = first;
HXDLIN( 148)				int _g2 = (first + len);
HXDLIN( 148)				while((_g11 < _g2)){
HXLINE( 148)					_g11 = (_g11 + (int)1);
HXDLIN( 148)					int i1 = (_g11 - (int)1);
HXDLIN( 148)					out->set((i1 - first),src->__get(i1));
            				}
            			}
            		}
HXLINE( 150)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NativeArrayTools_obj,toArray,return )

::cpp::VirtualArray NativeArrayTools_obj::ofArray(::cpp::VirtualArray src){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_157_ofArray)
HXLINE( 170)		int len = src->get_length();
HXDLIN( 170)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXDLIN( 170)		_hx_array_set_size_exact(a,len);
HXDLIN( 170)		::cpp::VirtualArray out = a;
HXLINE( 171)		{
HXLINE( 171)			int _g1 = (int)0;
HXDLIN( 171)			int _g = src->get_length();
HXDLIN( 171)			while((_g1 < _g)){
HXLINE( 171)				_g1 = (_g1 + (int)1);
HXDLIN( 171)				int i = (_g1 - (int)1);
HXDLIN( 171)				out->set(i,src->__get(i));
            			}
            		}
HXLINE( 172)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeArrayTools_obj,ofArray,return )

void NativeArrayTools_obj::blit(::cpp::VirtualArray src,int srcPos,::cpp::VirtualArray dst,int dstPos,int n){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_186_blit)
HXDLIN( 186)		if ((n > (int)0)) {
HXLINE( 195)			dst->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)(dstPos,src,srcPos,n);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(NativeArrayTools_obj,blit,(void))

::cpp::VirtualArray NativeArrayTools_obj::copy(::cpp::VirtualArray src){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_252_copy)
HXLINE( 254)		int len = src->get_length();
HXLINE( 255)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXDLIN( 255)		_hx_array_set_size_exact(a,len);
HXDLIN( 255)		::cpp::VirtualArray out = a;
HXLINE( 256)		if ((len > (int)0)) {
HXLINE( 256)			out->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)((int)0,src,(int)0,len);
            		}
HXLINE( 257)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeArrayTools_obj,copy,return )

::cpp::VirtualArray NativeArrayTools_obj::zero(::cpp::VirtualArray dst,hx::Null< int >  __o_first,hx::Null< int >  __o_n){
int first = __o_first.Default(0);
int n = __o_n.Default(0);
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_280_zero)
HXLINE( 281)		int min = first;
HXLINE( 282)		int max;
HXDLIN( 282)		if ((n <= (int)0)) {
HXLINE( 282)			max = dst->get_length();
            		}
            		else {
HXLINE( 282)			max = (min + n);
            		}
HXLINE( 288)		dst->zero(min,(max - min));
HXLINE( 294)		return dst;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NativeArrayTools_obj,zero,return )

::cpp::VirtualArray NativeArrayTools_obj::init(::cpp::VirtualArray a, ::Dynamic val,hx::Null< int >  __o_first,hx::Null< int >  __o_n){
int first = __o_first.Default(0);
int n = __o_n.Default(0);
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_302_init)
HXLINE( 303)		int min = first;
HXLINE( 304)		int max;
HXDLIN( 304)		if ((n <= (int)0)) {
HXLINE( 304)			max = a->get_length();
            		}
            		else {
HXLINE( 304)			max = (min + n);
            		}
HXLINE( 309)		while((min < max)){
HXLINE( 309)			min = (min + (int)1);
HXDLIN( 309)			a->set((min - (int)1),val);
            		}
HXLINE( 310)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NativeArrayTools_obj,init,return )

::cpp::VirtualArray NativeArrayTools_obj::nullify(::cpp::VirtualArray a,hx::Null< int >  __o_first,hx::Null< int >  __o_n){
int first = __o_first.Default(0);
int n = __o_n.Default(0);
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_318_nullify)
HXLINE( 319)		int min = first;
HXLINE( 320)		int max;
HXDLIN( 320)		if ((n <= (int)0)) {
HXLINE( 320)			max = a->get_length();
            		}
            		else {
HXLINE( 320)			max = (min + n);
            		}
HXLINE( 326)		a->zero(min,(max - min));
HXLINE( 331)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(NativeArrayTools_obj,nullify,return )

int NativeArrayTools_obj::binarySearchCmp(::cpp::VirtualArray a, ::Dynamic val,int min,int max, ::Dynamic cmp){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_341_binarySearchCmp)
HXLINE( 347)		int l = min;
HXDLIN( 347)		int m;
HXDLIN( 347)		int h = (max + (int)1);
HXLINE( 348)		while((l < h)){
HXLINE( 350)			m = (l + ((int)(h - l) >> (int)(int)1));
HXLINE( 351)			if ((( (int)(cmp(a->__get(m),val)) ) < (int)0)) {
HXLINE( 352)				l = (m + (int)1);
            			}
            			else {
HXLINE( 354)				h = m;
            			}
            		}
HXLINE( 357)		bool _hx_tmp;
HXDLIN( 357)		if ((l <= max)) {
HXLINE( 357)			_hx_tmp = (( (int)(cmp(a->__get(l),val)) ) == (int)0);
            		}
            		else {
HXLINE( 357)			_hx_tmp = false;
            		}
HXDLIN( 357)		if (_hx_tmp) {
HXLINE( 358)			return l;
            		}
            		else {
HXLINE( 360)			return ~(l);
            		}
HXLINE( 357)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(NativeArrayTools_obj,binarySearchCmp,return )

int NativeArrayTools_obj::binarySearchf(::Array< Float > a,Float val,int min,int max){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_369_binarySearchf)
HXLINE( 374)		int l = min;
HXDLIN( 374)		int m;
HXDLIN( 374)		int h = (max + (int)1);
HXLINE( 375)		while((l < h)){
HXLINE( 377)			m = (l + ((int)(h - l) >> (int)(int)1));
HXLINE( 378)			if ((a->__get(m) < val)) {
HXLINE( 379)				l = (m + (int)1);
            			}
            			else {
HXLINE( 381)				h = m;
            			}
            		}
HXLINE( 384)		bool _hx_tmp;
HXDLIN( 384)		if ((l <= max)) {
HXLINE( 384)			_hx_tmp = (a->__get(l) == val);
            		}
            		else {
HXLINE( 384)			_hx_tmp = false;
            		}
HXDLIN( 384)		if (_hx_tmp) {
HXLINE( 385)			return l;
            		}
            		else {
HXLINE( 387)			return ~(l);
            		}
HXLINE( 384)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NativeArrayTools_obj,binarySearchf,return )

int NativeArrayTools_obj::binarySearchi(::Array< int > a,int val,int min,int max){
            	HX_STACKFRAME(&_hx_pos_dc01f2a61f9a1480_396_binarySearchi)
HXLINE( 401)		int l = min;
HXDLIN( 401)		int m;
HXDLIN( 401)		int h = (max + (int)1);
HXLINE( 402)		while((l < h)){
HXLINE( 404)			m = (l + ((int)(h - l) >> (int)(int)1));
HXLINE( 405)			if ((a->__get(m) < val)) {
HXLINE( 406)				l = (m + (int)1);
            			}
            			else {
HXLINE( 408)				h = m;
            			}
            		}
HXLINE( 411)		bool _hx_tmp;
HXDLIN( 411)		if ((l <= max)) {
HXLINE( 411)			_hx_tmp = (a->__get(l) == val);
            		}
            		else {
HXLINE( 411)			_hx_tmp = false;
            		}
HXDLIN( 411)		if (_hx_tmp) {
HXLINE( 412)			return l;
            		}
            		else {
HXLINE( 414)			return ~(l);
            		}
HXLINE( 411)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NativeArrayTools_obj,binarySearchi,return )


NativeArrayTools_obj::NativeArrayTools_obj()
{
}

bool NativeArrayTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { outValue = size_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"blit") ) { outValue = blit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = zero_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { outValue = alloc_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ofArray") ) { outValue = ofArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nullify") ) { outValue = nullify_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"binarySearchf") ) { outValue = binarySearchf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"binarySearchi") ) { outValue = binarySearchi_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"binarySearchCmp") ) { outValue = binarySearchCmp_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *NativeArrayTools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *NativeArrayTools_obj_sStaticStorageInfo = 0;
#endif

static void NativeArrayTools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeArrayTools_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeArrayTools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeArrayTools_obj::__mClass,"__mClass");
};

#endif

hx::Class NativeArrayTools_obj::__mClass;

static ::String NativeArrayTools_obj_sStaticFields[] = {
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("ofArray","\x02","\x29","\xf2","\x88"),
	HX_HCSTRING("blit","\x35","\x38","\x19","\x41"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("nullify","\xd5","\xf5","\xf3","\x1c"),
	HX_HCSTRING("binarySearchCmp","\xbd","\x43","\x01","\x9b"),
	HX_HCSTRING("binarySearchf","\xfd","\x39","\x5b","\xe2"),
	HX_HCSTRING("binarySearchi","\x00","\x3a","\x5b","\xe2"),
	::String(null())
};

void NativeArrayTools_obj::__register()
{
	hx::Object *dummy = new NativeArrayTools_obj;
	NativeArrayTools_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.ds.tools.NativeArrayTools","\xd5","\xa9","\xfe","\x7c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NativeArrayTools_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeArrayTools_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NativeArrayTools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< NativeArrayTools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeArrayTools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeArrayTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeArrayTools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace de
} // end namespace polygonal
} // end namespace ds
} // end namespace tools
