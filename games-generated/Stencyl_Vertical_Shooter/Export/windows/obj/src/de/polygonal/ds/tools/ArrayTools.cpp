// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_ArrayTools
#include <de/polygonal/ds/tools/ArrayTools.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_Shuffle
#include <de/polygonal/ds/tools/Shuffle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_36_alloc,"de.polygonal.ds.tools.ArrayTools","alloc",0xeeb15465,"de.polygonal.ds.tools.ArrayTools.alloc","de/polygonal/ds/tools/ArrayTools.hx",36,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_66_trim,"de.polygonal.ds.tools.ArrayTools","trim",0x2ef03af2,"de.polygonal.ds.tools.ArrayTools.trim","de/polygonal/ds/tools/ArrayTools.hx",66,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_91_swap,"de.polygonal.ds.tools.ArrayTools","swap",0x2e4ac8a3,"de.polygonal.ds.tools.ArrayTools.swap","de/polygonal/ds/tools/ArrayTools.hx",91,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_105_getFront,"de.polygonal.ds.tools.ArrayTools","getFront",0x34620e43,"de.polygonal.ds.tools.ArrayTools.getFront","de/polygonal/ds/tools/ArrayTools.hx",105,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_118_init,"de.polygonal.ds.tools.ArrayTools","init",0x27a7d920,"de.polygonal.ds.tools.ArrayTools.init","de/polygonal/ds/tools/ArrayTools.hx",118,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_136_blit,"de.polygonal.ds.tools.ArrayTools","blit",0x2305d645,"de.polygonal.ds.tools.ArrayTools.blit","de/polygonal/ds/tools/ArrayTools.hx",136,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_201_iter,"de.polygonal.ds.tools.ArrayTools","iter",0x27ac6328,"de.polygonal.ds.tools.ArrayTools.iter","de/polygonal/ds/tools/ArrayTools.hx",201,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_213_binarySearchCmp,"de.polygonal.ds.tools.ArrayTools","binarySearchCmp",0xaa343fad,"de.polygonal.ds.tools.ArrayTools.binarySearchCmp","de/polygonal/ds/tools/ArrayTools.hx",213,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_242_binarySearchf,"de.polygonal.ds.tools.ArrayTools","binarySearchf",0x5d9259ed,"de.polygonal.ds.tools.ArrayTools.binarySearchf","de/polygonal/ds/tools/ArrayTools.hx",242,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_270_binarySearchi,"de.polygonal.ds.tools.ArrayTools","binarySearchi",0x5d9259f0,"de.polygonal.ds.tools.ArrayTools.binarySearchi","de/polygonal/ds/tools/ArrayTools.hx",270,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_297_shuffle,"de.polygonal.ds.tools.ArrayTools","shuffle",0x78bad1e9,"de.polygonal.ds.tools.ArrayTools.shuffle","de/polygonal/ds/tools/ArrayTools.hx",297,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_335_sortRange,"de.polygonal.ds.tools.ArrayTools","sortRange",0x5bdfe16f,"de.polygonal.ds.tools.ArrayTools.sortRange","de/polygonal/ds/tools/ArrayTools.hx",335,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_371_quickPerm,"de.polygonal.ds.tools.ArrayTools","quickPerm",0x249a826d,"de.polygonal.ds.tools.ArrayTools.quickPerm","de/polygonal/ds/tools/ArrayTools.hx",371,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_413_equals,"de.polygonal.ds.tools.ArrayTools","equals",0x6ccf304f,"de.polygonal.ds.tools.ArrayTools.equals","de/polygonal/ds/tools/ArrayTools.hx",413,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_425_split,"de.polygonal.ds.tools.ArrayTools","split",0x4e8c9aca,"de.polygonal.ds.tools.ArrayTools.split","de/polygonal/ds/tools/ArrayTools.hx",425,0xd65eb9e0)
HX_LOCAL_STACK_FRAME(_hx_pos_fcdd3ad9ab6e2080_440__quickSort,"de.polygonal.ds.tools.ArrayTools","_quickSort",0x06825abc,"de.polygonal.ds.tools.ArrayTools._quickSort","de/polygonal/ds/tools/ArrayTools.hx",440,0xd65eb9e0)
namespace de{
namespace polygonal{
namespace ds{
namespace tools{

void ArrayTools_obj::__construct() { }

Dynamic ArrayTools_obj::__CreateEmpty() { return new ArrayTools_obj; }

void *ArrayTools_obj::_hx_vtable = 0;

Dynamic ArrayTools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayTools_obj > _hx_result = new ArrayTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ArrayTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3064aaca;
}

::cpp::VirtualArray ArrayTools_obj::alloc(int len){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_36_alloc)
HXLINE(  39)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXLINE(  45)		_hx_array_set_size_exact(a,len);
HXLINE(  46)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayTools_obj,alloc,return )

::cpp::VirtualArray ArrayTools_obj::trim(::cpp::VirtualArray a,int len){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_66_trim)
HXDLIN(  66)		if ((a->get_length() > len)) {
HXLINE(  72)			_hx_array_set_size_exact(a,len);
HXLINE(  73)			return a;
            		}
            		else {
HXLINE(  79)			return a;
            		}
HXLINE(  66)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ArrayTools_obj,trim,return )

void ArrayTools_obj::swap(::cpp::VirtualArray array,int a,int b){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_91_swap)
HXDLIN(  91)		if ((a != b)) {
HXLINE(  93)			 ::Dynamic x = array->__get(a);
HXLINE(  94)			array->set(a,array->__get(b));
HXLINE(  95)			array->set(b,x);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ArrayTools_obj,swap,(void))

 ::Dynamic ArrayTools_obj::getFront(::cpp::VirtualArray array,int index){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_105_getFront)
HXLINE( 109)		if ((index != (int)0)) {
HXLINE( 109)			 ::Dynamic x = array->__get(index);
HXDLIN( 109)			array->set(index,array->__get((int)0));
HXDLIN( 109)			array->set((int)0,x);
            		}
HXLINE( 110)		return array->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ArrayTools_obj,getFront,return )

::cpp::VirtualArray ArrayTools_obj::init(::cpp::VirtualArray a, ::Dynamic val,hx::Null< int >  __o_first,hx::Null< int >  __o_n){
int first = __o_first.Default(0);
int n = __o_n.Default(0);
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_118_init)
HXLINE( 119)		int min = first;
HXLINE( 120)		int max;
HXDLIN( 120)		if ((n <= (int)0)) {
HXLINE( 120)			max = a->get_length();
            		}
            		else {
HXLINE( 120)			max = (min + n);
            		}
HXLINE( 125)		while((min < max)){
HXLINE( 125)			min = (min + (int)1);
HXDLIN( 125)			a->set((min - (int)1),val);
            		}
HXLINE( 126)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ArrayTools_obj,init,return )

void ArrayTools_obj::blit(::cpp::VirtualArray src,int srcPos,::cpp::VirtualArray dst,int dstPos,int n){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_136_blit)
HXDLIN( 136)		if ((n > (int)0)) {
HXLINE( 143)			dst->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)(dstPos,src,srcPos,n);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ArrayTools_obj,blit,(void))

void ArrayTools_obj::iter(::cpp::VirtualArray src, ::Dynamic f,hx::Null< int >  __o_n){
int n = __o_n.Default(0);
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_201_iter)
HXLINE( 202)		if ((n == (int)0)) {
HXLINE( 202)			n = src->get_length();
            		}
HXLINE( 203)		{
HXLINE( 203)			int _g1 = (int)0;
HXDLIN( 203)			int _g = n;
HXDLIN( 203)			while((_g1 < _g)){
HXLINE( 203)				_g1 = (_g1 + (int)1);
HXDLIN( 203)				int i = (_g1 - (int)1);
HXDLIN( 203)				f(src->__get(i));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ArrayTools_obj,iter,(void))

int ArrayTools_obj::binarySearchCmp(::cpp::VirtualArray a, ::Dynamic x,int min,int max, ::Dynamic comparator){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_213_binarySearchCmp)
HXLINE( 219)		int l = min;
HXDLIN( 219)		int m;
HXDLIN( 219)		int h = (max + (int)1);
HXLINE( 220)		while((l < h)){
HXLINE( 222)			m = (l + ((int)(h - l) >> (int)(int)1));
HXLINE( 223)			if ((( (int)(comparator(a->__get(m),x)) ) < (int)0)) {
HXLINE( 224)				l = (m + (int)1);
            			}
            			else {
HXLINE( 226)				h = m;
            			}
            		}
HXLINE( 229)		bool _hx_tmp;
HXDLIN( 229)		if ((l <= max)) {
HXLINE( 229)			_hx_tmp = (( (int)(comparator(a->__get(l),x)) ) == (int)0);
            		}
            		else {
HXLINE( 229)			_hx_tmp = false;
            		}
HXDLIN( 229)		if (_hx_tmp) {
HXLINE( 230)			return l;
            		}
            		else {
HXLINE( 232)			return ~(l);
            		}
HXLINE( 229)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ArrayTools_obj,binarySearchCmp,return )

int ArrayTools_obj::binarySearchf(::Array< Float > a,Float x,int min,int max){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_242_binarySearchf)
HXLINE( 247)		int l = min;
HXDLIN( 247)		int m;
HXDLIN( 247)		int h = (max + (int)1);
HXLINE( 248)		while((l < h)){
HXLINE( 250)			m = (l + ((int)(h - l) >> (int)(int)1));
HXLINE( 251)			if ((a->__get(m) < x)) {
HXLINE( 252)				l = (m + (int)1);
            			}
            			else {
HXLINE( 254)				h = m;
            			}
            		}
HXLINE( 257)		bool _hx_tmp;
HXDLIN( 257)		if ((l <= max)) {
HXLINE( 257)			_hx_tmp = (a->__get(l) == x);
            		}
            		else {
HXLINE( 257)			_hx_tmp = false;
            		}
HXDLIN( 257)		if (_hx_tmp) {
HXLINE( 258)			return l;
            		}
            		else {
HXLINE( 260)			return ~(l);
            		}
HXLINE( 257)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ArrayTools_obj,binarySearchf,return )

int ArrayTools_obj::binarySearchi(::Array< int > a,int x,int min,int max){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_270_binarySearchi)
HXLINE( 275)		int l = min;
HXDLIN( 275)		int m;
HXDLIN( 275)		int h = (max + (int)1);
HXLINE( 276)		while((l < h)){
HXLINE( 278)			m = (l + ((int)(h - l) >> (int)(int)1));
HXLINE( 279)			if ((a->__get(m) < x)) {
HXLINE( 280)				l = (m + (int)1);
            			}
            			else {
HXLINE( 282)				h = m;
            			}
            		}
HXLINE( 285)		bool _hx_tmp;
HXDLIN( 285)		if ((l <= max)) {
HXLINE( 285)			_hx_tmp = (a->__get(l) == x);
            		}
            		else {
HXLINE( 285)			_hx_tmp = false;
            		}
HXDLIN( 285)		if (_hx_tmp) {
HXLINE( 286)			return l;
            		}
            		else {
HXLINE( 288)			return ~(l);
            		}
HXLINE( 285)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ArrayTools_obj,binarySearchi,return )

void ArrayTools_obj::shuffle(::cpp::VirtualArray a,::Array< Float > rvals){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_297_shuffle)
HXLINE( 300)		int s = a->get_length();
HXLINE( 301)		if (hx::IsNull( rvals )) {
HXLINE( 303)			while(true){
HXLINE( 303)				s = (s - (int)1);
HXDLIN( 303)				if (!((s > (int)1))) {
HXLINE( 303)					goto _hx_goto_15;
            				}
HXLINE( 305)				int i = ::Std_obj::_hx_int((( (Float)(::de::polygonal::ds::tools::Shuffle_obj::_f()) ) * s));
HXLINE( 306)				 ::Dynamic t = a->__get(s);
HXLINE( 307)				a->set(s,a->__get(i));
HXLINE( 308)				a->set(i,t);
            			}
            			_hx_goto_15:;
            		}
            		else {
HXLINE( 315)			int j = (int)0;
HXLINE( 316)			while(true){
HXLINE( 316)				s = (s - (int)1);
HXDLIN( 316)				if (!((s > (int)1))) {
HXLINE( 316)					goto _hx_goto_16;
            				}
HXLINE( 318)				j = (j + (int)1);
HXDLIN( 318)				int i1 = ::Std_obj::_hx_int((rvals->__get((j - (int)1)) * s));
HXLINE( 319)				 ::Dynamic t1 = a->__get(s);
HXLINE( 320)				a->set(s,a->__get(i1));
HXLINE( 321)				a->set(i1,t1);
            			}
            			_hx_goto_16:;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ArrayTools_obj,shuffle,(void))

void ArrayTools_obj::sortRange(::Array< Float > a, ::Dynamic cmp,bool useInsertionSort,int first,int n){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_335_sortRange)
HXLINE( 336)		int k = a->length;
HXLINE( 337)		if ((k > (int)1)) {
HXLINE( 342)			if (useInsertionSort) {
HXLINE( 344)				int _g1 = (first + (int)1);
HXDLIN( 344)				int _g = (first + n);
HXDLIN( 344)				while((_g1 < _g)){
HXLINE( 344)					_g1 = (_g1 + (int)1);
HXDLIN( 344)					int i = (_g1 - (int)1);
HXLINE( 346)					Float x = a->__get(i);
HXLINE( 347)					int j = i;
HXLINE( 348)					while((j > first)){
HXLINE( 350)						Float y = a->__get((j - (int)1));
HXLINE( 351)						if ((( (int)(cmp(y,x)) ) > (int)0)) {
HXLINE( 353)							a[j] = y;
HXLINE( 354)							j = (j - (int)1);
            						}
            						else {
HXLINE( 357)							goto _hx_goto_19;
            						}
            					}
            					_hx_goto_19:;
HXLINE( 359)					a[j] = x;
            				}
            			}
            			else {
HXLINE( 363)				::de::polygonal::ds::tools::ArrayTools_obj::_quickSort(a,first,n,cmp);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ArrayTools_obj,sortRange,(void))

::Array< ::Dynamic> ArrayTools_obj::quickPerm(int n){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_371_quickPerm)
HXLINE( 372)		::Array< ::Dynamic> results = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 374)		::Array< int > a = ::Array_obj< int >::__new(0);
HXLINE( 375)		::Array< int > p = ::Array_obj< int >::__new(0);
HXLINE( 377)		int i;
HXDLIN( 377)		int j;
HXDLIN( 377)		int t;
HXLINE( 379)		{
HXLINE( 379)			int _g1 = (int)0;
HXDLIN( 379)			int _g = n;
HXDLIN( 379)			while((_g1 < _g)){
HXLINE( 379)				_g1 = (_g1 + (int)1);
HXDLIN( 379)				int i1 = (_g1 - (int)1);
HXLINE( 381)				a[i1] = (i1 + (int)1);
HXLINE( 382)				p[i1] = (int)0;
            			}
            		}
HXLINE( 385)		results->push(a->copy());
HXLINE( 387)		i = (int)1;
HXLINE( 388)		while((i < n)){
HXLINE( 390)			if ((p->__get(i) < i)) {
HXLINE( 392)				j = (hx::Mod(i,(int)2) * p->__get(i));
HXLINE( 393)				t = a->__get(j);
HXLINE( 394)				a[j] = a->__get(i);
HXLINE( 395)				a[i] = t;
HXLINE( 396)				results->push(a->copy());
HXLINE( 397)				p[i]++;
HXLINE( 398)				i = (int)1;
            			}
            			else {
HXLINE( 402)				p[i] = (int)0;
HXLINE( 403)				i = (i + (int)1);
            			}
            		}
HXLINE( 406)		return results;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayTools_obj,quickPerm,return )

bool ArrayTools_obj::equals(::cpp::VirtualArray a,::cpp::VirtualArray b){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_413_equals)
HXLINE( 414)		if ((a->get_length() != b->get_length())) {
HXLINE( 414)			return false;
            		}
HXLINE( 415)		{
HXLINE( 415)			int _g1 = (int)0;
HXDLIN( 415)			int _g = a->get_length();
HXDLIN( 415)			while((_g1 < _g)){
HXLINE( 415)				_g1 = (_g1 + (int)1);
HXDLIN( 415)				int i = (_g1 - (int)1);
HXLINE( 416)				if (hx::IsNotEq( a->__get(i),b->__get(i) )) {
HXLINE( 417)					return false;
            				}
            			}
            		}
HXLINE( 418)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ArrayTools_obj,equals,return )

::Array< ::Dynamic> ArrayTools_obj::split(::cpp::VirtualArray a,int n,int k){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_425_split)
HXLINE( 428)		::Array< ::Dynamic> out = ::Array_obj< ::Dynamic>::__new();
HXLINE( 429)		::cpp::VirtualArray b = null();
HXLINE( 430)		{
HXLINE( 430)			int _g1 = (int)0;
HXDLIN( 430)			int _g = n;
HXDLIN( 430)			while((_g1 < _g)){
HXLINE( 430)				_g1 = (_g1 + (int)1);
HXDLIN( 430)				int i = (_g1 - (int)1);
HXLINE( 432)				if ((hx::Mod(i,k) == (int)0)) {
HXLINE( 433)					int _hx_tmp = ::Std_obj::_hx_int(((Float)i / (Float)k));
HXDLIN( 433)					b = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 433)					out[_hx_tmp] = b;
            				}
HXLINE( 434)				b->push(a->__get(i));
            			}
            		}
HXLINE( 436)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ArrayTools_obj,split,return )

void ArrayTools_obj::_quickSort(::Array< Float > a,int first,int n, ::Dynamic cmp){
            	HX_STACKFRAME(&_hx_pos_fcdd3ad9ab6e2080_440__quickSort)
HXLINE( 441)		int last = ((first + n) - (int)1);
HXLINE( 442)		int lo = first;
HXLINE( 443)		int hi = last;
HXLINE( 444)		if ((n > (int)1)) {
HXLINE( 446)			int i0 = first;
HXLINE( 447)			int i1 = (i0 + ((int)n >> (int)(int)1));
HXLINE( 448)			int i2 = ((i0 + n) - (int)1);
HXLINE( 449)			Float t0 = a->__get(i0);
HXLINE( 450)			Float t1 = a->__get(i1);
HXLINE( 451)			Float t2 = a->__get(i2);
HXLINE( 452)			int mid;
HXLINE( 453)			int t = ( (int)(cmp(t0,t2)) );
HXLINE( 454)			bool _hx_tmp;
HXDLIN( 454)			if ((t < (int)0)) {
HXLINE( 454)				_hx_tmp = (( (int)(cmp(t0,t1)) ) < (int)0);
            			}
            			else {
HXLINE( 454)				_hx_tmp = false;
            			}
HXDLIN( 454)			if (_hx_tmp) {
HXLINE( 455)				if ((( (int)(cmp(t1,t2)) ) < (int)0)) {
HXLINE( 455)					mid = i1;
            				}
            				else {
HXLINE( 455)					mid = i2;
            				}
            			}
            			else {
HXLINE( 458)				bool _hx_tmp1;
HXDLIN( 458)				if ((( (int)(cmp(t1,t0)) ) < (int)0)) {
HXLINE( 458)					_hx_tmp1 = (( (int)(cmp(t1,t2)) ) < (int)0);
            				}
            				else {
HXLINE( 458)					_hx_tmp1 = false;
            				}
HXDLIN( 458)				if (_hx_tmp1) {
HXLINE( 459)					if ((t < (int)0)) {
HXLINE( 459)						mid = i0;
            					}
            					else {
HXLINE( 459)						mid = i2;
            					}
            				}
            				else {
HXLINE( 461)					if ((( (int)(cmp(t2,t0)) ) < (int)0)) {
HXLINE( 461)						mid = i1;
            					}
            					else {
HXLINE( 461)						mid = i0;
            					}
            				}
            			}
HXLINE( 464)			Float pivot = a->__get(mid);
HXLINE( 465)			a[mid] = a->__get(first);
HXLINE( 467)			while((lo < hi)){
HXLINE( 469)				while(true){
HXLINE( 469)					bool _hx_tmp2;
HXDLIN( 469)					if ((( (int)(cmp(pivot,a->__get(hi))) ) < (int)0)) {
HXLINE( 469)						_hx_tmp2 = (lo < hi);
            					}
            					else {
HXLINE( 469)						_hx_tmp2 = false;
            					}
HXDLIN( 469)					if (!(_hx_tmp2)) {
HXLINE( 469)						goto _hx_goto_29;
            					}
HXDLIN( 469)					hi = (hi - (int)1);
            				}
            				_hx_goto_29:;
HXLINE( 470)				if ((hi != lo)) {
HXLINE( 472)					a[lo] = a->__get(hi);
HXLINE( 473)					lo = (lo + (int)1);
            				}
HXLINE( 475)				while(true){
HXLINE( 475)					bool _hx_tmp3;
HXDLIN( 475)					if ((( (int)(cmp(pivot,a->__get(lo))) ) > (int)0)) {
HXLINE( 475)						_hx_tmp3 = (lo < hi);
            					}
            					else {
HXLINE( 475)						_hx_tmp3 = false;
            					}
HXDLIN( 475)					if (!(_hx_tmp3)) {
HXLINE( 475)						goto _hx_goto_30;
            					}
HXDLIN( 475)					lo = (lo + (int)1);
            				}
            				_hx_goto_30:;
HXLINE( 476)				if ((hi != lo)) {
HXLINE( 478)					a[hi] = a->__get(lo);
HXLINE( 479)					hi = (hi - (int)1);
            				}
            			}
HXLINE( 483)			a[lo] = pivot;
HXLINE( 484)			::de::polygonal::ds::tools::ArrayTools_obj::_quickSort(a,first,(lo - first),cmp);
HXLINE( 485)			::de::polygonal::ds::tools::ArrayTools_obj::_quickSort(a,(lo + (int)1),(last - lo),cmp);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ArrayTools_obj,_quickSort,(void))


ArrayTools_obj::ArrayTools_obj()
{
}

bool ArrayTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"trim") ) { outValue = trim_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"swap") ) { outValue = swap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"blit") ) { outValue = blit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iter") ) { outValue = iter_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alloc") ) { outValue = alloc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"split") ) { outValue = split_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shuffle") ) { outValue = shuffle_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getFront") ) { outValue = getFront_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sortRange") ) { outValue = sortRange_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quickPerm") ) { outValue = quickPerm_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_quickSort") ) { outValue = _quickSort_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"binarySearchf") ) { outValue = binarySearchf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"binarySearchi") ) { outValue = binarySearchi_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"binarySearchCmp") ) { outValue = binarySearchCmp_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ArrayTools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ArrayTools_obj_sStaticStorageInfo = 0;
#endif

static void ArrayTools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayTools_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayTools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayTools_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayTools_obj::__mClass;

static ::String ArrayTools_obj_sStaticFields[] = {
	HX_HCSTRING("alloc","\x75","\xa4","\x93","\x21"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("swap","\x93","\x2a","\x5e","\x4c"),
	HX_HCSTRING("getFront","\x33","\x28","\x65","\x66"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("blit","\x35","\x38","\x19","\x41"),
	HX_HCSTRING("iter","\x18","\xc5","\xbf","\x45"),
	HX_HCSTRING("binarySearchCmp","\xbd","\x43","\x01","\x9b"),
	HX_HCSTRING("binarySearchf","\xfd","\x39","\x5b","\xe2"),
	HX_HCSTRING("binarySearchi","\x00","\x3a","\x5b","\xe2"),
	HX_HCSTRING("shuffle","\xf9","\x45","\xdd","\xe4"),
	HX_HCSTRING("sortRange","\x7f","\x79","\x93","\xec"),
	HX_HCSTRING("quickPerm","\x7d","\x1a","\x4e","\xb5"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("_quickSort","\xac","\xd0","\xf3","\x12"),
	::String(null())
};

void ArrayTools_obj::__register()
{
	hx::Object *dummy = new ArrayTools_obj;
	ArrayTools_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.ds.tools.ArrayTools","\x5e","\x7c","\x4c","\xbd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ArrayTools_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayTools_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ArrayTools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ArrayTools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayTools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayTools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace de
} // end namespace polygonal
} // end namespace ds
} // end namespace tools
