// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_de_polygonal_Printf
#include <de/polygonal/Printf.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Cloneable
#include <de/polygonal/ds/Cloneable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Collection
#include <de/polygonal/ds/Collection.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_HashKey
#include <de/polygonal/ds/HashKey.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_HashTable
#include <de/polygonal/ds/HashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_HashTableKeyIterator
#include <de/polygonal/ds/HashTableKeyIterator.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_HashTableValIterator
#include <de/polygonal/ds/HashTableValIterator.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Hashable
#include <de/polygonal/ds/Hashable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntIntHashTable
#include <de/polygonal/ds/IntIntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Itr
#include <de/polygonal/ds/Itr.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_ListSet
#include <de/polygonal/ds/ListSet.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Map
#include <de/polygonal/ds/Map.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Set
#include <de/polygonal/ds/Set.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_GrowthRate
#include <de/polygonal/ds/tools/GrowthRate.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_NativeArrayTools
#include <de/polygonal/ds/tools/NativeArrayTools.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_66_new,"de.polygonal.ds.HashTable","new",0x0d4e7389,"de.polygonal.ds.HashTable.new","de/polygonal/ds/HashTable.hx",66,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_94_get_loadFactor,"de.polygonal.ds.HashTable","get_loadFactor",0xfae91b55,"de.polygonal.ds.HashTable.get_loadFactor","de/polygonal/ds/HashTable.hx",94,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_103_get_slotCount,"de.polygonal.ds.HashTable","get_slotCount",0xf746c231,"de.polygonal.ds.HashTable.get_slotCount","de/polygonal/ds/HashTable.hx",103,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_122_get_growthRate,"de.polygonal.ds.HashTable","get_growthRate",0x4a10ae87,"de.polygonal.ds.HashTable.get_growthRate","de/polygonal/ds/HashTable.hx",122,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_126_set_growthRate,"de.polygonal.ds.HashTable","set_growthRate",0x6a3096fb,"de.polygonal.ds.HashTable.set_growthRate","de/polygonal/ds/HashTable.hx",126,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_187_getCollisionCount,"de.polygonal.ds.HashTable","getCollisionCount",0x2d56571c,"de.polygonal.ds.HashTable.getCollisionCount","de/polygonal/ds/HashTable.hx",187,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_196_getFront,"de.polygonal.ds.HashTable","getFront",0x9f9d706a,"de.polygonal.ds.HashTable.getFront","de/polygonal/ds/HashTable.hx",196,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_209_setIfAbsent,"de.polygonal.ds.HashTable","setIfAbsent",0x03e63861,"de.polygonal.ds.HashTable.setIfAbsent","de/polygonal/ds/HashTable.hx",209,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_233_rehash,"de.polygonal.ds.HashTable","rehash",0xa556e578,"de.polygonal.ds.HashTable.rehash","de/polygonal/ds/HashTable.hx",233,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_243_remap,"de.polygonal.ds.HashTable","remap",0x220c3832,"de.polygonal.ds.HashTable.remap","de/polygonal/ds/HashTable.hx",243,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_260_toKeyArray,"de.polygonal.ds.HashTable","toKeyArray",0x0a19ac0c,"de.polygonal.ds.HashTable.toKeyArray","de/polygonal/ds/HashTable.hx",260,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_277_pack,"de.polygonal.ds.HashTable","pack",0x98a5f790,"de.polygonal.ds.HashTable.pack","de/polygonal/ds/HashTable.hx",277,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_321_iter,"de.polygonal.ds.HashTable","iter",0x9413e5cf,"de.polygonal.ds.HashTable.iter","de/polygonal/ds/HashTable.hx",321,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_352_toString,"de.polygonal.ds.HashTable","toString",0x71a718e3,"de.polygonal.ds.HashTable.toString","de/polygonal/ds/HashTable.hx",352,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_337_toString,"de.polygonal.ds.HashTable","toString",0x71a718e3,"de.polygonal.ds.HashTable.toString","de/polygonal/ds/HashTable.hx",337,0x58811c86)
static const ::String _hx_array_data_6841fb17_30[] = {
	HX_(" ]",3d,1c,00,00),
};
static const ::String _hx_array_data_6841fb17_31[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_6841fb17_32[] = {
	HX_("]",5d,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_390_grow,"de.polygonal.ds.HashTable","grow",0x92bffcca,"de.polygonal.ds.HashTable.grow","de/polygonal/ds/HashTable.hx",390,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_423_has,"de.polygonal.ds.HashTable","has",0x0d49e283,"de.polygonal.ds.HashTable.has","de/polygonal/ds/HashTable.hx",423,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_440_hasKey,"de.polygonal.ds.HashTable","hasKey",0x5f5f92dc,"de.polygonal.ds.HashTable.hasKey","de/polygonal/ds/HashTable.hx",440,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_447_get,"de.polygonal.ds.HashTable","get",0x0d4923bf,"de.polygonal.ds.HashTable.get","de/polygonal/ds/HashTable.hx",447,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_459_getAll,"de.polygonal.ds.HashTable","getAll",0x47402ea2,"de.polygonal.ds.HashTable.getAll","de/polygonal/ds/HashTable.hx",459,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_481_set,"de.polygonal.ds.HashTable","set",0x0d523ecb,"de.polygonal.ds.HashTable.set","de/polygonal/ds/HashTable.hx",481,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_502_unset,"de.polygonal.ds.HashTable","unset",0xe2377252,"de.polygonal.ds.HashTable.unset","de/polygonal/ds/HashTable.hx",502,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_517_toValSet,"de.polygonal.ds.HashTable","toValSet",0xb0142753,"de.polygonal.ds.HashTable.toValSet","de/polygonal/ds/HashTable.hx",517,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_529_toKeySet,"de.polygonal.ds.HashTable","toKeySet",0xa0594755,"de.polygonal.ds.HashTable.toKeySet","de/polygonal/ds/HashTable.hx",529,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_548_keys,"de.polygonal.ds.HashTable","keys",0x955b02ab,"de.polygonal.ds.HashTable.keys","de/polygonal/ds/HashTable.hx",548,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_559_get_size,"de.polygonal.ds.HashTable","get_size",0x0546a481,"de.polygonal.ds.HashTable.get_size","de/polygonal/ds/HashTable.hx",559,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_568_free,"de.polygonal.ds.HashTable","free",0x9216bd63,"de.polygonal.ds.HashTable.free","de/polygonal/ds/HashTable.hx",568,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_596_contains,"de.polygonal.ds.HashTable","contains",0x65b3a256,"de.polygonal.ds.HashTable.contains","de/polygonal/ds/HashTable.hx",596,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_604_remove,"de.polygonal.ds.HashTable","remove",0xa8af98bb,"de.polygonal.ds.HashTable.remove","de/polygonal/ds/HashTable.hx",604,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_635_clear,"de.polygonal.ds.HashTable","clear",0x83a3f0f6,"de.polygonal.ds.HashTable.clear","de/polygonal/ds/HashTable.hx",635,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_657_iterator,"de.polygonal.ds.HashTable","iterator",0xccd29225,"de.polygonal.ds.HashTable.iterator","de/polygonal/ds/HashTable.hx",657,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_674_isEmpty,"de.polygonal.ds.HashTable","isEmpty",0x0a55c9ec,"de.polygonal.ds.HashTable.isEmpty","de/polygonal/ds/HashTable.hx",674,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_681_toArray,"de.polygonal.ds.HashTable","toArray",0xf009a5c7,"de.polygonal.ds.HashTable.toArray","de/polygonal/ds/HashTable.hx",681,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_2816b9924f4d7bdb_700_clone,"de.polygonal.ds.HashTable","clone",0x83ab92c6,"de.polygonal.ds.HashTable.clone","de/polygonal/ds/HashTable.hx",700,0x58811c86)
namespace de{
namespace polygonal{
namespace ds{

void HashTable_obj::__construct(int slotCount,hx::Null< int >  __o_initialCapacity){
int initialCapacity = __o_initialCapacity.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_66_new)
HXLINE( 143)		this->mTmpKeyBuffer = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 142)		this->mTmpIntBuffer = ::Array_obj< int >::__new(0);
HXLINE( 141)		this->mIterator = null();
HXLINE( 139)		this->mSize = (int)0;
HXLINE( 138)		this->mFree = (int)0;
HXLINE( 113)		this->reuseIterator = false;
HXLINE(  73)		this->key = ::de::polygonal::ds::HashKey_obj::next();
HXLINE( 160)		if ((initialCapacity == (int)-1)) {
HXLINE( 160)			initialCapacity = slotCount;
            		}
HXLINE( 161)		if (((int)2 > initialCapacity)) {
HXLINE( 161)			initialCapacity = (int)2;
            		}
            		else {
HXLINE( 161)			initialCapacity = initialCapacity;
            		}
HXLINE( 163)		this->mMinCapacity = (this->capacity = initialCapacity);
HXLINE( 165)		this->mH =  ::de::polygonal::ds::IntIntHashTable_obj::__alloc( HX_CTX ,slotCount,this->capacity);
HXLINE( 166)		int len = this->capacity;
HXDLIN( 166)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXDLIN( 166)		_hx_array_set_size_exact(a,len);
HXDLIN( 166)		this->mKeys = a;
HXLINE( 167)		int len1 = this->capacity;
HXDLIN( 167)		::cpp::VirtualArray a1 = ::cpp::VirtualArray_obj::__new();
HXDLIN( 167)		_hx_array_set_size_exact(a1,len1);
HXDLIN( 167)		this->mVals = a1;
HXLINE( 172)		int len2 = this->capacity;
HXDLIN( 172)		::Array< int > a2 = ::Array_obj< int >::__new();
HXDLIN( 172)		_hx_array_set_size_exact(a2,len2);
HXDLIN( 172)		this->mNext = a2;
HXLINE( 175)		::Array< int > t = this->mNext;
HXLINE( 176)		{
HXLINE( 176)			int _g1 = (int)0;
HXDLIN( 176)			int _g = (this->capacity - (int)1);
HXDLIN( 176)			while((_g1 < _g)){
HXLINE( 176)				_g1 = (_g1 + (int)1);
HXDLIN( 176)				int i = (_g1 - (int)1);
HXDLIN( 176)				t[i] = (i + (int)1);
            			}
            		}
HXLINE( 177)		t[(this->capacity - (int)1)] = (int)-1;
            	}

Dynamic HashTable_obj::__CreateEmpty() { return new HashTable_obj; }

void *HashTable_obj::_hx_vtable = 0;

Dynamic HashTable_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HashTable_obj > _hx_result = new HashTable_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool HashTable_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04bf03cd;
}

static ::de::polygonal::ds::Map_obj _hx_de_polygonal_ds_HashTable__hx_de_polygonal_ds_Map= {
	( int (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::get_size,
	( void (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::free,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::HashTable_obj::contains,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::HashTable_obj::remove,
	( void (hx::Object::*)(hx::Null< bool > ))&::de::polygonal::ds::HashTable_obj::clear,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::iterator,
	( bool (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::isEmpty,
	( ::cpp::VirtualArray (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::toArray,
	( ::Dynamic (hx::Object::*)(hx::Null< bool > , ::Dynamic))&::de::polygonal::ds::HashTable_obj::clone,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::HashTable_obj::has,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::HashTable_obj::hasKey,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::HashTable_obj::get,
	( bool (hx::Object::*)( ::Dynamic, ::Dynamic))&::de::polygonal::ds::HashTable_obj::set,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::HashTable_obj::unset,
	( bool (hx::Object::*)( ::Dynamic, ::Dynamic))&::de::polygonal::ds::HashTable_obj::remap,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::toValSet,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::toKeySet,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::keys,
};

static ::de::polygonal::ds::Collection_obj _hx_de_polygonal_ds_HashTable__hx_de_polygonal_ds_Collection= {
	( int (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::get_size,
	( void (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::free,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::HashTable_obj::contains,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::HashTable_obj::remove,
	( void (hx::Object::*)(hx::Null< bool > ))&::de::polygonal::ds::HashTable_obj::clear,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::iterator,
	( bool (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::isEmpty,
	( ::cpp::VirtualArray (hx::Object::*)())&::de::polygonal::ds::HashTable_obj::toArray,
	( ::Dynamic (hx::Object::*)(hx::Null< bool > , ::Dynamic))&::de::polygonal::ds::HashTable_obj::clone,
};

static ::de::polygonal::ds::Hashable_obj _hx_de_polygonal_ds_HashTable__hx_de_polygonal_ds_Hashable= {
};

void *HashTable_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x31296149: return &_hx_de_polygonal_ds_HashTable__hx_de_polygonal_ds_Map;
		case (int)0xfeda5751: return &_hx_de_polygonal_ds_HashTable__hx_de_polygonal_ds_Collection;
		case (int)0xff6ef29b: return &_hx_de_polygonal_ds_HashTable__hx_de_polygonal_ds_Hashable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float HashTable_obj::get_loadFactor(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_94_get_loadFactor)
HXDLIN(  94)		return this->mH->get_loadFactor();
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,get_loadFactor,return )

int HashTable_obj::get_slotCount(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_103_get_slotCount)
HXDLIN( 103)		return this->mH->slotCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,get_slotCount,return )

int HashTable_obj::get_growthRate(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_122_get_growthRate)
HXDLIN( 122)		return this->mH->growthRate;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,get_growthRate,return )

int HashTable_obj::set_growthRate(int value){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_126_set_growthRate)
HXDLIN( 126)		return (this->mH->growthRate = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,set_growthRate,return )

int HashTable_obj::getCollisionCount(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_187_getCollisionCount)
HXDLIN( 187)		return this->mH->getCollisionCount();
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,getCollisionCount,return )

 ::Dynamic HashTable_obj::getFront( ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_196_getFront)
HXLINE( 197)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 197)		int key1 = ( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 197)		int b = ((int)(key1 * (int)73856093) & (int)_this->mMask);
HXDLIN( 197)		int i = _this->mHash->__get(b);
HXDLIN( 197)		int i1;
HXDLIN( 197)		if ((i == (int)-1)) {
HXLINE( 197)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 197)			::Array< int > d = _this->mData;
HXDLIN( 197)			if ((d->__get(i) == key1)) {
HXLINE( 197)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 197)				int v = (int)-2147483647;
HXDLIN( 197)				int first = i;
HXDLIN( 197)				int i0 = first;
HXDLIN( 197)				i = d->__get((i + (int)2));
HXDLIN( 197)				while((i != (int)-1)){
HXLINE( 197)					if ((d->__get(i) == key1)) {
HXLINE( 197)						v = d->__get((i + (int)1));
HXDLIN( 197)						d[(i0 + (int)2)] = d->__get((i + (int)2));
HXDLIN( 197)						d[(i + (int)2)] = first;
HXDLIN( 197)						_this->mHash[b] = i;
HXDLIN( 197)						goto _hx_goto_7;
            					}
HXDLIN( 197)					i0 = i;
HXDLIN( 197)					i = d->__get((i0 + (int)2));
            				}
            				_hx_goto_7:;
HXDLIN( 197)				i1 = v;
            			}
            		}
HXLINE( 198)		if ((i1 == (int)-2147483647)) {
HXLINE( 199)			return null();
            		}
            		else {
HXLINE( 201)			return this->mVals->__get(i1);
            		}
HXLINE( 198)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,getFront,return )

bool HashTable_obj::setIfAbsent( ::Dynamic key, ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_209_setIfAbsent)
HXLINE( 212)		if ((this->mSize == this->capacity)) {
HXLINE( 212)			this->grow();
            		}
HXLINE( 214)		int i = this->mFree;
HXLINE( 215)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 215)		int key1 = ( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 215)		int b = ((int)(key1 * (int)73856093) & (int)_this->mMask);
HXDLIN( 215)		::Array< int > d = _this->mData;
HXDLIN( 215)		int j = _this->mHash->__get(b);
HXDLIN( 215)		bool _hx_tmp;
HXDLIN( 215)		if ((j == (int)-1)) {
HXLINE( 215)			if ((_this->mSize == _this->capacity)) {
HXLINE( 215)				_this->grow();
HXDLIN( 215)				d = _this->mData;
            			}
HXDLIN( 215)			int i1 = (_this->mFree * (int)3);
HXDLIN( 215)			_this->mFree = _this->mNext->__get(_this->mFree);
HXDLIN( 215)			_this->mHash[b] = i1;
HXDLIN( 215)			d[i1] = key1;
HXDLIN( 215)			d[(i1 + (int)1)] = i;
HXDLIN( 215)			_this->mSize++;
HXDLIN( 215)			_hx_tmp = true;
            		}
            		else {
HXLINE( 215)			if ((d->__get(j) == key1)) {
HXLINE( 215)				_hx_tmp = false;
            			}
            			else {
HXLINE( 215)				int t = d->__get((j + (int)2));
HXDLIN( 215)				while((t != (int)-1)){
HXLINE( 215)					if ((d->__get(t) == key1)) {
HXLINE( 215)						j = (int)-1;
HXDLIN( 215)						goto _hx_goto_9;
            					}
HXDLIN( 215)					j = t;
HXDLIN( 215)					t = d->__get((j + (int)2));
            				}
            				_hx_goto_9:;
HXDLIN( 215)				if ((j == (int)-1)) {
HXLINE( 215)					_hx_tmp = false;
            				}
            				else {
HXLINE( 215)					if ((_this->mSize == _this->capacity)) {
HXLINE( 215)						_this->grow();
HXDLIN( 215)						d = _this->mData;
            					}
HXDLIN( 215)					int i2 = (_this->mFree * (int)3);
HXDLIN( 215)					_this->mFree = _this->mNext->__get(_this->mFree);
HXDLIN( 215)					d[(j + (int)2)] = i2;
HXDLIN( 215)					d[i2] = key1;
HXDLIN( 215)					d[(i2 + (int)1)] = i;
HXDLIN( 215)					_this->mSize++;
HXDLIN( 215)					_hx_tmp = true;
            				}
            			}
            		}
HXDLIN( 215)		if (_hx_tmp) {
HXLINE( 217)			this->mVals->set(i,val);
HXLINE( 218)			this->mKeys->set(i,key);
HXLINE( 219)			this->mFree = this->mNext->__get(i);
HXLINE( 220)			this->mSize++;
HXLINE( 221)			return true;
            		}
            		else {
HXLINE( 224)			return false;
            		}
HXLINE( 215)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(HashTable_obj,setIfAbsent,return )

 ::de::polygonal::ds::HashTable HashTable_obj::rehash(int slotCount){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_233_rehash)
HXLINE( 234)		this->mH->rehash(slotCount);
HXLINE( 235)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,rehash,return )

bool HashTable_obj::remap( ::Dynamic key, ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_243_remap)
HXLINE( 246)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 246)		int key1 = ( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 246)		int i = _this->mHash->__get(((int)(key1 * (int)73856093) & (int)_this->mMask));
HXDLIN( 246)		int i1;
HXDLIN( 246)		if ((i == (int)-1)) {
HXLINE( 246)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 246)			::Array< int > d = _this->mData;
HXDLIN( 246)			if ((d->__get(i) == key1)) {
HXLINE( 246)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 246)				int v = (int)-2147483647;
HXDLIN( 246)				i = d->__get((i + (int)2));
HXDLIN( 246)				while((i != (int)-1)){
HXLINE( 246)					if ((d->__get(i) == key1)) {
HXLINE( 246)						v = d->__get((i + (int)1));
HXDLIN( 246)						goto _hx_goto_12;
            					}
HXDLIN( 246)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_12:;
HXDLIN( 246)				i1 = v;
            			}
            		}
HXLINE( 247)		if ((i1 != (int)-2147483647)) {
HXLINE( 249)			this->mVals->set(i1,val);
HXLINE( 250)			return true;
            		}
            		else {
HXLINE( 253)			return false;
            		}
HXLINE( 247)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(HashTable_obj,remap,return )

::cpp::VirtualArray HashTable_obj::toKeyArray(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_260_toKeyArray)
HXLINE( 261)		if ((this->mSize == (int)0)) {
HXLINE( 261)			return ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 263)		int len = this->mSize;
HXDLIN( 263)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXDLIN( 263)		_hx_array_set_size_exact(a,len);
HXDLIN( 263)		::cpp::VirtualArray out = a;
HXLINE( 264)		int j = (int)0;
HXDLIN( 264)		::cpp::VirtualArray keys = this->mKeys;
HXDLIN( 264)		 ::Dynamic k;
HXLINE( 265)		{
HXLINE( 265)			int _g1 = (int)0;
HXDLIN( 265)			int _g = this->capacity;
HXDLIN( 265)			while((_g1 < _g)){
HXLINE( 265)				_g1 = (_g1 + (int)1);
HXDLIN( 265)				int i = (_g1 - (int)1);
HXLINE( 267)				k = keys->__get(i);
HXLINE( 268)				if (hx::IsNotNull( k )) {
HXLINE( 268)					j = (j + (int)1);
HXDLIN( 268)					out->set((j - (int)1),k);
            				}
            			}
            		}
HXLINE( 270)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,toKeyArray,return )

 ::de::polygonal::ds::HashTable HashTable_obj::pack(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_277_pack)
HXLINE( 278)		this->mH->pack();
HXLINE( 280)		if ((this->mH->capacity == this->capacity)) {
HXLINE( 280)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 282)		this->capacity = this->mH->capacity;
HXLINE( 287)		int len = this->capacity;
HXDLIN( 287)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 287)		_hx_array_set_size_exact(a,len);
HXDLIN( 287)		this->mNext = a;
HXLINE( 290)		::Array< int > t = this->mNext;
HXLINE( 291)		{
HXLINE( 291)			int _g1 = (int)0;
HXDLIN( 291)			int _g = (this->capacity - (int)1);
HXDLIN( 291)			while((_g1 < _g)){
HXLINE( 291)				_g1 = (_g1 + (int)1);
HXDLIN( 291)				int i = (_g1 - (int)1);
HXDLIN( 291)				t[i] = (i + (int)1);
            			}
            		}
HXLINE( 292)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE( 293)		this->mFree = (int)0;
HXLINE( 295)		::cpp::VirtualArray srcKeys = this->mKeys;
HXLINE( 296)		int len1 = this->capacity;
HXDLIN( 296)		::cpp::VirtualArray a1 = ::cpp::VirtualArray_obj::__new();
HXDLIN( 296)		_hx_array_set_size_exact(a1,len1);
HXDLIN( 296)		::cpp::VirtualArray dstKeys = a1;
HXLINE( 298)		::cpp::VirtualArray srcVals = this->mVals;
HXLINE( 299)		int len2 = this->capacity;
HXDLIN( 299)		::cpp::VirtualArray a2 = ::cpp::VirtualArray_obj::__new();
HXDLIN( 299)		_hx_array_set_size_exact(a2,len2);
HXDLIN( 299)		::cpp::VirtualArray dstVals = a2;
HXLINE( 301)		int j = this->mFree;
HXLINE( 302)		{
HXLINE( 302)			::Dynamic i1 = this->mH->iterator();
HXDLIN( 302)			while(::de::polygonal::ds::Itr_obj::hasNext(i1)){
HXLINE( 302)				int i2 = ( (int)(::de::polygonal::ds::Itr_obj::next(i1)) );
HXLINE( 304)				dstKeys->set(j,srcKeys->__get(i2));
HXLINE( 305)				dstVals->set(j,srcVals->__get(i2));
HXLINE( 306)				j = this->mNext->__get(j);
            			}
            		}
HXLINE( 308)		this->mFree = j;
HXLINE( 310)		this->mKeys = dstKeys;
HXLINE( 311)		this->mVals = dstVals;
HXLINE( 312)		{
HXLINE( 312)			int _g11 = (int)0;
HXDLIN( 312)			int _g2 = this->mSize;
HXDLIN( 312)			while((_g11 < _g2)){
HXLINE( 312)				_g11 = (_g11 + (int)1);
HXDLIN( 312)				int i3 = (_g11 - (int)1);
HXDLIN( 312)				{
HXLINE( 312)					 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 312)					int key = ( (int)(dstKeys->__get(i3)->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 312)					int i4 = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN( 312)					if ((i4 != (int)-1)) {
HXLINE( 312)						::Array< int > d = _this->mData;
HXDLIN( 312)						if ((d->__get(i4) == key)) {
HXLINE( 312)							d[(i4 + (int)1)] = i3;
            						}
            						else {
HXLINE( 312)							i4 = d->__get((i4 + (int)2));
HXDLIN( 312)							while((i4 != (int)-1)){
HXLINE( 312)								if ((d->__get(i4) == key)) {
HXLINE( 312)									d[(i4 + (int)1)] = i3;
HXDLIN( 312)									goto _hx_goto_19;
            								}
HXDLIN( 312)								i4 = d->__get((i4 + (int)2));
            							}
            							_hx_goto_19:;
            						}
            					}
            				}
            			}
            		}
HXLINE( 313)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,pack,return )

 ::de::polygonal::ds::HashTable HashTable_obj::iter( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_321_iter)
HXLINE( 323)		::Array< int > d = this->mH->mData;
HXDLIN( 323)		::cpp::VirtualArray vals = this->mVals;
HXDLIN( 323)		::cpp::VirtualArray keys = this->mKeys;
HXDLIN( 323)		int v;
HXLINE( 324)		{
HXLINE( 324)			int _g1 = (int)0;
HXDLIN( 324)			int _g = this->mH->capacity;
HXDLIN( 324)			while((_g1 < _g)){
HXLINE( 324)				_g1 = (_g1 + (int)1);
HXDLIN( 324)				int i = (_g1 - (int)1);
HXLINE( 326)				v = d->__get(((i * (int)3) + (int)1));
HXLINE( 327)				if ((v != (int)-2147483647)) {
HXLINE( 327)					f(keys->__get(v),vals->__get(v));
            				}
            			}
            		}
HXLINE( 329)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,iter,return )

::String HashTable_obj::toString(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::Dynamic a, ::Dynamic b2){
            			HX_GC_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_352_toString)
HXLINE( 352)			return (( (int)(a->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) ) - ( (int)(b2->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_337_toString)
HXLINE( 336)		 ::de::polygonal::ds::HashTable _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 338)		 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 339)		{
HXLINE( 339)			::String x = ((((HX_("[ HashTable size=",b7,9b,80,df) + this->mSize) + HX_(" capacity=",a3,0d,35,89)) + this->capacity) + HX_(" load=%.2f",54,33,62,c9));
HXDLIN( 339)			::String x1 = ::de::polygonal::Printf_obj::format(x,::cpp::VirtualArray_obj::__new(1)->init(0,this->get_loadFactor()));
HXDLIN( 339)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 339)				b->flush();
            			}
HXDLIN( 339)			if (hx::IsNull( b->b )) {
HXLINE( 339)				b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 339)				::Array< ::String > b1 = b->b;
HXDLIN( 339)				b1->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 340)		if ((this->mSize == (int)0)) {
HXLINE( 342)			{
HXLINE( 342)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 342)					b->flush();
            				}
HXDLIN( 342)				if (hx::IsNull( b->b )) {
HXLINE( 342)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6841fb17_30,1);
            				}
            				else {
HXLINE( 342)					b->b->push(HX_(" ]",3d,1c,00,00));
            				}
            			}
HXLINE( 343)			return b->toString();
            		}
HXLINE( 345)		{
HXLINE( 345)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 345)				b->flush();
            			}
HXDLIN( 345)			if (hx::IsNull( b->b )) {
HXLINE( 345)				b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6841fb17_31,1);
            			}
            			else {
HXLINE( 345)				b->b->push(HX_("\n",0a,00,00,00));
            			}
            		}
HXLINE( 346)		int l = (int)0;
HXLINE( 347)		{
HXLINE( 347)			::Dynamic key = this->keys();
HXDLIN( 347)			while(::de::polygonal::ds::Itr_obj::hasNext(key)){
HXLINE( 347)				 ::Dynamic key1 = ::de::polygonal::ds::Itr_obj::next(key);
HXDLIN( 347)				int y = ::Std_obj::string(key1).length;
HXDLIN( 347)				if ((l > y)) {
HXLINE( 347)					l = l;
            				}
            				else {
HXLINE( 347)					l = y;
            				}
            			}
            		}
HXLINE( 348)		::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new();
HXLINE( 349)		::String fmt = ((HX_("  %- ",b8,9e,15,82) + l) + HX_("s -> %s\n",7a,9b,82,aa));
HXLINE( 351)		::cpp::VirtualArray _g = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 351)		{
HXLINE( 351)			::Dynamic key2 = this->keys();
HXDLIN( 351)			while(::de::polygonal::ds::Itr_obj::hasNext(key2)){
HXLINE( 351)				 ::Dynamic key3 = ::de::polygonal::ds::Itr_obj::next(key2);
HXDLIN( 351)				_g->push(key3);
            			}
            		}
HXDLIN( 351)		::cpp::VirtualArray keys = _g;
HXLINE( 352)		keys->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 353)		int i = (int)1;
HXLINE( 354)		int k = keys->get_length();
HXLINE( 355)		int j = (int)0;
HXLINE( 356)		int c = (int)1;
HXLINE( 370)		while((i < k)){
HXLINE( 372)			if (hx::IsEq( keys->__get(j),keys->__get(i) )) {
HXLINE( 373)				c = (c + (int)1);
            			}
            			else {
HXLINE( 376)				{
HXLINE( 376)					 ::Dynamic key4 = keys->__get(j);
HXDLIN( 376)					args->set((int)0,key4);
HXDLIN( 376)					if ((c > (int)1)) {
HXLINE( 376)						::cpp::VirtualArray tmp = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 376)						_gthis->getAll(key4,tmp);
HXDLIN( 376)						args->set((int)1,tmp->join(HX_(",",2c,00,00,00)));
            					}
            					else {
HXLINE( 376)						 ::de::polygonal::ds::IntIntHashTable _this = _gthis->mH;
HXDLIN( 376)						int key5 = ( (int)(key4->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 376)						int i1 = _this->mHash->__get(((int)(key5 * (int)73856093) & (int)_this->mMask));
HXDLIN( 376)						int i2;
HXDLIN( 376)						if ((i1 == (int)-1)) {
HXLINE( 376)							i2 = (int)-2147483647;
            						}
            						else {
HXLINE( 376)							::Array< int > d = _this->mData;
HXDLIN( 376)							if ((d->__get(i1) == key5)) {
HXLINE( 376)								i2 = d->__get((i1 + (int)1));
            							}
            							else {
HXLINE( 376)								int v = (int)-2147483647;
HXDLIN( 376)								i1 = d->__get((i1 + (int)2));
HXDLIN( 376)								while((i1 != (int)-1)){
HXLINE( 376)									if ((d->__get(i1) == key5)) {
HXLINE( 376)										v = d->__get((i1 + (int)1));
HXDLIN( 376)										goto _hx_goto_26;
            									}
HXDLIN( 376)									i1 = d->__get((i1 + (int)2));
            								}
            								_hx_goto_26:;
HXDLIN( 376)								i2 = v;
            							}
            						}
HXDLIN( 376)						 ::Dynamic _hx_tmp;
HXDLIN( 376)						if ((i2 == (int)-2147483647)) {
HXLINE( 376)							_hx_tmp = null();
            						}
            						else {
HXLINE( 376)							_hx_tmp = _gthis->mVals->__get(i2);
            						}
HXDLIN( 376)						args->set((int)1,::Std_obj::string(_hx_tmp));
            					}
HXDLIN( 376)					{
HXLINE( 376)						::String x2 = ::de::polygonal::Printf_obj::format(fmt,args);
HXDLIN( 376)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 376)							b->flush();
            						}
HXDLIN( 376)						if (hx::IsNull( b->b )) {
HXLINE( 376)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            						}
            						else {
HXLINE( 376)							::Array< ::String > b3 = b->b;
HXDLIN( 376)							b3->push(::Std_obj::string(x2));
            						}
            					}
            				}
HXLINE( 377)				j = i;
HXLINE( 378)				c = (int)1;
            			}
HXLINE( 380)			i = (i + (int)1);
            		}
HXLINE( 382)		{
HXLINE( 382)			 ::Dynamic key6 = keys->__get(j);
HXDLIN( 382)			args->set((int)0,key6);
HXDLIN( 382)			if ((c > (int)1)) {
HXLINE( 382)				::cpp::VirtualArray tmp1 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 382)				_gthis->getAll(key6,tmp1);
HXDLIN( 382)				args->set((int)1,tmp1->join(HX_(",",2c,00,00,00)));
            			}
            			else {
HXLINE( 382)				 ::de::polygonal::ds::IntIntHashTable _this1 = _gthis->mH;
HXDLIN( 382)				int key7 = ( (int)(key6->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 382)				int i3 = _this1->mHash->__get(((int)(key7 * (int)73856093) & (int)_this1->mMask));
HXDLIN( 382)				int i4;
HXDLIN( 382)				if ((i3 == (int)-1)) {
HXLINE( 382)					i4 = (int)-2147483647;
            				}
            				else {
HXLINE( 382)					::Array< int > d1 = _this1->mData;
HXDLIN( 382)					if ((d1->__get(i3) == key7)) {
HXLINE( 382)						i4 = d1->__get((i3 + (int)1));
            					}
            					else {
HXLINE( 382)						int v1 = (int)-2147483647;
HXDLIN( 382)						i3 = d1->__get((i3 + (int)2));
HXDLIN( 382)						while((i3 != (int)-1)){
HXLINE( 382)							if ((d1->__get(i3) == key7)) {
HXLINE( 382)								v1 = d1->__get((i3 + (int)1));
HXDLIN( 382)								goto _hx_goto_27;
            							}
HXDLIN( 382)							i3 = d1->__get((i3 + (int)2));
            						}
            						_hx_goto_27:;
HXDLIN( 382)						i4 = v1;
            					}
            				}
HXDLIN( 382)				 ::Dynamic _hx_tmp1;
HXDLIN( 382)				if ((i4 == (int)-2147483647)) {
HXLINE( 382)					_hx_tmp1 = null();
            				}
            				else {
HXLINE( 382)					_hx_tmp1 = _gthis->mVals->__get(i4);
            				}
HXDLIN( 382)				args->set((int)1,::Std_obj::string(_hx_tmp1));
            			}
HXDLIN( 382)			{
HXLINE( 382)				::String x3 = ::de::polygonal::Printf_obj::format(fmt,args);
HXDLIN( 382)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 382)					b->flush();
            				}
HXDLIN( 382)				if (hx::IsNull( b->b )) {
HXLINE( 382)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            				}
            				else {
HXLINE( 382)					::Array< ::String > b4 = b->b;
HXDLIN( 382)					b4->push(::Std_obj::string(x3));
            				}
            			}
            		}
HXLINE( 384)		{
HXLINE( 384)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 384)				b->flush();
            			}
HXDLIN( 384)			if (hx::IsNull( b->b )) {
HXLINE( 384)				b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6841fb17_32,1);
            			}
            			else {
HXLINE( 384)				b->b->push(HX_("]",5d,00,00,00));
            			}
            		}
HXLINE( 385)		return b->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,toString,return )

void HashTable_obj::grow(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_390_grow)
HXLINE( 391)		int oldCapacity = this->capacity;
HXLINE( 392)		int _hx_tmp = this->get_growthRate();
HXDLIN( 392)		this->capacity = ::de::polygonal::ds::tools::GrowthRate_obj::compute(_hx_tmp,this->capacity);
HXLINE( 394)		 ::Dynamic t;
HXLINE( 398)		int len = this->capacity;
HXDLIN( 398)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 398)		_hx_array_set_size_exact(a,len);
HXDLIN( 398)		::Array< int > t1 = a;
HXLINE( 399)		if ((oldCapacity > (int)0)) {
HXLINE( 399)			t1->blit((int)0,this->mNext,(int)0,oldCapacity);
            		}
HXLINE( 400)		this->mNext = t1;
HXLINE( 403)		t1 = this->mNext;
HXLINE( 404)		{
HXLINE( 404)			int _g1 = (oldCapacity - (int)1);
HXDLIN( 404)			int _g = (this->capacity - (int)1);
HXDLIN( 404)			while((_g1 < _g)){
HXLINE( 404)				_g1 = (_g1 + (int)1);
HXDLIN( 404)				int i = (_g1 - (int)1);
HXDLIN( 404)				t1[i] = (i + (int)1);
            			}
            		}
HXLINE( 405)		t1[(this->capacity - (int)1)] = (int)-1;
HXLINE( 406)		this->mFree = oldCapacity;
HXLINE( 408)		int len1 = this->capacity;
HXDLIN( 408)		::cpp::VirtualArray a1 = ::cpp::VirtualArray_obj::__new();
HXDLIN( 408)		_hx_array_set_size_exact(a1,len1);
HXDLIN( 408)		::cpp::VirtualArray t2 = a1;
HXLINE( 409)		if ((oldCapacity > (int)0)) {
HXLINE( 409)			t2->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)((int)0,this->mVals,(int)0,oldCapacity);
            		}
HXLINE( 410)		this->mVals = t2;
HXLINE( 412)		int len2 = this->capacity;
HXDLIN( 412)		::cpp::VirtualArray a2 = ::cpp::VirtualArray_obj::__new();
HXDLIN( 412)		_hx_array_set_size_exact(a2,len2);
HXDLIN( 412)		::cpp::VirtualArray t3 = a2;
HXLINE( 413)		if ((oldCapacity > (int)0)) {
HXLINE( 413)			t3->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)((int)0,this->mKeys,(int)0,oldCapacity);
            		}
HXLINE( 414)		this->mKeys = t3;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,grow,(void))

bool HashTable_obj::has( ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_423_has)
HXLINE( 424)		::cpp::VirtualArray k = this->mKeys;
HXDLIN( 424)		::cpp::VirtualArray v = this->mVals;
HXLINE( 425)		{
HXLINE( 425)			int _g1 = (int)0;
HXDLIN( 425)			int _g = this->capacity;
HXDLIN( 425)			while((_g1 < _g)){
HXLINE( 425)				_g1 = (_g1 + (int)1);
HXDLIN( 425)				int i = (_g1 - (int)1);
HXLINE( 427)				if (hx::IsNull( k->__get(i) )) {
HXLINE( 427)					continue;
            				}
HXLINE( 428)				if (hx::IsEq( v->__get(i),val )) {
HXLINE( 428)					return true;
            				}
            			}
            		}
HXLINE( 430)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,has,return )

bool HashTable_obj::hasKey( ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_440_hasKey)
HXDLIN( 440)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 440)		int key1 = ( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 440)		int i = _this->mHash->__get(((int)(key1 * (int)73856093) & (int)_this->mMask));
HXDLIN( 440)		if ((i == (int)-1)) {
HXDLIN( 440)			return false;
            		}
            		else {
HXDLIN( 440)			::Array< int > d = _this->mData;
HXDLIN( 440)			if ((d->__get(i) == key1)) {
HXDLIN( 440)				return true;
            			}
            			else {
HXDLIN( 440)				bool exists = false;
HXDLIN( 440)				i = d->__get((i + (int)2));
HXDLIN( 440)				while((i != (int)-1)){
HXDLIN( 440)					if ((d->__get(i) == key1)) {
HXDLIN( 440)						exists = true;
HXDLIN( 440)						goto _hx_goto_37;
            					}
HXDLIN( 440)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_37:;
HXDLIN( 440)				return exists;
            			}
            		}
HXDLIN( 440)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,hasKey,return )

 ::Dynamic HashTable_obj::get( ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_447_get)
HXLINE( 450)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 450)		int key1 = ( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 450)		int i = _this->mHash->__get(((int)(key1 * (int)73856093) & (int)_this->mMask));
HXDLIN( 450)		int i1;
HXDLIN( 450)		if ((i == (int)-1)) {
HXLINE( 450)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 450)			::Array< int > d = _this->mData;
HXDLIN( 450)			if ((d->__get(i) == key1)) {
HXLINE( 450)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 450)				int v = (int)-2147483647;
HXDLIN( 450)				i = d->__get((i + (int)2));
HXDLIN( 450)				while((i != (int)-1)){
HXLINE( 450)					if ((d->__get(i) == key1)) {
HXLINE( 450)						v = d->__get((i + (int)1));
HXDLIN( 450)						goto _hx_goto_39;
            					}
HXDLIN( 450)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_39:;
HXDLIN( 450)				i1 = v;
            			}
            		}
HXLINE( 451)		if ((i1 == (int)-2147483647)) {
HXLINE( 451)			return null();
            		}
            		else {
HXLINE( 451)			return this->mVals->__get(i1);
            		}
HXDLIN( 451)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,get,return )

int HashTable_obj::getAll( ::Dynamic key,::cpp::VirtualArray out){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_459_getAll)
HXLINE( 460)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 460)		int key1 = ( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 460)		int i = _this->mHash->__get(((int)(key1 * (int)73856093) & (int)_this->mMask));
HXDLIN( 460)		int i1;
HXDLIN( 460)		if ((i == (int)-1)) {
HXLINE( 460)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 460)			::Array< int > d = _this->mData;
HXDLIN( 460)			if ((d->__get(i) == key1)) {
HXLINE( 460)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 460)				int v = (int)-2147483647;
HXDLIN( 460)				i = d->__get((i + (int)2));
HXDLIN( 460)				while((i != (int)-1)){
HXLINE( 460)					if ((d->__get(i) == key1)) {
HXLINE( 460)						v = d->__get((i + (int)1));
HXDLIN( 460)						goto _hx_goto_41;
            					}
HXDLIN( 460)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_41:;
HXDLIN( 460)				i1 = v;
            			}
            		}
HXLINE( 461)		if ((i1 == (int)-2147483647)) {
HXLINE( 462)			return (int)0;
            		}
            		else {
HXLINE( 465)			::Array< int > b = this->mTmpIntBuffer;
HXLINE( 466)			int c = this->mH->getAll(( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) ),b);
HXLINE( 467)			::cpp::VirtualArray v1 = this->mVals;
HXLINE( 468)			{
HXLINE( 468)				int _g1 = (int)0;
HXDLIN( 468)				int _g = c;
HXDLIN( 468)				while((_g1 < _g)){
HXLINE( 468)					_g1 = (_g1 + (int)1);
HXDLIN( 468)					int i2 = (_g1 - (int)1);
HXDLIN( 468)					out->set(i2,v1->__get(b->__get(i2)));
            				}
            			}
HXLINE( 469)			return c;
            		}
HXLINE( 461)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(HashTable_obj,getAll,return )

bool HashTable_obj::set( ::Dynamic key, ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_481_set)
HXLINE( 484)		if ((this->mSize == this->capacity)) {
HXLINE( 484)			this->grow();
            		}
HXLINE( 486)		int i = this->mFree;
HXLINE( 487)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 487)		int key1 = ( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 487)		if ((_this->mSize == _this->capacity)) {
HXLINE( 487)			_this->grow();
            		}
HXDLIN( 487)		::Array< int > d = _this->mData;
HXDLIN( 487)		::Array< int > h = _this->mHash;
HXDLIN( 487)		int i1 = (_this->mFree * (int)3);
HXDLIN( 487)		_this->mFree = _this->mNext->__get(_this->mFree);
HXDLIN( 487)		d[i1] = key1;
HXDLIN( 487)		d[(i1 + (int)1)] = i;
HXDLIN( 487)		int b = ((int)(key1 * (int)73856093) & (int)_this->mMask);
HXDLIN( 487)		int j = h->__get(b);
HXDLIN( 487)		bool first;
HXDLIN( 487)		if ((j == (int)-1)) {
HXLINE( 487)			h[b] = i1;
HXDLIN( 487)			_this->mSize++;
HXDLIN( 487)			first = true;
            		}
            		else {
HXLINE( 487)			bool first1 = (d->__get(j) != key1);
HXDLIN( 487)			int t = d->__get((j + (int)2));
HXDLIN( 487)			while((t != (int)-1)){
HXLINE( 487)				if ((d->__get(t) == key1)) {
HXLINE( 487)					first1 = false;
            				}
HXDLIN( 487)				j = t;
HXDLIN( 487)				t = d->__get((t + (int)2));
            			}
HXDLIN( 487)			d[(j + (int)2)] = i1;
HXDLIN( 487)			_this->mSize++;
HXDLIN( 487)			first = first1;
            		}
HXLINE( 488)		this->mVals->set(i,val);
HXLINE( 489)		this->mKeys->set(i,key);
HXLINE( 490)		this->mFree = this->mNext->__get(i);
HXLINE( 491)		this->mSize++;
HXLINE( 492)		return first;
            	}


HX_DEFINE_DYNAMIC_FUNC2(HashTable_obj,set,return )

bool HashTable_obj::unset( ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_502_unset)
HXLINE( 503)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 503)		int key1 = ( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 503)		int i = _this->mHash->__get(((int)(key1 * (int)73856093) & (int)_this->mMask));
HXDLIN( 503)		int i1;
HXDLIN( 503)		if ((i == (int)-1)) {
HXLINE( 503)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 503)			::Array< int > d = _this->mData;
HXDLIN( 503)			if ((d->__get(i) == key1)) {
HXLINE( 503)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 503)				int v = (int)-2147483647;
HXDLIN( 503)				i = d->__get((i + (int)2));
HXDLIN( 503)				while((i != (int)-1)){
HXLINE( 503)					if ((d->__get(i) == key1)) {
HXLINE( 503)						v = d->__get((i + (int)1));
HXDLIN( 503)						goto _hx_goto_46;
            					}
HXDLIN( 503)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_46:;
HXDLIN( 503)				i1 = v;
            			}
            		}
HXLINE( 504)		if ((i1 == (int)-2147483647)) {
HXLINE( 504)			return false;
            		}
HXLINE( 505)		this->mKeys->set(i1,null());
HXLINE( 506)		this->mNext[i1] = this->mFree;
HXLINE( 507)		this->mFree = i1;
HXLINE( 508)		{
HXLINE( 508)			 ::de::polygonal::ds::IntIntHashTable _this1 = this->mH;
HXDLIN( 508)			int key2 = ( (int)(key->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN( 508)			int b = ((int)(key2 * (int)73856093) & (int)_this1->mMask);
HXDLIN( 508)			::Array< int > h = _this1->mHash;
HXDLIN( 508)			int i2 = h->__get(b);
HXDLIN( 508)			if ((i2 != (int)-1)) {
HXLINE( 508)				::Array< int > d1 = _this1->mData;
HXDLIN( 508)				if ((key2 == d1->__get(i2))) {
HXLINE( 508)					if ((d1->__get((i2 + (int)2)) == (int)-1)) {
HXLINE( 508)						h[b] = (int)-1;
            					}
            					else {
HXLINE( 508)						h[b] = d1->__get((i2 + (int)2));
            					}
HXDLIN( 508)					int j = ::Std_obj::_hx_int(((Float)i2 / (Float)(int)3));
HXDLIN( 508)					_this1->mNext[j] = _this1->mFree;
HXDLIN( 508)					_this1->mFree = j;
HXDLIN( 508)					d1[(i2 + (int)1)] = (int)-2147483647;
HXDLIN( 508)					d1[(i2 + (int)2)] = (int)-1;
HXDLIN( 508)					_this1->mSize--;
            				}
            				else {
HXLINE( 508)					bool exists = false;
HXDLIN( 508)					int i0 = i2;
HXDLIN( 508)					i2 = d1->__get((i2 + (int)2));
HXDLIN( 508)					while((i2 != (int)-1)){
HXLINE( 508)						if ((d1->__get(i2) == key2)) {
HXLINE( 508)							exists = true;
HXDLIN( 508)							goto _hx_goto_47;
            						}
HXDLIN( 508)						i0 = i2;
HXDLIN( 508)						i2 = d1->__get((i0 + (int)2));
            					}
            					_hx_goto_47:;
HXDLIN( 508)					if (exists) {
HXLINE( 508)						d1[(i0 + (int)2)] = d1->__get((i2 + (int)2));
HXDLIN( 508)						int j1 = ::Std_obj::_hx_int(((Float)i2 / (Float)(int)3));
HXDLIN( 508)						_this1->mNext[j1] = _this1->mFree;
HXDLIN( 508)						_this1->mFree = j1;
HXDLIN( 508)						d1[(i2 + (int)1)] = (int)-2147483647;
HXDLIN( 508)						d1[(i2 + (int)2)] = (int)-1;
HXDLIN( 508)						_this1->mSize--;
            					}
            				}
            			}
            		}
HXLINE( 509)		this->mSize--;
HXLINE( 510)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,unset,return )

::Dynamic HashTable_obj::toValSet(){
            	HX_GC_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_517_toValSet)
HXLINE( 518)		 ::de::polygonal::ds::ListSet s =  ::de::polygonal::ds::ListSet_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 518)		::cpp::VirtualArray k = this->mKeys;
HXDLIN( 518)		::cpp::VirtualArray v = this->mVals;
HXLINE( 519)		{
HXLINE( 519)			int _g1 = (int)0;
HXDLIN( 519)			int _g = this->capacity;
HXDLIN( 519)			while((_g1 < _g)){
HXLINE( 519)				_g1 = (_g1 + (int)1);
HXDLIN( 519)				int i = (_g1 - (int)1);
HXLINE( 520)				if (hx::IsNotNull( k->__get(i) )) {
HXLINE( 521)					s->set(v->__get(i));
            				}
            			}
            		}
HXLINE( 522)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,toValSet,return )

::Dynamic HashTable_obj::toKeySet(){
            	HX_GC_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_529_toKeySet)
HXLINE( 530)		 ::de::polygonal::ds::ListSet s =  ::de::polygonal::ds::ListSet_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 530)		::cpp::VirtualArray t = this->mKeys;
HXDLIN( 530)		 ::Dynamic k;
HXLINE( 531)		{
HXLINE( 531)			int _g1 = (int)0;
HXDLIN( 531)			int _g = this->capacity;
HXDLIN( 531)			while((_g1 < _g)){
HXLINE( 531)				_g1 = (_g1 + (int)1);
HXDLIN( 531)				int i = (_g1 - (int)1);
HXLINE( 533)				k = t->__get(i);
HXLINE( 534)				if (hx::IsNotNull( k )) {
HXLINE( 534)					s->set(k);
            				}
            			}
            		}
HXLINE( 536)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,toKeySet,return )

::Dynamic HashTable_obj::keys(){
            	HX_GC_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_548_keys)
HXDLIN( 548)		return  ::de::polygonal::ds::HashTableKeyIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,keys,return )

int HashTable_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_559_get_size)
HXDLIN( 559)		return this->mSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,get_size,return )

void HashTable_obj::free(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_568_free)
HXLINE( 569)		::de::polygonal::ds::tools::NativeArrayTools_obj::nullify(this->mVals,null(),null());
HXLINE( 570)		this->mVals = null();
HXLINE( 572)		::de::polygonal::ds::tools::NativeArrayTools_obj::nullify(this->mKeys,null(),null());
HXLINE( 573)		this->mKeys = null();
HXLINE( 578)		this->mNext = null();
HXLINE( 580)		this->mH->free();
HXLINE( 581)		this->mH = null();
HXLINE( 582)		if (hx::IsNotNull( this->mIterator )) {
HXLINE( 584)			this->mIterator->free();
HXLINE( 585)			this->mIterator = null();
            		}
HXLINE( 587)		this->mTmpIntBuffer = null();
HXLINE( 588)		this->mTmpKeyBuffer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,free,(void))

bool HashTable_obj::contains( ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_596_contains)
HXDLIN( 596)		return this->has(val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,contains,return )

bool HashTable_obj::remove( ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_604_remove)
HXLINE( 605)		bool found = false;
HXLINE( 606)		::cpp::VirtualArray b = this->mTmpKeyBuffer;
HXLINE( 607)		::cpp::VirtualArray k = this->mKeys;
HXDLIN( 607)		::cpp::VirtualArray v = this->mVals;
HXDLIN( 607)		 ::Dynamic j;
HXLINE( 608)		int c = (int)0;
HXLINE( 610)		{
HXLINE( 610)			int _g1 = (int)0;
HXDLIN( 610)			int _g = this->capacity;
HXDLIN( 610)			while((_g1 < _g)){
HXLINE( 610)				_g1 = (_g1 + (int)1);
HXDLIN( 610)				int i = (_g1 - (int)1);
HXLINE( 612)				j = k->__get(i);
HXLINE( 613)				if (hx::IsNull( j )) {
HXLINE( 613)					continue;
            				}
HXLINE( 614)				if (hx::IsEq( v->__get(i),val )) {
HXLINE( 616)					c = (c + (int)1);
HXDLIN( 616)					b->set((c - (int)1),j);
HXLINE( 617)					found = true;
            				}
            			}
            		}
HXLINE( 621)		{
HXLINE( 621)			int _g11 = (int)0;
HXDLIN( 621)			int _g2 = c;
HXDLIN( 621)			while((_g11 < _g2)){
HXLINE( 621)				_g11 = (_g11 + (int)1);
HXDLIN( 621)				int i1 = (_g11 - (int)1);
HXLINE( 623)				this->unset(b->__get(i1));
HXLINE( 624)				b->set(i1,null());
            			}
            		}
HXLINE( 626)		return (c > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,remove,return )

void HashTable_obj::clear(hx::Null< bool >  __o_gc){
bool gc = __o_gc.Default(false);
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_635_clear)
HXLINE( 636)		this->mH->clear(gc);
HXLINE( 638)		::de::polygonal::ds::tools::NativeArrayTools_obj::init(this->mKeys,null(),(int)0,this->capacity);
HXLINE( 639)		::de::polygonal::ds::tools::NativeArrayTools_obj::init(this->mVals,null(),(int)0,this->capacity);
HXLINE( 641)		::Array< int > t = this->mNext;
HXLINE( 642)		{
HXLINE( 642)			int _g1 = (int)0;
HXDLIN( 642)			int _g = (this->capacity - (int)1);
HXDLIN( 642)			while((_g1 < _g)){
HXLINE( 642)				_g1 = (_g1 + (int)1);
HXDLIN( 642)				int i = (_g1 - (int)1);
HXDLIN( 642)				t[i] = (i + (int)1);
            			}
            		}
HXLINE( 643)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE( 644)		this->mFree = (int)0;
HXLINE( 645)		this->mSize = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(HashTable_obj,clear,(void))

::Dynamic HashTable_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_657_iterator)
HXDLIN( 657)		if (this->reuseIterator) {
HXLINE( 659)			if (hx::IsNull( this->mIterator )) {
HXLINE( 660)				this->mIterator =  ::de::polygonal::ds::HashTableValIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE( 662)				this->mIterator->reset();
            			}
HXLINE( 663)			return this->mIterator;
            		}
            		else {
HXLINE( 666)			return  ::de::polygonal::ds::HashTableValIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 657)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,iterator,return )

bool HashTable_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_674_isEmpty)
HXDLIN( 674)		return (this->mSize == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,isEmpty,return )

::cpp::VirtualArray HashTable_obj::toArray(){
            	HX_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_681_toArray)
HXLINE( 682)		if ((this->mSize == (int)0)) {
HXLINE( 682)			return ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 684)		int len = this->mSize;
HXDLIN( 684)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXDLIN( 684)		_hx_array_set_size_exact(a,len);
HXDLIN( 684)		::cpp::VirtualArray out = a;
HXLINE( 685)		int j = (int)0;
HXDLIN( 685)		::cpp::VirtualArray keys = this->mKeys;
HXDLIN( 685)		::cpp::VirtualArray vals = this->mVals;
HXDLIN( 685)		 ::Dynamic k;
HXLINE( 686)		{
HXLINE( 686)			int _g1 = (int)0;
HXDLIN( 686)			int _g = this->capacity;
HXDLIN( 686)			while((_g1 < _g)){
HXLINE( 686)				_g1 = (_g1 + (int)1);
HXDLIN( 686)				int i = (_g1 - (int)1);
HXLINE( 687)				if (hx::IsNotNull( keys->__get(i) )) {
HXLINE( 688)					j = (j + (int)1);
HXDLIN( 688)					out->set((j - (int)1),vals->__get(i));
            				}
            			}
            		}
HXLINE( 689)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTable_obj,toArray,return )

::Dynamic HashTable_obj::clone(hx::Null< bool >  __o_byRef, ::Dynamic copier){
bool byRef = __o_byRef.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_2816b9924f4d7bdb_700_clone)
HXLINE( 701)		 ::de::polygonal::ds::HashTable c =  ::de::polygonal::ds::HashTable_obj::__alloc( HX_CTX ,this->mH->slotCount,this->mSize);
HXLINE( 702)		c->mH = ( ( ::de::polygonal::ds::IntIntHashTable)(this->mH->clone(null(),null())) );
HXLINE( 703)		c->mSize = this->mSize;
HXLINE( 704)		c->mFree = this->mFree;
HXLINE( 706)		::cpp::VirtualArray srcVals = this->mVals;
HXLINE( 707)		::cpp::VirtualArray dstVals = c->mVals;
HXLINE( 709)		::cpp::VirtualArray srcKeys = this->mKeys;
HXLINE( 710)		::cpp::VirtualArray dstKeys = c->mKeys;
HXLINE( 712)		{
HXLINE( 712)			int n = this->mSize;
HXDLIN( 712)			if ((n > (int)0)) {
HXLINE( 712)				dstKeys->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)((int)0,srcKeys,(int)0,n);
            			}
            		}
HXLINE( 714)		if (byRef) {
HXLINE( 715)			int n1 = this->mSize;
HXDLIN( 715)			if ((n1 > (int)0)) {
HXLINE( 715)				dstVals->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)((int)0,srcVals,(int)0,n1);
            			}
            		}
            		else {
HXLINE( 718)			if (hx::IsNotNull( copier )) {
HXLINE( 720)				int _g1 = (int)0;
HXDLIN( 720)				int _g = this->mSize;
HXDLIN( 720)				while((_g1 < _g)){
HXLINE( 720)					_g1 = (_g1 + (int)1);
HXDLIN( 720)					int i = (_g1 - (int)1);
HXLINE( 722)					if (hx::IsNotNull( srcKeys->__get(i) )) {
HXLINE( 723)						dstVals->set(i,copier(srcVals->__get(i)));
            					}
            					else {
HXLINE( 725)						dstVals->set(i,null());
            					}
            				}
            			}
            			else {
HXLINE( 730)				int _g11 = (int)0;
HXDLIN( 730)				int _g2 = this->mSize;
HXDLIN( 730)				while((_g11 < _g2)){
HXLINE( 730)					_g11 = (_g11 + (int)1);
HXDLIN( 730)					int i1 = (_g11 - (int)1);
HXLINE( 732)					if (hx::IsNotNull( srcKeys->__get(i1) )) {
HXLINE( 736)						dstVals->set(i1,::de::polygonal::ds::Cloneable_obj::clone(srcVals->__get(i1)));
            					}
            					else {
HXLINE( 739)						dstVals->set(i1,null());
            					}
            				}
            			}
            		}
HXLINE( 747)		{
HXLINE( 747)			int n2 = this->mSize;
HXDLIN( 747)			if ((n2 > (int)0)) {
HXLINE( 747)				c->mNext->blit((int)0,this->mNext,(int)0,n2);
            			}
            		}
HXLINE( 749)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC2(HashTable_obj,clone,return )


hx::ObjectPtr< HashTable_obj > HashTable_obj::__new(int slotCount,hx::Null< int >  __o_initialCapacity) {
	hx::ObjectPtr< HashTable_obj > __this = new HashTable_obj();
	__this->__construct(slotCount,__o_initialCapacity);
	return __this;
}

hx::ObjectPtr< HashTable_obj > HashTable_obj::__alloc(hx::Ctx *_hx_ctx,int slotCount,hx::Null< int >  __o_initialCapacity) {
	HashTable_obj *__this = (HashTable_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HashTable_obj), true, "de.polygonal.ds.HashTable"));
	*(void **)__this = HashTable_obj::_hx_vtable;
	__this->__construct(slotCount,__o_initialCapacity);
	return __this;
}

HashTable_obj::HashTable_obj()
{
}

void HashTable_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HashTable);
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(capacity,"capacity");
	HX_MARK_MEMBER_NAME(reuseIterator,"reuseIterator");
	HX_MARK_MEMBER_NAME(mH,"mH");
	HX_MARK_MEMBER_NAME(mKeys,"mKeys");
	HX_MARK_MEMBER_NAME(mVals,"mVals");
	HX_MARK_MEMBER_NAME(mNext,"mNext");
	HX_MARK_MEMBER_NAME(mFree,"mFree");
	HX_MARK_MEMBER_NAME(mSize,"mSize");
	HX_MARK_MEMBER_NAME(mMinCapacity,"mMinCapacity");
	HX_MARK_MEMBER_NAME(mIterator,"mIterator");
	HX_MARK_MEMBER_NAME(mTmpIntBuffer,"mTmpIntBuffer");
	HX_MARK_MEMBER_NAME(mTmpKeyBuffer,"mTmpKeyBuffer");
	HX_MARK_END_CLASS();
}

void HashTable_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(capacity,"capacity");
	HX_VISIT_MEMBER_NAME(reuseIterator,"reuseIterator");
	HX_VISIT_MEMBER_NAME(mH,"mH");
	HX_VISIT_MEMBER_NAME(mKeys,"mKeys");
	HX_VISIT_MEMBER_NAME(mVals,"mVals");
	HX_VISIT_MEMBER_NAME(mNext,"mNext");
	HX_VISIT_MEMBER_NAME(mFree,"mFree");
	HX_VISIT_MEMBER_NAME(mSize,"mSize");
	HX_VISIT_MEMBER_NAME(mMinCapacity,"mMinCapacity");
	HX_VISIT_MEMBER_NAME(mIterator,"mIterator");
	HX_VISIT_MEMBER_NAME(mTmpIntBuffer,"mTmpIntBuffer");
	HX_VISIT_MEMBER_NAME(mTmpKeyBuffer,"mTmpKeyBuffer");
}

hx::Val HashTable_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mH") ) { return hx::Val( mH ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pack") ) { return hx::Val( pack_dyn() ); }
		if (HX_FIELD_EQ(inName,"iter") ) { return hx::Val( iter_dyn() ); }
		if (HX_FIELD_EQ(inName,"grow") ) { return hx::Val( grow_dyn() ); }
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mKeys") ) { return hx::Val( mKeys ); }
		if (HX_FIELD_EQ(inName,"mVals") ) { return hx::Val( mVals ); }
		if (HX_FIELD_EQ(inName,"mNext") ) { return hx::Val( mNext ); }
		if (HX_FIELD_EQ(inName,"mFree") ) { return hx::Val( mFree ); }
		if (HX_FIELD_EQ(inName,"mSize") ) { return hx::Val( mSize ); }
		if (HX_FIELD_EQ(inName,"remap") ) { return hx::Val( remap_dyn() ); }
		if (HX_FIELD_EQ(inName,"unset") ) { return hx::Val( unset_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rehash") ) { return hx::Val( rehash_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasKey") ) { return hx::Val( hasKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAll") ) { return hx::Val( getAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { return hx::Val( capacity ); }
		if (HX_FIELD_EQ(inName,"getFront") ) { return hx::Val( getFront_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"toValSet") ) { return hx::Val( toValSet_dyn() ); }
		if (HX_FIELD_EQ(inName,"toKeySet") ) { return hx::Val( toKeySet_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"slotCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_slotCount() ); }
		if (HX_FIELD_EQ(inName,"mIterator") ) { return hx::Val( mIterator ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loadFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_loadFactor() ); }
		if (HX_FIELD_EQ(inName,"growthRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_growthRate() ); }
		if (HX_FIELD_EQ(inName,"toKeyArray") ) { return hx::Val( toKeyArray_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setIfAbsent") ) { return hx::Val( setIfAbsent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mMinCapacity") ) { return hx::Val( mMinCapacity ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_slotCount") ) { return hx::Val( get_slotCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"reuseIterator") ) { return hx::Val( reuseIterator ); }
		if (HX_FIELD_EQ(inName,"mTmpIntBuffer") ) { return hx::Val( mTmpIntBuffer ); }
		if (HX_FIELD_EQ(inName,"mTmpKeyBuffer") ) { return hx::Val( mTmpKeyBuffer ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_loadFactor") ) { return hx::Val( get_loadFactor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_growthRate") ) { return hx::Val( get_growthRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_growthRate") ) { return hx::Val( set_growthRate_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getCollisionCount") ) { return hx::Val( getCollisionCount_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HashTable_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mH") ) { mH=inValue.Cast<  ::de::polygonal::ds::IntIntHashTable >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mKeys") ) { mKeys=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mVals") ) { mVals=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mNext") ) { mNext=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mFree") ) { mFree=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mSize") ) { mSize=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { capacity=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mIterator") ) { mIterator=inValue.Cast<  ::de::polygonal::ds::HashTableValIterator >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"growthRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_growthRate(inValue.Cast< int >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mMinCapacity") ) { mMinCapacity=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reuseIterator") ) { reuseIterator=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mTmpIntBuffer") ) { mTmpIntBuffer=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mTmpKeyBuffer") ) { mTmpKeyBuffer=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HashTable_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("key","\x9f","\x89","\x51","\x00"));
	outFields->push(HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3"));
	outFields->push(HX_HCSTRING("loadFactor","\x95","\xc7","\x38","\x99"));
	outFields->push(HX_HCSTRING("slotCount","\xf1","\x5d","\x7f","\x2a"));
	outFields->push(HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed"));
	outFields->push(HX_HCSTRING("growthRate","\xc7","\x5a","\x60","\xe8"));
	outFields->push(HX_HCSTRING("mH","\x3b","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("mKeys","\x01","\x49","\x8d","\xf4"));
	outFields->push(HX_HCSTRING("mVals","\x7f","\x8d","\xcf","\xfb"));
	outFields->push(HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6"));
	outFields->push(HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1"));
	outFields->push(HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9"));
	outFields->push(HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1"));
	outFields->push(HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e"));
	outFields->push(HX_HCSTRING("mTmpIntBuffer","\x85","\x7f","\x74","\xdc"));
	outFields->push(HX_HCSTRING("mTmpKeyBuffer","\x35","\xa0","\x7c","\x4f"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HashTable_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(HashTable_obj,key),HX_HCSTRING("key","\x9f","\x89","\x51","\x00")},
	{hx::fsInt,(int)offsetof(HashTable_obj,capacity),HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3")},
	{hx::fsBool,(int)offsetof(HashTable_obj,reuseIterator),HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed")},
	{hx::fsObject /*::de::polygonal::ds::IntIntHashTable*/ ,(int)offsetof(HashTable_obj,mH),HX_HCSTRING("mH","\x3b","\x5f","\x00","\x00")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(HashTable_obj,mKeys),HX_HCSTRING("mKeys","\x01","\x49","\x8d","\xf4")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(HashTable_obj,mVals),HX_HCSTRING("mVals","\x7f","\x8d","\xcf","\xfb")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(HashTable_obj,mNext),HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6")},
	{hx::fsInt,(int)offsetof(HashTable_obj,mFree),HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1")},
	{hx::fsInt,(int)offsetof(HashTable_obj,mSize),HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9")},
	{hx::fsInt,(int)offsetof(HashTable_obj,mMinCapacity),HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1")},
	{hx::fsObject /*::de::polygonal::ds::HashTableValIterator*/ ,(int)offsetof(HashTable_obj,mIterator),HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(HashTable_obj,mTmpIntBuffer),HX_HCSTRING("mTmpIntBuffer","\x85","\x7f","\x74","\xdc")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(HashTable_obj,mTmpKeyBuffer),HX_HCSTRING("mTmpKeyBuffer","\x35","\xa0","\x7c","\x4f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HashTable_obj_sStaticStorageInfo = 0;
#endif

static ::String HashTable_obj_sMemberFields[] = {
	HX_HCSTRING("key","\x9f","\x89","\x51","\x00"),
	HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3"),
	HX_HCSTRING("get_loadFactor","\xde","\x4f","\x2e","\x0f"),
	HX_HCSTRING("get_slotCount","\xc8","\x31","\xe3","\xeb"),
	HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed"),
	HX_HCSTRING("get_growthRate","\x10","\xe3","\x55","\x5e"),
	HX_HCSTRING("set_growthRate","\x84","\xcb","\x75","\x7e"),
	HX_HCSTRING("mH","\x3b","\x5f","\x00","\x00"),
	HX_HCSTRING("mKeys","\x01","\x49","\x8d","\xf4"),
	HX_HCSTRING("mVals","\x7f","\x8d","\xcf","\xfb"),
	HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6"),
	HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1"),
	HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9"),
	HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1"),
	HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e"),
	HX_HCSTRING("mTmpIntBuffer","\x85","\x7f","\x74","\xdc"),
	HX_HCSTRING("mTmpKeyBuffer","\x35","\xa0","\x7c","\x4f"),
	HX_HCSTRING("getCollisionCount","\x33","\xde","\xd7","\x0b"),
	HX_HCSTRING("getFront","\x33","\x28","\x65","\x66"),
	HX_HCSTRING("setIfAbsent","\x38","\xc4","\x66","\xee"),
	HX_HCSTRING("rehash","\x01","\xe9","\x2f","\x01"),
	HX_HCSTRING("remap","\xc9","\xb8","\xc3","\xe6"),
	HX_HCSTRING("toKeyArray","\x15","\xa8","\x15","\xdc"),
	HX_HCSTRING("pack","\xd9","\xd6","\x51","\x4a"),
	HX_HCSTRING("iter","\x18","\xc5","\xbf","\x45"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("grow","\x13","\xdc","\x6b","\x44"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("hasKey","\x65","\x96","\x38","\xbb"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getAll","\x2b","\x32","\x19","\xa3"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("unset","\xe9","\xf2","\xee","\xa6"),
	HX_HCSTRING("toValSet","\x1c","\xdf","\xdb","\x76"),
	HX_HCSTRING("toKeySet","\x1e","\xff","\x20","\x67"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	::String(null()) };

static void HashTable_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HashTable_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HashTable_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HashTable_obj::__mClass,"__mClass");
};

#endif

hx::Class HashTable_obj::__mClass;

void HashTable_obj::__register()
{
	hx::Object *dummy = new HashTable_obj;
	HashTable_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.ds.HashTable","\x17","\xfb","\x41","\x68");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HashTable_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HashTable_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HashTable_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HashTable_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HashTable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HashTable_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace de
} // end namespace polygonal
} // end namespace ds
