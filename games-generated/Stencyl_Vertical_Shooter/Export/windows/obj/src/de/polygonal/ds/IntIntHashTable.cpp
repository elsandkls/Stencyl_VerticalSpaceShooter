// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_de_polygonal_Printf
#include <de/polygonal/Printf.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Collection
#include <de/polygonal/ds/Collection.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_HashKey
#include <de/polygonal/ds/HashKey.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Hashable
#include <de/polygonal/ds/Hashable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntHashSet
#include <de/polygonal/ds/IntHashSet.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntIntHashTable
#include <de/polygonal/ds/IntIntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntIntHashTableKeyIterator
#include <de/polygonal/ds/IntIntHashTableKeyIterator.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntIntHashTableValIterator
#include <de/polygonal/ds/IntIntHashTableValIterator.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Itr
#include <de/polygonal/ds/Itr.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Map
#include <de/polygonal/ds/Map.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Set
#include <de/polygonal/ds/Set.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_GrowthRate
#include <de/polygonal/ds/tools/GrowthRate.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_NativeArrayTools
#include <de/polygonal/ds/tools/NativeArrayTools.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_78923e595580a1ed_54_new,"de.polygonal.ds.IntIntHashTable","new",0xbc3e4769,"de.polygonal.ds.IntIntHashTable.new","de/polygonal/ds/IntIntHashTable.hx",54,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_117_get_loadFactor,"de.polygonal.ds.IntIntHashTable","get_loadFactor",0xb3341375,"de.polygonal.ds.IntIntHashTable.get_loadFactor","de/polygonal/ds/IntIntHashTable.hx",117,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_204_getCollisionCount,"de.polygonal.ds.IntIntHashTable","getCollisionCount",0x415d32fc,"de.polygonal.ds.IntIntHashTable.getCollisionCount","de/polygonal/ds/IntIntHashTable.hx",204,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_226_getFront,"de.polygonal.ds.IntIntHashTable","getFront",0x4b61908a,"de.polygonal.ds.IntIntHashTable.getFront","de/polygonal/ds/IntIntHashTable.hx",226,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_290_setIfAbsent,"de.polygonal.ds.IntIntHashTable","setIfAbsent",0x469cec41,"de.polygonal.ds.IntIntHashTable.setIfAbsent","de/polygonal/ds/IntIntHashTable.hx",290,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_402_rehash,"de.polygonal.ds.IntIntHashTable","rehash",0xc1dcbd98,"de.polygonal.ds.IntIntHashTable.rehash","de/polygonal/ds/IntIntHashTable.hx",402,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_446_remap,"de.polygonal.ds.IntIntHashTable","remap",0x4b80c412,"de.polygonal.ds.IntIntHashTable.remap","de/polygonal/ds/IntIntHashTable.hx",446,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_504_extract,"de.polygonal.ds.IntIntHashTable","extract",0x4f77e4ca,"de.polygonal.ds.IntIntHashTable.extract","de/polygonal/ds/IntIntHashTable.hx",504,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_608_toKeyArray,"de.polygonal.ds.IntIntHashTable","toKeyArray",0x473e142c,"de.polygonal.ds.IntIntHashTable.toKeyArray","de/polygonal/ds/IntIntHashTable.hx",608,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_653_toString,"de.polygonal.ds.IntIntHashTable","toString",0x1d6b3903,"de.polygonal.ds.IntIntHashTable.toString","de/polygonal/ds/IntIntHashTable.hx",653,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_632_toString,"de.polygonal.ds.IntIntHashTable","toString",0x1d6b3903,"de.polygonal.ds.IntIntHashTable.toString","de/polygonal/ds/IntIntHashTable.hx",632,0x39674de6)
static const ::String _hx_array_data_92025ef7_28[] = {
	HX_(" ]",3d,1c,00,00),
};
static const ::String _hx_array_data_92025ef7_29[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_92025ef7_30[] = {
	HX_("]",5d,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_696_has,"de.polygonal.ds.IntIntHashTable","has",0xbc39b663,"de.polygonal.ds.IntIntHashTable.has","de/polygonal/ds/IntIntHashTable.hx",696,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_716_hasKey,"de.polygonal.ds.IntIntHashTable","hasKey",0x7be56afc,"de.polygonal.ds.IntIntHashTable.hasKey","de/polygonal/ds/IntIntHashTable.hx",716,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_768_count,"de.polygonal.ds.IntIntHashTable","count",0xaf205018,"de.polygonal.ds.IntIntHashTable.count","de/polygonal/ds/IntIntHashTable.hx",768,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_799_get,"de.polygonal.ds.IntIntHashTable","get",0xbc38f79f,"de.polygonal.ds.IntIntHashTable.get","de/polygonal/ds/IntIntHashTable.hx",799,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_851_getAll,"de.polygonal.ds.IntIntHashTable","getAll",0x63c606c2,"de.polygonal.ds.IntIntHashTable.getAll","de/polygonal/ds/IntIntHashTable.hx",851,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_890_hasPair,"de.polygonal.ds.IntIntHashTable","hasPair",0xf0232c1d,"de.polygonal.ds.IntIntHashTable.hasPair","de/polygonal/ds/IntIntHashTable.hx",890,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_938_unsetPair,"de.polygonal.ds.IntIntHashTable","unsetPair",0x83b7076c,"de.polygonal.ds.IntIntHashTable.unsetPair","de/polygonal/ds/IntIntHashTable.hx",938,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1045_set,"de.polygonal.ds.IntIntHashTable","set",0xbc4212ab,"de.polygonal.ds.IntIntHashTable.set","de/polygonal/ds/IntIntHashTable.hx",1045,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1124_unset,"de.polygonal.ds.IntIntHashTable","unset",0x0babfe32,"de.polygonal.ds.IntIntHashTable.unset","de/polygonal/ds/IntIntHashTable.hx",1124,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1226_toValSet,"de.polygonal.ds.IntIntHashTable","toValSet",0x5bd84773,"de.polygonal.ds.IntIntHashTable.toValSet","de/polygonal/ds/IntIntHashTable.hx",1226,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1240_toKeySet,"de.polygonal.ds.IntIntHashTable","toKeySet",0x4c1d6775,"de.polygonal.ds.IntIntHashTable.toKeySet","de/polygonal/ds/IntIntHashTable.hx",1240,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1262_keys,"de.polygonal.ds.IntIntHashTable","keys",0xf84492cb,"de.polygonal.ds.IntIntHashTable.keys","de/polygonal/ds/IntIntHashTable.hx",1262,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1269_pack,"de.polygonal.ds.IntIntHashTable","pack",0xfb8f87b0,"de.polygonal.ds.IntIntHashTable.pack","de/polygonal/ds/IntIntHashTable.hx",1269,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1360_iter,"de.polygonal.ds.IntIntHashTable","iter",0xf6fd75ef,"de.polygonal.ds.IntIntHashTable.iter","de/polygonal/ds/IntIntHashTable.hx",1360,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1374_hashCode,"de.polygonal.ds.IntIntHashTable","hashCode",0xec717472,"de.polygonal.ds.IntIntHashTable.hashCode","de/polygonal/ds/IntIntHashTable.hx",1374,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1378_grow,"de.polygonal.ds.IntIntHashTable","grow",0xf5a98cea,"de.polygonal.ds.IntIntHashTable.grow","de/polygonal/ds/IntIntHashTable.hx",1378,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1424_get_size,"de.polygonal.ds.IntIntHashTable","get_size",0xb10ac4a1,"de.polygonal.ds.IntIntHashTable.get_size","de/polygonal/ds/IntIntHashTable.hx",1424,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1433_free,"de.polygonal.ds.IntIntHashTable","free",0xf5004d83,"de.polygonal.ds.IntIntHashTable.free","de/polygonal/ds/IntIntHashTable.hx",1433,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1456_contains,"de.polygonal.ds.IntIntHashTable","contains",0x1177c276,"de.polygonal.ds.IntIntHashTable.contains","de/polygonal/ds/IntIntHashTable.hx",1456,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1464_remove,"de.polygonal.ds.IntIntHashTable","remove",0xc53570db,"de.polygonal.ds.IntIntHashTable.remove","de/polygonal/ds/IntIntHashTable.hx",1464,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1521_clear,"de.polygonal.ds.IntIntHashTable","clear",0xad187cd6,"de.polygonal.ds.IntIntHashTable.clear","de/polygonal/ds/IntIntHashTable.hx",1521,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1554_iterator,"de.polygonal.ds.IntIntHashTable","iterator",0x7896b245,"de.polygonal.ds.IntIntHashTable.iterator","de/polygonal/ds/IntIntHashTable.hx",1554,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1571_isEmpty,"de.polygonal.ds.IntIntHashTable","isEmpty",0xe2ed0dcc,"de.polygonal.ds.IntIntHashTable.isEmpty","de/polygonal/ds/IntIntHashTable.hx",1571,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1578_toArray,"de.polygonal.ds.IntIntHashTable","toArray",0xc8a0e9a7,"de.polygonal.ds.IntIntHashTable.toArray","de/polygonal/ds/IntIntHashTable.hx",1578,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_1595_clone,"de.polygonal.ds.IntIntHashTable","clone",0xad201ea6,"de.polygonal.ds.IntIntHashTable.clone","de/polygonal/ds/IntIntHashTable.hx",1595,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_59_boot,"de.polygonal.ds.IntIntHashTable","boot",0xf2593509,"de.polygonal.ds.IntIntHashTable.boot","de/polygonal/ds/IntIntHashTable.hx",59,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_64_boot,"de.polygonal.ds.IntIntHashTable","boot",0xf2593509,"de.polygonal.ds.IntIntHashTable.boot","de/polygonal/ds/IntIntHashTable.hx",64,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_69_boot,"de.polygonal.ds.IntIntHashTable","boot",0xf2593509,"de.polygonal.ds.IntIntHashTable.boot","de/polygonal/ds/IntIntHashTable.hx",69,0x39674de6)
HX_LOCAL_STACK_FRAME(_hx_pos_78923e595580a1ed_74_boot,"de.polygonal.ds.IntIntHashTable","boot",0xf2593509,"de.polygonal.ds.IntIntHashTable.boot","de/polygonal/ds/IntIntHashTable.hx",74,0x39674de6)
namespace de{
namespace polygonal{
namespace ds{

void IntIntHashTable_obj::__construct(int slotCount,hx::Null< int >  __o_initialCapacity){
int initialCapacity = __o_initialCapacity.Default(-1);
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_54_new)
HXLINE( 141)		this->mTmpBufferSize = (int)16;
HXLINE( 137)		this->mSize = (int)0;
HXLINE( 136)		this->mFree = (int)0;
HXLINE( 103)		this->reuseIterator = false;
HXLINE(  94)		this->growthRate = (int)-3;
HXLINE(  81)		this->key = ::de::polygonal::ds::HashKey_obj::next();
HXLINE( 159)		if ((initialCapacity == (int)-1)) {
HXLINE( 160)			initialCapacity = slotCount;
            		}
HXLINE( 167)		this->capacity = initialCapacity;
HXLINE( 168)		this->mMinCapacity = initialCapacity;
HXLINE( 169)		this->slotCount = slotCount;
HXLINE( 170)		this->mMask = (slotCount - (int)1);
HXLINE( 178)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 178)		_hx_array_set_size_exact(a,slotCount);
HXDLIN( 178)		this->mHash = ::de::polygonal::ds::tools::NativeArrayTools_obj::init(a,(int)-1,null(),null());
HXLINE( 179)		int len = (this->capacity * (int)3);
HXDLIN( 179)		::Array< int > a1 = ::Array_obj< int >::__new();
HXDLIN( 179)		_hx_array_set_size_exact(a1,len);
HXDLIN( 179)		this->mData = a1;
HXLINE( 180)		int len1 = this->capacity;
HXDLIN( 180)		::Array< int > a2 = ::Array_obj< int >::__new();
HXDLIN( 180)		_hx_array_set_size_exact(a2,len1);
HXDLIN( 180)		this->mNext = a2;
HXLINE( 183)		int j = (int)2;
HXDLIN( 183)		::Array< int > t = this->mData;
HXLINE( 184)		{
HXLINE( 184)			int _g1 = (int)0;
HXDLIN( 184)			int _g = this->capacity;
HXDLIN( 184)			while((_g1 < _g)){
HXLINE( 184)				_g1 = (_g1 + (int)1);
HXDLIN( 184)				int i = (_g1 - (int)1);
HXLINE( 186)				t[(j - (int)1)] = (int)-2147483647;
HXLINE( 187)				t[j] = (int)-1;
HXLINE( 188)				j = (j + (int)3);
            			}
            		}
HXLINE( 191)		t = this->mNext;
HXLINE( 192)		{
HXLINE( 192)			int _g11 = (int)0;
HXDLIN( 192)			int _g2 = (this->capacity - (int)1);
HXDLIN( 192)			while((_g11 < _g2)){
HXLINE( 192)				_g11 = (_g11 + (int)1);
HXDLIN( 192)				int i1 = (_g11 - (int)1);
HXDLIN( 192)				t[i1] = (i1 + (int)1);
            			}
            		}
HXLINE( 193)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE( 195)		int len2 = this->mTmpBufferSize;
HXDLIN( 195)		::Array< int > a3 = ::Array_obj< int >::__new();
HXDLIN( 195)		_hx_array_set_size_exact(a3,len2);
HXDLIN( 195)		this->mTmpBuffer = a3;
            	}

Dynamic IntIntHashTable_obj::__CreateEmpty() { return new IntIntHashTable_obj; }

void *IntIntHashTable_obj::_hx_vtable = 0;

Dynamic IntIntHashTable_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IntIntHashTable_obj > _hx_result = new IntIntHashTable_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool IntIntHashTable_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6637d42d;
}

static ::de::polygonal::ds::Map_obj _hx_de_polygonal_ds_IntIntHashTable__hx_de_polygonal_ds_Map= {
	( int (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::get_size,
	( void (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::free,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::contains_5889326f,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::remove_5889326f,
	( void (hx::Object::*)(hx::Null< bool > ))&::de::polygonal::ds::IntIntHashTable_obj::clear,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::iterator,
	( bool (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::isEmpty,
	( ::cpp::VirtualArray (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::toArray_615cc599,
	( ::Dynamic (hx::Object::*)(hx::Null< bool > , ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::clone,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::has_5889326f,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::hasKey_5889326f,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::get_dc94b8fa,
	( bool (hx::Object::*)( ::Dynamic, ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::set_3c796a1c,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::unset_5889326f,
	( bool (hx::Object::*)( ::Dynamic, ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::remap_3c796a1c,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::toValSet,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::toKeySet,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::keys,
};

static ::de::polygonal::ds::Collection_obj _hx_de_polygonal_ds_IntIntHashTable__hx_de_polygonal_ds_Collection= {
	( int (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::get_size,
	( void (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::free,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::contains,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::remove,
	( void (hx::Object::*)(hx::Null< bool > ))&::de::polygonal::ds::IntIntHashTable_obj::clear,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::iterator,
	( bool (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::isEmpty,
	( ::cpp::VirtualArray (hx::Object::*)())&::de::polygonal::ds::IntIntHashTable_obj::toArray,
	( ::Dynamic (hx::Object::*)(hx::Null< bool > , ::Dynamic))&::de::polygonal::ds::IntIntHashTable_obj::clone,
};

static ::de::polygonal::ds::Hashable_obj _hx_de_polygonal_ds_IntIntHashTable__hx_de_polygonal_ds_Hashable= {
};

bool IntIntHashTable_obj::remap_3c796a1c( ::Dynamic key, ::Dynamic val) {
			return remap(key,val);
}

bool IntIntHashTable_obj::unset_5889326f( ::Dynamic key) {
			return unset(key);
}

bool IntIntHashTable_obj::set_3c796a1c( ::Dynamic key, ::Dynamic val) {
			return set(key,val);
}

 ::Dynamic IntIntHashTable_obj::get_dc94b8fa( ::Dynamic key) {
			return get(key);
}

bool IntIntHashTable_obj::hasKey_5889326f( ::Dynamic key) {
			return hasKey(key);
}

bool IntIntHashTable_obj::has_5889326f( ::Dynamic val) {
			return has(val);
}

::cpp::VirtualArray IntIntHashTable_obj::toArray_615cc599() {
			return toArray();
}

bool IntIntHashTable_obj::remove_5889326f( ::Dynamic val) {
			return remove(val);
}

bool IntIntHashTable_obj::contains_5889326f( ::Dynamic val) {
			return contains(val);
}
void *IntIntHashTable_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x31296149: return &_hx_de_polygonal_ds_IntIntHashTable__hx_de_polygonal_ds_Map;
		case (int)0xfeda5751: return &_hx_de_polygonal_ds_IntIntHashTable__hx_de_polygonal_ds_Collection;
		case (int)0xff6ef29b: return &_hx_de_polygonal_ds_IntIntHashTable__hx_de_polygonal_ds_Hashable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float IntIntHashTable_obj::get_loadFactor(){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_117_get_loadFactor)
HXDLIN( 117)		return ((Float)this->mSize / (Float)this->slotCount);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,get_loadFactor,return )

int IntIntHashTable_obj::getCollisionCount(){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_204_getCollisionCount)
HXLINE( 205)		int c = (int)0;
HXDLIN( 205)		int j;
HXDLIN( 205)		::Array< int > d = this->mData;
HXDLIN( 205)		::Array< int > h = this->mHash;
HXLINE( 206)		{
HXLINE( 206)			int _g1 = (int)0;
HXDLIN( 206)			int _g = this->slotCount;
HXDLIN( 206)			while((_g1 < _g)){
HXLINE( 206)				_g1 = (_g1 + (int)1);
HXDLIN( 206)				int i = (_g1 - (int)1);
HXLINE( 208)				j = h->__get(i);
HXLINE( 209)				if ((j == (int)-1)) {
HXLINE( 209)					continue;
            				}
HXLINE( 210)				j = d->__get((j + (int)2));
HXLINE( 211)				while((j != (int)-1)){
HXLINE( 213)					j = d->__get((j + (int)2));
HXLINE( 214)					c = (c + (int)1);
            				}
            			}
            		}
HXLINE( 217)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,getCollisionCount,return )

int IntIntHashTable_obj::getFront(int key){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_226_getFront)
HXLINE( 227)		int b = ((int)(key * (int)73856093) & (int)this->mMask);
HXLINE( 228)		int i = this->mHash->__get(b);
HXLINE( 229)		if ((i == (int)-1)) {
HXLINE( 230)			return (int)-2147483647;
            		}
            		else {
HXLINE( 233)			::Array< int > d = this->mData;
HXLINE( 240)			if ((d->__get(i) == key)) {
HXLINE( 241)				return d->__get((i + (int)1));
            			}
            			else {
HXLINE( 245)				int v = (int)-2147483647;
HXLINE( 246)				int first = i;
HXDLIN( 246)				int i0 = first;
HXLINE( 251)				i = d->__get((i + (int)2));
HXLINE( 254)				while((i != (int)-1)){
HXLINE( 260)					if ((d->__get(i) == key)) {
HXLINE( 271)						v = d->__get((i + (int)1));
HXLINE( 272)						d[(i0 + (int)2)] = d->__get((i + (int)2));
HXLINE( 273)						d[(i + (int)2)] = first;
HXLINE( 274)						this->mHash[b] = i;
HXLINE( 276)						goto _hx_goto_7;
            					}
HXLINE( 278)					i0 = i;
HXDLIN( 278)					i = d->__get((i0 + (int)2));
            				}
            				_hx_goto_7:;
HXLINE( 280)				return v;
            			}
            		}
HXLINE( 229)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,getFront,return )

bool IntIntHashTable_obj::setIfAbsent(int key,int val){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_290_setIfAbsent)
HXLINE( 293)		int b = ((int)(key * (int)73856093) & (int)this->mMask);
HXDLIN( 293)		::Array< int > d = this->mData;
HXLINE( 299)		int j = this->mHash->__get(b);
HXLINE( 301)		if ((j == (int)-1)) {
HXLINE( 303)			if ((this->mSize == this->capacity)) {
HXLINE( 305)				this->grow();
HXLINE( 306)				d = this->mData;
            			}
HXLINE( 309)			int i = (this->mFree * (int)3);
HXLINE( 310)			this->mFree = this->mNext->__get(this->mFree);
HXLINE( 318)			this->mHash[b] = i;
HXLINE( 319)			d[i] = key;
HXLINE( 320)			d[(i + (int)1)] = val;
HXLINE( 323)			this->mSize++;
HXLINE( 324)			return true;
            		}
            		else {
HXLINE( 332)			if ((d->__get(j) == key)) {
HXLINE( 334)				return false;
            			}
            			else {
HXLINE( 352)				int t = d->__get((j + (int)2));
HXLINE( 353)				while((t != (int)-1)){
HXLINE( 355)					if ((d->__get(t) == key)) {
HXLINE( 357)						j = (int)-1;
HXLINE( 358)						goto _hx_goto_9;
            					}
HXLINE( 361)					j = t;
HXDLIN( 361)					t = d->__get((j + (int)2));
            				}
            				_hx_goto_9:;
HXLINE( 365)				if ((j == (int)-1)) {
HXLINE( 366)					return false;
            				}
            				else {
HXLINE( 369)					if ((this->mSize == this->capacity)) {
HXLINE( 371)						this->grow();
HXLINE( 372)						d = this->mData;
            					}
HXLINE( 375)					int i1 = (this->mFree * (int)3);
HXLINE( 376)					this->mFree = this->mNext->__get(this->mFree);
HXLINE( 378)					d[(j + (int)2)] = i1;
HXLINE( 385)					d[i1] = key;
HXLINE( 386)					d[(i1 + (int)1)] = val;
HXLINE( 389)					this->mSize++;
HXLINE( 390)					return true;
            				}
            			}
            		}
HXLINE( 301)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntIntHashTable_obj,setIfAbsent,return )

 ::de::polygonal::ds::IntIntHashTable IntIntHashTable_obj::rehash(int slotCount){
            	HX_GC_STACKFRAME(&_hx_pos_78923e595580a1ed_402_rehash)
HXLINE( 405)		if ((this->slotCount == slotCount)) {
HXLINE( 405)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 407)		 ::de::polygonal::ds::IntIntHashTable t =  ::de::polygonal::ds::IntIntHashTable_obj::__alloc( HX_CTX ,slotCount,this->capacity);
HXLINE( 418)		::Array< int > d = this->mData;
HXLINE( 419)		{
HXLINE( 419)			int _g1 = (int)0;
HXDLIN( 419)			int _g = this->capacity;
HXDLIN( 419)			while((_g1 < _g)){
HXLINE( 419)				_g1 = (_g1 + (int)1);
HXDLIN( 419)				int i = (_g1 - (int)1);
HXLINE( 421)				int v = d->__get(((i * (int)3) + (int)1));
HXLINE( 422)				if ((v != (int)-2147483647)) {
HXLINE( 422)					int key = d->__get((i * (int)3));
HXDLIN( 422)					if ((t->mSize == t->capacity)) {
HXLINE( 422)						t->grow();
            					}
HXDLIN( 422)					::Array< int > d1 = t->mData;
HXDLIN( 422)					::Array< int > h = t->mHash;
HXDLIN( 422)					int i1 = (t->mFree * (int)3);
HXDLIN( 422)					t->mFree = t->mNext->__get(t->mFree);
HXDLIN( 422)					d1[i1] = key;
HXDLIN( 422)					d1[(i1 + (int)1)] = v;
HXDLIN( 422)					int b = ((int)(key * (int)73856093) & (int)t->mMask);
HXDLIN( 422)					int j = h->__get(b);
HXDLIN( 422)					if ((j == (int)-1)) {
HXLINE( 422)						h[b] = i1;
HXDLIN( 422)						t->mSize++;
            					}
            					else {
HXLINE( 422)						bool first = (d1->__get(j) != key);
HXDLIN( 422)						int t1 = d1->__get((j + (int)2));
HXDLIN( 422)						while((t1 != (int)-1)){
HXLINE( 422)							if ((d1->__get(t1) == key)) {
HXLINE( 422)								first = false;
            							}
HXDLIN( 422)							j = t1;
HXDLIN( 422)							t1 = d1->__get((t1 + (int)2));
            						}
HXDLIN( 422)						d1[(j + (int)2)] = i1;
HXDLIN( 422)						t->mSize++;
            					}
            				}
            			}
            		}
HXLINE( 431)		this->mHash = t->mHash;
HXLINE( 432)		this->mData = t->mData;
HXLINE( 433)		this->mNext = t->mNext;
HXLINE( 435)		this->slotCount = slotCount;
HXLINE( 436)		this->mMask = t->mMask;
HXLINE( 437)		this->mFree = t->mFree;
HXLINE( 438)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,rehash,return )

bool IntIntHashTable_obj::remap(int key,int val){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_446_remap)
HXLINE( 447)		int i = this->mHash->__get(((int)(key * (int)73856093) & (int)this->mMask));
HXLINE( 448)		if ((i == (int)-1)) {
HXLINE( 449)			return false;
            		}
            		else {
HXLINE( 452)			::Array< int > d = this->mData;
HXLINE( 462)			if ((d->__get(i) == key)) {
HXLINE( 464)				d[(i + (int)1)] = val;
HXLINE( 465)				return true;
            			}
            			else {
HXLINE( 483)				i = d->__get((i + (int)2));
HXLINE( 484)				while((i != (int)-1)){
HXLINE( 486)					if ((d->__get(i) == key)) {
HXLINE( 488)						d[(i + (int)1)] = val;
HXLINE( 489)						goto _hx_goto_14;
            					}
HXLINE( 491)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_14:;
HXLINE( 494)				return (i != (int)-1);
            			}
            		}
HXLINE( 448)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntIntHashTable_obj,remap,return )

int IntIntHashTable_obj::extract(int key){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_504_extract)
HXLINE( 505)		int b = ((int)(key * (int)73856093) & (int)this->mMask);
HXDLIN( 505)		::Array< int > h = this->mHash;
HXLINE( 506)		int i = h->__get(b);
HXLINE( 507)		if ((i == (int)-1)) {
HXLINE( 508)			return (int)-2147483647;
            		}
            		else {
HXLINE( 511)			::Array< int > d = this->mData;
HXLINE( 518)			if ((key == d->__get(i))) {
HXLINE( 520)				int val = d->__get((i + (int)1));
HXLINE( 525)				if ((d->__get((i + (int)2)) == (int)-1)) {
HXLINE( 527)					h[b] = (int)-1;
            				}
            				else {
HXLINE( 529)					h[b] = d->__get((i + (int)2));
            				}
HXLINE( 531)				int j = ::Std_obj::_hx_int(((Float)i / (Float)(int)3));
HXLINE( 532)				this->mNext[j] = this->mFree;
HXLINE( 533)				this->mFree = j;
HXLINE( 539)				d[(i + (int)1)] = (int)-2147483647;
HXLINE( 540)				d[(i + (int)2)] = (int)-1;
HXLINE( 543)				this->mSize--;
HXLINE( 544)				return val;
            			}
            			else {
HXLINE( 548)				int i0 = i;
HXLINE( 552)				i = d->__get((i + (int)2));
HXLINE( 555)				int val1 = (int)-2147483647;
HXLINE( 557)				while((i != (int)-1)){
HXLINE( 569)					if ((d->__get(i) == key)) {
HXLINE( 571)						val1 = d->__get((i + (int)1));
HXLINE( 572)						goto _hx_goto_16;
            					}
HXLINE( 574)					i0 = i;
HXDLIN( 574)					i = d->__get((i0 + (int)2));
            				}
            				_hx_goto_16:;
HXLINE( 578)				if ((val1 != (int)-2147483647)) {
HXLINE( 580)					d[(i0 + (int)2)] = d->__get((i + (int)2));
HXLINE( 582)					int j1 = ::Std_obj::_hx_int(((Float)i / (Float)(int)3));
HXLINE( 583)					this->mNext[j1] = this->mFree;
HXLINE( 584)					this->mFree = j1;
HXLINE( 591)					d[(i + (int)1)] = (int)-2147483647;
HXLINE( 592)					d[(i + (int)2)] = (int)-1;
HXLINE( 595)					this->mSize--;
HXLINE( 596)					return val1;
            				}
            				else {
HXLINE( 599)					return (int)-2147483647;
            				}
            			}
            		}
HXLINE( 507)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,extract,return )

::Array< int > IntIntHashTable_obj::toKeyArray(){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_608_toKeyArray)
HXLINE( 609)		if ((this->mSize == (int)0)) {
HXLINE( 609)			return ::Array_obj< int >::__new(0);
            		}
HXLINE( 611)		int len = this->mSize;
HXDLIN( 611)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 611)		_hx_array_set_size_exact(a,len);
HXDLIN( 611)		::Array< int > out = a;
HXLINE( 612)		int j = (int)0;
HXDLIN( 612)		 ::Dynamic o;
HXDLIN( 612)		::Array< int > d = this->mData;
HXLINE( 613)		{
HXLINE( 613)			int _g1 = (int)0;
HXDLIN( 613)			int _g = this->capacity;
HXDLIN( 613)			while((_g1 < _g)){
HXLINE( 613)				_g1 = (_g1 + (int)1);
HXDLIN( 613)				int i = (_g1 - (int)1);
HXLINE( 620)				if ((d->__get(((i * (int)3) + (int)1)) != (int)-2147483647)) {
HXLINE( 621)					j = (j + (int)1);
HXDLIN( 621)					out[(j - (int)1)] = d->__get((i * (int)3));
            				}
            			}
            		}
HXLINE( 624)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,toKeyArray,return )

::String IntIntHashTable_obj::toString(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(int a,int b2){
            			HX_GC_STACKFRAME(&_hx_pos_78923e595580a1ed_653_toString)
HXLINE( 653)			return (a - b2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_78923e595580a1ed_632_toString)
HXLINE( 631)		 ::de::polygonal::ds::IntIntHashTable _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 633)		 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 634)		{
HXLINE( 634)			::String x = ((((HX_("[ IntIntHashTable size=",97,9a,c8,c0) + this->mSize) + HX_(" capacity=",a3,0d,35,89)) + this->capacity) + HX_(" load=%.2f",54,33,62,c9));
HXDLIN( 634)			::String x1 = ::de::polygonal::Printf_obj::format(x,::cpp::VirtualArray_obj::__new(1)->init(0,this->get_loadFactor()));
HXDLIN( 634)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 634)				b->flush();
            			}
HXDLIN( 634)			if (hx::IsNull( b->b )) {
HXLINE( 634)				b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 634)				::Array< ::String > b1 = b->b;
HXDLIN( 634)				b1->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 635)		if ((this->mSize == (int)0)) {
HXLINE( 637)			{
HXLINE( 637)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 637)					b->flush();
            				}
HXDLIN( 637)				if (hx::IsNull( b->b )) {
HXLINE( 637)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_92025ef7_28,1);
            				}
            				else {
HXLINE( 637)					b->b->push(HX_(" ]",3d,1c,00,00));
            				}
            			}
HXLINE( 638)			return b->toString();
            		}
HXLINE( 640)		{
HXLINE( 640)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 640)				b->flush();
            			}
HXDLIN( 640)			if (hx::IsNull( b->b )) {
HXLINE( 640)				b->b = ::Array_obj< ::String >::fromData( _hx_array_data_92025ef7_29,1);
            			}
            			else {
HXLINE( 640)				b->b->push(HX_("\n",0a,00,00,00));
            			}
            		}
HXLINE( 641)		Float max = ((Float)0.);
HXLINE( 642)		{
HXLINE( 642)			::Dynamic key = this->keys();
HXDLIN( 642)			while(::de::polygonal::ds::Itr_obj::hasNext(key)){
HXLINE( 642)				int key1 = ( (int)(::de::polygonal::ds::Itr_obj::next(key)) );
HXDLIN( 642)				max = ::Math_obj::max(max,key1);
            			}
            		}
HXLINE( 643)		int i = (int)1;
HXLINE( 644)		while((max != (int)0)){
HXLINE( 646)			i = (i + (int)1);
HXLINE( 647)			max = ::Std_obj::_hx_int(((Float)max / (Float)(int)10));
            		}
HXLINE( 649)		::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new();
HXLINE( 650)		::String fmt = ((HX_("  %- ",b8,9e,15,82) + i) + HX_("d -> %s\n",a9,eb,8d,50));
HXLINE( 652)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 652)		{
HXLINE( 652)			::Dynamic key2 = this->keys();
HXDLIN( 652)			while(::de::polygonal::ds::Itr_obj::hasNext(key2)){
HXLINE( 652)				int key3 = ( (int)(::de::polygonal::ds::Itr_obj::next(key2)) );
HXDLIN( 652)				_g->push(key3);
            			}
            		}
HXDLIN( 652)		::Array< int > keys = _g;
HXLINE( 653)		keys->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 654)		i = (int)1;
HXLINE( 655)		int k = keys->length;
HXLINE( 656)		int j = (int)0;
HXLINE( 657)		int c = (int)1;
HXLINE( 671)		while((i < k)){
HXLINE( 673)			if ((keys->__get(j) == keys->__get(i))) {
HXLINE( 674)				c = (c + (int)1);
            			}
            			else {
HXLINE( 677)				{
HXLINE( 677)					int key4 = keys->__get(j);
HXDLIN( 677)					args->set((int)0,key4);
HXDLIN( 677)					if ((c > (int)1)) {
HXLINE( 677)						::Array< int > tmp = ::Array_obj< int >::__new(0);
HXDLIN( 677)						_gthis->getAll(key4,tmp);
HXDLIN( 677)						args->set((int)1,tmp->join(HX_(",",2c,00,00,00)));
            					}
            					else {
HXLINE( 677)						int i1 = _gthis->mHash->__get(((int)(key4 * (int)73856093) & (int)_gthis->mMask));
HXDLIN( 677)						int _hx_tmp;
HXDLIN( 677)						if ((i1 == (int)-1)) {
HXLINE( 677)							_hx_tmp = (int)-2147483647;
            						}
            						else {
HXLINE( 677)							::Array< int > d = _gthis->mData;
HXDLIN( 677)							if ((d->__get(i1) == key4)) {
HXLINE( 677)								_hx_tmp = d->__get((i1 + (int)1));
            							}
            							else {
HXLINE( 677)								int v = (int)-2147483647;
HXDLIN( 677)								i1 = d->__get((i1 + (int)2));
HXDLIN( 677)								while((i1 != (int)-1)){
HXLINE( 677)									if ((d->__get(i1) == key4)) {
HXLINE( 677)										v = d->__get((i1 + (int)1));
HXDLIN( 677)										goto _hx_goto_24;
            									}
HXDLIN( 677)									i1 = d->__get((i1 + (int)2));
            								}
            								_hx_goto_24:;
HXDLIN( 677)								_hx_tmp = v;
            							}
            						}
HXDLIN( 677)						args->set((int)1,_hx_tmp);
            					}
HXDLIN( 677)					{
HXLINE( 677)						::String x2 = ::de::polygonal::Printf_obj::format(fmt,args);
HXDLIN( 677)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 677)							b->flush();
            						}
HXDLIN( 677)						if (hx::IsNull( b->b )) {
HXLINE( 677)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            						}
            						else {
HXLINE( 677)							::Array< ::String > b3 = b->b;
HXDLIN( 677)							b3->push(::Std_obj::string(x2));
            						}
            					}
            				}
HXLINE( 678)				j = i;
HXLINE( 679)				c = (int)1;
            			}
HXLINE( 681)			i = (i + (int)1);
            		}
HXLINE( 683)		{
HXLINE( 683)			int key5 = keys->__get(j);
HXDLIN( 683)			args->set((int)0,key5);
HXDLIN( 683)			if ((c > (int)1)) {
HXLINE( 683)				::Array< int > tmp1 = ::Array_obj< int >::__new(0);
HXDLIN( 683)				_gthis->getAll(key5,tmp1);
HXDLIN( 683)				args->set((int)1,tmp1->join(HX_(",",2c,00,00,00)));
            			}
            			else {
HXLINE( 683)				int i2 = _gthis->mHash->__get(((int)(key5 * (int)73856093) & (int)_gthis->mMask));
HXDLIN( 683)				int _hx_tmp1;
HXDLIN( 683)				if ((i2 == (int)-1)) {
HXLINE( 683)					_hx_tmp1 = (int)-2147483647;
            				}
            				else {
HXLINE( 683)					::Array< int > d1 = _gthis->mData;
HXDLIN( 683)					if ((d1->__get(i2) == key5)) {
HXLINE( 683)						_hx_tmp1 = d1->__get((i2 + (int)1));
            					}
            					else {
HXLINE( 683)						int v1 = (int)-2147483647;
HXDLIN( 683)						i2 = d1->__get((i2 + (int)2));
HXDLIN( 683)						while((i2 != (int)-1)){
HXLINE( 683)							if ((d1->__get(i2) == key5)) {
HXLINE( 683)								v1 = d1->__get((i2 + (int)1));
HXDLIN( 683)								goto _hx_goto_25;
            							}
HXDLIN( 683)							i2 = d1->__get((i2 + (int)2));
            						}
            						_hx_goto_25:;
HXDLIN( 683)						_hx_tmp1 = v1;
            					}
            				}
HXDLIN( 683)				args->set((int)1,_hx_tmp1);
            			}
HXDLIN( 683)			{
HXLINE( 683)				::String x3 = ::de::polygonal::Printf_obj::format(fmt,args);
HXDLIN( 683)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 683)					b->flush();
            				}
HXDLIN( 683)				if (hx::IsNull( b->b )) {
HXLINE( 683)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            				}
            				else {
HXLINE( 683)					::Array< ::String > b4 = b->b;
HXDLIN( 683)					b4->push(::Std_obj::string(x3));
            				}
            			}
            		}
HXLINE( 685)		{
HXLINE( 685)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 685)				b->flush();
            			}
HXDLIN( 685)			if (hx::IsNull( b->b )) {
HXLINE( 685)				b->b = ::Array_obj< ::String >::fromData( _hx_array_data_92025ef7_30,1);
            			}
            			else {
HXLINE( 685)				b->b->push(HX_("]",5d,00,00,00));
            			}
            		}
HXLINE( 686)		return b->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,toString,return )

bool IntIntHashTable_obj::has(int val){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_696_has)
HXLINE( 699)		bool exists = false;
HXDLIN( 699)		::Array< int > d = this->mData;
HXLINE( 700)		{
HXLINE( 700)			int _g1 = (int)0;
HXDLIN( 700)			int _g = this->capacity;
HXDLIN( 700)			while((_g1 < _g)){
HXLINE( 700)				_g1 = (_g1 + (int)1);
HXDLIN( 700)				int i = (_g1 - (int)1);
HXLINE( 702)				int v = d->__get(((i * (int)3) + (int)1));
HXLINE( 703)				if ((v == val)) {
HXLINE( 705)					exists = true;
HXLINE( 706)					goto _hx_goto_31;
            				}
            			}
            			_hx_goto_31:;
            		}
HXLINE( 709)		return exists;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,has,return )

bool IntIntHashTable_obj::hasKey(int key){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_716_hasKey)
HXLINE( 717)		int i = this->mHash->__get(((int)(key * (int)73856093) & (int)this->mMask));
HXLINE( 718)		if ((i == (int)-1)) {
HXLINE( 719)			return false;
            		}
            		else {
HXLINE( 722)			::Array< int > d = this->mData;
HXLINE( 729)			if ((d->__get(i) == key)) {
HXLINE( 730)				return true;
            			}
            			else {
HXLINE( 734)				bool exists = false;
HXLINE( 748)				i = d->__get((i + (int)2));
HXLINE( 749)				while((i != (int)-1)){
HXLINE( 751)					if ((d->__get(i) == key)) {
HXLINE( 753)						exists = true;
HXLINE( 754)						goto _hx_goto_33;
            					}
HXLINE( 756)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_33:;
HXLINE( 759)				return exists;
            			}
            		}
HXLINE( 718)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,hasKey,return )

int IntIntHashTable_obj::count(int key){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_768_count)
HXLINE( 769)		int c = (int)0;
HXLINE( 770)		int i = this->mHash->__get(((int)(key * (int)73856093) & (int)this->mMask));
HXLINE( 771)		if ((i == (int)-1)) {
HXLINE( 772)			return c;
            		}
            		else {
HXLINE( 775)			::Array< int > d = this->mData;
HXLINE( 785)			while((i != (int)-1)){
HXLINE( 787)				if ((d->__get(i) == key)) {
HXLINE( 787)					c = (c + (int)1);
            				}
HXLINE( 788)				i = d->__get((i + (int)2));
            			}
HXLINE( 791)			return c;
            		}
HXLINE( 771)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,count,return )

int IntIntHashTable_obj::get(int key){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_799_get)
HXLINE( 800)		int i = this->mHash->__get(((int)(key * (int)73856093) & (int)this->mMask));
HXLINE( 801)		if ((i == (int)-1)) {
HXLINE( 802)			return (int)-2147483647;
            		}
            		else {
HXLINE( 805)			::Array< int > d = this->mData;
HXLINE( 811)			if ((d->__get(i) == key)) {
HXLINE( 812)				return d->__get((i + (int)1));
            			}
            			else {
HXLINE( 816)				int v = (int)-2147483647;
HXLINE( 830)				i = d->__get((i + (int)2));
HXLINE( 831)				while((i != (int)-1)){
HXLINE( 833)					if ((d->__get(i) == key)) {
HXLINE( 835)						v = d->__get((i + (int)1));
HXLINE( 836)						goto _hx_goto_37;
            					}
HXLINE( 838)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_37:;
HXLINE( 841)				return v;
            			}
            		}
HXLINE( 801)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,get,return )

int IntIntHashTable_obj::getAll(int key,::Array< int > out){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_851_getAll)
HXLINE( 852)		int i = this->mHash->__get(((int)(key * (int)73856093) & (int)this->mMask));
HXLINE( 853)		if ((i == (int)-1)) {
HXLINE( 854)			return (int)0;
            		}
            		else {
HXLINE( 857)			int c = (int)0;
HXLINE( 858)			::Array< int > d = this->mData;
HXLINE( 872)			if ((d->__get(i) == key)) {
HXLINE( 873)				c = (c + (int)1);
HXDLIN( 873)				out[(c - (int)1)] = d->__get((i + (int)1));
            			}
HXLINE( 874)			i = d->__get((i + (int)2));
HXLINE( 875)			while((i != (int)-1)){
HXLINE( 877)				if ((d->__get(i) == key)) {
HXLINE( 878)					c = (c + (int)1);
HXDLIN( 878)					out[(c - (int)1)] = d->__get((i + (int)1));
            				}
HXLINE( 879)				i = d->__get((i + (int)2));
            			}
HXLINE( 882)			return c;
            		}
HXLINE( 853)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntIntHashTable_obj,getAll,return )

bool IntIntHashTable_obj::hasPair(int key,int val){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_890_hasPair)
HXLINE( 893)		int i = this->mHash->__get(((int)(key * (int)73856093) & (int)this->mMask));
HXLINE( 894)		if ((i == (int)-1)) {
HXLINE( 895)			return false;
            		}
            		else {
HXLINE( 898)			::Array< int > d = this->mData;
HXLINE( 916)			if ((d->__get(i) == key)) {
HXLINE( 917)				if ((d->__get((i + (int)1)) == val)) {
HXLINE( 918)					return true;
            				}
            			}
HXLINE( 920)			i = d->__get((i + (int)2));
HXLINE( 921)			while((i != (int)-1)){
HXLINE( 923)				if ((d->__get(i) == key)) {
HXLINE( 924)					if ((d->__get((i + (int)1)) == val)) {
HXLINE( 925)						return true;
            					}
            				}
HXLINE( 926)				i = d->__get((i + (int)2));
            			}
HXLINE( 929)			return false;
            		}
HXLINE( 894)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntIntHashTable_obj,hasPair,return )

bool IntIntHashTable_obj::unsetPair(int key,int val){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_938_unsetPair)
HXLINE( 941)		int b = ((int)(key * (int)73856093) & (int)this->mMask);
HXDLIN( 941)		::Array< int > h = this->mHash;
HXLINE( 942)		int i = h->__get(b);
HXLINE( 943)		if ((i == (int)-1)) {
HXLINE( 944)			return false;
            		}
            		else {
HXLINE( 947)			::Array< int > d = this->mData;
HXLINE( 952)			bool _hx_tmp;
HXDLIN( 952)			if ((key == d->__get(i))) {
HXLINE( 952)				_hx_tmp = (val == d->__get((i + (int)1)));
            			}
            			else {
HXLINE( 952)				_hx_tmp = false;
            			}
HXDLIN( 952)			if (_hx_tmp) {
HXLINE( 958)				if ((d->__get((i + (int)2)) == (int)-1)) {
HXLINE( 960)					h[b] = (int)-1;
            				}
            				else {
HXLINE( 962)					h[b] = d->__get((i + (int)2));
            				}
HXLINE( 964)				int j = ::Std_obj::_hx_int(((Float)i / (Float)(int)3));
HXLINE( 965)				this->mNext[j] = this->mFree;
HXLINE( 966)				this->mFree = j;
HXLINE( 972)				d[(i + (int)1)] = (int)-2147483647;
HXLINE( 973)				d[(i + (int)2)] = (int)-1;
HXLINE( 976)				this->mSize--;
HXLINE( 977)				return true;
            			}
            			else {
HXLINE( 981)				bool exists = false;
HXLINE( 983)				int i0 = i;
HXLINE( 987)				i = d->__get((i + (int)2));
HXLINE( 990)				while((i != (int)-1)){
HXLINE(1002)					bool _hx_tmp1;
HXDLIN(1002)					if ((d->__get(i) == key)) {
HXLINE(1002)						_hx_tmp1 = (d->__get((i + (int)1)) == val);
            					}
            					else {
HXLINE(1002)						_hx_tmp1 = false;
            					}
HXDLIN(1002)					if (_hx_tmp1) {
HXLINE(1004)						exists = true;
HXLINE(1005)						goto _hx_goto_43;
            					}
HXLINE(1007)					i0 = i;
HXDLIN(1007)					i = d->__get((i0 + (int)2));
            				}
            				_hx_goto_43:;
HXLINE(1011)				if (exists) {
HXLINE(1013)					d[(i0 + (int)2)] = d->__get((i + (int)2));
HXLINE(1015)					int j1 = ::Std_obj::_hx_int(((Float)i / (Float)(int)3));
HXLINE(1016)					this->mNext[j1] = this->mFree;
HXLINE(1017)					this->mFree = j1;
HXLINE(1024)					d[(i + (int)1)] = (int)-2147483647;
HXLINE(1025)					d[(i + (int)2)] = (int)-1;
HXLINE(1028)					--this->mSize;
HXLINE(1029)					return true;
            				}
            				else {
HXLINE(1032)					return false;
            				}
            			}
            		}
HXLINE( 943)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntIntHashTable_obj,unsetPair,return )

bool IntIntHashTable_obj::set(int key,int val){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1045_set)
HXLINE(1048)		if ((this->mSize == this->capacity)) {
HXLINE(1048)			this->grow();
            		}
HXLINE(1050)		::Array< int > d = this->mData;
HXDLIN(1050)		::Array< int > h = this->mHash;
HXLINE(1051)		int i = (this->mFree * (int)3);
HXLINE(1052)		this->mFree = this->mNext->__get(this->mFree);
HXLINE(1059)		d[i] = key;
HXLINE(1060)		d[(i + (int)1)] = val;
HXLINE(1063)		int b = ((int)(key * (int)73856093) & (int)this->mMask);
HXLINE(1075)		int j = h->__get(b);
HXLINE(1076)		if ((j == (int)-1)) {
HXLINE(1078)			h[b] = i;
HXLINE(1079)			this->mSize++;
HXLINE(1080)			return true;
            		}
            		else {
HXLINE(1090)			bool first = (d->__get(j) != key);
HXLINE(1091)			int t = d->__get((j + (int)2));
HXLINE(1094)			while((t != (int)-1)){
HXLINE(1102)				if ((d->__get(t) == key)) {
HXLINE(1102)					first = false;
            				}
HXLINE(1103)				j = t;
HXLINE(1104)				t = d->__get((t + (int)2));
            			}
HXLINE(1111)			d[(j + (int)2)] = i;
HXLINE(1114)			this->mSize++;
HXLINE(1115)			return first;
            		}
HXLINE(1076)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntIntHashTable_obj,set,return )

bool IntIntHashTable_obj::unset(int key){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1124_unset)
HXLINE(1125)		int b = ((int)(key * (int)73856093) & (int)this->mMask);
HXDLIN(1125)		::Array< int > h = this->mHash;
HXLINE(1126)		int i = h->__get(b);
HXLINE(1127)		if ((i == (int)-1)) {
HXLINE(1128)			return false;
            		}
            		else {
HXLINE(1131)			::Array< int > d = this->mData;
HXLINE(1137)			if ((key == d->__get(i))) {
HXLINE(1143)				if ((d->__get((i + (int)2)) == (int)-1)) {
HXLINE(1145)					h[b] = (int)-1;
            				}
            				else {
HXLINE(1147)					h[b] = d->__get((i + (int)2));
            				}
HXLINE(1149)				int j = ::Std_obj::_hx_int(((Float)i / (Float)(int)3));
HXLINE(1150)				this->mNext[j] = this->mFree;
HXLINE(1151)				this->mFree = j;
HXLINE(1157)				d[(i + (int)1)] = (int)-2147483647;
HXLINE(1158)				d[(i + (int)2)] = (int)-1;
HXLINE(1161)				this->mSize--;
HXLINE(1162)				return true;
            			}
            			else {
HXLINE(1166)				bool exists = false;
HXLINE(1168)				int i0 = i;
HXLINE(1172)				i = d->__get((i + (int)2));
HXLINE(1175)				while((i != (int)-1)){
HXLINE(1187)					if ((d->__get(i) == key)) {
HXLINE(1189)						exists = true;
HXLINE(1190)						goto _hx_goto_47;
            					}
HXLINE(1192)					i0 = i;
HXDLIN(1192)					i = d->__get((i0 + (int)2));
            				}
            				_hx_goto_47:;
HXLINE(1196)				if (exists) {
HXLINE(1198)					d[(i0 + (int)2)] = d->__get((i + (int)2));
HXLINE(1200)					int j1 = ::Std_obj::_hx_int(((Float)i / (Float)(int)3));
HXLINE(1201)					this->mNext[j1] = this->mFree;
HXLINE(1202)					this->mFree = j1;
HXLINE(1209)					d[(i + (int)1)] = (int)-2147483647;
HXLINE(1210)					d[(i + (int)2)] = (int)-1;
HXLINE(1213)					this->mSize--;
HXLINE(1214)					return true;
            				}
            				else {
HXLINE(1217)					return false;
            				}
            			}
            		}
HXLINE(1127)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,unset,return )

::Dynamic IntIntHashTable_obj::toValSet(){
            	HX_GC_STACKFRAME(&_hx_pos_78923e595580a1ed_1226_toValSet)
HXLINE(1227)		 ::de::polygonal::ds::IntHashSet s =  ::de::polygonal::ds::IntHashSet_obj::__alloc( HX_CTX ,this->capacity,null());
HXDLIN(1227)		::Array< int > d = this->mData;
HXLINE(1228)		{
HXLINE(1228)			int _g1 = (int)0;
HXDLIN(1228)			int _g = this->capacity;
HXDLIN(1228)			while((_g1 < _g)){
HXLINE(1228)				_g1 = (_g1 + (int)1);
HXDLIN(1228)				int i = (_g1 - (int)1);
HXLINE(1230)				int v = d->__get(((i * (int)3) + (int)1));
HXLINE(1231)				if ((v != (int)-2147483647)) {
HXLINE(1231)					int b = ((int)(v * (int)73856093) & (int)s->mMask);
HXDLIN(1231)					::Array< int > d1 = s->mData;
HXDLIN(1231)					int j = s->mHash->__get(b);
HXDLIN(1231)					if ((j == (int)-1)) {
HXLINE(1231)						if ((s->mSize == s->capacity)) {
HXLINE(1231)							s->grow();
HXDLIN(1231)							d1 = s->mData;
            						}
HXDLIN(1231)						j = ((int)s->mFree << (int)(int)1);
HXDLIN(1231)						s->mFree = s->mNext->__get(s->mFree);
HXDLIN(1231)						s->mHash[b] = j;
HXDLIN(1231)						d1[j] = v;
HXDLIN(1231)						s->mSize++;
            					}
            					else {
HXLINE(1231)						if ((d1->__get(j) != v)) {
HXLINE(1231)							int p = d1->__get((j + (int)1));
HXDLIN(1231)							while((p != (int)-1)){
HXLINE(1231)								if ((d1->__get(p) == v)) {
HXLINE(1231)									j = (int)-1;
HXDLIN(1231)									goto _hx_goto_50;
            								}
HXDLIN(1231)								j = p;
HXDLIN(1231)								p = d1->__get((p + (int)1));
            							}
            							_hx_goto_50:;
HXDLIN(1231)							if ((j != (int)-1)) {
HXLINE(1231)								if ((s->mSize == s->capacity)) {
HXLINE(1231)									s->grow();
HXDLIN(1231)									d1 = s->mData;
            								}
HXDLIN(1231)								p = ((int)s->mFree << (int)(int)1);
HXDLIN(1231)								s->mFree = s->mNext->__get(s->mFree);
HXDLIN(1231)								d1[p] = v;
HXDLIN(1231)								d1[(j + (int)1)] = p;
HXDLIN(1231)								s->mSize++;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1233)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,toValSet,return )

::Dynamic IntIntHashTable_obj::toKeySet(){
            	HX_GC_STACKFRAME(&_hx_pos_78923e595580a1ed_1240_toKeySet)
HXLINE(1241)		 ::de::polygonal::ds::IntHashSet s =  ::de::polygonal::ds::IntHashSet_obj::__alloc( HX_CTX ,this->capacity,null());
HXDLIN(1241)		::Array< int > d = this->mData;
HXLINE(1242)		{
HXLINE(1242)			int _g1 = (int)0;
HXDLIN(1242)			int _g = this->capacity;
HXDLIN(1242)			while((_g1 < _g)){
HXLINE(1242)				_g1 = (_g1 + (int)1);
HXDLIN(1242)				int i = (_g1 - (int)1);
HXLINE(1244)				int v = d->__get(((i * (int)3) + (int)1));
HXLINE(1245)				if ((v != (int)-2147483647)) {
HXLINE(1247)					int val = d->__get((i * (int)3));
HXDLIN(1247)					int b = ((int)(val * (int)73856093) & (int)s->mMask);
HXDLIN(1247)					::Array< int > d1 = s->mData;
HXDLIN(1247)					int j = s->mHash->__get(b);
HXDLIN(1247)					if ((j == (int)-1)) {
HXLINE(1247)						if ((s->mSize == s->capacity)) {
HXLINE(1247)							s->grow();
HXDLIN(1247)							d1 = s->mData;
            						}
HXDLIN(1247)						j = ((int)s->mFree << (int)(int)1);
HXDLIN(1247)						s->mFree = s->mNext->__get(s->mFree);
HXDLIN(1247)						s->mHash[b] = j;
HXDLIN(1247)						d1[j] = val;
HXDLIN(1247)						s->mSize++;
            					}
            					else {
HXLINE(1247)						if ((d1->__get(j) != val)) {
HXLINE(1247)							int p = d1->__get((j + (int)1));
HXDLIN(1247)							while((p != (int)-1)){
HXLINE(1247)								if ((d1->__get(p) == val)) {
HXLINE(1247)									j = (int)-1;
HXDLIN(1247)									goto _hx_goto_53;
            								}
HXDLIN(1247)								j = p;
HXDLIN(1247)								p = d1->__get((p + (int)1));
            							}
            							_hx_goto_53:;
HXDLIN(1247)							if ((j != (int)-1)) {
HXLINE(1247)								if ((s->mSize == s->capacity)) {
HXLINE(1247)									s->grow();
HXDLIN(1247)									d1 = s->mData;
            								}
HXDLIN(1247)								p = ((int)s->mFree << (int)(int)1);
HXDLIN(1247)								s->mFree = s->mNext->__get(s->mFree);
HXDLIN(1247)								d1[p] = val;
HXDLIN(1247)								d1[(j + (int)1)] = p;
HXDLIN(1247)								s->mSize++;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1250)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,toKeySet,return )

::Dynamic IntIntHashTable_obj::keys(){
            	HX_GC_STACKFRAME(&_hx_pos_78923e595580a1ed_1262_keys)
HXDLIN(1262)		return  ::de::polygonal::ds::IntIntHashTableKeyIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,keys,return )

 ::de::polygonal::ds::IntIntHashTable IntIntHashTable_obj::pack(){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1269_pack)
HXLINE(1270)		if ((this->capacity == this->mMinCapacity)) {
HXLINE(1270)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1272)		int oldCapacity = this->capacity;
HXLINE(1273)		int x = this->mSize;
HXDLIN(1273)		int y = this->mMinCapacity;
HXDLIN(1273)		int _hx_tmp;
HXDLIN(1273)		if ((x > y)) {
HXLINE(1273)			_hx_tmp = x;
            		}
            		else {
HXLINE(1273)			_hx_tmp = y;
            		}
HXDLIN(1273)		this->capacity = _hx_tmp;
HXLINE(1275)		::Array< int > src = this->mData;
HXDLIN(1275)		::Array< int > dst;
HXLINE(1276)		int e = (int)0;
HXDLIN(1276)		::Array< int > t = this->mHash;
HXDLIN(1276)		 ::Dynamic j;
HXLINE(1281)		int len = (this->capacity * (int)3);
HXDLIN(1281)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN(1281)		_hx_array_set_size_exact(a,len);
HXDLIN(1281)		dst = a;
HXLINE(1284)		int j1 = (int)2;
HXLINE(1285)		{
HXLINE(1285)			int _g1 = (int)0;
HXDLIN(1285)			int _g = this->capacity;
HXDLIN(1285)			while((_g1 < _g)){
HXLINE(1285)				_g1 = (_g1 + (int)1);
HXDLIN(1285)				int i = (_g1 - (int)1);
HXLINE(1287)				dst[(j1 - (int)1)] = (int)-2147483647;
HXLINE(1288)				dst[j1] = (int)-1;
HXLINE(1289)				j1 = (j1 + (int)3);
            			}
            		}
HXLINE(1323)		{
HXLINE(1323)			int _g11 = (int)0;
HXDLIN(1323)			int _g2 = this->slotCount;
HXDLIN(1323)			while((_g11 < _g2)){
HXLINE(1323)				_g11 = (_g11 + (int)1);
HXDLIN(1323)				int i1 = (_g11 - (int)1);
HXLINE(1325)				j1 = t->__get(i1);
HXLINE(1326)				if ((j1 == (int)-1)) {
HXLINE(1326)					continue;
            				}
HXLINE(1328)				t[i1] = e;
HXLINE(1329)				dst[e] = src->__get(j1);
HXLINE(1330)				dst[(e + (int)1)] = src->__get((j1 + (int)1));
HXLINE(1331)				dst[(e + (int)2)] = (int)-1;
HXLINE(1333)				e = (e + (int)3);
HXLINE(1334)				j1 = src->__get((j1 + (int)2));
HXLINE(1335)				while((j1 != (int)-1)){
HXLINE(1337)					dst[(e - (int)1)] = e;
HXLINE(1338)					dst[e] = src->__get(j1);
HXLINE(1339)					dst[(e + (int)1)] = src->__get((j1 + (int)1));
HXLINE(1340)					dst[(e + (int)2)] = (int)-1;
HXLINE(1341)					e = (e + (int)3);
HXLINE(1342)					j1 = src->__get((j1 + (int)2));
            				}
            			}
            		}
HXLINE(1345)		this->mData = dst;
HXLINE(1346)		int len1 = this->capacity;
HXDLIN(1346)		::Array< int > a1 = ::Array_obj< int >::__new();
HXDLIN(1346)		_hx_array_set_size_exact(a1,len1);
HXDLIN(1346)		this->mNext = a1;
HXLINE(1349)		::Array< int > n = this->mNext;
HXLINE(1350)		{
HXLINE(1350)			int _g12 = (int)0;
HXDLIN(1350)			int _g3 = (this->capacity - (int)1);
HXDLIN(1350)			while((_g12 < _g3)){
HXLINE(1350)				_g12 = (_g12 + (int)1);
HXDLIN(1350)				int i2 = (_g12 - (int)1);
HXDLIN(1350)				n[i2] = (i2 + (int)1);
            			}
            		}
HXLINE(1351)		n[(this->capacity - (int)1)] = (int)-1;
HXLINE(1352)		this->mFree = (int)-1;
HXLINE(1353)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,pack,return )

 ::de::polygonal::ds::IntIntHashTable IntIntHashTable_obj::iter( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1360_iter)
HXLINE(1362)		::Array< int > d = this->mData;
HXDLIN(1362)		int j;
HXDLIN(1362)		int v;
HXLINE(1363)		{
HXLINE(1363)			int _g1 = (int)0;
HXDLIN(1363)			int _g = this->capacity;
HXDLIN(1363)			while((_g1 < _g)){
HXLINE(1363)				_g1 = (_g1 + (int)1);
HXDLIN(1363)				int i = (_g1 - (int)1);
HXLINE(1365)				j = (i * (int)3);
HXLINE(1366)				v = d->__get((j + (int)1));
HXLINE(1367)				if ((v != (int)-2147483647)) {
HXLINE(1367)					f(d->__get(j),v);
            				}
            			}
            		}
HXLINE(1369)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,iter,return )

int IntIntHashTable_obj::hashCode(int x){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1374_hashCode)
HXDLIN(1374)		return ((int)(x * (int)73856093) & (int)this->mMask);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,hashCode,return )

void IntIntHashTable_obj::grow(){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1378_grow)
HXLINE(1379)		int oldCapacity = this->capacity;
HXLINE(1380)		this->capacity = ::de::polygonal::ds::tools::GrowthRate_obj::compute(this->growthRate,this->capacity);
HXLINE(1382)		::Array< int > t;
HXLINE(1388)		int len = this->capacity;
HXDLIN(1388)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN(1388)		_hx_array_set_size_exact(a,len);
HXDLIN(1388)		t = a;
HXLINE(1389)		if ((oldCapacity > (int)0)) {
HXLINE(1389)			t->blit((int)0,this->mNext,(int)0,oldCapacity);
            		}
HXLINE(1390)		this->mNext = t;
HXLINE(1391)		int len1 = (this->capacity * (int)3);
HXDLIN(1391)		::Array< int > a1 = ::Array_obj< int >::__new();
HXDLIN(1391)		_hx_array_set_size_exact(a1,len1);
HXDLIN(1391)		t = a1;
HXLINE(1392)		{
HXLINE(1392)			int n = (oldCapacity * (int)3);
HXDLIN(1392)			if ((n > (int)0)) {
HXLINE(1392)				t->blit((int)0,this->mData,(int)0,n);
            			}
            		}
HXLINE(1393)		this->mData = t;
HXLINE(1396)		t = this->mNext;
HXLINE(1397)		{
HXLINE(1397)			int _g1 = (oldCapacity - (int)1);
HXDLIN(1397)			int _g = (this->capacity - (int)1);
HXDLIN(1397)			while((_g1 < _g)){
HXLINE(1397)				_g1 = (_g1 + (int)1);
HXDLIN(1397)				int i = (_g1 - (int)1);
HXDLIN(1397)				t[i] = (i + (int)1);
            			}
            		}
HXLINE(1398)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE(1399)		this->mFree = oldCapacity;
HXLINE(1401)		int j = ((oldCapacity * (int)3) + (int)2);
HXDLIN(1401)		::Array< int > t1 = this->mData;
HXLINE(1402)		{
HXLINE(1402)			int _g11 = (int)0;
HXDLIN(1402)			int _g2 = (this->capacity - oldCapacity);
HXDLIN(1402)			while((_g11 < _g2)){
HXLINE(1402)				_g11 = (_g11 + (int)1);
HXDLIN(1402)				int i1 = (_g11 - (int)1);
HXLINE(1409)				t1[(j - (int)1)] = (int)-2147483647;
HXLINE(1410)				t1[j] = (int)-1;
HXLINE(1412)				j = (j + (int)3);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,grow,(void))

int IntIntHashTable_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1424_get_size)
HXDLIN(1424)		return this->mSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,get_size,return )

void IntIntHashTable_obj::free(){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1433_free)
HXLINE(1440)		this->mHash = null();
HXLINE(1441)		this->mData = null();
HXLINE(1442)		this->mNext = null();
HXLINE(1443)		if (hx::IsNotNull( this->mIterator )) {
HXLINE(1445)			this->mIterator->free();
HXLINE(1446)			this->mIterator = null();
            		}
HXLINE(1448)		this->mTmpBuffer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,free,(void))

bool IntIntHashTable_obj::contains(int val){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1456_contains)
HXDLIN(1456)		return this->has(val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,contains,return )

bool IntIntHashTable_obj::remove(int val){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1464_remove)
HXLINE(1467)		int c = (int)0;
HXLINE(1468)		::Array< int > keys = this->mTmpBuffer;
HXLINE(1469)		int max = this->mTmpBufferSize;
HXLINE(1470)		::Array< int > d = this->mData;
HXDLIN(1470)		int j;
HXLINE(1492)		{
HXLINE(1492)			int _g1 = (int)0;
HXDLIN(1492)			int _g = this->capacity;
HXDLIN(1492)			while((_g1 < _g)){
HXLINE(1492)				_g1 = (_g1 + (int)1);
HXDLIN(1492)				int i = (_g1 - (int)1);
HXLINE(1494)				j = (i * (int)3);
HXLINE(1495)				if ((d->__get((j + (int)1)) == val)) {
HXLINE(1497)					if ((c == max)) {
HXLINE(1499)						max = ((int)max << (int)(int)1);
HXLINE(1500)						this->mTmpBufferSize = max;
HXLINE(1501)						::Array< int > a = ::Array_obj< int >::__new();
HXDLIN(1501)						_hx_array_set_size_exact(a,max);
HXDLIN(1501)						::Array< int > t = a;
HXLINE(1502)						if ((c > (int)0)) {
HXLINE(1502)							t->blit((int)0,this->mTmpBuffer,(int)0,c);
            						}
HXLINE(1503)						keys = t;
HXDLIN(1503)						this->mTmpBuffer = keys;
            					}
HXLINE(1506)					{
HXLINE(1506)						c = (c + (int)1);
HXDLIN(1506)						keys[(c - (int)1)] = d->__get(j);
            					}
            				}
            			}
            		}
HXLINE(1511)		{
HXLINE(1511)			int _g11 = (int)0;
HXDLIN(1511)			int _g2 = c;
HXDLIN(1511)			while((_g11 < _g2)){
HXLINE(1511)				_g11 = (_g11 + (int)1);
HXDLIN(1511)				int i1 = (_g11 - (int)1);
HXDLIN(1511)				{
HXLINE(1511)					int key = keys->__get(i1);
HXDLIN(1511)					int b = ((int)(key * (int)73856093) & (int)this->mMask);
HXDLIN(1511)					::Array< int > h = this->mHash;
HXDLIN(1511)					int i2 = h->__get(b);
HXDLIN(1511)					if ((i2 != (int)-1)) {
HXLINE(1511)						::Array< int > d1 = this->mData;
HXDLIN(1511)						if ((key == d1->__get(i2))) {
HXLINE(1511)							if ((d1->__get((i2 + (int)2)) == (int)-1)) {
HXLINE(1511)								h[b] = (int)-1;
            							}
            							else {
HXLINE(1511)								h[b] = d1->__get((i2 + (int)2));
            							}
HXDLIN(1511)							int j1 = ::Std_obj::_hx_int(((Float)i2 / (Float)(int)3));
HXDLIN(1511)							this->mNext[j1] = this->mFree;
HXDLIN(1511)							this->mFree = j1;
HXDLIN(1511)							d1[(i2 + (int)1)] = (int)-2147483647;
HXDLIN(1511)							d1[(i2 + (int)2)] = (int)-1;
HXDLIN(1511)							this->mSize--;
            						}
            						else {
HXLINE(1511)							bool exists = false;
HXDLIN(1511)							int i0 = i2;
HXDLIN(1511)							i2 = d1->__get((i2 + (int)2));
HXDLIN(1511)							while((i2 != (int)-1)){
HXLINE(1511)								if ((d1->__get(i2) == key)) {
HXLINE(1511)									exists = true;
HXDLIN(1511)									goto _hx_goto_72;
            								}
HXDLIN(1511)								i0 = i2;
HXDLIN(1511)								i2 = d1->__get((i0 + (int)2));
            							}
            							_hx_goto_72:;
HXDLIN(1511)							if (exists) {
HXLINE(1511)								d1[(i0 + (int)2)] = d1->__get((i2 + (int)2));
HXDLIN(1511)								int j2 = ::Std_obj::_hx_int(((Float)i2 / (Float)(int)3));
HXDLIN(1511)								this->mNext[j2] = this->mFree;
HXDLIN(1511)								this->mFree = j2;
HXDLIN(1511)								d1[(i2 + (int)1)] = (int)-2147483647;
HXDLIN(1511)								d1[(i2 + (int)2)] = (int)-1;
HXDLIN(1511)								this->mSize--;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1512)		return (c > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,remove,return )

void IntIntHashTable_obj::clear(hx::Null< bool >  __o_gc){
bool gc = __o_gc.Default(false);
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1521_clear)
HXLINE(1525)		::Array< int > h = this->mHash;
HXLINE(1526)		{
HXLINE(1526)			int _g1 = (int)0;
HXDLIN(1526)			int _g = this->slotCount;
HXDLIN(1526)			while((_g1 < _g)){
HXLINE(1526)				_g1 = (_g1 + (int)1);
HXDLIN(1526)				int i = (_g1 - (int)1);
HXDLIN(1526)				h[i] = (int)-1;
            			}
            		}
HXLINE(1529)		int j = (int)2;
HXDLIN(1529)		::Array< int > t = this->mData;
HXLINE(1530)		{
HXLINE(1530)			int _g11 = (int)0;
HXDLIN(1530)			int _g2 = this->capacity;
HXDLIN(1530)			while((_g11 < _g2)){
HXLINE(1530)				_g11 = (_g11 + (int)1);
HXDLIN(1530)				int i1 = (_g11 - (int)1);
HXLINE(1532)				t[(j - (int)1)] = (int)-2147483647;
HXLINE(1533)				t[j] = (int)-1;
HXLINE(1534)				j = (j + (int)3);
            			}
            		}
HXLINE(1537)		t = this->mNext;
HXLINE(1538)		{
HXLINE(1538)			int _g12 = (int)0;
HXDLIN(1538)			int _g3 = (this->capacity - (int)1);
HXDLIN(1538)			while((_g12 < _g3)){
HXLINE(1538)				_g12 = (_g12 + (int)1);
HXDLIN(1538)				int i2 = (_g12 - (int)1);
HXDLIN(1538)				t[i2] = (i2 + (int)1);
            			}
            		}
HXLINE(1539)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE(1541)		this->mFree = (int)0;
HXLINE(1542)		this->mSize = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntIntHashTable_obj,clear,(void))

::Dynamic IntIntHashTable_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_78923e595580a1ed_1554_iterator)
HXDLIN(1554)		if (this->reuseIterator) {
HXLINE(1556)			if (hx::IsNull( this->mIterator )) {
HXLINE(1557)				this->mIterator =  ::de::polygonal::ds::IntIntHashTableValIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE(1559)				this->mIterator->reset();
            			}
HXLINE(1560)			return this->mIterator;
            		}
            		else {
HXLINE(1563)			return  ::de::polygonal::ds::IntIntHashTableValIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1554)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,iterator,return )

bool IntIntHashTable_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1571_isEmpty)
HXDLIN(1571)		return (this->mSize == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,isEmpty,return )

::Array< int > IntIntHashTable_obj::toArray(){
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_1578_toArray)
HXLINE(1579)		if ((this->mSize == (int)0)) {
HXLINE(1579)			return ::Array_obj< int >::__new(0);
            		}
HXLINE(1581)		int len = this->mSize;
HXDLIN(1581)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN(1581)		_hx_array_set_size_exact(a,len);
HXDLIN(1581)		::Array< int > out = a;
HXLINE(1582)		int j = (int)0;
HXDLIN(1582)		int v;
HXDLIN(1582)		::Array< int > d = this->mData;
HXLINE(1583)		{
HXLINE(1583)			int _g1 = (int)0;
HXDLIN(1583)			int _g = this->capacity;
HXDLIN(1583)			while((_g1 < _g)){
HXLINE(1583)				_g1 = (_g1 + (int)1);
HXDLIN(1583)				int i = (_g1 - (int)1);
HXLINE(1585)				v = d->__get(((i * (int)3) + (int)1));
HXLINE(1586)				if ((v != (int)-2147483647)) {
HXLINE(1586)					j = (j + (int)1);
HXDLIN(1586)					out[(j - (int)1)] = v;
            				}
            			}
            		}
HXLINE(1588)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntIntHashTable_obj,toArray,return )

::Dynamic IntIntHashTable_obj::clone(hx::Null< bool >  __o_byRef, ::Dynamic copier){
bool byRef = __o_byRef.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_78923e595580a1ed_1595_clone)
HXLINE(1596)		 ::de::polygonal::ds::IntIntHashTable c =  ::de::polygonal::ds::IntIntHashTable_obj::__alloc( HX_CTX ,this->slotCount,this->capacity);
HXLINE(1603)		{
HXLINE(1603)			int n = this->slotCount;
HXDLIN(1603)			if ((n > (int)0)) {
HXLINE(1603)				c->mHash->blit((int)0,this->mHash,(int)0,n);
            			}
            		}
HXLINE(1604)		{
HXLINE(1604)			int n1 = (this->capacity * (int)3);
HXDLIN(1604)			if ((n1 > (int)0)) {
HXLINE(1604)				c->mData->blit((int)0,this->mData,(int)0,n1);
            			}
            		}
HXLINE(1605)		{
HXLINE(1605)			int n2 = this->capacity;
HXDLIN(1605)			if ((n2 > (int)0)) {
HXLINE(1605)				c->mNext->blit((int)0,this->mNext,(int)0,n2);
            			}
            		}
HXLINE(1608)		c->mMask = this->mMask;
HXLINE(1609)		c->slotCount = this->slotCount;
HXLINE(1610)		c->capacity = this->capacity;
HXLINE(1611)		c->mFree = this->mFree;
HXLINE(1612)		c->mSize = this->mSize;
HXLINE(1613)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntIntHashTable_obj,clone,return )

int IntIntHashTable_obj::KEY_ABSENT;

int IntIntHashTable_obj::VAL_ABSENT;

int IntIntHashTable_obj::EMPTY_SLOT;

int IntIntHashTable_obj::NULL_POINTER;


hx::ObjectPtr< IntIntHashTable_obj > IntIntHashTable_obj::__new(int slotCount,hx::Null< int >  __o_initialCapacity) {
	hx::ObjectPtr< IntIntHashTable_obj > __this = new IntIntHashTable_obj();
	__this->__construct(slotCount,__o_initialCapacity);
	return __this;
}

hx::ObjectPtr< IntIntHashTable_obj > IntIntHashTable_obj::__alloc(hx::Ctx *_hx_ctx,int slotCount,hx::Null< int >  __o_initialCapacity) {
	IntIntHashTable_obj *__this = (IntIntHashTable_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IntIntHashTable_obj), true, "de.polygonal.ds.IntIntHashTable"));
	*(void **)__this = IntIntHashTable_obj::_hx_vtable;
	__this->__construct(slotCount,__o_initialCapacity);
	return __this;
}

IntIntHashTable_obj::IntIntHashTable_obj()
{
}

void IntIntHashTable_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IntIntHashTable);
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(capacity,"capacity");
	HX_MARK_MEMBER_NAME(growthRate,"growthRate");
	HX_MARK_MEMBER_NAME(reuseIterator,"reuseIterator");
	HX_MARK_MEMBER_NAME(slotCount,"slotCount");
	HX_MARK_MEMBER_NAME(mHash,"mHash");
	HX_MARK_MEMBER_NAME(mData,"mData");
	HX_MARK_MEMBER_NAME(mNext,"mNext");
	HX_MARK_MEMBER_NAME(mMask,"mMask");
	HX_MARK_MEMBER_NAME(mFree,"mFree");
	HX_MARK_MEMBER_NAME(mSize,"mSize");
	HX_MARK_MEMBER_NAME(mMinCapacity,"mMinCapacity");
	HX_MARK_MEMBER_NAME(mIterator,"mIterator");
	HX_MARK_MEMBER_NAME(mTmpBuffer,"mTmpBuffer");
	HX_MARK_MEMBER_NAME(mTmpBufferSize,"mTmpBufferSize");
	HX_MARK_END_CLASS();
}

void IntIntHashTable_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(capacity,"capacity");
	HX_VISIT_MEMBER_NAME(growthRate,"growthRate");
	HX_VISIT_MEMBER_NAME(reuseIterator,"reuseIterator");
	HX_VISIT_MEMBER_NAME(slotCount,"slotCount");
	HX_VISIT_MEMBER_NAME(mHash,"mHash");
	HX_VISIT_MEMBER_NAME(mData,"mData");
	HX_VISIT_MEMBER_NAME(mNext,"mNext");
	HX_VISIT_MEMBER_NAME(mMask,"mMask");
	HX_VISIT_MEMBER_NAME(mFree,"mFree");
	HX_VISIT_MEMBER_NAME(mSize,"mSize");
	HX_VISIT_MEMBER_NAME(mMinCapacity,"mMinCapacity");
	HX_VISIT_MEMBER_NAME(mIterator,"mIterator");
	HX_VISIT_MEMBER_NAME(mTmpBuffer,"mTmpBuffer");
	HX_VISIT_MEMBER_NAME(mTmpBufferSize,"mTmpBufferSize");
}

hx::Val IntIntHashTable_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys_dyn() ); }
		if (HX_FIELD_EQ(inName,"pack") ) { return hx::Val( pack_dyn() ); }
		if (HX_FIELD_EQ(inName,"iter") ) { return hx::Val( iter_dyn() ); }
		if (HX_FIELD_EQ(inName,"grow") ) { return hx::Val( grow_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mHash") ) { return hx::Val( mHash ); }
		if (HX_FIELD_EQ(inName,"mData") ) { return hx::Val( mData ); }
		if (HX_FIELD_EQ(inName,"mNext") ) { return hx::Val( mNext ); }
		if (HX_FIELD_EQ(inName,"mMask") ) { return hx::Val( mMask ); }
		if (HX_FIELD_EQ(inName,"mFree") ) { return hx::Val( mFree ); }
		if (HX_FIELD_EQ(inName,"mSize") ) { return hx::Val( mSize ); }
		if (HX_FIELD_EQ(inName,"remap") ) { return hx::Val( remap_dyn() ); }
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count_dyn() ); }
		if (HX_FIELD_EQ(inName,"unset") ) { return hx::Val( unset_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rehash") ) { return hx::Val( rehash_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasKey") ) { return hx::Val( hasKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAll") ) { return hx::Val( getAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"extract") ) { return hx::Val( extract_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasPair") ) { return hx::Val( hasPair_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { return hx::Val( capacity ); }
		if (HX_FIELD_EQ(inName,"getFront") ) { return hx::Val( getFront_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"toValSet") ) { return hx::Val( toValSet_dyn() ); }
		if (HX_FIELD_EQ(inName,"toKeySet") ) { return hx::Val( toKeySet_dyn() ); }
		if (HX_FIELD_EQ(inName,"hashCode") ) { return hx::Val( hashCode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"slotCount") ) { return hx::Val( slotCount ); }
		if (HX_FIELD_EQ(inName,"mIterator") ) { return hx::Val( mIterator ); }
		if (HX_FIELD_EQ(inName,"unsetPair") ) { return hx::Val( unsetPair_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"growthRate") ) { return hx::Val( growthRate ); }
		if (HX_FIELD_EQ(inName,"loadFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_loadFactor() ); }
		if (HX_FIELD_EQ(inName,"mTmpBuffer") ) { return hx::Val( mTmpBuffer ); }
		if (HX_FIELD_EQ(inName,"toKeyArray") ) { return hx::Val( toKeyArray_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setIfAbsent") ) { return hx::Val( setIfAbsent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mMinCapacity") ) { return hx::Val( mMinCapacity ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reuseIterator") ) { return hx::Val( reuseIterator ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_loadFactor") ) { return hx::Val( get_loadFactor_dyn() ); }
		if (HX_FIELD_EQ(inName,"mTmpBufferSize") ) { return hx::Val( mTmpBufferSize ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getCollisionCount") ) { return hx::Val( getCollisionCount_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IntIntHashTable_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mHash") ) { mHash=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mData") ) { mData=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mNext") ) { mNext=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mMask") ) { mMask=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mFree") ) { mFree=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mSize") ) { mSize=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { capacity=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"slotCount") ) { slotCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mIterator") ) { mIterator=inValue.Cast<  ::de::polygonal::ds::IntIntHashTableValIterator >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"growthRate") ) { growthRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mTmpBuffer") ) { mTmpBuffer=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mMinCapacity") ) { mMinCapacity=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reuseIterator") ) { reuseIterator=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mTmpBufferSize") ) { mTmpBufferSize=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IntIntHashTable_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("key","\x9f","\x89","\x51","\x00"));
	outFields->push(HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3"));
	outFields->push(HX_HCSTRING("growthRate","\xc7","\x5a","\x60","\xe8"));
	outFields->push(HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed"));
	outFields->push(HX_HCSTRING("loadFactor","\x95","\xc7","\x38","\x99"));
	outFields->push(HX_HCSTRING("slotCount","\xf1","\x5d","\x7f","\x2a"));
	outFields->push(HX_HCSTRING("mHash","\xdb","\x96","\x8e","\xf2"));
	outFields->push(HX_HCSTRING("mData","\x37","\xbd","\xe9","\xef"));
	outFields->push(HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6"));
	outFields->push(HX_HCSTRING("mMask","\xf9","\xa7","\xdc","\xf5"));
	outFields->push(HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1"));
	outFields->push(HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9"));
	outFields->push(HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1"));
	outFields->push(HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e"));
	outFields->push(HX_HCSTRING("mTmpBuffer","\x0a","\x3b","\xf3","\xa7"));
	outFields->push(HX_HCSTRING("mTmpBufferSize","\xeb","\x54","\xdb","\xba"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IntIntHashTable_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(IntIntHashTable_obj,key),HX_HCSTRING("key","\x9f","\x89","\x51","\x00")},
	{hx::fsInt,(int)offsetof(IntIntHashTable_obj,capacity),HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3")},
	{hx::fsInt,(int)offsetof(IntIntHashTable_obj,growthRate),HX_HCSTRING("growthRate","\xc7","\x5a","\x60","\xe8")},
	{hx::fsBool,(int)offsetof(IntIntHashTable_obj,reuseIterator),HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed")},
	{hx::fsInt,(int)offsetof(IntIntHashTable_obj,slotCount),HX_HCSTRING("slotCount","\xf1","\x5d","\x7f","\x2a")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntIntHashTable_obj,mHash),HX_HCSTRING("mHash","\xdb","\x96","\x8e","\xf2")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntIntHashTable_obj,mData),HX_HCSTRING("mData","\x37","\xbd","\xe9","\xef")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntIntHashTable_obj,mNext),HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6")},
	{hx::fsInt,(int)offsetof(IntIntHashTable_obj,mMask),HX_HCSTRING("mMask","\xf9","\xa7","\xdc","\xf5")},
	{hx::fsInt,(int)offsetof(IntIntHashTable_obj,mFree),HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1")},
	{hx::fsInt,(int)offsetof(IntIntHashTable_obj,mSize),HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9")},
	{hx::fsInt,(int)offsetof(IntIntHashTable_obj,mMinCapacity),HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1")},
	{hx::fsObject /*::de::polygonal::ds::IntIntHashTableValIterator*/ ,(int)offsetof(IntIntHashTable_obj,mIterator),HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntIntHashTable_obj,mTmpBuffer),HX_HCSTRING("mTmpBuffer","\x0a","\x3b","\xf3","\xa7")},
	{hx::fsInt,(int)offsetof(IntIntHashTable_obj,mTmpBufferSize),HX_HCSTRING("mTmpBufferSize","\xeb","\x54","\xdb","\xba")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo IntIntHashTable_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &IntIntHashTable_obj::KEY_ABSENT,HX_HCSTRING("KEY_ABSENT","\xb9","\x3c","\x99","\xb6")},
	{hx::fsInt,(void *) &IntIntHashTable_obj::VAL_ABSENT,HX_HCSTRING("VAL_ABSENT","\xb7","\xf3","\x76","\xc6")},
	{hx::fsInt,(void *) &IntIntHashTable_obj::EMPTY_SLOT,HX_HCSTRING("EMPTY_SLOT","\x50","\x64","\x68","\x4b")},
	{hx::fsInt,(void *) &IntIntHashTable_obj::NULL_POINTER,HX_HCSTRING("NULL_POINTER","\xa5","\xb3","\xa1","\x92")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String IntIntHashTable_obj_sMemberFields[] = {
	HX_HCSTRING("key","\x9f","\x89","\x51","\x00"),
	HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3"),
	HX_HCSTRING("growthRate","\xc7","\x5a","\x60","\xe8"),
	HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed"),
	HX_HCSTRING("get_loadFactor","\xde","\x4f","\x2e","\x0f"),
	HX_HCSTRING("slotCount","\xf1","\x5d","\x7f","\x2a"),
	HX_HCSTRING("mHash","\xdb","\x96","\x8e","\xf2"),
	HX_HCSTRING("mData","\x37","\xbd","\xe9","\xef"),
	HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6"),
	HX_HCSTRING("mMask","\xf9","\xa7","\xdc","\xf5"),
	HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1"),
	HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9"),
	HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1"),
	HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e"),
	HX_HCSTRING("mTmpBuffer","\x0a","\x3b","\xf3","\xa7"),
	HX_HCSTRING("mTmpBufferSize","\xeb","\x54","\xdb","\xba"),
	HX_HCSTRING("getCollisionCount","\x33","\xde","\xd7","\x0b"),
	HX_HCSTRING("getFront","\x33","\x28","\x65","\x66"),
	HX_HCSTRING("setIfAbsent","\x38","\xc4","\x66","\xee"),
	HX_HCSTRING("rehash","\x01","\xe9","\x2f","\x01"),
	HX_HCSTRING("remap","\xc9","\xb8","\xc3","\xe6"),
	HX_HCSTRING("extract","\x41","\xb5","\xea","\x78"),
	HX_HCSTRING("toKeyArray","\x15","\xa8","\x15","\xdc"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("hasKey","\x65","\x96","\x38","\xbb"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getAll","\x2b","\x32","\x19","\xa3"),
	HX_HCSTRING("hasPair","\x94","\xfc","\x95","\x19"),
	HX_HCSTRING("unsetPair","\xa3","\x23","\xd8","\x0b"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("unset","\xe9","\xf2","\xee","\xa6"),
	HX_HCSTRING("toValSet","\x1c","\xdf","\xdb","\x76"),
	HX_HCSTRING("toKeySet","\x1e","\xff","\x20","\x67"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("pack","\xd9","\xd6","\x51","\x4a"),
	HX_HCSTRING("iter","\x18","\xc5","\xbf","\x45"),
	HX_HCSTRING("hashCode","\x1b","\x0c","\x75","\x07"),
	HX_HCSTRING("grow","\x13","\xdc","\x6b","\x44"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	::String(null()) };

static void IntIntHashTable_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IntIntHashTable_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(IntIntHashTable_obj::KEY_ABSENT,"KEY_ABSENT");
	HX_MARK_MEMBER_NAME(IntIntHashTable_obj::VAL_ABSENT,"VAL_ABSENT");
	HX_MARK_MEMBER_NAME(IntIntHashTable_obj::EMPTY_SLOT,"EMPTY_SLOT");
	HX_MARK_MEMBER_NAME(IntIntHashTable_obj::NULL_POINTER,"NULL_POINTER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IntIntHashTable_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IntIntHashTable_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(IntIntHashTable_obj::KEY_ABSENT,"KEY_ABSENT");
	HX_VISIT_MEMBER_NAME(IntIntHashTable_obj::VAL_ABSENT,"VAL_ABSENT");
	HX_VISIT_MEMBER_NAME(IntIntHashTable_obj::EMPTY_SLOT,"EMPTY_SLOT");
	HX_VISIT_MEMBER_NAME(IntIntHashTable_obj::NULL_POINTER,"NULL_POINTER");
};

#endif

hx::Class IntIntHashTable_obj::__mClass;

static ::String IntIntHashTable_obj_sStaticFields[] = {
	HX_HCSTRING("KEY_ABSENT","\xb9","\x3c","\x99","\xb6"),
	HX_HCSTRING("VAL_ABSENT","\xb7","\xf3","\x76","\xc6"),
	HX_HCSTRING("EMPTY_SLOT","\x50","\x64","\x68","\x4b"),
	HX_HCSTRING("NULL_POINTER","\xa5","\xb3","\xa1","\x92"),
	::String(null())
};

void IntIntHashTable_obj::__register()
{
	hx::Object *dummy = new IntIntHashTable_obj;
	IntIntHashTable_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.ds.IntIntHashTable","\xf7","\x5e","\x02","\x92");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IntIntHashTable_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IntIntHashTable_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IntIntHashTable_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IntIntHashTable_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IntIntHashTable_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntIntHashTable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntIntHashTable_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void IntIntHashTable_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_59_boot)
HXDLIN(  59)		KEY_ABSENT = (int)-2147483647;
            	}
{
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_64_boot)
HXDLIN(  64)		VAL_ABSENT = (int)-2147483647;
            	}
{
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_69_boot)
HXDLIN(  69)		EMPTY_SLOT = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_78923e595580a1ed_74_boot)
HXDLIN(  74)		NULL_POINTER = (int)-1;
            	}
}

} // end namespace de
} // end namespace polygonal
} // end namespace ds
