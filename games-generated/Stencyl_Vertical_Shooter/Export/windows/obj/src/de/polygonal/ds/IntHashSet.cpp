// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_de_polygonal_Printf
#include <de/polygonal/Printf.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Collection
#include <de/polygonal/ds/Collection.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_HashKey
#include <de/polygonal/ds/HashKey.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Hashable
#include <de/polygonal/ds/Hashable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntHashSet
#include <de/polygonal/ds/IntHashSet.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntHashSetIterator
#include <de/polygonal/ds/IntHashSetIterator.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Itr
#include <de/polygonal/ds/Itr.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Set
#include <de/polygonal/ds/Set.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_GrowthRate
#include <de/polygonal/ds/tools/GrowthRate.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_NativeArrayTools
#include <de/polygonal/ds/tools/NativeArrayTools.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_48_new,"de.polygonal.ds.IntHashSet","new",0x0ed9a1a0,"de.polygonal.ds.IntHashSet.new","de/polygonal/ds/IntHashSet.hx",48,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_99_get_loadFactor,"de.polygonal.ds.IntHashSet","get_loadFactor",0x6d23869e,"de.polygonal.ds.IntHashSet.get_loadFactor","de/polygonal/ds/IntHashSet.hx",99,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_178_getCollisionCount,"de.polygonal.ds.IntHashSet","getCollisionCount",0x45715f73,"de.polygonal.ds.IntHashSet.getCollisionCount","de/polygonal/ds/IntHashSet.hx",178,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_200_hasFront,"de.polygonal.ds.IntHashSet","hasFront",0xef8209af,"de.polygonal.ds.IntHashSet.hasFront","de/polygonal/ds/IntHashSet.hx",200,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_267_rehash,"de.polygonal.ds.IntHashSet","rehash",0x63b05fc1,"de.polygonal.ds.IntHashSet.rehash","de/polygonal/ds/IntHashSet.hx",267,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_310_pack,"de.polygonal.ds.IntHashSet","pack",0xf0e31d99,"de.polygonal.ds.IntHashSet.pack","de/polygonal/ds/IntHashSet.hx",310,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_382_iter,"de.polygonal.ds.IntHashSet","iter",0xec510bd8,"de.polygonal.ds.IntHashSet.iter","de/polygonal/ds/IntHashSet.hx",382,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_399_toString,"de.polygonal.ds.IntHashSet","toString",0x950a776c,"de.polygonal.ds.IntHashSet.toString","de/polygonal/ds/IntHashSet.hx",399,0x10fc5471)
static const ::String _hx_array_data_e24891ae_20[] = {
	HX_(" ]",3d,1c,00,00),
};
static const ::String _hx_array_data_e24891ae_21[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_e24891ae_22[] = {
	HX_("]",5d,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_416_hashCode,"de.polygonal.ds.IntHashSet","hashCode",0x6410b2db,"de.polygonal.ds.IntHashSet.hashCode","de/polygonal/ds/IntHashSet.hx",416,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_420_grow,"de.polygonal.ds.IntHashSet","grow",0xeafd22d3,"de.polygonal.ds.IntHashSet.grow","de/polygonal/ds/IntHashSet.hx",420,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_464_has,"de.polygonal.ds.IntHashSet","has",0x0ed5109a,"de.polygonal.ds.IntHashSet.has","de/polygonal/ds/IntHashSet.hx",464,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_518_set,"de.polygonal.ds.IntHashSet","set",0x0edd6ce2,"de.polygonal.ds.IntHashSet.set","de/polygonal/ds/IntHashSet.hx",518,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_613_unset,"de.polygonal.ds.IntHashSet","unset",0xbf7b9429,"de.polygonal.ds.IntHashSet.unset","de/polygonal/ds/IntHashSet.hx",613,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_624_get_size,"de.polygonal.ds.IntHashSet","get_size",0x28aa030a,"de.polygonal.ds.IntHashSet.get_size","de/polygonal/ds/IntHashSet.hx",624,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_633_free,"de.polygonal.ds.IntHashSet","free",0xea53e36c,"de.polygonal.ds.IntHashSet.free","de/polygonal/ds/IntHashSet.hx",633,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_655_contains,"de.polygonal.ds.IntHashSet","contains",0x891700df,"de.polygonal.ds.IntHashSet.contains","de/polygonal/ds/IntHashSet.hx",655,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_663_remove,"de.polygonal.ds.IntHashSet","remove",0x67091304,"de.polygonal.ds.IntHashSet.remove","de/polygonal/ds/IntHashSet.hx",663,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_766_clear,"de.polygonal.ds.IntHashSet","clear",0x60e812cd,"de.polygonal.ds.IntHashSet.clear","de/polygonal/ds/IntHashSet.hx",766,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_799_iterator,"de.polygonal.ds.IntHashSet","iterator",0xf035f0ae,"de.polygonal.ds.IntHashSet.iterator","de/polygonal/ds/IntHashSet.hx",799,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_816_isEmpty,"de.polygonal.ds.IntHashSet","isEmpty",0xda474f83,"de.polygonal.ds.IntHashSet.isEmpty","de/polygonal/ds/IntHashSet.hx",816,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_823_toArray,"de.polygonal.ds.IntHashSet","toArray",0xbffb2b5e,"de.polygonal.ds.IntHashSet.toArray","de/polygonal/ds/IntHashSet.hx",823,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_840_clone,"de.polygonal.ds.IntHashSet","clone",0x60efb49d,"de.polygonal.ds.IntHashSet.clone","de/polygonal/ds/IntHashSet.hx",840,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_53_boot,"de.polygonal.ds.IntHashSet","boot",0xe7accaf2,"de.polygonal.ds.IntHashSet.boot","de/polygonal/ds/IntHashSet.hx",53,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_55_boot,"de.polygonal.ds.IntHashSet","boot",0xe7accaf2,"de.polygonal.ds.IntHashSet.boot","de/polygonal/ds/IntHashSet.hx",55,0x10fc5471)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ff615b15e3c5a9_56_boot,"de.polygonal.ds.IntHashSet","boot",0xe7accaf2,"de.polygonal.ds.IntHashSet.boot","de/polygonal/ds/IntHashSet.hx",56,0x10fc5471)
namespace de{
namespace polygonal{
namespace ds{

void IntHashSet_obj::__construct(int slotCount,hx::Null< int >  __o_initialCapacity){
int initialCapacity = __o_initialCapacity.Default(-1);
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_48_new)
HXLINE( 119)		this->mSize = (int)0;
HXLINE( 118)		this->mFree = (int)0;
HXLINE(  85)		this->reuseIterator = false;
HXLINE(  76)		this->growthRate = (int)-3;
HXLINE(  63)		this->key = ::de::polygonal::ds::HashKey_obj::next();
HXLINE( 139)		if ((initialCapacity == (int)-1)) {
HXLINE( 140)			initialCapacity = slotCount;
            		}
HXLINE( 142)		if (((int)2 > initialCapacity)) {
HXLINE( 142)			initialCapacity = (int)2;
            		}
            		else {
HXLINE( 142)			initialCapacity = initialCapacity;
            		}
HXLINE( 143)		this->mMinCapacity = (this->capacity = initialCapacity);
HXLINE( 145)		this->slotCount = slotCount;
HXLINE( 146)		this->mMask = (slotCount - (int)1);
HXLINE( 154)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 154)		_hx_array_set_size_exact(a,slotCount);
HXDLIN( 154)		this->mHash = ::de::polygonal::ds::tools::NativeArrayTools_obj::init(a,(int)-1,null(),null());
HXLINE( 155)		int len = ((int)this->capacity << (int)(int)1);
HXDLIN( 155)		::Array< int > a1 = ::Array_obj< int >::__new();
HXDLIN( 155)		_hx_array_set_size_exact(a1,len);
HXDLIN( 155)		this->mData = a1;
HXLINE( 156)		int len1 = this->capacity;
HXDLIN( 156)		::Array< int > a2 = ::Array_obj< int >::__new();
HXDLIN( 156)		_hx_array_set_size_exact(a2,len1);
HXDLIN( 156)		this->mNext = a2;
HXLINE( 159)		int j = (int)1;
HXDLIN( 159)		::Array< int > t = this->mData;
HXLINE( 160)		{
HXLINE( 160)			int _g1 = (int)0;
HXDLIN( 160)			int _g = this->capacity;
HXDLIN( 160)			while((_g1 < _g)){
HXLINE( 160)				_g1 = (_g1 + (int)1);
HXDLIN( 160)				int i = (_g1 - (int)1);
HXLINE( 162)				t[(j - (int)1)] = (int)-2147483647;
HXLINE( 163)				t[j] = (int)-1;
HXLINE( 164)				j = (j + (int)2);
            			}
            		}
HXLINE( 167)		t = this->mNext;
HXLINE( 168)		{
HXLINE( 168)			int _g11 = (int)0;
HXDLIN( 168)			int _g2 = (this->capacity - (int)1);
HXDLIN( 168)			while((_g11 < _g2)){
HXLINE( 168)				_g11 = (_g11 + (int)1);
HXDLIN( 168)				int i1 = (_g11 - (int)1);
HXDLIN( 168)				t[i1] = (i1 + (int)1);
            			}
            		}
HXLINE( 169)		t[(this->capacity - (int)1)] = (int)-1;
            	}

Dynamic IntHashSet_obj::__CreateEmpty() { return new IntHashSet_obj; }

void *IntHashSet_obj::_hx_vtable = 0;

Dynamic IntHashSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IntHashSet_obj > _hx_result = new IntHashSet_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool IntHashSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x33332838;
}

static ::de::polygonal::ds::Collection_obj _hx_de_polygonal_ds_IntHashSet__hx_de_polygonal_ds_Collection= {
	( int (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::get_size,
	( void (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::free,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashSet_obj::contains_5889326f,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashSet_obj::remove_5889326f,
	( void (hx::Object::*)(hx::Null< bool > ))&::de::polygonal::ds::IntHashSet_obj::clear,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::iterator,
	( bool (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::isEmpty,
	( ::cpp::VirtualArray (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::toArray_615cc599,
	( ::Dynamic (hx::Object::*)(hx::Null< bool > , ::Dynamic))&::de::polygonal::ds::IntHashSet_obj::clone,
};

static ::de::polygonal::ds::Set_obj _hx_de_polygonal_ds_IntHashSet__hx_de_polygonal_ds_Set= {
	( int (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::get_size,
	( void (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::free,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashSet_obj::contains,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashSet_obj::remove,
	( void (hx::Object::*)(hx::Null< bool > ))&::de::polygonal::ds::IntHashSet_obj::clear,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::iterator,
	( bool (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::isEmpty,
	( ::cpp::VirtualArray (hx::Object::*)())&::de::polygonal::ds::IntHashSet_obj::toArray,
	( ::Dynamic (hx::Object::*)(hx::Null< bool > , ::Dynamic))&::de::polygonal::ds::IntHashSet_obj::clone,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashSet_obj::has_5889326f,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashSet_obj::set_5889326f,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashSet_obj::unset_5889326f,
};

static ::de::polygonal::ds::Hashable_obj _hx_de_polygonal_ds_IntHashSet__hx_de_polygonal_ds_Hashable= {
};

bool IntHashSet_obj::unset_5889326f( ::Dynamic val) {
			return unset(val);
}

bool IntHashSet_obj::set_5889326f( ::Dynamic val) {
			return set(val);
}

bool IntHashSet_obj::has_5889326f( ::Dynamic val) {
			return has(val);
}

::cpp::VirtualArray IntHashSet_obj::toArray_615cc599() {
			return toArray();
}

bool IntHashSet_obj::remove_5889326f( ::Dynamic val) {
			return remove(val);
}

bool IntHashSet_obj::contains_5889326f( ::Dynamic val) {
			return contains(val);
}
void *IntHashSet_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xfeda5751: return &_hx_de_polygonal_ds_IntHashSet__hx_de_polygonal_ds_Collection;
		case (int)0x312df24f: return &_hx_de_polygonal_ds_IntHashSet__hx_de_polygonal_ds_Set;
		case (int)0xff6ef29b: return &_hx_de_polygonal_ds_IntHashSet__hx_de_polygonal_ds_Hashable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Float IntHashSet_obj::get_loadFactor(){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_99_get_loadFactor)
HXDLIN(  99)		return ((Float)this->mSize / (Float)this->slotCount);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,get_loadFactor,return )

int IntHashSet_obj::getCollisionCount(){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_178_getCollisionCount)
HXLINE( 179)		int c = (int)0;
HXDLIN( 179)		int j;
HXDLIN( 179)		::Array< int > d = this->mData;
HXDLIN( 179)		::Array< int > h = this->mHash;
HXLINE( 180)		{
HXLINE( 180)			int _g1 = (int)0;
HXDLIN( 180)			int _g = this->slotCount;
HXDLIN( 180)			while((_g1 < _g)){
HXLINE( 180)				_g1 = (_g1 + (int)1);
HXDLIN( 180)				int i = (_g1 - (int)1);
HXLINE( 182)				j = h->__get(i);
HXLINE( 183)				if ((j == (int)-1)) {
HXLINE( 183)					continue;
            				}
HXLINE( 184)				j = d->__get((j + (int)1));
HXLINE( 185)				while((j != (int)-1)){
HXLINE( 187)					j = d->__get((j + (int)1));
HXLINE( 188)					c = (c + (int)1);
            				}
            			}
            		}
HXLINE( 191)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,getCollisionCount,return )

bool IntHashSet_obj::hasFront(int val){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_200_hasFront)
HXLINE( 203)		::Array< int > h = this->mHash;
HXLINE( 204)		int b = ((int)(val * (int)73856093) & (int)this->mMask);
HXLINE( 205)		int i = h->__get(b);
HXLINE( 206)		if ((i == (int)-1)) {
HXLINE( 207)			return false;
            		}
            		else {
HXLINE( 210)			::Array< int > d = this->mData;
HXLINE( 216)			if ((d->__get(i) == val)) {
HXLINE( 217)				return true;
            			}
            			else {
HXLINE( 221)				bool exists = false;
HXLINE( 223)				int first = i;
HXDLIN( 223)				int i0 = first;
HXLINE( 228)				i = d->__get((i + (int)1));
HXLINE( 231)				while((i != (int)-1)){
HXLINE( 237)					if ((d->__get(i) == val)) {
HXLINE( 246)						d[(i0 + (int)1)] = d->__get((i + (int)1));
HXLINE( 247)						d[(i + (int)1)] = first;
HXLINE( 248)						d[b] = i;
HXLINE( 251)						exists = true;
HXLINE( 252)						goto _hx_goto_7;
            					}
HXLINE( 254)					i0 = i;
HXDLIN( 254)					i = d->__get((i0 + (int)1));
            				}
            				_hx_goto_7:;
HXLINE( 256)				return exists;
            			}
            		}
HXLINE( 206)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,hasFront,return )

 ::de::polygonal::ds::IntHashSet IntHashSet_obj::rehash(int slotCount){
            	HX_GC_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_267_rehash)
HXLINE( 270)		if ((this->slotCount == slotCount)) {
HXLINE( 270)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 272)		 ::de::polygonal::ds::IntHashSet t =  ::de::polygonal::ds::IntHashSet_obj::__alloc( HX_CTX ,slotCount,this->capacity);
HXLINE( 283)		::Array< int > d = this->mData;
HXLINE( 284)		{
HXLINE( 284)			int _g1 = (int)0;
HXDLIN( 284)			int _g = this->capacity;
HXDLIN( 284)			while((_g1 < _g)){
HXLINE( 284)				_g1 = (_g1 + (int)1);
HXDLIN( 284)				int i = (_g1 - (int)1);
HXLINE( 286)				int v = d->__get(((int)i << (int)(int)1));
HXLINE( 287)				if ((v != (int)-2147483647)) {
HXLINE( 287)					int b = ((int)(v * (int)73856093) & (int)t->mMask);
HXDLIN( 287)					::Array< int > d1 = t->mData;
HXDLIN( 287)					int j = t->mHash->__get(b);
HXDLIN( 287)					if ((j == (int)-1)) {
HXLINE( 287)						if ((t->mSize == t->capacity)) {
HXLINE( 287)							t->grow();
HXDLIN( 287)							d1 = t->mData;
            						}
HXDLIN( 287)						j = ((int)t->mFree << (int)(int)1);
HXDLIN( 287)						t->mFree = t->mNext->__get(t->mFree);
HXDLIN( 287)						t->mHash[b] = j;
HXDLIN( 287)						d1[j] = v;
HXDLIN( 287)						t->mSize++;
            					}
            					else {
HXLINE( 287)						if ((d1->__get(j) != v)) {
HXLINE( 287)							int p = d1->__get((j + (int)1));
HXDLIN( 287)							while((p != (int)-1)){
HXLINE( 287)								if ((d1->__get(p) == v)) {
HXLINE( 287)									j = (int)-1;
HXDLIN( 287)									goto _hx_goto_10;
            								}
HXDLIN( 287)								j = p;
HXDLIN( 287)								p = d1->__get((p + (int)1));
            							}
            							_hx_goto_10:;
HXDLIN( 287)							if ((j != (int)-1)) {
HXLINE( 287)								if ((t->mSize == t->capacity)) {
HXLINE( 287)									t->grow();
HXDLIN( 287)									d1 = t->mData;
            								}
HXDLIN( 287)								p = ((int)t->mFree << (int)(int)1);
HXDLIN( 287)								t->mFree = t->mNext->__get(t->mFree);
HXDLIN( 287)								d1[p] = v;
HXDLIN( 287)								d1[(j + (int)1)] = p;
HXDLIN( 287)								t->mSize++;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 296)		this->mHash = t->mHash;
HXLINE( 297)		this->mData = t->mData;
HXLINE( 298)		this->mNext = t->mNext;
HXLINE( 300)		this->slotCount = slotCount;
HXLINE( 301)		this->mMask = t->mMask;
HXLINE( 302)		this->mFree = t->mFree;
HXLINE( 303)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,rehash,return )

 ::de::polygonal::ds::IntHashSet IntHashSet_obj::pack(){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_310_pack)
HXLINE( 311)		if ((this->capacity == this->mMinCapacity)) {
HXLINE( 311)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 313)		int oldCapacity = this->capacity;
HXLINE( 314)		int x = this->mSize;
HXDLIN( 314)		int y = this->mMinCapacity;
HXDLIN( 314)		int _hx_tmp;
HXDLIN( 314)		if ((x > y)) {
HXLINE( 314)			_hx_tmp = x;
            		}
            		else {
HXLINE( 314)			_hx_tmp = y;
            		}
HXDLIN( 314)		this->capacity = _hx_tmp;
HXLINE( 316)		::Array< int > src = this->mData;
HXDLIN( 316)		::Array< int > dst;
HXLINE( 317)		int e = (int)0;
HXDLIN( 317)		::Array< int > t = this->mHash;
HXDLIN( 317)		int j;
HXLINE( 349)		int len = ((int)this->capacity << (int)(int)1);
HXDLIN( 349)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 349)		_hx_array_set_size_exact(a,len);
HXDLIN( 349)		dst = a;
HXLINE( 350)		{
HXLINE( 350)			int _g1 = (int)0;
HXDLIN( 350)			int _g = this->slotCount;
HXDLIN( 350)			while((_g1 < _g)){
HXLINE( 350)				_g1 = (_g1 + (int)1);
HXDLIN( 350)				int i = (_g1 - (int)1);
HXLINE( 352)				j = t->__get(i);
HXLINE( 353)				if ((j == (int)-1)) {
HXLINE( 353)					continue;
            				}
HXLINE( 355)				t[i] = e;
HXLINE( 356)				{
HXLINE( 356)					e = (e + (int)1);
HXDLIN( 356)					dst[(e - (int)1)] = src->__get(j);
            				}
HXLINE( 357)				{
HXLINE( 357)					e = (e + (int)1);
HXDLIN( 357)					dst[(e - (int)1)] = (int)-1;
            				}
HXLINE( 358)				j = src->__get((j + (int)1));
HXLINE( 359)				while((j != (int)-1)){
HXLINE( 361)					dst[(e - (int)1)] = e;
HXLINE( 362)					{
HXLINE( 362)						e = (e + (int)1);
HXDLIN( 362)						dst[(e - (int)1)] = src->__get(j);
            					}
HXLINE( 363)					{
HXLINE( 363)						e = (e + (int)1);
HXDLIN( 363)						dst[(e - (int)1)] = (int)-1;
            					}
HXLINE( 364)					j = src->__get((j + (int)1));
            				}
            			}
            		}
HXLINE( 367)		this->mData = dst;
HXLINE( 368)		int len1 = this->capacity;
HXDLIN( 368)		::Array< int > a1 = ::Array_obj< int >::__new();
HXDLIN( 368)		_hx_array_set_size_exact(a1,len1);
HXDLIN( 368)		this->mNext = a1;
HXLINE( 371)		::Array< int > n = this->mNext;
HXLINE( 372)		{
HXLINE( 372)			int _g11 = (int)0;
HXDLIN( 372)			int _g2 = (this->capacity - (int)1);
HXDLIN( 372)			while((_g11 < _g2)){
HXLINE( 372)				_g11 = (_g11 + (int)1);
HXDLIN( 372)				int i1 = (_g11 - (int)1);
HXDLIN( 372)				n[i1] = (i1 + (int)1);
            			}
            		}
HXLINE( 373)		n[(this->capacity - (int)1)] = (int)-1;
HXLINE( 374)		this->mFree = (int)-1;
HXLINE( 375)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,pack,return )

 ::de::polygonal::ds::IntHashSet IntHashSet_obj::iter( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_382_iter)
HXLINE( 384)		::Array< int > d = this->mData;
HXDLIN( 384)		int j;
HXDLIN( 384)		int v;
HXLINE( 385)		{
HXLINE( 385)			int _g1 = (int)0;
HXDLIN( 385)			int _g = this->capacity;
HXDLIN( 385)			while((_g1 < _g)){
HXLINE( 385)				_g1 = (_g1 + (int)1);
HXDLIN( 385)				int i = (_g1 - (int)1);
HXLINE( 387)				j = ((int)i << (int)(int)1);
HXLINE( 388)				v = d->__get(j);
HXLINE( 389)				if ((v != (int)-2147483647)) {
HXLINE( 389)					f(d->__get(j));
            				}
            			}
            		}
HXLINE( 391)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,iter,return )

::String IntHashSet_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_399_toString)
HXLINE( 400)		 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 401)		{
HXLINE( 401)			::String x = ((((HX_("[ IntHashSet size=",c6,7a,65,8e) + this->mSize) + HX_(" capacity=",a3,0d,35,89)) + this->capacity) + HX_(" load=%.2f",54,33,62,c9));
HXDLIN( 401)			::String x1 = ::de::polygonal::Printf_obj::format(x,::cpp::VirtualArray_obj::__new(1)->init(0,this->get_loadFactor()));
HXDLIN( 401)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 401)				b->flush();
            			}
HXDLIN( 401)			if (hx::IsNull( b->b )) {
HXLINE( 401)				b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 401)				::Array< ::String > b1 = b->b;
HXDLIN( 401)				b1->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 402)		if ((this->mSize == (int)0)) {
HXLINE( 404)			{
HXLINE( 404)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 404)					b->flush();
            				}
HXDLIN( 404)				if (hx::IsNull( b->b )) {
HXLINE( 404)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_e24891ae_20,1);
            				}
            				else {
HXLINE( 404)					b->b->push(HX_(" ]",3d,1c,00,00));
            				}
            			}
HXLINE( 405)			return b->toString();
            		}
HXLINE( 407)		{
HXLINE( 407)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 407)				b->flush();
            			}
HXDLIN( 407)			if (hx::IsNull( b->b )) {
HXLINE( 407)				b->b = ::Array_obj< ::String >::fromData( _hx_array_data_e24891ae_21,1);
            			}
            			else {
HXLINE( 407)				b->b->push(HX_("\n",0a,00,00,00));
            			}
            		}
HXLINE( 408)		{
HXLINE( 408)			::Dynamic x2 = this->iterator();
HXDLIN( 408)			while(::de::polygonal::ds::Itr_obj::hasNext(x2)){
HXLINE( 408)				int x3 = ( (int)(::de::polygonal::ds::Itr_obj::next(x2)) );
HXDLIN( 408)				::String x4 = ((HX_("  ",00,1c,00,00) + x3) + HX_("\n",0a,00,00,00));
HXDLIN( 408)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 408)					b->flush();
            				}
HXDLIN( 408)				if (hx::IsNull( b->b )) {
HXLINE( 408)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            				}
            				else {
HXLINE( 408)					::Array< ::String > b2 = b->b;
HXDLIN( 408)					b2->push(::Std_obj::string(x4));
            				}
            			}
            		}
HXLINE( 409)		{
HXLINE( 409)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 409)				b->flush();
            			}
HXDLIN( 409)			if (hx::IsNull( b->b )) {
HXLINE( 409)				b->b = ::Array_obj< ::String >::fromData( _hx_array_data_e24891ae_22,1);
            			}
            			else {
HXLINE( 409)				b->b->push(HX_("]",5d,00,00,00));
            			}
            		}
HXLINE( 410)		return b->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,toString,return )

int IntHashSet_obj::hashCode(int x){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_416_hashCode)
HXDLIN( 416)		return ((int)(x * (int)73856093) & (int)this->mMask);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,hashCode,return )

void IntHashSet_obj::grow(){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_420_grow)
HXLINE( 421)		int oldCapacity = this->capacity;
HXLINE( 422)		this->capacity = ::de::polygonal::ds::tools::GrowthRate_obj::compute(this->growthRate,this->capacity);
HXLINE( 424)		::Array< int > t;
HXLINE( 430)		int len = this->capacity;
HXDLIN( 430)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 430)		_hx_array_set_size_exact(a,len);
HXDLIN( 430)		t = a;
HXLINE( 431)		if ((oldCapacity > (int)0)) {
HXLINE( 431)			t->blit((int)0,this->mNext,(int)0,oldCapacity);
            		}
HXLINE( 432)		this->mNext = t;
HXLINE( 433)		int len1 = ((int)this->capacity << (int)(int)1);
HXDLIN( 433)		::Array< int > a1 = ::Array_obj< int >::__new();
HXDLIN( 433)		_hx_array_set_size_exact(a1,len1);
HXDLIN( 433)		t = a1;
HXLINE( 434)		{
HXLINE( 434)			int n = ((int)oldCapacity << (int)(int)1);
HXDLIN( 434)			if ((n > (int)0)) {
HXLINE( 434)				t->blit((int)0,this->mData,(int)0,n);
            			}
            		}
HXLINE( 435)		this->mData = t;
HXLINE( 438)		t = this->mNext;
HXLINE( 439)		{
HXLINE( 439)			int _g1 = (oldCapacity - (int)1);
HXDLIN( 439)			int _g = (this->capacity - (int)1);
HXDLIN( 439)			while((_g1 < _g)){
HXLINE( 439)				_g1 = (_g1 + (int)1);
HXDLIN( 439)				int i = (_g1 - (int)1);
HXDLIN( 439)				t[i] = (i + (int)1);
            			}
            		}
HXLINE( 440)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE( 441)		this->mFree = oldCapacity;
HXLINE( 443)		int j = ((int)oldCapacity << (int)(int)1);
HXDLIN( 443)		::Array< int > t1 = this->mData;
HXLINE( 444)		{
HXLINE( 444)			int _g11 = (int)0;
HXDLIN( 444)			int _g2 = (this->capacity - oldCapacity);
HXDLIN( 444)			while((_g11 < _g2)){
HXLINE( 444)				_g11 = (_g11 + (int)1);
HXDLIN( 444)				int i1 = (_g11 - (int)1);
HXLINE( 451)				t1[j] = (int)-2147483647;
HXLINE( 452)				t1[(j + (int)1)] = (int)-1;
HXLINE( 454)				j = (j + (int)2);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,grow,(void))

bool IntHashSet_obj::has(int val){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_464_has)
HXLINE( 467)		int i = this->mHash->__get(((int)(val * (int)73856093) & (int)this->mMask));
HXLINE( 468)		if ((i == (int)-1)) {
HXLINE( 469)			return false;
            		}
            		else {
HXLINE( 472)			::Array< int > d = this->mData;
HXLINE( 478)			if ((d->__get(i) == val)) {
HXLINE( 479)				return true;
            			}
            			else {
HXLINE( 483)				bool exists = false;
HXLINE( 497)				i = d->__get((i + (int)1));
HXLINE( 498)				while((i != (int)-1)){
HXLINE( 500)					if ((d->__get(i) == val)) {
HXLINE( 502)						exists = true;
HXLINE( 503)						goto _hx_goto_27;
            					}
HXLINE( 505)					i = d->__get((i + (int)1));
            				}
            				_hx_goto_27:;
HXLINE( 508)				return exists;
            			}
            		}
HXLINE( 468)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,has,return )

bool IntHashSet_obj::set(int val){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_518_set)
HXLINE( 521)		int b = ((int)(val * (int)73856093) & (int)this->mMask);
HXDLIN( 521)		::Array< int > d = this->mData;
HXLINE( 527)		int j = this->mHash->__get(b);
HXLINE( 529)		if ((j == (int)-1)) {
HXLINE( 531)			if ((this->mSize == this->capacity)) {
HXLINE( 533)				this->grow();
HXLINE( 534)				d = this->mData;
            			}
HXLINE( 537)			j = ((int)this->mFree << (int)(int)1);
HXLINE( 538)			this->mFree = this->mNext->__get(this->mFree);
HXLINE( 543)			this->mHash[b] = j;
HXLINE( 546)			d[j] = val;
HXLINE( 547)			this->mSize++;
HXLINE( 548)			return true;
            		}
            		else {
HXLINE( 556)			if ((d->__get(j) == val)) {
HXLINE( 556)				return false;
            			}
            			else {
HXLINE( 574)				int p = d->__get((j + (int)1));
HXLINE( 575)				while((p != (int)-1)){
HXLINE( 577)					if ((d->__get(p) == val)) {
HXLINE( 579)						j = (int)-1;
HXLINE( 580)						goto _hx_goto_29;
            					}
HXLINE( 582)					j = p;
HXLINE( 583)					p = d->__get((p + (int)1));
            				}
            				_hx_goto_29:;
HXLINE( 587)				if ((j == (int)-1)) {
HXLINE( 588)					return false;
            				}
            				else {
HXLINE( 591)					if ((this->mSize == this->capacity)) {
HXLINE( 593)						this->grow();
HXLINE( 594)						d = this->mData;
            					}
HXLINE( 596)					p = ((int)this->mFree << (int)(int)1);
HXLINE( 597)					this->mFree = this->mNext->__get(this->mFree);
HXLINE( 598)					d[p] = val;
HXLINE( 599)					d[(j + (int)1)] = p;
HXLINE( 600)					this->mSize++;
HXLINE( 601)					return true;
            				}
            			}
            		}
HXLINE( 529)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,set,return )

bool IntHashSet_obj::unset(int val){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_613_unset)
HXDLIN( 613)		int b = ((int)(val * (int)73856093) & (int)this->mMask);
HXDLIN( 613)		int i = this->mHash->__get(b);
HXDLIN( 613)		if ((i == (int)-1)) {
HXDLIN( 613)			return false;
            		}
            		else {
HXDLIN( 613)			::Array< int > d = this->mData;
HXDLIN( 613)			if ((val == d->__get(i))) {
HXDLIN( 613)				if ((d->__get((i + (int)1)) == (int)-1)) {
HXDLIN( 613)					this->mHash[b] = (int)-1;
            				}
            				else {
HXDLIN( 613)					this->mHash[b] = d->__get((i + (int)1));
            				}
HXDLIN( 613)				int j = ((int)i >> (int)(int)1);
HXDLIN( 613)				this->mNext[j] = this->mFree;
HXDLIN( 613)				this->mFree = j;
HXDLIN( 613)				d[i] = (int)-2147483647;
HXDLIN( 613)				d[(i + (int)1)] = (int)-1;
HXDLIN( 613)				this->mSize--;
HXDLIN( 613)				return true;
            			}
            			else {
HXDLIN( 613)				bool exists = false;
HXDLIN( 613)				int i0 = i;
HXDLIN( 613)				i = d->__get((i + (int)1));
HXDLIN( 613)				while((i != (int)-1)){
HXDLIN( 613)					if ((d->__get(i) == val)) {
HXDLIN( 613)						exists = true;
HXDLIN( 613)						goto _hx_goto_31;
            					}
HXDLIN( 613)					i0 = i;
HXDLIN( 613)					i = d->__get((i0 + (int)1));
            				}
            				_hx_goto_31:;
HXDLIN( 613)				if (exists) {
HXDLIN( 613)					d[(i0 + (int)1)] = d->__get((i + (int)1));
HXDLIN( 613)					int j1 = ((int)i >> (int)(int)1);
HXDLIN( 613)					this->mNext[j1] = this->mFree;
HXDLIN( 613)					this->mFree = j1;
HXDLIN( 613)					d[i] = (int)-2147483647;
HXDLIN( 613)					d[(i + (int)1)] = (int)-1;
HXDLIN( 613)					--this->mSize;
HXDLIN( 613)					return true;
            				}
            				else {
HXDLIN( 613)					return false;
            				}
            			}
            		}
HXDLIN( 613)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,unset,return )

int IntHashSet_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_624_get_size)
HXDLIN( 624)		return this->mSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,get_size,return )

void IntHashSet_obj::free(){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_633_free)
HXLINE( 640)		this->mHash = null();
HXLINE( 641)		this->mData = null();
HXLINE( 642)		this->mNext = null();
HXLINE( 643)		if (hx::IsNotNull( this->mIterator )) {
HXLINE( 645)			this->mIterator->free();
HXLINE( 646)			this->mIterator = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,free,(void))

bool IntHashSet_obj::contains(int val){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_655_contains)
HXDLIN( 655)		int i = this->mHash->__get(((int)(val * (int)73856093) & (int)this->mMask));
HXDLIN( 655)		if ((i == (int)-1)) {
HXDLIN( 655)			return false;
            		}
            		else {
HXDLIN( 655)			::Array< int > d = this->mData;
HXDLIN( 655)			if ((d->__get(i) == val)) {
HXDLIN( 655)				return true;
            			}
            			else {
HXDLIN( 655)				bool exists = false;
HXDLIN( 655)				i = d->__get((i + (int)1));
HXDLIN( 655)				while((i != (int)-1)){
HXDLIN( 655)					if ((d->__get(i) == val)) {
HXDLIN( 655)						exists = true;
HXDLIN( 655)						goto _hx_goto_35;
            					}
HXDLIN( 655)					i = d->__get((i + (int)1));
            				}
            				_hx_goto_35:;
HXDLIN( 655)				return exists;
            			}
            		}
HXDLIN( 655)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,contains,return )

bool IntHashSet_obj::remove(int val){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_663_remove)
HXLINE( 664)		int b = ((int)(val * (int)73856093) & (int)this->mMask);
HXLINE( 665)		int i = this->mHash->__get(b);
HXLINE( 666)		if ((i == (int)-1)) {
HXLINE( 667)			return false;
            		}
            		else {
HXLINE( 670)			::Array< int > d = this->mData;
HXLINE( 675)			if ((val == d->__get(i))) {
HXLINE( 681)				if ((d->__get((i + (int)1)) == (int)-1)) {
HXLINE( 683)					this->mHash[b] = (int)-1;
            				}
            				else {
HXLINE( 685)					this->mHash[b] = d->__get((i + (int)1));
            				}
HXLINE( 687)				int j = ((int)i >> (int)(int)1);
HXLINE( 688)				this->mNext[j] = this->mFree;
HXLINE( 689)				this->mFree = j;
HXLINE( 695)				d[i] = (int)-2147483647;
HXLINE( 696)				d[(i + (int)1)] = (int)-1;
HXLINE( 699)				this->mSize--;
HXLINE( 700)				return true;
            			}
            			else {
HXLINE( 704)				bool exists = false;
HXLINE( 706)				int i0 = i;
HXLINE( 710)				i = d->__get((i + (int)1));
HXLINE( 713)				while((i != (int)-1)){
HXLINE( 725)					if ((d->__get(i) == val)) {
HXLINE( 727)						exists = true;
HXLINE( 728)						goto _hx_goto_37;
            					}
HXLINE( 730)					i0 = i;
HXDLIN( 730)					i = d->__get((i0 + (int)1));
            				}
            				_hx_goto_37:;
HXLINE( 734)				if (exists) {
HXLINE( 736)					d[(i0 + (int)1)] = d->__get((i + (int)1));
HXLINE( 738)					int j1 = ((int)i >> (int)(int)1);
HXLINE( 739)					this->mNext[j1] = this->mFree;
HXLINE( 740)					this->mFree = j1;
HXLINE( 747)					d[i] = (int)-2147483647;
HXLINE( 748)					d[(i + (int)1)] = (int)-1;
HXLINE( 751)					--this->mSize;
HXLINE( 752)					return true;
            				}
            				else {
HXLINE( 755)					return false;
            				}
            			}
            		}
HXLINE( 666)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,remove,return )

void IntHashSet_obj::clear(hx::Null< bool >  __o_gc){
bool gc = __o_gc.Default(false);
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_766_clear)
HXLINE( 770)		::Array< int > h = this->mHash;
HXLINE( 771)		{
HXLINE( 771)			int _g1 = (int)0;
HXDLIN( 771)			int _g = this->slotCount;
HXDLIN( 771)			while((_g1 < _g)){
HXLINE( 771)				_g1 = (_g1 + (int)1);
HXDLIN( 771)				int i = (_g1 - (int)1);
HXDLIN( 771)				h[i] = (int)-1;
            			}
            		}
HXLINE( 774)		int j = (int)1;
HXDLIN( 774)		::Array< int > t = this->mData;
HXLINE( 775)		{
HXLINE( 775)			int _g11 = (int)0;
HXDLIN( 775)			int _g2 = this->capacity;
HXDLIN( 775)			while((_g11 < _g2)){
HXLINE( 775)				_g11 = (_g11 + (int)1);
HXDLIN( 775)				int i1 = (_g11 - (int)1);
HXLINE( 777)				t[(j - (int)1)] = (int)-2147483647;
HXLINE( 778)				t[j] = (int)-1;
HXLINE( 779)				j = (j + (int)2);
            			}
            		}
HXLINE( 782)		t = this->mNext;
HXLINE( 783)		{
HXLINE( 783)			int _g12 = (int)0;
HXDLIN( 783)			int _g3 = (this->capacity - (int)1);
HXDLIN( 783)			while((_g12 < _g3)){
HXLINE( 783)				_g12 = (_g12 + (int)1);
HXDLIN( 783)				int i2 = (_g12 - (int)1);
HXDLIN( 783)				t[i2] = (i2 + (int)1);
            			}
            		}
HXLINE( 784)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE( 786)		this->mFree = (int)0;
HXLINE( 787)		this->mSize = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashSet_obj,clear,(void))

::Dynamic IntHashSet_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_799_iterator)
HXDLIN( 799)		if (this->reuseIterator) {
HXLINE( 801)			if (hx::IsNull( this->mIterator )) {
HXLINE( 802)				this->mIterator =  ::de::polygonal::ds::IntHashSetIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE( 804)				this->mIterator->reset();
            			}
HXLINE( 805)			return this->mIterator;
            		}
            		else {
HXLINE( 808)			return  ::de::polygonal::ds::IntHashSetIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 799)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,iterator,return )

bool IntHashSet_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_816_isEmpty)
HXDLIN( 816)		return (this->mSize == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,isEmpty,return )

::Array< int > IntHashSet_obj::toArray(){
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_823_toArray)
HXLINE( 824)		if ((this->mSize == (int)0)) {
HXLINE( 824)			return ::Array_obj< int >::__new(0);
            		}
HXLINE( 826)		int len = this->mSize;
HXDLIN( 826)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 826)		_hx_array_set_size_exact(a,len);
HXDLIN( 826)		::Array< int > out = a;
HXLINE( 827)		int j = (int)0;
HXDLIN( 827)		int v;
HXDLIN( 827)		::Array< int > d = this->mData;
HXLINE( 828)		{
HXLINE( 828)			int _g1 = (int)0;
HXDLIN( 828)			int _g = this->capacity;
HXDLIN( 828)			while((_g1 < _g)){
HXLINE( 828)				_g1 = (_g1 + (int)1);
HXDLIN( 828)				int i = (_g1 - (int)1);
HXLINE( 830)				v = d->__get(((int)i << (int)(int)1));
HXLINE( 831)				if ((v != (int)-2147483647)) {
HXLINE( 831)					j = (j + (int)1);
HXDLIN( 831)					out[(j - (int)1)] = v;
            				}
            			}
            		}
HXLINE( 833)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashSet_obj,toArray,return )

::Dynamic IntHashSet_obj::clone(hx::Null< bool >  __o_byRef, ::Dynamic copier){
bool byRef = __o_byRef.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_840_clone)
HXLINE( 841)		 ::de::polygonal::ds::IntHashSet c =  ::de::polygonal::ds::IntHashSet_obj::__alloc( HX_CTX ,this->slotCount,this->mSize);
HXLINE( 848)		{
HXLINE( 848)			int n = this->slotCount;
HXDLIN( 848)			if ((n > (int)0)) {
HXLINE( 848)				c->mHash->blit((int)0,this->mHash,(int)0,n);
            			}
            		}
HXLINE( 849)		{
HXLINE( 849)			int n1 = ((int)this->mSize << (int)(int)1);
HXDLIN( 849)			if ((n1 > (int)0)) {
HXLINE( 849)				c->mData->blit((int)0,this->mData,(int)0,n1);
            			}
            		}
HXLINE( 850)		{
HXLINE( 850)			int n2 = this->mSize;
HXDLIN( 850)			if ((n2 > (int)0)) {
HXLINE( 850)				c->mNext->blit((int)0,this->mNext,(int)0,n2);
            			}
            		}
HXLINE( 853)		c->mMask = this->mMask;
HXLINE( 854)		c->slotCount = this->slotCount;
HXLINE( 855)		c->capacity = this->capacity;
HXLINE( 856)		c->mFree = this->mFree;
HXLINE( 857)		c->mSize = this->mSize;
HXLINE( 858)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntHashSet_obj,clone,return )

int IntHashSet_obj::VAL_ABSENT;

int IntHashSet_obj::EMPTY_SLOT;

int IntHashSet_obj::NULL_POINTER;


hx::ObjectPtr< IntHashSet_obj > IntHashSet_obj::__new(int slotCount,hx::Null< int >  __o_initialCapacity) {
	hx::ObjectPtr< IntHashSet_obj > __this = new IntHashSet_obj();
	__this->__construct(slotCount,__o_initialCapacity);
	return __this;
}

hx::ObjectPtr< IntHashSet_obj > IntHashSet_obj::__alloc(hx::Ctx *_hx_ctx,int slotCount,hx::Null< int >  __o_initialCapacity) {
	IntHashSet_obj *__this = (IntHashSet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IntHashSet_obj), true, "de.polygonal.ds.IntHashSet"));
	*(void **)__this = IntHashSet_obj::_hx_vtable;
	__this->__construct(slotCount,__o_initialCapacity);
	return __this;
}

IntHashSet_obj::IntHashSet_obj()
{
}

void IntHashSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IntHashSet);
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(capacity,"capacity");
	HX_MARK_MEMBER_NAME(growthRate,"growthRate");
	HX_MARK_MEMBER_NAME(reuseIterator,"reuseIterator");
	HX_MARK_MEMBER_NAME(slotCount,"slotCount");
	HX_MARK_MEMBER_NAME(mHash,"mHash");
	HX_MARK_MEMBER_NAME(mData,"mData");
	HX_MARK_MEMBER_NAME(mNext,"mNext");
	HX_MARK_MEMBER_NAME(mMask,"mMask");
	HX_MARK_MEMBER_NAME(mFree,"mFree");
	HX_MARK_MEMBER_NAME(mSize,"mSize");
	HX_MARK_MEMBER_NAME(mMinCapacity,"mMinCapacity");
	HX_MARK_MEMBER_NAME(mIterator,"mIterator");
	HX_MARK_END_CLASS();
}

void IntHashSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(capacity,"capacity");
	HX_VISIT_MEMBER_NAME(growthRate,"growthRate");
	HX_VISIT_MEMBER_NAME(reuseIterator,"reuseIterator");
	HX_VISIT_MEMBER_NAME(slotCount,"slotCount");
	HX_VISIT_MEMBER_NAME(mHash,"mHash");
	HX_VISIT_MEMBER_NAME(mData,"mData");
	HX_VISIT_MEMBER_NAME(mNext,"mNext");
	HX_VISIT_MEMBER_NAME(mMask,"mMask");
	HX_VISIT_MEMBER_NAME(mFree,"mFree");
	HX_VISIT_MEMBER_NAME(mSize,"mSize");
	HX_VISIT_MEMBER_NAME(mMinCapacity,"mMinCapacity");
	HX_VISIT_MEMBER_NAME(mIterator,"mIterator");
}

hx::Val IntHashSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pack") ) { return hx::Val( pack_dyn() ); }
		if (HX_FIELD_EQ(inName,"iter") ) { return hx::Val( iter_dyn() ); }
		if (HX_FIELD_EQ(inName,"grow") ) { return hx::Val( grow_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mHash") ) { return hx::Val( mHash ); }
		if (HX_FIELD_EQ(inName,"mData") ) { return hx::Val( mData ); }
		if (HX_FIELD_EQ(inName,"mNext") ) { return hx::Val( mNext ); }
		if (HX_FIELD_EQ(inName,"mMask") ) { return hx::Val( mMask ); }
		if (HX_FIELD_EQ(inName,"mFree") ) { return hx::Val( mFree ); }
		if (HX_FIELD_EQ(inName,"mSize") ) { return hx::Val( mSize ); }
		if (HX_FIELD_EQ(inName,"unset") ) { return hx::Val( unset_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rehash") ) { return hx::Val( rehash_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { return hx::Val( capacity ); }
		if (HX_FIELD_EQ(inName,"hasFront") ) { return hx::Val( hasFront_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"hashCode") ) { return hx::Val( hashCode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"slotCount") ) { return hx::Val( slotCount ); }
		if (HX_FIELD_EQ(inName,"mIterator") ) { return hx::Val( mIterator ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"growthRate") ) { return hx::Val( growthRate ); }
		if (HX_FIELD_EQ(inName,"loadFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_loadFactor() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mMinCapacity") ) { return hx::Val( mMinCapacity ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reuseIterator") ) { return hx::Val( reuseIterator ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_loadFactor") ) { return hx::Val( get_loadFactor_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getCollisionCount") ) { return hx::Val( getCollisionCount_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IntHashSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mHash") ) { mHash=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mData") ) { mData=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mNext") ) { mNext=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mMask") ) { mMask=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mFree") ) { mFree=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mSize") ) { mSize=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { capacity=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"slotCount") ) { slotCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mIterator") ) { mIterator=inValue.Cast<  ::de::polygonal::ds::IntHashSetIterator >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"growthRate") ) { growthRate=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mMinCapacity") ) { mMinCapacity=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reuseIterator") ) { reuseIterator=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IntHashSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("key","\x9f","\x89","\x51","\x00"));
	outFields->push(HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3"));
	outFields->push(HX_HCSTRING("growthRate","\xc7","\x5a","\x60","\xe8"));
	outFields->push(HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed"));
	outFields->push(HX_HCSTRING("loadFactor","\x95","\xc7","\x38","\x99"));
	outFields->push(HX_HCSTRING("slotCount","\xf1","\x5d","\x7f","\x2a"));
	outFields->push(HX_HCSTRING("mHash","\xdb","\x96","\x8e","\xf2"));
	outFields->push(HX_HCSTRING("mData","\x37","\xbd","\xe9","\xef"));
	outFields->push(HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6"));
	outFields->push(HX_HCSTRING("mMask","\xf9","\xa7","\xdc","\xf5"));
	outFields->push(HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1"));
	outFields->push(HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9"));
	outFields->push(HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1"));
	outFields->push(HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IntHashSet_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(IntHashSet_obj,key),HX_HCSTRING("key","\x9f","\x89","\x51","\x00")},
	{hx::fsInt,(int)offsetof(IntHashSet_obj,capacity),HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3")},
	{hx::fsInt,(int)offsetof(IntHashSet_obj,growthRate),HX_HCSTRING("growthRate","\xc7","\x5a","\x60","\xe8")},
	{hx::fsBool,(int)offsetof(IntHashSet_obj,reuseIterator),HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed")},
	{hx::fsInt,(int)offsetof(IntHashSet_obj,slotCount),HX_HCSTRING("slotCount","\xf1","\x5d","\x7f","\x2a")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntHashSet_obj,mHash),HX_HCSTRING("mHash","\xdb","\x96","\x8e","\xf2")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntHashSet_obj,mData),HX_HCSTRING("mData","\x37","\xbd","\xe9","\xef")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntHashSet_obj,mNext),HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6")},
	{hx::fsInt,(int)offsetof(IntHashSet_obj,mMask),HX_HCSTRING("mMask","\xf9","\xa7","\xdc","\xf5")},
	{hx::fsInt,(int)offsetof(IntHashSet_obj,mFree),HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1")},
	{hx::fsInt,(int)offsetof(IntHashSet_obj,mSize),HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9")},
	{hx::fsInt,(int)offsetof(IntHashSet_obj,mMinCapacity),HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1")},
	{hx::fsObject /*::de::polygonal::ds::IntHashSetIterator*/ ,(int)offsetof(IntHashSet_obj,mIterator),HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo IntHashSet_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &IntHashSet_obj::VAL_ABSENT,HX_HCSTRING("VAL_ABSENT","\xb7","\xf3","\x76","\xc6")},
	{hx::fsInt,(void *) &IntHashSet_obj::EMPTY_SLOT,HX_HCSTRING("EMPTY_SLOT","\x50","\x64","\x68","\x4b")},
	{hx::fsInt,(void *) &IntHashSet_obj::NULL_POINTER,HX_HCSTRING("NULL_POINTER","\xa5","\xb3","\xa1","\x92")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String IntHashSet_obj_sMemberFields[] = {
	HX_HCSTRING("key","\x9f","\x89","\x51","\x00"),
	HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3"),
	HX_HCSTRING("growthRate","\xc7","\x5a","\x60","\xe8"),
	HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed"),
	HX_HCSTRING("get_loadFactor","\xde","\x4f","\x2e","\x0f"),
	HX_HCSTRING("slotCount","\xf1","\x5d","\x7f","\x2a"),
	HX_HCSTRING("mHash","\xdb","\x96","\x8e","\xf2"),
	HX_HCSTRING("mData","\x37","\xbd","\xe9","\xef"),
	HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6"),
	HX_HCSTRING("mMask","\xf9","\xa7","\xdc","\xf5"),
	HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1"),
	HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9"),
	HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1"),
	HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e"),
	HX_HCSTRING("getCollisionCount","\x33","\xde","\xd7","\x0b"),
	HX_HCSTRING("hasFront","\xef","\x62","\xe6","\x92"),
	HX_HCSTRING("rehash","\x01","\xe9","\x2f","\x01"),
	HX_HCSTRING("pack","\xd9","\xd6","\x51","\x4a"),
	HX_HCSTRING("iter","\x18","\xc5","\xbf","\x45"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("hashCode","\x1b","\x0c","\x75","\x07"),
	HX_HCSTRING("grow","\x13","\xdc","\x6b","\x44"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("unset","\xe9","\xf2","\xee","\xa6"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	::String(null()) };

static void IntHashSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IntHashSet_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(IntHashSet_obj::VAL_ABSENT,"VAL_ABSENT");
	HX_MARK_MEMBER_NAME(IntHashSet_obj::EMPTY_SLOT,"EMPTY_SLOT");
	HX_MARK_MEMBER_NAME(IntHashSet_obj::NULL_POINTER,"NULL_POINTER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IntHashSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IntHashSet_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(IntHashSet_obj::VAL_ABSENT,"VAL_ABSENT");
	HX_VISIT_MEMBER_NAME(IntHashSet_obj::EMPTY_SLOT,"EMPTY_SLOT");
	HX_VISIT_MEMBER_NAME(IntHashSet_obj::NULL_POINTER,"NULL_POINTER");
};

#endif

hx::Class IntHashSet_obj::__mClass;

static ::String IntHashSet_obj_sStaticFields[] = {
	HX_HCSTRING("VAL_ABSENT","\xb7","\xf3","\x76","\xc6"),
	HX_HCSTRING("EMPTY_SLOT","\x50","\x64","\x68","\x4b"),
	HX_HCSTRING("NULL_POINTER","\xa5","\xb3","\xa1","\x92"),
	::String(null())
};

void IntHashSet_obj::__register()
{
	hx::Object *dummy = new IntHashSet_obj;
	IntHashSet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.ds.IntHashSet","\xae","\x91","\x48","\xe2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IntHashSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IntHashSet_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IntHashSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IntHashSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IntHashSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntHashSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntHashSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void IntHashSet_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_53_boot)
HXDLIN(  53)		VAL_ABSENT = (int)-2147483647;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_55_boot)
HXDLIN(  55)		EMPTY_SLOT = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e2ff615b15e3c5a9_56_boot)
HXDLIN(  56)		NULL_POINTER = (int)-1;
            	}
}

} // end namespace de
} // end namespace polygonal
} // end namespace ds
