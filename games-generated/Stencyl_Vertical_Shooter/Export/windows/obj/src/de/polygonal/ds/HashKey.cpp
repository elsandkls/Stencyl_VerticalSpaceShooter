// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_de_polygonal_ds_HashKey
#include <de/polygonal/ds/HashKey.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f5f174a6a4e9f518_46_next,"de.polygonal.ds.HashKey","next",0x974df2b9,"de.polygonal.ds.HashKey.next","de/polygonal/ds/HashKey.hx",46,0x84ab4a15)
namespace de{
namespace polygonal{
namespace ds{

void HashKey_obj::__construct() { }

Dynamic HashKey_obj::__CreateEmpty() { return new HashKey_obj; }

void *HashKey_obj::_hx_vtable = 0;

Dynamic HashKey_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HashKey_obj > _hx_result = new HashKey_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HashKey_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x105bdfca;
}

int HashKey_obj::_counter;

int HashKey_obj::next(){
            	HX_STACKFRAME(&_hx_pos_f5f174a6a4e9f518_46_next)
HXDLIN(  46)		return ::de::polygonal::ds::HashKey_obj::_counter++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(HashKey_obj,next,return )


HashKey_obj::HashKey_obj()
{
}

bool HashKey_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_counter") ) { outValue = ( _counter ); return true; }
	}
	return false;
}

bool HashKey_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_counter") ) { _counter=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *HashKey_obj_sMemberStorageInfo = 0;
static hx::StaticInfo HashKey_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &HashKey_obj::_counter,HX_HCSTRING("_counter","\x7d","\x08","\x12","\x57")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void HashKey_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HashKey_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(HashKey_obj::_counter,"_counter");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HashKey_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HashKey_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(HashKey_obj::_counter,"_counter");
};

#endif

hx::Class HashKey_obj::__mClass;

static ::String HashKey_obj_sStaticFields[] = {
	HX_HCSTRING("_counter","\x7d","\x08","\x12","\x57"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null())
};

void HashKey_obj::__register()
{
	hx::Object *dummy = new HashKey_obj;
	HashKey_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.ds.HashKey","\x68","\xc8","\x8b","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HashKey_obj::__GetStatic;
	__mClass->mSetStaticField = &HashKey_obj::__SetStatic;
	__mClass->mMarkFunc = HashKey_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(HashKey_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< HashKey_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HashKey_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HashKey_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HashKey_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace de
} // end namespace polygonal
} // end namespace ds
