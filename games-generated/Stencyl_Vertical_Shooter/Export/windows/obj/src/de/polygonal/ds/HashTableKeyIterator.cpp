// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_de_polygonal_ds_Collection
#include <de/polygonal/ds/Collection.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_HashTable
#include <de/polygonal/ds/HashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_HashTableKeyIterator
#include <de/polygonal/ds/HashTableKeyIterator.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Hashable
#include <de/polygonal/ds/Hashable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntIntHashTable
#include <de/polygonal/ds/IntIntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Itr
#include <de/polygonal/ds/Itr.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Map
#include <de/polygonal/ds/Map.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cd0370dffc679a99_766_new,"de.polygonal.ds.HashTableKeyIterator","new",0x2bb7e0c8,"de.polygonal.ds.HashTableKeyIterator.new","de/polygonal/ds/HashTable.hx",766,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_cd0370dffc679a99_772_free,"de.polygonal.ds.HashTableKeyIterator","free",0x0fece744,"de.polygonal.ds.HashTableKeyIterator.free","de/polygonal/ds/HashTable.hx",772,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_cd0370dffc679a99_778_reset,"de.polygonal.ds.HashTableKeyIterator","reset",0xbf9f4437,"de.polygonal.ds.HashTableKeyIterator.reset","de/polygonal/ds/HashTable.hx",778,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_cd0370dffc679a99_788_hasNext,"de.polygonal.ds.HashTableKeyIterator","hasNext",0x109f09d5,"de.polygonal.ds.HashTableKeyIterator.hasNext","de/polygonal/ds/HashTable.hx",788,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_cd0370dffc679a99_792_next,"de.polygonal.ds.HashTableKeyIterator","next",0x152ccf8b,"de.polygonal.ds.HashTableKeyIterator.next","de/polygonal/ds/HashTable.hx",792,0x58811c86)
HX_LOCAL_STACK_FRAME(_hx_pos_cd0370dffc679a99_800_remove,"de.polygonal.ds.HashTableKeyIterator","remove",0xe7ccbcdc,"de.polygonal.ds.HashTableKeyIterator.remove","de/polygonal/ds/HashTable.hx",800,0x58811c86)
namespace de{
namespace polygonal{
namespace ds{

void HashTableKeyIterator_obj::__construct( ::de::polygonal::ds::HashTable x){
            	HX_STACKFRAME(&_hx_pos_cd0370dffc679a99_766_new)
HXLINE( 767)		this->mObject = x;
HXLINE( 768)		this->reset();
            	}

Dynamic HashTableKeyIterator_obj::__CreateEmpty() { return new HashTableKeyIterator_obj; }

void *HashTableKeyIterator_obj::_hx_vtable = 0;

Dynamic HashTableKeyIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HashTableKeyIterator_obj > _hx_result = new HashTableKeyIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool HashTableKeyIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x197087fc;
}

static ::de::polygonal::ds::Itr_obj _hx_de_polygonal_ds_HashTableKeyIterator__hx_de_polygonal_ds_Itr= {
	( bool (hx::Object::*)())&::de::polygonal::ds::HashTableKeyIterator_obj::hasNext,
	(  ::Dynamic (hx::Object::*)())&::de::polygonal::ds::HashTableKeyIterator_obj::next,
	( void (hx::Object::*)())&::de::polygonal::ds::HashTableKeyIterator_obj::remove,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::HashTableKeyIterator_obj::reset,
};

void *HashTableKeyIterator_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x312668d4: return &_hx_de_polygonal_ds_HashTableKeyIterator__hx_de_polygonal_ds_Itr;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void HashTableKeyIterator_obj::free(){
            	HX_STACKFRAME(&_hx_pos_cd0370dffc679a99_772_free)
HXLINE( 773)		this->mObject = null();
HXLINE( 774)		this->mKeys = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTableKeyIterator_obj,free,(void))

::Dynamic HashTableKeyIterator_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_cd0370dffc679a99_778_reset)
HXLINE( 779)		this->mKeys = this->mObject->mKeys;
HXLINE( 780)		this->mS = this->mObject->mH->capacity;
HXLINE( 781)		this->mI = (int)0;
HXLINE( 782)		while(true){
HXLINE( 782)			bool _hx_tmp;
HXDLIN( 782)			if ((this->mI < this->mS)) {
HXLINE( 782)				_hx_tmp = hx::IsNull( this->mKeys->__get(this->mI) );
            			}
            			else {
HXLINE( 782)				_hx_tmp = false;
            			}
HXDLIN( 782)			if (!(_hx_tmp)) {
HXLINE( 782)				goto _hx_goto_2;
            			}
HXDLIN( 782)			this->mI++;
            		}
            		_hx_goto_2:;
HXLINE( 783)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTableKeyIterator_obj,reset,return )

bool HashTableKeyIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_cd0370dffc679a99_788_hasNext)
HXDLIN( 788)		return (this->mI < this->mS);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTableKeyIterator_obj,hasNext,return )

 ::Dynamic HashTableKeyIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_cd0370dffc679a99_792_next)
HXLINE( 793)		 ::Dynamic v = this->mKeys->__get(this->mI);
HXLINE( 794)		while(true){
HXLINE( 794)			bool _hx_tmp;
HXDLIN( 794)			if ((++this->mI < this->mS)) {
HXLINE( 794)				_hx_tmp = hx::IsNull( this->mKeys->__get(this->mI) );
            			}
            			else {
HXLINE( 794)				_hx_tmp = false;
            			}
HXDLIN( 794)			if (!(_hx_tmp)) {
HXLINE( 794)				goto _hx_goto_5;
            			}
            		}
            		_hx_goto_5:;
HXLINE( 795)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTableKeyIterator_obj,next,return )

void HashTableKeyIterator_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_cd0370dffc679a99_800_remove)
HXDLIN( 800)		HX_STACK_DO_THROW(HX_("unsupported operation",fc,a0,58,a5));
            	}


HX_DEFINE_DYNAMIC_FUNC0(HashTableKeyIterator_obj,remove,(void))


hx::ObjectPtr< HashTableKeyIterator_obj > HashTableKeyIterator_obj::__new( ::de::polygonal::ds::HashTable x) {
	hx::ObjectPtr< HashTableKeyIterator_obj > __this = new HashTableKeyIterator_obj();
	__this->__construct(x);
	return __this;
}

hx::ObjectPtr< HashTableKeyIterator_obj > HashTableKeyIterator_obj::__alloc(hx::Ctx *_hx_ctx, ::de::polygonal::ds::HashTable x) {
	HashTableKeyIterator_obj *__this = (HashTableKeyIterator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HashTableKeyIterator_obj), true, "de.polygonal.ds.HashTableKeyIterator"));
	*(void **)__this = HashTableKeyIterator_obj::_hx_vtable;
	__this->__construct(x);
	return __this;
}

HashTableKeyIterator_obj::HashTableKeyIterator_obj()
{
}

void HashTableKeyIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HashTableKeyIterator);
	HX_MARK_MEMBER_NAME(mObject,"mObject");
	HX_MARK_MEMBER_NAME(mKeys,"mKeys");
	HX_MARK_MEMBER_NAME(mI,"mI");
	HX_MARK_MEMBER_NAME(mS,"mS");
	HX_MARK_END_CLASS();
}

void HashTableKeyIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mObject,"mObject");
	HX_VISIT_MEMBER_NAME(mKeys,"mKeys");
	HX_VISIT_MEMBER_NAME(mI,"mI");
	HX_VISIT_MEMBER_NAME(mS,"mS");
}

hx::Val HashTableKeyIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mI") ) { return hx::Val( mI ); }
		if (HX_FIELD_EQ(inName,"mS") ) { return hx::Val( mS ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mKeys") ) { return hx::Val( mKeys ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mObject") ) { return hx::Val( mObject ); }
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HashTableKeyIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mI") ) { mI=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mS") ) { mS=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mKeys") ) { mKeys=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mObject") ) { mObject=inValue.Cast<  ::de::polygonal::ds::HashTable >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HashTableKeyIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mObject","\x0c","\x83","\x77","\xfe"));
	outFields->push(HX_HCSTRING("mKeys","\x01","\x49","\x8d","\xf4"));
	outFields->push(HX_HCSTRING("mI","\x3c","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("mS","\x46","\x5f","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HashTableKeyIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::de::polygonal::ds::HashTable*/ ,(int)offsetof(HashTableKeyIterator_obj,mObject),HX_HCSTRING("mObject","\x0c","\x83","\x77","\xfe")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(HashTableKeyIterator_obj,mKeys),HX_HCSTRING("mKeys","\x01","\x49","\x8d","\xf4")},
	{hx::fsInt,(int)offsetof(HashTableKeyIterator_obj,mI),HX_HCSTRING("mI","\x3c","\x5f","\x00","\x00")},
	{hx::fsInt,(int)offsetof(HashTableKeyIterator_obj,mS),HX_HCSTRING("mS","\x46","\x5f","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HashTableKeyIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String HashTableKeyIterator_obj_sMemberFields[] = {
	HX_HCSTRING("mObject","\x0c","\x83","\x77","\xfe"),
	HX_HCSTRING("mKeys","\x01","\x49","\x8d","\xf4"),
	HX_HCSTRING("mI","\x3c","\x5f","\x00","\x00"),
	HX_HCSTRING("mS","\x46","\x5f","\x00","\x00"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	::String(null()) };

static void HashTableKeyIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HashTableKeyIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HashTableKeyIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HashTableKeyIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class HashTableKeyIterator_obj::__mClass;

void HashTableKeyIterator_obj::__register()
{
	hx::Object *dummy = new HashTableKeyIterator_obj;
	HashTableKeyIterator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.ds.HashTableKeyIterator","\xd6","\x1c","\xfe","\xc5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HashTableKeyIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HashTableKeyIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HashTableKeyIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HashTableKeyIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HashTableKeyIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HashTableKeyIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace de
} // end namespace polygonal
} // end namespace ds
