// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_de_polygonal_ds_tools_GrowthRate
#include <de/polygonal/ds/tools/GrowthRate.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2b70c3da134cc20e_51_compute,"de.polygonal.ds.tools.GrowthRate","compute",0x9daa916c,"de.polygonal.ds.tools.GrowthRate.compute","de/polygonal/ds/tools/GrowthRate.hx",51,0x18ecb9fb)
HX_LOCAL_STACK_FRAME(_hx_pos_2b70c3da134cc20e_28_boot,"de.polygonal.ds.tools.GrowthRate","boot",0xa52a9f1d,"de.polygonal.ds.tools.GrowthRate.boot","de/polygonal/ds/tools/GrowthRate.hx",28,0x18ecb9fb)
HX_LOCAL_STACK_FRAME(_hx_pos_2b70c3da134cc20e_33_boot,"de.polygonal.ds.tools.GrowthRate","boot",0xa52a9f1d,"de.polygonal.ds.tools.GrowthRate.boot","de/polygonal/ds/tools/GrowthRate.hx",33,0x18ecb9fb)
HX_LOCAL_STACK_FRAME(_hx_pos_2b70c3da134cc20e_38_boot,"de.polygonal.ds.tools.GrowthRate","boot",0xa52a9f1d,"de.polygonal.ds.tools.GrowthRate.boot","de/polygonal/ds/tools/GrowthRate.hx",38,0x18ecb9fb)
HX_LOCAL_STACK_FRAME(_hx_pos_2b70c3da134cc20e_43_boot,"de.polygonal.ds.tools.GrowthRate","boot",0xa52a9f1d,"de.polygonal.ds.tools.GrowthRate.boot","de/polygonal/ds/tools/GrowthRate.hx",43,0x18ecb9fb)
namespace de{
namespace polygonal{
namespace ds{
namespace tools{

void GrowthRate_obj::__construct() { }

Dynamic GrowthRate_obj::__CreateEmpty() { return new GrowthRate_obj; }

void *GrowthRate_obj::_hx_vtable = 0;

Dynamic GrowthRate_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GrowthRate_obj > _hx_result = new GrowthRate_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GrowthRate_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a695bcf;
}

int GrowthRate_obj::FIXED;

int GrowthRate_obj::MILD;

int GrowthRate_obj::NORMAL;

int GrowthRate_obj::DOUBLE;

int GrowthRate_obj::compute(int rate,int capacity){
            	HX_STACKFRAME(&_hx_pos_2b70c3da134cc20e_51_compute)
HXLINE(  54)		if ((rate > (int)0)) {
HXLINE(  55)			capacity = (capacity + rate);
            		}
            		else {
HXLINE(  58)			switch((int)(rate)){
            				case (int)-3: {
HXLINE(  69)					capacity = ((int)capacity << (int)(int)1);
            				}
            				break;
            				case (int)-2: {
HXLINE(  67)					capacity = (((int)(capacity * (int)3) >> (int)(int)1) + (int)1);
            				}
            				break;
            				case (int)-1: {
HXLINE(  63)					int newSize = (capacity + (int)1);
HXLINE(  64)					int capacity1;
HXDLIN(  64)					if ((newSize < (int)9)) {
HXLINE(  64)						capacity1 = (int)3;
            					}
            					else {
HXLINE(  64)						capacity1 = (int)6;
            					}
HXDLIN(  64)					capacity = (((int)newSize >> (int)(int)3) + capacity1);
HXLINE(  65)					capacity = (capacity + newSize);
            				}
            				break;
            				case (int)0: {
HXLINE(  60)					HX_STACK_DO_THROW(HX_("out of space",cf,e2,d1,92));
            				}
            				break;
            			}
            		}
HXLINE(  72)		return capacity;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GrowthRate_obj,compute,return )


GrowthRate_obj::GrowthRate_obj()
{
}

bool GrowthRate_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"compute") ) { outValue = compute_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GrowthRate_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GrowthRate_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &GrowthRate_obj::FIXED,HX_HCSTRING("FIXED","\x54","\x31","\x90","\x7e")},
	{hx::fsInt,(void *) &GrowthRate_obj::MILD,HX_HCSTRING("MILD","\xd4","\x14","\x1d","\x33")},
	{hx::fsInt,(void *) &GrowthRate_obj::NORMAL,HX_HCSTRING("NORMAL","\x27","\x1e","\xec","\xe2")},
	{hx::fsInt,(void *) &GrowthRate_obj::DOUBLE,HX_HCSTRING("DOUBLE","\x11","\xd7","\x4d","\xe5")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GrowthRate_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GrowthRate_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GrowthRate_obj::FIXED,"FIXED");
	HX_MARK_MEMBER_NAME(GrowthRate_obj::MILD,"MILD");
	HX_MARK_MEMBER_NAME(GrowthRate_obj::NORMAL,"NORMAL");
	HX_MARK_MEMBER_NAME(GrowthRate_obj::DOUBLE,"DOUBLE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GrowthRate_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GrowthRate_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GrowthRate_obj::FIXED,"FIXED");
	HX_VISIT_MEMBER_NAME(GrowthRate_obj::MILD,"MILD");
	HX_VISIT_MEMBER_NAME(GrowthRate_obj::NORMAL,"NORMAL");
	HX_VISIT_MEMBER_NAME(GrowthRate_obj::DOUBLE,"DOUBLE");
};

#endif

hx::Class GrowthRate_obj::__mClass;

static ::String GrowthRate_obj_sStaticFields[] = {
	HX_HCSTRING("FIXED","\x54","\x31","\x90","\x7e"),
	HX_HCSTRING("MILD","\xd4","\x14","\x1d","\x33"),
	HX_HCSTRING("NORMAL","\x27","\x1e","\xec","\xe2"),
	HX_HCSTRING("DOUBLE","\x11","\xd7","\x4d","\xe5"),
	HX_HCSTRING("compute","\x77","\x47","\x78","\x83"),
	::String(null())
};

void GrowthRate_obj::__register()
{
	hx::Object *dummy = new GrowthRate_obj;
	GrowthRate_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.ds.tools.GrowthRate","\x63","\x2d","\x51","\x97");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GrowthRate_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GrowthRate_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GrowthRate_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GrowthRate_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GrowthRate_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GrowthRate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GrowthRate_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GrowthRate_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2b70c3da134cc20e_28_boot)
HXDLIN(  28)		FIXED = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2b70c3da134cc20e_33_boot)
HXDLIN(  33)		MILD = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2b70c3da134cc20e_38_boot)
HXDLIN(  38)		NORMAL = (int)-2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2b70c3da134cc20e_43_boot)
HXDLIN(  43)		DOUBLE = (int)-3;
            	}
}

} // end namespace de
} // end namespace polygonal
} // end namespace ds
} // end namespace tools
