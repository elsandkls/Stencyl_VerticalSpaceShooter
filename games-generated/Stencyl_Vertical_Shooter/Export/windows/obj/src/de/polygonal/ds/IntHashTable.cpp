// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_de_polygonal_Printf
#include <de/polygonal/Printf.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Cloneable
#include <de/polygonal/ds/Cloneable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Collection
#include <de/polygonal/ds/Collection.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_HashKey
#include <de/polygonal/ds/HashKey.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Hashable
#include <de/polygonal/ds/Hashable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntHashTable
#include <de/polygonal/ds/IntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntHashTableIterator
#include <de/polygonal/ds/IntHashTableIterator.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntIntHashTable
#include <de/polygonal/ds/IntIntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Itr
#include <de/polygonal/ds/Itr.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_ListSet
#include <de/polygonal/ds/ListSet.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Map
#include <de/polygonal/ds/Map.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Set
#include <de/polygonal/ds/Set.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_GrowthRate
#include <de/polygonal/ds/tools/GrowthRate.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_tools_NativeArrayTools
#include <de/polygonal/ds/tools/NativeArrayTools.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_65_new,"de.polygonal.ds.IntHashTable","new",0x2a867f0c,"de.polygonal.ds.IntHashTable.new","de/polygonal/ds/IntHashTable.hx",65,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_88_get_growthRate,"de.polygonal.ds.IntHashTable","get_growthRate",0x26839be4,"de.polygonal.ds.IntHashTable.get_growthRate","de/polygonal/ds/IntHashTable.hx",88,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_92_set_growthRate,"de.polygonal.ds.IntHashTable","set_growthRate",0x46a38458,"de.polygonal.ds.IntHashTable.set_growthRate","de/polygonal/ds/IntHashTable.hx",92,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_116_get_loadFactor,"de.polygonal.ds.IntHashTable","get_loadFactor",0xd75c08b2,"de.polygonal.ds.IntHashTable.get_loadFactor","de/polygonal/ds/IntHashTable.hx",116,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_125_get_slotCount,"de.polygonal.ds.IntHashTable","get_slotCount",0x4aeb6f74,"de.polygonal.ds.IntHashTable.get_slotCount","de/polygonal/ds/IntHashTable.hx",125,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_189_getCollisionCount,"de.polygonal.ds.IntHashTable","getCollisionCount",0x092e61df,"de.polygonal.ds.IntHashTable.getCollisionCount","de/polygonal/ds/IntHashTable.hx",189,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_198_getFront,"de.polygonal.ds.IntHashTable","getFront",0xe51dca07,"de.polygonal.ds.IntHashTable.getFront","de/polygonal/ds/IntHashTable.hx",198,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_211_setIfAbsent,"de.polygonal.ds.IntHashTable","setIfAbsent",0x6a29fee4,"de.polygonal.ds.IntHashTable.setIfAbsent","de/polygonal/ds/IntHashTable.hx",211,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_235_rehash,"de.polygonal.ds.IntHashTable","rehash",0x370eadd5,"de.polygonal.ds.IntHashTable.rehash","de/polygonal/ds/IntHashTable.hx",235,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_245_remap,"de.polygonal.ds.IntHashTable","remap",0x06006a75,"de.polygonal.ds.IntHashTable.remap","de/polygonal/ds/IntHashTable.hx",245,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_261_toKeyArray,"de.polygonal.ds.IntHashTable","toKeyArray",0xf39966e9,"de.polygonal.ds.IntHashTable.toKeyArray","de/polygonal/ds/IntHashTable.hx",261,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_291_toString,"de.polygonal.ds.IntHashTable","toString",0xb7277280,"de.polygonal.ds.IntHashTable.toString","de/polygonal/ds/IntHashTable.hx",291,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_269_toString,"de.polygonal.ds.IntHashTable","toString",0xb7277280,"de.polygonal.ds.IntHashTable.toString","de/polygonal/ds/IntHashTable.hx",269,0x9923b2c5)
static const ::String _hx_array_data_0387491a_23[] = {
	HX_(" ]",3d,1c,00,00),
};
static const ::String _hx_array_data_0387491a_24[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_0387491a_25[] = {
	HX_("]",5d,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_334_has,"de.polygonal.ds.IntHashTable","has",0x2a81ee06,"de.polygonal.ds.IntHashTable.has","de/polygonal/ds/IntHashTable.hx",334,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_349_hasKey,"de.polygonal.ds.IntHashTable","hasKey",0xf1175b39,"de.polygonal.ds.IntHashTable.hasKey","de/polygonal/ds/IntHashTable.hx",349,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_357_count,"de.polygonal.ds.IntHashTable","count",0x699ff67b,"de.polygonal.ds.IntHashTable.count","de/polygonal/ds/IntHashTable.hx",357,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_364_get,"de.polygonal.ds.IntHashTable","get",0x2a812f42,"de.polygonal.ds.IntHashTable.get","de/polygonal/ds/IntHashTable.hx",364,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_374_getAll,"de.polygonal.ds.IntHashTable","getAll",0xd8f7f6ff,"de.polygonal.ds.IntHashTable.getAll","de/polygonal/ds/IntHashTable.hx",374,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_396_set,"de.polygonal.ds.IntHashTable","set",0x2a8a4a4e,"de.polygonal.ds.IntHashTable.set","de/polygonal/ds/IntHashTable.hx",396,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_415_unset,"de.polygonal.ds.IntHashTable","unset",0xc62ba495,"de.polygonal.ds.IntHashTable.unset","de/polygonal/ds/IntHashTable.hx",415,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_433_toValSet,"de.polygonal.ds.IntHashTable","toValSet",0xf59480f0,"de.polygonal.ds.IntHashTable.toValSet","de/polygonal/ds/IntHashTable.hx",433,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_446_toKeySet,"de.polygonal.ds.IntHashTable","toKeySet",0xe5d9a0f2,"de.polygonal.ds.IntHashTable.toKeySet","de/polygonal/ds/IntHashTable.hx",446,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_458_keys,"de.polygonal.ds.IntHashTable","keys",0x092d09c8,"de.polygonal.ds.IntHashTable.keys","de/polygonal/ds/IntHashTable.hx",458,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_465_pack,"de.polygonal.ds.IntHashTable","pack",0x0c77fead,"de.polygonal.ds.IntHashTable.pack","de/polygonal/ds/IntHashTable.hx",465,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_517_iter,"de.polygonal.ds.IntHashTable","iter",0x07e5ecec,"de.polygonal.ds.IntHashTable.iter","de/polygonal/ds/IntHashTable.hx",517,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_525_grow,"de.polygonal.ds.IntHashTable","grow",0x069203e7,"de.polygonal.ds.IntHashTable.grow","de/polygonal/ds/IntHashTable.hx",525,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_565_get_size,"de.polygonal.ds.IntHashTable","get_size",0x4ac6fe1e,"de.polygonal.ds.IntHashTable.get_size","de/polygonal/ds/IntHashTable.hx",565,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_574_free,"de.polygonal.ds.IntHashTable","free",0x05e8c480,"de.polygonal.ds.IntHashTable.free","de/polygonal/ds/IntHashTable.hx",574,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_601_contains,"de.polygonal.ds.IntHashTable","contains",0xab33fbf3,"de.polygonal.ds.IntHashTable.contains","de/polygonal/ds/IntHashTable.hx",601,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_609_remove,"de.polygonal.ds.IntHashTable","remove",0x3a676118,"de.polygonal.ds.IntHashTable.remove","de/polygonal/ds/IntHashTable.hx",609,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_630_clear,"de.polygonal.ds.IntHashTable","clear",0x67982339,"de.polygonal.ds.IntHashTable.clear","de/polygonal/ds/IntHashTable.hx",630,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_655_iterator,"de.polygonal.ds.IntHashTable","iterator",0x1252ebc2,"de.polygonal.ds.IntHashTable.iterator","de/polygonal/ds/IntHashTable.hx",655,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_672_isEmpty,"de.polygonal.ds.IntHashTable","isEmpty",0xf96d52ef,"de.polygonal.ds.IntHashTable.isEmpty","de/polygonal/ds/IntHashTable.hx",672,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_679_toArray,"de.polygonal.ds.IntHashTable","toArray",0xdf212eca,"de.polygonal.ds.IntHashTable.toArray","de/polygonal/ds/IntHashTable.hx",679,0x9923b2c5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae3fa711bfa000bc_698_clone,"de.polygonal.ds.IntHashTable","clone",0x679fc509,"de.polygonal.ds.IntHashTable.clone","de/polygonal/ds/IntHashTable.hx",698,0x9923b2c5)
namespace de{
namespace polygonal{
namespace ds{

void IntHashTable_obj::__construct(int slotCount,hx::Null< int >  __o_initialCapacity){
int initialCapacity = __o_initialCapacity.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_65_new)
HXLINE( 143)		this->mTmpKeyBuffer = ::Array_obj< int >::__new(0);
HXLINE( 142)		this->mIterator = null();
HXLINE( 139)		this->mSize = (int)0;
HXLINE( 138)		this->mFree = (int)0;
HXLINE( 102)		this->reuseIterator = false;
HXLINE(  72)		this->key = ::de::polygonal::ds::HashKey_obj::next();
HXLINE( 160)		if ((initialCapacity == (int)-1)) {
HXLINE( 160)			initialCapacity = slotCount;
            		}
HXLINE( 161)		if (((int)2 > initialCapacity)) {
HXLINE( 161)			initialCapacity = (int)2;
            		}
            		else {
HXLINE( 161)			initialCapacity = initialCapacity;
            		}
HXLINE( 163)		this->mMinCapacity = (this->capacity = initialCapacity);
HXLINE( 165)		this->mH =  ::de::polygonal::ds::IntIntHashTable_obj::__alloc( HX_CTX ,slotCount,this->capacity);
HXLINE( 166)		int len = this->capacity;
HXDLIN( 166)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXDLIN( 166)		_hx_array_set_size_exact(a,len);
HXDLIN( 166)		this->mVals = a;
HXLINE( 173)		int len1 = this->capacity;
HXDLIN( 173)		::Array< int > a1 = ::Array_obj< int >::__new();
HXDLIN( 173)		_hx_array_set_size_exact(a1,len1);
HXDLIN( 173)		this->mNext = a1;
HXLINE( 174)		int len2 = this->capacity;
HXDLIN( 174)		::Array< int > a2 = ::Array_obj< int >::__new();
HXDLIN( 174)		_hx_array_set_size_exact(a2,len2);
HXDLIN( 174)		this->mKeys = ::de::polygonal::ds::tools::NativeArrayTools_obj::init(a2,(int)-2147483647,(int)0,this->capacity);
HXLINE( 177)		::Array< int > t = this->mNext;
HXLINE( 178)		{
HXLINE( 178)			int _g1 = (int)0;
HXDLIN( 178)			int _g = (this->capacity - (int)1);
HXDLIN( 178)			while((_g1 < _g)){
HXLINE( 178)				_g1 = (_g1 + (int)1);
HXDLIN( 178)				int i = (_g1 - (int)1);
HXDLIN( 178)				t[i] = (i + (int)1);
            			}
            		}
HXLINE( 179)		t[(this->capacity - (int)1)] = (int)-1;
            	}

Dynamic IntHashTable_obj::__CreateEmpty() { return new IntHashTable_obj; }

void *IntHashTable_obj::_hx_vtable = 0;

Dynamic IntHashTable_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IntHashTable_obj > _hx_result = new IntHashTable_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool IntHashTable_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x552c1624;
}

static ::de::polygonal::ds::Map_obj _hx_de_polygonal_ds_IntHashTable__hx_de_polygonal_ds_Map= {
	( int (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::get_size,
	( void (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::free,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::contains,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::remove,
	( void (hx::Object::*)(hx::Null< bool > ))&::de::polygonal::ds::IntHashTable_obj::clear,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::iterator,
	( bool (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::isEmpty,
	( ::cpp::VirtualArray (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::toArray,
	( ::Dynamic (hx::Object::*)(hx::Null< bool > , ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::clone,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::has,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::hasKey_5889326f,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::get_dc94b8fa,
	( bool (hx::Object::*)( ::Dynamic, ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::set_3c796a1c,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::unset_5889326f,
	( bool (hx::Object::*)( ::Dynamic, ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::remap_3c796a1c,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::toValSet,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::toKeySet,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::keys,
};

static ::de::polygonal::ds::Collection_obj _hx_de_polygonal_ds_IntHashTable__hx_de_polygonal_ds_Collection= {
	( int (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::get_size,
	( void (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::free,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::contains,
	( bool (hx::Object::*)( ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::remove,
	( void (hx::Object::*)(hx::Null< bool > ))&::de::polygonal::ds::IntHashTable_obj::clear,
	( ::Dynamic (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::iterator,
	( bool (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::isEmpty,
	( ::cpp::VirtualArray (hx::Object::*)())&::de::polygonal::ds::IntHashTable_obj::toArray,
	( ::Dynamic (hx::Object::*)(hx::Null< bool > , ::Dynamic))&::de::polygonal::ds::IntHashTable_obj::clone,
};

static ::de::polygonal::ds::Hashable_obj _hx_de_polygonal_ds_IntHashTable__hx_de_polygonal_ds_Hashable= {
};

bool IntHashTable_obj::remap_3c796a1c( ::Dynamic key, ::Dynamic val) {
			return remap(key,val);
}

bool IntHashTable_obj::unset_5889326f( ::Dynamic key) {
			return unset(key);
}

bool IntHashTable_obj::set_3c796a1c( ::Dynamic key, ::Dynamic val) {
			return set(key,val);
}

 ::Dynamic IntHashTable_obj::get_dc94b8fa( ::Dynamic key) {
			return get(key);
}

bool IntHashTable_obj::hasKey_5889326f( ::Dynamic key) {
			return hasKey(key);
}
void *IntHashTable_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x31296149: return &_hx_de_polygonal_ds_IntHashTable__hx_de_polygonal_ds_Map;
		case (int)0xfeda5751: return &_hx_de_polygonal_ds_IntHashTable__hx_de_polygonal_ds_Collection;
		case (int)0xff6ef29b: return &_hx_de_polygonal_ds_IntHashTable__hx_de_polygonal_ds_Hashable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int IntHashTable_obj::get_growthRate(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_88_get_growthRate)
HXDLIN(  88)		return this->mH->growthRate;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,get_growthRate,return )

int IntHashTable_obj::set_growthRate(int value){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_92_set_growthRate)
HXDLIN(  92)		return (this->mH->growthRate = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,set_growthRate,return )

Float IntHashTable_obj::get_loadFactor(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_116_get_loadFactor)
HXDLIN( 116)		return this->mH->get_loadFactor();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,get_loadFactor,return )

int IntHashTable_obj::get_slotCount(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_125_get_slotCount)
HXDLIN( 125)		return this->mH->slotCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,get_slotCount,return )

int IntHashTable_obj::getCollisionCount(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_189_getCollisionCount)
HXDLIN( 189)		return this->mH->getCollisionCount();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,getCollisionCount,return )

 ::Dynamic IntHashTable_obj::getFront(int key){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_198_getFront)
HXLINE( 199)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 199)		int b = ((int)(key * (int)73856093) & (int)_this->mMask);
HXDLIN( 199)		int i = _this->mHash->__get(b);
HXDLIN( 199)		int i1;
HXDLIN( 199)		if ((i == (int)-1)) {
HXLINE( 199)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 199)			::Array< int > d = _this->mData;
HXDLIN( 199)			if ((d->__get(i) == key)) {
HXLINE( 199)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 199)				int v = (int)-2147483647;
HXDLIN( 199)				int first = i;
HXDLIN( 199)				int i0 = first;
HXDLIN( 199)				i = d->__get((i + (int)2));
HXDLIN( 199)				while((i != (int)-1)){
HXLINE( 199)					if ((d->__get(i) == key)) {
HXLINE( 199)						v = d->__get((i + (int)1));
HXDLIN( 199)						d[(i0 + (int)2)] = d->__get((i + (int)2));
HXDLIN( 199)						d[(i + (int)2)] = first;
HXDLIN( 199)						_this->mHash[b] = i;
HXDLIN( 199)						goto _hx_goto_7;
            					}
HXDLIN( 199)					i0 = i;
HXDLIN( 199)					i = d->__get((i0 + (int)2));
            				}
            				_hx_goto_7:;
HXDLIN( 199)				i1 = v;
            			}
            		}
HXLINE( 200)		if ((i1 == (int)-2147483647)) {
HXLINE( 201)			return null();
            		}
            		else {
HXLINE( 203)			return this->mVals->__get(i1);
            		}
HXLINE( 200)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,getFront,return )

bool IntHashTable_obj::setIfAbsent(int key, ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_211_setIfAbsent)
HXLINE( 214)		if ((this->mSize == this->capacity)) {
HXLINE( 214)			this->grow();
            		}
HXLINE( 216)		int i = this->mFree;
HXLINE( 217)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 217)		int b = ((int)(key * (int)73856093) & (int)_this->mMask);
HXDLIN( 217)		::Array< int > d = _this->mData;
HXDLIN( 217)		int j = _this->mHash->__get(b);
HXDLIN( 217)		bool _hx_tmp;
HXDLIN( 217)		if ((j == (int)-1)) {
HXLINE( 217)			if ((_this->mSize == _this->capacity)) {
HXLINE( 217)				_this->grow();
HXDLIN( 217)				d = _this->mData;
            			}
HXDLIN( 217)			int i1 = (_this->mFree * (int)3);
HXDLIN( 217)			_this->mFree = _this->mNext->__get(_this->mFree);
HXDLIN( 217)			_this->mHash[b] = i1;
HXDLIN( 217)			d[i1] = key;
HXDLIN( 217)			d[(i1 + (int)1)] = i;
HXDLIN( 217)			_this->mSize++;
HXDLIN( 217)			_hx_tmp = true;
            		}
            		else {
HXLINE( 217)			if ((d->__get(j) == key)) {
HXLINE( 217)				_hx_tmp = false;
            			}
            			else {
HXLINE( 217)				int t = d->__get((j + (int)2));
HXDLIN( 217)				while((t != (int)-1)){
HXLINE( 217)					if ((d->__get(t) == key)) {
HXLINE( 217)						j = (int)-1;
HXDLIN( 217)						goto _hx_goto_9;
            					}
HXDLIN( 217)					j = t;
HXDLIN( 217)					t = d->__get((j + (int)2));
            				}
            				_hx_goto_9:;
HXDLIN( 217)				if ((j == (int)-1)) {
HXLINE( 217)					_hx_tmp = false;
            				}
            				else {
HXLINE( 217)					if ((_this->mSize == _this->capacity)) {
HXLINE( 217)						_this->grow();
HXDLIN( 217)						d = _this->mData;
            					}
HXDLIN( 217)					int i2 = (_this->mFree * (int)3);
HXDLIN( 217)					_this->mFree = _this->mNext->__get(_this->mFree);
HXDLIN( 217)					d[(j + (int)2)] = i2;
HXDLIN( 217)					d[i2] = key;
HXDLIN( 217)					d[(i2 + (int)1)] = i;
HXDLIN( 217)					_this->mSize++;
HXDLIN( 217)					_hx_tmp = true;
            				}
            			}
            		}
HXDLIN( 217)		if (_hx_tmp) {
HXLINE( 219)			this->mVals->set(i,val);
HXLINE( 220)			this->mKeys[i] = key;
HXLINE( 221)			this->mFree = this->mNext->__get(i);
HXLINE( 222)			this->mSize++;
HXLINE( 223)			return true;
            		}
            		else {
HXLINE( 226)			return false;
            		}
HXLINE( 217)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntHashTable_obj,setIfAbsent,return )

 ::de::polygonal::ds::IntHashTable IntHashTable_obj::rehash(int slotCount){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_235_rehash)
HXLINE( 236)		this->mH->rehash(slotCount);
HXLINE( 237)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,rehash,return )

bool IntHashTable_obj::remap(int key, ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_245_remap)
HXLINE( 246)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 246)		int i = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN( 246)		int i1;
HXDLIN( 246)		if ((i == (int)-1)) {
HXLINE( 246)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 246)			::Array< int > d = _this->mData;
HXDLIN( 246)			if ((d->__get(i) == key)) {
HXLINE( 246)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 246)				int v = (int)-2147483647;
HXDLIN( 246)				i = d->__get((i + (int)2));
HXDLIN( 246)				while((i != (int)-1)){
HXLINE( 246)					if ((d->__get(i) == key)) {
HXLINE( 246)						v = d->__get((i + (int)1));
HXDLIN( 246)						goto _hx_goto_12;
            					}
HXDLIN( 246)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_12:;
HXDLIN( 246)				i1 = v;
            			}
            		}
HXLINE( 247)		if ((i1 != (int)-2147483647)) {
HXLINE( 249)			this->mVals->set(i1,val);
HXLINE( 250)			return true;
            		}
            		else {
HXLINE( 253)			return false;
            		}
HXLINE( 247)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntHashTable_obj,remap,return )

::Array< int > IntHashTable_obj::toKeyArray(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_261_toKeyArray)
HXDLIN( 261)		return this->mH->toKeyArray();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,toKeyArray,return )

::String IntHashTable_obj::toString(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(int a,int b2){
            			HX_GC_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_291_toString)
HXLINE( 291)			return (a - b2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_269_toString)
HXLINE( 268)		 ::de::polygonal::ds::IntHashTable _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 270)		 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 271)		{
HXLINE( 271)			::String x = ((((HX_("[ IntHashTable size=",32,da,4e,39) + this->mSize) + HX_(" capacity=",a3,0d,35,89)) + this->capacity) + HX_(" load=%.2f",54,33,62,c9));
HXDLIN( 271)			::String x1 = ::de::polygonal::Printf_obj::format(x,::cpp::VirtualArray_obj::__new(1)->init(0,this->get_loadFactor()));
HXDLIN( 271)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 271)				b->flush();
            			}
HXDLIN( 271)			if (hx::IsNull( b->b )) {
HXLINE( 271)				b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 271)				::Array< ::String > b1 = b->b;
HXDLIN( 271)				b1->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 272)		if ((this->mSize == (int)0)) {
HXLINE( 274)			{
HXLINE( 274)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 274)					b->flush();
            				}
HXDLIN( 274)				if (hx::IsNull( b->b )) {
HXLINE( 274)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_0387491a_23,1);
            				}
            				else {
HXLINE( 274)					b->b->push(HX_(" ]",3d,1c,00,00));
            				}
            			}
HXLINE( 275)			return b->toString();
            		}
HXLINE( 277)		{
HXLINE( 277)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 277)				b->flush();
            			}
HXDLIN( 277)			if (hx::IsNull( b->b )) {
HXLINE( 277)				b->b = ::Array_obj< ::String >::fromData( _hx_array_data_0387491a_24,1);
            			}
            			else {
HXLINE( 277)				b->b->push(HX_("\n",0a,00,00,00));
            			}
            		}
HXLINE( 278)		Float max = ((Float)0.);
HXLINE( 279)		{
HXLINE( 279)			::Dynamic key = this->keys();
HXDLIN( 279)			while(::de::polygonal::ds::Itr_obj::hasNext(key)){
HXLINE( 279)				int key1 = ( (int)(::de::polygonal::ds::Itr_obj::next(key)) );
HXDLIN( 279)				max = ::Math_obj::max(max,key1);
            			}
            		}
HXLINE( 280)		int i = (int)1;
HXLINE( 281)		while((max != (int)0)){
HXLINE( 283)			i = (i + (int)1);
HXLINE( 284)			max = ::Std_obj::_hx_int(((Float)max / (Float)(int)10));
            		}
HXLINE( 287)		::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new();
HXLINE( 288)		::String fmt = ((HX_("  %- ",b8,9e,15,82) + i) + HX_("d -> %s\n",a9,eb,8d,50));
HXLINE( 290)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 290)		{
HXLINE( 290)			::Dynamic key2 = this->keys();
HXDLIN( 290)			while(::de::polygonal::ds::Itr_obj::hasNext(key2)){
HXLINE( 290)				int key3 = ( (int)(::de::polygonal::ds::Itr_obj::next(key2)) );
HXDLIN( 290)				_g->push(key3);
            			}
            		}
HXDLIN( 290)		::Array< int > keys = _g;
HXLINE( 291)		keys->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 292)		i = (int)1;
HXLINE( 293)		int k = keys->length;
HXLINE( 294)		int j = (int)0;
HXLINE( 295)		int c = (int)1;
HXLINE( 309)		while((i < k)){
HXLINE( 311)			if ((keys->__get(j) == keys->__get(i))) {
HXLINE( 312)				c = (c + (int)1);
            			}
            			else {
HXLINE( 315)				{
HXLINE( 315)					int key4 = keys->__get(j);
HXDLIN( 315)					args->set((int)0,key4);
HXDLIN( 315)					if ((c > (int)1)) {
HXLINE( 315)						::cpp::VirtualArray tmp = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 315)						_gthis->getAll(key4,tmp);
HXDLIN( 315)						args->set((int)1,tmp->join(HX_(",",2c,00,00,00)));
            					}
            					else {
HXLINE( 315)						::cpp::VirtualArray _gthis1 = _gthis->mVals;
HXDLIN( 315)						 ::de::polygonal::ds::IntIntHashTable _this = _gthis->mH;
HXDLIN( 315)						int i1 = _this->mHash->__get(((int)(key4 * (int)73856093) & (int)_this->mMask));
HXDLIN( 315)						int _gthis2;
HXDLIN( 315)						if ((i1 == (int)-1)) {
HXLINE( 315)							_gthis2 = (int)-2147483647;
            						}
            						else {
HXLINE( 315)							::Array< int > d = _this->mData;
HXDLIN( 315)							if ((d->__get(i1) == key4)) {
HXLINE( 315)								_gthis2 = d->__get((i1 + (int)1));
            							}
            							else {
HXLINE( 315)								int v = (int)-2147483647;
HXDLIN( 315)								i1 = d->__get((i1 + (int)2));
HXDLIN( 315)								while((i1 != (int)-1)){
HXLINE( 315)									if ((d->__get(i1) == key4)) {
HXLINE( 315)										v = d->__get((i1 + (int)1));
HXDLIN( 315)										goto _hx_goto_19;
            									}
HXDLIN( 315)									i1 = d->__get((i1 + (int)2));
            								}
            								_hx_goto_19:;
HXDLIN( 315)								_gthis2 = v;
            							}
            						}
HXDLIN( 315)						args->set((int)1,::Std_obj::string(_gthis1->__get(_gthis2)));
            					}
HXDLIN( 315)					{
HXLINE( 315)						::String x2 = ::de::polygonal::Printf_obj::format(fmt,args);
HXDLIN( 315)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 315)							b->flush();
            						}
HXDLIN( 315)						if (hx::IsNull( b->b )) {
HXLINE( 315)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            						}
            						else {
HXLINE( 315)							::Array< ::String > b3 = b->b;
HXDLIN( 315)							b3->push(::Std_obj::string(x2));
            						}
            					}
            				}
HXLINE( 316)				j = i;
HXLINE( 317)				c = (int)1;
            			}
HXLINE( 319)			i = (i + (int)1);
            		}
HXLINE( 321)		{
HXLINE( 321)			int key5 = keys->__get(j);
HXDLIN( 321)			args->set((int)0,key5);
HXDLIN( 321)			if ((c > (int)1)) {
HXLINE( 321)				::cpp::VirtualArray tmp1 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 321)				_gthis->getAll(key5,tmp1);
HXDLIN( 321)				args->set((int)1,tmp1->join(HX_(",",2c,00,00,00)));
            			}
            			else {
HXLINE( 321)				::cpp::VirtualArray _gthis3 = _gthis->mVals;
HXDLIN( 321)				 ::de::polygonal::ds::IntIntHashTable _this1 = _gthis->mH;
HXDLIN( 321)				int i2 = _this1->mHash->__get(((int)(key5 * (int)73856093) & (int)_this1->mMask));
HXDLIN( 321)				int _gthis4;
HXDLIN( 321)				if ((i2 == (int)-1)) {
HXLINE( 321)					_gthis4 = (int)-2147483647;
            				}
            				else {
HXLINE( 321)					::Array< int > d1 = _this1->mData;
HXDLIN( 321)					if ((d1->__get(i2) == key5)) {
HXLINE( 321)						_gthis4 = d1->__get((i2 + (int)1));
            					}
            					else {
HXLINE( 321)						int v1 = (int)-2147483647;
HXDLIN( 321)						i2 = d1->__get((i2 + (int)2));
HXDLIN( 321)						while((i2 != (int)-1)){
HXLINE( 321)							if ((d1->__get(i2) == key5)) {
HXLINE( 321)								v1 = d1->__get((i2 + (int)1));
HXDLIN( 321)								goto _hx_goto_20;
            							}
HXDLIN( 321)							i2 = d1->__get((i2 + (int)2));
            						}
            						_hx_goto_20:;
HXDLIN( 321)						_gthis4 = v1;
            					}
            				}
HXDLIN( 321)				args->set((int)1,::Std_obj::string(_gthis3->__get(_gthis4)));
            			}
HXDLIN( 321)			{
HXLINE( 321)				::String x3 = ::de::polygonal::Printf_obj::format(fmt,args);
HXDLIN( 321)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 321)					b->flush();
            				}
HXDLIN( 321)				if (hx::IsNull( b->b )) {
HXLINE( 321)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            				}
            				else {
HXLINE( 321)					::Array< ::String > b4 = b->b;
HXDLIN( 321)					b4->push(::Std_obj::string(x3));
            				}
            			}
            		}
HXLINE( 323)		{
HXLINE( 323)			if (hx::IsNotNull( b->charBuf )) {
HXLINE( 323)				b->flush();
            			}
HXDLIN( 323)			if (hx::IsNull( b->b )) {
HXLINE( 323)				b->b = ::Array_obj< ::String >::fromData( _hx_array_data_0387491a_25,1);
            			}
            			else {
HXLINE( 323)				b->b->push(HX_("]",5d,00,00,00));
            			}
            		}
HXLINE( 324)		return b->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,toString,return )

bool IntHashTable_obj::has( ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_334_has)
HXLINE( 335)		::Array< int > k = this->mKeys;
HXDLIN( 335)		::cpp::VirtualArray v = this->mVals;
HXLINE( 336)		{
HXLINE( 336)			int _g1 = (int)0;
HXDLIN( 336)			int _g = this->capacity;
HXDLIN( 336)			while((_g1 < _g)){
HXLINE( 336)				_g1 = (_g1 + (int)1);
HXDLIN( 336)				int i = (_g1 - (int)1);
HXLINE( 338)				if ((k->__get(i) == (int)-2147483647)) {
HXLINE( 338)					continue;
            				}
HXLINE( 339)				if (hx::IsEq( v->__get(i),val )) {
HXLINE( 339)					return true;
            				}
            			}
            		}
HXLINE( 341)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,has,return )

bool IntHashTable_obj::hasKey(int key){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_349_hasKey)
HXDLIN( 349)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 349)		int i = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN( 349)		if ((i == (int)-1)) {
HXDLIN( 349)			return false;
            		}
            		else {
HXDLIN( 349)			::Array< int > d = _this->mData;
HXDLIN( 349)			if ((d->__get(i) == key)) {
HXDLIN( 349)				return true;
            			}
            			else {
HXDLIN( 349)				bool exists = false;
HXDLIN( 349)				i = d->__get((i + (int)2));
HXDLIN( 349)				while((i != (int)-1)){
HXDLIN( 349)					if ((d->__get(i) == key)) {
HXDLIN( 349)						exists = true;
HXDLIN( 349)						goto _hx_goto_28;
            					}
HXDLIN( 349)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_28:;
HXDLIN( 349)				return exists;
            			}
            		}
HXDLIN( 349)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,hasKey,return )

int IntHashTable_obj::count(int key){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_357_count)
HXDLIN( 357)		return this->mH->count(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,count,return )

 ::Dynamic IntHashTable_obj::get(int key){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_364_get)
HXLINE( 365)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 365)		int i = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN( 365)		int i1;
HXDLIN( 365)		if ((i == (int)-1)) {
HXLINE( 365)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 365)			::Array< int > d = _this->mData;
HXDLIN( 365)			if ((d->__get(i) == key)) {
HXLINE( 365)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 365)				int v = (int)-2147483647;
HXDLIN( 365)				i = d->__get((i + (int)2));
HXDLIN( 365)				while((i != (int)-1)){
HXLINE( 365)					if ((d->__get(i) == key)) {
HXLINE( 365)						v = d->__get((i + (int)1));
HXDLIN( 365)						goto _hx_goto_31;
            					}
HXDLIN( 365)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_31:;
HXDLIN( 365)				i1 = v;
            			}
            		}
HXLINE( 366)		if ((i1 == (int)-2147483647)) {
HXLINE( 366)			return null();
            		}
            		else {
HXLINE( 366)			return this->mVals->__get(i1);
            		}
HXDLIN( 366)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,get,return )

int IntHashTable_obj::getAll(int key,::cpp::VirtualArray out){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_374_getAll)
HXLINE( 375)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 375)		int i = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN( 375)		int i1;
HXDLIN( 375)		if ((i == (int)-1)) {
HXLINE( 375)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 375)			::Array< int > d = _this->mData;
HXDLIN( 375)			if ((d->__get(i) == key)) {
HXLINE( 375)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 375)				int v = (int)-2147483647;
HXDLIN( 375)				i = d->__get((i + (int)2));
HXDLIN( 375)				while((i != (int)-1)){
HXLINE( 375)					if ((d->__get(i) == key)) {
HXLINE( 375)						v = d->__get((i + (int)1));
HXDLIN( 375)						goto _hx_goto_33;
            					}
HXDLIN( 375)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_33:;
HXDLIN( 375)				i1 = v;
            			}
            		}
HXLINE( 376)		if ((i1 == (int)-2147483647)) {
HXLINE( 377)			return (int)0;
            		}
            		else {
HXLINE( 380)			::Array< int > b = this->mTmpKeyBuffer;
HXLINE( 381)			int c = this->mH->getAll(key,b);
HXLINE( 382)			::cpp::VirtualArray v1 = this->mVals;
HXLINE( 383)			{
HXLINE( 383)				int _g1 = (int)0;
HXDLIN( 383)				int _g = c;
HXDLIN( 383)				while((_g1 < _g)){
HXLINE( 383)					_g1 = (_g1 + (int)1);
HXDLIN( 383)					int i2 = (_g1 - (int)1);
HXDLIN( 383)					out->set(i2,v1->__get(b->__get(i2)));
            				}
            			}
HXLINE( 384)			return c;
            		}
HXLINE( 376)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntHashTable_obj,getAll,return )

bool IntHashTable_obj::set(int key, ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_396_set)
HXLINE( 399)		if ((this->mSize == this->capacity)) {
HXLINE( 399)			this->grow();
            		}
HXLINE( 401)		int i = this->mFree;
HXLINE( 402)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 402)		if ((_this->mSize == _this->capacity)) {
HXLINE( 402)			_this->grow();
            		}
HXDLIN( 402)		::Array< int > d = _this->mData;
HXDLIN( 402)		::Array< int > h = _this->mHash;
HXDLIN( 402)		int i1 = (_this->mFree * (int)3);
HXDLIN( 402)		_this->mFree = _this->mNext->__get(_this->mFree);
HXDLIN( 402)		d[i1] = key;
HXDLIN( 402)		d[(i1 + (int)1)] = i;
HXDLIN( 402)		int b = ((int)(key * (int)73856093) & (int)_this->mMask);
HXDLIN( 402)		int j = h->__get(b);
HXDLIN( 402)		bool first;
HXDLIN( 402)		if ((j == (int)-1)) {
HXLINE( 402)			h[b] = i1;
HXDLIN( 402)			_this->mSize++;
HXDLIN( 402)			first = true;
            		}
            		else {
HXLINE( 402)			bool first1 = (d->__get(j) != key);
HXDLIN( 402)			int t = d->__get((j + (int)2));
HXDLIN( 402)			while((t != (int)-1)){
HXLINE( 402)				if ((d->__get(t) == key)) {
HXLINE( 402)					first1 = false;
            				}
HXDLIN( 402)				j = t;
HXDLIN( 402)				t = d->__get((t + (int)2));
            			}
HXDLIN( 402)			d[(j + (int)2)] = i1;
HXDLIN( 402)			_this->mSize++;
HXDLIN( 402)			first = first1;
            		}
HXLINE( 403)		this->mVals->set(i,val);
HXLINE( 404)		this->mKeys[i] = key;
HXLINE( 405)		this->mFree = this->mNext->__get(i);
HXLINE( 406)		this->mSize++;
HXLINE( 407)		return first;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntHashTable_obj,set,return )

bool IntHashTable_obj::unset(int key){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_415_unset)
HXLINE( 416)		 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 416)		int i = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN( 416)		int i1;
HXDLIN( 416)		if ((i == (int)-1)) {
HXLINE( 416)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE( 416)			::Array< int > d = _this->mData;
HXDLIN( 416)			if ((d->__get(i) == key)) {
HXLINE( 416)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE( 416)				int v = (int)-2147483647;
HXDLIN( 416)				i = d->__get((i + (int)2));
HXDLIN( 416)				while((i != (int)-1)){
HXLINE( 416)					if ((d->__get(i) == key)) {
HXLINE( 416)						v = d->__get((i + (int)1));
HXDLIN( 416)						goto _hx_goto_38;
            					}
HXDLIN( 416)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_38:;
HXDLIN( 416)				i1 = v;
            			}
            		}
HXLINE( 418)		if ((i1 == (int)-2147483647)) {
HXLINE( 418)			return false;
            		}
HXLINE( 420)		this->mVals->set(i1,null());
HXLINE( 421)		this->mKeys[i1] = (int)-2147483647;
HXLINE( 422)		this->mNext[i1] = this->mFree;
HXLINE( 423)		this->mFree = i1;
HXLINE( 424)		{
HXLINE( 424)			 ::de::polygonal::ds::IntIntHashTable _this1 = this->mH;
HXDLIN( 424)			int b = ((int)(key * (int)73856093) & (int)_this1->mMask);
HXDLIN( 424)			::Array< int > h = _this1->mHash;
HXDLIN( 424)			int i2 = h->__get(b);
HXDLIN( 424)			if ((i2 != (int)-1)) {
HXLINE( 424)				::Array< int > d1 = _this1->mData;
HXDLIN( 424)				if ((key == d1->__get(i2))) {
HXLINE( 424)					if ((d1->__get((i2 + (int)2)) == (int)-1)) {
HXLINE( 424)						h[b] = (int)-1;
            					}
            					else {
HXLINE( 424)						h[b] = d1->__get((i2 + (int)2));
            					}
HXDLIN( 424)					int j = ::Std_obj::_hx_int(((Float)i2 / (Float)(int)3));
HXDLIN( 424)					_this1->mNext[j] = _this1->mFree;
HXDLIN( 424)					_this1->mFree = j;
HXDLIN( 424)					d1[(i2 + (int)1)] = (int)-2147483647;
HXDLIN( 424)					d1[(i2 + (int)2)] = (int)-1;
HXDLIN( 424)					_this1->mSize--;
            				}
            				else {
HXLINE( 424)					bool exists = false;
HXDLIN( 424)					int i0 = i2;
HXDLIN( 424)					i2 = d1->__get((i2 + (int)2));
HXDLIN( 424)					while((i2 != (int)-1)){
HXLINE( 424)						if ((d1->__get(i2) == key)) {
HXLINE( 424)							exists = true;
HXDLIN( 424)							goto _hx_goto_39;
            						}
HXDLIN( 424)						i0 = i2;
HXDLIN( 424)						i2 = d1->__get((i0 + (int)2));
            					}
            					_hx_goto_39:;
HXDLIN( 424)					if (exists) {
HXLINE( 424)						d1[(i0 + (int)2)] = d1->__get((i2 + (int)2));
HXDLIN( 424)						int j1 = ::Std_obj::_hx_int(((Float)i2 / (Float)(int)3));
HXDLIN( 424)						_this1->mNext[j1] = _this1->mFree;
HXDLIN( 424)						_this1->mFree = j1;
HXDLIN( 424)						d1[(i2 + (int)1)] = (int)-2147483647;
HXDLIN( 424)						d1[(i2 + (int)2)] = (int)-1;
HXDLIN( 424)						_this1->mSize--;
            					}
            				}
            			}
            		}
HXLINE( 425)		this->mSize--;
HXLINE( 426)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,unset,return )

::Dynamic IntHashTable_obj::toValSet(){
            	HX_GC_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_433_toValSet)
HXLINE( 434)		 ::de::polygonal::ds::ListSet s =  ::de::polygonal::ds::ListSet_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 434)		::Array< int > k = this->mKeys;
HXDLIN( 434)		::cpp::VirtualArray v = this->mVals;
HXLINE( 435)		{
HXLINE( 435)			int _g1 = (int)0;
HXDLIN( 435)			int _g = this->capacity;
HXDLIN( 435)			while((_g1 < _g)){
HXLINE( 435)				_g1 = (_g1 + (int)1);
HXDLIN( 435)				int i = (_g1 - (int)1);
HXLINE( 436)				if ((k->__get(i) != (int)-2147483647)) {
HXLINE( 437)					s->set(v->__get(i));
            				}
            			}
            		}
HXLINE( 438)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,toValSet,return )

::Dynamic IntHashTable_obj::toKeySet(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_446_toKeySet)
HXDLIN( 446)		return this->mH->toKeySet();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,toKeySet,return )

::Dynamic IntHashTable_obj::keys(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_458_keys)
HXDLIN( 458)		return this->mH->keys();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,keys,return )

 ::de::polygonal::ds::IntHashTable IntHashTable_obj::pack(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_465_pack)
HXLINE( 466)		this->mH->pack();
HXLINE( 468)		if ((this->mH->capacity == this->capacity)) {
HXLINE( 468)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 470)		this->capacity = this->mH->capacity;
HXLINE( 475)		int len = this->capacity;
HXDLIN( 475)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 475)		_hx_array_set_size_exact(a,len);
HXDLIN( 475)		this->mNext = a;
HXLINE( 478)		::Array< int > t = this->mNext;
HXLINE( 479)		{
HXLINE( 479)			int _g1 = (int)0;
HXDLIN( 479)			int _g = (this->capacity - (int)1);
HXDLIN( 479)			while((_g1 < _g)){
HXLINE( 479)				_g1 = (_g1 + (int)1);
HXDLIN( 479)				int i = (_g1 - (int)1);
HXDLIN( 479)				t[i] = (i + (int)1);
            			}
            		}
HXLINE( 480)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE( 481)		this->mFree = (int)0;
HXLINE( 483)		::Array< int > srcKeys = this->mKeys;
HXLINE( 488)		int len1 = this->capacity;
HXDLIN( 488)		::Array< int > a1 = ::Array_obj< int >::__new();
HXDLIN( 488)		_hx_array_set_size_exact(a1,len1);
HXDLIN( 488)		::Array< int > dstKeys = a1;
HXLINE( 491)		::cpp::VirtualArray srcVals = this->mVals;
HXLINE( 492)		int len2 = this->capacity;
HXDLIN( 492)		::cpp::VirtualArray a2 = ::cpp::VirtualArray_obj::__new();
HXDLIN( 492)		_hx_array_set_size_exact(a2,len2);
HXDLIN( 492)		::cpp::VirtualArray dstVals = a2;
HXLINE( 494)		int j = this->mFree;
HXLINE( 495)		{
HXLINE( 495)			::Dynamic i1 = this->mH->iterator();
HXDLIN( 495)			while(::de::polygonal::ds::Itr_obj::hasNext(i1)){
HXLINE( 495)				int i2 = ( (int)(::de::polygonal::ds::Itr_obj::next(i1)) );
HXLINE( 497)				dstKeys[j] = srcKeys->__get(i2);
HXLINE( 498)				dstVals->set(j,srcVals->__get(i2));
HXLINE( 499)				j = this->mNext->__get(j);
            			}
            		}
HXLINE( 501)		this->mFree = j;
HXLINE( 507)		this->mKeys = dstKeys;
HXLINE( 508)		this->mVals = dstVals;
HXLINE( 509)		{
HXLINE( 509)			int _g11 = (int)0;
HXDLIN( 509)			int _g2 = this->mSize;
HXDLIN( 509)			while((_g11 < _g2)){
HXLINE( 509)				_g11 = (_g11 + (int)1);
HXDLIN( 509)				int i3 = (_g11 - (int)1);
HXDLIN( 509)				{
HXLINE( 509)					 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 509)					int key = dstKeys->__get(i3);
HXDLIN( 509)					int i4 = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN( 509)					if ((i4 != (int)-1)) {
HXLINE( 509)						::Array< int > d = _this->mData;
HXDLIN( 509)						if ((d->__get(i4) == key)) {
HXLINE( 509)							d[(i4 + (int)1)] = i3;
            						}
            						else {
HXLINE( 509)							i4 = d->__get((i4 + (int)2));
HXDLIN( 509)							while((i4 != (int)-1)){
HXLINE( 509)								if ((d->__get(i4) == key)) {
HXLINE( 509)									d[(i4 + (int)1)] = i3;
HXDLIN( 509)									goto _hx_goto_48;
            								}
HXDLIN( 509)								i4 = d->__get((i4 + (int)2));
            							}
            							_hx_goto_48:;
            						}
            					}
            				}
            			}
            		}
HXLINE( 510)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,pack,return )

 ::de::polygonal::ds::IntHashTable IntHashTable_obj::iter( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_517_iter)
HXLINE( 519)		::cpp::VirtualArray vals = this->mVals;
HXLINE( 520)		{
HXLINE( 520)			 ::de::polygonal::ds::IntIntHashTable _this = this->mH;
HXDLIN( 520)			::Array< int > d = _this->mData;
HXDLIN( 520)			int j;
HXDLIN( 520)			int v;
HXDLIN( 520)			{
HXLINE( 520)				int _g1 = (int)0;
HXDLIN( 520)				int _g = _this->capacity;
HXDLIN( 520)				while((_g1 < _g)){
HXLINE( 520)					_g1 = (_g1 + (int)1);
HXDLIN( 520)					int i = (_g1 - (int)1);
HXDLIN( 520)					j = (i * (int)3);
HXDLIN( 520)					v = d->__get((j + (int)1));
HXDLIN( 520)					if ((v != (int)-2147483647)) {
HXLINE( 520)						f(d->__get(j),vals->__get(v));
            					}
            				}
            			}
            		}
HXLINE( 521)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,iter,return )

void IntHashTable_obj::grow(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_525_grow)
HXLINE( 526)		int oldCapacity = this->capacity;
HXLINE( 527)		int _hx_tmp = this->get_growthRate();
HXDLIN( 527)		this->capacity = ::de::polygonal::ds::tools::GrowthRate_obj::compute(_hx_tmp,this->capacity);
HXLINE( 529)		::Array< int > t;
HXLINE( 535)		int len = this->capacity;
HXDLIN( 535)		::Array< int > a = ::Array_obj< int >::__new();
HXDLIN( 535)		_hx_array_set_size_exact(a,len);
HXDLIN( 535)		t = a;
HXLINE( 536)		if ((oldCapacity > (int)0)) {
HXLINE( 536)			t->blit((int)0,this->mNext,(int)0,oldCapacity);
            		}
HXLINE( 537)		this->mNext = t;
HXLINE( 538)		int len1 = this->capacity;
HXDLIN( 538)		::Array< int > a1 = ::Array_obj< int >::__new();
HXDLIN( 538)		_hx_array_set_size_exact(a1,len1);
HXDLIN( 538)		t = a1;
HXLINE( 539)		if ((oldCapacity > (int)0)) {
HXLINE( 539)			t->blit((int)0,this->mKeys,(int)0,oldCapacity);
            		}
HXLINE( 540)		this->mKeys = t;
HXLINE( 543)		t = this->mKeys;
HXLINE( 544)		{
HXLINE( 544)			int _g1 = oldCapacity;
HXDLIN( 544)			int _g = this->capacity;
HXDLIN( 544)			while((_g1 < _g)){
HXLINE( 544)				_g1 = (_g1 + (int)1);
HXDLIN( 544)				int i = (_g1 - (int)1);
HXLINE( 545)				t[i] = (int)-2147483647;
            			}
            		}
HXLINE( 547)		t = this->mNext;
HXLINE( 548)		{
HXLINE( 548)			int _g11 = (oldCapacity - (int)1);
HXDLIN( 548)			int _g2 = (this->capacity - (int)1);
HXDLIN( 548)			while((_g11 < _g2)){
HXLINE( 548)				_g11 = (_g11 + (int)1);
HXDLIN( 548)				int i1 = (_g11 - (int)1);
HXDLIN( 548)				t[i1] = (i1 + (int)1);
            			}
            		}
HXLINE( 549)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE( 550)		this->mFree = oldCapacity;
HXLINE( 552)		int len2 = this->capacity;
HXDLIN( 552)		::cpp::VirtualArray a2 = ::cpp::VirtualArray_obj::__new();
HXDLIN( 552)		_hx_array_set_size_exact(a2,len2);
HXDLIN( 552)		::cpp::VirtualArray t1 = a2;
HXLINE( 553)		if ((oldCapacity > (int)0)) {
HXLINE( 553)			t1->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)((int)0,this->mVals,(int)0,oldCapacity);
            		}
HXLINE( 554)		this->mVals = t1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,grow,(void))

int IntHashTable_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_565_get_size)
HXDLIN( 565)		return this->mSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,get_size,return )

void IntHashTable_obj::free(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_574_free)
HXLINE( 575)		::de::polygonal::ds::tools::NativeArrayTools_obj::nullify(this->mVals,null(),null());
HXLINE( 576)		this->mVals = null();
HXLINE( 583)		this->mKeys = null();
HXLINE( 584)		this->mNext = null();
HXLINE( 586)		this->mH->free();
HXLINE( 587)		this->mH = null();
HXLINE( 588)		if (hx::IsNotNull( this->mIterator )) {
HXLINE( 590)			this->mIterator->free();
HXLINE( 591)			this->mIterator = null();
            		}
HXLINE( 593)		this->mTmpKeyBuffer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,free,(void))

bool IntHashTable_obj::contains( ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_601_contains)
HXDLIN( 601)		return this->has(val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,contains,return )

bool IntHashTable_obj::remove( ::Dynamic val){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_609_remove)
HXLINE( 610)		::Array< int > b = this->mTmpKeyBuffer;
HXLINE( 611)		int c = (int)0;
HXLINE( 612)		::Array< int > k = this->mKeys;
HXDLIN( 612)		::cpp::VirtualArray v = this->mVals;
HXDLIN( 612)		int j;
HXLINE( 613)		{
HXLINE( 613)			int _g1 = (int)0;
HXDLIN( 613)			int _g = this->capacity;
HXDLIN( 613)			while((_g1 < _g)){
HXLINE( 613)				_g1 = (_g1 + (int)1);
HXDLIN( 613)				int i = (_g1 - (int)1);
HXLINE( 615)				j = k->__get(i);
HXLINE( 616)				if ((j != (int)-2147483647)) {
HXLINE( 617)					if (hx::IsEq( v->__get(i),val )) {
HXLINE( 618)						c = (c + (int)1);
HXDLIN( 618)						b[(c - (int)1)] = j;
            					}
            				}
            			}
            		}
HXLINE( 620)		{
HXLINE( 620)			int _g11 = (int)0;
HXDLIN( 620)			int _g2 = c;
HXDLIN( 620)			while((_g11 < _g2)){
HXLINE( 620)				_g11 = (_g11 + (int)1);
HXDLIN( 620)				int i1 = (_g11 - (int)1);
HXDLIN( 620)				this->unset(b->__get(i1));
            			}
            		}
HXLINE( 621)		return (c > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,remove,return )

void IntHashTable_obj::clear(hx::Null< bool >  __o_gc){
bool gc = __o_gc.Default(false);
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_630_clear)
HXLINE( 631)		this->mH->clear(gc);
HXLINE( 636)		::de::polygonal::ds::tools::NativeArrayTools_obj::init(this->mKeys,(int)-2147483647,(int)0,this->capacity);
HXLINE( 639)		::Array< int > t = this->mNext;
HXLINE( 640)		{
HXLINE( 640)			int _g1 = (int)0;
HXDLIN( 640)			int _g = (this->capacity - (int)1);
HXDLIN( 640)			while((_g1 < _g)){
HXLINE( 640)				_g1 = (_g1 + (int)1);
HXDLIN( 640)				int i = (_g1 - (int)1);
HXDLIN( 640)				t[i] = (i + (int)1);
            			}
            		}
HXLINE( 641)		t[(this->capacity - (int)1)] = (int)-1;
HXLINE( 642)		this->mFree = (int)0;
HXLINE( 643)		this->mSize = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IntHashTable_obj,clear,(void))

::Dynamic IntHashTable_obj::iterator(){
            	HX_GC_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_655_iterator)
HXDLIN( 655)		if (this->reuseIterator) {
HXLINE( 657)			if (hx::IsNull( this->mIterator )) {
HXLINE( 658)				this->mIterator =  ::de::polygonal::ds::IntHashTableIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE( 660)				this->mIterator->reset();
            			}
HXLINE( 661)			return this->mIterator;
            		}
            		else {
HXLINE( 664)			return  ::de::polygonal::ds::IntHashTableIterator_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 655)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,iterator,return )

bool IntHashTable_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_672_isEmpty)
HXDLIN( 672)		return (this->mSize == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,isEmpty,return )

::cpp::VirtualArray IntHashTable_obj::toArray(){
            	HX_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_679_toArray)
HXLINE( 680)		if ((this->mSize == (int)0)) {
HXLINE( 680)			return ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 682)		int len = this->mSize;
HXDLIN( 682)		::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXDLIN( 682)		_hx_array_set_size_exact(a,len);
HXDLIN( 682)		::cpp::VirtualArray out = a;
HXLINE( 683)		int j = (int)0;
HXDLIN( 683)		::Array< int > k = this->mKeys;
HXDLIN( 683)		::cpp::VirtualArray v = this->mVals;
HXLINE( 684)		{
HXLINE( 684)			int _g1 = (int)0;
HXDLIN( 684)			int _g = this->capacity;
HXDLIN( 684)			while((_g1 < _g)){
HXLINE( 684)				_g1 = (_g1 + (int)1);
HXDLIN( 684)				int i = (_g1 - (int)1);
HXLINE( 685)				if ((k->__get(i) != (int)-2147483647)) {
HXLINE( 686)					j = (j + (int)1);
HXDLIN( 686)					out->set((j - (int)1),v->__get(i));
            				}
            			}
            		}
HXLINE( 687)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IntHashTable_obj,toArray,return )

::Dynamic IntHashTable_obj::clone(hx::Null< bool >  __o_byRef, ::Dynamic copier){
bool byRef = __o_byRef.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_ae3fa711bfa000bc_698_clone)
HXLINE( 699)		 ::de::polygonal::ds::IntHashTable c =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,this->mH->slotCount,this->mSize);
HXLINE( 700)		c->mH = ( ( ::de::polygonal::ds::IntIntHashTable)(this->mH->clone(false,null())) );
HXLINE( 701)		c->mSize = this->mSize;
HXLINE( 702)		c->mFree = this->mFree;
HXLINE( 704)		::cpp::VirtualArray src = this->mVals;
HXLINE( 705)		::cpp::VirtualArray dst = c->mVals;
HXLINE( 707)		if (byRef) {
HXLINE( 708)			int n = this->mSize;
HXDLIN( 708)			if ((n > (int)0)) {
HXLINE( 708)				dst->__Field(HX_("blit",35,38,19,41),hx::paccDynamic)((int)0,src,(int)0,n);
            			}
            		}
            		else {
HXLINE( 711)			::Array< int > k = this->mKeys;
HXLINE( 715)			if (hx::IsNotNull( copier )) {
HXLINE( 717)				int _g1 = (int)0;
HXDLIN( 717)				int _g = this->mSize;
HXDLIN( 717)				while((_g1 < _g)){
HXLINE( 717)					_g1 = (_g1 + (int)1);
HXDLIN( 717)					int i = (_g1 - (int)1);
HXLINE( 718)					if ((k->__get(i) != (int)-2147483647)) {
HXLINE( 719)						dst->set(i,copier(src->__get(i)));
            					}
            				}
            			}
            			else {
HXLINE( 723)				int _g11 = (int)0;
HXDLIN( 723)				int _g2 = this->mSize;
HXDLIN( 723)				while((_g11 < _g2)){
HXLINE( 723)					_g11 = (_g11 + (int)1);
HXDLIN( 723)					int i1 = (_g11 - (int)1);
HXLINE( 725)					if ((k->__get(i1) != (int)-2147483647)) {
HXLINE( 729)						dst->set(i1,::de::polygonal::ds::Cloneable_obj::clone(src->__get(i1)));
            					}
            				}
            			}
            		}
HXLINE( 739)		{
HXLINE( 739)			int n1 = this->mSize;
HXDLIN( 739)			if ((n1 > (int)0)) {
HXLINE( 739)				c->mKeys->blit((int)0,this->mKeys,(int)0,n1);
            			}
            		}
HXLINE( 740)		{
HXLINE( 740)			int n2 = this->mSize;
HXDLIN( 740)			if ((n2 > (int)0)) {
HXLINE( 740)				c->mNext->blit((int)0,this->mNext,(int)0,n2);
            			}
            		}
HXLINE( 742)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IntHashTable_obj,clone,return )


hx::ObjectPtr< IntHashTable_obj > IntHashTable_obj::__new(int slotCount,hx::Null< int >  __o_initialCapacity) {
	hx::ObjectPtr< IntHashTable_obj > __this = new IntHashTable_obj();
	__this->__construct(slotCount,__o_initialCapacity);
	return __this;
}

hx::ObjectPtr< IntHashTable_obj > IntHashTable_obj::__alloc(hx::Ctx *_hx_ctx,int slotCount,hx::Null< int >  __o_initialCapacity) {
	IntHashTable_obj *__this = (IntHashTable_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IntHashTable_obj), true, "de.polygonal.ds.IntHashTable"));
	*(void **)__this = IntHashTable_obj::_hx_vtable;
	__this->__construct(slotCount,__o_initialCapacity);
	return __this;
}

IntHashTable_obj::IntHashTable_obj()
{
}

void IntHashTable_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IntHashTable);
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(capacity,"capacity");
	HX_MARK_MEMBER_NAME(reuseIterator,"reuseIterator");
	HX_MARK_MEMBER_NAME(mH,"mH");
	HX_MARK_MEMBER_NAME(mVals,"mVals");
	HX_MARK_MEMBER_NAME(mNext,"mNext");
	HX_MARK_MEMBER_NAME(mKeys,"mKeys");
	HX_MARK_MEMBER_NAME(mFree,"mFree");
	HX_MARK_MEMBER_NAME(mSize,"mSize");
	HX_MARK_MEMBER_NAME(mMinCapacity,"mMinCapacity");
	HX_MARK_MEMBER_NAME(mShrinkSize,"mShrinkSize");
	HX_MARK_MEMBER_NAME(mIterator,"mIterator");
	HX_MARK_MEMBER_NAME(mTmpKeyBuffer,"mTmpKeyBuffer");
	HX_MARK_END_CLASS();
}

void IntHashTable_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(capacity,"capacity");
	HX_VISIT_MEMBER_NAME(reuseIterator,"reuseIterator");
	HX_VISIT_MEMBER_NAME(mH,"mH");
	HX_VISIT_MEMBER_NAME(mVals,"mVals");
	HX_VISIT_MEMBER_NAME(mNext,"mNext");
	HX_VISIT_MEMBER_NAME(mKeys,"mKeys");
	HX_VISIT_MEMBER_NAME(mFree,"mFree");
	HX_VISIT_MEMBER_NAME(mSize,"mSize");
	HX_VISIT_MEMBER_NAME(mMinCapacity,"mMinCapacity");
	HX_VISIT_MEMBER_NAME(mShrinkSize,"mShrinkSize");
	HX_VISIT_MEMBER_NAME(mIterator,"mIterator");
	HX_VISIT_MEMBER_NAME(mTmpKeyBuffer,"mTmpKeyBuffer");
}

hx::Val IntHashTable_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mH") ) { return hx::Val( mH ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key ); }
		if (HX_FIELD_EQ(inName,"has") ) { return hx::Val( has_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys_dyn() ); }
		if (HX_FIELD_EQ(inName,"pack") ) { return hx::Val( pack_dyn() ); }
		if (HX_FIELD_EQ(inName,"iter") ) { return hx::Val( iter_dyn() ); }
		if (HX_FIELD_EQ(inName,"grow") ) { return hx::Val( grow_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		if (HX_FIELD_EQ(inName,"free") ) { return hx::Val( free_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mVals") ) { return hx::Val( mVals ); }
		if (HX_FIELD_EQ(inName,"mNext") ) { return hx::Val( mNext ); }
		if (HX_FIELD_EQ(inName,"mKeys") ) { return hx::Val( mKeys ); }
		if (HX_FIELD_EQ(inName,"mFree") ) { return hx::Val( mFree ); }
		if (HX_FIELD_EQ(inName,"mSize") ) { return hx::Val( mSize ); }
		if (HX_FIELD_EQ(inName,"remap") ) { return hx::Val( remap_dyn() ); }
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count_dyn() ); }
		if (HX_FIELD_EQ(inName,"unset") ) { return hx::Val( unset_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rehash") ) { return hx::Val( rehash_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasKey") ) { return hx::Val( hasKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAll") ) { return hx::Val( getAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { return hx::Val( capacity ); }
		if (HX_FIELD_EQ(inName,"getFront") ) { return hx::Val( getFront_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"toValSet") ) { return hx::Val( toValSet_dyn() ); }
		if (HX_FIELD_EQ(inName,"toKeySet") ) { return hx::Val( toKeySet_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"slotCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_slotCount() ); }
		if (HX_FIELD_EQ(inName,"mIterator") ) { return hx::Val( mIterator ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"growthRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_growthRate() ); }
		if (HX_FIELD_EQ(inName,"loadFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_loadFactor() ); }
		if (HX_FIELD_EQ(inName,"toKeyArray") ) { return hx::Val( toKeyArray_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mShrinkSize") ) { return hx::Val( mShrinkSize ); }
		if (HX_FIELD_EQ(inName,"setIfAbsent") ) { return hx::Val( setIfAbsent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mMinCapacity") ) { return hx::Val( mMinCapacity ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reuseIterator") ) { return hx::Val( reuseIterator ); }
		if (HX_FIELD_EQ(inName,"get_slotCount") ) { return hx::Val( get_slotCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"mTmpKeyBuffer") ) { return hx::Val( mTmpKeyBuffer ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_growthRate") ) { return hx::Val( get_growthRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_growthRate") ) { return hx::Val( set_growthRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_loadFactor") ) { return hx::Val( get_loadFactor_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getCollisionCount") ) { return hx::Val( getCollisionCount_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IntHashTable_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mH") ) { mH=inValue.Cast<  ::de::polygonal::ds::IntIntHashTable >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mVals") ) { mVals=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mNext") ) { mNext=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mKeys") ) { mKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mFree") ) { mFree=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mSize") ) { mSize=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capacity") ) { capacity=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mIterator") ) { mIterator=inValue.Cast<  ::de::polygonal::ds::IntHashTableIterator >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"growthRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_growthRate(inValue.Cast< int >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mShrinkSize") ) { mShrinkSize=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mMinCapacity") ) { mMinCapacity=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reuseIterator") ) { reuseIterator=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mTmpKeyBuffer") ) { mTmpKeyBuffer=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IntHashTable_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("key","\x9f","\x89","\x51","\x00"));
	outFields->push(HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3"));
	outFields->push(HX_HCSTRING("growthRate","\xc7","\x5a","\x60","\xe8"));
	outFields->push(HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed"));
	outFields->push(HX_HCSTRING("loadFactor","\x95","\xc7","\x38","\x99"));
	outFields->push(HX_HCSTRING("slotCount","\xf1","\x5d","\x7f","\x2a"));
	outFields->push(HX_HCSTRING("mH","\x3b","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("mVals","\x7f","\x8d","\xcf","\xfb"));
	outFields->push(HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6"));
	outFields->push(HX_HCSTRING("mKeys","\x01","\x49","\x8d","\xf4"));
	outFields->push(HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1"));
	outFields->push(HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9"));
	outFields->push(HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1"));
	outFields->push(HX_HCSTRING("mShrinkSize","\xf7","\x46","\xfe","\x3d"));
	outFields->push(HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e"));
	outFields->push(HX_HCSTRING("mTmpKeyBuffer","\x35","\xa0","\x7c","\x4f"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IntHashTable_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(IntHashTable_obj,key),HX_HCSTRING("key","\x9f","\x89","\x51","\x00")},
	{hx::fsInt,(int)offsetof(IntHashTable_obj,capacity),HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3")},
	{hx::fsBool,(int)offsetof(IntHashTable_obj,reuseIterator),HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed")},
	{hx::fsObject /*::de::polygonal::ds::IntIntHashTable*/ ,(int)offsetof(IntHashTable_obj,mH),HX_HCSTRING("mH","\x3b","\x5f","\x00","\x00")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(IntHashTable_obj,mVals),HX_HCSTRING("mVals","\x7f","\x8d","\xcf","\xfb")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntHashTable_obj,mNext),HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntHashTable_obj,mKeys),HX_HCSTRING("mKeys","\x01","\x49","\x8d","\xf4")},
	{hx::fsInt,(int)offsetof(IntHashTable_obj,mFree),HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1")},
	{hx::fsInt,(int)offsetof(IntHashTable_obj,mSize),HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9")},
	{hx::fsInt,(int)offsetof(IntHashTable_obj,mMinCapacity),HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1")},
	{hx::fsInt,(int)offsetof(IntHashTable_obj,mShrinkSize),HX_HCSTRING("mShrinkSize","\xf7","\x46","\xfe","\x3d")},
	{hx::fsObject /*::de::polygonal::ds::IntHashTableIterator*/ ,(int)offsetof(IntHashTable_obj,mIterator),HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(IntHashTable_obj,mTmpKeyBuffer),HX_HCSTRING("mTmpKeyBuffer","\x35","\xa0","\x7c","\x4f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IntHashTable_obj_sStaticStorageInfo = 0;
#endif

static ::String IntHashTable_obj_sMemberFields[] = {
	HX_HCSTRING("key","\x9f","\x89","\x51","\x00"),
	HX_HCSTRING("capacity","\x3a","\x01","\xbb","\xc3"),
	HX_HCSTRING("get_growthRate","\x10","\xe3","\x55","\x5e"),
	HX_HCSTRING("set_growthRate","\x84","\xcb","\x75","\x7e"),
	HX_HCSTRING("reuseIterator","\x82","\x74","\xe3","\xed"),
	HX_HCSTRING("get_loadFactor","\xde","\x4f","\x2e","\x0f"),
	HX_HCSTRING("get_slotCount","\xc8","\x31","\xe3","\xeb"),
	HX_HCSTRING("mH","\x3b","\x5f","\x00","\x00"),
	HX_HCSTRING("mVals","\x7f","\x8d","\xcf","\xfb"),
	HX_HCSTRING("mNext","\x00","\xec","\x88","\xf6"),
	HX_HCSTRING("mKeys","\x01","\x49","\x8d","\xf4"),
	HX_HCSTRING("mFree","\xb9","\x03","\x49","\xf1"),
	HX_HCSTRING("mSize","\xce","\x07","\xda","\xf9"),
	HX_HCSTRING("mMinCapacity","\x7f","\xf5","\x1a","\xe1"),
	HX_HCSTRING("mShrinkSize","\xf7","\x46","\xfe","\x3d"),
	HX_HCSTRING("mIterator","\x7b","\xbb","\x15","\x3e"),
	HX_HCSTRING("mTmpKeyBuffer","\x35","\xa0","\x7c","\x4f"),
	HX_HCSTRING("getCollisionCount","\x33","\xde","\xd7","\x0b"),
	HX_HCSTRING("getFront","\x33","\x28","\x65","\x66"),
	HX_HCSTRING("setIfAbsent","\x38","\xc4","\x66","\xee"),
	HX_HCSTRING("rehash","\x01","\xe9","\x2f","\x01"),
	HX_HCSTRING("remap","\xc9","\xb8","\xc3","\xe6"),
	HX_HCSTRING("toKeyArray","\x15","\xa8","\x15","\xdc"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("has","\x5a","\x3f","\x4f","\x00"),
	HX_HCSTRING("hasKey","\x65","\x96","\x38","\xbb"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("getAll","\x2b","\x32","\x19","\xa3"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("unset","\xe9","\xf2","\xee","\xa6"),
	HX_HCSTRING("toValSet","\x1c","\xdf","\xdb","\x76"),
	HX_HCSTRING("toKeySet","\x1e","\xff","\x20","\x67"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("pack","\xd9","\xd6","\x51","\x4a"),
	HX_HCSTRING("iter","\x18","\xc5","\xbf","\x45"),
	HX_HCSTRING("grow","\x13","\xdc","\x6b","\x44"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	::String(null()) };

static void IntHashTable_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IntHashTable_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IntHashTable_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IntHashTable_obj::__mClass,"__mClass");
};

#endif

hx::Class IntHashTable_obj::__mClass;

void IntHashTable_obj::__register()
{
	hx::Object *dummy = new IntHashTable_obj;
	IntHashTable_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.ds.IntHashTable","\x1a","\x49","\x87","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IntHashTable_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IntHashTable_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IntHashTable_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IntHashTable_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntHashTable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntHashTable_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace de
} // end namespace polygonal
} // end namespace ds
