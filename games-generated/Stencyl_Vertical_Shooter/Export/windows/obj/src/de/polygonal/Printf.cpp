// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_de_polygonal_Printf
#include <de/polygonal/Printf.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_FloatType
#include <de/polygonal/_Printf/FloatType.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_FormatDataType
#include <de/polygonal/_Printf/FormatDataType.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_FormatFlags
#include <de/polygonal/_Printf/FormatFlags.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_FormatToken
#include <de/polygonal/_Printf/FormatToken.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_IntegerType
#include <de/polygonal/_Printf/IntegerType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_62_init,"de.polygonal.Printf","init",0x8a4a852f,"de.polygonal.Printf.init","de/polygonal/Printf.hx",62,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_108_makeDataTypeMap,"de.polygonal.Printf","makeDataTypeMap",0x2d5e2feb,"de.polygonal.Printf.makeDataTypeMap","de/polygonal/Printf.hx",108,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_523_format,"de.polygonal.Printf","format",0xfc1bdf16,"de.polygonal.Printf.format","de/polygonal/Printf.hx",523,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_573_tokenize,"de.polygonal.Printf","tokenize",0xe3c03b9a,"de.polygonal.Printf.tokenize","de/polygonal/Printf.hx",573,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_579_formatBinary,"de.polygonal.Printf","formatBinary",0x694583b7,"de.polygonal.Printf.formatBinary","de/polygonal/Printf.hx",579,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_618_formatOctal,"de.polygonal.Printf","formatOctal",0x61c5fed5,"de.polygonal.Printf.formatOctal","de/polygonal/Printf.hx",618,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_646_formatHexadecimal,"de.polygonal.Printf","formatHexadecimal",0x0abf8cb5,"de.polygonal.Printf.formatHexadecimal","de/polygonal/Printf.hx",646,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_678_formatUnsignedDecimal,"de.polygonal.Printf","formatUnsignedDecimal",0x15d145a6,"de.polygonal.Printf.formatUnsignedDecimal","de/polygonal/Printf.hx",678,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_697_formatNaturalFloat,"de.polygonal.Printf","formatNaturalFloat",0x498e7f29,"de.polygonal.Printf.formatNaturalFloat","de/polygonal/Printf.hx",697,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_718_formatScientific,"de.polygonal.Printf","formatScientific",0xf3011c5f,"de.polygonal.Printf.formatScientific","de/polygonal/Printf.hx",718,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_765_formatSignedDecimal,"de.polygonal.Printf","formatSignedDecimal",0x590b191f,"de.polygonal.Printf.formatSignedDecimal","de/polygonal/Printf.hx",765,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_808_formatString,"de.polygonal.Printf","formatString",0x8d69f087,"de.polygonal.Printf.formatString","de/polygonal/Printf.hx",808,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_829_formatNormalFloat,"de.polygonal.Printf","formatNormalFloat",0xeeb11a7f,"de.polygonal.Printf.formatNormalFloat","de/polygonal/Printf.hx",829,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_892_formatCharacter,"de.polygonal.Printf","formatCharacter",0x70fb49b3,"de.polygonal.Printf.formatCharacter","de/polygonal/Printf.hx",892,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_914_padNumber,"de.polygonal.Printf","padNumber",0xad0131fd,"de.polygonal.Printf.padNumber","de/polygonal/Printf.hx",914,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_942_lpad,"de.polygonal.Printf","lpad",0x8c47a686,"de.polygonal.Printf.lpad","de/polygonal/Printf.hx",942,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_953_rpad,"de.polygonal.Printf","rpad",0x903eee40,"de.polygonal.Printf.rpad","de/polygonal/Printf.hx",953,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_964_toHex,"de.polygonal.Printf","toHex",0xcce28521,"de.polygonal.Printf.toHex","de/polygonal/Printf.hx",964,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_981_toOct,"de.polygonal.Printf","toOct",0xcce7d326,"de.polygonal.Printf.toOct","de/polygonal/Printf.hx",981,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_994_abs,"de.polygonal.Printf","abs",0xe3e58f33,"de.polygonal.Printf.abs","de/polygonal/Printf.hx",994,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_997_str,"de.polygonal.Printf","str",0xe3f34772,"de.polygonal.Printf.str","de/polygonal/Printf.hx",997,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1006_codeAt,"de.polygonal.Printf","codeAt",0xbfc29f5f,"de.polygonal.Printf.codeAt","de/polygonal/Printf.hx",1006,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1010_isDigit,"de.polygonal.Printf","isDigit",0x336624a4,"de.polygonal.Printf.isDigit","de/polygonal/Printf.hx",1010,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1013_roundTo,"de.polygonal.Printf","roundTo",0x4a2804aa,"de.polygonal.Printf.roundTo","de/polygonal/Printf.hx",1013,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1041_round,"de.polygonal.Printf","round",0xa637894f,"de.polygonal.Printf.round","de/polygonal/Printf.hx",1041,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1045_exp,"de.polygonal.Printf","exp",0xe3e8ab5e,"de.polygonal.Printf.exp","de/polygonal/Printf.hx",1045,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1066_fabs,"de.polygonal.Printf","fabs",0x8844fdeb,"de.polygonal.Printf.fabs","de/polygonal/Printf.hx",1066,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1073_fsgn,"de.polygonal.Printf","fsgn",0x8852aad3,"de.polygonal.Printf.fsgn","de/polygonal/Printf.hx",1073,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_59_boot,"de.polygonal.Printf","boot",0x85aace51,"de.polygonal.Printf.boot","de/polygonal/Printf.hx",59,0x0b01abed)
namespace de{
namespace polygonal{

void Printf_obj::__construct() { }

Dynamic Printf_obj::__CreateEmpty() { return new Printf_obj; }

void *Printf_obj::_hx_vtable = 0;

Dynamic Printf_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Printf_obj > _hx_result = new Printf_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Printf_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x64d01cd9;
}

 ::haxe::ds::IntMap Printf_obj::dataTypeMap;

 ::haxe::ds::IntMap Printf_obj::formatIntFuncHash;

 ::haxe::ds::IntMap Printf_obj::formatFloatFuncHash;

 ::haxe::ds::IntMap Printf_obj::formatStringFuncHash;

bool Printf_obj::_initialized;

void Printf_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_fd0f0255b116184c_62_init)
HXLINE(  63)		::de::polygonal::Printf_obj::dataTypeMap = ::de::polygonal::Printf_obj::makeDataTypeMap();
HXLINE(  65)		::de::polygonal::Printf_obj::formatIntFuncHash =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  66)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)1,::de::polygonal::Printf_obj::formatSignedDecimal_dyn());
HXLINE(  67)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)2,::de::polygonal::Printf_obj::formatUnsignedDecimal_dyn());
HXLINE(  68)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)0,::de::polygonal::Printf_obj::formatCharacter_dyn());
HXLINE(  69)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)4,::de::polygonal::Printf_obj::formatHexadecimal_dyn());
HXLINE(  70)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)3,::de::polygonal::Printf_obj::formatOctal_dyn());
HXLINE(  71)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)5,::de::polygonal::Printf_obj::formatBinary_dyn());
HXLINE(  73)		::de::polygonal::Printf_obj::formatFloatFuncHash =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  74)		::de::polygonal::Printf_obj::formatFloatFuncHash->set((int)0,::de::polygonal::Printf_obj::formatNormalFloat_dyn());
HXLINE(  75)		::de::polygonal::Printf_obj::formatFloatFuncHash->set((int)1,::de::polygonal::Printf_obj::formatScientific_dyn());
HXLINE(  76)		::de::polygonal::Printf_obj::formatFloatFuncHash->set((int)2,::de::polygonal::Printf_obj::formatNaturalFloat_dyn());
HXLINE(  78)		::de::polygonal::Printf_obj::formatStringFuncHash =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  79)		::de::polygonal::Printf_obj::formatStringFuncHash->set((int)2,::de::polygonal::Printf_obj::formatString_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Printf_obj,init,(void))

 ::haxe::ds::IntMap Printf_obj::makeDataTypeMap(){
            	HX_GC_STACKFRAME(&_hx_pos_fd0f0255b116184c_108_makeDataTypeMap)
HXLINE( 109)		 ::haxe::ds::IntMap hash =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 110)		hash->set((int)105,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::ISignedDecimal_dyn()));
HXLINE( 111)		hash->set((int)100,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::ISignedDecimal_dyn()));
HXLINE( 112)		hash->set((int)117,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IUnsignedDecimal_dyn()));
HXLINE( 113)		hash->set((int)99,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::ICharacter_dyn()));
HXLINE( 114)		hash->set((int)120,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IHex_dyn()));
HXLINE( 115)		hash->set((int)88,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IHex_dyn()));
HXLINE( 116)		hash->set((int)111,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IOctal_dyn()));
HXLINE( 117)		hash->set((int)98,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IBin_dyn()));
HXLINE( 119)		hash->set((int)102,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FNormal_dyn()));
HXLINE( 120)		hash->set((int)101,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FScientific_dyn()));
HXLINE( 121)		hash->set((int)69,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FScientific_dyn()));
HXLINE( 122)		hash->set((int)103,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FNatural_dyn()));
HXLINE( 123)		hash->set((int)71,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FNatural_dyn()));
HXLINE( 125)		hash->set((int)115,::de::polygonal::_Printf::FormatDataType_obj::FmtString_dyn());
HXLINE( 127)		hash->set((int)112,::de::polygonal::_Printf::FormatDataType_obj::FmtPointer_dyn());
HXLINE( 128)		hash->set((int)110,::de::polygonal::_Printf::FormatDataType_obj::FmtNothing_dyn());
HXLINE( 130)		return hash;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Printf_obj,makeDataTypeMap,return )

::String Printf_obj::format(::String fmt,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_523_format)
HXLINE( 524)		if (!(::de::polygonal::Printf_obj::_initialized)) {
HXLINE( 526)			::de::polygonal::Printf_obj::_initialized = true;
HXLINE( 527)			::de::polygonal::Printf_obj::init();
            		}
HXLINE( 530)		::String output = HX_("",00,00,00,00);
HXLINE( 531)		int argIndex = (int)0;
HXLINE( 532)		::Array< ::Dynamic> tokens = ::de::polygonal::Printf_obj::tokenize(fmt);
HXLINE( 533)		{
HXLINE( 533)			int _g = (int)0;
HXDLIN( 533)			while((_g < tokens->length)){
HXLINE( 533)				 ::de::polygonal::_Printf::FormatToken token = tokens->__get(_g).StaticCast<  ::de::polygonal::_Printf::FormatToken >();
HXDLIN( 533)				_g = (_g + (int)1);
HXLINE( 535)				switch((int)(_hx_getEnumValueIndex(token))){
            					case (int)0: {
HXLINE( 539)						::String str = token->_hx_getString(0);
HXLINE( 540)						output = (output + str);
            					}
            					break;
            					case (int)1: {
HXLINE( 545)						 ::Dynamic tagArgs = token->_hx_getObject(1);
HXDLIN( 545)						 ::de::polygonal::_Printf::FormatDataType type = token->_hx_getObject(0).StaticCast<  ::de::polygonal::_Printf::FormatDataType >();
HXDLIN( 545)						{
HXLINE( 546)							 ::Dynamic _hx_tmp;
HXDLIN( 546)							if (hx::IsNotNull( tagArgs->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) )) {
HXLINE( 546)								_hx_tmp = tagArgs->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
            							}
            							else {
HXLINE( 546)								argIndex = (argIndex + (int)1);
HXDLIN( 546)								_hx_tmp = args->__get((argIndex - (int)1));
            							}
HXDLIN( 546)							tagArgs->__SetField(HX_("width",06,b6,62,ca),_hx_tmp,hx::paccDynamic);
HXLINE( 547)							 ::Dynamic _hx_tmp1;
HXDLIN( 547)							if (hx::IsNotNull( tagArgs->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic) )) {
HXLINE( 547)								_hx_tmp1 = tagArgs->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
            							}
            							else {
HXLINE( 547)								argIndex = (argIndex + (int)1);
HXDLIN( 547)								_hx_tmp1 = args->__get((argIndex - (int)1));
            							}
HXDLIN( 547)							tagArgs->__SetField(HX_("precision",3e,d5,c7,80),_hx_tmp1,hx::paccDynamic);
HXLINE( 548)							argIndex = (argIndex + (int)1);
HXDLIN( 548)							 ::Dynamic value = args->__get((argIndex - (int)1));
HXLINE( 550)							 ::Dynamic formatFunction;
HXLINE( 552)							switch((int)(_hx_getEnumValueIndex(type))){
            								case (int)0: {
HXLINE( 556)									 ::de::polygonal::_Printf::IntegerType integerType = type->_hx_getObject(0).StaticCast<  ::de::polygonal::_Printf::IntegerType >();
HXLINE( 557)									 ::haxe::ds::IntMap formatFunction1 = ::de::polygonal::Printf_obj::formatIntFuncHash;
HXDLIN( 557)									formatFunction = formatFunction1->get(_hx_getEnumValueIndex(integerType));
            								}
            								break;
            								case (int)1: {
HXLINE( 554)									 ::de::polygonal::_Printf::FloatType floatType = type->_hx_getObject(0).StaticCast<  ::de::polygonal::_Printf::FloatType >();
HXLINE( 555)									 ::haxe::ds::IntMap formatFunction2 = ::de::polygonal::Printf_obj::formatFloatFuncHash;
HXDLIN( 555)									formatFunction = formatFunction2->get(_hx_getEnumValueIndex(floatType));
            								}
            								break;
            								case (int)2: {
HXLINE( 559)									formatFunction = ::de::polygonal::Printf_obj::formatStringFuncHash->get((int)2);
            								}
            								break;
            								case (int)3: {
HXLINE( 561)									HX_STACK_DO_THROW(HX_("specifier 'p' is not supported",0f,c9,75,12));
            								}
            								break;
            								case (int)4: {
HXLINE( 563)									HX_STACK_DO_THROW(HX_("specifier 'n' is not supported",8d,a0,5b,08));
            								}
            								break;
            							}
HXLINE( 566)							output = (output + ( (::String)(formatFunction(value,tagArgs)) ));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 541)						::String name = token->_hx_getString(0);
HXDLIN( 541)						{
HXLINE( 542)							if (!(::Reflect_obj::hasField(args->__get((int)0),name))) {
HXLINE( 543)								HX_STACK_DO_THROW((HX_("no field named ",2c,5c,eb,b5) + name));
            							}
HXLINE( 544)							output = (output + ::Std_obj::string(::Reflect_obj::field(args->__get((int)0),name)));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 538)						HX_STACK_DO_THROW(HX_("invalid format specifier",5e,52,d7,0b));
            					}
            					break;
            				}
            			}
            		}
HXLINE( 569)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,format,return )

::Array< ::Dynamic> Printf_obj::tokenize(::String fmt){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_573_tokenize)
HXLINE( 574)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new();
HXLINE( 575)		return tokens;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,tokenize,return )

::String Printf_obj::formatBinary(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_579_formatBinary)
HXLINE( 580)		::String output = HX_("",00,00,00,00);
HXLINE( 581)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 582)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 583)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 585)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE( 585)			precision = (int)1;
            		}
HXLINE( 587)		if ((value != (int)0)) {
HXLINE( 589)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthH_dyn()))) != (int)0)) {
HXLINE( 590)				value = ((int)value & (int)(int)65535);
            			}
HXLINE( 593)			int i = value;
HXLINE( 594)			while(true){
HXLINE( 596)				::String output1;
HXDLIN( 596)				if ((((int)i & (int)(int)1) > (int)0)) {
HXLINE( 596)					output1 = HX_("1",31,00,00,00);
            				}
            				else {
HXLINE( 596)					output1 = HX_("0",30,00,00,00);
            				}
HXDLIN( 596)				output = (output1 + output);
HXLINE( 597)				i = hx::UShr(i,(int)1);
HXLINE( 594)				if (!((i > (int)0))) {
HXLINE( 594)					goto _hx_goto_5;
            				}
            			}
            			_hx_goto_5:;
HXLINE( 601)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE( 603)				if (hx::IsGreater( precision,output.length )) {
HXLINE( 604)					output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            				}
HXLINE( 606)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE( 606)					output = (HX_("b",62,00,00,00) + output);
            				}
            			}
            		}
HXLINE( 611)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 612)			if (hx::IsGreater( width,output.length )) {
HXLINE( 612)				return ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE( 612)				return output;
            			}
            		}
            		else {
HXLINE( 614)			if (hx::IsGreater( width,output.length )) {
HXLINE( 614)				::String _hx_tmp;
HXDLIN( 614)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 614)					_hx_tmp = HX_("0",30,00,00,00);
            				}
            				else {
HXLINE( 614)					_hx_tmp = HX_(" ",20,00,00,00);
            				}
HXDLIN( 614)				return ::de::polygonal::Printf_obj::lpad(output,_hx_tmp,width);
            			}
            			else {
HXLINE( 614)				return output;
            			}
            		}
HXLINE( 611)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatBinary,return )

::String Printf_obj::formatOctal(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_618_formatOctal)
HXLINE( 619)		::String output = HX_("",00,00,00,00);
HXLINE( 620)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 621)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 622)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 624)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE( 624)			precision = (int)1;
            		}
HXLINE( 626)		if ((value != (int)0)) {
HXLINE( 628)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthH_dyn()))) != (int)0)) {
HXLINE( 628)				value = ((int)value & (int)(int)65535);
            			}
HXLINE( 630)			output = ::de::polygonal::Printf_obj::toOct(value);
HXLINE( 632)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE( 632)				output = (HX_("0",30,00,00,00) + output);
            			}
HXLINE( 634)			bool _hx_tmp;
HXDLIN( 634)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE( 634)				_hx_tmp = hx::IsLess( output.length,precision );
            			}
            			else {
HXLINE( 634)				_hx_tmp = false;
            			}
HXDLIN( 634)			if (_hx_tmp) {
HXLINE( 635)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            			}
            		}
HXLINE( 639)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 640)			if (hx::IsGreater( width,output.length )) {
HXLINE( 640)				return ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE( 640)				return output;
            			}
            		}
            		else {
HXLINE( 642)			if (hx::IsGreater( width,output.length )) {
HXLINE( 642)				::String _hx_tmp1;
HXDLIN( 642)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 642)					_hx_tmp1 = HX_("0",30,00,00,00);
            				}
            				else {
HXLINE( 642)					_hx_tmp1 = HX_(" ",20,00,00,00);
            				}
HXDLIN( 642)				return ::de::polygonal::Printf_obj::lpad(output,_hx_tmp1,width);
            			}
            			else {
HXLINE( 642)				return output;
            			}
            		}
HXLINE( 639)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatOctal,return )

::String Printf_obj::formatHexadecimal(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_646_formatHexadecimal)
HXLINE( 647)		::String output = HX_("",00,00,00,00);
HXLINE( 648)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 649)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 650)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 652)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE( 652)			precision = (int)1;
            		}
HXLINE( 654)		if ((value != (int)0)) {
HXLINE( 656)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthH_dyn()))) != (int)0)) {
HXLINE( 657)				value = ((int)value & (int)(int)65535);
            			}
HXLINE( 659)			int x = value;
HXDLIN( 659)			::String s = HX_("",00,00,00,00);
HXDLIN( 659)			::String hexChars = HX_("0123456789ABCDEF",68,2a,58,a2);
HXDLIN( 659)			while(true){
HXLINE( 659)				s = (hexChars.charAt(((int)x & (int)(int)15)) + s);
HXDLIN( 659)				x = hx::UShr(x,(int)4);
HXDLIN( 659)				if (!((x > (int)0))) {
HXLINE( 659)					goto _hx_goto_8;
            				}
            			}
            			_hx_goto_8:;
HXDLIN( 659)			output = s;
HXLINE( 661)			bool _hx_tmp;
HXDLIN( 661)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE( 661)				_hx_tmp = hx::IsLess( output.length,precision );
            			}
            			else {
HXLINE( 661)				_hx_tmp = false;
            			}
HXDLIN( 661)			if (_hx_tmp) {
HXLINE( 662)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            			}
HXLINE( 664)			bool _hx_tmp1;
HXDLIN( 664)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE( 664)				_hx_tmp1 = (value != (int)0);
            			}
            			else {
HXLINE( 664)				_hx_tmp1 = false;
            			}
HXDLIN( 664)			if (_hx_tmp1) {
HXLINE( 665)				output = (HX_("0x",48,2a,00,00) + output);
            			}
HXLINE( 667)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::UpperCase_dyn()))) != (int)0)) {
HXLINE( 667)				output = output.toUpperCase();
            			}
            			else {
HXLINE( 667)				output = output.toLowerCase();
            			}
            		}
HXLINE( 671)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 672)			if (hx::IsGreater( width,output.length )) {
HXLINE( 672)				return ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE( 672)				return output;
            			}
            		}
            		else {
HXLINE( 674)			if (hx::IsGreater( width,output.length )) {
HXLINE( 674)				::String _hx_tmp2;
HXDLIN( 674)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 674)					_hx_tmp2 = HX_("0",30,00,00,00);
            				}
            				else {
HXLINE( 674)					_hx_tmp2 = HX_(" ",20,00,00,00);
            				}
HXDLIN( 674)				return ::de::polygonal::Printf_obj::lpad(output,_hx_tmp2,width);
            			}
            			else {
HXLINE( 674)				return output;
            			}
            		}
HXLINE( 671)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatHexadecimal,return )

::String Printf_obj::formatUnsignedDecimal(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_678_formatUnsignedDecimal)
HXLINE( 679)		::String output;
HXLINE( 680)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 682)		if ((value >= (int)0)) {
HXLINE( 683)			output = ::de::polygonal::Printf_obj::formatSignedDecimal(value,args);
            		}
            		else {
HXLINE( 686)			 cpp::Int64Struct x = _hx_int64_make((int)0,value);
HXLINE( 687)			output = _hx_int64_to_string(x);
HXLINE( 688)			bool _hx_tmp;
HXDLIN( 688)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE( 688)				_hx_tmp = hx::IsLess( output.length,precision );
            			}
            			else {
HXLINE( 688)				_hx_tmp = false;
            			}
HXDLIN( 688)			if (_hx_tmp) {
HXLINE( 689)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            			}
HXLINE( 690)			output = ::de::polygonal::Printf_obj::padNumber(output,value,( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) ),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            		}
HXLINE( 693)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatUnsignedDecimal,return )

::String Printf_obj::formatNaturalFloat(Float value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_697_formatNaturalFloat)
HXLINE( 699)		args->__SetField(HX_("precision",3e,d5,c7,80),(int)0,hx::paccDynamic);
HXLINE( 701)		::String formatedFloat = ::de::polygonal::Printf_obj::formatNormalFloat(value,args);
HXLINE( 702)		::String formatedScientific = ::de::polygonal::Printf_obj::formatScientific(value,args);
HXLINE( 704)		int this1 = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 704)		if ((((int)this1 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE( 706)			if ((formatedFloat.indexOf(HX_(".",2e,00,00,00),null()) != (int)-1)) {
HXLINE( 708)				int pos = (formatedFloat.length - (int)1);
HXLINE( 709)				while((::de::polygonal::Printf_obj::codeAt(formatedFloat,pos) == (int)48)){
HXLINE( 709)					pos = (pos - (int)1);
            				}
HXLINE( 710)				formatedFloat = formatedFloat.substr((int)0,pos);
            			}
            		}
HXLINE( 714)		if ((formatedFloat.length <= formatedScientific.length)) {
HXLINE( 714)			return formatedFloat;
            		}
            		else {
HXLINE( 714)			return formatedScientific;
            		}
HXDLIN( 714)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatNaturalFloat,return )

::String Printf_obj::formatScientific(Float value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_718_formatScientific)
HXLINE( 719)		::String output = HX_("",00,00,00,00);
HXLINE( 720)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 721)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 722)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE( 722)			precision = (int)6;
            		}
HXLINE( 724)		int sign;
HXDLIN( 724)		int exponent;
HXLINE( 726)		if ((value == (int)0)) {
HXLINE( 728)			sign = (int)0;
HXLINE( 729)			exponent = (int)0;
HXLINE( 730)			output = (output + HX_("0",30,00,00,00));
HXLINE( 731)			if (hx::IsGreater( precision,(int)0 )) {
HXLINE( 733)				output = (output + HX_(".",2e,00,00,00));
HXLINE( 734)				{
HXLINE( 734)					int _g1 = (int)0;
HXDLIN( 734)					int _g = precision;
HXDLIN( 734)					while((_g1 < _g)){
HXLINE( 734)						_g1 = (_g1 + (int)1);
HXDLIN( 734)						int i = (_g1 - (int)1);
HXDLIN( 734)						output = (output + HX_("0",30,00,00,00));
            					}
            				}
            			}
            		}
            		else {
HXLINE( 739)			if ((value > ((Float)0.))) {
HXLINE( 739)				sign = (int)1;
            			}
            			else {
HXLINE( 739)				if ((value < ((Float)0.))) {
HXLINE( 739)					sign = (int)-1;
            				}
            				else {
HXLINE( 739)					sign = (int)0;
            				}
            			}
HXLINE( 740)			if ((value < (int)0)) {
HXLINE( 740)				value = -(value);
            			}
            			else {
HXLINE( 740)				value = value;
            			}
HXLINE( 741)			exponent = ::Math_obj::floor(((Float)::Math_obj::log(value) / (Float)((Float)2.302585092994046)));
HXLINE( 742)			value = ((Float)value / (Float)::Math_obj::pow((int)10,exponent));
HXLINE( 743)			Float p = ::Math_obj::pow(((Float)0.1),precision);
HXLINE( 744)			int min = (int)-2147483647;
HXDLIN( 744)			Float t = ((Float)value / (Float)p);
HXDLIN( 744)			bool value1;
HXDLIN( 744)			if ((t < (int)2147483647)) {
HXLINE( 744)				value1 = (t > min);
            			}
            			else {
HXLINE( 744)				value1 = false;
            			}
HXDLIN( 744)			if (value1) {
HXLINE( 744)				value = (::Math_obj::round(t) * p);
            			}
            			else {
HXLINE( 744)				if ((t > (int)0)) {
HXLINE( 744)					t = (t + ((Float).5));
            				}
            				else {
HXLINE( 744)					if ((t < (int)0)) {
HXLINE( 744)						t = (t - ((Float).5));
            					}
            					else {
HXLINE( 744)						t = t;
            					}
            				}
HXDLIN( 744)				value = ((t - hx::Mod(t,(int)1)) * p);
            			}
            		}
HXLINE( 747)		::String output1;
HXDLIN( 747)		if ((sign < (int)0)) {
HXLINE( 747)			output1 = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE( 747)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Plus_dyn()))) != (int)0)) {
HXLINE( 747)				output1 = HX_("+",2b,00,00,00);
            			}
            			else {
HXLINE( 747)				output1 = HX_("",00,00,00,00);
            			}
            		}
HXDLIN( 747)		output = (output + output1);
HXLINE( 749)		if ((value != (int)0)) {
HXLINE( 750)			::String output2 = ::de::polygonal::Printf_obj::str(value);
HXDLIN( 750)			::String output3 = output2.substr((int)0,(precision + (int)2));
HXDLIN( 750)			output = (output + ::de::polygonal::Printf_obj::rpad(output3,HX_("0",30,00,00,00),(precision + (int)2)));
            		}
HXLINE( 751)		::String output4;
HXDLIN( 751)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::UpperCase_dyn()))) != (int)0)) {
HXLINE( 751)			output4 = HX_("E",45,00,00,00);
            		}
            		else {
HXLINE( 751)			output4 = HX_("e",65,00,00,00);
            		}
HXDLIN( 751)		output = (output + output4);
HXLINE( 752)		::String output5;
HXDLIN( 752)		if ((exponent >= (int)0)) {
HXLINE( 752)			output5 = HX_("+",2b,00,00,00);
            		}
            		else {
HXLINE( 752)			output5 = HX_("-",2d,00,00,00);
            		}
HXDLIN( 752)		output = (output + output5);
HXLINE( 754)		if ((exponent < (int)10)) {
HXLINE( 755)			output = (output + HX_("00",00,2a,00,00));
            		}
            		else {
HXLINE( 757)			if ((exponent < (int)100)) {
HXLINE( 758)				output = (output + HX_("0",30,00,00,00));
            			}
            		}
HXLINE( 760)		output = (output + ::de::polygonal::Printf_obj::str(::de::polygonal::Printf_obj::abs(exponent)));
HXLINE( 761)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatScientific,return )

::String Printf_obj::formatSignedDecimal(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_765_formatSignedDecimal)
HXLINE( 766)		::String output;
HXLINE( 767)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 768)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 769)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 771)		bool _hx_tmp;
HXDLIN( 771)		if (hx::IsEq( precision,(int)0 )) {
HXLINE( 771)			_hx_tmp = (value == (int)0);
            		}
            		else {
HXLINE( 771)			_hx_tmp = false;
            		}
HXDLIN( 771)		if (_hx_tmp) {
HXLINE( 772)			output = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 775)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthH_dyn()))) != (int)0)) {
HXLINE( 776)				value = ((int)value & (int)(int)65535);
            			}
HXLINE( 778)			output = ::de::polygonal::Printf_obj::str(::de::polygonal::Printf_obj::abs(value));
HXLINE( 780)			bool _hx_tmp1;
HXDLIN( 780)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE( 780)				_hx_tmp1 = hx::IsLess( output.length,precision );
            			}
            			else {
HXLINE( 780)				_hx_tmp1 = false;
            			}
HXDLIN( 780)			if (_hx_tmp1) {
HXLINE( 781)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            			}
HXLINE( 783)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 784)				int output1;
HXDLIN( 784)				if ((value < (int)0)) {
HXLINE( 784)					output1 = (width - (int)1);
            				}
            				else {
HXLINE( 784)					output1 = width;
            				}
HXDLIN( 784)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),output1);
            			}
HXLINE( 786)			if ((value < (int)0)) {
HXLINE( 787)				output = (HX_("-",2d,00,00,00) + output);
            			}
            		}
HXLINE( 790)		if ((value >= (int)0)) {
HXLINE( 792)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Plus_dyn()))) != (int)0)) {
HXLINE( 793)				output = (HX_("+",2b,00,00,00) + output);
            			}
            			else {
HXLINE( 795)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Space_dyn()))) != (int)0)) {
HXLINE( 796)					output = (HX_(" ",20,00,00,00) + output);
            				}
            			}
            		}
HXLINE( 799)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 800)			output = ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 802)			output = ::de::polygonal::Printf_obj::lpad(output,HX_(" ",20,00,00,00),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            		}
HXLINE( 804)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatSignedDecimal,return )

::String Printf_obj::formatString(::String x, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_808_formatString)
HXLINE( 809)		::String output = x;
HXLINE( 810)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 811)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 813)		if (hx::IsGreater( precision,(int)0 )) {
HXLINE( 814)			output = x.substr((int)0,precision);
            		}
HXLINE( 816)		int k = output.length;
HXLINE( 817)		bool _hx_tmp;
HXDLIN( 817)		if (hx::IsGreater( width,(int)0 )) {
HXLINE( 817)			_hx_tmp = hx::IsLess( k,width );
            		}
            		else {
HXLINE( 817)			_hx_tmp = false;
            		}
HXDLIN( 817)		if (_hx_tmp) {
HXLINE( 819)			int this1 = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 819)			if ((((int)this1 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 820)				output = ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE( 822)				output = ::de::polygonal::Printf_obj::lpad(output,HX_(" ",20,00,00,00),width);
            			}
            		}
HXLINE( 825)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatString,return )

::String Printf_obj::formatNormalFloat(Float value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_829_formatNormalFloat)
HXLINE( 830)		::String output;
HXLINE( 832)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 833)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 834)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 837)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE( 837)			precision = (int)6;
            		}
HXLINE( 839)		if (hx::IsEq( precision,(int)0 )) {
HXLINE( 841)			output = ::de::polygonal::Printf_obj::str(::de::polygonal::Printf_obj::abs(::Math_obj::round(value)));
HXLINE( 843)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE( 843)				output = (output + HX_(".",2e,00,00,00));
            			}
            		}
            		else {
HXLINE( 848)			Float y = ::Math_obj::pow(((Float).1),precision);
HXDLIN( 848)			int min = (int)-2147483647;
HXDLIN( 848)			Float t = ((Float)value / (Float)y);
HXDLIN( 848)			bool value1;
HXDLIN( 848)			if ((t < (int)2147483647)) {
HXLINE( 848)				value1 = (t > min);
            			}
            			else {
HXLINE( 848)				value1 = false;
            			}
HXDLIN( 848)			if (value1) {
HXLINE( 848)				value = (::Math_obj::round(t) * y);
            			}
            			else {
HXLINE( 848)				if ((t > (int)0)) {
HXLINE( 848)					t = (t + ((Float).5));
            				}
            				else {
HXLINE( 848)					if ((t < (int)0)) {
HXLINE( 848)						t = (t - ((Float).5));
            					}
            					else {
HXLINE( 848)						t = t;
            					}
            				}
HXDLIN( 848)				value = ((t - hx::Mod(t,(int)1)) * y);
            			}
HXLINE( 849)			 ::Dynamic decimalPlaces = precision;
HXLINE( 850)			if (::Math_obj::isNaN(value)) {
HXLINE( 851)				output = HX_("NaN",9b,84,3b,00);
            			}
            			else {
HXLINE( 854)				int t1 = ::Std_obj::_hx_int(::Math_obj::pow((int)10,decimalPlaces));
HXLINE( 855)				output = ::de::polygonal::Printf_obj::str(((Float)::Std_obj::_hx_int((value * t1)) / (Float)t1));
HXLINE( 856)				int i = output.indexOf(HX_(".",2e,00,00,00),null());
HXLINE( 857)				if ((i != (int)-1)) {
HXLINE( 859)					int _g1 = output.substr((i + (int)1),null()).length;
HXDLIN( 859)					int _g = decimalPlaces;
HXDLIN( 859)					while((_g1 < _g)){
HXLINE( 859)						_g1 = (_g1 + (int)1);
HXDLIN( 859)						int i1 = (_g1 - (int)1);
HXLINE( 860)						output = (output + HX_("0",30,00,00,00));
            					}
            				}
            				else {
HXLINE( 864)					output = (output + HX_(".",2e,00,00,00));
HXLINE( 865)					{
HXLINE( 865)						int _g11 = (int)0;
HXDLIN( 865)						int _g2 = decimalPlaces;
HXDLIN( 865)						while((_g11 < _g2)){
HXLINE( 865)							_g11 = (_g11 + (int)1);
HXDLIN( 865)							int i2 = (_g11 - (int)1);
HXLINE( 866)							output = (output + HX_("0",30,00,00,00));
            						}
            					}
            				}
            			}
            		}
HXLINE( 871)		bool _hx_tmp;
HXDLIN( 871)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Plus_dyn()))) != (int)0)) {
HXLINE( 871)			_hx_tmp = (value >= (int)0);
            		}
            		else {
HXLINE( 871)			_hx_tmp = false;
            		}
HXDLIN( 871)		if (_hx_tmp) {
HXLINE( 872)			output = (HX_("+",2b,00,00,00) + output);
            		}
            		else {
HXLINE( 874)			bool _hx_tmp1;
HXDLIN( 874)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Space_dyn()))) != (int)0)) {
HXLINE( 874)				_hx_tmp1 = (value >= (int)0);
            			}
            			else {
HXLINE( 874)				_hx_tmp1 = false;
            			}
HXDLIN( 874)			if (_hx_tmp1) {
HXLINE( 875)				output = (HX_(" ",20,00,00,00) + output);
            			}
            		}
HXLINE( 877)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 878)			int output1;
HXDLIN( 878)			if ((value < (int)0)) {
HXLINE( 878)				output1 = (width - (int)1);
            			}
            			else {
HXLINE( 878)				output1 = width;
            			}
HXDLIN( 878)			output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),output1);
            		}
HXLINE( 880)		if ((value < (int)0)) {
HXLINE( 881)			output = (HX_("-",2d,00,00,00) + output);
            		}
HXLINE( 883)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 884)			output = ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            		}
            		else {
HXLINE( 886)			output = ::de::polygonal::Printf_obj::lpad(output,HX_(" ",20,00,00,00),width);
            		}
HXLINE( 888)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatNormalFloat,return )

::String Printf_obj::formatCharacter(int x, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_892_formatCharacter)
HXLINE( 893)		::String output = ::String::fromCharCode(x);
HXLINE( 894)		if (hx::IsGreater( args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic),(int)1 )) {
HXLINE( 897)			int this1 = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 897)			if ((((int)this1 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 898)				output = ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            			}
            			else {
HXLINE( 900)				output = ::de::polygonal::Printf_obj::lpad(output,HX_(" ",20,00,00,00),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            			}
            		}
HXLINE( 903)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatCharacter,return )

::String Printf_obj::padNumber(::String x,Float n,int flags,int width){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_914_padNumber)
HXLINE( 915)		int k = x.length;
HXLINE( 916)		bool _hx_tmp;
HXDLIN( 916)		if ((width > (int)0)) {
HXLINE( 916)			_hx_tmp = (k < width);
            		}
            		else {
HXLINE( 916)			_hx_tmp = false;
            		}
HXDLIN( 916)		if (_hx_tmp) {
HXLINE( 919)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 920)				x = ::de::polygonal::Printf_obj::rpad(x,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE( 923)				if ((n >= (int)0)) {
HXLINE( 924)					::String x1;
HXDLIN( 924)					if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 924)						x1 = HX_("0",30,00,00,00);
            					}
            					else {
HXLINE( 924)						x1 = HX_(" ",20,00,00,00);
            					}
HXDLIN( 924)					x = ::de::polygonal::Printf_obj::lpad(x,x1,width);
            				}
            				else {
HXLINE( 927)					if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 930)						x = (HX_("-",2d,00,00,00) + ::de::polygonal::Printf_obj::lpad(x.substr((int)1,null()),HX_("0",30,00,00,00),width));
            					}
            					else {
HXLINE( 933)						x = ::de::polygonal::Printf_obj::lpad(x,HX_(" ",20,00,00,00),width);
            					}
            				}
            			}
            		}
HXLINE( 938)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Printf_obj,padNumber,return )

::String Printf_obj::lpad(::String s,::String c,int l){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_942_lpad)
HXLINE( 943)		if ((c.length <= (int)0)) {
HXLINE( 943)			HX_STACK_DO_THROW(HX_("error",c8,cb,29,73));
            		}
HXLINE( 946)		while((s.length < l)){
HXLINE( 947)			s = (c + s);
            		}
HXLINE( 949)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Printf_obj,lpad,return )

::String Printf_obj::rpad(::String s,::String c,int l){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_953_rpad)
HXLINE( 954)		if ((c.length <= (int)0)) {
HXLINE( 954)			HX_STACK_DO_THROW(HX_("error",c8,cb,29,73));
            		}
HXLINE( 957)		while((s.length < l)){
HXLINE( 958)			s = (s + c);
            		}
HXLINE( 960)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Printf_obj,rpad,return )

::String Printf_obj::toHex(int x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_964_toHex)
HXLINE( 970)		::String s = HX_("",00,00,00,00);
HXLINE( 971)		::String hexChars = HX_("0123456789ABCDEF",68,2a,58,a2);
HXLINE( 972)		while(true){
HXLINE( 973)			s = (hexChars.charAt(((int)x & (int)(int)15)) + s);
HXLINE( 974)			x = hx::UShr(x,(int)4);
HXLINE( 972)			if (!((x > (int)0))) {
HXLINE( 972)				goto _hx_goto_26;
            			}
            		}
            		_hx_goto_26:;
HXLINE( 977)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,toHex,return )

::String Printf_obj::toOct(int x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_981_toOct)
HXLINE( 982)		::String s = HX_("",00,00,00,00);
HXLINE( 983)		int t = x;
HXLINE( 984)		while(true){
HXLINE( 986)			s = (((int)t & (int)(int)7) + s);
HXLINE( 987)			t = hx::UShr(t,(int)3);
HXLINE( 984)			if (!((t > (int)0))) {
HXLINE( 984)				goto _hx_goto_28;
            			}
            		}
            		_hx_goto_28:;
HXLINE( 990)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,toOct,return )

int Printf_obj::abs(int x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_994_abs)
HXDLIN( 994)		return ::Std_obj::_hx_int(::Math_obj::abs(x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,abs,return )

::String Printf_obj::str( ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_997_str)
HXDLIN( 997)		return ::Std_obj::string(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,str,return )

int Printf_obj::codeAt(::String x,int i){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1006_codeAt)
HXDLIN(1006)		return x.cca(i);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,codeAt,return )

bool Printf_obj::isDigit(int x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1010_isDigit)
HXDLIN(1010)		if ((x >= (int)48)) {
HXDLIN(1010)			return (x <= (int)57);
            		}
            		else {
HXDLIN(1010)			return false;
            		}
HXDLIN(1010)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,isDigit,return )

Float Printf_obj::roundTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1013_roundTo)
HXLINE(1015)		int min = (int)-2147483647;
HXLINE(1029)		Float t = ((Float)x / (Float)y);
HXLINE(1030)		bool _hx_tmp;
HXDLIN(1030)		if ((t < (int)2147483647)) {
HXLINE(1030)			_hx_tmp = (t > min);
            		}
            		else {
HXLINE(1030)			_hx_tmp = false;
            		}
HXDLIN(1030)		if (_hx_tmp) {
HXLINE(1031)			return (::Math_obj::round(t) * y);
            		}
            		else {
HXLINE(1034)			if ((t > (int)0)) {
HXLINE(1034)				t = (t + ((Float).5));
            			}
            			else {
HXLINE(1034)				if ((t < (int)0)) {
HXLINE(1034)					t = (t - ((Float).5));
            				}
            				else {
HXLINE(1034)					t = t;
            				}
            			}
HXLINE(1035)			return ((t - hx::Mod(t,(int)1)) * y);
            		}
HXLINE(1030)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,roundTo,return )

int Printf_obj::round(Float x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1041_round)
HXDLIN(1041)		return ::Math_obj::round(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,round,return )

int Printf_obj::exp(int a,int exp){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1045_exp)
HXDLIN(1045)		return ::Std_obj::_hx_int(::Math_obj::pow(a,exp));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,exp,return )

Float Printf_obj::fabs(Float x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1066_fabs)
HXDLIN(1066)		if ((x < (int)0)) {
HXDLIN(1066)			return -(x);
            		}
            		else {
HXDLIN(1066)			return x;
            		}
HXDLIN(1066)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,fabs,return )

int Printf_obj::fsgn(Float x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1073_fsgn)
HXDLIN(1073)		if ((x > ((Float)0.))) {
HXDLIN(1073)			return (int)1;
            		}
            		else {
HXDLIN(1073)			if ((x < ((Float)0.))) {
HXDLIN(1073)				return (int)-1;
            			}
            			else {
HXDLIN(1073)				return (int)0;
            			}
            		}
HXDLIN(1073)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,fsgn,return )


Printf_obj::Printf_obj()
{
}

bool Printf_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"abs") ) { outValue = abs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"str") ) { outValue = str_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"exp") ) { outValue = exp_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lpad") ) { outValue = lpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rpad") ) { outValue = rpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fabs") ) { outValue = fabs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fsgn") ) { outValue = fsgn_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toHex") ) { outValue = toHex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toOct") ) { outValue = toOct_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { outValue = format_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"codeAt") ) { outValue = codeAt_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isDigit") ) { outValue = isDigit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tokenize") ) { outValue = tokenize_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"padNumber") ) { outValue = padNumber_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dataTypeMap") ) { outValue = ( dataTypeMap ); return true; }
		if (HX_FIELD_EQ(inName,"formatOctal") ) { outValue = formatOctal_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_initialized") ) { outValue = ( _initialized ); return true; }
		if (HX_FIELD_EQ(inName,"formatBinary") ) { outValue = formatBinary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatString") ) { outValue = formatString_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"makeDataTypeMap") ) { outValue = makeDataTypeMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatCharacter") ) { outValue = formatCharacter_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"formatScientific") ) { outValue = formatScientific_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"formatIntFuncHash") ) { outValue = ( formatIntFuncHash ); return true; }
		if (HX_FIELD_EQ(inName,"formatHexadecimal") ) { outValue = formatHexadecimal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatNormalFloat") ) { outValue = formatNormalFloat_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"formatNaturalFloat") ) { outValue = formatNaturalFloat_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"formatFloatFuncHash") ) { outValue = ( formatFloatFuncHash ); return true; }
		if (HX_FIELD_EQ(inName,"formatSignedDecimal") ) { outValue = formatSignedDecimal_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"formatStringFuncHash") ) { outValue = ( formatStringFuncHash ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"formatUnsignedDecimal") ) { outValue = formatUnsignedDecimal_dyn(); return true; }
	}
	return false;
}

bool Printf_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"dataTypeMap") ) { dataTypeMap=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_initialized") ) { _initialized=ioValue.Cast< bool >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"formatIntFuncHash") ) { formatIntFuncHash=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"formatFloatFuncHash") ) { formatFloatFuncHash=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"formatStringFuncHash") ) { formatStringFuncHash=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Printf_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Printf_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Printf_obj::dataTypeMap,HX_HCSTRING("dataTypeMap","\xf8","\x0a","\xb2","\x3a")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Printf_obj::formatIntFuncHash,HX_HCSTRING("formatIntFuncHash","\x4a","\xff","\x46","\xc5")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Printf_obj::formatFloatFuncHash,HX_HCSTRING("formatFloatFuncHash","\x37","\x01","\xda","\xb8")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Printf_obj::formatStringFuncHash,HX_HCSTRING("formatStringFuncHash","\xba","\x8c","\x47","\x16")},
	{hx::fsBool,(void *) &Printf_obj::_initialized,HX_HCSTRING("_initialized","\x15","\xa3","\x19","\x9d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Printf_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Printf_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Printf_obj::dataTypeMap,"dataTypeMap");
	HX_MARK_MEMBER_NAME(Printf_obj::formatIntFuncHash,"formatIntFuncHash");
	HX_MARK_MEMBER_NAME(Printf_obj::formatFloatFuncHash,"formatFloatFuncHash");
	HX_MARK_MEMBER_NAME(Printf_obj::formatStringFuncHash,"formatStringFuncHash");
	HX_MARK_MEMBER_NAME(Printf_obj::_initialized,"_initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Printf_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Printf_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Printf_obj::dataTypeMap,"dataTypeMap");
	HX_VISIT_MEMBER_NAME(Printf_obj::formatIntFuncHash,"formatIntFuncHash");
	HX_VISIT_MEMBER_NAME(Printf_obj::formatFloatFuncHash,"formatFloatFuncHash");
	HX_VISIT_MEMBER_NAME(Printf_obj::formatStringFuncHash,"formatStringFuncHash");
	HX_VISIT_MEMBER_NAME(Printf_obj::_initialized,"_initialized");
};

#endif

hx::Class Printf_obj::__mClass;

static ::String Printf_obj_sStaticFields[] = {
	HX_HCSTRING("dataTypeMap","\xf8","\x0a","\xb2","\x3a"),
	HX_HCSTRING("formatIntFuncHash","\x4a","\xff","\x46","\xc5"),
	HX_HCSTRING("formatFloatFuncHash","\x37","\x01","\xda","\xb8"),
	HX_HCSTRING("formatStringFuncHash","\xba","\x8c","\x47","\x16"),
	HX_HCSTRING("_initialized","\x15","\xa3","\x19","\x9d"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("makeDataTypeMap","\xaa","\xf3","\xae","\x69"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("tokenize","\xfb","\xf5","\x57","\x2b"),
	HX_HCSTRING("formatBinary","\x98","\x82","\x20","\x2a"),
	HX_HCSTRING("formatOctal","\x14","\x37","\x5c","\xe4"),
	HX_HCSTRING("formatHexadecimal","\x34","\xfe","\x97","\x8f"),
	HX_HCSTRING("formatUnsignedDecimal","\xa5","\xe2","\x19","\x4e"),
	HX_HCSTRING("formatNaturalFloat","\xca","\x5c","\x19","\x02"),
	HX_HCSTRING("formatScientific","\xc0","\x9f","\x5b","\x7d"),
	HX_HCSTRING("formatSignedDecimal","\x5e","\x28","\x02","\x1a"),
	HX_HCSTRING("formatString","\x68","\xef","\x44","\x4e"),
	HX_HCSTRING("formatNormalFloat","\xfe","\x8b","\x89","\x73"),
	HX_HCSTRING("formatCharacter","\x72","\x0d","\x4c","\xad"),
	HX_HCSTRING("padNumber","\x7c","\x8c","\x2c","\x0a"),
	HX_HCSTRING("lpad","\x67","\x5c","\xb8","\x47"),
	HX_HCSTRING("rpad","\x21","\xa4","\xaf","\x4b"),
	HX_HCSTRING("toHex","\x20","\xf4","\x10","\x14"),
	HX_HCSTRING("toOct","\x25","\x42","\x16","\x14"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("str","\xb1","\xa8","\x57","\x00"),
	HX_HCSTRING("codeAt","\x80","\x4f","\x35","\xc1"),
	HX_HCSTRING("isDigit","\x63","\x91","\x4d","\x76"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00"),
	HX_HCSTRING("fabs","\xcc","\xb3","\xb5","\x43"),
	HX_HCSTRING("fsgn","\xb4","\x60","\xc3","\x43"),
	::String(null())
};

void Printf_obj::__register()
{
	hx::Object *dummy = new Printf_obj;
	Printf_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.Printf","\xaf","\x4a","\xa7","\xfb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Printf_obj::__GetStatic;
	__mClass->mSetStaticField = &Printf_obj::__SetStatic;
	__mClass->mMarkFunc = Printf_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Printf_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Printf_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Printf_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Printf_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Printf_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Printf_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_59_boot)
HXDLIN(  59)		_initialized = false;
            	}
}

} // end namespace de
} // end namespace polygonal
