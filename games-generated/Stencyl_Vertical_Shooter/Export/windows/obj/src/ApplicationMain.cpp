// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_ApplicationMain
#include <ApplicationMain.h>
#endif
#ifndef INCLUDED_ManifestResources
#include <ManifestResources.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Universal
#include <Universal.h>
#endif
#ifndef INCLUDED_com_stencyl_Config
#include <com/stencyl/Config.h>
#endif
#ifndef INCLUDED_com_stencyl_Data
#include <com/stencyl/Data.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_Input
#include <com/stencyl/Input.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Script
#include <com/stencyl/behavior/Script.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_EngineScaleUpdateListener
#include <com/stencyl/graphics/EngineScaleUpdateListener.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_G
#include <com/stencyl/graphics/G.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Font
#include <com/stencyl/models/Font.h>
#endif
#ifndef INCLUDED_com_stencyl_models_GameModel
#include <com/stencyl/models/GameModel.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Joystick
#include <com/stencyl/models/Joystick.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_SoundChannel
#include <com/stencyl/models/SoundChannel.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Animation
#include <com/stencyl/models/actor/Animation.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Collision
#include <com/stencyl/models/actor/Collision.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_CollisionPoint
#include <com/stencyl/models/actor/CollisionPoint.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_CollisionInfo
#include <com/stencyl/models/collision/CollisionInfo.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_TileLayer
#include <com/stencyl/models/scene/TileLayer.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_ToolsetInterface
#include <com/stencyl/utils/ToolsetInterface.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Utils
#include <com/stencyl/utils/Utils.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenManager
#include <com/stencyl/utils/motion/TweenManager.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Int_Void
#include <lime/app/_Event_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_Preloader
#include <lime/utils/Preloader.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Window
#include <openfl/display/Window.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#include <openfl/events/UncaughtErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvents
#include <openfl/events/UncaughtErrorEvents.h>
#endif
#ifndef INCLUDED_scripts_StencylPreloader
#include <scripts/StencylPreloader.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6fcf922b66429816_41_main,"ApplicationMain","main",0x93d2f73e,"ApplicationMain.main","ApplicationMain.hx",41,0x0780ded5)
HX_LOCAL_STACK_FRAME(_hx_pos_6fcf922b66429816_72_reloadGame,"ApplicationMain","reloadGame",0xf367e4b0,"ApplicationMain.reloadGame","ApplicationMain.hx",72,0x0780ded5)
HX_LOCAL_STACK_FRAME(_hx_pos_6fcf922b66429816_106_create,"ApplicationMain","create",0x2f7db141,"ApplicationMain.create","ApplicationMain.hx",106,0x0780ded5)
HX_LOCAL_STACK_FRAME(_hx_pos_6fcf922b66429816_111_create,"ApplicationMain","create",0x2f7db141,"ApplicationMain.create","ApplicationMain.hx",111,0x0780ded5)
HX_LOCAL_STACK_FRAME(_hx_pos_6fcf922b66429816_296_uncaughtErrorHandler,"ApplicationMain","uncaughtErrorHandler",0x998e6c1c,"ApplicationMain.uncaughtErrorHandler","ApplicationMain.hx",296,0x0780ded5)
HX_LOCAL_STACK_FRAME(_hx_pos_6fcf922b66429816_69_boot,"ApplicationMain","boot",0x8c984337,"ApplicationMain.boot","ApplicationMain.hx",69,0x0780ded5)

void ApplicationMain_obj::__construct() { }

Dynamic ApplicationMain_obj::__CreateEmpty() { return new ApplicationMain_obj; }

void *ApplicationMain_obj::_hx_vtable = 0;

Dynamic ApplicationMain_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ApplicationMain_obj > _hx_result = new ApplicationMain_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ApplicationMain_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4a39ff89;
}

 ::openfl::display::Application ApplicationMain_obj::app;

 ::Universal ApplicationMain_obj::universal;

void ApplicationMain_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_6fcf922b66429816_41_main)
HXLINE(  46)		::Universal_obj::am = hx::ClassOf< ::ApplicationMain >();
HXLINE(  47)		::Universal_obj::setupTracing(true);
HXLINE(  49)		::com::stencyl::Config_obj::load();
HXLINE(  50)		::com::stencyl::Input_obj::loadInputConfig();
HXLINE(  51)		::Universal_obj::setupTracing(null());
HXLINE(  53)		::lime::_hx_system::System_obj::_hx___registerEntryPoint(HX_("Stencyl_Vertical_Shooter",16,c5,f6,b2),::ApplicationMain_obj::create_dyn());
HXLINE(  55)		::openfl::Lib_obj::get_current();
HXLINE(  58)		 ::com::stencyl::utils::ToolsetInterface_obj::__alloc( HX_CTX );
HXLINE(  64)		::ApplicationMain_obj::create(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ApplicationMain_obj,main,(void))

::Array< ::Dynamic> ApplicationMain_obj::reloadListeners;

void ApplicationMain_obj::reloadGame(){
            	HX_GC_STACKFRAME(&_hx_pos_6fcf922b66429816_72_reloadGame)
HXLINE(  73)		{
HXLINE(  73)			int _g = (int)0;
HXDLIN(  73)			::Array< ::Dynamic> _g1 = ::ApplicationMain_obj::reloadListeners;
HXDLIN(  73)			while((_g < _g1->length)){
HXLINE(  73)				 ::Dynamic reloadListener = _g1->__get(_g);
HXDLIN(  73)				_g = (_g + (int)1);
HXLINE(  75)				reloadListener();
            			}
            		}
HXLINE(  78)		::com::stencyl::behavior::Script_obj::resetStatics();
HXLINE(  79)		::com::stencyl::graphics::G_obj::resetStatics();
HXLINE(  80)		::com::stencyl::models::Actor_obj::resetStatics();
HXLINE(  81)		::com::stencyl::models::Font_obj::resetStatics();
HXLINE(  82)		::com::stencyl::models::GameModel_obj::resetStatics();
HXLINE(  83)		::com::stencyl::models::Joystick_obj::resetStatics();
HXLINE(  84)		::com::stencyl::models::SoundChannel_obj::resetStatics();
HXLINE(  85)		::com::stencyl::models::actor::Animation_obj::resetStatics();
HXLINE(  86)		::com::stencyl::models::actor::Collision_obj::resetStatics();
HXLINE(  87)		::com::stencyl::models::actor::CollisionPoint_obj::resetStatics();
HXLINE(  88)		::com::stencyl::models::collision::CollisionInfo_obj::resetStatics();
HXLINE(  89)		::com::stencyl::models::scene::TileLayer_obj::resetStatics();
HXLINE(  91)		::com::stencyl::utils::motion::TweenManager_obj::resetStatics();
HXLINE(  92)		::com::stencyl::utils::Utils_obj::resetStatics();
HXLINE(  93)		::com::stencyl::utils::ToolsetInterface_obj::resetStatics();
HXLINE(  94)		::com::stencyl::Data_obj::resetStatics();
HXLINE(  95)		::com::stencyl::Input_obj::resetStatics();
HXLINE(  96)		::com::stencyl::Engine_obj::resetStatics();
HXLINE(  97)		::openfl::Lib_obj::get_current()->removeChild(::ApplicationMain_obj::universal);
HXLINE(  99)		::com::stencyl::Input_obj::loadInputConfig();
HXLINE( 100)		::ApplicationMain_obj::universal =  ::Universal_obj::__alloc( HX_CTX );
HXLINE( 101)		::openfl::Lib_obj::get_current()->addChild(::ApplicationMain_obj::universal);
HXLINE( 102)		::ApplicationMain_obj::universal->preloaderComplete();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ApplicationMain_obj,reloadGame,(void))

void ApplicationMain_obj::create( ::Dynamic config){
            	HX_GC_STACKFRAME(&_hx_pos_6fcf922b66429816_106_create)
HXLINE( 108)		{
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,Float,startTime) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_6fcf922b66429816_111_create)
HXLINE( 111)				bool tryTimeout1;
HXDLIN( 111)				if (!(::com::stencyl::utils::ToolsetInterface_obj::connected)) {
HXLINE( 111)					int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 111)					Float tryTimeout2;
HXDLIN( 111)					if ((timer1 > (int)0)) {
HXLINE( 111)						tryTimeout2 = ((Float)timer1 / (Float)(int)1000);
            					}
            					else {
HXLINE( 111)						tryTimeout2 = (int)0;
            					}
HXDLIN( 111)					tryTimeout1 = ((tryTimeout2 - startTime) > (int)2);
            				}
            				else {
HXLINE( 111)					tryTimeout1 = false;
            				}
HXDLIN( 111)				if (tryTimeout1) {
HXLINE( 113)					::com::stencyl::utils::ToolsetInterface_obj::cancelConnection();
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 109)			int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 109)			Float startTime;
HXDLIN( 109)			if ((timer > (int)0)) {
HXLINE( 109)				startTime = ((Float)timer / (Float)(int)1000);
            			}
            			else {
HXLINE( 109)				startTime = (int)0;
            			}
HXLINE( 110)			 ::Dynamic tryTimeout =  ::Dynamic(new _hx_Closure_0(startTime));
HXLINE( 141)			while(!(::com::stencyl::utils::ToolsetInterface_obj::ready)){
HXLINE( 143)				::com::stencyl::utils::ToolsetInterface_obj::preloadedUpdate();
HXLINE( 144)				tryTimeout();
            			}
            		}
HXLINE( 151)		::ApplicationMain_obj::app =  ::openfl::display::Application_obj::__alloc( HX_CTX );
HXLINE( 153)		::ManifestResources_obj::init(config);
HXLINE( 155)		::ApplicationMain_obj::app->meta->set(HX_("build",2e,db,ea,ba),HX_("1",31,00,00,00));
HXLINE( 156)		::ApplicationMain_obj::app->meta->set(HX_("company",3d,15,69,83),HX_("Stencyl",cc,f3,54,4d));
HXLINE( 157)		::ApplicationMain_obj::app->meta->set(HX_("file",7c,ce,bb,43),HX_("Stencyl_Vertical_Shooter",16,c5,f6,b2));
HXLINE( 158)		::ApplicationMain_obj::app->meta->set(HX_("name",4b,72,ff,48),HX_("Stencyl_Vertical_Shooter",16,c5,f6,b2));
HXLINE( 159)		::ApplicationMain_obj::app->meta->set(HX_("packageName",f1,04,ad,04),HX_("com.example.myapp",84,30,57,c1));
HXLINE( 160)		::ApplicationMain_obj::app->meta->set(HX_("version",18,e7,f1,7c),HX_("1.0.0",b5,d1,2e,55));
HXLINE( 166)		 ::Dynamic attributes =  ::Dynamic(hx::Anon_obj::Create(16)
            			->setFixed(0,HX_("resizable",6b,37,50,a9),false)
            			->setFixed(1,HX_("allowHighDPI",92,07,a2,b4),false)
            			->setFixed(2,HX_("width",06,b6,62,ca),(int)640)
            			->setFixed(3,HX_("fullscreen",3b,3a,b4,f9),false)
            			->setFixed(4,HX_("maximized",18,0e,e1,fe),false)
            			->setFixed(5,HX_("x",78,00,00,00),null())
            			->setFixed(6,HX_("y",79,00,00,00),null())
            			->setFixed(7,HX_("height",e7,07,4c,02),(int)480)
            			->setFixed(8,HX_("element",bc,ae,54,06),null())
            			->setFixed(9,HX_("title",98,15,3b,10),HX_("Stencyl_Vertical_Shooter",16,c5,f6,b2))
            			->setFixed(10,HX_("alwaysOnTop",67,4d,53,16),false)
            			->setFixed(11,HX_("borderless",45,46,71,17),false)
            			->setFixed(12,HX_("minimized",86,fb,9d,28),false)
            			->setFixed(13,HX_("frameRate",ad,11,25,39),(int)65)
            			->setFixed(14,HX_("hidden",6a,ff,95,4c),false)
            			->setFixed(15,HX_("parameters",aa,be,7e,51), ::Dynamic(hx::Anon_obj::Create(0))));
HXLINE( 190)		 ::Dynamic _hx_tmp;
HXDLIN( 190)		if (::com::stencyl::Config_obj::antialias) {
HXLINE( 190)			_hx_tmp = (int)2;
            		}
            		else {
HXLINE( 190)			_hx_tmp = (int)0;
            		}
HXLINE( 188)		attributes->__SetField(HX_("context",ef,95,77,19), ::Dynamic(hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("stencil",fc,bd,03,80),true)
            			->setFixed(1,HX_("depth",03,f1,29,d7),true)
            			->setFixed(2,HX_("colorDepth",a0,08,96,fb),(int)32)
            			->setFixed(3,HX_("background",ee,93,1d,26),(int)0)
            			->setFixed(4,HX_("vsync",d1,2d,a8,3d),true)
            			->setFixed(5,HX_("antialiasing",f4,16,b3,48),_hx_tmp)
            			->setFixed(6,HX_("type",ba,f2,08,4d),null())
            			->setFixed(7,HX_("hardware",a8,e2,d3,75),true)),hx::paccDynamic);
HXLINE( 201)		if (hx::IsNull( ::ApplicationMain_obj::app->_hx___window )) {
HXLINE( 203)			if (hx::IsNotNull( config )) {
HXLINE( 205)				int _g = (int)0;
HXDLIN( 205)				::Array< ::String > _g1 = ::Reflect_obj::fields(config);
HXDLIN( 205)				while((_g < _g1->length)){
HXLINE( 205)					::String field = _g1->__get(_g);
HXDLIN( 205)					_g = (_g + (int)1);
HXLINE( 207)					if (::Reflect_obj::hasField(attributes,field)) {
HXLINE( 209)						::Reflect_obj::setField(attributes,field,::Reflect_obj::field(config,field));
            					}
            					else {
HXLINE( 211)						if (::Reflect_obj::hasField( ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),hx::paccDynamic)),field)) {
HXLINE( 213)							 ::Dynamic attributes1 = attributes->__Field(HX_("context",ef,95,77,19),hx::paccDynamic);
HXDLIN( 213)							::Reflect_obj::setField(attributes1,field,::Reflect_obj::field(config,field));
            						}
            					}
            				}
            			}
            		}
HXLINE( 223)		Dynamic( ::ApplicationMain_obj::app->createWindow(attributes)).StaticCast<  ::openfl::display::Window >();
HXLINE( 232)		if (!(::com::stencyl::Config_obj::releaseMode)) {
HXLINE( 234)			::openfl::Lib_obj::get_current()->get_loaderInfo()->uncaughtErrorEvents->addEventListener(HX_("uncaughtError",f3,98,8b,8b),::ApplicationMain_obj::uncaughtErrorHandler_dyn(),null(),null(),null());
            		}
HXLINE( 237)		::Universal_obj::initWindow(::ApplicationMain_obj::app->_hx___window);
HXLINE( 238)		::ApplicationMain_obj::universal =  ::Universal_obj::__alloc( HX_CTX );
HXLINE( 239)		::openfl::Lib_obj::get_current()->addChild(::ApplicationMain_obj::universal);
HXLINE( 240)		::String imgBase = ::com::stencyl::Engine_obj::IMG_BASE;
HXLINE( 243)		::String preloadPaths = ::com::stencyl::utils::Utils_obj::getConfigText(HX_("config/preloadPaths.txt",54,cd,f9,5e));
HXLINE( 244)		{
HXLINE( 244)			int _g2 = (int)0;
HXDLIN( 244)			::Array< ::Dynamic> _g11 = ::ManifestResources_obj::preloadLibraries;
HXDLIN( 244)			while((_g2 < _g11->length)){
HXLINE( 244)				 ::lime::utils::AssetLibrary library = _g11->__get(_g2).StaticCast<  ::lime::utils::AssetLibrary >();
HXDLIN( 244)				_g2 = (_g2 + (int)1);
HXLINE( 246)				{
HXLINE( 246)					int _g21 = (int)0;
HXDLIN( 246)					::Array< ::String > _g3 = preloadPaths.split(HX_("\n",0a,00,00,00));
HXDLIN( 246)					while((_g21 < _g3->length)){
HXLINE( 246)						::String path = _g3->__get(_g21);
HXDLIN( 246)						_g21 = (_g21 + (int)1);
HXLINE( 248)						if ((path.length == (int)0)) {
HXLINE( 249)							continue;
            						}
HXLINE( 250)						path = ::StringTools_obj::replace(path,HX_("IMG_BASE",2d,ad,90,13),imgBase);
HXLINE( 251)						library->preload->set(path,true);
            					}
            				}
            			}
            		}
HXLINE( 262)		 ::scripts::StencylPreloader preloader =  ::scripts::StencylPreloader_obj::__alloc( HX_CTX );
HXLINE( 263)		preloader->onComplete->add(::ApplicationMain_obj::universal->preloaderComplete_dyn(),null(),null());
HXLINE( 264)		::ApplicationMain_obj::app->_hx___preloader->onProgress->add(preloader->onUpdate_dyn(),null(),null());
HXLINE( 265)		::ApplicationMain_obj::app->_hx___preloader->onComplete->add(preloader->onLoaded_dyn(),null(),null());
HXLINE( 267)		{
HXLINE( 267)			int _g4 = (int)0;
HXDLIN( 267)			::Array< ::Dynamic> _g12 = ::ManifestResources_obj::preloadLibraries;
HXDLIN( 267)			while((_g4 < _g12->length)){
HXLINE( 267)				 ::lime::utils::AssetLibrary library1 = _g12->__get(_g4).StaticCast<  ::lime::utils::AssetLibrary >();
HXDLIN( 267)				_g4 = (_g4 + (int)1);
HXLINE( 269)				::ApplicationMain_obj::app->_hx___preloader->addLibrary(library1);
            			}
            		}
HXLINE( 271)		{
HXLINE( 271)			int _g5 = (int)0;
HXDLIN( 271)			::Array< ::String > _g13 = ::ManifestResources_obj::preloadLibraryNames;
HXDLIN( 271)			while((_g5 < _g13->length)){
HXLINE( 271)				::String name = _g13->__get(_g5);
HXDLIN( 271)				_g5 = (_g5 + (int)1);
HXLINE( 273)				::ApplicationMain_obj::app->_hx___preloader->addLibraryName(name);
            			}
            		}
HXLINE( 276)		::ApplicationMain_obj::app->_hx___preloader->load();
HXLINE( 278)		int result = ::ApplicationMain_obj::app->exec();
HXLINE( 281)		::lime::_hx_system::System_obj::exit(result);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ApplicationMain_obj,create,(void))

void ApplicationMain_obj::uncaughtErrorHandler( ::openfl::events::UncaughtErrorEvent event){
            	HX_STACKFRAME(&_hx_pos_6fcf922b66429816_296_uncaughtErrorHandler)
HXDLIN( 296)		if (::Std_obj::is(event->error,hx::ClassOf< ::openfl::errors::Error >())) {
HXLINE( 298)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 298)			::String _hx_tmp1 = hx::TCast<  ::openfl::errors::Error >::cast(event->error)->getStackTrace();
HXDLIN( 298)			_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("ApplicationMain.hx",d5,de,80,07),298,HX_("ApplicationMain",89,ff,39,4a),HX_("uncaughtErrorHandler",17,93,a0,1d)));
            		}
            		else {
HXLINE( 300)			if (::Std_obj::is(event->error,hx::ClassOf< ::openfl::events::ErrorEvent >())) {
HXLINE( 302)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 302)				_hx_tmp2(hx::TCast<  ::openfl::events::TextEvent >::cast(event->error)->text,hx::SourceInfo(HX_("ApplicationMain.hx",d5,de,80,07),302,HX_("ApplicationMain",89,ff,39,4a),HX_("uncaughtErrorHandler",17,93,a0,1d)));
            			}
            			else {
HXLINE( 306)				 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 306)				 ::Dynamic _hx_tmp4 = event->error->toString();
HXDLIN( 306)				_hx_tmp3(_hx_tmp4,hx::SourceInfo(HX_("ApplicationMain.hx",d5,de,80,07),306,HX_("ApplicationMain",89,ff,39,4a),HX_("uncaughtErrorHandler",17,93,a0,1d)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ApplicationMain_obj,uncaughtErrorHandler,(void))


ApplicationMain_obj::ApplicationMain_obj()
{
}

bool ApplicationMain_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { outValue = ( app ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"universal") ) { outValue = ( universal ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"reloadGame") ) { outValue = reloadGame_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"reloadListeners") ) { outValue = ( reloadListeners ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"uncaughtErrorHandler") ) { outValue = uncaughtErrorHandler_dyn(); return true; }
	}
	return false;
}

bool ApplicationMain_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"app") ) { app=ioValue.Cast<  ::openfl::display::Application >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"universal") ) { universal=ioValue.Cast<  ::Universal >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"reloadListeners") ) { reloadListeners=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ApplicationMain_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ApplicationMain_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Application*/ ,(void *) &ApplicationMain_obj::app,HX_HCSTRING("app","\xa1","\xfc","\x49","\x00")},
	{hx::fsObject /*::Universal*/ ,(void *) &ApplicationMain_obj::universal,HX_HCSTRING("universal","\x8b","\xd1","\x96","\xab")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &ApplicationMain_obj::reloadListeners,HX_HCSTRING("reloadListeners","\xe6","\x3e","\x63","\x9c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ApplicationMain_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ApplicationMain_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ApplicationMain_obj::app,"app");
	HX_MARK_MEMBER_NAME(ApplicationMain_obj::universal,"universal");
	HX_MARK_MEMBER_NAME(ApplicationMain_obj::reloadListeners,"reloadListeners");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ApplicationMain_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ApplicationMain_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ApplicationMain_obj::app,"app");
	HX_VISIT_MEMBER_NAME(ApplicationMain_obj::universal,"universal");
	HX_VISIT_MEMBER_NAME(ApplicationMain_obj::reloadListeners,"reloadListeners");
};

#endif

hx::Class ApplicationMain_obj::__mClass;

static ::String ApplicationMain_obj_sStaticFields[] = {
	HX_HCSTRING("app","\xa1","\xfc","\x49","\x00"),
	HX_HCSTRING("universal","\x8b","\xd1","\x96","\xab"),
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	HX_HCSTRING("reloadListeners","\xe6","\x3e","\x63","\x9c"),
	HX_HCSTRING("reloadGame","\xeb","\x93","\x66","\x8f"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("uncaughtErrorHandler","\x17","\x93","\xa0","\x1d"),
	::String(null())
};

void ApplicationMain_obj::__register()
{
	hx::Object *dummy = new ApplicationMain_obj;
	ApplicationMain_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ApplicationMain","\x89","\xff","\x39","\x4a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ApplicationMain_obj::__GetStatic;
	__mClass->mSetStaticField = &ApplicationMain_obj::__SetStatic;
	__mClass->mMarkFunc = ApplicationMain_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ApplicationMain_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ApplicationMain_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ApplicationMain_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ApplicationMain_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ApplicationMain_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ApplicationMain_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6fcf922b66429816_69_boot)
HXDLIN(  69)		reloadListeners = ::Array_obj< ::Dynamic>::__new();
            	}
}

