// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_RoxGestureAgent
#include <RoxGestureAgent.h>
#endif
#ifndef INCLUDED_RoxGestureEvent
#include <RoxGestureEvent.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED__RoxGestureAgent_TouchPoint
#include <_RoxGestureAgent/TouchPoint.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat2
#include <com/stencyl/utils/motion/TweenFloat2.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenManager
#include <com/stencyl/utils/motion/TweenManager.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenTimer
#include <com/stencyl/utils/motion/TweenTimer.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_ui_Multitouch
#include <openfl/ui/Multitouch.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_31_new,"RoxGestureAgent","new",0x3a787289,"RoxGestureAgent.new","RoxGestureAgent.hx",31,0x509ef107)
HX_DEFINE_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_99_new,"RoxGestureAgent","new",0x3a787289,"RoxGestureAgent.new","RoxGestureAgent.hx",99,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_114_detach,"RoxGestureAgent","detach",0x5425baca,"RoxGestureAgent.detach","RoxGestureAgent.hx",114,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_123_getHandler,"RoxGestureAgent","getHandler",0xbcdf1acb,"RoxGestureAgent.getHandler","RoxGestureAgent.hx",123,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_128_startTweenXY,"RoxGestureAgent","startTweenXY",0x9590dca1,"RoxGestureAgent.startTweenXY","RoxGestureAgent.hx",128,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_126_startTweenXY,"RoxGestureAgent","startTweenXY",0x9590dca1,"RoxGestureAgent.startTweenXY","RoxGestureAgent.hx",126,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_135_stopTween,"RoxGestureAgent","stopTween",0xd4ed09f2,"RoxGestureAgent.stopTween","RoxGestureAgent.hx",135,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_149_handleEvent,"RoxGestureAgent","handleEvent",0xb34ee67b,"RoxGestureAgent.handleEvent","RoxGestureAgent.hx",149,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_160_handleEvent,"RoxGestureAgent","handleEvent",0xb34ee67b,"RoxGestureAgent.handleEvent","RoxGestureAgent.hx",160,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_197_convertTouch,"RoxGestureAgent","convertTouch",0x941e6983,"RoxGestureAgent.convertTouch","RoxGestureAgent.hx",197,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_201_convertMouse,"RoxGestureAgent","convertMouse",0x8c5067e9,"RoxGestureAgent.convertMouse","RoxGestureAgent.hx",201,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_209_onTouch,"RoxGestureAgent","onTouch",0x4bfc20c9,"RoxGestureAgent.onTouch","RoxGestureAgent.hx",209,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_228_touchToMouse,"RoxGestureAgent","touchToMouse",0x506fc962,"RoxGestureAgent.touchToMouse","RoxGestureAgent.hx",228,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_254_onMouse,"RoxGestureAgent","onMouse",0x442e1f2f,"RoxGestureAgent.onMouse","RoxGestureAgent.hx",254,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_263_handleTouch,"RoxGestureAgent","handleTouch",0x51bd3620,"RoxGestureAgent.handleTouch","RoxGestureAgent.hx",263,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_274_handleTouch,"RoxGestureAgent","handleTouch",0x51bd3620,"RoxGestureAgent.handleTouch","RoxGestureAgent.hx",274,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_352_sendLongPress,"RoxGestureAgent","sendLongPress",0xca857568,"RoxGestureAgent.sendLongPress","RoxGestureAgent.hx",352,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_357_setReady,"RoxGestureAgent","setReady",0xad60f298,"RoxGestureAgent.setReady","RoxGestureAgent.hx",357,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_368_setMove,"RoxGestureAgent","setMove",0xaf708e7c,"RoxGestureAgent.setMove","RoxGestureAgent.hx",368,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_375_setTwoFingerMove,"RoxGestureAgent","setTwoFingerMove",0x890caf3b,"RoxGestureAgent.setTwoFingerMove","RoxGestureAgent.hx",375,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_382_cancelLongPress,"RoxGestureAgent","cancelLongPress",0x6e82eb36,"RoxGestureAgent.cancelLongPress","RoxGestureAgent.hx",382,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_105_init,"RoxGestureAgent","init",0xeba47cc7,"RoxGestureAgent.init","RoxGestureAgent.hx",105,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_141_localOffset,"RoxGestureAgent","localOffset",0xa8baaa87,"RoxGestureAgent.localOffset","RoxGestureAgent.hx",141,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_193_get_multitouchSupported,"RoxGestureAgent","get_multitouchSupported",0x6e8a5de8,"RoxGestureAgent.get_multitouchSupported","RoxGestureAgent.hx",193,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_408_initTypeMap,"RoxGestureAgent","initTypeMap",0x3c71a1fb,"RoxGestureAgent.initTypeMap","RoxGestureAgent.hx",408,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_33_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",33,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_34_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",34,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_35_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",35,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_36_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",36,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_37_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",37,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_38_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",38,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_46_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",46,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_47_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",47,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_48_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",48,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_49_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",49,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_50_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",50,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_53_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",53,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_54_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",54,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_55_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",55,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_56_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",56,0x509ef107)
static const ::String _hx_array_data_9ac07a17_50[] = {
	HX_("touchBegin",ea,cd,e6,a9),HX_("touchEnd",5c,c5,09,00),HX_("touchMove",70,72,cd,0d),HX_("touchOver",b3,20,25,0f),HX_("touchOut",0f,62,11,00),HX_("touchRollOver",50,d6,19,fe),HX_("touchRollOut",12,0f,74,87),HX_("touchTap",e4,1b,15,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_59_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",59,0x509ef107)
static const ::String _hx_array_data_9ac07a17_52[] = {
	HX_("mouseDown",27,b1,c2,ee),HX_("mouseUp",e0,f3,72,c0),HX_("mouseMove",d6,9b,b5,f4),HX_("mouseOver",19,4a,0d,f6),HX_("mouseOut",69,e7,1d,a4),HX_("rollOver",71,ab,a8,12),HX_("rollOut",11,f9,11,5d),HX_("click",48,7c,5e,48),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_62_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",62,0x509ef107)
static const ::String _hx_array_data_9ac07a17_54[] = {
	HX_("touchBegin",ea,cd,e6,a9),HX_("touchEnd",5c,c5,09,00),HX_("touchMove",70,72,cd,0d),HX_("touchOut",0f,62,11,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_64_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",64,0x509ef107)
static const ::String _hx_array_data_9ac07a17_56[] = {
	HX_("mouseDown",27,b1,c2,ee),HX_("mouseUp",e0,f3,72,c0),HX_("mouseMove",d6,9b,b5,f4),HX_("mouseOut",69,e7,1d,a4),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_67_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",67,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_68_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",68,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_388_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",388,0x509ef107)
static const ::String _hx_array_data_9ac07a17_60[] = {
	HX_("mouseDown",27,b1,c2,ee),HX_("rox_touch_begin",05,ef,57,b6),HX_("mouseUp",e0,f3,72,c0),HX_("rox_touch_end",b7,d9,48,6f),HX_("mouseMove",d6,9b,b5,f4),HX_("rox_touch_move",b5,2d,c0,f5),HX_("mouseOver",19,4a,0d,f6),HX_("rox_touch_over",f8,db,17,f7),HX_("mouseOut",69,e7,1d,a4),HX_("rox_touch_out",6a,76,50,6f),HX_("rollOver",71,ab,a8,12),HX_("rox_touch_roll_over",72,9f,3e,e8),HX_("rollOut",11,f9,11,5d),HX_("rox_touch_roll_in",83,06,50,6b),HX_("click",48,7c,5e,48),HX_("rox_touch_tap",3f,30,54,6f),HX_("touchBegin",ea,cd,e6,a9),HX_("rox_touch_begin",05,ef,57,b6),HX_("touchEnd",5c,c5,09,00),HX_("rox_touch_end",b7,d9,48,6f),HX_("touchMove",70,72,cd,0d),HX_("rox_touch_move",b5,2d,c0,f5),HX_("touchOver",b3,20,25,0f),HX_("rox_touch_over",f8,db,17,f7),HX_("touchOut",0f,62,11,00),HX_("rox_touch_out",6a,76,50,6f),HX_("touchRollOver",50,d6,19,fe),HX_("rox_touch_roll_over",72,9f,3e,e8),HX_("touchRollOut",12,0f,74,87),HX_("rox_touch_roll_in",83,06,50,6b),HX_("touchTap",e4,1b,15,00),HX_("rox_touch_tap",3f,30,54,6f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e3eb54d9d3b7ad65_406_boot,"RoxGestureAgent","boot",0xe704c5e9,"RoxGestureAgent.boot","RoxGestureAgent.hx",406,0x509ef107)

void RoxGestureAgent_obj::__construct( ::openfl::display::InteractiveObject inOwner, ::Dynamic __o_inMode){
 ::Dynamic inMode = __o_inMode.Default(2);
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_31_new)
HXLINE(  44)		this->swipeTimeout = ((Float)0.1);
HXLINE(  43)		this->longPressDelay = ((Float)1.0);
HXLINE(  87)		 ::RoxGestureAgent _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  88)		if (!(::RoxGestureAgent_obj::initialized)) {
HXLINE(  88)			::RoxGestureAgent_obj::initialized = true;
HXDLIN(  88)			 ::openfl::display::Stage stage = ::openfl::Lib_obj::get_current()->stage;
HXDLIN(  88)			::RoxGestureAgent_obj::moveToleSqr = ( ::openfl::geom::Point_obj::__alloc( HX_CTX ,stage->stageWidth,stage->stageHeight)->get_length() * ((Float)0.008));
HXDLIN(  88)			 ::Dynamic _hx_tmp = hx::ClassOf< ::RoxGestureAgent >();
HXDLIN(  88)			::RoxGestureAgent_obj::moveToleSqr = (::RoxGestureAgent_obj::moveToleSqr * ::RoxGestureAgent_obj::moveToleSqr);
HXDLIN(  88)			if (::openfl::ui::Multitouch_obj::get_supportsTouchEvents()) {
HXLINE(  88)				::openfl::ui::Multitouch_obj::inputMode = (int)2;
            			}
            		}
HXLINE(  89)		this->owner = inOwner;
HXLINE(  90)		this->mode = inMode;
HXLINE(  91)		bool isTouch = false;
HXLINE(  95)		this->owner->mouseEnabled = true;
HXLINE(  96)		::Array< ::String > _hx_tmp1;
HXDLIN(  96)		if ((this->mode == (int)1)) {
HXLINE(  96)			if (isTouch) {
HXLINE(  96)				_hx_tmp1 = ::RoxGestureAgent_obj::touchEvents;
            			}
            			else {
HXLINE(  96)				_hx_tmp1 = ::RoxGestureAgent_obj::mouseEvents;
            			}
            		}
            		else {
HXLINE(  96)			if (isTouch) {
HXLINE(  96)				_hx_tmp1 = ::RoxGestureAgent_obj::geTouchEvents;
            			}
            			else {
HXLINE(  96)				_hx_tmp1 = ::RoxGestureAgent_obj::geMouseEvents;
            			}
            		}
HXDLIN(  96)		this->listenEvents = _hx_tmp1;
HXLINE(  97)		 ::Dynamic _hx_tmp2;
HXDLIN(  97)		if ((this->mode == (int)1)) {
HXLINE(  97)			if (isTouch) {
HXLINE(  97)				_hx_tmp2 = this->convertTouch_dyn();
            			}
            			else {
HXLINE(  97)				_hx_tmp2 = this->convertMouse_dyn();
            			}
            		}
            		else {
HXLINE(  97)			if (isTouch) {
HXLINE(  97)				_hx_tmp2 = this->onTouch_dyn();
            			}
            			else {
HXLINE(  97)				_hx_tmp2 = this->onMouse_dyn();
            			}
            		}
HXDLIN(  97)		this->handler = _hx_tmp2;
HXLINE(  98)		{
HXLINE(  98)			int _g = (int)0;
HXDLIN(  98)			::Array< ::String > _g1 = this->listenEvents;
HXDLIN(  98)			while((_g < _g1->length)){
HXLINE(  98)				::String type = _g1->__get(_g);
HXDLIN(  98)				_g = (_g + (int)1);
HXDLIN(  98)				this->owner->addEventListener(type,this->handler,null(),null(),null());
            			}
            		}
HXLINE(  99)		if ((this->mode == (int)3)) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::RoxGestureAgent,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic e){
            				HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_99_new)
HXLINE(  99)				_gthis->overlay = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  99)			::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("resize",f4,59,7b,08), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null());
            		}
HXLINE( 100)		this->touchList =  ::List_obj::__alloc( HX_CTX );
HXLINE( 101)		this->setReady();
            	}

Dynamic RoxGestureAgent_obj::__CreateEmpty() { return new RoxGestureAgent_obj; }

void *RoxGestureAgent_obj::_hx_vtable = 0;

Dynamic RoxGestureAgent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RoxGestureAgent_obj > _hx_result = new RoxGestureAgent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool RoxGestureAgent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x69908a33;
}

void RoxGestureAgent_obj::detach(){
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_114_detach)
HXLINE( 115)		if (hx::IsNotNull( this->tweener )) {
HXLINE( 115)			::com::stencyl::utils::motion::TweenManager_obj::cancel(this->tweener);
HXDLIN( 115)			this->tweener = null();
            		}
HXLINE( 116)		this->setReady();
HXLINE( 117)		{
HXLINE( 117)			int _g = (int)0;
HXDLIN( 117)			::Array< ::String > _g1 = this->listenEvents;
HXDLIN( 117)			while((_g < _g1->length)){
HXLINE( 117)				::String type = _g1->__get(_g);
HXDLIN( 117)				_g = (_g + (int)1);
HXDLIN( 117)				this->owner->removeEventListener(type,this->handler,null());
            			}
            		}
HXLINE( 118)		this->owner = null();
HXLINE( 119)		this->overlay = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(RoxGestureAgent_obj,detach,(void))

 ::Dynamic RoxGestureAgent_obj::getHandler( ::Dynamic __o_flags){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f,int,a1) HXARGC(1)
            		void _hx_run( ::RoxGestureEvent e){
            			HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_123_getHandler)
HXDLIN( 123)			f(a1,e);
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic flags = __o_flags.Default(3);
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_123_getHandler)
HXDLIN( 123)		 ::Dynamic f = this->handleEvent_dyn();
HXDLIN( 123)		int a1 = flags;
HXDLIN( 123)		return  ::Dynamic(new _hx_Closure_0(f,a1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoxGestureAgent_obj,getHandler,return )

void RoxGestureAgent_obj::startTweenXY( ::openfl::display::InteractiveObject target,Float interval,Float x,Float y){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::RoxGestureAgent,_gthis, ::openfl::display::InteractiveObject,target) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_128_startTweenXY)
HXLINE( 129)			target->set_x(_gthis->tweener->value1);
HXLINE( 130)			target->set_y(_gthis->tweener->value2);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_126_startTweenXY)
HXDLIN( 126)		 ::RoxGestureAgent _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 127)		this->tweener =  ::com::stencyl::utils::motion::TweenFloat2_obj::__alloc( HX_CTX );
HXLINE( 128)		 ::com::stencyl::utils::motion::TweenFloat2 _hx_tmp = this->tweener;
HXDLIN( 128)		Float _hx_tmp1 = target->get_x();
HXDLIN( 128)		Float _hx_tmp2 = target->get_y();
HXDLIN( 128)		 ::com::stencyl::utils::motion::Linear _hx_tmp3 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN( 128)		_hx_tmp->tween(_hx_tmp1,x,_hx_tmp2,y,_hx_tmp3,::Std_obj::_hx_int((interval * (int)1000)))->doOnUpdate( ::Dynamic(new _hx_Closure_0(_gthis,target)));
            	}


HX_DEFINE_DYNAMIC_FUNC4(RoxGestureAgent_obj,startTweenXY,(void))

void RoxGestureAgent_obj::stopTween(){
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_135_stopTween)
HXDLIN( 135)		if (hx::IsNotNull( this->tweener )) {
HXLINE( 136)			::com::stencyl::utils::motion::TweenManager_obj::cancel(this->tweener);
HXLINE( 137)			this->tweener = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RoxGestureAgent_obj,stopTween,(void))

void RoxGestureAgent_obj::handleEvent(int flags, ::RoxGestureEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_149_handleEvent)
HXLINE( 151)		 ::openfl::display::InteractiveObject sp = ( ( ::openfl::display::InteractiveObject)(e->target) );
HXLINE( 152)		if (hx::IsNotEq( sp,this->owner )) {
HXLINE( 152)			return;
            		}
HXLINE( 153)		{
HXLINE( 153)			::String _g = e->type;
HXDLIN( 153)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("rox_gesture_pan",03,b6,3c,3a)) ){
HXLINE( 155)				 ::openfl::geom::Point globalOffset = ( ( ::openfl::geom::Point)(e->extra) );
HXDLIN( 155)				 ::openfl::display::DisplayObjectContainer sp1 = sp->parent;
HXDLIN( 155)				Float pt = sp->get_x();
HXDLIN( 155)				 ::openfl::geom::Point pt1 = sp1->localToGlobal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,pt,sp->get_y()));
HXDLIN( 155)				pt1->offset(globalOffset->x,globalOffset->y);
HXDLIN( 155)				pt1 = sp->parent->globalToLocal(pt1);
HXDLIN( 155)				Float _hx_tmp = -(sp->get_x());
HXDLIN( 155)				pt1->offset(_hx_tmp,-(sp->get_y()));
HXDLIN( 155)				 ::openfl::geom::Point pt2 = pt1;
HXLINE( 156)				if ((((int)flags & (int)(int)1) != (int)0)) {
HXLINE( 156)					 ::openfl::display::InteractiveObject _g1 = sp;
HXDLIN( 156)					Float _hx_tmp1 = _g1->get_x();
HXDLIN( 156)					_g1->set_x((_hx_tmp1 + pt2->x));
            				}
HXLINE( 157)				if ((((int)flags & (int)(int)2) != (int)0)) {
HXLINE( 157)					 ::openfl::display::InteractiveObject _g2 = sp;
HXDLIN( 157)					Float _hx_tmp2 = _g2->get_y();
HXDLIN( 157)					_g2->set_y((_hx_tmp2 + pt2->y));
            				}
HXLINE( 154)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_0==HX_("rox_gesture_pinch",60,88,a2,d0)) ){
HXLINE( 162)				Float scale = ( (Float)(e->extra) );
HXLINE( 163)				 ::openfl::display::DisplayObjectContainer sp2 = sp->parent;
HXDLIN( 163)				Float spt = sp->get_x();
HXDLIN( 163)				 ::openfl::geom::Point spt1 = sp2->localToGlobal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,spt,sp->get_y()));
HXLINE( 164)				Float dx = (spt1->x - e->stageX);
HXDLIN( 164)				Float dy = (spt1->y - e->stageY);
HXLINE( 165)				Float angle = ::Math_obj::atan2(dy,dx);
HXLINE( 166)				Float nowlen =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,dx,dy)->get_length();
HXLINE( 167)				Float newlen = (nowlen * scale);
HXLINE( 168)				 ::openfl::geom::Point newpos = ::openfl::geom::Point_obj::polar(newlen,angle);
HXLINE( 169)				newpos->offset(e->stageX,e->stageY);
HXLINE( 170)				newpos = sp->parent->globalToLocal(newpos);
HXLINE( 171)				{
HXLINE( 171)					 ::openfl::display::InteractiveObject _g3 = sp;
HXDLIN( 171)					_g3->set_scaleX((_g3->get_scaleX() * scale));
            				}
HXLINE( 172)				{
HXLINE( 172)					 ::openfl::display::InteractiveObject _g4 = sp;
HXDLIN( 172)					_g4->set_scaleY((_g4->get_scaleY() * scale));
            				}
HXLINE( 173)				sp->set_x(newpos->x);
HXLINE( 174)				sp->set_y(newpos->y);
HXLINE( 161)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_0==HX_("rox_gesture_rotation",d8,3e,92,98)) ){
HXLINE( 176)				Float angle1 = ( (Float)(e->extra) );
HXLINE( 177)				 ::openfl::display::DisplayObjectContainer sp3 = sp->parent;
HXDLIN( 177)				Float spt2 = sp->get_x();
HXDLIN( 177)				 ::openfl::geom::Point spt3 = sp3->localToGlobal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,spt2,sp->get_y()));
HXLINE( 178)				Float dx1 = (spt3->x - e->stageX);
HXDLIN( 178)				Float dy1 = (spt3->y - e->stageY);
HXLINE( 179)				Float nowang = ::Math_obj::atan2(dy1,dx1);
HXLINE( 180)				Float length =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,dx1,dy1)->get_length();
HXLINE( 181)				Float newang = (nowang + angle1);
HXLINE( 182)				 ::openfl::geom::Point newpos1 = ::openfl::geom::Point_obj::polar(length,newang);
HXLINE( 183)				newpos1->offset(e->stageX,e->stageY);
HXLINE( 184)				newpos1 = sp->parent->globalToLocal(newpos1);
HXLINE( 185)				{
HXLINE( 185)					 ::openfl::display::InteractiveObject _g5 = sp;
HXDLIN( 185)					Float _hx_tmp3 = _g5->get_rotation();
HXDLIN( 185)					_g5->set_rotation((_hx_tmp3 + (::RoxGestureAgent_obj::R2D * angle1)));
            				}
HXLINE( 186)				sp->set_x(newpos1->x);
HXLINE( 187)				sp->set_y(newpos1->y);
HXLINE( 175)				goto _hx_goto_10;
            			}
            			if (  (_hx_switch_0==HX_("rox_gesture_swipe",a0,82,13,94)) ){
HXLINE( 159)				Float globalOffset1 = ( ::Dynamic(e->extra->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) * ((Float)2.0));
HXDLIN( 159)				 ::openfl::geom::Point globalOffset2 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,globalOffset1,( ::Dynamic(e->extra->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) * ((Float)2.0)));
HXDLIN( 159)				 ::openfl::display::DisplayObjectContainer sp4 = sp->parent;
HXDLIN( 159)				Float pt3 = sp->get_x();
HXDLIN( 159)				 ::openfl::geom::Point pt4 = sp4->localToGlobal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,pt3,sp->get_y()));
HXDLIN( 159)				pt4->offset(globalOffset2->x,globalOffset2->y);
HXDLIN( 159)				pt4 = sp->parent->globalToLocal(pt4);
HXDLIN( 159)				Float _hx_tmp4 = -(sp->get_x());
HXDLIN( 159)				pt4->offset(_hx_tmp4,-(sp->get_y()));
HXDLIN( 159)				 ::openfl::geom::Point pt5 = pt4;
HXLINE( 160)				{
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::RoxGestureAgent,_gthis, ::openfl::display::InteractiveObject,target) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_160_handleEvent)
HXLINE( 160)						target->set_x(_gthis->tweener->value1);
HXDLIN( 160)						target->set_y(_gthis->tweener->value2);
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 160)					 ::openfl::display::InteractiveObject target = sp;
HXDLIN( 160)					Float x = sp->get_x();
HXDLIN( 160)					Float x1 = (x + pt5->x);
HXDLIN( 160)					Float y = sp->get_y();
HXDLIN( 160)					Float y1 = (y + pt5->y);
HXDLIN( 160)					 ::RoxGestureAgent _gthis = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 160)					this->tweener =  ::com::stencyl::utils::motion::TweenFloat2_obj::__alloc( HX_CTX );
HXDLIN( 160)					 ::com::stencyl::utils::motion::TweenFloat2 _hx_tmp5 = this->tweener;
HXDLIN( 160)					Float _hx_tmp6 = target->get_x();
HXDLIN( 160)					Float _hx_tmp7 = target->get_y();
HXDLIN( 160)					_hx_tmp5->tween(_hx_tmp6,x1,_hx_tmp7,y1,::com::stencyl::utils::motion::Easing_obj::linear,(int)2000)->doOnUpdate( ::Dynamic(new _hx_Closure_0(_gthis,target)));
            				}
HXLINE( 158)				goto _hx_goto_10;
            			}
            			_hx_goto_10:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(RoxGestureAgent_obj,handleEvent,(void))

void RoxGestureAgent_obj::convertTouch( ::openfl::events::TouchEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_197_convertTouch)
HXDLIN( 197)		 ::openfl::display::InteractiveObject _hx_tmp = this->owner;
HXDLIN( 197)		::String _hx_tmp1 = ( (::String)(::RoxGestureAgent_obj::typeMap->get(e->type)) );
HXDLIN( 197)		_hx_tmp->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,_hx_tmp1,e->bubbles,e->cancelable,e->localX,e->localY,e->stageX,e->stageY,e->touchPointID,hx::ObjectPtr<OBJ_>(this),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoxGestureAgent_obj,convertTouch,(void))

void RoxGestureAgent_obj::convertMouse( ::openfl::events::MouseEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_201_convertMouse)
HXLINE( 202)		::String t = e->type;
HXLINE( 203)		bool _hx_tmp;
HXDLIN( 203)		bool _hx_tmp1;
HXDLIN( 203)		bool _hx_tmp2;
HXDLIN( 203)		if ((t != HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 203)			_hx_tmp2 = (t == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE( 203)			_hx_tmp2 = true;
            		}
HXDLIN( 203)		if (!(_hx_tmp2)) {
HXLINE( 203)			_hx_tmp1 = (t == HX_("click",48,7c,5e,48));
            		}
            		else {
HXLINE( 203)			_hx_tmp1 = true;
            		}
HXDLIN( 203)		if (!(_hx_tmp1)) {
HXLINE( 203)			_hx_tmp = e->buttonDown;
            		}
            		else {
HXLINE( 203)			_hx_tmp = true;
            		}
HXDLIN( 203)		if (_hx_tmp) {
HXLINE( 204)			 ::openfl::display::InteractiveObject _hx_tmp3 = this->owner;
HXDLIN( 204)			::String _hx_tmp4 = ( (::String)(::RoxGestureAgent_obj::typeMap->get(t)) );
HXDLIN( 204)			_hx_tmp3->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,_hx_tmp4,e->bubbles,e->cancelable,e->localX,e->localY,e->stageX,e->stageY,(int)0,hx::ObjectPtr<OBJ_>(this),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoxGestureAgent_obj,convertMouse,(void))

void RoxGestureAgent_obj::onTouch( ::openfl::events::TouchEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_209_onTouch)
HXLINE( 210)		int id = e->touchPointID;
HXLINE( 212)		bool prim;
HXDLIN( 212)		if (hx::IsNotNull( this->touch0 )) {
HXLINE( 212)			prim = (this->touch0->tid == id);
            		}
            		else {
HXLINE( 212)			prim = true;
            		}
HXLINE( 213)		bool _hx_tmp;
HXDLIN( 213)		bool _hx_tmp1;
HXDLIN( 213)		if (!(prim)) {
HXLINE( 213)			if (hx::IsNotNull( this->touch1 )) {
HXLINE( 213)				_hx_tmp1 = (this->touch1->tid == id);
            			}
            			else {
HXLINE( 213)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 213)			_hx_tmp1 = true;
            		}
HXDLIN( 213)		if (!(_hx_tmp1)) {
HXLINE( 213)			bool _hx_tmp2;
HXDLIN( 213)			if (hx::IsNotNull( this->touch0 )) {
HXLINE( 213)				_hx_tmp2 = hx::IsNull( this->touch1 );
            			}
            			else {
HXLINE( 213)				_hx_tmp2 = false;
            			}
HXDLIN( 213)			if (_hx_tmp2) {
HXLINE( 213)				_hx_tmp = (this->touch0->tid != id);
            			}
            			else {
HXLINE( 213)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 213)			_hx_tmp = true;
            		}
HXDLIN( 213)		if (_hx_tmp) {
HXLINE( 216)			::String _hx_tmp3 = ( (::String)(::RoxGestureAgent_obj::typeMap->get(e->type)) );
HXDLIN( 216)			::String eType;
HXDLIN( 216)			::String _g = e->type;
HXDLIN( 216)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("touchBegin",ea,cd,e6,a9)) ){
HXLINE( 216)				eType = HX_("mouseDown",27,b1,c2,ee);
HXDLIN( 216)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==HX_("touchEnd",5c,c5,09,00)) ){
HXLINE( 216)				eType = HX_("mouseUp",e0,f3,72,c0);
HXDLIN( 216)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==HX_("touchMove",70,72,cd,0d)) ){
HXLINE( 216)				eType = HX_("mouseMove",d6,9b,b5,f4);
HXDLIN( 216)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==HX_("touchOut",0f,62,11,00)) ){
HXLINE( 216)				eType = HX_("mouseOut",69,e7,1d,a4);
HXDLIN( 216)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==HX_("touchOver",b3,20,25,0f)) ){
HXLINE( 216)				eType = HX_("mouseOver",19,4a,0d,f6);
HXDLIN( 216)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==HX_("touchRollOut",12,0f,74,87)) ){
HXLINE( 216)				eType = HX_("rollOut",11,f9,11,5d);
HXDLIN( 216)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==HX_("touchRollOver",50,d6,19,fe)) ){
HXLINE( 216)				eType = HX_("rollOver",71,ab,a8,12);
HXDLIN( 216)				goto _hx_goto_15;
            			}
            			if (  (_hx_switch_0==HX_("touchTap",e4,1b,15,00)) ){
HXLINE( 216)				eType = HX_("click",48,7c,5e,48);
HXDLIN( 216)				goto _hx_goto_15;
            			}
            			/* default */{
HXLINE( 216)				eType = HX_("mouseMove",d6,9b,b5,f4);
            			}
            			_hx_goto_15:;
HXDLIN( 216)			 ::openfl::events::MouseEvent me =  ::openfl::events::MouseEvent_obj::__alloc( HX_CTX ,eType,e->bubbles,e->cancelable,e->localX,e->localY,e->relatedObject,e->ctrlKey,e->altKey,e->shiftKey,false,(int)0,e->commandKey,(int)0);
HXDLIN( 216)			me->stageX = e->stageX;
HXDLIN( 216)			me->stageY = e->stageY;
HXDLIN( 216)			this->handleTouch(_hx_tmp3,me,prim,id);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoxGestureAgent_obj,onTouch,(void))

 ::openfl::events::MouseEvent RoxGestureAgent_obj::touchToMouse( ::openfl::events::TouchEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_228_touchToMouse)
HXLINE( 229)		::String eType;
HXDLIN( 229)		::String _g = e->type;
HXDLIN( 229)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("touchBegin",ea,cd,e6,a9)) ){
HXLINE( 229)			eType = HX_("mouseDown",27,b1,c2,ee);
HXDLIN( 229)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==HX_("touchEnd",5c,c5,09,00)) ){
HXLINE( 229)			eType = HX_("mouseUp",e0,f3,72,c0);
HXDLIN( 229)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==HX_("touchMove",70,72,cd,0d)) ){
HXLINE( 229)			eType = HX_("mouseMove",d6,9b,b5,f4);
HXDLIN( 229)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==HX_("touchOut",0f,62,11,00)) ){
HXLINE( 229)			eType = HX_("mouseOut",69,e7,1d,a4);
HXDLIN( 229)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==HX_("touchOver",b3,20,25,0f)) ){
HXLINE( 229)			eType = HX_("mouseOver",19,4a,0d,f6);
HXDLIN( 229)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==HX_("touchRollOut",12,0f,74,87)) ){
HXLINE( 229)			eType = HX_("rollOut",11,f9,11,5d);
HXDLIN( 229)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==HX_("touchRollOver",50,d6,19,fe)) ){
HXLINE( 229)			eType = HX_("rollOver",71,ab,a8,12);
HXDLIN( 229)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==HX_("touchTap",e4,1b,15,00)) ){
HXLINE( 229)			eType = HX_("click",48,7c,5e,48);
HXDLIN( 229)			goto _hx_goto_17;
            		}
            		/* default */{
HXLINE( 229)			eType = HX_("mouseMove",d6,9b,b5,f4);
            		}
            		_hx_goto_17:;
HXLINE( 242)		 ::openfl::events::MouseEvent me =  ::openfl::events::MouseEvent_obj::__alloc( HX_CTX ,eType,e->bubbles,e->cancelable,e->localX,e->localY,e->relatedObject,e->ctrlKey,e->altKey,e->shiftKey,false,(int)0,e->commandKey,(int)0);
HXLINE( 247)		me->stageX = e->stageX;
HXLINE( 248)		me->stageY = e->stageY;
HXLINE( 250)		return me;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoxGestureAgent_obj,touchToMouse,return )

void RoxGestureAgent_obj::onMouse( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_254_onMouse)
HXLINE( 256)		::String t = e->type;
HXLINE( 257)		bool _hx_tmp;
HXDLIN( 257)		bool _hx_tmp1;
HXDLIN( 257)		if ((t != HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 257)			_hx_tmp1 = (t == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE( 257)			_hx_tmp1 = true;
            		}
HXDLIN( 257)		if (!(_hx_tmp1)) {
HXLINE( 257)			_hx_tmp = e->buttonDown;
            		}
            		else {
HXLINE( 257)			_hx_tmp = true;
            		}
HXDLIN( 257)		if (_hx_tmp) {
HXLINE( 259)			this->handleTouch(( (::String)(::RoxGestureAgent_obj::typeMap->get(t)) ),e,true,(int)0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoxGestureAgent_obj,onMouse,(void))

bool RoxGestureAgent_obj::handleTouch(::String type, ::openfl::events::MouseEvent e,bool prim,int touchId){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_263_handleTouch)
HXLINE( 265)		 ::_RoxGestureAgent::TouchPoint pt =  ::_RoxGestureAgent::TouchPoint_obj::__alloc( HX_CTX ,this->owner,e,touchId);
HXLINE( 266)		 ::_RoxGestureAgent::TouchPoint tp;
HXDLIN( 266)		if (prim) {
HXLINE( 266)			tp = this->touch0;
            		}
            		else {
HXLINE( 266)			tp = this->touch1;
            		}
HXLINE( 267)		bool _hx_tmp;
HXDLIN( 267)		bool _hx_tmp1;
HXDLIN( 267)		if ((type == HX_("rox_touch_move",b5,2d,c0,f5))) {
HXLINE( 267)			_hx_tmp1 = hx::IsNotNull( tp );
            		}
            		else {
HXLINE( 267)			_hx_tmp1 = false;
            		}
HXDLIN( 267)		if (_hx_tmp1) {
HXLINE( 267)			Float dx = (tp->sx - pt->sx);
HXDLIN( 267)			Float dy = (tp->sy - pt->sy);
HXDLIN( 267)			_hx_tmp = (((dx * dx) + (dy * dy)) < ::RoxGestureAgent_obj::moveToleSqr);
            		}
            		else {
HXLINE( 267)			_hx_tmp = false;
            		}
HXDLIN( 267)		if (_hx_tmp) {
HXLINE( 267)			return false;
            		}
HXLINE( 268)		bool handled = true;
HXLINE( 269)		{
HXLINE( 269)			int _g = this->state;
HXDLIN( 269)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 271)					bool _hx_tmp2;
HXDLIN( 271)					if (prim) {
HXLINE( 271)						_hx_tmp2 = (type == HX_("rox_touch_begin",05,ef,57,b6));
            					}
            					else {
HXLINE( 271)						_hx_tmp2 = false;
            					}
HXDLIN( 271)					if (_hx_tmp2) {
            						HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::_RoxGestureAgent::TouchPoint,pt1) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_274_handleTouch)
HXLINE( 274)							f(pt1);
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 272)						this->state = (int)1;
HXLINE( 273)						this->touch0 = pt;
HXLINE( 274)						 ::Dynamic f = this->sendLongPress_dyn();
HXDLIN( 274)						 ::_RoxGestureAgent::TouchPoint pt1 = pt;
HXDLIN( 274)						 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_0(f,pt1));
HXDLIN( 274)						this->longPressTimer = ( ( ::com::stencyl::utils::motion::TweenTimer)(::com::stencyl::utils::motion::TweenManager_obj::timer(::Std_obj::_hx_int((this->longPressDelay * (int)1000)))->doOnComplete(_hx_tmp3)) );
HXLINE( 275)						if (hx::IsNotNull( this->tweener )) {
HXLINE( 275)							::com::stencyl::utils::motion::TweenManager_obj::cancel(this->tweener);
HXDLIN( 275)							this->tweener = null();
            						}
HXLINE( 276)						if ((this->mode == (int)3)) {
HXLINE( 277)							 ::openfl::display::Stage stage = ::openfl::Lib_obj::get_current()->stage;
HXLINE( 278)							if (hx::IsNull( this->overlay )) {
HXLINE( 279)								this->overlay =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 280)								this->overlay->set_name(HX_("overlay",90,43,10,a9));
HXLINE( 281)								this->overlay->get_graphics()->beginFill((int)16777215,((Float)0.00392156862745098));
HXLINE( 282)								this->overlay->get_graphics()->drawRect((int)0,(int)0,stage->stageWidth,stage->stageHeight);
            							}
HXLINE( 284)							stage->addChild(this->overlay);
HXLINE( 285)							{
HXLINE( 285)								int _g1 = (int)0;
HXDLIN( 285)								::Array< ::String > _g11 = this->listenEvents;
HXDLIN( 285)								while((_g1 < _g11->length)){
HXLINE( 285)									::String type1 = _g11->__get(_g1);
HXDLIN( 285)									_g1 = (_g1 + (int)1);
HXDLIN( 285)									this->overlay->addEventListener(type1,this->handler,null(),null(),null());
            								}
            							}
            						}
            					}
            					else {
HXLINE( 288)						handled = false;
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 291)					bool _hx_tmp4;
HXDLIN( 291)					if (prim) {
HXLINE( 291)						_hx_tmp4 = (type == HX_("rox_touch_end",b7,d9,48,6f));
            					}
            					else {
HXLINE( 291)						_hx_tmp4 = false;
            					}
HXDLIN( 291)					if (_hx_tmp4) {
HXLINE( 292)						 ::openfl::display::InteractiveObject _hx_tmp5 = this->owner;
HXDLIN( 292)						_hx_tmp5->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,HX_("rox_gesture_tap",09,bf,3f,3a),null(),null(),pt->lx,pt->ly,pt->sx,pt->sy,null(),hx::ObjectPtr<OBJ_>(this),null()));
HXLINE( 293)						this->setReady();
            					}
            					else {
HXLINE( 294)						bool _hx_tmp6;
HXDLIN( 294)						if (prim) {
HXLINE( 294)							_hx_tmp6 = (type == HX_("rox_touch_move",b5,2d,c0,f5));
            						}
            						else {
HXLINE( 294)							_hx_tmp6 = false;
            						}
HXDLIN( 294)						if (_hx_tmp6) {
HXLINE( 295)							Float pan = (pt->sx - this->touch0->sx);
HXDLIN( 295)							 ::openfl::geom::Point pan1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,pan,(pt->sy - this->touch0->sy));
HXLINE( 296)							 ::openfl::display::InteractiveObject _hx_tmp7 = this->owner;
HXDLIN( 296)							_hx_tmp7->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,HX_("rox_gesture_pan",03,b6,3c,3a),null(),null(),pt->lx,pt->ly,pt->sx,pt->sy,null(),hx::ObjectPtr<OBJ_>(this),pan1));
HXLINE( 297)							{
HXLINE( 297)								this->state = (int)4;
HXDLIN( 297)								if (hx::IsNotNull( this->touch0 )) {
HXLINE( 297)									this->touchList->push(this->touch0);
            								}
HXDLIN( 297)								this->touch0 = pt;
HXDLIN( 297)								if (hx::IsNotNull( this->longPressTimer )) {
HXLINE( 297)									::com::stencyl::utils::motion::TweenManager_obj::cancel(this->longPressTimer);
HXDLIN( 297)									this->longPressTimer = null();
            								}
            							}
            						}
            						else {
HXLINE( 298)							bool _hx_tmp8;
HXDLIN( 298)							if (!(prim)) {
HXLINE( 298)								_hx_tmp8 = (type == HX_("rox_touch_begin",05,ef,57,b6));
            							}
            							else {
HXLINE( 298)								_hx_tmp8 = false;
            							}
HXDLIN( 298)							if (_hx_tmp8) {
HXLINE( 299)								this->state = (int)2;
HXDLIN( 299)								this->touch1 = pt;
HXDLIN( 299)								if (hx::IsNotNull( this->longPressTimer )) {
HXLINE( 299)									::com::stencyl::utils::motion::TweenManager_obj::cancel(this->longPressTimer);
HXDLIN( 299)									this->longPressTimer = null();
            								}
            							}
            							else {
HXLINE( 301)								handled = false;
            							}
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 331)					if ((type == HX_("rox_touch_end",b7,d9,48,6f))) {
HXLINE( 332)						 ::openfl::display::InteractiveObject _hx_tmp9 = this->owner;
HXDLIN( 332)						_hx_tmp9->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,HX_("rox_gesture_end",81,68,34,3a),null(),null(),pt->lx,pt->ly,pt->sx,pt->sy,null(),hx::ObjectPtr<OBJ_>(this),null()));
HXLINE( 333)						this->setReady();
            					}
            					else {
HXLINE( 334)						if ((type == HX_("rox_touch_move",b5,2d,c0,f5))) {
HXLINE( 335)							 ::_RoxGestureAgent::TouchPoint pt11;
HXDLIN( 335)							if (prim) {
HXLINE( 335)								pt11 = this->touch1;
            							}
            							else {
HXLINE( 335)								pt11 = this->touch0;
            							}
HXDLIN( 335)							 ::_RoxGestureAgent::TouchPoint pt2;
HXDLIN( 335)							if (prim) {
HXLINE( 335)								pt2 = this->touch0;
            							}
            							else {
HXLINE( 335)								pt2 = this->touch1;
            							}
HXLINE( 336)							Float scale = ::openfl::geom::Point_obj::distance(pt->spt,pt11->spt);
HXDLIN( 336)							Float scale1 = ((Float)scale / (Float)::openfl::geom::Point_obj::distance(pt2->spt,pt11->spt));
HXLINE( 337)							Float angle = (pt->sy - pt11->sy);
HXDLIN( 337)							Float angle1 = ::Math_obj::atan2(angle,(pt->sx - pt11->sx));
HXDLIN( 337)							Float angle2 = (pt2->sy - pt11->sy);
HXDLIN( 337)							Float angle3 = (angle1 - ::Math_obj::atan2(angle2,(pt2->sx - pt11->sx)));
HXLINE( 338)							 ::openfl::geom::Point mid = ::openfl::geom::Point_obj::interpolate(pt11->lpt,pt2->lpt,((Float)0.5));
HXLINE( 339)							 ::openfl::geom::Point gmid = this->owner->localToGlobal(mid);
HXLINE( 340)							if ((scale1 != (int)1)) {
HXLINE( 341)								 ::openfl::display::InteractiveObject _hx_tmp10 = this->owner;
HXDLIN( 341)								_hx_tmp10->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,HX_("rox_gesture_pinch",60,88,a2,d0),null(),null(),mid->x,mid->y,gmid->x,gmid->y,null(),hx::ObjectPtr<OBJ_>(this),scale1));
            							}
HXLINE( 342)							if ((angle3 != (int)0)) {
HXLINE( 343)								 ::openfl::display::InteractiveObject _hx_tmp11 = this->owner;
HXDLIN( 343)								_hx_tmp11->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,HX_("rox_gesture_rotation",d8,3e,92,98),null(),null(),mid->x,mid->y,gmid->x,gmid->y,null(),hx::ObjectPtr<OBJ_>(this),angle3));
            							}
HXLINE( 344)							if (prim) {
HXLINE( 344)								this->touch0 = pt;
            							}
            							else {
HXLINE( 344)								this->touch1 = pt;
            							}
            						}
            						else {
HXLINE( 346)							handled = false;
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 304)					bool _hx_tmp12;
HXDLIN( 304)					if (prim) {
HXLINE( 304)						_hx_tmp12 = (type == HX_("rox_touch_move",b5,2d,c0,f5));
            					}
            					else {
HXLINE( 304)						_hx_tmp12 = false;
            					}
HXDLIN( 304)					if (_hx_tmp12) {
HXLINE( 305)						Float pan2 = (pt->sx - this->touch0->sx);
HXDLIN( 305)						 ::openfl::geom::Point pan3 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,pan2,(pt->sy - this->touch0->sy));
HXLINE( 306)						 ::openfl::display::InteractiveObject _hx_tmp13 = this->owner;
HXDLIN( 306)						_hx_tmp13->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,HX_("rox_gesture_pan",03,b6,3c,3a),null(),null(),pt->lx,pt->ly,pt->sx,pt->sy,null(),hx::ObjectPtr<OBJ_>(this),pan3));
HXLINE( 307)						{
HXLINE( 307)							this->state = (int)4;
HXDLIN( 307)							if (hx::IsNotNull( this->touch0 )) {
HXLINE( 307)								this->touchList->push(this->touch0);
            							}
HXDLIN( 307)							this->touch0 = pt;
HXDLIN( 307)							if (hx::IsNotNull( this->longPressTimer )) {
HXLINE( 307)								::com::stencyl::utils::motion::TweenManager_obj::cancel(this->longPressTimer);
HXDLIN( 307)								this->longPressTimer = null();
            							}
            						}
            					}
            					else {
HXLINE( 308)						bool _hx_tmp14;
HXDLIN( 308)						if (prim) {
HXLINE( 308)							if ((type != HX_("rox_touch_end",b7,d9,48,6f))) {
HXLINE( 309)								bool _hx_tmp15;
HXDLIN( 309)								if ((this->mode != (int)3)) {
HXLINE( 309)									_hx_tmp15 = (type == HX_("rox_touch_out",6a,76,50,6f));
            								}
            								else {
HXLINE( 309)									_hx_tmp15 = false;
            								}
HXDLIN( 309)								if (_hx_tmp15) {
HXLINE( 308)									_hx_tmp14 = hx::IsEq( ( ( ::openfl::display::InteractiveObject)(e->target) ),this->owner );
            								}
            								else {
HXLINE( 308)									_hx_tmp14 = false;
            								}
            							}
            							else {
HXLINE( 308)								_hx_tmp14 = true;
            							}
            						}
            						else {
HXLINE( 308)							_hx_tmp14 = false;
            						}
HXDLIN( 308)						if (_hx_tmp14) {
HXLINE( 310)							bool _hx_tmp16;
HXDLIN( 310)							if (!((this->swipeTimeout <= (int)0))) {
HXLINE( 310)								_hx_tmp16 = ((pt->time - this->touch0->time) < this->swipeTimeout);
            							}
            							else {
HXLINE( 310)								_hx_tmp16 = true;
            							}
HXDLIN( 310)							if (_hx_tmp16) {
HXLINE( 311)								 ::_RoxGestureAgent::TouchPoint beginpt = this->touchList->pop().StaticCast<  ::_RoxGestureAgent::TouchPoint >();
HXDLIN( 311)								 ::_RoxGestureAgent::TouchPoint endpt = null();
HXLINE( 312)								{
HXLINE( 312)									 ::_List::ListNode _g_head = this->touchList->h;
HXDLIN( 312)									while(hx::IsNotNull( _g_head )){
HXLINE( 312)										 ::_RoxGestureAgent::TouchPoint val = ( ( ::_RoxGestureAgent::TouchPoint)(_g_head->item) );
HXDLIN( 312)										_g_head = _g_head->next;
HXDLIN( 312)										 ::_RoxGestureAgent::TouchPoint i = val;
HXLINE( 313)										if (((beginpt->time - i->time) > ((Float)0.2))) {
HXLINE( 313)											goto _hx_goto_21;
            										}
HXLINE( 314)										endpt = i;
            									}
            									_hx_goto_21:;
            								}
HXLINE( 316)								if (hx::IsNotNull( endpt )) {
HXLINE( 317)									Float dx1;
HXDLIN( 317)									Float dy1 = (beginpt->sy - endpt->sy);
HXLINE( 318)									Float angle4 = dy1;
HXDLIN( 318)									dx1 = (beginpt->sx - endpt->sx);
HXDLIN( 318)									Float angle5 = ::Math_obj::atan2(angle4,dx1);
HXLINE( 319)									Float velocity =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,dx1,dy1)->get_length();
HXDLIN( 319)									 ::openfl::geom::Point velocity1 = ::openfl::geom::Point_obj::polar((((Float)velocity / (Float)(beginpt->time - endpt->time)) * ((Float)0.25)),angle5);
HXLINE( 320)									 ::openfl::display::InteractiveObject _hx_tmp17 = this->owner;
HXDLIN( 320)									_hx_tmp17->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,HX_("rox_gesture_swipe",a0,82,13,94),null(),null(),pt->lx,pt->ly,pt->sx,pt->sy,null(),hx::ObjectPtr<OBJ_>(this),velocity1));
            								}
            							}
HXLINE( 323)							this->setReady();
            						}
            						else {
HXLINE( 324)							bool _hx_tmp18;
HXDLIN( 324)							if (!(prim)) {
HXLINE( 324)								_hx_tmp18 = (type == HX_("rox_touch_begin",05,ef,57,b6));
            							}
            							else {
HXLINE( 324)								_hx_tmp18 = false;
            							}
HXDLIN( 324)							if (_hx_tmp18) {
HXLINE( 325)								 ::openfl::display::InteractiveObject _hx_tmp19 = this->owner;
HXDLIN( 325)								_hx_tmp19->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,HX_("rox_gesture_begin",4f,44,5c,be),null(),null(),pt->lx,pt->ly,pt->sx,pt->sy,null(),hx::ObjectPtr<OBJ_>(this),null()));
HXLINE( 326)								{
HXLINE( 326)									this->state = (int)2;
HXDLIN( 326)									this->touch1 = pt;
HXDLIN( 326)									if (hx::IsNotNull( this->longPressTimer )) {
HXLINE( 326)										::com::stencyl::utils::motion::TweenManager_obj::cancel(this->longPressTimer);
HXDLIN( 326)										this->longPressTimer = null();
            									}
            								}
            							}
            							else {
HXLINE( 328)								handled = false;
            							}
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE( 349)		return handled;
            	}


HX_DEFINE_DYNAMIC_FUNC4(RoxGestureAgent_obj,handleTouch,return )

void RoxGestureAgent_obj::sendLongPress( ::_RoxGestureAgent::TouchPoint pt){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_352_sendLongPress)
HXLINE( 353)		 ::openfl::display::InteractiveObject _hx_tmp = this->owner;
HXDLIN( 353)		_hx_tmp->dispatchEvent( ::RoxGestureEvent_obj::__alloc( HX_CTX ,HX_("rox_gesture_long_press",5a,a1,99,55),null(),null(),pt->lx,pt->ly,pt->sx,pt->sy,null(),hx::ObjectPtr<OBJ_>(this),null()));
HXLINE( 354)		this->setReady();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoxGestureAgent_obj,sendLongPress,(void))

void RoxGestureAgent_obj::setReady(){
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_357_setReady)
HXLINE( 358)		this->state = (int)0;
HXLINE( 359)		this->touch0 = (this->touch1 = null());
HXLINE( 360)		this->touchList->clear();
HXLINE( 361)		if (hx::IsNotNull( this->longPressTimer )) {
HXLINE( 361)			::com::stencyl::utils::motion::TweenManager_obj::cancel(this->longPressTimer);
HXDLIN( 361)			this->longPressTimer = null();
            		}
HXLINE( 362)		bool _hx_tmp;
HXDLIN( 362)		if (hx::IsNotNull( this->overlay )) {
HXLINE( 362)			_hx_tmp = (this->mode == (int)3);
            		}
            		else {
HXLINE( 362)			_hx_tmp = false;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 363)			{
HXLINE( 363)				int _g = (int)0;
HXDLIN( 363)				::Array< ::String > _g1 = this->listenEvents;
HXDLIN( 363)				while((_g < _g1->length)){
HXLINE( 363)					::String type = _g1->__get(_g);
HXDLIN( 363)					_g = (_g + (int)1);
HXDLIN( 363)					this->overlay->removeEventListener(type,this->handler,null());
            				}
            			}
HXLINE( 364)			::openfl::Lib_obj::get_current()->stage->removeChild(this->overlay);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RoxGestureAgent_obj,setReady,(void))

void RoxGestureAgent_obj::setMove( ::_RoxGestureAgent::TouchPoint pt){
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_368_setMove)
HXLINE( 369)		this->state = (int)4;
HXLINE( 370)		if (hx::IsNotNull( this->touch0 )) {
HXLINE( 370)			this->touchList->push(this->touch0);
            		}
HXLINE( 371)		this->touch0 = pt;
HXLINE( 372)		if (hx::IsNotNull( this->longPressTimer )) {
HXLINE( 372)			::com::stencyl::utils::motion::TweenManager_obj::cancel(this->longPressTimer);
HXDLIN( 372)			this->longPressTimer = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoxGestureAgent_obj,setMove,(void))

void RoxGestureAgent_obj::setTwoFingerMove( ::_RoxGestureAgent::TouchPoint pt){
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_375_setTwoFingerMove)
HXLINE( 376)		this->state = (int)2;
HXLINE( 377)		this->touch1 = pt;
HXLINE( 378)		if (hx::IsNotNull( this->longPressTimer )) {
HXLINE( 378)			::com::stencyl::utils::motion::TweenManager_obj::cancel(this->longPressTimer);
HXDLIN( 378)			this->longPressTimer = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RoxGestureAgent_obj,setTwoFingerMove,(void))

void RoxGestureAgent_obj::cancelLongPress(){
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_382_cancelLongPress)
HXDLIN( 382)		if (hx::IsNotNull( this->longPressTimer )) {
HXLINE( 383)			::com::stencyl::utils::motion::TweenManager_obj::cancel(this->longPressTimer);
HXLINE( 384)			this->longPressTimer = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RoxGestureAgent_obj,cancelLongPress,(void))

int RoxGestureAgent_obj::TOUCH_POINT;

int RoxGestureAgent_obj::GESTURE;

int RoxGestureAgent_obj::GESTURE_CAPTURE;

int RoxGestureAgent_obj::PAN_X;

int RoxGestureAgent_obj::PAN_Y;

int RoxGestureAgent_obj::PAN_XY;

bool RoxGestureAgent_obj::multitouchSupported;

int RoxGestureAgent_obj::READY;

int RoxGestureAgent_obj::BEGIN;

int RoxGestureAgent_obj::TWO_FINGER_MOVE;

int RoxGestureAgent_obj::MOVE;

Float RoxGestureAgent_obj::R2D;

Float RoxGestureAgent_obj::SWIPE_SCROLL_TIME;

Float RoxGestureAgent_obj::SWIPE_SAMPLE_TIME;

Float RoxGestureAgent_obj::VELOCITY_RATIO;

::Array< ::String > RoxGestureAgent_obj::touchEvents;

::Array< ::String > RoxGestureAgent_obj::mouseEvents;

::Array< ::String > RoxGestureAgent_obj::geTouchEvents;

::Array< ::String > RoxGestureAgent_obj::geMouseEvents;

bool RoxGestureAgent_obj::initialized;

Float RoxGestureAgent_obj::moveToleSqr;

void RoxGestureAgent_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_105_init)
HXDLIN( 105)		if (!(::RoxGestureAgent_obj::initialized)) {
HXLINE( 106)			::RoxGestureAgent_obj::initialized = true;
HXLINE( 107)			 ::openfl::display::Stage stage = ::openfl::Lib_obj::get_current()->stage;
HXLINE( 108)			::RoxGestureAgent_obj::moveToleSqr = ( ::openfl::geom::Point_obj::__alloc( HX_CTX ,stage->stageWidth,stage->stageHeight)->get_length() * ((Float)0.008));
HXLINE( 109)			 ::Dynamic _hx_tmp = hx::ClassOf< ::RoxGestureAgent >();
HXDLIN( 109)			::RoxGestureAgent_obj::moveToleSqr = (::RoxGestureAgent_obj::moveToleSqr * ::RoxGestureAgent_obj::moveToleSqr);
HXLINE( 110)			if (::openfl::ui::Multitouch_obj::get_supportsTouchEvents()) {
HXLINE( 110)				::openfl::ui::Multitouch_obj::inputMode = (int)2;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(RoxGestureAgent_obj,init,(void))

 ::openfl::geom::Point RoxGestureAgent_obj::localOffset( ::openfl::display::InteractiveObject obj, ::openfl::geom::Point globalOffset){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_141_localOffset)
HXLINE( 142)		 ::openfl::display::DisplayObjectContainer obj1 = obj->parent;
HXDLIN( 142)		Float pt = obj->get_x();
HXDLIN( 142)		 ::openfl::geom::Point pt1 = obj1->localToGlobal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,pt,obj->get_y()));
HXLINE( 143)		pt1->offset(globalOffset->x,globalOffset->y);
HXLINE( 144)		pt1 = obj->parent->globalToLocal(pt1);
HXLINE( 145)		Float _hx_tmp = -(obj->get_x());
HXDLIN( 145)		pt1->offset(_hx_tmp,-(obj->get_y()));
HXLINE( 146)		return pt1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RoxGestureAgent_obj,localOffset,return )

bool RoxGestureAgent_obj::get_multitouchSupported(){
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_193_get_multitouchSupported)
HXDLIN( 193)		if (::openfl::ui::Multitouch_obj::get_supportsTouchEvents()) {
HXDLIN( 193)			return (::openfl::ui::Multitouch_obj::maxTouchPoints > (int)1);
            		}
            		else {
HXDLIN( 193)			return false;
            		}
HXDLIN( 193)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(RoxGestureAgent_obj,get_multitouchSupported,return )

::Array< ::String > RoxGestureAgent_obj::MAP;

 ::haxe::ds::StringMap RoxGestureAgent_obj::typeMap;

 ::haxe::ds::StringMap RoxGestureAgent_obj::initTypeMap(){
            	HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_408_initTypeMap)
HXLINE( 409)		 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 410)		{
HXLINE( 410)			int _g1 = (int)0;
HXDLIN( 410)			int _g = ((int)::RoxGestureAgent_obj::MAP->length >> (int)(int)1);
HXDLIN( 410)			while((_g1 < _g)){
HXLINE( 410)				_g1 = (_g1 + (int)1);
HXDLIN( 410)				int i = (_g1 - (int)1);
HXLINE( 411)				{
HXLINE( 411)					::Array< ::String > key = ::RoxGestureAgent_obj::MAP;
HXDLIN( 411)					::Array< ::String > value = ::RoxGestureAgent_obj::MAP;
HXDLIN( 411)					map->set(key->__get(((int)i << (int)(int)1)),value->__get((((int)i << (int)(int)1) + (int)1)));
            				}
            			}
            		}
HXLINE( 413)		return map;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(RoxGestureAgent_obj,initTypeMap,return )


hx::ObjectPtr< RoxGestureAgent_obj > RoxGestureAgent_obj::__new( ::openfl::display::InteractiveObject inOwner, ::Dynamic __o_inMode) {
	hx::ObjectPtr< RoxGestureAgent_obj > __this = new RoxGestureAgent_obj();
	__this->__construct(inOwner,__o_inMode);
	return __this;
}

hx::ObjectPtr< RoxGestureAgent_obj > RoxGestureAgent_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::InteractiveObject inOwner, ::Dynamic __o_inMode) {
	RoxGestureAgent_obj *__this = (RoxGestureAgent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RoxGestureAgent_obj), true, "RoxGestureAgent"));
	*(void **)__this = RoxGestureAgent_obj::_hx_vtable;
	__this->__construct(inOwner,__o_inMode);
	return __this;
}

RoxGestureAgent_obj::RoxGestureAgent_obj()
{
}

void RoxGestureAgent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RoxGestureAgent);
	HX_MARK_MEMBER_NAME(mode,"mode");
	HX_MARK_MEMBER_NAME(longPressDelay,"longPressDelay");
	HX_MARK_MEMBER_NAME(swipeTimeout,"swipeTimeout");
	HX_MARK_MEMBER_NAME(owner,"owner");
	HX_MARK_MEMBER_NAME(touch0,"touch0");
	HX_MARK_MEMBER_NAME(touch1,"touch1");
	HX_MARK_MEMBER_NAME(touchList,"touchList");
	HX_MARK_MEMBER_NAME(listenEvents,"listenEvents");
	HX_MARK_MEMBER_NAME(handler,"handler");
	HX_MARK_MEMBER_NAME(longPressTimer,"longPressTimer");
	HX_MARK_MEMBER_NAME(tweener,"tweener");
	HX_MARK_MEMBER_NAME(overlay,"overlay");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_END_CLASS();
}

void RoxGestureAgent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mode,"mode");
	HX_VISIT_MEMBER_NAME(longPressDelay,"longPressDelay");
	HX_VISIT_MEMBER_NAME(swipeTimeout,"swipeTimeout");
	HX_VISIT_MEMBER_NAME(owner,"owner");
	HX_VISIT_MEMBER_NAME(touch0,"touch0");
	HX_VISIT_MEMBER_NAME(touch1,"touch1");
	HX_VISIT_MEMBER_NAME(touchList,"touchList");
	HX_VISIT_MEMBER_NAME(listenEvents,"listenEvents");
	HX_VISIT_MEMBER_NAME(handler,"handler");
	HX_VISIT_MEMBER_NAME(longPressTimer,"longPressTimer");
	HX_VISIT_MEMBER_NAME(tweener,"tweener");
	HX_VISIT_MEMBER_NAME(overlay,"overlay");
	HX_VISIT_MEMBER_NAME(state,"state");
}

hx::Val RoxGestureAgent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { return hx::Val( mode ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { return hx::Val( owner ); }
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"touch0") ) { return hx::Val( touch0 ); }
		if (HX_FIELD_EQ(inName,"touch1") ) { return hx::Val( touch1 ); }
		if (HX_FIELD_EQ(inName,"detach") ) { return hx::Val( detach_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"handler") ) { return hx::Val( handler ); }
		if (HX_FIELD_EQ(inName,"tweener") ) { return hx::Val( tweener ); }
		if (HX_FIELD_EQ(inName,"overlay") ) { return hx::Val( overlay ); }
		if (HX_FIELD_EQ(inName,"onTouch") ) { return hx::Val( onTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouse") ) { return hx::Val( onMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMove") ) { return hx::Val( setMove_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setReady") ) { return hx::Val( setReady_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"touchList") ) { return hx::Val( touchList ); }
		if (HX_FIELD_EQ(inName,"stopTween") ) { return hx::Val( stopTween_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getHandler") ) { return hx::Val( getHandler_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"handleEvent") ) { return hx::Val( handleEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleTouch") ) { return hx::Val( handleTouch_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swipeTimeout") ) { return hx::Val( swipeTimeout ); }
		if (HX_FIELD_EQ(inName,"listenEvents") ) { return hx::Val( listenEvents ); }
		if (HX_FIELD_EQ(inName,"startTweenXY") ) { return hx::Val( startTweenXY_dyn() ); }
		if (HX_FIELD_EQ(inName,"convertTouch") ) { return hx::Val( convertTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"convertMouse") ) { return hx::Val( convertMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchToMouse") ) { return hx::Val( touchToMouse_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sendLongPress") ) { return hx::Val( sendLongPress_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"longPressDelay") ) { return hx::Val( longPressDelay ); }
		if (HX_FIELD_EQ(inName,"longPressTimer") ) { return hx::Val( longPressTimer ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cancelLongPress") ) { return hx::Val( cancelLongPress_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setTwoFingerMove") ) { return hx::Val( setTwoFingerMove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RoxGestureAgent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"R2D") ) { outValue = ( R2D ); return true; }
		if (HX_FIELD_EQ(inName,"MAP") ) { outValue = ( MAP ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"typeMap") ) { outValue = ( typeMap ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"touchEvents") ) { outValue = ( touchEvents ); return true; }
		if (HX_FIELD_EQ(inName,"mouseEvents") ) { outValue = ( mouseEvents ); return true; }
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
		if (HX_FIELD_EQ(inName,"moveToleSqr") ) { outValue = ( moveToleSqr ); return true; }
		if (HX_FIELD_EQ(inName,"localOffset") ) { outValue = localOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initTypeMap") ) { outValue = initTypeMap_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"geTouchEvents") ) { outValue = ( geTouchEvents ); return true; }
		if (HX_FIELD_EQ(inName,"geMouseEvents") ) { outValue = ( geMouseEvents ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"multitouchSupported") ) { outValue = ( inCallProp == hx::paccAlways ? get_multitouchSupported() : multitouchSupported ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_multitouchSupported") ) { outValue = get_multitouchSupported_dyn(); return true; }
	}
	return false;
}

hx::Val RoxGestureAgent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { mode=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"owner") ) { owner=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"touch0") ) { touch0=inValue.Cast<  ::_RoxGestureAgent::TouchPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touch1") ) { touch1=inValue.Cast<  ::_RoxGestureAgent::TouchPoint >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"handler") ) { handler=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tweener") ) { tweener=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"overlay") ) { overlay=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"touchList") ) { touchList=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swipeTimeout") ) { swipeTimeout=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listenEvents") ) { listenEvents=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"longPressDelay") ) { longPressDelay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"longPressTimer") ) { longPressTimer=inValue.Cast<  ::com::stencyl::utils::motion::TweenTimer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool RoxGestureAgent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"R2D") ) { R2D=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"MAP") ) { MAP=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"typeMap") ) { typeMap=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"touchEvents") ) { touchEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseEvents") ) { mouseEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"moveToleSqr") ) { moveToleSqr=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"geTouchEvents") ) { geTouchEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"geMouseEvents") ) { geMouseEvents=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"multitouchSupported") ) { multitouchSupported=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void RoxGestureAgent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"));
	outFields->push(HX_HCSTRING("longPressDelay","\x9c","\x35","\x84","\x24"));
	outFields->push(HX_HCSTRING("swipeTimeout","\x47","\x7d","\xba","\xcf"));
	outFields->push(HX_HCSTRING("owner","\x33","\x98","\x76","\x38"));
	outFields->push(HX_HCSTRING("touch0","\x91","\xaf","\x81","\x98"));
	outFields->push(HX_HCSTRING("touch1","\x92","\xaf","\x81","\x98"));
	outFields->push(HX_HCSTRING("touchList","\xbd","\xab","\x1f","\x0d"));
	outFields->push(HX_HCSTRING("listenEvents","\xc0","\x7a","\xf2","\xc8"));
	outFields->push(HX_HCSTRING("longPressTimer","\xde","\x1d","\x93","\x5d"));
	outFields->push(HX_HCSTRING("tweener","\x98","\xb3","\xc0","\xd6"));
	outFields->push(HX_HCSTRING("overlay","\x90","\x43","\x10","\xa9"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RoxGestureAgent_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(RoxGestureAgent_obj,mode),HX_HCSTRING("mode","\x63","\xd3","\x60","\x48")},
	{hx::fsFloat,(int)offsetof(RoxGestureAgent_obj,longPressDelay),HX_HCSTRING("longPressDelay","\x9c","\x35","\x84","\x24")},
	{hx::fsFloat,(int)offsetof(RoxGestureAgent_obj,swipeTimeout),HX_HCSTRING("swipeTimeout","\x47","\x7d","\xba","\xcf")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(RoxGestureAgent_obj,owner),HX_HCSTRING("owner","\x33","\x98","\x76","\x38")},
	{hx::fsObject /*::_RoxGestureAgent::TouchPoint*/ ,(int)offsetof(RoxGestureAgent_obj,touch0),HX_HCSTRING("touch0","\x91","\xaf","\x81","\x98")},
	{hx::fsObject /*::_RoxGestureAgent::TouchPoint*/ ,(int)offsetof(RoxGestureAgent_obj,touch1),HX_HCSTRING("touch1","\x92","\xaf","\x81","\x98")},
	{hx::fsObject /*::List*/ ,(int)offsetof(RoxGestureAgent_obj,touchList),HX_HCSTRING("touchList","\xbd","\xab","\x1f","\x0d")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(RoxGestureAgent_obj,listenEvents),HX_HCSTRING("listenEvents","\xc0","\x7a","\xf2","\xc8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RoxGestureAgent_obj,handler),HX_HCSTRING("handler","\xca","\xaf","\xd5","\x45")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenTimer*/ ,(int)offsetof(RoxGestureAgent_obj,longPressTimer),HX_HCSTRING("longPressTimer","\xde","\x1d","\x93","\x5d")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat2*/ ,(int)offsetof(RoxGestureAgent_obj,tweener),HX_HCSTRING("tweener","\x98","\xb3","\xc0","\xd6")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(RoxGestureAgent_obj,overlay),HX_HCSTRING("overlay","\x90","\x43","\x10","\xa9")},
	{hx::fsInt,(int)offsetof(RoxGestureAgent_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo RoxGestureAgent_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &RoxGestureAgent_obj::TOUCH_POINT,HX_HCSTRING("TOUCH_POINT","\x50","\x84","\xc0","\x94")},
	{hx::fsInt,(void *) &RoxGestureAgent_obj::GESTURE,HX_HCSTRING("GESTURE","\x69","\xae","\x1c","\x21")},
	{hx::fsInt,(void *) &RoxGestureAgent_obj::GESTURE_CAPTURE,HX_HCSTRING("GESTURE_CAPTURE","\x50","\xbd","\x5c","\x98")},
	{hx::fsInt,(void *) &RoxGestureAgent_obj::PAN_X,HX_HCSTRING("PAN_X","\x96","\xc9","\x40","\x3b")},
	{hx::fsInt,(void *) &RoxGestureAgent_obj::PAN_Y,HX_HCSTRING("PAN_Y","\x97","\xc9","\x40","\x3b")},
	{hx::fsInt,(void *) &RoxGestureAgent_obj::PAN_XY,HX_HCSTRING("PAN_XY","\x03","\x9a","\x6f","\x9d")},
	{hx::fsBool,(void *) &RoxGestureAgent_obj::multitouchSupported,HX_HCSTRING("multitouchSupported","\xa8","\xaa","\xbf","\x56")},
	{hx::fsInt,(void *) &RoxGestureAgent_obj::READY,HX_HCSTRING("READY","\x43","\xd8","\xa8","\x64")},
	{hx::fsInt,(void *) &RoxGestureAgent_obj::BEGIN,HX_HCSTRING("BEGIN","\x09","\x22","\x44","\x2e")},
	{hx::fsInt,(void *) &RoxGestureAgent_obj::TWO_FINGER_MOVE,HX_HCSTRING("TWO_FINGER_MOVE","\x14","\xb0","\x40","\x11")},
	{hx::fsInt,(void *) &RoxGestureAgent_obj::MOVE,HX_HCSTRING("MOVE","\x11","\xab","\x21","\x33")},
	{hx::fsFloat,(void *) &RoxGestureAgent_obj::R2D,HX_HCSTRING("R2D","\xa4","\x64","\x3e","\x00")},
	{hx::fsFloat,(void *) &RoxGestureAgent_obj::SWIPE_SCROLL_TIME,HX_HCSTRING("SWIPE_SCROLL_TIME","\x1a","\x8a","\x0d","\xa5")},
	{hx::fsFloat,(void *) &RoxGestureAgent_obj::SWIPE_SAMPLE_TIME,HX_HCSTRING("SWIPE_SAMPLE_TIME","\xdd","\x78","\x74","\x72")},
	{hx::fsFloat,(void *) &RoxGestureAgent_obj::VELOCITY_RATIO,HX_HCSTRING("VELOCITY_RATIO","\x09","\x3a","\x65","\x8e")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &RoxGestureAgent_obj::touchEvents,HX_HCSTRING("touchEvents","\x38","\xb4","\xa0","\xfb")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &RoxGestureAgent_obj::mouseEvents,HX_HCSTRING("mouseEvents","\x1e","\x83","\xf2","\x8b")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &RoxGestureAgent_obj::geTouchEvents,HX_HCSTRING("geTouchEvents","\xba","\x0a","\xcc","\xe0")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &RoxGestureAgent_obj::geMouseEvents,HX_HCSTRING("geMouseEvents","\xa0","\xd9","\x1d","\x71")},
	{hx::fsBool,(void *) &RoxGestureAgent_obj::initialized,HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{hx::fsFloat,(void *) &RoxGestureAgent_obj::moveToleSqr,HX_HCSTRING("moveToleSqr","\xaf","\xa6","\x1b","\x84")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &RoxGestureAgent_obj::MAP,HX_HCSTRING("MAP","\x7c","\xa6","\x3a","\x00")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &RoxGestureAgent_obj::typeMap,HX_HCSTRING("typeMap","\x02","\xc0","\xc6","\xf8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String RoxGestureAgent_obj_sMemberFields[] = {
	HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"),
	HX_HCSTRING("longPressDelay","\x9c","\x35","\x84","\x24"),
	HX_HCSTRING("swipeTimeout","\x47","\x7d","\xba","\xcf"),
	HX_HCSTRING("owner","\x33","\x98","\x76","\x38"),
	HX_HCSTRING("touch0","\x91","\xaf","\x81","\x98"),
	HX_HCSTRING("touch1","\x92","\xaf","\x81","\x98"),
	HX_HCSTRING("touchList","\xbd","\xab","\x1f","\x0d"),
	HX_HCSTRING("listenEvents","\xc0","\x7a","\xf2","\xc8"),
	HX_HCSTRING("handler","\xca","\xaf","\xd5","\x45"),
	HX_HCSTRING("longPressTimer","\xde","\x1d","\x93","\x5d"),
	HX_HCSTRING("tweener","\x98","\xb3","\xc0","\xd6"),
	HX_HCSTRING("overlay","\x90","\x43","\x10","\xa9"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("detach","\x53","\x5d","\x1f","\x70"),
	HX_HCSTRING("getHandler","\xd4","\x35","\x37","\x95"),
	HX_HCSTRING("startTweenXY","\xea","\x8b","\x6c","\x48"),
	HX_HCSTRING("stopTween","\x09","\xe3","\xb2","\x29"),
	HX_HCSTRING("handleEvent","\x52","\x73","\x0e","\x28"),
	HX_HCSTRING("convertTouch","\xcc","\x18","\xfa","\x46"),
	HX_HCSTRING("convertMouse","\x32","\x17","\x2c","\x3f"),
	HX_HCSTRING("onTouch","\x20","\xb6","\x70","\xaa"),
	HX_HCSTRING("touchToMouse","\xab","\x78","\x4b","\x03"),
	HX_HCSTRING("onMouse","\x86","\xb4","\xa2","\xa2"),
	HX_HCSTRING("handleTouch","\xf7","\xc2","\x7c","\xc6"),
	HX_HCSTRING("sendLongPress","\xff","\x25","\xe3","\x97"),
	HX_HCSTRING("setReady","\x61","\x09","\xef","\xf4"),
	HX_HCSTRING("setMove","\xd3","\x23","\xe5","\x0d"),
	HX_HCSTRING("setTwoFingerMove","\x04","\x37","\x2c","\x6d"),
	HX_HCSTRING("cancelLongPress","\x8d","\x2f","\x1f","\x93"),
	::String(null()) };

static void RoxGestureAgent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::TOUCH_POINT,"TOUCH_POINT");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::GESTURE,"GESTURE");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::GESTURE_CAPTURE,"GESTURE_CAPTURE");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::PAN_X,"PAN_X");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::PAN_Y,"PAN_Y");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::PAN_XY,"PAN_XY");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::multitouchSupported,"multitouchSupported");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::READY,"READY");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::BEGIN,"BEGIN");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::TWO_FINGER_MOVE,"TWO_FINGER_MOVE");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::MOVE,"MOVE");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::R2D,"R2D");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::SWIPE_SCROLL_TIME,"SWIPE_SCROLL_TIME");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::SWIPE_SAMPLE_TIME,"SWIPE_SAMPLE_TIME");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::VELOCITY_RATIO,"VELOCITY_RATIO");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::touchEvents,"touchEvents");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::mouseEvents,"mouseEvents");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::geTouchEvents,"geTouchEvents");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::geMouseEvents,"geMouseEvents");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::initialized,"initialized");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::moveToleSqr,"moveToleSqr");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::MAP,"MAP");
	HX_MARK_MEMBER_NAME(RoxGestureAgent_obj::typeMap,"typeMap");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RoxGestureAgent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::TOUCH_POINT,"TOUCH_POINT");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::GESTURE,"GESTURE");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::GESTURE_CAPTURE,"GESTURE_CAPTURE");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::PAN_X,"PAN_X");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::PAN_Y,"PAN_Y");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::PAN_XY,"PAN_XY");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::multitouchSupported,"multitouchSupported");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::READY,"READY");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::BEGIN,"BEGIN");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::TWO_FINGER_MOVE,"TWO_FINGER_MOVE");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::MOVE,"MOVE");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::R2D,"R2D");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::SWIPE_SCROLL_TIME,"SWIPE_SCROLL_TIME");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::SWIPE_SAMPLE_TIME,"SWIPE_SAMPLE_TIME");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::VELOCITY_RATIO,"VELOCITY_RATIO");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::touchEvents,"touchEvents");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::mouseEvents,"mouseEvents");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::geTouchEvents,"geTouchEvents");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::geMouseEvents,"geMouseEvents");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::initialized,"initialized");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::moveToleSqr,"moveToleSqr");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::MAP,"MAP");
	HX_VISIT_MEMBER_NAME(RoxGestureAgent_obj::typeMap,"typeMap");
};

#endif

hx::Class RoxGestureAgent_obj::__mClass;

static ::String RoxGestureAgent_obj_sStaticFields[] = {
	HX_HCSTRING("TOUCH_POINT","\x50","\x84","\xc0","\x94"),
	HX_HCSTRING("GESTURE","\x69","\xae","\x1c","\x21"),
	HX_HCSTRING("GESTURE_CAPTURE","\x50","\xbd","\x5c","\x98"),
	HX_HCSTRING("PAN_X","\x96","\xc9","\x40","\x3b"),
	HX_HCSTRING("PAN_Y","\x97","\xc9","\x40","\x3b"),
	HX_HCSTRING("PAN_XY","\x03","\x9a","\x6f","\x9d"),
	HX_HCSTRING("multitouchSupported","\xa8","\xaa","\xbf","\x56"),
	HX_HCSTRING("READY","\x43","\xd8","\xa8","\x64"),
	HX_HCSTRING("BEGIN","\x09","\x22","\x44","\x2e"),
	HX_HCSTRING("TWO_FINGER_MOVE","\x14","\xb0","\x40","\x11"),
	HX_HCSTRING("MOVE","\x11","\xab","\x21","\x33"),
	HX_HCSTRING("R2D","\xa4","\x64","\x3e","\x00"),
	HX_HCSTRING("SWIPE_SCROLL_TIME","\x1a","\x8a","\x0d","\xa5"),
	HX_HCSTRING("SWIPE_SAMPLE_TIME","\xdd","\x78","\x74","\x72"),
	HX_HCSTRING("VELOCITY_RATIO","\x09","\x3a","\x65","\x8e"),
	HX_HCSTRING("touchEvents","\x38","\xb4","\xa0","\xfb"),
	HX_HCSTRING("mouseEvents","\x1e","\x83","\xf2","\x8b"),
	HX_HCSTRING("geTouchEvents","\xba","\x0a","\xcc","\xe0"),
	HX_HCSTRING("geMouseEvents","\xa0","\xd9","\x1d","\x71"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("moveToleSqr","\xaf","\xa6","\x1b","\x84"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("localOffset","\x5e","\x37","\x7a","\x1d"),
	HX_HCSTRING("get_multitouchSupported","\x3f","\x51","\x15","\x5f"),
	HX_HCSTRING("MAP","\x7c","\xa6","\x3a","\x00"),
	HX_HCSTRING("typeMap","\x02","\xc0","\xc6","\xf8"),
	HX_HCSTRING("initTypeMap","\xd2","\x2e","\x31","\xb1"),
	::String(null())
};

void RoxGestureAgent_obj::__register()
{
	hx::Object *dummy = new RoxGestureAgent_obj;
	RoxGestureAgent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("RoxGestureAgent","\x17","\x7a","\xc0","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RoxGestureAgent_obj::__GetStatic;
	__mClass->mSetStaticField = &RoxGestureAgent_obj::__SetStatic;
	__mClass->mMarkFunc = RoxGestureAgent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RoxGestureAgent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RoxGestureAgent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RoxGestureAgent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RoxGestureAgent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RoxGestureAgent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RoxGestureAgent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RoxGestureAgent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_33_boot)
HXDLIN(  33)		TOUCH_POINT = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_34_boot)
HXDLIN(  34)		GESTURE = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_35_boot)
HXDLIN(  35)		GESTURE_CAPTURE = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_36_boot)
HXDLIN(  36)		PAN_X = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_37_boot)
HXDLIN(  37)		PAN_Y = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_38_boot)
HXDLIN(  38)		PAN_XY = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_46_boot)
HXDLIN(  46)		READY = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_47_boot)
HXDLIN(  47)		BEGIN = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_48_boot)
HXDLIN(  48)		TWO_FINGER_MOVE = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_49_boot)
HXDLIN(  49)		MOVE = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_50_boot)
HXDLIN(  50)		R2D = ((Float)(int)180 / (Float)::Math_obj::PI);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_53_boot)
HXDLIN(  53)		SWIPE_SCROLL_TIME = ((Float)2.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_54_boot)
HXDLIN(  54)		SWIPE_SAMPLE_TIME = ((Float)0.2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_55_boot)
HXDLIN(  55)		VELOCITY_RATIO = ((Float)0.25);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_56_boot)
HXDLIN(  56)		touchEvents = ::Array_obj< ::String >::fromData( _hx_array_data_9ac07a17_50,8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_59_boot)
HXDLIN(  59)		mouseEvents = ::Array_obj< ::String >::fromData( _hx_array_data_9ac07a17_52,8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_62_boot)
HXDLIN(  62)		geTouchEvents = ::Array_obj< ::String >::fromData( _hx_array_data_9ac07a17_54,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_64_boot)
HXDLIN(  64)		geMouseEvents = ::Array_obj< ::String >::fromData( _hx_array_data_9ac07a17_56,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_67_boot)
HXDLIN(  67)		initialized = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_68_boot)
HXDLIN(  68)		moveToleSqr = ((Float)1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_388_boot)
HXDLIN( 388)		MAP = ::Array_obj< ::String >::fromData( _hx_array_data_9ac07a17_60,32);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_406_boot)
HXDLIN( 406)			 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 406)			{
HXDLIN( 406)				int _g1 = (int)0;
HXDLIN( 406)				int _g = ((int)::RoxGestureAgent_obj::MAP->length >> (int)(int)1);
HXDLIN( 406)				while((_g1 < _g)){
HXDLIN( 406)					_g1 = (_g1 + (int)1);
HXDLIN( 406)					int i = (_g1 - (int)1);
HXDLIN( 406)					{
HXDLIN( 406)						::Array< ::String > key = ::RoxGestureAgent_obj::MAP;
HXDLIN( 406)						::Array< ::String > value = ::RoxGestureAgent_obj::MAP;
HXDLIN( 406)						map->set(key->__get(((int)i << (int)(int)1)),value->__get((((int)i << (int)(int)1) + (int)1)));
            					}
            				}
            			}
HXDLIN( 406)			return map;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_e3eb54d9d3b7ad65_406_boot)
HXDLIN( 406)		typeMap =  ::Dynamic(new _hx_Closure_0())();
            	}
}

