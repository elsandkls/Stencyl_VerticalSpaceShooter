// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_text_GlyphPosition
#include <openfl/_internal/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayout
#include <openfl/_internal/text/TextLayout.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_122_new,"openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",122,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_171_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",171,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_166_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",166,0xdff93b7f)
static const ::String _hx_array_data_a0887a60_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_269_getBounds,"openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",269,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_590_getLine,"openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",590,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_611_getLineBreakIndex,"openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",611,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_630_getLineMeasurements,"openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",630,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_810_getLayoutGroups,"openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",810,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1665_restrictText,"openfl._internal.text.TextEngine","restrictText",0x020728d7,"openfl._internal.text.TextEngine.restrictText","openfl/_internal/text/TextEngine.hx",1665,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1690_setTextAlignment,"openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",1690,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1815_trimText,"openfl._internal.text.TextEngine","trimText",0xf449c67d,"openfl._internal.text.TextEngine.trimText","openfl/_internal/text/TextEngine.hx",1815,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1834_update,"openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1834,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1872_set_restrict,"openfl._internal.text.TextEngine","set_restrict",0x897ab987,"openfl._internal.text.TextEngine.set_restrict","openfl/_internal/text/TextEngine.hx",1872,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1899_set_text,"openfl._internal.text.TextEngine","set_text",0x09f7f978,"openfl._internal.text.TextEngine.set_text","openfl/_internal/text/TextEngine.hx",1899,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_197_findFont,"openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",197,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_241_findFontVariant,"openfl._internal.text.TextEngine","findFontVariant",0xfb6dc0af,"openfl._internal.text.TextEngine.findFontVariant","openfl/_internal/text/TextEngine.hx",241,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_297_getFormatHeight,"openfl._internal.text.TextEngine","getFormatHeight",0xaafdc226,"openfl._internal.text.TextEngine.getFormatHeight","openfl/_internal/text/TextEngine.hx",297,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_333_getFont,"openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",333,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_396_getFontInstance,"openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",396,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_50_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",50,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_51_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",51,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_52_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",52,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_53_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",53,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_55_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",55,0xdff93b7f)
namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_122_new)
HXLINE( 124)		this->textField = textField;
HXLINE( 126)		this->width = (int)100;
HXLINE( 127)		this->height = (int)100;
HXLINE( 128)		this->set_text(HX_("",00,00,00,00));
HXLINE( 130)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 131)		this->textBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 133)		this->type = (int)0;
HXLINE( 134)		this->autoSize = (int)2;
HXLINE( 135)		this->embedFonts = false;
HXLINE( 136)		this->selectable = true;
HXLINE( 137)		this->borderColor = (int)0;
HXLINE( 138)		this->border = false;
HXLINE( 139)		this->backgroundColor = (int)16777215;
HXLINE( 140)		this->background = false;
HXLINE( 141)		this->gridFitType = (int)1;
HXLINE( 142)		this->maxChars = (int)0;
HXLINE( 143)		this->multiline = false;
HXLINE( 144)		this->sharpness = (int)0;
HXLINE( 145)		this->scrollH = (int)0;
HXLINE( 146)		this->scrollV = (int)1;
HXLINE( 147)		this->wordWrap = false;
HXLINE( 149)		int length = null();
HXDLIN( 149)		bool fixed = null();
HXDLIN( 149)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE( 150)		int length1 = null();
HXDLIN( 150)		bool fixed1 = null();
HXDLIN( 150)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
HXLINE( 151)		int length2 = null();
HXDLIN( 151)		bool fixed2 = null();
HXDLIN( 151)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,null(),true);
HXLINE( 152)		int length3 = null();
HXDLIN( 152)		bool fixed3 = null();
HXDLIN( 152)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,null(),true);
HXLINE( 153)		int length4 = null();
HXDLIN( 153)		bool fixed4 = null();
HXDLIN( 153)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,null(),true);
HXLINE( 154)		int length5 = null();
HXDLIN( 154)		bool fixed5 = null();
HXDLIN( 154)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,null(),true);
HXLINE( 155)		int length6 = null();
HXDLIN( 155)		bool fixed6 = null();
HXDLIN( 155)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,null(),true);
HXLINE( 156)		int length7 = null();
HXDLIN( 156)		bool fixed7 = null();
HXDLIN( 156)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,null(),true);
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x278047a0;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_171_createRestrictRegexp)
HXLINE( 173)			::Array< ::String > declined1 = declined;
HXDLIN( 173)			int accepted1 = (int)0;
HXDLIN( 173)			::String declined2 = declined1->__get(accepted1);
HXDLIN( 173)			declined1[accepted1] = (declined2 + ereg->matched((int)1));
HXLINE( 174)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_166_createRestrictRegexp)
HXLINE( 168)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^(.-.|.)",ee,f5,da,ba),HX_("gu",2e,5a,00,00));
HXLINE( 169)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_a0887a60_3,1);
HXLINE( 171)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined)));
HXLINE( 178)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 180)		if ((accepted.length > (int)0)) {
HXLINE( 182)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + restrict) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 186)		if ((declined->__get((int)0).length > (int)0)) {
HXLINE( 188)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get((int)0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 192)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_269_getBounds)
HXLINE( 271)		int padding;
HXDLIN( 271)		if (this->border) {
HXLINE( 271)			padding = (int)1;
            		}
            		else {
HXLINE( 271)			padding = (int)0;
            		}
HXLINE( 273)		this->bounds->width = (this->width + padding);
HXLINE( 274)		this->bounds->height = (this->height + padding);
HXLINE( 276)		Float x = this->width;
HXDLIN( 276)		Float y = this->width;
HXLINE( 278)		{
HXLINE( 278)			int _g = (int)0;
HXDLIN( 278)			 ::openfl::_Vector::ObjectVector _g1 = this->layoutGroups;
HXDLIN( 278)			while((_g < _g1->get_length())){
HXLINE( 278)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 278)				_g = (_g + (int)1);
HXLINE( 280)				if ((group->offsetX < x)) {
HXLINE( 280)					x = group->offsetX;
            				}
HXLINE( 281)				if ((group->offsetY < y)) {
HXLINE( 281)					y = group->offsetY;
            				}
            			}
            		}
HXLINE( 285)		if ((x >= this->width)) {
HXLINE( 285)			x = (int)2;
            		}
HXLINE( 286)		if ((y >= this->height)) {
HXLINE( 286)			y = (int)2;
            		}
HXLINE( 292)		 ::openfl::geom::Rectangle _hx_tmp = this->textBounds;
HXDLIN( 292)		Float _hx_tmp1 = ::Math_obj::max((x - (int)2),(int)0);
HXDLIN( 292)		Float _hx_tmp2 = ::Math_obj::max((y - (int)2),(int)0);
HXDLIN( 292)		Float _hx_tmp3 = (this->textWidth + (int)4);
HXDLIN( 292)		Float _hx_tmp4 = ::Math_obj::min(_hx_tmp3,(this->bounds->width + (int)4));
HXDLIN( 292)		Float _hx_tmp5 = (this->textHeight + (int)4);
HXDLIN( 292)		_hx_tmp->setTo(_hx_tmp1,_hx_tmp2,_hx_tmp4,::Math_obj::min(_hx_tmp5,(this->bounds->height + (int)4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_590_getLine)
HXLINE( 592)		bool _hx_tmp;
HXDLIN( 592)		if ((index >= (int)0)) {
HXLINE( 592)			_hx_tmp = (index > (this->lineBreaks->get_length() + (int)1));
            		}
            		else {
HXLINE( 592)			_hx_tmp = true;
            		}
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 594)			return null();
            		}
HXLINE( 598)		if ((this->lineBreaks->get_length() == (int)0)) {
HXLINE( 600)			return this->text;
            		}
            		else {
HXLINE( 604)			::String _hx_tmp1 = this->text;
HXDLIN( 604)			int _hx_tmp2;
HXDLIN( 604)			if ((index > (int)0)) {
HXLINE( 604)				_hx_tmp2 = this->lineBreaks->get((index - (int)1));
            			}
            			else {
HXLINE( 604)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 604)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_hx_tmp1,_hx_tmp2,this->lineBreaks->get(index));
            		}
HXLINE( 598)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_611_getLineBreakIndex)
HXLINE( 613)		int br = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("<br>",b2,8d,f3,27),startIndex);
HXLINE( 614)		int cr = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\n",0a,00,00,00),startIndex);
HXLINE( 615)		int lf = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\r",0d,00,00,00),startIndex);
HXLINE( 617)		bool _hx_tmp;
HXDLIN( 617)		if ((cr == (int)-1)) {
HXLINE( 617)			_hx_tmp = (br == (int)-1);
            		}
            		else {
HXLINE( 617)			_hx_tmp = false;
            		}
HXDLIN( 617)		if (_hx_tmp) {
HXLINE( 617)			return lf;
            		}
HXLINE( 618)		bool _hx_tmp1;
HXDLIN( 618)		if ((lf == (int)-1)) {
HXLINE( 618)			_hx_tmp1 = (br == (int)-1);
            		}
            		else {
HXLINE( 618)			_hx_tmp1 = false;
            		}
HXDLIN( 618)		if (_hx_tmp1) {
HXLINE( 618)			return cr;
            		}
HXLINE( 619)		bool _hx_tmp2;
HXDLIN( 619)		if ((lf == (int)-1)) {
HXLINE( 619)			_hx_tmp2 = (cr == (int)-1);
            		}
            		else {
HXLINE( 619)			_hx_tmp2 = false;
            		}
HXDLIN( 619)		if (_hx_tmp2) {
HXLINE( 619)			return br;
            		}
HXLINE( 621)		if ((cr == (int)-1)) {
HXLINE( 621)			return ::Std_obj::_hx_int(::Math_obj::min(br,lf));
            		}
HXLINE( 622)		if ((lf == (int)-1)) {
HXLINE( 622)			return ::Std_obj::_hx_int(::Math_obj::min(br,cr));
            		}
HXLINE( 623)		if ((br == (int)-1)) {
HXLINE( 623)			return ::Std_obj::_hx_int(::Math_obj::min(cr,lf));
            		}
HXLINE( 625)		return ::Std_obj::_hx_int(::Math_obj::min(::Math_obj::min(cr,lf),br));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_630_getLineMeasurements)
HXLINE( 632)		this->lineAscents->set_length((int)0);
HXLINE( 633)		this->lineDescents->set_length((int)0);
HXLINE( 634)		this->lineLeadings->set_length((int)0);
HXLINE( 635)		this->lineHeights->set_length((int)0);
HXLINE( 636)		this->lineWidths->set_length((int)0);
HXLINE( 638)		Float currentLineAscent = ((Float)0.0);
HXLINE( 639)		Float currentLineDescent = ((Float)0.0);
HXLINE( 640)		 ::Dynamic currentLineLeading = null();
HXLINE( 641)		Float currentLineHeight = ((Float)0.0);
HXLINE( 642)		Float currentLineWidth = ((Float)0.0);
HXLINE( 643)		Float currentTextHeight = ((Float)0.0);
HXLINE( 645)		this->textWidth = (int)0;
HXLINE( 646)		this->textHeight = (int)0;
HXLINE( 647)		this->numLines = (int)1;
HXLINE( 648)		this->bottomScrollV = (int)0;
HXLINE( 649)		this->maxScrollH = (int)0;
HXLINE( 651)		{
HXLINE( 651)			int _g = (int)0;
HXDLIN( 651)			 ::openfl::_Vector::ObjectVector _g1 = this->layoutGroups;
HXDLIN( 651)			while((_g < _g1->get_length())){
HXLINE( 651)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 651)				_g = (_g + (int)1);
HXLINE( 653)				while(true){
HXLINE( 653)					int group1 = group->lineIndex;
HXDLIN( 653)					if (!((group1 > (this->numLines - (int)1)))) {
HXLINE( 653)						goto _hx_goto_9;
            					}
HXLINE( 655)					this->lineAscents->push(currentLineAscent);
HXLINE( 656)					this->lineDescents->push(currentLineDescent);
HXLINE( 657)					{
HXLINE( 657)						Float _hx_tmp;
HXDLIN( 657)						if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 657)							_hx_tmp = currentLineLeading;
            						}
            						else {
HXLINE( 657)							_hx_tmp = (int)0;
            						}
HXDLIN( 657)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 658)					this->lineHeights->push(currentLineHeight);
HXLINE( 659)					this->lineWidths->push(currentLineWidth);
HXLINE( 661)					currentLineAscent = (int)0;
HXLINE( 662)					currentLineDescent = (int)0;
HXLINE( 663)					currentLineLeading = null();
HXLINE( 664)					currentLineHeight = (int)0;
HXLINE( 665)					currentLineWidth = (int)0;
HXLINE( 667)					this->numLines++;
HXLINE( 669)					Float _hx_tmp1 = this->textHeight;
HXDLIN( 669)					if ((_hx_tmp1 <= (this->height - (int)2))) {
HXLINE( 671)						this->bottomScrollV++;
            					}
            				}
            				_hx_goto_9:;
HXLINE( 677)				currentLineAscent = ::Math_obj::max(currentLineAscent,group->ascent);
HXLINE( 678)				currentLineDescent = ::Math_obj::max(currentLineDescent,group->descent);
HXLINE( 680)				if (hx::IsNull( currentLineLeading )) {
HXLINE( 682)					currentLineLeading = group->leading;
            				}
            				else {
HXLINE( 686)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(currentLineLeading,group->leading));
            				}
HXLINE( 690)				currentLineHeight = ::Math_obj::max(currentLineHeight,group->height);
HXLINE( 691)				currentLineWidth = ((group->offsetX - (int)2) + group->width);
HXLINE( 693)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 695)					this->textWidth = currentLineWidth;
            				}
HXLINE( 699)				currentTextHeight = (((group->offsetY - (int)2) + group->ascent) + group->descent);
HXLINE( 701)				if ((currentTextHeight > this->textHeight)) {
HXLINE( 703)					this->textHeight = currentTextHeight;
            				}
            			}
            		}
HXLINE( 709)		bool _hx_tmp2;
HXDLIN( 709)		bool _hx_tmp3;
HXDLIN( 709)		if ((this->textHeight == (int)0)) {
HXLINE( 709)			_hx_tmp3 = hx::IsNotNull( this->textField );
            		}
            		else {
HXLINE( 709)			_hx_tmp3 = false;
            		}
HXDLIN( 709)		if (_hx_tmp3) {
HXLINE( 709)			_hx_tmp2 = hx::IsEq( this->textField->get_type(),(int)1 );
            		}
            		else {
HXLINE( 709)			_hx_tmp2 = false;
            		}
HXDLIN( 709)		if (_hx_tmp2) {
HXLINE( 711)			 ::openfl::text::TextFormat currentFormat = this->textField->_hx___textFormat;
HXLINE( 712)			Float ascent;
HXDLIN( 712)			Float descent;
HXDLIN( 712)			 ::Dynamic leading;
HXDLIN( 712)			Float heightValue;
HXLINE( 714)			 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE( 716)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 718)				ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXLINE( 719)				descent = (currentFormat->size * currentFormat->_hx___descent);
            			}
            			else {
HXLINE( 722)				bool _hx_tmp4;
HXDLIN( 722)				if (hx::IsNotNull( font )) {
HXLINE( 722)					_hx_tmp4 = (font->unitsPerEM != (int)0);
            				}
            				else {
HXLINE( 722)					_hx_tmp4 = false;
            				}
HXDLIN( 722)				if (_hx_tmp4) {
HXLINE( 724)					ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXLINE( 725)					descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            				}
            				else {
HXLINE( 730)					ascent = currentFormat->size;
HXLINE( 731)					descent = (currentFormat->size * ((Float)0.185));
            				}
            			}
HXLINE( 735)			leading = currentFormat->leading;
HXLINE( 737)			heightValue = ((ascent + descent) + leading);
HXLINE( 739)			currentLineAscent = ascent;
HXLINE( 740)			currentLineDescent = descent;
HXLINE( 741)			currentLineLeading = leading;
HXLINE( 743)			currentTextHeight = (ascent + descent);
HXLINE( 744)			this->textHeight = currentTextHeight;
            		}
HXLINE( 748)		this->lineAscents->push(currentLineAscent);
HXLINE( 749)		this->lineDescents->push(currentLineDescent);
HXLINE( 750)		{
HXLINE( 750)			Float _hx_tmp5;
HXDLIN( 750)			if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 750)				_hx_tmp5 = currentLineLeading;
            			}
            			else {
HXLINE( 750)				_hx_tmp5 = (int)0;
            			}
HXDLIN( 750)			this->lineLeadings->push(_hx_tmp5);
            		}
HXLINE( 751)		this->lineHeights->push(currentLineHeight);
HXLINE( 752)		this->lineWidths->push(currentLineWidth);
HXLINE( 754)		if ((this->numLines == (int)1)) {
HXLINE( 756)			this->bottomScrollV = (int)1;
HXLINE( 758)			if (hx::IsGreater( currentLineLeading,(int)0 )) {
HXLINE( 760)				 ::openfl::_internal::text::TextEngine _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 760)				_hx_tmp6->textHeight = (_hx_tmp6->textHeight + currentLineLeading);
            			}
            		}
            		else {
HXLINE( 764)			Float _hx_tmp7 = this->textHeight;
HXDLIN( 764)			if ((_hx_tmp7 <= (this->height - (int)2))) {
HXLINE( 766)				this->bottomScrollV++;
            			}
            		}
HXLINE( 770)		if (hx::IsNotEq( this->autoSize,(int)2 )) {
HXLINE( 772)			 ::Dynamic _g2 = this->autoSize;
HXDLIN( 772)			 ::Dynamic _hx_switch_0 = _g2;
            			if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)3) ){
HXLINE( 776)				if (!(this->wordWrap)) {
HXLINE( 778)					this->width = (this->textWidth + (int)4);
            				}
HXLINE( 782)				this->height = (this->textHeight + (int)4);
HXLINE( 783)				this->bottomScrollV = this->numLines;
HXLINE( 774)				goto _hx_goto_10;
            			}
            			/* default */{
            			}
            			_hx_goto_10:;
            		}
HXLINE( 792)		Float _hx_tmp8 = this->textWidth;
HXDLIN( 792)		if ((_hx_tmp8 > (this->width - (int)4))) {
HXLINE( 794)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + (int)4));
            		}
            		else {
HXLINE( 798)			this->maxScrollH = (int)0;
            		}
HXLINE( 802)		this->maxScrollV = ((this->numLines - this->bottomScrollV) + (int)1);
HXLINE( 804)		if ((this->scrollV > this->maxScrollV)) {
HXLINE( 804)			this->scrollV = this->maxScrollV;
            		}
HXLINE( 805)		if ((this->scrollH > this->maxScrollH)) {
HXLINE( 805)			this->scrollH = this->maxScrollH;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_810_getLayoutGroups)
HXDLIN( 810)		 ::openfl::_internal::text::TextEngine _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 812)		this->layoutGroups->set_length((int)0);
HXLINE( 814)		bool _hx_tmp;
HXDLIN( 814)		if (hx::IsNotNull( this->text )) {
HXLINE( 814)			_hx_tmp = ::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->text,HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 814)			_hx_tmp = true;
            		}
HXDLIN( 814)		if (_hx_tmp) {
HXLINE( 814)			return;
            		}
HXLINE( 816)		int rangeIndex = (int)-1;
HXLINE( 817)		 ::openfl::_internal::text::TextFormatRange formatRange = null();
HXLINE( 818)		 ::lime::text::Font font = null();
HXLINE( 820)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 822)		int leading = (int)0;
HXLINE( 823)		Float ascent = ((Float)0.0);
HXDLIN( 823)		Float maxAscent = ((Float)0.0);
HXLINE( 824)		Float descent = ((Float)0.0);
HXLINE( 826)		 ::openfl::_internal::text::TextLayoutGroup layoutGroup = null();
HXDLIN( 826)		::Array< ::Dynamic> positions = null();
HXLINE( 827)		Float widthValue = ((Float)0.0);
HXDLIN( 827)		Float heightValue = ((Float)0.0);
HXDLIN( 827)		Float maxHeightValue = ((Float)0.0);
HXLINE( 829)		int previousSpaceIndex = (int)-2;
HXLINE( 830)		int spaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),null());
HXLINE( 831)		int breakIndex = this->getLineBreakIndex(null());
HXLINE( 833)		Float offsetX = ((Float)2.0);
HXLINE( 834)		Float offsetY = ((Float)2.0);
HXLINE( 835)		int textIndex = (int)0;
HXLINE( 836)		int lineIndex = (int)0;
HXLINE( 837)		 ::openfl::text::TextFormat lineFormat = null();
HXLINE(1332)		if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1332)			rangeIndex = (rangeIndex + (int)1);
HXDLIN(1332)			formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1332)			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1332)			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            		}
HXLINE(1333)		{
HXLINE(1333)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1333)				ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1333)				descent = (currentFormat->size * currentFormat->_hx___descent);
            			}
            			else {
HXLINE(1333)				bool _hx_tmp1;
HXDLIN(1333)				if (hx::IsNotNull( font )) {
HXLINE(1333)					_hx_tmp1 = (font->unitsPerEM != (int)0);
            				}
            				else {
HXLINE(1333)					_hx_tmp1 = false;
            				}
HXDLIN(1333)				if (_hx_tmp1) {
HXLINE(1333)					ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1333)					descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            				}
            				else {
HXLINE(1333)					ascent = currentFormat->size;
HXDLIN(1333)					descent = (currentFormat->size * ((Float)0.185));
            				}
            			}
HXDLIN(1333)			leading = currentFormat->leading;
HXDLIN(1333)			heightValue = ((ascent + descent) + leading);
HXDLIN(1333)			if ((heightValue > maxHeightValue)) {
HXLINE(1333)				maxHeightValue = heightValue;
            			}
HXDLIN(1333)			if ((ascent > maxAscent)) {
HXLINE(1333)				maxAscent = ascent;
            			}
            		}
HXLINE(1335)		lineFormat = formatRange->format;
HXLINE(1336)		bool wrap;
HXLINE(1337)		int maxLoops = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) + (int)1);
HXLINE(1339)		while((textIndex < maxLoops)){
HXLINE(1341)			bool _hx_tmp2;
HXDLIN(1341)			if ((breakIndex > (int)-1)) {
HXLINE(1341)				if ((spaceIndex != (int)-1)) {
HXLINE(1341)					_hx_tmp2 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE(1341)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE(1341)				_hx_tmp2 = false;
            			}
HXDLIN(1341)			if (_hx_tmp2) {
HXLINE(1344)				if ((textIndex <= breakIndex)) {
HXLINE(1346)					if ((breakIndex <= formatRange->end)) {
HXLINE(1346)						::String text = _gthis->text;
HXDLIN(1346)						Float letterSpacing = ((Float)0.0);
HXDLIN(1346)						if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1346)							letterSpacing = formatRange->format->letterSpacing;
            						}
HXDLIN(1346)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1346)							_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1346)						Float width = ((Float)0.0);
HXDLIN(1346)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1346)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1346)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1346)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN(1346)						_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1346)						bool positions1;
HXDLIN(1346)						if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1346)							positions1 = (_gthis->sharpness < (int)400);
            						}
            						else {
HXLINE(1346)							positions1 = true;
            						}
HXDLIN(1346)						_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1346)						 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1346)						_gthis1->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text,textIndex,breakIndex));
HXDLIN(1346)						positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1346)						Float width1 = ((Float)0.0);
HXDLIN(1346)						{
HXLINE(1346)							int _g = (int)0;
HXDLIN(1346)							while((_g < positions->length)){
HXLINE(1346)								 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1346)								_g = (_g + (int)1);
HXDLIN(1346)								width1 = (width1 + position->advance->x);
            							}
            						}
HXDLIN(1346)						widthValue = width1;
            					}
            					else {
HXLINE(1346)						int tempIndex = textIndex;
HXDLIN(1346)						int tempRangeEnd = formatRange->end;
HXDLIN(1346)						int countRanges = (int)0;
HXDLIN(1346)						positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1346)						widthValue = (int)0;
HXDLIN(1346)						while(true){
HXLINE(1346)							if ((tempIndex != tempRangeEnd)) {
HXLINE(1346)								::String text1 = _gthis->text;
HXDLIN(1346)								Float letterSpacing1 = ((Float)0.0);
HXDLIN(1346)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1346)									letterSpacing1 = formatRange->format->letterSpacing;
            								}
HXDLIN(1346)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1346)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1346)								Float width2 = ((Float)0.0);
HXDLIN(1346)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1346)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1346)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1346)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1346)								_gthis->_hx___textLayout->letterSpacing = letterSpacing1;
HXDLIN(1346)								bool _hx_tmp3;
HXDLIN(1346)								if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1346)									_hx_tmp3 = (_gthis->sharpness < (int)400);
            								}
            								else {
HXLINE(1346)									_hx_tmp3 = true;
            								}
HXDLIN(1346)								_gthis->_hx___textLayout->autoHint = _hx_tmp3;
HXDLIN(1346)								 ::openfl::_internal::text::TextLayout _gthis2 = _gthis->_hx___textLayout;
HXDLIN(1346)								_gthis2->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text1,tempIndex,tempRangeEnd));
HXDLIN(1346)								::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1346)								positions = positions->concat(tempPositions);
            							}
HXDLIN(1346)							if ((tempRangeEnd != breakIndex)) {
HXLINE(1346)								if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1346)									rangeIndex = (rangeIndex + (int)1);
HXDLIN(1346)									formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1346)									currentFormat->_hx___merge(formatRange->format);
HXDLIN(1346)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            								}
HXDLIN(1346)								tempIndex = tempRangeEnd;
HXDLIN(1346)								if ((breakIndex < formatRange->end)) {
HXLINE(1346)									tempRangeEnd = breakIndex;
            								}
            								else {
HXLINE(1346)									tempRangeEnd = formatRange->end;
            								}
HXDLIN(1346)								countRanges = (countRanges + (int)1);
            							}
            							else {
HXLINE(1346)								Float width3 = ((Float)0.0);
HXDLIN(1346)								{
HXLINE(1346)									int _g1 = (int)0;
HXDLIN(1346)									while((_g1 < positions->length)){
HXLINE(1346)										 ::openfl::_internal::text::GlyphPosition position1 = positions->__get(_g1).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1346)										_g1 = (_g1 + (int)1);
HXDLIN(1346)										width3 = (width3 + position1->advance->x);
            									}
            								}
HXDLIN(1346)								widthValue = width3;
HXDLIN(1346)								goto _hx_goto_14;
            							}
            						}
            						_hx_goto_14:;
HXDLIN(1346)						rangeIndex = (rangeIndex - (countRanges + (int)1));
HXDLIN(1346)						if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1346)							rangeIndex = (rangeIndex + (int)1);
HXDLIN(1346)							formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1346)							currentFormat->_hx___merge(formatRange->format);
HXDLIN(1346)							font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            						}
            					}
HXLINE(1347)					{
HXLINE(1347)						bool _hx_tmp4;
HXDLIN(1347)						if ((_gthis->width >= (int)4)) {
HXLINE(1347)							_hx_tmp4 = _gthis->wordWrap;
            						}
            						else {
HXLINE(1347)							_hx_tmp4 = false;
            						}
HXDLIN(1347)						if (_hx_tmp4) {
HXLINE(1347)							::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1347)							int i;
HXDLIN(1347)							int j;
HXDLIN(1347)							int placeIndex;
HXDLIN(1347)							Float positionWidth;
HXDLIN(1347)							 ::openfl::_internal::text::GlyphPosition currentPosition;
HXDLIN(1347)							 ::Dynamic tempPositions1;
HXDLIN(1347)							Float width4 = ((Float)0.0);
HXDLIN(1347)							{
HXLINE(1347)								int _g2 = (int)0;
HXDLIN(1347)								while((_g2 < remainingPositions->length)){
HXLINE(1347)									 ::openfl::_internal::text::GlyphPosition position2 = remainingPositions->__get(_g2).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)									_g2 = (_g2 + (int)1);
HXDLIN(1347)									width4 = (width4 + position2->advance->x);
            								}
            							}
HXDLIN(1347)							Float tempWidth = width4;
HXDLIN(1347)							while(((offsetX + tempWidth) > (_gthis->width - (int)2))){
HXLINE(1347)								j = (int)0;
HXDLIN(1347)								i = j;
HXDLIN(1347)								positionWidth = ((Float)0.0);
HXDLIN(1347)								while(((offsetX + positionWidth) < (_gthis->width - (int)2))){
HXLINE(1347)									currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)									if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1347)										i = (i + (int)1);
HXDLIN(1347)										j = (j + (int)1);
            									}
            									else {
HXLINE(1347)										positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1347)										i = (i + (int)1);
            									}
            								}
HXDLIN(1347)								bool _hx_tmp5;
HXDLIN(1347)								if ((i < (int)2)) {
HXLINE(1347)									_hx_tmp5 = (positionWidth > (_gthis->width - (int)4));
            								}
            								else {
HXLINE(1347)									_hx_tmp5 = false;
            								}
HXDLIN(1347)								if (_hx_tmp5) {
HXLINE(1347)									if ((((textIndex + i) - j) == breakIndex)) {
HXLINE(1347)										goto _hx_goto_17;
            									}
            								}
            								else {
HXLINE(1347)									while(((offsetX + positionWidth) > (_gthis->width - (int)2))){
HXLINE(1347)										i = (i - (int)1);
HXDLIN(1347)										if (((i - j) > (int)0)) {
HXLINE(1347)											{
HXLINE(1347)												int endIndex = ((textIndex + i) - j);
HXDLIN(1347)												if ((endIndex <= formatRange->end)) {
HXLINE(1347)													::String text2 = _gthis->text;
HXDLIN(1347)													Float letterSpacing2 = ((Float)0.0);
HXDLIN(1347)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1347)														letterSpacing2 = formatRange->format->letterSpacing;
            													}
HXDLIN(1347)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1347)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1347)													Float width5 = ((Float)0.0);
HXDLIN(1347)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1347)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1347)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1347)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1347)													_gthis->_hx___textLayout->letterSpacing = letterSpacing2;
HXDLIN(1347)													bool positions2;
HXDLIN(1347)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1347)														positions2 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1347)														positions2 = true;
            													}
HXDLIN(1347)													_gthis->_hx___textLayout->autoHint = positions2;
HXDLIN(1347)													 ::openfl::_internal::text::TextLayout _gthis3 = _gthis->_hx___textLayout;
HXDLIN(1347)													_gthis3->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text2,textIndex,endIndex));
HXDLIN(1347)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1347)													Float width6 = ((Float)0.0);
HXDLIN(1347)													{
HXLINE(1347)														int _g3 = (int)0;
HXDLIN(1347)														while((_g3 < positions->length)){
HXLINE(1347)															 ::openfl::_internal::text::GlyphPosition position3 = positions->__get(_g3).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)															_g3 = (_g3 + (int)1);
HXDLIN(1347)															width6 = (width6 + position3->advance->x);
            														}
            													}
HXDLIN(1347)													widthValue = width6;
            												}
            												else {
HXLINE(1347)													int tempIndex1 = textIndex;
HXDLIN(1347)													int tempRangeEnd1 = formatRange->end;
HXDLIN(1347)													int countRanges1 = (int)0;
HXDLIN(1347)													positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1347)													widthValue = (int)0;
HXDLIN(1347)													while(true){
HXLINE(1347)														if ((tempIndex1 != tempRangeEnd1)) {
HXLINE(1347)															::String text3 = _gthis->text;
HXDLIN(1347)															Float letterSpacing3 = ((Float)0.0);
HXDLIN(1347)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1347)																letterSpacing3 = formatRange->format->letterSpacing;
            															}
HXDLIN(1347)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1347)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1347)															Float width7 = ((Float)0.0);
HXDLIN(1347)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1347)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1347)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1347)																_gthis->_hx___textLayout->set_size(formatRange->format->size);
            															}
HXDLIN(1347)															_gthis->_hx___textLayout->letterSpacing = letterSpacing3;
HXDLIN(1347)															bool _hx_tmp6;
HXDLIN(1347)															if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1347)																_hx_tmp6 = (_gthis->sharpness < (int)400);
            															}
            															else {
HXLINE(1347)																_hx_tmp6 = true;
            															}
HXDLIN(1347)															_gthis->_hx___textLayout->autoHint = _hx_tmp6;
HXDLIN(1347)															 ::openfl::_internal::text::TextLayout _gthis4 = _gthis->_hx___textLayout;
HXDLIN(1347)															_gthis4->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text3,tempIndex1,tempRangeEnd1));
HXDLIN(1347)															::Array< ::Dynamic> tempPositions2 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1347)															positions = positions->concat(tempPositions2);
            														}
HXDLIN(1347)														if ((tempRangeEnd1 != endIndex)) {
HXLINE(1347)															if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1347)																rangeIndex = (rangeIndex + (int)1);
HXDLIN(1347)																formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1347)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1347)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
HXDLIN(1347)															tempIndex1 = tempRangeEnd1;
HXDLIN(1347)															if ((endIndex < formatRange->end)) {
HXLINE(1347)																tempRangeEnd1 = endIndex;
            															}
            															else {
HXLINE(1347)																tempRangeEnd1 = formatRange->end;
            															}
HXDLIN(1347)															countRanges1 = (countRanges1 + (int)1);
            														}
            														else {
HXLINE(1347)															Float width8 = ((Float)0.0);
HXDLIN(1347)															{
HXLINE(1347)																int _g4 = (int)0;
HXDLIN(1347)																while((_g4 < positions->length)){
HXLINE(1347)																	 ::openfl::_internal::text::GlyphPosition position4 = positions->__get(_g4).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)																	_g4 = (_g4 + (int)1);
HXDLIN(1347)																	width8 = (width8 + position4->advance->x);
            																}
            															}
HXDLIN(1347)															widthValue = width8;
HXDLIN(1347)															goto _hx_goto_21;
            														}
            													}
            													_hx_goto_21:;
HXDLIN(1347)													rangeIndex = (rangeIndex - (countRanges1 + (int)1));
HXDLIN(1347)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1347)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1347)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1347)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1347)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
            												}
            											}
HXDLIN(1347)											positionWidth = widthValue;
            										}
            										else {
HXLINE(1347)											i = (int)1;
HXDLIN(1347)											j = (int)0;
            										}
            									}
            								}
HXDLIN(1347)								placeIndex = ((textIndex + i) - j);
HXDLIN(1347)								{
HXLINE(1347)									if ((placeIndex <= formatRange->end)) {
HXLINE(1347)										::String text4 = _gthis->text;
HXDLIN(1347)										Float letterSpacing4 = ((Float)0.0);
HXDLIN(1347)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1347)											letterSpacing4 = formatRange->format->letterSpacing;
            										}
HXDLIN(1347)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1347)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1347)										Float width9 = ((Float)0.0);
HXDLIN(1347)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1347)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1347)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1347)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1347)										_gthis->_hx___textLayout->letterSpacing = letterSpacing4;
HXDLIN(1347)										bool positions3;
HXDLIN(1347)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1347)											positions3 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1347)											positions3 = true;
            										}
HXDLIN(1347)										_gthis->_hx___textLayout->autoHint = positions3;
HXDLIN(1347)										 ::openfl::_internal::text::TextLayout _gthis5 = _gthis->_hx___textLayout;
HXDLIN(1347)										_gthis5->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text4,textIndex,placeIndex));
HXDLIN(1347)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1347)										Float width10 = ((Float)0.0);
HXDLIN(1347)										{
HXLINE(1347)											int _g5 = (int)0;
HXDLIN(1347)											while((_g5 < positions->length)){
HXLINE(1347)												 ::openfl::_internal::text::GlyphPosition position5 = positions->__get(_g5).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)												_g5 = (_g5 + (int)1);
HXDLIN(1347)												width10 = (width10 + position5->advance->x);
            											}
            										}
HXDLIN(1347)										widthValue = width10;
HXDLIN(1347)										bool _hx_tmp7;
HXDLIN(1347)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1347)											_hx_tmp7 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1347)											_hx_tmp7 = true;
            										}
HXDLIN(1347)										if (_hx_tmp7) {
HXLINE(1347)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXDLIN(1347)											::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            										}
            										else {
HXLINE(1347)											layoutGroup->format = formatRange->format;
HXDLIN(1347)											layoutGroup->startIndex = textIndex;
HXDLIN(1347)											layoutGroup->endIndex = placeIndex;
            										}
HXDLIN(1347)										layoutGroup->positions = positions;
HXDLIN(1347)										layoutGroup->offsetX = offsetX;
HXDLIN(1347)										layoutGroup->ascent = ascent;
HXDLIN(1347)										layoutGroup->descent = descent;
HXDLIN(1347)										layoutGroup->leading = leading;
HXDLIN(1347)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1347)										layoutGroup->offsetY = offsetY;
HXDLIN(1347)										layoutGroup->width = widthValue;
HXDLIN(1347)										layoutGroup->height = heightValue;
HXDLIN(1347)										offsetX = (offsetX + widthValue);
HXDLIN(1347)										if ((placeIndex == formatRange->end)) {
HXLINE(1347)											layoutGroup = null();
HXDLIN(1347)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1347)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1347)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1347)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1347)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1347)											{
HXLINE(1347)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1347)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1347)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1347)													bool _hx_tmp8;
HXDLIN(1347)													if (hx::IsNotNull( font )) {
HXLINE(1347)														_hx_tmp8 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1347)														_hx_tmp8 = false;
            													}
HXDLIN(1347)													if (_hx_tmp8) {
HXLINE(1347)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1347)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1347)														ascent = currentFormat->size;
HXDLIN(1347)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1347)												leading = currentFormat->leading;
HXDLIN(1347)												heightValue = ((ascent + descent) + leading);
HXDLIN(1347)												if ((heightValue > maxHeightValue)) {
HXLINE(1347)													maxHeightValue = heightValue;
            												}
HXDLIN(1347)												if ((ascent > maxAscent)) {
HXLINE(1347)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1347)										while(true){
HXLINE(1347)											int tempRangeEnd2;
HXDLIN(1347)											if ((placeIndex < formatRange->end)) {
HXLINE(1347)												tempRangeEnd2 = placeIndex;
            											}
            											else {
HXLINE(1347)												tempRangeEnd2 = formatRange->end;
            											}
HXDLIN(1347)											if ((textIndex != tempRangeEnd2)) {
HXLINE(1347)												::String text5 = _gthis->text;
HXDLIN(1347)												Float letterSpacing5 = ((Float)0.0);
HXDLIN(1347)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1347)													letterSpacing5 = formatRange->format->letterSpacing;
            												}
HXDLIN(1347)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1347)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1347)												Float width11 = ((Float)0.0);
HXDLIN(1347)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1347)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1347)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1347)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1347)												_gthis->_hx___textLayout->letterSpacing = letterSpacing5;
HXDLIN(1347)												bool positions4;
HXDLIN(1347)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1347)													positions4 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1347)													positions4 = true;
            												}
HXDLIN(1347)												_gthis->_hx___textLayout->autoHint = positions4;
HXDLIN(1347)												 ::openfl::_internal::text::TextLayout _gthis6 = _gthis->_hx___textLayout;
HXDLIN(1347)												_gthis6->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text5,textIndex,tempRangeEnd2));
HXDLIN(1347)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1347)												Float width12 = ((Float)0.0);
HXDLIN(1347)												{
HXLINE(1347)													int _g6 = (int)0;
HXDLIN(1347)													while((_g6 < positions->length)){
HXLINE(1347)														 ::openfl::_internal::text::GlyphPosition position6 = positions->__get(_g6).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)														_g6 = (_g6 + (int)1);
HXDLIN(1347)														width12 = (width12 + position6->advance->x);
            													}
            												}
HXDLIN(1347)												widthValue = width12;
HXDLIN(1347)												bool _hx_tmp9;
HXDLIN(1347)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1347)													_hx_tmp9 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1347)													_hx_tmp9 = true;
            												}
HXDLIN(1347)												if (_hx_tmp9) {
HXLINE(1347)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd2);
HXDLIN(1347)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1347)													layoutGroup->format = formatRange->format;
HXDLIN(1347)													layoutGroup->startIndex = textIndex;
HXDLIN(1347)													layoutGroup->endIndex = tempRangeEnd2;
            												}
HXDLIN(1347)												layoutGroup->positions = positions;
HXDLIN(1347)												layoutGroup->offsetX = offsetX;
HXDLIN(1347)												layoutGroup->ascent = ascent;
HXDLIN(1347)												layoutGroup->descent = descent;
HXDLIN(1347)												layoutGroup->leading = leading;
HXDLIN(1347)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1347)												layoutGroup->offsetY = offsetY;
HXDLIN(1347)												layoutGroup->width = widthValue;
HXDLIN(1347)												layoutGroup->height = heightValue;
HXDLIN(1347)												offsetX = (offsetX + widthValue);
HXDLIN(1347)												textIndex = tempRangeEnd2;
            											}
HXDLIN(1347)											if ((tempRangeEnd2 == formatRange->end)) {
HXLINE(1347)												layoutGroup = null();
            											}
HXDLIN(1347)											if ((tempRangeEnd2 == placeIndex)) {
HXLINE(1347)												goto _hx_goto_24;
            											}
HXDLIN(1347)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1347)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1347)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1347)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1347)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1347)											{
HXLINE(1347)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1347)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1347)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1347)													bool _hx_tmp10;
HXDLIN(1347)													if (hx::IsNotNull( font )) {
HXLINE(1347)														_hx_tmp10 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1347)														_hx_tmp10 = false;
            													}
HXDLIN(1347)													if (_hx_tmp10) {
HXLINE(1347)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1347)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1347)														ascent = currentFormat->size;
HXDLIN(1347)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1347)												leading = currentFormat->leading;
HXDLIN(1347)												heightValue = ((ascent + descent) + leading);
HXDLIN(1347)												if ((heightValue > maxHeightValue)) {
HXLINE(1347)													maxHeightValue = heightValue;
            												}
HXDLIN(1347)												if ((ascent > maxAscent)) {
HXLINE(1347)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_24:;
            									}
HXDLIN(1347)									textIndex = placeIndex;
            								}
HXDLIN(1347)								{
HXLINE(1347)									{
HXLINE(1347)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1347)											ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1347)											descent = (currentFormat->size * currentFormat->_hx___descent);
            										}
            										else {
HXLINE(1347)											bool _hx_tmp11;
HXDLIN(1347)											if (hx::IsNotNull( font )) {
HXLINE(1347)												_hx_tmp11 = (font->unitsPerEM != (int)0);
            											}
            											else {
HXLINE(1347)												_hx_tmp11 = false;
            											}
HXDLIN(1347)											if (_hx_tmp11) {
HXLINE(1347)												ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1347)												descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            											}
            											else {
HXLINE(1347)												ascent = currentFormat->size;
HXDLIN(1347)												descent = (currentFormat->size * ((Float)0.185));
            											}
            										}
HXDLIN(1347)										leading = currentFormat->leading;
HXDLIN(1347)										heightValue = ((ascent + descent) + leading);
HXDLIN(1347)										if ((heightValue > maxHeightValue)) {
HXLINE(1347)											maxHeightValue = heightValue;
            										}
HXDLIN(1347)										if ((ascent > maxAscent)) {
HXLINE(1347)											maxAscent = ascent;
            										}
            									}
HXDLIN(1347)									int i1 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1347)									while(true){
HXLINE(1347)										i1 = (i1 - (int)1);
HXDLIN(1347)										if (!((i1 > (int)-1))) {
HXLINE(1347)											goto _hx_goto_26;
            										}
HXDLIN(1347)										 ::openfl::_internal::text::TextLayoutGroup lg = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i1)) );
HXDLIN(1347)										if ((lg->lineIndex < lineIndex)) {
HXLINE(1347)											goto _hx_goto_26;
            										}
HXDLIN(1347)										if ((lg->lineIndex > lineIndex)) {
HXLINE(1347)											continue;
            										}
HXDLIN(1347)										lg->ascent = maxAscent;
HXDLIN(1347)										lg->height = maxHeightValue;
            									}
            									_hx_goto_26:;
HXDLIN(1347)									offsetY = (offsetY + maxHeightValue);
HXDLIN(1347)									maxAscent = ((Float)0.0);
HXDLIN(1347)									maxHeightValue = ((Float)0.0);
HXDLIN(1347)									lineIndex = (lineIndex + (int)1);
HXDLIN(1347)									offsetX = (int)2;
            								}
HXDLIN(1347)								if ((breakIndex <= formatRange->end)) {
HXLINE(1347)									::String text6 = _gthis->text;
HXDLIN(1347)									Float letterSpacing6 = ((Float)0.0);
HXDLIN(1347)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1347)										letterSpacing6 = formatRange->format->letterSpacing;
            									}
HXDLIN(1347)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1347)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1347)									Float width13 = ((Float)0.0);
HXDLIN(1347)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1347)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1347)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1347)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1347)									_gthis->_hx___textLayout->letterSpacing = letterSpacing6;
HXDLIN(1347)									bool positions5;
HXDLIN(1347)									if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1347)										positions5 = (_gthis->sharpness < (int)400);
            									}
            									else {
HXLINE(1347)										positions5 = true;
            									}
HXDLIN(1347)									_gthis->_hx___textLayout->autoHint = positions5;
HXDLIN(1347)									 ::openfl::_internal::text::TextLayout _gthis7 = _gthis->_hx___textLayout;
HXDLIN(1347)									_gthis7->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text6,placeIndex,breakIndex));
HXDLIN(1347)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1347)									Float width14 = ((Float)0.0);
HXDLIN(1347)									{
HXLINE(1347)										int _g7 = (int)0;
HXDLIN(1347)										while((_g7 < positions->length)){
HXLINE(1347)											 ::openfl::_internal::text::GlyphPosition position7 = positions->__get(_g7).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)											_g7 = (_g7 + (int)1);
HXDLIN(1347)											width14 = (width14 + position7->advance->x);
            										}
            									}
HXDLIN(1347)									widthValue = width14;
            								}
            								else {
HXLINE(1347)									int tempIndex2 = placeIndex;
HXDLIN(1347)									int tempRangeEnd3 = formatRange->end;
HXDLIN(1347)									int countRanges2 = (int)0;
HXDLIN(1347)									positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1347)									widthValue = (int)0;
HXDLIN(1347)									while(true){
HXLINE(1347)										if ((tempIndex2 != tempRangeEnd3)) {
HXLINE(1347)											::String text7 = _gthis->text;
HXDLIN(1347)											Float letterSpacing7 = ((Float)0.0);
HXDLIN(1347)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1347)												letterSpacing7 = formatRange->format->letterSpacing;
            											}
HXDLIN(1347)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1347)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1347)											Float width15 = ((Float)0.0);
HXDLIN(1347)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1347)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1347)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1347)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1347)											_gthis->_hx___textLayout->letterSpacing = letterSpacing7;
HXDLIN(1347)											bool _hx_tmp12;
HXDLIN(1347)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1347)												_hx_tmp12 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1347)												_hx_tmp12 = true;
            											}
HXDLIN(1347)											_gthis->_hx___textLayout->autoHint = _hx_tmp12;
HXDLIN(1347)											 ::openfl::_internal::text::TextLayout _gthis8 = _gthis->_hx___textLayout;
HXDLIN(1347)											_gthis8->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text7,tempIndex2,tempRangeEnd3));
HXDLIN(1347)											::Array< ::Dynamic> tempPositions3 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1347)											positions = positions->concat(tempPositions3);
            										}
HXDLIN(1347)										if ((tempRangeEnd3 != breakIndex)) {
HXLINE(1347)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1347)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1347)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1347)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1347)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1347)											tempIndex2 = tempRangeEnd3;
HXDLIN(1347)											if ((breakIndex < formatRange->end)) {
HXLINE(1347)												tempRangeEnd3 = breakIndex;
            											}
            											else {
HXLINE(1347)												tempRangeEnd3 = formatRange->end;
            											}
HXDLIN(1347)											countRanges2 = (countRanges2 + (int)1);
            										}
            										else {
HXLINE(1347)											Float width16 = ((Float)0.0);
HXDLIN(1347)											{
HXLINE(1347)												int _g8 = (int)0;
HXDLIN(1347)												while((_g8 < positions->length)){
HXLINE(1347)													 ::openfl::_internal::text::GlyphPosition position8 = positions->__get(_g8).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)													_g8 = (_g8 + (int)1);
HXDLIN(1347)													width16 = (width16 + position8->advance->x);
            												}
            											}
HXDLIN(1347)											widthValue = width16;
HXDLIN(1347)											goto _hx_goto_28;
            										}
            									}
            									_hx_goto_28:;
HXDLIN(1347)									rangeIndex = (rangeIndex - (countRanges2 + (int)1));
HXDLIN(1347)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1347)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1347)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1347)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1347)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
            								}
HXDLIN(1347)								remainingPositions = positions;
HXDLIN(1347)								tempWidth = widthValue;
            							}
            							_hx_goto_17:;
            						}
HXDLIN(1347)						{
HXLINE(1347)							if ((breakIndex <= formatRange->end)) {
HXLINE(1347)								::String text8 = _gthis->text;
HXDLIN(1347)								Float letterSpacing8 = ((Float)0.0);
HXDLIN(1347)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1347)									letterSpacing8 = formatRange->format->letterSpacing;
            								}
HXDLIN(1347)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1347)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1347)								Float width17 = ((Float)0.0);
HXDLIN(1347)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1347)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1347)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1347)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1347)								_gthis->_hx___textLayout->letterSpacing = letterSpacing8;
HXDLIN(1347)								bool positions6;
HXDLIN(1347)								if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1347)									positions6 = (_gthis->sharpness < (int)400);
            								}
            								else {
HXLINE(1347)									positions6 = true;
            								}
HXDLIN(1347)								_gthis->_hx___textLayout->autoHint = positions6;
HXDLIN(1347)								 ::openfl::_internal::text::TextLayout _gthis9 = _gthis->_hx___textLayout;
HXDLIN(1347)								_gthis9->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text8,textIndex,breakIndex));
HXDLIN(1347)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1347)								Float width18 = ((Float)0.0);
HXDLIN(1347)								{
HXLINE(1347)									int _g9 = (int)0;
HXDLIN(1347)									while((_g9 < positions->length)){
HXLINE(1347)										 ::openfl::_internal::text::GlyphPosition position9 = positions->__get(_g9).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)										_g9 = (_g9 + (int)1);
HXDLIN(1347)										width18 = (width18 + position9->advance->x);
            									}
            								}
HXDLIN(1347)								widthValue = width18;
HXDLIN(1347)								bool _hx_tmp13;
HXDLIN(1347)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1347)									_hx_tmp13 = (layoutGroup->startIndex != layoutGroup->endIndex);
            								}
            								else {
HXLINE(1347)									_hx_tmp13 = true;
            								}
HXDLIN(1347)								if (_hx_tmp13) {
HXLINE(1347)									layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXDLIN(1347)									::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            								}
            								else {
HXLINE(1347)									layoutGroup->format = formatRange->format;
HXDLIN(1347)									layoutGroup->startIndex = textIndex;
HXDLIN(1347)									layoutGroup->endIndex = breakIndex;
            								}
HXDLIN(1347)								layoutGroup->positions = positions;
HXDLIN(1347)								layoutGroup->offsetX = offsetX;
HXDLIN(1347)								layoutGroup->ascent = ascent;
HXDLIN(1347)								layoutGroup->descent = descent;
HXDLIN(1347)								layoutGroup->leading = leading;
HXDLIN(1347)								layoutGroup->lineIndex = lineIndex;
HXDLIN(1347)								layoutGroup->offsetY = offsetY;
HXDLIN(1347)								layoutGroup->width = widthValue;
HXDLIN(1347)								layoutGroup->height = heightValue;
HXDLIN(1347)								offsetX = (offsetX + widthValue);
HXDLIN(1347)								if ((breakIndex == formatRange->end)) {
HXLINE(1347)									layoutGroup = null();
HXDLIN(1347)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1347)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1347)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1347)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1347)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXDLIN(1347)									{
HXLINE(1347)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1347)											ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1347)											descent = (currentFormat->size * currentFormat->_hx___descent);
            										}
            										else {
HXLINE(1347)											bool _hx_tmp14;
HXDLIN(1347)											if (hx::IsNotNull( font )) {
HXLINE(1347)												_hx_tmp14 = (font->unitsPerEM != (int)0);
            											}
            											else {
HXLINE(1347)												_hx_tmp14 = false;
            											}
HXDLIN(1347)											if (_hx_tmp14) {
HXLINE(1347)												ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1347)												descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            											}
            											else {
HXLINE(1347)												ascent = currentFormat->size;
HXDLIN(1347)												descent = (currentFormat->size * ((Float)0.185));
            											}
            										}
HXDLIN(1347)										leading = currentFormat->leading;
HXDLIN(1347)										heightValue = ((ascent + descent) + leading);
HXDLIN(1347)										if ((heightValue > maxHeightValue)) {
HXLINE(1347)											maxHeightValue = heightValue;
            										}
HXDLIN(1347)										if ((ascent > maxAscent)) {
HXLINE(1347)											maxAscent = ascent;
            										}
            									}
            								}
            							}
            							else {
HXLINE(1347)								while(true){
HXLINE(1347)									int tempRangeEnd4;
HXDLIN(1347)									if ((breakIndex < formatRange->end)) {
HXLINE(1347)										tempRangeEnd4 = breakIndex;
            									}
            									else {
HXLINE(1347)										tempRangeEnd4 = formatRange->end;
            									}
HXDLIN(1347)									if ((textIndex != tempRangeEnd4)) {
HXLINE(1347)										::String text9 = _gthis->text;
HXDLIN(1347)										Float letterSpacing9 = ((Float)0.0);
HXDLIN(1347)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1347)											letterSpacing9 = formatRange->format->letterSpacing;
            										}
HXDLIN(1347)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1347)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1347)										Float width19 = ((Float)0.0);
HXDLIN(1347)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1347)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1347)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1347)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1347)										_gthis->_hx___textLayout->letterSpacing = letterSpacing9;
HXDLIN(1347)										bool positions7;
HXDLIN(1347)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1347)											positions7 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1347)											positions7 = true;
            										}
HXDLIN(1347)										_gthis->_hx___textLayout->autoHint = positions7;
HXDLIN(1347)										 ::openfl::_internal::text::TextLayout _gthis10 = _gthis->_hx___textLayout;
HXDLIN(1347)										_gthis10->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text9,textIndex,tempRangeEnd4));
HXDLIN(1347)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1347)										Float width20 = ((Float)0.0);
HXDLIN(1347)										{
HXLINE(1347)											int _g10 = (int)0;
HXDLIN(1347)											while((_g10 < positions->length)){
HXLINE(1347)												 ::openfl::_internal::text::GlyphPosition position10 = positions->__get(_g10).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1347)												_g10 = (_g10 + (int)1);
HXDLIN(1347)												width20 = (width20 + position10->advance->x);
            											}
            										}
HXDLIN(1347)										widthValue = width20;
HXDLIN(1347)										bool _hx_tmp15;
HXDLIN(1347)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1347)											_hx_tmp15 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1347)											_hx_tmp15 = true;
            										}
HXDLIN(1347)										if (_hx_tmp15) {
HXLINE(1347)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd4);
HXDLIN(1347)											::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            										}
            										else {
HXLINE(1347)											layoutGroup->format = formatRange->format;
HXDLIN(1347)											layoutGroup->startIndex = textIndex;
HXDLIN(1347)											layoutGroup->endIndex = tempRangeEnd4;
            										}
HXDLIN(1347)										layoutGroup->positions = positions;
HXDLIN(1347)										layoutGroup->offsetX = offsetX;
HXDLIN(1347)										layoutGroup->ascent = ascent;
HXDLIN(1347)										layoutGroup->descent = descent;
HXDLIN(1347)										layoutGroup->leading = leading;
HXDLIN(1347)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1347)										layoutGroup->offsetY = offsetY;
HXDLIN(1347)										layoutGroup->width = widthValue;
HXDLIN(1347)										layoutGroup->height = heightValue;
HXDLIN(1347)										offsetX = (offsetX + widthValue);
HXDLIN(1347)										textIndex = tempRangeEnd4;
            									}
HXDLIN(1347)									if ((tempRangeEnd4 == formatRange->end)) {
HXLINE(1347)										layoutGroup = null();
            									}
HXDLIN(1347)									if ((tempRangeEnd4 == breakIndex)) {
HXLINE(1347)										goto _hx_goto_31;
            									}
HXDLIN(1347)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1347)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1347)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1347)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1347)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXDLIN(1347)									{
HXLINE(1347)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1347)											ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1347)											descent = (currentFormat->size * currentFormat->_hx___descent);
            										}
            										else {
HXLINE(1347)											bool _hx_tmp16;
HXDLIN(1347)											if (hx::IsNotNull( font )) {
HXLINE(1347)												_hx_tmp16 = (font->unitsPerEM != (int)0);
            											}
            											else {
HXLINE(1347)												_hx_tmp16 = false;
            											}
HXDLIN(1347)											if (_hx_tmp16) {
HXLINE(1347)												ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1347)												descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            											}
            											else {
HXLINE(1347)												ascent = currentFormat->size;
HXDLIN(1347)												descent = (currentFormat->size * ((Float)0.185));
            											}
            										}
HXDLIN(1347)										leading = currentFormat->leading;
HXDLIN(1347)										heightValue = ((ascent + descent) + leading);
HXDLIN(1347)										if ((heightValue > maxHeightValue)) {
HXLINE(1347)											maxHeightValue = heightValue;
            										}
HXDLIN(1347)										if ((ascent > maxAscent)) {
HXLINE(1347)											maxAscent = ascent;
            										}
            									}
            								}
            								_hx_goto_31:;
            							}
HXDLIN(1347)							textIndex = breakIndex;
            						}
            					}
HXLINE(1349)					layoutGroup = null();
            				}
            				else {
HXLINE(1351)					bool _hx_tmp17;
HXDLIN(1351)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1351)						_hx_tmp17 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1351)						_hx_tmp17 = false;
            					}
HXDLIN(1351)					if (_hx_tmp17) {
HXLINE(1354)						if ((layoutGroup->endIndex == spaceIndex)) {
HXLINE(1356)							 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1356)							int index = (layoutGroup->positions->length - (int)1);
HXDLIN(1356)							Float _hx_tmp18;
HXDLIN(1356)							bool _hx_tmp19;
HXDLIN(1356)							if ((index >= (int)0)) {
HXLINE(1356)								_hx_tmp19 = (index < layoutGroup->positions->length);
            							}
            							else {
HXLINE(1356)								_hx_tmp19 = false;
            							}
HXDLIN(1356)							if (_hx_tmp19) {
HXLINE(1356)								_hx_tmp18 = layoutGroup->positions->__get(index).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1356)								_hx_tmp18 = (int)0;
            							}
HXDLIN(1356)							layoutGroup1->width = (layoutGroup1->width - _hx_tmp18);
            						}
HXLINE(1360)						layoutGroup = null();
            					}
            				}
HXLINE(1364)				if ((formatRange->end == breakIndex)) {
HXLINE(1366)					if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1366)						rangeIndex = (rangeIndex + (int)1);
HXDLIN(1366)						formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1366)						currentFormat->_hx___merge(formatRange->format);
HXDLIN(1366)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            					}
HXLINE(1367)					{
HXLINE(1367)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1367)							ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1367)							descent = (currentFormat->size * currentFormat->_hx___descent);
            						}
            						else {
HXLINE(1367)							bool _hx_tmp20;
HXDLIN(1367)							if (hx::IsNotNull( font )) {
HXLINE(1367)								_hx_tmp20 = (font->unitsPerEM != (int)0);
            							}
            							else {
HXLINE(1367)								_hx_tmp20 = false;
            							}
HXDLIN(1367)							if (_hx_tmp20) {
HXLINE(1367)								ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1367)								descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            							}
            							else {
HXLINE(1367)								ascent = currentFormat->size;
HXDLIN(1367)								descent = (currentFormat->size * ((Float)0.185));
            							}
            						}
HXDLIN(1367)						leading = currentFormat->leading;
HXDLIN(1367)						heightValue = ((ascent + descent) + leading);
HXDLIN(1367)						if ((heightValue > maxHeightValue)) {
HXLINE(1367)							maxHeightValue = heightValue;
            						}
HXDLIN(1367)						if ((ascent > maxAscent)) {
HXLINE(1367)							maxAscent = ascent;
            						}
            					}
HXLINE(1368)					lineFormat = formatRange->format;
            				}
HXLINE(1372)				if ((breakIndex >= (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) - (int)1))) {
HXLINE(1375)					offsetY = (offsetY - maxHeightValue);
            				}
HXLINE(1379)				{
HXLINE(1379)					{
HXLINE(1379)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1379)							ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1379)							descent = (currentFormat->size * currentFormat->_hx___descent);
            						}
            						else {
HXLINE(1379)							bool _hx_tmp21;
HXDLIN(1379)							if (hx::IsNotNull( font )) {
HXLINE(1379)								_hx_tmp21 = (font->unitsPerEM != (int)0);
            							}
            							else {
HXLINE(1379)								_hx_tmp21 = false;
            							}
HXDLIN(1379)							if (_hx_tmp21) {
HXLINE(1379)								ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1379)								descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            							}
            							else {
HXLINE(1379)								ascent = currentFormat->size;
HXDLIN(1379)								descent = (currentFormat->size * ((Float)0.185));
            							}
            						}
HXDLIN(1379)						leading = currentFormat->leading;
HXDLIN(1379)						heightValue = ((ascent + descent) + leading);
HXDLIN(1379)						if ((heightValue > maxHeightValue)) {
HXLINE(1379)							maxHeightValue = heightValue;
            						}
HXDLIN(1379)						if ((ascent > maxAscent)) {
HXLINE(1379)							maxAscent = ascent;
            						}
            					}
HXDLIN(1379)					int i2 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1379)					while(true){
HXLINE(1379)						i2 = (i2 - (int)1);
HXDLIN(1379)						if (!((i2 > (int)-1))) {
HXLINE(1379)							goto _hx_goto_33;
            						}
HXDLIN(1379)						 ::openfl::_internal::text::TextLayoutGroup lg1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i2)) );
HXDLIN(1379)						if ((lg1->lineIndex < lineIndex)) {
HXLINE(1379)							goto _hx_goto_33;
            						}
HXDLIN(1379)						if ((lg1->lineIndex > lineIndex)) {
HXLINE(1379)							continue;
            						}
HXDLIN(1379)						lg1->ascent = maxAscent;
HXDLIN(1379)						lg1->height = maxHeightValue;
            					}
            					_hx_goto_33:;
HXDLIN(1379)					offsetY = (offsetY + maxHeightValue);
HXDLIN(1379)					maxAscent = ((Float)0.0);
HXDLIN(1379)					maxHeightValue = ((Float)0.0);
HXDLIN(1379)					lineIndex = (lineIndex + (int)1);
HXDLIN(1379)					offsetX = (int)2;
            				}
HXLINE(1381)				textIndex = (breakIndex + (int)1);
HXLINE(1382)				breakIndex = this->getLineBreakIndex(textIndex);
            			}
            			else {
HXLINE(1384)				if ((spaceIndex > (int)-1)) {
HXLINE(1387)					bool _hx_tmp22;
HXDLIN(1387)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1387)						_hx_tmp22 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1387)						_hx_tmp22 = false;
            					}
HXDLIN(1387)					if (_hx_tmp22) {
HXLINE(1389)						layoutGroup = null();
            					}
HXLINE(1393)					wrap = false;
HXLINE(1395)					while((textIndex < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))){
HXLINE(1399)						int endIndex1 = (int)-1;
HXLINE(1401)						if ((spaceIndex == (int)-1)) {
HXLINE(1403)							endIndex1 = breakIndex;
            						}
            						else {
HXLINE(1409)							endIndex1 = (spaceIndex + (int)1);
HXLINE(1411)							bool _hx_tmp23;
HXDLIN(1411)							if ((breakIndex > (int)-1)) {
HXLINE(1411)								_hx_tmp23 = (breakIndex < endIndex1);
            							}
            							else {
HXLINE(1411)								_hx_tmp23 = false;
            							}
HXDLIN(1411)							if (_hx_tmp23) {
HXLINE(1413)								endIndex1 = breakIndex;
            							}
            						}
HXLINE(1419)						if ((endIndex1 == (int)-1)) {
HXLINE(1421)							endIndex1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
            						}
HXLINE(1425)						if ((endIndex1 <= formatRange->end)) {
HXLINE(1425)							::String text10 = _gthis->text;
HXDLIN(1425)							Float letterSpacing10 = ((Float)0.0);
HXDLIN(1425)							if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1425)								letterSpacing10 = formatRange->format->letterSpacing;
            							}
HXDLIN(1425)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1425)								_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1425)							Float width21 = ((Float)0.0);
HXDLIN(1425)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1425)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1425)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1425)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN(1425)							_gthis->_hx___textLayout->letterSpacing = letterSpacing10;
HXDLIN(1425)							bool positions8;
HXDLIN(1425)							if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1425)								positions8 = (_gthis->sharpness < (int)400);
            							}
            							else {
HXLINE(1425)								positions8 = true;
            							}
HXDLIN(1425)							_gthis->_hx___textLayout->autoHint = positions8;
HXDLIN(1425)							 ::openfl::_internal::text::TextLayout _gthis11 = _gthis->_hx___textLayout;
HXDLIN(1425)							_gthis11->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text10,textIndex,endIndex1));
HXDLIN(1425)							positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1425)							Float width22 = ((Float)0.0);
HXDLIN(1425)							{
HXLINE(1425)								int _g11 = (int)0;
HXDLIN(1425)								while((_g11 < positions->length)){
HXLINE(1425)									 ::openfl::_internal::text::GlyphPosition position11 = positions->__get(_g11).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1425)									_g11 = (_g11 + (int)1);
HXDLIN(1425)									width22 = (width22 + position11->advance->x);
            								}
            							}
HXDLIN(1425)							widthValue = width22;
            						}
            						else {
HXLINE(1425)							int tempIndex3 = textIndex;
HXDLIN(1425)							int tempRangeEnd5 = formatRange->end;
HXDLIN(1425)							int countRanges3 = (int)0;
HXDLIN(1425)							positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1425)							widthValue = (int)0;
HXDLIN(1425)							while(true){
HXLINE(1425)								if ((tempIndex3 != tempRangeEnd5)) {
HXLINE(1425)									::String text11 = _gthis->text;
HXDLIN(1425)									Float letterSpacing11 = ((Float)0.0);
HXDLIN(1425)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1425)										letterSpacing11 = formatRange->format->letterSpacing;
            									}
HXDLIN(1425)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1425)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1425)									Float width23 = ((Float)0.0);
HXDLIN(1425)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1425)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1425)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1425)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1425)									_gthis->_hx___textLayout->letterSpacing = letterSpacing11;
HXDLIN(1425)									bool _hx_tmp24;
HXDLIN(1425)									if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1425)										_hx_tmp24 = (_gthis->sharpness < (int)400);
            									}
            									else {
HXLINE(1425)										_hx_tmp24 = true;
            									}
HXDLIN(1425)									_gthis->_hx___textLayout->autoHint = _hx_tmp24;
HXDLIN(1425)									 ::openfl::_internal::text::TextLayout _gthis12 = _gthis->_hx___textLayout;
HXDLIN(1425)									_gthis12->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text11,tempIndex3,tempRangeEnd5));
HXDLIN(1425)									::Array< ::Dynamic> tempPositions4 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1425)									positions = positions->concat(tempPositions4);
            								}
HXDLIN(1425)								if ((tempRangeEnd5 != endIndex1)) {
HXLINE(1425)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1425)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1425)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1425)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1425)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXDLIN(1425)									tempIndex3 = tempRangeEnd5;
HXDLIN(1425)									if ((endIndex1 < formatRange->end)) {
HXLINE(1425)										tempRangeEnd5 = endIndex1;
            									}
            									else {
HXLINE(1425)										tempRangeEnd5 = formatRange->end;
            									}
HXDLIN(1425)									countRanges3 = (countRanges3 + (int)1);
            								}
            								else {
HXLINE(1425)									Float width24 = ((Float)0.0);
HXDLIN(1425)									{
HXLINE(1425)										int _g12 = (int)0;
HXDLIN(1425)										while((_g12 < positions->length)){
HXLINE(1425)											 ::openfl::_internal::text::GlyphPosition position12 = positions->__get(_g12).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1425)											_g12 = (_g12 + (int)1);
HXDLIN(1425)											width24 = (width24 + position12->advance->x);
            										}
            									}
HXDLIN(1425)									widthValue = width24;
HXDLIN(1425)									goto _hx_goto_36;
            								}
            							}
            							_hx_goto_36:;
HXDLIN(1425)							rangeIndex = (rangeIndex - (countRanges3 + (int)1));
HXDLIN(1425)							if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1425)								rangeIndex = (rangeIndex + (int)1);
HXDLIN(1425)								formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1425)								currentFormat->_hx___merge(formatRange->format);
HXDLIN(1425)								font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            							}
            						}
HXLINE(1427)						if (hx::IsEq( lineFormat->align,(int)2 )) {
HXLINE(1429)							bool _hx_tmp25;
HXDLIN(1429)							if ((positions->length > (int)0)) {
HXLINE(1429)								_hx_tmp25 = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE(1429)								_hx_tmp25 = false;
            							}
HXDLIN(1429)							if (_hx_tmp25) {
HXLINE(1432)								textIndex = (textIndex + (int)1);
HXLINE(1434)								Float spaceWidth = positions->shift().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1435)								widthValue = (widthValue - spaceWidth);
HXLINE(1436)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE(1440)							bool _hx_tmp26;
HXDLIN(1440)							if ((positions->length > (int)0)) {
HXLINE(1440)								_hx_tmp26 = (endIndex1 == (spaceIndex + (int)1));
            							}
            							else {
HXLINE(1440)								_hx_tmp26 = false;
            							}
HXDLIN(1440)							if (_hx_tmp26) {
HXLINE(1443)								endIndex1 = (endIndex1 - (int)1);
HXLINE(1445)								Float spaceWidth1 = positions->pop().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1446)								widthValue = (widthValue - spaceWidth1);
            							}
            						}
HXLINE(1452)						if (this->wordWrap) {
HXLINE(1454)							if (((offsetX + widthValue) > (this->width - (int)2))) {
HXLINE(1456)								wrap = true;
HXLINE(1458)								bool _hx_tmp27;
HXDLIN(1458)								if ((positions->length > (int)0)) {
HXLINE(1458)									_hx_tmp27 = (endIndex1 == (spaceIndex + (int)1));
            								}
            								else {
HXLINE(1458)									_hx_tmp27 = false;
            								}
HXDLIN(1458)								if (_hx_tmp27) {
HXLINE(1463)									 ::openfl::_internal::text::GlyphPosition lastPosition = positions->__get((positions->length - (int)1)).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1464)									Float spaceWidth2 = lastPosition->advance->x;
HXLINE(1466)									if ((((offsetX + widthValue) - spaceWidth2) <= (this->width - (int)2))) {
HXLINE(1468)										wrap = false;
            									}
            								}
            							}
            						}
HXLINE(1478)						if (wrap) {
HXLINE(1480)							bool _hx_tmp28;
HXDLIN(1480)							if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1480)								if (hx::IsNull( layoutGroup )) {
HXLINE(1480)									_hx_tmp28 = (this->layoutGroups->get_length() > (int)0);
            								}
            								else {
HXLINE(1480)									_hx_tmp28 = true;
            								}
            							}
            							else {
HXLINE(1480)								_hx_tmp28 = false;
            							}
HXDLIN(1480)							if (_hx_tmp28) {
HXLINE(1482)								 ::openfl::_internal::text::TextLayoutGroup previous = layoutGroup;
HXLINE(1483)								if (hx::IsNull( previous )) {
HXLINE(1484)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1484)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            								}
HXLINE(1488)								 ::openfl::_internal::text::TextLayoutGroup previous1 = previous;
HXDLIN(1488)								int index1 = (previous->positions->length - (int)1);
HXDLIN(1488)								Float _hx_tmp29;
HXDLIN(1488)								bool _hx_tmp30;
HXDLIN(1488)								if ((index1 >= (int)0)) {
HXLINE(1488)									_hx_tmp30 = (index1 < previous->positions->length);
            								}
            								else {
HXLINE(1488)									_hx_tmp30 = false;
            								}
HXDLIN(1488)								if (_hx_tmp30) {
HXLINE(1488)									_hx_tmp29 = previous->positions->__get(index1).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1488)									_hx_tmp29 = (int)0;
            								}
HXDLIN(1488)								previous1->width = (previous1->width - _hx_tmp29);
HXLINE(1489)								previous->endIndex--;
            							}
HXLINE(1493)							int i3 = (this->layoutGroups->get_length() - (int)1);
HXLINE(1494)							int offsetCount = (int)0;
HXLINE(1496)							while(true){
HXLINE(1498)								layoutGroup = this->layoutGroups->get(i3).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1500)								bool _hx_tmp31;
HXDLIN(1500)								if ((i3 > (int)0)) {
HXLINE(1500)									_hx_tmp31 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1500)									_hx_tmp31 = false;
            								}
HXDLIN(1500)								if (_hx_tmp31) {
HXLINE(1502)									offsetCount = (offsetCount + (int)1);
            								}
            								else {
HXLINE(1506)									goto _hx_goto_38;
            								}
HXLINE(1510)								i3 = (i3 - (int)1);
            							}
            							_hx_goto_38:;
HXLINE(1514)							if ((textIndex == (previousSpaceIndex + (int)1))) {
HXLINE(1516)								{
HXLINE(1516)									if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1516)										ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1516)										descent = (currentFormat->size * currentFormat->_hx___descent);
            									}
            									else {
HXLINE(1516)										bool _hx_tmp32;
HXDLIN(1516)										if (hx::IsNotNull( font )) {
HXLINE(1516)											_hx_tmp32 = (font->unitsPerEM != (int)0);
            										}
            										else {
HXLINE(1516)											_hx_tmp32 = false;
            										}
HXDLIN(1516)										if (_hx_tmp32) {
HXLINE(1516)											ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1516)											descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            										}
            										else {
HXLINE(1516)											ascent = currentFormat->size;
HXDLIN(1516)											descent = (currentFormat->size * ((Float)0.185));
            										}
            									}
HXDLIN(1516)									leading = currentFormat->leading;
HXDLIN(1516)									heightValue = ((ascent + descent) + leading);
HXDLIN(1516)									if ((heightValue > maxHeightValue)) {
HXLINE(1516)										maxHeightValue = heightValue;
            									}
HXDLIN(1516)									if ((ascent > maxAscent)) {
HXLINE(1516)										maxAscent = ascent;
            									}
            								}
HXDLIN(1516)								int i4 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1516)								while(true){
HXLINE(1516)									i4 = (i4 - (int)1);
HXDLIN(1516)									if (!((i4 > (int)-1))) {
HXLINE(1516)										goto _hx_goto_39;
            									}
HXDLIN(1516)									 ::openfl::_internal::text::TextLayoutGroup lg2 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i4)) );
HXDLIN(1516)									if ((lg2->lineIndex < lineIndex)) {
HXLINE(1516)										goto _hx_goto_39;
            									}
HXDLIN(1516)									if ((lg2->lineIndex > lineIndex)) {
HXLINE(1516)										continue;
            									}
HXDLIN(1516)									lg2->ascent = maxAscent;
HXDLIN(1516)									lg2->height = maxHeightValue;
            								}
            								_hx_goto_39:;
HXDLIN(1516)								offsetY = (offsetY + maxHeightValue);
HXDLIN(1516)								maxAscent = ((Float)0.0);
HXDLIN(1516)								maxHeightValue = ((Float)0.0);
HXDLIN(1516)								lineIndex = (lineIndex + (int)1);
HXDLIN(1516)								offsetX = (int)2;
            							}
HXLINE(1520)							offsetX = (int)2;
HXLINE(1522)							if ((offsetCount > (int)0)) {
HXLINE(1524)								::Dynamic this2 = this->layoutGroups;
HXDLIN(1524)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this2) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE(1526)								{
HXLINE(1526)									int _g13 = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1526)									int _g14 = this->layoutGroups->get_length();
HXDLIN(1526)									while((_g13 < _g14)){
HXLINE(1526)										_g13 = (_g13 + (int)1);
HXDLIN(1526)										int i5 = (_g13 - (int)1);
HXLINE(1528)										layoutGroup = this->layoutGroups->get(i5).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1529)										 ::openfl::_internal::text::TextLayoutGroup layoutGroup2 = layoutGroup;
HXDLIN(1529)										layoutGroup2->offsetX = (layoutGroup2->offsetX - bumpX);
HXLINE(1530)										layoutGroup->offsetY = offsetY;
HXLINE(1531)										layoutGroup->lineIndex = lineIndex;
HXLINE(1532)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1538)							{
HXLINE(1538)								bool _hx_tmp33;
HXDLIN(1538)								if ((_gthis->width >= (int)4)) {
HXLINE(1538)									_hx_tmp33 = _gthis->wordWrap;
            								}
            								else {
HXLINE(1538)									_hx_tmp33 = false;
            								}
HXDLIN(1538)								if (_hx_tmp33) {
HXLINE(1538)									::Array< ::Dynamic> remainingPositions1 = positions;
HXDLIN(1538)									int i6;
HXDLIN(1538)									int j1;
HXDLIN(1538)									int placeIndex1;
HXDLIN(1538)									Float positionWidth1;
HXDLIN(1538)									 ::openfl::_internal::text::GlyphPosition currentPosition1;
HXDLIN(1538)									 ::Dynamic tempPositions5;
HXDLIN(1538)									Float width25 = ((Float)0.0);
HXDLIN(1538)									{
HXLINE(1538)										int _g15 = (int)0;
HXDLIN(1538)										while((_g15 < remainingPositions1->length)){
HXLINE(1538)											 ::openfl::_internal::text::GlyphPosition position13 = remainingPositions1->__get(_g15).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)											_g15 = (_g15 + (int)1);
HXDLIN(1538)											width25 = (width25 + position13->advance->x);
            										}
            									}
HXDLIN(1538)									Float tempWidth1 = width25;
HXDLIN(1538)									while(((offsetX + tempWidth1) > (_gthis->width - (int)2))){
HXLINE(1538)										j1 = (int)0;
HXDLIN(1538)										i6 = j1;
HXDLIN(1538)										positionWidth1 = ((Float)0.0);
HXDLIN(1538)										while(((offsetX + positionWidth1) < (_gthis->width - (int)2))){
HXLINE(1538)											currentPosition1 = remainingPositions1->__get(i6).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)											if ((currentPosition1->advance->x == ((Float)0.0))) {
HXLINE(1538)												i6 = (i6 + (int)1);
HXDLIN(1538)												j1 = (j1 + (int)1);
            											}
            											else {
HXLINE(1538)												positionWidth1 = (positionWidth1 + currentPosition1->advance->x);
HXDLIN(1538)												i6 = (i6 + (int)1);
            											}
            										}
HXDLIN(1538)										bool _hx_tmp34;
HXDLIN(1538)										if ((i6 < (int)2)) {
HXLINE(1538)											_hx_tmp34 = (positionWidth1 > (_gthis->width - (int)4));
            										}
            										else {
HXLINE(1538)											_hx_tmp34 = false;
            										}
HXDLIN(1538)										if (_hx_tmp34) {
HXLINE(1538)											if ((((textIndex + i6) - j1) == endIndex1)) {
HXLINE(1538)												goto _hx_goto_42;
            											}
            										}
            										else {
HXLINE(1538)											while(((offsetX + positionWidth1) > (_gthis->width - (int)2))){
HXLINE(1538)												i6 = (i6 - (int)1);
HXDLIN(1538)												if (((i6 - j1) > (int)0)) {
HXLINE(1538)													{
HXLINE(1538)														int endIndex2 = ((textIndex + i6) - j1);
HXDLIN(1538)														if ((endIndex2 <= formatRange->end)) {
HXLINE(1538)															::String text12 = _gthis->text;
HXDLIN(1538)															Float letterSpacing12 = ((Float)0.0);
HXDLIN(1538)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1538)																letterSpacing12 = formatRange->format->letterSpacing;
            															}
HXDLIN(1538)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1538)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1538)															Float width26 = ((Float)0.0);
HXDLIN(1538)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1538)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1538)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1538)																_gthis->_hx___textLayout->set_size(formatRange->format->size);
            															}
HXDLIN(1538)															_gthis->_hx___textLayout->letterSpacing = letterSpacing12;
HXDLIN(1538)															bool positions9;
HXDLIN(1538)															if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1538)																positions9 = (_gthis->sharpness < (int)400);
            															}
            															else {
HXLINE(1538)																positions9 = true;
            															}
HXDLIN(1538)															_gthis->_hx___textLayout->autoHint = positions9;
HXDLIN(1538)															 ::openfl::_internal::text::TextLayout _gthis13 = _gthis->_hx___textLayout;
HXDLIN(1538)															_gthis13->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text12,textIndex,endIndex2));
HXDLIN(1538)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1538)															Float width27 = ((Float)0.0);
HXDLIN(1538)															{
HXLINE(1538)																int _g16 = (int)0;
HXDLIN(1538)																while((_g16 < positions->length)){
HXLINE(1538)																	 ::openfl::_internal::text::GlyphPosition position14 = positions->__get(_g16).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)																	_g16 = (_g16 + (int)1);
HXDLIN(1538)																	width27 = (width27 + position14->advance->x);
            																}
            															}
HXDLIN(1538)															widthValue = width27;
            														}
            														else {
HXLINE(1538)															int tempIndex4 = textIndex;
HXDLIN(1538)															int tempRangeEnd6 = formatRange->end;
HXDLIN(1538)															int countRanges4 = (int)0;
HXDLIN(1538)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1538)															widthValue = (int)0;
HXDLIN(1538)															while(true){
HXLINE(1538)																if ((tempIndex4 != tempRangeEnd6)) {
HXLINE(1538)																	::String text13 = _gthis->text;
HXDLIN(1538)																	Float letterSpacing13 = ((Float)0.0);
HXDLIN(1538)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1538)																		letterSpacing13 = formatRange->format->letterSpacing;
            																	}
HXDLIN(1538)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1538)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1538)																	Float width28 = ((Float)0.0);
HXDLIN(1538)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1538)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1538)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1538)																		_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																	}
HXDLIN(1538)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing13;
HXDLIN(1538)																	bool _hx_tmp35;
HXDLIN(1538)																	if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1538)																		_hx_tmp35 = (_gthis->sharpness < (int)400);
            																	}
            																	else {
HXLINE(1538)																		_hx_tmp35 = true;
            																	}
HXDLIN(1538)																	_gthis->_hx___textLayout->autoHint = _hx_tmp35;
HXDLIN(1538)																	 ::openfl::_internal::text::TextLayout _gthis14 = _gthis->_hx___textLayout;
HXDLIN(1538)																	_gthis14->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text13,tempIndex4,tempRangeEnd6));
HXDLIN(1538)																	::Array< ::Dynamic> tempPositions6 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1538)																	positions = positions->concat(tempPositions6);
            																}
HXDLIN(1538)																if ((tempRangeEnd6 != endIndex2)) {
HXLINE(1538)																	if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1538)																		rangeIndex = (rangeIndex + (int)1);
HXDLIN(1538)																		formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1538)																		currentFormat->_hx___merge(formatRange->format);
HXDLIN(1538)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																	}
HXDLIN(1538)																	tempIndex4 = tempRangeEnd6;
HXDLIN(1538)																	if ((endIndex2 < formatRange->end)) {
HXLINE(1538)																		tempRangeEnd6 = endIndex2;
            																	}
            																	else {
HXLINE(1538)																		tempRangeEnd6 = formatRange->end;
            																	}
HXDLIN(1538)																	countRanges4 = (countRanges4 + (int)1);
            																}
            																else {
HXLINE(1538)																	Float width29 = ((Float)0.0);
HXDLIN(1538)																	{
HXLINE(1538)																		int _g17 = (int)0;
HXDLIN(1538)																		while((_g17 < positions->length)){
HXLINE(1538)																			 ::openfl::_internal::text::GlyphPosition position15 = positions->__get(_g17).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)																			_g17 = (_g17 + (int)1);
HXDLIN(1538)																			width29 = (width29 + position15->advance->x);
            																		}
            																	}
HXDLIN(1538)																	widthValue = width29;
HXDLIN(1538)																	goto _hx_goto_46;
            																}
            															}
            															_hx_goto_46:;
HXDLIN(1538)															rangeIndex = (rangeIndex - (countRanges4 + (int)1));
HXDLIN(1538)															if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1538)																rangeIndex = (rangeIndex + (int)1);
HXDLIN(1538)																formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1538)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1538)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXDLIN(1538)													positionWidth1 = widthValue;
            												}
            												else {
HXLINE(1538)													i6 = (int)1;
HXDLIN(1538)													j1 = (int)0;
            												}
            											}
            										}
HXDLIN(1538)										placeIndex1 = ((textIndex + i6) - j1);
HXDLIN(1538)										{
HXLINE(1538)											if ((placeIndex1 <= formatRange->end)) {
HXLINE(1538)												::String text14 = _gthis->text;
HXDLIN(1538)												Float letterSpacing14 = ((Float)0.0);
HXDLIN(1538)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1538)													letterSpacing14 = formatRange->format->letterSpacing;
            												}
HXDLIN(1538)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1538)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1538)												Float width30 = ((Float)0.0);
HXDLIN(1538)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1538)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1538)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1538)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1538)												_gthis->_hx___textLayout->letterSpacing = letterSpacing14;
HXDLIN(1538)												bool positions10;
HXDLIN(1538)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1538)													positions10 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1538)													positions10 = true;
            												}
HXDLIN(1538)												_gthis->_hx___textLayout->autoHint = positions10;
HXDLIN(1538)												 ::openfl::_internal::text::TextLayout _gthis15 = _gthis->_hx___textLayout;
HXDLIN(1538)												_gthis15->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text14,textIndex,placeIndex1));
HXDLIN(1538)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1538)												Float width31 = ((Float)0.0);
HXDLIN(1538)												{
HXLINE(1538)													int _g18 = (int)0;
HXDLIN(1538)													while((_g18 < positions->length)){
HXLINE(1538)														 ::openfl::_internal::text::GlyphPosition position16 = positions->__get(_g18).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)														_g18 = (_g18 + (int)1);
HXDLIN(1538)														width31 = (width31 + position16->advance->x);
            													}
            												}
HXDLIN(1538)												widthValue = width31;
HXDLIN(1538)												bool _hx_tmp36;
HXDLIN(1538)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1538)													_hx_tmp36 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1538)													_hx_tmp36 = true;
            												}
HXDLIN(1538)												if (_hx_tmp36) {
HXLINE(1538)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex1);
HXDLIN(1538)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1538)													layoutGroup->format = formatRange->format;
HXDLIN(1538)													layoutGroup->startIndex = textIndex;
HXDLIN(1538)													layoutGroup->endIndex = placeIndex1;
            												}
HXDLIN(1538)												layoutGroup->positions = positions;
HXDLIN(1538)												layoutGroup->offsetX = offsetX;
HXDLIN(1538)												layoutGroup->ascent = ascent;
HXDLIN(1538)												layoutGroup->descent = descent;
HXDLIN(1538)												layoutGroup->leading = leading;
HXDLIN(1538)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1538)												layoutGroup->offsetY = offsetY;
HXDLIN(1538)												layoutGroup->width = widthValue;
HXDLIN(1538)												layoutGroup->height = heightValue;
HXDLIN(1538)												offsetX = (offsetX + widthValue);
HXDLIN(1538)												if ((placeIndex1 == formatRange->end)) {
HXLINE(1538)													layoutGroup = null();
HXDLIN(1538)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1538)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1538)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1538)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1538)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1538)													{
HXLINE(1538)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1538)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1538)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1538)															bool _hx_tmp37;
HXDLIN(1538)															if (hx::IsNotNull( font )) {
HXLINE(1538)																_hx_tmp37 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1538)																_hx_tmp37 = false;
            															}
HXDLIN(1538)															if (_hx_tmp37) {
HXLINE(1538)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1538)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1538)																ascent = currentFormat->size;
HXDLIN(1538)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1538)														leading = currentFormat->leading;
HXDLIN(1538)														heightValue = ((ascent + descent) + leading);
HXDLIN(1538)														if ((heightValue > maxHeightValue)) {
HXLINE(1538)															maxHeightValue = heightValue;
            														}
HXDLIN(1538)														if ((ascent > maxAscent)) {
HXLINE(1538)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1538)												while(true){
HXLINE(1538)													int tempRangeEnd7;
HXDLIN(1538)													if ((placeIndex1 < formatRange->end)) {
HXLINE(1538)														tempRangeEnd7 = placeIndex1;
            													}
            													else {
HXLINE(1538)														tempRangeEnd7 = formatRange->end;
            													}
HXDLIN(1538)													if ((textIndex != tempRangeEnd7)) {
HXLINE(1538)														::String text15 = _gthis->text;
HXDLIN(1538)														Float letterSpacing15 = ((Float)0.0);
HXDLIN(1538)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1538)															letterSpacing15 = formatRange->format->letterSpacing;
            														}
HXDLIN(1538)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1538)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1538)														Float width32 = ((Float)0.0);
HXDLIN(1538)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1538)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1538)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1538)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1538)														_gthis->_hx___textLayout->letterSpacing = letterSpacing15;
HXDLIN(1538)														bool positions11;
HXDLIN(1538)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1538)															positions11 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1538)															positions11 = true;
            														}
HXDLIN(1538)														_gthis->_hx___textLayout->autoHint = positions11;
HXDLIN(1538)														 ::openfl::_internal::text::TextLayout _gthis16 = _gthis->_hx___textLayout;
HXDLIN(1538)														_gthis16->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text15,textIndex,tempRangeEnd7));
HXDLIN(1538)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1538)														Float width33 = ((Float)0.0);
HXDLIN(1538)														{
HXLINE(1538)															int _g19 = (int)0;
HXDLIN(1538)															while((_g19 < positions->length)){
HXLINE(1538)																 ::openfl::_internal::text::GlyphPosition position17 = positions->__get(_g19).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)																_g19 = (_g19 + (int)1);
HXDLIN(1538)																width33 = (width33 + position17->advance->x);
            															}
            														}
HXDLIN(1538)														widthValue = width33;
HXDLIN(1538)														bool _hx_tmp38;
HXDLIN(1538)														if (hx::IsNotNull( layoutGroup )) {
HXLINE(1538)															_hx_tmp38 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1538)															_hx_tmp38 = true;
            														}
HXDLIN(1538)														if (_hx_tmp38) {
HXLINE(1538)															layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd7);
HXDLIN(1538)															::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            														}
            														else {
HXLINE(1538)															layoutGroup->format = formatRange->format;
HXDLIN(1538)															layoutGroup->startIndex = textIndex;
HXDLIN(1538)															layoutGroup->endIndex = tempRangeEnd7;
            														}
HXDLIN(1538)														layoutGroup->positions = positions;
HXDLIN(1538)														layoutGroup->offsetX = offsetX;
HXDLIN(1538)														layoutGroup->ascent = ascent;
HXDLIN(1538)														layoutGroup->descent = descent;
HXDLIN(1538)														layoutGroup->leading = leading;
HXDLIN(1538)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1538)														layoutGroup->offsetY = offsetY;
HXDLIN(1538)														layoutGroup->width = widthValue;
HXDLIN(1538)														layoutGroup->height = heightValue;
HXDLIN(1538)														offsetX = (offsetX + widthValue);
HXDLIN(1538)														textIndex = tempRangeEnd7;
            													}
HXDLIN(1538)													if ((tempRangeEnd7 == formatRange->end)) {
HXLINE(1538)														layoutGroup = null();
            													}
HXDLIN(1538)													if ((tempRangeEnd7 == placeIndex1)) {
HXLINE(1538)														goto _hx_goto_49;
            													}
HXDLIN(1538)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1538)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1538)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1538)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1538)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1538)													{
HXLINE(1538)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1538)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1538)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1538)															bool _hx_tmp39;
HXDLIN(1538)															if (hx::IsNotNull( font )) {
HXLINE(1538)																_hx_tmp39 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1538)																_hx_tmp39 = false;
            															}
HXDLIN(1538)															if (_hx_tmp39) {
HXLINE(1538)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1538)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1538)																ascent = currentFormat->size;
HXDLIN(1538)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1538)														leading = currentFormat->leading;
HXDLIN(1538)														heightValue = ((ascent + descent) + leading);
HXDLIN(1538)														if ((heightValue > maxHeightValue)) {
HXLINE(1538)															maxHeightValue = heightValue;
            														}
HXDLIN(1538)														if ((ascent > maxAscent)) {
HXLINE(1538)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_49:;
            											}
HXDLIN(1538)											textIndex = placeIndex1;
            										}
HXDLIN(1538)										{
HXLINE(1538)											{
HXLINE(1538)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1538)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1538)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1538)													bool _hx_tmp40;
HXDLIN(1538)													if (hx::IsNotNull( font )) {
HXLINE(1538)														_hx_tmp40 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1538)														_hx_tmp40 = false;
            													}
HXDLIN(1538)													if (_hx_tmp40) {
HXLINE(1538)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1538)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1538)														ascent = currentFormat->size;
HXDLIN(1538)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1538)												leading = currentFormat->leading;
HXDLIN(1538)												heightValue = ((ascent + descent) + leading);
HXDLIN(1538)												if ((heightValue > maxHeightValue)) {
HXLINE(1538)													maxHeightValue = heightValue;
            												}
HXDLIN(1538)												if ((ascent > maxAscent)) {
HXLINE(1538)													maxAscent = ascent;
            												}
            											}
HXDLIN(1538)											int i7 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1538)											while(true){
HXLINE(1538)												i7 = (i7 - (int)1);
HXDLIN(1538)												if (!((i7 > (int)-1))) {
HXLINE(1538)													goto _hx_goto_51;
            												}
HXDLIN(1538)												 ::openfl::_internal::text::TextLayoutGroup lg3 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i7)) );
HXDLIN(1538)												if ((lg3->lineIndex < lineIndex)) {
HXLINE(1538)													goto _hx_goto_51;
            												}
HXDLIN(1538)												if ((lg3->lineIndex > lineIndex)) {
HXLINE(1538)													continue;
            												}
HXDLIN(1538)												lg3->ascent = maxAscent;
HXDLIN(1538)												lg3->height = maxHeightValue;
            											}
            											_hx_goto_51:;
HXDLIN(1538)											offsetY = (offsetY + maxHeightValue);
HXDLIN(1538)											maxAscent = ((Float)0.0);
HXDLIN(1538)											maxHeightValue = ((Float)0.0);
HXDLIN(1538)											lineIndex = (lineIndex + (int)1);
HXDLIN(1538)											offsetX = (int)2;
            										}
HXDLIN(1538)										if ((endIndex1 <= formatRange->end)) {
HXLINE(1538)											::String text16 = _gthis->text;
HXDLIN(1538)											Float letterSpacing16 = ((Float)0.0);
HXDLIN(1538)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1538)												letterSpacing16 = formatRange->format->letterSpacing;
            											}
HXDLIN(1538)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1538)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1538)											Float width34 = ((Float)0.0);
HXDLIN(1538)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1538)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1538)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1538)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1538)											_gthis->_hx___textLayout->letterSpacing = letterSpacing16;
HXDLIN(1538)											bool positions12;
HXDLIN(1538)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1538)												positions12 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1538)												positions12 = true;
            											}
HXDLIN(1538)											_gthis->_hx___textLayout->autoHint = positions12;
HXDLIN(1538)											 ::openfl::_internal::text::TextLayout _gthis17 = _gthis->_hx___textLayout;
HXDLIN(1538)											_gthis17->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text16,placeIndex1,endIndex1));
HXDLIN(1538)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1538)											Float width35 = ((Float)0.0);
HXDLIN(1538)											{
HXLINE(1538)												int _g20 = (int)0;
HXDLIN(1538)												while((_g20 < positions->length)){
HXLINE(1538)													 ::openfl::_internal::text::GlyphPosition position18 = positions->__get(_g20).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)													_g20 = (_g20 + (int)1);
HXDLIN(1538)													width35 = (width35 + position18->advance->x);
            												}
            											}
HXDLIN(1538)											widthValue = width35;
            										}
            										else {
HXLINE(1538)											int tempIndex5 = placeIndex1;
HXDLIN(1538)											int tempRangeEnd8 = formatRange->end;
HXDLIN(1538)											int countRanges5 = (int)0;
HXDLIN(1538)											positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1538)											widthValue = (int)0;
HXDLIN(1538)											while(true){
HXLINE(1538)												if ((tempIndex5 != tempRangeEnd8)) {
HXLINE(1538)													::String text17 = _gthis->text;
HXDLIN(1538)													Float letterSpacing17 = ((Float)0.0);
HXDLIN(1538)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1538)														letterSpacing17 = formatRange->format->letterSpacing;
            													}
HXDLIN(1538)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1538)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1538)													Float width36 = ((Float)0.0);
HXDLIN(1538)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1538)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1538)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1538)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1538)													_gthis->_hx___textLayout->letterSpacing = letterSpacing17;
HXDLIN(1538)													bool _hx_tmp41;
HXDLIN(1538)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1538)														_hx_tmp41 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1538)														_hx_tmp41 = true;
            													}
HXDLIN(1538)													_gthis->_hx___textLayout->autoHint = _hx_tmp41;
HXDLIN(1538)													 ::openfl::_internal::text::TextLayout _gthis18 = _gthis->_hx___textLayout;
HXDLIN(1538)													_gthis18->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text17,tempIndex5,tempRangeEnd8));
HXDLIN(1538)													::Array< ::Dynamic> tempPositions7 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1538)													positions = positions->concat(tempPositions7);
            												}
HXDLIN(1538)												if ((tempRangeEnd8 != endIndex1)) {
HXLINE(1538)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1538)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1538)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1538)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1538)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1538)													tempIndex5 = tempRangeEnd8;
HXDLIN(1538)													if ((endIndex1 < formatRange->end)) {
HXLINE(1538)														tempRangeEnd8 = endIndex1;
            													}
            													else {
HXLINE(1538)														tempRangeEnd8 = formatRange->end;
            													}
HXDLIN(1538)													countRanges5 = (countRanges5 + (int)1);
            												}
            												else {
HXLINE(1538)													Float width37 = ((Float)0.0);
HXDLIN(1538)													{
HXLINE(1538)														int _g21 = (int)0;
HXDLIN(1538)														while((_g21 < positions->length)){
HXLINE(1538)															 ::openfl::_internal::text::GlyphPosition position19 = positions->__get(_g21).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)															_g21 = (_g21 + (int)1);
HXDLIN(1538)															width37 = (width37 + position19->advance->x);
            														}
            													}
HXDLIN(1538)													widthValue = width37;
HXDLIN(1538)													goto _hx_goto_53;
            												}
            											}
            											_hx_goto_53:;
HXDLIN(1538)											rangeIndex = (rangeIndex - (countRanges5 + (int)1));
HXDLIN(1538)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1538)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1538)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1538)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1538)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
            										}
HXDLIN(1538)										remainingPositions1 = positions;
HXDLIN(1538)										tempWidth1 = widthValue;
            									}
            									_hx_goto_42:;
            								}
HXDLIN(1538)								{
HXLINE(1538)									if ((endIndex1 <= formatRange->end)) {
HXLINE(1538)										::String text18 = _gthis->text;
HXDLIN(1538)										Float letterSpacing18 = ((Float)0.0);
HXDLIN(1538)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1538)											letterSpacing18 = formatRange->format->letterSpacing;
            										}
HXDLIN(1538)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1538)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1538)										Float width38 = ((Float)0.0);
HXDLIN(1538)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1538)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1538)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1538)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1538)										_gthis->_hx___textLayout->letterSpacing = letterSpacing18;
HXDLIN(1538)										bool positions13;
HXDLIN(1538)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1538)											positions13 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1538)											positions13 = true;
            										}
HXDLIN(1538)										_gthis->_hx___textLayout->autoHint = positions13;
HXDLIN(1538)										 ::openfl::_internal::text::TextLayout _gthis19 = _gthis->_hx___textLayout;
HXDLIN(1538)										_gthis19->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text18,textIndex,endIndex1));
HXDLIN(1538)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1538)										Float width39 = ((Float)0.0);
HXDLIN(1538)										{
HXLINE(1538)											int _g22 = (int)0;
HXDLIN(1538)											while((_g22 < positions->length)){
HXLINE(1538)												 ::openfl::_internal::text::GlyphPosition position20 = positions->__get(_g22).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)												_g22 = (_g22 + (int)1);
HXDLIN(1538)												width39 = (width39 + position20->advance->x);
            											}
            										}
HXDLIN(1538)										widthValue = width39;
HXDLIN(1538)										bool _hx_tmp42;
HXDLIN(1538)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1538)											_hx_tmp42 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1538)											_hx_tmp42 = true;
            										}
HXDLIN(1538)										if (_hx_tmp42) {
HXLINE(1538)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXDLIN(1538)											::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            										}
            										else {
HXLINE(1538)											layoutGroup->format = formatRange->format;
HXDLIN(1538)											layoutGroup->startIndex = textIndex;
HXDLIN(1538)											layoutGroup->endIndex = endIndex1;
            										}
HXDLIN(1538)										layoutGroup->positions = positions;
HXDLIN(1538)										layoutGroup->offsetX = offsetX;
HXDLIN(1538)										layoutGroup->ascent = ascent;
HXDLIN(1538)										layoutGroup->descent = descent;
HXDLIN(1538)										layoutGroup->leading = leading;
HXDLIN(1538)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1538)										layoutGroup->offsetY = offsetY;
HXDLIN(1538)										layoutGroup->width = widthValue;
HXDLIN(1538)										layoutGroup->height = heightValue;
HXDLIN(1538)										offsetX = (offsetX + widthValue);
HXDLIN(1538)										if ((endIndex1 == formatRange->end)) {
HXLINE(1538)											layoutGroup = null();
HXDLIN(1538)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1538)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1538)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1538)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1538)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1538)											{
HXLINE(1538)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1538)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1538)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1538)													bool _hx_tmp43;
HXDLIN(1538)													if (hx::IsNotNull( font )) {
HXLINE(1538)														_hx_tmp43 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1538)														_hx_tmp43 = false;
            													}
HXDLIN(1538)													if (_hx_tmp43) {
HXLINE(1538)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1538)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1538)														ascent = currentFormat->size;
HXDLIN(1538)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1538)												leading = currentFormat->leading;
HXDLIN(1538)												heightValue = ((ascent + descent) + leading);
HXDLIN(1538)												if ((heightValue > maxHeightValue)) {
HXLINE(1538)													maxHeightValue = heightValue;
            												}
HXDLIN(1538)												if ((ascent > maxAscent)) {
HXLINE(1538)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1538)										while(true){
HXLINE(1538)											int tempRangeEnd9;
HXDLIN(1538)											if ((endIndex1 < formatRange->end)) {
HXLINE(1538)												tempRangeEnd9 = endIndex1;
            											}
            											else {
HXLINE(1538)												tempRangeEnd9 = formatRange->end;
            											}
HXDLIN(1538)											if ((textIndex != tempRangeEnd9)) {
HXLINE(1538)												::String text19 = _gthis->text;
HXDLIN(1538)												Float letterSpacing19 = ((Float)0.0);
HXDLIN(1538)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1538)													letterSpacing19 = formatRange->format->letterSpacing;
            												}
HXDLIN(1538)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1538)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1538)												Float width40 = ((Float)0.0);
HXDLIN(1538)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1538)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1538)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1538)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1538)												_gthis->_hx___textLayout->letterSpacing = letterSpacing19;
HXDLIN(1538)												bool positions14;
HXDLIN(1538)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1538)													positions14 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1538)													positions14 = true;
            												}
HXDLIN(1538)												_gthis->_hx___textLayout->autoHint = positions14;
HXDLIN(1538)												 ::openfl::_internal::text::TextLayout _gthis20 = _gthis->_hx___textLayout;
HXDLIN(1538)												_gthis20->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text19,textIndex,tempRangeEnd9));
HXDLIN(1538)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1538)												Float width41 = ((Float)0.0);
HXDLIN(1538)												{
HXLINE(1538)													int _g23 = (int)0;
HXDLIN(1538)													while((_g23 < positions->length)){
HXLINE(1538)														 ::openfl::_internal::text::GlyphPosition position21 = positions->__get(_g23).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1538)														_g23 = (_g23 + (int)1);
HXDLIN(1538)														width41 = (width41 + position21->advance->x);
            													}
            												}
HXDLIN(1538)												widthValue = width41;
HXDLIN(1538)												bool _hx_tmp44;
HXDLIN(1538)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1538)													_hx_tmp44 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1538)													_hx_tmp44 = true;
            												}
HXDLIN(1538)												if (_hx_tmp44) {
HXLINE(1538)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd9);
HXDLIN(1538)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1538)													layoutGroup->format = formatRange->format;
HXDLIN(1538)													layoutGroup->startIndex = textIndex;
HXDLIN(1538)													layoutGroup->endIndex = tempRangeEnd9;
            												}
HXDLIN(1538)												layoutGroup->positions = positions;
HXDLIN(1538)												layoutGroup->offsetX = offsetX;
HXDLIN(1538)												layoutGroup->ascent = ascent;
HXDLIN(1538)												layoutGroup->descent = descent;
HXDLIN(1538)												layoutGroup->leading = leading;
HXDLIN(1538)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1538)												layoutGroup->offsetY = offsetY;
HXDLIN(1538)												layoutGroup->width = widthValue;
HXDLIN(1538)												layoutGroup->height = heightValue;
HXDLIN(1538)												offsetX = (offsetX + widthValue);
HXDLIN(1538)												textIndex = tempRangeEnd9;
            											}
HXDLIN(1538)											if ((tempRangeEnd9 == formatRange->end)) {
HXLINE(1538)												layoutGroup = null();
            											}
HXDLIN(1538)											if ((tempRangeEnd9 == endIndex1)) {
HXLINE(1538)												goto _hx_goto_56;
            											}
HXDLIN(1538)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1538)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1538)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1538)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1538)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1538)											{
HXLINE(1538)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1538)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1538)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1538)													bool _hx_tmp45;
HXDLIN(1538)													if (hx::IsNotNull( font )) {
HXLINE(1538)														_hx_tmp45 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1538)														_hx_tmp45 = false;
            													}
HXDLIN(1538)													if (_hx_tmp45) {
HXLINE(1538)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1538)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1538)														ascent = currentFormat->size;
HXDLIN(1538)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1538)												leading = currentFormat->leading;
HXDLIN(1538)												heightValue = ((ascent + descent) + leading);
HXDLIN(1538)												if ((heightValue > maxHeightValue)) {
HXLINE(1538)													maxHeightValue = heightValue;
            												}
HXDLIN(1538)												if ((ascent > maxAscent)) {
HXLINE(1538)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_56:;
            									}
HXDLIN(1538)									textIndex = endIndex1;
            								}
            							}
HXLINE(1540)							wrap = false;
            						}
            						else {
HXLINE(1544)							bool _hx_tmp46;
HXDLIN(1544)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1544)								_hx_tmp46 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1544)								_hx_tmp46 = false;
            							}
HXDLIN(1544)							if (_hx_tmp46) {
HXLINE(1547)								if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1549)									layoutGroup->endIndex = spaceIndex;
HXLINE(1550)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1551)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1551)									layoutGroup3->width = (layoutGroup3->width + widthValue);
            								}
HXLINE(1555)								offsetX = (offsetX + widthValue);
HXLINE(1557)								textIndex = endIndex1;
            							}
            							else {
HXLINE(1559)								bool _hx_tmp47;
HXDLIN(1559)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1559)									_hx_tmp47 = hx::IsEq( lineFormat->align,(int)2 );
            								}
            								else {
HXLINE(1559)									_hx_tmp47 = true;
            								}
HXDLIN(1559)								if (_hx_tmp47) {
HXLINE(1561)									bool _hx_tmp48;
HXDLIN(1561)									if ((_gthis->width >= (int)4)) {
HXLINE(1561)										_hx_tmp48 = _gthis->wordWrap;
            									}
            									else {
HXLINE(1561)										_hx_tmp48 = false;
            									}
HXDLIN(1561)									if (_hx_tmp48) {
HXLINE(1561)										::Array< ::Dynamic> remainingPositions2 = positions;
HXDLIN(1561)										int i8;
HXDLIN(1561)										int j2;
HXDLIN(1561)										int placeIndex2;
HXDLIN(1561)										Float positionWidth2;
HXDLIN(1561)										 ::openfl::_internal::text::GlyphPosition currentPosition2;
HXDLIN(1561)										 ::Dynamic tempPositions8;
HXDLIN(1561)										Float width42 = ((Float)0.0);
HXDLIN(1561)										{
HXLINE(1561)											int _g24 = (int)0;
HXDLIN(1561)											while((_g24 < remainingPositions2->length)){
HXLINE(1561)												 ::openfl::_internal::text::GlyphPosition position22 = remainingPositions2->__get(_g24).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)												_g24 = (_g24 + (int)1);
HXDLIN(1561)												width42 = (width42 + position22->advance->x);
            											}
            										}
HXDLIN(1561)										Float tempWidth2 = width42;
HXDLIN(1561)										while(((offsetX + tempWidth2) > (_gthis->width - (int)2))){
HXLINE(1561)											j2 = (int)0;
HXDLIN(1561)											i8 = j2;
HXDLIN(1561)											positionWidth2 = ((Float)0.0);
HXDLIN(1561)											while(((offsetX + positionWidth2) < (_gthis->width - (int)2))){
HXLINE(1561)												currentPosition2 = remainingPositions2->__get(i8).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)												if ((currentPosition2->advance->x == ((Float)0.0))) {
HXLINE(1561)													i8 = (i8 + (int)1);
HXDLIN(1561)													j2 = (j2 + (int)1);
            												}
            												else {
HXLINE(1561)													positionWidth2 = (positionWidth2 + currentPosition2->advance->x);
HXDLIN(1561)													i8 = (i8 + (int)1);
            												}
            											}
HXDLIN(1561)											bool _hx_tmp49;
HXDLIN(1561)											if ((i8 < (int)2)) {
HXLINE(1561)												_hx_tmp49 = (positionWidth2 > (_gthis->width - (int)4));
            											}
            											else {
HXLINE(1561)												_hx_tmp49 = false;
            											}
HXDLIN(1561)											if (_hx_tmp49) {
HXLINE(1561)												if ((((textIndex + i8) - j2) == endIndex1)) {
HXLINE(1561)													goto _hx_goto_59;
            												}
            											}
            											else {
HXLINE(1561)												while(((offsetX + positionWidth2) > (_gthis->width - (int)2))){
HXLINE(1561)													i8 = (i8 - (int)1);
HXDLIN(1561)													if (((i8 - j2) > (int)0)) {
HXLINE(1561)														{
HXLINE(1561)															int endIndex3 = ((textIndex + i8) - j2);
HXDLIN(1561)															if ((endIndex3 <= formatRange->end)) {
HXLINE(1561)																::String text20 = _gthis->text;
HXDLIN(1561)																Float letterSpacing20 = ((Float)0.0);
HXDLIN(1561)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1561)																	letterSpacing20 = formatRange->format->letterSpacing;
            																}
HXDLIN(1561)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1561)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1561)																Float width43 = ((Float)0.0);
HXDLIN(1561)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1561)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1561)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1561)																	_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																}
HXDLIN(1561)																_gthis->_hx___textLayout->letterSpacing = letterSpacing20;
HXDLIN(1561)																bool positions15;
HXDLIN(1561)																if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1561)																	positions15 = (_gthis->sharpness < (int)400);
            																}
            																else {
HXLINE(1561)																	positions15 = true;
            																}
HXDLIN(1561)																_gthis->_hx___textLayout->autoHint = positions15;
HXDLIN(1561)																 ::openfl::_internal::text::TextLayout _gthis21 = _gthis->_hx___textLayout;
HXDLIN(1561)																_gthis21->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text20,textIndex,endIndex3));
HXDLIN(1561)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1561)																Float width44 = ((Float)0.0);
HXDLIN(1561)																{
HXLINE(1561)																	int _g25 = (int)0;
HXDLIN(1561)																	while((_g25 < positions->length)){
HXLINE(1561)																		 ::openfl::_internal::text::GlyphPosition position23 = positions->__get(_g25).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)																		_g25 = (_g25 + (int)1);
HXDLIN(1561)																		width44 = (width44 + position23->advance->x);
            																	}
            																}
HXDLIN(1561)																widthValue = width44;
            															}
            															else {
HXLINE(1561)																int tempIndex6 = textIndex;
HXDLIN(1561)																int tempRangeEnd10 = formatRange->end;
HXDLIN(1561)																int countRanges6 = (int)0;
HXDLIN(1561)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1561)																widthValue = (int)0;
HXDLIN(1561)																while(true){
HXLINE(1561)																	if ((tempIndex6 != tempRangeEnd10)) {
HXLINE(1561)																		::String text21 = _gthis->text;
HXDLIN(1561)																		Float letterSpacing21 = ((Float)0.0);
HXDLIN(1561)																		if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1561)																			letterSpacing21 = formatRange->format->letterSpacing;
            																		}
HXDLIN(1561)																		if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1561)																			_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1561)																		Float width45 = ((Float)0.0);
HXDLIN(1561)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1561)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1561)																		if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1561)																			_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																		}
HXDLIN(1561)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing21;
HXDLIN(1561)																		bool _hx_tmp50;
HXDLIN(1561)																		if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1561)																			_hx_tmp50 = (_gthis->sharpness < (int)400);
            																		}
            																		else {
HXLINE(1561)																			_hx_tmp50 = true;
            																		}
HXDLIN(1561)																		_gthis->_hx___textLayout->autoHint = _hx_tmp50;
HXDLIN(1561)																		 ::openfl::_internal::text::TextLayout _gthis22 = _gthis->_hx___textLayout;
HXDLIN(1561)																		_gthis22->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text21,tempIndex6,tempRangeEnd10));
HXDLIN(1561)																		::Array< ::Dynamic> tempPositions9 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1561)																		positions = positions->concat(tempPositions9);
            																	}
HXDLIN(1561)																	if ((tempRangeEnd10 != endIndex3)) {
HXLINE(1561)																		if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1561)																			rangeIndex = (rangeIndex + (int)1);
HXDLIN(1561)																			formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1561)																			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1561)																			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																		}
HXDLIN(1561)																		tempIndex6 = tempRangeEnd10;
HXDLIN(1561)																		if ((endIndex3 < formatRange->end)) {
HXLINE(1561)																			tempRangeEnd10 = endIndex3;
            																		}
            																		else {
HXLINE(1561)																			tempRangeEnd10 = formatRange->end;
            																		}
HXDLIN(1561)																		countRanges6 = (countRanges6 + (int)1);
            																	}
            																	else {
HXLINE(1561)																		Float width46 = ((Float)0.0);
HXDLIN(1561)																		{
HXLINE(1561)																			int _g26 = (int)0;
HXDLIN(1561)																			while((_g26 < positions->length)){
HXLINE(1561)																				 ::openfl::_internal::text::GlyphPosition position24 = positions->__get(_g26).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)																				_g26 = (_g26 + (int)1);
HXDLIN(1561)																				width46 = (width46 + position24->advance->x);
            																			}
            																		}
HXDLIN(1561)																		widthValue = width46;
HXDLIN(1561)																		goto _hx_goto_63;
            																	}
            																}
            																_hx_goto_63:;
HXDLIN(1561)																rangeIndex = (rangeIndex - (countRanges6 + (int)1));
HXDLIN(1561)																if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1561)																	rangeIndex = (rangeIndex + (int)1);
HXDLIN(1561)																	formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1561)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1561)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXDLIN(1561)														positionWidth2 = widthValue;
            													}
            													else {
HXLINE(1561)														i8 = (int)1;
HXDLIN(1561)														j2 = (int)0;
            													}
            												}
            											}
HXDLIN(1561)											placeIndex2 = ((textIndex + i8) - j2);
HXDLIN(1561)											{
HXLINE(1561)												if ((placeIndex2 <= formatRange->end)) {
HXLINE(1561)													::String text22 = _gthis->text;
HXDLIN(1561)													Float letterSpacing22 = ((Float)0.0);
HXDLIN(1561)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1561)														letterSpacing22 = formatRange->format->letterSpacing;
            													}
HXDLIN(1561)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1561)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1561)													Float width47 = ((Float)0.0);
HXDLIN(1561)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1561)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1561)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1561)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1561)													_gthis->_hx___textLayout->letterSpacing = letterSpacing22;
HXDLIN(1561)													bool positions16;
HXDLIN(1561)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1561)														positions16 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1561)														positions16 = true;
            													}
HXDLIN(1561)													_gthis->_hx___textLayout->autoHint = positions16;
HXDLIN(1561)													 ::openfl::_internal::text::TextLayout _gthis23 = _gthis->_hx___textLayout;
HXDLIN(1561)													_gthis23->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text22,textIndex,placeIndex2));
HXDLIN(1561)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1561)													Float width48 = ((Float)0.0);
HXDLIN(1561)													{
HXLINE(1561)														int _g27 = (int)0;
HXDLIN(1561)														while((_g27 < positions->length)){
HXLINE(1561)															 ::openfl::_internal::text::GlyphPosition position25 = positions->__get(_g27).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)															_g27 = (_g27 + (int)1);
HXDLIN(1561)															width48 = (width48 + position25->advance->x);
            														}
            													}
HXDLIN(1561)													widthValue = width48;
HXDLIN(1561)													bool _hx_tmp51;
HXDLIN(1561)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1561)														_hx_tmp51 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1561)														_hx_tmp51 = true;
            													}
HXDLIN(1561)													if (_hx_tmp51) {
HXLINE(1561)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex2);
HXDLIN(1561)														::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            													}
            													else {
HXLINE(1561)														layoutGroup->format = formatRange->format;
HXDLIN(1561)														layoutGroup->startIndex = textIndex;
HXDLIN(1561)														layoutGroup->endIndex = placeIndex2;
            													}
HXDLIN(1561)													layoutGroup->positions = positions;
HXDLIN(1561)													layoutGroup->offsetX = offsetX;
HXDLIN(1561)													layoutGroup->ascent = ascent;
HXDLIN(1561)													layoutGroup->descent = descent;
HXDLIN(1561)													layoutGroup->leading = leading;
HXDLIN(1561)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1561)													layoutGroup->offsetY = offsetY;
HXDLIN(1561)													layoutGroup->width = widthValue;
HXDLIN(1561)													layoutGroup->height = heightValue;
HXDLIN(1561)													offsetX = (offsetX + widthValue);
HXDLIN(1561)													if ((placeIndex2 == formatRange->end)) {
HXLINE(1561)														layoutGroup = null();
HXDLIN(1561)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1561)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1561)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1561)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1561)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXDLIN(1561)														{
HXLINE(1561)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1561)																ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1561)																descent = (currentFormat->size * currentFormat->_hx___descent);
            															}
            															else {
HXLINE(1561)																bool _hx_tmp52;
HXDLIN(1561)																if (hx::IsNotNull( font )) {
HXLINE(1561)																	_hx_tmp52 = (font->unitsPerEM != (int)0);
            																}
            																else {
HXLINE(1561)																	_hx_tmp52 = false;
            																}
HXDLIN(1561)																if (_hx_tmp52) {
HXLINE(1561)																	ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1561)																	descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            																}
            																else {
HXLINE(1561)																	ascent = currentFormat->size;
HXDLIN(1561)																	descent = (currentFormat->size * ((Float)0.185));
            																}
            															}
HXDLIN(1561)															leading = currentFormat->leading;
HXDLIN(1561)															heightValue = ((ascent + descent) + leading);
HXDLIN(1561)															if ((heightValue > maxHeightValue)) {
HXLINE(1561)																maxHeightValue = heightValue;
            															}
HXDLIN(1561)															if ((ascent > maxAscent)) {
HXLINE(1561)																maxAscent = ascent;
            															}
            														}
            													}
            												}
            												else {
HXLINE(1561)													while(true){
HXLINE(1561)														int tempRangeEnd11;
HXDLIN(1561)														if ((placeIndex2 < formatRange->end)) {
HXLINE(1561)															tempRangeEnd11 = placeIndex2;
            														}
            														else {
HXLINE(1561)															tempRangeEnd11 = formatRange->end;
            														}
HXDLIN(1561)														if ((textIndex != tempRangeEnd11)) {
HXLINE(1561)															::String text23 = _gthis->text;
HXDLIN(1561)															Float letterSpacing23 = ((Float)0.0);
HXDLIN(1561)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1561)																letterSpacing23 = formatRange->format->letterSpacing;
            															}
HXDLIN(1561)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1561)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1561)															Float width49 = ((Float)0.0);
HXDLIN(1561)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1561)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1561)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1561)																_gthis->_hx___textLayout->set_size(formatRange->format->size);
            															}
HXDLIN(1561)															_gthis->_hx___textLayout->letterSpacing = letterSpacing23;
HXDLIN(1561)															bool positions17;
HXDLIN(1561)															if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1561)																positions17 = (_gthis->sharpness < (int)400);
            															}
            															else {
HXLINE(1561)																positions17 = true;
            															}
HXDLIN(1561)															_gthis->_hx___textLayout->autoHint = positions17;
HXDLIN(1561)															 ::openfl::_internal::text::TextLayout _gthis24 = _gthis->_hx___textLayout;
HXDLIN(1561)															_gthis24->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text23,textIndex,tempRangeEnd11));
HXDLIN(1561)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1561)															Float width50 = ((Float)0.0);
HXDLIN(1561)															{
HXLINE(1561)																int _g28 = (int)0;
HXDLIN(1561)																while((_g28 < positions->length)){
HXLINE(1561)																	 ::openfl::_internal::text::GlyphPosition position26 = positions->__get(_g28).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)																	_g28 = (_g28 + (int)1);
HXDLIN(1561)																	width50 = (width50 + position26->advance->x);
            																}
            															}
HXDLIN(1561)															widthValue = width50;
HXDLIN(1561)															bool _hx_tmp53;
HXDLIN(1561)															if (hx::IsNotNull( layoutGroup )) {
HXLINE(1561)																_hx_tmp53 = (layoutGroup->startIndex != layoutGroup->endIndex);
            															}
            															else {
HXLINE(1561)																_hx_tmp53 = true;
            															}
HXDLIN(1561)															if (_hx_tmp53) {
HXLINE(1561)																layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd11);
HXDLIN(1561)																::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            															}
            															else {
HXLINE(1561)																layoutGroup->format = formatRange->format;
HXDLIN(1561)																layoutGroup->startIndex = textIndex;
HXDLIN(1561)																layoutGroup->endIndex = tempRangeEnd11;
            															}
HXDLIN(1561)															layoutGroup->positions = positions;
HXDLIN(1561)															layoutGroup->offsetX = offsetX;
HXDLIN(1561)															layoutGroup->ascent = ascent;
HXDLIN(1561)															layoutGroup->descent = descent;
HXDLIN(1561)															layoutGroup->leading = leading;
HXDLIN(1561)															layoutGroup->lineIndex = lineIndex;
HXDLIN(1561)															layoutGroup->offsetY = offsetY;
HXDLIN(1561)															layoutGroup->width = widthValue;
HXDLIN(1561)															layoutGroup->height = heightValue;
HXDLIN(1561)															offsetX = (offsetX + widthValue);
HXDLIN(1561)															textIndex = tempRangeEnd11;
            														}
HXDLIN(1561)														if ((tempRangeEnd11 == formatRange->end)) {
HXLINE(1561)															layoutGroup = null();
            														}
HXDLIN(1561)														if ((tempRangeEnd11 == placeIndex2)) {
HXLINE(1561)															goto _hx_goto_66;
            														}
HXDLIN(1561)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1561)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1561)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1561)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1561)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXDLIN(1561)														{
HXLINE(1561)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1561)																ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1561)																descent = (currentFormat->size * currentFormat->_hx___descent);
            															}
            															else {
HXLINE(1561)																bool _hx_tmp54;
HXDLIN(1561)																if (hx::IsNotNull( font )) {
HXLINE(1561)																	_hx_tmp54 = (font->unitsPerEM != (int)0);
            																}
            																else {
HXLINE(1561)																	_hx_tmp54 = false;
            																}
HXDLIN(1561)																if (_hx_tmp54) {
HXLINE(1561)																	ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1561)																	descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            																}
            																else {
HXLINE(1561)																	ascent = currentFormat->size;
HXDLIN(1561)																	descent = (currentFormat->size * ((Float)0.185));
            																}
            															}
HXDLIN(1561)															leading = currentFormat->leading;
HXDLIN(1561)															heightValue = ((ascent + descent) + leading);
HXDLIN(1561)															if ((heightValue > maxHeightValue)) {
HXLINE(1561)																maxHeightValue = heightValue;
            															}
HXDLIN(1561)															if ((ascent > maxAscent)) {
HXLINE(1561)																maxAscent = ascent;
            															}
            														}
            													}
            													_hx_goto_66:;
            												}
HXDLIN(1561)												textIndex = placeIndex2;
            											}
HXDLIN(1561)											{
HXLINE(1561)												{
HXLINE(1561)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1561)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1561)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1561)														bool _hx_tmp55;
HXDLIN(1561)														if (hx::IsNotNull( font )) {
HXLINE(1561)															_hx_tmp55 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1561)															_hx_tmp55 = false;
            														}
HXDLIN(1561)														if (_hx_tmp55) {
HXLINE(1561)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1561)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1561)															ascent = currentFormat->size;
HXDLIN(1561)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1561)													leading = currentFormat->leading;
HXDLIN(1561)													heightValue = ((ascent + descent) + leading);
HXDLIN(1561)													if ((heightValue > maxHeightValue)) {
HXLINE(1561)														maxHeightValue = heightValue;
            													}
HXDLIN(1561)													if ((ascent > maxAscent)) {
HXLINE(1561)														maxAscent = ascent;
            													}
            												}
HXDLIN(1561)												int i9 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1561)												while(true){
HXLINE(1561)													i9 = (i9 - (int)1);
HXDLIN(1561)													if (!((i9 > (int)-1))) {
HXLINE(1561)														goto _hx_goto_68;
            													}
HXDLIN(1561)													 ::openfl::_internal::text::TextLayoutGroup lg4 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i9)) );
HXDLIN(1561)													if ((lg4->lineIndex < lineIndex)) {
HXLINE(1561)														goto _hx_goto_68;
            													}
HXDLIN(1561)													if ((lg4->lineIndex > lineIndex)) {
HXLINE(1561)														continue;
            													}
HXDLIN(1561)													lg4->ascent = maxAscent;
HXDLIN(1561)													lg4->height = maxHeightValue;
            												}
            												_hx_goto_68:;
HXDLIN(1561)												offsetY = (offsetY + maxHeightValue);
HXDLIN(1561)												maxAscent = ((Float)0.0);
HXDLIN(1561)												maxHeightValue = ((Float)0.0);
HXDLIN(1561)												lineIndex = (lineIndex + (int)1);
HXDLIN(1561)												offsetX = (int)2;
            											}
HXDLIN(1561)											if ((endIndex1 <= formatRange->end)) {
HXLINE(1561)												::String text24 = _gthis->text;
HXDLIN(1561)												Float letterSpacing24 = ((Float)0.0);
HXDLIN(1561)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1561)													letterSpacing24 = formatRange->format->letterSpacing;
            												}
HXDLIN(1561)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1561)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1561)												Float width51 = ((Float)0.0);
HXDLIN(1561)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1561)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1561)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1561)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1561)												_gthis->_hx___textLayout->letterSpacing = letterSpacing24;
HXDLIN(1561)												bool positions18;
HXDLIN(1561)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1561)													positions18 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1561)													positions18 = true;
            												}
HXDLIN(1561)												_gthis->_hx___textLayout->autoHint = positions18;
HXDLIN(1561)												 ::openfl::_internal::text::TextLayout _gthis25 = _gthis->_hx___textLayout;
HXDLIN(1561)												_gthis25->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text24,placeIndex2,endIndex1));
HXDLIN(1561)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1561)												Float width52 = ((Float)0.0);
HXDLIN(1561)												{
HXLINE(1561)													int _g29 = (int)0;
HXDLIN(1561)													while((_g29 < positions->length)){
HXLINE(1561)														 ::openfl::_internal::text::GlyphPosition position27 = positions->__get(_g29).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)														_g29 = (_g29 + (int)1);
HXDLIN(1561)														width52 = (width52 + position27->advance->x);
            													}
            												}
HXDLIN(1561)												widthValue = width52;
            											}
            											else {
HXLINE(1561)												int tempIndex7 = placeIndex2;
HXDLIN(1561)												int tempRangeEnd12 = formatRange->end;
HXDLIN(1561)												int countRanges7 = (int)0;
HXDLIN(1561)												positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1561)												widthValue = (int)0;
HXDLIN(1561)												while(true){
HXLINE(1561)													if ((tempIndex7 != tempRangeEnd12)) {
HXLINE(1561)														::String text25 = _gthis->text;
HXDLIN(1561)														Float letterSpacing25 = ((Float)0.0);
HXDLIN(1561)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1561)															letterSpacing25 = formatRange->format->letterSpacing;
            														}
HXDLIN(1561)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1561)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1561)														Float width53 = ((Float)0.0);
HXDLIN(1561)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1561)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1561)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1561)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1561)														_gthis->_hx___textLayout->letterSpacing = letterSpacing25;
HXDLIN(1561)														bool _hx_tmp56;
HXDLIN(1561)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1561)															_hx_tmp56 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1561)															_hx_tmp56 = true;
            														}
HXDLIN(1561)														_gthis->_hx___textLayout->autoHint = _hx_tmp56;
HXDLIN(1561)														 ::openfl::_internal::text::TextLayout _gthis26 = _gthis->_hx___textLayout;
HXDLIN(1561)														_gthis26->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text25,tempIndex7,tempRangeEnd12));
HXDLIN(1561)														::Array< ::Dynamic> tempPositions10 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1561)														positions = positions->concat(tempPositions10);
            													}
HXDLIN(1561)													if ((tempRangeEnd12 != endIndex1)) {
HXLINE(1561)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1561)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1561)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1561)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1561)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXDLIN(1561)														tempIndex7 = tempRangeEnd12;
HXDLIN(1561)														if ((endIndex1 < formatRange->end)) {
HXLINE(1561)															tempRangeEnd12 = endIndex1;
            														}
            														else {
HXLINE(1561)															tempRangeEnd12 = formatRange->end;
            														}
HXDLIN(1561)														countRanges7 = (countRanges7 + (int)1);
            													}
            													else {
HXLINE(1561)														Float width54 = ((Float)0.0);
HXDLIN(1561)														{
HXLINE(1561)															int _g30 = (int)0;
HXDLIN(1561)															while((_g30 < positions->length)){
HXLINE(1561)																 ::openfl::_internal::text::GlyphPosition position28 = positions->__get(_g30).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)																_g30 = (_g30 + (int)1);
HXDLIN(1561)																width54 = (width54 + position28->advance->x);
            															}
            														}
HXDLIN(1561)														widthValue = width54;
HXDLIN(1561)														goto _hx_goto_70;
            													}
            												}
            												_hx_goto_70:;
HXDLIN(1561)												rangeIndex = (rangeIndex - (countRanges7 + (int)1));
HXDLIN(1561)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1561)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1561)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1561)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1561)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
            											}
HXDLIN(1561)											remainingPositions2 = positions;
HXDLIN(1561)											tempWidth2 = widthValue;
            										}
            										_hx_goto_59:;
            									}
HXDLIN(1561)									{
HXLINE(1561)										if ((endIndex1 <= formatRange->end)) {
HXLINE(1561)											::String text26 = _gthis->text;
HXDLIN(1561)											Float letterSpacing26 = ((Float)0.0);
HXDLIN(1561)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1561)												letterSpacing26 = formatRange->format->letterSpacing;
            											}
HXDLIN(1561)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1561)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1561)											Float width55 = ((Float)0.0);
HXDLIN(1561)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1561)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1561)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1561)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1561)											_gthis->_hx___textLayout->letterSpacing = letterSpacing26;
HXDLIN(1561)											bool positions19;
HXDLIN(1561)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1561)												positions19 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1561)												positions19 = true;
            											}
HXDLIN(1561)											_gthis->_hx___textLayout->autoHint = positions19;
HXDLIN(1561)											 ::openfl::_internal::text::TextLayout _gthis27 = _gthis->_hx___textLayout;
HXDLIN(1561)											_gthis27->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text26,textIndex,endIndex1));
HXDLIN(1561)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1561)											Float width56 = ((Float)0.0);
HXDLIN(1561)											{
HXLINE(1561)												int _g31 = (int)0;
HXDLIN(1561)												while((_g31 < positions->length)){
HXLINE(1561)													 ::openfl::_internal::text::GlyphPosition position29 = positions->__get(_g31).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)													_g31 = (_g31 + (int)1);
HXDLIN(1561)													width56 = (width56 + position29->advance->x);
            												}
            											}
HXDLIN(1561)											widthValue = width56;
HXDLIN(1561)											bool _hx_tmp57;
HXDLIN(1561)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1561)												_hx_tmp57 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1561)												_hx_tmp57 = true;
            											}
HXDLIN(1561)											if (_hx_tmp57) {
HXLINE(1561)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXDLIN(1561)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1561)												layoutGroup->format = formatRange->format;
HXDLIN(1561)												layoutGroup->startIndex = textIndex;
HXDLIN(1561)												layoutGroup->endIndex = endIndex1;
            											}
HXDLIN(1561)											layoutGroup->positions = positions;
HXDLIN(1561)											layoutGroup->offsetX = offsetX;
HXDLIN(1561)											layoutGroup->ascent = ascent;
HXDLIN(1561)											layoutGroup->descent = descent;
HXDLIN(1561)											layoutGroup->leading = leading;
HXDLIN(1561)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1561)											layoutGroup->offsetY = offsetY;
HXDLIN(1561)											layoutGroup->width = widthValue;
HXDLIN(1561)											layoutGroup->height = heightValue;
HXDLIN(1561)											offsetX = (offsetX + widthValue);
HXDLIN(1561)											if ((endIndex1 == formatRange->end)) {
HXLINE(1561)												layoutGroup = null();
HXDLIN(1561)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1561)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1561)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1561)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1561)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1561)												{
HXLINE(1561)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1561)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1561)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1561)														bool _hx_tmp58;
HXDLIN(1561)														if (hx::IsNotNull( font )) {
HXLINE(1561)															_hx_tmp58 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1561)															_hx_tmp58 = false;
            														}
HXDLIN(1561)														if (_hx_tmp58) {
HXLINE(1561)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1561)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1561)															ascent = currentFormat->size;
HXDLIN(1561)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1561)													leading = currentFormat->leading;
HXDLIN(1561)													heightValue = ((ascent + descent) + leading);
HXDLIN(1561)													if ((heightValue > maxHeightValue)) {
HXLINE(1561)														maxHeightValue = heightValue;
            													}
HXDLIN(1561)													if ((ascent > maxAscent)) {
HXLINE(1561)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1561)											while(true){
HXLINE(1561)												int tempRangeEnd13;
HXDLIN(1561)												if ((endIndex1 < formatRange->end)) {
HXLINE(1561)													tempRangeEnd13 = endIndex1;
            												}
            												else {
HXLINE(1561)													tempRangeEnd13 = formatRange->end;
            												}
HXDLIN(1561)												if ((textIndex != tempRangeEnd13)) {
HXLINE(1561)													::String text27 = _gthis->text;
HXDLIN(1561)													Float letterSpacing27 = ((Float)0.0);
HXDLIN(1561)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1561)														letterSpacing27 = formatRange->format->letterSpacing;
            													}
HXDLIN(1561)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1561)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1561)													Float width57 = ((Float)0.0);
HXDLIN(1561)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1561)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1561)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1561)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1561)													_gthis->_hx___textLayout->letterSpacing = letterSpacing27;
HXDLIN(1561)													bool positions20;
HXDLIN(1561)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1561)														positions20 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1561)														positions20 = true;
            													}
HXDLIN(1561)													_gthis->_hx___textLayout->autoHint = positions20;
HXDLIN(1561)													 ::openfl::_internal::text::TextLayout _gthis28 = _gthis->_hx___textLayout;
HXDLIN(1561)													_gthis28->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text27,textIndex,tempRangeEnd13));
HXDLIN(1561)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1561)													Float width58 = ((Float)0.0);
HXDLIN(1561)													{
HXLINE(1561)														int _g32 = (int)0;
HXDLIN(1561)														while((_g32 < positions->length)){
HXLINE(1561)															 ::openfl::_internal::text::GlyphPosition position30 = positions->__get(_g32).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1561)															_g32 = (_g32 + (int)1);
HXDLIN(1561)															width58 = (width58 + position30->advance->x);
            														}
            													}
HXDLIN(1561)													widthValue = width58;
HXDLIN(1561)													bool _hx_tmp59;
HXDLIN(1561)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1561)														_hx_tmp59 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1561)														_hx_tmp59 = true;
            													}
HXDLIN(1561)													if (_hx_tmp59) {
HXLINE(1561)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd13);
HXDLIN(1561)														::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            													}
            													else {
HXLINE(1561)														layoutGroup->format = formatRange->format;
HXDLIN(1561)														layoutGroup->startIndex = textIndex;
HXDLIN(1561)														layoutGroup->endIndex = tempRangeEnd13;
            													}
HXDLIN(1561)													layoutGroup->positions = positions;
HXDLIN(1561)													layoutGroup->offsetX = offsetX;
HXDLIN(1561)													layoutGroup->ascent = ascent;
HXDLIN(1561)													layoutGroup->descent = descent;
HXDLIN(1561)													layoutGroup->leading = leading;
HXDLIN(1561)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1561)													layoutGroup->offsetY = offsetY;
HXDLIN(1561)													layoutGroup->width = widthValue;
HXDLIN(1561)													layoutGroup->height = heightValue;
HXDLIN(1561)													offsetX = (offsetX + widthValue);
HXDLIN(1561)													textIndex = tempRangeEnd13;
            												}
HXDLIN(1561)												if ((tempRangeEnd13 == formatRange->end)) {
HXLINE(1561)													layoutGroup = null();
            												}
HXDLIN(1561)												if ((tempRangeEnd13 == endIndex1)) {
HXLINE(1561)													goto _hx_goto_73;
            												}
HXDLIN(1561)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1561)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1561)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1561)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1561)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1561)												{
HXLINE(1561)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1561)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1561)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1561)														bool _hx_tmp60;
HXDLIN(1561)														if (hx::IsNotNull( font )) {
HXLINE(1561)															_hx_tmp60 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1561)															_hx_tmp60 = false;
            														}
HXDLIN(1561)														if (_hx_tmp60) {
HXLINE(1561)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1561)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1561)															ascent = currentFormat->size;
HXDLIN(1561)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1561)													leading = currentFormat->leading;
HXDLIN(1561)													heightValue = ((ascent + descent) + leading);
HXDLIN(1561)													if ((heightValue > maxHeightValue)) {
HXLINE(1561)														maxHeightValue = heightValue;
            													}
HXDLIN(1561)													if ((ascent > maxAscent)) {
HXLINE(1561)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_73:;
            										}
HXDLIN(1561)										textIndex = endIndex1;
            									}
            								}
            								else {
HXLINE(1565)									int tempRangeEnd14;
HXDLIN(1565)									if ((endIndex1 < formatRange->end)) {
HXLINE(1565)										tempRangeEnd14 = endIndex1;
            									}
            									else {
HXLINE(1565)										tempRangeEnd14 = formatRange->end;
            									}
HXLINE(1567)									if ((tempRangeEnd14 < endIndex1)) {
HXLINE(1569)										::String text28 = this->text;
HXDLIN(1569)										Float letterSpacing28 = ((Float)0.0);
HXDLIN(1569)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1569)											letterSpacing28 = formatRange->format->letterSpacing;
            										}
HXDLIN(1569)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1569)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1569)										Float width59 = ((Float)0.0);
HXDLIN(1569)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1569)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1569)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1569)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1569)										_gthis->_hx___textLayout->letterSpacing = letterSpacing28;
HXDLIN(1569)										bool positions21;
HXDLIN(1569)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1569)											positions21 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1569)											positions21 = true;
            										}
HXDLIN(1569)										_gthis->_hx___textLayout->autoHint = positions21;
HXDLIN(1569)										 ::openfl::_internal::text::TextLayout _gthis29 = _gthis->_hx___textLayout;
HXDLIN(1569)										_gthis29->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text28,textIndex,tempRangeEnd14));
HXDLIN(1569)										positions = _gthis->_hx___textLayout->get_positions();
HXLINE(1570)										Float width60 = ((Float)0.0);
HXDLIN(1570)										{
HXLINE(1570)											int _g33 = (int)0;
HXDLIN(1570)											while((_g33 < positions->length)){
HXLINE(1570)												 ::openfl::_internal::text::GlyphPosition position31 = positions->__get(_g33).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1570)												_g33 = (_g33 + (int)1);
HXDLIN(1570)												width60 = (width60 + position31->advance->x);
            											}
            										}
HXDLIN(1570)										widthValue = width60;
            									}
HXLINE(1574)									layoutGroup->endIndex = tempRangeEnd14;
HXLINE(1575)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1576)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup4 = layoutGroup;
HXDLIN(1576)									layoutGroup4->width = (layoutGroup4->width + widthValue);
HXLINE(1578)									offsetX = (offsetX + widthValue);
HXLINE(1580)									if ((tempRangeEnd14 == formatRange->end)) {
HXLINE(1582)										layoutGroup = null();
HXLINE(1583)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1583)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1583)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1583)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1583)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1584)										{
HXLINE(1584)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1584)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1584)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1584)												bool _hx_tmp61;
HXDLIN(1584)												if (hx::IsNotNull( font )) {
HXLINE(1584)													_hx_tmp61 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1584)													_hx_tmp61 = false;
            												}
HXDLIN(1584)												if (_hx_tmp61) {
HXLINE(1584)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1584)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1584)													ascent = currentFormat->size;
HXDLIN(1584)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1584)											leading = currentFormat->leading;
HXDLIN(1584)											heightValue = ((ascent + descent) + leading);
HXDLIN(1584)											if ((heightValue > maxHeightValue)) {
HXLINE(1584)												maxHeightValue = heightValue;
            											}
HXDLIN(1584)											if ((ascent > maxAscent)) {
HXLINE(1584)												maxAscent = ascent;
            											}
            										}
HXLINE(1586)										textIndex = tempRangeEnd14;
HXLINE(1588)										if ((tempRangeEnd14 != endIndex1)) {
HXLINE(1590)											if ((endIndex1 <= formatRange->end)) {
HXLINE(1590)												::String text29 = _gthis->text;
HXDLIN(1590)												Float letterSpacing29 = ((Float)0.0);
HXDLIN(1590)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1590)													letterSpacing29 = formatRange->format->letterSpacing;
            												}
HXDLIN(1590)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1590)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1590)												Float width61 = ((Float)0.0);
HXDLIN(1590)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1590)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1590)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1590)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1590)												_gthis->_hx___textLayout->letterSpacing = letterSpacing29;
HXDLIN(1590)												bool positions22;
HXDLIN(1590)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1590)													positions22 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1590)													positions22 = true;
            												}
HXDLIN(1590)												_gthis->_hx___textLayout->autoHint = positions22;
HXDLIN(1590)												 ::openfl::_internal::text::TextLayout _gthis30 = _gthis->_hx___textLayout;
HXDLIN(1590)												_gthis30->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text29,textIndex,endIndex1));
HXDLIN(1590)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1590)												Float width62 = ((Float)0.0);
HXDLIN(1590)												{
HXLINE(1590)													int _g34 = (int)0;
HXDLIN(1590)													while((_g34 < positions->length)){
HXLINE(1590)														 ::openfl::_internal::text::GlyphPosition position32 = positions->__get(_g34).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1590)														_g34 = (_g34 + (int)1);
HXDLIN(1590)														width62 = (width62 + position32->advance->x);
            													}
            												}
HXDLIN(1590)												widthValue = width62;
HXDLIN(1590)												bool _hx_tmp62;
HXDLIN(1590)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1590)													_hx_tmp62 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1590)													_hx_tmp62 = true;
            												}
HXDLIN(1590)												if (_hx_tmp62) {
HXLINE(1590)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXDLIN(1590)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1590)													layoutGroup->format = formatRange->format;
HXDLIN(1590)													layoutGroup->startIndex = textIndex;
HXDLIN(1590)													layoutGroup->endIndex = endIndex1;
            												}
HXDLIN(1590)												layoutGroup->positions = positions;
HXDLIN(1590)												layoutGroup->offsetX = offsetX;
HXDLIN(1590)												layoutGroup->ascent = ascent;
HXDLIN(1590)												layoutGroup->descent = descent;
HXDLIN(1590)												layoutGroup->leading = leading;
HXDLIN(1590)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1590)												layoutGroup->offsetY = offsetY;
HXDLIN(1590)												layoutGroup->width = widthValue;
HXDLIN(1590)												layoutGroup->height = heightValue;
HXDLIN(1590)												offsetX = (offsetX + widthValue);
HXDLIN(1590)												if ((endIndex1 == formatRange->end)) {
HXLINE(1590)													layoutGroup = null();
HXDLIN(1590)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1590)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1590)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1590)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1590)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1590)													{
HXLINE(1590)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1590)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1590)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1590)															bool _hx_tmp63;
HXDLIN(1590)															if (hx::IsNotNull( font )) {
HXLINE(1590)																_hx_tmp63 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1590)																_hx_tmp63 = false;
            															}
HXDLIN(1590)															if (_hx_tmp63) {
HXLINE(1590)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1590)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1590)																ascent = currentFormat->size;
HXDLIN(1590)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1590)														leading = currentFormat->leading;
HXDLIN(1590)														heightValue = ((ascent + descent) + leading);
HXDLIN(1590)														if ((heightValue > maxHeightValue)) {
HXLINE(1590)															maxHeightValue = heightValue;
            														}
HXDLIN(1590)														if ((ascent > maxAscent)) {
HXLINE(1590)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1590)												while(true){
HXLINE(1590)													int tempRangeEnd15;
HXDLIN(1590)													if ((endIndex1 < formatRange->end)) {
HXLINE(1590)														tempRangeEnd15 = endIndex1;
            													}
            													else {
HXLINE(1590)														tempRangeEnd15 = formatRange->end;
            													}
HXDLIN(1590)													if ((textIndex != tempRangeEnd15)) {
HXLINE(1590)														::String text30 = _gthis->text;
HXDLIN(1590)														Float letterSpacing30 = ((Float)0.0);
HXDLIN(1590)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1590)															letterSpacing30 = formatRange->format->letterSpacing;
            														}
HXDLIN(1590)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1590)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1590)														Float width63 = ((Float)0.0);
HXDLIN(1590)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1590)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1590)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1590)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1590)														_gthis->_hx___textLayout->letterSpacing = letterSpacing30;
HXDLIN(1590)														bool positions23;
HXDLIN(1590)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1590)															positions23 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1590)															positions23 = true;
            														}
HXDLIN(1590)														_gthis->_hx___textLayout->autoHint = positions23;
HXDLIN(1590)														 ::openfl::_internal::text::TextLayout _gthis31 = _gthis->_hx___textLayout;
HXDLIN(1590)														_gthis31->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text30,textIndex,tempRangeEnd15));
HXDLIN(1590)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1590)														Float width64 = ((Float)0.0);
HXDLIN(1590)														{
HXLINE(1590)															int _g35 = (int)0;
HXDLIN(1590)															while((_g35 < positions->length)){
HXLINE(1590)																 ::openfl::_internal::text::GlyphPosition position33 = positions->__get(_g35).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1590)																_g35 = (_g35 + (int)1);
HXDLIN(1590)																width64 = (width64 + position33->advance->x);
            															}
            														}
HXDLIN(1590)														widthValue = width64;
HXDLIN(1590)														bool _hx_tmp64;
HXDLIN(1590)														if (hx::IsNotNull( layoutGroup )) {
HXLINE(1590)															_hx_tmp64 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1590)															_hx_tmp64 = true;
            														}
HXDLIN(1590)														if (_hx_tmp64) {
HXLINE(1590)															layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd15);
HXDLIN(1590)															::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            														}
            														else {
HXLINE(1590)															layoutGroup->format = formatRange->format;
HXDLIN(1590)															layoutGroup->startIndex = textIndex;
HXDLIN(1590)															layoutGroup->endIndex = tempRangeEnd15;
            														}
HXDLIN(1590)														layoutGroup->positions = positions;
HXDLIN(1590)														layoutGroup->offsetX = offsetX;
HXDLIN(1590)														layoutGroup->ascent = ascent;
HXDLIN(1590)														layoutGroup->descent = descent;
HXDLIN(1590)														layoutGroup->leading = leading;
HXDLIN(1590)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1590)														layoutGroup->offsetY = offsetY;
HXDLIN(1590)														layoutGroup->width = widthValue;
HXDLIN(1590)														layoutGroup->height = heightValue;
HXDLIN(1590)														offsetX = (offsetX + widthValue);
HXDLIN(1590)														textIndex = tempRangeEnd15;
            													}
HXDLIN(1590)													if ((tempRangeEnd15 == formatRange->end)) {
HXLINE(1590)														layoutGroup = null();
            													}
HXDLIN(1590)													if ((tempRangeEnd15 == endIndex1)) {
HXLINE(1590)														goto _hx_goto_77;
            													}
HXDLIN(1590)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1590)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1590)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1590)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1590)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1590)													{
HXLINE(1590)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1590)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1590)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1590)															bool _hx_tmp65;
HXDLIN(1590)															if (hx::IsNotNull( font )) {
HXLINE(1590)																_hx_tmp65 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1590)																_hx_tmp65 = false;
            															}
HXDLIN(1590)															if (_hx_tmp65) {
HXLINE(1590)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1590)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1590)																ascent = currentFormat->size;
HXDLIN(1590)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1590)														leading = currentFormat->leading;
HXDLIN(1590)														heightValue = ((ascent + descent) + leading);
HXDLIN(1590)														if ((heightValue > maxHeightValue)) {
HXLINE(1590)															maxHeightValue = heightValue;
            														}
HXDLIN(1590)														if ((ascent > maxAscent)) {
HXLINE(1590)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_77:;
            											}
HXDLIN(1590)											textIndex = endIndex1;
            										}
            									}
HXLINE(1598)									if ((breakIndex == endIndex1)) {
HXLINE(1598)										endIndex1 = (endIndex1 + (int)1);
            									}
HXLINE(1600)									textIndex = endIndex1;
            								}
            							}
            						}
HXLINE(1606)						int nextSpaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),textIndex);
HXLINE(1611)						if ((breakIndex == previousSpaceIndex)) {
HXLINE(1613)							layoutGroup->endIndex = breakIndex;
HXLINE(1615)							if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->positions->length) < (int)0)) {
HXLINE(1618)								layoutGroup->positions->push(null());
            							}
HXLINE(1622)							textIndex = (breakIndex + (int)1);
            						}
HXLINE(1626)						previousSpaceIndex = spaceIndex;
HXLINE(1627)						spaceIndex = nextSpaceIndex;
HXLINE(1629)						bool _hx_tmp66;
HXDLIN(1629)						bool _hx_tmp67;
HXDLIN(1629)						bool _hx_tmp68;
HXDLIN(1629)						if ((breakIndex > (int)-1)) {
HXLINE(1629)							_hx_tmp68 = (breakIndex <= textIndex);
            						}
            						else {
HXLINE(1629)							_hx_tmp68 = false;
            						}
HXDLIN(1629)						if (_hx_tmp68) {
HXLINE(1629)							if ((spaceIndex <= breakIndex)) {
HXLINE(1629)								_hx_tmp67 = (spaceIndex == (int)-1);
            							}
            							else {
HXLINE(1629)								_hx_tmp67 = true;
            							}
            						}
            						else {
HXLINE(1629)							_hx_tmp67 = false;
            						}
HXDLIN(1629)						if (!(_hx_tmp67)) {
HXLINE(1629)							_hx_tmp66 = (textIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text));
            						}
            						else {
HXLINE(1629)							_hx_tmp66 = true;
            						}
HXDLIN(1629)						if (_hx_tmp66) {
HXLINE(1631)							goto _hx_goto_34;
            						}
            					}
            					_hx_goto_34:;
            				}
            				else {
HXLINE(1639)					if ((textIndex < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1643)						{
HXLINE(1643)							int endIndex4 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
HXDLIN(1643)							if ((endIndex4 <= formatRange->end)) {
HXLINE(1643)								::String text31 = _gthis->text;
HXDLIN(1643)								Float letterSpacing31 = ((Float)0.0);
HXDLIN(1643)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1643)									letterSpacing31 = formatRange->format->letterSpacing;
            								}
HXDLIN(1643)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1643)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1643)								Float width65 = ((Float)0.0);
HXDLIN(1643)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1643)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1643)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1643)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1643)								_gthis->_hx___textLayout->letterSpacing = letterSpacing31;
HXDLIN(1643)								bool positions24;
HXDLIN(1643)								if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1643)									positions24 = (_gthis->sharpness < (int)400);
            								}
            								else {
HXLINE(1643)									positions24 = true;
            								}
HXDLIN(1643)								_gthis->_hx___textLayout->autoHint = positions24;
HXDLIN(1643)								 ::openfl::_internal::text::TextLayout _gthis32 = _gthis->_hx___textLayout;
HXDLIN(1643)								_gthis32->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text31,textIndex,endIndex4));
HXDLIN(1643)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1643)								Float width66 = ((Float)0.0);
HXDLIN(1643)								{
HXLINE(1643)									int _g36 = (int)0;
HXDLIN(1643)									while((_g36 < positions->length)){
HXLINE(1643)										 ::openfl::_internal::text::GlyphPosition position34 = positions->__get(_g36).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1643)										_g36 = (_g36 + (int)1);
HXDLIN(1643)										width66 = (width66 + position34->advance->x);
            									}
            								}
HXDLIN(1643)								widthValue = width66;
            							}
            							else {
HXLINE(1643)								int tempIndex8 = textIndex;
HXDLIN(1643)								int tempRangeEnd16 = formatRange->end;
HXDLIN(1643)								int countRanges8 = (int)0;
HXDLIN(1643)								positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1643)								widthValue = (int)0;
HXDLIN(1643)								while(true){
HXLINE(1643)									if ((tempIndex8 != tempRangeEnd16)) {
HXLINE(1643)										::String text32 = _gthis->text;
HXDLIN(1643)										Float letterSpacing32 = ((Float)0.0);
HXDLIN(1643)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1643)											letterSpacing32 = formatRange->format->letterSpacing;
            										}
HXDLIN(1643)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1643)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1643)										Float width67 = ((Float)0.0);
HXDLIN(1643)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1643)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1643)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1643)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1643)										_gthis->_hx___textLayout->letterSpacing = letterSpacing32;
HXDLIN(1643)										bool _hx_tmp69;
HXDLIN(1643)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1643)											_hx_tmp69 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1643)											_hx_tmp69 = true;
            										}
HXDLIN(1643)										_gthis->_hx___textLayout->autoHint = _hx_tmp69;
HXDLIN(1643)										 ::openfl::_internal::text::TextLayout _gthis33 = _gthis->_hx___textLayout;
HXDLIN(1643)										_gthis33->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text32,tempIndex8,tempRangeEnd16));
HXDLIN(1643)										::Array< ::Dynamic> tempPositions11 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1643)										positions = positions->concat(tempPositions11);
            									}
HXDLIN(1643)									if ((tempRangeEnd16 != endIndex4)) {
HXLINE(1643)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1643)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1643)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1643)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1643)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXDLIN(1643)										tempIndex8 = tempRangeEnd16;
HXDLIN(1643)										if ((endIndex4 < formatRange->end)) {
HXLINE(1643)											tempRangeEnd16 = endIndex4;
            										}
            										else {
HXLINE(1643)											tempRangeEnd16 = formatRange->end;
            										}
HXDLIN(1643)										countRanges8 = (countRanges8 + (int)1);
            									}
            									else {
HXLINE(1643)										Float width68 = ((Float)0.0);
HXDLIN(1643)										{
HXLINE(1643)											int _g37 = (int)0;
HXDLIN(1643)											while((_g37 < positions->length)){
HXLINE(1643)												 ::openfl::_internal::text::GlyphPosition position35 = positions->__get(_g37).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1643)												_g37 = (_g37 + (int)1);
HXDLIN(1643)												width68 = (width68 + position35->advance->x);
            											}
            										}
HXDLIN(1643)										widthValue = width68;
HXDLIN(1643)										goto _hx_goto_80;
            									}
            								}
            								_hx_goto_80:;
HXDLIN(1643)								rangeIndex = (rangeIndex - (countRanges8 + (int)1));
HXDLIN(1643)								if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1643)									rangeIndex = (rangeIndex + (int)1);
HXDLIN(1643)									formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1643)									currentFormat->_hx___merge(formatRange->format);
HXDLIN(1643)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            								}
            							}
            						}
HXLINE(1644)						{
HXLINE(1644)							int endIndex5 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
HXDLIN(1644)							bool _hx_tmp70;
HXDLIN(1644)							if ((_gthis->width >= (int)4)) {
HXLINE(1644)								_hx_tmp70 = _gthis->wordWrap;
            							}
            							else {
HXLINE(1644)								_hx_tmp70 = false;
            							}
HXDLIN(1644)							if (_hx_tmp70) {
HXLINE(1644)								::Array< ::Dynamic> remainingPositions3 = positions;
HXDLIN(1644)								int i10;
HXDLIN(1644)								int j3;
HXDLIN(1644)								int placeIndex3;
HXDLIN(1644)								Float positionWidth3;
HXDLIN(1644)								 ::openfl::_internal::text::GlyphPosition currentPosition3;
HXDLIN(1644)								 ::Dynamic tempPositions12;
HXDLIN(1644)								Float width69 = ((Float)0.0);
HXDLIN(1644)								{
HXLINE(1644)									int _g38 = (int)0;
HXDLIN(1644)									while((_g38 < remainingPositions3->length)){
HXLINE(1644)										 ::openfl::_internal::text::GlyphPosition position36 = remainingPositions3->__get(_g38).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)										_g38 = (_g38 + (int)1);
HXDLIN(1644)										width69 = (width69 + position36->advance->x);
            									}
            								}
HXDLIN(1644)								Float tempWidth3 = width69;
HXDLIN(1644)								while(((offsetX + tempWidth3) > (_gthis->width - (int)2))){
HXLINE(1644)									j3 = (int)0;
HXDLIN(1644)									i10 = j3;
HXDLIN(1644)									positionWidth3 = ((Float)0.0);
HXDLIN(1644)									while(((offsetX + positionWidth3) < (_gthis->width - (int)2))){
HXLINE(1644)										currentPosition3 = remainingPositions3->__get(i10).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)										if ((currentPosition3->advance->x == ((Float)0.0))) {
HXLINE(1644)											i10 = (i10 + (int)1);
HXDLIN(1644)											j3 = (j3 + (int)1);
            										}
            										else {
HXLINE(1644)											positionWidth3 = (positionWidth3 + currentPosition3->advance->x);
HXDLIN(1644)											i10 = (i10 + (int)1);
            										}
            									}
HXDLIN(1644)									bool _hx_tmp71;
HXDLIN(1644)									if ((i10 < (int)2)) {
HXLINE(1644)										_hx_tmp71 = (positionWidth3 > (_gthis->width - (int)4));
            									}
            									else {
HXLINE(1644)										_hx_tmp71 = false;
            									}
HXDLIN(1644)									if (_hx_tmp71) {
HXLINE(1644)										if ((((textIndex + i10) - j3) == endIndex5)) {
HXLINE(1644)											goto _hx_goto_83;
            										}
            									}
            									else {
HXLINE(1644)										while(((offsetX + positionWidth3) > (_gthis->width - (int)2))){
HXLINE(1644)											i10 = (i10 - (int)1);
HXDLIN(1644)											if (((i10 - j3) > (int)0)) {
HXLINE(1644)												{
HXLINE(1644)													int endIndex6 = ((textIndex + i10) - j3);
HXDLIN(1644)													if ((endIndex6 <= formatRange->end)) {
HXLINE(1644)														::String text33 = _gthis->text;
HXDLIN(1644)														Float letterSpacing33 = ((Float)0.0);
HXDLIN(1644)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1644)															letterSpacing33 = formatRange->format->letterSpacing;
            														}
HXDLIN(1644)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1644)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1644)														Float width70 = ((Float)0.0);
HXDLIN(1644)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1644)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1644)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1644)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1644)														_gthis->_hx___textLayout->letterSpacing = letterSpacing33;
HXDLIN(1644)														bool positions25;
HXDLIN(1644)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1644)															positions25 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1644)															positions25 = true;
            														}
HXDLIN(1644)														_gthis->_hx___textLayout->autoHint = positions25;
HXDLIN(1644)														 ::openfl::_internal::text::TextLayout _gthis34 = _gthis->_hx___textLayout;
HXDLIN(1644)														_gthis34->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text33,textIndex,endIndex6));
HXDLIN(1644)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1644)														Float width71 = ((Float)0.0);
HXDLIN(1644)														{
HXLINE(1644)															int _g39 = (int)0;
HXDLIN(1644)															while((_g39 < positions->length)){
HXLINE(1644)																 ::openfl::_internal::text::GlyphPosition position37 = positions->__get(_g39).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)																_g39 = (_g39 + (int)1);
HXDLIN(1644)																width71 = (width71 + position37->advance->x);
            															}
            														}
HXDLIN(1644)														widthValue = width71;
            													}
            													else {
HXLINE(1644)														int tempIndex9 = textIndex;
HXDLIN(1644)														int tempRangeEnd17 = formatRange->end;
HXDLIN(1644)														int countRanges9 = (int)0;
HXDLIN(1644)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1644)														widthValue = (int)0;
HXDLIN(1644)														while(true){
HXLINE(1644)															if ((tempIndex9 != tempRangeEnd17)) {
HXLINE(1644)																::String text34 = _gthis->text;
HXDLIN(1644)																Float letterSpacing34 = ((Float)0.0);
HXDLIN(1644)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1644)																	letterSpacing34 = formatRange->format->letterSpacing;
            																}
HXDLIN(1644)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1644)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1644)																Float width72 = ((Float)0.0);
HXDLIN(1644)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1644)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1644)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1644)																	_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																}
HXDLIN(1644)																_gthis->_hx___textLayout->letterSpacing = letterSpacing34;
HXDLIN(1644)																bool _hx_tmp72;
HXDLIN(1644)																if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1644)																	_hx_tmp72 = (_gthis->sharpness < (int)400);
            																}
            																else {
HXLINE(1644)																	_hx_tmp72 = true;
            																}
HXDLIN(1644)																_gthis->_hx___textLayout->autoHint = _hx_tmp72;
HXDLIN(1644)																 ::openfl::_internal::text::TextLayout _gthis35 = _gthis->_hx___textLayout;
HXDLIN(1644)																_gthis35->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text34,tempIndex9,tempRangeEnd17));
HXDLIN(1644)																::Array< ::Dynamic> tempPositions13 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1644)																positions = positions->concat(tempPositions13);
            															}
HXDLIN(1644)															if ((tempRangeEnd17 != endIndex6)) {
HXLINE(1644)																if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1644)																	rangeIndex = (rangeIndex + (int)1);
HXDLIN(1644)																	formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1644)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1644)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
HXDLIN(1644)																tempIndex9 = tempRangeEnd17;
HXDLIN(1644)																if ((endIndex6 < formatRange->end)) {
HXLINE(1644)																	tempRangeEnd17 = endIndex6;
            																}
            																else {
HXLINE(1644)																	tempRangeEnd17 = formatRange->end;
            																}
HXDLIN(1644)																countRanges9 = (countRanges9 + (int)1);
            															}
            															else {
HXLINE(1644)																Float width73 = ((Float)0.0);
HXDLIN(1644)																{
HXLINE(1644)																	int _g40 = (int)0;
HXDLIN(1644)																	while((_g40 < positions->length)){
HXLINE(1644)																		 ::openfl::_internal::text::GlyphPosition position38 = positions->__get(_g40).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)																		_g40 = (_g40 + (int)1);
HXDLIN(1644)																		width73 = (width73 + position38->advance->x);
            																	}
            																}
HXDLIN(1644)																widthValue = width73;
HXDLIN(1644)																goto _hx_goto_87;
            															}
            														}
            														_hx_goto_87:;
HXDLIN(1644)														rangeIndex = (rangeIndex - (countRanges9 + (int)1));
HXDLIN(1644)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1644)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1644)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1644)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1644)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXDLIN(1644)												positionWidth3 = widthValue;
            											}
            											else {
HXLINE(1644)												i10 = (int)1;
HXDLIN(1644)												j3 = (int)0;
            											}
            										}
            									}
HXDLIN(1644)									placeIndex3 = ((textIndex + i10) - j3);
HXDLIN(1644)									{
HXLINE(1644)										if ((placeIndex3 <= formatRange->end)) {
HXLINE(1644)											::String text35 = _gthis->text;
HXDLIN(1644)											Float letterSpacing35 = ((Float)0.0);
HXDLIN(1644)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1644)												letterSpacing35 = formatRange->format->letterSpacing;
            											}
HXDLIN(1644)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1644)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1644)											Float width74 = ((Float)0.0);
HXDLIN(1644)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1644)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1644)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1644)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1644)											_gthis->_hx___textLayout->letterSpacing = letterSpacing35;
HXDLIN(1644)											bool positions26;
HXDLIN(1644)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1644)												positions26 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1644)												positions26 = true;
            											}
HXDLIN(1644)											_gthis->_hx___textLayout->autoHint = positions26;
HXDLIN(1644)											 ::openfl::_internal::text::TextLayout _gthis36 = _gthis->_hx___textLayout;
HXDLIN(1644)											_gthis36->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text35,textIndex,placeIndex3));
HXDLIN(1644)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1644)											Float width75 = ((Float)0.0);
HXDLIN(1644)											{
HXLINE(1644)												int _g41 = (int)0;
HXDLIN(1644)												while((_g41 < positions->length)){
HXLINE(1644)													 ::openfl::_internal::text::GlyphPosition position39 = positions->__get(_g41).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)													_g41 = (_g41 + (int)1);
HXDLIN(1644)													width75 = (width75 + position39->advance->x);
            												}
            											}
HXDLIN(1644)											widthValue = width75;
HXDLIN(1644)											bool _hx_tmp73;
HXDLIN(1644)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1644)												_hx_tmp73 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1644)												_hx_tmp73 = true;
            											}
HXDLIN(1644)											if (_hx_tmp73) {
HXLINE(1644)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex3);
HXDLIN(1644)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1644)												layoutGroup->format = formatRange->format;
HXDLIN(1644)												layoutGroup->startIndex = textIndex;
HXDLIN(1644)												layoutGroup->endIndex = placeIndex3;
            											}
HXDLIN(1644)											layoutGroup->positions = positions;
HXDLIN(1644)											layoutGroup->offsetX = offsetX;
HXDLIN(1644)											layoutGroup->ascent = ascent;
HXDLIN(1644)											layoutGroup->descent = descent;
HXDLIN(1644)											layoutGroup->leading = leading;
HXDLIN(1644)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1644)											layoutGroup->offsetY = offsetY;
HXDLIN(1644)											layoutGroup->width = widthValue;
HXDLIN(1644)											layoutGroup->height = heightValue;
HXDLIN(1644)											offsetX = (offsetX + widthValue);
HXDLIN(1644)											if ((placeIndex3 == formatRange->end)) {
HXLINE(1644)												layoutGroup = null();
HXDLIN(1644)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1644)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1644)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1644)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1644)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1644)												{
HXLINE(1644)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1644)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1644)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1644)														bool _hx_tmp74;
HXDLIN(1644)														if (hx::IsNotNull( font )) {
HXLINE(1644)															_hx_tmp74 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1644)															_hx_tmp74 = false;
            														}
HXDLIN(1644)														if (_hx_tmp74) {
HXLINE(1644)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1644)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1644)															ascent = currentFormat->size;
HXDLIN(1644)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1644)													leading = currentFormat->leading;
HXDLIN(1644)													heightValue = ((ascent + descent) + leading);
HXDLIN(1644)													if ((heightValue > maxHeightValue)) {
HXLINE(1644)														maxHeightValue = heightValue;
            													}
HXDLIN(1644)													if ((ascent > maxAscent)) {
HXLINE(1644)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1644)											while(true){
HXLINE(1644)												int tempRangeEnd18;
HXDLIN(1644)												if ((placeIndex3 < formatRange->end)) {
HXLINE(1644)													tempRangeEnd18 = placeIndex3;
            												}
            												else {
HXLINE(1644)													tempRangeEnd18 = formatRange->end;
            												}
HXDLIN(1644)												if ((textIndex != tempRangeEnd18)) {
HXLINE(1644)													::String text36 = _gthis->text;
HXDLIN(1644)													Float letterSpacing36 = ((Float)0.0);
HXDLIN(1644)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1644)														letterSpacing36 = formatRange->format->letterSpacing;
            													}
HXDLIN(1644)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1644)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1644)													Float width76 = ((Float)0.0);
HXDLIN(1644)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1644)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1644)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1644)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1644)													_gthis->_hx___textLayout->letterSpacing = letterSpacing36;
HXDLIN(1644)													bool positions27;
HXDLIN(1644)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1644)														positions27 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1644)														positions27 = true;
            													}
HXDLIN(1644)													_gthis->_hx___textLayout->autoHint = positions27;
HXDLIN(1644)													 ::openfl::_internal::text::TextLayout _gthis37 = _gthis->_hx___textLayout;
HXDLIN(1644)													_gthis37->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text36,textIndex,tempRangeEnd18));
HXDLIN(1644)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1644)													Float width77 = ((Float)0.0);
HXDLIN(1644)													{
HXLINE(1644)														int _g42 = (int)0;
HXDLIN(1644)														while((_g42 < positions->length)){
HXLINE(1644)															 ::openfl::_internal::text::GlyphPosition position40 = positions->__get(_g42).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)															_g42 = (_g42 + (int)1);
HXDLIN(1644)															width77 = (width77 + position40->advance->x);
            														}
            													}
HXDLIN(1644)													widthValue = width77;
HXDLIN(1644)													bool _hx_tmp75;
HXDLIN(1644)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1644)														_hx_tmp75 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1644)														_hx_tmp75 = true;
            													}
HXDLIN(1644)													if (_hx_tmp75) {
HXLINE(1644)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd18);
HXDLIN(1644)														::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            													}
            													else {
HXLINE(1644)														layoutGroup->format = formatRange->format;
HXDLIN(1644)														layoutGroup->startIndex = textIndex;
HXDLIN(1644)														layoutGroup->endIndex = tempRangeEnd18;
            													}
HXDLIN(1644)													layoutGroup->positions = positions;
HXDLIN(1644)													layoutGroup->offsetX = offsetX;
HXDLIN(1644)													layoutGroup->ascent = ascent;
HXDLIN(1644)													layoutGroup->descent = descent;
HXDLIN(1644)													layoutGroup->leading = leading;
HXDLIN(1644)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1644)													layoutGroup->offsetY = offsetY;
HXDLIN(1644)													layoutGroup->width = widthValue;
HXDLIN(1644)													layoutGroup->height = heightValue;
HXDLIN(1644)													offsetX = (offsetX + widthValue);
HXDLIN(1644)													textIndex = tempRangeEnd18;
            												}
HXDLIN(1644)												if ((tempRangeEnd18 == formatRange->end)) {
HXLINE(1644)													layoutGroup = null();
            												}
HXDLIN(1644)												if ((tempRangeEnd18 == placeIndex3)) {
HXLINE(1644)													goto _hx_goto_90;
            												}
HXDLIN(1644)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1644)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1644)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1644)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1644)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1644)												{
HXLINE(1644)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1644)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1644)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1644)														bool _hx_tmp76;
HXDLIN(1644)														if (hx::IsNotNull( font )) {
HXLINE(1644)															_hx_tmp76 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1644)															_hx_tmp76 = false;
            														}
HXDLIN(1644)														if (_hx_tmp76) {
HXLINE(1644)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1644)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1644)															ascent = currentFormat->size;
HXDLIN(1644)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1644)													leading = currentFormat->leading;
HXDLIN(1644)													heightValue = ((ascent + descent) + leading);
HXDLIN(1644)													if ((heightValue > maxHeightValue)) {
HXLINE(1644)														maxHeightValue = heightValue;
            													}
HXDLIN(1644)													if ((ascent > maxAscent)) {
HXLINE(1644)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_90:;
            										}
HXDLIN(1644)										textIndex = placeIndex3;
            									}
HXDLIN(1644)									{
HXLINE(1644)										{
HXLINE(1644)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1644)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1644)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1644)												bool _hx_tmp77;
HXDLIN(1644)												if (hx::IsNotNull( font )) {
HXLINE(1644)													_hx_tmp77 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1644)													_hx_tmp77 = false;
            												}
HXDLIN(1644)												if (_hx_tmp77) {
HXLINE(1644)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1644)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1644)													ascent = currentFormat->size;
HXDLIN(1644)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1644)											leading = currentFormat->leading;
HXDLIN(1644)											heightValue = ((ascent + descent) + leading);
HXDLIN(1644)											if ((heightValue > maxHeightValue)) {
HXLINE(1644)												maxHeightValue = heightValue;
            											}
HXDLIN(1644)											if ((ascent > maxAscent)) {
HXLINE(1644)												maxAscent = ascent;
            											}
            										}
HXDLIN(1644)										int i11 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1644)										while(true){
HXLINE(1644)											i11 = (i11 - (int)1);
HXDLIN(1644)											if (!((i11 > (int)-1))) {
HXLINE(1644)												goto _hx_goto_92;
            											}
HXDLIN(1644)											 ::openfl::_internal::text::TextLayoutGroup lg5 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i11)) );
HXDLIN(1644)											if ((lg5->lineIndex < lineIndex)) {
HXLINE(1644)												goto _hx_goto_92;
            											}
HXDLIN(1644)											if ((lg5->lineIndex > lineIndex)) {
HXLINE(1644)												continue;
            											}
HXDLIN(1644)											lg5->ascent = maxAscent;
HXDLIN(1644)											lg5->height = maxHeightValue;
            										}
            										_hx_goto_92:;
HXDLIN(1644)										offsetY = (offsetY + maxHeightValue);
HXDLIN(1644)										maxAscent = ((Float)0.0);
HXDLIN(1644)										maxHeightValue = ((Float)0.0);
HXDLIN(1644)										lineIndex = (lineIndex + (int)1);
HXDLIN(1644)										offsetX = (int)2;
            									}
HXDLIN(1644)									if ((endIndex5 <= formatRange->end)) {
HXLINE(1644)										::String text37 = _gthis->text;
HXDLIN(1644)										Float letterSpacing37 = ((Float)0.0);
HXDLIN(1644)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1644)											letterSpacing37 = formatRange->format->letterSpacing;
            										}
HXDLIN(1644)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1644)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1644)										Float width78 = ((Float)0.0);
HXDLIN(1644)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1644)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1644)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1644)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1644)										_gthis->_hx___textLayout->letterSpacing = letterSpacing37;
HXDLIN(1644)										bool positions28;
HXDLIN(1644)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1644)											positions28 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1644)											positions28 = true;
            										}
HXDLIN(1644)										_gthis->_hx___textLayout->autoHint = positions28;
HXDLIN(1644)										 ::openfl::_internal::text::TextLayout _gthis38 = _gthis->_hx___textLayout;
HXDLIN(1644)										_gthis38->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text37,placeIndex3,endIndex5));
HXDLIN(1644)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1644)										Float width79 = ((Float)0.0);
HXDLIN(1644)										{
HXLINE(1644)											int _g43 = (int)0;
HXDLIN(1644)											while((_g43 < positions->length)){
HXLINE(1644)												 ::openfl::_internal::text::GlyphPosition position41 = positions->__get(_g43).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)												_g43 = (_g43 + (int)1);
HXDLIN(1644)												width79 = (width79 + position41->advance->x);
            											}
            										}
HXDLIN(1644)										widthValue = width79;
            									}
            									else {
HXLINE(1644)										int tempIndex10 = placeIndex3;
HXDLIN(1644)										int tempRangeEnd19 = formatRange->end;
HXDLIN(1644)										int countRanges10 = (int)0;
HXDLIN(1644)										positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1644)										widthValue = (int)0;
HXDLIN(1644)										while(true){
HXLINE(1644)											if ((tempIndex10 != tempRangeEnd19)) {
HXLINE(1644)												::String text38 = _gthis->text;
HXDLIN(1644)												Float letterSpacing38 = ((Float)0.0);
HXDLIN(1644)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1644)													letterSpacing38 = formatRange->format->letterSpacing;
            												}
HXDLIN(1644)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1644)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1644)												Float width80 = ((Float)0.0);
HXDLIN(1644)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1644)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1644)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1644)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1644)												_gthis->_hx___textLayout->letterSpacing = letterSpacing38;
HXDLIN(1644)												bool _hx_tmp78;
HXDLIN(1644)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1644)													_hx_tmp78 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1644)													_hx_tmp78 = true;
            												}
HXDLIN(1644)												_gthis->_hx___textLayout->autoHint = _hx_tmp78;
HXDLIN(1644)												 ::openfl::_internal::text::TextLayout _gthis39 = _gthis->_hx___textLayout;
HXDLIN(1644)												_gthis39->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text38,tempIndex10,tempRangeEnd19));
HXDLIN(1644)												::Array< ::Dynamic> tempPositions14 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1644)												positions = positions->concat(tempPositions14);
            											}
HXDLIN(1644)											if ((tempRangeEnd19 != endIndex5)) {
HXLINE(1644)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1644)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1644)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1644)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1644)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1644)												tempIndex10 = tempRangeEnd19;
HXDLIN(1644)												if ((endIndex5 < formatRange->end)) {
HXLINE(1644)													tempRangeEnd19 = endIndex5;
            												}
            												else {
HXLINE(1644)													tempRangeEnd19 = formatRange->end;
            												}
HXDLIN(1644)												countRanges10 = (countRanges10 + (int)1);
            											}
            											else {
HXLINE(1644)												Float width81 = ((Float)0.0);
HXDLIN(1644)												{
HXLINE(1644)													int _g44 = (int)0;
HXDLIN(1644)													while((_g44 < positions->length)){
HXLINE(1644)														 ::openfl::_internal::text::GlyphPosition position42 = positions->__get(_g44).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)														_g44 = (_g44 + (int)1);
HXDLIN(1644)														width81 = (width81 + position42->advance->x);
            													}
            												}
HXDLIN(1644)												widthValue = width81;
HXDLIN(1644)												goto _hx_goto_94;
            											}
            										}
            										_hx_goto_94:;
HXDLIN(1644)										rangeIndex = (rangeIndex - (countRanges10 + (int)1));
HXDLIN(1644)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1644)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1644)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1644)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1644)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
            									}
HXDLIN(1644)									remainingPositions3 = positions;
HXDLIN(1644)									tempWidth3 = widthValue;
            								}
            								_hx_goto_83:;
            							}
HXDLIN(1644)							{
HXLINE(1644)								if ((endIndex5 <= formatRange->end)) {
HXLINE(1644)									::String text39 = _gthis->text;
HXDLIN(1644)									Float letterSpacing39 = ((Float)0.0);
HXDLIN(1644)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1644)										letterSpacing39 = formatRange->format->letterSpacing;
            									}
HXDLIN(1644)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1644)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1644)									Float width82 = ((Float)0.0);
HXDLIN(1644)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1644)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1644)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1644)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1644)									_gthis->_hx___textLayout->letterSpacing = letterSpacing39;
HXDLIN(1644)									bool positions29;
HXDLIN(1644)									if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1644)										positions29 = (_gthis->sharpness < (int)400);
            									}
            									else {
HXLINE(1644)										positions29 = true;
            									}
HXDLIN(1644)									_gthis->_hx___textLayout->autoHint = positions29;
HXDLIN(1644)									 ::openfl::_internal::text::TextLayout _gthis40 = _gthis->_hx___textLayout;
HXDLIN(1644)									_gthis40->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text39,textIndex,endIndex5));
HXDLIN(1644)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1644)									Float width83 = ((Float)0.0);
HXDLIN(1644)									{
HXLINE(1644)										int _g45 = (int)0;
HXDLIN(1644)										while((_g45 < positions->length)){
HXLINE(1644)											 ::openfl::_internal::text::GlyphPosition position43 = positions->__get(_g45).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)											_g45 = (_g45 + (int)1);
HXDLIN(1644)											width83 = (width83 + position43->advance->x);
            										}
            									}
HXDLIN(1644)									widthValue = width83;
HXDLIN(1644)									bool _hx_tmp79;
HXDLIN(1644)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1644)										_hx_tmp79 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1644)										_hx_tmp79 = true;
            									}
HXDLIN(1644)									if (_hx_tmp79) {
HXLINE(1644)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex5);
HXDLIN(1644)										::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            									}
            									else {
HXLINE(1644)										layoutGroup->format = formatRange->format;
HXDLIN(1644)										layoutGroup->startIndex = textIndex;
HXDLIN(1644)										layoutGroup->endIndex = endIndex5;
            									}
HXDLIN(1644)									layoutGroup->positions = positions;
HXDLIN(1644)									layoutGroup->offsetX = offsetX;
HXDLIN(1644)									layoutGroup->ascent = ascent;
HXDLIN(1644)									layoutGroup->descent = descent;
HXDLIN(1644)									layoutGroup->leading = leading;
HXDLIN(1644)									layoutGroup->lineIndex = lineIndex;
HXDLIN(1644)									layoutGroup->offsetY = offsetY;
HXDLIN(1644)									layoutGroup->width = widthValue;
HXDLIN(1644)									layoutGroup->height = heightValue;
HXDLIN(1644)									offsetX = (offsetX + widthValue);
HXDLIN(1644)									if ((endIndex5 == formatRange->end)) {
HXLINE(1644)										layoutGroup = null();
HXDLIN(1644)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1644)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1644)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1644)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1644)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXDLIN(1644)										{
HXLINE(1644)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1644)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1644)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1644)												bool _hx_tmp80;
HXDLIN(1644)												if (hx::IsNotNull( font )) {
HXLINE(1644)													_hx_tmp80 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1644)													_hx_tmp80 = false;
            												}
HXDLIN(1644)												if (_hx_tmp80) {
HXLINE(1644)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1644)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1644)													ascent = currentFormat->size;
HXDLIN(1644)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1644)											leading = currentFormat->leading;
HXDLIN(1644)											heightValue = ((ascent + descent) + leading);
HXDLIN(1644)											if ((heightValue > maxHeightValue)) {
HXLINE(1644)												maxHeightValue = heightValue;
            											}
HXDLIN(1644)											if ((ascent > maxAscent)) {
HXLINE(1644)												maxAscent = ascent;
            											}
            										}
            									}
            								}
            								else {
HXLINE(1644)									while(true){
HXLINE(1644)										int tempRangeEnd20;
HXDLIN(1644)										if ((endIndex5 < formatRange->end)) {
HXLINE(1644)											tempRangeEnd20 = endIndex5;
            										}
            										else {
HXLINE(1644)											tempRangeEnd20 = formatRange->end;
            										}
HXDLIN(1644)										if ((textIndex != tempRangeEnd20)) {
HXLINE(1644)											::String text40 = _gthis->text;
HXDLIN(1644)											Float letterSpacing40 = ((Float)0.0);
HXDLIN(1644)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1644)												letterSpacing40 = formatRange->format->letterSpacing;
            											}
HXDLIN(1644)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1644)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1644)											Float width84 = ((Float)0.0);
HXDLIN(1644)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1644)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1644)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1644)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1644)											_gthis->_hx___textLayout->letterSpacing = letterSpacing40;
HXDLIN(1644)											bool positions30;
HXDLIN(1644)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1644)												positions30 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1644)												positions30 = true;
            											}
HXDLIN(1644)											_gthis->_hx___textLayout->autoHint = positions30;
HXDLIN(1644)											 ::openfl::_internal::text::TextLayout _gthis41 = _gthis->_hx___textLayout;
HXDLIN(1644)											_gthis41->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text40,textIndex,tempRangeEnd20));
HXDLIN(1644)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1644)											Float width85 = ((Float)0.0);
HXDLIN(1644)											{
HXLINE(1644)												int _g46 = (int)0;
HXDLIN(1644)												while((_g46 < positions->length)){
HXLINE(1644)													 ::openfl::_internal::text::GlyphPosition position44 = positions->__get(_g46).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1644)													_g46 = (_g46 + (int)1);
HXDLIN(1644)													width85 = (width85 + position44->advance->x);
            												}
            											}
HXDLIN(1644)											widthValue = width85;
HXDLIN(1644)											bool _hx_tmp81;
HXDLIN(1644)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1644)												_hx_tmp81 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1644)												_hx_tmp81 = true;
            											}
HXDLIN(1644)											if (_hx_tmp81) {
HXLINE(1644)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd20);
HXDLIN(1644)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1644)												layoutGroup->format = formatRange->format;
HXDLIN(1644)												layoutGroup->startIndex = textIndex;
HXDLIN(1644)												layoutGroup->endIndex = tempRangeEnd20;
            											}
HXDLIN(1644)											layoutGroup->positions = positions;
HXDLIN(1644)											layoutGroup->offsetX = offsetX;
HXDLIN(1644)											layoutGroup->ascent = ascent;
HXDLIN(1644)											layoutGroup->descent = descent;
HXDLIN(1644)											layoutGroup->leading = leading;
HXDLIN(1644)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1644)											layoutGroup->offsetY = offsetY;
HXDLIN(1644)											layoutGroup->width = widthValue;
HXDLIN(1644)											layoutGroup->height = heightValue;
HXDLIN(1644)											offsetX = (offsetX + widthValue);
HXDLIN(1644)											textIndex = tempRangeEnd20;
            										}
HXDLIN(1644)										if ((tempRangeEnd20 == formatRange->end)) {
HXLINE(1644)											layoutGroup = null();
            										}
HXDLIN(1644)										if ((tempRangeEnd20 == endIndex5)) {
HXLINE(1644)											goto _hx_goto_97;
            										}
HXDLIN(1644)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1644)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1644)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1644)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1644)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXDLIN(1644)										{
HXLINE(1644)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1644)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1644)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1644)												bool _hx_tmp82;
HXDLIN(1644)												if (hx::IsNotNull( font )) {
HXLINE(1644)													_hx_tmp82 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1644)													_hx_tmp82 = false;
            												}
HXDLIN(1644)												if (_hx_tmp82) {
HXLINE(1644)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1644)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1644)													ascent = currentFormat->size;
HXDLIN(1644)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1644)											leading = currentFormat->leading;
HXDLIN(1644)											heightValue = ((ascent + descent) + leading);
HXDLIN(1644)											if ((heightValue > maxHeightValue)) {
HXLINE(1644)												maxHeightValue = heightValue;
            											}
HXDLIN(1644)											if ((ascent > maxAscent)) {
HXLINE(1644)												maxAscent = ascent;
            											}
            										}
            									}
            									_hx_goto_97:;
            								}
HXDLIN(1644)								textIndex = endIndex5;
            							}
            						}
HXLINE(1646)						{
HXLINE(1646)							{
HXLINE(1646)								if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1646)									ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1646)									descent = (currentFormat->size * currentFormat->_hx___descent);
            								}
            								else {
HXLINE(1646)									bool _hx_tmp83;
HXDLIN(1646)									if (hx::IsNotNull( font )) {
HXLINE(1646)										_hx_tmp83 = (font->unitsPerEM != (int)0);
            									}
            									else {
HXLINE(1646)										_hx_tmp83 = false;
            									}
HXDLIN(1646)									if (_hx_tmp83) {
HXLINE(1646)										ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1646)										descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            									}
            									else {
HXLINE(1646)										ascent = currentFormat->size;
HXDLIN(1646)										descent = (currentFormat->size * ((Float)0.185));
            									}
            								}
HXDLIN(1646)								leading = currentFormat->leading;
HXDLIN(1646)								heightValue = ((ascent + descent) + leading);
HXDLIN(1646)								if ((heightValue > maxHeightValue)) {
HXLINE(1646)									maxHeightValue = heightValue;
            								}
HXDLIN(1646)								if ((ascent > maxAscent)) {
HXLINE(1646)									maxAscent = ascent;
            								}
            							}
HXDLIN(1646)							int i12 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1646)							while(true){
HXLINE(1646)								i12 = (i12 - (int)1);
HXDLIN(1646)								if (!((i12 > (int)-1))) {
HXLINE(1646)									goto _hx_goto_99;
            								}
HXDLIN(1646)								 ::openfl::_internal::text::TextLayoutGroup lg6 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i12)) );
HXDLIN(1646)								if ((lg6->lineIndex < lineIndex)) {
HXLINE(1646)									goto _hx_goto_99;
            								}
HXDLIN(1646)								if ((lg6->lineIndex > lineIndex)) {
HXLINE(1646)									continue;
            								}
HXDLIN(1646)								lg6->ascent = maxAscent;
HXDLIN(1646)								lg6->height = maxHeightValue;
            							}
            							_hx_goto_99:;
HXDLIN(1646)							offsetY = (offsetY + maxHeightValue);
HXDLIN(1646)							maxAscent = ((Float)0.0);
HXDLIN(1646)							maxHeightValue = ((Float)0.0);
HXDLIN(1646)							lineIndex = (lineIndex + (int)1);
HXDLIN(1646)							offsetX = (int)2;
            						}
            					}
HXLINE(1650)					textIndex = (textIndex + (int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

::String TextEngine_obj::restrictText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1665_restrictText)
HXLINE(1667)		if (hx::IsNull( value )) {
HXLINE(1669)			return value;
            		}
HXLINE(1673)		if (hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1675)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1685)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,restrictText,return )

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1690_setTextAlignment)
HXLINE(1692)		int lineIndex = (int)-1;
HXLINE(1693)		Float offsetX = ((Float)0.0);
HXLINE(1694)		Float totalWidth = (this->width - (int)4);
HXLINE(1695)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1695)		int lineLength;
HXLINE(1696)		bool lineMeasurementsDirty = false;
HXLINE(1698)		{
HXLINE(1698)			int _g1 = (int)0;
HXDLIN(1698)			int _g = this->layoutGroups->get_length();
HXDLIN(1698)			while((_g1 < _g)){
HXLINE(1698)				_g1 = (_g1 + (int)1);
HXDLIN(1698)				int i = (_g1 - (int)1);
HXLINE(1700)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1702)				if ((group->lineIndex != lineIndex)) {
HXLINE(1704)					lineIndex = group->lineIndex;
HXLINE(1706)					{
HXLINE(1706)						 ::Dynamic _g2 = group->format->align;
HXDLIN(1706)						 ::Dynamic _hx_switch_0 = _g2;
            						if (  (_hx_switch_0==(int)0) ){
HXLINE(1710)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1712)								offsetX = ::Math_obj::round(((Float)(totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )) / (Float)(int)2));
            							}
            							else {
HXLINE(1716)								offsetX = (int)0;
            							}
HXLINE(1710)							goto _hx_goto_103;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1734)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1736)								lineLength = (int)1;
HXLINE(1738)								{
HXLINE(1738)									int _g3 = (i + (int)1);
HXDLIN(1738)									int _g21 = ::openfl::_Vector::IVector_obj::get_length(this->layoutGroups);
HXDLIN(1738)									while((_g3 < _g21)){
HXLINE(1738)										_g3 = (_g3 + (int)1);
HXDLIN(1738)										int j = (_g3 - (int)1);
HXLINE(1740)										if ((( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->lineIndex == lineIndex)) {
HXLINE(1742)											bool _hx_tmp;
HXDLIN(1742)											if ((j != (int)0)) {
HXLINE(1742)												::String _hx_tmp1 = this->text;
HXDLIN(1742)												_hx_tmp = hx::IsEq( ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(_hx_tmp1,(( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->startIndex - (int)1)),(int)32 );
            											}
            											else {
HXLINE(1742)												_hx_tmp = true;
            											}
HXDLIN(1742)											if (_hx_tmp) {
HXLINE(1744)												lineLength = (lineLength + (int)1);
            											}
            										}
            										else {
HXLINE(1750)											goto _hx_goto_104;
            										}
            									}
            									_hx_goto_104:;
            								}
HXLINE(1756)								if ((lineLength > (int)1)) {
HXLINE(1758)									group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,((i + lineLength) - (int)1))) );
HXLINE(1760)									 ::Dynamic endChar = ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(this->text,group->endIndex);
HXLINE(1761)									bool _hx_tmp2;
HXDLIN(1761)									bool _hx_tmp3;
HXDLIN(1761)									int group1 = group->endIndex;
HXDLIN(1761)									if ((group1 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1761)										_hx_tmp3 = hx::IsNotEq( endChar,(int)10 );
            									}
            									else {
HXLINE(1761)										_hx_tmp3 = false;
            									}
HXDLIN(1761)									if (_hx_tmp3) {
HXLINE(1761)										_hx_tmp2 = hx::IsNotEq( endChar,(int)13 );
            									}
            									else {
HXLINE(1761)										_hx_tmp2 = false;
            									}
HXDLIN(1761)									if (_hx_tmp2) {
HXLINE(1763)										Float offsetX1 = (totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ));
HXDLIN(1763)										offsetX = ((Float)offsetX1 / (Float)(lineLength - (int)1));
HXLINE(1764)										lineMeasurementsDirty = true;
HXLINE(1766)										int j1 = (int)1;
HXLINE(1767)										while(true){
HXLINE(1776)											 ::openfl::_internal::text::TextLayoutGroup _hx_tmp4 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j1))) );
HXDLIN(1776)											_hx_tmp4->offsetX = (_hx_tmp4->offsetX + (offsetX * j1));
HXLINE(1778)											j1 = (j1 + (int)1);
HXLINE(1767)											if (!((j1 < lineLength))) {
HXLINE(1767)												goto _hx_goto_105;
            											}
            										}
            										_hx_goto_105:;
            									}
            								}
            							}
HXLINE(1786)							offsetX = (int)0;
HXLINE(1732)							goto _hx_goto_103;
            						}
            						if (  (_hx_switch_0==(int)4) ){
HXLINE(1722)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1724)								offsetX = ::Math_obj::round((totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )));
            							}
            							else {
HXLINE(1728)								offsetX = (int)0;
            							}
HXLINE(1722)							goto _hx_goto_103;
            						}
            						/* default */{
HXLINE(1790)							offsetX = (int)0;
            						}
            						_hx_goto_103:;
            					}
            				}
HXLINE(1796)				if ((offsetX > (int)0)) {
HXLINE(1798)					 ::openfl::_internal::text::TextLayoutGroup group2 = group;
HXDLIN(1798)					group2->offsetX = (group2->offsetX + offsetX);
            				}
            			}
            		}
HXLINE(1804)		if (lineMeasurementsDirty) {
HXLINE(1808)			this->getLineMeasurements();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

::String TextEngine_obj::trimText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1815_trimText)
HXLINE(1817)		if (hx::IsNull( value )) {
HXLINE(1819)			return value;
            		}
HXLINE(1823)		bool _hx_tmp;
HXDLIN(1823)		if ((this->maxChars > (int)0)) {
HXLINE(1823)			int _hx_tmp1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(value);
HXDLIN(1823)			_hx_tmp = (_hx_tmp1 > this->maxChars);
            		}
            		else {
HXLINE(1823)			_hx_tmp = false;
            		}
HXDLIN(1823)		if (_hx_tmp) {
HXLINE(1825)			value = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(value,(int)0,this->maxChars);
            		}
HXLINE(1829)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,trimText,return )

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1834_update)
HXLINE(1836)		bool _hx_tmp;
HXDLIN(1836)		if (hx::IsNotNull( this->text )) {
HXLINE(1836)			_hx_tmp = (this->textFormatRanges->get_length() == (int)0);
            		}
            		else {
HXLINE(1836)			_hx_tmp = true;
            		}
HXDLIN(1836)		if (_hx_tmp) {
HXLINE(1838)			this->lineAscents->set_length((int)0);
HXLINE(1839)			this->lineBreaks->set_length((int)0);
HXLINE(1840)			this->lineDescents->set_length((int)0);
HXLINE(1841)			this->lineLeadings->set_length((int)0);
HXLINE(1842)			this->lineHeights->set_length((int)0);
HXLINE(1843)			this->lineWidths->set_length((int)0);
HXLINE(1844)			this->layoutGroups->set_length((int)0);
HXLINE(1846)			this->textWidth = (int)0;
HXLINE(1847)			this->textHeight = (int)0;
HXLINE(1848)			this->numLines = (int)1;
HXLINE(1849)			this->maxScrollH = (int)0;
HXLINE(1850)			this->maxScrollV = (int)1;
HXLINE(1851)			this->bottomScrollV = (int)1;
            		}
            		else {
HXLINE(1855)			this->getLayoutGroups();
HXLINE(1856)			this->getLineMeasurements();
HXLINE(1857)			this->setTextAlignment();
            		}
HXLINE(1861)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1872_set_restrict)
HXLINE(1874)		if (::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->restrict,value)) {
HXLINE(1876)			return this->restrict;
            		}
HXLINE(1880)		this->restrict = value;
HXLINE(1882)		bool _hx_tmp;
HXDLIN(1882)		if (hx::IsNotNull( this->restrict )) {
HXLINE(1882)			_hx_tmp = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->restrict) == (int)0);
            		}
            		else {
HXLINE(1882)			_hx_tmp = true;
            		}
HXDLIN(1882)		if (_hx_tmp) {
HXLINE(1884)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1888)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1892)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1899_set_text)
HXDLIN(1899)		return (this->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_197_findFont)
HXLINE( 205)		{
HXLINE( 205)			int _g = (int)0;
HXDLIN( 205)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 205)			while((_g < _g1->length)){
HXLINE( 205)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 205)				_g = (_g + (int)1);
HXLINE( 207)				if (hx::IsNull( registeredFont )) {
HXLINE( 207)					continue;
            				}
HXLINE( 209)				bool _hx_tmp;
HXDLIN( 209)				if ((registeredFont->name != name)) {
HXLINE( 209)					if (hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 209)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 209)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 209)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 209)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 209)					_hx_tmp = true;
            				}
HXDLIN( 209)				if (_hx_tmp) {
HXLINE( 211)					if (registeredFont->_hx___initialize()) {
HXLINE( 213)						return registeredFont;
            					}
            				}
            			}
            		}
HXLINE( 225)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 227)		if (hx::IsNotNull( font )) {
HXLINE( 229)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 230)			return font;
            		}
HXLINE( 236)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

 ::openfl::text::Font TextEngine_obj::findFontVariant( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_241_findFontVariant)
HXLINE( 243)		::String fontName = format->font;
HXLINE( 244)		 ::Dynamic bold = format->bold;
HXLINE( 245)		 ::Dynamic italic = format->italic;
HXLINE( 247)		if (hx::IsNull( fontName )) {
HXLINE( 247)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 248)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 250)		bool _hx_tmp;
HXDLIN( 250)		bool _hx_tmp1;
HXDLIN( 250)		if (bold) {
HXLINE( 250)			_hx_tmp1 = italic;
            		}
            		else {
HXLINE( 250)			_hx_tmp1 = false;
            		}
HXDLIN( 250)		if (_hx_tmp1) {
HXLINE( 250)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 250)			_hx_tmp = false;
            		}
HXDLIN( 250)		if (_hx_tmp) {
HXLINE( 252)			return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 254)			bool _hx_tmp2;
HXDLIN( 254)			if (bold) {
HXLINE( 254)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 254)				_hx_tmp2 = false;
            			}
HXDLIN( 254)			if (_hx_tmp2) {
HXLINE( 256)				return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 258)				bool _hx_tmp3;
HXDLIN( 258)				if (italic) {
HXLINE( 258)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 258)					_hx_tmp3 = false;
            				}
HXDLIN( 258)				if (_hx_tmp3) {
HXLINE( 260)					return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            			}
            		}
HXLINE( 264)		return ::openfl::_internal::text::TextEngine_obj::findFont(fontName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFontVariant,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_297_getFormatHeight)
HXLINE( 299)		Float ascent;
HXDLIN( 299)		Float descent;
HXDLIN( 299)		int leading;
HXLINE( 305)		 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(format);
HXLINE( 307)		if (hx::IsNotNull( format->_hx___ascent )) {
HXLINE( 309)			ascent = (format->size * format->_hx___ascent);
HXLINE( 310)			descent = (format->size * format->_hx___descent);
            		}
            		else {
HXLINE( 313)			bool _hx_tmp;
HXDLIN( 313)			if (hx::IsNotNull( font )) {
HXLINE( 313)				_hx_tmp = (font->unitsPerEM != (int)0);
            			}
            			else {
HXLINE( 313)				_hx_tmp = false;
            			}
HXDLIN( 313)			if (_hx_tmp) {
HXLINE( 315)				ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * format->size);
HXLINE( 316)				descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * format->size));
            			}
            			else {
HXLINE( 321)				ascent = format->size;
HXLINE( 322)				descent = (format->size * ((Float)0.185));
            			}
            		}
HXLINE( 326)		leading = format->leading;
HXLINE( 328)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_333_getFont)
HXLINE( 335)		::String fontName = format->font;
HXLINE( 336)		 ::Dynamic bold = format->bold;
HXLINE( 337)		 ::Dynamic italic = format->italic;
HXLINE( 339)		if (hx::IsNull( fontName )) {
HXLINE( 339)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 340)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 342)		bool _hx_tmp;
HXDLIN( 342)		bool _hx_tmp1;
HXDLIN( 342)		if (bold) {
HXLINE( 342)			_hx_tmp1 = italic;
            		}
            		else {
HXLINE( 342)			_hx_tmp1 = false;
            		}
HXDLIN( 342)		if (_hx_tmp1) {
HXLINE( 342)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 342)			_hx_tmp = false;
            		}
HXDLIN( 342)		if (_hx_tmp) {
HXLINE( 344)			fontName = (fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94));
HXLINE( 345)			bold = false;
HXLINE( 346)			italic = false;
            		}
            		else {
HXLINE( 348)			bool _hx_tmp2;
HXDLIN( 348)			if (bold) {
HXLINE( 348)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 348)				_hx_tmp2 = false;
            			}
HXDLIN( 348)			if (_hx_tmp2) {
HXLINE( 350)				fontName = (fontNamePrefix + HX_(" Bold",c5,3d,c7,98));
HXLINE( 351)				bold = false;
            			}
            			else {
HXLINE( 353)				bool _hx_tmp3;
HXDLIN( 353)				if (italic) {
HXLINE( 353)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 353)					_hx_tmp3 = false;
            				}
HXDLIN( 353)				if (_hx_tmp3) {
HXLINE( 355)					fontName = (fontNamePrefix + HX_(" Italic",30,7b,a7,6d));
HXLINE( 356)					italic = false;
            				}
            				else {
HXLINE( 362)					bool _hx_tmp4;
HXDLIN( 362)					if (bold) {
HXLINE( 362)						if ((fontName.indexOf(HX_(" Bold ",bb,ce,8e,15),null()) <= (int)-1)) {
HXLINE( 362)							_hx_tmp4 = ::StringTools_obj::endsWith(fontName,HX_(" Bold",c5,3d,c7,98));
            						}
            						else {
HXLINE( 362)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE( 362)						_hx_tmp4 = false;
            					}
HXDLIN( 362)					if (_hx_tmp4) {
HXLINE( 364)						bold = false;
            					}
HXLINE( 368)					bool _hx_tmp5;
HXDLIN( 368)					if (italic) {
HXLINE( 368)						if ((fontName.indexOf(HX_(" Italic ",f0,4e,e4,84),null()) <= (int)-1)) {
HXLINE( 368)							_hx_tmp5 = ::StringTools_obj::endsWith(fontName,HX_(" Italic",30,7b,a7,6d));
            						}
            						else {
HXLINE( 368)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE( 368)						_hx_tmp5 = false;
            					}
HXDLIN( 368)					if (_hx_tmp5) {
HXLINE( 370)						italic = false;
            					}
            				}
            			}
            		}
HXLINE( 376)		::String font;
HXDLIN( 376)		if (italic) {
HXLINE( 376)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 376)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 377)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 378)		::String font1;
HXDLIN( 378)		if (bold) {
HXLINE( 378)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 378)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 378)		font = (font + font1);
HXLINE( 379)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 380)		font = (font + ((HX_("/",2f,00,00,00) + ((format->leading + format->size) + (int)3)) + HX_("px ",18,65,55,00)));
HXLINE( 382)		::String font2;
HXDLIN( 382)		::String _hx_switch_0 = fontName;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 382)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 382)			goto _hx_goto_115;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 382)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 382)			goto _hx_goto_115;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 382)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 382)			goto _hx_goto_115;
            		}
            		/* default */{
HXLINE( 382)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(fontName,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_115:;
HXDLIN( 382)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 391)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_396_getFontInstance)
HXLINE( 404)		 ::openfl::text::Font instance = null();
HXLINE( 405)		::Array< ::String > fontList = null();
HXLINE( 407)		bool _hx_tmp;
HXDLIN( 407)		if (hx::IsNotNull( format )) {
HXLINE( 407)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 407)			_hx_tmp = false;
            		}
HXDLIN( 407)		if (_hx_tmp) {
HXLINE( 409)			if (::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 411)				return ::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font).StaticCast<  ::openfl::text::Font >();
            			}
HXLINE( 415)			instance = ::openfl::_internal::text::TextEngine_obj::findFontVariant(format);
HXLINE( 416)			if (hx::IsNotNull( instance )) {
HXLINE( 416)				return instance;
            			}
HXLINE( 418)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 420)			{
HXLINE( 420)				::String _g = format->font;
HXDLIN( 420)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 425)					if (format->bold) {
HXLINE( 427)						if (format->italic) {
HXLINE( 429)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbi.ttf",73,0e,91,06)));
            						}
            						else {
HXLINE( 433)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbd.ttf",ee,27,90,25)));
            						}
            					}
            					else {
HXLINE( 439)						if (format->italic) {
HXLINE( 441)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/ariali.ttf",2d,c9,3e,6e)));
            						}
            						else {
HXLINE( 445)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arial.ttf",2c,34,8e,d8)));
            						}
            					}
HXLINE( 425)					goto _hx_goto_117;
            				}
            				if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 460)					goto _hx_goto_117;
            				}
            				if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 467)					if (format->bold) {
HXLINE( 469)						if (format->italic) {
HXLINE( 471)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbi.ttf",77,1e,b8,e7)));
            						}
            						else {
HXLINE( 475)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbd.ttf",f2,37,b7,06)));
            						}
            					}
            					else {
HXLINE( 481)						if (format->italic) {
HXLINE( 483)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/couri.ttf",a9,a5,b8,d7)));
            						}
            						else {
HXLINE( 487)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/cour.ttf",30,7b,d2,6a)));
            						}
            					}
HXLINE( 467)					goto _hx_goto_117;
            				}
            				/* default */{
HXLINE( 504)					fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            				}
            				_hx_goto_117:;
            			}
HXLINE( 508)			if (hx::IsNotNull( fontList )) {
HXLINE( 510)				int _g1 = (int)0;
HXDLIN( 510)				while((_g1 < fontList->length)){
HXLINE( 510)					::String font = fontList->__get(_g1);
HXDLIN( 510)					_g1 = (_g1 + (int)1);
HXLINE( 512)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 514)					if (hx::IsNotNull( instance )) {
HXLINE( 516)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 517)						return instance;
            					}
            				}
            			}
HXLINE( 525)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 526)			if (hx::IsNotNull( instance )) {
HXLINE( 526)				return instance;
            			}
            		}
HXLINE( 530)		::String systemFontDirectory1 = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 533)		if (format->bold) {
HXLINE( 535)			if (format->italic) {
HXLINE( 537)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbi.ttf",36,79,1a,28)));
            			}
            			else {
HXLINE( 541)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbd.ttf",b1,92,19,47)));
            			}
            		}
            		else {
HXLINE( 547)			if (format->italic) {
HXLINE( 549)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesi.ttf",ca,27,e8,a0)));
            			}
            			else {
HXLINE( 553)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/times.ttf",2f,58,44,c5)));
            			}
            		}
HXLINE( 568)		{
HXLINE( 568)			int _g2 = (int)0;
HXDLIN( 568)			while((_g2 < fontList->length)){
HXLINE( 568)				::String font1 = fontList->__get(_g2);
HXDLIN( 568)				_g2 = (_g2 + (int)1);
HXLINE( 570)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font1);
HXLINE( 572)				if (hx::IsNotNull( instance )) {
HXLINE( 574)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 575)					return instance;
            				}
            			}
            		}
HXLINE( 581)		::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,null());
HXLINE( 585)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl._internal.text.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textBounds,"textBounds");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textBounds,"textBounds");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( scrollV ); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap ); }
		if (HX_FIELD_EQ(inName,"trimText") ) { return hx::Val( trimText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks ); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( maxScrollV ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"textBounds") ) { return hx::Val( textBounds ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight ); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType ); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents ); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights ); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown ); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups ); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents ); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout ); }
		if (HX_FIELD_EQ(inName,"restrictText") ) { return hx::Val( restrictText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( bottomScrollV ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth ); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges ); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight ); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return hx::Val( _hx___restrictRegexp ); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart ); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return hx::Val( _hx___useIntAdvances ); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return hx::Val( createRestrictRegexp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = ( _hx___defaultFonts ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findFontVariant") ) { outValue = findFontVariant_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textBounds") ) { textBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::openfl::_internal::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"));
	outFields->push(HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"));
	outFields->push(HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"));
	outFields->push(HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"));
	outFields->push(HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"));
	outFields->push(HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"));
	outFields->push(HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"));
	outFields->push(HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"));
	outFields->push(HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"));
	outFields->push(HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"));
	outFields->push(HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"));
	outFields->push(HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	outFields->push(HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"));
	outFields->push(HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"));
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,autoSize),HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,gridFitType),HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineAscents),HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineDescents),HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineHeights),HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineWidths),HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32")},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b")},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,textBounds),HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(TextEngine_obj,textField),HX_HCSTRING("textField","\xcd","\x24","\x81","\x99")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02")},
	{hx::fsObject /*::EReg*/ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{hx::fsObject /*::openfl::_internal::text::TextLayout*/ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28")},
	{hx::fsObject /*::openfl::text::Font*/ ,(int)offsetof(TextEngine_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"),
	HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"),
	HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"),
	HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"),
	HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"),
	HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"),
	HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"),
	HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"),
	HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"),
	HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"),
	HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"),
	HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"),
	HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"),
	HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"),
	HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"),
	HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"),
	HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"),
	HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"),
	HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"),
	HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"),
	HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"),
	HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"),
	HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"),
	HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"),
	HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"),
	HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"),
	HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"),
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("createRestrictRegexp","\x41","\xd0","\x6b","\xe1"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getLine","\xaa","\xc7","\x35","\x1a"),
	HX_HCSTRING("getLineBreakIndex","\x1d","\x16","\x36","\x36"),
	HX_HCSTRING("getLineMeasurements","\xc1","\x9f","\x81","\x56"),
	HX_HCSTRING("getLayoutGroups","\x54","\xf8","\x56","\x5a"),
	HX_HCSTRING("restrictText","\x09","\x12","\x3e","\x34"),
	HX_HCSTRING("setTextAlignment","\x74","\x0f","\x33","\x62"),
	HX_HCSTRING("trimText","\xaf","\xae","\x63","\x65"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d"),
	HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf"),
	HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7"),
	HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf"),
	HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda"),
	HX_HCSTRING("findFont","\xa8","\x6a","\x54","\x96"),
	HX_HCSTRING("findFontVariant","\xbd","\x22","\xbb","\xb2"),
	HX_HCSTRING("getFormatHeight","\x34","\x24","\x4b","\x62"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getFontInstance","\x3a","\x76","\x96","\x9e"),
	::String(null())
};

void TextEngine_obj::__register()
{
	hx::Object *dummy = new TextEngine_obj;
	TextEngine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.text.TextEngine","\x60","\x7a","\x88","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_50_boot)
HXDLIN(  50)		UTF8_TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_51_boot)
HXDLIN(  51)		UTF8_ENDLINE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_52_boot)
HXDLIN(  52)		UTF8_SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_53_boot)
HXDLIN(  53)		UTF8_HYPHEN = (int)45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_55_boot)
HXDLIN(  55)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
