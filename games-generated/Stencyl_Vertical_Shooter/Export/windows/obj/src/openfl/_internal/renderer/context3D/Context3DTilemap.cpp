// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBuffer
#include <openfl/_internal/renderer/context3D/Context3DBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DElementType
#include <openfl/_internal/renderer/context3D/Context3DElementType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DTilemap
#include <openfl/_internal/renderer/context3D/Context3DTilemap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectShader
#include <openfl/display/DisplayObjectShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_TileContainer
#include <openfl/display/TileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_display__Tileset_TileData
#include <openfl/display/_Tileset/TileData.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_855d17f42eb66a5f_64_buildBuffer,"openfl._internal.renderer.context3D.Context3DTilemap","buildBuffer",0x3a4ba297,"openfl._internal.renderer.context3D.Context3DTilemap.buildBuffer","openfl/_internal/renderer/context3D/Context3DTilemap.hx",64,0x145bef27)
HX_LOCAL_STACK_FRAME(_hx_pos_855d17f42eb66a5f_89_buildBufferTileContainer,"openfl._internal.renderer.context3D.Context3DTilemap","buildBufferTileContainer",0xecfd4f1c,"openfl._internal.renderer.context3D.Context3DTilemap.buildBufferTileContainer","openfl/_internal/renderer/context3D/Context3DTilemap.hx",89,0x145bef27)
HX_LOCAL_STACK_FRAME(_hx_pos_855d17f42eb66a5f_298_flush,"openfl._internal.renderer.context3D.Context3DTilemap","flush",0x7b6ff5cd,"openfl._internal.renderer.context3D.Context3DTilemap.flush","openfl/_internal/renderer/context3D/Context3DTilemap.hx",298,0x145bef27)
HX_LOCAL_STACK_FRAME(_hx_pos_855d17f42eb66a5f_392_render,"openfl._internal.renderer.context3D.Context3DTilemap","render",0x4655802d,"openfl._internal.renderer.context3D.Context3DTilemap.render","openfl/_internal/renderer/context3D/Context3DTilemap.hx",392,0x145bef27)
HX_LOCAL_STACK_FRAME(_hx_pos_855d17f42eb66a5f_437_renderTileContainer,"openfl._internal.renderer.context3D.Context3DTilemap","renderTileContainer",0x01dc2bc6,"openfl._internal.renderer.context3D.Context3DTilemap.renderTileContainer","openfl/_internal/renderer/context3D/Context3DTilemap.hx",437,0x145bef27)
HX_LOCAL_STACK_FRAME(_hx_pos_855d17f42eb66a5f_504_renderMask,"openfl._internal.renderer.context3D.Context3DTilemap","renderMask",0xfb4d07b9,"openfl._internal.renderer.context3D.Context3DTilemap.renderMask","openfl/_internal/renderer/context3D/Context3DTilemap.hx",504,0x145bef27)
HX_LOCAL_STACK_FRAME(_hx_pos_855d17f42eb66a5f_590_resizeBuffer,"openfl._internal.renderer.context3D.Context3DTilemap","resizeBuffer",0xb89c4a2b,"openfl._internal.renderer.context3D.Context3DTilemap.resizeBuffer","openfl/_internal/renderer/context3D/Context3DTilemap.hx",590,0x145bef27)
namespace openfl{
namespace _internal{
namespace renderer{
namespace context3D{

void Context3DTilemap_obj::__construct() { }

Dynamic Context3DTilemap_obj::__CreateEmpty() { return new Context3DTilemap_obj; }

void *Context3DTilemap_obj::_hx_vtable = 0;

Dynamic Context3DTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3DTilemap_obj > _hx_result = new Context3DTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Context3DTilemap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e46d37f;
}

 ::openfl::geom::ColorTransform Context3DTilemap_obj::cacheColorTransform;

 ::openfl::display3D::Context3D Context3DTilemap_obj::context;

int Context3DTilemap_obj::dataPerVertex;

 ::openfl::display::BitmapData Context3DTilemap_obj::currentBitmapData;

 ::Dynamic Context3DTilemap_obj::currentBlendMode;

 ::openfl::display::Shader Context3DTilemap_obj::currentShader;

int Context3DTilemap_obj::bufferPosition;

int Context3DTilemap_obj::lastFlushedPosition;

 ::openfl::display::BitmapData Context3DTilemap_obj::lastUsedBitmapData;

 ::openfl::display::Shader Context3DTilemap_obj::lastUsedShader;

int Context3DTilemap_obj::numTiles;

 ::lime::utils::ArrayBufferView Context3DTilemap_obj::vertexBufferData;

int Context3DTilemap_obj::vertexDataPosition;

void Context3DTilemap_obj::buildBuffer( ::openfl::display::Tilemap tilemap, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_855d17f42eb66a5f_64_buildBuffer)
HXLINE(  66)		bool _hx_tmp;
HXDLIN(  66)		bool _hx_tmp1;
HXDLIN(  66)		if (!(!(tilemap->_hx___renderable))) {
HXLINE(  66)			_hx_tmp1 = (tilemap->_hx___group->_hx___tiles->length == (int)0);
            		}
            		else {
HXLINE(  66)			_hx_tmp1 = true;
            		}
HXDLIN(  66)		if (!(_hx_tmp1)) {
HXLINE(  66)			_hx_tmp = (tilemap->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(  66)			_hx_tmp = true;
            		}
HXDLIN(  66)		if (_hx_tmp) {
HXLINE(  66)			return;
            		}
HXLINE(  68)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::numTiles = (int)0;
HXLINE(  69)		 ::lime::utils::ArrayBufferView _hx_tmp2;
HXDLIN(  69)		if (hx::IsNotNull( tilemap->_hx___buffer )) {
HXLINE(  69)			_hx_tmp2 = tilemap->_hx___buffer->vertexBufferData;
            		}
            		else {
HXLINE(  69)			_hx_tmp2 = null();
            		}
HXDLIN(  69)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData = _hx_tmp2;
HXLINE(  70)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexDataPosition = (int)0;
HXLINE(  72)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  73)		 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(  74)		 ::openfl::geom::Matrix parentTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(  76)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex = (int)4;
HXLINE(  77)		if (tilemap->tileAlphaEnabled) {
HXLINE(  77)			::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex++;
            		}
HXLINE(  78)		if (tilemap->tileColorTransformEnabled) {
HXLINE(  78)			 ::Dynamic _hx_tmp3 = hx::ClassOf< ::openfl::_internal::renderer::context3D::Context3DTilemap >();
HXDLIN(  78)			::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex = (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex + (int)8);
            		}
HXLINE(  80)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::buildBufferTileContainer(tilemap,tilemap->_hx___group,renderer,parentTransform,tilemap->_hx___tileset,tilemap->tileAlphaEnabled,tilemap->_hx___worldAlpha,tilemap->tileColorTransformEnabled,tilemap->_hx___worldColorTransform,null(),rect,matrix);
HXLINE(  82)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(  83)		::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
HXLINE(  84)		::openfl::geom::Matrix_obj::_hx___pool->release(parentTransform);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DTilemap_obj,buildBuffer,(void))

void Context3DTilemap_obj::buildBufferTileContainer( ::openfl::display::Tilemap tilemap, ::openfl::display::TileContainer group, ::openfl::display::OpenGLRenderer renderer, ::openfl::geom::Matrix parentTransform, ::openfl::display::Tileset defaultTileset,bool alphaEnabled,Float worldAlpha,bool colorTransformEnabled, ::openfl::geom::ColorTransform defaultColorTransform, ::openfl::display::BitmapData cacheBitmapData, ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_GC_STACKFRAME(&_hx_pos_855d17f42eb66a5f_89_buildBufferTileContainer)
HXLINE(  91)		 ::openfl::geom::Matrix tileTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(  92)		bool roundPixels = renderer->_hx___roundPixels;
HXLINE(  94)		::Array< ::Dynamic> tiles = group->_hx___tiles;
HXLINE(  95)		int length = group->__length;
HXLINE(  97)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::resizeBuffer(tilemap,(::openfl::_internal::renderer::context3D::Context3DTilemap_obj::numTiles + length));
HXLINE(  99)		 ::Dynamic tile;
HXDLIN(  99)		 ::openfl::display::Tileset tileset;
HXDLIN(  99)		Float alpha;
HXDLIN(  99)		bool visible;
HXDLIN(  99)		 ::openfl::geom::ColorTransform colorTransform = null();
HXDLIN(  99)		int id;
HXDLIN(  99)		 ::openfl::display::_Tileset::TileData tileData;
HXDLIN(  99)		 ::openfl::geom::Rectangle tileRect;
HXDLIN(  99)		 ::openfl::display::BitmapData bitmapData;
HXLINE( 100)		Float tileWidth;
HXDLIN( 100)		Float tileHeight;
HXDLIN( 100)		Float uvX;
HXDLIN( 100)		Float uvY;
HXDLIN( 100)		Float uvHeight;
HXDLIN( 100)		Float uvWidth;
HXDLIN( 100)		int vertexOffset;
HXLINE( 101)		Float x;
HXDLIN( 101)		Float y;
HXDLIN( 101)		Float x2;
HXDLIN( 101)		Float y2;
HXDLIN( 101)		Float x3;
HXDLIN( 101)		Float y3;
HXDLIN( 101)		Float x4;
HXDLIN( 101)		Float y4;
HXLINE( 103)		int alphaPosition = (int)4;
HXLINE( 104)		int ctPosition;
HXDLIN( 104)		if (alphaEnabled) {
HXLINE( 104)			ctPosition = (int)5;
            		}
            		else {
HXLINE( 104)			ctPosition = (int)4;
            		}
HXLINE( 106)		{
HXLINE( 106)			int _g = (int)0;
HXDLIN( 106)			while((_g < tiles->length)){
HXLINE( 106)				 ::openfl::display::Tile tile1 = tiles->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 106)				_g = (_g + (int)1);
HXLINE( 108)				Float _hx_tmp = -(tile1->get_originX());
HXDLIN( 108)				tileTransform->setTo((int)1,(int)0,(int)0,(int)1,_hx_tmp,-(tile1->get_originY()));
HXLINE( 109)				tileTransform->concat(tile1->get_matrix());
HXLINE( 110)				tileTransform->concat(parentTransform);
HXLINE( 112)				if (roundPixels) {
HXLINE( 114)					tileTransform->tx = ::Math_obj::round(tileTransform->tx);
HXLINE( 115)					tileTransform->ty = ::Math_obj::round(tileTransform->ty);
            				}
HXLINE( 119)				if (hx::IsNotNull( tile1->get_tileset() )) {
HXLINE( 119)					tileset = tile1->get_tileset();
            				}
            				else {
HXLINE( 119)					tileset = defaultTileset;
            				}
HXLINE( 121)				alpha = (tile1->get_alpha() * worldAlpha);
HXLINE( 122)				visible = tile1->get_visible();
HXLINE( 123)				tile1->_hx___dirty = false;
HXLINE( 125)				bool _hx_tmp1;
HXDLIN( 125)				if (!(!(visible))) {
HXLINE( 125)					_hx_tmp1 = (alpha <= (int)0);
            				}
            				else {
HXLINE( 125)					_hx_tmp1 = true;
            				}
HXDLIN( 125)				if (_hx_tmp1) {
HXLINE( 125)					continue;
            				}
HXLINE( 127)				if (colorTransformEnabled) {
HXLINE( 129)					if (hx::IsNotNull( tile1->get_colorTransform() )) {
HXLINE( 131)						if (hx::IsNull( defaultColorTransform )) {
HXLINE( 133)							colorTransform = tile1->get_colorTransform();
            						}
            						else {
HXLINE( 137)							if (hx::IsNull( ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::cacheColorTransform )) {
HXLINE( 139)								::openfl::_internal::renderer::context3D::Context3DTilemap_obj::cacheColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            							}
HXLINE( 143)							colorTransform = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::cacheColorTransform;
HXLINE( 144)							Float defaultColorTransform1 = defaultColorTransform->redMultiplier;
HXDLIN( 144)							colorTransform->redMultiplier = (defaultColorTransform1 * tile1->get_colorTransform()->redMultiplier);
HXLINE( 145)							Float defaultColorTransform2 = defaultColorTransform->greenMultiplier;
HXDLIN( 145)							colorTransform->greenMultiplier = (defaultColorTransform2 * tile1->get_colorTransform()->greenMultiplier);
HXLINE( 146)							Float defaultColorTransform3 = defaultColorTransform->blueMultiplier;
HXDLIN( 146)							colorTransform->blueMultiplier = (defaultColorTransform3 * tile1->get_colorTransform()->blueMultiplier);
HXLINE( 147)							Float defaultColorTransform4 = defaultColorTransform->alphaMultiplier;
HXDLIN( 147)							colorTransform->alphaMultiplier = (defaultColorTransform4 * tile1->get_colorTransform()->alphaMultiplier);
HXLINE( 148)							Float defaultColorTransform5 = defaultColorTransform->redOffset;
HXDLIN( 148)							colorTransform->redOffset = (defaultColorTransform5 + tile1->get_colorTransform()->redOffset);
HXLINE( 149)							Float defaultColorTransform6 = defaultColorTransform->greenOffset;
HXDLIN( 149)							colorTransform->greenOffset = (defaultColorTransform6 + tile1->get_colorTransform()->greenOffset);
HXLINE( 150)							Float defaultColorTransform7 = defaultColorTransform->blueOffset;
HXDLIN( 150)							colorTransform->blueOffset = (defaultColorTransform7 + tile1->get_colorTransform()->blueOffset);
HXLINE( 151)							Float defaultColorTransform8 = defaultColorTransform->alphaOffset;
HXDLIN( 151)							colorTransform->alphaOffset = (defaultColorTransform8 + tile1->get_colorTransform()->alphaOffset);
            						}
            					}
            					else {
HXLINE( 157)						colorTransform = defaultColorTransform;
            					}
            				}
HXLINE( 163)				if (!(alphaEnabled)) {
HXLINE( 163)					alpha = (int)1;
            				}
HXLINE( 165)				if ((tile1->__length > (int)0)) {
HXLINE( 167)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::buildBufferTileContainer(tilemap,( ( ::openfl::display::TileContainer)(tile1) ),renderer,tileTransform,tileset,alphaEnabled,alpha,colorTransformEnabled,colorTransform,cacheBitmapData,rect,matrix);
            				}
            				else {
HXLINE( 171)					if (hx::IsNull( tileset )) {
HXLINE( 171)						continue;
            					}
HXLINE( 173)					id = tile1->get_id();
HXLINE( 175)					bitmapData = tileset->_hx___bitmapData;
HXLINE( 176)					if (hx::IsNull( bitmapData )) {
HXLINE( 176)						continue;
            					}
HXLINE( 178)					if ((id == (int)-1)) {
HXLINE( 180)						tileRect = tile1->_hx___rect;
HXLINE( 181)						bool _hx_tmp2;
HXDLIN( 181)						bool _hx_tmp3;
HXDLIN( 181)						if (hx::IsNotNull( tileRect )) {
HXLINE( 181)							_hx_tmp3 = (tileRect->width <= (int)0);
            						}
            						else {
HXLINE( 181)							_hx_tmp3 = true;
            						}
HXDLIN( 181)						if (!(_hx_tmp3)) {
HXLINE( 181)							_hx_tmp2 = (tileRect->height <= (int)0);
            						}
            						else {
HXLINE( 181)							_hx_tmp2 = true;
            						}
HXDLIN( 181)						if (_hx_tmp2) {
HXLINE( 181)							continue;
            						}
HXLINE( 183)						uvX = ((Float)tileRect->x / (Float)bitmapData->width);
HXLINE( 184)						uvY = ((Float)tileRect->y / (Float)bitmapData->height);
HXLINE( 185)						Float uvWidth1 = tileRect->get_right();
HXDLIN( 185)						uvWidth = ((Float)uvWidth1 / (Float)bitmapData->width);
HXLINE( 186)						Float uvHeight1 = tileRect->get_bottom();
HXDLIN( 186)						uvHeight = ((Float)uvHeight1 / (Float)bitmapData->height);
            					}
            					else {
HXLINE( 190)						tileData = tileset->_hx___data->__get(id).StaticCast<  ::openfl::display::_Tileset::TileData >();
HXLINE( 191)						if (hx::IsNull( tileData )) {
HXLINE( 191)							continue;
            						}
HXLINE( 193)						rect->setTo(tileData->x,tileData->y,tileData->width,tileData->height);
HXLINE( 194)						tileRect = rect;
HXLINE( 196)						uvX = tileData->_hx___uvX;
HXLINE( 197)						uvY = tileData->_hx___uvY;
HXLINE( 198)						uvWidth = tileData->_hx___uvWidth;
HXLINE( 199)						uvHeight = tileData->_hx___uvHeight;
            					}
HXLINE( 203)					tileWidth = tileRect->width;
HXLINE( 204)					tileHeight = tileRect->height;
HXLINE( 206)					Float x1 = ((int)0 * tileTransform->a);
HXDLIN( 206)					x = ((x1 + ((int)0 * tileTransform->c)) + tileTransform->tx);
HXLINE( 207)					Float y1 = ((int)0 * tileTransform->b);
HXDLIN( 207)					y = ((y1 + ((int)0 * tileTransform->d)) + tileTransform->ty);
HXLINE( 208)					Float x21 = (tileWidth * tileTransform->a);
HXDLIN( 208)					x2 = ((x21 + ((int)0 * tileTransform->c)) + tileTransform->tx);
HXLINE( 209)					Float y21 = (tileWidth * tileTransform->b);
HXDLIN( 209)					y2 = ((y21 + ((int)0 * tileTransform->d)) + tileTransform->ty);
HXLINE( 210)					Float x31 = ((int)0 * tileTransform->a);
HXDLIN( 210)					x3 = ((x31 + (tileHeight * tileTransform->c)) + tileTransform->tx);
HXLINE( 211)					Float y31 = ((int)0 * tileTransform->b);
HXDLIN( 211)					y3 = ((y31 + (tileHeight * tileTransform->d)) + tileTransform->ty);
HXLINE( 212)					Float x41 = (tileWidth * tileTransform->a);
HXDLIN( 212)					x4 = ((x41 + (tileHeight * tileTransform->c)) + tileTransform->tx);
HXLINE( 213)					Float y41 = (tileWidth * tileTransform->b);
HXDLIN( 213)					y4 = ((y41 + (tileHeight * tileTransform->d)) + tileTransform->ty);
HXLINE( 215)					vertexOffset = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexDataPosition;
HXLINE( 217)					{
HXLINE( 217)						 ::lime::utils::ArrayBufferView this1 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 217)						{
HXLINE( 217)							int this2 = this1->byteOffset;
HXDLIN( 217)							::__hxcpp_memory_set_float(this1->buffer->b,(this2 + (vertexOffset * (int)4)),x);
            						}
            					}
HXLINE( 218)					{
HXLINE( 218)						 ::lime::utils::ArrayBufferView this3 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 218)						{
HXLINE( 218)							int this4 = this3->byteOffset;
HXDLIN( 218)							::__hxcpp_memory_set_float(this3->buffer->b,(this4 + ((vertexOffset + (int)1) * (int)4)),y);
            						}
            					}
HXLINE( 219)					{
HXLINE( 219)						 ::lime::utils::ArrayBufferView this5 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 219)						{
HXLINE( 219)							int this6 = this5->byteOffset;
HXDLIN( 219)							::__hxcpp_memory_set_float(this5->buffer->b,(this6 + ((vertexOffset + (int)2) * (int)4)),uvX);
            						}
            					}
HXLINE( 220)					{
HXLINE( 220)						 ::lime::utils::ArrayBufferView this7 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 220)						{
HXLINE( 220)							int this8 = this7->byteOffset;
HXDLIN( 220)							::__hxcpp_memory_set_float(this7->buffer->b,(this8 + ((vertexOffset + (int)3) * (int)4)),uvY);
            						}
            					}
HXLINE( 222)					{
HXLINE( 222)						 ::lime::utils::ArrayBufferView this9 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 222)						{
HXLINE( 222)							int this10 = this9->byteOffset;
HXDLIN( 222)							::__hxcpp_memory_set_float(this9->buffer->b,(this10 + ((vertexOffset + ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex) * (int)4)),x2);
            						}
            					}
HXLINE( 223)					{
HXLINE( 223)						 ::lime::utils::ArrayBufferView this11 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 223)						{
HXLINE( 223)							int this12 = this11->byteOffset;
HXDLIN( 223)							::__hxcpp_memory_set_float(this11->buffer->b,(this12 + (((vertexOffset + ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex) + (int)1) * (int)4)),y2);
            						}
            					}
HXLINE( 224)					{
HXLINE( 224)						 ::lime::utils::ArrayBufferView this13 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 224)						{
HXLINE( 224)							int this14 = this13->byteOffset;
HXDLIN( 224)							::__hxcpp_memory_set_float(this13->buffer->b,(this14 + (((vertexOffset + ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex) + (int)2) * (int)4)),uvWidth);
            						}
            					}
HXLINE( 225)					{
HXLINE( 225)						 ::lime::utils::ArrayBufferView this15 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 225)						{
HXLINE( 225)							int this16 = this15->byteOffset;
HXDLIN( 225)							::__hxcpp_memory_set_float(this15->buffer->b,(this16 + (((vertexOffset + ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex) + (int)3) * (int)4)),uvY);
            						}
            					}
HXLINE( 227)					{
HXLINE( 227)						 ::lime::utils::ArrayBufferView this17 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 227)						{
HXLINE( 227)							int this18 = this17->byteOffset;
HXDLIN( 227)							::__hxcpp_memory_set_float(this17->buffer->b,(this18 + ((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * (int)2)) * (int)4)),x3);
            						}
            					}
HXLINE( 228)					{
HXLINE( 228)						 ::lime::utils::ArrayBufferView this19 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 228)						{
HXLINE( 228)							int this20 = this19->byteOffset;
HXDLIN( 228)							::__hxcpp_memory_set_float(this19->buffer->b,(this20 + (((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * (int)2)) + (int)1) * (int)4)),y3);
            						}
            					}
HXLINE( 229)					{
HXLINE( 229)						 ::lime::utils::ArrayBufferView this21 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 229)						{
HXLINE( 229)							int this22 = this21->byteOffset;
HXDLIN( 229)							::__hxcpp_memory_set_float(this21->buffer->b,(this22 + (((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * (int)2)) + (int)2) * (int)4)),uvX);
            						}
            					}
HXLINE( 230)					{
HXLINE( 230)						 ::lime::utils::ArrayBufferView this23 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 230)						{
HXLINE( 230)							int this24 = this23->byteOffset;
HXDLIN( 230)							::__hxcpp_memory_set_float(this23->buffer->b,(this24 + (((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * (int)2)) + (int)3) * (int)4)),uvHeight);
            						}
            					}
HXLINE( 232)					{
HXLINE( 232)						 ::lime::utils::ArrayBufferView this25 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 232)						{
HXLINE( 232)							int this26 = this25->byteOffset;
HXDLIN( 232)							::__hxcpp_memory_set_float(this25->buffer->b,(this26 + ((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * (int)3)) * (int)4)),x4);
            						}
            					}
HXLINE( 233)					{
HXLINE( 233)						 ::lime::utils::ArrayBufferView this27 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 233)						{
HXLINE( 233)							int this28 = this27->byteOffset;
HXDLIN( 233)							::__hxcpp_memory_set_float(this27->buffer->b,(this28 + (((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * (int)3)) + (int)1) * (int)4)),y4);
            						}
            					}
HXLINE( 234)					{
HXLINE( 234)						 ::lime::utils::ArrayBufferView this29 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 234)						{
HXLINE( 234)							int this30 = this29->byteOffset;
HXDLIN( 234)							::__hxcpp_memory_set_float(this29->buffer->b,(this30 + (((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * (int)3)) + (int)2) * (int)4)),uvWidth);
            						}
            					}
HXLINE( 235)					{
HXLINE( 235)						 ::lime::utils::ArrayBufferView this31 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 235)						{
HXLINE( 235)							int this32 = this31->byteOffset;
HXDLIN( 235)							::__hxcpp_memory_set_float(this31->buffer->b,(this32 + (((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * (int)3)) + (int)3) * (int)4)),uvHeight);
            						}
            					}
HXLINE( 237)					if (alphaEnabled) {
HXLINE( 239)						int _g1 = (int)0;
HXDLIN( 239)						while((_g1 < (int)4)){
HXLINE( 239)							_g1 = (_g1 + (int)1);
HXDLIN( 239)							int i = (_g1 - (int)1);
HXLINE( 241)							{
HXLINE( 241)								 ::lime::utils::ArrayBufferView this33 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 241)								{
HXLINE( 241)									int this34 = this33->byteOffset;
HXDLIN( 241)									::__hxcpp_memory_set_float(this33->buffer->b,(this34 + (((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i)) + alphaPosition) * (int)4)),alpha);
            								}
            							}
            						}
            					}
HXLINE( 247)					if (colorTransformEnabled) {
HXLINE( 249)						if (hx::IsNotNull( colorTransform )) {
HXLINE( 251)							int _g11 = (int)0;
HXDLIN( 251)							while((_g11 < (int)4)){
HXLINE( 251)								_g11 = (_g11 + (int)1);
HXDLIN( 251)								int i1 = (_g11 - (int)1);
HXLINE( 253)								{
HXLINE( 253)									 ::lime::utils::ArrayBufferView this35 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 253)									Float val = colorTransform->redMultiplier;
HXDLIN( 253)									{
HXLINE( 253)										int this36 = this35->byteOffset;
HXDLIN( 253)										::__hxcpp_memory_set_float(this35->buffer->b,(this36 + (((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i1)) + ctPosition) * (int)4)),val);
            									}
            								}
HXLINE( 254)								{
HXLINE( 254)									 ::lime::utils::ArrayBufferView this37 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 254)									Float val1 = colorTransform->greenMultiplier;
HXDLIN( 254)									{
HXLINE( 254)										int this38 = this37->byteOffset;
HXDLIN( 254)										::__hxcpp_memory_set_float(this37->buffer->b,(this38 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i1)) + ctPosition) + (int)1) * (int)4)),val1);
            									}
            								}
HXLINE( 255)								{
HXLINE( 255)									 ::lime::utils::ArrayBufferView this39 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 255)									Float val2 = colorTransform->blueMultiplier;
HXDLIN( 255)									{
HXLINE( 255)										int this40 = this39->byteOffset;
HXDLIN( 255)										::__hxcpp_memory_set_float(this39->buffer->b,(this40 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i1)) + ctPosition) + (int)2) * (int)4)),val2);
            									}
            								}
HXLINE( 256)								{
HXLINE( 256)									 ::lime::utils::ArrayBufferView this41 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 256)									Float val3 = colorTransform->alphaMultiplier;
HXDLIN( 256)									{
HXLINE( 256)										int this42 = this41->byteOffset;
HXDLIN( 256)										::__hxcpp_memory_set_float(this41->buffer->b,(this42 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i1)) + ctPosition) + (int)3) * (int)4)),val3);
            									}
            								}
HXLINE( 258)								{
HXLINE( 258)									 ::lime::utils::ArrayBufferView this43 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 258)									Float val4 = colorTransform->redOffset;
HXDLIN( 258)									{
HXLINE( 258)										int this44 = this43->byteOffset;
HXDLIN( 258)										::__hxcpp_memory_set_float(this43->buffer->b,(this44 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i1)) + ctPosition) + (int)4) * (int)4)),val4);
            									}
            								}
HXLINE( 259)								{
HXLINE( 259)									 ::lime::utils::ArrayBufferView this45 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 259)									Float val5 = colorTransform->greenOffset;
HXDLIN( 259)									{
HXLINE( 259)										int this46 = this45->byteOffset;
HXDLIN( 259)										::__hxcpp_memory_set_float(this45->buffer->b,(this46 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i1)) + ctPosition) + (int)5) * (int)4)),val5);
            									}
            								}
HXLINE( 260)								{
HXLINE( 260)									 ::lime::utils::ArrayBufferView this47 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 260)									Float val6 = colorTransform->blueOffset;
HXDLIN( 260)									{
HXLINE( 260)										int this48 = this47->byteOffset;
HXDLIN( 260)										::__hxcpp_memory_set_float(this47->buffer->b,(this48 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i1)) + ctPosition) + (int)6) * (int)4)),val6);
            									}
            								}
HXLINE( 261)								{
HXLINE( 261)									 ::lime::utils::ArrayBufferView this49 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 261)									Float val7 = colorTransform->alphaOffset;
HXDLIN( 261)									{
HXLINE( 261)										int this50 = this49->byteOffset;
HXDLIN( 261)										::__hxcpp_memory_set_float(this49->buffer->b,(this50 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i1)) + ctPosition) + (int)7) * (int)4)),val7);
            									}
            								}
            							}
            						}
            						else {
HXLINE( 267)							int _g12 = (int)0;
HXDLIN( 267)							while((_g12 < (int)4)){
HXLINE( 267)								_g12 = (_g12 + (int)1);
HXDLIN( 267)								int i2 = (_g12 - (int)1);
HXLINE( 269)								{
HXLINE( 269)									 ::lime::utils::ArrayBufferView this51 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 269)									{
HXLINE( 269)										int this52 = this51->byteOffset;
HXDLIN( 269)										::__hxcpp_memory_set_float(this51->buffer->b,(this52 + (((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i2)) + ctPosition) * (int)4)),(int)1);
            									}
            								}
HXLINE( 270)								{
HXLINE( 270)									 ::lime::utils::ArrayBufferView this53 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 270)									{
HXLINE( 270)										int this54 = this53->byteOffset;
HXDLIN( 270)										::__hxcpp_memory_set_float(this53->buffer->b,(this54 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i2)) + ctPosition) + (int)1) * (int)4)),(int)1);
            									}
            								}
HXLINE( 271)								{
HXLINE( 271)									 ::lime::utils::ArrayBufferView this55 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 271)									{
HXLINE( 271)										int this56 = this55->byteOffset;
HXDLIN( 271)										::__hxcpp_memory_set_float(this55->buffer->b,(this56 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i2)) + ctPosition) + (int)2) * (int)4)),(int)1);
            									}
            								}
HXLINE( 272)								{
HXLINE( 272)									 ::lime::utils::ArrayBufferView this57 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 272)									{
HXLINE( 272)										int this58 = this57->byteOffset;
HXDLIN( 272)										::__hxcpp_memory_set_float(this57->buffer->b,(this58 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i2)) + ctPosition) + (int)3) * (int)4)),(int)1);
            									}
            								}
HXLINE( 274)								{
HXLINE( 274)									 ::lime::utils::ArrayBufferView this59 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 274)									{
HXLINE( 274)										int this60 = this59->byteOffset;
HXDLIN( 274)										::__hxcpp_memory_set_float(this59->buffer->b,(this60 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i2)) + ctPosition) + (int)4) * (int)4)),(int)0);
            									}
            								}
HXLINE( 275)								{
HXLINE( 275)									 ::lime::utils::ArrayBufferView this61 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 275)									{
HXLINE( 275)										int this62 = this61->byteOffset;
HXDLIN( 275)										::__hxcpp_memory_set_float(this61->buffer->b,(this62 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i2)) + ctPosition) + (int)5) * (int)4)),(int)0);
            									}
            								}
HXLINE( 276)								{
HXLINE( 276)									 ::lime::utils::ArrayBufferView this63 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 276)									{
HXLINE( 276)										int this64 = this63->byteOffset;
HXDLIN( 276)										::__hxcpp_memory_set_float(this63->buffer->b,(this64 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i2)) + ctPosition) + (int)6) * (int)4)),(int)0);
            									}
            								}
HXLINE( 277)								{
HXLINE( 277)									 ::lime::utils::ArrayBufferView this65 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData;
HXDLIN( 277)									{
HXLINE( 277)										int this66 = this65->byteOffset;
HXDLIN( 277)										::__hxcpp_memory_set_float(this65->buffer->b,(this66 + ((((vertexOffset + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * i2)) + ctPosition) + (int)7) * (int)4)),(int)0);
            									}
            								}
            							}
            						}
            					}
HXLINE( 285)					 ::Dynamic _hx_tmp4 = hx::ClassOf< ::openfl::_internal::renderer::context3D::Context3DTilemap >();
HXDLIN( 285)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexDataPosition = (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexDataPosition + (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex * (int)4));
            				}
            			}
            		}
HXLINE( 291)		group->_hx___dirty = false;
HXLINE( 292)		tilemap->_hx___buffer->flushVertexBufferData();
HXLINE( 293)		::openfl::geom::Matrix_obj::_hx___pool->release(tileTransform);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(Context3DTilemap_obj,buildBufferTileContainer,(void))

void Context3DTilemap_obj::flush( ::openfl::display::Tilemap tilemap, ::openfl::display::OpenGLRenderer renderer, ::Dynamic blendMode){
            	HX_STACKFRAME(&_hx_pos_855d17f42eb66a5f_298_flush)
HXLINE( 300)		if (hx::IsNull( ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentShader )) {
HXLINE( 302)			::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentShader = renderer->_hx___defaultDisplayShader;
            		}
HXLINE( 306)		bool _hx_tmp;
HXDLIN( 306)		bool _hx_tmp1;
HXDLIN( 306)		if ((::openfl::_internal::renderer::context3D::Context3DTilemap_obj::bufferPosition > ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastFlushedPosition)) {
HXLINE( 306)			_hx_tmp1 = hx::IsNotNull( ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBitmapData );
            		}
            		else {
HXLINE( 306)			_hx_tmp1 = false;
            		}
HXDLIN( 306)		if (_hx_tmp1) {
HXLINE( 306)			_hx_tmp = hx::IsNotNull( ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentShader );
            		}
            		else {
HXLINE( 306)			_hx_tmp = false;
            		}
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 308)			 ::openfl::display::Shader shader = renderer->_hx___initDisplayShader(::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentShader);
HXLINE( 309)			renderer->setShader(shader);
HXLINE( 310)			bool _hx_tmp2;
HXDLIN( 310)			if (renderer->_hx___allowSmoothing) {
HXLINE( 310)				_hx_tmp2 = tilemap->smoothing;
            			}
            			else {
HXLINE( 310)				_hx_tmp2 = false;
            			}
HXDLIN( 310)			renderer->applyBitmapData(::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBitmapData,_hx_tmp2,null());
HXLINE( 311)			renderer->applyMatrix(renderer->_hx___getMatrix(tilemap->_hx___renderTransform,(int)1));
HXLINE( 313)			if (tilemap->tileAlphaEnabled) {
HXLINE( 315)				renderer->useAlphaArray();
            			}
            			else {
HXLINE( 319)				renderer->applyAlpha(tilemap->_hx___worldAlpha);
            			}
HXLINE( 323)			if (tilemap->tileBlendModeEnabled) {
HXLINE( 325)				renderer->_hx___setBlendMode(blendMode);
            			}
HXLINE( 329)			if (tilemap->tileColorTransformEnabled) {
HXLINE( 331)				renderer->applyHasColorTransform(true);
HXLINE( 332)				renderer->useColorTransformArray();
            			}
            			else {
HXLINE( 336)				renderer->applyColorTransform(tilemap->_hx___worldColorTransform);
            			}
HXLINE( 340)			renderer->updateShader();
HXLINE( 342)			 ::openfl::display3D::VertexBuffer3D vertexBuffer = tilemap->_hx___buffer->vertexBuffer;
HXLINE( 344)			if (hx::IsNotNull( shader->_hx___position )) {
HXLINE( 344)				::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context->setVertexBufferAt(shader->_hx___position->index,vertexBuffer,(int)0,(int)2);
            			}
HXLINE( 345)			if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE( 345)				::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context->setVertexBufferAt(shader->_hx___textureCoord->index,vertexBuffer,(int)2,(int)2);
            			}
HXLINE( 347)			if (tilemap->tileAlphaEnabled) {
HXLINE( 349)				if (hx::IsNotNull( shader->_hx___alpha )) {
HXLINE( 349)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context->setVertexBufferAt(shader->_hx___alpha->index,vertexBuffer,(int)4,(int)1);
            				}
            			}
HXLINE( 353)			if (tilemap->tileColorTransformEnabled) {
HXLINE( 355)				int position;
HXDLIN( 355)				if (tilemap->tileAlphaEnabled) {
HXLINE( 355)					position = (int)5;
            				}
            				else {
HXLINE( 355)					position = (int)4;
            				}
HXLINE( 357)				if (hx::IsNotNull( shader->_hx___colorMultiplier )) {
HXLINE( 357)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context->setVertexBufferAt(shader->_hx___colorMultiplier->index,vertexBuffer,position,(int)4);
            				}
HXLINE( 358)				if (hx::IsNotNull( shader->_hx___colorOffset )) {
HXLINE( 358)					 ::openfl::display3D::Context3D _hx_tmp3 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context;
HXDLIN( 358)					int shader1 = shader->_hx___colorOffset->index;
HXDLIN( 358)					_hx_tmp3->setVertexBufferAt(shader1,vertexBuffer,(position + (int)4),(int)4);
            				}
            			}
HXLINE( 362)			int length = (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::bufferPosition - ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastFlushedPosition);
HXLINE( 364)			while((::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastFlushedPosition < ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::bufferPosition)){
HXLINE( 366)				length = ::Std_obj::_hx_int(::Math_obj::min((::openfl::_internal::renderer::context3D::Context3DTilemap_obj::bufferPosition - ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastFlushedPosition),::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context->_hx___quadIndexBufferElements));
HXLINE( 367)				if ((length <= (int)0)) {
HXLINE( 367)					goto _hx_goto_6;
            				}
HXLINE( 369)				if (hx::IsNotNull( shader->_hx___position )) {
HXLINE( 369)					 ::openfl::display3D::Context3D _hx_tmp4 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context;
HXDLIN( 369)					int shader2 = shader->_hx___position->index;
HXDLIN( 369)					 ::openfl::display3D::VertexBuffer3D tilemap1 = tilemap->_hx___buffer->vertexBuffer;
HXDLIN( 369)					_hx_tmp4->setVertexBufferAt(shader2,tilemap1,(::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastFlushedPosition * (int)16),(int)2);
            				}
HXLINE( 370)				if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE( 370)					 ::openfl::display3D::Context3D _hx_tmp5 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context;
HXDLIN( 370)					int shader3 = shader->_hx___textureCoord->index;
HXDLIN( 370)					 ::openfl::display3D::VertexBuffer3D tilemap2 = tilemap->_hx___buffer->vertexBuffer;
HXDLIN( 370)					_hx_tmp5->setVertexBufferAt(shader3,tilemap2,((::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastFlushedPosition * (int)16) + (int)2),(int)2);
            				}
HXLINE( 372)				 ::openfl::display3D::Context3D _hx_tmp6 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context;
HXDLIN( 372)				 ::openfl::display3D::IndexBuffer3D _hx_tmp7 = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context->_hx___quadIndexBuffer;
HXDLIN( 372)				_hx_tmp6->drawTriangles(_hx_tmp7,(int)0,(length * (int)2));
HXLINE( 374)				 ::Dynamic _hx_tmp8 = hx::ClassOf< ::openfl::_internal::renderer::context3D::Context3DTilemap >();
HXDLIN( 374)				::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastFlushedPosition = (::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastFlushedPosition + length);
            			}
            			_hx_goto_6:;
HXLINE( 382)			renderer->_hx___clearShader();
            		}
HXLINE( 386)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastUsedBitmapData = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBitmapData;
HXLINE( 387)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastUsedShader = ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentShader;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Context3DTilemap_obj,flush,(void))

void Context3DTilemap_obj::render( ::openfl::display::Tilemap tilemap, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_855d17f42eb66a5f_392_render)
HXLINE( 394)		bool _hx_tmp;
HXDLIN( 394)		if (!(!(tilemap->_hx___renderable))) {
HXLINE( 394)			_hx_tmp = (tilemap->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 394)			_hx_tmp = true;
            		}
HXDLIN( 394)		if (_hx_tmp) {
HXLINE( 394)			return;
            		}
HXLINE( 396)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context = renderer->_hx___context3D;
HXLINE( 398)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::buildBuffer(tilemap,renderer);
HXLINE( 400)		if ((::openfl::_internal::renderer::context3D::Context3DTilemap_obj::numTiles == (int)0)) {
HXLINE( 400)			return;
            		}
HXLINE( 402)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::bufferPosition = (int)0;
HXLINE( 404)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastFlushedPosition = (int)0;
HXLINE( 405)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastUsedBitmapData = null();
HXLINE( 406)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::lastUsedShader = null();
HXLINE( 407)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBitmapData = null();
HXLINE( 408)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentShader = null();
HXLINE( 410)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBlendMode = tilemap->_hx___worldBlendMode;
HXLINE( 412)		if (!(tilemap->tileBlendModeEnabled)) {
HXLINE( 414)			renderer->_hx___setBlendMode(::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBlendMode);
            		}
HXLINE( 418)		renderer->_hx___pushMaskObject(tilemap,null());
HXLINE( 421)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 422)		rect->setTo((int)0,(int)0,tilemap->_hx___width,tilemap->_hx___height);
HXLINE( 423)		renderer->_hx___pushMaskRect(rect,tilemap->_hx___renderTransform);
HXLINE( 425)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::renderTileContainer(tilemap,renderer,tilemap->_hx___group,tilemap->_hx___worldShader,tilemap->_hx___tileset,tilemap->_hx___worldAlpha,tilemap->tileBlendModeEnabled,::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBlendMode,null());
HXLINE( 426)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::flush(tilemap,renderer,::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBlendMode);
HXLINE( 429)		renderer->_hx___popMaskRect();
HXLINE( 430)		renderer->_hx___popMaskObject(tilemap,null());
HXLINE( 432)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DTilemap_obj,render,(void))

void Context3DTilemap_obj::renderTileContainer( ::openfl::display::Tilemap tilemap, ::openfl::display::OpenGLRenderer renderer, ::openfl::display::TileContainer group, ::openfl::display::Shader defaultShader, ::openfl::display::Tileset defaultTileset,Float worldAlpha,bool blendModeEnabled, ::Dynamic defaultBlendMode, ::openfl::display::BitmapData cacheBitmapData){
            	HX_STACKFRAME(&_hx_pos_855d17f42eb66a5f_437_renderTileContainer)
HXLINE( 439)		::Array< ::Dynamic> tiles = group->_hx___tiles;
HXLINE( 440)		int length = group->__length;
HXLINE( 442)		 ::Dynamic tile;
HXDLIN( 442)		 ::openfl::display::Tileset tileset;
HXDLIN( 442)		Float alpha;
HXDLIN( 442)		bool visible;
HXDLIN( 442)		 ::Dynamic blendMode = null();
HXDLIN( 442)		int id;
HXDLIN( 442)		 ::openfl::display::_Tileset::TileData tileData;
HXDLIN( 442)		 ::openfl::geom::Rectangle tileRect;
HXDLIN( 442)		 ::openfl::display::Shader shader;
HXDLIN( 442)		 ::openfl::display::BitmapData bitmapData;
HXLINE( 443)		 ::Dynamic tileWidth;
HXDLIN( 443)		 ::Dynamic tileHeight;
HXDLIN( 443)		 ::Dynamic uvX;
HXDLIN( 443)		 ::Dynamic uvY;
HXDLIN( 443)		 ::Dynamic uvHeight;
HXDLIN( 443)		 ::Dynamic uvWidth;
HXDLIN( 443)		 ::Dynamic offset;
HXLINE( 445)		{
HXLINE( 445)			int _g = (int)0;
HXDLIN( 445)			while((_g < tiles->length)){
HXLINE( 445)				 ::openfl::display::Tile tile1 = tiles->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 445)				_g = (_g + (int)1);
HXLINE( 447)				if (hx::IsNotNull( tile1->get_tileset() )) {
HXLINE( 447)					tileset = tile1->get_tileset();
            				}
            				else {
HXLINE( 447)					tileset = defaultTileset;
            				}
HXLINE( 449)				alpha = (tile1->get_alpha() * worldAlpha);
HXLINE( 450)				visible = tile1->get_visible();
HXLINE( 451)				bool _hx_tmp;
HXDLIN( 451)				if (!(!(visible))) {
HXLINE( 451)					_hx_tmp = (alpha <= (int)0);
            				}
            				else {
HXLINE( 451)					_hx_tmp = true;
            				}
HXDLIN( 451)				if (_hx_tmp) {
HXLINE( 451)					continue;
            				}
HXLINE( 453)				if (hx::IsNotNull( tile1->get_shader() )) {
HXLINE( 453)					shader = tile1->get_shader();
            				}
            				else {
HXLINE( 453)					shader = defaultShader;
            				}
HXLINE( 455)				if (blendModeEnabled) {
HXLINE( 457)					if (hx::IsNotNull( tile1->_hx___blendMode )) {
HXLINE( 457)						blendMode = tile1->_hx___blendMode;
            					}
            					else {
HXLINE( 457)						blendMode = defaultBlendMode;
            					}
            				}
HXLINE( 461)				if ((tile1->__length > (int)0)) {
HXLINE( 463)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::renderTileContainer(tilemap,renderer,( ( ::openfl::display::TileContainer)(tile1) ),shader,tileset,alpha,blendModeEnabled,blendMode,cacheBitmapData);
            				}
            				else {
HXLINE( 467)					if (hx::IsNull( tileset )) {
HXLINE( 467)						continue;
            					}
HXLINE( 469)					id = tile1->get_id();
HXLINE( 471)					bitmapData = tileset->_hx___bitmapData;
HXLINE( 472)					if (hx::IsNull( bitmapData )) {
HXLINE( 472)						continue;
            					}
HXLINE( 474)					if ((id == (int)-1)) {
HXLINE( 476)						tileRect = tile1->_hx___rect;
HXLINE( 477)						bool _hx_tmp1;
HXDLIN( 477)						bool _hx_tmp2;
HXDLIN( 477)						if (hx::IsNotNull( tileRect )) {
HXLINE( 477)							_hx_tmp2 = (tileRect->width <= (int)0);
            						}
            						else {
HXLINE( 477)							_hx_tmp2 = true;
            						}
HXDLIN( 477)						if (!(_hx_tmp2)) {
HXLINE( 477)							_hx_tmp1 = (tileRect->height <= (int)0);
            						}
            						else {
HXLINE( 477)							_hx_tmp1 = true;
            						}
HXDLIN( 477)						if (_hx_tmp1) {
HXLINE( 477)							continue;
            						}
            					}
            					else {
HXLINE( 481)						tileData = tileset->_hx___data->__get(id).StaticCast<  ::openfl::display::_Tileset::TileData >();
HXLINE( 482)						if (hx::IsNull( tileData )) {
HXLINE( 482)							continue;
            						}
            					}
HXLINE( 486)					bool _hx_tmp3;
HXDLIN( 486)					bool _hx_tmp4;
HXDLIN( 486)					bool _hx_tmp5;
HXDLIN( 486)					if (hx::IsNotEq( shader,::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentShader )) {
HXLINE( 486)						_hx_tmp5 = hx::IsNotNull( ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentShader );
            					}
            					else {
HXLINE( 486)						_hx_tmp5 = false;
            					}
HXDLIN( 486)					if (!(_hx_tmp5)) {
HXLINE( 486)						if (hx::IsNotEq( bitmapData,::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBitmapData )) {
HXLINE( 486)							_hx_tmp4 = hx::IsNotNull( ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBitmapData );
            						}
            						else {
HXLINE( 486)							_hx_tmp4 = false;
            						}
            					}
            					else {
HXLINE( 486)						_hx_tmp4 = true;
            					}
HXDLIN( 486)					if (!(_hx_tmp4)) {
HXLINE( 486)						_hx_tmp3 = hx::IsNotEq( ::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBlendMode,blendMode );
            					}
            					else {
HXLINE( 486)						_hx_tmp3 = true;
            					}
HXDLIN( 486)					if (_hx_tmp3) {
HXLINE( 488)						::openfl::_internal::renderer::context3D::Context3DTilemap_obj::flush(tilemap,renderer,::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBlendMode);
            					}
HXLINE( 492)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBitmapData = bitmapData;
HXLINE( 493)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentShader = shader;
HXLINE( 494)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::currentBlendMode = blendMode;
HXLINE( 495)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::bufferPosition++;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(Context3DTilemap_obj,renderTileContainer,(void))

void Context3DTilemap_obj::renderMask( ::openfl::display::Tilemap tilemap, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_855d17f42eb66a5f_504_renderMask)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DTilemap_obj,renderMask,(void))

void Context3DTilemap_obj::resizeBuffer( ::openfl::display::Tilemap tilemap,int count){
            	HX_GC_STACKFRAME(&_hx_pos_855d17f42eb66a5f_590_resizeBuffer)
HXLINE( 592)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::numTiles = count;
HXLINE( 594)		if (hx::IsNull( tilemap->_hx___buffer )) {
HXLINE( 596)			tilemap->_hx___buffer =  ::openfl::_internal::renderer::context3D::Context3DBuffer_obj::__alloc( HX_CTX ,::openfl::_internal::renderer::context3D::Context3DTilemap_obj::context,::openfl::_internal::renderer::context3D::Context3DElementType_obj::QUADS_dyn(),::openfl::_internal::renderer::context3D::Context3DTilemap_obj::numTiles,::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex);
            		}
            		else {
HXLINE( 600)			tilemap->_hx___buffer->resize(::openfl::_internal::renderer::context3D::Context3DTilemap_obj::numTiles,::openfl::_internal::renderer::context3D::Context3DTilemap_obj::dataPerVertex);
            		}
HXLINE( 604)		::openfl::_internal::renderer::context3D::Context3DTilemap_obj::vertexBufferData = tilemap->_hx___buffer->vertexBufferData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DTilemap_obj,resizeBuffer,(void))


Context3DTilemap_obj::Context3DTilemap_obj()
{
}

bool Context3DTilemap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"flush") ) { outValue = flush_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { outValue = ( context ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"numTiles") ) { outValue = ( numTiles ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buildBuffer") ) { outValue = buildBuffer_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dataPerVertex") ) { outValue = ( dataPerVertex ); return true; }
		if (HX_FIELD_EQ(inName,"currentShader") ) { outValue = ( currentShader ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bufferPosition") ) { outValue = ( bufferPosition ); return true; }
		if (HX_FIELD_EQ(inName,"lastUsedShader") ) { outValue = ( lastUsedShader ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentBlendMode") ) { outValue = ( currentBlendMode ); return true; }
		if (HX_FIELD_EQ(inName,"vertexBufferData") ) { outValue = ( vertexBufferData ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentBitmapData") ) { outValue = ( currentBitmapData ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUsedBitmapData") ) { outValue = ( lastUsedBitmapData ); return true; }
		if (HX_FIELD_EQ(inName,"vertexDataPosition") ) { outValue = ( vertexDataPosition ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheColorTransform") ) { outValue = ( cacheColorTransform ); return true; }
		if (HX_FIELD_EQ(inName,"lastFlushedPosition") ) { outValue = ( lastFlushedPosition ); return true; }
		if (HX_FIELD_EQ(inName,"renderTileContainer") ) { outValue = renderTileContainer_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"buildBufferTileContainer") ) { outValue = buildBufferTileContainer_dyn(); return true; }
	}
	return false;
}

bool Context3DTilemap_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=ioValue.Cast<  ::openfl::display3D::Context3D >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"numTiles") ) { numTiles=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dataPerVertex") ) { dataPerVertex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"currentShader") ) { currentShader=ioValue.Cast<  ::openfl::display::Shader >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bufferPosition") ) { bufferPosition=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"lastUsedShader") ) { lastUsedShader=ioValue.Cast<  ::openfl::display::Shader >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentBlendMode") ) { currentBlendMode=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"vertexBufferData") ) { vertexBufferData=ioValue.Cast<  ::lime::utils::ArrayBufferView >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentBitmapData") ) { currentBitmapData=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUsedBitmapData") ) { lastUsedBitmapData=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"vertexDataPosition") ) { vertexDataPosition=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheColorTransform") ) { cacheColorTransform=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
		if (HX_FIELD_EQ(inName,"lastFlushedPosition") ) { lastFlushedPosition=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Context3DTilemap_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Context3DTilemap_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(void *) &Context3DTilemap_obj::cacheColorTransform,HX_HCSTRING("cacheColorTransform","\x6b","\xb5","\xa2","\x9a")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(void *) &Context3DTilemap_obj::context,HX_HCSTRING("context","\xef","\x95","\x77","\x19")},
	{hx::fsInt,(void *) &Context3DTilemap_obj::dataPerVertex,HX_HCSTRING("dataPerVertex","\x97","\x9c","\x7c","\x40")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &Context3DTilemap_obj::currentBitmapData,HX_HCSTRING("currentBitmapData","\x52","\x37","\xf6","\x0a")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Context3DTilemap_obj::currentBlendMode,HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(void *) &Context3DTilemap_obj::currentShader,HX_HCSTRING("currentShader","\x3e","\x40","\x7d","\x00")},
	{hx::fsInt,(void *) &Context3DTilemap_obj::bufferPosition,HX_HCSTRING("bufferPosition","\xc9","\x19","\xc6","\x63")},
	{hx::fsInt,(void *) &Context3DTilemap_obj::lastFlushedPosition,HX_HCSTRING("lastFlushedPosition","\x36","\xba","\x56","\xb9")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &Context3DTilemap_obj::lastUsedBitmapData,HX_HCSTRING("lastUsedBitmapData","\x4c","\x23","\x11","\xc8")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(void *) &Context3DTilemap_obj::lastUsedShader,HX_HCSTRING("lastUsedShader","\x38","\x27","\x00","\x39")},
	{hx::fsInt,(void *) &Context3DTilemap_obj::numTiles,HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(void *) &Context3DTilemap_obj::vertexBufferData,HX_HCSTRING("vertexBufferData","\xce","\x43","\xce","\xc6")},
	{hx::fsInt,(void *) &Context3DTilemap_obj::vertexDataPosition,HX_HCSTRING("vertexDataPosition","\x77","\x9a","\x58","\xd9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Context3DTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::cacheColorTransform,"cacheColorTransform");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::context,"context");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::dataPerVertex,"dataPerVertex");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::currentBitmapData,"currentBitmapData");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::currentBlendMode,"currentBlendMode");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::currentShader,"currentShader");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::bufferPosition,"bufferPosition");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::lastFlushedPosition,"lastFlushedPosition");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::lastUsedBitmapData,"lastUsedBitmapData");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::lastUsedShader,"lastUsedShader");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::numTiles,"numTiles");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::vertexBufferData,"vertexBufferData");
	HX_MARK_MEMBER_NAME(Context3DTilemap_obj::vertexDataPosition,"vertexDataPosition");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3DTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::cacheColorTransform,"cacheColorTransform");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::context,"context");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::dataPerVertex,"dataPerVertex");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::currentBitmapData,"currentBitmapData");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::currentBlendMode,"currentBlendMode");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::currentShader,"currentShader");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::bufferPosition,"bufferPosition");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::lastFlushedPosition,"lastFlushedPosition");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::lastUsedBitmapData,"lastUsedBitmapData");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::lastUsedShader,"lastUsedShader");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::numTiles,"numTiles");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::vertexBufferData,"vertexBufferData");
	HX_VISIT_MEMBER_NAME(Context3DTilemap_obj::vertexDataPosition,"vertexDataPosition");
};

#endif

hx::Class Context3DTilemap_obj::__mClass;

static ::String Context3DTilemap_obj_sStaticFields[] = {
	HX_HCSTRING("cacheColorTransform","\x6b","\xb5","\xa2","\x9a"),
	HX_HCSTRING("context","\xef","\x95","\x77","\x19"),
	HX_HCSTRING("dataPerVertex","\x97","\x9c","\x7c","\x40"),
	HX_HCSTRING("currentBitmapData","\x52","\x37","\xf6","\x0a"),
	HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff"),
	HX_HCSTRING("currentShader","\x3e","\x40","\x7d","\x00"),
	HX_HCSTRING("bufferPosition","\xc9","\x19","\xc6","\x63"),
	HX_HCSTRING("lastFlushedPosition","\x36","\xba","\x56","\xb9"),
	HX_HCSTRING("lastUsedBitmapData","\x4c","\x23","\x11","\xc8"),
	HX_HCSTRING("lastUsedShader","\x38","\x27","\x00","\x39"),
	HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd"),
	HX_HCSTRING("vertexBufferData","\xce","\x43","\xce","\xc6"),
	HX_HCSTRING("vertexDataPosition","\x77","\x9a","\x58","\xd9"),
	HX_HCSTRING("buildBuffer","\xce","\xa2","\x05","\x21"),
	HX_HCSTRING("buildBufferTileContainer","\x85","\x38","\x40","\xad"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderTileContainer","\xfd","\xba","\x73","\x84"),
	HX_HCSTRING("renderMask","\x62","\x3b","\x60","\xe5"),
	HX_HCSTRING("resizeBuffer","\x14","\x7a","\xa2","\xb4"),
	::String(null())
};

void Context3DTilemap_obj::__register()
{
	hx::Object *dummy = new Context3DTilemap_obj;
	Context3DTilemap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.context3D.Context3DTilemap","\xb7","\x96","\x3d","\x3b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3DTilemap_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3DTilemap_obj::__SetStatic;
	__mClass->mMarkFunc = Context3DTilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3DTilemap_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Context3DTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3DTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace context3D
