// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_graphics_Image
#include <lime/app/Promise_lime_graphics_Image.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_AssetLibrary
#include <lime/app/Promise_lime_utils_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_AssetManifest
#include <lime/utils/AssetManifest.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLiteLibrary
#include <openfl/_internal/formats/swf/SWFLiteLibrary.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_URLLoader
#include <openfl/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_AssetLibrary
#include <openfl/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_34737d8619f6a20d_53_new,"openfl._internal.formats.swf.SWFLiteLibrary","new",0xe9e9b68b,"openfl._internal.formats.swf.SWFLiteLibrary.new","openfl/_internal/formats/swf/SWFLiteLibrary.hx",53,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_80_exists,"openfl._internal.formats.swf.SWFLiteLibrary","exists",0x64ea2491,"openfl._internal.formats.swf.SWFLiteLibrary.exists","openfl/_internal/formats/swf/SWFLiteLibrary.hx",80,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_103_getImage,"openfl._internal.formats.swf.SWFLiteLibrary","getImage",0x9de10cda,"openfl._internal.formats.swf.SWFLiteLibrary.getImage","openfl/_internal/formats/swf/SWFLiteLibrary.hx",103,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_151_getMovieClip,"openfl._internal.formats.swf.SWFLiteLibrary","getMovieClip",0x17711b9f,"openfl._internal.formats.swf.SWFLiteLibrary.getMovieClip","openfl/_internal/formats/swf/SWFLiteLibrary.hx",151,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_160_isLocal,"openfl._internal.formats.swf.SWFLiteLibrary","isLocal",0xd93244cc,"openfl._internal.formats.swf.SWFLiteLibrary.isLocal","openfl/_internal/formats/swf/SWFLiteLibrary.hx",160,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_205_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",205,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_178_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",178,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_167_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",167,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_247_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",247,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_248_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",248,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_260_loadImage,"openfl._internal.formats.swf.SWFLiteLibrary","loadImage",0xe4c1c3c0,"openfl._internal.formats.swf.SWFLiteLibrary.loadImage","openfl/_internal/formats/swf/SWFLiteLibrary.hx",260,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_284_loadImage,"openfl._internal.formats.swf.SWFLiteLibrary","loadImage",0xe4c1c3c0,"openfl._internal.formats.swf.SWFLiteLibrary.loadImage","openfl/_internal/formats/swf/SWFLiteLibrary.hx",284,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_315_unload,"openfl._internal.formats.swf.SWFLiteLibrary","unload",0x0a96a7b4,"openfl._internal.formats.swf.SWFLiteLibrary.unload","openfl/_internal/formats/swf/SWFLiteLibrary.hx",315,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_343___copyChannel,"openfl._internal.formats.swf.SWFLiteLibrary","__copyChannel",0x7aec2859,"openfl._internal.formats.swf.SWFLiteLibrary.__copyChannel","openfl/_internal/formats/swf/SWFLiteLibrary.hx",343,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_362___fromManifest,"openfl._internal.formats.swf.SWFLiteLibrary","__fromManifest",0x1d309e0e,"openfl._internal.formats.swf.SWFLiteLibrary.__fromManifest","openfl/_internal/formats/swf/SWFLiteLibrary.hx",362,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_382___load,"openfl._internal.formats.swf.SWFLiteLibrary","__load",0x9bba03fb,"openfl._internal.formats.swf.SWFLiteLibrary.__load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",382,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_391___loadImage,"openfl._internal.formats.swf.SWFLiteLibrary","__loadImage",0x60453d60,"openfl._internal.formats.swf.SWFLiteLibrary.__loadImage","openfl/_internal/formats/swf/SWFLiteLibrary.hx",391,0x8efd6c01)
namespace openfl{
namespace _internal{
namespace formats{
namespace swf{

void SWFLiteLibrary_obj::__construct(::String id,::String uuid){
            	HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_53_new)
HXLINE(  55)		super::__construct();
HXLINE(  57)		this->id = id;
HXLINE(  59)		::String _hx_tmp;
HXDLIN(  59)		if (hx::IsNotNull( uuid )) {
HXLINE(  59)			_hx_tmp = uuid;
            		}
            		else {
HXLINE(  59)			_hx_tmp = id;
            		}
HXDLIN(  59)		this->instanceID = _hx_tmp;
HXLINE(  61)		this->alphaCheck =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  62)		this->imageClassNames =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  67)		this->rootPath = HX_("",00,00,00,00);
            	}

Dynamic SWFLiteLibrary_obj::__CreateEmpty() { return new SWFLiteLibrary_obj; }

void *SWFLiteLibrary_obj::_hx_vtable = 0;

Dynamic SWFLiteLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SWFLiteLibrary_obj > _hx_result = new SWFLiteLibrary_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SWFLiteLibrary_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x34644188) {
		if (inClassId<=(int)0x0f09d631) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0f09d631;
		} else {
			return inClassId==(int)0x34644188;
		}
	} else {
		return inClassId==(int)0x425552e3;
	}
}

bool SWFLiteLibrary_obj::exists(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_80_exists)
HXLINE(  82)		if (hx::IsNull( this->swf )) {
HXLINE(  82)			return false;
            		}
HXLINE(  84)		bool _hx_tmp;
HXDLIN(  84)		if ((id == HX_("",00,00,00,00))) {
HXLINE(  84)			_hx_tmp = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            		}
            		else {
HXLINE(  84)			_hx_tmp = false;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  86)			return true;
            		}
HXLINE(  90)		bool _hx_tmp1;
HXDLIN(  90)		if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE(  90)			_hx_tmp1 = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            		}
            		else {
HXLINE(  90)			_hx_tmp1 = true;
            		}
HXDLIN(  90)		if (_hx_tmp1) {
HXLINE(  92)			if (hx::IsNotNull( this->swf )) {
HXLINE(  92)				return this->swf->hasSymbol(id);
            			}
            			else {
HXLINE(  92)				return false;
            			}
            		}
HXLINE(  96)		return false;
            	}


 ::lime::graphics::Image SWFLiteLibrary_obj::getImage(::String id){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_103_getImage)
HXLINE( 105)		if (this->imageClassNames->exists(id)) {
HXLINE( 107)			id = ( (::String)(this->imageClassNames->get(id)) );
            		}
HXLINE( 113)		if (!(this->alphaCheck->exists(id))) {
HXLINE( 115)			 ::Dynamic symbol = this->swf->symbols->iterator();
HXDLIN( 115)			while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 115)				 ::openfl::_internal::symbols::SWFSymbol symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(symbol->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 117)				bool _hx_tmp;
HXDLIN( 117)				if (::Std_obj::is(symbol1,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >())) {
HXLINE( 117)					_hx_tmp = (hx::TCast<  ::openfl::_internal::symbols::BitmapSymbol >::cast(symbol1)->path == id);
            				}
            				else {
HXLINE( 117)					_hx_tmp = false;
            				}
HXDLIN( 117)				if (_hx_tmp) {
HXLINE( 119)					 ::openfl::_internal::symbols::BitmapSymbol bitmapSymbol = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol1) );
HXLINE( 121)					if (hx::IsNotNull( bitmapSymbol->alpha )) {
HXLINE( 123)						 ::lime::graphics::Image image = this->super::getImage(id);
HXLINE( 124)						 ::lime::graphics::Image alpha = this->super::getImage(bitmapSymbol->alpha);
HXLINE( 126)						this->_hx___copyChannel(image,alpha);
HXLINE( 128)						this->cachedImages->set(id,image);
HXLINE( 129)						this->cachedImages->remove(bitmapSymbol->alpha);
HXLINE( 130)						this->alphaCheck->set(id,true);
HXLINE( 132)						return image;
            					}
            				}
            			}
            		}
HXLINE( 142)		return this->super::getImage(id);
            	}


 ::openfl::display::MovieClip SWFLiteLibrary_obj::getMovieClip(::String id){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_151_getMovieClip)
HXDLIN( 151)		if (hx::IsNotNull( this->swf )) {
HXDLIN( 151)			return this->swf->createMovieClip(id);
            		}
            		else {
HXDLIN( 151)			return null();
            		}
HXDLIN( 151)		return null();
            	}


bool SWFLiteLibrary_obj::isLocal(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_160_isLocal)
HXDLIN( 160)		return true;
            	}


 ::lime::app::Future SWFLiteLibrary_obj::load(){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::openfl::_internal::formats::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            		void _hx_run(::String data){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::_internal::formats::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::lime::utils::AssetLibrary _){
            				HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_205_load)
HXLINE( 207)				_gthis->preloading = false;
HXLINE( 208)				promise->complete(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_178_load)
HXLINE( 180)			_gthis->cachedText->set(_gthis->id,data);
HXLINE( 182)			_gthis->swf = ::openfl::_internal::formats::swf::SWFLite_obj::unserialize(data);
HXLINE( 183)			_gthis->swf->library = _gthis;
HXLINE( 185)			 ::openfl::_internal::symbols::BitmapSymbol bitmapSymbol;
HXLINE( 187)			{
HXLINE( 187)				 ::Dynamic symbol = _gthis->swf->symbols->iterator();
HXDLIN( 187)				while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 187)					 ::openfl::_internal::symbols::SWFSymbol symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(symbol->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 189)					if (::Std_obj::is(symbol1,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >())) {
HXLINE( 191)						bitmapSymbol = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol1) );
HXLINE( 193)						if (hx::IsNotNull( bitmapSymbol->className )) {
HXLINE( 195)							_gthis->imageClassNames->set(bitmapSymbol->className,bitmapSymbol->path);
            						}
            					}
            				}
            			}
HXLINE( 203)			::openfl::_internal::formats::swf::SWFLite_obj::instances->set(_gthis->instanceID,_gthis->swf);
HXLINE( 205)			_gthis->_hx___load()->onProgress(promise->progress_dyn())->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_0(_gthis,promise)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_167_load)
HXDLIN( 167)		 ::openfl::_internal::formats::swf::SWFLiteLibrary _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 169)		if (hx::IsNotNull( this->id )) {
HXLINE( 171)			this->preload->set(this->id,true);
            		}
HXLINE( 175)		 ::lime::app::Promise_lime_utils_AssetLibrary promise =  ::lime::app::Promise_lime_utils_AssetLibrary_obj::__alloc( HX_CTX );
HXLINE( 176)		this->preloading = true;
HXLINE( 178)		 ::Dynamic onComplete =  ::Dynamic(new _hx_Closure_1(_gthis,promise));
HXLINE( 214)		if (::openfl::utils::Assets_obj::exists(this->id,null())) {
HXLINE( 224)			this->loadText(this->id)->onError(promise->error_dyn())->onComplete(onComplete);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::openfl::net::URLLoader,loader, ::Dynamic,onComplete) HXARGC(1)
            			void _hx_run( ::Dynamic _1){
            				HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_247_load)
HXLINE( 247)				onComplete(loader->data);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::Dynamic e){
            				HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_248_load)
HXLINE( 248)				promise->error(e);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 228)			{
HXLINE( 228)				 ::Dynamic id = this->paths->keys();
HXDLIN( 228)				while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 228)					::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 230)					this->preload->set(id1,true);
            				}
            			}
HXLINE( 234)			::String path = null();
HXLINE( 236)			if (this->paths->exists(this->id)) {
HXLINE( 238)				path = ( (::String)(this->paths->get(this->id)) );
            			}
            			else {
HXLINE( 242)				bool path1;
HXDLIN( 242)				if (hx::IsNotNull( this->rootPath )) {
HXLINE( 242)					path1 = (this->rootPath != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 242)					path1 = false;
            				}
HXDLIN( 242)				if (path1) {
HXLINE( 242)					path = ((this->rootPath + HX_("/",2f,00,00,00)) + this->id);
            				}
            				else {
HXLINE( 242)					path = this->id;
            				}
            			}
HXLINE( 246)			 ::openfl::net::URLLoader loader =  ::openfl::net::URLLoader_obj::__alloc( HX_CTX ,null());
HXLINE( 247)			loader->addEventListener(HX_("complete",b9,00,c8,7f), ::Dynamic(new _hx_Closure_2(loader,onComplete)),null(),null(),null());
HXLINE( 248)			loader->addEventListener(HX_("ioError",02,fe,41,76), ::Dynamic(new _hx_Closure_3(promise)),null(),null(),null());
HXLINE( 249)			loader->load( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,path));
            		}
HXLINE( 253)		return promise->future;
            	}


 ::lime::app::Future SWFLiteLibrary_obj::loadImage(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_260_loadImage)
HXDLIN( 260)		 ::openfl::_internal::formats::swf::SWFLiteLibrary _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 262)		if (this->imageClassNames->exists(id)) {
HXLINE( 264)			id = ( (::String)(this->imageClassNames->get(id)) );
            		}
HXLINE( 270)		bool _hx_tmp;
HXDLIN( 270)		if (!(this->preloading)) {
HXLINE( 270)			_hx_tmp = !(this->alphaCheck->exists(id));
            		}
            		else {
HXLINE( 270)			_hx_tmp = false;
            		}
HXDLIN( 270)		if (_hx_tmp) {
HXLINE( 272)			 ::Dynamic symbol = this->swf->symbols->iterator();
HXDLIN( 272)			while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 272)				 ::openfl::_internal::symbols::SWFSymbol symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(symbol->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 274)				bool _hx_tmp1;
HXDLIN( 274)				if (::Std_obj::is(symbol1,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >())) {
HXLINE( 274)					_hx_tmp1 = (hx::TCast<  ::openfl::_internal::symbols::BitmapSymbol >::cast(symbol1)->path == id);
            				}
            				else {
HXLINE( 274)					_hx_tmp1 = false;
            				}
HXDLIN( 274)				if (_hx_tmp1) {
HXLINE( 276)					 ::openfl::_internal::symbols::BitmapSymbol bitmapSymbol = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol1) );
HXLINE( 278)					if (hx::IsNotNull( bitmapSymbol->alpha )) {
            						HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1,::String,id, ::openfl::_internal::formats::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_graphics_Image,promise, ::openfl::_internal::symbols::BitmapSymbol,bitmapSymbol) HXARGC(1)
            						void _hx_run( ::lime::graphics::Image image){
            							HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,::String,id, ::openfl::_internal::formats::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_graphics_Image,promise, ::openfl::_internal::symbols::BitmapSymbol,bitmapSymbol, ::lime::graphics::Image,image) HXARGC(1)
            							void _hx_run( ::lime::graphics::Image alpha){
            								HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_284_loadImage)
HXLINE( 286)								_gthis->_hx___copyChannel(image,alpha);
HXLINE( 288)								_gthis->cachedImages->set(id,image);
HXLINE( 289)								_gthis->cachedImages->remove(bitmapSymbol->alpha);
HXLINE( 290)								_gthis->alphaCheck->set(id,true);
HXLINE( 292)								promise->complete(image);
            							}
            							HX_END_LOCAL_FUNC1((void))

            							HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_284_loadImage)
HXLINE( 284)							_gthis->_hx___loadImage(bitmapSymbol->alpha)->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_0(id,_gthis,promise,bitmapSymbol,image)));
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 280)						 ::lime::app::Promise_lime_graphics_Image promise =  ::lime::app::Promise_lime_graphics_Image_obj::__alloc( HX_CTX );
HXLINE( 282)						this->_hx___loadImage(id)->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_1(id,_gthis,promise,bitmapSymbol)));
HXLINE( 298)						return promise->future;
            					}
            				}
            			}
            		}
HXLINE( 308)		return this->super::loadImage(id);
            	}


void SWFLiteLibrary_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_315_unload)
HXLINE( 317)		if (hx::IsNull( this->swf )) {
HXLINE( 317)			return;
            		}
HXLINE( 319)		bool _hx_tmp;
HXDLIN( 319)		if (::openfl::_internal::formats::swf::SWFLite_obj::instances->exists(this->instanceID)) {
HXLINE( 319)			 ::openfl::_internal::formats::swf::SWFLite _hx_tmp1 = ::openfl::_internal::formats::swf::SWFLite_obj::instances->get(this->instanceID).StaticCast<  ::openfl::_internal::formats::swf::SWFLite >();
HXDLIN( 319)			_hx_tmp = hx::IsEq( _hx_tmp1,this->swf );
            		}
            		else {
HXLINE( 319)			_hx_tmp = false;
            		}
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 321)			::openfl::_internal::formats::swf::SWFLite_obj::instances->remove(this->instanceID);
            		}
HXLINE( 325)		 ::openfl::_internal::symbols::BitmapSymbol bitmap;
HXLINE( 327)		{
HXLINE( 327)			 ::Dynamic symbol = this->swf->symbols->iterator();
HXDLIN( 327)			while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 327)				 ::openfl::_internal::symbols::SWFSymbol symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(symbol->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 329)				if (::Std_obj::is(symbol1,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >())) {
HXLINE( 331)					bitmap = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol1) );
HXLINE( 332)					::openfl::utils::IAssetCache_obj::removeBitmapData(::openfl::utils::Assets_obj::cache,bitmap->path);
            				}
            			}
            		}
            	}


void SWFLiteLibrary_obj::_hx___copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image alpha){
            	HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_343___copyChannel)
HXLINE( 345)		if (hx::IsNotNull( alpha )) {
HXLINE( 347)			 ::lime::math::Rectangle _hx_tmp = alpha->get_rect();
HXDLIN( 347)			image->copyChannel(alpha,_hx_tmp, ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null()),::lime::graphics::ImageChannel_obj::RED_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
            		}
HXLINE( 351)		image->buffer->premultiplied = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SWFLiteLibrary_obj,_hx___copyChannel,(void))

void SWFLiteLibrary_obj::_hx___fromManifest( ::lime::utils::AssetManifest manifest){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_362___fromManifest)
HXLINE( 364)		this->rootPath = manifest->rootPath;
HXLINE( 365)		this->super::_hx___fromManifest(manifest);
HXLINE( 367)		this->bytesTotal = (int)0;
HXLINE( 369)		{
HXLINE( 369)			 ::Dynamic id = this->paths->keys();
HXDLIN( 369)			while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 369)				::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 371)				 ::openfl::_internal::formats::swf::SWFLiteLibrary _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 371)				int _hx_tmp1 = _hx_tmp->bytesTotal;
HXDLIN( 371)				_hx_tmp->bytesTotal = (_hx_tmp1 + this->sizes->get(id1));
            			}
            		}
            	}


 ::lime::app::Future SWFLiteLibrary_obj::_hx___load(){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_382___load)
HXDLIN( 382)		return this->super::load();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SWFLiteLibrary_obj,_hx___load,return )

 ::lime::app::Future SWFLiteLibrary_obj::_hx___loadImage(::String id){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_391___loadImage)
HXDLIN( 391)		return this->super::loadImage(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SWFLiteLibrary_obj,_hx___loadImage,return )


hx::ObjectPtr< SWFLiteLibrary_obj > SWFLiteLibrary_obj::__new(::String id,::String uuid) {
	hx::ObjectPtr< SWFLiteLibrary_obj > __this = new SWFLiteLibrary_obj();
	__this->__construct(id,uuid);
	return __this;
}

hx::ObjectPtr< SWFLiteLibrary_obj > SWFLiteLibrary_obj::__alloc(hx::Ctx *_hx_ctx,::String id,::String uuid) {
	SWFLiteLibrary_obj *__this = (SWFLiteLibrary_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SWFLiteLibrary_obj), true, "openfl._internal.formats.swf.SWFLiteLibrary"));
	*(void **)__this = SWFLiteLibrary_obj::_hx_vtable;
	__this->__construct(id,uuid);
	return __this;
}

SWFLiteLibrary_obj::SWFLiteLibrary_obj()
{
}

void SWFLiteLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SWFLiteLibrary);
	HX_MARK_MEMBER_NAME(alphaCheck,"alphaCheck");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(imageClassNames,"imageClassNames");
	HX_MARK_MEMBER_NAME(instanceID,"instanceID");
	HX_MARK_MEMBER_NAME(preloading,"preloading");
	HX_MARK_MEMBER_NAME(rootPath,"rootPath");
	HX_MARK_MEMBER_NAME(swf,"swf");
	 ::openfl::utils::AssetLibrary_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SWFLiteLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(alphaCheck,"alphaCheck");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(imageClassNames,"imageClassNames");
	HX_VISIT_MEMBER_NAME(instanceID,"instanceID");
	HX_VISIT_MEMBER_NAME(preloading,"preloading");
	HX_VISIT_MEMBER_NAME(rootPath,"rootPath");
	HX_VISIT_MEMBER_NAME(swf,"swf");
	 ::openfl::utils::AssetLibrary_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SWFLiteLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"swf") ) { return hx::Val( swf ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn() ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		if (HX_FIELD_EQ(inName,"__load") ) { return hx::Val( _hx___load_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isLocal") ) { return hx::Val( isLocal_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { return hx::Val( rootPath ); }
		if (HX_FIELD_EQ(inName,"getImage") ) { return hx::Val( getImage_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadImage") ) { return hx::Val( loadImage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaCheck") ) { return hx::Val( alphaCheck ); }
		if (HX_FIELD_EQ(inName,"instanceID") ) { return hx::Val( instanceID ); }
		if (HX_FIELD_EQ(inName,"preloading") ) { return hx::Val( preloading ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__loadImage") ) { return hx::Val( _hx___loadImage_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { return hx::Val( getMovieClip_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__copyChannel") ) { return hx::Val( _hx___copyChannel_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__fromManifest") ) { return hx::Val( _hx___fromManifest_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"imageClassNames") ) { return hx::Val( imageClassNames ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SWFLiteLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"swf") ) { swf=inValue.Cast<  ::openfl::_internal::formats::swf::SWFLite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { rootPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaCheck") ) { alphaCheck=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instanceID") ) { instanceID=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"preloading") ) { preloading=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"imageClassNames") ) { imageClassNames=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SWFLiteLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alphaCheck","\x8a","\xec","\x5b","\x66"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("imageClassNames","\xab","\xbf","\x09","\x89"));
	outFields->push(HX_HCSTRING("instanceID","\xb0","\x2e","\x18","\x6c"));
	outFields->push(HX_HCSTRING("preloading","\xb9","\x08","\xef","\xa9"));
	outFields->push(HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1"));
	outFields->push(HX_HCSTRING("swf","\x42","\xab","\x57","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SWFLiteLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(SWFLiteLibrary_obj,alphaCheck),HX_HCSTRING("alphaCheck","\x8a","\xec","\x5b","\x66")},
	{hx::fsString,(int)offsetof(SWFLiteLibrary_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(SWFLiteLibrary_obj,imageClassNames),HX_HCSTRING("imageClassNames","\xab","\xbf","\x09","\x89")},
	{hx::fsString,(int)offsetof(SWFLiteLibrary_obj,instanceID),HX_HCSTRING("instanceID","\xb0","\x2e","\x18","\x6c")},
	{hx::fsBool,(int)offsetof(SWFLiteLibrary_obj,preloading),HX_HCSTRING("preloading","\xb9","\x08","\xef","\xa9")},
	{hx::fsString,(int)offsetof(SWFLiteLibrary_obj,rootPath),HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1")},
	{hx::fsObject /*::openfl::_internal::formats::swf::SWFLite*/ ,(int)offsetof(SWFLiteLibrary_obj,swf),HX_HCSTRING("swf","\x42","\xab","\x57","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SWFLiteLibrary_obj_sStaticStorageInfo = 0;
#endif

static ::String SWFLiteLibrary_obj_sMemberFields[] = {
	HX_HCSTRING("alphaCheck","\x8a","\xec","\x5b","\x66"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("imageClassNames","\xab","\xbf","\x09","\x89"),
	HX_HCSTRING("instanceID","\xb0","\x2e","\x18","\x6c"),
	HX_HCSTRING("preloading","\xb9","\x08","\xef","\xa9"),
	HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1"),
	HX_HCSTRING("swf","\x42","\xab","\x57","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("getMovieClip","\x2a","\x9f","\x71","\x27"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("loadImage","\x55","\x6b","\xa0","\xd8"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("__copyChannel","\x6e","\xbe","\x5e","\x6b"),
	HX_HCSTRING("__fromManifest","\x59","\x5a","\x01","\x91"),
	HX_HCSTRING("__load","\x46","\xfd","\xaf","\xf6"),
	HX_HCSTRING("__loadImage","\x35","\xb4","\xcc","\x06"),
	::String(null()) };

static void SWFLiteLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SWFLiteLibrary_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SWFLiteLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SWFLiteLibrary_obj::__mClass,"__mClass");
};

#endif

hx::Class SWFLiteLibrary_obj::__mClass;

void SWFLiteLibrary_obj::__register()
{
	hx::Object *dummy = new SWFLiteLibrary_obj;
	SWFLiteLibrary_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.formats.swf.SWFLiteLibrary","\x19","\x15","\x7b","\xa2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SWFLiteLibrary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SWFLiteLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SWFLiteLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SWFLiteLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SWFLiteLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SWFLiteLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace swf
