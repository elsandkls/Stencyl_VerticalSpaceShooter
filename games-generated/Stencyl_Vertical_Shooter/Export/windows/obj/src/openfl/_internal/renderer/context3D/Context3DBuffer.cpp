// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBuffer
#include <openfl/_internal/renderer/context3D/Context3DBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DElementType
#include <openfl/_internal/renderer/context3D/Context3DElementType.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b4e1347513889d4b_34_new,"openfl._internal.renderer.context3D.Context3DBuffer","new",0xe3fe3309,"openfl._internal.renderer.context3D.Context3DBuffer.new","openfl/_internal/renderer/context3D/Context3DBuffer.hx",34,0x815d61c7)
HX_LOCAL_STACK_FRAME(_hx_pos_b4e1347513889d4b_48_drawElements,"openfl._internal.renderer.context3D.Context3DBuffer","drawElements",0x23da4292,"openfl._internal.renderer.context3D.Context3DBuffer.drawElements","openfl/_internal/renderer/context3D/Context3DBuffer.hx",48,0x815d61c7)
HX_LOCAL_STACK_FRAME(_hx_pos_b4e1347513889d4b_89_flushVertexBufferData,"openfl._internal.renderer.context3D.Context3DBuffer","flushVertexBufferData",0x10028b9b,"openfl._internal.renderer.context3D.Context3DBuffer.flushVertexBufferData","openfl/_internal/renderer/context3D/Context3DBuffer.hx",89,0x815d61c7)
HX_LOCAL_STACK_FRAME(_hx_pos_b4e1347513889d4b_103_resize,"openfl._internal.renderer.context3D.Context3DBuffer","resize",0x81af46eb,"openfl._internal.renderer.context3D.Context3DBuffer.resize","openfl/_internal/renderer/context3D/Context3DBuffer.hx",103,0x815d61c7)
HX_LOCAL_STACK_FRAME(_hx_pos_b4e1347513889d4b_17_boot,"openfl._internal.renderer.context3D.Context3DBuffer","boot",0x92877569,"openfl._internal.renderer.context3D.Context3DBuffer.boot","openfl/_internal/renderer/context3D/Context3DBuffer.hx",17,0x815d61c7)
HX_LOCAL_STACK_FRAME(_hx_pos_b4e1347513889d4b_18_boot,"openfl._internal.renderer.context3D.Context3DBuffer","boot",0x92877569,"openfl._internal.renderer.context3D.Context3DBuffer.boot","openfl/_internal/renderer/context3D/Context3DBuffer.hx",18,0x815d61c7)
HX_LOCAL_STACK_FRAME(_hx_pos_b4e1347513889d4b_19_boot,"openfl._internal.renderer.context3D.Context3DBuffer","boot",0x92877569,"openfl._internal.renderer.context3D.Context3DBuffer.boot","openfl/_internal/renderer/context3D/Context3DBuffer.hx",19,0x815d61c7)
namespace openfl{
namespace _internal{
namespace renderer{
namespace context3D{

void Context3DBuffer_obj::__construct( ::openfl::display3D::Context3D context3D, ::openfl::_internal::renderer::context3D::Context3DElementType elementType,int elementCount,int dataPerVertex){
            	HX_STACKFRAME(&_hx_pos_b4e1347513889d4b_34_new)
HXLINE(  36)		this->context3D = context3D;
HXLINE(  37)		this->elementType = elementType;
HXLINE(  38)		this->dataPerVertex = dataPerVertex;
HXLINE(  40)		this->indexCount = (int)0;
HXLINE(  41)		this->vertexCount = (int)0;
HXLINE(  43)		this->resize(elementCount,null());
            	}

Dynamic Context3DBuffer_obj::__CreateEmpty() { return new Context3DBuffer_obj; }

void *Context3DBuffer_obj::_hx_vtable = 0;

Dynamic Context3DBuffer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3DBuffer_obj > _hx_result = new Context3DBuffer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Context3DBuffer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x724bdb5b;
}

void Context3DBuffer_obj::drawElements(int start,hx::Null< int >  __o_length){
int length = __o_length.Default(-1);
            	HX_STACKFRAME(&_hx_pos_b4e1347513889d4b_48_drawElements)
HXLINE(  50)		bool _hx_tmp;
HXDLIN(  50)		if ((this->indexCount != (int)0)) {
HXLINE(  50)			_hx_tmp = (this->vertexCount == (int)0);
            		}
            		else {
HXLINE(  50)			_hx_tmp = true;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  50)			return;
            		}
HXLINE(  52)		{
HXLINE(  52)			 ::openfl::_internal::renderer::context3D::Context3DElementType _g = this->elementType;
HXDLIN(  52)			if ((_hx_getEnumValueIndex(_g) == (int)0)) {
HXLINE(  56)				if ((length == (int)-1)) {
HXLINE(  56)					length = (this->elementCount * (int)2);
            				}
HXLINE(  58)				bool _hx_tmp1;
HXDLIN(  58)				if ((start < (int)10922)) {
HXLINE(  58)					_hx_tmp1 = ((length - start) < (int)10922);
            				}
            				else {
HXLINE(  58)					_hx_tmp1 = false;
            				}
HXDLIN(  58)				if (_hx_tmp1) {
HXLINE(  60)					 ::openfl::display3D::Context3D _hx_tmp2 = this->context3D;
HXDLIN(  60)					 ::openfl::display3D::IndexBuffer3D _hx_tmp3 = this->indexBuffers->__get((int)0).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
HXDLIN(  60)					_hx_tmp2->drawTriangles(_hx_tmp3,(start * (int)2),(length * (int)2));
            				}
            				else {
HXLINE(  64)					int end = (start + length);
HXLINE(  66)					while((start < end)){
HXLINE(  68)						int arrayBufferIndex = ::Math_obj::floor(((Float)start / (Float)(int)10922));
HXLINE(  70)						length = ::Std_obj::_hx_int(::Math_obj::min((end - start),(int)10922));
HXLINE(  71)						if ((length <= (int)0)) {
HXLINE(  71)							goto _hx_goto_1;
            						}
HXLINE(  75)						 ::openfl::display3D::Context3D _hx_tmp4 = this->context3D;
HXDLIN(  75)						 ::openfl::display3D::IndexBuffer3D _hx_tmp5 = this->indexBuffers->__get(arrayBufferIndex).StaticCast<  ::openfl::display3D::IndexBuffer3D >();
HXDLIN(  75)						_hx_tmp4->drawTriangles(_hx_tmp5,((start - (arrayBufferIndex * (int)10922)) * (int)6),(length * (int)2));
HXLINE(  76)						start = (start + length);
            					}
            					_hx_goto_1:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3DBuffer_obj,drawElements,(void))

void Context3DBuffer_obj::flushVertexBufferData(){
            	HX_STACKFRAME(&_hx_pos_b4e1347513889d4b_89_flushVertexBufferData)
HXLINE(  91)		if ((this->vertexBufferData->length > this->vertexCount)) {
HXLINE(  93)			this->vertexCount = this->vertexBufferData->length;
HXLINE(  94)			this->vertexBuffer = this->context3D->createVertexBuffer(this->vertexCount,this->dataPerVertex,(int)0);
            		}
HXLINE(  98)		this->vertexBuffer->uploadFromTypedArray(this->vertexBufferData,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3DBuffer_obj,flushVertexBufferData,(void))

void Context3DBuffer_obj::resize(int elementCount,hx::Null< int >  __o_dataPerVertex){
int dataPerVertex = __o_dataPerVertex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_b4e1347513889d4b_103_resize)
HXLINE( 105)		this->elementCount = elementCount;
HXLINE( 107)		if ((dataPerVertex == (int)-1)) {
HXLINE( 107)			dataPerVertex = this->dataPerVertex;
            		}
HXLINE( 109)		if ((dataPerVertex != this->dataPerVertex)) {
HXLINE( 111)			this->vertexBuffer = null();
HXLINE( 112)			this->vertexCount = (int)0;
HXLINE( 114)			this->dataPerVertex = dataPerVertex;
            		}
HXLINE( 118)		int numVertices = (int)0;
HXLINE( 120)		{
HXLINE( 120)			 ::openfl::_internal::renderer::context3D::Context3DElementType _g = this->elementType;
HXDLIN( 120)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 124)					numVertices = (elementCount * (int)4);
            				}
            				break;
            				case (int)1: {
HXLINE( 128)					numVertices = (elementCount * (int)3);
            				}
            				break;
            				case (int)2: {
HXLINE( 133)					numVertices = (elementCount * (int)3);
            				}
            				break;
            			}
            		}
HXLINE( 139)		int vertexLength = (numVertices * dataPerVertex);
HXLINE( 142)		if (hx::IsNull( this->vertexBufferData )) {
HXLINE( 144)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 144)			if (hx::IsNotNull( vertexLength )) {
HXLINE( 144)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,vertexLength,(int)8);
            			}
            			else {
HXLINE( 144)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 144)			this->vertexBufferData = this1;
            		}
            		else {
HXLINE( 146)			if ((vertexLength > this->vertexBufferData->length)) {
HXLINE( 148)				 ::lime::utils::ArrayBufferView cacheBufferData = this->vertexBufferData;
HXLINE( 149)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 149)				if (hx::IsNotNull( vertexLength )) {
HXLINE( 149)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,vertexLength,(int)8);
            				}
            				else {
HXLINE( 149)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXDLIN( 149)				this->vertexBufferData = this2;
HXLINE( 150)				{
HXLINE( 150)					 ::lime::utils::ArrayBufferView _this = this->vertexBufferData;
HXDLIN( 150)					int offset = (int)0;
HXDLIN( 150)					if (hx::IsNotNull( cacheBufferData )) {
HXLINE( 150)						 ::haxe::io::Bytes _this1 = _this->buffer;
HXDLIN( 150)						_this1->blit((offset * _this->bytesPerElement),cacheBufferData->buffer,cacheBufferData->byteOffset,cacheBufferData->byteLength);
            					}
            					else {
HXLINE( 150)						HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3DBuffer_obj,resize,(void))

int Context3DBuffer_obj::MAX_INDEX_BUFFER_LENGTH;

int Context3DBuffer_obj::MAX_QUADS_PER_INDEX_BUFFER;

int Context3DBuffer_obj::MAX_QUAD_INDEX_BUFFER_LENGTH;


hx::ObjectPtr< Context3DBuffer_obj > Context3DBuffer_obj::__new( ::openfl::display3D::Context3D context3D, ::openfl::_internal::renderer::context3D::Context3DElementType elementType,int elementCount,int dataPerVertex) {
	hx::ObjectPtr< Context3DBuffer_obj > __this = new Context3DBuffer_obj();
	__this->__construct(context3D,elementType,elementCount,dataPerVertex);
	return __this;
}

hx::ObjectPtr< Context3DBuffer_obj > Context3DBuffer_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context3D, ::openfl::_internal::renderer::context3D::Context3DElementType elementType,int elementCount,int dataPerVertex) {
	Context3DBuffer_obj *__this = (Context3DBuffer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context3DBuffer_obj), true, "openfl._internal.renderer.context3D.Context3DBuffer"));
	*(void **)__this = Context3DBuffer_obj::_hx_vtable;
	__this->__construct(context3D,elementType,elementCount,dataPerVertex);
	return __this;
}

Context3DBuffer_obj::Context3DBuffer_obj()
{
}

void Context3DBuffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3DBuffer);
	HX_MARK_MEMBER_NAME(dataPerVertex,"dataPerVertex");
	HX_MARK_MEMBER_NAME(elementCount,"elementCount");
	HX_MARK_MEMBER_NAME(elementType,"elementType");
	HX_MARK_MEMBER_NAME(indexBufferData,"indexBufferData");
	HX_MARK_MEMBER_NAME(indexBuffers,"indexBuffers");
	HX_MARK_MEMBER_NAME(indexCount,"indexCount");
	HX_MARK_MEMBER_NAME(vertexBuffer,"vertexBuffer");
	HX_MARK_MEMBER_NAME(vertexBufferData,"vertexBufferData");
	HX_MARK_MEMBER_NAME(vertexCount,"vertexCount");
	HX_MARK_MEMBER_NAME(context3D,"context3D");
	HX_MARK_END_CLASS();
}

void Context3DBuffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dataPerVertex,"dataPerVertex");
	HX_VISIT_MEMBER_NAME(elementCount,"elementCount");
	HX_VISIT_MEMBER_NAME(elementType,"elementType");
	HX_VISIT_MEMBER_NAME(indexBufferData,"indexBufferData");
	HX_VISIT_MEMBER_NAME(indexBuffers,"indexBuffers");
	HX_VISIT_MEMBER_NAME(indexCount,"indexCount");
	HX_VISIT_MEMBER_NAME(vertexBuffer,"vertexBuffer");
	HX_VISIT_MEMBER_NAME(vertexBufferData,"vertexBufferData");
	HX_VISIT_MEMBER_NAME(vertexCount,"vertexCount");
	HX_VISIT_MEMBER_NAME(context3D,"context3D");
}

hx::Val Context3DBuffer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"context3D") ) { return hx::Val( context3D ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"indexCount") ) { return hx::Val( indexCount ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"elementType") ) { return hx::Val( elementType ); }
		if (HX_FIELD_EQ(inName,"vertexCount") ) { return hx::Val( vertexCount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"elementCount") ) { return hx::Val( elementCount ); }
		if (HX_FIELD_EQ(inName,"indexBuffers") ) { return hx::Val( indexBuffers ); }
		if (HX_FIELD_EQ(inName,"vertexBuffer") ) { return hx::Val( vertexBuffer ); }
		if (HX_FIELD_EQ(inName,"drawElements") ) { return hx::Val( drawElements_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dataPerVertex") ) { return hx::Val( dataPerVertex ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"indexBufferData") ) { return hx::Val( indexBufferData ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vertexBufferData") ) { return hx::Val( vertexBufferData ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"flushVertexBufferData") ) { return hx::Val( flushVertexBufferData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Context3DBuffer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"context3D") ) { context3D=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"indexCount") ) { indexCount=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"elementType") ) { elementType=inValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DElementType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vertexCount") ) { vertexCount=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"elementCount") ) { elementCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexBuffers") ) { indexBuffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vertexBuffer") ) { vertexBuffer=inValue.Cast<  ::openfl::display3D::VertexBuffer3D >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dataPerVertex") ) { dataPerVertex=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"indexBufferData") ) { indexBufferData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vertexBufferData") ) { vertexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Context3DBuffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("dataPerVertex","\x97","\x9c","\x7c","\x40"));
	outFields->push(HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"));
	outFields->push(HX_HCSTRING("elementType","\x96","\xdb","\x7a","\xf0"));
	outFields->push(HX_HCSTRING("indexBufferData","\xfc","\xa8","\xcc","\xe3"));
	outFields->push(HX_HCSTRING("indexBuffers","\x81","\x96","\xf2","\xfb"));
	outFields->push(HX_HCSTRING("indexCount","\x5d","\xb8","\x56","\x1a"));
	outFields->push(HX_HCSTRING("vertexBuffer","\x84","\xaf","\xa9","\x70"));
	outFields->push(HX_HCSTRING("vertexBufferData","\xce","\x43","\xce","\xc6"));
	outFields->push(HX_HCSTRING("vertexCount","\xcb","\x0e","\x9f","\x5e"));
	outFields->push(HX_HCSTRING("context3D","\x60","\x5c","\xfc","\x16"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Context3DBuffer_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Context3DBuffer_obj,dataPerVertex),HX_HCSTRING("dataPerVertex","\x97","\x9c","\x7c","\x40")},
	{hx::fsInt,(int)offsetof(Context3DBuffer_obj,elementCount),HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa")},
	{hx::fsObject /*::openfl::_internal::renderer::context3D::Context3DElementType*/ ,(int)offsetof(Context3DBuffer_obj,elementType),HX_HCSTRING("elementType","\x96","\xdb","\x7a","\xf0")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3DBuffer_obj,indexBufferData),HX_HCSTRING("indexBufferData","\xfc","\xa8","\xcc","\xe3")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3DBuffer_obj,indexBuffers),HX_HCSTRING("indexBuffers","\x81","\x96","\xf2","\xfb")},
	{hx::fsInt,(int)offsetof(Context3DBuffer_obj,indexCount),HX_HCSTRING("indexCount","\x5d","\xb8","\x56","\x1a")},
	{hx::fsObject /*::openfl::display3D::VertexBuffer3D*/ ,(int)offsetof(Context3DBuffer_obj,vertexBuffer),HX_HCSTRING("vertexBuffer","\x84","\xaf","\xa9","\x70")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3DBuffer_obj,vertexBufferData),HX_HCSTRING("vertexBufferData","\xce","\x43","\xce","\xc6")},
	{hx::fsInt,(int)offsetof(Context3DBuffer_obj,vertexCount),HX_HCSTRING("vertexCount","\xcb","\x0e","\x9f","\x5e")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(Context3DBuffer_obj,context3D),HX_HCSTRING("context3D","\x60","\x5c","\xfc","\x16")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3DBuffer_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Context3DBuffer_obj::MAX_INDEX_BUFFER_LENGTH,HX_HCSTRING("MAX_INDEX_BUFFER_LENGTH","\xbd","\xe7","\xc1","\x80")},
	{hx::fsInt,(void *) &Context3DBuffer_obj::MAX_QUADS_PER_INDEX_BUFFER,HX_HCSTRING("MAX_QUADS_PER_INDEX_BUFFER","\xbd","\x42","\x19","\xd5")},
	{hx::fsInt,(void *) &Context3DBuffer_obj::MAX_QUAD_INDEX_BUFFER_LENGTH,HX_HCSTRING("MAX_QUAD_INDEX_BUFFER_LENGTH","\xdb","\x1b","\xdf","\x33")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3DBuffer_obj_sMemberFields[] = {
	HX_HCSTRING("dataPerVertex","\x97","\x9c","\x7c","\x40"),
	HX_HCSTRING("elementCount","\x73","\x1c","\x9d","\xaa"),
	HX_HCSTRING("elementType","\x96","\xdb","\x7a","\xf0"),
	HX_HCSTRING("indexBufferData","\xfc","\xa8","\xcc","\xe3"),
	HX_HCSTRING("indexBuffers","\x81","\x96","\xf2","\xfb"),
	HX_HCSTRING("indexCount","\x5d","\xb8","\x56","\x1a"),
	HX_HCSTRING("vertexBuffer","\x84","\xaf","\xa9","\x70"),
	HX_HCSTRING("vertexBufferData","\xce","\x43","\xce","\xc6"),
	HX_HCSTRING("vertexCount","\xcb","\x0e","\x9f","\x5e"),
	HX_HCSTRING("context3D","\x60","\x5c","\xfc","\x16"),
	HX_HCSTRING("drawElements","\x5b","\xc2","\xb7","\x59"),
	HX_HCSTRING("flushVertexBufferData","\xb2","\x4a","\x75","\xa2"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	::String(null()) };

static void Context3DBuffer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3DBuffer_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Context3DBuffer_obj::MAX_INDEX_BUFFER_LENGTH,"MAX_INDEX_BUFFER_LENGTH");
	HX_MARK_MEMBER_NAME(Context3DBuffer_obj::MAX_QUADS_PER_INDEX_BUFFER,"MAX_QUADS_PER_INDEX_BUFFER");
	HX_MARK_MEMBER_NAME(Context3DBuffer_obj::MAX_QUAD_INDEX_BUFFER_LENGTH,"MAX_QUAD_INDEX_BUFFER_LENGTH");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3DBuffer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3DBuffer_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Context3DBuffer_obj::MAX_INDEX_BUFFER_LENGTH,"MAX_INDEX_BUFFER_LENGTH");
	HX_VISIT_MEMBER_NAME(Context3DBuffer_obj::MAX_QUADS_PER_INDEX_BUFFER,"MAX_QUADS_PER_INDEX_BUFFER");
	HX_VISIT_MEMBER_NAME(Context3DBuffer_obj::MAX_QUAD_INDEX_BUFFER_LENGTH,"MAX_QUAD_INDEX_BUFFER_LENGTH");
};

#endif

hx::Class Context3DBuffer_obj::__mClass;

static ::String Context3DBuffer_obj_sStaticFields[] = {
	HX_HCSTRING("MAX_INDEX_BUFFER_LENGTH","\xbd","\xe7","\xc1","\x80"),
	HX_HCSTRING("MAX_QUADS_PER_INDEX_BUFFER","\xbd","\x42","\x19","\xd5"),
	HX_HCSTRING("MAX_QUAD_INDEX_BUFFER_LENGTH","\xdb","\x1b","\xdf","\x33"),
	::String(null())
};

void Context3DBuffer_obj::__register()
{
	hx::Object *dummy = new Context3DBuffer_obj;
	Context3DBuffer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.context3D.Context3DBuffer","\x97","\xfa","\x3b","\xed");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Context3DBuffer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3DBuffer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3DBuffer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3DBuffer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3DBuffer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DBuffer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3DBuffer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b4e1347513889d4b_17_boot)
HXDLIN(  17)		MAX_INDEX_BUFFER_LENGTH = (int)65535;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b4e1347513889d4b_18_boot)
HXDLIN(  18)		MAX_QUADS_PER_INDEX_BUFFER = (int)10922;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b4e1347513889d4b_19_boot)
HXDLIN(  19)		MAX_QUAD_INDEX_BUFFER_LENGTH = (int)65532;
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace context3D
