// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal_AGALConverter
#include <openfl/_internal/formats/agal/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal_RegisterMap
#include <openfl/_internal/formats/agal/RegisterMap.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_DestRegister
#include <openfl/_internal/formats/agal/_AGALConverter/DestRegister.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_ProgramType
#include <openfl/_internal/formats/agal/_AGALConverter/ProgramType.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_RegisterMapEntry
#include <openfl/_internal/formats/agal/_AGALConverter/RegisterMapEntry.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_RegisterUsage
#include <openfl/_internal/formats/agal/_AGALConverter/RegisterUsage.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_SamplerRegister
#include <openfl/_internal/formats/agal/_AGALConverter/SamplerRegister.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_SourceRegister
#include <openfl/_internal/formats/agal/_AGALConverter/SourceRegister.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_efafc00810297e67_641_new,"openfl._internal.formats.agal.RegisterMap","new",0x3a681cb0,"openfl._internal.formats.agal.RegisterMap.new","openfl/_internal/formats/agal/AGALConverter.hx",641,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_efafc00810297e67_651_add,"openfl._internal.formats.agal.RegisterMap","add",0x3a5e3e71,"openfl._internal.formats.agal.RegisterMap.add","openfl/_internal/formats/agal/AGALConverter.hx",651,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_efafc00810297e67_681_addDR,"openfl._internal.formats.agal.RegisterMap","addDR",0x3d3fb83f,"openfl._internal.formats.agal.RegisterMap.addDR","openfl/_internal/formats/agal/AGALConverter.hx",681,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_efafc00810297e67_688_addSaR,"openfl._internal.formats.agal.RegisterMap","addSaR",0x5a8cee13,"openfl._internal.formats.agal.RegisterMap.addSaR","openfl/_internal/formats/agal/AGALConverter.hx",688,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_efafc00810297e67_693_addSR,"openfl._internal.formats.agal.RegisterMap","addSR",0x3d3fc550,"openfl._internal.formats.agal.RegisterMap.addSR","openfl/_internal/formats/agal/AGALConverter.hx",693,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_efafc00810297e67_708_getRegisterUsage,"openfl._internal.formats.agal.RegisterMap","getRegisterUsage",0x5e0f0af8,"openfl._internal.formats.agal.RegisterMap.getRegisterUsage","openfl/_internal/formats/agal/AGALConverter.hx",708,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_efafc00810297e67_721_getUsage,"openfl._internal.formats.agal.RegisterMap","getUsage",0xe36b7e5b,"openfl._internal.formats.agal.RegisterMap.getUsage","openfl/_internal/formats/agal/AGALConverter.hx",721,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_efafc00810297e67_742_toGLSL,"openfl._internal.formats.agal.RegisterMap","toGLSL",0x358c9ea9,"openfl._internal.formats.agal.RegisterMap.toGLSL","openfl/_internal/formats/agal/AGALConverter.hx",742,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_efafc00810297e67_750_toGLSL,"openfl._internal.formats.agal.RegisterMap","toGLSL",0x358c9ea9,"openfl._internal.formats.agal.RegisterMap.toGLSL","openfl/_internal/formats/agal/AGALConverter.hx",750,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_efafc00810297e67_738_toGLSL,"openfl._internal.formats.agal.RegisterMap","toGLSL",0x358c9ea9,"openfl._internal.formats.agal.RegisterMap.toGLSL","openfl/_internal/formats/agal/AGALConverter.hx",738,0x323dd368)
static const ::String _hx_array_data_8a1844be_13[] = {
	HX_("attribute ",84,a8,71,97),
};
static const ::String _hx_array_data_8a1844be_14[] = {
	HX_("uniform ",6c,cc,54,02),
};
static const ::String _hx_array_data_8a1844be_15[] = {
	HX_("\t",09,00,00,00),
};
static const ::String _hx_array_data_8a1844be_16[] = {
	HX_("varying ",b0,25,c9,a4),
};
static const ::String _hx_array_data_8a1844be_17[] = {
	HX_("uniform ",6c,cc,54,02),
};
static const ::String _hx_array_data_8a1844be_18[] = {
	HX_("vec4 ",c0,4c,56,34),
};
static const ::String _hx_array_data_8a1844be_19[] = {
	HX_("mat4 ",0c,20,23,03),
};
static const ::String _hx_array_data_8a1844be_20[] = {
	HX_("sampler2D ",06,3c,4f,7c),
};
static const ::String _hx_array_data_8a1844be_21[] = {
	HX_("samplerCube ",63,87,00,86),
};
static const ::String _hx_array_data_8a1844be_22[] = {
	HX_("vec4 ",c0,4c,56,34),
};
static const ::String _hx_array_data_8a1844be_23[] = {
	HX_("sampler2D ",06,3c,4f,7c),
};
static const ::String _hx_array_data_8a1844be_24[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_8a1844be_25[] = {
	HX_("uniform ",6c,cc,54,02),
};
static const ::String _hx_array_data_8a1844be_26[] = {
	HX_("sampler2D ",06,3c,4f,7c),
};
static const ::String _hx_array_data_8a1844be_27[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_8a1844be_28[] = {
	HX_("uniform ",6c,cc,54,02),
};
static const ::String _hx_array_data_8a1844be_29[] = {
	HX_("bool ",b6,20,f8,b6),
};
static const ::String _hx_array_data_8a1844be_30[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_8a1844be_31[] = {
	HX_("samplerCube ",63,87,00,86),
};
static const ::String _hx_array_data_8a1844be_32[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_8a1844be_33[] = {
	HX_("uniform ",6c,cc,54,02),
};
static const ::String _hx_array_data_8a1844be_34[] = {
	HX_("samplerCube ",63,87,00,86),
};
static const ::String _hx_array_data_8a1844be_35[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_8a1844be_36[] = {
	HX_("uniform ",6c,cc,54,02),
};
static const ::String _hx_array_data_8a1844be_37[] = {
	HX_("bool ",b6,20,f8,b6),
};
static const ::String _hx_array_data_8a1844be_38[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_8a1844be_39[] = {
	HX_(";\n",6f,33,00,00),
};
static const ::String _hx_array_data_8a1844be_40[] = {
	HX_(";\n",6f,33,00,00),
};
namespace openfl{
namespace _internal{
namespace formats{
namespace agal{

void RegisterMap_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_efafc00810297e67_641_new)
HXDLIN( 641)		this->mEntries = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic RegisterMap_obj::__CreateEmpty() { return new RegisterMap_obj; }

void *RegisterMap_obj::_hx_vtable = 0;

Dynamic RegisterMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RegisterMap_obj > _hx_result = new RegisterMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RegisterMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6c539f98;
}

void RegisterMap_obj::add(int type,::String name,int number, ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage usage){
            	HX_GC_STACKFRAME(&_hx_pos_efafc00810297e67_651_add)
HXLINE( 653)		{
HXLINE( 653)			int _g = (int)0;
HXDLIN( 653)			::Array< ::Dynamic> _g1 = this->mEntries;
HXDLIN( 653)			while((_g < _g1->length)){
HXLINE( 653)				 ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry entry = _g1->__get(_g).StaticCast<  ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry >();
HXDLIN( 653)				_g = (_g + (int)1);
HXLINE( 655)				bool _hx_tmp;
HXDLIN( 655)				bool _hx_tmp1;
HXDLIN( 655)				if ((entry->type == type)) {
HXLINE( 655)					_hx_tmp1 = (entry->name == name);
            				}
            				else {
HXLINE( 655)					_hx_tmp1 = false;
            				}
HXDLIN( 655)				if (_hx_tmp1) {
HXLINE( 655)					_hx_tmp = (entry->number == number);
            				}
            				else {
HXLINE( 655)					_hx_tmp = false;
            				}
HXDLIN( 655)				if (_hx_tmp) {
HXLINE( 657)					if (hx::IsNotEq( entry->usage,usage )) {
HXLINE( 659)						HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot use register in multiple ways yet (mat4/vec4)",5e,30,e0,74)));
            					}
HXLINE( 663)					return;
            				}
            			}
            		}
HXLINE( 669)		 ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry entry1 =  ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry_obj::__alloc( HX_CTX );
HXLINE( 670)		entry1->type = type;
HXLINE( 671)		entry1->name = name;
HXLINE( 672)		entry1->number = number;
HXLINE( 673)		entry1->usage = usage;
HXLINE( 674)		this->mEntries->push(entry1);
            	}


HX_DEFINE_DYNAMIC_FUNC4(RegisterMap_obj,add,(void))

void RegisterMap_obj::addDR( ::openfl::_internal::formats::agal::_AGALConverter::DestRegister dr, ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage usage){
            	HX_STACKFRAME(&_hx_pos_efafc00810297e67_681_addDR)
HXDLIN( 681)		int dr1 = dr->type;
HXDLIN( 681)		::String _hx_tmp = dr->toGLSL(false);
HXDLIN( 681)		this->add(dr1,_hx_tmp,dr->n,usage);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RegisterMap_obj,addDR,(void))

void RegisterMap_obj::addSaR( ::openfl::_internal::formats::agal::_AGALConverter::SamplerRegister sr, ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage usage){
            	HX_STACKFRAME(&_hx_pos_efafc00810297e67_688_addSaR)
HXDLIN( 688)		int sr1 = sr->type;
HXDLIN( 688)		::String _hx_tmp = sr->toGLSL();
HXDLIN( 688)		this->add(sr1,_hx_tmp,sr->n,usage);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RegisterMap_obj,addSaR,(void))

void RegisterMap_obj::addSR( ::openfl::_internal::formats::agal::_AGALConverter::SourceRegister sr, ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage usage,hx::Null< int >  __o_offset){
int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_efafc00810297e67_693_addSR)
HXLINE( 695)		if ((sr->d != (int)0)) {
HXLINE( 697)			int sr1 = sr->itype;
HXDLIN( 697)			::String _hx_tmp = ::openfl::_internal::formats::agal::AGALConverter_obj::prefixFromType(sr->itype,sr->programType);
HXDLIN( 697)			this->add(sr1,(_hx_tmp + sr->n),sr->n,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 698)			int sr2 = sr->type;
HXDLIN( 698)			::String _hx_tmp1 = ::openfl::_internal::formats::agal::AGALConverter_obj::prefixFromType(sr->type,sr->programType);
HXDLIN( 698)			this->add(sr2,(_hx_tmp1 + sr->o),sr->o,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn());
HXLINE( 699)			return;
            		}
HXLINE( 703)		int sr3 = sr->type;
HXDLIN( 703)		::String _hx_tmp2 = sr->toGLSL(false,offset);
HXDLIN( 703)		this->add(sr3,_hx_tmp2,(sr->n + offset),usage);
            	}


HX_DEFINE_DYNAMIC_FUNC3(RegisterMap_obj,addSR,(void))

 ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage RegisterMap_obj::getRegisterUsage( ::openfl::_internal::formats::agal::_AGALConverter::SourceRegister sr){
            	HX_STACKFRAME(&_hx_pos_efafc00810297e67_708_getRegisterUsage)
HXLINE( 710)		if ((sr->d != (int)0)) {
HXLINE( 712)			return ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn();
            		}
HXLINE( 716)		int sr1 = sr->type;
HXDLIN( 716)		::String _hx_tmp = sr->toGLSL(false,null());
HXDLIN( 716)		return this->getUsage(sr1,_hx_tmp,sr->n);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegisterMap_obj,getRegisterUsage,return )

 ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage RegisterMap_obj::getUsage(int type,::String name,int number){
            	HX_STACKFRAME(&_hx_pos_efafc00810297e67_721_getUsage)
HXLINE( 723)		{
HXLINE( 723)			int _g = (int)0;
HXDLIN( 723)			::Array< ::Dynamic> _g1 = this->mEntries;
HXDLIN( 723)			while((_g < _g1->length)){
HXLINE( 723)				 ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry entry = _g1->__get(_g).StaticCast<  ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry >();
HXDLIN( 723)				_g = (_g + (int)1);
HXLINE( 725)				bool _hx_tmp;
HXDLIN( 725)				bool _hx_tmp1;
HXDLIN( 725)				if ((entry->type == type)) {
HXLINE( 725)					_hx_tmp1 = (entry->name == name);
            				}
            				else {
HXLINE( 725)					_hx_tmp1 = false;
            				}
HXDLIN( 725)				if (_hx_tmp1) {
HXLINE( 725)					_hx_tmp = (entry->number == number);
            				}
            				else {
HXLINE( 725)					_hx_tmp = false;
            				}
HXDLIN( 725)				if (_hx_tmp) {
HXLINE( 727)					return entry->usage;
            				}
            			}
            		}
HXLINE( 733)		return ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::UNUSED_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC3(RegisterMap_obj,getUsage,return )

::String RegisterMap_obj::toGLSL(bool tempRegistersOnly){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry a, ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry b){
            			HX_STACKFRAME(&_hx_pos_efafc00810297e67_742_toGLSL)
HXLINE( 742)			return (a->number - b->number);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		int _hx_run( ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry a1, ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry b1){
            			HX_STACKFRAME(&_hx_pos_efafc00810297e67_750_toGLSL)
HXLINE( 750)			int _hx_tmp = a1->type;
HXDLIN( 750)			return (_hx_tmp - b1->type);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_efafc00810297e67_738_toGLSL)
HXLINE( 740)		this->mEntries->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 746)		 ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry entry;
HXLINE( 748)		this->mEntries->sort( ::Dynamic(new _hx_Closure_1()));
HXLINE( 754)		 ::StringBuf sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 756)		{
HXLINE( 756)			int _g1 = (int)0;
HXDLIN( 756)			int _g = this->mEntries->length;
HXDLIN( 756)			while((_g1 < _g)){
HXLINE( 756)				_g1 = (_g1 + (int)1);
HXDLIN( 756)				int i = (_g1 - (int)1);
HXLINE( 758)				entry = this->mEntries->__get(i).StaticCast<  ::openfl::_internal::formats::agal::_AGALConverter::RegisterMapEntry >();
HXLINE( 762)				bool _hx_tmp1;
HXDLIN( 762)				bool _hx_tmp2;
HXDLIN( 762)				if (tempRegistersOnly) {
HXLINE( 762)					_hx_tmp2 = (entry->type != (int)2);
            				}
            				else {
HXLINE( 762)					_hx_tmp2 = false;
            				}
HXDLIN( 762)				if (!(_hx_tmp2)) {
HXLINE( 762)					if (!(tempRegistersOnly)) {
HXLINE( 762)						_hx_tmp1 = (entry->type == (int)2);
            					}
            					else {
HXLINE( 762)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE( 762)					_hx_tmp1 = true;
            				}
HXDLIN( 762)				if (_hx_tmp1) {
HXLINE( 764)					continue;
            				}
HXLINE( 769)				if ((entry->type == (int)3)) {
HXLINE( 771)					continue;
            				}
HXLINE( 775)				{
HXLINE( 775)					int _g2 = entry->type;
HXDLIN( 775)					switch((int)(_g2)){
            						case (int)0: {
HXLINE( 780)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 780)								sb->flush();
            							}
HXDLIN( 780)							if (hx::IsNull( sb->b )) {
HXLINE( 780)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_13,1);
            							}
            							else {
HXLINE( 780)								sb->b->push(HX_("attribute ",84,a8,71,97));
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 785)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 785)								sb->flush();
            							}
HXDLIN( 785)							if (hx::IsNull( sb->b )) {
HXLINE( 785)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_14,1);
            							}
            							else {
HXLINE( 785)								sb->b->push(HX_("uniform ",6c,cc,54,02));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 789)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 789)								sb->flush();
            							}
HXDLIN( 789)							if (hx::IsNull( sb->b )) {
HXLINE( 789)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_15,1);
            							}
            							else {
HXLINE( 789)								sb->b->push(HX_("\t",09,00,00,00));
            							}
            						}
            						break;
            						case (int)3: {
            						}
            						break;
            						case (int)4: {
HXLINE( 795)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 795)								sb->flush();
            							}
HXDLIN( 795)							if (hx::IsNull( sb->b )) {
HXLINE( 795)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_16,1);
            							}
            							else {
HXLINE( 795)								sb->b->push(HX_("varying ",b0,25,c9,a4));
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 799)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 799)								sb->flush();
            							}
HXDLIN( 799)							if (hx::IsNull( sb->b )) {
HXLINE( 799)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_17,1);
            							}
            							else {
HXLINE( 799)								sb->b->push(HX_("uniform ",6c,cc,54,02));
            							}
            						}
            						break;
            						default:{
HXLINE( 803)							HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            						}
            					}
            				}
HXLINE( 807)				{
HXLINE( 807)					 ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage _g3 = entry->usage;
HXDLIN( 807)					switch((int)(_hx_getEnumValueIndex(_g3))){
            						case (int)0: {
HXLINE( 831)							::haxe::Log_obj::trace(HX_("Missing switch patten: RegisterUsage.UNUSED",38,09,f6,02),hx::SourceInfo(HX_("AGALConverter.hx",8f,36,cd,e2),831,HX_("openfl._internal.formats.agal.RegisterMap",be,44,18,8a),HX_("toGLSL",f9,58,08,7a)));
            						}
            						break;
            						case (int)1: {
HXLINE( 811)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 811)								sb->flush();
            							}
HXDLIN( 811)							if (hx::IsNull( sb->b )) {
HXLINE( 811)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_18,1);
            							}
            							else {
HXLINE( 811)								sb->b->push(HX_("vec4 ",c0,4c,56,34));
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 819)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 819)								sb->flush();
            							}
HXDLIN( 819)							if (hx::IsNull( sb->b )) {
HXLINE( 819)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_19,1);
            							}
            							else {
HXLINE( 819)								sb->b->push(HX_("mat4 ",0c,20,23,03));
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 823)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 823)								sb->flush();
            							}
HXDLIN( 823)							if (hx::IsNull( sb->b )) {
HXLINE( 823)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_20,1);
            							}
            							else {
HXLINE( 823)								sb->b->push(HX_("sampler2D ",06,3c,4f,7c));
            							}
            						}
            						break;
            						case (int)4: {
            						}
            						break;
            						case (int)5: {
HXLINE( 827)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 827)								sb->flush();
            							}
HXDLIN( 827)							if (hx::IsNull( sb->b )) {
HXLINE( 827)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_21,1);
            							}
            							else {
HXLINE( 827)								sb->b->push(HX_("samplerCube ",63,87,00,86));
            							}
            						}
            						break;
            						case (int)6: {
            						}
            						break;
            						case (int)7: {
HXLINE( 815)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 815)								sb->flush();
            							}
HXDLIN( 815)							if (hx::IsNull( sb->b )) {
HXLINE( 815)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_22,1);
            							}
            							else {
HXLINE( 815)								sb->b->push(HX_("vec4 ",c0,4c,56,34));
            							}
            						}
            						break;
            					}
            				}
HXLINE( 843)				if (hx::IsEq( entry->usage,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::SAMPLER_2D_ALPHA_dyn() )) {
HXLINE( 845)					{
HXLINE( 845)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 845)							sb->flush();
            						}
HXDLIN( 845)						if (hx::IsNull( sb->b )) {
HXLINE( 845)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_23,1);
            						}
            						else {
HXLINE( 845)							sb->b->push(HX_("sampler2D ",06,3c,4f,7c));
            						}
            					}
HXLINE( 846)					{
HXLINE( 846)						::String x = entry->name;
HXDLIN( 846)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 846)							sb->flush();
            						}
HXDLIN( 846)						if (hx::IsNull( sb->b )) {
HXLINE( 846)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            						}
            						else {
HXLINE( 846)							::Array< ::String > sb1 = sb->b;
HXDLIN( 846)							sb1->push(::Std_obj::string(x));
            						}
            					}
HXLINE( 847)					{
HXLINE( 847)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 847)							sb->flush();
            						}
HXDLIN( 847)						if (hx::IsNull( sb->b )) {
HXLINE( 847)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_24,1);
            						}
            						else {
HXLINE( 847)							sb->b->push(HX_(";\n",6f,33,00,00));
            						}
            					}
HXLINE( 849)					{
HXLINE( 849)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 849)							sb->flush();
            						}
HXDLIN( 849)						if (hx::IsNull( sb->b )) {
HXLINE( 849)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_25,1);
            						}
            						else {
HXLINE( 849)							sb->b->push(HX_("uniform ",6c,cc,54,02));
            						}
            					}
HXLINE( 850)					{
HXLINE( 850)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 850)							sb->flush();
            						}
HXDLIN( 850)						if (hx::IsNull( sb->b )) {
HXLINE( 850)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_26,1);
            						}
            						else {
HXLINE( 850)							sb->b->push(HX_("sampler2D ",06,3c,4f,7c));
            						}
            					}
HXLINE( 851)					{
HXLINE( 851)						::String x1 = (entry->name + HX_("_alpha",9f,ee,7d,1d));
HXDLIN( 851)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 851)							sb->flush();
            						}
HXDLIN( 851)						if (hx::IsNull( sb->b )) {
HXLINE( 851)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            						}
            						else {
HXLINE( 851)							::Array< ::String > sb2 = sb->b;
HXDLIN( 851)							sb2->push(::Std_obj::string(x1));
            						}
            					}
HXLINE( 852)					{
HXLINE( 852)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 852)							sb->flush();
            						}
HXDLIN( 852)						if (hx::IsNull( sb->b )) {
HXLINE( 852)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_27,1);
            						}
            						else {
HXLINE( 852)							sb->b->push(HX_(";\n",6f,33,00,00));
            						}
            					}
HXLINE( 854)					{
HXLINE( 854)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 854)							sb->flush();
            						}
HXDLIN( 854)						if (hx::IsNull( sb->b )) {
HXLINE( 854)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_28,1);
            						}
            						else {
HXLINE( 854)							sb->b->push(HX_("uniform ",6c,cc,54,02));
            						}
            					}
HXLINE( 855)					{
HXLINE( 855)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 855)							sb->flush();
            						}
HXDLIN( 855)						if (hx::IsNull( sb->b )) {
HXLINE( 855)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_29,1);
            						}
            						else {
HXLINE( 855)							sb->b->push(HX_("bool ",b6,20,f8,b6));
            						}
            					}
HXLINE( 856)					{
HXLINE( 856)						::String x2 = (entry->name + HX_("_alphaEnabled",a2,df,12,f4));
HXDLIN( 856)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 856)							sb->flush();
            						}
HXDLIN( 856)						if (hx::IsNull( sb->b )) {
HXLINE( 856)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            						}
            						else {
HXLINE( 856)							::Array< ::String > sb3 = sb->b;
HXDLIN( 856)							sb3->push(::Std_obj::string(x2));
            						}
            					}
HXLINE( 857)					{
HXLINE( 857)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 857)							sb->flush();
            						}
HXDLIN( 857)						if (hx::IsNull( sb->b )) {
HXLINE( 857)							sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_30,1);
            						}
            						else {
HXLINE( 857)							sb->b->push(HX_(";\n",6f,33,00,00));
            						}
            					}
            				}
            				else {
HXLINE( 859)					if (hx::IsEq( entry->usage,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::SAMPLER_CUBE_ALPHA_dyn() )) {
HXLINE( 861)						{
HXLINE( 861)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 861)								sb->flush();
            							}
HXDLIN( 861)							if (hx::IsNull( sb->b )) {
HXLINE( 861)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_31,1);
            							}
            							else {
HXLINE( 861)								sb->b->push(HX_("samplerCube ",63,87,00,86));
            							}
            						}
HXLINE( 862)						{
HXLINE( 862)							::String x3 = entry->name;
HXDLIN( 862)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 862)								sb->flush();
            							}
HXDLIN( 862)							if (hx::IsNull( sb->b )) {
HXLINE( 862)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            							}
            							else {
HXLINE( 862)								::Array< ::String > sb4 = sb->b;
HXDLIN( 862)								sb4->push(::Std_obj::string(x3));
            							}
            						}
HXLINE( 863)						{
HXLINE( 863)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 863)								sb->flush();
            							}
HXDLIN( 863)							if (hx::IsNull( sb->b )) {
HXLINE( 863)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_32,1);
            							}
            							else {
HXLINE( 863)								sb->b->push(HX_(";\n",6f,33,00,00));
            							}
            						}
HXLINE( 865)						{
HXLINE( 865)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 865)								sb->flush();
            							}
HXDLIN( 865)							if (hx::IsNull( sb->b )) {
HXLINE( 865)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_33,1);
            							}
            							else {
HXLINE( 865)								sb->b->push(HX_("uniform ",6c,cc,54,02));
            							}
            						}
HXLINE( 866)						{
HXLINE( 866)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 866)								sb->flush();
            							}
HXDLIN( 866)							if (hx::IsNull( sb->b )) {
HXLINE( 866)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_34,1);
            							}
            							else {
HXLINE( 866)								sb->b->push(HX_("samplerCube ",63,87,00,86));
            							}
            						}
HXLINE( 867)						{
HXLINE( 867)							::String x4 = (entry->name + HX_("_alpha",9f,ee,7d,1d));
HXDLIN( 867)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 867)								sb->flush();
            							}
HXDLIN( 867)							if (hx::IsNull( sb->b )) {
HXLINE( 867)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            							}
            							else {
HXLINE( 867)								::Array< ::String > sb5 = sb->b;
HXDLIN( 867)								sb5->push(::Std_obj::string(x4));
            							}
            						}
HXLINE( 868)						{
HXLINE( 868)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 868)								sb->flush();
            							}
HXDLIN( 868)							if (hx::IsNull( sb->b )) {
HXLINE( 868)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_35,1);
            							}
            							else {
HXLINE( 868)								sb->b->push(HX_(";\n",6f,33,00,00));
            							}
            						}
HXLINE( 870)						{
HXLINE( 870)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 870)								sb->flush();
            							}
HXDLIN( 870)							if (hx::IsNull( sb->b )) {
HXLINE( 870)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_36,1);
            							}
            							else {
HXLINE( 870)								sb->b->push(HX_("uniform ",6c,cc,54,02));
            							}
            						}
HXLINE( 871)						{
HXLINE( 871)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 871)								sb->flush();
            							}
HXDLIN( 871)							if (hx::IsNull( sb->b )) {
HXLINE( 871)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_37,1);
            							}
            							else {
HXLINE( 871)								sb->b->push(HX_("bool ",b6,20,f8,b6));
            							}
            						}
HXLINE( 872)						{
HXLINE( 872)							::String x5 = (entry->name + HX_("_alphaEnabled",a2,df,12,f4));
HXDLIN( 872)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 872)								sb->flush();
            							}
HXDLIN( 872)							if (hx::IsNull( sb->b )) {
HXLINE( 872)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x5));
            							}
            							else {
HXLINE( 872)								::Array< ::String > sb6 = sb->b;
HXDLIN( 872)								sb6->push(::Std_obj::string(x5));
            							}
            						}
HXLINE( 873)						{
HXLINE( 873)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 873)								sb->flush();
            							}
HXDLIN( 873)							if (hx::IsNull( sb->b )) {
HXLINE( 873)								sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_38,1);
            							}
            							else {
HXLINE( 873)								sb->b->push(HX_(";\n",6f,33,00,00));
            							}
            						}
            					}
            					else {
HXLINE( 875)						if (hx::IsEq( entry->usage,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn() )) {
HXLINE( 877)							{
HXLINE( 877)								::String x6 = (entry->name + HX_("[128]",21,60,00,86));
HXDLIN( 877)								if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 877)									sb->flush();
            								}
HXDLIN( 877)								if (hx::IsNull( sb->b )) {
HXLINE( 877)									sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x6));
            								}
            								else {
HXLINE( 877)									::Array< ::String > sb7 = sb->b;
HXDLIN( 877)									sb7->push(::Std_obj::string(x6));
            								}
            							}
HXLINE( 878)							{
HXLINE( 878)								if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 878)									sb->flush();
            								}
HXDLIN( 878)								if (hx::IsNull( sb->b )) {
HXLINE( 878)									sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_39,1);
            								}
            								else {
HXLINE( 878)									sb->b->push(HX_(";\n",6f,33,00,00));
            								}
            							}
            						}
            						else {
HXLINE( 882)							{
HXLINE( 882)								::String x7 = entry->name;
HXDLIN( 882)								if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 882)									sb->flush();
            								}
HXDLIN( 882)								if (hx::IsNull( sb->b )) {
HXLINE( 882)									sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x7));
            								}
            								else {
HXLINE( 882)									::Array< ::String > sb8 = sb->b;
HXDLIN( 882)									sb8->push(::Std_obj::string(x7));
            								}
            							}
HXLINE( 883)							{
HXLINE( 883)								if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 883)									sb->flush();
            								}
HXDLIN( 883)								if (hx::IsNull( sb->b )) {
HXLINE( 883)									sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_8a1844be_40,1);
            								}
            								else {
HXLINE( 883)									sb->b->push(HX_(";\n",6f,33,00,00));
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 889)		return sb->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RegisterMap_obj,toGLSL,return )


hx::ObjectPtr< RegisterMap_obj > RegisterMap_obj::__new() {
	hx::ObjectPtr< RegisterMap_obj > __this = new RegisterMap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< RegisterMap_obj > RegisterMap_obj::__alloc(hx::Ctx *_hx_ctx) {
	RegisterMap_obj *__this = (RegisterMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RegisterMap_obj), true, "openfl._internal.formats.agal.RegisterMap"));
	*(void **)__this = RegisterMap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RegisterMap_obj::RegisterMap_obj()
{
}

void RegisterMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RegisterMap);
	HX_MARK_MEMBER_NAME(mEntries,"mEntries");
	HX_MARK_END_CLASS();
}

void RegisterMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mEntries,"mEntries");
}

hx::Val RegisterMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"addDR") ) { return hx::Val( addDR_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSR") ) { return hx::Val( addSR_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"addSaR") ) { return hx::Val( addSaR_dyn() ); }
		if (HX_FIELD_EQ(inName,"toGLSL") ) { return hx::Val( toGLSL_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mEntries") ) { return hx::Val( mEntries ); }
		if (HX_FIELD_EQ(inName,"getUsage") ) { return hx::Val( getUsage_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getRegisterUsage") ) { return hx::Val( getRegisterUsage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RegisterMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"mEntries") ) { mEntries=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RegisterMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mEntries","\x63","\xec","\x2a","\xa1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RegisterMap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(RegisterMap_obj,mEntries),HX_HCSTRING("mEntries","\x63","\xec","\x2a","\xa1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RegisterMap_obj_sStaticStorageInfo = 0;
#endif

static ::String RegisterMap_obj_sMemberFields[] = {
	HX_HCSTRING("mEntries","\x63","\xec","\x2a","\xa1"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addDR","\xef","\xb7","\x43","\x1c"),
	HX_HCSTRING("addSaR","\x63","\xa8","\x08","\x9f"),
	HX_HCSTRING("addSR","\x00","\xc5","\x43","\x1c"),
	HX_HCSTRING("getRegisterUsage","\x48","\xc9","\xb8","\x09"),
	HX_HCSTRING("getUsage","\xab","\x6c","\x06","\x0a"),
	HX_HCSTRING("toGLSL","\xf9","\x58","\x08","\x7a"),
	::String(null()) };

static void RegisterMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RegisterMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RegisterMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RegisterMap_obj::__mClass,"__mClass");
};

#endif

hx::Class RegisterMap_obj::__mClass;

void RegisterMap_obj::__register()
{
	hx::Object *dummy = new RegisterMap_obj;
	RegisterMap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.formats.agal.RegisterMap","\xbe","\x44","\x18","\x8a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RegisterMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RegisterMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RegisterMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RegisterMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegisterMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegisterMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace agal
