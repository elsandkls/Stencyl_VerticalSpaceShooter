// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_openfl__internal_formats_agal_AGALConverter
#include <openfl/_internal/formats/agal/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_ProgramType
#include <openfl/_internal/formats/agal/_AGALConverter/ProgramType.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_SourceRegister
#include <openfl/_internal/formats/agal/_AGALConverter/SourceRegister.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c312f67fa56a379a_1072_new,"openfl._internal.formats.agal._AGALConverter.SourceRegister","new",0xbda55cf3,"openfl._internal.formats.agal._AGALConverter.SourceRegister.new","openfl/_internal/formats/agal/AGALConverter.hx",1072,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_c312f67fa56a379a_1096_toGLSL,"openfl._internal.formats.agal._AGALConverter.SourceRegister","toGLSL",0x1060aa46,"openfl._internal.formats.agal._AGALConverter.SourceRegister.toGLSL","openfl/_internal/formats/agal/AGALConverter.hx",1096,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_c312f67fa56a379a_1079_parse,"openfl._internal.formats.agal._AGALConverter.SourceRegister","parse",0x9b91a786,"openfl._internal.formats.agal._AGALConverter.SourceRegister.parse","openfl/_internal/formats/agal/AGALConverter.hx",1079,0x323dd368)
namespace openfl{
namespace _internal{
namespace formats{
namespace agal{
namespace _AGALConverter{

void SourceRegister_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c312f67fa56a379a_1072_new)
            	}

Dynamic SourceRegister_obj::__CreateEmpty() { return new SourceRegister_obj; }

void *SourceRegister_obj::_hx_vtable = 0;

Dynamic SourceRegister_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SourceRegister_obj > _hx_result = new SourceRegister_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SourceRegister_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f87c9c3;
}

::String SourceRegister_obj::toGLSL(hx::Null< bool >  __o_emitSwizzle,hx::Null< int >  __o_offset){
bool emitSwizzle = __o_emitSwizzle.Default(true);
int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_c312f67fa56a379a_1096_toGLSL)
HXLINE(1098)		if ((this->type == (int)3)) {
HXLINE(1100)			if (hx::IsEq( this->programType,::openfl::_internal::formats::agal::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE(1100)				return HX_("gl_Position",63,0d,2a,e5);
            			}
            			else {
HXLINE(1100)				return HX_("gl_FragColor",d7,68,e4,21);
            			}
            		}
HXLINE(1104)		bool fullxyzw;
HXDLIN(1104)		if ((this->s == (int)228)) {
HXLINE(1104)			fullxyzw = (this->sourceMask == (int)15);
            		}
            		else {
HXLINE(1104)			fullxyzw = false;
            		}
HXLINE(1105)		::String swizzle = HX_("",00,00,00,00);
HXLINE(1107)		bool _hx_tmp;
HXDLIN(1107)		if ((this->type != (int)5)) {
HXLINE(1107)			_hx_tmp = !(fullxyzw);
            		}
            		else {
HXLINE(1107)			_hx_tmp = false;
            		}
HXDLIN(1107)		if (_hx_tmp) {
HXLINE(1109)			int _g = (int)0;
HXDLIN(1109)			while((_g < (int)4)){
HXLINE(1109)				_g = (_g + (int)1);
HXDLIN(1109)				int i = (_g - (int)1);
HXLINE(1112)				int _hx_tmp1 = this->sourceMask;
HXDLIN(1112)				if ((((int)_hx_tmp1 & (int)((int)(int)1 << (int)i)) != (int)0)) {
HXLINE(1114)					int _g1 = this->s;
HXDLIN(1114)					int _g11 = ((int)((int)_g1 >> (int)(i * (int)2)) & (int)(int)3);
HXDLIN(1114)					switch((int)(_g11)){
            						case (int)0: {
HXLINE(1116)							swizzle = (swizzle + HX_("x",78,00,00,00));
            						}
            						break;
            						case (int)1: {
HXLINE(1117)							swizzle = (swizzle + HX_("y",79,00,00,00));
            						}
            						break;
            						case (int)2: {
HXLINE(1118)							swizzle = (swizzle + HX_("z",7a,00,00,00));
            						}
            						break;
            						case (int)3: {
HXLINE(1119)							swizzle = (swizzle + HX_("w",77,00,00,00));
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE(1129)		::String str = ::openfl::_internal::formats::agal::AGALConverter_obj::prefixFromType(this->type,this->programType);
HXLINE(1131)		if ((this->d == (int)0)) {
HXLINE(1134)			str = (str + (this->n + offset));
            		}
            		else {
HXLINE(1139)			str = (str + this->o);
HXLINE(1140)			 ::Dynamic indexComponent = HX_("x",78,00,00,00).charCodeAt((int)0);
HXDLIN(1140)			::String indexComponent1 = ::String::fromCharCode((indexComponent + this->q));
HXLINE(1141)			::String indexRegister = ::openfl::_internal::formats::agal::AGALConverter_obj::prefixFromType(this->itype,this->programType);
HXDLIN(1141)			::String indexRegister1 = (((indexRegister + this->n) + HX_(".",2e,00,00,00)) + indexComponent1);
HXLINE(1142)			str = (str + ((((HX_("[ int(",3e,aa,07,15) + indexRegister1) + HX_(") +",74,38,1f,00)) + offset) + HX_("]",5d,00,00,00)));
            		}
HXLINE(1146)		bool _hx_tmp2;
HXDLIN(1146)		if (emitSwizzle) {
HXLINE(1146)			_hx_tmp2 = (swizzle != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1146)			_hx_tmp2 = false;
            		}
HXDLIN(1146)		if (_hx_tmp2) {
HXLINE(1148)			str = (str + (HX_(".",2e,00,00,00) + swizzle));
            		}
HXLINE(1152)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SourceRegister_obj,toGLSL,return )

 ::openfl::_internal::formats::agal::_AGALConverter::SourceRegister SourceRegister_obj::parse( cpp::Int64Struct v, ::openfl::_internal::formats::agal::_AGALConverter::ProgramType programType,int sourceMask){
            	HX_GC_STACKFRAME(&_hx_pos_c312f67fa56a379a_1079_parse)
HXLINE(1081)		 ::openfl::_internal::formats::agal::_AGALConverter::SourceRegister sr =  ::openfl::_internal::formats::agal::_AGALConverter::SourceRegister_obj::__alloc( HX_CTX );
HXLINE(1082)		sr->programType = programType;
HXLINE(1083)		 cpp::Int64Struct a = _hx_int64_shr(v,(int)63);
HXDLIN(1083)		sr->d = _hx_int64_low(_hx_int64_and(a,( ::cpp::Int64Struct((int)1))));
HXLINE(1084)		 cpp::Int64Struct a1 = _hx_int64_shr(v,(int)48);
HXDLIN(1084)		sr->q = _hx_int64_low(_hx_int64_and(a1,( ::cpp::Int64Struct((int)3))));
HXLINE(1085)		 cpp::Int64Struct a2 = _hx_int64_shr(v,(int)40);
HXDLIN(1085)		sr->itype = _hx_int64_low(_hx_int64_and(a2,( ::cpp::Int64Struct((int)15))));
HXLINE(1086)		 cpp::Int64Struct a3 = _hx_int64_shr(v,(int)32);
HXDLIN(1086)		sr->type = _hx_int64_low(_hx_int64_and(a3,( ::cpp::Int64Struct((int)15))));
HXLINE(1087)		 cpp::Int64Struct a4 = _hx_int64_shr(v,(int)24);
HXDLIN(1087)		sr->s = _hx_int64_low(_hx_int64_and(a4,( ::cpp::Int64Struct((int)255))));
HXLINE(1088)		 cpp::Int64Struct a5 = _hx_int64_shr(v,(int)16);
HXDLIN(1088)		sr->o = _hx_int64_low(_hx_int64_and(a5,( ::cpp::Int64Struct((int)255))));
HXLINE(1089)		sr->n = _hx_int64_low(_hx_int64_and(v,( ::cpp::Int64Struct((int)65535))));
HXLINE(1090)		sr->sourceMask = sourceMask;
HXLINE(1091)		return sr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SourceRegister_obj,parse,return )


hx::ObjectPtr< SourceRegister_obj > SourceRegister_obj::__new() {
	hx::ObjectPtr< SourceRegister_obj > __this = new SourceRegister_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SourceRegister_obj > SourceRegister_obj::__alloc(hx::Ctx *_hx_ctx) {
	SourceRegister_obj *__this = (SourceRegister_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SourceRegister_obj), true, "openfl._internal.formats.agal._AGALConverter.SourceRegister"));
	*(void **)__this = SourceRegister_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SourceRegister_obj::SourceRegister_obj()
{
}

void SourceRegister_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SourceRegister);
	HX_MARK_MEMBER_NAME(d,"d");
	HX_MARK_MEMBER_NAME(itype,"itype");
	HX_MARK_MEMBER_NAME(n,"n");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(programType,"programType");
	HX_MARK_MEMBER_NAME(q,"q");
	HX_MARK_MEMBER_NAME(s,"s");
	HX_MARK_MEMBER_NAME(sourceMask,"sourceMask");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void SourceRegister_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(d,"d");
	HX_VISIT_MEMBER_NAME(itype,"itype");
	HX_VISIT_MEMBER_NAME(n,"n");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(programType,"programType");
	HX_VISIT_MEMBER_NAME(q,"q");
	HX_VISIT_MEMBER_NAME(s,"s");
	HX_VISIT_MEMBER_NAME(sourceMask,"sourceMask");
	HX_VISIT_MEMBER_NAME(type,"type");
}

hx::Val SourceRegister_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"d") ) { return hx::Val( d ); }
		if (HX_FIELD_EQ(inName,"n") ) { return hx::Val( n ); }
		if (HX_FIELD_EQ(inName,"o") ) { return hx::Val( o ); }
		if (HX_FIELD_EQ(inName,"q") ) { return hx::Val( q ); }
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"itype") ) { return hx::Val( itype ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toGLSL") ) { return hx::Val( toGLSL_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceMask") ) { return hx::Val( sourceMask ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programType") ) { return hx::Val( programType ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SourceRegister_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
	}
	return false;
}

hx::Val SourceRegister_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"d") ) { d=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"n") ) { n=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"q") ) { q=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"itype") ) { itype=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sourceMask") ) { sourceMask=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programType") ) { programType=inValue.Cast<  ::openfl::_internal::formats::agal::_AGALConverter::ProgramType >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SourceRegister_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("d","\x64","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("itype","\xa3","\xdb","\x1b","\xc2"));
	outFields->push(HX_HCSTRING("n","\x6e","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("o","\x6f","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4"));
	outFields->push(HX_HCSTRING("q","\x71","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("s","\x73","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("sourceMask","\x67","\x27","\xba","\x70"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SourceRegister_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(SourceRegister_obj,d),HX_HCSTRING("d","\x64","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SourceRegister_obj,itype),HX_HCSTRING("itype","\xa3","\xdb","\x1b","\xc2")},
	{hx::fsInt,(int)offsetof(SourceRegister_obj,n),HX_HCSTRING("n","\x6e","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SourceRegister_obj,o),HX_HCSTRING("o","\x6f","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::_internal::formats::agal::_AGALConverter::ProgramType*/ ,(int)offsetof(SourceRegister_obj,programType),HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4")},
	{hx::fsInt,(int)offsetof(SourceRegister_obj,q),HX_HCSTRING("q","\x71","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SourceRegister_obj,s),HX_HCSTRING("s","\x73","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SourceRegister_obj,sourceMask),HX_HCSTRING("sourceMask","\x67","\x27","\xba","\x70")},
	{hx::fsInt,(int)offsetof(SourceRegister_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SourceRegister_obj_sStaticStorageInfo = 0;
#endif

static ::String SourceRegister_obj_sMemberFields[] = {
	HX_HCSTRING("d","\x64","\x00","\x00","\x00"),
	HX_HCSTRING("itype","\xa3","\xdb","\x1b","\xc2"),
	HX_HCSTRING("n","\x6e","\x00","\x00","\x00"),
	HX_HCSTRING("o","\x6f","\x00","\x00","\x00"),
	HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4"),
	HX_HCSTRING("q","\x71","\x00","\x00","\x00"),
	HX_HCSTRING("s","\x73","\x00","\x00","\x00"),
	HX_HCSTRING("sourceMask","\x67","\x27","\xba","\x70"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("toGLSL","\xf9","\x58","\x08","\x7a"),
	::String(null()) };

static void SourceRegister_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SourceRegister_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SourceRegister_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SourceRegister_obj::__mClass,"__mClass");
};

#endif

hx::Class SourceRegister_obj::__mClass;

static ::String SourceRegister_obj_sStaticFields[] = {
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	::String(null())
};

void SourceRegister_obj::__register()
{
	hx::Object *dummy = new SourceRegister_obj;
	SourceRegister_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.formats.agal._AGALConverter.SourceRegister","\x81","\x67","\xf9","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SourceRegister_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SourceRegister_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SourceRegister_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SourceRegister_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SourceRegister_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SourceRegister_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SourceRegister_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SourceRegister_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace agal
} // end namespace _AGALConverter
