// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTilemap
#include <openfl/_internal/renderer/cairo/CairoTilemap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_TileContainer
#include <openfl/display/TileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_display__Tileset_TileData
#include <openfl/display/_Tileset/TileData.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a3e299adbe0f9dae_39_render,"openfl._internal.renderer.cairo.CairoTilemap","render",0xc7ad047d,"openfl._internal.renderer.cairo.CairoTilemap.render","openfl/_internal/renderer/cairo/CairoTilemap.hx",39,0x8aa306f7)
HX_LOCAL_STACK_FRAME(_hx_pos_a3e299adbe0f9dae_63_renderTileContainer,"openfl._internal.renderer.cairo.CairoTilemap","renderTileContainer",0x6b4c3576,"openfl._internal.renderer.cairo.CairoTilemap.renderTileContainer","openfl/_internal/renderer/cairo/CairoTilemap.hx",63,0x8aa306f7)
namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoTilemap_obj::__construct() { }

Dynamic CairoTilemap_obj::__CreateEmpty() { return new CairoTilemap_obj; }

void *CairoTilemap_obj::_hx_vtable = 0;

Dynamic CairoTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoTilemap_obj > _hx_result = new CairoTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CairoTilemap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x039e5af7;
}

void CairoTilemap_obj::render( ::openfl::display::Tilemap tilemap, ::openfl::display::CairoRenderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_a3e299adbe0f9dae_39_render)
HXLINE(  41)		bool _hx_tmp;
HXDLIN(  41)		if (!(!(tilemap->_hx___renderable))) {
HXLINE(  41)			_hx_tmp = (tilemap->_hx___group->_hx___tiles->length == (int)0);
            		}
            		else {
HXLINE(  41)			_hx_tmp = true;
            		}
HXDLIN(  41)		if (_hx_tmp) {
HXLINE(  41)			return;
            		}
HXLINE(  43)		Float alpha = renderer->_hx___getAlpha(tilemap->_hx___worldAlpha);
HXLINE(  44)		if ((alpha <= (int)0)) {
HXLINE(  44)			return;
            		}
HXLINE(  46)		renderer->_hx___setBlendMode(tilemap->_hx___worldBlendMode);
HXLINE(  47)		renderer->_hx___pushMaskObject(tilemap,null());
HXLINE(  49)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  50)		rect->setTo((int)0,(int)0,tilemap->_hx___width,tilemap->_hx___height);
HXLINE(  51)		renderer->_hx___pushMaskRect(rect,tilemap->_hx___renderTransform);
HXLINE(  53)		 ::openfl::display::TileContainer tilemap1 = tilemap->_hx___group;
HXDLIN(  53)		 ::openfl::geom::Matrix tilemap2 = tilemap->_hx___renderTransform;
HXDLIN(  53)		 ::openfl::display::Tileset tilemap3 = tilemap->_hx___tileset;
HXDLIN(  53)		bool _hx_tmp1;
HXDLIN(  53)		if (renderer->_hx___allowSmoothing) {
HXLINE(  53)			_hx_tmp1 = tilemap->smoothing;
            		}
            		else {
HXLINE(  53)			_hx_tmp1 = false;
            		}
HXDLIN(  53)		bool tilemap4 = tilemap->tileAlphaEnabled;
HXDLIN(  53)		bool tilemap5 = tilemap->tileBlendModeEnabled;
HXDLIN(  53)		 ::Dynamic tilemap6 = tilemap->_hx___worldBlendMode;
HXDLIN(  53)		::openfl::_internal::renderer::cairo::CairoTilemap_obj::renderTileContainer(tilemap1,renderer,tilemap2,tilemap3,_hx_tmp1,tilemap4,alpha,tilemap5,tilemap6,null(),null(),null(),rect, ::lime::math::Matrix3_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
HXLINE(  55)		renderer->_hx___popMaskRect();
HXLINE(  56)		renderer->_hx___popMaskObject(tilemap,null());
HXLINE(  58)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoTilemap_obj,render,(void))

void CairoTilemap_obj::renderTileContainer( ::openfl::display::TileContainer group, ::openfl::display::CairoRenderer renderer, ::openfl::geom::Matrix parentTransform, ::openfl::display::Tileset defaultTileset,bool smooth,bool alphaEnabled,Float worldAlpha,bool blendModeEnabled, ::Dynamic defaultBlendMode, ::openfl::display::BitmapData cacheBitmapData, ::Dynamic surface, ::Dynamic pattern, ::openfl::geom::Rectangle rect, ::lime::math::Matrix3 matrix){
            	HX_STACKFRAME(&_hx_pos_a3e299adbe0f9dae_63_renderTileContainer)
HXLINE(  66)		 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXLINE(  67)		bool roundPixels = renderer->_hx___roundPixels;
HXLINE(  69)		 ::openfl::geom::Matrix tileTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(  71)		::Array< ::Dynamic> tiles = group->_hx___tiles;
HXLINE(  72)		int length = group->__length;
HXLINE(  74)		 ::Dynamic tile;
HXDLIN(  74)		 ::openfl::display::Tileset tileset;
HXDLIN(  74)		Float alpha;
HXDLIN(  74)		bool visible;
HXDLIN(  74)		 ::Dynamic blendMode = null();
HXDLIN(  74)		int id;
HXDLIN(  74)		 ::openfl::display::_Tileset::TileData tileData;
HXDLIN(  74)		 ::openfl::geom::Rectangle tileRect;
HXDLIN(  74)		 ::openfl::display::BitmapData bitmapData;
HXLINE(  76)		{
HXLINE(  76)			int _g = (int)0;
HXDLIN(  76)			while((_g < tiles->length)){
HXLINE(  76)				 ::openfl::display::Tile tile1 = tiles->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN(  76)				_g = (_g + (int)1);
HXLINE(  78)				Float _hx_tmp = -(tile1->get_originX());
HXDLIN(  78)				tileTransform->setTo((int)1,(int)0,(int)0,(int)1,_hx_tmp,-(tile1->get_originY()));
HXLINE(  79)				tileTransform->concat(tile1->get_matrix());
HXLINE(  80)				tileTransform->concat(parentTransform);
HXLINE(  82)				if (hx::IsNotNull( tile1->get_tileset() )) {
HXLINE(  82)					tileset = tile1->get_tileset();
            				}
            				else {
HXLINE(  82)					tileset = defaultTileset;
            				}
HXLINE(  84)				alpha = (tile1->get_alpha() * worldAlpha);
HXLINE(  85)				visible = tile1->get_visible();
HXLINE(  86)				bool _hx_tmp1;
HXDLIN(  86)				if (!(!(visible))) {
HXLINE(  86)					_hx_tmp1 = (alpha <= (int)0);
            				}
            				else {
HXLINE(  86)					_hx_tmp1 = true;
            				}
HXDLIN(  86)				if (_hx_tmp1) {
HXLINE(  86)					continue;
            				}
HXLINE(  88)				if (!(alphaEnabled)) {
HXLINE(  88)					alpha = (int)1;
            				}
HXLINE(  90)				if (blendModeEnabled) {
HXLINE(  92)					if (hx::IsNotNull( tile1->_hx___blendMode )) {
HXLINE(  92)						blendMode = tile1->_hx___blendMode;
            					}
            					else {
HXLINE(  92)						blendMode = defaultBlendMode;
            					}
            				}
HXLINE(  96)				if ((tile1->__length > (int)0)) {
HXLINE(  98)					::openfl::_internal::renderer::cairo::CairoTilemap_obj::renderTileContainer(( ( ::openfl::display::TileContainer)(tile1) ),renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,surface,pattern,rect,matrix);
            				}
            				else {
HXLINE( 102)					if (hx::IsNull( tileset )) {
HXLINE( 102)						continue;
            					}
HXLINE( 104)					id = tile1->get_id();
HXLINE( 106)					if ((id == (int)-1)) {
HXLINE( 108)						tileRect = tile1->_hx___rect;
HXLINE( 109)						bool _hx_tmp2;
HXDLIN( 109)						bool _hx_tmp3;
HXDLIN( 109)						if (hx::IsNotNull( tileRect )) {
HXLINE( 109)							_hx_tmp3 = (tileRect->width <= (int)0);
            						}
            						else {
HXLINE( 109)							_hx_tmp3 = true;
            						}
HXDLIN( 109)						if (!(_hx_tmp3)) {
HXLINE( 109)							_hx_tmp2 = (tileRect->height <= (int)0);
            						}
            						else {
HXLINE( 109)							_hx_tmp2 = true;
            						}
HXDLIN( 109)						if (_hx_tmp2) {
HXLINE( 109)							continue;
            						}
            					}
            					else {
HXLINE( 113)						tileData = tileset->_hx___data->__get(id).StaticCast<  ::openfl::display::_Tileset::TileData >();
HXLINE( 114)						if (hx::IsNull( tileData )) {
HXLINE( 114)							continue;
            						}
HXLINE( 116)						rect->setTo(tileData->x,tileData->y,tileData->width,tileData->height);
HXLINE( 117)						tileRect = rect;
            					}
HXLINE( 121)					bitmapData = tileset->_hx___bitmapData;
HXLINE( 122)					if (hx::IsNull( bitmapData )) {
HXLINE( 122)						continue;
            					}
HXLINE( 124)					if (hx::IsNotEq( bitmapData,cacheBitmapData )) {
HXLINE( 126)						surface = bitmapData->getSurface();
HXLINE( 127)						pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE( 128)						int _hx_tmp4;
HXDLIN( 128)						if (smooth) {
HXLINE( 128)							_hx_tmp4 = (int)1;
            						}
            						else {
HXLINE( 128)							_hx_tmp4 = (int)3;
            						}
HXDLIN( 128)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp4);
HXLINE( 130)						cairo->set_source(pattern);
HXLINE( 131)						cacheBitmapData = bitmapData;
            					}
HXLINE( 135)					if (blendModeEnabled) {
HXLINE( 137)						renderer->_hx___setBlendMode(blendMode);
            					}
HXLINE( 141)					renderer->applyMatrix(tileTransform,cairo);
HXLINE( 143)					matrix->tx = tileRect->x;
HXLINE( 144)					matrix->ty = tileRect->y;
HXLINE( 145)					::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(pattern,matrix);
HXLINE( 146)					cairo->set_source(pattern);
HXLINE( 148)					cairo->save();
HXLINE( 150)					cairo->newPath();
HXLINE( 151)					cairo->rectangle((int)0,(int)0,tileRect->width,tileRect->height);
HXLINE( 152)					cairo->clip();
HXLINE( 154)					if ((alpha == (int)1)) {
HXLINE( 156)						cairo->paint();
            					}
            					else {
HXLINE( 160)						cairo->paintWithAlpha(alpha);
            					}
HXLINE( 164)					cairo->restore();
            				}
            			}
            		}
HXLINE( 170)		::openfl::geom::Matrix_obj::_hx___pool->release(tileTransform);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC14(CairoTilemap_obj,renderTileContainer,(void))


CairoTilemap_obj::CairoTilemap_obj()
{
}

bool CairoTilemap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"renderTileContainer") ) { outValue = renderTileContainer_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoTilemap_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CairoTilemap_obj_sStaticStorageInfo = 0;
#endif

static void CairoTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoTilemap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoTilemap_obj::__mClass,"__mClass");
};

#endif

hx::Class CairoTilemap_obj::__mClass;

static ::String CairoTilemap_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderTileContainer","\xfd","\xba","\x73","\x84"),
	::String(null())
};

void CairoTilemap_obj::__register()
{
	hx::Object *dummy = new CairoTilemap_obj;
	CairoTilemap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.cairo.CairoTilemap","\x67","\xa8","\x88","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoTilemap_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CairoTilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoTilemap_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
