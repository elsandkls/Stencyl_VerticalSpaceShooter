// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_harfbuzz_HB
#include <lime/text/harfbuzz/HB.h>
#endif
#ifndef INCLUDED_lime_text_harfbuzz_HBFeature
#include <lime/text/harfbuzz/HBFeature.h>
#endif
#ifndef INCLUDED_lime_text_harfbuzz_HBGlyphInfo
#include <lime/text/harfbuzz/HBGlyphInfo.h>
#endif
#ifndef INCLUDED_lime_text_harfbuzz_HBGlyphPosition
#include <lime/text/harfbuzz/HBGlyphPosition.h>
#endif
#ifndef INCLUDED_lime_text_harfbuzz__HBBuffer_HBBuffer_Impl_
#include <lime/text/harfbuzz/_HBBuffer/HBBuffer_Impl_.h>
#endif
#ifndef INCLUDED_lime_text_harfbuzz__HBFTFont_HBFTFont_Impl_
#include <lime/text/harfbuzz/_HBFTFont/HBFTFont_Impl_.h>
#endif
#ifndef INCLUDED_lime_text_harfbuzz__HBLanguage_HBLanguage_Impl_
#include <lime/text/harfbuzz/_HBLanguage/HBLanguage_Impl_.h>
#endif
#ifndef INCLUDED_openfl__internal_text_GlyphPosition
#include <openfl/_internal/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayout
#include <openfl/_internal/text/TextLayout.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_76ab009fbf19bc61_28_new,"openfl._internal.text.TextLayout","new",0xc6d6c63a,"openfl._internal.text.TextLayout.new","openfl/_internal/text/TextLayout.hx",28,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_98___create,"openfl._internal.text.TextLayout","__create",0x1fb06602,"openfl._internal.text.TextLayout.__create","openfl/_internal/text/TextLayout.hx",98,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_112___position,"openfl._internal.text.TextLayout","__position",0x581ded2f,"openfl._internal.text.TextLayout.__position","openfl/_internal/text/TextLayout.hx",112,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_201_get_positions,"openfl._internal.text.TextLayout","get_positions",0xe8c451db,"openfl._internal.text.TextLayout.get_positions","openfl/_internal/text/TextLayout.hx",201,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_217_get_direction,"openfl._internal.text.TextLayout","get_direction",0x28b2c070,"openfl._internal.text.TextLayout.get_direction","openfl/_internal/text/TextLayout.hx",217,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_222_set_direction,"openfl._internal.text.TextLayout","set_direction",0x6db8a27c,"openfl._internal.text.TextLayout.set_direction","openfl/_internal/text/TextLayout.hx",222,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_234_set_font,"openfl._internal.text.TextLayout","set_font",0x6d4a06b2,"openfl._internal.text.TextLayout.set_font","openfl/_internal/text/TextLayout.hx",234,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_245_get_glyphs,"openfl._internal.text.TextLayout","get_glyphs",0x88cb4276,"openfl._internal.text.TextLayout.get_glyphs","openfl/_internal/text/TextLayout.hx",245,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_262_get_language,"openfl._internal.text.TextLayout","get_language",0x8c8bb347,"openfl._internal.text.TextLayout.get_language","openfl/_internal/text/TextLayout.hx",262,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_267_set_language,"openfl._internal.text.TextLayout","set_language",0xa184d6bb,"openfl._internal.text.TextLayout.set_language","openfl/_internal/text/TextLayout.hx",267,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_281_get_script,"openfl._internal.text.TextLayout","get_script",0x21d2973a,"openfl._internal.text.TextLayout.get_script","openfl/_internal/text/TextLayout.hx",281,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_286_set_script,"openfl._internal.text.TextLayout","set_script",0x255035ae,"openfl._internal.text.TextLayout.set_script","openfl/_internal/text/TextLayout.hx",286,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_298_set_size,"openfl._internal.text.TextLayout","set_size",0x75dd49a4,"openfl._internal.text.TextLayout.set_size","openfl/_internal/text/TextLayout.hx",298,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_309_set_text,"openfl._internal.text.TextLayout","set_text",0x76837590,"openfl._internal.text.TextLayout.set_text","openfl/_internal/text/TextLayout.hx",309,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_31_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",31,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_32_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",32,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_33_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",33,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_34_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",34,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_35_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",35,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_36_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",36,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_37_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",37,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_38_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",38,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_39_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",39,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_40_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",40,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_41_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",41,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_42_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",42,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_43_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",43,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_44_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",44,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_45_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",45,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_46_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",46,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_47_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",47,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_48_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",48,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_52_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",52,0x21621597)
HX_LOCAL_STACK_FRAME(_hx_pos_76ab009fbf19bc61_53_boot,"openfl._internal.text.TextLayout","boot",0x2d2fad18,"openfl._internal.text.TextLayout.boot","openfl/_internal/text/TextLayout.hx",53,0x21621597)
namespace openfl{
namespace _internal{
namespace text{

void TextLayout_obj::__construct(::String __o_text, ::lime::text::Font font,hx::Null< int >  __o_size,hx::Null< int >  __o_direction,::String __o_script,::String __o_language){
::String text = __o_text.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
int size = __o_size.Default(12);
int direction = __o_direction.Default(4);
::String script = __o_script.Default(HX_HCSTRING("Zyyy","\x7f","\x6e","\xd9","\x3b"));
::String language = __o_language.Default(HX_HCSTRING("en","\x69","\x58","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_28_new)
HXLINE(  63)		this->letterSpacing = ((Float)0);
HXLINE(  83)		this->set_text(text);
HXLINE(  84)		this->set_font(font);
HXLINE(  85)		this->set_size(size);
HXLINE(  86)		this->_hx___direction = direction;
HXLINE(  87)		this->_hx___script = script;
HXLINE(  88)		this->_hx___language = language;
HXLINE(  90)		this->positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  91)		this->_hx___dirty = true;
HXLINE(  93)		this->_hx___create(this->_hx___direction,this->_hx___script,this->_hx___language);
            	}

Dynamic TextLayout_obj::__CreateEmpty() { return new TextLayout_obj; }

void *TextLayout_obj::_hx_vtable = 0;

Dynamic TextLayout_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextLayout_obj > _hx_result = new TextLayout_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool TextLayout_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0bc62250;
}

void TextLayout_obj::_hx___create(int direction,::String script,::String language){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_98___create)
HXLINE( 100)		if ((language.length != (int)4)) {
HXLINE( 100)			return;
            		}
HXLINE( 103)		this->_hx___hbBuffer = ::lime::text::harfbuzz::_HBBuffer::HBBuffer_Impl__obj::_new();
HXLINE( 104)		{
HXLINE( 104)			 ::Dynamic this1 = this->_hx___hbBuffer;
HXDLIN( 104)			int value;
HXDLIN( 104)			switch((int)(direction)){
            				case (int)4: {
HXLINE( 104)					value = (int)4;
            				}
            				break;
            				case (int)5: {
HXLINE( 104)					value = (int)5;
            				}
            				break;
            				case (int)6: {
HXLINE( 104)					value = (int)6;
            				}
            				break;
            				case (int)7: {
HXLINE( 104)					value = (int)7;
            				}
            				break;
            				default:{
HXLINE( 104)					value = (int)0;
            				}
            			}
HXDLIN( 104)			::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_buffer_set_direction(hx::DynamicPtr(this1),value);
            		}
HXLINE( 105)		{
HXLINE( 105)			int value1 = (int)1517910393;
HXDLIN( 105)			::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_buffer_set_script(hx::DynamicPtr(this->_hx___hbBuffer),value1);
            		}
HXLINE( 106)		{
HXLINE( 106)			 ::Dynamic this2 = this->_hx___hbBuffer;
HXDLIN( 106)			 ::Dynamic value2 = ::lime::text::harfbuzz::_HBLanguage::HBLanguage_Impl__obj::_new(language);
HXDLIN( 106)			::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_buffer_set_language(hx::DynamicPtr(this2),hx::DynamicPtr(value2));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextLayout_obj,_hx___create,(void))

void TextLayout_obj::_hx___position(){
            	HX_GC_STACKFRAME(&_hx_pos_76ab009fbf19bc61_112___position)
HXLINE( 114)		this->positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 117)		bool _hx_tmp;
HXDLIN( 117)		bool _hx_tmp1;
HXDLIN( 117)		bool _hx_tmp2;
HXDLIN( 117)		if (hx::IsNotNull( this->text )) {
HXLINE( 117)			_hx_tmp2 = (this->text != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 117)			_hx_tmp2 = false;
            		}
HXDLIN( 117)		if (_hx_tmp2) {
HXLINE( 117)			_hx_tmp1 = hx::IsNotNull( this->font );
            		}
            		else {
HXLINE( 117)			_hx_tmp1 = false;
            		}
HXDLIN( 117)		if (_hx_tmp1) {
HXLINE( 117)			_hx_tmp = hx::IsNotNull( this->font->src );
            		}
            		else {
HXLINE( 117)			_hx_tmp = false;
            		}
HXDLIN( 117)		if (_hx_tmp) {
HXLINE( 119)			if (hx::IsNull( this->_hx___buffer )) {
HXLINE( 121)				this->_hx___buffer = ::haxe::io::Bytes_obj::alloc((this->text.length * (int)5));
            			}
HXLINE( 126)			if (hx::IsNotEq( this->_hx___font,this->font )) {
HXLINE( 128)				this->_hx___font = this->font;
HXLINE( 130)				this->font->_hx___setSize(this->size);
HXLINE( 131)				this->_hx___hbFont = ::lime::text::harfbuzz::_HBFTFont::HBFTFont_Impl__obj::_new(this->font);
HXLINE( 133)				if (this->autoHint) {
HXLINE( 135)					::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_ft_font_set_load_flags(hx::DynamicPtr(this->_hx___hbFont),(int)32);
            				}
            			}
            			else {
HXLINE( 141)				this->font->_hx___setSize(this->size);
            			}
HXLINE( 145)			if (hx::IsNull( this->_hx___hbBuffer )) {
HXLINE( 147)				this->_hx___hbBuffer = ::lime::text::harfbuzz::_HBBuffer::HBBuffer_Impl__obj::_new();
            			}
            			else {
HXLINE( 151)				::lime::text::harfbuzz::_HBBuffer::HBBuffer_Impl__obj::reset(this->_hx___hbBuffer);
            			}
HXLINE( 155)			{
HXLINE( 155)				 ::Dynamic this1 = this->_hx___hbBuffer;
HXDLIN( 155)				int value;
HXDLIN( 155)				switch((int)(this->get_direction())){
            					case (int)4: {
HXLINE( 155)						value = (int)4;
            					}
            					break;
            					case (int)5: {
HXLINE( 155)						value = (int)5;
            					}
            					break;
            					case (int)6: {
HXLINE( 155)						value = (int)6;
            					}
            					break;
            					case (int)7: {
HXLINE( 155)						value = (int)7;
            					}
            					break;
            					default:{
HXLINE( 155)						value = (int)0;
            					}
            				}
HXDLIN( 155)				::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_buffer_set_direction(hx::DynamicPtr(this1),value);
            			}
HXLINE( 156)			{
HXLINE( 156)				 ::Dynamic this2 = this->_hx___hbBuffer;
HXDLIN( 156)				::String this3 = this->get_script();
HXDLIN( 156)				int value1 = (int)1517910393;
HXDLIN( 156)				::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_buffer_set_script(hx::DynamicPtr(this2),value1);
            			}
HXLINE( 157)			{
HXLINE( 157)				 ::Dynamic this4 = this->_hx___hbBuffer;
HXDLIN( 157)				 ::Dynamic value2 = ::lime::text::harfbuzz::_HBLanguage::HBLanguage_Impl__obj::_new(this->get_language());
HXDLIN( 157)				::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_buffer_set_language(hx::DynamicPtr(this4),hx::DynamicPtr(value2));
            			}
HXLINE( 158)			{
HXLINE( 158)				int value3 = (int)2;
HXDLIN( 158)				::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_buffer_set_cluster_level(hx::DynamicPtr(this->_hx___hbBuffer),value3);
            			}
HXLINE( 159)			::lime::text::harfbuzz::_HBBuffer::HBBuffer_Impl__obj::addUTF8(this->_hx___hbBuffer,this->text,(int)0,(int)-1);
HXLINE( 161)			::lime::text::harfbuzz::HB_obj::shape(this->_hx___hbFont,this->_hx___hbBuffer,null());
HXLINE( 163)			::Array< ::Dynamic> _info = ::lime::text::harfbuzz::_HBBuffer::HBBuffer_Impl__obj::getGlyphInfo(this->_hx___hbBuffer);
HXLINE( 164)			::Array< ::Dynamic> _positions = ::lime::text::harfbuzz::_HBBuffer::HBBuffer_Impl__obj::getGlyphPositions(this->_hx___hbBuffer);
HXLINE( 166)			 ::lime::text::harfbuzz::HBGlyphInfo info;
HXDLIN( 166)			 ::lime::text::harfbuzz::HBGlyphPosition position;
HXLINE( 167)			int lastCluster = (int)-1;
HXLINE( 169)			{
HXLINE( 169)				int _g1 = (int)0;
HXDLIN( 169)				int _g = _info->length;
HXDLIN( 169)				while((_g1 < _g)){
HXLINE( 169)					_g1 = (_g1 + (int)1);
HXDLIN( 169)					int i = (_g1 - (int)1);
HXLINE( 171)					info = _info->__get(i).StaticCast<  ::lime::text::harfbuzz::HBGlyphInfo >();
HXLINE( 172)					position = _positions->__get(i).StaticCast<  ::lime::text::harfbuzz::HBGlyphPosition >();
HXLINE( 174)					{
HXLINE( 174)						int _g3 = (lastCluster + (int)1);
HXDLIN( 174)						int _g2 = info->cluster;
HXDLIN( 174)						while((_g3 < _g2)){
HXLINE( 174)							_g3 = (_g3 + (int)1);
HXDLIN( 174)							int j = (_g3 - (int)1);
HXLINE( 178)							::Array< ::Dynamic> _hx_tmp3 = this->get_positions();
HXDLIN( 178)							 ::lime::math::Vector2 _hx_tmp4 =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXDLIN( 178)							_hx_tmp3->push( ::openfl::_internal::text::GlyphPosition_obj::__alloc( HX_CTX ,(int)0,_hx_tmp4, ::lime::math::Vector2_obj::__alloc( HX_CTX ,(int)0,(int)0)));
            						}
            					}
HXLINE( 182)					::Array< ::Dynamic> _hx_tmp5 = this->get_positions();
HXDLIN( 182)					int info1 = info->codepoint;
HXDLIN( 182)					Float _hx_tmp6 = (((Float)position->xAdvance / (Float)(int)64) + this->letterSpacing);
HXDLIN( 182)					 ::lime::math::Vector2 _hx_tmp7 =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,_hx_tmp6,((Float)position->yAdvance / (Float)(int)64));
HXDLIN( 182)					Float _hx_tmp8 = ((Float)position->xOffset / (Float)(int)64);
HXDLIN( 182)					_hx_tmp5->push( ::openfl::_internal::text::GlyphPosition_obj::__alloc( HX_CTX ,info1,_hx_tmp7, ::lime::math::Vector2_obj::__alloc( HX_CTX ,_hx_tmp8,((Float)position->yOffset / (Float)(int)64))));
HXLINE( 183)					lastCluster = info->cluster;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,_hx___position,(void))

::Array< ::Dynamic> TextLayout_obj::get_positions(){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_201_get_positions)
HXLINE( 203)		if (this->_hx___dirty) {
HXLINE( 205)			this->_hx___dirty = false;
HXLINE( 206)			this->_hx___position();
            		}
HXLINE( 210)		return this->positions;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_positions,return )

int TextLayout_obj::get_direction(){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_217_get_direction)
HXDLIN( 217)		return this->_hx___direction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_direction,return )

int TextLayout_obj::set_direction(int value){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_222_set_direction)
HXLINE( 224)		if ((value == this->_hx___direction)) {
HXLINE( 224)			return value;
            		}
HXLINE( 226)		this->_hx___direction = value;
HXLINE( 227)		this->_hx___dirty = true;
HXLINE( 229)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_direction,return )

 ::lime::text::Font TextLayout_obj::set_font( ::lime::text::Font value){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_234_set_font)
HXLINE( 236)		if (hx::IsEq( value,this->font )) {
HXLINE( 236)			return value;
            		}
HXLINE( 238)		this->font = value;
HXLINE( 239)		this->_hx___dirty = true;
HXLINE( 240)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_font,return )

::Array< int > TextLayout_obj::get_glyphs(){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_245_get_glyphs)
HXLINE( 247)		::Array< int > glyphs = ::Array_obj< int >::__new(0);
HXLINE( 249)		{
HXLINE( 249)			int _g = (int)0;
HXDLIN( 249)			::Array< ::Dynamic> _g1 = this->get_positions();
HXDLIN( 249)			while((_g < _g1->length)){
HXLINE( 249)				 ::openfl::_internal::text::GlyphPosition position = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN( 249)				_g = (_g + (int)1);
HXLINE( 251)				glyphs->push(position->glyph);
            			}
            		}
HXLINE( 255)		return glyphs;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_glyphs,return )

::String TextLayout_obj::get_language(){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_262_get_language)
HXDLIN( 262)		return this->_hx___language;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_language,return )

::String TextLayout_obj::set_language(::String value){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_267_set_language)
HXLINE( 269)		if ((value == this->_hx___language)) {
HXLINE( 269)			return value;
            		}
HXLINE( 271)		this->_hx___language = value;
HXLINE( 272)		this->_hx___dirty = true;
HXLINE( 274)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_language,return )

::String TextLayout_obj::get_script(){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_281_get_script)
HXDLIN( 281)		return this->_hx___script;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_script,return )

::String TextLayout_obj::set_script(::String value){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_286_set_script)
HXLINE( 288)		if ((value == this->_hx___script)) {
HXLINE( 288)			return value;
            		}
HXLINE( 290)		this->_hx___script = value;
HXLINE( 291)		this->_hx___dirty = true;
HXLINE( 293)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_script,return )

int TextLayout_obj::set_size(int value){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_298_set_size)
HXLINE( 300)		if ((value == this->size)) {
HXLINE( 300)			return value;
            		}
HXLINE( 302)		this->size = value;
HXLINE( 303)		this->_hx___dirty = true;
HXLINE( 304)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_size,return )

::String TextLayout_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_309_set_text)
HXLINE( 311)		if ((value == this->text)) {
HXLINE( 311)			return value;
            		}
HXLINE( 313)		this->text = value;
HXLINE( 314)		this->_hx___dirty = true;
HXLINE( 315)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_text,return )

int TextLayout_obj::FT_LOAD_DEFAULT;

int TextLayout_obj::FT_LOAD_NO_SCALE;

int TextLayout_obj::FT_LOAD_NO_HINTING;

int TextLayout_obj::FT_LOAD_RENDER;

int TextLayout_obj::FT_LOAD_NO_BITMAP;

int TextLayout_obj::FT_LOAD_VERTICAL_LAYOUT;

int TextLayout_obj::FT_LOAD_FORCE_AUTOHINT;

int TextLayout_obj::FT_LOAD_CROP_BITMAP;

int TextLayout_obj::FT_LOAD_PEDANTIC;

int TextLayout_obj::FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH;

int TextLayout_obj::FT_LOAD_NO_RECURSE;

int TextLayout_obj::FT_LOAD_IGNORE_TRANSFORM;

int TextLayout_obj::FT_LOAD_MONOCHROME;

int TextLayout_obj::FT_LOAD_LINEAR_DESIGN;

int TextLayout_obj::FT_LOAD_NO_AUTOHINT;

int TextLayout_obj::FT_LOAD_COLOR;

int TextLayout_obj::FT_LOAD_COMPUTE_METRICS;

int TextLayout_obj::FT_LOAD_BITMAP_METRICS_ONLY;

int TextLayout_obj::FT_LOAD_TARGET_NORMAL;

int TextLayout_obj::FT_LOAD_TARGET_LIGHT;


hx::ObjectPtr< TextLayout_obj > TextLayout_obj::__new(::String __o_text, ::lime::text::Font font,hx::Null< int >  __o_size,hx::Null< int >  __o_direction,::String __o_script,::String __o_language) {
	hx::ObjectPtr< TextLayout_obj > __this = new TextLayout_obj();
	__this->__construct(__o_text,font,__o_size,__o_direction,__o_script,__o_language);
	return __this;
}

hx::ObjectPtr< TextLayout_obj > TextLayout_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_text, ::lime::text::Font font,hx::Null< int >  __o_size,hx::Null< int >  __o_direction,::String __o_script,::String __o_language) {
	TextLayout_obj *__this = (TextLayout_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextLayout_obj), true, "openfl._internal.text.TextLayout"));
	*(void **)__this = TextLayout_obj::_hx_vtable;
	__this->__construct(__o_text,font,__o_size,__o_direction,__o_script,__o_language);
	return __this;
}

TextLayout_obj::TextLayout_obj()
{
}

void TextLayout_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextLayout);
	HX_MARK_MEMBER_NAME(autoHint,"autoHint");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(glyphs,"glyphs");
	HX_MARK_MEMBER_NAME(letterSpacing,"letterSpacing");
	HX_MARK_MEMBER_NAME(positions,"positions");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___direction,"__direction");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___handle,"__handle");
	HX_MARK_MEMBER_NAME(_hx___language,"__language");
	HX_MARK_MEMBER_NAME(_hx___script,"__script");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_MEMBER_NAME(_hx___hbBuffer,"__hbBuffer");
	HX_MARK_MEMBER_NAME(_hx___hbFont,"__hbFont");
	HX_MARK_END_CLASS();
}

void TextLayout_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(autoHint,"autoHint");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(glyphs,"glyphs");
	HX_VISIT_MEMBER_NAME(letterSpacing,"letterSpacing");
	HX_VISIT_MEMBER_NAME(positions,"positions");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___direction,"__direction");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___handle,"__handle");
	HX_VISIT_MEMBER_NAME(_hx___language,"__language");
	HX_VISIT_MEMBER_NAME(_hx___script,"__script");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
	HX_VISIT_MEMBER_NAME(_hx___hbBuffer,"__hbBuffer");
	HX_VISIT_MEMBER_NAME(_hx___hbFont,"__hbFont");
}

hx::Val TextLayout_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"glyphs") ) { return hx::Val( inCallProp == hx::paccAlways ? get_glyphs() : glyphs ); }
		if (HX_FIELD_EQ(inName,"script") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_script() ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoHint") ) { return hx::Val( autoHint ); }
		if (HX_FIELD_EQ(inName,"language") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_language() ); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer ); }
		if (HX_FIELD_EQ(inName,"__handle") ) { return hx::Val( _hx___handle ); }
		if (HX_FIELD_EQ(inName,"__script") ) { return hx::Val( _hx___script ); }
		if (HX_FIELD_EQ(inName,"__hbFont") ) { return hx::Val( _hx___hbFont ); }
		if (HX_FIELD_EQ(inName,"__create") ) { return hx::Val( _hx___create_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_direction() ); }
		if (HX_FIELD_EQ(inName,"positions") ) { return hx::Val( inCallProp == hx::paccAlways ? get_positions() : positions ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__language") ) { return hx::Val( _hx___language ); }
		if (HX_FIELD_EQ(inName,"__hbBuffer") ) { return hx::Val( _hx___hbBuffer ); }
		if (HX_FIELD_EQ(inName,"__position") ) { return hx::Val( _hx___position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_glyphs") ) { return hx::Val( get_glyphs_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_script") ) { return hx::Val( get_script_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_script") ) { return hx::Val( set_script_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__direction") ) { return hx::Val( _hx___direction ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_language") ) { return hx::Val( get_language_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_language") ) { return hx::Val( set_language_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { return hx::Val( letterSpacing ); }
		if (HX_FIELD_EQ(inName,"get_positions") ) { return hx::Val( get_positions_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_direction") ) { return hx::Val( get_direction_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_direction") ) { return hx::Val( set_direction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextLayout_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_font(inValue.Cast<  ::lime::text::Font >()) );font=inValue.Cast<  ::lime::text::Font >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast< int >()) );size=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"glyphs") ) { glyphs=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"script") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_script(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::lime::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoHint") ) { autoHint=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"language") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_language(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__handle") ) { _hx___handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__script") ) { _hx___script=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hbFont") ) { _hx___hbFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_direction(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"positions") ) { positions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__language") ) { _hx___language=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hbBuffer") ) { _hx___hbBuffer=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__direction") ) { _hx___direction=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { letterSpacing=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextLayout_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("autoHint","\x96","\x2c","\x34","\x28"));
	outFields->push(HX_HCSTRING("direction","\x3f","\x62","\x40","\x10"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae"));
	outFields->push(HX_HCSTRING("language","\x58","\x80","\x11","\x7a"));
	outFields->push(HX_HCSTRING("letterSpacing","\x3d","\xb7","\x03","\xf5"));
	outFields->push(HX_HCSTRING("positions","\xaa","\xf3","\x51","\xd0"));
	outFields->push(HX_HCSTRING("script","\x0b","\x4e","\x60","\x47"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__direction","\x1f","\xab","\x6c","\x3e"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60"));
	outFields->push(HX_HCSTRING("__language","\x78","\xf3","\x49","\x1d"));
	outFields->push(HX_HCSTRING("__script","\x2b","\xb9","\x8f","\xef"));
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	outFields->push(HX_HCSTRING("__hbBuffer","\xba","\x76","\x17","\xd0"));
	outFields->push(HX_HCSTRING("__hbFont","\x09","\x55","\x2b","\xd9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextLayout_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(TextLayout_obj,autoHint),HX_HCSTRING("autoHint","\x96","\x2c","\x34","\x28")},
	{hx::fsObject /*::lime::text::Font*/ ,(int)offsetof(TextLayout_obj,font),HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(TextLayout_obj,glyphs),HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae")},
	{hx::fsFloat,(int)offsetof(TextLayout_obj,letterSpacing),HX_HCSTRING("letterSpacing","\x3d","\xb7","\x03","\xf5")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TextLayout_obj,positions),HX_HCSTRING("positions","\xaa","\xf3","\x51","\xd0")},
	{hx::fsInt,(int)offsetof(TextLayout_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsString,(int)offsetof(TextLayout_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(TextLayout_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsInt,(int)offsetof(TextLayout_obj,_hx___direction),HX_HCSTRING("__direction","\x1f","\xab","\x6c","\x3e")},
	{hx::fsBool,(int)offsetof(TextLayout_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextLayout_obj,_hx___handle),HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60")},
	{hx::fsString,(int)offsetof(TextLayout_obj,_hx___language),HX_HCSTRING("__language","\x78","\xf3","\x49","\x1d")},
	{hx::fsString,(int)offsetof(TextLayout_obj,_hx___script),HX_HCSTRING("__script","\x2b","\xb9","\x8f","\xef")},
	{hx::fsObject /*::lime::text::Font*/ ,(int)offsetof(TextLayout_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextLayout_obj,_hx___hbBuffer),HX_HCSTRING("__hbBuffer","\xba","\x76","\x17","\xd0")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextLayout_obj,_hx___hbFont),HX_HCSTRING("__hbFont","\x09","\x55","\x2b","\xd9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextLayout_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_DEFAULT,HX_HCSTRING("FT_LOAD_DEFAULT","\x19","\x9b","\xeb","\xf9")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_NO_SCALE,HX_HCSTRING("FT_LOAD_NO_SCALE","\x34","\x73","\x3f","\xe0")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_NO_HINTING,HX_HCSTRING("FT_LOAD_NO_HINTING","\xe5","\x44","\xa4","\x23")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_RENDER,HX_HCSTRING("FT_LOAD_RENDER","\xde","\x9f","\x6f","\x04")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_NO_BITMAP,HX_HCSTRING("FT_LOAD_NO_BITMAP","\xe5","\x7f","\x2b","\x0c")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_VERTICAL_LAYOUT,HX_HCSTRING("FT_LOAD_VERTICAL_LAYOUT","\x0b","\x61","\xb4","\xc0")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_FORCE_AUTOHINT,HX_HCSTRING("FT_LOAD_FORCE_AUTOHINT","\x32","\xdd","\xa6","\xd5")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_CROP_BITMAP,HX_HCSTRING("FT_LOAD_CROP_BITMAP","\x76","\xe0","\x51","\xd6")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_PEDANTIC,HX_HCSTRING("FT_LOAD_PEDANTIC","\xda","\x45","\x48","\x91")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH,HX_HCSTRING("FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","\xf2","\x95","\x1a","\xa3")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_NO_RECURSE,HX_HCSTRING("FT_LOAD_NO_RECURSE","\xa9","\x24","\x55","\xd5")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_IGNORE_TRANSFORM,HX_HCSTRING("FT_LOAD_IGNORE_TRANSFORM","\x27","\xcb","\x33","\xfb")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_MONOCHROME,HX_HCSTRING("FT_LOAD_MONOCHROME","\x65","\xf2","\x3c","\xde")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_LINEAR_DESIGN,HX_HCSTRING("FT_LOAD_LINEAR_DESIGN","\x10","\xcb","\x86","\x4f")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_NO_AUTOHINT,HX_HCSTRING("FT_LOAD_NO_AUTOHINT","\xec","\xbd","\x2e","\xf3")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_COLOR,HX_HCSTRING("FT_LOAD_COLOR","\xbb","\x89","\x4b","\xfc")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_COMPUTE_METRICS,HX_HCSTRING("FT_LOAD_COMPUTE_METRICS","\x73","\xc0","\xe5","\x75")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_BITMAP_METRICS_ONLY,HX_HCSTRING("FT_LOAD_BITMAP_METRICS_ONLY","\x50","\x64","\x81","\xa4")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_TARGET_NORMAL,HX_HCSTRING("FT_LOAD_TARGET_NORMAL","\x0d","\xa5","\xb5","\x72")},
	{hx::fsInt,(void *) &TextLayout_obj::FT_LOAD_TARGET_LIGHT,HX_HCSTRING("FT_LOAD_TARGET_LIGHT","\x90","\x20","\x0e","\xa2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextLayout_obj_sMemberFields[] = {
	HX_HCSTRING("autoHint","\x96","\x2c","\x34","\x28"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae"),
	HX_HCSTRING("letterSpacing","\x3d","\xb7","\x03","\xf5"),
	HX_HCSTRING("positions","\xaa","\xf3","\x51","\xd0"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__direction","\x1f","\xab","\x6c","\x3e"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60"),
	HX_HCSTRING("__language","\x78","\xf3","\x49","\x1d"),
	HX_HCSTRING("__script","\x2b","\xb9","\x8f","\xef"),
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("__hbBuffer","\xba","\x76","\x17","\xd0"),
	HX_HCSTRING("__hbFont","\x09","\x55","\x2b","\xd9"),
	HX_HCSTRING("__create","\x1c","\xd2","\x3e","\x24"),
	HX_HCSTRING("__position","\xc9","\x13","\x33","\x6e"),
	HX_HCSTRING("get_positions","\x81","\xc7","\xb5","\x91"),
	HX_HCSTRING("get_direction","\x16","\x36","\xa4","\xd1"),
	HX_HCSTRING("set_direction","\x22","\x18","\xaa","\x16"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("get_glyphs","\x10","\x69","\xe0","\x9e"),
	HX_HCSTRING("get_language","\x61","\x34","\x2b","\x2f"),
	HX_HCSTRING("set_language","\xd5","\x57","\x24","\x44"),
	HX_HCSTRING("get_script","\xd4","\xbd","\xe7","\x37"),
	HX_HCSTRING("set_script","\x48","\x5c","\x65","\x3b"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	::String(null()) };

static void TextLayout_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextLayout_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_DEFAULT,"FT_LOAD_DEFAULT");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_SCALE,"FT_LOAD_NO_SCALE");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_HINTING,"FT_LOAD_NO_HINTING");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_RENDER,"FT_LOAD_RENDER");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_BITMAP,"FT_LOAD_NO_BITMAP");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_VERTICAL_LAYOUT,"FT_LOAD_VERTICAL_LAYOUT");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_FORCE_AUTOHINT,"FT_LOAD_FORCE_AUTOHINT");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_CROP_BITMAP,"FT_LOAD_CROP_BITMAP");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_PEDANTIC,"FT_LOAD_PEDANTIC");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_RECURSE,"FT_LOAD_NO_RECURSE");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_IGNORE_TRANSFORM,"FT_LOAD_IGNORE_TRANSFORM");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_MONOCHROME,"FT_LOAD_MONOCHROME");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_LINEAR_DESIGN,"FT_LOAD_LINEAR_DESIGN");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_AUTOHINT,"FT_LOAD_NO_AUTOHINT");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_COLOR,"FT_LOAD_COLOR");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_COMPUTE_METRICS,"FT_LOAD_COMPUTE_METRICS");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_BITMAP_METRICS_ONLY,"FT_LOAD_BITMAP_METRICS_ONLY");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_TARGET_NORMAL,"FT_LOAD_TARGET_NORMAL");
	HX_MARK_MEMBER_NAME(TextLayout_obj::FT_LOAD_TARGET_LIGHT,"FT_LOAD_TARGET_LIGHT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextLayout_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextLayout_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_DEFAULT,"FT_LOAD_DEFAULT");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_SCALE,"FT_LOAD_NO_SCALE");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_HINTING,"FT_LOAD_NO_HINTING");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_RENDER,"FT_LOAD_RENDER");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_BITMAP,"FT_LOAD_NO_BITMAP");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_VERTICAL_LAYOUT,"FT_LOAD_VERTICAL_LAYOUT");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_FORCE_AUTOHINT,"FT_LOAD_FORCE_AUTOHINT");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_CROP_BITMAP,"FT_LOAD_CROP_BITMAP");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_PEDANTIC,"FT_LOAD_PEDANTIC");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_RECURSE,"FT_LOAD_NO_RECURSE");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_IGNORE_TRANSFORM,"FT_LOAD_IGNORE_TRANSFORM");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_MONOCHROME,"FT_LOAD_MONOCHROME");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_LINEAR_DESIGN,"FT_LOAD_LINEAR_DESIGN");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_NO_AUTOHINT,"FT_LOAD_NO_AUTOHINT");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_COLOR,"FT_LOAD_COLOR");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_COMPUTE_METRICS,"FT_LOAD_COMPUTE_METRICS");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_BITMAP_METRICS_ONLY,"FT_LOAD_BITMAP_METRICS_ONLY");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_TARGET_NORMAL,"FT_LOAD_TARGET_NORMAL");
	HX_VISIT_MEMBER_NAME(TextLayout_obj::FT_LOAD_TARGET_LIGHT,"FT_LOAD_TARGET_LIGHT");
};

#endif

hx::Class TextLayout_obj::__mClass;

static ::String TextLayout_obj_sStaticFields[] = {
	HX_HCSTRING("FT_LOAD_DEFAULT","\x19","\x9b","\xeb","\xf9"),
	HX_HCSTRING("FT_LOAD_NO_SCALE","\x34","\x73","\x3f","\xe0"),
	HX_HCSTRING("FT_LOAD_NO_HINTING","\xe5","\x44","\xa4","\x23"),
	HX_HCSTRING("FT_LOAD_RENDER","\xde","\x9f","\x6f","\x04"),
	HX_HCSTRING("FT_LOAD_NO_BITMAP","\xe5","\x7f","\x2b","\x0c"),
	HX_HCSTRING("FT_LOAD_VERTICAL_LAYOUT","\x0b","\x61","\xb4","\xc0"),
	HX_HCSTRING("FT_LOAD_FORCE_AUTOHINT","\x32","\xdd","\xa6","\xd5"),
	HX_HCSTRING("FT_LOAD_CROP_BITMAP","\x76","\xe0","\x51","\xd6"),
	HX_HCSTRING("FT_LOAD_PEDANTIC","\xda","\x45","\x48","\x91"),
	HX_HCSTRING("FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","\xf2","\x95","\x1a","\xa3"),
	HX_HCSTRING("FT_LOAD_NO_RECURSE","\xa9","\x24","\x55","\xd5"),
	HX_HCSTRING("FT_LOAD_IGNORE_TRANSFORM","\x27","\xcb","\x33","\xfb"),
	HX_HCSTRING("FT_LOAD_MONOCHROME","\x65","\xf2","\x3c","\xde"),
	HX_HCSTRING("FT_LOAD_LINEAR_DESIGN","\x10","\xcb","\x86","\x4f"),
	HX_HCSTRING("FT_LOAD_NO_AUTOHINT","\xec","\xbd","\x2e","\xf3"),
	HX_HCSTRING("FT_LOAD_COLOR","\xbb","\x89","\x4b","\xfc"),
	HX_HCSTRING("FT_LOAD_COMPUTE_METRICS","\x73","\xc0","\xe5","\x75"),
	HX_HCSTRING("FT_LOAD_BITMAP_METRICS_ONLY","\x50","\x64","\x81","\xa4"),
	HX_HCSTRING("FT_LOAD_TARGET_NORMAL","\x0d","\xa5","\xb5","\x72"),
	HX_HCSTRING("FT_LOAD_TARGET_LIGHT","\x90","\x20","\x0e","\xa2"),
	::String(null())
};

void TextLayout_obj::__register()
{
	hx::Object *dummy = new TextLayout_obj;
	TextLayout_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.text.TextLayout","\x48","\xe1","\xbc","\xfc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextLayout_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextLayout_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextLayout_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextLayout_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextLayout_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextLayout_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextLayout_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_31_boot)
HXDLIN(  31)		FT_LOAD_DEFAULT = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_32_boot)
HXDLIN(  32)		FT_LOAD_NO_SCALE = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_33_boot)
HXDLIN(  33)		FT_LOAD_NO_HINTING = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_34_boot)
HXDLIN(  34)		FT_LOAD_RENDER = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_35_boot)
HXDLIN(  35)		FT_LOAD_NO_BITMAP = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_36_boot)
HXDLIN(  36)		FT_LOAD_VERTICAL_LAYOUT = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_37_boot)
HXDLIN(  37)		FT_LOAD_FORCE_AUTOHINT = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_38_boot)
HXDLIN(  38)		FT_LOAD_CROP_BITMAP = (int)64;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_39_boot)
HXDLIN(  39)		FT_LOAD_PEDANTIC = (int)128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_40_boot)
HXDLIN(  40)		FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH = (int)256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_41_boot)
HXDLIN(  41)		FT_LOAD_NO_RECURSE = (int)512;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_42_boot)
HXDLIN(  42)		FT_LOAD_IGNORE_TRANSFORM = (int)1024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_43_boot)
HXDLIN(  43)		FT_LOAD_MONOCHROME = (int)2048;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_44_boot)
HXDLIN(  44)		FT_LOAD_LINEAR_DESIGN = (int)4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_45_boot)
HXDLIN(  45)		FT_LOAD_NO_AUTOHINT = (int)8192;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_46_boot)
HXDLIN(  46)		FT_LOAD_COLOR = (int)16384;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_47_boot)
HXDLIN(  47)		FT_LOAD_COMPUTE_METRICS = (int)32768;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_48_boot)
HXDLIN(  48)		FT_LOAD_BITMAP_METRICS_ONLY = (int)65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_52_boot)
HXDLIN(  52)		FT_LOAD_TARGET_NORMAL = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_76ab009fbf19bc61_53_boot)
HXDLIN(  53)		FT_LOAD_TARGET_LIGHT = (int)0;
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
