// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal_AGALConverter
#include <openfl/_internal/formats/agal/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal_RegisterMap
#include <openfl/_internal/formats/agal/RegisterMap.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_DestRegister
#include <openfl/_internal/formats/agal/_AGALConverter/DestRegister.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_ProgramType
#include <openfl/_internal/formats/agal/_AGALConverter/ProgramType.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_RegisterUsage
#include <openfl/_internal/formats/agal/_AGALConverter/RegisterUsage.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_SamplerRegister
#include <openfl/_internal/formats/agal/_AGALConverter/SamplerRegister.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal__AGALConverter_SourceRegister
#include <openfl/_internal/formats/agal/_AGALConverter/SourceRegister.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_SamplerState
#include <openfl/_internal/renderer/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4b5e91963b3f9a19_31_prefixFromType,"openfl._internal.formats.agal.AGALConverter","prefixFromType",0xdd63d470,"openfl._internal.formats.agal.AGALConverter.prefixFromType","openfl/_internal/formats/agal/AGALConverter.hx",31,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_4b5e91963b3f9a19_46_readUInt64,"openfl._internal.formats.agal.AGALConverter","readUInt64",0x5b7cf7a8,"openfl._internal.formats.agal.AGALConverter.readUInt64","openfl/_internal/formats/agal/AGALConverter.hx",46,0x323dd368)
HX_LOCAL_STACK_FRAME(_hx_pos_4b5e91963b3f9a19_55_convertToGLSL,"openfl._internal.formats.agal.AGALConverter","convertToGLSL",0x9d5e3512,"openfl._internal.formats.agal.AGALConverter.convertToGLSL","openfl/_internal/formats/agal/AGALConverter.hx",55,0x323dd368)
static const ::String _hx_array_data_75e363b4_4[] = {
	HX_("\t",09,00,00,00),
};
static const ::String _hx_array_data_75e363b4_5[] = {
	HX_("\t} else {\n",6a,88,3f,f9),
};
static const ::String _hx_array_data_75e363b4_6[] = {
	HX_("\t}",54,08,00,00),
};
static const ::String _hx_array_data_75e363b4_7[] = {
	HX_("\t} else {\n",6a,88,3f,f9),
};
static const ::String _hx_array_data_75e363b4_8[] = {
	HX_("\t}",54,08,00,00),
};
static const ::String _hx_array_data_75e363b4_9[] = {
	HX_("\n",0a,00,00,00),
};
static const ::String _hx_array_data_75e363b4_10[] = {
	HX_("#version 100\n",24,25,05,19),
};
static const ::String _hx_array_data_75e363b4_11[] = {
	HX_("precision highp float;\n",57,4a,f7,14),
};
static const ::String _hx_array_data_75e363b4_12[] = {
	HX_("#version 120\n",a6,a9,06,19),
};
static const ::String _hx_array_data_75e363b4_13[] = {
	HX_("uniform vec4 vcPositionScale;\n",cf,aa,4f,18),
};
static const ::String _hx_array_data_75e363b4_14[] = {
	HX_("void main() {\n",49,b0,bf,fb),
};
static const ::String _hx_array_data_75e363b4_15[] = {
	HX_("\tgl_Position *= vcPositionScale;\n",7c,ad,85,8d),
};
static const ::String _hx_array_data_75e363b4_16[] = {
	HX_("}\n",ed,6c,00,00),
};
namespace openfl{
namespace _internal{
namespace formats{
namespace agal{

void AGALConverter_obj::__construct() { }

Dynamic AGALConverter_obj::__CreateEmpty() { return new AGALConverter_obj; }

void *AGALConverter_obj::_hx_vtable = 0;

Dynamic AGALConverter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AGALConverter_obj > _hx_result = new AGALConverter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AGALConverter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d7aa946;
}

 ::Dynamic AGALConverter_obj::limitedProfile;

::String AGALConverter_obj::prefixFromType(int regType, ::openfl::_internal::formats::agal::_AGALConverter::ProgramType programType){
            	HX_GC_STACKFRAME(&_hx_pos_4b5e91963b3f9a19_31_prefixFromType)
HXDLIN(  31)		switch((int)(regType)){
            			case (int)0: {
HXLINE(  33)				return HX_("va",2b,67,00,00);
            			}
            			break;
            			case (int)1: {
HXLINE(  34)				if (hx::IsEq( programType,::openfl::_internal::formats::agal::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE(  34)					return HX_("vc",2d,67,00,00);
            				}
            				else {
HXLINE(  34)					return HX_("fc",3d,59,00,00);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(  35)				if (hx::IsEq( programType,::openfl::_internal::formats::agal::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE(  35)					return HX_("vt",3e,67,00,00);
            				}
            				else {
HXLINE(  35)					return HX_("ft",4e,59,00,00);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE(  36)				return HX_("output_",3e,12,6c,e4);
            			}
            			break;
            			case (int)4: {
HXLINE(  37)				return HX_("v",76,00,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE(  38)				return HX_("sampler",08,c5,c9,83);
            			}
            			break;
            			default:{
HXLINE(  39)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Invalid data!",ae,d8,c0,b8)));
            			}
            		}
HXLINE(  31)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AGALConverter_obj,prefixFromType,return )

 cpp::Int64Struct AGALConverter_obj::readUInt64( ::openfl::utils::ByteArrayData byteArray){
            	HX_STACKFRAME(&_hx_pos_4b5e91963b3f9a19_46_readUInt64)
HXLINE(  48)		int low = byteArray->readInt();
HXLINE(  49)		int high = byteArray->readInt();
HXLINE(  50)		return _hx_int64_make(high,low);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AGALConverter_obj,readUInt64,return )

::String AGALConverter_obj::convertToGLSL( ::openfl::utils::ByteArrayData agal,::Array< ::Dynamic> samplerState){
            	HX_GC_STACKFRAME(&_hx_pos_4b5e91963b3f9a19_55_convertToGLSL)
HXLINE(  57)		agal->position = (int)0;
HXLINE(  58)		agal->_hx___endian = (int)1;
HXLINE(  60)		int magic = ((int)agal->readByte() & (int)(int)255);
HXLINE(  62)		if ((magic == (int)176)) {
HXLINE(  65)			return agal->readUTF();
            		}
HXLINE(  69)		if ((magic != (int)160)) {
HXLINE(  71)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Magic value must be 0xA0, may not be AGAL",33,cd,d9,2e)));
            		}
HXLINE(  75)		int version = agal->readInt();
HXLINE(  77)		if ((version != (int)1)) {
HXLINE(  79)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Version must be 1",e3,ba,ef,98)));
            		}
HXLINE(  83)		int shaderTypeID = ((int)agal->readByte() & (int)(int)255);
HXLINE(  85)		if ((shaderTypeID != (int)161)) {
HXLINE(  87)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Shader type ID must be 0xA1",38,36,8f,05)));
            		}
HXLINE(  91)		 ::openfl::_internal::formats::agal::_AGALConverter::ProgramType programType;
HXDLIN(  91)		if ((((int)agal->readByte() & (int)(int)255) == (int)0)) {
HXLINE(  91)			programType = ::openfl::_internal::formats::agal::_AGALConverter::ProgramType_obj::VERTEX_dyn();
            		}
            		else {
HXLINE(  91)			programType = ::openfl::_internal::formats::agal::_AGALConverter::ProgramType_obj::FRAGMENT_dyn();
            		}
HXLINE(  93)		 ::openfl::_internal::formats::agal::RegisterMap map =  ::openfl::_internal::formats::agal::RegisterMap_obj::__alloc( HX_CTX );
HXLINE(  94)		 ::StringBuf sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  96)		while(true){
HXLINE(  96)			int agal1 = agal->position;
HXDLIN(  96)			if (!((agal1 < ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(agal)))) {
HXLINE(  96)				goto _hx_goto_2;
            			}
HXLINE(  99)			int opcode = agal->readInt();
HXLINE( 100)			int dest = agal->readUnsignedInt();
HXLINE( 101)			 cpp::Int64Struct source1 = ::openfl::_internal::formats::agal::AGALConverter_obj::readUInt64(agal);
HXLINE( 102)			 cpp::Int64Struct source2 = ::openfl::_internal::formats::agal::AGALConverter_obj::readUInt64(agal);
HXLINE( 105)			 ::openfl::_internal::formats::agal::_AGALConverter::DestRegister dr = ::openfl::_internal::formats::agal::_AGALConverter::DestRegister_obj::parse(dest,programType);
HXLINE( 106)			 ::openfl::_internal::formats::agal::_AGALConverter::SourceRegister sr1 = ::openfl::_internal::formats::agal::_AGALConverter::SourceRegister_obj::parse(source1,programType,dr->mask);
HXLINE( 107)			 ::openfl::_internal::formats::agal::_AGALConverter::SourceRegister sr2 = ::openfl::_internal::formats::agal::_AGALConverter::SourceRegister_obj::parse(source2,programType,dr->mask);
HXLINE( 110)			{
HXLINE( 110)				if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 110)					sb->flush();
            				}
HXDLIN( 110)				if (hx::IsNull( sb->b )) {
HXLINE( 110)					sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_4,1);
            				}
            				else {
HXLINE( 110)					sb->b->push(HX_("\t",09,00,00,00));
            				}
            			}
HXLINE( 112)			switch((int)(opcode)){
            				case (int)0: {
HXLINE( 116)					{
HXLINE( 116)						::String x = (dr->toGLSL(null()) + HX_(" = ",63,7d,18,00));
HXDLIN( 116)						::String x1 = ((x + sr1->toGLSL(null(),null())) + HX_("; // mov",19,49,64,51));
HXDLIN( 116)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 116)							sb->flush();
            						}
HXDLIN( 116)						if (hx::IsNull( sb->b )) {
HXLINE( 116)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            						}
            						else {
HXLINE( 116)							::Array< ::String > sb1 = sb->b;
HXDLIN( 116)							sb1->push(::Std_obj::string(x1));
            						}
            					}
HXLINE( 117)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 118)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)1: {
HXLINE( 122)					{
HXLINE( 122)						::String x2 = (dr->toGLSL(null()) + HX_(" = ",63,7d,18,00));
HXDLIN( 122)						::String x3 = ((x2 + sr1->toGLSL(null(),null())) + HX_(" + ",b5,6d,18,00));
HXDLIN( 122)						::String x4 = ((x3 + sr2->toGLSL(null(),null())) + HX_("; // add",66,24,5b,51));
HXDLIN( 122)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 122)							sb->flush();
            						}
HXDLIN( 122)						if (hx::IsNull( sb->b )) {
HXLINE( 122)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            						}
            						else {
HXLINE( 122)							::Array< ::String > sb2 = sb->b;
HXDLIN( 122)							sb2->push(::Std_obj::string(x4));
            						}
            					}
HXLINE( 123)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 124)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 125)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)2: {
HXLINE( 129)					{
HXLINE( 129)						::String x5 = (dr->toGLSL(null()) + HX_(" = ",63,7d,18,00));
HXDLIN( 129)						::String x6 = ((x5 + sr1->toGLSL(null(),null())) + HX_(" - ",73,6f,18,00));
HXDLIN( 129)						::String x7 = ((x6 + sr2->toGLSL(null(),null())) + HX_("; // sub",c5,db,68,51));
HXDLIN( 129)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 129)							sb->flush();
            						}
HXDLIN( 129)						if (hx::IsNull( sb->b )) {
HXLINE( 129)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x7));
            						}
            						else {
HXLINE( 129)							::Array< ::String > sb3 = sb->b;
HXDLIN( 129)							sb3->push(::Std_obj::string(x7));
            						}
            					}
HXLINE( 130)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 131)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 132)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)3: {
HXLINE( 136)					{
HXLINE( 136)						::String x8 = (dr->toGLSL(null()) + HX_(" = ",63,7d,18,00));
HXDLIN( 136)						::String x9 = ((x8 + sr1->toGLSL(null(),null())) + HX_(" * ",d6,6c,18,00));
HXDLIN( 136)						::String x10 = ((x9 + sr2->toGLSL(null(),null())) + HX_("; // mul",49,4e,64,51));
HXDLIN( 136)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 136)							sb->flush();
            						}
HXDLIN( 136)						if (hx::IsNull( sb->b )) {
HXLINE( 136)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x10));
            						}
            						else {
HXLINE( 136)							::Array< ::String > sb4 = sb->b;
HXDLIN( 136)							sb4->push(::Std_obj::string(x10));
            						}
            					}
HXLINE( 137)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 138)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 139)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)4: {
HXLINE( 143)					{
HXLINE( 143)						::String x11 = (dr->toGLSL(null()) + HX_(" = ",63,7d,18,00));
HXDLIN( 143)						::String x12 = ((x11 + sr1->toGLSL(null(),null())) + HX_(" / ",31,71,18,00));
HXDLIN( 143)						::String x13 = ((x12 + sr2->toGLSL(null(),null())) + HX_("; // div",96,6f,5d,51));
HXDLIN( 143)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 143)							sb->flush();
            						}
HXDLIN( 143)						if (hx::IsNull( sb->b )) {
HXLINE( 143)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x13));
            						}
            						else {
HXLINE( 143)							::Array< ::String > sb5 = sb->b;
HXDLIN( 143)							sb5->push(::Std_obj::string(x13));
            						}
            					}
HXLINE( 144)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 145)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 146)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)5: {
HXLINE( 150)					::String sr = sr1->toGLSL(null(),null());
HXLINE( 152)					if ((sr.indexOf(HX_(".",2e,00,00,00),null()) > (int)-1)) {
HXLINE( 154)						::String x14 = (dr->toGLSL(null()) + HX_(" = 1.0 / ",01,36,9f,65));
HXDLIN( 154)						::String x15 = ((x14 + sr1->toGLSL(null(),null())) + HX_("; // rcp",e4,09,68,51));
HXDLIN( 154)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 154)							sb->flush();
            						}
HXDLIN( 154)						if (hx::IsNull( sb->b )) {
HXLINE( 154)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x15));
            						}
            						else {
HXLINE( 154)							::Array< ::String > sb6 = sb->b;
HXDLIN( 154)							sb6->push(::Std_obj::string(x15));
            						}
            					}
            					else {
HXLINE( 158)						::String x16 = (dr->toGLSL(null()) + HX_(" = vec4(1) / ",b4,32,05,3b));
HXDLIN( 158)						::String x17 = ((x16 + sr1->toGLSL(null(),null())) + HX_("; // rcp",e4,09,68,51));
HXDLIN( 158)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 158)							sb->flush();
            						}
HXDLIN( 158)						if (hx::IsNull( sb->b )) {
HXLINE( 158)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x17));
            						}
            						else {
HXLINE( 158)							::Array< ::String > sb7 = sb->b;
HXDLIN( 158)							sb7->push(::Std_obj::string(x17));
            						}
            					}
HXLINE( 162)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 163)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)6: {
HXLINE( 167)					{
HXLINE( 167)						::String x18 = (dr->toGLSL(null()) + HX_(" = min(",39,b9,a2,4b));
HXDLIN( 167)						::String x19 = ((x18 + sr1->toGLSL(null(),null())) + HX_(", ",74,26,00,00));
HXDLIN( 167)						::String x20 = ((x19 + sr2->toGLSL(null(),null())) + HX_("); // min",00,15,0e,1a));
HXDLIN( 167)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 167)							sb->flush();
            						}
HXDLIN( 167)						if (hx::IsNull( sb->b )) {
HXLINE( 167)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x20));
            						}
            						else {
HXLINE( 167)							::Array< ::String > sb8 = sb->b;
HXDLIN( 167)							sb8->push(::Std_obj::string(x20));
            						}
            					}
HXLINE( 168)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 169)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 170)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)7: {
HXLINE( 174)					{
HXLINE( 174)						::String x21 = (dr->toGLSL(null()) + HX_(" = max(",e7,af,9c,4b));
HXDLIN( 174)						::String x22 = ((x21 + sr1->toGLSL(null(),null())) + HX_(", ",74,26,00,00));
HXDLIN( 174)						::String x23 = ((x22 + sr2->toGLSL(null(),null())) + HX_("); // max",12,0e,0e,1a));
HXDLIN( 174)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 174)							sb->flush();
            						}
HXDLIN( 174)						if (hx::IsNull( sb->b )) {
HXLINE( 174)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x23));
            						}
            						else {
HXLINE( 174)							::Array< ::String > sb9 = sb->b;
HXDLIN( 174)							sb9->push(::Std_obj::string(x23));
            						}
            					}
HXLINE( 175)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 176)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 177)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)8: {
HXLINE( 181)					{
HXLINE( 181)						::String x24 = (dr->toGLSL(null()) + HX_(" = fract(",85,4f,5f,de));
HXDLIN( 181)						::String x25 = ((x24 + sr1->toGLSL(null(),null())) + HX_("); // frc",05,cd,08,1a));
HXDLIN( 181)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 181)							sb->flush();
            						}
HXDLIN( 181)						if (hx::IsNull( sb->b )) {
HXLINE( 181)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x25));
            						}
            						else {
HXLINE( 181)							::Array< ::String > sb10 = sb->b;
HXDLIN( 181)							sb10->push(::Std_obj::string(x25));
            						}
            					}
HXLINE( 182)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 183)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)9: {
HXLINE( 187)					{
HXLINE( 187)						::String x26 = (dr->toGLSL(null()) + HX_(" = sqrt(",05,d4,73,5c));
HXDLIN( 187)						::String x27 = ((x26 + sr1->toGLSL(null(),null())) + HX_("); // sqrt",b2,a8,41,b6));
HXDLIN( 187)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 187)							sb->flush();
            						}
HXDLIN( 187)						if (hx::IsNull( sb->b )) {
HXLINE( 187)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x27));
            						}
            						else {
HXLINE( 187)							::Array< ::String > sb11 = sb->b;
HXDLIN( 187)							sb11->push(::Std_obj::string(x27));
            						}
            					}
HXLINE( 188)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 189)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)10: {
HXLINE( 193)					{
HXLINE( 193)						::String x28 = (dr->toGLSL(null()) + HX_(" = inversesqrt(",7b,94,3b,f8));
HXDLIN( 193)						::String x29 = ((x28 + sr1->toGLSL(null(),null())) + HX_("); // rsq",fe,e8,11,1a));
HXDLIN( 193)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 193)							sb->flush();
            						}
HXDLIN( 193)						if (hx::IsNull( sb->b )) {
HXLINE( 193)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x29));
            						}
            						else {
HXLINE( 193)							::Array< ::String > sb12 = sb->b;
HXDLIN( 193)							sb12->push(::Std_obj::string(x29));
            						}
            					}
HXLINE( 194)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 195)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)11: {
HXLINE( 199)					{
HXLINE( 199)						::String x30 = (dr->toGLSL(null()) + HX_(" = pow(",73,f2,a2,4d));
HXDLIN( 199)						::String x31 = ((x30 + sr1->toGLSL(null(),null())) + HX_(", ",74,26,00,00));
HXDLIN( 199)						::String x32 = ((x31 + sr2->toGLSL(null(),null())) + HX_("); // pow",06,61,10,1a));
HXDLIN( 199)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 199)							sb->flush();
            						}
HXDLIN( 199)						if (hx::IsNull( sb->b )) {
HXLINE( 199)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x32));
            						}
            						else {
HXLINE( 199)							::Array< ::String > sb13 = sb->b;
HXDLIN( 199)							sb13->push(::Std_obj::string(x32));
            						}
            					}
HXLINE( 200)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 201)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 202)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)12: {
HXLINE( 206)					{
HXLINE( 206)						::String x33 = (dr->toGLSL(null()) + HX_(" = log2(",f7,c4,4a,53));
HXDLIN( 206)						::String x34 = ((x33 + sr1->toGLSL(null(),null())) + HX_("); // log",f2,57,0d,1a));
HXDLIN( 206)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 206)							sb->flush();
            						}
HXDLIN( 206)						if (hx::IsNull( sb->b )) {
HXLINE( 206)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x34));
            						}
            						else {
HXLINE( 206)							::Array< ::String > sb14 = sb->b;
HXDLIN( 206)							sb14->push(::Std_obj::string(x34));
            						}
            					}
HXLINE( 207)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 208)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)13: {
HXLINE( 212)					{
HXLINE( 212)						::String x35 = (dr->toGLSL(null()) + HX_(" = exp2(",50,75,76,51));
HXDLIN( 212)						::String x36 = ((x35 + sr1->toGLSL(null(),null())) + HX_("); // exp",0b,10,08,1a));
HXDLIN( 212)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 212)							sb->flush();
            						}
HXDLIN( 212)						if (hx::IsNull( sb->b )) {
HXLINE( 212)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x36));
            						}
            						else {
HXLINE( 212)							::Array< ::String > sb15 = sb->b;
HXDLIN( 212)							sb15->push(::Std_obj::string(x36));
            						}
            					}
HXLINE( 213)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 214)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)14: {
HXLINE( 218)					{
HXLINE( 218)						::String x37 = (dr->toGLSL(null()) + HX_(" = normalize(",1e,9b,e9,ff));
HXDLIN( 218)						::String x38 = ((x37 + sr1->toGLSL(null(),null())) + HX_("); // normalize",7b,81,39,e2));
HXDLIN( 218)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 218)							sb->flush();
            						}
HXDLIN( 218)						if (hx::IsNull( sb->b )) {
HXLINE( 218)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x38));
            						}
            						else {
HXLINE( 218)							::Array< ::String > sb16 = sb->b;
HXDLIN( 218)							sb16->push(::Std_obj::string(x38));
            						}
            					}
HXLINE( 219)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 220)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)15: {
HXLINE( 224)					{
HXLINE( 224)						::String x39 = (dr->toGLSL(null()) + HX_(" = sin(",f3,00,9a,4f));
HXDLIN( 224)						::String x40 = ((x39 + sr1->toGLSL(null(),null())) + HX_("); // sin",86,a2,12,1a));
HXDLIN( 224)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 224)							sb->flush();
            						}
HXDLIN( 224)						if (hx::IsNull( sb->b )) {
HXLINE( 224)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x40));
            						}
            						else {
HXLINE( 224)							::Array< ::String > sb17 = sb->b;
HXDLIN( 224)							sb17->push(::Std_obj::string(x40));
            						}
            					}
HXLINE( 225)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 226)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)16: {
HXLINE( 230)					{
HXLINE( 230)						::String x41 = (dr->toGLSL(null()) + HX_(" = cos(",e4,28,0b,45));
HXDLIN( 230)						::String x42 = ((x41 + sr1->toGLSL(null(),null())) + HX_("); // cos",b5,83,06,1a));
HXDLIN( 230)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 230)							sb->flush();
            						}
HXDLIN( 230)						if (hx::IsNull( sb->b )) {
HXLINE( 230)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x42));
            						}
            						else {
HXLINE( 230)							::Array< ::String > sb18 = sb->b;
HXDLIN( 230)							sb18->push(::Std_obj::string(x42));
            						}
            					}
HXLINE( 231)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 232)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)17: {
HXLINE( 236)					sr1->sourceMask = (sr2->sourceMask = (int)7);
HXLINE( 237)					{
HXLINE( 237)						::String x43 = (dr->toGLSL(null()) + HX_(" = cross(vec3(",be,c1,b9,ac));
HXDLIN( 237)						::String x44 = ((x43 + sr1->toGLSL(null(),null())) + HX_("), vec3(",ec,87,86,4e));
HXDLIN( 237)						::String x45 = ((x44 + sr2->toGLSL(null(),null())) + HX_(")); // crs",09,b9,f3,e5));
HXDLIN( 237)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 237)							sb->flush();
            						}
HXDLIN( 237)						if (hx::IsNull( sb->b )) {
HXLINE( 237)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x45));
            						}
            						else {
HXLINE( 237)							::Array< ::String > sb19 = sb->b;
HXDLIN( 237)							sb19->push(::Std_obj::string(x45));
            						}
            					}
HXLINE( 238)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 239)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 240)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)18: {
HXLINE( 244)					sr1->sourceMask = (sr2->sourceMask = (int)7);
HXLINE( 245)					{
HXLINE( 245)						::String x46 = (dr->toGLSL(null()) + HX_(" = vec4(dot(vec3(",e5,e8,98,98));
HXDLIN( 245)						::String x47 = ((x46 + sr1->toGLSL(null(),null())) + HX_("), vec3(",ec,87,86,4e));
HXDLIN( 245)						::String x48 = ((x47 + sr2->toGLSL(null(),null())) + HX_(")))",49,40,1f,00));
HXDLIN( 245)						::String x49 = ((x48 + dr->getWriteMask()) + HX_("; // dp3",6c,75,5d,51));
HXDLIN( 245)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 245)							sb->flush();
            						}
HXDLIN( 245)						if (hx::IsNull( sb->b )) {
HXLINE( 245)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x49));
            						}
            						else {
HXLINE( 245)							::Array< ::String > sb20 = sb->b;
HXDLIN( 245)							sb20->push(::Std_obj::string(x49));
            						}
            					}
HXLINE( 246)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 247)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 248)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)19: {
HXLINE( 252)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 253)					{
HXLINE( 253)						::String x50 = (dr->toGLSL(null()) + HX_(" = vec4(dot(vec4(",c4,e9,98,98));
HXDLIN( 253)						::String x51 = ((x50 + sr1->toGLSL(null(),null())) + HX_("), vec4(",cb,88,86,4e));
HXDLIN( 253)						::String x52 = ((x51 + sr2->toGLSL(null(),null())) + HX_(")))",49,40,1f,00));
HXDLIN( 253)						::String x53 = ((x52 + dr->getWriteMask()) + HX_("; // dp4",6d,75,5d,51));
HXDLIN( 253)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 253)							sb->flush();
            						}
HXDLIN( 253)						if (hx::IsNull( sb->b )) {
HXLINE( 253)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x53));
            						}
            						else {
HXLINE( 253)							::Array< ::String > sb21 = sb->b;
HXDLIN( 253)							sb21->push(::Std_obj::string(x53));
            						}
            					}
HXLINE( 254)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 255)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 256)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)20: {
HXLINE( 260)					{
HXLINE( 260)						::String x54 = (dr->toGLSL(null()) + HX_(" = abs(",59,de,ae,43));
HXDLIN( 260)						::String x55 = ((x54 + sr1->toGLSL(null(),null())) + HX_("); // abs",e0,f3,04,1a));
HXDLIN( 260)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 260)							sb->flush();
            						}
HXDLIN( 260)						if (hx::IsNull( sb->b )) {
HXLINE( 260)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x55));
            						}
            						else {
HXLINE( 260)							::Array< ::String > sb22 = sb->b;
HXDLIN( 260)							sb22->push(::Std_obj::string(x55));
            						}
            					}
HXLINE( 261)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 262)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)21: {
HXLINE( 266)					{
HXLINE( 266)						::String x56 = (dr->toGLSL(null()) + HX_(" = -",6a,39,55,15));
HXDLIN( 266)						::String x57 = ((x56 + sr1->toGLSL(null(),null())) + HX_("; // neg",95,02,65,51));
HXDLIN( 266)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 266)							sb->flush();
            						}
HXDLIN( 266)						if (hx::IsNull( sb->b )) {
HXLINE( 266)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x57));
            						}
            						else {
HXLINE( 266)							::Array< ::String > sb23 = sb->b;
HXDLIN( 266)							sb23->push(::Std_obj::string(x57));
            						}
            					}
HXLINE( 267)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 268)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)22: {
HXLINE( 272)					{
HXLINE( 272)						::String x58 = (dr->toGLSL(null()) + HX_(" = clamp(",70,52,ed,36));
HXDLIN( 272)						::String x59 = ((x58 + sr1->toGLSL(null(),null())) + HX_(", 0.0, 1.0); // saturate",02,d7,59,d0));
HXDLIN( 272)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 272)							sb->flush();
            						}
HXDLIN( 272)						if (hx::IsNull( sb->b )) {
HXLINE( 272)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x59));
            						}
            						else {
HXLINE( 272)							::Array< ::String > sb24 = sb->b;
HXDLIN( 272)							sb24->push(::Std_obj::string(x59));
            						}
            					}
HXLINE( 273)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 274)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)23: {
HXLINE( 282)					 ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage existingUsage = map->getRegisterUsage(sr2);
HXLINE( 284)					bool _hx_tmp;
HXDLIN( 284)					if (hx::IsNotEq( existingUsage,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn() )) {
HXLINE( 284)						_hx_tmp = hx::IsNotEq( existingUsage,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn() );
            					}
            					else {
HXLINE( 284)						_hx_tmp = false;
            					}
HXDLIN( 284)					if (_hx_tmp) {
HXLINE( 286)						{
HXLINE( 286)							::String x60 = (dr->toGLSL(null()) + HX_(" = ",63,7d,18,00));
HXDLIN( 286)							::String x61 = ((x60 + sr1->toGLSL(null(),null())) + HX_(" * mat3(",9f,6a,62,c7));
HXDLIN( 286)							::String x62 = ((x61 + sr2->toGLSL(false,null())) + HX_("); // m33",bb,e5,0d,1a));
HXDLIN( 286)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 286)								sb->flush();
            							}
HXDLIN( 286)							if (hx::IsNull( sb->b )) {
HXLINE( 286)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x62));
            							}
            							else {
HXLINE( 286)								::Array< ::String > sb25 = sb->b;
HXDLIN( 286)								sb25->push(::Std_obj::string(x62));
            							}
            						}
HXLINE( 287)						map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 288)						map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 289)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::MATRIX_4_4_dyn(),null());
            					}
            					else {
HXLINE( 294)						sr1->sourceMask = (sr2->sourceMask = (int)7);
HXLINE( 295)						{
HXLINE( 295)							::String x63 = ((dr->toGLSL(null()) + HX_(" = vec3(",a6,67,ad,0e)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 295)							::String x64 = ((x63 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 295)							::String x65 = (((x64 + sr2->toGLSL(true,(int)0)) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 295)							::String x66 = ((x65 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 295)							::String x67 = (((x66 + sr2->toGLSL(true,(int)1)) + HX_("),",e3,23,00,00)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 295)							::String x68 = ((x67 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 295)							::String x69 = ((x68 + sr2->toGLSL(true,(int)2)) + HX_(")); // m33",72,18,fb,e5));
HXDLIN( 295)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 295)								sb->flush();
            							}
HXDLIN( 295)							if (hx::IsNull( sb->b )) {
HXLINE( 295)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x69));
            							}
            							else {
HXLINE( 295)								::Array< ::String > sb26 = sb->b;
HXDLIN( 295)								sb26->push(::Std_obj::string(x69));
            							}
            						}
HXLINE( 300)						map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 301)						map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 302)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)0);
HXLINE( 303)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)1);
HXLINE( 304)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)2);
            					}
            				}
            				break;
            				case (int)24: {
HXLINE( 316)					 ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage existingUsage1 = map->getRegisterUsage(sr2);
HXLINE( 318)					bool _hx_tmp1;
HXDLIN( 318)					if (hx::IsNotEq( existingUsage1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn() )) {
HXLINE( 318)						_hx_tmp1 = hx::IsNotEq( existingUsage1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn() );
            					}
            					else {
HXLINE( 318)						_hx_tmp1 = false;
            					}
HXDLIN( 318)					if (_hx_tmp1) {
HXLINE( 320)						{
HXLINE( 320)							::String x70 = (dr->toGLSL(null()) + HX_(" = ",63,7d,18,00));
HXDLIN( 320)							::String x71 = ((x70 + sr1->toGLSL(null(),null())) + HX_(" * ",d6,6c,18,00));
HXDLIN( 320)							::String x72 = ((x71 + sr2->toGLSL(false,null())) + HX_("; // m44",72,15,64,51));
HXDLIN( 320)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 320)								sb->flush();
            							}
HXDLIN( 320)							if (hx::IsNull( sb->b )) {
HXLINE( 320)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x72));
            							}
            							else {
HXLINE( 320)								::Array< ::String > sb27 = sb->b;
HXDLIN( 320)								sb27->push(::Std_obj::string(x72));
            							}
            						}
HXLINE( 321)						map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 322)						map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 323)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::MATRIX_4_4_dyn(),null());
            					}
            					else {
HXLINE( 328)						sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 329)						{
HXLINE( 329)							::String x73 = ((dr->toGLSL(null()) + HX_(" = vec4(",85,68,ad,0e)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 329)							::String x74 = ((x73 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 329)							::String x75 = (((x74 + sr2->toGLSL(true,(int)0)) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 329)							::String x76 = ((x75 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 329)							::String x77 = (((x76 + sr2->toGLSL(true,(int)1)) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 329)							::String x78 = ((x77 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 329)							::String x79 = (((x78 + sr2->toGLSL(true,(int)2)) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 329)							::String x80 = ((x79 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 329)							::String x81 = ((x80 + sr2->toGLSL(true,(int)3)) + HX_(")); // m44",52,19,fb,e5));
HXDLIN( 329)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 329)								sb->flush();
            							}
HXDLIN( 329)							if (hx::IsNull( sb->b )) {
HXLINE( 329)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x81));
            							}
            							else {
HXLINE( 329)								::Array< ::String > sb28 = sb->b;
HXDLIN( 329)								sb28->push(::Std_obj::string(x81));
            							}
            						}
HXLINE( 335)						map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 336)						map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 337)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)0);
HXLINE( 338)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)1);
HXLINE( 339)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)2);
HXLINE( 340)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)3);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 352)					 ::openfl::_internal::formats::agal::_AGALConverter::DestRegister dr1 = dr;
HXDLIN( 352)					dr1->mask = ((int)dr1->mask & (int)(int)7);
HXLINE( 354)					 ::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage existingUsage2 = map->getRegisterUsage(sr2);
HXLINE( 356)					bool _hx_tmp2;
HXDLIN( 356)					if (hx::IsNotEq( existingUsage2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn() )) {
HXLINE( 356)						_hx_tmp2 = hx::IsNotEq( existingUsage2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn() );
            					}
            					else {
HXLINE( 356)						_hx_tmp2 = false;
            					}
HXDLIN( 356)					if (_hx_tmp2) {
HXLINE( 358)						{
HXLINE( 358)							::String x82 = (dr->toGLSL(null()) + HX_(" = ",63,7d,18,00));
HXDLIN( 358)							::String x83 = ((x82 + sr1->toGLSL(null(),null())) + HX_(" * ",d6,6c,18,00));
HXDLIN( 358)							::String x84 = ((x83 + sr2->toGLSL(false,null())) + HX_("; // m34",93,14,64,51));
HXDLIN( 358)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 358)								sb->flush();
            							}
HXDLIN( 358)							if (hx::IsNull( sb->b )) {
HXLINE( 358)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x84));
            							}
            							else {
HXLINE( 358)								::Array< ::String > sb29 = sb->b;
HXDLIN( 358)								sb29->push(::Std_obj::string(x84));
            							}
            						}
HXLINE( 359)						map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 360)						map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 361)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::MATRIX_4_4_dyn(),null());
            					}
            					else {
HXLINE( 366)						sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 367)						{
HXLINE( 367)							::String x85 = ((dr->toGLSL(null()) + HX_(" = vec3(",a6,67,ad,0e)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 367)							::String x86 = ((x85 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 367)							::String x87 = (((x86 + sr2->toGLSL(true,(int)0)) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 367)							::String x88 = ((x87 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 367)							::String x89 = (((x88 + sr2->toGLSL(true,(int)1)) + HX_("),",e3,23,00,00)) + HX_("dot(",7f,f5,6d,42));
HXDLIN( 367)							::String x90 = ((x89 + sr1->toGLSL(true,null())) + HX_(",",2c,00,00,00));
HXDLIN( 367)							::String x91 = ((x90 + sr2->toGLSL(true,(int)2)) + HX_(")); // m34",73,18,fb,e5));
HXDLIN( 367)							if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 367)								sb->flush();
            							}
HXDLIN( 367)							if (hx::IsNull( sb->b )) {
HXLINE( 367)								sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x91));
            							}
            							else {
HXLINE( 367)								::Array< ::String > sb30 = sb->b;
HXDLIN( 367)								sb30->push(::Std_obj::string(x91));
            							}
            						}
HXLINE( 372)						map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 373)						map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 374)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)0);
HXLINE( 375)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)1);
HXLINE( 376)						map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)2);
            					}
            				}
            				break;
            				case (int)39: {
HXLINE( 385)					sr1->sourceMask = (int)15;
HXLINE( 386)					{
HXLINE( 386)						::String x92 = ((HX_("if (any(lessThan(",0d,a8,4d,9b) + sr1->toGLSL(null(),null())) + HX_(", vec4(0)))) discard;",61,d7,c4,f0));
HXDLIN( 386)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 386)							sb->flush();
            						}
HXDLIN( 386)						if (hx::IsNull( sb->b )) {
HXLINE( 386)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x92));
            						}
            						else {
HXLINE( 386)							::Array< ::String > sb31 = sb->b;
HXDLIN( 386)							sb31->push(::Std_obj::string(x92));
            						}
            					}
HXLINE( 387)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)40: {
HXLINE( 393)					 ::openfl::_internal::formats::agal::_AGALConverter::SamplerRegister sampler = ::openfl::_internal::formats::agal::_AGALConverter::SamplerRegister_obj::parse(source2,programType);
HXLINE( 395)					{
HXLINE( 395)						int _g = sampler->d;
HXDLIN( 395)						switch((int)(_g)){
            							case (int)0: {
HXLINE( 399)								if ((sampler->t == (int)2)) {
HXLINE( 401)									sr1->sourceMask = (int)3;
HXLINE( 402)									map->addSaR(sampler,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::SAMPLER_2D_ALPHA_dyn());
HXLINE( 403)									{
HXLINE( 403)										::String x93 = ((HX_("if (",25,e9,b4,45) + sampler->toGLSL()) + HX_("_alphaEnabled) {\n",68,cb,8a,22));
HXDLIN( 403)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 403)											sb->flush();
            										}
HXDLIN( 403)										if (hx::IsNull( sb->b )) {
HXLINE( 403)											sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x93));
            										}
            										else {
HXLINE( 403)											::Array< ::String > sb32 = sb->b;
HXDLIN( 403)											sb32->push(::Std_obj::string(x93));
            										}
            									}
HXLINE( 404)									{
HXLINE( 404)										::String x94 = ((HX_("\t\t",e0,07,00,00) + dr->toGLSL(null())) + HX_(" = vec4(texture2D(",e0,3e,c1,08));
HXDLIN( 404)										::String x95 = ((x94 + sampler->toGLSL()) + HX_(", ",74,26,00,00));
HXDLIN( 404)										::String x96 = ((x95 + sr1->toGLSL(null(),null())) + HX_(").xyz, texture2D(",23,7d,b7,f4));
HXDLIN( 404)										::String x97 = ((x96 + sampler->toGLSL()) + HX_("_alpha, ",d3,3a,ce,eb));
HXDLIN( 404)										::String x98 = ((x97 + sr1->toGLSL(null(),null())) + HX_(").x); // tex + alpha\n",1f,b8,ed,c2));
HXDLIN( 404)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 404)											sb->flush();
            										}
HXDLIN( 404)										if (hx::IsNull( sb->b )) {
HXLINE( 404)											sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x98));
            										}
            										else {
HXLINE( 404)											::Array< ::String > sb33 = sb->b;
HXDLIN( 404)											sb33->push(::Std_obj::string(x98));
            										}
            									}
HXLINE( 405)									{
HXLINE( 405)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 405)											sb->flush();
            										}
HXDLIN( 405)										if (hx::IsNull( sb->b )) {
HXLINE( 405)											sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_5,1);
            										}
            										else {
HXLINE( 405)											sb->b->push(HX_("\t} else {\n",6a,88,3f,f9));
            										}
            									}
HXLINE( 406)									{
HXLINE( 406)										::String x99 = ((HX_("\t\t",e0,07,00,00) + dr->toGLSL(null())) + HX_(" = texture2D(",3e,55,2e,2f));
HXDLIN( 406)										::String x100 = ((x99 + sampler->toGLSL()) + HX_(", ",74,26,00,00));
HXDLIN( 406)										::String x101 = ((x100 + sr1->toGLSL(null(),null())) + HX_("); // tex\n",15,c9,e1,b6));
HXDLIN( 406)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 406)											sb->flush();
            										}
HXDLIN( 406)										if (hx::IsNull( sb->b )) {
HXLINE( 406)											sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x101));
            										}
            										else {
HXLINE( 406)											::Array< ::String > sb34 = sb->b;
HXDLIN( 406)											sb34->push(::Std_obj::string(x101));
            										}
            									}
HXLINE( 407)									{
HXLINE( 407)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 407)											sb->flush();
            										}
HXDLIN( 407)										if (hx::IsNull( sb->b )) {
HXLINE( 407)											sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_6,1);
            										}
            										else {
HXLINE( 407)											sb->b->push(HX_("\t}",54,08,00,00));
            										}
            									}
            								}
            								else {
HXLINE( 411)									sr1->sourceMask = (int)3;
HXLINE( 412)									map->addSaR(sampler,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::SAMPLER_2D_dyn());
HXLINE( 413)									{
HXLINE( 413)										::String x102 = (dr->toGLSL(null()) + HX_(" = texture2D(",3e,55,2e,2f));
HXDLIN( 413)										::String x103 = ((x102 + sampler->toGLSL()) + HX_(", ",74,26,00,00));
HXDLIN( 413)										::String x104 = ((x103 + sr1->toGLSL(null(),null())) + HX_("); // tex",55,61,13,1a));
HXDLIN( 413)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 413)											sb->flush();
            										}
HXDLIN( 413)										if (hx::IsNull( sb->b )) {
HXLINE( 413)											sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x104));
            										}
            										else {
HXLINE( 413)											::Array< ::String > sb35 = sb->b;
HXDLIN( 413)											sb35->push(::Std_obj::string(x104));
            										}
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 419)								if ((sampler->t == (int)2)) {
HXLINE( 421)									sr1->sourceMask = (int)7;
HXLINE( 422)									map->addSaR(sampler,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::SAMPLER_CUBE_ALPHA_dyn());
HXLINE( 423)									{
HXLINE( 423)										::String x105 = ((HX_("if (",25,e9,b4,45) + sampler->toGLSL()) + HX_("_alphaEnabled) {\n",68,cb,8a,22));
HXDLIN( 423)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 423)											sb->flush();
            										}
HXDLIN( 423)										if (hx::IsNull( sb->b )) {
HXLINE( 423)											sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x105));
            										}
            										else {
HXLINE( 423)											::Array< ::String > sb36 = sb->b;
HXDLIN( 423)											sb36->push(::Std_obj::string(x105));
            										}
            									}
HXLINE( 424)									{
HXLINE( 424)										::String x106 = ((HX_("\t\t",e0,07,00,00) + dr->toGLSL(null())) + HX_(" = vec4(textureCube(",bd,62,16,95));
HXDLIN( 424)										::String x107 = ((x106 + sampler->toGLSL()) + HX_(", ",74,26,00,00));
HXDLIN( 424)										::String x108 = ((x107 + sr1->toGLSL(null(),null())) + HX_(").xyz, textureCube(",c0,f7,ca,19));
HXDLIN( 424)										::String x109 = ((x108 + sampler->toGLSL()) + HX_("_alpha, ",d3,3a,ce,eb));
HXDLIN( 424)										::String x110 = ((x109 + sr1->toGLSL(null(),null())) + HX_(").x); // tex + alpha\n",1f,b8,ed,c2));
HXDLIN( 424)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 424)											sb->flush();
            										}
HXDLIN( 424)										if (hx::IsNull( sb->b )) {
HXLINE( 424)											sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x110));
            										}
            										else {
HXLINE( 424)											::Array< ::String > sb37 = sb->b;
HXDLIN( 424)											sb37->push(::Std_obj::string(x110));
            										}
            									}
HXLINE( 425)									{
HXLINE( 425)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 425)											sb->flush();
            										}
HXDLIN( 425)										if (hx::IsNull( sb->b )) {
HXLINE( 425)											sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_7,1);
            										}
            										else {
HXLINE( 425)											sb->b->push(HX_("\t} else {\n",6a,88,3f,f9));
            										}
            									}
HXLINE( 426)									{
HXLINE( 426)										::String x111 = ((HX_("\t\t",e0,07,00,00) + dr->toGLSL(null())) + HX_(" = textureCube(",9b,4c,bc,01));
HXDLIN( 426)										::String x112 = ((x111 + sampler->toGLSL()) + HX_(", ",74,26,00,00));
HXDLIN( 426)										::String x113 = ((x112 + sr1->toGLSL(null(),null())) + HX_("); // tex",55,61,13,1a));
HXDLIN( 426)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 426)											sb->flush();
            										}
HXDLIN( 426)										if (hx::IsNull( sb->b )) {
HXLINE( 426)											sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x113));
            										}
            										else {
HXLINE( 426)											::Array< ::String > sb38 = sb->b;
HXDLIN( 426)											sb38->push(::Std_obj::string(x113));
            										}
            									}
HXLINE( 427)									{
HXLINE( 427)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 427)											sb->flush();
            										}
HXDLIN( 427)										if (hx::IsNull( sb->b )) {
HXLINE( 427)											sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_8,1);
            										}
            										else {
HXLINE( 427)											sb->b->push(HX_("\t}",54,08,00,00));
            										}
            									}
            								}
            								else {
HXLINE( 431)									sr1->sourceMask = (int)7;
HXLINE( 432)									{
HXLINE( 432)										::String x114 = (dr->toGLSL(null()) + HX_(" = textureCube(",9b,4c,bc,01));
HXDLIN( 432)										::String x115 = ((x114 + sampler->toGLSL()) + HX_(", ",74,26,00,00));
HXDLIN( 432)										::String x116 = ((x115 + sr1->toGLSL(null(),null())) + HX_("); // tex",55,61,13,1a));
HXDLIN( 432)										if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 432)											sb->flush();
            										}
HXDLIN( 432)										if (hx::IsNull( sb->b )) {
HXLINE( 432)											sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x116));
            										}
            										else {
HXLINE( 432)											::Array< ::String > sb39 = sb->b;
HXDLIN( 432)											sb39->push(::Std_obj::string(x116));
            										}
            									}
HXLINE( 433)									map->addSaR(sampler,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::SAMPLER_CUBE_dyn());
            								}
            							}
            							break;
            						}
            					}
HXLINE( 440)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 441)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 443)					if (hx::IsNotNull( samplerState )) {
HXLINE( 446)						int sampler1 = sampler->n;
HXDLIN( 446)						samplerState[sampler1] = sampler->toSamplerState();
            					}
            				}
            				break;
            				case (int)41: {
HXLINE( 452)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 453)					{
HXLINE( 453)						::String x117 = (dr->toGLSL(null()) + HX_(" = vec4(greaterThanEqual(",aa,a3,51,ec));
HXDLIN( 453)						::String x118 = ((x117 + sr1->toGLSL(null(),null())) + HX_(", ",74,26,00,00));
HXDLIN( 453)						::String x119 = ((x118 + sr2->toGLSL(null(),null())) + HX_("))",e0,23,00,00));
HXDLIN( 453)						::String x120 = ((x119 + dr->getWriteMask()) + HX_("; // ste",e9,da,68,51));
HXDLIN( 453)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 453)							sb->flush();
            						}
HXDLIN( 453)						if (hx::IsNull( sb->b )) {
HXLINE( 453)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x120));
            						}
            						else {
HXLINE( 453)							::Array< ::String > sb40 = sb->b;
HXDLIN( 453)							sb40->push(::Std_obj::string(x120));
            						}
            					}
HXLINE( 454)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 455)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 456)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)42: {
HXLINE( 460)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 461)					{
HXLINE( 461)						::String x121 = (dr->toGLSL(null()) + HX_(" = vec4(lessThan(",69,ee,b4,35));
HXDLIN( 461)						::String x122 = ((x121 + sr1->toGLSL(null(),null())) + HX_(", ",74,26,00,00));
HXDLIN( 461)						::String x123 = ((x122 + sr2->toGLSL(null(),null())) + HX_("))",e0,23,00,00));
HXDLIN( 461)						::String x124 = ((x123 + dr->getWriteMask()) + HX_("; // slt",00,d4,68,51));
HXDLIN( 461)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 461)							sb->flush();
            						}
HXDLIN( 461)						if (hx::IsNull( sb->b )) {
HXLINE( 461)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x124));
            						}
            						else {
HXLINE( 461)							::Array< ::String > sb41 = sb->b;
HXDLIN( 461)							sb41->push(::Std_obj::string(x124));
            						}
            					}
HXLINE( 462)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 463)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 464)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)44: {
HXLINE( 468)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 469)					{
HXLINE( 469)						::String x125 = (dr->toGLSL(null()) + HX_(" = vec4(equal(",39,08,45,e1));
HXDLIN( 469)						::String x126 = ((x125 + sr1->toGLSL(null(),null())) + HX_(", ",74,26,00,00));
HXDLIN( 469)						::String x127 = ((x126 + sr2->toGLSL(null(),null())) + HX_("))",e0,23,00,00));
HXDLIN( 469)						::String x128 = ((x127 + dr->getWriteMask()) + HX_("; // seq",e4,cd,68,51));
HXDLIN( 469)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 469)							sb->flush();
            						}
HXDLIN( 469)						if (hx::IsNull( sb->b )) {
HXLINE( 469)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x128));
            						}
            						else {
HXLINE( 469)							::Array< ::String > sb42 = sb->b;
HXDLIN( 469)							sb42->push(::Std_obj::string(x128));
            						}
            					}
HXLINE( 470)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 471)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 472)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)45: {
HXLINE( 476)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 477)					{
HXLINE( 477)						::String x129 = (dr->toGLSL(null()) + HX_(" = vec4(notEqual(",42,aa,f1,97));
HXDLIN( 477)						::String x130 = ((x129 + sr1->toGLSL(null(),null())) + HX_(", ",74,26,00,00));
HXDLIN( 477)						::String x131 = ((x130 + sr2->toGLSL(null(),null())) + HX_("))",e0,23,00,00));
HXDLIN( 477)						::String x132 = ((x131 + dr->getWriteMask()) + HX_("; // sne",af,d5,68,51));
HXDLIN( 477)						if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 477)							sb->flush();
            						}
HXDLIN( 477)						if (hx::IsNull( sb->b )) {
HXLINE( 477)							sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x132));
            						}
            						else {
HXLINE( 477)							::Array< ::String > sb43 = sb->b;
HXDLIN( 477)							sb43->push(::Std_obj::string(x132));
            						}
            					}
HXLINE( 478)					map->addDR(dr,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 479)					map->addSR(sr1,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 480)					map->addSR(sr2,::openfl::_internal::formats::agal::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				default:{
HXLINE( 485)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,(HX_("Opcode ",72,65,6e,e7) + opcode)));
            				}
            			}
HXLINE( 489)			{
HXLINE( 489)				if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 489)					sb->flush();
            				}
HXDLIN( 489)				if (hx::IsNull( sb->b )) {
HXLINE( 489)					sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_9,1);
            				}
            				else {
HXLINE( 489)					sb->b->push(HX_("\n",0a,00,00,00));
            				}
            			}
            		}
            		_hx_goto_2:;
HXLINE( 494)		if (hx::IsNull( ::openfl::_internal::formats::agal::AGALConverter_obj::limitedProfile )) {
HXLINE( 496)			::String version1 = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7938)) );
HXLINE( 497)			bool _hx_tmp3;
HXDLIN( 497)			if ((version1.indexOf(HX_("OpenGL ES",5f,cb,92,95),null()) <= (int)-1)) {
HXLINE( 497)				_hx_tmp3 = (version1.indexOf(HX_("WebGL",99,9f,e9,5a),null()) > (int)-1);
            			}
            			else {
HXLINE( 497)				_hx_tmp3 = true;
            			}
HXDLIN( 497)			::openfl::_internal::formats::agal::AGALConverter_obj::limitedProfile = _hx_tmp3;
            		}
HXLINE( 503)		 ::StringBuf glsl =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 504)		{
HXLINE( 504)			::String x133;
HXDLIN( 504)			if (hx::IsEq( programType,::openfl::_internal::formats::agal::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE( 504)				x133 = HX_("vertex",64,db,47,a1);
            			}
            			else {
HXLINE( 504)				x133 = HX_("fragment",d0,5f,e5,ad);
            			}
HXDLIN( 504)			::String x134 = ((HX_("// AGAL ",af,bc,4a,8a) + x133) + HX_(" shader\n",25,c5,d4,85));
HXDLIN( 504)			if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 504)				glsl->flush();
            			}
HXDLIN( 504)			if (hx::IsNull( glsl->b )) {
HXLINE( 504)				glsl->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x134));
            			}
            			else {
HXLINE( 504)				::Array< ::String > glsl1 = glsl->b;
HXDLIN( 504)				glsl1->push(::Std_obj::string(x134));
            			}
            		}
HXLINE( 506)		if (::openfl::_internal::formats::agal::AGALConverter_obj::limitedProfile) {
HXLINE( 508)			{
HXLINE( 508)				if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 508)					glsl->flush();
            				}
HXDLIN( 508)				if (hx::IsNull( glsl->b )) {
HXLINE( 508)					glsl->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_10,1);
            				}
            				else {
HXLINE( 508)					glsl->b->push(HX_("#version 100\n",24,25,05,19));
            				}
            			}
HXLINE( 511)			{
HXLINE( 511)				if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 511)					glsl->flush();
            				}
HXDLIN( 511)				if (hx::IsNull( glsl->b )) {
HXLINE( 511)					glsl->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_11,1);
            				}
            				else {
HXLINE( 511)					glsl->b->push(HX_("precision highp float;\n",57,4a,f7,14));
            				}
            			}
            		}
            		else {
HXLINE( 515)			if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 515)				glsl->flush();
            			}
HXDLIN( 515)			if (hx::IsNull( glsl->b )) {
HXLINE( 515)				glsl->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_12,1);
            			}
            			else {
HXLINE( 515)				glsl->b->push(HX_("#version 120\n",a6,a9,06,19));
            			}
            		}
HXLINE( 519)		{
HXLINE( 519)			::String x135 = map->toGLSL(false);
HXDLIN( 519)			if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 519)				glsl->flush();
            			}
HXDLIN( 519)			if (hx::IsNull( glsl->b )) {
HXLINE( 519)				glsl->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x135));
            			}
            			else {
HXLINE( 519)				::Array< ::String > glsl2 = glsl->b;
HXDLIN( 519)				glsl2->push(::Std_obj::string(x135));
            			}
            		}
HXLINE( 521)		if (hx::IsEq( programType,::openfl::_internal::formats::agal::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE( 524)			if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 524)				glsl->flush();
            			}
HXDLIN( 524)			if (hx::IsNull( glsl->b )) {
HXLINE( 524)				glsl->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_13,1);
            			}
            			else {
HXLINE( 524)				glsl->b->push(HX_("uniform vec4 vcPositionScale;\n",cf,aa,4f,18));
            			}
            		}
HXLINE( 528)		{
HXLINE( 528)			if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 528)				glsl->flush();
            			}
HXDLIN( 528)			if (hx::IsNull( glsl->b )) {
HXLINE( 528)				glsl->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_14,1);
            			}
            			else {
HXLINE( 528)				glsl->b->push(HX_("void main() {\n",49,b0,bf,fb));
            			}
            		}
HXLINE( 529)		{
HXLINE( 529)			::String x136 = map->toGLSL(true);
HXDLIN( 529)			if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 529)				glsl->flush();
            			}
HXDLIN( 529)			if (hx::IsNull( glsl->b )) {
HXLINE( 529)				glsl->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x136));
            			}
            			else {
HXLINE( 529)				::Array< ::String > glsl3 = glsl->b;
HXDLIN( 529)				glsl3->push(::Std_obj::string(x136));
            			}
            		}
HXLINE( 530)		{
HXLINE( 530)			::String x137 = sb->toString();
HXDLIN( 530)			if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 530)				glsl->flush();
            			}
HXDLIN( 530)			if (hx::IsNull( glsl->b )) {
HXLINE( 530)				glsl->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x137));
            			}
            			else {
HXLINE( 530)				::Array< ::String > glsl4 = glsl->b;
HXDLIN( 530)				glsl4->push(::Std_obj::string(x137));
            			}
            		}
HXLINE( 532)		if (hx::IsEq( programType,::openfl::_internal::formats::agal::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE( 535)			if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 535)				glsl->flush();
            			}
HXDLIN( 535)			if (hx::IsNull( glsl->b )) {
HXLINE( 535)				glsl->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_15,1);
            			}
            			else {
HXLINE( 535)				glsl->b->push(HX_("\tgl_Position *= vcPositionScale;\n",7c,ad,85,8d));
            			}
            		}
HXLINE( 539)		{
HXLINE( 539)			if (hx::IsNotNull( glsl->charBuf )) {
HXLINE( 539)				glsl->flush();
            			}
HXDLIN( 539)			if (hx::IsNull( glsl->b )) {
HXLINE( 539)				glsl->b = ::Array_obj< ::String >::fromData( _hx_array_data_75e363b4_16,1);
            			}
            			else {
HXLINE( 539)				glsl->b->push(HX_("}\n",ed,6c,00,00));
            			}
            		}
HXLINE( 542)		return glsl->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AGALConverter_obj,convertToGLSL,return )


AGALConverter_obj::AGALConverter_obj()
{
}

bool AGALConverter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"readUInt64") ) { outValue = readUInt64_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convertToGLSL") ) { outValue = convertToGLSL_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"limitedProfile") ) { outValue = ( limitedProfile ); return true; }
		if (HX_FIELD_EQ(inName,"prefixFromType") ) { outValue = prefixFromType_dyn(); return true; }
	}
	return false;
}

bool AGALConverter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"limitedProfile") ) { limitedProfile=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *AGALConverter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo AGALConverter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &AGALConverter_obj::limitedProfile,HX_HCSTRING("limitedProfile","\xef","\x13","\x1a","\x0a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void AGALConverter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AGALConverter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AGALConverter_obj::limitedProfile,"limitedProfile");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AGALConverter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AGALConverter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AGALConverter_obj::limitedProfile,"limitedProfile");
};

#endif

hx::Class AGALConverter_obj::__mClass;

static ::String AGALConverter_obj_sStaticFields[] = {
	HX_HCSTRING("limitedProfile","\xef","\x13","\x1a","\x0a"),
	HX_HCSTRING("prefixFromType","\xf6","\x38","\xec","\xc8"),
	HX_HCSTRING("readUInt64","\x2e","\x21","\x8b","\x12"),
	HX_HCSTRING("convertToGLSL","\x4c","\x43","\x62","\xb5"),
	::String(null())
};

void AGALConverter_obj::__register()
{
	hx::Object *dummy = new AGALConverter_obj;
	AGALConverter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.formats.agal.AGALConverter","\xb4","\x63","\xe3","\x75");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AGALConverter_obj::__GetStatic;
	__mClass->mSetStaticField = &AGALConverter_obj::__SetStatic;
	__mClass->mMarkFunc = AGALConverter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AGALConverter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< AGALConverter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AGALConverter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AGALConverter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AGALConverter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace agal
