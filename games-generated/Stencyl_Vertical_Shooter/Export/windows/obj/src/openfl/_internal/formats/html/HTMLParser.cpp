// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_html_HTMLParser
#include <openfl/_internal/formats/html/HTMLParser.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text__TextFormatAlign_TextFormatAlign_Impl_
#include <openfl/text/_TextFormatAlign/TextFormatAlign_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_33_parse,"openfl._internal.formats.html.HTMLParser","parse",0x1023e310,"openfl._internal.formats.html.HTMLParser.parse","openfl/_internal/formats/html/HTMLParser.hx",33,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_289___getAttributeMatch,"openfl._internal.formats.html.HTMLParser","__getAttributeMatch",0xdadef73c,"openfl._internal.formats.html.HTMLParser.__getAttributeMatch","openfl/_internal/formats/html/HTMLParser.hx",289,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_17_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",17,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_18_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",18,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_19_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",19,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_20_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",20,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_21_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",21,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_22_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",22,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_23_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",23,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_24_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",24,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_25_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",25,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_26_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",26,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_27_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",27,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_28_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",28,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_29_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",29,0x6cb5a975)
HX_LOCAL_STACK_FRAME(_hx_pos_f7ce69a5a5ff89f9_30_boot,"openfl._internal.formats.html.HTMLParser","boot",0xbd75fbf5,"openfl._internal.formats.html.HTMLParser.boot","openfl/_internal/formats/html/HTMLParser.hx",30,0x6cb5a975)
namespace openfl{
namespace _internal{
namespace formats{
namespace html{

void HTMLParser_obj::__construct() { }

Dynamic HTMLParser_obj::__CreateEmpty() { return new HTMLParser_obj; }

void *HTMLParser_obj::_hx_vtable = 0;

Dynamic HTMLParser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HTMLParser_obj > _hx_result = new HTMLParser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HTMLParser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4591e6e5;
}

 ::EReg HTMLParser_obj::_hx___regexAlign;

 ::EReg HTMLParser_obj::_hx___regexBreakTag;

 ::EReg HTMLParser_obj::_hx___regexBlockIndent;

 ::EReg HTMLParser_obj::_hx___regexColor;

::Array< ::Dynamic> HTMLParser_obj::_hx___regexEntities;

 ::EReg HTMLParser_obj::_hx___regexFace;

 ::EReg HTMLParser_obj::_hx___regexHTMLTag;

 ::EReg HTMLParser_obj::_hx___regexHref;

 ::EReg HTMLParser_obj::_hx___regexIndent;

 ::EReg HTMLParser_obj::_hx___regexLeading;

 ::EReg HTMLParser_obj::_hx___regexLeftMargin;

 ::EReg HTMLParser_obj::_hx___regexRightMargin;

 ::EReg HTMLParser_obj::_hx___regexSize;

 ::EReg HTMLParser_obj::_hx___regexTabStops;

::String HTMLParser_obj::parse(::String value, ::openfl::text::TextFormat textFormat, ::openfl::_Vector::ObjectVector textFormatRanges){
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_33_parse)
HXLINE(  35)		value = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexBreakTag->replace(value,HX_("\n",0a,00,00,00));
HXLINE(  36)		value = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexEntities->__get((int)0).StaticCast<  ::EReg >()->replace(value,HX_("\"",22,00,00,00));
HXLINE(  37)		value = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexEntities->__get((int)1).StaticCast<  ::EReg >()->replace(value,HX_("'",27,00,00,00));
HXLINE(  38)		value = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexEntities->__get((int)2).StaticCast<  ::EReg >()->replace(value,HX_("&",26,00,00,00));
HXLINE(  39)		value = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexEntities->__get((int)5).StaticCast<  ::EReg >()->replace(value,HX_(" ",20,00,00,00));
HXLINE(  43)		::Array< ::String > segments = value.split(HX_("<",3c,00,00,00));
HXLINE(  45)		if ((segments->length == (int)1)) {
HXLINE(  47)			value = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexHTMLTag->replace(value,HX_("",00,00,00,00));
HXLINE(  49)			if ((textFormatRanges->get_length() > (int)1)) {
HXLINE(  51)				textFormatRanges->splice((int)1,(textFormatRanges->get_length() - (int)1));
            			}
HXLINE(  55)			value = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexEntities->__get((int)3).StaticCast<  ::EReg >()->replace(value,HX_("<",3c,00,00,00));
HXLINE(  56)			value = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexEntities->__get((int)4).StaticCast<  ::EReg >()->replace(value,HX_(">",3e,00,00,00));
HXLINE(  58)			 ::openfl::_internal::text::TextFormatRange range = textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(  59)			range->format = textFormat;
HXLINE(  60)			range->start = (int)0;
HXLINE(  61)			range->end = value.length;
HXLINE(  63)			return value;
            		}
            		else {
HXLINE(  67)			textFormatRanges->splice((int)0,textFormatRanges->get_length());
HXLINE(  69)			value = HX_("",00,00,00,00);
HXLINE(  70)			::String segment;
HXLINE(  72)			{
HXLINE(  72)				int _g1 = (int)0;
HXDLIN(  72)				int _g = segments->length;
HXDLIN(  72)				while((_g1 < _g)){
HXLINE(  72)					_g1 = (_g1 + (int)1);
HXDLIN(  72)					int i = (_g1 - (int)1);
HXLINE(  74)					segment = segments->__get(i);
HXLINE(  75)					segment = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexEntities->__get((int)3).StaticCast<  ::EReg >()->replace(segment,HX_("<",3c,00,00,00));
HXLINE(  76)					segment = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexEntities->__get((int)4).StaticCast<  ::EReg >()->replace(segment,HX_(">",3e,00,00,00));
HXLINE(  77)					segments[i] = segment;
            				}
            			}
HXLINE(  81)			::Array< ::Dynamic> formatStack = ::Array_obj< ::Dynamic>::__new(1)->init(0,textFormat->clone());
HXLINE(  82)			::Array< ::Dynamic> tagStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  83)			::String sub;
HXLINE(  84)			bool noLineBreak = false;
HXLINE(  86)			{
HXLINE(  86)				int _g2 = (int)0;
HXDLIN(  86)				while((_g2 < segments->length)){
HXLINE(  86)					::String segment1 = segments->__get(_g2);
HXDLIN(  86)					_g2 = (_g2 + (int)1);
HXLINE(  88)					if ((segment1 == HX_("",00,00,00,00))) {
HXLINE(  88)						continue;
            					}
HXLINE(  90)					bool isClosingTag = (segment1.substr((int)0,(int)1) == HX_("/",2f,00,00,00));
HXLINE(  91)					int tagEndIndex = segment1.indexOf(HX_(">",3e,00,00,00),null());
HXLINE(  92)					int start = (tagEndIndex + (int)1);
HXLINE(  93)					int spaceIndex = segment1.indexOf(HX_(" ",20,00,00,00),null());
HXLINE(  94)					int tagName;
HXDLIN(  94)					if (isClosingTag) {
HXLINE(  94)						tagName = (int)1;
            					}
            					else {
HXLINE(  94)						tagName = (int)0;
            					}
HXDLIN(  94)					 ::Dynamic tagName1;
HXDLIN(  94)					bool tagName2;
HXDLIN(  94)					if ((spaceIndex > (int)-1)) {
HXLINE(  94)						tagName2 = (spaceIndex < tagEndIndex);
            					}
            					else {
HXLINE(  94)						tagName2 = false;
            					}
HXDLIN(  94)					if (tagName2) {
HXLINE(  94)						tagName1 = spaceIndex;
            					}
            					else {
HXLINE(  94)						tagName1 = tagEndIndex;
            					}
HXDLIN(  94)					::String tagName3 = segment1.substring(tagName,tagName1);
HXLINE(  95)					 ::openfl::text::TextFormat format;
HXLINE(  97)					if (isClosingTag) {
HXLINE(  99)						::String _hx_tmp = tagName3.toLowerCase();
HXDLIN(  99)						if ((_hx_tmp != ( (::String)(tagStack->__get((tagStack->length - (int)1))->__Field(HX_("toLowerCase",56,4c,64,b8),hx::paccDynamic)()) ))) {
HXLINE( 101)							 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 101)							_hx_tmp1((HX_("Invalid HTML, unexpected closing tag ignored: ",c0,13,d6,64) + tagName3),hx::SourceInfo(HX_("HTMLParser.hx",54,b8,12,94),101,HX_("openfl._internal.formats.html.HTMLParser",8b,ff,72,57),HX_("parse",33,90,55,bd)));
HXLINE( 102)							continue;
            						}
HXLINE( 106)						tagStack->pop();
HXLINE( 107)						formatStack->pop().StaticCast<  ::openfl::text::TextFormat >();
HXLINE( 108)						format = formatStack->__get((formatStack->length - (int)1)).StaticCast<  ::openfl::text::TextFormat >()->clone();
HXLINE( 110)						bool _hx_tmp2;
HXDLIN( 110)						if ((tagName3.toLowerCase() == HX_("p",70,00,00,00))) {
HXLINE( 110)							_hx_tmp2 = (textFormatRanges->get_length() > (int)0);
            						}
            						else {
HXLINE( 110)							_hx_tmp2 = false;
            						}
HXDLIN( 110)						if (_hx_tmp2) {
HXLINE( 112)							value = (value + HX_("\n",0a,00,00,00));
HXLINE( 113)							noLineBreak = true;
            						}
HXLINE( 117)						if ((start < segment1.length)) {
HXLINE( 119)							sub = segment1.substr(start,null());
HXLINE( 120)							{
HXLINE( 120)								int value1 = value.length;
HXDLIN( 120)								textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format,value1,(value.length + sub.length)));
            							}
HXLINE( 121)							value = (value + sub);
HXLINE( 122)							noLineBreak = false;
            						}
            					}
            					else {
HXLINE( 128)						format = formatStack->__get((formatStack->length - (int)1)).StaticCast<  ::openfl::text::TextFormat >()->clone();
HXLINE( 130)						if ((tagEndIndex > (int)-1)) {
HXLINE( 132)							{
HXLINE( 132)								::String _g11 = tagName3.toLowerCase();
HXDLIN( 132)								::String _hx_switch_0 = _g11;
            								if (  (_hx_switch_0==HX_("a",61,00,00,00)) ){
HXLINE( 136)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexHref->match(segment1)) {
HXLINE( 138)										format->url = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexHref);
            									}
HXLINE( 136)									goto _hx_goto_2;
            								}
            								if (  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE( 191)									format->bold = true;
HXDLIN( 191)									goto _hx_goto_2;
            								}
            								if (  (_hx_switch_0==HX_("em",68,58,00,00)) ||  (_hx_switch_0==HX_("i",69,00,00,00)) ){
HXLINE( 199)									format->italic = true;
HXDLIN( 199)									goto _hx_goto_2;
            								}
            								if (  (_hx_switch_0==HX_("font",cf,5d,c0,43)) ){
HXLINE( 159)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexFace->match(segment1)) {
HXLINE( 161)										format->font = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexFace);
            									}
HXLINE( 165)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexColor->match(segment1)) {
HXLINE( 167)										format->color = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + ::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexColor)));
            									}
HXLINE( 171)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexSize->match(segment1)) {
HXLINE( 173)										::String sizeAttr = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexSize);
HXLINE( 174)										 ::Dynamic firstChar = sizeAttr.charCodeAt((int)0);
HXLINE( 176)										bool _hx_tmp3;
HXDLIN( 176)										if (hx::IsNotEq( firstChar,(int)43 )) {
HXLINE( 176)											_hx_tmp3 = hx::IsEq( firstChar,(int)45 );
            										}
            										else {
HXLINE( 176)											_hx_tmp3 = true;
            										}
HXDLIN( 176)										if (_hx_tmp3) {
HXLINE( 178)											 ::openfl::text::TextFormat parentFormat;
HXDLIN( 178)											if ((formatStack->length >= (int)2)) {
HXLINE( 178)												parentFormat = formatStack->__get((formatStack->length - (int)2)).StaticCast<  ::openfl::text::TextFormat >();
            											}
            											else {
HXLINE( 178)												parentFormat = textFormat;
            											}
HXLINE( 179)											 ::Dynamic parentFormat1 = parentFormat->size;
HXDLIN( 179)											format->size = (parentFormat1 + ::Std_obj::parseInt(sizeAttr));
            										}
            										else {
HXLINE( 183)											format->size = ::Std_obj::parseInt(sizeAttr);
            										}
            									}
HXLINE( 157)									goto _hx_goto_2;
            								}
            								if (  (_hx_switch_0==HX_("p",70,00,00,00)) ){
HXLINE( 144)									bool _hx_tmp4;
HXDLIN( 144)									if ((textFormatRanges->get_length() > (int)0)) {
HXLINE( 144)										_hx_tmp4 = !(noLineBreak);
            									}
            									else {
HXLINE( 144)										_hx_tmp4 = false;
            									}
HXDLIN( 144)									if (_hx_tmp4) {
HXLINE( 146)										value = (value + HX_("\n",0a,00,00,00));
            									}
HXLINE( 150)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexAlign->match(segment1)) {
HXLINE( 152)										::String align = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexAlign).toLowerCase();
HXLINE( 153)										format->align = ::openfl::text::_TextFormatAlign::TextFormatAlign_Impl__obj::fromString(align);
            									}
HXLINE( 142)									goto _hx_goto_2;
            								}
            								if (  (_hx_switch_0==HX_("textformat",a4,9b,ea,ff)) ){
HXLINE( 203)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexBlockIndent->match(segment1)) {
HXLINE( 205)										format->blockIndent = ::Std_obj::parseInt(::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexBlockIndent));
            									}
HXLINE( 209)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexIndent->match(segment1)) {
HXLINE( 211)										format->indent = ::Std_obj::parseInt(::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexIndent));
            									}
HXLINE( 215)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexLeading->match(segment1)) {
HXLINE( 217)										format->leading = ::Std_obj::parseInt(::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexLeading));
            									}
HXLINE( 221)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexLeftMargin->match(segment1)) {
HXLINE( 223)										format->leftMargin = ::Std_obj::parseInt(::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexLeftMargin));
            									}
HXLINE( 227)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexRightMargin->match(segment1)) {
HXLINE( 229)										format->rightMargin = ::Std_obj::parseInt(::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexRightMargin));
            									}
HXLINE( 233)									if (::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexTabStops->match(segment1)) {
HXLINE( 235)										::Array< ::String > values = ::openfl::_internal::formats::html::HTMLParser_obj::_hx___getAttributeMatch(::openfl::_internal::formats::html::HTMLParser_obj::_hx___regexTabStops).split(HX_(" ",20,00,00,00));
HXLINE( 236)										::Array< ::Dynamic> tabStops = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 238)										{
HXLINE( 238)											int _g12 = (int)0;
HXDLIN( 238)											while((_g12 < values->length)){
HXLINE( 238)												::String stop = values->__get(_g12);
HXDLIN( 238)												_g12 = (_g12 + (int)1);
HXLINE( 240)												tabStops->push(::Std_obj::parseInt(stop));
            											}
            										}
HXLINE( 244)										format->tabStops = tabStops;
            									}
HXLINE( 201)									goto _hx_goto_2;
            								}
            								if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE( 195)									format->underline = true;
HXDLIN( 195)									goto _hx_goto_2;
            								}
            								_hx_goto_2:;
            							}
HXLINE( 250)							formatStack->push(format);
HXLINE( 251)							tagStack->push(tagName3);
HXLINE( 253)							if ((start < segment1.length)) {
HXLINE( 255)								sub = segment1.substring(start,null());
HXLINE( 256)								{
HXLINE( 256)									int value2 = value.length;
HXDLIN( 256)									textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format,value2,(value.length + sub.length)));
            								}
HXLINE( 257)								value = (value + sub);
HXLINE( 258)								noLineBreak = false;
            							}
            						}
            						else {
HXLINE( 264)							{
HXLINE( 264)								int value3 = value.length;
HXDLIN( 264)								textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format,value3,(value.length + segment1.length)));
            							}
HXLINE( 265)							value = (value + segment1);
HXLINE( 266)							noLineBreak = false;
            						}
            					}
            				}
            			}
HXLINE( 274)			if ((textFormatRanges->get_length() == (int)0)) {
HXLINE( 276)				textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,formatStack->__get((int)0).StaticCast<  ::openfl::text::TextFormat >(),(int)0,(int)0));
            			}
            		}
HXLINE( 282)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HTMLParser_obj,parse,return )

::String HTMLParser_obj::_hx___getAttributeMatch( ::EReg regex){
            	HX_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_289___getAttributeMatch)
HXDLIN( 289)		if (hx::IsNotNull( regex->matched((int)2) )) {
HXDLIN( 289)			return regex->matched((int)2);
            		}
            		else {
HXDLIN( 289)			return regex->matched((int)3);
            		}
HXDLIN( 289)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HTMLParser_obj,_hx___getAttributeMatch,return )


HTMLParser_obj::HTMLParser_obj()
{
}

bool HTMLParser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__regexFace") ) { outValue = ( _hx___regexFace ); return true; }
		if (HX_FIELD_EQ(inName,"__regexHref") ) { outValue = ( _hx___regexHref ); return true; }
		if (HX_FIELD_EQ(inName,"__regexSize") ) { outValue = ( _hx___regexSize ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__regexAlign") ) { outValue = ( _hx___regexAlign ); return true; }
		if (HX_FIELD_EQ(inName,"__regexColor") ) { outValue = ( _hx___regexColor ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__regexIndent") ) { outValue = ( _hx___regexIndent ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__regexHTMLTag") ) { outValue = ( _hx___regexHTMLTag ); return true; }
		if (HX_FIELD_EQ(inName,"__regexLeading") ) { outValue = ( _hx___regexLeading ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__regexBreakTag") ) { outValue = ( _hx___regexBreakTag ); return true; }
		if (HX_FIELD_EQ(inName,"__regexEntities") ) { outValue = ( _hx___regexEntities ); return true; }
		if (HX_FIELD_EQ(inName,"__regexTabStops") ) { outValue = ( _hx___regexTabStops ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__regexLeftMargin") ) { outValue = ( _hx___regexLeftMargin ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__regexBlockIndent") ) { outValue = ( _hx___regexBlockIndent ); return true; }
		if (HX_FIELD_EQ(inName,"__regexRightMargin") ) { outValue = ( _hx___regexRightMargin ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__getAttributeMatch") ) { outValue = _hx___getAttributeMatch_dyn(); return true; }
	}
	return false;
}

bool HTMLParser_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__regexFace") ) { _hx___regexFace=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexHref") ) { _hx___regexHref=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexSize") ) { _hx___regexSize=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__regexAlign") ) { _hx___regexAlign=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexColor") ) { _hx___regexColor=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__regexIndent") ) { _hx___regexIndent=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__regexHTMLTag") ) { _hx___regexHTMLTag=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexLeading") ) { _hx___regexLeading=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__regexBreakTag") ) { _hx___regexBreakTag=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexEntities") ) { _hx___regexEntities=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexTabStops") ) { _hx___regexTabStops=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__regexLeftMargin") ) { _hx___regexLeftMargin=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__regexBlockIndent") ) { _hx___regexBlockIndent=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexRightMargin") ) { _hx___regexRightMargin=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *HTMLParser_obj_sMemberStorageInfo = 0;
static hx::StaticInfo HTMLParser_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexAlign,HX_HCSTRING("__regexAlign","\x9e","\x21","\xd1","\x2d")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexBreakTag,HX_HCSTRING("__regexBreakTag","\xa2","\xf1","\x6b","\xe6")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexBlockIndent,HX_HCSTRING("__regexBlockIndent","\x32","\x61","\xa3","\xa8")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexColor,HX_HCSTRING("__regexColor","\x3c","\x3c","\x9c","\x56")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &HTMLParser_obj::_hx___regexEntities,HX_HCSTRING("__regexEntities","\x08","\x59","\x3f","\x8c")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexFace,HX_HCSTRING("__regexFace","\xe4","\xc7","\x66","\x12")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexHTMLTag,HX_HCSTRING("__regexHTMLTag","\xe8","\x74","\xf4","\x76")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexHref,HX_HCSTRING("__regexHref","\x32","\x1d","\xc6","\x13")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexIndent,HX_HCSTRING("__regexIndent","\x73","\xbf","\x84","\x3f")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexLeading,HX_HCSTRING("__regexLeading","\xdf","\x25","\x4c","\x7d")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexLeftMargin,HX_HCSTRING("__regexLeftMargin","\x1c","\x6e","\x33","\xf3")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexRightMargin,HX_HCSTRING("__regexRightMargin","\xc3","\x30","\xd7","\x98")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexSize,HX_HCSTRING("__regexSize","\x08","\xb4","\x04","\x1b")},
	{hx::fsObject /*::EReg*/ ,(void *) &HTMLParser_obj::_hx___regexTabStops,HX_HCSTRING("__regexTabStops","\x63","\x56","\x64","\xec")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void HTMLParser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HTMLParser_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexAlign,"__regexAlign");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexBreakTag,"__regexBreakTag");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexBlockIndent,"__regexBlockIndent");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexColor,"__regexColor");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexEntities,"__regexEntities");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexFace,"__regexFace");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexHTMLTag,"__regexHTMLTag");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexHref,"__regexHref");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexIndent,"__regexIndent");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexLeading,"__regexLeading");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexLeftMargin,"__regexLeftMargin");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexRightMargin,"__regexRightMargin");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexSize,"__regexSize");
	HX_MARK_MEMBER_NAME(HTMLParser_obj::_hx___regexTabStops,"__regexTabStops");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HTMLParser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexAlign,"__regexAlign");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexBreakTag,"__regexBreakTag");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexBlockIndent,"__regexBlockIndent");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexColor,"__regexColor");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexEntities,"__regexEntities");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexFace,"__regexFace");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexHTMLTag,"__regexHTMLTag");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexHref,"__regexHref");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexIndent,"__regexIndent");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexLeading,"__regexLeading");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexLeftMargin,"__regexLeftMargin");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexRightMargin,"__regexRightMargin");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexSize,"__regexSize");
	HX_VISIT_MEMBER_NAME(HTMLParser_obj::_hx___regexTabStops,"__regexTabStops");
};

#endif

hx::Class HTMLParser_obj::__mClass;

static ::String HTMLParser_obj_sStaticFields[] = {
	HX_HCSTRING("__regexAlign","\x9e","\x21","\xd1","\x2d"),
	HX_HCSTRING("__regexBreakTag","\xa2","\xf1","\x6b","\xe6"),
	HX_HCSTRING("__regexBlockIndent","\x32","\x61","\xa3","\xa8"),
	HX_HCSTRING("__regexColor","\x3c","\x3c","\x9c","\x56"),
	HX_HCSTRING("__regexEntities","\x08","\x59","\x3f","\x8c"),
	HX_HCSTRING("__regexFace","\xe4","\xc7","\x66","\x12"),
	HX_HCSTRING("__regexHTMLTag","\xe8","\x74","\xf4","\x76"),
	HX_HCSTRING("__regexHref","\x32","\x1d","\xc6","\x13"),
	HX_HCSTRING("__regexIndent","\x73","\xbf","\x84","\x3f"),
	HX_HCSTRING("__regexLeading","\xdf","\x25","\x4c","\x7d"),
	HX_HCSTRING("__regexLeftMargin","\x1c","\x6e","\x33","\xf3"),
	HX_HCSTRING("__regexRightMargin","\xc3","\x30","\xd7","\x98"),
	HX_HCSTRING("__regexSize","\x08","\xb4","\x04","\x1b"),
	HX_HCSTRING("__regexTabStops","\x63","\x56","\x64","\xec"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("__getAttributeMatch","\x9f","\x3b","\x2c","\x45"),
	::String(null())
};

void HTMLParser_obj::__register()
{
	hx::Object *dummy = new HTMLParser_obj;
	HTMLParser_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.formats.html.HTMLParser","\x8b","\xff","\x72","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HTMLParser_obj::__GetStatic;
	__mClass->mSetStaticField = &HTMLParser_obj::__SetStatic;
	__mClass->mMarkFunc = HTMLParser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(HTMLParser_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< HTMLParser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HTMLParser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HTMLParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HTMLParser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void HTMLParser_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_17_boot)
HXDLIN(  17)		_hx___regexAlign =  ::EReg_obj::__alloc( HX_CTX ,HX_("align=(\"([^\"]+)\"|'([^']+)')",46,80,3f,0e),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_18_boot)
HXDLIN(  18)		_hx___regexBreakTag =  ::EReg_obj::__alloc( HX_CTX ,HX_("<br\\s*/?>",47,ed,43,f6),HX_("gi",22,5a,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_19_boot)
HXDLIN(  19)		_hx___regexBlockIndent =  ::EReg_obj::__alloc( HX_CTX ,HX_("blockindent=(\"([^\"]+)\"|'([^']+)')",fa,c9,96,24),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_20_boot)
HXDLIN(  20)		_hx___regexColor =  ::EReg_obj::__alloc( HX_CTX ,HX_("color=(\"#([^\"]+)\"|'#([^']+)')",36,15,0f,76),HX_("i",69,00,00,00));
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_21_boot)
HXDLIN(  21)			 ::EReg _hx_tmp =  ::EReg_obj::__alloc( HX_CTX ,HX_("&quot;",2c,d9,81,8f),HX_("g",67,00,00,00));
HXDLIN(  21)			 ::EReg _hx_tmp1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&apos;",22,7f,ca,55),HX_("g",67,00,00,00));
HXDLIN(  21)			 ::EReg _hx_tmp2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&amp;",dd,d4,aa,21),HX_("g",67,00,00,00));
HXDLIN(  21)			 ::EReg _hx_tmp3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&lt;",4d,74,70,19),HX_("g",67,00,00,00));
HXDLIN(  21)			 ::EReg _hx_tmp4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&gt;",08,a9,6c,19),HX_("g",67,00,00,00));
HXDLIN(  21)			return ::Array_obj< ::Dynamic>::__new(6)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4,_hx_tmp4)->init(5, ::EReg_obj::__alloc( HX_CTX ,HX_("&nbsp;",64,13,c2,c8),HX_("g",67,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_21_boot)
HXDLIN(  21)		_hx___regexEntities =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_22_boot)
HXDLIN(  22)		_hx___regexFace =  ::EReg_obj::__alloc( HX_CTX ,HX_("face=(\"([^\"]+)\"|'([^']+)')",1e,00,2b,89),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_23_boot)
HXDLIN(  23)		_hx___regexHTMLTag =  ::EReg_obj::__alloc( HX_CTX ,HX_("<.*?>",97,b4,92,aa),HX_("g",67,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_24_boot)
HXDLIN(  24)		_hx___regexHref =  ::EReg_obj::__alloc( HX_CTX ,HX_("href=(\"([^\"]+)\"|'([^']+)')",ec,3f,eb,b5),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_25_boot)
HXDLIN(  25)		_hx___regexIndent =  ::EReg_obj::__alloc( HX_CTX ,HX_(" indent=(\"([^\"]+)\"|'([^']+)')",4d,db,5b,9f),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_26_boot)
HXDLIN(  26)		_hx___regexLeading =  ::EReg_obj::__alloc( HX_CTX ,HX_("leading=(\"([^\"]+)\"|'([^']+)')",07,25,07,ae),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_27_boot)
HXDLIN(  27)		_hx___regexLeftMargin =  ::EReg_obj::__alloc( HX_CTX ,HX_("leftmargin=(\"([^\"]+)\"|'([^']+)')",f6,e4,c9,11),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_28_boot)
HXDLIN(  28)		_hx___regexRightMargin =  ::EReg_obj::__alloc( HX_CTX ,HX_("rightmargin=(\"([^\"]+)\"|'([^']+)')",4b,8e,21,c0),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_29_boot)
HXDLIN(  29)		_hx___regexSize =  ::EReg_obj::__alloc( HX_CTX ,HX_("size=(\"([^\"]+)\"|'([^']+)')",42,27,be,87),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f7ce69a5a5ff89f9_30_boot)
HXDLIN(  30)		_hx___regexTabStops =  ::EReg_obj::__alloc( HX_CTX ,HX_("tabstops=(\"([^\"]+)\"|'([^']+)')",7d,fe,73,09),HX_("i",69,00,00,00));
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace html
