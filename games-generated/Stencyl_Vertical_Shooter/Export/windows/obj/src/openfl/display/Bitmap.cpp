// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBitmap
#include <openfl/_internal/renderer/context3D/Context3DBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DShape
#include <openfl/_internal/renderer/context3D/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMBitmap
#include <openfl/_internal/renderer/dom/DOMBitmap.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f5857023424199a6_115_new,"openfl.display.Bitmap","new",0x8bc0314b,"openfl.display.Bitmap.new","openfl/display/Bitmap.hx",115,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_134___enterFrame,"openfl.display.Bitmap","__enterFrame",0x534728ca,"openfl.display.Bitmap.__enterFrame","openfl/display/Bitmap.hx",134,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_145___getBounds,"openfl.display.Bitmap","__getBounds",0x13081c76,"openfl.display.Bitmap.__getBounds","openfl/display/Bitmap.hx",145,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_160___hitTest,"openfl.display.Bitmap","__hitTest",0x80f61450,"openfl.display.Bitmap.__hitTest","openfl/display/Bitmap.hx",160,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_193___hitTestMask,"openfl.display.Bitmap","__hitTestMask",0x7acde95c,"openfl.display.Bitmap.__hitTestMask","openfl/display/Bitmap.hx",193,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_213___renderCairo,"openfl.display.Bitmap","__renderCairo",0x941372dd,"openfl.display.Bitmap.__renderCairo","openfl/display/Bitmap.hx",213,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_243___renderCairoMask,"openfl.display.Bitmap","__renderCairoMask",0xba721269,"openfl.display.Bitmap.__renderCairoMask","openfl/display/Bitmap.hx",243,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_248___renderCanvas,"openfl.display.Bitmap","__renderCanvas",0x00421ce3,"openfl.display.Bitmap.__renderCanvas","openfl/display/Bitmap.hx",248,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_276___renderCanvasMask,"openfl.display.Bitmap","__renderCanvasMask",0x68a5376f,"openfl.display.Bitmap.__renderCanvasMask","openfl/display/Bitmap.hx",276,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_281___renderDOM,"openfl.display.Bitmap","__renderDOM",0xfdebb997,"openfl.display.Bitmap.__renderDOM","openfl/display/Bitmap.hx",281,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_306___renderDOMClear,"openfl.display.Bitmap","__renderDOMClear",0xef620476,"openfl.display.Bitmap.__renderDOMClear","openfl/display/Bitmap.hx",306,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_311___renderGL,"openfl.display.Bitmap","__renderGL",0xbc428090,"openfl.display.Bitmap.__renderGL","openfl/display/Bitmap.hx",311,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_339___renderGLMask,"openfl.display.Bitmap","__renderGLMask",0x6c65759c,"openfl.display.Bitmap.__renderGLMask","openfl/display/Bitmap.hx",339,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_344___updateCacheBitmap,"openfl.display.Bitmap","__updateCacheBitmap",0xef053813,"openfl.display.Bitmap.__updateCacheBitmap","openfl/display/Bitmap.hx",344,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_367_get_bitmapData,"openfl.display.Bitmap","get_bitmapData",0x619f7ef7,"openfl.display.Bitmap.get_bitmapData","openfl/display/Bitmap.hx",367,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_372_set_bitmapData,"openfl.display.Bitmap","set_bitmapData",0x81bf676b,"openfl.display.Bitmap.set_bitmapData","openfl/display/Bitmap.hx",372,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_392_get_height,"openfl.display.Bitmap","get_height",0x5901da25,"openfl.display.Bitmap.get_height","openfl/display/Bitmap.hx",392,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_405_set_height,"openfl.display.Bitmap","set_height",0x5c7f7899,"openfl.display.Bitmap.set_height","openfl/display/Bitmap.hx",405,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_425_get_width,"openfl.display.Bitmap","get_width",0x2b347588,"openfl.display.Bitmap.get_width","openfl/display/Bitmap.hx",425,0x461b2743)
HX_LOCAL_STACK_FRAME(_hx_pos_f5857023424199a6_438_set_width,"openfl.display.Bitmap","set_width",0x0e856194,"openfl.display.Bitmap.set_width","openfl/display/Bitmap.hx",438,0x461b2743)
namespace openfl{
namespace display{

void Bitmap_obj::__construct( ::openfl::display::BitmapData bitmapData, ::Dynamic pixelSnapping,hx::Null< bool >  __o_smoothing){
bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_115_new)
HXLINE( 117)		super::__construct();
HXLINE( 119)		this->_hx___bitmapData = bitmapData;
HXLINE( 120)		this->pixelSnapping = pixelSnapping;
HXLINE( 121)		this->smoothing = smoothing;
HXLINE( 123)		if (hx::IsNull( pixelSnapping )) {
HXLINE( 125)			this->pixelSnapping = (int)1;
            		}
            	}

Dynamic Bitmap_obj::__CreateEmpty() { return new Bitmap_obj; }

void *Bitmap_obj::_hx_vtable = 0;

Dynamic Bitmap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Bitmap_obj > _hx_result = new Bitmap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Bitmap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3b5602c1;
	}
}

void Bitmap_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_134___enterFrame)
HXDLIN( 134)		bool _hx_tmp;
HXDLIN( 134)		bool _hx_tmp1;
HXDLIN( 134)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXDLIN( 134)			_hx_tmp1 = hx::IsNotNull( this->_hx___bitmapData->image );
            		}
            		else {
HXDLIN( 134)			_hx_tmp1 = false;
            		}
HXDLIN( 134)		if (_hx_tmp1) {
HXDLIN( 134)			_hx_tmp = (this->_hx___bitmapData->image->version != this->_hx___imageVersion);
            		}
            		else {
HXDLIN( 134)			_hx_tmp = false;
            		}
HXDLIN( 134)		if (_hx_tmp) {
HXLINE( 136)			if (!(this->_hx___renderDirty)) {
HXLINE( 136)				this->_hx___renderDirty = true;
HXDLIN( 136)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


void Bitmap_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_145___getBounds)
HXDLIN( 145)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 147)			 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 148)			bounds->setTo((int)0,(int)0,this->_hx___bitmapData->width,this->_hx___bitmapData->height);
HXLINE( 149)			bounds->_hx___transform(bounds,matrix);
HXLINE( 151)			rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE( 153)			::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            		}
            	}


bool Bitmap_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_160___hitTest)
HXLINE( 162)		bool _hx_tmp;
HXDLIN( 162)		bool _hx_tmp1;
HXDLIN( 162)		if (!(!(hitObject->get_visible()))) {
HXLINE( 162)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 162)			_hx_tmp1 = true;
            		}
HXDLIN( 162)		if (!(_hx_tmp1)) {
HXLINE( 162)			_hx_tmp = hx::IsNull( this->_hx___bitmapData );
            		}
            		else {
HXLINE( 162)			_hx_tmp = true;
            		}
HXDLIN( 162)		if (_hx_tmp) {
HXLINE( 162)			return false;
            		}
HXLINE( 163)		bool _hx_tmp2;
HXDLIN( 163)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 163)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 163)			_hx_tmp2 = false;
            		}
HXDLIN( 163)		if (_hx_tmp2) {
HXLINE( 163)			return false;
            		}
HXLINE( 165)		this->_hx___getRenderTransform();
HXLINE( 167)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN( 167)		Float norm = (_this->a * _this->d);
HXDLIN( 167)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 167)		Float px;
HXDLIN( 167)		if ((norm1 == (int)0)) {
HXLINE( 167)			px = -(_this->tx);
            		}
            		else {
HXLINE( 167)			Float _this1 = _this->c;
HXDLIN( 167)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN( 167)			Float _this2 = _this->d;
HXDLIN( 167)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE( 168)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN( 168)		Float norm2 = (_this3->a * _this3->d);
HXDLIN( 168)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN( 168)		Float py;
HXDLIN( 168)		if ((norm3 == (int)0)) {
HXLINE( 168)			py = -(_this3->ty);
            		}
            		else {
HXLINE( 168)			Float _this4 = _this3->a;
HXDLIN( 168)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN( 168)			Float _this5 = _this3->b;
HXDLIN( 168)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE( 170)		bool _hx_tmp3;
HXDLIN( 170)		bool _hx_tmp4;
HXDLIN( 170)		bool _hx_tmp5;
HXDLIN( 170)		if ((px > (int)0)) {
HXLINE( 170)			_hx_tmp5 = (py > (int)0);
            		}
            		else {
HXLINE( 170)			_hx_tmp5 = false;
            		}
HXDLIN( 170)		if (_hx_tmp5) {
HXLINE( 170)			_hx_tmp4 = (px <= this->_hx___bitmapData->width);
            		}
            		else {
HXLINE( 170)			_hx_tmp4 = false;
            		}
HXDLIN( 170)		if (_hx_tmp4) {
HXLINE( 170)			_hx_tmp3 = (py <= this->_hx___bitmapData->height);
            		}
            		else {
HXLINE( 170)			_hx_tmp3 = false;
            		}
HXDLIN( 170)		if (_hx_tmp3) {
HXLINE( 172)			bool _hx_tmp6;
HXDLIN( 172)			if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 172)				_hx_tmp6 = !(this->_hx___scrollRect->contains(px,py));
            			}
            			else {
HXLINE( 172)				_hx_tmp6 = false;
            			}
HXDLIN( 172)			if (_hx_tmp6) {
HXLINE( 174)				return false;
            			}
HXLINE( 178)			bool _hx_tmp7;
HXDLIN( 178)			if (hx::IsNotNull( stack )) {
HXLINE( 178)				_hx_tmp7 = !(interactiveOnly);
            			}
            			else {
HXLINE( 178)				_hx_tmp7 = false;
            			}
HXDLIN( 178)			if (_hx_tmp7) {
HXLINE( 180)				stack->push(hitObject);
            			}
HXLINE( 184)			return true;
            		}
HXLINE( 188)		return false;
            	}


bool Bitmap_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_193___hitTestMask)
HXLINE( 195)		if (hx::IsNull( this->_hx___bitmapData )) {
HXLINE( 195)			return false;
            		}
HXLINE( 197)		this->_hx___getRenderTransform();
HXLINE( 199)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN( 199)		Float norm = (_this->a * _this->d);
HXDLIN( 199)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 199)		Float px;
HXDLIN( 199)		if ((norm1 == (int)0)) {
HXLINE( 199)			px = -(_this->tx);
            		}
            		else {
HXLINE( 199)			Float _this1 = _this->c;
HXDLIN( 199)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN( 199)			Float _this2 = _this->d;
HXDLIN( 199)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE( 200)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN( 200)		Float norm2 = (_this3->a * _this3->d);
HXDLIN( 200)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN( 200)		Float py;
HXDLIN( 200)		if ((norm3 == (int)0)) {
HXLINE( 200)			py = -(_this3->ty);
            		}
            		else {
HXLINE( 200)			Float _this4 = _this3->a;
HXDLIN( 200)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN( 200)			Float _this5 = _this3->b;
HXDLIN( 200)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE( 202)		bool _hx_tmp;
HXDLIN( 202)		bool _hx_tmp1;
HXDLIN( 202)		bool _hx_tmp2;
HXDLIN( 202)		if ((px > (int)0)) {
HXLINE( 202)			_hx_tmp2 = (py > (int)0);
            		}
            		else {
HXLINE( 202)			_hx_tmp2 = false;
            		}
HXDLIN( 202)		if (_hx_tmp2) {
HXLINE( 202)			_hx_tmp1 = (px <= this->_hx___bitmapData->width);
            		}
            		else {
HXLINE( 202)			_hx_tmp1 = false;
            		}
HXDLIN( 202)		if (_hx_tmp1) {
HXLINE( 202)			_hx_tmp = (py <= this->_hx___bitmapData->height);
            		}
            		else {
HXLINE( 202)			_hx_tmp = false;
            		}
HXDLIN( 202)		if (_hx_tmp) {
HXLINE( 204)			return true;
            		}
HXLINE( 208)		return false;
            	}


void Bitmap_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_213___renderCairo)
HXLINE( 216)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 218)		bool _hx_tmp;
HXDLIN( 218)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 218)			_hx_tmp = hx::IsNotNull( this->_hx___bitmapData->image );
            		}
            		else {
HXLINE( 218)			_hx_tmp = false;
            		}
HXDLIN( 218)		if (_hx_tmp) {
HXLINE( 220)			this->_hx___imageVersion = this->_hx___bitmapData->image->version;
            		}
HXLINE( 224)		bool _hx_tmp1;
HXDLIN( 224)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 224)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 224)			_hx_tmp1 = false;
            		}
HXDLIN( 224)		if (_hx_tmp1) {
HXLINE( 226)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
HXDLIN( 226)			if (!(!(bitmap->_hx___renderable))) {
HXLINE( 226)				Float alpha = renderer->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN( 226)				bool _hx_tmp2;
HXDLIN( 226)				bool _hx_tmp3;
HXDLIN( 226)				if ((alpha > (int)0)) {
HXLINE( 226)					_hx_tmp3 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE( 226)					_hx_tmp3 = false;
            				}
HXDLIN( 226)				if (_hx_tmp3) {
HXLINE( 226)					_hx_tmp2 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 226)					_hx_tmp2 = false;
            				}
HXDLIN( 226)				if (_hx_tmp2) {
HXLINE( 226)					 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXDLIN( 226)					renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 226)					renderer->_hx___pushMaskObject(bitmap,null());
HXDLIN( 226)					renderer->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN( 226)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 226)					if (hx::IsNotNull( surface )) {
HXLINE( 226)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 226)						int _hx_tmp4;
HXDLIN( 226)						bool _hx_tmp5;
HXDLIN( 226)						if (renderer->_hx___allowSmoothing) {
HXLINE( 226)							_hx_tmp5 = bitmap->smoothing;
            						}
            						else {
HXLINE( 226)							_hx_tmp5 = false;
            						}
HXDLIN( 226)						if (_hx_tmp5) {
HXLINE( 226)							_hx_tmp4 = (int)1;
            						}
            						else {
HXLINE( 226)							_hx_tmp4 = (int)3;
            						}
HXDLIN( 226)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp4);
HXDLIN( 226)						cairo->set_source(pattern);
HXDLIN( 226)						if ((alpha == (int)1)) {
HXLINE( 226)							cairo->paint();
            						}
            						else {
HXLINE( 226)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 226)					renderer->_hx___popMaskObject(bitmap,null());
            				}
            			}
            		}
            		else {
HXLINE( 230)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
HXLINE( 231)			if (!(!(this->_hx___renderable))) {
HXLINE( 231)				Float alpha1 = renderer->_hx___getAlpha(this->_hx___worldAlpha);
HXDLIN( 231)				bool _hx_tmp6;
HXDLIN( 231)				bool _hx_tmp7;
HXDLIN( 231)				if ((alpha1 > (int)0)) {
HXLINE( 231)					_hx_tmp7 = hx::IsNotNull( this->_hx___bitmapData );
            				}
            				else {
HXLINE( 231)					_hx_tmp7 = false;
            				}
HXDLIN( 231)				if (_hx_tmp7) {
HXLINE( 231)					_hx_tmp6 = this->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 231)					_hx_tmp6 = false;
            				}
HXDLIN( 231)				if (_hx_tmp6) {
HXLINE( 231)					 ::lime::graphics::cairo::Cairo cairo1 = renderer->cairo;
HXDLIN( 231)					renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN( 231)					renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 231)					renderer->applyMatrix(this->_hx___renderTransform,cairo1);
HXDLIN( 231)					 ::Dynamic surface1 = this->_hx___bitmapData->getSurface();
HXDLIN( 231)					if (hx::IsNotNull( surface1 )) {
HXLINE( 231)						 ::Dynamic pattern1 = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface1);
HXDLIN( 231)						int _hx_tmp8;
HXDLIN( 231)						bool _hx_tmp9;
HXDLIN( 231)						if (renderer->_hx___allowSmoothing) {
HXLINE( 231)							_hx_tmp9 = this->smoothing;
            						}
            						else {
HXLINE( 231)							_hx_tmp9 = false;
            						}
HXDLIN( 231)						if (_hx_tmp9) {
HXLINE( 231)							_hx_tmp8 = (int)1;
            						}
            						else {
HXLINE( 231)							_hx_tmp8 = (int)3;
            						}
HXDLIN( 231)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern1,_hx_tmp8);
HXDLIN( 231)						cairo1->set_source(pattern1);
HXDLIN( 231)						if ((alpha1 == (int)1)) {
HXLINE( 231)							cairo1->paint();
            						}
            						else {
HXLINE( 231)							cairo1->paintWithAlpha(alpha1);
            						}
            					}
HXDLIN( 231)					renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
            				}
            			}
            		}
HXLINE( 235)		this->_hx___renderEvent(renderer);
            	}


void Bitmap_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_243___renderCairoMask)
HXDLIN( 243)		 ::lime::graphics::cairo::Cairo renderer1 = renderer->cairo;
HXDLIN( 243)		Float _hx_tmp = this->get_width();
HXDLIN( 243)		renderer1->rectangle((int)0,(int)0,_hx_tmp,this->get_height());
            	}


void Bitmap_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_248___renderCanvas)
HXLINE( 250)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 252)		bool _hx_tmp;
HXDLIN( 252)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 252)			_hx_tmp = hx::IsNotNull( this->_hx___bitmapData->image );
            		}
            		else {
HXLINE( 252)			_hx_tmp = false;
            		}
HXDLIN( 252)		if (_hx_tmp) {
HXLINE( 254)			this->_hx___imageVersion = this->_hx___bitmapData->image->version;
            		}
HXLINE( 258)		bool _hx_tmp1;
HXDLIN( 258)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 258)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 258)			_hx_tmp1 = false;
            		}
HXDLIN( 258)		if (_hx_tmp1) {
HXLINE( 260)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
            		}
HXLINE( 269)		this->_hx___renderEvent(renderer);
            	}


void Bitmap_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_276___renderCanvasMask)
HXDLIN( 276)		 ::Dynamic renderer1 =  ::Dynamic(renderer->context->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic));
HXDLIN( 276)		Float _hx_tmp = this->get_width();
HXDLIN( 276)		renderer1((int)0,(int)0,_hx_tmp,this->get_height());
            	}


void Bitmap_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_281___renderDOM)
HXLINE( 283)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 285)		bool _hx_tmp;
HXDLIN( 285)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 285)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 285)			_hx_tmp = false;
            		}
HXDLIN( 285)		if (_hx_tmp) {
HXLINE( 287)			this->_hx___renderDOMClear(renderer);
HXLINE( 288)			this->_hx___cacheBitmap->stage = this->stage;
HXLINE( 290)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
            		}
HXLINE( 299)		this->_hx___renderEvent(renderer);
            	}


void Bitmap_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_306___renderDOMClear)
HXDLIN( 306)		::openfl::_internal::renderer::dom::DOMBitmap_obj::clear(hx::ObjectPtr<OBJ_>(this),renderer);
            	}


void Bitmap_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_311___renderGL)
HXLINE( 313)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 315)		bool _hx_tmp;
HXDLIN( 315)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 315)			_hx_tmp = hx::IsNotNull( this->_hx___bitmapData->image );
            		}
            		else {
HXLINE( 315)			_hx_tmp = false;
            		}
HXDLIN( 315)		if (_hx_tmp) {
HXLINE( 317)			this->_hx___imageVersion = this->_hx___bitmapData->image->version;
            		}
HXLINE( 321)		bool _hx_tmp1;
HXDLIN( 321)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 321)			_hx_tmp1 = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 321)			_hx_tmp1 = false;
            		}
HXDLIN( 321)		if (_hx_tmp1) {
HXLINE( 323)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(this->_hx___cacheBitmap,renderer);
            		}
            		else {
HXLINE( 327)			bool _hx_tmp2;
HXDLIN( 327)			if (hx::IsNull( this->opaqueBackground )) {
HXLINE( 327)				_hx_tmp2 = hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE( 327)				_hx_tmp2 = false;
            			}
HXDLIN( 327)			if (!(_hx_tmp2)) {
HXLINE( 327)				bool _hx_tmp3;
HXDLIN( 327)				if (!(!(this->_hx___renderable))) {
HXLINE( 327)					_hx_tmp3 = (this->_hx___worldAlpha <= (int)0);
            				}
            				else {
HXLINE( 327)					_hx_tmp3 = true;
            				}
HXDLIN( 327)				if (!(_hx_tmp3)) {
HXLINE( 327)					bool _hx_tmp4;
HXDLIN( 327)					bool _hx_tmp5;
HXDLIN( 327)					bool _hx_tmp6;
HXDLIN( 327)					if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE( 327)						_hx_tmp6 = !(this->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE( 327)						_hx_tmp6 = false;
            					}
HXDLIN( 327)					if (_hx_tmp6) {
HXLINE( 327)						_hx_tmp5 = (this->get_width() > (int)0);
            					}
            					else {
HXLINE( 327)						_hx_tmp5 = false;
            					}
HXDLIN( 327)					if (_hx_tmp5) {
HXLINE( 327)						_hx_tmp4 = (this->get_height() > (int)0);
            					}
            					else {
HXLINE( 327)						_hx_tmp4 = false;
            					}
HXDLIN( 327)					if (_hx_tmp4) {
HXLINE( 327)						renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN( 327)						renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 327)						 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXDLIN( 327)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN( 327)						Float _hx_tmp7 = this->get_width();
HXDLIN( 327)						rect->setTo((int)0,(int)0,_hx_tmp7,this->get_height());
HXDLIN( 327)						renderer->_hx___pushMaskRect(rect,this->_hx___renderTransform);
HXDLIN( 327)						int color = this->opaqueBackground;
HXDLIN( 327)						context->clear(((Float)((int)hx::UShr(color,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color & (int)(int)255) / (Float)(int)255),(int)1,(int)0,(int)0,(int)1);
HXDLIN( 327)						renderer->_hx___popMaskRect();
HXDLIN( 327)						renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 327)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN( 327)					if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 327)						::openfl::_internal::renderer::context3D::Context3DShape_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            					}
            				}
            			}
HXLINE( 328)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE( 332)		this->_hx___renderEvent(renderer);
            	}


void Bitmap_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_339___renderGLMask)
HXDLIN( 339)		::openfl::_internal::renderer::context3D::Context3DBitmap_obj::renderMask(hx::ObjectPtr<OBJ_>(this),renderer);
            	}


bool Bitmap_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObjectRenderer renderer,bool force){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_344___updateCacheBitmap)
HXLINE( 349)		bool _hx_tmp;
HXDLIN( 349)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 349)			bool _hx_tmp1;
HXDLIN( 349)			if (hx::IsNull( this->_hx___filters )) {
HXLINE( 349)				_hx_tmp1 = (renderer->_hx___type == HX_("opengl",6f,64,94,21));
            			}
            			else {
HXLINE( 349)				_hx_tmp1 = false;
            			}
HXDLIN( 349)			if (_hx_tmp1) {
HXLINE( 349)				_hx_tmp = hx::IsNull( this->_hx___cacheBitmap );
            			}
            			else {
HXLINE( 349)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 349)			_hx_tmp = true;
            		}
HXDLIN( 349)		if (_hx_tmp) {
HXLINE( 349)			return false;
            		}
HXLINE( 350)		bool _hx_tmp2;
HXDLIN( 350)		if (hx::IsNotNull( this->_hx___bitmapData->image )) {
HXLINE( 350)			_hx_tmp2 = (this->_hx___bitmapData->image->version != this->_hx___imageVersion);
            		}
            		else {
HXLINE( 350)			_hx_tmp2 = false;
            		}
HXDLIN( 350)		return this->super::_hx___updateCacheBitmap(renderer,_hx_tmp2);
            	}


 ::openfl::display::BitmapData Bitmap_obj::get_bitmapData(){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_367_get_bitmapData)
HXDLIN( 367)		return this->_hx___bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bitmap_obj,get_bitmapData,return )

 ::openfl::display::BitmapData Bitmap_obj::set_bitmapData( ::openfl::display::BitmapData value){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_372_set_bitmapData)
HXLINE( 374)		this->_hx___bitmapData = value;
HXLINE( 375)		this->smoothing = false;
HXLINE( 377)		if (!(this->_hx___renderDirty)) {
HXLINE( 377)			this->_hx___renderDirty = true;
HXDLIN( 377)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 379)		bool _hx_tmp = hx::IsNotNull( this->_hx___filters );
HXLINE( 385)		this->_hx___imageVersion = (int)-1;
HXLINE( 387)		return this->_hx___bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bitmap_obj,set_bitmapData,return )

Float Bitmap_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_392_get_height)
HXLINE( 394)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 396)			int _hx_tmp = this->_hx___bitmapData->height;
HXDLIN( 396)			return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            		}
HXLINE( 400)		return (int)0;
            	}


Float Bitmap_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_405_set_height)
HXLINE( 407)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 409)			if ((value != this->_hx___bitmapData->height)) {
HXLINE( 411)				if (!(this->_hx___renderDirty)) {
HXLINE( 411)					this->_hx___renderDirty = true;
HXDLIN( 411)					this->_hx___setParentRenderDirty();
            				}
HXLINE( 412)				this->set_scaleY(((Float)value / (Float)this->_hx___bitmapData->height));
            			}
HXLINE( 416)			return value;
            		}
HXLINE( 420)		return (int)0;
            	}


Float Bitmap_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_425_get_width)
HXLINE( 427)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 429)			int _hx_tmp = this->_hx___bitmapData->width;
HXDLIN( 429)			return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            		}
HXLINE( 433)		return (int)0;
            	}


Float Bitmap_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_f5857023424199a6_438_set_width)
HXLINE( 440)		if (hx::IsNotNull( this->_hx___bitmapData )) {
HXLINE( 442)			if ((value != this->_hx___bitmapData->width)) {
HXLINE( 444)				if (!(this->_hx___renderDirty)) {
HXLINE( 444)					this->_hx___renderDirty = true;
HXDLIN( 444)					this->_hx___setParentRenderDirty();
            				}
HXLINE( 445)				this->set_scaleX(((Float)value / (Float)this->_hx___bitmapData->width));
            			}
HXLINE( 449)			return value;
            		}
HXLINE( 453)		return (int)0;
            	}



hx::ObjectPtr< Bitmap_obj > Bitmap_obj::__new( ::openfl::display::BitmapData bitmapData, ::Dynamic pixelSnapping,hx::Null< bool >  __o_smoothing) {
	hx::ObjectPtr< Bitmap_obj > __this = new Bitmap_obj();
	__this->__construct(bitmapData,pixelSnapping,__o_smoothing);
	return __this;
}

hx::ObjectPtr< Bitmap_obj > Bitmap_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::BitmapData bitmapData, ::Dynamic pixelSnapping,hx::Null< bool >  __o_smoothing) {
	Bitmap_obj *__this = (Bitmap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Bitmap_obj), true, "openfl.display.Bitmap"));
	*(void **)__this = Bitmap_obj::_hx_vtable;
	__this->__construct(bitmapData,pixelSnapping,__o_smoothing);
	return __this;
}

Bitmap_obj::Bitmap_obj()
{
}

void Bitmap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Bitmap);
	HX_MARK_MEMBER_NAME(pixelSnapping,"pixelSnapping");
	HX_MARK_MEMBER_NAME(smoothing,"smoothing");
	HX_MARK_MEMBER_NAME(_hx___bitmapData,"__bitmapData");
	HX_MARK_MEMBER_NAME(_hx___imageVersion,"__imageVersion");
	 ::openfl::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Bitmap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pixelSnapping,"pixelSnapping");
	HX_VISIT_MEMBER_NAME(smoothing,"smoothing");
	HX_VISIT_MEMBER_NAME(_hx___bitmapData,"__bitmapData");
	HX_VISIT_MEMBER_NAME(_hx___imageVersion,"__imageVersion");
	 ::openfl::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Bitmap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { return hx::Val( smoothing ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bitmapData() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bitmapData") ) { return hx::Val( _hx___bitmapData ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pixelSnapping") ) { return hx::Val( pixelSnapping ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__imageVersion") ) { return hx::Val( _hx___imageVersion ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bitmapData") ) { return hx::Val( get_bitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bitmapData") ) { return hx::Val( set_bitmapData_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Bitmap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { smoothing=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bitmapData(inValue.Cast<  ::openfl::display::BitmapData >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bitmapData") ) { _hx___bitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pixelSnapping") ) { pixelSnapping=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__imageVersion") ) { _hx___imageVersion=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bitmap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bitmapData","\xb9","\xb5","\xc0","\x33"));
	outFields->push(HX_HCSTRING("pixelSnapping","\x62","\xae","\xa1","\xb8"));
	outFields->push(HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"));
	outFields->push(HX_HCSTRING("__bitmapData","\xd9","\x30","\x54","\x6c"));
	outFields->push(HX_HCSTRING("__imageVersion","\x1d","\xe4","\x7a","\x8d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Bitmap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Bitmap_obj,pixelSnapping),HX_HCSTRING("pixelSnapping","\x62","\xae","\xa1","\xb8")},
	{hx::fsBool,(int)offsetof(Bitmap_obj,smoothing),HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Bitmap_obj,_hx___bitmapData),HX_HCSTRING("__bitmapData","\xd9","\x30","\x54","\x6c")},
	{hx::fsInt,(int)offsetof(Bitmap_obj,_hx___imageVersion),HX_HCSTRING("__imageVersion","\x1d","\xe4","\x7a","\x8d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Bitmap_obj_sStaticStorageInfo = 0;
#endif

static ::String Bitmap_obj_sMemberFields[] = {
	HX_HCSTRING("pixelSnapping","\x62","\xae","\xa1","\xb8"),
	HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"),
	HX_HCSTRING("__bitmapData","\xd9","\x30","\x54","\x6c"),
	HX_HCSTRING("__imageVersion","\x1d","\xe4","\x7a","\x8d"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__updateCacheBitmap","\x28","\x11","\x07","\x27"),
	HX_HCSTRING("get_bitmapData","\x02","\x3e","\xb6","\xa9"),
	HX_HCSTRING("set_bitmapData","\x76","\x26","\xd6","\xc9"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	::String(null()) };

static void Bitmap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Bitmap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Bitmap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Bitmap_obj::__mClass,"__mClass");
};

#endif

hx::Class Bitmap_obj::__mClass;

void Bitmap_obj::__register()
{
	hx::Object *dummy = new Bitmap_obj;
	Bitmap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Bitmap","\xd9","\x2f","\x4d","\x7b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Bitmap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Bitmap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Bitmap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Bitmap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bitmap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bitmap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
