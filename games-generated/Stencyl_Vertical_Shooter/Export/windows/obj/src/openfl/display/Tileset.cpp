// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_display__Tileset_TileData
#include <openfl/display/_Tileset/TileData.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b61decb5082045e_43_new,"openfl.display.Tileset","new",0x154abbfc,"openfl.display.Tileset.new","openfl/display/Tileset.hx",43,0x8bc15676)
HX_LOCAL_STACK_FRAME(_hx_pos_7b61decb5082045e_61_addRect,"openfl.display.Tileset","addRect",0x4caf7981,"openfl.display.Tileset.addRect","openfl/display/Tileset.hx",61,0x8bc15676)
HX_LOCAL_STACK_FRAME(_hx_pos_7b61decb5082045e_79_clone,"openfl.display.Tileset","clone",0xb9a11df9,"openfl.display.Tileset.clone","openfl/display/Tileset.hx",79,0x8bc15676)
HX_LOCAL_STACK_FRAME(_hx_pos_7b61decb5082045e_100_hasRect,"openfl.display.Tileset","hasRect",0xdfb6573a,"openfl.display.Tileset.hasRect","openfl/display/Tileset.hx",100,0x8bc15676)
HX_LOCAL_STACK_FRAME(_hx_pos_7b61decb5082045e_117_getRect,"openfl.display.Tileset","getRect",0xe2f4e676,"openfl.display.Tileset.getRect","openfl/display/Tileset.hx",117,0x8bc15676)
HX_LOCAL_STACK_FRAME(_hx_pos_7b61decb5082045e_130_getRectID,"openfl.display.Tileset","getRectID",0x36d42fd1,"openfl.display.Tileset.getRectID","openfl/display/Tileset.hx",130,0x8bc15676)
HX_LOCAL_STACK_FRAME(_hx_pos_7b61decb5082045e_160_get_bitmapData,"openfl.display.Tileset","get_bitmapData",0x36c7ffe6,"openfl.display.Tileset.get_bitmapData","openfl/display/Tileset.hx",160,0x8bc15676)
HX_LOCAL_STACK_FRAME(_hx_pos_7b61decb5082045e_165_set_bitmapData,"openfl.display.Tileset","set_bitmapData",0x56e7e85a,"openfl.display.Tileset.set_bitmapData","openfl/display/Tileset.hx",165,0x8bc15676)
HX_LOCAL_STACK_FRAME(_hx_pos_7b61decb5082045e_180_get_numRects,"openfl.display.Tileset","get_numRects",0x7e9abb96,"openfl.display.Tileset.get_numRects","openfl/display/Tileset.hx",180,0x8bc15676)
namespace openfl{
namespace display{

void Tileset_obj::__construct( ::openfl::display::BitmapData bitmapData,::Array< ::Dynamic> rects){
            	HX_GC_STACKFRAME(&_hx_pos_7b61decb5082045e_43_new)
HXLINE(  45)		this->_hx___bitmapData = bitmapData;
HXLINE(  46)		int length = null();
HXDLIN(  46)		bool fixed = null();
HXDLIN(  46)		this->rectData =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE(  48)		this->_hx___data = ::Array_obj< ::Dynamic>::__new();
HXLINE(  50)		if (hx::IsNotNull( rects )) {
HXLINE(  52)			int _g = (int)0;
HXDLIN(  52)			while((_g < rects->length)){
HXLINE(  52)				 ::openfl::geom::Rectangle rect = rects->__get(_g).StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN(  52)				_g = (_g + (int)1);
HXLINE(  53)				this->addRect(rect);
            			}
            		}
            	}

Dynamic Tileset_obj::__CreateEmpty() { return new Tileset_obj; }

void *Tileset_obj::_hx_vtable = 0;

Dynamic Tileset_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tileset_obj > _hx_result = new Tileset_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Tileset_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x09a41eea;
}

int Tileset_obj::addRect( ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_7b61decb5082045e_61_addRect)
HXLINE(  63)		if (hx::IsNull( rect )) {
HXLINE(  63)			return (int)-1;
            		}
HXLINE(  65)		this->rectData->push(rect->x);
HXLINE(  66)		this->rectData->push(rect->y);
HXLINE(  67)		this->rectData->push(rect->width);
HXLINE(  68)		this->rectData->push(rect->height);
HXLINE(  70)		 ::openfl::display::_Tileset::TileData tileData =  ::openfl::display::_Tileset::TileData_obj::__alloc( HX_CTX ,rect);
HXLINE(  71)		tileData->_hx___update(this->_hx___bitmapData);
HXLINE(  72)		this->_hx___data->push(tileData);
HXLINE(  74)		return (this->_hx___data->length - (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tileset_obj,addRect,return )

 ::openfl::display::Tileset Tileset_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_7b61decb5082045e_79_clone)
HXLINE(  81)		 ::openfl::display::Tileset tileset =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,this->_hx___bitmapData,null());
HXLINE(  82)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  84)		{
HXLINE(  84)			int _g = (int)0;
HXDLIN(  84)			::Array< ::Dynamic> _g1 = this->_hx___data;
HXDLIN(  84)			while((_g < _g1->length)){
HXLINE(  84)				 ::openfl::display::_Tileset::TileData tileData = _g1->__get(_g).StaticCast<  ::openfl::display::_Tileset::TileData >();
HXDLIN(  84)				_g = (_g + (int)1);
HXLINE(  86)				rect->setTo(tileData->x,tileData->y,tileData->width,tileData->height);
HXLINE(  87)				tileset->addRect(rect);
            			}
            		}
HXLINE(  92)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(  95)		return tileset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tileset_obj,clone,return )

bool Tileset_obj::hasRect( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_7b61decb5082045e_100_hasRect)
HXLINE( 102)		{
HXLINE( 102)			int _g = (int)0;
HXDLIN( 102)			::Array< ::Dynamic> _g1 = this->_hx___data;
HXDLIN( 102)			while((_g < _g1->length)){
HXLINE( 102)				 ::openfl::display::_Tileset::TileData tileData = _g1->__get(_g).StaticCast<  ::openfl::display::_Tileset::TileData >();
HXDLIN( 102)				_g = (_g + (int)1);
HXLINE( 104)				bool _hx_tmp;
HXDLIN( 104)				bool _hx_tmp1;
HXDLIN( 104)				bool _hx_tmp2;
HXDLIN( 104)				if ((rect->x == tileData->x)) {
HXLINE( 104)					_hx_tmp2 = (rect->y == tileData->y);
            				}
            				else {
HXLINE( 104)					_hx_tmp2 = false;
            				}
HXDLIN( 104)				if (_hx_tmp2) {
HXLINE( 104)					_hx_tmp1 = (rect->width == tileData->height);
            				}
            				else {
HXLINE( 104)					_hx_tmp1 = false;
            				}
HXDLIN( 104)				if (_hx_tmp1) {
HXLINE( 104)					_hx_tmp = (rect->height == tileData->height);
            				}
            				else {
HXLINE( 104)					_hx_tmp = false;
            				}
HXDLIN( 104)				if (_hx_tmp) {
HXLINE( 106)					return true;
            				}
            			}
            		}
HXLINE( 112)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tileset_obj,hasRect,return )

 ::openfl::geom::Rectangle Tileset_obj::getRect(int id){
            	HX_GC_STACKFRAME(&_hx_pos_7b61decb5082045e_117_getRect)
HXLINE( 119)		bool _hx_tmp;
HXDLIN( 119)		if ((id < this->_hx___data->length)) {
HXLINE( 119)			_hx_tmp = (id >= (int)0);
            		}
            		else {
HXLINE( 119)			_hx_tmp = false;
            		}
HXDLIN( 119)		if (_hx_tmp) {
HXLINE( 121)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,this->_hx___data->__get(id).StaticCast<  ::openfl::display::_Tileset::TileData >()->x,this->_hx___data->__get(id).StaticCast<  ::openfl::display::_Tileset::TileData >()->y,this->_hx___data->__get(id).StaticCast<  ::openfl::display::_Tileset::TileData >()->width,this->_hx___data->__get(id).StaticCast<  ::openfl::display::_Tileset::TileData >()->height);
            		}
HXLINE( 125)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tileset_obj,getRect,return )

 ::Dynamic Tileset_obj::getRectID( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_7b61decb5082045e_130_getRectID)
HXLINE( 132)		 ::openfl::display::_Tileset::TileData tileData;
HXLINE( 134)		{
HXLINE( 134)			int _g1 = (int)0;
HXDLIN( 134)			int _g = this->_hx___data->length;
HXDLIN( 134)			while((_g1 < _g)){
HXLINE( 134)				_g1 = (_g1 + (int)1);
HXDLIN( 134)				int i = (_g1 - (int)1);
HXLINE( 136)				tileData = this->_hx___data->__get(i).StaticCast<  ::openfl::display::_Tileset::TileData >();
HXLINE( 138)				bool _hx_tmp;
HXDLIN( 138)				bool _hx_tmp1;
HXDLIN( 138)				bool _hx_tmp2;
HXDLIN( 138)				if ((rect->x == tileData->x)) {
HXLINE( 138)					_hx_tmp2 = (rect->y == tileData->y);
            				}
            				else {
HXLINE( 138)					_hx_tmp2 = false;
            				}
HXDLIN( 138)				if (_hx_tmp2) {
HXLINE( 138)					_hx_tmp1 = (rect->width == tileData->height);
            				}
            				else {
HXLINE( 138)					_hx_tmp1 = false;
            				}
HXDLIN( 138)				if (_hx_tmp1) {
HXLINE( 138)					_hx_tmp = (rect->height == tileData->height);
            				}
            				else {
HXLINE( 138)					_hx_tmp = false;
            				}
HXDLIN( 138)				if (_hx_tmp) {
HXLINE( 140)					return i;
            				}
            			}
            		}
HXLINE( 146)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tileset_obj,getRectID,return )

 ::openfl::display::BitmapData Tileset_obj::get_bitmapData(){
            	HX_STACKFRAME(&_hx_pos_7b61decb5082045e_160_get_bitmapData)
HXDLIN( 160)		return this->_hx___bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tileset_obj,get_bitmapData,return )

 ::openfl::display::BitmapData Tileset_obj::set_bitmapData( ::openfl::display::BitmapData value){
            	HX_STACKFRAME(&_hx_pos_7b61decb5082045e_165_set_bitmapData)
HXLINE( 167)		this->_hx___bitmapData = value;
HXLINE( 169)		{
HXLINE( 169)			int _g = (int)0;
HXDLIN( 169)			::Array< ::Dynamic> _g1 = this->_hx___data;
HXDLIN( 169)			while((_g < _g1->length)){
HXLINE( 169)				 ::openfl::display::_Tileset::TileData data = _g1->__get(_g).StaticCast<  ::openfl::display::_Tileset::TileData >();
HXDLIN( 169)				_g = (_g + (int)1);
HXLINE( 170)				data->_hx___update(this->_hx___bitmapData);
            			}
            		}
HXLINE( 173)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tileset_obj,set_bitmapData,return )

int Tileset_obj::get_numRects(){
            	HX_STACKFRAME(&_hx_pos_7b61decb5082045e_180_get_numRects)
HXDLIN( 180)		return this->_hx___data->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tileset_obj,get_numRects,return )


hx::ObjectPtr< Tileset_obj > Tileset_obj::__new( ::openfl::display::BitmapData bitmapData,::Array< ::Dynamic> rects) {
	hx::ObjectPtr< Tileset_obj > __this = new Tileset_obj();
	__this->__construct(bitmapData,rects);
	return __this;
}

hx::ObjectPtr< Tileset_obj > Tileset_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::BitmapData bitmapData,::Array< ::Dynamic> rects) {
	Tileset_obj *__this = (Tileset_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tileset_obj), true, "openfl.display.Tileset"));
	*(void **)__this = Tileset_obj::_hx_vtable;
	__this->__construct(bitmapData,rects);
	return __this;
}

Tileset_obj::Tileset_obj()
{
}

void Tileset_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tileset);
	HX_MARK_MEMBER_NAME(rectData,"rectData");
	HX_MARK_MEMBER_NAME(_hx___bitmapData,"__bitmapData");
	HX_MARK_MEMBER_NAME(_hx___data,"__data");
	HX_MARK_END_CLASS();
}

void Tileset_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rectData,"rectData");
	HX_VISIT_MEMBER_NAME(_hx___bitmapData,"__bitmapData");
	HX_VISIT_MEMBER_NAME(_hx___data,"__data");
}

hx::Val Tileset_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__data") ) { return hx::Val( _hx___data ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addRect") ) { return hx::Val( addRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasRect") ) { return hx::Val( hasRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRect") ) { return hx::Val( getRect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rectData") ) { return hx::Val( rectData ); }
		if (HX_FIELD_EQ(inName,"numRects") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numRects() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getRectID") ) { return hx::Val( getRectID_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bitmapData() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bitmapData") ) { return hx::Val( _hx___bitmapData ); }
		if (HX_FIELD_EQ(inName,"get_numRects") ) { return hx::Val( get_numRects_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_bitmapData") ) { return hx::Val( get_bitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bitmapData") ) { return hx::Val( set_bitmapData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Tileset_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__data") ) { _hx___data=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rectData") ) { rectData=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bitmapData(inValue.Cast<  ::openfl::display::BitmapData >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bitmapData") ) { _hx___bitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tileset_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bitmapData","\xb9","\xb5","\xc0","\x33"));
	outFields->push(HX_HCSTRING("rectData","\x6e","\x31","\x7b","\x6d"));
	outFields->push(HX_HCSTRING("numRects","\xa9","\x46","\xcc","\xa3"));
	outFields->push(HX_HCSTRING("__bitmapData","\xd9","\x30","\x54","\x6c"));
	outFields->push(HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Tileset_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(Tileset_obj,rectData),HX_HCSTRING("rectData","\x6e","\x31","\x7b","\x6d")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Tileset_obj,_hx___bitmapData),HX_HCSTRING("__bitmapData","\xd9","\x30","\x54","\x6c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Tileset_obj,_hx___data),HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Tileset_obj_sStaticStorageInfo = 0;
#endif

static ::String Tileset_obj_sMemberFields[] = {
	HX_HCSTRING("rectData","\x6e","\x31","\x7b","\x6d"),
	HX_HCSTRING("__bitmapData","\xd9","\x30","\x54","\x6c"),
	HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1"),
	HX_HCSTRING("addRect","\xe5","\x8f","\xe4","\x87"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("hasRect","\x9e","\x6d","\xeb","\x1a"),
	HX_HCSTRING("getRect","\xda","\xfc","\x29","\x1e"),
	HX_HCSTRING("getRectID","\x35","\xa7","\x46","\x7a"),
	HX_HCSTRING("get_bitmapData","\x02","\x3e","\xb6","\xa9"),
	HX_HCSTRING("set_bitmapData","\x76","\x26","\xd6","\xc9"),
	HX_HCSTRING("get_numRects","\xb2","\xfa","\xe5","\x58"),
	::String(null()) };

static void Tileset_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tileset_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tileset_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tileset_obj::__mClass,"__mClass");
};

#endif

hx::Class Tileset_obj::__mClass;

void Tileset_obj::__register()
{
	hx::Object *dummy = new Tileset_obj;
	Tileset_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Tileset","\x0a","\x4e","\x4e","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Tileset_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tileset_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tileset_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tileset_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tileset_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tileset_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
