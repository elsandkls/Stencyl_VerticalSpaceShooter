// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6e05dc14770b0678_30_new,"openfl.display.DOMRenderer","new",0xd62a842d,"openfl.display.DOMRenderer.new","openfl/display/DOMRenderer.hx",30,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_90_applyStyle,"openfl.display.DOMRenderer","applyStyle",0x738a30b6,"openfl.display.DOMRenderer.applyStyle","openfl/display/DOMRenderer.hx",90,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_112_clearStyle,"openfl.display.DOMRenderer","clearStyle",0x9d42f437,"openfl.display.DOMRenderer.clearStyle","openfl/display/DOMRenderer.hx",112,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_125___applyStyle,"openfl.display.DOMRenderer","__applyStyle",0x34df8696,"openfl.display.DOMRenderer.__applyStyle","openfl/display/DOMRenderer.hx",125,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_203___popMask,"openfl.display.DOMRenderer","__popMask",0x6d6ec38a,"openfl.display.DOMRenderer.__popMask","openfl/display/DOMRenderer.hx",203,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_208___popMaskObject,"openfl.display.DOMRenderer","__popMaskObject",0xc1c8f9e9,"openfl.display.DOMRenderer.__popMaskObject","openfl/display/DOMRenderer.hx",208,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_227___popMaskRect,"openfl.display.DOMRenderer","__popMaskRect",0x8b58c9ce,"openfl.display.DOMRenderer.__popMaskRect","openfl/display/DOMRenderer.hx",227,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_250___pushMask,"openfl.display.DOMRenderer","__pushMask",0xfe9af6d9,"openfl.display.DOMRenderer.__pushMask","openfl/display/DOMRenderer.hx",250,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_255___pushMaskObject,"openfl.display.DOMRenderer","__pushMaskObject",0x17bd1278,"openfl.display.DOMRenderer.__pushMaskObject","openfl/display/DOMRenderer.hx",255,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_272___pushMaskRect,"openfl.display.DOMRenderer","__pushMaskRect",0x0ec2509d,"openfl.display.DOMRenderer.__pushMaskRect","openfl/display/DOMRenderer.hx",272,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_310___render,"openfl.display.DOMRenderer","__render",0xc8823b89,"openfl.display.DOMRenderer.__render","openfl/display/DOMRenderer.hx",310,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_328___setBlendMode,"openfl.display.DOMRenderer","__setBlendMode",0xbf231cc5,"openfl.display.DOMRenderer.__setBlendMode","openfl/display/DOMRenderer.hx",328,0x3d2c4865)
HX_LOCAL_STACK_FRAME(_hx_pos_6e05dc14770b0678_408___updateClip,"openfl.display.DOMRenderer","__updateClip",0xffe7bf2c,"openfl.display.DOMRenderer.__updateClip","openfl/display/DOMRenderer.hx",408,0x3d2c4865)
namespace openfl{
namespace display{

void DOMRenderer_obj::__construct( ::Dynamic element){
            	HX_GC_STACKFRAME(&_hx_pos_6e05dc14770b0678_30_new)
HXLINE(  34)		this->pixelRatio = ((Float)1);
HXLINE(  48)		super::__construct();
HXLINE(  50)		this->element = element;
HXLINE(  76)		this->_hx___clipRects = ::Array_obj< ::Dynamic>::__new();
HXLINE(  77)		this->_hx___numClipRects = (int)0;
HXLINE(  78)		this->_hx___z = (int)0;
HXLINE(  81)		this->_hx___type = HX_("dom",82,42,4c,00);
HXLINE(  84)		this->_hx___canvasRenderer =  ::openfl::display::CanvasRenderer_obj::__alloc( HX_CTX ,null());
HXLINE(  85)		this->_hx___canvasRenderer->_hx___isDOM = true;
            	}

Dynamic DOMRenderer_obj::__CreateEmpty() { return new DOMRenderer_obj; }

void *DOMRenderer_obj::_hx_vtable = 0;

Dynamic DOMRenderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DOMRenderer_obj > _hx_result = new DOMRenderer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool DOMRenderer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1dbc9c37) {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x1dbc9c37;
		}
	} else {
		return inClassId==(int)0x7cdf41d6;
	}
}

void DOMRenderer_obj::applyStyle( ::openfl::display::DisplayObject parent, ::Dynamic childElement){
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_90_applyStyle)
            	}


HX_DEFINE_DYNAMIC_FUNC2(DOMRenderer_obj,applyStyle,(void))

void DOMRenderer_obj::clearStyle( ::Dynamic childElement){
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_112_clearStyle)
            	}


HX_DEFINE_DYNAMIC_FUNC1(DOMRenderer_obj,clearStyle,(void))

void DOMRenderer_obj::_hx___applyStyle( ::openfl::display::DisplayObject displayObject,bool setTransform,bool setAlpha,bool setClip){
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_125___applyStyle)
            	}


HX_DEFINE_DYNAMIC_FUNC4(DOMRenderer_obj,_hx___applyStyle,(void))

void DOMRenderer_obj::_hx___popMask(){
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_203___popMask)
HXDLIN( 203)		this->_hx___popMaskRect();
            	}


void DOMRenderer_obj::_hx___popMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_208___popMaskObject)
HXLINE( 210)		if (hx::IsNotNull( object->_hx___mask )) {
HXLINE( 212)			this->_hx___popMask();
            		}
HXLINE( 216)		bool _hx_tmp;
HXDLIN( 216)		if (handleScrollRect) {
HXLINE( 216)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 216)			_hx_tmp = false;
            		}
HXDLIN( 216)		if (_hx_tmp) {
HXLINE( 218)			this->_hx___popMaskRect();
            		}
            	}


void DOMRenderer_obj::_hx___popMaskRect(){
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_227___popMaskRect)
HXDLIN( 227)		if ((this->_hx___numClipRects > (int)0)) {
HXLINE( 229)			this->_hx___numClipRects--;
HXLINE( 231)			if ((this->_hx___numClipRects > (int)0)) {
HXLINE( 233)				::Array< ::Dynamic> _hx_tmp = this->_hx___clipRects;
HXDLIN( 233)				this->_hx___currentClipRect = _hx_tmp->__get((this->_hx___numClipRects - (int)1)).StaticCast<  ::openfl::geom::Rectangle >();
            			}
            			else {
HXLINE( 237)				this->_hx___currentClipRect = null();
            			}
            		}
            	}


void DOMRenderer_obj::_hx___pushMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_250___pushMask)
HXDLIN( 250)		 ::openfl::geom::Rectangle _hx_tmp = mask->getBounds(mask);
HXDLIN( 250)		this->_hx___pushMaskRect(_hx_tmp,mask->_hx___renderTransform);
            	}


void DOMRenderer_obj::_hx___pushMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_255___pushMaskObject)
HXLINE( 257)		bool _hx_tmp;
HXDLIN( 257)		if (handleScrollRect) {
HXLINE( 257)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 257)			_hx_tmp = false;
            		}
HXDLIN( 257)		if (_hx_tmp) {
HXLINE( 259)			this->_hx___pushMaskRect(object->_hx___scrollRect,object->_hx___renderTransform);
            		}
HXLINE( 263)		if (hx::IsNotNull( object->_hx___mask )) {
HXLINE( 265)			this->_hx___pushMask(object->_hx___mask);
            		}
            	}


void DOMRenderer_obj::_hx___pushMaskRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform){
            	HX_GC_STACKFRAME(&_hx_pos_6e05dc14770b0678_272___pushMaskRect)
HXLINE( 276)		if ((this->_hx___numClipRects == this->_hx___clipRects->length)) {
HXLINE( 278)			::Array< ::Dynamic> _hx_tmp = this->_hx___clipRects;
HXDLIN( 278)			int _hx_tmp1 = this->_hx___numClipRects;
HXDLIN( 278)			_hx_tmp[_hx_tmp1] =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 282)		 ::openfl::geom::Rectangle clipRect = this->_hx___clipRects->__get(this->_hx___numClipRects).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 283)		rect->_hx___transform(clipRect,transform);
HXLINE( 285)		if ((this->_hx___numClipRects > (int)0)) {
HXLINE( 287)			::Array< ::Dynamic> parentClipRect = this->_hx___clipRects;
HXDLIN( 287)			 ::openfl::geom::Rectangle parentClipRect1 = parentClipRect->__get((this->_hx___numClipRects - (int)1)).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 288)			clipRect->_hx___contract(parentClipRect1->x,parentClipRect1->y,parentClipRect1->width,parentClipRect1->height);
            		}
HXLINE( 292)		if ((clipRect->height < (int)0)) {
HXLINE( 294)			clipRect->height = (int)0;
            		}
HXLINE( 298)		if ((clipRect->width < (int)0)) {
HXLINE( 300)			clipRect->width = (int)0;
            		}
HXLINE( 304)		this->_hx___currentClipRect = clipRect;
HXLINE( 305)		this->_hx___numClipRects++;
            	}


void DOMRenderer_obj::_hx___render(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_310___render)
HXLINE( 312)		if (!(this->_hx___stage->_hx___transparent)) {
HXLINE( 314)			 ::Dynamic(this->element->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("background",ee,93,1d,26),this->_hx___stage->_hx___colorString,hx::paccDynamic);
            		}
            		else {
HXLINE( 318)			 ::Dynamic(this->element->__Field(HX_("style",31,a5,1d,84),hx::paccDynamic))->__SetField(HX_("background",ee,93,1d,26),HX_("none",b8,12,0a,49),hx::paccDynamic);
            		}
HXLINE( 322)		this->_hx___z = (int)1;
HXLINE( 323)		::openfl::display::IBitmapDrawable_obj::_hx___renderDOM(object,hx::ObjectPtr<OBJ_>(this));
            	}


void DOMRenderer_obj::_hx___setBlendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_6e05dc14770b0678_328___setBlendMode)
HXLINE( 330)		if (hx::IsNotNull( this->_hx___overrideBlendMode )) {
HXLINE( 330)			value = this->_hx___overrideBlendMode;
            		}
HXLINE( 331)		if (hx::IsEq( this->_hx___blendMode,value )) {
HXLINE( 331)			return;
            		}
HXLINE( 333)		this->_hx___blendMode = value;
            	}


void DOMRenderer_obj::_hx___updateClip( ::openfl::display::DisplayObject displayObject){
            	HX_GC_STACKFRAME(&_hx_pos_6e05dc14770b0678_408___updateClip)
HXDLIN( 408)		if (hx::IsNull( this->_hx___currentClipRect )) {
HXLINE( 410)			displayObject->_hx___worldClipChanged = hx::IsNotNull( displayObject->_hx___worldClip );
HXLINE( 411)			displayObject->_hx___worldClip = null();
            		}
            		else {
HXLINE( 415)			if (hx::IsNull( displayObject->_hx___worldClip )) {
HXLINE( 417)				displayObject->_hx___worldClip =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE( 421)			 ::openfl::geom::Rectangle clip = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 422)			 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 424)			matrix->copyFrom(displayObject->_hx___renderTransform);
HXLINE( 425)			matrix->invert();
HXLINE( 427)			this->_hx___currentClipRect->_hx___transform(clip,matrix);
HXLINE( 429)			if (clip->equals(displayObject->_hx___worldClip)) {
HXLINE( 431)				displayObject->_hx___worldClipChanged = false;
            			}
            			else {
HXLINE( 435)				displayObject->_hx___worldClip->copyFrom(clip);
HXLINE( 436)				displayObject->_hx___worldClipChanged = true;
            			}
HXLINE( 440)			::openfl::geom::Rectangle_obj::_hx___pool->release(clip);
HXLINE( 441)			::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DOMRenderer_obj,_hx___updateClip,(void))


hx::ObjectPtr< DOMRenderer_obj > DOMRenderer_obj::__new( ::Dynamic element) {
	hx::ObjectPtr< DOMRenderer_obj > __this = new DOMRenderer_obj();
	__this->__construct(element);
	return __this;
}

hx::ObjectPtr< DOMRenderer_obj > DOMRenderer_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic element) {
	DOMRenderer_obj *__this = (DOMRenderer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DOMRenderer_obj), true, "openfl.display.DOMRenderer"));
	*(void **)__this = DOMRenderer_obj::_hx_vtable;
	__this->__construct(element);
	return __this;
}

DOMRenderer_obj::DOMRenderer_obj()
{
}

void DOMRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DOMRenderer);
	HX_MARK_MEMBER_NAME(element,"element");
	HX_MARK_MEMBER_NAME(pixelRatio,"pixelRatio");
	HX_MARK_MEMBER_NAME(_hx___canvasRenderer,"__canvasRenderer");
	HX_MARK_MEMBER_NAME(_hx___clipRects,"__clipRects");
	HX_MARK_MEMBER_NAME(_hx___currentClipRect,"__currentClipRect");
	HX_MARK_MEMBER_NAME(_hx___numClipRects,"__numClipRects");
	HX_MARK_MEMBER_NAME(_hx___transformOriginProperty,"__transformOriginProperty");
	HX_MARK_MEMBER_NAME(_hx___transformProperty,"__transformProperty");
	HX_MARK_MEMBER_NAME(_hx___vendorPrefix,"__vendorPrefix");
	HX_MARK_MEMBER_NAME(_hx___z,"__z");
	 ::openfl::display::DisplayObjectRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DOMRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(element,"element");
	HX_VISIT_MEMBER_NAME(pixelRatio,"pixelRatio");
	HX_VISIT_MEMBER_NAME(_hx___canvasRenderer,"__canvasRenderer");
	HX_VISIT_MEMBER_NAME(_hx___clipRects,"__clipRects");
	HX_VISIT_MEMBER_NAME(_hx___currentClipRect,"__currentClipRect");
	HX_VISIT_MEMBER_NAME(_hx___numClipRects,"__numClipRects");
	HX_VISIT_MEMBER_NAME(_hx___transformOriginProperty,"__transformOriginProperty");
	HX_VISIT_MEMBER_NAME(_hx___transformProperty,"__transformProperty");
	HX_VISIT_MEMBER_NAME(_hx___vendorPrefix,"__vendorPrefix");
	HX_VISIT_MEMBER_NAME(_hx___z,"__z");
	 ::openfl::display::DisplayObjectRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DOMRenderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__z") ) { return hx::Val( _hx___z ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { return hx::Val( element ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__render") ) { return hx::Val( _hx___render_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__popMask") ) { return hx::Val( _hx___popMask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pixelRatio") ) { return hx::Val( pixelRatio ); }
		if (HX_FIELD_EQ(inName,"applyStyle") ) { return hx::Val( applyStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle") ) { return hx::Val( clearStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMask") ) { return hx::Val( _hx___pushMask_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__clipRects") ) { return hx::Val( _hx___clipRects ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__applyStyle") ) { return hx::Val( _hx___applyStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateClip") ) { return hx::Val( _hx___updateClip_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__popMaskRect") ) { return hx::Val( _hx___popMaskRect_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__numClipRects") ) { return hx::Val( _hx___numClipRects ); }
		if (HX_FIELD_EQ(inName,"__vendorPrefix") ) { return hx::Val( _hx___vendorPrefix ); }
		if (HX_FIELD_EQ(inName,"__pushMaskRect") ) { return hx::Val( _hx___pushMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setBlendMode") ) { return hx::Val( _hx___setBlendMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__popMaskObject") ) { return hx::Val( _hx___popMaskObject_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__canvasRenderer") ) { return hx::Val( _hx___canvasRenderer ); }
		if (HX_FIELD_EQ(inName,"__pushMaskObject") ) { return hx::Val( _hx___pushMaskObject_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__currentClipRect") ) { return hx::Val( _hx___currentClipRect ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__transformProperty") ) { return hx::Val( _hx___transformProperty ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__transformOriginProperty") ) { return hx::Val( _hx___transformOriginProperty ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DOMRenderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__z") ) { _hx___z=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"element") ) { element=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pixelRatio") ) { pixelRatio=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__clipRects") ) { _hx___clipRects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__numClipRects") ) { _hx___numClipRects=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vendorPrefix") ) { _hx___vendorPrefix=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__canvasRenderer") ) { _hx___canvasRenderer=inValue.Cast<  ::openfl::display::CanvasRenderer >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__currentClipRect") ) { _hx___currentClipRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__transformProperty") ) { _hx___transformProperty=inValue.Cast< ::String >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__transformOriginProperty") ) { _hx___transformOriginProperty=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DOMRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("element","\xbc","\xae","\x54","\x06"));
	outFields->push(HX_HCSTRING("pixelRatio","\xa5","\x78","\x12","\x83"));
	outFields->push(HX_HCSTRING("__canvasRenderer","\x5b","\xf9","\x33","\xbd"));
	outFields->push(HX_HCSTRING("__clipRects","\xbf","\xca","\xff","\x32"));
	outFields->push(HX_HCSTRING("__currentClipRect","\x4d","\x7a","\x16","\xb0"));
	outFields->push(HX_HCSTRING("__numClipRects","\xd9","\x0d","\x04","\xcd"));
	outFields->push(HX_HCSTRING("__transformOriginProperty","\xc7","\x6b","\xbb","\x16"));
	outFields->push(HX_HCSTRING("__transformProperty","\xc1","\xa6","\xba","\x36"));
	outFields->push(HX_HCSTRING("__vendorPrefix","\x5a","\x8c","\xc3","\x81"));
	outFields->push(HX_HCSTRING("__z","\x5a","\x69","\x48","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DOMRenderer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DOMRenderer_obj,element),HX_HCSTRING("element","\xbc","\xae","\x54","\x06")},
	{hx::fsFloat,(int)offsetof(DOMRenderer_obj,pixelRatio),HX_HCSTRING("pixelRatio","\xa5","\x78","\x12","\x83")},
	{hx::fsObject /*::openfl::display::CanvasRenderer*/ ,(int)offsetof(DOMRenderer_obj,_hx___canvasRenderer),HX_HCSTRING("__canvasRenderer","\x5b","\xf9","\x33","\xbd")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DOMRenderer_obj,_hx___clipRects),HX_HCSTRING("__clipRects","\xbf","\xca","\xff","\x32")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DOMRenderer_obj,_hx___currentClipRect),HX_HCSTRING("__currentClipRect","\x4d","\x7a","\x16","\xb0")},
	{hx::fsInt,(int)offsetof(DOMRenderer_obj,_hx___numClipRects),HX_HCSTRING("__numClipRects","\xd9","\x0d","\x04","\xcd")},
	{hx::fsString,(int)offsetof(DOMRenderer_obj,_hx___transformOriginProperty),HX_HCSTRING("__transformOriginProperty","\xc7","\x6b","\xbb","\x16")},
	{hx::fsString,(int)offsetof(DOMRenderer_obj,_hx___transformProperty),HX_HCSTRING("__transformProperty","\xc1","\xa6","\xba","\x36")},
	{hx::fsString,(int)offsetof(DOMRenderer_obj,_hx___vendorPrefix),HX_HCSTRING("__vendorPrefix","\x5a","\x8c","\xc3","\x81")},
	{hx::fsInt,(int)offsetof(DOMRenderer_obj,_hx___z),HX_HCSTRING("__z","\x5a","\x69","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DOMRenderer_obj_sStaticStorageInfo = 0;
#endif

static ::String DOMRenderer_obj_sMemberFields[] = {
	HX_HCSTRING("element","\xbc","\xae","\x54","\x06"),
	HX_HCSTRING("pixelRatio","\xa5","\x78","\x12","\x83"),
	HX_HCSTRING("__canvasRenderer","\x5b","\xf9","\x33","\xbd"),
	HX_HCSTRING("__clipRects","\xbf","\xca","\xff","\x32"),
	HX_HCSTRING("__currentClipRect","\x4d","\x7a","\x16","\xb0"),
	HX_HCSTRING("__numClipRects","\xd9","\x0d","\x04","\xcd"),
	HX_HCSTRING("__transformOriginProperty","\xc7","\x6b","\xbb","\x16"),
	HX_HCSTRING("__transformProperty","\xc1","\xa6","\xba","\x36"),
	HX_HCSTRING("__vendorPrefix","\x5a","\x8c","\xc3","\x81"),
	HX_HCSTRING("__z","\x5a","\x69","\x48","\x00"),
	HX_HCSTRING("applyStyle","\xe3","\x20","\x6f","\x2f"),
	HX_HCSTRING("clearStyle","\x64","\xe4","\x27","\x59"),
	HX_HCSTRING("__applyStyle","\x03","\x9c","\x02","\x68"),
	HX_HCSTRING("__popMask","\xfd","\xb7","\x5f","\xc4"),
	HX_HCSTRING("__popMaskObject","\x9c","\x46","\x0d","\x10"),
	HX_HCSTRING("__popMaskRect","\xc1","\x73","\xe8","\x16"),
	HX_HCSTRING("__pushMask","\x06","\xe7","\x7f","\xba"),
	HX_HCSTRING("__pushMaskObject","\x65","\xe2","\x3b","\x45"),
	HX_HCSTRING("__pushMaskRect","\x4a","\x5b","\xe7","\xa0"),
	HX_HCSTRING("__render","\x76","\xd6","\x58","\xad"),
	HX_HCSTRING("__setBlendMode","\x72","\x27","\x48","\x51"),
	HX_HCSTRING("__updateClip","\x99","\xd4","\x0a","\x33"),
	::String(null()) };

static void DOMRenderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DOMRenderer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DOMRenderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DOMRenderer_obj::__mClass,"__mClass");
};

#endif

hx::Class DOMRenderer_obj::__mClass;

void DOMRenderer_obj::__register()
{
	hx::Object *dummy = new DOMRenderer_obj;
	DOMRenderer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DOMRenderer","\xbb","\xe9","\xd7","\xf6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DOMRenderer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DOMRenderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DOMRenderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DOMRenderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DOMRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DOMRenderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
