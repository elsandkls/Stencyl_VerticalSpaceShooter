// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Window
#include <openfl/display/Window.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a9a8b88d3857954c_39_new,"openfl.display.Window","new",0x253949cc,"openfl.display.Window.new","openfl/display/Window.hx",39,0x156e59e2)
namespace openfl{
namespace display{

void Window_obj::__construct( ::lime::app::Application application, ::Dynamic attributes){
            	HX_GC_STACKFRAME(&_hx_pos_a9a8b88d3857954c_39_new)
HXLINE(  42)		super::__construct(application,attributes);
HXLINE(  56)		 ::Dynamic _hx_tmp;
HXDLIN(  56)		if (::Reflect_obj::hasField( ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),hx::paccDynamic)),HX_("background",ee,93,1d,26))) {
HXLINE(  56)			_hx_tmp =  ::Dynamic(attributes->__Field(HX_("context",ef,95,77,19),hx::paccDynamic))->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic);
            		}
            		else {
HXLINE(  56)			_hx_tmp = (int)16777215;
            		}
HXDLIN(  56)		this->stage =  ::openfl::display::Stage_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),_hx_tmp);
HXLINE(  58)		if (::Reflect_obj::hasField(attributes,HX_("parameters",aa,be,7e,51))) {
HXLINE(  60)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  62)				this->stage->get_loaderInfo()->parameters =  ::Dynamic(attributes->__Field(HX_("parameters",aa,be,7e,51),hx::paccDynamic));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(  68)		bool _hx_tmp1;
HXDLIN(  68)		if (::Reflect_obj::hasField(attributes,HX_("resizable",6b,37,50,a9))) {
HXLINE(  68)			_hx_tmp1 = !(( (bool)(attributes->__Field(HX_("resizable",6b,37,50,a9),hx::paccDynamic)) ));
            		}
            		else {
HXLINE(  68)			_hx_tmp1 = false;
            		}
HXDLIN(  68)		if (_hx_tmp1) {
HXLINE(  70)			this->stage->_hx___setLogicalSize(( (int)(attributes->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ),( (int)(attributes->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) ));
            		}
HXLINE(  75)		application->addModule(this->stage);
            	}

Dynamic Window_obj::__CreateEmpty() { return new Window_obj; }

void *Window_obj::_hx_vtable = 0;

Dynamic Window_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Window_obj > _hx_result = new Window_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Window_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1abdb2dd) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1abdb2dd;
	} else {
		return inClassId==(int)0x2c659efa;
	}
}


hx::ObjectPtr< Window_obj > Window_obj::__new( ::lime::app::Application application, ::Dynamic attributes) {
	hx::ObjectPtr< Window_obj > __this = new Window_obj();
	__this->__construct(application,attributes);
	return __this;
}

hx::ObjectPtr< Window_obj > Window_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::app::Application application, ::Dynamic attributes) {
	Window_obj *__this = (Window_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Window_obj), true, "openfl.display.Window"));
	*(void **)__this = Window_obj::_hx_vtable;
	__this->__construct(application,attributes);
	return __this;
}

Window_obj::Window_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Window_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Window_obj_sStaticStorageInfo = 0;
#endif

static void Window_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Window_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Window_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Window_obj::__mClass,"__mClass");
};

#endif

hx::Class Window_obj::__mClass;

void Window_obj::__register()
{
	hx::Object *dummy = new Window_obj;
	Window_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Window","\xda","\xb3","\xcd","\xdc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Window_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Window_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Window_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Window_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Window_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
