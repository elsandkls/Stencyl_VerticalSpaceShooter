// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_ShaderBuffer
#include <openfl/_internal/renderer/ShaderBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DMaskShader
#include <openfl/_internal/renderer/context3D/Context3DMaskShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DState
#include <openfl/_internal/renderer/context3D/Context3DState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectShader
#include <openfl/display/DisplayObjectShader.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2f59d7e567bca573_168_new,"openfl.display.OpenGLRenderer","new",0x318619ae,"openfl.display.OpenGLRenderer.new","openfl/display/OpenGLRenderer.hx",168,0x89bd8a40)
HX_DEFINE_STACK_FRAME(_hx_pos_2f59d7e567bca573_104_new,"openfl.display.OpenGLRenderer","new",0x318619ae,"openfl.display.OpenGLRenderer.new","openfl/display/OpenGLRenderer.hx",104,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_174_applyAlpha,"openfl.display.OpenGLRenderer","applyAlpha",0xd5dfbf82,"openfl.display.OpenGLRenderer.applyAlpha","openfl/display/OpenGLRenderer.hx",174,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_193_applyBitmapData,"openfl.display.OpenGLRenderer","applyBitmapData",0x4c599b15,"openfl.display.OpenGLRenderer.applyBitmapData","openfl/display/OpenGLRenderer.hx",193,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_246_applyColorTransform,"openfl.display.OpenGLRenderer","applyColorTransform",0xad8c9ae5,"openfl.display.OpenGLRenderer.applyColorTransform","openfl/display/OpenGLRenderer.hx",246,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_286_applyHasColorTransform,"openfl.display.OpenGLRenderer","applyHasColorTransform",0x4989d2a7,"openfl.display.OpenGLRenderer.applyHasColorTransform","openfl/display/OpenGLRenderer.hx",286,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_305_applyMatrix,"openfl.display.OpenGLRenderer","applyMatrix",0xc7743d9d,"openfl.display.OpenGLRenderer.applyMatrix","openfl/display/OpenGLRenderer.hx",305,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_320_getMatrix,"openfl.display.OpenGLRenderer","getMatrix",0xa537f745,"openfl.display.OpenGLRenderer.getMatrix","openfl/display/OpenGLRenderer.hx",320,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_349_setShader,"openfl.display.OpenGLRenderer","setShader",0xe9e16c35,"openfl.display.OpenGLRenderer.setShader","openfl/display/OpenGLRenderer.hx",349,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_386_setViewport,"openfl.display.OpenGLRenderer","setViewport",0x9cb75d76,"openfl.display.OpenGLRenderer.setViewport","openfl/display/OpenGLRenderer.hx",386,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_393_updateShader,"openfl.display.OpenGLRenderer","updateShader",0x08518300,"openfl.display.OpenGLRenderer.updateShader","openfl/display/OpenGLRenderer.hx",393,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_409_useAlphaArray,"openfl.display.OpenGLRenderer","useAlphaArray",0x92a9e750,"openfl.display.OpenGLRenderer.useAlphaArray","openfl/display/OpenGLRenderer.hx",409,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_420_useColorTransformArray,"openfl.display.OpenGLRenderer","useColorTransformArray",0xf01908bb,"openfl.display.OpenGLRenderer.useColorTransformArray","openfl/display/OpenGLRenderer.hx",420,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_430___cleanup,"openfl.display.OpenGLRenderer","__cleanup",0x99a994d2,"openfl.display.OpenGLRenderer.__cleanup","openfl/display/OpenGLRenderer.hx",430,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_450___clear,"openfl.display.OpenGLRenderer","__clear",0x8e85d2bb,"openfl.display.OpenGLRenderer.__clear","openfl/display/OpenGLRenderer.hx",450,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_469___clearShader,"openfl.display.OpenGLRenderer","__clearShader",0x0d924440,"openfl.display.OpenGLRenderer.__clearShader","openfl/display/OpenGLRenderer.hx",469,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_493___copyShader,"openfl.display.OpenGLRenderer","__copyShader",0xf6e5bccc,"openfl.display.OpenGLRenderer.__copyShader","openfl/display/OpenGLRenderer.hx",493,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_505___getMatrix,"openfl.display.OpenGLRenderer","__getMatrix",0x35fc4fa5,"openfl.display.OpenGLRenderer.__getMatrix","openfl/display/OpenGLRenderer.hx",505,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_540___initShader,"openfl.display.OpenGLRenderer","__initShader",0x4566b267,"openfl.display.OpenGLRenderer.__initShader","openfl/display/OpenGLRenderer.hx",540,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_563___initDisplayShader,"openfl.display.OpenGLRenderer","__initDisplayShader",0x1a335405,"openfl.display.OpenGLRenderer.__initDisplayShader","openfl/display/OpenGLRenderer.hx",563,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_586___initGraphicsShader,"openfl.display.OpenGLRenderer","__initGraphicsShader",0x6e1a5b92,"openfl.display.OpenGLRenderer.__initGraphicsShader","openfl/display/OpenGLRenderer.hx",586,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_609___initShaderBuffer,"openfl.display.OpenGLRenderer","__initShaderBuffer",0x02c42ac7,"openfl.display.OpenGLRenderer.__initShaderBuffer","openfl/display/OpenGLRenderer.hx",609,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_622___popMask,"openfl.display.OpenGLRenderer","__popMask",0x3178efcb,"openfl.display.OpenGLRenderer.__popMask","openfl/display/OpenGLRenderer.hx",622,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_652___popMaskObject,"openfl.display.OpenGLRenderer","__popMaskObject",0x68af4cea,"openfl.display.OpenGLRenderer.__popMaskObject","openfl/display/OpenGLRenderer.hx",652,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_680___popMaskRect,"openfl.display.OpenGLRenderer","__popMaskRect",0x2af4aa8f,"openfl.display.OpenGLRenderer.__popMaskRect","openfl/display/OpenGLRenderer.hx",680,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_699___pushMask,"openfl.display.OpenGLRenderer","__pushMask",0xc3778378,"openfl.display.OpenGLRenderer.__pushMask","openfl/display/OpenGLRenderer.hx",699,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_723___pushMaskObject,"openfl.display.OpenGLRenderer","__pushMaskObject",0x7a5f6057,"openfl.display.OpenGLRenderer.__pushMaskObject","openfl/display/OpenGLRenderer.hx",723,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_753___pushMaskRect,"openfl.display.OpenGLRenderer","__pushMaskRect",0x178b18bc,"openfl.display.OpenGLRenderer.__pushMaskRect","openfl/display/OpenGLRenderer.hx",753,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_797___render,"openfl.display.OpenGLRenderer","__render",0x24141268,"openfl.display.OpenGLRenderer.__render","openfl/display/OpenGLRenderer.hx",797,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_899___renderFilterPass,"openfl.display.OpenGLRenderer","__renderFilterPass",0xd0419531,"openfl.display.OpenGLRenderer.__renderFilterPass","openfl/display/OpenGLRenderer.hx",899,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_946___resize,"openfl.display.OpenGLRenderer","__resize",0x27660106,"openfl.display.OpenGLRenderer.__resize","openfl/display/OpenGLRenderer.hx",946,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_965___resumeClipAndMask,"openfl.display.OpenGLRenderer","__resumeClipAndMask",0x7bcaa3f4,"openfl.display.OpenGLRenderer.__resumeClipAndMask","openfl/display/OpenGLRenderer.hx",965,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_994___scissorRect,"openfl.display.OpenGLRenderer","__scissorRect",0xbdd8570e,"openfl.display.OpenGLRenderer.__scissorRect","openfl/display/OpenGLRenderer.hx",994,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_1017___setBlendMode,"openfl.display.OpenGLRenderer","__setBlendMode",0xc7ebe4e4,"openfl.display.OpenGLRenderer.__setBlendMode","openfl/display/OpenGLRenderer.hx",1017,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_1064___setRenderTarget,"openfl.display.OpenGLRenderer","__setRenderTarget",0xe23db0b7,"openfl.display.OpenGLRenderer.__setRenderTarget","openfl/display/OpenGLRenderer.hx",1064,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_1078___setShaderBuffer,"openfl.display.OpenGLRenderer","__setShaderBuffer",0x2c781375,"openfl.display.OpenGLRenderer.__setShaderBuffer","openfl/display/OpenGLRenderer.hx",1078,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_1086___suspendClipAndMask,"openfl.display.OpenGLRenderer","__suspendClipAndMask",0x40692e69,"openfl.display.OpenGLRenderer.__suspendClipAndMask","openfl/display/OpenGLRenderer.hx",1086,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_1106___updateShaderBuffer,"openfl.display.OpenGLRenderer","__updateShaderBuffer",0x07dc8fc0,"openfl.display.OpenGLRenderer.__updateShaderBuffer","openfl/display/OpenGLRenderer.hx",1106,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_58_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",58,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_42[] = {
	1.,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_59_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",59,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_44[] = {
	(Float)0,(Float)0,(Float)0,0.,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_60_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",60,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_46[] = {
	(Float)0,(Float)0,(Float)0,0.,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_61_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",61,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_48[] = {
	(Float)1,(Float)1,(Float)1,1.,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_62_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",62,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_50[] = {
	(Float)0,(Float)0,(Float)0,0.,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_63_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",63,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_52[] = {
	1.,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_64_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",64,0x89bd8a40)
static const bool _hx_array_data_fdf86abc_54[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_65_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",65,0x89bd8a40)
HX_LOCAL_STACK_FRAME(_hx_pos_2f59d7e567bca573_66_boot,"openfl.display.OpenGLRenderer","boot",0x1be95f24,"openfl.display.OpenGLRenderer.boot","openfl/display/OpenGLRenderer.hx",66,0x89bd8a40)
static const Float _hx_array_data_fdf86abc_57[] = {
	(Float)0,0.,
};
namespace openfl{
namespace display{

void OpenGLRenderer_obj::__construct( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::display::Shape _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_2f59d7e567bca573_168_new)
HXLINE( 168)			return  ::openfl::display::Shape_obj::__alloc( HX_CTX );
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_2f59d7e567bca573_104_new)
HXLINE( 106)		super::__construct();
HXLINE( 108)		this->_hx___context3D = context;
HXLINE( 109)		this->_hx___context = context->_hx___context;
HXLINE( 111)		this->gl = context->_hx___context->webgl;
HXLINE( 112)		this->_hx___gl = this->gl;
HXLINE( 114)		this->_hx___defaultRenderTarget = defaultRenderTarget;
HXLINE( 115)		this->_hx___flipped = hx::IsNull( this->_hx___defaultRenderTarget );
HXLINE( 117)		if (hx::IsNull( ::openfl::display::Graphics_obj::maxTextureWidth )) {
HXLINE( 119)			::openfl::display::Graphics_obj::maxTextureWidth = (::openfl::display::Graphics_obj::maxTextureHeight = this->_hx___gl->getParameter(this->_hx___gl->MAX_TEXTURE_SIZE));
            		}
HXLINE( 124)		this->_hx___matrix = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 127)		this->_hx___values = ::Array_obj< Float >::__new();
HXLINE( 142)		this->_hx___softwareRenderer =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX ,null());
HXLINE( 146)		this->_hx___type = HX_("opengl",6f,64,94,21);
HXLINE( 149)		this->_hx___setBlendMode((int)10);
HXLINE( 150)		this->_hx___context3D->_hx___setGLBlend(true);
HXLINE( 152)		this->_hx___clipRects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 153)		this->_hx___maskObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 154)		this->_hx___numClipRects = (int)0;
HXLINE( 156)		this->_hx___projection = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 157)		this->_hx___projectionFlipped = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 159)		this->_hx___stencilReference = (int)0;
HXLINE( 160)		this->_hx___tempRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 162)		this->_hx___defaultDisplayShader =  ::openfl::display::DisplayObjectShader_obj::__alloc( HX_CTX ,null());
HXLINE( 163)		this->_hx___defaultGraphicsShader =  ::openfl::display::GraphicsShader_obj::__alloc( HX_CTX ,null());
HXLINE( 164)		this->_hx___defaultShader = this->_hx___defaultDisplayShader;
HXLINE( 166)		this->_hx___initShader(this->_hx___defaultShader);
HXLINE( 168)		this->_hx___scrollRectMasks =  ::lime::utils::ObjectPool_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()),null(),null());
HXLINE( 169)		this->_hx___maskShader =  ::openfl::_internal::renderer::context3D::Context3DMaskShader_obj::__alloc( HX_CTX );
            	}

Dynamic OpenGLRenderer_obj::__CreateEmpty() { return new OpenGLRenderer_obj; }

void *OpenGLRenderer_obj::_hx_vtable = 0;

Dynamic OpenGLRenderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OpenGLRenderer_obj > _hx_result = new OpenGLRenderer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool OpenGLRenderer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x38ea65a4) {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x38ea65a4;
		}
	} else {
		return inClassId==(int)0x7cdf41d6;
	}
}

void OpenGLRenderer_obj::applyAlpha(Float alpha){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_174_applyAlpha)
HXLINE( 176)		::openfl::display::OpenGLRenderer_obj::_hx___alphaValue[(int)0] = alpha;
HXLINE( 178)		if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 180)			this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_Alpha",0f,ce,3e,6a),::openfl::display::OpenGLRenderer_obj::_hx___alphaValue);
            		}
            		else {
HXLINE( 182)			if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 184)				if (hx::IsNotNull( this->_hx___currentShader->_hx___alpha )) {
HXLINE( 184)					this->_hx___currentShader->_hx___alpha->value = ::openfl::display::OpenGLRenderer_obj::_hx___alphaValue;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,applyAlpha,(void))

void OpenGLRenderer_obj::applyBitmapData( ::openfl::display::BitmapData bitmapData,bool smooth,hx::Null< bool >  __o_repeat){
bool repeat = __o_repeat.Default(false);
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_193_applyBitmapData)
HXDLIN( 193)		if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 195)			if (hx::IsNotNull( bitmapData )) {
HXLINE( 197)				::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue[(int)0] = bitmapData->_hx___textureWidth;
HXLINE( 198)				::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue[(int)1] = bitmapData->_hx___textureHeight;
HXLINE( 200)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_TextureSize",ad,60,72,29),::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue);
            			}
            		}
            		else {
HXLINE( 204)			if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 206)				if (hx::IsNotNull( this->_hx___currentShader->_hx___bitmap )) {
HXLINE( 208)					this->_hx___currentShader->_hx___bitmap->input = bitmapData;
HXLINE( 209)					 ::Dynamic _hx_tmp;
HXDLIN( 209)					bool _hx_tmp1;
HXDLIN( 209)					if (smooth) {
HXLINE( 209)						_hx_tmp1 = this->_hx___allowSmoothing;
            					}
            					else {
HXLINE( 209)						_hx_tmp1 = false;
            					}
HXDLIN( 209)					if (_hx_tmp1) {
HXLINE( 209)						_hx_tmp = (int)4;
            					}
            					else {
HXLINE( 209)						_hx_tmp = (int)5;
            					}
HXDLIN( 209)					this->_hx___currentShader->_hx___bitmap->filter = _hx_tmp;
HXLINE( 210)					this->_hx___currentShader->_hx___bitmap->mipFilter = (int)2;
HXLINE( 211)					 ::Dynamic _hx_tmp2;
HXDLIN( 211)					if (repeat) {
HXLINE( 211)						_hx_tmp2 = (int)2;
            					}
            					else {
HXLINE( 211)						_hx_tmp2 = (int)0;
            					}
HXDLIN( 211)					this->_hx___currentShader->_hx___bitmap->wrap = _hx_tmp2;
            				}
HXLINE( 215)				if (hx::IsNotNull( this->_hx___currentShader->_hx___texture )) {
HXLINE( 217)					this->_hx___currentShader->_hx___texture->input = bitmapData;
HXLINE( 218)					 ::Dynamic _hx_tmp3;
HXDLIN( 218)					bool _hx_tmp4;
HXDLIN( 218)					if (smooth) {
HXLINE( 218)						_hx_tmp4 = this->_hx___allowSmoothing;
            					}
            					else {
HXLINE( 218)						_hx_tmp4 = false;
            					}
HXDLIN( 218)					if (_hx_tmp4) {
HXLINE( 218)						_hx_tmp3 = (int)4;
            					}
            					else {
HXLINE( 218)						_hx_tmp3 = (int)5;
            					}
HXDLIN( 218)					this->_hx___currentShader->_hx___texture->filter = _hx_tmp3;
HXLINE( 219)					this->_hx___currentShader->_hx___texture->mipFilter = (int)2;
HXLINE( 220)					 ::Dynamic _hx_tmp5;
HXDLIN( 220)					if (repeat) {
HXLINE( 220)						_hx_tmp5 = (int)2;
            					}
            					else {
HXLINE( 220)						_hx_tmp5 = (int)0;
            					}
HXDLIN( 220)					this->_hx___currentShader->_hx___texture->wrap = _hx_tmp5;
            				}
HXLINE( 224)				if (hx::IsNotNull( this->_hx___currentShader->_hx___textureSize )) {
HXLINE( 226)					if (hx::IsNotNull( bitmapData )) {
HXLINE( 228)						::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue[(int)0] = bitmapData->_hx___textureWidth;
HXLINE( 229)						::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue[(int)1] = bitmapData->_hx___textureHeight;
HXLINE( 231)						this->_hx___currentShader->_hx___textureSize->value = ::openfl::display::OpenGLRenderer_obj::_hx___textureSizeValue;
            					}
            					else {
HXLINE( 235)						this->_hx___currentShader->_hx___textureSize->value = null();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(OpenGLRenderer_obj,applyBitmapData,(void))

void OpenGLRenderer_obj::applyColorTransform( ::openfl::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_246_applyColorTransform)
HXLINE( 248)		bool enabled;
HXDLIN( 248)		if (hx::IsNotNull( colorTransform )) {
HXLINE( 248)			enabled = !(colorTransform->_hx___isDefault(true));
            		}
            		else {
HXLINE( 248)			enabled = false;
            		}
HXLINE( 249)		this->applyHasColorTransform(enabled);
HXLINE( 251)		if (enabled) {
HXLINE( 253)			colorTransform->_hx___setArrays(::openfl::display::OpenGLRenderer_obj::_hx___colorMultipliersValue,::openfl::display::OpenGLRenderer_obj::_hx___colorOffsetsValue);
HXLINE( 255)			if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 257)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorMultiplier",b5,e4,dc,18),::openfl::display::OpenGLRenderer_obj::_hx___colorMultipliersValue);
HXLINE( 258)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorOffset",c7,ea,07,41),::openfl::display::OpenGLRenderer_obj::_hx___colorOffsetsValue);
            			}
            			else {
HXLINE( 260)				if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 262)					if (hx::IsNotNull( this->_hx___currentShader->_hx___colorMultiplier )) {
HXLINE( 262)						this->_hx___currentShader->_hx___colorMultiplier->value = ::openfl::display::OpenGLRenderer_obj::_hx___colorMultipliersValue;
            					}
HXLINE( 263)					if (hx::IsNotNull( this->_hx___currentShader->_hx___colorOffset )) {
HXLINE( 263)						this->_hx___currentShader->_hx___colorOffset->value = ::openfl::display::OpenGLRenderer_obj::_hx___colorOffsetsValue;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 269)			if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 271)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorMultiplier",b5,e4,dc,18),::openfl::display::OpenGLRenderer_obj::_hx___emptyColorValue);
HXLINE( 272)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorOffset",c7,ea,07,41),::openfl::display::OpenGLRenderer_obj::_hx___emptyColorValue);
            			}
            			else {
HXLINE( 274)				if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 276)					if (hx::IsNotNull( this->_hx___currentShader->_hx___colorMultiplier )) {
HXLINE( 276)						this->_hx___currentShader->_hx___colorMultiplier->value = ::openfl::display::OpenGLRenderer_obj::_hx___emptyColorValue;
            					}
HXLINE( 277)					if (hx::IsNotNull( this->_hx___currentShader->_hx___colorOffset )) {
HXLINE( 277)						this->_hx___currentShader->_hx___colorOffset->value = ::openfl::display::OpenGLRenderer_obj::_hx___emptyColorValue;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,applyColorTransform,(void))

void OpenGLRenderer_obj::applyHasColorTransform(bool enabled){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_286_applyHasColorTransform)
HXLINE( 288)		::openfl::display::OpenGLRenderer_obj::_hx___hasColorTransformValue[(int)0] = enabled;
HXLINE( 290)		if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 292)			this->_hx___currentShaderBuffer->addBoolOverride(HX_("openfl_HasColorTransform",b4,00,4b,62),::openfl::display::OpenGLRenderer_obj::_hx___hasColorTransformValue);
            		}
            		else {
HXLINE( 294)			if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 296)				if (hx::IsNotNull( this->_hx___currentShader->_hx___hasColorTransform )) {
HXLINE( 296)					this->_hx___currentShader->_hx___hasColorTransform->value = ::openfl::display::OpenGLRenderer_obj::_hx___hasColorTransformValue;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,applyHasColorTransform,(void))

void OpenGLRenderer_obj::applyMatrix(::Array< Float > matrix){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_305_applyMatrix)
HXDLIN( 305)		if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 307)			this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_Matrix",70,ea,41,06),matrix);
            		}
            		else {
HXLINE( 309)			if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 311)				if (hx::IsNotNull( this->_hx___currentShader->_hx___matrix )) {
HXLINE( 311)					this->_hx___currentShader->_hx___matrix->value = matrix;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,applyMatrix,(void))

 ::lime::utils::ArrayBufferView OpenGLRenderer_obj::getMatrix( ::openfl::geom::Matrix transform){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_320_getMatrix)
HXDLIN( 320)		if (hx::IsNotNull( this->gl )) {
HXLINE( 322)			::Array< Float > values = this->_hx___getMatrix(transform,(int)1);
HXLINE( 324)			{
HXLINE( 324)				int _g = (int)0;
HXDLIN( 324)				while((_g < (int)16)){
HXLINE( 324)					_g = (_g + (int)1);
HXDLIN( 324)					int i = (_g - (int)1);
HXLINE( 326)					 ::lime::utils::ArrayBufferView _hx_tmp = this->_hx___matrix;
HXDLIN( 326)					::lime::math::_Matrix4::Matrix4_Impl__obj::set(_hx_tmp,i,values->__get(i));
            				}
            			}
HXLINE( 330)			return this->_hx___matrix;
            		}
            		else {
HXLINE( 334)			::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->_hx___matrix);
HXLINE( 335)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)0,transform->a);
HXLINE( 336)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)1,transform->b);
HXLINE( 337)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)4,transform->c);
HXLINE( 338)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)5,transform->d);
HXLINE( 339)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)12,transform->tx);
HXLINE( 340)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)13,transform->ty);
HXLINE( 342)			return this->_hx___matrix;
            		}
HXLINE( 320)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,getMatrix,return )

void OpenGLRenderer_obj::setShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_349_setShader)
HXLINE( 351)		this->_hx___currentShaderBuffer = null();
HXLINE( 353)		if (hx::IsEq( this->_hx___currentShader,shader )) {
HXLINE( 353)			return;
            		}
HXLINE( 355)		bool _hx_tmp = hx::IsNotNull( this->_hx___currentShader );
HXLINE( 362)		if (hx::IsNull( shader )) {
HXLINE( 364)			this->_hx___currentShader = null();
HXLINE( 365)			this->_hx___context3D->setProgram(null());
HXLINE( 367)			return;
            		}
            		else {
HXLINE( 371)			this->_hx___currentShader = shader;
HXLINE( 372)			this->_hx___initShader(shader);
HXLINE( 373)			this->_hx___context3D->setProgram(shader->program);
HXLINE( 374)			this->_hx___context3D->_hx___flushGLProgram();
HXLINE( 376)			this->_hx___currentShader->_hx___enable();
HXLINE( 377)			this->_hx___context3D->_hx___state->shader = shader;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,setShader,(void))

void OpenGLRenderer_obj::setViewport(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_386_setViewport)
HXDLIN( 386)		this->_hx___gl->viewport(this->_hx___offsetX,this->_hx___offsetY,this->_hx___displayWidth,this->_hx___displayHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,setViewport,(void))

void OpenGLRenderer_obj::updateShader(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_393_updateShader)
HXDLIN( 393)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 395)			if (hx::IsNotNull( this->_hx___currentShader->_hx___position )) {
HXLINE( 395)				this->_hx___currentShader->_hx___position->_hx___useArray = true;
            			}
HXLINE( 396)			if (hx::IsNotNull( this->_hx___currentShader->_hx___textureCoord )) {
HXLINE( 396)				this->_hx___currentShader->_hx___textureCoord->_hx___useArray = true;
            			}
HXLINE( 397)			this->_hx___context3D->setProgram(this->_hx___currentShader->program);
HXLINE( 398)			this->_hx___context3D->_hx___flushGLProgram();
HXLINE( 399)			this->_hx___context3D->_hx___flushGLTextures();
HXLINE( 400)			this->_hx___currentShader->_hx___update();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,updateShader,(void))

void OpenGLRenderer_obj::useAlphaArray(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_409_useAlphaArray)
HXDLIN( 409)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 411)			if (hx::IsNotNull( this->_hx___currentShader->_hx___alpha )) {
HXLINE( 411)				this->_hx___currentShader->_hx___alpha->_hx___useArray = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,useAlphaArray,(void))

void OpenGLRenderer_obj::useColorTransformArray(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_420_useColorTransformArray)
HXDLIN( 420)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 422)			if (hx::IsNotNull( this->_hx___currentShader->_hx___colorMultiplier )) {
HXLINE( 422)				this->_hx___currentShader->_hx___colorMultiplier->_hx___useArray = true;
            			}
HXLINE( 423)			if (hx::IsNotNull( this->_hx___currentShader->_hx___colorOffset )) {
HXLINE( 423)				this->_hx___currentShader->_hx___colorOffset->_hx___useArray = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,useColorTransformArray,(void))

void OpenGLRenderer_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_430___cleanup)
HXLINE( 432)		if ((this->_hx___stencilReference > (int)0)) {
HXLINE( 434)			this->_hx___stencilReference = (int)0;
HXLINE( 435)			this->_hx___context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 436)			this->_hx___context3D->setStencilReferenceValue((int)0,(int)0,(int)0);
            		}
HXLINE( 440)		if ((this->_hx___numClipRects > (int)0)) {
HXLINE( 442)			this->_hx___numClipRects = (int)0;
HXLINE( 443)			this->_hx___scissorRect(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,_hx___cleanup,(void))

void OpenGLRenderer_obj::_hx___clear(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_450___clear)
HXLINE( 452)		bool _hx_tmp;
HXDLIN( 452)		if (hx::IsNotNull( this->_hx___stage )) {
HXLINE( 452)			_hx_tmp = this->_hx___stage->_hx___transparent;
            		}
            		else {
HXLINE( 452)			_hx_tmp = true;
            		}
HXDLIN( 452)		if (_hx_tmp) {
HXLINE( 454)			this->_hx___context3D->clear((int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)1);
            		}
            		else {
HXLINE( 458)			 ::openfl::display3D::Context3D _hx_tmp1 = this->_hx___context3D;
HXDLIN( 458)			Float _hx_tmp2 = this->_hx___stage->_hx___colorSplit->__get((int)0);
HXDLIN( 458)			Float _hx_tmp3 = this->_hx___stage->_hx___colorSplit->__get((int)1);
HXDLIN( 458)			_hx_tmp1->clear(_hx_tmp2,_hx_tmp3,this->_hx___stage->_hx___colorSplit->__get((int)2),(int)1,(int)0,(int)0,(int)1);
            		}
HXLINE( 462)		this->_hx___cleared = true;
            	}


void OpenGLRenderer_obj::_hx___clearShader(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_469___clearShader)
HXDLIN( 469)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 471)			if (hx::IsNull( this->_hx___currentShaderBuffer )) {
HXLINE( 473)				if (hx::IsNotNull( this->_hx___currentShader->_hx___bitmap )) {
HXLINE( 473)					this->_hx___currentShader->_hx___bitmap->input = null();
            				}
            			}
            			else {
HXLINE( 477)				this->_hx___currentShaderBuffer->clearOverride();
            			}
HXLINE( 481)			if (hx::IsNotNull( this->_hx___currentShader->_hx___texture )) {
HXLINE( 481)				this->_hx___currentShader->_hx___texture->input = null();
            			}
HXLINE( 482)			if (hx::IsNotNull( this->_hx___currentShader->_hx___textureSize )) {
HXLINE( 482)				this->_hx___currentShader->_hx___textureSize->value = null();
            			}
HXLINE( 483)			if (hx::IsNotNull( this->_hx___currentShader->_hx___hasColorTransform )) {
HXLINE( 483)				this->_hx___currentShader->_hx___hasColorTransform->value = null();
            			}
HXLINE( 484)			if (hx::IsNotNull( this->_hx___currentShader->_hx___position )) {
HXLINE( 484)				this->_hx___currentShader->_hx___position->value = null();
            			}
HXLINE( 485)			if (hx::IsNotNull( this->_hx___currentShader->_hx___matrix )) {
HXLINE( 485)				this->_hx___currentShader->_hx___matrix->value = null();
            			}
HXLINE( 486)			this->_hx___currentShader->_hx___clearUseArray();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,_hx___clearShader,(void))

void OpenGLRenderer_obj::_hx___copyShader( ::openfl::display::OpenGLRenderer other){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_493___copyShader)
HXLINE( 495)		this->_hx___currentShader = other->_hx___currentShader;
HXLINE( 496)		this->_hx___currentShaderBuffer = other->_hx___currentShaderBuffer;
HXLINE( 497)		this->_hx___currentDisplayShader = other->_hx___currentDisplayShader;
HXLINE( 498)		this->_hx___currentGraphicsShader = other->_hx___currentGraphicsShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___copyShader,(void))

::Array< Float > OpenGLRenderer_obj::_hx___getMatrix( ::openfl::geom::Matrix transform, ::Dynamic pixelSnapping){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_505___getMatrix)
HXLINE( 507)		 ::openfl::geom::Matrix _matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 508)		_matrix->copyFrom(transform);
HXLINE( 509)		_matrix->concat(this->_hx___worldTransform);
HXLINE( 511)		bool _hx_tmp;
HXDLIN( 511)		if (hx::IsNotEq( pixelSnapping,(int)0 )) {
HXLINE( 511)			bool _hx_tmp1;
HXDLIN( 511)			bool _hx_tmp2;
HXDLIN( 511)			bool _hx_tmp3;
HXDLIN( 511)			if (hx::IsEq( pixelSnapping,(int)1 )) {
HXLINE( 511)				_hx_tmp3 = (_matrix->b == (int)0);
            			}
            			else {
HXLINE( 511)				_hx_tmp3 = false;
            			}
HXDLIN( 511)			if (_hx_tmp3) {
HXLINE( 511)				_hx_tmp2 = (_matrix->c == (int)0);
            			}
            			else {
HXLINE( 511)				_hx_tmp2 = false;
            			}
HXDLIN( 511)			if (_hx_tmp2) {
HXLINE( 511)				if ((_matrix->a < ((Float)1.001))) {
HXLINE( 511)					_hx_tmp1 = (_matrix->a > ((Float)0.999));
            				}
            				else {
HXLINE( 511)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE( 511)				_hx_tmp1 = false;
            			}
HXDLIN( 511)			if (_hx_tmp1) {
HXLINE( 511)				if ((_matrix->d < ((Float)1.001))) {
HXLINE( 511)					_hx_tmp = (_matrix->d > ((Float)0.999));
            				}
            				else {
HXLINE( 511)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 511)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 511)			_hx_tmp = true;
            		}
HXDLIN( 511)		if (_hx_tmp) {
HXLINE( 513)			_matrix->tx = ::Math_obj::round(_matrix->tx);
HXLINE( 514)			_matrix->ty = ::Math_obj::round(_matrix->ty);
            		}
HXLINE( 518)		::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->_hx___matrix);
HXLINE( 519)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)0,_matrix->a);
HXLINE( 520)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)1,_matrix->b);
HXLINE( 521)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)4,_matrix->c);
HXLINE( 522)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)5,_matrix->d);
HXLINE( 523)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)12,_matrix->tx);
HXLINE( 524)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,(int)13,_matrix->ty);
HXLINE( 525)		 ::lime::utils::ArrayBufferView _hx_tmp4;
HXDLIN( 525)		if (this->_hx___flipped) {
HXLINE( 525)			_hx_tmp4 = this->_hx___projectionFlipped;
            		}
            		else {
HXLINE( 525)			_hx_tmp4 = this->_hx___projection;
            		}
HXDLIN( 525)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this->_hx___matrix,_hx_tmp4);
HXLINE( 527)		{
HXLINE( 527)			int _g = (int)0;
HXDLIN( 527)			while((_g < (int)16)){
HXLINE( 527)				_g = (_g + (int)1);
HXDLIN( 527)				int i = (_g - (int)1);
HXLINE( 529)				::Array< Float > _hx_tmp5 = this->_hx___values;
HXDLIN( 529)				_hx_tmp5[i] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,i);
            			}
            		}
HXLINE( 533)		::openfl::geom::Matrix_obj::_hx___pool->release(_matrix);
HXLINE( 535)		return this->_hx___values;
            	}


HX_DEFINE_DYNAMIC_FUNC2(OpenGLRenderer_obj,_hx___getMatrix,return )

 ::openfl::display::Shader OpenGLRenderer_obj::_hx___initShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_540___initShader)
HXLINE( 542)		if (hx::IsNotNull( shader )) {
HXLINE( 546)			if (hx::IsNull( shader->_hx___context )) {
HXLINE( 548)				shader->_hx___context = this->_hx___context3D;
HXLINE( 549)				shader->_hx___init();
            			}
HXLINE( 554)			return shader;
            		}
HXLINE( 558)		return this->_hx___defaultShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___initShader,return )

 ::openfl::display::Shader OpenGLRenderer_obj::_hx___initDisplayShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_563___initDisplayShader)
HXLINE( 565)		if (hx::IsNotNull( shader )) {
HXLINE( 569)			if (hx::IsNull( shader->_hx___context )) {
HXLINE( 571)				shader->_hx___context = this->_hx___context3D;
HXLINE( 572)				shader->_hx___init();
            			}
HXLINE( 577)			return shader;
            		}
HXLINE( 581)		return this->_hx___defaultDisplayShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___initDisplayShader,return )

 ::openfl::display::Shader OpenGLRenderer_obj::_hx___initGraphicsShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_586___initGraphicsShader)
HXLINE( 588)		if (hx::IsNotNull( shader )) {
HXLINE( 592)			if (hx::IsNull( shader->_hx___context )) {
HXLINE( 594)				shader->_hx___context = this->_hx___context3D;
HXLINE( 595)				shader->_hx___init();
            			}
HXLINE( 600)			return shader;
            		}
HXLINE( 604)		return this->_hx___defaultGraphicsShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___initGraphicsShader,return )

 ::openfl::display::Shader OpenGLRenderer_obj::_hx___initShaderBuffer( ::openfl::_internal::renderer::ShaderBuffer shaderBuffer){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_609___initShaderBuffer)
HXLINE( 611)		if (hx::IsNotNull( shaderBuffer )) {
HXLINE( 613)			return this->_hx___initGraphicsShader(shaderBuffer->shader);
            		}
HXLINE( 617)		return this->_hx___defaultGraphicsShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___initShaderBuffer,return )

void OpenGLRenderer_obj::_hx___popMask(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_622___popMask)
HXLINE( 624)		if ((this->_hx___stencilReference == (int)0)) {
HXLINE( 624)			return;
            		}
HXLINE( 626)		 ::openfl::display::DisplayObject mask = this->_hx___maskObjects->pop().StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 628)		if ((this->_hx___stencilReference > (int)1)) {
HXLINE( 630)			this->_hx___context3D->setStencilActions((int)2,(int)1,(int)0,(int)0,(int)5);
HXLINE( 631)			this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,(int)255,(int)255);
HXLINE( 632)			this->_hx___context3D->setColorMask(false,false,false,false);
HXLINE( 634)			mask->_hx___renderGLMask(hx::ObjectPtr<OBJ_>(this));
HXLINE( 635)			this->_hx___stencilReference--;
HXLINE( 637)			this->_hx___context3D->setStencilActions((int)2,(int)1,(int)5,(int)5,(int)5);
HXLINE( 638)			this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,(int)255,(int)0);
HXLINE( 639)			this->_hx___context3D->setColorMask(true,true,true,true);
            		}
            		else {
HXLINE( 643)			this->_hx___stencilReference = (int)0;
HXLINE( 644)			this->_hx___context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 645)			this->_hx___context3D->setStencilReferenceValue((int)0,(int)0,(int)0);
            		}
            	}


void OpenGLRenderer_obj::_hx___popMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_652___popMaskObject)
HXLINE( 654)		if (hx::IsNotNull( object->_hx___mask )) {
HXLINE( 656)			this->_hx___popMask();
            		}
HXLINE( 660)		bool _hx_tmp;
HXDLIN( 660)		if (handleScrollRect) {
HXLINE( 660)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 660)			_hx_tmp = false;
            		}
HXDLIN( 660)		if (_hx_tmp) {
HXLINE( 662)			bool _hx_tmp1;
HXDLIN( 662)			if ((object->_hx___renderTransform->b == (int)0)) {
HXLINE( 662)				_hx_tmp1 = (object->_hx___renderTransform->c != (int)0);
            			}
            			else {
HXLINE( 662)				_hx_tmp1 = true;
            			}
HXDLIN( 662)			if (_hx_tmp1) {
HXLINE( 664)				::Array< ::Dynamic> _hx_tmp2 = this->_hx___maskObjects;
HXDLIN( 664)				this->_hx___scrollRectMasks->release(( ( ::openfl::display::Shape)(_hx_tmp2->__get((this->_hx___maskObjects->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()) ));
HXLINE( 665)				this->_hx___popMask();
            			}
            			else {
HXLINE( 669)				this->_hx___popMaskRect();
            			}
            		}
            	}


void OpenGLRenderer_obj::_hx___popMaskRect(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_680___popMaskRect)
HXDLIN( 680)		if ((this->_hx___numClipRects > (int)0)) {
HXLINE( 682)			this->_hx___numClipRects--;
HXLINE( 684)			if ((this->_hx___numClipRects > (int)0)) {
HXLINE( 686)				::Array< ::Dynamic> _hx_tmp = this->_hx___clipRects;
HXDLIN( 686)				this->_hx___scissorRect(_hx_tmp->__get((this->_hx___numClipRects - (int)1)).StaticCast<  ::openfl::geom::Rectangle >());
            			}
            			else {
HXLINE( 690)				this->_hx___scissorRect(null());
            			}
            		}
            	}


void OpenGLRenderer_obj::_hx___pushMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_699___pushMask)
HXLINE( 701)		if ((this->_hx___stencilReference == (int)0)) {
HXLINE( 703)			this->_hx___context3D->clear((int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)4);
HXLINE( 704)			this->_hx___updatedStencil = true;
            		}
HXLINE( 708)		this->_hx___context3D->setStencilActions((int)2,(int)1,(int)2,(int)5,(int)5);
HXLINE( 709)		this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,(int)255,(int)255);
HXLINE( 710)		this->_hx___context3D->setColorMask(false,false,false,false);
HXLINE( 712)		mask->_hx___renderGLMask(hx::ObjectPtr<OBJ_>(this));
HXLINE( 713)		this->_hx___maskObjects->push(mask);
HXLINE( 714)		this->_hx___stencilReference++;
HXLINE( 716)		this->_hx___context3D->setStencilActions((int)2,(int)1,(int)5,(int)5,(int)5);
HXLINE( 717)		this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,(int)255,(int)0);
HXLINE( 718)		this->_hx___context3D->setColorMask(true,true,true,true);
            	}


void OpenGLRenderer_obj::_hx___pushMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_723___pushMaskObject)
HXLINE( 725)		bool _hx_tmp;
HXDLIN( 725)		if (handleScrollRect) {
HXLINE( 725)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 725)			_hx_tmp = false;
            		}
HXDLIN( 725)		if (_hx_tmp) {
HXLINE( 727)			bool _hx_tmp1;
HXDLIN( 727)			if ((object->_hx___renderTransform->b == (int)0)) {
HXLINE( 727)				_hx_tmp1 = (object->_hx___renderTransform->c != (int)0);
            			}
            			else {
HXLINE( 727)				_hx_tmp1 = true;
            			}
HXDLIN( 727)			if (_hx_tmp1) {
HXLINE( 729)				 ::openfl::display::Shape shape = this->_hx___scrollRectMasks->get().StaticCast<  ::openfl::display::Shape >();
HXLINE( 730)				shape->get_graphics()->clear();
HXLINE( 731)				shape->get_graphics()->beginFill((int)65280,null());
HXLINE( 732)				shape->get_graphics()->drawRect(object->_hx___scrollRect->x,object->_hx___scrollRect->y,object->_hx___scrollRect->width,object->_hx___scrollRect->height);
HXLINE( 733)				shape->_hx___renderTransform->copyFrom(object->_hx___renderTransform);
HXLINE( 734)				this->_hx___pushMask(shape);
            			}
            			else {
HXLINE( 738)				this->_hx___pushMaskRect(object->_hx___scrollRect,object->_hx___renderTransform);
            			}
            		}
HXLINE( 744)		if (hx::IsNotNull( object->_hx___mask )) {
HXLINE( 746)			this->_hx___pushMask(object->_hx___mask);
            		}
            	}


void OpenGLRenderer_obj::_hx___pushMaskRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform){
            	HX_GC_STACKFRAME(&_hx_pos_2f59d7e567bca573_753___pushMaskRect)
HXLINE( 757)		if ((this->_hx___numClipRects == this->_hx___clipRects->length)) {
HXLINE( 759)			::Array< ::Dynamic> _hx_tmp = this->_hx___clipRects;
HXDLIN( 759)			int _hx_tmp1 = this->_hx___numClipRects;
HXDLIN( 759)			_hx_tmp[_hx_tmp1] =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 763)		 ::openfl::geom::Matrix _matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 764)		_matrix->copyFrom(transform);
HXLINE( 765)		_matrix->concat(this->_hx___worldTransform);
HXLINE( 767)		 ::openfl::geom::Rectangle clipRect = this->_hx___clipRects->__get(this->_hx___numClipRects).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 768)		rect->_hx___transform(clipRect,_matrix);
HXLINE( 770)		if ((this->_hx___numClipRects > (int)0)) {
HXLINE( 772)			::Array< ::Dynamic> parentClipRect = this->_hx___clipRects;
HXDLIN( 772)			 ::openfl::geom::Rectangle parentClipRect1 = parentClipRect->__get((this->_hx___numClipRects - (int)1)).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 773)			clipRect->_hx___contract(parentClipRect1->x,parentClipRect1->y,parentClipRect1->width,parentClipRect1->height);
            		}
HXLINE( 777)		if ((clipRect->height < (int)0)) {
HXLINE( 779)			clipRect->height = (int)0;
            		}
HXLINE( 783)		if ((clipRect->width < (int)0)) {
HXLINE( 785)			clipRect->width = (int)0;
            		}
HXLINE( 789)		::openfl::geom::Matrix_obj::_hx___pool->release(_matrix);
HXLINE( 791)		this->_hx___scissorRect(clipRect);
HXLINE( 792)		this->_hx___numClipRects++;
            	}


void OpenGLRenderer_obj::_hx___render(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_797___render)
HXLINE( 799)		this->_hx___context3D->setColorMask(true,true,true,true);
HXLINE( 800)		this->_hx___context3D->setCulling((int)3);
HXLINE( 801)		this->_hx___context3D->setDepthTest(false,(int)0);
HXLINE( 802)		this->_hx___context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 803)		this->_hx___context3D->setStencilReferenceValue((int)0,(int)0,(int)0);
HXLINE( 804)		this->_hx___context3D->setScissorRectangle(null());
HXLINE( 806)		this->_hx___blendMode = null();
HXLINE( 807)		this->_hx___setBlendMode((int)10);
HXLINE( 809)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 811)			::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(this->_hx___offsetX,this->_hx___offsetY,this->_hx___displayWidth,this->_hx___displayHeight);
HXLINE( 812)			this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 814)			bool _hx_tmp;
HXDLIN( 814)			if ((this->_hx___worldTransform->a == (int)1)) {
HXLINE( 814)				_hx_tmp = (this->_hx___worldTransform->d != (int)1);
            			}
            			else {
HXLINE( 814)				_hx_tmp = true;
            			}
HXDLIN( 814)			this->_hx___upscaled = _hx_tmp;
HXLINE( 816)			::openfl::display::IBitmapDrawable_obj::_hx___renderGL(object,hx::ObjectPtr<OBJ_>(this));
HXLINE( 820)			bool _hx_tmp1;
HXDLIN( 820)			if ((this->_hx___offsetX <= (int)0)) {
HXLINE( 820)				_hx_tmp1 = (this->_hx___offsetY > (int)0);
            			}
            			else {
HXLINE( 820)				_hx_tmp1 = true;
            			}
HXDLIN( 820)			if (_hx_tmp1) {
HXLINE( 824)				if ((this->_hx___offsetX > (int)0)) {
HXLINE( 827)					::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo((int)0,(int)0,this->_hx___offsetX,this->_hx___height);
HXLINE( 828)					this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 830)					this->_hx___context3D->_hx___flushGL();
HXLINE( 831)					this->_hx___gl->clearColor((int)0,(int)0,(int)0,(int)1);
HXLINE( 832)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
HXLINE( 836)					 ::openfl::geom::Rectangle _hx_tmp2 = ::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle;
HXDLIN( 836)					_hx_tmp2->setTo((this->_hx___offsetX + this->_hx___displayWidth),(int)0,this->_hx___width,this->_hx___height);
HXLINE( 837)					this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 839)					this->_hx___context3D->_hx___flushGL();
HXLINE( 840)					this->_hx___gl->clearColor((int)0,(int)0,(int)0,(int)1);
HXLINE( 841)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
            				}
HXLINE( 846)				if ((this->_hx___offsetY > (int)0)) {
HXLINE( 849)					::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo((int)0,(int)0,this->_hx___width,this->_hx___offsetY);
HXLINE( 850)					this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 852)					this->_hx___context3D->_hx___flushGL();
HXLINE( 853)					this->_hx___gl->clearColor((int)0,(int)0,(int)0,(int)1);
HXLINE( 854)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
HXLINE( 858)					 ::openfl::geom::Rectangle _hx_tmp3 = ::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle;
HXDLIN( 858)					_hx_tmp3->setTo((int)0,(this->_hx___offsetY + this->_hx___displayHeight),this->_hx___width,this->_hx___height);
HXLINE( 859)					this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 861)					this->_hx___context3D->_hx___flushGL();
HXLINE( 862)					this->_hx___gl->clearColor((int)0,(int)0,(int)0,(int)1);
HXLINE( 863)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
            				}
HXLINE( 868)				this->_hx___context3D->setScissorRectangle(null());
            			}
            		}
            		else {
HXLINE( 874)			::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(this->_hx___offsetX,this->_hx___offsetY,this->_hx___displayWidth,this->_hx___displayHeight);
HXLINE( 875)			this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
HXLINE( 882)			 ::openfl::display::DisplayObject cacheMask = ( ( ::openfl::display::DisplayObject)(object->__Field(HX_("__mask",0c,a4,4e,f7),hx::paccDynamic)) );
HXLINE( 883)			 ::openfl::geom::Rectangle cacheScrollRect = ( ( ::openfl::geom::Rectangle)(object->__Field(HX_("__scrollRect",f1,56,fa,41),hx::paccDynamic)) );
HXLINE( 884)			object->__SetField(HX_("__mask",0c,a4,4e,f7),null(),hx::paccDynamic);
HXLINE( 885)			object->__SetField(HX_("__scrollRect",f1,56,fa,41),null(),hx::paccDynamic);
HXLINE( 887)			::openfl::display::IBitmapDrawable_obj::_hx___renderGL(object,hx::ObjectPtr<OBJ_>(this));
HXLINE( 889)			object->__SetField(HX_("__mask",0c,a4,4e,f7),cacheMask,hx::paccDynamic);
HXLINE( 890)			object->__SetField(HX_("__scrollRect",f1,56,fa,41),cacheScrollRect,hx::paccDynamic);
            		}
HXLINE( 894)		this->_hx___context3D->present();
            	}


void OpenGLRenderer_obj::_hx___renderFilterPass( ::openfl::display::BitmapData source, ::openfl::display::Shader shader,bool smooth,hx::Null< bool >  __o_clear){
bool clear = __o_clear.Default(true);
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_899___renderFilterPass)
HXLINE( 901)		bool _hx_tmp;
HXDLIN( 901)		if (hx::IsNotNull( source )) {
HXLINE( 901)			_hx_tmp = hx::IsNull( shader );
            		}
            		else {
HXLINE( 901)			_hx_tmp = true;
            		}
HXDLIN( 901)		if (_hx_tmp) {
HXLINE( 901)			return;
            		}
HXLINE( 902)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 902)			return;
            		}
HXLINE( 904)		 ::openfl::display3D::textures::TextureBase cacheRTT = this->_hx___context3D->_hx___state->renderToTexture;
HXLINE( 905)		bool cacheRTTDepthStencil = this->_hx___context3D->_hx___state->renderToTextureDepthStencil;
HXLINE( 906)		int cacheRTTAntiAlias = this->_hx___context3D->_hx___state->renderToTextureAntiAlias;
HXLINE( 907)		int cacheRTTSurfaceSelector = this->_hx___context3D->_hx___state->renderToTextureSurfaceSelector;
HXLINE( 909)		 ::openfl::display3D::Context3D _hx_tmp1 = this->_hx___context3D;
HXDLIN( 909)		_hx_tmp1->setRenderToTexture(this->_hx___defaultRenderTarget->getTexture(this->_hx___context3D),false,null(),null());
HXLINE( 911)		if (clear) {
HXLINE( 913)			this->_hx___context3D->clear((int)0,(int)0,(int)0,(int)0,(int)0,(int)0,(int)1);
            		}
HXLINE( 917)		 ::openfl::display::Shader shader1 = this->_hx___initShader(shader);
HXLINE( 918)		this->setShader(shader1);
HXLINE( 919)		this->applyAlpha((int)1);
HXLINE( 920)		this->applyBitmapData(source,smooth,null());
HXLINE( 921)		this->applyColorTransform(null());
HXLINE( 922)		this->applyMatrix(this->_hx___getMatrix(source->_hx___renderTransform,(int)1));
HXLINE( 923)		this->updateShader();
HXLINE( 925)		 ::openfl::display3D::VertexBuffer3D vertexBuffer = source->getVertexBuffer(this->_hx___context3D);
HXLINE( 926)		if (hx::IsNotNull( shader1->_hx___position )) {
HXLINE( 926)			this->_hx___context3D->setVertexBufferAt(shader1->_hx___position->index,vertexBuffer,(int)0,(int)3);
            		}
HXLINE( 927)		if (hx::IsNotNull( shader1->_hx___textureCoord )) {
HXLINE( 927)			this->_hx___context3D->setVertexBufferAt(shader1->_hx___textureCoord->index,vertexBuffer,(int)3,(int)2);
            		}
HXLINE( 928)		 ::openfl::display3D::IndexBuffer3D indexBuffer = source->getIndexBuffer(this->_hx___context3D);
HXLINE( 929)		this->_hx___context3D->drawTriangles(indexBuffer,null(),null());
HXLINE( 931)		if (hx::IsNotNull( cacheRTT )) {
HXLINE( 933)			this->_hx___context3D->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            		}
            		else {
HXLINE( 937)			this->_hx___context3D->setRenderToBackBuffer();
            		}
HXLINE( 941)		this->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC4(OpenGLRenderer_obj,_hx___renderFilterPass,(void))

void OpenGLRenderer_obj::_hx___resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_946___resize)
HXLINE( 948)		this->_hx___width = width;
HXLINE( 949)		this->_hx___height = height;
HXLINE( 951)		int w;
HXDLIN( 951)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 951)			w = this->_hx___stage->stageWidth;
            		}
            		else {
HXLINE( 951)			w = this->_hx___defaultRenderTarget->width;
            		}
HXLINE( 952)		int h;
HXDLIN( 952)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 952)			h = this->_hx___stage->stageHeight;
            		}
            		else {
HXLINE( 952)			h = this->_hx___defaultRenderTarget->height;
            		}
HXLINE( 954)		int _hx_tmp;
HXDLIN( 954)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 954)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN( 954)			Float _hx_tmp1 = ((int)0 * _this->a);
HXDLIN( 954)			_hx_tmp = ::Math_obj::round(((_hx_tmp1 + ((int)0 * _this->c)) + _this->tx));
            		}
            		else {
HXLINE( 954)			_hx_tmp = (int)0;
            		}
HXDLIN( 954)		this->_hx___offsetX = _hx_tmp;
HXLINE( 955)		int _hx_tmp2;
HXDLIN( 955)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 955)			 ::openfl::geom::Matrix _this1 = this->_hx___worldTransform;
HXDLIN( 955)			Float _hx_tmp3 = ((int)0 * _this1->b);
HXDLIN( 955)			_hx_tmp2 = ::Math_obj::round(((_hx_tmp3 + ((int)0 * _this1->d)) + _this1->ty));
            		}
            		else {
HXLINE( 955)			_hx_tmp2 = (int)0;
            		}
HXDLIN( 955)		this->_hx___offsetY = _hx_tmp2;
HXLINE( 956)		int _hx_tmp4;
HXDLIN( 956)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 956)			 ::openfl::geom::Matrix _this2 = this->_hx___worldTransform;
HXDLIN( 956)			Float _hx_tmp5 = (w * _this2->a);
HXDLIN( 956)			_hx_tmp4 = ::Math_obj::round((((_hx_tmp5 + ((int)0 * _this2->c)) + _this2->tx) - this->_hx___offsetX));
            		}
            		else {
HXLINE( 956)			_hx_tmp4 = w;
            		}
HXDLIN( 956)		this->_hx___displayWidth = _hx_tmp4;
HXLINE( 957)		int _hx_tmp6;
HXDLIN( 957)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 957)			 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN( 957)			Float _hx_tmp7 = ((int)0 * _this3->b);
HXDLIN( 957)			_hx_tmp6 = ::Math_obj::round((((_hx_tmp7 + (h * _this3->d)) + _this3->ty) - this->_hx___offsetY));
            		}
            		else {
HXLINE( 957)			_hx_tmp6 = h;
            		}
HXDLIN( 957)		this->_hx___displayHeight = _hx_tmp6;
HXLINE( 959)		 ::lime::utils::ArrayBufferView _hx_tmp8 = this->_hx___projection;
HXDLIN( 959)		int _hx_tmp9 = this->_hx___displayWidth;
HXDLIN( 959)		int _hx_tmp10 = (_hx_tmp9 + (this->_hx___offsetX * (int)2));
HXDLIN( 959)		int _hx_tmp11 = this->_hx___displayHeight;
HXDLIN( 959)		::lime::math::_Matrix4::Matrix4_Impl__obj::createOrtho(_hx_tmp8,(int)0,_hx_tmp10,(int)0,(_hx_tmp11 + (this->_hx___offsetY * (int)2)),(int)-1000,(int)1000);
HXLINE( 960)		 ::lime::utils::ArrayBufferView _hx_tmp12 = this->_hx___projectionFlipped;
HXDLIN( 960)		int _hx_tmp13 = this->_hx___displayWidth;
HXDLIN( 960)		int _hx_tmp14 = (_hx_tmp13 + (this->_hx___offsetX * (int)2));
HXDLIN( 960)		int _hx_tmp15 = this->_hx___displayHeight;
HXDLIN( 960)		::lime::math::_Matrix4::Matrix4_Impl__obj::createOrtho(_hx_tmp12,(int)0,_hx_tmp14,(_hx_tmp15 + (this->_hx___offsetY * (int)2)),(int)0,(int)-1000,(int)1000);
            	}


void OpenGLRenderer_obj::_hx___resumeClipAndMask( ::openfl::display::OpenGLRenderer childRenderer){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_965___resumeClipAndMask)
HXLINE( 967)		if ((this->_hx___stencilReference > (int)0)) {
HXLINE( 969)			this->_hx___context3D->setStencilActions((int)2,(int)1,(int)5,(int)5,(int)5);
HXLINE( 970)			this->_hx___context3D->setStencilReferenceValue(this->_hx___stencilReference,(int)255,(int)0);
            		}
            		else {
HXLINE( 974)			this->_hx___context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 975)			this->_hx___context3D->setStencilReferenceValue((int)0,(int)0,(int)0);
            		}
HXLINE( 979)		if ((this->_hx___numClipRects > (int)0)) {
HXLINE( 981)			::Array< ::Dynamic> _hx_tmp = this->_hx___clipRects;
HXDLIN( 981)			this->_hx___scissorRect(_hx_tmp->__get((this->_hx___numClipRects - (int)1)).StaticCast<  ::openfl::geom::Rectangle >());
            		}
            		else {
HXLINE( 985)			this->_hx___scissorRect(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___resumeClipAndMask,(void))

void OpenGLRenderer_obj::_hx___scissorRect( ::openfl::geom::Rectangle clipRect){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_994___scissorRect)
HXDLIN( 994)		if (hx::IsNotNull( clipRect )) {
HXLINE( 996)			int x = ::Math_obj::floor(clipRect->x);
HXLINE( 997)			int y = ::Math_obj::floor(clipRect->y);
HXLINE( 998)			int width;
HXDLIN( 998)			if ((clipRect->width > (int)0)) {
HXLINE( 998)				width = (::Math_obj::ceil(clipRect->get_right()) - x);
            			}
            			else {
HXLINE( 998)				width = (int)0;
            			}
HXLINE( 999)			int height;
HXDLIN( 999)			if ((clipRect->height > (int)0)) {
HXLINE( 999)				height = (::Math_obj::ceil(clipRect->get_bottom()) - y);
            			}
            			else {
HXLINE( 999)				height = (int)0;
            			}
HXLINE(1001)			if ((width < (int)0)) {
HXLINE(1001)				width = (int)0;
            			}
HXLINE(1002)			if ((height < (int)0)) {
HXLINE(1002)				height = (int)0;
            			}
HXLINE(1005)			::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle->setTo(x,y,width,height);
HXLINE(1006)			this->_hx___context3D->setScissorRectangle(::openfl::display::OpenGLRenderer_obj::_hx___scissorRectangle);
            		}
            		else {
HXLINE(1010)			this->_hx___context3D->setScissorRectangle(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___scissorRect,(void))

void OpenGLRenderer_obj::_hx___setBlendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_1017___setBlendMode)
HXLINE(1019)		if (hx::IsNotNull( this->_hx___overrideBlendMode )) {
HXLINE(1019)			value = this->_hx___overrideBlendMode;
            		}
HXLINE(1020)		if (hx::IsEq( this->_hx___blendMode,value )) {
HXLINE(1020)			return;
            		}
HXLINE(1022)		this->_hx___blendMode = value;
HXLINE(1024)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1028)			this->_hx___context3D->setBlendFactors((int)2,(int)2);
HXDLIN(1028)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1046)			this->_hx___context3D->setBlendFactors((int)2,(int)2);
HXLINE(1047)			this->_hx___context3D->_hx___setGLBlendEquation((int)32775);
HXLINE(1044)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==(int)8) ){
HXLINE(1051)			this->_hx___context3D->setBlendFactors((int)2,(int)2);
HXLINE(1052)			this->_hx___context3D->_hx___setGLBlendEquation((int)32776);
HXLINE(1049)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==(int)9) ){
HXLINE(1032)			this->_hx___context3D->setBlendFactors((int)1,(int)5);
HXDLIN(1032)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==(int)12) ){
HXLINE(1036)			this->_hx___context3D->setBlendFactors((int)2,(int)6);
HXDLIN(1036)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==(int)14) ){
HXLINE(1040)			this->_hx___context3D->setBlendFactors((int)2,(int)2);
HXLINE(1041)			this->_hx___context3D->_hx___setGLBlendEquation(this->_hx___gl->FUNC_REVERSE_SUBTRACT);
HXLINE(1038)			goto _hx_goto_35;
            		}
            		/* default */{
HXLINE(1057)			this->_hx___context3D->setBlendFactors((int)2,(int)5);
            		}
            		_hx_goto_35:;
            	}


void OpenGLRenderer_obj::_hx___setRenderTarget( ::openfl::display::BitmapData renderTarget){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_1064___setRenderTarget)
HXLINE(1066)		this->_hx___defaultRenderTarget = renderTarget;
HXLINE(1067)		this->_hx___flipped = hx::IsNull( renderTarget );
HXLINE(1069)		if (hx::IsNotNull( renderTarget )) {
HXLINE(1071)			this->_hx___resize(renderTarget->width,renderTarget->height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___setRenderTarget,(void))

void OpenGLRenderer_obj::_hx___setShaderBuffer( ::openfl::_internal::renderer::ShaderBuffer shaderBuffer){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_1078___setShaderBuffer)
HXLINE(1080)		this->setShader(shaderBuffer->shader);
HXLINE(1081)		this->_hx___currentShaderBuffer = shaderBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___setShaderBuffer,(void))

void OpenGLRenderer_obj::_hx___suspendClipAndMask(){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_1086___suspendClipAndMask)
HXLINE(1088)		if ((this->_hx___stencilReference > (int)0)) {
HXLINE(1090)			this->_hx___context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE(1091)			this->_hx___context3D->setStencilReferenceValue((int)0,(int)0,(int)0);
            		}
HXLINE(1095)		if ((this->_hx___numClipRects > (int)0)) {
HXLINE(1097)			this->_hx___scissorRect(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OpenGLRenderer_obj,_hx___suspendClipAndMask,(void))

void OpenGLRenderer_obj::_hx___updateShaderBuffer(int bufferOffset){
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_1106___updateShaderBuffer)
HXDLIN(1106)		bool _hx_tmp;
HXDLIN(1106)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXDLIN(1106)			_hx_tmp = hx::IsNotNull( this->_hx___currentShaderBuffer );
            		}
            		else {
HXDLIN(1106)			_hx_tmp = false;
            		}
HXDLIN(1106)		if (_hx_tmp) {
HXLINE(1108)			this->_hx___currentShader->_hx___updateFromBuffer(this->_hx___currentShaderBuffer,bufferOffset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OpenGLRenderer_obj,_hx___updateShaderBuffer,(void))

::Array< Float > OpenGLRenderer_obj::_hx___alphaValue;

::Array< Float > OpenGLRenderer_obj::_hx___colorMultipliersValue;

::Array< Float > OpenGLRenderer_obj::_hx___colorOffsetsValue;

::Array< Float > OpenGLRenderer_obj::_hx___defaultColorMultipliersValue;

::Array< Float > OpenGLRenderer_obj::_hx___emptyColorValue;

::Array< Float > OpenGLRenderer_obj::_hx___emptyAlphaValue;

::Array< bool > OpenGLRenderer_obj::_hx___hasColorTransformValue;

 ::openfl::geom::Rectangle OpenGLRenderer_obj::_hx___scissorRectangle;

::Array< Float > OpenGLRenderer_obj::_hx___textureSizeValue;


hx::ObjectPtr< OpenGLRenderer_obj > OpenGLRenderer_obj::__new( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget) {
	hx::ObjectPtr< OpenGLRenderer_obj > __this = new OpenGLRenderer_obj();
	__this->__construct(context,defaultRenderTarget);
	return __this;
}

hx::ObjectPtr< OpenGLRenderer_obj > OpenGLRenderer_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget) {
	OpenGLRenderer_obj *__this = (OpenGLRenderer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OpenGLRenderer_obj), true, "openfl.display.OpenGLRenderer"));
	*(void **)__this = OpenGLRenderer_obj::_hx_vtable;
	__this->__construct(context,defaultRenderTarget);
	return __this;
}

OpenGLRenderer_obj::OpenGLRenderer_obj()
{
}

void OpenGLRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OpenGLRenderer);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(_hx___context3D,"__context3D");
	HX_MARK_MEMBER_NAME(_hx___clipRects,"__clipRects");
	HX_MARK_MEMBER_NAME(_hx___currentDisplayShader,"__currentDisplayShader");
	HX_MARK_MEMBER_NAME(_hx___currentGraphicsShader,"__currentGraphicsShader");
	HX_MARK_MEMBER_NAME(_hx___currentRenderTarget,"__currentRenderTarget");
	HX_MARK_MEMBER_NAME(_hx___currentShader,"__currentShader");
	HX_MARK_MEMBER_NAME(_hx___currentShaderBuffer,"__currentShaderBuffer");
	HX_MARK_MEMBER_NAME(_hx___defaultDisplayShader,"__defaultDisplayShader");
	HX_MARK_MEMBER_NAME(_hx___defaultGraphicsShader,"__defaultGraphicsShader");
	HX_MARK_MEMBER_NAME(_hx___defaultRenderTarget,"__defaultRenderTarget");
	HX_MARK_MEMBER_NAME(_hx___defaultShader,"__defaultShader");
	HX_MARK_MEMBER_NAME(_hx___displayHeight,"__displayHeight");
	HX_MARK_MEMBER_NAME(_hx___displayWidth,"__displayWidth");
	HX_MARK_MEMBER_NAME(_hx___flipped,"__flipped");
	HX_MARK_MEMBER_NAME(_hx___gl,"__gl");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___maskShader,"__maskShader");
	HX_MARK_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_MARK_MEMBER_NAME(_hx___maskObjects,"__maskObjects");
	HX_MARK_MEMBER_NAME(_hx___numClipRects,"__numClipRects");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___projection,"__projection");
	HX_MARK_MEMBER_NAME(_hx___projectionFlipped,"__projectionFlipped");
	HX_MARK_MEMBER_NAME(_hx___scrollRectMasks,"__scrollRectMasks");
	HX_MARK_MEMBER_NAME(_hx___softwareRenderer,"__softwareRenderer");
	HX_MARK_MEMBER_NAME(_hx___stencilReference,"__stencilReference");
	HX_MARK_MEMBER_NAME(_hx___tempRect,"__tempRect");
	HX_MARK_MEMBER_NAME(_hx___updatedStencil,"__updatedStencil");
	HX_MARK_MEMBER_NAME(_hx___upscaled,"__upscaled");
	HX_MARK_MEMBER_NAME(_hx___values,"__values");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObjectRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OpenGLRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(_hx___context3D,"__context3D");
	HX_VISIT_MEMBER_NAME(_hx___clipRects,"__clipRects");
	HX_VISIT_MEMBER_NAME(_hx___currentDisplayShader,"__currentDisplayShader");
	HX_VISIT_MEMBER_NAME(_hx___currentGraphicsShader,"__currentGraphicsShader");
	HX_VISIT_MEMBER_NAME(_hx___currentRenderTarget,"__currentRenderTarget");
	HX_VISIT_MEMBER_NAME(_hx___currentShader,"__currentShader");
	HX_VISIT_MEMBER_NAME(_hx___currentShaderBuffer,"__currentShaderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___defaultDisplayShader,"__defaultDisplayShader");
	HX_VISIT_MEMBER_NAME(_hx___defaultGraphicsShader,"__defaultGraphicsShader");
	HX_VISIT_MEMBER_NAME(_hx___defaultRenderTarget,"__defaultRenderTarget");
	HX_VISIT_MEMBER_NAME(_hx___defaultShader,"__defaultShader");
	HX_VISIT_MEMBER_NAME(_hx___displayHeight,"__displayHeight");
	HX_VISIT_MEMBER_NAME(_hx___displayWidth,"__displayWidth");
	HX_VISIT_MEMBER_NAME(_hx___flipped,"__flipped");
	HX_VISIT_MEMBER_NAME(_hx___gl,"__gl");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___maskShader,"__maskShader");
	HX_VISIT_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_VISIT_MEMBER_NAME(_hx___maskObjects,"__maskObjects");
	HX_VISIT_MEMBER_NAME(_hx___numClipRects,"__numClipRects");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___projection,"__projection");
	HX_VISIT_MEMBER_NAME(_hx___projectionFlipped,"__projectionFlipped");
	HX_VISIT_MEMBER_NAME(_hx___scrollRectMasks,"__scrollRectMasks");
	HX_VISIT_MEMBER_NAME(_hx___softwareRenderer,"__softwareRenderer");
	HX_VISIT_MEMBER_NAME(_hx___stencilReference,"__stencilReference");
	HX_VISIT_MEMBER_NAME(_hx___tempRect,"__tempRect");
	HX_VISIT_MEMBER_NAME(_hx___updatedStencil,"__updatedStencil");
	HX_VISIT_MEMBER_NAME(_hx___upscaled,"__upscaled");
	HX_VISIT_MEMBER_NAME(_hx___values,"__values");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObjectRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val OpenGLRenderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"__gl") ) { return hx::Val( _hx___gl ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width ); }
		if (HX_FIELD_EQ(inName,"__clear") ) { return hx::Val( _hx___clear_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height ); }
		if (HX_FIELD_EQ(inName,"__matrix") ) { return hx::Val( _hx___matrix ); }
		if (HX_FIELD_EQ(inName,"__values") ) { return hx::Val( _hx___values ); }
		if (HX_FIELD_EQ(inName,"__render") ) { return hx::Val( _hx___render_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__flipped") ) { return hx::Val( _hx___flipped ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"getMatrix") ) { return hx::Val( getMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setShader") ) { return hx::Val( setShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__popMask") ) { return hx::Val( _hx___popMask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__tempRect") ) { return hx::Val( _hx___tempRect ); }
		if (HX_FIELD_EQ(inName,"__upscaled") ) { return hx::Val( _hx___upscaled ); }
		if (HX_FIELD_EQ(inName,"applyAlpha") ) { return hx::Val( applyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMask") ) { return hx::Val( _hx___pushMask_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__context3D") ) { return hx::Val( _hx___context3D ); }
		if (HX_FIELD_EQ(inName,"__clipRects") ) { return hx::Val( _hx___clipRects ); }
		if (HX_FIELD_EQ(inName,"applyMatrix") ) { return hx::Val( applyMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setViewport") ) { return hx::Val( setViewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getMatrix") ) { return hx::Val( _hx___getMatrix_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__maskShader") ) { return hx::Val( _hx___maskShader ); }
		if (HX_FIELD_EQ(inName,"__projection") ) { return hx::Val( _hx___projection ); }
		if (HX_FIELD_EQ(inName,"updateShader") ) { return hx::Val( updateShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__copyShader") ) { return hx::Val( _hx___copyShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__initShader") ) { return hx::Val( _hx___initShader_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__maskObjects") ) { return hx::Val( _hx___maskObjects ); }
		if (HX_FIELD_EQ(inName,"useAlphaArray") ) { return hx::Val( useAlphaArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"__clearShader") ) { return hx::Val( _hx___clearShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__popMaskRect") ) { return hx::Val( _hx___popMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__scissorRect") ) { return hx::Val( _hx___scissorRect_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__displayWidth") ) { return hx::Val( _hx___displayWidth ); }
		if (HX_FIELD_EQ(inName,"__numClipRects") ) { return hx::Val( _hx___numClipRects ); }
		if (HX_FIELD_EQ(inName,"__pushMaskRect") ) { return hx::Val( _hx___pushMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setBlendMode") ) { return hx::Val( _hx___setBlendMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentShader") ) { return hx::Val( _hx___currentShader ); }
		if (HX_FIELD_EQ(inName,"__defaultShader") ) { return hx::Val( _hx___defaultShader ); }
		if (HX_FIELD_EQ(inName,"__displayHeight") ) { return hx::Val( _hx___displayHeight ); }
		if (HX_FIELD_EQ(inName,"applyBitmapData") ) { return hx::Val( applyBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__popMaskObject") ) { return hx::Val( _hx___popMaskObject_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__updatedStencil") ) { return hx::Val( _hx___updatedStencil ); }
		if (HX_FIELD_EQ(inName,"__pushMaskObject") ) { return hx::Val( _hx___pushMaskObject_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__scrollRectMasks") ) { return hx::Val( _hx___scrollRectMasks ); }
		if (HX_FIELD_EQ(inName,"__setRenderTarget") ) { return hx::Val( _hx___setRenderTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setShaderBuffer") ) { return hx::Val( _hx___setShaderBuffer_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__softwareRenderer") ) { return hx::Val( _hx___softwareRenderer ); }
		if (HX_FIELD_EQ(inName,"__stencilReference") ) { return hx::Val( _hx___stencilReference ); }
		if (HX_FIELD_EQ(inName,"__initShaderBuffer") ) { return hx::Val( _hx___initShaderBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderFilterPass") ) { return hx::Val( _hx___renderFilterPass_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__projectionFlipped") ) { return hx::Val( _hx___projectionFlipped ); }
		if (HX_FIELD_EQ(inName,"applyColorTransform") ) { return hx::Val( applyColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__initDisplayShader") ) { return hx::Val( _hx___initDisplayShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resumeClipAndMask") ) { return hx::Val( _hx___resumeClipAndMask_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__initGraphicsShader") ) { return hx::Val( _hx___initGraphicsShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__suspendClipAndMask") ) { return hx::Val( _hx___suspendClipAndMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateShaderBuffer") ) { return hx::Val( _hx___updateShaderBuffer_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__currentRenderTarget") ) { return hx::Val( _hx___currentRenderTarget ); }
		if (HX_FIELD_EQ(inName,"__currentShaderBuffer") ) { return hx::Val( _hx___currentShaderBuffer ); }
		if (HX_FIELD_EQ(inName,"__defaultRenderTarget") ) { return hx::Val( _hx___defaultRenderTarget ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__currentDisplayShader") ) { return hx::Val( _hx___currentDisplayShader ); }
		if (HX_FIELD_EQ(inName,"__defaultDisplayShader") ) { return hx::Val( _hx___defaultDisplayShader ); }
		if (HX_FIELD_EQ(inName,"applyHasColorTransform") ) { return hx::Val( applyHasColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"useColorTransformArray") ) { return hx::Val( useColorTransformArray_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__currentGraphicsShader") ) { return hx::Val( _hx___currentGraphicsShader ); }
		if (HX_FIELD_EQ(inName,"__defaultGraphicsShader") ) { return hx::Val( _hx___defaultGraphicsShader ); }
	}
	return super::__Field(inName,inCallProp);
}

bool OpenGLRenderer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__alphaValue") ) { outValue = ( _hx___alphaValue ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__emptyColorValue") ) { outValue = ( _hx___emptyColorValue ); return true; }
		if (HX_FIELD_EQ(inName,"__emptyAlphaValue") ) { outValue = ( _hx___emptyAlphaValue ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { outValue = ( _hx___scissorRectangle ); return true; }
		if (HX_FIELD_EQ(inName,"__textureSizeValue") ) { outValue = ( _hx___textureSizeValue ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__colorOffsetsValue") ) { outValue = ( _hx___colorOffsetsValue ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__colorMultipliersValue") ) { outValue = ( _hx___colorMultipliersValue ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__hasColorTransformValue") ) { outValue = ( _hx___hasColorTransformValue ); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__defaultColorMultipliersValue") ) { outValue = ( _hx___defaultColorMultipliersValue ); return true; }
	}
	return false;
}

hx::Val OpenGLRenderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"__gl") ) { _hx___gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__matrix") ) { _hx___matrix=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__values") ) { _hx___values=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__flipped") ) { _hx___flipped=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__tempRect") ) { _hx___tempRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__upscaled") ) { _hx___upscaled=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__context3D") ) { _hx___context3D=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__clipRects") ) { _hx___clipRects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__maskShader") ) { _hx___maskShader=inValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DMaskShader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__projection") ) { _hx___projection=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__maskObjects") ) { _hx___maskObjects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__displayWidth") ) { _hx___displayWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__numClipRects") ) { _hx___numClipRects=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentShader") ) { _hx___currentShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultShader") ) { _hx___defaultShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__displayHeight") ) { _hx___displayHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__updatedStencil") ) { _hx___updatedStencil=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__scrollRectMasks") ) { _hx___scrollRectMasks=inValue.Cast<  ::lime::utils::ObjectPool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__softwareRenderer") ) { _hx___softwareRenderer=inValue.Cast<  ::openfl::display::DisplayObjectRenderer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilReference") ) { _hx___stencilReference=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__projectionFlipped") ) { _hx___projectionFlipped=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__currentRenderTarget") ) { _hx___currentRenderTarget=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentShaderBuffer") ) { _hx___currentShaderBuffer=inValue.Cast<  ::openfl::_internal::renderer::ShaderBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultRenderTarget") ) { _hx___defaultRenderTarget=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__currentDisplayShader") ) { _hx___currentDisplayShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultDisplayShader") ) { _hx___defaultDisplayShader=inValue.Cast<  ::openfl::display::DisplayObjectShader >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__currentGraphicsShader") ) { _hx___currentGraphicsShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultGraphicsShader") ) { _hx___defaultGraphicsShader=inValue.Cast<  ::openfl::display::GraphicsShader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool OpenGLRenderer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__alphaValue") ) { _hx___alphaValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__emptyColorValue") ) { _hx___emptyColorValue=ioValue.Cast< ::Array< Float > >(); return true; }
		if (HX_FIELD_EQ(inName,"__emptyAlphaValue") ) { _hx___emptyAlphaValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { _hx___scissorRectangle=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"__textureSizeValue") ) { _hx___textureSizeValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__colorOffsetsValue") ) { _hx___colorOffsetsValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__colorMultipliersValue") ) { _hx___colorMultipliersValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__hasColorTransformValue") ) { _hx___hasColorTransformValue=ioValue.Cast< ::Array< bool > >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__defaultColorMultipliersValue") ) { _hx___defaultColorMultipliersValue=ioValue.Cast< ::Array< Float > >(); return true; }
	}
	return false;
}

void OpenGLRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("__context3D","\x40","\xa5","\x28","\x45"));
	outFields->push(HX_HCSTRING("__clipRects","\xbf","\xca","\xff","\x32"));
	outFields->push(HX_HCSTRING("__currentDisplayShader","\x2e","\xe2","\xbe","\x27"));
	outFields->push(HX_HCSTRING("__currentGraphicsShader","\x49","\x31","\xab","\x3a"));
	outFields->push(HX_HCSTRING("__currentRenderTarget","\x00","\xf2","\x02","\x95"));
	outFields->push(HX_HCSTRING("__currentShader","\x1e","\x79","\x2f","\x88"));
	outFields->push(HX_HCSTRING("__currentShaderBuffer","\xbe","\x54","\x3d","\xdf"));
	outFields->push(HX_HCSTRING("__defaultDisplayShader","\xa6","\x70","\x7d","\xf7"));
	outFields->push(HX_HCSTRING("__defaultGraphicsShader","\xd1","\x4b","\xa9","\x31"));
	outFields->push(HX_HCSTRING("__defaultRenderTarget","\x88","\xda","\x8f","\xe0"));
	outFields->push(HX_HCSTRING("__defaultShader","\xa6","\xcb","\x4b","\x9f"));
	outFields->push(HX_HCSTRING("__displayHeight","\xa9","\xfc","\x60","\x4b"));
	outFields->push(HX_HCSTRING("__displayWidth","\x84","\x0f","\x7c","\xf7"));
	outFields->push(HX_HCSTRING("__flipped","\x22","\xbd","\xd6","\x00"));
	outFields->push(HX_HCSTRING("__gl","\x45","\xb5","\x13","\x3f"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__maskShader","\x51","\x68","\x98","\x6a"));
	outFields->push(HX_HCSTRING("__matrix","\x61","\xa1","\xf7","\x63"));
	outFields->push(HX_HCSTRING("__maskObjects","\x28","\xc6","\x8b","\xfd"));
	outFields->push(HX_HCSTRING("__numClipRects","\xd9","\x0d","\x04","\xcd"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__projection","\xaf","\x03","\x1f","\xfd"));
	outFields->push(HX_HCSTRING("__projectionFlipped","\x53","\xf4","\x6c","\x72"));
	outFields->push(HX_HCSTRING("__scrollRectMasks","\x56","\xdd","\x1f","\xf7"));
	outFields->push(HX_HCSTRING("__softwareRenderer","\xaa","\x4f","\xcd","\x76"));
	outFields->push(HX_HCSTRING("__stencilReference","\x4f","\x1d","\x93","\x93"));
	outFields->push(HX_HCSTRING("__tempRect","\x78","\xc9","\x53","\x3e"));
	outFields->push(HX_HCSTRING("__updatedStencil","\x21","\x3c","\xc1","\x34"));
	outFields->push(HX_HCSTRING("__upscaled","\x55","\x7a","\xd0","\x34"));
	outFields->push(HX_HCSTRING("__values","\x02","\x6f","\xe6","\xf7"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OpenGLRenderer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::_internal::backend::native::NativeOpenGLRenderContext*/ ,(int)offsetof(OpenGLRenderer_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___context3D),HX_HCSTRING("__context3D","\x40","\xa5","\x28","\x45")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___clipRects),HX_HCSTRING("__clipRects","\xbf","\xca","\xff","\x32")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___currentDisplayShader),HX_HCSTRING("__currentDisplayShader","\x2e","\xe2","\xbe","\x27")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___currentGraphicsShader),HX_HCSTRING("__currentGraphicsShader","\x49","\x31","\xab","\x3a")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___currentRenderTarget),HX_HCSTRING("__currentRenderTarget","\x00","\xf2","\x02","\x95")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___currentShader),HX_HCSTRING("__currentShader","\x1e","\x79","\x2f","\x88")},
	{hx::fsObject /*::openfl::_internal::renderer::ShaderBuffer*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___currentShaderBuffer),HX_HCSTRING("__currentShaderBuffer","\xbe","\x54","\x3d","\xdf")},
	{hx::fsObject /*::openfl::display::DisplayObjectShader*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___defaultDisplayShader),HX_HCSTRING("__defaultDisplayShader","\xa6","\x70","\x7d","\xf7")},
	{hx::fsObject /*::openfl::display::GraphicsShader*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___defaultGraphicsShader),HX_HCSTRING("__defaultGraphicsShader","\xd1","\x4b","\xa9","\x31")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___defaultRenderTarget),HX_HCSTRING("__defaultRenderTarget","\x88","\xda","\x8f","\xe0")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___defaultShader),HX_HCSTRING("__defaultShader","\xa6","\xcb","\x4b","\x9f")},
	{hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___displayHeight),HX_HCSTRING("__displayHeight","\xa9","\xfc","\x60","\x4b")},
	{hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___displayWidth),HX_HCSTRING("__displayWidth","\x84","\x0f","\x7c","\xf7")},
	{hx::fsBool,(int)offsetof(OpenGLRenderer_obj,_hx___flipped),HX_HCSTRING("__flipped","\x22","\xbd","\xd6","\x00")},
	{hx::fsObject /*::lime::_internal::backend::native::NativeOpenGLRenderContext*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___gl),HX_HCSTRING("__gl","\x45","\xb5","\x13","\x3f")},
	{hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsObject /*::openfl::_internal::renderer::context3D::Context3DMaskShader*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___maskShader),HX_HCSTRING("__maskShader","\x51","\x68","\x98","\x6a")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___matrix),HX_HCSTRING("__matrix","\x61","\xa1","\xf7","\x63")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___maskObjects),HX_HCSTRING("__maskObjects","\x28","\xc6","\x8b","\xfd")},
	{hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___numClipRects),HX_HCSTRING("__numClipRects","\xd9","\x0d","\x04","\xcd")},
	{hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___projection),HX_HCSTRING("__projection","\xaf","\x03","\x1f","\xfd")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___projectionFlipped),HX_HCSTRING("__projectionFlipped","\x53","\xf4","\x6c","\x72")},
	{hx::fsObject /*::lime::utils::ObjectPool*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___scrollRectMasks),HX_HCSTRING("__scrollRectMasks","\x56","\xdd","\x1f","\xf7")},
	{hx::fsObject /*::openfl::display::DisplayObjectRenderer*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___softwareRenderer),HX_HCSTRING("__softwareRenderer","\xaa","\x4f","\xcd","\x76")},
	{hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___stencilReference),HX_HCSTRING("__stencilReference","\x4f","\x1d","\x93","\x93")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___tempRect),HX_HCSTRING("__tempRect","\x78","\xc9","\x53","\x3e")},
	{hx::fsBool,(int)offsetof(OpenGLRenderer_obj,_hx___updatedStencil),HX_HCSTRING("__updatedStencil","\x21","\x3c","\xc1","\x34")},
	{hx::fsBool,(int)offsetof(OpenGLRenderer_obj,_hx___upscaled),HX_HCSTRING("__upscaled","\x55","\x7a","\xd0","\x34")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(OpenGLRenderer_obj,_hx___values),HX_HCSTRING("__values","\x02","\x6f","\xe6","\xf7")},
	{hx::fsInt,(int)offsetof(OpenGLRenderer_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo OpenGLRenderer_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(void *) &OpenGLRenderer_obj::_hx___alphaValue,HX_HCSTRING("__alphaValue","\x53","\x4e","\xf1","\x8a")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &OpenGLRenderer_obj::_hx___colorMultipliersValue,HX_HCSTRING("__colorMultipliersValue","\xa2","\x08","\xbb","\x81")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &OpenGLRenderer_obj::_hx___colorOffsetsValue,HX_HCSTRING("__colorOffsetsValue","\xb4","\x64","\x83","\x33")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &OpenGLRenderer_obj::_hx___defaultColorMultipliersValue,HX_HCSTRING("__defaultColorMultipliersValue","\x61","\x1c","\x3c","\xdd")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &OpenGLRenderer_obj::_hx___emptyColorValue,HX_HCSTRING("__emptyColorValue","\xdb","\x98","\x57","\xb3")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &OpenGLRenderer_obj::_hx___emptyAlphaValue,HX_HCSTRING("__emptyAlphaValue","\x00","\xd5","\x90","\xaf")},
	{hx::fsObject /*Array< bool >*/ ,(void *) &OpenGLRenderer_obj::_hx___hasColorTransformValue,HX_HCSTRING("__hasColorTransformValue","\x0e","\x4b","\x82","\xa1")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &OpenGLRenderer_obj::_hx___scissorRectangle,HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &OpenGLRenderer_obj::_hx___textureSizeValue,HX_HCSTRING("__textureSizeValue","\xb5","\x29","\x2d","\x70")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String OpenGLRenderer_obj_sMemberFields[] = {
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("__context3D","\x40","\xa5","\x28","\x45"),
	HX_HCSTRING("__clipRects","\xbf","\xca","\xff","\x32"),
	HX_HCSTRING("__currentDisplayShader","\x2e","\xe2","\xbe","\x27"),
	HX_HCSTRING("__currentGraphicsShader","\x49","\x31","\xab","\x3a"),
	HX_HCSTRING("__currentRenderTarget","\x00","\xf2","\x02","\x95"),
	HX_HCSTRING("__currentShader","\x1e","\x79","\x2f","\x88"),
	HX_HCSTRING("__currentShaderBuffer","\xbe","\x54","\x3d","\xdf"),
	HX_HCSTRING("__defaultDisplayShader","\xa6","\x70","\x7d","\xf7"),
	HX_HCSTRING("__defaultGraphicsShader","\xd1","\x4b","\xa9","\x31"),
	HX_HCSTRING("__defaultRenderTarget","\x88","\xda","\x8f","\xe0"),
	HX_HCSTRING("__defaultShader","\xa6","\xcb","\x4b","\x9f"),
	HX_HCSTRING("__displayHeight","\xa9","\xfc","\x60","\x4b"),
	HX_HCSTRING("__displayWidth","\x84","\x0f","\x7c","\xf7"),
	HX_HCSTRING("__flipped","\x22","\xbd","\xd6","\x00"),
	HX_HCSTRING("__gl","\x45","\xb5","\x13","\x3f"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__maskShader","\x51","\x68","\x98","\x6a"),
	HX_HCSTRING("__matrix","\x61","\xa1","\xf7","\x63"),
	HX_HCSTRING("__maskObjects","\x28","\xc6","\x8b","\xfd"),
	HX_HCSTRING("__numClipRects","\xd9","\x0d","\x04","\xcd"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("__projection","\xaf","\x03","\x1f","\xfd"),
	HX_HCSTRING("__projectionFlipped","\x53","\xf4","\x6c","\x72"),
	HX_HCSTRING("__scrollRectMasks","\x56","\xdd","\x1f","\xf7"),
	HX_HCSTRING("__softwareRenderer","\xaa","\x4f","\xcd","\x76"),
	HX_HCSTRING("__stencilReference","\x4f","\x1d","\x93","\x93"),
	HX_HCSTRING("__tempRect","\x78","\xc9","\x53","\x3e"),
	HX_HCSTRING("__updatedStencil","\x21","\x3c","\xc1","\x34"),
	HX_HCSTRING("__upscaled","\x55","\x7a","\xd0","\x34"),
	HX_HCSTRING("__values","\x02","\x6f","\xe6","\xf7"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("applyAlpha","\x10","\x23","\xe8","\xcc"),
	HX_HCSTRING("applyBitmapData","\xc7","\x94","\xb7","\xf3"),
	HX_HCSTRING("applyColorTransform","\x97","\x55","\x2e","\x0b"),
	HX_HCSTRING("applyHasColorTransform","\x35","\x53","\xe0","\xcd"),
	HX_HCSTRING("applyMatrix","\x4f","\xf6","\xc2","\xf7"),
	HX_HCSTRING("getMatrix","\x77","\xbf","\x1e","\x38"),
	HX_HCSTRING("setShader","\x67","\x34","\xc8","\x7c"),
	HX_HCSTRING("setViewport","\x28","\x16","\x06","\xcd"),
	HX_HCSTRING("updateShader","\x0e","\x66","\xe4","\x1c"),
	HX_HCSTRING("useAlphaArray","\x82","\xb0","\x9d","\x7e"),
	HX_HCSTRING("useColorTransformArray","\x49","\x89","\x6f","\x74"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__clear","\x6d","\xca","\xb9","\xb2"),
	HX_HCSTRING("__clearShader","\x72","\x0d","\x86","\xf9"),
	HX_HCSTRING("__copyShader","\xda","\x9f","\x78","\x0b"),
	HX_HCSTRING("__getMatrix","\x57","\x08","\x4b","\x66"),
	HX_HCSTRING("__initShader","\x75","\x95","\xf9","\x59"),
	HX_HCSTRING("__initDisplayShader","\xb7","\x0e","\xd5","\x77"),
	HX_HCSTRING("__initGraphicsShader","\xa0","\xfc","\xfb","\xfd"),
	HX_HCSTRING("__initShaderBuffer","\x55","\xcc","\x4f","\x9f"),
	HX_HCSTRING("__popMask","\xfd","\xb7","\x5f","\xc4"),
	HX_HCSTRING("__popMaskObject","\x9c","\x46","\x0d","\x10"),
	HX_HCSTRING("__popMaskRect","\xc1","\x73","\xe8","\x16"),
	HX_HCSTRING("__pushMask","\x06","\xe7","\x7f","\xba"),
	HX_HCSTRING("__pushMaskObject","\x65","\xe2","\x3b","\x45"),
	HX_HCSTRING("__pushMaskRect","\x4a","\x5b","\xe7","\xa0"),
	HX_HCSTRING("__render","\x76","\xd6","\x58","\xad"),
	HX_HCSTRING("__renderFilterPass","\xbf","\x36","\xcd","\x6c"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__resumeClipAndMask","\xa6","\x5e","\x6c","\xd9"),
	HX_HCSTRING("__scissorRect","\x40","\x20","\xcc","\xa9"),
	HX_HCSTRING("__setBlendMode","\x72","\x27","\x48","\x51"),
	HX_HCSTRING("__setRenderTarget","\xe9","\xfa","\x52","\x98"),
	HX_HCSTRING("__setShaderBuffer","\xa7","\x5d","\x8d","\xe2"),
	HX_HCSTRING("__suspendClipAndMask","\x77","\xcf","\x4a","\xd0"),
	HX_HCSTRING("__updateShaderBuffer","\xce","\x30","\xbe","\x97"),
	::String(null()) };

static void OpenGLRenderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___alphaValue,"__alphaValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___colorMultipliersValue,"__colorMultipliersValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___colorOffsetsValue,"__colorOffsetsValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___defaultColorMultipliersValue,"__defaultColorMultipliersValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___emptyColorValue,"__emptyColorValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___emptyAlphaValue,"__emptyAlphaValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___hasColorTransformValue,"__hasColorTransformValue");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___scissorRectangle,"__scissorRectangle");
	HX_MARK_MEMBER_NAME(OpenGLRenderer_obj::_hx___textureSizeValue,"__textureSizeValue");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OpenGLRenderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___alphaValue,"__alphaValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___colorMultipliersValue,"__colorMultipliersValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___colorOffsetsValue,"__colorOffsetsValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___defaultColorMultipliersValue,"__defaultColorMultipliersValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___emptyColorValue,"__emptyColorValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___emptyAlphaValue,"__emptyAlphaValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___hasColorTransformValue,"__hasColorTransformValue");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___scissorRectangle,"__scissorRectangle");
	HX_VISIT_MEMBER_NAME(OpenGLRenderer_obj::_hx___textureSizeValue,"__textureSizeValue");
};

#endif

hx::Class OpenGLRenderer_obj::__mClass;

static ::String OpenGLRenderer_obj_sStaticFields[] = {
	HX_HCSTRING("__alphaValue","\x53","\x4e","\xf1","\x8a"),
	HX_HCSTRING("__colorMultipliersValue","\xa2","\x08","\xbb","\x81"),
	HX_HCSTRING("__colorOffsetsValue","\xb4","\x64","\x83","\x33"),
	HX_HCSTRING("__defaultColorMultipliersValue","\x61","\x1c","\x3c","\xdd"),
	HX_HCSTRING("__emptyColorValue","\xdb","\x98","\x57","\xb3"),
	HX_HCSTRING("__emptyAlphaValue","\x00","\xd5","\x90","\xaf"),
	HX_HCSTRING("__hasColorTransformValue","\x0e","\x4b","\x82","\xa1"),
	HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77"),
	HX_HCSTRING("__textureSizeValue","\xb5","\x29","\x2d","\x70"),
	::String(null())
};

void OpenGLRenderer_obj::__register()
{
	hx::Object *dummy = new OpenGLRenderer_obj;
	OpenGLRenderer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.OpenGLRenderer","\xbc","\x6a","\xf8","\xfd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OpenGLRenderer_obj::__GetStatic;
	__mClass->mSetStaticField = &OpenGLRenderer_obj::__SetStatic;
	__mClass->mMarkFunc = OpenGLRenderer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(OpenGLRenderer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OpenGLRenderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OpenGLRenderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OpenGLRenderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OpenGLRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OpenGLRenderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void OpenGLRenderer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_58_boot)
HXDLIN(  58)		_hx___alphaValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_42,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_59_boot)
HXDLIN(  59)		_hx___colorMultipliersValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_44,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_60_boot)
HXDLIN(  60)		_hx___colorOffsetsValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_46,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_61_boot)
HXDLIN(  61)		_hx___defaultColorMultipliersValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_48,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_62_boot)
HXDLIN(  62)		_hx___emptyColorValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_50,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_63_boot)
HXDLIN(  63)		_hx___emptyAlphaValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_52,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_64_boot)
HXDLIN(  64)		_hx___hasColorTransformValue = ::Array_obj< bool >::fromData( _hx_array_data_fdf86abc_54,1);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_2f59d7e567bca573_65_boot)
HXDLIN(  65)		_hx___scissorRectangle =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f59d7e567bca573_66_boot)
HXDLIN(  66)		_hx___textureSizeValue = ::Array_obj< Float >::fromData( _hx_array_data_fdf86abc_57,2);
            	}
}

} // end namespace openfl
} // end namespace display
