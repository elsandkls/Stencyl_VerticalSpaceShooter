// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display__SpreadMethod_SpreadMethod_Impl_
#include <openfl/display/_SpreadMethod/SpreadMethod_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_86b0f571ca49f8a5_33_fromInt,"openfl.display._SpreadMethod.SpreadMethod_Impl_","fromInt",0xe901e0d0,"openfl.display._SpreadMethod.SpreadMethod_Impl_.fromInt","openfl/display/SpreadMethod.hx",33,0x882c619e)
HX_LOCAL_STACK_FRAME(_hx_pos_86b0f571ca49f8a5_40_fromString,"openfl.display._SpreadMethod.SpreadMethod_Impl_","fromString",0xf9dd3790,"openfl.display._SpreadMethod.SpreadMethod_Impl_.fromString","openfl/display/SpreadMethod.hx",40,0x882c619e)
HX_LOCAL_STACK_FRAME(_hx_pos_86b0f571ca49f8a5_54_toInt,"openfl.display._SpreadMethod.SpreadMethod_Impl_","toInt",0xdd4f109f,"openfl.display._SpreadMethod.SpreadMethod_Impl_.toInt","openfl/display/SpreadMethod.hx",54,0x882c619e)
HX_LOCAL_STACK_FRAME(_hx_pos_86b0f571ca49f8a5_61_toString,"openfl.display._SpreadMethod.SpreadMethod_Impl_","toString",0x8d8a9321,"openfl.display._SpreadMethod.SpreadMethod_Impl_.toString","openfl/display/SpreadMethod.hx",61,0x882c619e)
HX_LOCAL_STACK_FRAME(_hx_pos_86b0f571ca49f8a5_18_boot,"openfl.display._SpreadMethod.SpreadMethod_Impl_","boot",0x85bda827,"openfl.display._SpreadMethod.SpreadMethod_Impl_.boot","openfl/display/SpreadMethod.hx",18,0x882c619e)
HX_LOCAL_STACK_FRAME(_hx_pos_86b0f571ca49f8a5_23_boot,"openfl.display._SpreadMethod.SpreadMethod_Impl_","boot",0x85bda827,"openfl.display._SpreadMethod.SpreadMethod_Impl_.boot","openfl/display/SpreadMethod.hx",23,0x882c619e)
HX_LOCAL_STACK_FRAME(_hx_pos_86b0f571ca49f8a5_28_boot,"openfl.display._SpreadMethod.SpreadMethod_Impl_","boot",0x85bda827,"openfl.display._SpreadMethod.SpreadMethod_Impl_.boot","openfl/display/SpreadMethod.hx",28,0x882c619e)
namespace openfl{
namespace display{
namespace _SpreadMethod{

void SpreadMethod_Impl__obj::__construct() { }

Dynamic SpreadMethod_Impl__obj::__CreateEmpty() { return new SpreadMethod_Impl__obj; }

void *SpreadMethod_Impl__obj::_hx_vtable = 0;

Dynamic SpreadMethod_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SpreadMethod_Impl__obj > _hx_result = new SpreadMethod_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SpreadMethod_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5d5c0859;
}

 ::Dynamic SpreadMethod_Impl__obj::PAD;

 ::Dynamic SpreadMethod_Impl__obj::REFLECT;

 ::Dynamic SpreadMethod_Impl__obj::REPEAT;

 ::Dynamic SpreadMethod_Impl__obj::fromInt( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_86b0f571ca49f8a5_33_fromInt)
HXDLIN(  33)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SpreadMethod_Impl__obj,fromInt,return )

 ::Dynamic SpreadMethod_Impl__obj::fromString(::String value){
            	HX_STACKFRAME(&_hx_pos_86b0f571ca49f8a5_40_fromString)
HXDLIN(  40)		::String _hx_switch_0 = value;
            		if (  (_hx_switch_0==HX_("pad",53,51,55,00)) ){
HXLINE(  42)			return (int)0;
HXDLIN(  42)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("reflect",3d,84,29,e9)) ){
HXLINE(  43)			return (int)1;
HXDLIN(  43)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("repeat",5b,97,7c,06)) ){
HXLINE(  44)			return (int)2;
HXDLIN(  44)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  45)			return null();
            		}
            		_hx_goto_1:;
HXLINE(  40)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SpreadMethod_Impl__obj,fromString,return )

 ::Dynamic SpreadMethod_Impl__obj::toInt( ::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_86b0f571ca49f8a5_54_toInt)
HXDLIN(  54)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SpreadMethod_Impl__obj,toInt,return )

::String SpreadMethod_Impl__obj::toString(int value){
            	HX_STACKFRAME(&_hx_pos_86b0f571ca49f8a5_61_toString)
HXDLIN(  61)		switch((int)(value)){
            			case (int)0: {
HXLINE(  63)				return HX_("pad",53,51,55,00);
            			}
            			break;
            			case (int)1: {
HXLINE(  64)				return HX_("reflect",3d,84,29,e9);
            			}
            			break;
            			case (int)2: {
HXLINE(  65)				return HX_("repeat",5b,97,7c,06);
            			}
            			break;
            			default:{
HXLINE(  66)				return null();
            			}
            		}
HXLINE(  61)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SpreadMethod_Impl__obj,toString,return )


SpreadMethod_Impl__obj::SpreadMethod_Impl__obj()
{
}

bool SpreadMethod_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SpreadMethod_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo SpreadMethod_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &SpreadMethod_Impl__obj::PAD,HX_HCSTRING("PAD","\x33","\xed","\x3c","\x00")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SpreadMethod_Impl__obj::REFLECT,HX_HCSTRING("REFLECT","\x1d","\x58","\xfd","\x68")},
	{hx::fsObject /*Dynamic*/ ,(void *) &SpreadMethod_Impl__obj::REPEAT,HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void SpreadMethod_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SpreadMethod_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SpreadMethod_Impl__obj::PAD,"PAD");
	HX_MARK_MEMBER_NAME(SpreadMethod_Impl__obj::REFLECT,"REFLECT");
	HX_MARK_MEMBER_NAME(SpreadMethod_Impl__obj::REPEAT,"REPEAT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SpreadMethod_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SpreadMethod_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SpreadMethod_Impl__obj::PAD,"PAD");
	HX_VISIT_MEMBER_NAME(SpreadMethod_Impl__obj::REFLECT,"REFLECT");
	HX_VISIT_MEMBER_NAME(SpreadMethod_Impl__obj::REPEAT,"REPEAT");
};

#endif

hx::Class SpreadMethod_Impl__obj::__mClass;

static ::String SpreadMethod_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("PAD","\x33","\xed","\x3c","\x00"),
	HX_HCSTRING("REFLECT","\x1d","\x58","\xfd","\x68"),
	HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8"),
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void SpreadMethod_Impl__obj::__register()
{
	hx::Object *dummy = new SpreadMethod_Impl__obj;
	SpreadMethod_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display._SpreadMethod.SpreadMethod_Impl_","\x99","\xc0","\xee","\x8a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SpreadMethod_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SpreadMethod_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SpreadMethod_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SpreadMethod_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SpreadMethod_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpreadMethod_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpreadMethod_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SpreadMethod_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_86b0f571ca49f8a5_18_boot)
HXDLIN(  18)		PAD = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_86b0f571ca49f8a5_23_boot)
HXDLIN(  23)		REFLECT = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_86b0f571ca49f8a5_28_boot)
HXDLIN(  28)		REPEAT = (int)2;
            	}
}

} // end namespace openfl
} // end namespace display
} // end namespace _SpreadMethod
