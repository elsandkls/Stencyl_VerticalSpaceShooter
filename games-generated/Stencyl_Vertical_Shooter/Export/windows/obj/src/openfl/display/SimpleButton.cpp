// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_ButtonSymbol
#include <openfl/_internal/symbols/ButtonSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SpriteSymbol
#include <openfl/_internal/symbols/SpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_SimpleButton
#include <openfl/display/SimpleButton.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_10b8a2091f17fcad_166_new,"openfl.display.SimpleButton","new",0x26b2c720,"openfl.display.SimpleButton.new","openfl/display/SimpleButton.hx",166,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_202___fromSymbol,"openfl.display.SimpleButton","__fromSymbol",0x4fa160c2,"openfl.display.SimpleButton.__fromSymbol","openfl/display/SimpleButton.hx",202,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_233___getBounds,"openfl.display.SimpleButton","__getBounds",0xf4f40f4b,"openfl.display.SimpleButton.__getBounds","openfl/display/SimpleButton.hx",233,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_248___getRenderBounds,"openfl.display.SimpleButton","__getRenderBounds",0x52d157c1,"openfl.display.SimpleButton.__getRenderBounds","openfl/display/SimpleButton.hx",248,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_274___getCursor,"openfl.display.SimpleButton","__getCursor",0xcdbf17ac,"openfl.display.SimpleButton.__getCursor","openfl/display/SimpleButton.hx",274,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_279___hitTest,"openfl.display.SimpleButton","__hitTest",0x74e237e5,"openfl.display.SimpleButton.__hitTest","openfl/display/SimpleButton.hx",279,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_336___hitTestMask,"openfl.display.SimpleButton","__hitTestMask",0xa5bbfb71,"openfl.display.SimpleButton.__hitTestMask","openfl/display/SimpleButton.hx",336,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_351___renderCairo,"openfl.display.SimpleButton","__renderCairo",0xbf0184f2,"openfl.display.SimpleButton.__renderCairo","openfl/display/SimpleButton.hx",351,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_366___renderCairoMask,"openfl.display.SimpleButton","__renderCairoMask",0x423b52fe,"openfl.display.SimpleButton.__renderCairoMask","openfl/display/SimpleButton.hx",366,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_371___renderCanvas,"openfl.display.SimpleButton","__renderCanvas",0x65a3dd2e,"openfl.display.SimpleButton.__renderCanvas","openfl/display/SimpleButton.hx",371,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_394___renderCanvasMask,"openfl.display.SimpleButton","__renderCanvasMask",0xb0f4793a,"openfl.display.SimpleButton.__renderCanvasMask","openfl/display/SimpleButton.hx",394,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_399___renderDOM,"openfl.display.SimpleButton","__renderDOM",0xdfd7ac6c,"openfl.display.SimpleButton.__renderDOM","openfl/display/SimpleButton.hx",399,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_430___renderGL,"openfl.display.SimpleButton","__renderGL",0x36f57f5b,"openfl.display.SimpleButton.__renderGL","openfl/display/SimpleButton.hx",430,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_443___renderGLMask,"openfl.display.SimpleButton","__renderGLMask",0xd1c735e7,"openfl.display.SimpleButton.__renderGLMask","openfl/display/SimpleButton.hx",443,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_452___setStageReference,"openfl.display.SimpleButton","__setStageReference",0xb9ee5c0f,"openfl.display.SimpleButton.__setStageReference","openfl/display/SimpleButton.hx",452,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_471___setTransformDirty,"openfl.display.SimpleButton","__setTransformDirty",0x5e2c91e8,"openfl.display.SimpleButton.__setTransformDirty","openfl/display/SimpleButton.hx",471,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_490___update,"openfl.display.SimpleButton","__update",0xc35f8269,"openfl.display.SimpleButton.__update","openfl/display/SimpleButton.hx",490,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_513___updateTransforms,"openfl.display.SimpleButton","__updateTransforms",0xafb59550,"openfl.display.SimpleButton.__updateTransforms","openfl/display/SimpleButton.hx",513,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_541_get_downState,"openfl.display.SimpleButton","get_downState",0xc54404e6,"openfl.display.SimpleButton.get_downState","openfl/display/SimpleButton.hx",541,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_546_set_downState,"openfl.display.SimpleButton","set_downState",0x0a49e6f2,"openfl.display.SimpleButton.set_downState","openfl/display/SimpleButton.hx",546,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_561_get_hitTestState,"openfl.display.SimpleButton","get_hitTestState",0xed3a2955,"openfl.display.SimpleButton.get_hitTestState","openfl/display/SimpleButton.hx",561,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_566_set_hitTestState,"openfl.display.SimpleButton","set_hitTestState",0x437c16c9,"openfl.display.SimpleButton.set_hitTestState","openfl/display/SimpleButton.hx",566,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_592_get_overState,"openfl.display.SimpleButton","get_overState",0x12efbeb4,"openfl.display.SimpleButton.get_overState","openfl/display/SimpleButton.hx",592,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_597_set_overState,"openfl.display.SimpleButton","set_overState",0x57f5a0c0,"openfl.display.SimpleButton.set_overState","openfl/display/SimpleButton.hx",597,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_610_get_soundTransform,"openfl.display.SimpleButton","get_soundTransform",0x1d7d70a6,"openfl.display.SimpleButton.get_soundTransform","openfl/display/SimpleButton.hx",610,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_623_set_soundTransform,"openfl.display.SimpleButton","set_soundTransform",0xfa2ca31a,"openfl.display.SimpleButton.set_soundTransform","openfl/display/SimpleButton.hx",623,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_633_get_upState,"openfl.display.SimpleButton","get_upState",0x4aceac8d,"openfl.display.SimpleButton.get_upState","openfl/display/SimpleButton.hx",633,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_638_set_upState,"openfl.display.SimpleButton","set_upState",0x553bb399,"openfl.display.SimpleButton.set_upState","openfl/display/SimpleButton.hx",638,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_651_set___currentState,"openfl.display.SimpleButton","set___currentState",0xc32592b5,"openfl.display.SimpleButton.set___currentState","openfl/display/SimpleButton.hx",651,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_725___this_onMouseDown,"openfl.display.SimpleButton","__this_onMouseDown",0x383f91c7,"openfl.display.SimpleButton.__this_onMouseDown","openfl/display/SimpleButton.hx",725,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_734___this_onMouseOut,"openfl.display.SimpleButton","__this_onMouseOut",0x6c31fac9,"openfl.display.SimpleButton.__this_onMouseOut","openfl/display/SimpleButton.hx",734,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_747___this_onMouseOver,"openfl.display.SimpleButton","__this_onMouseOver",0x3f8a2ab9,"openfl.display.SimpleButton.__this_onMouseOver","openfl/display/SimpleButton.hx",747,0x4b6b858e)
HX_LOCAL_STACK_FRAME(_hx_pos_10b8a2091f17fcad_764___this_onMouseUp,"openfl.display.SimpleButton","__this_onMouseUp",0xd7286c80,"openfl.display.SimpleButton.__this_onMouseUp","openfl/display/SimpleButton.hx",764,0x4b6b858e)
namespace openfl{
namespace display{

void SimpleButton_obj::__construct( ::openfl::display::DisplayObject upState, ::openfl::display::DisplayObject overState, ::openfl::display::DisplayObject downState, ::openfl::display::DisplayObject hitTestState){
            	HX_GC_STACKFRAME(&_hx_pos_10b8a2091f17fcad_166_new)
HXLINE( 168)		super::__construct();
HXLINE( 170)		this->enabled = true;
HXLINE( 171)		this->trackAsMenu = false;
HXLINE( 172)		this->useHandCursor = true;
HXLINE( 174)		 ::openfl::display::DisplayObject _hx_tmp;
HXDLIN( 174)		if (hx::IsNotNull( upState )) {
HXLINE( 174)			_hx_tmp = upState;
            		}
            		else {
HXLINE( 174)			_hx_tmp =  ::openfl::display::DisplayObject_obj::__alloc( HX_CTX );
            		}
HXDLIN( 174)		this->_hx___upState = _hx_tmp;
HXLINE( 175)		this->_hx___overState = overState;
HXLINE( 176)		this->_hx___downState = downState;
HXLINE( 177)		 ::openfl::display::DisplayObject _hx_tmp1;
HXDLIN( 177)		if (hx::IsNotNull( hitTestState )) {
HXLINE( 177)			_hx_tmp1 = hitTestState;
            		}
            		else {
HXLINE( 177)			_hx_tmp1 =  ::openfl::display::DisplayObject_obj::__alloc( HX_CTX );
            		}
HXDLIN( 177)		this->set_hitTestState(_hx_tmp1);
HXLINE( 179)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->_hx___this_onMouseDown_dyn(),null(),null(),null());
HXLINE( 180)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->_hx___this_onMouseOut_dyn(),null(),null(),null());
HXLINE( 181)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->_hx___this_onMouseOver_dyn(),null(),null(),null());
HXLINE( 182)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->_hx___this_onMouseUp_dyn(),null(),null(),null());
HXLINE( 184)		this->_hx___tabEnabled = true;
HXLINE( 185)		this->set___currentState(this->_hx___upState);
HXLINE( 187)		if (hx::IsNotNull( ::openfl::display::SimpleButton_obj::_hx___initSymbol )) {
HXLINE( 189)			 ::openfl::_internal::formats::swf::SWFLite swf = ::openfl::display::SimpleButton_obj::_hx___initSWF;
HXLINE( 190)			this->_hx___symbol = ::openfl::display::SimpleButton_obj::_hx___initSymbol;
HXLINE( 192)			::openfl::display::SimpleButton_obj::_hx___initSWF = null();
HXLINE( 193)			::openfl::display::SimpleButton_obj::_hx___initSymbol = null();
HXLINE( 195)			this->_hx___fromSymbol(swf,this->_hx___symbol);
            		}
            	}

Dynamic SimpleButton_obj::__CreateEmpty() { return new SimpleButton_obj; }

void *SimpleButton_obj::_hx_vtable = 0;

Dynamic SimpleButton_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SimpleButton_obj > _hx_result = new SimpleButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SimpleButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3326e816 || inClassId==(int)0x3f2b00af;
	}
}

void SimpleButton_obj::_hx___fromSymbol( ::openfl::_internal::formats::swf::SWFLite swf, ::openfl::_internal::symbols::ButtonSymbol symbol){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_202___fromSymbol)
HXLINE( 204)		this->_hx___symbol = symbol;
HXLINE( 206)		if (hx::IsNotNull( symbol->downState )) {
HXLINE( 208)			this->set_downState(Dynamic( symbol->downState->_hx___createObject(swf)).StaticCast<  ::openfl::display::MovieClip >());
            		}
HXLINE( 212)		if (hx::IsNotNull( symbol->hitState )) {
HXLINE( 214)			this->set_hitTestState(Dynamic( symbol->hitState->_hx___createObject(swf)).StaticCast<  ::openfl::display::MovieClip >());
            		}
HXLINE( 218)		if (hx::IsNotNull( symbol->overState )) {
HXLINE( 220)			this->set_overState(Dynamic( symbol->overState->_hx___createObject(swf)).StaticCast<  ::openfl::display::MovieClip >());
            		}
HXLINE( 224)		if (hx::IsNotNull( symbol->upState )) {
HXLINE( 226)			this->set_upState(Dynamic( symbol->upState->_hx___createObject(swf)).StaticCast<  ::openfl::display::MovieClip >());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SimpleButton_obj,_hx___fromSymbol,(void))

void SimpleButton_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_233___getBounds)
HXLINE( 235)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 237)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 239)		{
HXLINE( 239)			 ::openfl::geom::Matrix local = this->_hx___currentState->_hx___transform;
HXDLIN( 239)			Float _hx_tmp = (local->a * matrix->a);
HXDLIN( 239)			childWorldTransform->a = (_hx_tmp + (local->b * matrix->c));
HXDLIN( 239)			Float _hx_tmp1 = (local->a * matrix->b);
HXDLIN( 239)			childWorldTransform->b = (_hx_tmp1 + (local->b * matrix->d));
HXDLIN( 239)			Float _hx_tmp2 = (local->c * matrix->a);
HXDLIN( 239)			childWorldTransform->c = (_hx_tmp2 + (local->d * matrix->c));
HXDLIN( 239)			Float _hx_tmp3 = (local->c * matrix->b);
HXDLIN( 239)			childWorldTransform->d = (_hx_tmp3 + (local->d * matrix->d));
HXDLIN( 239)			Float _hx_tmp4 = (local->tx * matrix->a);
HXDLIN( 239)			childWorldTransform->tx = ((_hx_tmp4 + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 239)			Float _hx_tmp5 = (local->tx * matrix->b);
HXDLIN( 239)			childWorldTransform->ty = ((_hx_tmp5 + (local->ty * matrix->d)) + matrix->ty);
            		}
HXLINE( 241)		this->_hx___currentState->_hx___getBounds(rect,childWorldTransform);
HXLINE( 243)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void SimpleButton_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_248___getRenderBounds)
HXLINE( 250)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 252)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 253)			return;
            		}
            		else {
HXLINE( 257)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 261)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 263)		{
HXLINE( 263)			 ::openfl::geom::Matrix local = this->_hx___currentState->_hx___transform;
HXDLIN( 263)			Float _hx_tmp = (local->a * matrix->a);
HXDLIN( 263)			childWorldTransform->a = (_hx_tmp + (local->b * matrix->c));
HXDLIN( 263)			Float _hx_tmp1 = (local->a * matrix->b);
HXDLIN( 263)			childWorldTransform->b = (_hx_tmp1 + (local->b * matrix->d));
HXDLIN( 263)			Float _hx_tmp2 = (local->c * matrix->a);
HXDLIN( 263)			childWorldTransform->c = (_hx_tmp2 + (local->d * matrix->c));
HXDLIN( 263)			Float _hx_tmp3 = (local->c * matrix->b);
HXDLIN( 263)			childWorldTransform->d = (_hx_tmp3 + (local->d * matrix->d));
HXDLIN( 263)			Float _hx_tmp4 = (local->tx * matrix->a);
HXDLIN( 263)			childWorldTransform->tx = ((_hx_tmp4 + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 263)			Float _hx_tmp5 = (local->tx * matrix->b);
HXDLIN( 263)			childWorldTransform->ty = ((_hx_tmp5 + (local->ty * matrix->d)) + matrix->ty);
            		}
HXLINE( 265)		this->_hx___currentState->_hx___getRenderBounds(rect,childWorldTransform);
HXLINE( 267)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


::String SimpleButton_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_274___getCursor)
HXDLIN( 274)		bool _hx_tmp;
HXDLIN( 274)		bool _hx_tmp1;
HXDLIN( 274)		if (this->useHandCursor) {
HXDLIN( 274)			_hx_tmp1 = !(this->_hx___ignoreEvent);
            		}
            		else {
HXDLIN( 274)			_hx_tmp1 = false;
            		}
HXDLIN( 274)		if (_hx_tmp1) {
HXDLIN( 274)			_hx_tmp = this->enabled;
            		}
            		else {
HXDLIN( 274)			_hx_tmp = false;
            		}
HXDLIN( 274)		if (_hx_tmp) {
HXDLIN( 274)			return HX_("button",f2,61,e0,d9);
            		}
            		else {
HXDLIN( 274)			return null();
            		}
HXDLIN( 274)		return null();
            	}


bool SimpleButton_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_279___hitTest)
HXLINE( 281)		bool hitTest = false;
HXLINE( 283)		if (hx::IsNotNull( this->get_hitTestState() )) {
HXLINE( 285)			if (this->get_hitTestState()->_hx___hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
HXLINE( 287)				if (hx::IsNotNull( stack )) {
HXLINE( 289)					if ((stack->length == (int)0)) {
HXLINE( 291)						stack[(int)0] = hitObject;
            					}
            					else {
HXLINE( 295)						stack[(stack->length - (int)1)] = hitObject;
            					}
            				}
HXLINE( 301)				if (!(!(interactiveOnly))) {
HXLINE( 301)					hitTest = this->mouseEnabled;
            				}
            				else {
HXLINE( 301)					hitTest = true;
            				}
            			}
            		}
            		else {
HXLINE( 305)			if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 307)				bool _hx_tmp;
HXDLIN( 307)				bool _hx_tmp1;
HXDLIN( 307)				if (!(!(hitObject->get_visible()))) {
HXLINE( 307)					_hx_tmp1 = this->_hx___isMask;
            				}
            				else {
HXLINE( 307)					_hx_tmp1 = true;
            				}
HXDLIN( 307)				if (!(_hx_tmp1)) {
HXLINE( 307)					if (interactiveOnly) {
HXLINE( 307)						_hx_tmp = !(this->mouseEnabled);
            					}
            					else {
HXLINE( 307)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 307)					_hx_tmp = true;
            				}
HXDLIN( 307)				if (_hx_tmp) {
HXLINE( 307)					return false;
            				}
HXLINE( 308)				bool _hx_tmp2;
HXDLIN( 308)				if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 308)					_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            				}
            				else {
HXLINE( 308)					_hx_tmp2 = false;
            				}
HXDLIN( 308)				if (_hx_tmp2) {
HXLINE( 308)					return false;
            				}
HXLINE( 310)				if (this->_hx___currentState->_hx___hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
HXLINE( 312)					hitTest = interactiveOnly;
            				}
            			}
            		}
HXLINE( 321)		if (hx::IsNotNull( stack )) {
HXLINE( 323)			while(true){
HXLINE( 323)				bool _hx_tmp3;
HXDLIN( 323)				if ((stack->length > (int)1)) {
HXLINE( 323)					 ::openfl::display::DisplayObject stack1 = stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 323)					_hx_tmp3 = hx::IsEq( stack1,stack->__get((stack->length - (int)2)).StaticCast<  ::openfl::display::DisplayObject >() );
            				}
            				else {
HXLINE( 323)					_hx_tmp3 = false;
            				}
HXDLIN( 323)				if (!(_hx_tmp3)) {
HXLINE( 323)					goto _hx_goto_5;
            				}
HXLINE( 325)				stack->pop().StaticCast<  ::openfl::display::DisplayObject >();
            			}
            			_hx_goto_5:;
            		}
HXLINE( 331)		return hitTest;
            	}


bool SimpleButton_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_336___hitTestMask)
HXLINE( 338)		bool hitTest = false;
HXLINE( 340)		if (this->_hx___currentState->_hx___hitTestMask(x,y)) {
HXLINE( 342)			hitTest = true;
            		}
HXLINE( 346)		return hitTest;
            	}


void SimpleButton_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_351___renderCairo)
HXLINE( 353)		bool _hx_tmp;
HXDLIN( 353)		bool _hx_tmp1;
HXDLIN( 353)		if (!(!(this->_hx___renderable))) {
HXLINE( 353)			_hx_tmp1 = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 353)			_hx_tmp1 = true;
            		}
HXDLIN( 353)		if (!(_hx_tmp1)) {
HXLINE( 353)			_hx_tmp = hx::IsNull( this->_hx___currentState );
            		}
            		else {
HXLINE( 353)			_hx_tmp = true;
            		}
HXDLIN( 353)		if (_hx_tmp) {
HXLINE( 353)			return;
            		}
HXLINE( 355)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 356)		this->_hx___currentState->_hx___renderCairo(renderer);
HXLINE( 357)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 359)		this->_hx___renderEvent(renderer);
            	}


void SimpleButton_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_366___renderCairoMask)
HXDLIN( 366)		this->_hx___currentState->_hx___renderCairoMask(renderer);
            	}


void SimpleButton_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_371___renderCanvas)
HXLINE( 373)		bool _hx_tmp;
HXDLIN( 373)		bool _hx_tmp1;
HXDLIN( 373)		if (!(!(this->_hx___renderable))) {
HXLINE( 373)			_hx_tmp1 = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 373)			_hx_tmp1 = true;
            		}
HXDLIN( 373)		if (!(_hx_tmp1)) {
HXLINE( 373)			_hx_tmp = hx::IsNull( this->_hx___currentState );
            		}
            		else {
HXLINE( 373)			_hx_tmp = true;
            		}
HXDLIN( 373)		if (_hx_tmp) {
HXLINE( 373)			return;
            		}
HXLINE( 376)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 377)		this->_hx___currentState->_hx___renderCanvas(renderer);
HXLINE( 378)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 380)		this->_hx___renderEvent(renderer);
            	}


void SimpleButton_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_394___renderCanvasMask)
HXDLIN( 394)		this->_hx___currentState->_hx___renderCanvasMask(renderer);
            	}


void SimpleButton_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_399___renderDOM)
HXLINE( 402)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 404)		{
HXLINE( 404)			int _g = (int)0;
HXDLIN( 404)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___previousStates;
HXDLIN( 404)			while((_g < _g1->get_length())){
HXLINE( 404)				 ::openfl::display::DisplayObject previousState = _g1->get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 404)				_g = (_g + (int)1);
HXLINE( 406)				previousState->_hx___renderDOM(renderer);
            			}
            		}
HXLINE( 410)		this->_hx___previousStates->set_length((int)0);
HXLINE( 412)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 414)			if (hx::IsNotEq( this->_hx___currentState->stage,this->stage )) {
HXLINE( 415)				this->_hx___currentState->_hx___setStageReference(this->stage);
            			}
HXLINE( 418)			this->_hx___currentState->_hx___renderDOM(renderer);
            		}
HXLINE( 422)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 424)		this->_hx___renderEvent(renderer);
            	}


void SimpleButton_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_430___renderGL)
HXLINE( 432)		bool _hx_tmp;
HXDLIN( 432)		bool _hx_tmp1;
HXDLIN( 432)		if (!(!(this->_hx___renderable))) {
HXLINE( 432)			_hx_tmp1 = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 432)			_hx_tmp1 = true;
            		}
HXDLIN( 432)		if (!(_hx_tmp1)) {
HXLINE( 432)			_hx_tmp = hx::IsNull( this->_hx___currentState );
            		}
            		else {
HXLINE( 432)			_hx_tmp = true;
            		}
HXDLIN( 432)		if (_hx_tmp) {
HXLINE( 432)			return;
            		}
HXLINE( 434)		renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 435)		this->_hx___currentState->_hx___renderGL(renderer);
HXLINE( 436)		renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 438)		this->_hx___renderEvent(renderer);
            	}


void SimpleButton_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_443___renderGLMask)
HXLINE( 445)		if (hx::IsNull( this->_hx___currentState )) {
HXLINE( 445)			return;
            		}
HXLINE( 447)		this->_hx___currentState->_hx___renderGLMask(renderer);
            	}


void SimpleButton_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_452___setStageReference)
HXLINE( 454)		this->super::_hx___setStageReference(stage);
HXLINE( 456)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 458)			this->_hx___currentState->_hx___setStageReference(stage);
            		}
HXLINE( 462)		bool _hx_tmp;
HXDLIN( 462)		if (hx::IsNotNull( this->get_hitTestState() )) {
HXLINE( 462)			 ::openfl::display::DisplayObject _hx_tmp1 = this->get_hitTestState();
HXDLIN( 462)			_hx_tmp = hx::IsNotEq( _hx_tmp1,this->_hx___currentState );
            		}
            		else {
HXLINE( 462)			_hx_tmp = false;
            		}
HXDLIN( 462)		if (_hx_tmp) {
HXLINE( 464)			this->get_hitTestState()->_hx___setStageReference(stage);
            		}
            	}


void SimpleButton_obj::_hx___setTransformDirty(){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_471___setTransformDirty)
HXLINE( 473)		this->super::_hx___setTransformDirty();
HXLINE( 475)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 477)			this->_hx___currentState->_hx___setTransformDirty();
            		}
HXLINE( 481)		bool _hx_tmp;
HXDLIN( 481)		if (hx::IsNotNull( this->get_hitTestState() )) {
HXLINE( 481)			 ::openfl::display::DisplayObject _hx_tmp1 = this->get_hitTestState();
HXDLIN( 481)			_hx_tmp = hx::IsNotEq( _hx_tmp1,this->_hx___currentState );
            		}
            		else {
HXLINE( 481)			_hx_tmp = false;
            		}
HXDLIN( 481)		if (_hx_tmp) {
HXLINE( 483)			this->get_hitTestState()->_hx___setTransformDirty();
            		}
            	}


void SimpleButton_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_490___update)
HXLINE( 492)		this->super::_hx___update(transformOnly,updateChildren);
HXLINE( 494)		if (updateChildren) {
HXLINE( 496)			if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 498)				this->_hx___currentState->_hx___update(transformOnly,true);
            			}
HXLINE( 502)			bool _hx_tmp;
HXDLIN( 502)			if (hx::IsNotNull( this->get_hitTestState() )) {
HXLINE( 502)				 ::openfl::display::DisplayObject _hx_tmp1 = this->get_hitTestState();
HXDLIN( 502)				_hx_tmp = hx::IsNotEq( _hx_tmp1,this->_hx___currentState );
            			}
            			else {
HXLINE( 502)				_hx_tmp = false;
            			}
HXDLIN( 502)			if (_hx_tmp) {
HXLINE( 504)				this->get_hitTestState()->_hx___update(transformOnly,true);
            			}
            		}
            	}


void SimpleButton_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_513___updateTransforms)
HXLINE( 515)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE( 517)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 519)			this->_hx___currentState->_hx___updateTransforms(null());
            		}
HXLINE( 523)		bool _hx_tmp;
HXDLIN( 523)		if (hx::IsNotNull( this->get_hitTestState() )) {
HXLINE( 523)			 ::openfl::display::DisplayObject _hx_tmp1 = this->get_hitTestState();
HXDLIN( 523)			_hx_tmp = hx::IsNotEq( _hx_tmp1,this->_hx___currentState );
            		}
            		else {
HXLINE( 523)			_hx_tmp = false;
            		}
HXDLIN( 523)		if (_hx_tmp) {
HXLINE( 525)			this->get_hitTestState()->_hx___updateTransforms(null());
            		}
            	}


 ::openfl::display::DisplayObject SimpleButton_obj::get_downState(){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_541_get_downState)
HXDLIN( 541)		return this->_hx___downState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SimpleButton_obj,get_downState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::set_downState( ::openfl::display::DisplayObject downState){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_546_set_downState)
HXLINE( 548)		bool _hx_tmp;
HXDLIN( 548)		if (hx::IsNotNull( this->_hx___downState )) {
HXLINE( 548)			_hx_tmp = hx::IsEq( this->_hx___currentState,this->_hx___downState );
            		}
            		else {
HXLINE( 548)			_hx_tmp = false;
            		}
HXDLIN( 548)		if (_hx_tmp) {
HXLINE( 550)			this->set___currentState(this->_hx___downState);
            		}
HXLINE( 554)		return (this->_hx___downState = downState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_downState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::get_hitTestState(){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_561_get_hitTestState)
HXDLIN( 561)		return this->_hx___hitTestState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SimpleButton_obj,get_hitTestState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::set_hitTestState( ::openfl::display::DisplayObject hitTestState){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_566_set_hitTestState)
HXLINE( 568)		bool _hx_tmp;
HXDLIN( 568)		if (hx::IsNotNull( this->_hx___hitTestState )) {
HXLINE( 568)			_hx_tmp = hx::IsNotEq( this->_hx___hitTestState,hitTestState );
            		}
            		else {
HXLINE( 568)			_hx_tmp = false;
            		}
HXDLIN( 568)		if (_hx_tmp) {
HXLINE( 570)			bool _hx_tmp1;
HXDLIN( 570)			bool _hx_tmp2;
HXDLIN( 570)			 ::openfl::display::DisplayObject _hx_tmp3 = this->_hx___hitTestState;
HXDLIN( 570)			if (hx::IsNotEq( _hx_tmp3,this->get_downState() )) {
HXLINE( 570)				 ::openfl::display::DisplayObject _hx_tmp4 = this->_hx___hitTestState;
HXDLIN( 570)				_hx_tmp2 = hx::IsNotEq( _hx_tmp4,this->get_upState() );
            			}
            			else {
HXLINE( 570)				_hx_tmp2 = false;
            			}
HXDLIN( 570)			if (_hx_tmp2) {
HXLINE( 570)				 ::openfl::display::DisplayObject _hx_tmp5 = this->_hx___hitTestState;
HXDLIN( 570)				_hx_tmp1 = hx::IsNotEq( _hx_tmp5,this->get_overState() );
            			}
            			else {
HXLINE( 570)				_hx_tmp1 = false;
            			}
HXDLIN( 570)			if (_hx_tmp1) {
HXLINE( 572)				this->_hx___hitTestState->_hx___renderParent = null();
            			}
            		}
HXLINE( 578)		if (hx::IsNotNull( hitTestState )) {
HXLINE( 580)			hitTestState->_hx___renderParent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 581)			if (!(hitTestState->_hx___renderDirty)) {
HXLINE( 581)				hitTestState->_hx___renderDirty = true;
HXDLIN( 581)				hitTestState->_hx___setParentRenderDirty();
            			}
            		}
HXLINE( 585)		return (this->_hx___hitTestState = hitTestState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_hitTestState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::get_overState(){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_592_get_overState)
HXDLIN( 592)		return this->_hx___overState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SimpleButton_obj,get_overState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::set_overState( ::openfl::display::DisplayObject overState){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_597_set_overState)
HXLINE( 599)		bool _hx_tmp;
HXDLIN( 599)		if (hx::IsNotNull( this->_hx___overState )) {
HXLINE( 599)			_hx_tmp = hx::IsEq( this->_hx___currentState,this->_hx___overState );
            		}
            		else {
HXLINE( 599)			_hx_tmp = false;
            		}
HXDLIN( 599)		if (_hx_tmp) {
HXLINE( 601)			this->set___currentState(overState);
            		}
HXLINE( 605)		return (this->_hx___overState = overState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_overState,return )

 ::openfl::media::SoundTransform SimpleButton_obj::get_soundTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_10b8a2091f17fcad_610_get_soundTransform)
HXLINE( 612)		if (hx::IsNull( this->_hx___soundTransform )) {
HXLINE( 614)			this->_hx___soundTransform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 618)		return  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,this->_hx___soundTransform->volume,this->_hx___soundTransform->pan);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SimpleButton_obj,get_soundTransform,return )

 ::openfl::media::SoundTransform SimpleButton_obj::set_soundTransform( ::openfl::media::SoundTransform value){
            	HX_GC_STACKFRAME(&_hx_pos_10b8a2091f17fcad_623_set_soundTransform)
HXLINE( 625)		this->_hx___soundTransform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,value->volume,value->pan);
HXLINE( 626)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_soundTransform,return )

 ::openfl::display::DisplayObject SimpleButton_obj::get_upState(){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_633_get_upState)
HXDLIN( 633)		return this->_hx___upState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SimpleButton_obj,get_upState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::set_upState( ::openfl::display::DisplayObject upState){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_638_set_upState)
HXLINE( 640)		bool _hx_tmp;
HXDLIN( 640)		if (hx::IsNotNull( this->_hx___upState )) {
HXLINE( 640)			_hx_tmp = hx::IsEq( this->_hx___currentState,this->_hx___upState );
            		}
            		else {
HXLINE( 640)			_hx_tmp = false;
            		}
HXDLIN( 640)		if (_hx_tmp) {
HXLINE( 642)			this->set___currentState(upState);
            		}
HXLINE( 646)		return (this->_hx___upState = upState);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_upState,return )

 ::openfl::display::DisplayObject SimpleButton_obj::set___currentState( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_651_set___currentState)
HXLINE( 653)		bool _hx_tmp;
HXDLIN( 653)		if (hx::IsNotNull( this->_hx___currentState )) {
HXLINE( 653)			 ::openfl::display::DisplayObject _hx_tmp1 = this->_hx___currentState;
HXDLIN( 653)			_hx_tmp = hx::IsNotEq( _hx_tmp1,this->get_hitTestState() );
            		}
            		else {
HXLINE( 653)			_hx_tmp = false;
            		}
HXDLIN( 653)		if (_hx_tmp) {
HXLINE( 655)			this->_hx___currentState->_hx___renderParent = null();
            		}
HXLINE( 659)		bool _hx_tmp2;
HXDLIN( 659)		if (hx::IsNotNull( value )) {
HXLINE( 659)			_hx_tmp2 = hx::IsNotNull( value->parent );
            		}
            		else {
HXLINE( 659)			_hx_tmp2 = false;
            		}
HXDLIN( 659)		if (_hx_tmp2) {
HXLINE( 661)			value->parent->removeChild(value);
            		}
HXLINE( 674)		if (hx::IsNotEq( value,this->_hx___currentState )) {
HXLINE( 698)			if (hx::IsNotNull( value )) {
HXLINE( 700)				value->_hx___renderParent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 701)				if (!(value->_hx___renderDirty)) {
HXLINE( 701)					value->_hx___renderDirty = true;
HXDLIN( 701)					value->_hx___setParentRenderDirty();
            				}
            			}
HXLINE( 705)			if (!(this->_hx___renderDirty)) {
HXLINE( 705)				this->_hx___renderDirty = true;
HXDLIN( 705)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE( 709)		this->_hx___currentState = value;
HXLINE( 711)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set___currentState,return )

void SimpleButton_obj::_hx___this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_725___this_onMouseDown)
HXDLIN( 725)		if (this->enabled) {
HXLINE( 727)			this->set___currentState(this->get_downState());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,_hx___this_onMouseDown,(void))

void SimpleButton_obj::_hx___this_onMouseOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_734___this_onMouseOut)
HXLINE( 736)		this->_hx___ignoreEvent = false;
HXLINE( 738)		bool _hx_tmp;
HXDLIN( 738)		if (this->enabled) {
HXLINE( 738)			 ::openfl::display::DisplayObject _hx_tmp1 = this->get_upState();
HXDLIN( 738)			_hx_tmp = hx::IsNotEq( _hx_tmp1,this->_hx___currentState );
            		}
            		else {
HXLINE( 738)			_hx_tmp = false;
            		}
HXDLIN( 738)		if (_hx_tmp) {
HXLINE( 740)			this->set___currentState(this->get_upState());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,_hx___this_onMouseOut,(void))

void SimpleButton_obj::_hx___this_onMouseOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_747___this_onMouseOver)
HXLINE( 749)		if (event->buttonDown) {
HXLINE( 751)			this->_hx___ignoreEvent = true;
            		}
HXLINE( 755)		bool _hx_tmp;
HXDLIN( 755)		bool _hx_tmp1;
HXDLIN( 755)		bool _hx_tmp2;
HXDLIN( 755)		 ::openfl::display::DisplayObject _hx_tmp3 = this->get_overState();
HXDLIN( 755)		if (hx::IsNotEq( _hx_tmp3,this->_hx___currentState )) {
HXLINE( 755)			_hx_tmp2 = hx::IsNotNull( this->get_overState() );
            		}
            		else {
HXLINE( 755)			_hx_tmp2 = false;
            		}
HXDLIN( 755)		if (_hx_tmp2) {
HXLINE( 755)			_hx_tmp1 = !(this->_hx___ignoreEvent);
            		}
            		else {
HXLINE( 755)			_hx_tmp1 = false;
            		}
HXDLIN( 755)		if (_hx_tmp1) {
HXLINE( 755)			_hx_tmp = this->enabled;
            		}
            		else {
HXLINE( 755)			_hx_tmp = false;
            		}
HXDLIN( 755)		if (_hx_tmp) {
HXLINE( 757)			this->set___currentState(this->get_overState());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,_hx___this_onMouseOver,(void))

void SimpleButton_obj::_hx___this_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_10b8a2091f17fcad_764___this_onMouseUp)
HXLINE( 766)		this->_hx___ignoreEvent = false;
HXLINE( 768)		if (this->enabled) {
HXLINE( 770)			if (hx::IsNotNull( this->get_overState() )) {
HXLINE( 772)				this->set___currentState(this->get_overState());
            			}
            			else {
HXLINE( 776)				this->set___currentState(this->get_upState());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,_hx___this_onMouseUp,(void))

 ::openfl::_internal::formats::swf::SWFLite SimpleButton_obj::_hx___initSWF;

 ::openfl::_internal::symbols::ButtonSymbol SimpleButton_obj::_hx___initSymbol;


hx::ObjectPtr< SimpleButton_obj > SimpleButton_obj::__new( ::openfl::display::DisplayObject upState, ::openfl::display::DisplayObject overState, ::openfl::display::DisplayObject downState, ::openfl::display::DisplayObject hitTestState) {
	hx::ObjectPtr< SimpleButton_obj > __this = new SimpleButton_obj();
	__this->__construct(upState,overState,downState,hitTestState);
	return __this;
}

hx::ObjectPtr< SimpleButton_obj > SimpleButton_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::DisplayObject upState, ::openfl::display::DisplayObject overState, ::openfl::display::DisplayObject downState, ::openfl::display::DisplayObject hitTestState) {
	SimpleButton_obj *__this = (SimpleButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SimpleButton_obj), true, "openfl.display.SimpleButton"));
	*(void **)__this = SimpleButton_obj::_hx_vtable;
	__this->__construct(upState,overState,downState,hitTestState);
	return __this;
}

SimpleButton_obj::SimpleButton_obj()
{
}

void SimpleButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SimpleButton);
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(trackAsMenu,"trackAsMenu");
	HX_MARK_MEMBER_NAME(useHandCursor,"useHandCursor");
	HX_MARK_MEMBER_NAME(_hx___currentState,"__currentState");
	HX_MARK_MEMBER_NAME(_hx___downState,"__downState");
	HX_MARK_MEMBER_NAME(_hx___hitTestState,"__hitTestState");
	HX_MARK_MEMBER_NAME(_hx___ignoreEvent,"__ignoreEvent");
	HX_MARK_MEMBER_NAME(_hx___overState,"__overState");
	HX_MARK_MEMBER_NAME(_hx___previousStates,"__previousStates");
	HX_MARK_MEMBER_NAME(_hx___soundTransform,"__soundTransform");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___upState,"__upState");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SimpleButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(trackAsMenu,"trackAsMenu");
	HX_VISIT_MEMBER_NAME(useHandCursor,"useHandCursor");
	HX_VISIT_MEMBER_NAME(_hx___currentState,"__currentState");
	HX_VISIT_MEMBER_NAME(_hx___downState,"__downState");
	HX_VISIT_MEMBER_NAME(_hx___hitTestState,"__hitTestState");
	HX_VISIT_MEMBER_NAME(_hx___ignoreEvent,"__ignoreEvent");
	HX_VISIT_MEMBER_NAME(_hx___overState,"__overState");
	HX_VISIT_MEMBER_NAME(_hx___previousStates,"__previousStates");
	HX_VISIT_MEMBER_NAME(_hx___soundTransform,"__soundTransform");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___upState,"__upState");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SimpleButton_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled ); }
		if (HX_FIELD_EQ(inName,"upState") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_upState() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downState") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_downState() ); }
		if (HX_FIELD_EQ(inName,"overState") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_overState() ); }
		if (HX_FIELD_EQ(inName,"__upState") ) { return hx::Val( _hx___upState ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"trackAsMenu") ) { return hx::Val( trackAsMenu ); }
		if (HX_FIELD_EQ(inName,"__downState") ) { return hx::Val( _hx___downState ); }
		if (HX_FIELD_EQ(inName,"__overState") ) { return hx::Val( _hx___overState ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_upState") ) { return hx::Val( get_upState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_upState") ) { return hx::Val( set_upState_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hitTestState") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_hitTestState() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"useHandCursor") ) { return hx::Val( useHandCursor ); }
		if (HX_FIELD_EQ(inName,"__ignoreEvent") ) { return hx::Val( _hx___ignoreEvent ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_downState") ) { return hx::Val( get_downState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_downState") ) { return hx::Val( set_downState_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_overState") ) { return hx::Val( get_overState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_overState") ) { return hx::Val( set_overState_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_soundTransform() ); }
		if (HX_FIELD_EQ(inName,"__currentState") ) { return hx::Val( _hx___currentState ); }
		if (HX_FIELD_EQ(inName,"__hitTestState") ) { return hx::Val( _hx___hitTestState ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__previousStates") ) { return hx::Val( _hx___previousStates ); }
		if (HX_FIELD_EQ(inName,"__soundTransform") ) { return hx::Val( _hx___soundTransform ); }
		if (HX_FIELD_EQ(inName,"get_hitTestState") ) { return hx::Val( get_hitTestState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_hitTestState") ) { return hx::Val( set_hitTestState_dyn() ); }
		if (HX_FIELD_EQ(inName,"__this_onMouseUp") ) { return hx::Val( _hx___this_onMouseUp_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__this_onMouseOut") ) { return hx::Val( _hx___this_onMouseOut_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_soundTransform") ) { return hx::Val( get_soundTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_soundTransform") ) { return hx::Val( set_soundTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set___currentState") ) { return hx::Val( set___currentState_dyn() ); }
		if (HX_FIELD_EQ(inName,"__this_onMouseDown") ) { return hx::Val( _hx___this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"__this_onMouseOver") ) { return hx::Val( _hx___this_onMouseOver_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setTransformDirty") ) { return hx::Val( _hx___setTransformDirty_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SimpleButton_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { outValue = ( _hx___initSWF ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { outValue = ( _hx___initSymbol ); return true; }
	}
	return false;
}

hx::Val SimpleButton_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_upState(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::ButtonSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_downState(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"overState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_overState(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"__upState") ) { _hx___upState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"trackAsMenu") ) { trackAsMenu=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__downState") ) { _hx___downState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__overState") ) { _hx___overState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hitTestState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_hitTestState(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"useHandCursor") ) { useHandCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__ignoreEvent") ) { _hx___ignoreEvent=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_soundTransform(inValue.Cast<  ::openfl::media::SoundTransform >()) ); }
		if (HX_FIELD_EQ(inName,"__currentState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set___currentState(inValue.Cast<  ::openfl::display::DisplayObject >()) );_hx___currentState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hitTestState") ) { _hx___hitTestState=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__previousStates") ) { _hx___previousStates=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__soundTransform") ) { _hx___soundTransform=inValue.Cast<  ::openfl::media::SoundTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SimpleButton_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { _hx___initSWF=ioValue.Cast<  ::openfl::_internal::formats::swf::SWFLite >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { _hx___initSymbol=ioValue.Cast<  ::openfl::_internal::symbols::ButtonSymbol >(); return true; }
	}
	return false;
}

void SimpleButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("downState","\x4f","\x4a","\x21","\x9a"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("hitTestState","\x8c","\x6b","\x9d","\xa1"));
	outFields->push(HX_HCSTRING("overState","\x1d","\x04","\xcd","\xe7"));
	outFields->push(HX_HCSTRING("soundTransform","\x9d","\xee","\xde","\x22"));
	outFields->push(HX_HCSTRING("trackAsMenu","\x9c","\x24","\xdf","\xda"));
	outFields->push(HX_HCSTRING("upState","\xb6","\x95","\x80","\xe0"));
	outFields->push(HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89"));
	outFields->push(HX_HCSTRING("__currentState","\x38","\xde","\xd7","\xeb"));
	outFields->push(HX_HCSTRING("__downState","\x2f","\x93","\x4d","\xc8"));
	outFields->push(HX_HCSTRING("__hitTestState","\xac","\xee","\x5d","\xc2"));
	outFields->push(HX_HCSTRING("__ignoreEvent","\x88","\x9e","\xcf","\xe1"));
	outFields->push(HX_HCSTRING("__overState","\xfd","\x4c","\xf9","\x15"));
	outFields->push(HX_HCSTRING("__previousStates","\xf9","\x17","\xd2","\x28"));
	outFields->push(HX_HCSTRING("__soundTransform","\xbd","\x79","\x1e","\x57"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__upState","\x96","\xe6","\xce","\x61"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SimpleButton_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(SimpleButton_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsBool,(int)offsetof(SimpleButton_obj,trackAsMenu),HX_HCSTRING("trackAsMenu","\x9c","\x24","\xdf","\xda")},
	{hx::fsBool,(int)offsetof(SimpleButton_obj,useHandCursor),HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,_hx___currentState),HX_HCSTRING("__currentState","\x38","\xde","\xd7","\xeb")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,_hx___downState),HX_HCSTRING("__downState","\x2f","\x93","\x4d","\xc8")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,_hx___hitTestState),HX_HCSTRING("__hitTestState","\xac","\xee","\x5d","\xc2")},
	{hx::fsBool,(int)offsetof(SimpleButton_obj,_hx___ignoreEvent),HX_HCSTRING("__ignoreEvent","\x88","\x9e","\xcf","\xe1")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,_hx___overState),HX_HCSTRING("__overState","\xfd","\x4c","\xf9","\x15")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(SimpleButton_obj,_hx___previousStates),HX_HCSTRING("__previousStates","\xf9","\x17","\xd2","\x28")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(int)offsetof(SimpleButton_obj,_hx___soundTransform),HX_HCSTRING("__soundTransform","\xbd","\x79","\x1e","\x57")},
	{hx::fsObject /*::openfl::_internal::symbols::ButtonSymbol*/ ,(int)offsetof(SimpleButton_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(SimpleButton_obj,_hx___upState),HX_HCSTRING("__upState","\x96","\xe6","\xce","\x61")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SimpleButton_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::formats::swf::SWFLite*/ ,(void *) &SimpleButton_obj::_hx___initSWF,HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c")},
	{hx::fsObject /*::openfl::_internal::symbols::ButtonSymbol*/ ,(void *) &SimpleButton_obj::_hx___initSymbol,HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SimpleButton_obj_sMemberFields[] = {
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("trackAsMenu","\x9c","\x24","\xdf","\xda"),
	HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89"),
	HX_HCSTRING("__currentState","\x38","\xde","\xd7","\xeb"),
	HX_HCSTRING("__downState","\x2f","\x93","\x4d","\xc8"),
	HX_HCSTRING("__hitTestState","\xac","\xee","\x5d","\xc2"),
	HX_HCSTRING("__ignoreEvent","\x88","\x9e","\xcf","\xe1"),
	HX_HCSTRING("__overState","\xfd","\x4c","\xf9","\x15"),
	HX_HCSTRING("__previousStates","\xf9","\x17","\xd2","\x28"),
	HX_HCSTRING("__soundTransform","\xbd","\x79","\x1e","\x57"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__upState","\x96","\xe6","\xce","\x61"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setTransformDirty","\x28","\x1b","\x24","\x99"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_downState","\x26","\x1e","\x85","\x5b"),
	HX_HCSTRING("set_downState","\x32","\x00","\x8b","\xa0"),
	HX_HCSTRING("get_hitTestState","\x15","\x58","\x3c","\xa6"),
	HX_HCSTRING("set_hitTestState","\x89","\x45","\x7e","\xfc"),
	HX_HCSTRING("get_overState","\xf4","\xd7","\x30","\xa9"),
	HX_HCSTRING("set_overState","\x00","\xba","\x36","\xee"),
	HX_HCSTRING("get_soundTransform","\x66","\xcf","\x78","\xbe"),
	HX_HCSTRING("set_soundTransform","\xda","\x01","\x28","\x9b"),
	HX_HCSTRING("get_upState","\xcd","\xf5","\x7a","\x66"),
	HX_HCSTRING("set_upState","\xd9","\xfc","\xe7","\x70"),
	HX_HCSTRING("set___currentState","\x75","\xf1","\x20","\x64"),
	HX_HCSTRING("__this_onMouseDown","\x87","\xf0","\x3a","\xd9"),
	HX_HCSTRING("__this_onMouseOut","\x09","\xb4","\x18","\x95"),
	HX_HCSTRING("__this_onMouseOver","\x79","\x89","\x85","\xe0"),
	HX_HCSTRING("__this_onMouseUp","\x40","\x9b","\x2a","\x90"),
	::String(null()) };

static void SimpleButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SimpleButton_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SimpleButton_obj::_hx___initSWF,"__initSWF");
	HX_MARK_MEMBER_NAME(SimpleButton_obj::_hx___initSymbol,"__initSymbol");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SimpleButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SimpleButton_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SimpleButton_obj::_hx___initSWF,"__initSWF");
	HX_VISIT_MEMBER_NAME(SimpleButton_obj::_hx___initSymbol,"__initSymbol");
};

#endif

hx::Class SimpleButton_obj::__mClass;

static ::String SimpleButton_obj_sStaticFields[] = {
	HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c"),
	HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b"),
	::String(null())
};

void SimpleButton_obj::__register()
{
	hx::Object *dummy = new SimpleButton_obj;
	SimpleButton_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.SimpleButton","\x2e","\xf7","\x40","\x72");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SimpleButton_obj::__GetStatic;
	__mClass->mSetStaticField = &SimpleButton_obj::__SetStatic;
	__mClass->mMarkFunc = SimpleButton_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SimpleButton_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SimpleButton_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SimpleButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SimpleButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SimpleButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SimpleButton_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
