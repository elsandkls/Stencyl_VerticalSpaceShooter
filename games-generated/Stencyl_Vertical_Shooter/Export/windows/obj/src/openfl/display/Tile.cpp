// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_TileContainer
#include <openfl/display/TileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_90_new,"openfl.display.Tile","new",0xe2a1098a,"openfl.display.Tile.new","openfl/display/Tile.hx",90,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_112_clone,"openfl.display.Tile","clone",0x43506b07,"openfl.display.Tile.clone","openfl/display/Tile.hx",112,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_149_getBounds,"openfl.display.Tile","getBounds",0x16778455,"openfl.display.Tile.getBounds","openfl/display/Tile.hx",149,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_243_hitTestTile,"openfl.display.Tile","hitTestTile",0xcb74d13d,"openfl.display.Tile.hitTestTile","openfl/display/Tile.hx",243,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_260_invalidate,"openfl.display.Tile","invalidate",0xd62cb991,"openfl.display.Tile.invalidate","openfl/display/Tile.hx",260,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_265___findTileset,"openfl.display.Tile","__findTileset",0xdce29485,"openfl.display.Tile.__findTileset","openfl/display/Tile.hx",265,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_282___getWorldTransform,"openfl.display.Tile","__getWorldTransform",0x5e0ca1fa,"openfl.display.Tile.__getWorldTransform","openfl/display/Tile.hx",282,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_300___setRenderDirty,"openfl.display.Tile","__setRenderDirty",0xfb121810,"openfl.display.Tile.__setRenderDirty","openfl/display/Tile.hx",300,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_325_get_alpha,"openfl.display.Tile","get_alpha",0x9943785f,"openfl.display.Tile.get_alpha","openfl/display/Tile.hx",325,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_330_set_alpha,"openfl.display.Tile","set_alpha",0x7c94646b,"openfl.display.Tile.set_alpha","openfl/display/Tile.hx",330,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_346_get_blendMode,"openfl.display.Tile","get_blendMode",0x1c87c9d5,"openfl.display.Tile.get_blendMode","openfl/display/Tile.hx",346,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_351_set_blendMode,"openfl.display.Tile","set_blendMode",0x618dabe1,"openfl.display.Tile.set_blendMode","openfl/display/Tile.hx",351,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_367_get_colorTransform,"openfl.display.Tile","get_colorTransform",0x6c3b5e68,"openfl.display.Tile.get_colorTransform","openfl/display/Tile.hx",367,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_372_set_colorTransform,"openfl.display.Tile","set_colorTransform",0x48ea90dc,"openfl.display.Tile.set_colorTransform","openfl/display/Tile.hx",372,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_388_get_id,"openfl.display.Tile","get_id",0x37ef503a,"openfl.display.Tile.get_id","openfl/display/Tile.hx",388,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_393_set_id,"openfl.display.Tile","set_id",0x0437a4ae,"openfl.display.Tile.set_id","openfl/display/Tile.hx",393,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_409_get_matrix,"openfl.display.Tile","get_matrix",0xfb524620,"openfl.display.Tile.get_matrix","openfl/display/Tile.hx",409,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_414_set_matrix,"openfl.display.Tile","set_matrix",0xfecfe494,"openfl.display.Tile.set_matrix","openfl/display/Tile.hx",414,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_433_get_originX,"openfl.display.Tile","get_originX",0xaf3962f3,"openfl.display.Tile.get_originX","openfl/display/Tile.hx",433,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_438_set_originX,"openfl.display.Tile","set_originX",0xb9a669ff,"openfl.display.Tile.set_originX","openfl/display/Tile.hx",438,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_454_get_originY,"openfl.display.Tile","get_originY",0xaf3962f4,"openfl.display.Tile.get_originY","openfl/display/Tile.hx",454,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_459_set_originY,"openfl.display.Tile","set_originY",0xb9a66a00,"openfl.display.Tile.set_originY","openfl/display/Tile.hx",459,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_475_get_rect,"openfl.display.Tile","get_rect",0x94835743,"openfl.display.Tile.get_rect","openfl/display/Tile.hx",475,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_480_set_rect,"openfl.display.Tile","set_rect",0x42e0b0b7,"openfl.display.Tile.set_rect","openfl/display/Tile.hx",480,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_494_get_rotation,"openfl.display.Tile","get_rotation",0xca9b42dd,"openfl.display.Tile.get_rotation","openfl/display/Tile.hx",494,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_521_set_rotation,"openfl.display.Tile","set_rotation",0xdf946651,"openfl.display.Tile.set_rotation","openfl/display/Tile.hx",521,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_547_get_scaleX,"openfl.display.Tile","get_scaleX",0x7baffa6d,"openfl.display.Tile.get_scaleX","openfl/display/Tile.hx",547,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_568_set_scaleX,"openfl.display.Tile","set_scaleX",0x7f2d98e1,"openfl.display.Tile.set_scaleX","openfl/display/Tile.hx",568,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_599_get_scaleY,"openfl.display.Tile","get_scaleY",0x7baffa6e,"openfl.display.Tile.get_scaleY","openfl/display/Tile.hx",599,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_620_set_scaleY,"openfl.display.Tile","set_scaleY",0x7f2d98e2,"openfl.display.Tile.set_scaleY","openfl/display/Tile.hx",620,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_653_get_shader,"openfl.display.Tile","get_shader",0x5caacf04,"openfl.display.Tile.get_shader","openfl/display/Tile.hx",653,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_658_set_shader,"openfl.display.Tile","set_shader",0x60286d78,"openfl.display.Tile.set_shader","openfl/display/Tile.hx",658,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_674_get_tileset,"openfl.display.Tile","get_tileset",0x9ed75475,"openfl.display.Tile.get_tileset","openfl/display/Tile.hx",674,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_679_set_tileset,"openfl.display.Tile","set_tileset",0xa9445b81,"openfl.display.Tile.set_tileset","openfl/display/Tile.hx",679,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_695_get_visible,"openfl.display.Tile","get_visible",0xfc684bb3,"openfl.display.Tile.get_visible","openfl/display/Tile.hx",695,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_700_set_visible,"openfl.display.Tile","set_visible",0x06d552bf,"openfl.display.Tile.set_visible","openfl/display/Tile.hx",700,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_716_get_x,"openfl.display.Tile","get_x",0x8c4dfcf9,"openfl.display.Tile.get_x","openfl/display/Tile.hx",716,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_721_set_x,"openfl.display.Tile","set_x",0x751cf305,"openfl.display.Tile.set_x","openfl/display/Tile.hx",721,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_737_get_y,"openfl.display.Tile","get_y",0x8c4dfcfa,"openfl.display.Tile.get_y","openfl/display/Tile.hx",737,0xb47c9064)
HX_LOCAL_STACK_FRAME(_hx_pos_6c0e6bae55b32aaf_742_set_y,"openfl.display.Tile","set_y",0x751cf306,"openfl.display.Tile.set_y","openfl/display/Tile.hx",742,0xb47c9064)
namespace openfl{
namespace display{

void Tile_obj::__construct(hx::Null< int >  __o_id,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_originX,hx::Null< Float >  __o_originY){
int id = __o_id.Default(0);
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float scaleX = __o_scaleX.Default(1);
Float scaleY = __o_scaleY.Default(1);
Float rotation = __o_rotation.Default(0);
Float originX = __o_originX.Default(0);
Float originY = __o_originY.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_90_new)
HXLINE(  92)		this->_hx___id = id;
HXLINE(  94)		this->_hx___matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  95)		if ((x != (int)0)) {
HXLINE(  95)			this->set_x(x);
            		}
HXLINE(  96)		if ((y != (int)0)) {
HXLINE(  96)			this->set_y(y);
            		}
HXLINE(  97)		if ((scaleX != (int)1)) {
HXLINE(  97)			this->set_scaleX(scaleX);
            		}
HXLINE(  98)		if ((scaleY != (int)1)) {
HXLINE(  98)			this->set_scaleY(scaleY);
            		}
HXLINE(  99)		if ((rotation != (int)0)) {
HXLINE(  99)			this->set_rotation(rotation);
            		}
HXLINE( 101)		this->_hx___dirty = true;
HXLINE( 102)		this->__length = (int)0;
HXLINE( 103)		this->_hx___originX = originX;
HXLINE( 104)		this->_hx___originY = originY;
HXLINE( 105)		this->_hx___alpha = (int)1;
HXLINE( 106)		this->_hx___blendMode = null();
HXLINE( 107)		this->_hx___visible = true;
            	}

Dynamic Tile_obj::__CreateEmpty() { return new Tile_obj; }

void *Tile_obj::_hx_vtable = 0;

Dynamic Tile_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tile_obj > _hx_result = new Tile_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool Tile_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x555b129c;
}

 ::openfl::display::Tile Tile_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_112_clone)
HXLINE( 114)		 ::openfl::display::Tile tile =  ::openfl::display::Tile_obj::__alloc( HX_CTX ,this->_hx___id,null(),null(),null(),null(),null(),null(),null());
HXLINE( 115)		tile->_hx___alpha = this->_hx___alpha;
HXLINE( 116)		tile->_hx___blendMode = this->_hx___blendMode;
HXLINE( 117)		tile->_hx___originX = this->_hx___originX;
HXLINE( 118)		tile->_hx___originY = this->_hx___originY;
HXLINE( 120)		if (hx::IsNotNull( this->_hx___rect )) {
HXLINE( 120)			tile->_hx___rect = this->_hx___rect->clone();
            		}
HXLINE( 122)		tile->set_matrix(this->_hx___matrix->clone());
HXLINE( 123)		tile->_hx___shader = this->_hx___shader;
HXLINE( 124)		tile->set_tileset(this->_hx___tileset);
HXLINE( 126)		if (hx::IsNotNull( this->_hx___colorTransform )) {
HXLINE( 131)			tile->_hx___colorTransform = this->_hx___colorTransform->_hx___clone();
            		}
HXLINE( 136)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,clone,return )

 ::openfl::geom::Rectangle Tile_obj::getBounds( ::openfl::display::Tile targetCoordinateSpace){
            	HX_GC_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_149_getBounds)
HXLINE( 151)		 ::openfl::geom::Rectangle result;
HXLINE( 153)		if (hx::IsNull( this->get_tileset() )) {
HXLINE( 155)			 ::openfl::display::Tileset parentTileset = this->parent->_hx___findTileset();
HXLINE( 156)			if (hx::IsNull( parentTileset )) {
HXLINE( 156)				return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE( 157)			result = parentTileset->getRect(this->get_id());
HXLINE( 158)			if (hx::IsNull( result )) {
HXLINE( 158)				return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
            		}
            		else {
HXLINE( 162)			 ::openfl::display::Tileset result1 = this->get_tileset();
HXDLIN( 162)			result = result1->getRect(this->get_id());
            		}
HXLINE( 166)		result->x = (int)0;
HXLINE( 167)		result->y = (int)0;
HXLINE( 170)		 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 171)		matrix->copyFrom(this->_hx___getWorldTransform());
HXLINE( 173)		bool _hx_tmp;
HXDLIN( 173)		if (hx::IsNotNull( targetCoordinateSpace )) {
HXLINE( 173)			_hx_tmp = hx::IsNotEq( targetCoordinateSpace,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 173)			_hx_tmp = false;
            		}
HXDLIN( 173)		if (_hx_tmp) {
HXLINE( 175)			 ::openfl::geom::Matrix targetMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 177)			targetMatrix->copyFrom(targetCoordinateSpace->_hx___getWorldTransform());
HXLINE( 178)			targetMatrix->invert();
HXLINE( 180)			matrix->concat(targetMatrix);
HXLINE( 183)			::openfl::geom::Matrix_obj::_hx___pool->release(targetMatrix);
            		}
HXLINE( 225)		result->_hx___transform(result,matrix);
HXLINE( 226)		::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
HXLINE( 229)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,getBounds,return )

bool Tile_obj::hitTestTile( ::openfl::display::Tile obj){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_243_hitTestTile)
HXLINE( 245)		bool _hx_tmp;
HXDLIN( 245)		bool _hx_tmp1;
HXDLIN( 245)		if (hx::IsNotNull( obj )) {
HXLINE( 245)			_hx_tmp1 = hx::IsNotNull( obj->parent );
            		}
            		else {
HXLINE( 245)			_hx_tmp1 = false;
            		}
HXDLIN( 245)		if (_hx_tmp1) {
HXLINE( 245)			_hx_tmp = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 245)			_hx_tmp = false;
            		}
HXDLIN( 245)		if (_hx_tmp) {
HXLINE( 247)			 ::openfl::geom::Rectangle currentBounds = this->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 248)			 ::openfl::geom::Rectangle targetBounds = obj->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 249)			return currentBounds->intersects(targetBounds);
            		}
HXLINE( 253)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,hitTestTile,return )

void Tile_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_260_invalidate)
HXDLIN( 260)		this->_hx___setRenderDirty();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,invalidate,(void))

 ::openfl::display::Tileset Tile_obj::_hx___findTileset(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_265___findTileset)
HXLINE( 269)		if (hx::IsNotNull( this->get_tileset() )) {
HXLINE( 269)			return this->get_tileset();
            		}
HXLINE( 270)		if (::Std_obj::is(this->parent,hx::ClassOf< ::openfl::display::Tilemap >())) {
HXLINE( 270)			return this->parent->get_tileset();
            		}
HXLINE( 271)		if (hx::IsNull( this->parent )) {
HXLINE( 271)			return null();
            		}
HXLINE( 272)		return this->parent->_hx___findTileset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,_hx___findTileset,return )

 ::openfl::geom::Matrix Tile_obj::_hx___getWorldTransform(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_282___getWorldTransform)
HXLINE( 284)		 ::openfl::geom::Matrix retval = this->get_matrix()->clone();
HXLINE( 286)		if (hx::IsNotNull( this->parent )) {
HXLINE( 288)			retval->concat(this->parent->_hx___getWorldTransform());
            		}
HXLINE( 292)		return retval;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,_hx___getWorldTransform,return )

void Tile_obj::_hx___setRenderDirty(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_300___setRenderDirty)
HXDLIN( 300)		if (!(this->_hx___dirty)) {
HXLINE( 302)			this->_hx___dirty = true;
HXLINE( 304)			if (hx::IsNotNull( this->parent )) {
HXLINE( 306)				this->parent->_hx___setRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,_hx___setRenderDirty,(void))

Float Tile_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_325_get_alpha)
HXDLIN( 325)		return this->_hx___alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_alpha,return )

Float Tile_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_330_set_alpha)
HXLINE( 332)		if ((value != this->_hx___alpha)) {
HXLINE( 334)			this->_hx___alpha = value;
HXLINE( 335)			this->_hx___setRenderDirty();
            		}
HXLINE( 339)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_alpha,return )

 ::Dynamic Tile_obj::get_blendMode(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_346_get_blendMode)
HXDLIN( 346)		return this->_hx___blendMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_blendMode,return )

 ::Dynamic Tile_obj::set_blendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_351_set_blendMode)
HXLINE( 353)		if (hx::IsNotEq( value,this->_hx___blendMode )) {
HXLINE( 355)			this->_hx___blendMode = value;
HXLINE( 356)			this->_hx___setRenderDirty();
            		}
HXLINE( 360)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_blendMode,return )

 ::openfl::geom::ColorTransform Tile_obj::get_colorTransform(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_367_get_colorTransform)
HXDLIN( 367)		return this->_hx___colorTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_colorTransform,return )

 ::openfl::geom::ColorTransform Tile_obj::set_colorTransform( ::openfl::geom::ColorTransform value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_372_set_colorTransform)
HXLINE( 374)		if (hx::IsNotEq( value,this->_hx___colorTransform )) {
HXLINE( 376)			this->_hx___colorTransform = value;
HXLINE( 377)			this->_hx___setRenderDirty();
            		}
HXLINE( 381)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_colorTransform,return )

int Tile_obj::get_id(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_388_get_id)
HXDLIN( 388)		return this->_hx___id;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_id,return )

int Tile_obj::set_id(int value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_393_set_id)
HXLINE( 395)		if ((value != this->_hx___id)) {
HXLINE( 397)			this->_hx___id = value;
HXLINE( 398)			this->_hx___setRenderDirty();
            		}
HXLINE( 402)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_id,return )

 ::openfl::geom::Matrix Tile_obj::get_matrix(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_409_get_matrix)
HXDLIN( 409)		return this->_hx___matrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_matrix,return )

 ::openfl::geom::Matrix Tile_obj::set_matrix( ::openfl::geom::Matrix value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_414_set_matrix)
HXLINE( 416)		if (hx::IsNotEq( value,this->_hx___matrix )) {
HXLINE( 418)			this->_hx___rotation = null();
HXLINE( 419)			this->_hx___scaleX = null();
HXLINE( 420)			this->_hx___scaleY = null();
HXLINE( 421)			this->_hx___matrix = value;
HXLINE( 422)			this->_hx___setRenderDirty();
            		}
HXLINE( 426)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_matrix,return )

Float Tile_obj::get_originX(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_433_get_originX)
HXDLIN( 433)		return this->_hx___originX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_originX,return )

Float Tile_obj::set_originX(Float value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_438_set_originX)
HXLINE( 440)		if ((value != this->_hx___originX)) {
HXLINE( 442)			this->_hx___originX = value;
HXLINE( 443)			this->_hx___setRenderDirty();
            		}
HXLINE( 447)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_originX,return )

Float Tile_obj::get_originY(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_454_get_originY)
HXDLIN( 454)		return this->_hx___originY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_originY,return )

Float Tile_obj::set_originY(Float value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_459_set_originY)
HXLINE( 461)		if ((value != this->_hx___originY)) {
HXLINE( 463)			this->_hx___originY = value;
HXLINE( 464)			this->_hx___setRenderDirty();
            		}
HXLINE( 468)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_originY,return )

 ::openfl::geom::Rectangle Tile_obj::get_rect(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_475_get_rect)
HXDLIN( 475)		return this->_hx___rect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_rect,return )

 ::openfl::geom::Rectangle Tile_obj::set_rect( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_480_set_rect)
HXLINE( 482)		if (hx::IsNotEq( value,this->_hx___rect )) {
HXLINE( 484)			this->_hx___rect = value;
HXLINE( 485)			this->_hx___setRenderDirty();
            		}
HXLINE( 489)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_rect,return )

Float Tile_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_494_get_rotation)
HXLINE( 496)		if (hx::IsNull( this->_hx___rotation )) {
HXLINE( 498)			bool _hx_tmp;
HXDLIN( 498)			if ((this->_hx___matrix->b == (int)0)) {
HXLINE( 498)				_hx_tmp = (this->_hx___matrix->c == (int)0);
            			}
            			else {
HXLINE( 498)				_hx_tmp = false;
            			}
HXDLIN( 498)			if (_hx_tmp) {
HXLINE( 500)				this->_hx___rotation = (int)0;
HXLINE( 501)				this->_hx___rotationSine = (int)0;
HXLINE( 502)				this->_hx___rotationCosine = (int)1;
            			}
            			else {
HXLINE( 506)				Float radians = ::Math_obj::atan2(this->_hx___matrix->d,this->_hx___matrix->c);
HXDLIN( 506)				Float radians1 = (radians - ((Float)::Math_obj::PI / (Float)(int)2));
HXLINE( 508)				this->_hx___rotation = (radians1 * ((Float)(int)180 / (Float)::Math_obj::PI));
HXLINE( 509)				this->_hx___rotationSine = ::Math_obj::sin(radians1);
HXLINE( 510)				this->_hx___rotationCosine = ::Math_obj::cos(radians1);
            			}
            		}
HXLINE( 516)		return this->_hx___rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_rotation,return )

Float Tile_obj::set_rotation(Float value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_521_set_rotation)
HXLINE( 523)		if (hx::IsNotEq( value,this->_hx___rotation )) {
HXLINE( 525)			this->_hx___rotation = value;
HXLINE( 526)			Float radians = (value * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 527)			this->_hx___rotationSine = ::Math_obj::sin(radians);
HXLINE( 528)			this->_hx___rotationCosine = ::Math_obj::cos(radians);
HXLINE( 530)			Float _hx___scaleX = this->get_scaleX();
HXLINE( 531)			Float _hx___scaleY = this->get_scaleY();
HXLINE( 533)			this->_hx___matrix->a = (this->_hx___rotationCosine * _hx___scaleX);
HXLINE( 534)			this->_hx___matrix->b = (this->_hx___rotationSine * _hx___scaleX);
HXLINE( 535)			this->_hx___matrix->c = (-(this->_hx___rotationSine) * _hx___scaleY);
HXLINE( 536)			this->_hx___matrix->d = (this->_hx___rotationCosine * _hx___scaleY);
HXLINE( 538)			this->_hx___setRenderDirty();
            		}
HXLINE( 542)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_rotation,return )

Float Tile_obj::get_scaleX(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_547_get_scaleX)
HXLINE( 549)		if (hx::IsNull( this->_hx___scaleX )) {
HXLINE( 551)			if ((this->get_matrix()->b == (int)0)) {
HXLINE( 553)				this->_hx___scaleX = this->_hx___matrix->a;
            			}
            			else {
HXLINE( 557)				Float _hx_tmp = (this->_hx___matrix->a * this->_hx___matrix->a);
HXDLIN( 557)				this->_hx___scaleX = ::Math_obj::sqrt((_hx_tmp + (this->_hx___matrix->b * this->_hx___matrix->b)));
            			}
            		}
HXLINE( 563)		return this->_hx___scaleX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_scaleX,return )

Float Tile_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_568_set_scaleX)
HXLINE( 570)		if (hx::IsNotEq( value,this->_hx___scaleX )) {
HXLINE( 572)			this->_hx___scaleX = value;
HXLINE( 574)			if ((this->_hx___matrix->b == (int)0)) {
HXLINE( 576)				this->_hx___matrix->a = value;
            			}
            			else {
HXLINE( 580)				Float rotation = this->get_rotation();
HXLINE( 582)				Float a = (this->_hx___rotationCosine * value);
HXLINE( 583)				Float b = (this->_hx___rotationSine * value);
HXLINE( 585)				this->_hx___matrix->a = a;
HXLINE( 586)				this->_hx___matrix->b = b;
            			}
HXLINE( 590)			this->_hx___setRenderDirty();
            		}
HXLINE( 594)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_scaleX,return )

Float Tile_obj::get_scaleY(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_599_get_scaleY)
HXLINE( 601)		if (hx::IsNull( this->_hx___scaleY )) {
HXLINE( 603)			if ((this->_hx___matrix->c == (int)0)) {
HXLINE( 605)				this->_hx___scaleY = this->get_matrix()->d;
            			}
            			else {
HXLINE( 609)				Float _hx_tmp = (this->_hx___matrix->c * this->_hx___matrix->c);
HXDLIN( 609)				this->_hx___scaleY = ::Math_obj::sqrt((_hx_tmp + (this->_hx___matrix->d * this->_hx___matrix->d)));
            			}
            		}
HXLINE( 615)		return this->_hx___scaleY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_scaleY,return )

Float Tile_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_620_set_scaleY)
HXLINE( 622)		if (hx::IsNotEq( value,this->_hx___scaleY )) {
HXLINE( 624)			this->_hx___scaleY = value;
HXLINE( 626)			if ((this->_hx___matrix->c == (int)0)) {
HXLINE( 628)				this->_hx___matrix->d = value;
            			}
            			else {
HXLINE( 632)				Float rotation = this->get_rotation();
HXLINE( 634)				Float c = (-(this->_hx___rotationSine) * value);
HXLINE( 635)				Float d = (this->_hx___rotationCosine * value);
HXLINE( 637)				this->_hx___matrix->c = c;
HXLINE( 638)				this->_hx___matrix->d = d;
            			}
HXLINE( 642)			this->_hx___setRenderDirty();
            		}
HXLINE( 646)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_scaleY,return )

 ::openfl::display::Shader Tile_obj::get_shader(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_653_get_shader)
HXDLIN( 653)		return this->_hx___shader;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_shader,return )

 ::openfl::display::Shader Tile_obj::set_shader( ::openfl::display::Shader value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_658_set_shader)
HXLINE( 660)		if (hx::IsNotEq( value,this->_hx___shader )) {
HXLINE( 662)			this->_hx___shader = value;
HXLINE( 663)			this->_hx___setRenderDirty();
            		}
HXLINE( 667)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_shader,return )

 ::openfl::display::Tileset Tile_obj::get_tileset(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_674_get_tileset)
HXDLIN( 674)		return this->_hx___tileset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_tileset,return )

 ::openfl::display::Tileset Tile_obj::set_tileset( ::openfl::display::Tileset value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_679_set_tileset)
HXLINE( 681)		if (hx::IsNotEq( value,this->_hx___tileset )) {
HXLINE( 683)			this->_hx___tileset = value;
HXLINE( 684)			this->_hx___setRenderDirty();
            		}
HXLINE( 688)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_tileset,return )

bool Tile_obj::get_visible(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_695_get_visible)
HXDLIN( 695)		return this->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_visible,return )

bool Tile_obj::set_visible(bool value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_700_set_visible)
HXLINE( 702)		if ((value != this->_hx___visible)) {
HXLINE( 704)			this->_hx___visible = value;
HXLINE( 705)			this->_hx___setRenderDirty();
            		}
HXLINE( 709)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_visible,return )

Float Tile_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_716_get_x)
HXDLIN( 716)		return this->_hx___matrix->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_x,return )

Float Tile_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_721_set_x)
HXLINE( 723)		if ((value != this->_hx___matrix->tx)) {
HXLINE( 725)			this->_hx___matrix->tx = value;
HXLINE( 726)			this->_hx___setRenderDirty();
            		}
HXLINE( 730)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_x,return )

Float Tile_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_737_get_y)
HXDLIN( 737)		return this->_hx___matrix->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tile_obj,get_y,return )

Float Tile_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_6c0e6bae55b32aaf_742_set_y)
HXLINE( 744)		if ((value != this->_hx___matrix->ty)) {
HXLINE( 746)			this->_hx___matrix->ty = value;
HXLINE( 747)			this->_hx___setRenderDirty();
            		}
HXLINE( 751)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tile_obj,set_y,return )


hx::ObjectPtr< Tile_obj > Tile_obj::__new(hx::Null< int >  __o_id,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_originX,hx::Null< Float >  __o_originY) {
	hx::ObjectPtr< Tile_obj > __this = new Tile_obj();
	__this->__construct(__o_id,__o_x,__o_y,__o_scaleX,__o_scaleY,__o_rotation,__o_originX,__o_originY);
	return __this;
}

hx::ObjectPtr< Tile_obj > Tile_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_id,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_originX,hx::Null< Float >  __o_originY) {
	Tile_obj *__this = (Tile_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tile_obj), true, "openfl.display.Tile"));
	*(void **)__this = Tile_obj::_hx_vtable;
	__this->__construct(__o_id,__o_x,__o_y,__o_scaleX,__o_scaleY,__o_rotation,__o_originX,__o_originY);
	return __this;
}

Tile_obj::Tile_obj()
{
}

void Tile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tile);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___colorTransform,"__colorTransform");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___id,"__id");
	HX_MARK_MEMBER_NAME(__length,"__length");
	HX_MARK_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_MARK_MEMBER_NAME(_hx___originX,"__originX");
	HX_MARK_MEMBER_NAME(_hx___originY,"__originY");
	HX_MARK_MEMBER_NAME(_hx___rect,"__rect");
	HX_MARK_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_MARK_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_MARK_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_MARK_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_MARK_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_MARK_MEMBER_NAME(_hx___shader,"__shader");
	HX_MARK_MEMBER_NAME(_hx___tileset,"__tileset");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_END_CLASS();
}

void Tile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___colorTransform,"__colorTransform");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___id,"__id");
	HX_VISIT_MEMBER_NAME(__length,"__length");
	HX_VISIT_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_VISIT_MEMBER_NAME(_hx___originX,"__originX");
	HX_VISIT_MEMBER_NAME(_hx___originY,"__originY");
	HX_VISIT_MEMBER_NAME(_hx___rect,"__rect");
	HX_VISIT_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_VISIT_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_VISIT_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_VISIT_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_VISIT_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_VISIT_MEMBER_NAME(_hx___shader,"__shader");
	HX_VISIT_MEMBER_NAME(_hx___tileset,"__tileset");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
}

hx::Val Tile_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_id() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"rect") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rect() ); }
		if (HX_FIELD_EQ(inName,"__id") ) { return hx::Val( _hx___id ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alpha() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_matrix() ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleX() ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleY() ); }
		if (HX_FIELD_EQ(inName,"shader") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shader() ); }
		if (HX_FIELD_EQ(inName,"__rect") ) { return hx::Val( _hx___rect ); }
		if (HX_FIELD_EQ(inName,"get_id") ) { return hx::Val( get_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_id") ) { return hx::Val( set_id_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"originX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_originX() ); }
		if (HX_FIELD_EQ(inName,"originY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_originY() ); }
		if (HX_FIELD_EQ(inName,"tileset") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tileset() ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_visible() ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation() ); }
		if (HX_FIELD_EQ(inName,"__length") ) { return hx::Val( __length ); }
		if (HX_FIELD_EQ(inName,"__matrix") ) { return hx::Val( _hx___matrix ); }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { return hx::Val( _hx___scaleX ); }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { return hx::Val( _hx___scaleY ); }
		if (HX_FIELD_EQ(inName,"__shader") ) { return hx::Val( _hx___shader ); }
		if (HX_FIELD_EQ(inName,"get_rect") ) { return hx::Val( get_rect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rect") ) { return hx::Val( set_rect_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blendMode() ); }
		if (HX_FIELD_EQ(inName,"__originX") ) { return hx::Val( _hx___originX ); }
		if (HX_FIELD_EQ(inName,"__originY") ) { return hx::Val( _hx___originY ); }
		if (HX_FIELD_EQ(inName,"__tileset") ) { return hx::Val( _hx___tileset ); }
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__rotation") ) { return hx::Val( _hx___rotation ); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_matrix") ) { return hx::Val( get_matrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_matrix") ) { return hx::Val( set_matrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return hx::Val( get_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return hx::Val( get_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_shader") ) { return hx::Val( get_shader_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shader") ) { return hx::Val( set_shader_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"hitTestTile") ) { return hx::Val( hitTestTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_originX") ) { return hx::Val( get_originX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_originX") ) { return hx::Val( set_originX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_originY") ) { return hx::Val( get_originY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_originY") ) { return hx::Val( set_originY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tileset") ) { return hx::Val( get_tileset_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tileset") ) { return hx::Val( set_tileset_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_visible") ) { return hx::Val( get_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__findTileset") ) { return hx::Val( _hx___findTileset_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blendMode") ) { return hx::Val( get_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return hx::Val( set_blendMode_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_colorTransform() ); }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { return hx::Val( _hx___rotationSine ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__colorTransform") ) { return hx::Val( _hx___colorTransform ); }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { return hx::Val( _hx___rotationCosine ); }
		if (HX_FIELD_EQ(inName,"__setRenderDirty") ) { return hx::Val( _hx___setRenderDirty_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_colorTransform") ) { return hx::Val( get_colorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_colorTransform") ) { return hx::Val( set_colorTransform_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__getWorldTransform") ) { return hx::Val( _hx___getWorldTransform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Tile_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_id(inValue.Cast< int >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rect(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		if (HX_FIELD_EQ(inName,"__id") ) { _hx___id=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_matrix(inValue.Cast<  ::openfl::geom::Matrix >()) ); }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::openfl::display::TileContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"shader") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shader(inValue.Cast<  ::openfl::display::Shader >()) ); }
		if (HX_FIELD_EQ(inName,"__rect") ) { _hx___rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"originX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_originX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"originY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_originY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"tileset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tileset(inValue.Cast<  ::openfl::display::Tileset >()) ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__length") ) { __length=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__matrix") ) { _hx___matrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { _hx___scaleX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { _hx___scaleY=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__shader") ) { _hx___shader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blendMode(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__originX") ) { _hx___originX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__originY") ) { _hx___originY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tileset") ) { _hx___tileset=inValue.Cast<  ::openfl::display::Tileset >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__rotation") ) { _hx___rotation=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_colorTransform(inValue.Cast<  ::openfl::geom::ColorTransform >()) ); }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { _hx___rotationSine=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__colorTransform") ) { _hx___colorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { _hx___rotationCosine=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("originX","\xb2","\x8f","\xf5","\x55"));
	outFields->push(HX_HCSTRING("originY","\xb3","\x8f","\xf5","\x55"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("tileset","\x34","\x81","\x93","\x45"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__colorTransform","\xa9","\x62","\x7f","\xe1"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__id","\xfb","\xb6","\x13","\x3f"));
	outFields->push(HX_HCSTRING("__length","\x06","\x00","\x37","\x47"));
	outFields->push(HX_HCSTRING("__matrix","\x61","\xa1","\xf7","\x63"));
	outFields->push(HX_HCSTRING("__originX","\x92","\xe0","\x43","\xd7"));
	outFields->push(HX_HCSTRING("__originY","\x93","\xe0","\x43","\xd7"));
	outFields->push(HX_HCSTRING("__rect","\x44","\xb0","\x9f","\xfa"));
	outFields->push(HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"));
	outFields->push(HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"));
	outFields->push(HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"));
	outFields->push(HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5"));
	outFields->push(HX_HCSTRING("__tileset","\x14","\xd2","\xe1","\xc6"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Tile_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tile_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::openfl::display::TileContainer*/ ,(int)offsetof(Tile_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsFloat,(int)offsetof(Tile_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tile_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(Tile_obj,_hx___colorTransform),HX_HCSTRING("__colorTransform","\xa9","\x62","\x7f","\xe1")},
	{hx::fsBool,(int)offsetof(Tile_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsInt,(int)offsetof(Tile_obj,_hx___id),HX_HCSTRING("__id","\xfb","\xb6","\x13","\x3f")},
	{hx::fsInt,(int)offsetof(Tile_obj,__length),HX_HCSTRING("__length","\x06","\x00","\x37","\x47")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Tile_obj,_hx___matrix),HX_HCSTRING("__matrix","\x61","\xa1","\xf7","\x63")},
	{hx::fsFloat,(int)offsetof(Tile_obj,_hx___originX),HX_HCSTRING("__originX","\x92","\xe0","\x43","\xd7")},
	{hx::fsFloat,(int)offsetof(Tile_obj,_hx___originY),HX_HCSTRING("__originY","\x93","\xe0","\x43","\xd7")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Tile_obj,_hx___rect),HX_HCSTRING("__rect","\x44","\xb0","\x9f","\xfa")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tile_obj,_hx___rotation),HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab")},
	{hx::fsFloat,(int)offsetof(Tile_obj,_hx___rotationCosine),HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14")},
	{hx::fsFloat,(int)offsetof(Tile_obj,_hx___rotationSine),HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tile_obj,_hx___scaleX),HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tile_obj,_hx___scaleY),HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(Tile_obj,_hx___shader),HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5")},
	{hx::fsObject /*::openfl::display::Tileset*/ ,(int)offsetof(Tile_obj,_hx___tileset),HX_HCSTRING("__tileset","\x14","\xd2","\xe1","\xc6")},
	{hx::fsBool,(int)offsetof(Tile_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Tile_obj_sStaticStorageInfo = 0;
#endif

static ::String Tile_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__colorTransform","\xa9","\x62","\x7f","\xe1"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__id","\xfb","\xb6","\x13","\x3f"),
	HX_HCSTRING("__length","\x06","\x00","\x37","\x47"),
	HX_HCSTRING("__matrix","\x61","\xa1","\xf7","\x63"),
	HX_HCSTRING("__originX","\x92","\xe0","\x43","\xd7"),
	HX_HCSTRING("__originY","\x93","\xe0","\x43","\xd7"),
	HX_HCSTRING("__rect","\x44","\xb0","\x9f","\xfa"),
	HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"),
	HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"),
	HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"),
	HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"),
	HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"),
	HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5"),
	HX_HCSTRING("__tileset","\x14","\xd2","\xe1","\xc6"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("hitTestTile","\x13","\x5e","\x2b","\xf8"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("__findTileset","\xdb","\x82","\xf6","\x8d"),
	HX_HCSTRING("__getWorldTransform","\xd0","\xf4","\xfc","\x8b"),
	HX_HCSTRING("__setRenderDirty","\x7a","\x43","\x7f","\x81"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_blendMode","\x2b","\xb8","\x9b","\xcd"),
	HX_HCSTRING("set_blendMode","\x37","\x9a","\xa1","\x12"),
	HX_HCSTRING("get_colorTransform","\x52","\xb8","\xd9","\x48"),
	HX_HCSTRING("set_colorTransform","\xc6","\xea","\x88","\x25"),
	HX_HCSTRING("get_id","\x24","\xf3","\x2f","\xa3"),
	HX_HCSTRING("set_id","\x98","\x47","\x78","\x6f"),
	HX_HCSTRING("get_matrix","\x0a","\xa6","\x4f","\xac"),
	HX_HCSTRING("set_matrix","\x7e","\x44","\xcd","\xaf"),
	HX_HCSTRING("get_originX","\xc9","\xef","\xef","\xdb"),
	HX_HCSTRING("set_originX","\xd5","\xf6","\x5c","\xe6"),
	HX_HCSTRING("get_originY","\xca","\xef","\xef","\xdb"),
	HX_HCSTRING("set_originY","\xd6","\xf6","\x5c","\xe6"),
	HX_HCSTRING("get_rect","\xad","\x08","\x62","\xcb"),
	HX_HCSTRING("set_rect","\x21","\x62","\xbf","\x79"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_scaleX","\x57","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scaleY","\x58","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_shader","\xee","\x2e","\xa8","\x0d"),
	HX_HCSTRING("set_shader","\x62","\xcd","\x25","\x11"),
	HX_HCSTRING("get_tileset","\x4b","\xe1","\x8d","\xcb"),
	HX_HCSTRING("set_tileset","\x57","\xe8","\xfa","\xd5"),
	HX_HCSTRING("get_visible","\x89","\xd8","\x1e","\x29"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void Tile_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tile_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tile_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tile_obj::__mClass,"__mClass");
};

#endif

hx::Class Tile_obj::__mClass;

void Tile_obj::__register()
{
	hx::Object *dummy = new Tile_obj;
	Tile_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Tile","\x98","\x3c","\xaf","\xb0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Tile_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tile_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tile_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tile_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tile_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
