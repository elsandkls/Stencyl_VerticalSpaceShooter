// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_abe7b394d2d5e035_41_new,"openfl.display.ShaderParameter_Bool","new",0xb2db75c1,"openfl.display.ShaderParameter_Bool.new","openfl/display/ShaderParameter.hx",41,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_abe7b394d2d5e035_46___disableGL,"openfl.display.ShaderParameter_Bool","__disableGL",0xcd8ea94e,"openfl.display.ShaderParameter_Bool.__disableGL","openfl/display/ShaderParameter.hx",46,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_abe7b394d2d5e035_63___updateGL,"openfl.display.ShaderParameter_Bool","__updateGL",0x0736c44d,"openfl.display.ShaderParameter_Bool.__updateGL","openfl/display/ShaderParameter.hx",63,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_abe7b394d2d5e035_259___updateGLFromBuffer,"openfl.display.ShaderParameter_Bool","__updateGLFromBuffer",0x7e43ccb7,"openfl.display.ShaderParameter_Bool.__updateGLFromBuffer","openfl/display/ShaderParameter.hx",259,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_abe7b394d2d5e035_416_set_name,"openfl.display.ShaderParameter_Bool","set_name",0xe657c247,"openfl.display.ShaderParameter_Bool.set_name","openfl/display/ShaderParameter.hx",416,0xc89f13e6)
namespace openfl{
namespace display{

void ShaderParameter_Bool_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_abe7b394d2d5e035_41_new)
HXDLIN(  41)		this->index = (int)0;
            	}

Dynamic ShaderParameter_Bool_obj::__CreateEmpty() { return new ShaderParameter_Bool_obj; }

void *ShaderParameter_Bool_obj::_hx_vtable = 0;

Dynamic ShaderParameter_Bool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ShaderParameter_Bool_obj > _hx_result = new ShaderParameter_Bool_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ShaderParameter_Bool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x612a9f53;
}

void ShaderParameter_Bool_obj::_hx___disableGL( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_abe7b394d2d5e035_46___disableGL)
HXLINE(  48)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(  50)		if (!(this->_hx___isUniform)) {
HXLINE(  52)			int _g1 = (int)0;
HXDLIN(  52)			int _g = this->_hx___arrayLength;
HXDLIN(  52)			while((_g1 < _g)){
HXLINE(  52)				_g1 = (_g1 + (int)1);
HXDLIN(  52)				int i = (_g1 - (int)1);
HXLINE(  54)				gl->disableVertexAttribArray(( (int)((this->index + i)) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderParameter_Bool_obj,_hx___disableGL,(void))

void ShaderParameter_Bool_obj::_hx___updateGL( ::openfl::display3D::Context3D context,::Array< bool > overrideValue){
            	HX_STACKFRAME(&_hx_pos_abe7b394d2d5e035_63___updateGL)
HXLINE(  66)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(  68)		::Array< bool > value;
HXDLIN(  68)		if (hx::IsNotNull( overrideValue )) {
HXLINE(  68)			value = overrideValue;
            		}
            		else {
HXLINE(  68)			value = this->value;
            		}
HXLINE(  70)		::Array< bool > boolValue;
HXDLIN(  70)		if (this->_hx___isBool) {
HXLINE(  70)			boolValue = value;
            		}
            		else {
HXLINE(  70)			boolValue = null();
            		}
HXLINE(  71)		::Array< Float > floatValue;
HXDLIN(  71)		if (this->_hx___isFloat) {
HXLINE(  71)			floatValue = value;
            		}
            		else {
HXLINE(  71)			floatValue = null();
            		}
HXLINE(  72)		::Array< int > intValue;
HXDLIN(  72)		if (this->_hx___isInt) {
HXLINE(  72)			intValue = value;
            		}
            		else {
HXLINE(  72)			intValue = null();
            		}
HXLINE(  74)		if (this->_hx___isUniform) {
HXLINE(  76)			bool _hx_tmp;
HXDLIN(  76)			if (hx::IsNotNull( value )) {
HXLINE(  76)				_hx_tmp = (value->length >= this->__length);
            			}
            			else {
HXLINE(  76)				_hx_tmp = false;
            			}
HXDLIN(  76)			if (_hx_tmp) {
HXLINE(  78)				 ::Dynamic _g = this->type;
HXDLIN(  78)				 ::Dynamic _hx_switch_0 = _g;
            				if (  (_hx_switch_0==(int)0) ){
HXLINE(  80)					int _hx_tmp1;
HXDLIN(  80)					if (boolValue->__get((int)0)) {
HXLINE(  80)						_hx_tmp1 = (int)1;
            					}
            					else {
HXLINE(  80)						_hx_tmp1 = (int)0;
            					}
HXDLIN(  80)					gl->uniform1i(this->index,_hx_tmp1);
HXDLIN(  80)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)1) ){
HXLINE(  81)					int _hx_tmp2;
HXDLIN(  81)					if (boolValue->__get((int)0)) {
HXLINE(  81)						_hx_tmp2 = (int)1;
            					}
            					else {
HXLINE(  81)						_hx_tmp2 = (int)0;
            					}
HXDLIN(  81)					int _hx_tmp3;
HXDLIN(  81)					if (boolValue->__get((int)1)) {
HXLINE(  81)						_hx_tmp3 = (int)1;
            					}
            					else {
HXLINE(  81)						_hx_tmp3 = (int)0;
            					}
HXDLIN(  81)					gl->uniform2i(this->index,_hx_tmp2,_hx_tmp3);
HXDLIN(  81)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)2) ){
HXLINE(  82)					int _hx_tmp4;
HXDLIN(  82)					if (boolValue->__get((int)0)) {
HXLINE(  82)						_hx_tmp4 = (int)1;
            					}
            					else {
HXLINE(  82)						_hx_tmp4 = (int)0;
            					}
HXDLIN(  82)					int _hx_tmp5;
HXDLIN(  82)					if (boolValue->__get((int)1)) {
HXLINE(  82)						_hx_tmp5 = (int)1;
            					}
            					else {
HXLINE(  82)						_hx_tmp5 = (int)0;
            					}
HXDLIN(  82)					int _hx_tmp6;
HXDLIN(  82)					if (boolValue->__get((int)2)) {
HXLINE(  82)						_hx_tmp6 = (int)1;
            					}
            					else {
HXLINE(  82)						_hx_tmp6 = (int)0;
            					}
HXDLIN(  82)					gl->uniform3i(this->index,_hx_tmp4,_hx_tmp5,_hx_tmp6);
HXDLIN(  82)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)3) ){
HXLINE(  83)					int _hx_tmp7;
HXDLIN(  83)					if (boolValue->__get((int)0)) {
HXLINE(  83)						_hx_tmp7 = (int)1;
            					}
            					else {
HXLINE(  83)						_hx_tmp7 = (int)0;
            					}
HXDLIN(  83)					int _hx_tmp8;
HXDLIN(  83)					if (boolValue->__get((int)1)) {
HXLINE(  83)						_hx_tmp8 = (int)1;
            					}
            					else {
HXLINE(  83)						_hx_tmp8 = (int)0;
            					}
HXDLIN(  83)					int _hx_tmp9;
HXDLIN(  83)					if (boolValue->__get((int)2)) {
HXLINE(  83)						_hx_tmp9 = (int)1;
            					}
            					else {
HXLINE(  83)						_hx_tmp9 = (int)0;
            					}
HXDLIN(  83)					int _hx_tmp10;
HXDLIN(  83)					if (boolValue->__get((int)3)) {
HXLINE(  83)						_hx_tmp10 = (int)1;
            					}
            					else {
HXLINE(  83)						_hx_tmp10 = (int)0;
            					}
HXDLIN(  83)					gl->uniform4i(this->index,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10);
HXDLIN(  83)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)4) ){
HXLINE(  84)					gl->uniform1f(this->index,floatValue->__get((int)0));
HXDLIN(  84)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)5) ){
HXLINE(  85)					gl->uniform2f(this->index,floatValue->__get((int)0),floatValue->__get((int)1));
HXDLIN(  85)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)6) ){
HXLINE(  86)					gl->uniform3f(this->index,floatValue->__get((int)0),floatValue->__get((int)1),floatValue->__get((int)2));
HXDLIN(  86)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)7) ){
HXLINE(  87)					gl->uniform4f(this->index,floatValue->__get((int)0),floatValue->__get((int)1),floatValue->__get((int)2),floatValue->__get((int)3));
HXDLIN(  87)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)8) ){
HXLINE( 115)					gl->uniform1i(this->index,intValue->__get((int)0));
HXDLIN( 115)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)9) ){
HXLINE( 116)					gl->uniform2i(this->index,intValue->__get((int)0),intValue->__get((int)1));
HXDLIN( 116)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)10) ){
HXLINE( 117)					gl->uniform3i(this->index,intValue->__get((int)0),intValue->__get((int)1),intValue->__get((int)2));
HXDLIN( 117)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)11) ){
HXLINE( 118)					gl->uniform4i(this->index,intValue->__get((int)0),intValue->__get((int)1),intValue->__get((int)2),intValue->__get((int)3));
HXDLIN( 118)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)12) ){
HXLINE(  90)					{
HXLINE(  90)						int _g1 = (int)0;
HXDLIN(  90)						while((_g1 < (int)4)){
HXLINE(  90)							_g1 = (_g1 + (int)1);
HXDLIN(  90)							int i = (_g1 - (int)1);
HXLINE(  91)							{
HXLINE(  91)								 ::lime::utils::ArrayBufferView this1 = this->_hx___uniformMatrix;
HXDLIN(  91)								Float val = floatValue->__get(i);
HXDLIN(  91)								{
HXLINE(  91)									int this2 = this1->byteOffset;
HXDLIN(  91)									::__hxcpp_memory_set_float(this1->buffer->b,(this2 + (i * (int)4)),val);
            								}
            							}
            						}
            					}
HXLINE(  93)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix2fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE(  89)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)16) ){
HXLINE( 100)					{
HXLINE( 100)						int _g2 = (int)0;
HXDLIN( 100)						while((_g2 < (int)9)){
HXLINE( 100)							_g2 = (_g2 + (int)1);
HXDLIN( 100)							int i1 = (_g2 - (int)1);
HXLINE( 101)							{
HXLINE( 101)								 ::lime::utils::ArrayBufferView this3 = this->_hx___uniformMatrix;
HXDLIN( 101)								Float val1 = floatValue->__get(i1);
HXDLIN( 101)								{
HXLINE( 101)									int this4 = this3->byteOffset;
HXDLIN( 101)									::__hxcpp_memory_set_float(this3->buffer->b,(this4 + (i1 * (int)4)),val1);
            								}
            							}
            						}
            					}
HXLINE( 103)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix3fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE(  99)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==(int)20) ){
HXLINE( 110)					{
HXLINE( 110)						int _g3 = (int)0;
HXDLIN( 110)						while((_g3 < (int)16)){
HXLINE( 110)							_g3 = (_g3 + (int)1);
HXDLIN( 110)							int i2 = (_g3 - (int)1);
HXLINE( 111)							{
HXLINE( 111)								 ::lime::utils::ArrayBufferView this5 = this->_hx___uniformMatrix;
HXDLIN( 111)								Float val2 = floatValue->__get(i2);
HXDLIN( 111)								{
HXLINE( 111)									int this6 = this5->byteOffset;
HXDLIN( 111)									::__hxcpp_memory_set_float(this5->buffer->b,(this6 + (i2 * (int)4)),val2);
            								}
            							}
            						}
            					}
HXLINE( 113)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix4fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 109)					goto _hx_goto_3;
            				}
            				/* default */{
            				}
            				_hx_goto_3:;
            			}
            			else {
HXLINE( 126)				 ::Dynamic _g4 = this->type;
HXDLIN( 126)				 ::Dynamic _hx_switch_1 = _g4;
            				if (  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)9) ){
HXLINE( 129)					gl->uniform2i(this->index,(int)0,(int)0);
HXDLIN( 129)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)3) ||  (_hx_switch_1==(int)11) ){
HXLINE( 131)					gl->uniform4i(this->index,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 131)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)4) ){
HXLINE( 132)					gl->uniform1f(this->index,(int)0);
HXDLIN( 132)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)5) ){
HXLINE( 133)					gl->uniform2f(this->index,(int)0,(int)0);
HXDLIN( 133)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)6) ){
HXLINE( 134)					gl->uniform3f(this->index,(int)0,(int)0,(int)0);
HXDLIN( 134)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)7) ){
HXLINE( 135)					gl->uniform4f(this->index,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 135)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)8) ){
HXLINE( 128)					gl->uniform1i(this->index,(int)0);
HXDLIN( 128)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)2) ||  (_hx_switch_1==(int)10) ){
HXLINE( 130)					gl->uniform3i(this->index,(int)0,(int)0,(int)0);
HXDLIN( 130)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)12) ){
HXLINE( 138)					{
HXLINE( 138)						int _g5 = (int)0;
HXDLIN( 138)						while((_g5 < (int)4)){
HXLINE( 138)							_g5 = (_g5 + (int)1);
HXDLIN( 138)							int i3 = (_g5 - (int)1);
HXLINE( 139)							{
HXLINE( 139)								 ::lime::utils::ArrayBufferView this7 = this->_hx___uniformMatrix;
HXDLIN( 139)								{
HXLINE( 139)									int this8 = this7->byteOffset;
HXDLIN( 139)									::__hxcpp_memory_set_float(this7->buffer->b,(this8 + (i3 * (int)4)),(int)0);
            								}
            							}
            						}
            					}
HXLINE( 141)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix2fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 137)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)16) ){
HXLINE( 148)					{
HXLINE( 148)						int _g6 = (int)0;
HXDLIN( 148)						while((_g6 < (int)9)){
HXLINE( 148)							_g6 = (_g6 + (int)1);
HXDLIN( 148)							int i4 = (_g6 - (int)1);
HXLINE( 149)							{
HXLINE( 149)								 ::lime::utils::ArrayBufferView this9 = this->_hx___uniformMatrix;
HXDLIN( 149)								{
HXLINE( 149)									int this10 = this9->byteOffset;
HXDLIN( 149)									::__hxcpp_memory_set_float(this9->buffer->b,(this10 + (i4 * (int)4)),(int)0);
            								}
            							}
            						}
            					}
HXLINE( 151)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix3fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 147)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_1==(int)20) ){
HXLINE( 158)					{
HXLINE( 158)						int _g7 = (int)0;
HXDLIN( 158)						while((_g7 < (int)16)){
HXLINE( 158)							_g7 = (_g7 + (int)1);
HXDLIN( 158)							int i5 = (_g7 - (int)1);
HXLINE( 159)							{
HXLINE( 159)								 ::lime::utils::ArrayBufferView this11 = this->_hx___uniformMatrix;
HXDLIN( 159)								{
HXLINE( 159)									int this12 = this11->byteOffset;
HXDLIN( 159)									::__hxcpp_memory_set_float(this11->buffer->b,(this12 + (i5 * (int)4)),(int)0);
            								}
            							}
            						}
            					}
HXLINE( 161)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix4fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 157)					goto _hx_goto_7;
            				}
            				/* default */{
            				}
            				_hx_goto_7:;
            			}
            		}
            		else {
HXLINE( 171)			bool _hx_tmp11;
HXDLIN( 171)			if (!(this->_hx___useArray)) {
HXLINE( 171)				if (hx::IsNotNull( value )) {
HXLINE( 171)					_hx_tmp11 = (value->length == this->__length);
            				}
            				else {
HXLINE( 171)					_hx_tmp11 = true;
            				}
            			}
            			else {
HXLINE( 171)				_hx_tmp11 = false;
            			}
HXDLIN( 171)			if (_hx_tmp11) {
HXLINE( 173)				{
HXLINE( 173)					int _g11 = (int)0;
HXDLIN( 173)					int _g8 = this->_hx___arrayLength;
HXDLIN( 173)					while((_g11 < _g8)){
HXLINE( 173)						_g11 = (_g11 + (int)1);
HXDLIN( 173)						int i6 = (_g11 - (int)1);
HXLINE( 175)						gl->disableVertexAttribArray(( (int)((this->index + i6)) ));
            					}
            				}
HXLINE( 179)				if (hx::IsNotNull( value )) {
HXLINE( 181)					 ::Dynamic _g9 = this->type;
HXDLIN( 181)					 ::Dynamic _hx_switch_2 = _g9;
            					if (  (_hx_switch_2==(int)0) ){
HXLINE( 183)						Float _hx_tmp12;
HXDLIN( 183)						if (boolValue->__get((int)0)) {
HXLINE( 183)							_hx_tmp12 = (int)1;
            						}
            						else {
HXLINE( 183)							_hx_tmp12 = (int)0;
            						}
HXDLIN( 183)						gl->vertexAttrib1f(this->index,_hx_tmp12);
HXDLIN( 183)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)1) ){
HXLINE( 184)						Float _hx_tmp13;
HXDLIN( 184)						if (boolValue->__get((int)0)) {
HXLINE( 184)							_hx_tmp13 = (int)1;
            						}
            						else {
HXLINE( 184)							_hx_tmp13 = (int)0;
            						}
HXDLIN( 184)						Float _hx_tmp14;
HXDLIN( 184)						if (boolValue->__get((int)1)) {
HXLINE( 184)							_hx_tmp14 = (int)1;
            						}
            						else {
HXLINE( 184)							_hx_tmp14 = (int)0;
            						}
HXDLIN( 184)						gl->vertexAttrib2f(this->index,_hx_tmp13,_hx_tmp14);
HXDLIN( 184)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)2) ){
HXLINE( 185)						Float _hx_tmp15;
HXDLIN( 185)						if (boolValue->__get((int)0)) {
HXLINE( 185)							_hx_tmp15 = (int)1;
            						}
            						else {
HXLINE( 185)							_hx_tmp15 = (int)0;
            						}
HXDLIN( 185)						Float _hx_tmp16;
HXDLIN( 185)						if (boolValue->__get((int)1)) {
HXLINE( 185)							_hx_tmp16 = (int)1;
            						}
            						else {
HXLINE( 185)							_hx_tmp16 = (int)0;
            						}
HXDLIN( 185)						Float _hx_tmp17;
HXDLIN( 185)						if (boolValue->__get((int)2)) {
HXLINE( 185)							_hx_tmp17 = (int)1;
            						}
            						else {
HXLINE( 185)							_hx_tmp17 = (int)0;
            						}
HXDLIN( 185)						gl->vertexAttrib3f(this->index,_hx_tmp15,_hx_tmp16,_hx_tmp17);
HXDLIN( 185)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)3) ){
HXLINE( 186)						Float _hx_tmp18;
HXDLIN( 186)						if (boolValue->__get((int)0)) {
HXLINE( 186)							_hx_tmp18 = (int)1;
            						}
            						else {
HXLINE( 186)							_hx_tmp18 = (int)0;
            						}
HXDLIN( 186)						Float _hx_tmp19;
HXDLIN( 186)						if (boolValue->__get((int)1)) {
HXLINE( 186)							_hx_tmp19 = (int)1;
            						}
            						else {
HXLINE( 186)							_hx_tmp19 = (int)0;
            						}
HXDLIN( 186)						Float _hx_tmp20;
HXDLIN( 186)						if (boolValue->__get((int)2)) {
HXLINE( 186)							_hx_tmp20 = (int)1;
            						}
            						else {
HXLINE( 186)							_hx_tmp20 = (int)0;
            						}
HXDLIN( 186)						Float _hx_tmp21;
HXDLIN( 186)						if (boolValue->__get((int)3)) {
HXLINE( 186)							_hx_tmp21 = (int)1;
            						}
            						else {
HXLINE( 186)							_hx_tmp21 = (int)0;
            						}
HXDLIN( 186)						gl->vertexAttrib4f(this->index,_hx_tmp18,_hx_tmp19,_hx_tmp20,_hx_tmp21);
HXDLIN( 186)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)4) ){
HXLINE( 187)						gl->vertexAttrib1f(this->index,floatValue->__get((int)0));
HXDLIN( 187)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)5) ){
HXLINE( 188)						gl->vertexAttrib2f(this->index,floatValue->__get((int)0),floatValue->__get((int)1));
HXDLIN( 188)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)6) ){
HXLINE( 189)						gl->vertexAttrib3f(this->index,floatValue->__get((int)0),floatValue->__get((int)1),floatValue->__get((int)2));
HXDLIN( 189)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)7) ){
HXLINE( 190)						gl->vertexAttrib4f(this->index,floatValue->__get((int)0),floatValue->__get((int)1),floatValue->__get((int)2),floatValue->__get((int)3));
HXDLIN( 190)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)8) ){
HXLINE( 207)						gl->vertexAttrib1f(this->index,intValue->__get((int)0));
HXDLIN( 207)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)9) ){
HXLINE( 208)						gl->vertexAttrib2f(this->index,intValue->__get((int)0),intValue->__get((int)1));
HXDLIN( 208)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)10) ){
HXLINE( 209)						gl->vertexAttrib3f(this->index,intValue->__get((int)0),intValue->__get((int)1),intValue->__get((int)2));
HXDLIN( 209)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)11) ){
HXLINE( 210)						gl->vertexAttrib4f(this->index,intValue->__get((int)0),intValue->__get((int)1),intValue->__get((int)2),intValue->__get((int)3));
HXDLIN( 210)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)12) ){
HXLINE( 193)						int _g10 = (int)0;
HXDLIN( 193)						while((_g10 < (int)2)){
HXLINE( 193)							_g10 = (_g10 + (int)1);
HXDLIN( 193)							int i7 = (_g10 - (int)1);
HXLINE( 194)							gl->vertexAttrib2f(( (int)((this->index + i7)) ),floatValue->__get((i7 * (int)2)),floatValue->__get(((i7 * (int)2) + (int)1)));
            						}
HXLINE( 193)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)16) ){
HXLINE( 198)						int _g12 = (int)0;
HXDLIN( 198)						while((_g12 < (int)3)){
HXLINE( 198)							_g12 = (_g12 + (int)1);
HXDLIN( 198)							int i8 = (_g12 - (int)1);
HXLINE( 199)							gl->vertexAttrib3f(( (int)((this->index + i8)) ),floatValue->__get((i8 * (int)3)),floatValue->__get(((i8 * (int)3) + (int)1)),floatValue->__get(((i8 * (int)3) + (int)2)));
            						}
HXLINE( 198)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_2==(int)20) ){
HXLINE( 203)						int _g13 = (int)0;
HXDLIN( 203)						while((_g13 < (int)4)){
HXLINE( 203)							_g13 = (_g13 + (int)1);
HXDLIN( 203)							int i9 = (_g13 - (int)1);
HXLINE( 204)							gl->vertexAttrib4f(( (int)((this->index + i9)) ),floatValue->__get((i9 * (int)4)),floatValue->__get(((i9 * (int)4) + (int)1)),floatValue->__get(((i9 * (int)4) + (int)2)),floatValue->__get(((i9 * (int)4) + (int)3)));
            						}
HXLINE( 203)						goto _hx_goto_12;
            					}
            					/* default */{
            					}
            					_hx_goto_12:;
            				}
            				else {
HXLINE( 217)					 ::Dynamic _g14 = this->type;
HXDLIN( 217)					 ::Dynamic _hx_switch_3 = _g14;
            					if (  (_hx_switch_3==(int)1) ||  (_hx_switch_3==(int)5) ||  (_hx_switch_3==(int)9) ){
HXLINE( 220)						gl->vertexAttrib2f(this->index,(int)0,(int)0);
HXDLIN( 220)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)3) ||  (_hx_switch_3==(int)7) ||  (_hx_switch_3==(int)11) ){
HXLINE( 222)						gl->vertexAttrib4f(this->index,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 222)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)0) ||  (_hx_switch_3==(int)4) ||  (_hx_switch_3==(int)8) ){
HXLINE( 219)						gl->vertexAttrib1f(this->index,(int)0);
HXDLIN( 219)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)2) ||  (_hx_switch_3==(int)6) ||  (_hx_switch_3==(int)10) ){
HXLINE( 221)						gl->vertexAttrib3f(this->index,(int)0,(int)0,(int)0);
HXDLIN( 221)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)12) ){
HXLINE( 225)						int _g15 = (int)0;
HXDLIN( 225)						while((_g15 < (int)2)){
HXLINE( 225)							_g15 = (_g15 + (int)1);
HXDLIN( 225)							int i10 = (_g15 - (int)1);
HXLINE( 226)							gl->vertexAttrib2f(( (int)((this->index + i10)) ),(int)0,(int)0);
            						}
HXLINE( 225)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)16) ){
HXLINE( 230)						int _g16 = (int)0;
HXDLIN( 230)						while((_g16 < (int)3)){
HXLINE( 230)							_g16 = (_g16 + (int)1);
HXDLIN( 230)							int i11 = (_g16 - (int)1);
HXLINE( 231)							gl->vertexAttrib3f(( (int)((this->index + i11)) ),(int)0,(int)0,(int)0);
            						}
HXLINE( 230)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_3==(int)20) ){
HXLINE( 235)						int _g17 = (int)0;
HXDLIN( 235)						while((_g17 < (int)4)){
HXLINE( 235)							_g17 = (_g17 + (int)1);
HXDLIN( 235)							int i12 = (_g17 - (int)1);
HXLINE( 236)							gl->vertexAttrib4f(( (int)((this->index + i12)) ),(int)0,(int)0,(int)0,(int)0);
            						}
HXLINE( 235)						goto _hx_goto_16;
            					}
            					/* default */{
            					}
            					_hx_goto_16:;
            				}
            			}
            			else {
HXLINE( 247)				int _g18 = (int)0;
HXDLIN( 247)				int _g19 = this->_hx___arrayLength;
HXDLIN( 247)				while((_g18 < _g19)){
HXLINE( 247)					_g18 = (_g18 + (int)1);
HXDLIN( 247)					int i13 = (_g18 - (int)1);
HXLINE( 248)					gl->enableVertexAttribArray(( (int)((this->index + i13)) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ShaderParameter_Bool_obj,_hx___updateGL,(void))

void ShaderParameter_Bool_obj::_hx___updateGLFromBuffer( ::openfl::display3D::Context3D context, ::lime::utils::ArrayBufferView buffer,int position,int length,int bufferOffset){
            	HX_STACKFRAME(&_hx_pos_abe7b394d2d5e035_259___updateGLFromBuffer)
HXLINE( 262)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE( 264)		if (this->_hx___isUniform) {
HXLINE( 266)			if ((length >= this->__length)) {
HXLINE( 268)				 ::Dynamic _g = this->type;
HXDLIN( 268)				 ::Dynamic _hx_switch_0 = _g;
            				if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)9) ){
HXLINE( 271)					int location = this->index;
HXDLIN( 271)					int buffer1 = buffer->byteOffset;
HXDLIN( 271)					int v0 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer1 + (position * (int)4))));
HXDLIN( 271)					int buffer2 = buffer->byteOffset;
HXDLIN( 271)					gl->uniform2i(location,v0,::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer2 + ((position + (int)1) * (int)4)))));
HXDLIN( 271)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)11) ){
HXLINE( 273)					int location1 = this->index;
HXDLIN( 273)					int buffer3 = buffer->byteOffset;
HXDLIN( 273)					int v01 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer3 + (position * (int)4))));
HXDLIN( 273)					int buffer4 = buffer->byteOffset;
HXDLIN( 273)					int v1 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer4 + ((position + (int)1) * (int)4))));
HXDLIN( 273)					int buffer5 = buffer->byteOffset;
HXDLIN( 273)					int v2 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer5 + ((position + (int)2) * (int)4))));
HXDLIN( 273)					int buffer6 = buffer->byteOffset;
HXDLIN( 273)					gl->uniform4i(location1,v01,v1,v2,::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer6 + ((position + (int)3) * (int)4)))));
HXDLIN( 273)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)4) ){
HXLINE( 274)					int location2 = this->index;
HXDLIN( 274)					int buffer7 = buffer->byteOffset;
HXDLIN( 274)					gl->uniform1f(location2,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer7 + (position * (int)4))));
HXDLIN( 274)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)5) ){
HXLINE( 275)					int location3 = this->index;
HXDLIN( 275)					int buffer8 = buffer->byteOffset;
HXDLIN( 275)					Float v02 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer8 + (position * (int)4)));
HXDLIN( 275)					int buffer9 = buffer->byteOffset;
HXDLIN( 275)					gl->uniform2f(location3,v02,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer9 + ((position + (int)1) * (int)4))));
HXDLIN( 275)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)6) ){
HXLINE( 276)					int location4 = this->index;
HXDLIN( 276)					int buffer10 = buffer->byteOffset;
HXDLIN( 276)					Float v03 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer10 + (position * (int)4)));
HXDLIN( 276)					int buffer11 = buffer->byteOffset;
HXDLIN( 276)					Float v11 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer11 + ((position + (int)1) * (int)4)));
HXDLIN( 276)					int buffer12 = buffer->byteOffset;
HXDLIN( 276)					gl->uniform3f(location4,v03,v11,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer12 + ((position + (int)2) * (int)4))));
HXDLIN( 276)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)7) ){
HXLINE( 277)					int location5 = this->index;
HXDLIN( 277)					int buffer13 = buffer->byteOffset;
HXDLIN( 277)					Float v04 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer13 + (position * (int)4)));
HXDLIN( 277)					int buffer14 = buffer->byteOffset;
HXDLIN( 277)					Float v12 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer14 + ((position + (int)1) * (int)4)));
HXDLIN( 277)					int buffer15 = buffer->byteOffset;
HXDLIN( 277)					Float v21 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer15 + ((position + (int)2) * (int)4)));
HXDLIN( 277)					int buffer16 = buffer->byteOffset;
HXDLIN( 277)					gl->uniform4f(location5,v04,v12,v21,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer16 + ((position + (int)3) * (int)4))));
HXDLIN( 277)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)8) ){
HXLINE( 270)					int location6 = this->index;
HXDLIN( 270)					int buffer17 = buffer->byteOffset;
HXDLIN( 270)					gl->uniform1i(location6,::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer17 + (position * (int)4)))));
HXDLIN( 270)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)10) ){
HXLINE( 272)					int location7 = this->index;
HXDLIN( 272)					int buffer18 = buffer->byteOffset;
HXDLIN( 272)					int v05 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer18 + (position * (int)4))));
HXDLIN( 272)					int buffer19 = buffer->byteOffset;
HXDLIN( 272)					int v13 = ::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer19 + ((position + (int)1) * (int)4))));
HXDLIN( 272)					int buffer20 = buffer->byteOffset;
HXDLIN( 272)					gl->uniform3i(location7,v05,v13,::Std_obj::_hx_int(::__hxcpp_memory_get_float(buffer->buffer->b,(buffer20 + ((position + (int)2) * (int)4)))));
HXDLIN( 272)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)12) ){
HXLINE( 280)					{
HXLINE( 280)						int _g1 = (int)0;
HXDLIN( 280)						while((_g1 < (int)4)){
HXLINE( 280)							_g1 = (_g1 + (int)1);
HXDLIN( 280)							int i = (_g1 - (int)1);
HXLINE( 281)							{
HXLINE( 281)								 ::lime::utils::ArrayBufferView this1 = this->_hx___uniformMatrix;
HXDLIN( 281)								int buffer21 = buffer->byteOffset;
HXDLIN( 281)								Float val = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer21 + ((position + i) * (int)4)));
HXDLIN( 281)								{
HXLINE( 281)									int this2 = this1->byteOffset;
HXDLIN( 281)									::__hxcpp_memory_set_float(this1->buffer->b,(this2 + (i * (int)4)),val);
            								}
            							}
            						}
            					}
HXLINE( 283)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix2fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 279)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)16) ){
HXLINE( 290)					{
HXLINE( 290)						int _g2 = (int)0;
HXDLIN( 290)						while((_g2 < (int)9)){
HXLINE( 290)							_g2 = (_g2 + (int)1);
HXDLIN( 290)							int i1 = (_g2 - (int)1);
HXLINE( 291)							{
HXLINE( 291)								 ::lime::utils::ArrayBufferView this3 = this->_hx___uniformMatrix;
HXDLIN( 291)								int buffer22 = buffer->byteOffset;
HXDLIN( 291)								Float val1 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer22 + ((position + i1) * (int)4)));
HXDLIN( 291)								{
HXLINE( 291)									int this4 = this3->byteOffset;
HXDLIN( 291)									::__hxcpp_memory_set_float(this3->buffer->b,(this4 + (i1 * (int)4)),val1);
            								}
            							}
            						}
            					}
HXLINE( 293)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix3fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 289)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_0==(int)20) ){
HXLINE( 300)					{
HXLINE( 300)						int _g3 = (int)0;
HXDLIN( 300)						while((_g3 < (int)16)){
HXLINE( 300)							_g3 = (_g3 + (int)1);
HXDLIN( 300)							int i2 = (_g3 - (int)1);
HXLINE( 301)							{
HXLINE( 301)								 ::lime::utils::ArrayBufferView this5 = this->_hx___uniformMatrix;
HXDLIN( 301)								int buffer23 = buffer->byteOffset;
HXDLIN( 301)								Float val2 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer23 + ((position + i2) * (int)4)));
HXDLIN( 301)								{
HXLINE( 301)									int this6 = this5->byteOffset;
HXDLIN( 301)									::__hxcpp_memory_set_float(this5->buffer->b,(this6 + (i2 * (int)4)),val2);
            								}
            							}
            						}
            					}
HXLINE( 303)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix4fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 299)					goto _hx_goto_22;
            				}
            				/* default */{
            				}
            				_hx_goto_22:;
            			}
            		}
            		else {
HXLINE( 313)			bool _hx_tmp;
HXDLIN( 313)			if (!(this->_hx___internal)) {
HXLINE( 313)				if ((length != (int)0)) {
HXLINE( 313)					_hx_tmp = (length == this->__length);
            				}
            				else {
HXLINE( 313)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 313)				_hx_tmp = false;
            			}
HXDLIN( 313)			if (_hx_tmp) {
HXLINE( 315)				{
HXLINE( 315)					int _g11 = (int)0;
HXDLIN( 315)					int _g4 = this->_hx___arrayLength;
HXDLIN( 315)					while((_g11 < _g4)){
HXLINE( 315)						_g11 = (_g11 + (int)1);
HXDLIN( 315)						int i3 = (_g11 - (int)1);
HXLINE( 317)						gl->disableVertexAttribArray(( (int)((this->index + i3)) ));
            					}
            				}
HXLINE( 321)				if ((length > (int)0)) {
HXLINE( 323)					 ::Dynamic _g5 = this->type;
HXDLIN( 323)					 ::Dynamic _hx_switch_1 = _g5;
            					if (  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)5) ||  (_hx_switch_1==(int)9) ){
HXLINE( 326)						int indx = this->index;
HXDLIN( 326)						int buffer24 = buffer->byteOffset;
HXDLIN( 326)						Float x = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer24 + (position * (int)4)));
HXDLIN( 326)						int buffer25 = buffer->byteOffset;
HXDLIN( 326)						gl->vertexAttrib2f(indx,x,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer25 + ((position + (int)1) * (int)4))));
HXDLIN( 326)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)3) ||  (_hx_switch_1==(int)7) ||  (_hx_switch_1==(int)11) ){
HXLINE( 328)						int indx1 = this->index;
HXDLIN( 328)						int buffer26 = buffer->byteOffset;
HXDLIN( 328)						Float x1 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer26 + (position * (int)4)));
HXDLIN( 328)						int buffer27 = buffer->byteOffset;
HXDLIN( 328)						Float y = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer27 + ((position + (int)1) * (int)4)));
HXDLIN( 328)						int buffer28 = buffer->byteOffset;
HXDLIN( 328)						Float z = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer28 + ((position + (int)2) * (int)4)));
HXDLIN( 328)						int buffer29 = buffer->byteOffset;
HXDLIN( 328)						gl->vertexAttrib4f(indx1,x1,y,z,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer29 + ((position + (int)3) * (int)4))));
HXDLIN( 328)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)4) ||  (_hx_switch_1==(int)8) ){
HXLINE( 325)						int indx2 = this->index;
HXDLIN( 325)						int buffer30 = buffer->byteOffset;
HXDLIN( 325)						gl->vertexAttrib1f(indx2,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer30 + (position * (int)4))));
HXDLIN( 325)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)2) ||  (_hx_switch_1==(int)6) ||  (_hx_switch_1==(int)10) ){
HXLINE( 327)						int indx3 = this->index;
HXDLIN( 327)						int buffer31 = buffer->byteOffset;
HXDLIN( 327)						Float x2 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer31 + (position * (int)4)));
HXDLIN( 327)						int buffer32 = buffer->byteOffset;
HXDLIN( 327)						Float y1 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer32 + ((position + (int)1) * (int)4)));
HXDLIN( 327)						int buffer33 = buffer->byteOffset;
HXDLIN( 327)						gl->vertexAttrib3f(indx3,x2,y1,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer33 + ((position + (int)2) * (int)4))));
HXDLIN( 327)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)12) ){
HXLINE( 331)						int _g6 = (int)0;
HXDLIN( 331)						while((_g6 < (int)2)){
HXLINE( 331)							_g6 = (_g6 + (int)1);
HXDLIN( 331)							int i4 = (_g6 - (int)1);
HXLINE( 332)							{
HXLINE( 332)								int indx4 = ( (int)((this->index + i4)) );
HXDLIN( 332)								int buffer34 = buffer->byteOffset;
HXDLIN( 332)								Float x3 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer34 + ((position + (i4 * (int)2)) * (int)4)));
HXDLIN( 332)								int buffer35 = buffer->byteOffset;
HXDLIN( 332)								gl->vertexAttrib2f(indx4,x3,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer35 + (((position + (i4 * (int)2)) + (int)1) * (int)4))));
            							}
            						}
HXLINE( 331)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)16) ){
HXLINE( 336)						int _g7 = (int)0;
HXDLIN( 336)						while((_g7 < (int)3)){
HXLINE( 336)							_g7 = (_g7 + (int)1);
HXDLIN( 336)							int i5 = (_g7 - (int)1);
HXLINE( 337)							{
HXLINE( 337)								int indx5 = ( (int)((this->index + i5)) );
HXDLIN( 337)								int buffer36 = buffer->byteOffset;
HXDLIN( 337)								Float x4 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer36 + ((position + (i5 * (int)3)) * (int)4)));
HXDLIN( 337)								int buffer37 = buffer->byteOffset;
HXDLIN( 337)								Float y2 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer37 + (((position + (i5 * (int)3)) + (int)1) * (int)4)));
HXDLIN( 337)								int buffer38 = buffer->byteOffset;
HXDLIN( 337)								gl->vertexAttrib3f(indx5,x4,y2,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer38 + (((position + (i5 * (int)3)) + (int)2) * (int)4))));
            							}
            						}
HXLINE( 336)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_1==(int)20) ){
HXLINE( 341)						int _g8 = (int)0;
HXDLIN( 341)						while((_g8 < (int)4)){
HXLINE( 341)							_g8 = (_g8 + (int)1);
HXDLIN( 341)							int i6 = (_g8 - (int)1);
HXLINE( 342)							{
HXLINE( 342)								int indx6 = ( (int)((this->index + i6)) );
HXDLIN( 342)								int buffer39 = buffer->byteOffset;
HXDLIN( 342)								Float x5 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer39 + ((position + (i6 * (int)4)) * (int)4)));
HXDLIN( 342)								int buffer40 = buffer->byteOffset;
HXDLIN( 342)								Float y3 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer40 + (((position + (i6 * (int)4)) + (int)1) * (int)4)));
HXDLIN( 342)								int buffer41 = buffer->byteOffset;
HXDLIN( 342)								Float z1 = ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer41 + (((position + (i6 * (int)4)) + (int)2) * (int)4)));
HXDLIN( 342)								int buffer42 = buffer->byteOffset;
HXDLIN( 342)								gl->vertexAttrib4f(indx6,x5,y3,z1,::__hxcpp_memory_get_float(buffer->buffer->b,(buffer42 + (((position + (i6 * (int)4)) + (int)3) * (int)4))));
            							}
            						}
HXLINE( 341)						goto _hx_goto_27;
            					}
            					/* default */{
            					}
            					_hx_goto_27:;
            				}
            				else {
HXLINE( 351)					 ::Dynamic _g9 = this->type;
HXDLIN( 351)					 ::Dynamic _hx_switch_2 = _g9;
            					if (  (_hx_switch_2==(int)1) ||  (_hx_switch_2==(int)5) ||  (_hx_switch_2==(int)9) ){
HXLINE( 354)						gl->vertexAttrib2f(this->index,(int)0,(int)0);
HXDLIN( 354)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)3) ||  (_hx_switch_2==(int)7) ||  (_hx_switch_2==(int)11) ){
HXLINE( 356)						gl->vertexAttrib4f(this->index,(int)0,(int)0,(int)0,(int)0);
HXDLIN( 356)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)0) ||  (_hx_switch_2==(int)4) ||  (_hx_switch_2==(int)8) ){
HXLINE( 353)						gl->vertexAttrib1f(this->index,(int)0);
HXDLIN( 353)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)2) ||  (_hx_switch_2==(int)6) ||  (_hx_switch_2==(int)10) ){
HXLINE( 355)						gl->vertexAttrib3f(this->index,(int)0,(int)0,(int)0);
HXDLIN( 355)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)12) ){
HXLINE( 359)						int _g10 = (int)0;
HXDLIN( 359)						while((_g10 < (int)2)){
HXLINE( 359)							_g10 = (_g10 + (int)1);
HXDLIN( 359)							int i7 = (_g10 - (int)1);
HXLINE( 360)							gl->vertexAttrib2f(( (int)((this->index + i7)) ),(int)0,(int)0);
            						}
HXLINE( 359)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)16) ){
HXLINE( 364)						int _g12 = (int)0;
HXDLIN( 364)						while((_g12 < (int)3)){
HXLINE( 364)							_g12 = (_g12 + (int)1);
HXDLIN( 364)							int i8 = (_g12 - (int)1);
HXLINE( 365)							gl->vertexAttrib3f(( (int)((this->index + i8)) ),(int)0,(int)0,(int)0);
            						}
HXLINE( 364)						goto _hx_goto_31;
            					}
            					if (  (_hx_switch_2==(int)20) ){
HXLINE( 369)						int _g13 = (int)0;
HXDLIN( 369)						while((_g13 < (int)4)){
HXLINE( 369)							_g13 = (_g13 + (int)1);
HXDLIN( 369)							int i9 = (_g13 - (int)1);
HXLINE( 370)							gl->vertexAttrib4f(( (int)((this->index + i9)) ),(int)0,(int)0,(int)0,(int)0);
            						}
HXLINE( 369)						goto _hx_goto_31;
            					}
            					/* default */{
            					}
            					_hx_goto_31:;
            				}
            			}
            			else {
HXLINE( 381)				int type = gl->FLOAT;
HXLINE( 382)				if (this->_hx___isBool) {
HXLINE( 382)					type = gl->INT;
            				}
            				else {
HXLINE( 383)					if (this->_hx___isInt) {
HXLINE( 383)						type = gl->INT;
            					}
            				}
HXLINE( 385)				{
HXLINE( 385)					int _g14 = (int)0;
HXDLIN( 385)					int _g15 = this->_hx___arrayLength;
HXDLIN( 385)					while((_g14 < _g15)){
HXLINE( 385)						_g14 = (_g14 + (int)1);
HXDLIN( 385)						int i10 = (_g14 - (int)1);
HXLINE( 387)						gl->enableVertexAttribArray(( (int)((this->index + i10)) ));
            					}
            				}
HXLINE( 391)				if ((length > (int)0)) {
HXLINE( 393)					int _g16 = (int)0;
HXDLIN( 393)					int _g17 = this->_hx___arrayLength;
HXDLIN( 393)					while((_g16 < _g17)){
HXLINE( 393)						_g16 = (_g16 + (int)1);
HXDLIN( 393)						int i11 = (_g16 - (int)1);
HXLINE( 395)						{
HXLINE( 395)							int indx7 = ( (int)((this->index + i11)) );
HXDLIN( 395)							int size = this->__length;
HXDLIN( 395)							int stride = (this->__length * (int)4);
HXDLIN( 395)							int offset = (position + (bufferOffset * this->__length));
HXDLIN( 395)							gl->vertexAttribPointer(indx7,size,type,false,stride,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(((offset + (i11 * this->_hx___arrayLength)) * (int)4)));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(ShaderParameter_Bool_obj,_hx___updateGLFromBuffer,(void))

::String ShaderParameter_Bool_obj::set_name(::String value){
            	HX_STACKFRAME(&_hx_pos_abe7b394d2d5e035_416_set_name)
HXLINE( 418)		this->_hx___internal = ::StringTools_obj::startsWith(value,HX_("openfl_",cf,ba,42,40));
HXLINE( 419)		return (this->name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderParameter_Bool_obj,set_name,return )


hx::ObjectPtr< ShaderParameter_Bool_obj > ShaderParameter_Bool_obj::__new() {
	hx::ObjectPtr< ShaderParameter_Bool_obj > __this = new ShaderParameter_Bool_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ShaderParameter_Bool_obj > ShaderParameter_Bool_obj::__alloc(hx::Ctx *_hx_ctx) {
	ShaderParameter_Bool_obj *__this = (ShaderParameter_Bool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ShaderParameter_Bool_obj), true, "openfl.display.ShaderParameter_Bool"));
	*(void **)__this = ShaderParameter_Bool_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ShaderParameter_Bool_obj::ShaderParameter_Bool_obj()
{
}

void ShaderParameter_Bool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ShaderParameter_Bool);
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(_hx___arrayLength,"__arrayLength");
	HX_MARK_MEMBER_NAME(_hx___internal,"__internal");
	HX_MARK_MEMBER_NAME(_hx___isBool,"__isBool");
	HX_MARK_MEMBER_NAME(_hx___isFloat,"__isFloat");
	HX_MARK_MEMBER_NAME(_hx___isInt,"__isInt");
	HX_MARK_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_MARK_MEMBER_NAME(__length,"__length");
	HX_MARK_MEMBER_NAME(_hx___uniformMatrix,"__uniformMatrix");
	HX_MARK_MEMBER_NAME(_hx___useArray,"__useArray");
	HX_MARK_END_CLASS();
}

void ShaderParameter_Bool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(_hx___arrayLength,"__arrayLength");
	HX_VISIT_MEMBER_NAME(_hx___internal,"__internal");
	HX_VISIT_MEMBER_NAME(_hx___isBool,"__isBool");
	HX_VISIT_MEMBER_NAME(_hx___isFloat,"__isFloat");
	HX_VISIT_MEMBER_NAME(_hx___isInt,"__isInt");
	HX_VISIT_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_VISIT_MEMBER_NAME(__length,"__length");
	HX_VISIT_MEMBER_NAME(_hx___uniformMatrix,"__uniformMatrix");
	HX_VISIT_MEMBER_NAME(_hx___useArray,"__useArray");
}

hx::Val ShaderParameter_Bool_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__isInt") ) { return hx::Val( _hx___isInt ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__isBool") ) { return hx::Val( _hx___isBool ); }
		if (HX_FIELD_EQ(inName,"__length") ) { return hx::Val( __length ); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isFloat") ) { return hx::Val( _hx___isFloat ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__internal") ) { return hx::Val( _hx___internal ); }
		if (HX_FIELD_EQ(inName,"__useArray") ) { return hx::Val( _hx___useArray ); }
		if (HX_FIELD_EQ(inName,"__updateGL") ) { return hx::Val( _hx___updateGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { return hx::Val( _hx___isUniform ); }
		if (HX_FIELD_EQ(inName,"__disableGL") ) { return hx::Val( _hx___disableGL_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__arrayLength") ) { return hx::Val( _hx___arrayLength ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__uniformMatrix") ) { return hx::Val( _hx___uniformMatrix ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__updateGLFromBuffer") ) { return hx::Val( _hx___updateGLFromBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ShaderParameter_Bool_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_name(inValue.Cast< ::String >()) );name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__isInt") ) { _hx___isInt=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__isBool") ) { _hx___isBool=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__length") ) { __length=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isFloat") ) { _hx___isFloat=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__internal") ) { _hx___internal=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useArray") ) { _hx___useArray=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { _hx___isUniform=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__arrayLength") ) { _hx___arrayLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__uniformMatrix") ) { _hx___uniformMatrix=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ShaderParameter_Bool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("__arrayLength","\x3f","\x70","\xc7","\xd4"));
	outFields->push(HX_HCSTRING("__internal","\x5d","\xda","\xae","\xcb"));
	outFields->push(HX_HCSTRING("__isBool","\x54","\xb4","\xb1","\x06"));
	outFields->push(HX_HCSTRING("__isFloat","\x32","\xba","\x6a","\x20"));
	outFields->push(HX_HCSTRING("__isInt","\x05","\x90","\xac","\x2b"));
	outFields->push(HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7"));
	outFields->push(HX_HCSTRING("__length","\x06","\x00","\x37","\x47"));
	outFields->push(HX_HCSTRING("__uniformMatrix","\x75","\x03","\xf6","\xb5"));
	outFields->push(HX_HCSTRING("__useArray","\xf2","\x42","\x33","\x90"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ShaderParameter_Bool_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ShaderParameter_Bool_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsString,(int)offsetof(ShaderParameter_Bool_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ShaderParameter_Bool_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(ShaderParameter_Bool_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsInt,(int)offsetof(ShaderParameter_Bool_obj,_hx___arrayLength),HX_HCSTRING("__arrayLength","\x3f","\x70","\xc7","\xd4")},
	{hx::fsBool,(int)offsetof(ShaderParameter_Bool_obj,_hx___internal),HX_HCSTRING("__internal","\x5d","\xda","\xae","\xcb")},
	{hx::fsBool,(int)offsetof(ShaderParameter_Bool_obj,_hx___isBool),HX_HCSTRING("__isBool","\x54","\xb4","\xb1","\x06")},
	{hx::fsBool,(int)offsetof(ShaderParameter_Bool_obj,_hx___isFloat),HX_HCSTRING("__isFloat","\x32","\xba","\x6a","\x20")},
	{hx::fsBool,(int)offsetof(ShaderParameter_Bool_obj,_hx___isInt),HX_HCSTRING("__isInt","\x05","\x90","\xac","\x2b")},
	{hx::fsBool,(int)offsetof(ShaderParameter_Bool_obj,_hx___isUniform),HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7")},
	{hx::fsInt,(int)offsetof(ShaderParameter_Bool_obj,__length),HX_HCSTRING("__length","\x06","\x00","\x37","\x47")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(ShaderParameter_Bool_obj,_hx___uniformMatrix),HX_HCSTRING("__uniformMatrix","\x75","\x03","\xf6","\xb5")},
	{hx::fsBool,(int)offsetof(ShaderParameter_Bool_obj,_hx___useArray),HX_HCSTRING("__useArray","\xf2","\x42","\x33","\x90")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ShaderParameter_Bool_obj_sStaticStorageInfo = 0;
#endif

static ::String ShaderParameter_Bool_obj_sMemberFields[] = {
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("__arrayLength","\x3f","\x70","\xc7","\xd4"),
	HX_HCSTRING("__internal","\x5d","\xda","\xae","\xcb"),
	HX_HCSTRING("__isBool","\x54","\xb4","\xb1","\x06"),
	HX_HCSTRING("__isFloat","\x32","\xba","\x6a","\x20"),
	HX_HCSTRING("__isInt","\x05","\x90","\xac","\x2b"),
	HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7"),
	HX_HCSTRING("__length","\x06","\x00","\x37","\x47"),
	HX_HCSTRING("__uniformMatrix","\x75","\x03","\xf6","\xb5"),
	HX_HCSTRING("__useArray","\xf2","\x42","\x33","\x90"),
	HX_HCSTRING("__disableGL","\xed","\x3a","\xe1","\x35"),
	HX_HCSTRING("__updateGL","\x8e","\x8b","\x32","\x1b"),
	HX_HCSTRING("__updateGLFromBuffer","\x38","\x8f","\xd7","\x17"),
	HX_HCSTRING("set_name","\x48","\x87","\x17","\x77"),
	::String(null()) };

static void ShaderParameter_Bool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ShaderParameter_Bool_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ShaderParameter_Bool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ShaderParameter_Bool_obj::__mClass,"__mClass");
};

#endif

hx::Class ShaderParameter_Bool_obj::__mClass;

void ShaderParameter_Bool_obj::__register()
{
	hx::Object *dummy = new ShaderParameter_Bool_obj;
	ShaderParameter_Bool_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.ShaderParameter_Bool","\x4f","\x81","\x23","\x99");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ShaderParameter_Bool_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ShaderParameter_Bool_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ShaderParameter_Bool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ShaderParameter_Bool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShaderParameter_Bool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShaderParameter_Bool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
