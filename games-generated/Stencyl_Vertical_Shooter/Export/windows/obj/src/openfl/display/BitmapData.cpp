// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageFileFormat
#include <lime/graphics/ImageFileFormat.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DMaskShader
#include <openfl/_internal/renderer/context3D/Context3DMaskShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DState
#include <openfl/_internal/renderer/context3D/Context3DState.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_AbstractNoise
#include <openfl/_internal/utils/AbstractNoise.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_PerlinNoise
#include <openfl/_internal/utils/PerlinNoise.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectShader
#include <openfl/display/DisplayObjectShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_JPEGEncoderOptions
#include <openfl/display/JPEGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__Endian_Endian_Impl_
#include <openfl/utils/_Endian/Endian_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7567b6ca69cedca_267_new,"openfl.display.BitmapData","new",0x7e3e4115,"openfl.display.BitmapData.new","openfl/display/BitmapData.hx",267,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_377_applyFilter,"openfl.display.BitmapData","applyFilter",0xfbb98d7b,"openfl.display.BitmapData.applyFilter","openfl/display/BitmapData.hx",377,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_426_clone,"openfl.display.BitmapData","clone",0xea52db52,"openfl.display.BitmapData.clone","openfl/display/BitmapData.hx",426,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_475_colorTransform,"openfl.display.BitmapData","colorTransform",0xbfe3e8f4,"openfl.display.BitmapData.colorTransform","openfl/display/BitmapData.hx",475,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_496_compare,"openfl.display.BitmapData","compare",0x56d287da,"openfl.display.BitmapData.compare","openfl/display/BitmapData.hx",496,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_669_copyChannel,"openfl.display.BitmapData","copyChannel",0x5d702b43,"openfl.display.BitmapData.copyChannel","openfl/display/BitmapData.hx",669,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_739_copyPixels,"openfl.display.BitmapData","copyPixels",0x385c94ad,"openfl.display.BitmapData.copyPixels","openfl/display/BitmapData.hx",739,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_779_dispose,"openfl.display.BitmapData","dispose",0x8eb5efd4,"openfl.display.BitmapData.dispose","openfl/display/BitmapData.hx",779,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_835_disposeImage,"openfl.display.BitmapData","disposeImage",0x60a6bee7,"openfl.display.BitmapData.disposeImage","openfl/display/BitmapData.hx",835,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_912_draw,"openfl.display.BitmapData","draw",0xf1a859af,"openfl.display.BitmapData.draw","openfl/display/BitmapData.hx",912,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1061_drawWithQuality,"openfl.display.BitmapData","drawWithQuality",0xabf0f1ea,"openfl.display.BitmapData.drawWithQuality","openfl/display/BitmapData.hx",1061,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1066_encode,"openfl.display.BitmapData","encode",0x09c32081,"openfl.display.BitmapData.encode","openfl/display/BitmapData.hx",1066,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1118_fillRect,"openfl.display.BitmapData","fillRect",0x95912472,"openfl.display.BitmapData.fillRect","openfl/display/BitmapData.hx",1118,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1134_floodFill,"openfl.display.BitmapData","floodFill",0xed95e9d6,"openfl.display.BitmapData.floodFill","openfl/display/BitmapData.hx",1134,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1260_generateFilterRect,"openfl.display.BitmapData","generateFilterRect",0x1ef8cf7c,"openfl.display.BitmapData.generateFilterRect","openfl/display/BitmapData.hx",1260,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1265_getIndexBuffer,"openfl.display.BitmapData","getIndexBuffer",0x8fe8ca27,"openfl.display.BitmapData.getIndexBuffer","openfl/display/BitmapData.hx",1265,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1294_getVertexBuffer,"openfl.display.BitmapData","getVertexBuffer",0xd07f316f,"openfl.display.BitmapData.getVertexBuffer","openfl/display/BitmapData.hx",1294,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1497_getColorBoundsRect,"openfl.display.BitmapData","getColorBoundsRect",0x21495071,"openfl.display.BitmapData.getColorBoundsRect","openfl/display/BitmapData.hx",1497,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1541_getPixel,"openfl.display.BitmapData","getPixel",0x4b52b53b,"openfl.display.BitmapData.getPixel","openfl/display/BitmapData.hx",1541,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1575_getPixel32,"openfl.display.BitmapData","getPixel32",0xcd56e69a,"openfl.display.BitmapData.getPixel32","openfl/display/BitmapData.hx",1575,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1596_getPixels,"openfl.display.BitmapData","getPixels",0x9d0bded8,"openfl.display.BitmapData.getPixels","openfl/display/BitmapData.hx",1596,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1612_getSurface,"openfl.display.BitmapData","getSurface",0xa2992c22,"openfl.display.BitmapData.getSurface","openfl/display/BitmapData.hx",1612,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1631_getTexture,"openfl.display.BitmapData","getTexture",0xe4308ed0,"openfl.display.BitmapData.getTexture","openfl/display/BitmapData.hx",1631,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1722_getVector,"openfl.display.BitmapData","getVector",0xa7bfa06e,"openfl.display.BitmapData.getVector","openfl/display/BitmapData.hx",1722,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1739_histogram,"openfl.display.BitmapData","histogram",0xf93f4519,"openfl.display.BitmapData.histogram","openfl/display/BitmapData.hx",1739,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1756_hitTest,"openfl.display.BitmapData","hitTest",0xb5e8cf7a,"openfl.display.BitmapData.hitTest","openfl/display/BitmapData.hx",1756,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1957_lock,"openfl.display.BitmapData","lock",0xf6efc996,"openfl.display.BitmapData.lock","openfl/display/BitmapData.hx",1957,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1964_merge,"openfl.display.BitmapData","merge",0xa7b66aad,"openfl.display.BitmapData.merge","openfl/display/BitmapData.hx",1964,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2009_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",2009,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2002_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",2002,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2060_paletteMap,"openfl.display.BitmapData","paletteMap",0xfc19eecc,"openfl.display.BitmapData.paletteMap","openfl/display/BitmapData.hx",2060,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2160_perlinNoise,"openfl.display.BitmapData","perlinNoise",0xc682321b,"openfl.display.BitmapData.perlinNoise","openfl/display/BitmapData.hx",2160,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2179_scroll,"openfl.display.BitmapData","scroll",0x57440678,"openfl.display.BitmapData.scroll","openfl/display/BitmapData.hx",2179,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2204_setPixel,"openfl.display.BitmapData","setPixel",0xf9b00eaf,"openfl.display.BitmapData.setPixel","openfl/display/BitmapData.hx",2204,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2245_setPixel32,"openfl.display.BitmapData","setPixel32",0xd0d4850e,"openfl.display.BitmapData.setPixel32","openfl/display/BitmapData.hx",2245,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2274_setPixels,"openfl.display.BitmapData","setPixels",0x805ccae4,"openfl.display.BitmapData.setPixels","openfl/display/BitmapData.hx",2274,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2297_setVector,"openfl.display.BitmapData","setVector",0x8b108c7a,"openfl.display.BitmapData.setVector","openfl/display/BitmapData.hx",2297,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2362_threshold,"openfl.display.BitmapData","threshold",0xc8af2a20,"openfl.display.BitmapData.threshold","openfl/display/BitmapData.hx",2362,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2387_unlock,"openfl.display.BitmapData","unlock",0x756bd12f,"openfl.display.BitmapData.unlock","openfl/display/BitmapData.hx",2387,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2394___applyAlpha,"openfl.display.BitmapData","__applyAlpha",0x0369eedb,"openfl.display.BitmapData.__applyAlpha","openfl/display/BitmapData.hx",2394,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2414___drawCairo,"openfl.display.BitmapData","__drawCairo",0x71da5c79,"openfl.display.BitmapData.__drawCairo","openfl/display/BitmapData.hx",2414,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2442___drawCanvas,"openfl.display.BitmapData","__drawCanvas",0x30879bc7,"openfl.display.BitmapData.__drawCanvas","openfl/display/BitmapData.hx",2442,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2462___drawGL,"openfl.display.BitmapData","__drawGL",0xb0ddbd74,"openfl.display.BitmapData.__drawGL","openfl/display/BitmapData.hx",2462,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2488___fillRect,"openfl.display.BitmapData","__fillRect",0x05dff852,"openfl.display.BitmapData.__fillRect","openfl/display/BitmapData.hx",2488,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2547___fromBase64,"openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",2547,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2557___fromBytes,"openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",2557,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2573___fromFile,"openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",2573,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2586___fromImage,"openfl.display.BitmapData","__fromImage",0xdaa80026,"openfl.display.BitmapData.__fromImage","openfl/display/BitmapData.hx",2586,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2612___fromSymbol,"openfl.display.BitmapData","__fromSymbol",0x68a3802d,"openfl.display.BitmapData.__fromSymbol","openfl/display/BitmapData.hx",2612,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2679___getBounds,"openfl.display.BitmapData","__getBounds",0x4b2a0640,"openfl.display.BitmapData.__getBounds","openfl/display/BitmapData.hx",2679,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2740___loadFromBase64,"openfl.display.BitmapData","__loadFromBase64",0x743819aa,"openfl.display.BitmapData.__loadFromBase64","openfl/display/BitmapData.hx",2740,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2737___loadFromBase64,"openfl.display.BitmapData","__loadFromBase64",0x743819aa,"openfl.display.BitmapData.__loadFromBase64","openfl/display/BitmapData.hx",2737,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2756___loadFromBytes,"openfl.display.BitmapData","__loadFromBytes",0xb92428b0,"openfl.display.BitmapData.__loadFromBytes","openfl/display/BitmapData.hx",2756,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2753___loadFromBytes,"openfl.display.BitmapData","__loadFromBytes",0xb92428b0,"openfl.display.BitmapData.__loadFromBytes","openfl/display/BitmapData.hx",2753,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2779___loadFromFile,"openfl.display.BitmapData","__loadFromFile",0x8e551dd7,"openfl.display.BitmapData.__loadFromFile","openfl/display/BitmapData.hx",2779,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2776___loadFromFile,"openfl.display.BitmapData","__loadFromFile",0x8e551dd7,"openfl.display.BitmapData.__loadFromFile","openfl/display/BitmapData.hx",2776,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2792___renderCairo,"openfl.display.BitmapData","__renderCairo",0x87dae327,"openfl.display.BitmapData.__renderCairo","openfl/display/BitmapData.hx",2792,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2826___renderCairoMask,"openfl.display.BitmapData","__renderCairoMask",0x1a586fb3,"openfl.display.BitmapData.__renderCairoMask","openfl/display/BitmapData.hx",2826,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2833___renderCanvas,"openfl.display.BitmapData","__renderCanvas",0x5afced59,"openfl.display.BitmapData.__renderCanvas","openfl/display/BitmapData.hx",2833,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2855___renderCanvasMask,"openfl.display.BitmapData","__renderCanvasMask",0xf2507ae5,"openfl.display.BitmapData.__renderCanvasMask","openfl/display/BitmapData.hx",2855,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2862___renderDOM,"openfl.display.BitmapData","__renderDOM",0x360da361,"openfl.display.BitmapData.__renderDOM","openfl/display/BitmapData.hx",2862,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2869___renderGL,"openfl.display.BitmapData","__renderGL",0x4c025e06,"openfl.display.BitmapData.__renderGL","openfl/display/BitmapData.hx",2869,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2901___renderGLMask,"openfl.display.BitmapData","__renderGLMask",0xc7204612,"openfl.display.BitmapData.__renderGLMask","openfl/display/BitmapData.hx",2901,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2927___resize,"openfl.display.BitmapData","__resize",0xd982a43f,"openfl.display.BitmapData.__resize","openfl/display/BitmapData.hx",2927,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2940___setUVRect,"openfl.display.BitmapData","__setUVRect",0x4b14ffdc,"openfl.display.BitmapData.__setUVRect","openfl/display/BitmapData.hx",2940,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2976___sync,"openfl.display.BitmapData","__sync",0x0b374be6,"openfl.display.BitmapData.__sync","openfl/display/BitmapData.hx",2976,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2987___update,"openfl.display.BitmapData","__update",0x580cd054,"openfl.display.BitmapData.__update","openfl/display/BitmapData.hx",2987,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2992___updateTransforms,"openfl.display.BitmapData","__updateTransforms",0xf11196fb,"openfl.display.BitmapData.__updateTransforms","openfl/display/BitmapData.hx",2992,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1145_fromBase64,"openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",1145,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1160_fromBytes,"openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",1160,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1189_fromFile,"openfl.display.BitmapData","fromFile",0xca5f7c31,"openfl.display.BitmapData.fromFile","openfl/display/BitmapData.hx",1189,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1204_fromImage,"openfl.display.BitmapData","fromImage",0x05fd7006,"openfl.display.BitmapData.fromImage","openfl/display/BitmapData.hx",1204,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1217_fromTexture,"openfl.display.BitmapData","fromTexture",0x71aada46,"openfl.display.BitmapData.fromTexture","openfl/display/BitmapData.hx",1217,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1901_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",1901,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1899_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",1899,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1914_loadFromBytes,"openfl.display.BitmapData","loadFromBytes",0x271f0890,"openfl.display.BitmapData.loadFromBytes","openfl/display/BitmapData.hx",1914,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1939_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",1939,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1937_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",1937,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_160_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",160,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_161_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",161,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_166_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",166,0xdd12d5b9)
namespace openfl{
namespace display{

void BitmapData_obj::__construct(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor){
bool transparent = __o_transparent.Default(true);
int fillColor = __o_fillColor.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_267_new)
HXLINE( 269)		this->transparent = transparent;
HXLINE( 276)		if ((width < (int)0)) {
HXLINE( 276)			width = (int)0;
            		}
            		else {
HXLINE( 276)			width = width;
            		}
HXLINE( 277)		if ((height < (int)0)) {
HXLINE( 277)			height = (int)0;
            		}
            		else {
HXLINE( 277)			height = height;
            		}
HXLINE( 279)		this->width = width;
HXLINE( 280)		this->height = height;
HXLINE( 281)		this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height);
HXLINE( 283)		this->_hx___textureWidth = width;
HXLINE( 284)		this->_hx___textureHeight = height;
HXLINE( 286)		bool _hx_tmp;
HXDLIN( 286)		if ((width > (int)0)) {
HXLINE( 286)			_hx_tmp = (height > (int)0);
            		}
            		else {
HXLINE( 286)			_hx_tmp = false;
            		}
HXDLIN( 286)		if (_hx_tmp) {
HXLINE( 288)			if (transparent) {
HXLINE( 290)				if ((((int)fillColor & (int)(int)-16777216) == (int)0)) {
HXLINE( 292)					fillColor = (int)0;
            				}
            			}
            			else {
HXLINE( 298)				fillColor = ((int)(int)-16777216 | (int)((int)fillColor & (int)(int)16777215));
            			}
HXLINE( 302)			fillColor = ((int)((int)fillColor << (int)(int)8) | (int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255));
HXLINE( 306)			 ::Dynamic elements = ((width * height) * (int)4);
HXDLIN( 306)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 306)			if (hx::IsNotNull( elements )) {
HXLINE( 306)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            			}
            			else {
HXLINE( 306)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 306)			 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,null(),null());
HXLINE( 307)			buffer->format = (int)2;
HXLINE( 308)			buffer->premultiplied = true;
HXLINE( 310)			this->image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,(int)0,(int)0,width,height,null(),null());
HXLINE( 312)			if ((fillColor != (int)0)) {
HXLINE( 314)				 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 314)				_hx_tmp1->fillRect(this->image->get_rect(),fillColor,null());
            			}
HXLINE( 335)			this->image->set_transparent(transparent);
HXLINE( 338)			this->_hx___isValid = true;
HXLINE( 339)			this->readable = true;
            		}
HXLINE( 343)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 344)		this->_hx___worldAlpha = (int)1;
HXLINE( 345)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 346)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 347)		this->_hx___renderable = true;
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

void *BitmapData_obj::_hx_vtable = 0;

Dynamic BitmapData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BitmapData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28c743a7;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::geom::Rectangle, ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___getBounds,
	( void (hx::Object::*)( ::openfl::display::CairoRenderer))&::openfl::display::BitmapData_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::display::CairoRenderer))&::openfl::display::BitmapData_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::display::CanvasRenderer))&::openfl::display::BitmapData_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::display::CanvasRenderer))&::openfl::display::BitmapData_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::display::DOMRenderer))&::openfl::display::BitmapData_obj::_hx___renderDOM,
	( void (hx::Object::*)( ::openfl::display::OpenGLRenderer))&::openfl::display::BitmapData_obj::_hx___renderGL,
	( void (hx::Object::*)( ::openfl::display::OpenGLRenderer))&::openfl::display::BitmapData_obj::_hx___renderGLMask,
	( void (hx::Object::*)(bool,bool))&::openfl::display::BitmapData_obj::_hx___update,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___updateTransforms,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::filters::BitmapFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_377_applyFilter)
HXLINE( 379)		bool _hx_tmp;
HXDLIN( 379)		bool _hx_tmp1;
HXDLIN( 379)		if (!(!(this->readable))) {
HXLINE( 379)			_hx_tmp1 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 379)			_hx_tmp1 = true;
            		}
HXDLIN( 379)		if (!(_hx_tmp1)) {
HXLINE( 379)			_hx_tmp = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE( 379)			_hx_tmp = true;
            		}
HXDLIN( 379)		if (_hx_tmp) {
HXLINE( 379)			return;
            		}
HXLINE( 383)		bool needSecondBitmapData = filter->_hx___needSecondBitmapData;
HXLINE( 384)		bool needCopyOfOriginal = filter->_hx___preserveObject;
HXLINE( 386)		 ::openfl::display::BitmapData bitmapData2 = null();
HXLINE( 387)		 ::openfl::display::BitmapData bitmapData3 = null();
HXLINE( 389)		if (needSecondBitmapData) {
HXLINE( 390)			bitmapData2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,(int)0);
            		}
            		else {
HXLINE( 392)			bitmapData2 = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 395)		if (needCopyOfOriginal) {
HXLINE( 396)			bitmapData3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,(int)0);
            		}
HXLINE( 399)		if (filter->_hx___preserveObject) {
HXLINE( 400)			bitmapData3->copyPixels(hx::ObjectPtr<OBJ_>(this),this->rect,destPoint,null(),null(),null());
            		}
HXLINE( 403)		 ::openfl::display::BitmapData lastBitmap = filter->_hx___applyFilter(bitmapData2,hx::ObjectPtr<OBJ_>(this),sourceRect,destPoint);
HXLINE( 405)		if (filter->_hx___preserveObject) {
HXLINE( 406)			lastBitmap->draw(bitmapData3,null(),null(),null(),null(),null());
            		}
HXLINE( 409)		bool _hx_tmp2;
HXDLIN( 409)		if (needSecondBitmapData) {
HXLINE( 409)			_hx_tmp2 = hx::IsEq( lastBitmap,bitmapData2 );
            		}
            		else {
HXLINE( 409)			_hx_tmp2 = false;
            		}
HXDLIN( 409)		if (_hx_tmp2) {
HXLINE( 411)			bitmapData2->image->version = this->image->version;
HXLINE( 412)			this->image = bitmapData2->image;
            		}
HXLINE( 416)		this->image->dirty = true;
HXLINE( 417)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

 ::openfl::display::BitmapData BitmapData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_426_clone)
HXLINE( 429)		 ::openfl::display::BitmapData bitmapData;
HXLINE( 431)		if (!(this->_hx___isValid)) {
HXLINE( 433)			bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,this->transparent,(int)0);
            		}
            		else {
HXLINE( 435)			bool _hx_tmp;
HXDLIN( 435)			if (!(this->readable)) {
HXLINE( 435)				_hx_tmp = hx::IsNull( this->image );
            			}
            			else {
HXLINE( 435)				_hx_tmp = false;
            			}
HXDLIN( 435)			if (_hx_tmp) {
HXLINE( 437)				bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,this->transparent,(int)0);
HXLINE( 439)				bitmapData->width = this->width;
HXLINE( 440)				bitmapData->height = this->height;
HXLINE( 441)				bitmapData->_hx___textureWidth = this->_hx___textureWidth;
HXLINE( 442)				bitmapData->_hx___textureHeight = this->_hx___textureHeight;
HXLINE( 443)				bitmapData->rect->copyFrom(this->rect);
HXLINE( 445)				bitmapData->_hx___framebuffer = this->_hx___framebuffer;
HXLINE( 446)				bitmapData->_hx___framebufferContext = this->_hx___framebufferContext;
HXLINE( 447)				bitmapData->_hx___texture = this->_hx___texture;
HXLINE( 448)				bitmapData->_hx___textureContext = this->_hx___textureContext;
HXLINE( 449)				bitmapData->_hx___isValid = true;
            			}
            			else {
HXLINE( 453)				 ::lime::graphics::Image bitmapData1 = this->image->clone();
HXDLIN( 453)				bitmapData = ::openfl::display::BitmapData_obj::fromImage(bitmapData1,this->transparent);
            			}
            		}
HXLINE( 457)		bitmapData->_hx___worldTransform->copyFrom(this->_hx___worldTransform);
HXLINE( 458)		bitmapData->_hx___renderTransform->copyFrom(this->_hx___renderTransform);
HXLINE( 460)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::geom::Rectangle rect, ::openfl::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_475_colorTransform)
HXLINE( 477)		if (!(this->readable)) {
HXLINE( 477)			return;
            		}
HXLINE( 480)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 480)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN( 480)		_hx_tmp->colorTransform(_hx_tmp1,colorTransform->_hx___toLimeColorMatrix());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

 ::Dynamic BitmapData_obj::compare( ::openfl::display::BitmapData otherBitmapData){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_496_compare)
HXLINE( 499)		if (hx::IsEq( otherBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 501)			return (int)0;
            		}
            		else {
HXLINE( 503)			if (hx::IsNull( otherBitmapData )) {
HXLINE( 505)				return (int)-1;
            			}
            			else {
HXLINE( 507)				bool _hx_tmp;
HXDLIN( 507)				if ((this->readable != false)) {
HXLINE( 507)					_hx_tmp = (otherBitmapData->readable == false);
            				}
            				else {
HXLINE( 507)					_hx_tmp = true;
            				}
HXDLIN( 507)				if (_hx_tmp) {
HXLINE( 509)					return (int)-2;
            				}
            				else {
HXLINE( 511)					if ((this->width != otherBitmapData->width)) {
HXLINE( 513)						return (int)-3;
            					}
            					else {
HXLINE( 515)						if ((this->height != otherBitmapData->height)) {
HXLINE( 517)							return (int)-4;
            						}
            					}
            				}
            			}
            		}
HXLINE( 521)		bool _hx_tmp1;
HXDLIN( 521)		bool _hx_tmp2;
HXDLIN( 521)		if (hx::IsNotNull( this->image )) {
HXLINE( 521)			_hx_tmp2 = hx::IsNotNull( otherBitmapData->image );
            		}
            		else {
HXLINE( 521)			_hx_tmp2 = false;
            		}
HXDLIN( 521)		if (_hx_tmp2) {
HXLINE( 521)			int _hx_tmp3 = this->image->get_format();
HXDLIN( 521)			_hx_tmp1 = (_hx_tmp3 == otherBitmapData->image->get_format());
            		}
            		else {
HXLINE( 521)			_hx_tmp1 = false;
            		}
HXDLIN( 521)		if (_hx_tmp1) {
HXLINE( 523)			 ::lime::utils::ArrayBufferView bytes = this->image->get_data();
HXLINE( 524)			 ::lime::utils::ArrayBufferView otherBytes = otherBitmapData->image->get_data();
HXLINE( 525)			bool equal = true;
HXLINE( 527)			{
HXLINE( 527)				int _g1 = (int)0;
HXDLIN( 527)				int _g = bytes->length;
HXDLIN( 527)				while((_g1 < _g)){
HXLINE( 527)					_g1 = (_g1 + (int)1);
HXDLIN( 527)					int i = (_g1 - (int)1);
HXLINE( 529)					int a = ((int)::__hxcpp_memory_get_byte(bytes->buffer->b,(bytes->byteOffset + i)) & (int)(int)255);
HXDLIN( 529)					if (hx::IsNotEq( a,((int)::__hxcpp_memory_get_byte(otherBytes->buffer->b,(otherBytes->byteOffset + i)) & (int)(int)255) )) {
HXLINE( 531)						equal = false;
HXLINE( 532)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
HXLINE( 537)			if (equal) {
HXLINE( 539)				return (int)0;
            			}
            		}
HXLINE( 545)		 ::openfl::display::BitmapData bitmapData = null();
HXLINE( 546)		bool foundDifference;
HXDLIN( 546)		int pixel;
HXDLIN( 546)		int otherPixel;
HXDLIN( 546)		int comparePixel;
HXDLIN( 546)		int r;
HXDLIN( 546)		int g;
HXDLIN( 546)		int b;
HXDLIN( 546)		int a1;
HXLINE( 548)		{
HXLINE( 548)			int _g11 = (int)0;
HXDLIN( 548)			int _g2 = this->height;
HXDLIN( 548)			while((_g11 < _g2)){
HXLINE( 548)				_g11 = (_g11 + (int)1);
HXDLIN( 548)				int y = (_g11 - (int)1);
HXLINE( 550)				{
HXLINE( 550)					int _g3 = (int)0;
HXDLIN( 550)					int _g21 = this->width;
HXDLIN( 550)					while((_g3 < _g21)){
HXLINE( 550)						_g3 = (_g3 + (int)1);
HXDLIN( 550)						int x = (_g3 - (int)1);
HXLINE( 552)						foundDifference = false;
HXLINE( 554)						pixel = this->getPixel32(x,y);
HXLINE( 555)						otherPixel = otherBitmapData->getPixel32(x,y);
HXLINE( 556)						comparePixel = (int)0;
HXLINE( 558)						if ((pixel != otherPixel)) {
HXLINE( 560)							r = (((int)hx::UShr(pixel,(int)16) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)16) & (int)(int)255));
HXLINE( 561)							g = (((int)hx::UShr(pixel,(int)8) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)8) & (int)(int)255));
HXLINE( 562)							b = (((int)pixel & (int)(int)255) - ((int)otherPixel & (int)(int)255));
HXLINE( 564)							if ((r < (int)0)) {
HXLINE( 564)								r = (r * (int)-1);
            							}
HXLINE( 565)							if ((g < (int)0)) {
HXLINE( 565)								g = (g * (int)-1);
            							}
HXLINE( 566)							if ((b < (int)0)) {
HXLINE( 566)								b = (b * (int)-1);
            							}
HXLINE( 568)							bool _hx_tmp4;
HXDLIN( 568)							bool _hx_tmp5;
HXDLIN( 568)							if ((r == (int)0)) {
HXLINE( 568)								_hx_tmp5 = (g == (int)0);
            							}
            							else {
HXLINE( 568)								_hx_tmp5 = false;
            							}
HXDLIN( 568)							if (_hx_tmp5) {
HXLINE( 568)								_hx_tmp4 = (b == (int)0);
            							}
            							else {
HXLINE( 568)								_hx_tmp4 = false;
            							}
HXDLIN( 568)							if (_hx_tmp4) {
HXLINE( 570)								a1 = (((int)hx::UShr(pixel,(int)24) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)24) & (int)(int)255));
HXLINE( 572)								if ((a1 != (int)0)) {
HXLINE( 574)									comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)(int)16711680) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 575)									comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)(int)65280) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 576)									comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 577)									comparePixel = ((int)((int)((int)((int)((int)a1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 579)									foundDifference = true;
            								}
            							}
            							else {
HXLINE( 585)								comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)r & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 586)								comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 587)								comparePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
HXLINE( 588)								comparePixel = ((int)((int)((int)(int)-16777216 | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)comparePixel & (int)(int)255) & (int)(int)255));
HXLINE( 590)								foundDifference = true;
            							}
            						}
HXLINE( 596)						if (foundDifference) {
HXLINE( 598)							if (hx::IsNull( bitmapData )) {
HXLINE( 600)								bool bitmapData1;
HXDLIN( 600)								if (!(this->transparent)) {
HXLINE( 600)									bitmapData1 = otherBitmapData->transparent;
            								}
            								else {
HXLINE( 600)									bitmapData1 = true;
            								}
HXDLIN( 600)								bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,bitmapData1,(int)0);
            							}
HXLINE( 604)							bitmapData->setPixel32(x,y,comparePixel);
            						}
            					}
            				}
            			}
            		}
HXLINE( 612)		if (hx::IsNull( bitmapData )) {
HXLINE( 614)			return (int)0;
            		}
HXLINE( 618)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,compare,return )

void BitmapData_obj::copyChannel( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int sourceChannel,int destChannel){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_669_copyChannel)
HXLINE( 671)		if (!(this->readable)) {
HXLINE( 671)			return;
            		}
HXLINE( 674)		 ::lime::graphics::ImageChannel sourceChannel1;
HXDLIN( 674)		switch((int)(sourceChannel)){
            			case (int)1: {
HXLINE( 674)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 674)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 674)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 674)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 680)				return;
            			}
            		}
HXLINE( 684)		 ::lime::graphics::ImageChannel destChannel1;
HXDLIN( 684)		switch((int)(destChannel)){
            			case (int)1: {
HXLINE( 684)				destChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 684)				destChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 684)				destChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 684)				destChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 690)				return;
            			}
            		}
HXLINE( 694)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 694)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 694)		 ::lime::math::Rectangle _hx_tmp1 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 694)		_hx_tmp->copyChannel(sourceBitmapData1,_hx_tmp1,destPoint->_hx___toLimeVector2(),sourceChannel1,destChannel1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::display::BitmapData alphaBitmapData, ::openfl::geom::Point alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_739_copyPixels)
HXLINE( 741)		bool _hx_tmp;
HXDLIN( 741)		if (!(!(this->readable))) {
HXLINE( 741)			_hx_tmp = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 741)			_hx_tmp = true;
            		}
HXDLIN( 741)		if (_hx_tmp) {
HXLINE( 741)			return;
            		}
HXLINE( 744)		if (hx::IsNotNull( alphaPoint )) {
HXLINE( 746)			::openfl::display::BitmapData_obj::_hx___tempVector->x = alphaPoint->x;
HXLINE( 747)			::openfl::display::BitmapData_obj::_hx___tempVector->y = alphaPoint->y;
            		}
HXLINE( 751)		 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 751)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 751)		 ::lime::math::Rectangle _hx_tmp2 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 751)		 ::lime::math::Vector2 _hx_tmp3 = destPoint->_hx___toLimeVector2();
HXDLIN( 751)		 ::lime::graphics::Image _hx_tmp4;
HXDLIN( 751)		if (hx::IsNotNull( alphaBitmapData )) {
HXLINE( 751)			_hx_tmp4 = alphaBitmapData->image;
            		}
            		else {
HXLINE( 751)			_hx_tmp4 = null();
            		}
HXDLIN( 751)		 ::lime::math::Vector2 _hx_tmp5;
HXDLIN( 751)		if (hx::IsNotNull( alphaPoint )) {
HXLINE( 751)			_hx_tmp5 = ::openfl::display::BitmapData_obj::_hx___tempVector;
            		}
            		else {
HXLINE( 751)			_hx_tmp5 = null();
            		}
HXDLIN( 751)		_hx_tmp1->copyPixels(sourceBitmapData1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_779_dispose)
HXLINE( 781)		this->image = null();
HXLINE( 783)		this->width = (int)0;
HXLINE( 784)		this->height = (int)0;
HXLINE( 785)		this->rect = null();
HXLINE( 787)		this->_hx___isValid = false;
HXLINE( 788)		this->readable = false;
HXLINE( 790)		this->_hx___surface = null();
HXLINE( 792)		this->_hx___vertexBuffer = null();
HXLINE( 793)		this->_hx___framebuffer = null();
HXLINE( 794)		this->_hx___framebufferContext = null();
HXLINE( 795)		this->_hx___texture = null();
HXLINE( 796)		this->_hx___textureContext = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::disposeImage(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_835_disposeImage)
HXDLIN( 835)		this->readable = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,disposeImage,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing){
bool smoothing = __o_smoothing.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_912_draw)
HXLINE( 914)		if (hx::IsNull( source )) {
HXLINE( 914)			return;
            		}
HXLINE( 916)		::openfl::display::IBitmapDrawable_obj::_hx___update(source,false,true);
HXLINE( 918)		 ::openfl::geom::Matrix transform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 920)		transform->copyFrom(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
HXLINE( 921)		transform->invert();
HXLINE( 923)		if (hx::IsNotNull( matrix )) {
HXLINE( 925)			transform->concat(matrix);
            		}
HXLINE( 929)		 ::openfl::geom::Matrix clipMatrix = null();
HXLINE( 931)		if (hx::IsNotNull( clipRect )) {
HXLINE( 933)			clipMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 934)			clipMatrix->copyFrom(transform);
HXLINE( 935)			clipMatrix->invert();
            		}
HXLINE( 939)		 ::openfl::geom::ColorTransform _colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 940)		_colorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),hx::paccDynamic)) ));
HXLINE( 941)		_colorTransform->_hx___invert();
HXLINE( 943)		bool _hx_tmp;
HXDLIN( 943)		if (!(this->readable)) {
HXLINE( 943)			_hx_tmp = hx::IsNotNull( ::openfl::Lib_obj::get_current()->stage->context3D );
            		}
            		else {
HXLINE( 943)			_hx_tmp = false;
            		}
HXDLIN( 943)		if (_hx_tmp) {
HXLINE( 945)			if (hx::IsNull( this->_hx___textureContext )) {
HXLINE( 948)				this->_hx___textureContext = ::lime::app::Application_obj::current->_hx___window->context;
            			}
HXLINE( 952)			if (hx::IsNotNull( colorTransform )) {
HXLINE( 954)				_colorTransform->_hx___combine(colorTransform);
            			}
HXLINE( 958)			 ::openfl::display::OpenGLRenderer renderer =  ::openfl::display::OpenGLRenderer_obj::__alloc( HX_CTX ,::openfl::Lib_obj::get_current()->stage->context3D,hx::ObjectPtr<OBJ_>(this));
HXLINE( 959)			renderer->_hx___allowSmoothing = smoothing;
HXLINE( 960)			renderer->_hx___overrideBlendMode = blendMode;
HXLINE( 962)			renderer->_hx___worldTransform = transform;
HXLINE( 963)			renderer->_hx___worldAlpha = ((Float)(int)1 / (Float)( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) ));
HXLINE( 964)			renderer->_hx___worldColorTransform = _colorTransform;
HXLINE( 966)			renderer->_hx___resize(this->width,this->height);
HXLINE( 968)			if (hx::IsNotNull( clipRect )) {
HXLINE( 970)				renderer->_hx___pushMaskRect(clipRect,clipMatrix);
            			}
HXLINE( 974)			this->_hx___drawGL(source,renderer);
HXLINE( 976)			if (hx::IsNotNull( clipRect )) {
HXLINE( 978)				renderer->_hx___popMaskRect();
HXLINE( 979)				::openfl::geom::Matrix_obj::_hx___pool->release(clipMatrix);
            			}
            		}
            		else {
HXLINE( 987)			if (hx::IsNotNull( colorTransform )) {
HXLINE( 989)				 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 990)				 ::openfl::geom::Matrix boundsMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 992)				::openfl::display::IBitmapDrawable_obj::_hx___getBounds(source,bounds,boundsMatrix);
HXLINE( 994)				int width = ::Math_obj::ceil(bounds->width);
HXLINE( 995)				int height = ::Math_obj::ceil(bounds->height);
HXLINE( 997)				boundsMatrix->tx = -(bounds->x);
HXLINE( 998)				boundsMatrix->ty = -(bounds->y);
HXLINE(1000)				 ::openfl::display::BitmapData copy =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,(int)0);
HXLINE(1001)				copy->draw(source,boundsMatrix,null(),null(),null(),null());
HXLINE(1003)				copy->colorTransform(copy->rect,colorTransform);
HXLINE(1004)				copy->_hx___renderTransform->identity();
HXLINE(1005)				copy->_hx___renderTransform->tx = bounds->x;
HXLINE(1006)				copy->_hx___renderTransform->ty = bounds->y;
HXLINE(1007)				copy->_hx___renderTransform->concat(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
HXLINE(1008)				copy->_hx___worldAlpha = ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) );
HXLINE(1009)				copy->_hx___worldColorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),hx::paccDynamic)) ));
HXLINE(1010)				source = copy;
HXLINE(1012)				::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
HXLINE(1013)				::openfl::geom::Matrix_obj::_hx___pool->release(boundsMatrix);
            			}
HXLINE(1021)			 ::openfl::display::CairoRenderer renderer1 =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX , ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,this->getSurface()));
HXLINE(1024)			renderer1->_hx___allowSmoothing = smoothing;
HXLINE(1025)			renderer1->_hx___overrideBlendMode = blendMode;
HXLINE(1027)			renderer1->_hx___worldTransform = transform;
HXLINE(1028)			renderer1->_hx___worldAlpha = ((Float)(int)1 / (Float)( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) ));
HXLINE(1029)			renderer1->_hx___worldColorTransform = _colorTransform;
HXLINE(1031)			if (hx::IsNotNull( clipRect )) {
HXLINE(1033)				renderer1->_hx___pushMaskRect(clipRect,clipMatrix);
            			}
HXLINE(1040)			this->_hx___drawCairo(source,renderer1);
HXLINE(1043)			if (hx::IsNotNull( clipRect )) {
HXLINE(1045)				renderer1->_hx___popMaskRect();
HXLINE(1046)				::openfl::geom::Matrix_obj::_hx___pool->release(clipMatrix);
            			}
            		}
HXLINE(1054)		::openfl::geom::Matrix_obj::_hx___pool->release(transform);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::drawWithQuality(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing, ::Dynamic quality){
bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1061_drawWithQuality)
HXDLIN(1061)		bool _hx_tmp;
HXDLIN(1061)		if (hx::IsNotEq( quality,(int)2 )) {
HXDLIN(1061)			_hx_tmp = smoothing;
            		}
            		else {
HXDLIN(1061)			_hx_tmp = false;
            		}
HXDLIN(1061)		this->draw(source,matrix,colorTransform,blendMode,clipRect,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,drawWithQuality,(void))

 ::openfl::utils::ByteArrayData BitmapData_obj::encode( ::openfl::geom::Rectangle rect, ::Dynamic compressor, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1066_encode)
HXLINE(1069)		bool _hx_tmp;
HXDLIN(1069)		if (!(!(this->readable))) {
HXLINE(1069)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1069)			_hx_tmp = true;
            		}
HXDLIN(1069)		if (_hx_tmp) {
HXLINE(1069)			byteArray = null();
HXDLIN(1069)			return byteArray;
            		}
HXLINE(1070)		if (hx::IsNull( byteArray )) {
HXLINE(1070)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(1070)			byteArray = this1;
            		}
HXLINE(1072)		 ::lime::graphics::Image image = this->image;
HXLINE(1074)		if (!(rect->equals(this->rect))) {
HXLINE(1076)			 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(1077)			matrix->tx = ::Math_obj::round(-(rect->x));
HXLINE(1078)			matrix->ty = ::Math_obj::round(-(rect->y));
HXLINE(1080)			int bitmapData = ::Math_obj::ceil(rect->width);
HXDLIN(1080)			 ::openfl::display::BitmapData bitmapData1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapData,::Math_obj::ceil(rect->height),true,(int)0);
HXLINE(1081)			bitmapData1->draw(hx::ObjectPtr<OBJ_>(this),matrix,null(),null(),null(),null());
HXLINE(1083)			image = bitmapData1->image;
HXLINE(1085)			::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
            		}
HXLINE(1089)		if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::PNGEncoderOptions >())) {
HXLINE(1091)			byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(::lime::graphics::ImageFileFormat_obj::PNG_dyn(),null())),null(),null());
HXLINE(1092)			return byteArray;
            		}
            		else {
HXLINE(1094)			if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::JPEGEncoderOptions >())) {
HXLINE(1096)				byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(::lime::graphics::ImageFileFormat_obj::JPEG_dyn(),hx::TCast<  ::openfl::display::JPEGEncoderOptions >::cast(compressor)->quality)),null(),null());
HXLINE(1097)				return byteArray;
            			}
            		}
HXLINE(1102)		byteArray = null();
HXDLIN(1102)		return byteArray;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::openfl::geom::Rectangle rect,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1118_fillRect)
HXDLIN(1118)		this->_hx___fillRect(rect,color,true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::floodFill(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1134_floodFill)
HXLINE(1137)		if (!(this->readable)) {
HXLINE(1137)			return;
            		}
HXLINE(1138)		this->image->floodFill(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::openfl::geom::Rectangle BitmapData_obj::generateFilterRect( ::openfl::geom::Rectangle sourceRect, ::openfl::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1260_generateFilterRect)
HXDLIN(1260)		return sourceRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

 ::openfl::display3D::IndexBuffer3D BitmapData_obj::getIndexBuffer( ::openfl::display3D::Context3D context){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1265_getIndexBuffer)
HXLINE(1267)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(1269)		bool _hx_tmp;
HXDLIN(1269)		if (hx::IsNotNull( this->_hx___indexBuffer )) {
HXLINE(1269)			_hx_tmp = hx::IsNotEq( this->_hx___indexBufferContext,context->_hx___context );
            		}
            		else {
HXLINE(1269)			_hx_tmp = true;
            		}
HXDLIN(1269)		if (_hx_tmp) {
HXLINE(1274)			 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)6,(int)6);
HXDLIN(1274)			this->_hx___indexBufferData = this1;
HXLINE(1275)			{
HXLINE(1275)				 ::lime::utils::ArrayBufferView this2 = this->_hx___indexBufferData;
HXDLIN(1275)				::__hxcpp_memory_set_ui16(this2->buffer->b,this2->byteOffset,(int)0);
            			}
HXLINE(1276)			{
HXLINE(1276)				 ::lime::utils::ArrayBufferView this3 = this->_hx___indexBufferData;
HXDLIN(1276)				::__hxcpp_memory_set_ui16(this3->buffer->b,(this3->byteOffset + (int)2),(int)1);
            			}
HXLINE(1277)			{
HXLINE(1277)				 ::lime::utils::ArrayBufferView this4 = this->_hx___indexBufferData;
HXDLIN(1277)				::__hxcpp_memory_set_ui16(this4->buffer->b,(this4->byteOffset + (int)4),(int)2);
            			}
HXLINE(1278)			{
HXLINE(1278)				 ::lime::utils::ArrayBufferView this5 = this->_hx___indexBufferData;
HXDLIN(1278)				::__hxcpp_memory_set_ui16(this5->buffer->b,(this5->byteOffset + (int)6),(int)2);
            			}
HXLINE(1279)			{
HXLINE(1279)				 ::lime::utils::ArrayBufferView this6 = this->_hx___indexBufferData;
HXDLIN(1279)				::__hxcpp_memory_set_ui16(this6->buffer->b,(this6->byteOffset + (int)8),(int)1);
            			}
HXLINE(1280)			{
HXLINE(1280)				 ::lime::utils::ArrayBufferView this7 = this->_hx___indexBufferData;
HXDLIN(1280)				::__hxcpp_memory_set_ui16(this7->buffer->b,(this7->byteOffset + (int)10),(int)3);
            			}
HXLINE(1282)			this->_hx___indexBufferContext = context->_hx___context;
HXLINE(1283)			this->_hx___indexBuffer = context->createIndexBuffer((int)6,null());
HXLINE(1284)			this->_hx___indexBuffer->uploadFromTypedArray(this->_hx___indexBufferData,null());
            		}
HXLINE(1289)		return this->_hx___indexBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getIndexBuffer,return )

 ::openfl::display3D::VertexBuffer3D BitmapData_obj::getVertexBuffer( ::openfl::display3D::Context3D context){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1294_getVertexBuffer)
HXLINE(1296)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(1298)		bool _hx_tmp;
HXDLIN(1298)		if (hx::IsNotNull( this->_hx___vertexBuffer )) {
HXLINE(1298)			_hx_tmp = hx::IsNotEq( this->_hx___vertexBufferContext,context->_hx___context );
            		}
            		else {
HXLINE(1298)			_hx_tmp = true;
            		}
HXDLIN(1298)		if (_hx_tmp) {
HXLINE(1327)			this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
HXLINE(1329)			int uvWidth = (int)1;
HXLINE(1330)			int uvHeight = (int)1;
HXLINE(1348)			 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)56,(int)8);
HXDLIN(1348)			this->_hx___vertexBufferData = this1;
HXLINE(1350)			{
HXLINE(1350)				 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(1350)				Float val = this->width;
HXDLIN(1350)				::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,val);
            			}
HXLINE(1351)			{
HXLINE(1351)				 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(1351)				Float val1 = this->height;
HXDLIN(1351)				::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + (int)4),val1);
            			}
HXLINE(1352)			{
HXLINE(1352)				 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(1352)				::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + (int)12),uvWidth);
            			}
HXLINE(1353)			{
HXLINE(1353)				 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(1353)				::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + (int)16),uvHeight);
            			}
HXLINE(1354)			{
HXLINE(1354)				 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(1354)				Float val2 = this->height;
HXDLIN(1354)				::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + (int)60),val2);
            			}
HXLINE(1355)			{
HXLINE(1355)				 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(1355)				::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + (int)72),uvHeight);
            			}
HXLINE(1356)			{
HXLINE(1356)				 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(1356)				Float val3 = this->width;
HXDLIN(1356)				::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + (int)112),val3);
            			}
HXLINE(1357)			{
HXLINE(1357)				 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(1357)				::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + (int)124),uvWidth);
            			}
HXLINE(1380)			this->_hx___vertexBufferContext = context->_hx___context;
HXLINE(1381)			this->_hx___vertexBuffer = context->createVertexBuffer((int)3,(int)14,null());
HXLINE(1383)			this->_hx___vertexBuffer->uploadFromTypedArray(this->_hx___vertexBufferData,null());
            		}
HXLINE(1458)		return this->_hx___vertexBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVertexBuffer,return )

 ::openfl::geom::Rectangle BitmapData_obj::getColorBoundsRect(int mask,int color,hx::Null< bool >  __o_findColor){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1497_getColorBoundsRect)
HXLINE(1500)		if (!(this->readable)) {
HXLINE(1500)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
            		}
HXLINE(1502)		bool _hx_tmp;
HXDLIN(1502)		if (!(!(this->transparent))) {
HXLINE(1502)			_hx_tmp = (((int)((int)mask >> (int)(int)24) & (int)(int)255) > (int)0);
            		}
            		else {
HXLINE(1502)			_hx_tmp = true;
            		}
HXDLIN(1502)		if (_hx_tmp) {
HXLINE(1504)			int color1 = color;
HXLINE(1505)			if ((((int)hx::UShr(color1,(int)24) & (int)(int)255) == (int)0)) {
HXLINE(1505)				color1 = (int)0;
            			}
            		}
HXLINE(1509)		 ::lime::math::Rectangle rect = this->image->getColorBoundsRect(mask,color,findColor,(int)1);
HXLINE(1510)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,rect->x,rect->y,rect->width,rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

int BitmapData_obj::getPixel(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1541_getPixel)
HXLINE(1543)		if (!(this->readable)) {
HXLINE(1543)			return (int)0;
            		}
HXLINE(1545)		return this->image->getPixel(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

int BitmapData_obj::getPixel32(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1575_getPixel32)
HXLINE(1577)		if (!(this->readable)) {
HXLINE(1577)			return (int)0;
            		}
HXLINE(1579)		return this->image->getPixel32(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::openfl::utils::ByteArrayData BitmapData_obj::getPixels( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1596_getPixels)
HXLINE(1599)		if (!(this->readable)) {
HXLINE(1599)			return null();
            		}
HXLINE(1600)		if (hx::IsNull( rect )) {
HXLINE(1600)			rect = this->rect;
            		}
HXLINE(1601)		 ::lime::graphics::Image byteArray = this->image;
HXDLIN(1601)		 ::openfl::utils::ByteArrayData byteArray1 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(byteArray->getPixels(rect->_hx___toLimeRectangle(),(int)1));
HXLINE(1603)		byteArray1->_hx___endian = (int)0;
HXLINE(1604)		return byteArray1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

 ::Dynamic BitmapData_obj::getSurface(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1612_getSurface)
HXLINE(1615)		if (!(this->readable)) {
HXLINE(1615)			return null();
            		}
HXLINE(1617)		if (hx::IsNull( this->_hx___surface )) {
HXLINE(1619)			this->_hx___surface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::fromImage(this->image);
            		}
HXLINE(1623)		return this->_hx___surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getSurface,return )

 ::openfl::display3D::textures::RectangleTexture BitmapData_obj::getTexture( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1631_getTexture)
HXLINE(1633)		if (!(this->_hx___isValid)) {
HXLINE(1633)			return null();
            		}
HXLINE(1635)		bool _hx_tmp;
HXDLIN(1635)		if (hx::IsNotNull( this->_hx___texture )) {
HXLINE(1635)			_hx_tmp = hx::IsNotEq( this->_hx___textureContext,context->_hx___context );
            		}
            		else {
HXLINE(1635)			_hx_tmp = true;
            		}
HXDLIN(1635)		if (_hx_tmp) {
HXLINE(1637)			this->_hx___textureContext = context->_hx___context;
HXLINE(1638)			this->_hx___texture = context->createRectangleTexture(this->width,this->height,(int)1,false);
HXLINE(1645)			this->_hx___textureVersion = (int)-1;
            		}
HXLINE(1654)		bool _hx_tmp1;
HXDLIN(1654)		if (hx::IsNotNull( this->image )) {
HXLINE(1654)			_hx_tmp1 = (this->image->version > this->_hx___textureVersion);
            		}
            		else {
HXLINE(1654)			_hx_tmp1 = false;
            		}
HXDLIN(1654)		if (_hx_tmp1) {
HXLINE(1656)			if (hx::IsNotNull( this->_hx___surface )) {
HXLINE(1658)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->_hx___surface);
            			}
HXLINE(1662)			 ::lime::graphics::Image textureImage = this->image;
HXLINE(1679)			bool _hx_tmp2;
HXDLIN(1679)			if (!(textureImage->get_premultiplied())) {
HXLINE(1679)				_hx_tmp2 = textureImage->get_transparent();
            			}
            			else {
HXLINE(1679)				_hx_tmp2 = false;
            			}
HXDLIN(1679)			if (_hx_tmp2) {
HXLINE(1681)				textureImage = textureImage->clone();
HXLINE(1682)				textureImage->set_premultiplied(true);
            			}
HXLINE(1691)			this->_hx___texture->_hx___uploadFromImage(textureImage);
HXLINE(1693)			this->_hx___textureVersion = this->image->version;
HXLINE(1695)			this->_hx___textureWidth = textureImage->buffer->width;
HXLINE(1696)			this->_hx___textureHeight = textureImage->buffer->height;
            		}
HXLINE(1700)		bool _hx_tmp3;
HXDLIN(1700)		if (!(this->readable)) {
HXLINE(1700)			_hx_tmp3 = hx::IsNotNull( this->image );
            		}
            		else {
HXLINE(1700)			_hx_tmp3 = false;
            		}
HXDLIN(1700)		if (_hx_tmp3) {
HXLINE(1702)			this->_hx___surface = null();
HXLINE(1703)			this->image = null();
            		}
HXLINE(1708)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getTexture,return )

 ::openfl::_Vector::IntVector BitmapData_obj::getVector( ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1722_getVector)
HXLINE(1724)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(1725)		int length = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels) / (Float)(int)4));
HXLINE(1726)		 ::openfl::_Vector::IntVector result =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length,true,null());
HXLINE(1728)		{
HXLINE(1728)			int _g1 = (int)0;
HXDLIN(1728)			int _g = length;
HXDLIN(1728)			while((_g1 < _g)){
HXLINE(1728)				_g1 = (_g1 + (int)1);
HXDLIN(1728)				int i = (_g1 - (int)1);
HXLINE(1730)				result->set(i,pixels->readUnsignedInt());
            			}
            		}
HXLINE(1734)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

::Array< ::Dynamic> BitmapData_obj::histogram( ::openfl::geom::Rectangle hRect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1739_histogram)
HXLINE(1741)		 ::openfl::geom::Rectangle rect;
HXDLIN(1741)		if (hx::IsNotNull( hRect )) {
HXLINE(1741)			rect = hRect;
            		}
            		else {
HXLINE(1741)			rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
            		}
HXLINE(1742)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(1743)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1743)		{
HXLINE(1743)			int _g1 = (int)0;
HXDLIN(1743)			while((_g1 < (int)4)){
HXLINE(1743)				_g1 = (_g1 + (int)1);
HXDLIN(1743)				int i = (_g1 - (int)1);
HXDLIN(1743)				::Array< int > _g2 = ::Array_obj< int >::__new(0);
HXDLIN(1743)				{
HXLINE(1743)					int _g3 = (int)0;
HXDLIN(1743)					while((_g3 < (int)256)){
HXLINE(1743)						_g3 = (_g3 + (int)1);
HXDLIN(1743)						int j = (_g3 - (int)1);
HXDLIN(1743)						_g2->push((int)0);
            					}
            				}
HXDLIN(1743)				_g->push(_g2);
            			}
            		}
HXDLIN(1743)		::Array< ::Dynamic> result = _g;
HXLINE(1745)		{
HXLINE(1745)			int _g21 = (int)0;
HXDLIN(1745)			int _g11 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN(1745)			while((_g21 < _g11)){
HXLINE(1745)				_g21 = (_g21 + (int)1);
HXDLIN(1745)				int i1 = (_g21 - (int)1);
HXLINE(1747)				++result->__get(hx::Mod(i1,(int)4)).StaticCast< ::Array< int > >()[pixels->readUnsignedByte()];
            			}
            		}
HXLINE(1751)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,histogram,return )

bool BitmapData_obj::hitTest( ::openfl::geom::Point firstPoint,int firstAlphaThreshold, ::Dynamic secondObject, ::openfl::geom::Point secondBitmapDataPoint,hx::Null< int >  __o_secondAlphaThreshold){
int secondAlphaThreshold = __o_secondAlphaThreshold.Default(1);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1756_hitTest)
HXLINE(1758)		if (!(this->readable)) {
HXLINE(1758)			return false;
            		}
HXLINE(1761)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::Bitmap >())) {
HXLINE(1763)			secondObject = hx::TCast<  ::openfl::display::Bitmap >::cast(secondObject)->_hx___bitmapData;
            		}
HXLINE(1768)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Point >())) {
HXLINE(1770)			 ::openfl::geom::Point secondPoint = ( ( ::openfl::geom::Point)(secondObject) );
HXLINE(1772)			int x = ::Std_obj::_hx_int((secondPoint->x - firstPoint->x));
HXLINE(1773)			int y = ::Std_obj::_hx_int((secondPoint->y - firstPoint->y));
HXLINE(1775)			if (this->rect->contains(x,y)) {
HXLINE(1777)				int pixel = this->getPixel32(x,y);
HXLINE(1779)				if ((((int)((int)pixel >> (int)(int)24) & (int)(int)255) > firstAlphaThreshold)) {
HXLINE(1781)					return true;
            				}
            			}
            		}
            		else {
HXLINE(1787)			if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::BitmapData >())) {
HXLINE(1789)				 ::openfl::display::BitmapData secondBitmapData = ( ( ::openfl::display::BitmapData)(secondObject) );
HXLINE(1790)				int x1;
HXDLIN(1790)				int y1;
HXLINE(1792)				if (hx::IsNull( secondBitmapDataPoint )) {
HXLINE(1794)					x1 = (int)0;
HXLINE(1795)					y1 = (int)0;
            				}
            				else {
HXLINE(1799)					x1 = ::Math_obj::round((secondBitmapDataPoint->x - firstPoint->x));
HXLINE(1800)					y1 = ::Math_obj::round((secondBitmapDataPoint->y - firstPoint->y));
            				}
HXLINE(1804)				 ::openfl::geom::Rectangle hitRect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(1805)				hitRect->setTo(x1,y1,secondBitmapData->width,secondBitmapData->height);
HXLINE(1807)				if (this->rect->intersects(hitRect)) {
HXLINE(1809)					if ((x1 < (int)0)) {
HXLINE(1811)						hitRect->x = (int)0;
HXLINE(1812)						hitRect->width = ::Math_obj::min((secondBitmapData->width + x1),this->width);
            					}
            					else {
HXLINE(1816)						int secondBitmapData1 = secondBitmapData->width;
HXDLIN(1816)						hitRect->width = ::Math_obj::min(secondBitmapData1,(this->width - x1));
            					}
HXLINE(1820)					if ((y1 < (int)0)) {
HXLINE(1822)						hitRect->y = (int)0;
HXLINE(1823)						hitRect->height = ::Math_obj::min((secondBitmapData->height + y1),this->height);
            					}
            					else {
HXLINE(1827)						int secondBitmapData2 = secondBitmapData->height;
HXDLIN(1827)						hitRect->height = ::Math_obj::min(secondBitmapData2,(this->height - y1));
            					}
HXLINE(1831)					 ::openfl::utils::ByteArrayData pixels = this->getPixels(hitRect);
HXLINE(1833)					Float _hx_tmp;
HXDLIN(1833)					if ((x1 < (int)0)) {
HXLINE(1833)						_hx_tmp = -(x1);
            					}
            					else {
HXLINE(1833)						_hx_tmp = (int)0;
            					}
HXDLIN(1833)					hitRect->x = _hx_tmp;
HXLINE(1834)					Float _hx_tmp1;
HXDLIN(1834)					if ((y1 < (int)0)) {
HXLINE(1834)						_hx_tmp1 = -(y1);
            					}
            					else {
HXLINE(1834)						_hx_tmp1 = (int)0;
            					}
HXDLIN(1834)					hitRect->y = _hx_tmp1;
HXLINE(1836)					 ::openfl::utils::ByteArrayData testPixels = secondBitmapData->getPixels(hitRect);
HXLINE(1838)					int length = ::Std_obj::_hx_int((hitRect->width * hitRect->height));
HXLINE(1839)					int pixel1;
HXDLIN(1839)					int testPixel;
HXLINE(1841)					{
HXLINE(1841)						int _g1 = (int)0;
HXDLIN(1841)						int _g = length;
HXDLIN(1841)						while((_g1 < _g)){
HXLINE(1841)							_g1 = (_g1 + (int)1);
HXDLIN(1841)							int i = (_g1 - (int)1);
HXLINE(1843)							pixel1 = pixels->readUnsignedInt();
HXLINE(1844)							testPixel = testPixels->readUnsignedInt();
HXLINE(1846)							bool _hx_tmp2;
HXDLIN(1846)							if ((((int)((int)pixel1 >> (int)(int)24) & (int)(int)255) > firstAlphaThreshold)) {
HXLINE(1846)								_hx_tmp2 = (((int)((int)testPixel >> (int)(int)24) & (int)(int)255) > secondAlphaThreshold);
            							}
            							else {
HXLINE(1846)								_hx_tmp2 = false;
            							}
HXDLIN(1846)							if (_hx_tmp2) {
HXLINE(1848)								::openfl::geom::Rectangle_obj::_hx___pool->release(hitRect);
HXLINE(1849)								return true;
            							}
            						}
            					}
            				}
HXLINE(1857)				::openfl::geom::Rectangle_obj::_hx___pool->release(hitRect);
            			}
            			else {
HXLINE(1859)				if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Rectangle >())) {
HXLINE(1861)					 ::openfl::geom::Rectangle secondRectangle = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(1862)					secondRectangle->copyFrom(( ( ::openfl::geom::Rectangle)(secondObject) ));
HXLINE(1863)					secondRectangle->offset(-(firstPoint->x),-(firstPoint->y));
HXLINE(1864)					secondRectangle->_hx___contract((int)0,(int)0,this->width,this->height);
HXLINE(1866)					bool _hx_tmp3;
HXDLIN(1866)					if ((secondRectangle->width > (int)0)) {
HXLINE(1866)						_hx_tmp3 = (secondRectangle->height > (int)0);
            					}
            					else {
HXLINE(1866)						_hx_tmp3 = false;
            					}
HXDLIN(1866)					if (_hx_tmp3) {
HXLINE(1868)						 ::openfl::utils::ByteArrayData pixels1 = this->getPixels(secondRectangle);
HXLINE(1869)						int length1 = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels1) / (Float)(int)4));
HXLINE(1870)						int pixel2;
HXLINE(1872)						{
HXLINE(1872)							int _g11 = (int)0;
HXDLIN(1872)							int _g2 = length1;
HXDLIN(1872)							while((_g11 < _g2)){
HXLINE(1872)								_g11 = (_g11 + (int)1);
HXDLIN(1872)								int i1 = (_g11 - (int)1);
HXLINE(1874)								pixel2 = pixels1->readUnsignedInt();
HXLINE(1876)								if ((((int)((int)pixel2 >> (int)(int)24) & (int)(int)255) > firstAlphaThreshold)) {
HXLINE(1878)									::openfl::geom::Rectangle_obj::_hx___pool->release(secondRectangle);
HXLINE(1879)									return true;
            								}
            							}
            						}
            					}
HXLINE(1887)					::openfl::geom::Rectangle_obj::_hx___pool->release(secondRectangle);
            				}
            			}
            		}
HXLINE(1891)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,hitTest,return )

void BitmapData_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1957_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::merge( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1964_merge)
HXLINE(1967)		bool _hx_tmp;
HXDLIN(1967)		bool _hx_tmp1;
HXDLIN(1967)		bool _hx_tmp2;
HXDLIN(1967)		bool _hx_tmp3;
HXDLIN(1967)		if (!(!(this->readable))) {
HXLINE(1967)			_hx_tmp3 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE(1967)			_hx_tmp3 = true;
            		}
HXDLIN(1967)		if (!(_hx_tmp3)) {
HXLINE(1967)			_hx_tmp2 = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE(1967)			_hx_tmp2 = true;
            		}
HXDLIN(1967)		if (!(_hx_tmp2)) {
HXLINE(1967)			_hx_tmp1 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1967)			_hx_tmp1 = true;
            		}
HXDLIN(1967)		if (!(_hx_tmp1)) {
HXLINE(1967)			_hx_tmp = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(1967)			_hx_tmp = true;
            		}
HXDLIN(1967)		if (_hx_tmp) {
HXLINE(1967)			return;
            		}
HXLINE(1968)		 ::lime::graphics::Image _hx_tmp4 = this->image;
HXDLIN(1968)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(1968)		 ::lime::math::Rectangle _hx_tmp5 = sourceRect->_hx___toLimeRectangle();
HXDLIN(1968)		_hx_tmp4->merge(sourceBitmapData1,_hx_tmp5,destPoint->_hx___toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,merge,(void))

void BitmapData_obj::noise(int randomSeed,hx::Null< int >  __o_low,hx::Null< int >  __o_high,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< int >,randomSeed1) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2009_noise)
HXLINE(2010)			randomSeed1[(int)0] = ((randomSeed1->__get((int)0) * (int)1103515245) + (int)12345);
HXLINE(2011)			return hx::Mod(::Std_obj::_hx_int(::Math_obj::abs(((Float)randomSeed1->__get((int)0) / (Float)(int)65536))),(int)32768);
            		}
            		HX_END_LOCAL_FUNC0(return)

int low = __o_low.Default(0);
int high = __o_high.Default(255);
int channelOptions = __o_channelOptions.Default(7);
bool grayScale = __o_grayScale.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2002_noise)
HXDLIN(2002)		::Array< int > randomSeed1 = ::Array_obj< int >::__new(1)->init(0,randomSeed);
HXLINE(2004)		if (!(this->readable)) {
HXLINE(2004)			return;
            		}
HXLINE(2008)		 ::Dynamic func =  ::Dynamic(new _hx_Closure_0(randomSeed1));
HXLINE(2007)		 ::Dynamic rand = func;
HXLINE(2014)		rand();
HXLINE(2017)		int range = (high - low);
HXLINE(2018)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(2018)		 ::openfl::utils::ByteArrayData data = this1;
HXLINE(2020)		bool redChannel = (((int)channelOptions & (int)(int)1) == (int)1);
HXLINE(2021)		bool greenChannel = (((int)((int)channelOptions & (int)(int)2) >> (int)(int)1) == (int)1);
HXLINE(2022)		bool blueChannel = (((int)((int)channelOptions & (int)(int)4) >> (int)(int)2) == (int)1);
HXLINE(2023)		bool alphaChannel = (((int)((int)channelOptions & (int)(int)8) >> (int)(int)3) == (int)1);
HXLINE(2025)		{
HXLINE(2025)			int _g1 = (int)0;
HXDLIN(2025)			int _g = this->height;
HXDLIN(2025)			while((_g1 < _g)){
HXLINE(2025)				_g1 = (_g1 + (int)1);
HXDLIN(2025)				int y = (_g1 - (int)1);
HXLINE(2027)				{
HXLINE(2027)					int _g3 = (int)0;
HXDLIN(2027)					int _g2 = this->width;
HXDLIN(2027)					while((_g3 < _g2)){
HXLINE(2027)						_g3 = (_g3 + (int)1);
HXDLIN(2027)						int x = (_g3 - (int)1);
HXLINE(2030)						int red = (int)0;
HXLINE(2031)						int blue = (int)0;
HXLINE(2032)						int green = (int)0;
HXLINE(2033)						int alpha = (int)255;
HXLINE(2035)						if (grayScale) {
HXLINE(2037)							blue = (low + hx::Mod(( (int)(rand()) ),range));
HXDLIN(2037)							green = blue;
HXDLIN(2037)							red = green;
HXLINE(2038)							alpha = (int)255;
            						}
            						else {
HXLINE(2042)							if (redChannel) {
HXLINE(2042)								red = (low + hx::Mod(( (int)(rand()) ),range));
            							}
HXLINE(2043)							if (greenChannel) {
HXLINE(2043)								green = (low + hx::Mod(( (int)(rand()) ),range));
            							}
HXLINE(2044)							if (blueChannel) {
HXLINE(2044)								blue = (low + hx::Mod(( (int)(rand()) ),range));
            							}
HXLINE(2045)							if (alphaChannel) {
HXLINE(2045)								alpha = (low + hx::Mod(( (int)(rand()) ),range));
            							}
            						}
HXLINE(2048)						int rgb = alpha;
HXLINE(2049)						rgb = (((int)rgb << (int)(int)8) + red);
HXLINE(2050)						rgb = (((int)rgb << (int)(int)8) + green);
HXLINE(2051)						rgb = (((int)rgb << (int)(int)8) + blue);
HXLINE(2053)						this->setPixel32(x,y,rgb);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

void BitmapData_obj::paletteMap( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::Array< int > redArray,::Array< int > greenArray,::Array< int > blueArray,::Array< int > alphaArray){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2060_paletteMap)
HXLINE(2062)		int sw = ::Std_obj::_hx_int(sourceRect->width);
HXLINE(2063)		int sh = ::Std_obj::_hx_int(sourceRect->height);
HXLINE(2065)		 ::openfl::utils::ByteArrayData pixels = sourceBitmapData->getPixels(sourceRect);
HXLINE(2067)		int pixelValue;
HXDLIN(2067)		int r;
HXDLIN(2067)		int g;
HXDLIN(2067)		int b;
HXDLIN(2067)		int a;
HXDLIN(2067)		int color;
HXLINE(2069)		{
HXLINE(2069)			int _g1 = (int)0;
HXDLIN(2069)			int _g = (sh * sw);
HXDLIN(2069)			while((_g1 < _g)){
HXLINE(2069)				_g1 = (_g1 + (int)1);
HXDLIN(2069)				int i = (_g1 - (int)1);
HXLINE(2071)				pixelValue = pixels->readUnsignedInt();
HXLINE(2073)				if (hx::IsNull( alphaArray )) {
HXLINE(2073)					a = ((int)pixelValue & (int)(int)-16777216);
            				}
            				else {
HXLINE(2073)					a = alphaArray->__get(((int)((int)pixelValue >> (int)(int)24) & (int)(int)255));
            				}
HXLINE(2074)				if (hx::IsNull( redArray )) {
HXLINE(2074)					r = ((int)pixelValue & (int)(int)16711680);
            				}
            				else {
HXLINE(2074)					r = redArray->__get(((int)((int)pixelValue >> (int)(int)16) & (int)(int)255));
            				}
HXLINE(2075)				if (hx::IsNull( greenArray )) {
HXLINE(2075)					g = ((int)pixelValue & (int)(int)65280);
            				}
            				else {
HXLINE(2075)					g = greenArray->__get(((int)((int)pixelValue >> (int)(int)8) & (int)(int)255));
            				}
HXLINE(2076)				if (hx::IsNull( blueArray )) {
HXLINE(2076)					b = ((int)pixelValue & (int)(int)255);
            				}
            				else {
HXLINE(2076)					b = blueArray->__get(((int)pixelValue & (int)(int)255));
            				}
HXLINE(2078)				color = (((a + r) + g) + b);
HXLINE(2080)				pixels->position = (i * (int)4);
HXLINE(2081)				pixels->writeUnsignedInt(color);
            			}
            		}
HXLINE(2085)		pixels->position = (int)0;
HXLINE(2086)		 ::openfl::geom::Rectangle destRect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2087)		destRect->setTo(destPoint->x,destPoint->y,sw,sh);
HXLINE(2088)		this->setPixels(destRect,pixels);
HXLINE(2089)		::openfl::geom::Rectangle_obj::_hx___pool->release(destRect);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,paletteMap,(void))

void BitmapData_obj::perlinNoise(Float baseX,Float baseY,int numOctaves,int randomSeed,bool stitch,bool fractalNoise,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale,::Array< ::Dynamic> offsets){
int channelOptions = __o_channelOptions.Default(7);
bool grayScale = __o_grayScale.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2160_perlinNoise)
HXLINE(2162)		if (!(this->readable)) {
HXLINE(2162)			return;
            		}
HXLINE(2163)		 ::openfl::_internal::utils::PerlinNoise noise =  ::openfl::_internal::utils::PerlinNoise_obj::__alloc( HX_CTX ,randomSeed,numOctaves,channelOptions,grayScale,((Float)0.5),stitch,((Float)0.15));
HXLINE(2164)		noise->fill(hx::ObjectPtr<OBJ_>(this),baseX,baseY,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC9(BitmapData_obj,perlinNoise,(void))

void BitmapData_obj::scroll(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2179_scroll)
HXLINE(2181)		if (!(this->readable)) {
HXLINE(2181)			return;
            		}
HXLINE(2182)		this->image->scroll(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setPixel(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2204_setPixel)
HXLINE(2206)		if (!(this->readable)) {
HXLINE(2206)			return;
            		}
HXLINE(2208)		this->image->setPixel(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2245_setPixel32)
HXLINE(2247)		if (!(this->readable)) {
HXLINE(2247)			return;
            		}
HXLINE(2249)		this->image->setPixel32(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::geom::Rectangle rect, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2274_setPixels)
HXLINE(2276)		bool _hx_tmp;
HXDLIN(2276)		if (!(!(this->readable))) {
HXLINE(2276)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(2276)			_hx_tmp = true;
            		}
HXDLIN(2276)		if (_hx_tmp) {
HXLINE(2276)			return;
            		}
HXLINE(2278)		Float length = ((rect->width * rect->height) * (int)4);
HXLINE(2279)		int _hx_int = (byteArray->length - byteArray->position);
HXDLIN(2279)		Float _hx_tmp1;
HXDLIN(2279)		if ((_hx_int < (int)0)) {
HXLINE(2279)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(2279)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(2279)		if ((_hx_tmp1 < length)) {
HXLINE(2279)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("End of file was encountered.",d3,7b,d9,4f),(int)2030));
            		}
HXLINE(2282)		 ::lime::graphics::Image _hx_tmp2 = this->image;
HXDLIN(2282)		 ::lime::math::Rectangle _hx_tmp3 = rect->_hx___toLimeRectangle();
HXDLIN(2282)		 ::lime::utils::BytePointerData _hx_tmp4 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytePointer(byteArray);
HXDLIN(2282)		_hx_tmp2->setPixels(_hx_tmp3,_hx_tmp4,(int)1,::openfl::utils::_Endian::Endian_Impl__obj::toLimeEndian(byteArray->_hx___endian));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::openfl::geom::Rectangle rect, ::openfl::_Vector::IntVector inputVector){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2297_setVector)
HXLINE(2299)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(2299)		 ::openfl::utils::ByteArrayData byteArray = this1;
HXLINE(2300)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(byteArray,(inputVector->get_length() * (int)4));
HXLINE(2302)		{
HXLINE(2302)			int _g = (int)0;
HXDLIN(2302)			while((_g < inputVector->get_length())){
HXLINE(2302)				int color = inputVector->get(_g);
HXDLIN(2302)				_g = (_g + (int)1);
HXLINE(2304)				byteArray->writeUnsignedInt(color);
            			}
            		}
HXLINE(2308)		byteArray->position = (int)0;
HXLINE(2309)		this->setPixels(rect,byteArray);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

int BitmapData_obj::threshold( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::String operation,int threshold,hx::Null< int >  __o_color,hx::Null< int >  __o_mask,hx::Null< bool >  __o_copySource){
int color = __o_color.Default(0);
int mask = __o_mask.Default(-1);
bool copySource = __o_copySource.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2362_threshold)
HXLINE(2364)		bool _hx_tmp;
HXDLIN(2364)		bool _hx_tmp1;
HXDLIN(2364)		bool _hx_tmp2;
HXDLIN(2364)		bool _hx_tmp3;
HXDLIN(2364)		bool _hx_tmp4;
HXDLIN(2364)		bool _hx_tmp5;
HXDLIN(2364)		if (hx::IsNotNull( sourceBitmapData )) {
HXLINE(2364)			_hx_tmp5 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(2364)			_hx_tmp5 = true;
            		}
HXDLIN(2364)		if (!(_hx_tmp5)) {
HXLINE(2364)			_hx_tmp4 = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(2364)			_hx_tmp4 = true;
            		}
HXDLIN(2364)		if (!(_hx_tmp4)) {
HXLINE(2364)			_hx_tmp3 = (sourceRect->x > sourceBitmapData->width);
            		}
            		else {
HXLINE(2364)			_hx_tmp3 = true;
            		}
HXDLIN(2364)		if (!(_hx_tmp3)) {
HXLINE(2364)			_hx_tmp2 = (sourceRect->y > sourceBitmapData->height);
            		}
            		else {
HXLINE(2364)			_hx_tmp2 = true;
            		}
HXDLIN(2364)		if (!(_hx_tmp2)) {
HXLINE(2364)			_hx_tmp1 = (destPoint->x > this->width);
            		}
            		else {
HXLINE(2364)			_hx_tmp1 = true;
            		}
HXDLIN(2364)		if (!(_hx_tmp1)) {
HXLINE(2364)			_hx_tmp = (destPoint->y > this->height);
            		}
            		else {
HXLINE(2364)			_hx_tmp = true;
            		}
HXDLIN(2364)		if (_hx_tmp) {
HXLINE(2364)			return (int)0;
            		}
HXLINE(2367)		 ::lime::graphics::Image _hx_tmp6 = this->image;
HXDLIN(2367)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(2367)		 ::lime::math::Rectangle _hx_tmp7 = sourceRect->_hx___toLimeRectangle();
HXDLIN(2367)		return _hx_tmp6->threshold(sourceBitmapData1,_hx_tmp7,destPoint->_hx___toLimeVector2(),operation,threshold,color,mask,copySource,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

void BitmapData_obj::unlock( ::openfl::geom::Rectangle changeRect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2387_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::_hx___applyAlpha( ::openfl::utils::ByteArrayData alpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2394___applyAlpha)
HXLINE(2401)		 ::lime::utils::ArrayBufferView data = this->image->buffer->data;
HXLINE(2403)		{
HXLINE(2403)			int _g1 = (int)0;
HXDLIN(2403)			int _g = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(alpha);
HXDLIN(2403)			while((_g1 < _g)){
HXLINE(2403)				_g1 = (_g1 + (int)1);
HXDLIN(2403)				int i = (_g1 - (int)1);
HXLINE(2405)				{
HXLINE(2405)					int val = alpha->readUnsignedByte();
HXDLIN(2405)					{
HXLINE(2405)						int data1 = data->byteOffset;
HXDLIN(2405)						::__hxcpp_memory_set_byte(data->buffer->b,(data1 + ((i * (int)4) + (int)3)),val);
            					}
            				}
            			}
            		}
HXLINE(2409)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___applyAlpha,(void))

void BitmapData_obj::_hx___drawCairo(::Dynamic source, ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2414___drawCairo)
HXLINE(2418)		 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXLINE(2420)		if (hx::IsEq( source,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2422)			source = this->clone();
            		}
HXLINE(2426)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(2426)			cairo->set_antialias((int)1);
            		}
HXLINE(2428)		renderer->_hx___render(source);
HXLINE(2430)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(2430)			cairo->set_antialias((int)5);
            		}
HXLINE(2432)		::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(cairo->get_target());
HXLINE(2434)		this->image->dirty = true;
HXLINE(2435)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawCairo,(void))

void BitmapData_obj::_hx___drawCanvas(::Dynamic source, ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2442___drawCanvas)
HXLINE(2444)		 ::lime::graphics::ImageBuffer buffer = this->image->buffer;
HXLINE(2446)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(2446)			renderer->applySmoothing(buffer->_hx___srcContext,false);
            		}
HXLINE(2448)		renderer->_hx___render(source);
HXLINE(2450)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(2450)			renderer->applySmoothing(buffer->_hx___srcContext,true);
            		}
HXLINE(2452)		buffer->_hx___srcContext->__Field(HX_("setTransform",6a,ed,e2,69),hx::paccDynamic)((int)1,(int)0,(int)0,(int)1,(int)0,(int)0);
HXLINE(2453)		buffer->_hx___srcImageData = null();
HXLINE(2454)		buffer->data = null();
HXLINE(2456)		this->image->dirty = true;
HXLINE(2457)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawCanvas,(void))

void BitmapData_obj::_hx___drawGL(::Dynamic source, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2462___drawGL)
HXLINE(2464)		 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(2466)		 ::openfl::display3D::textures::TextureBase cacheRTT = context->_hx___state->renderToTexture;
HXLINE(2467)		bool cacheRTTDepthStencil = context->_hx___state->renderToTextureDepthStencil;
HXLINE(2468)		int cacheRTTAntiAlias = context->_hx___state->renderToTextureAntiAlias;
HXLINE(2469)		int cacheRTTSurfaceSelector = context->_hx___state->renderToTextureSurfaceSelector;
HXLINE(2471)		context->setRenderToTexture(this->getTexture(context),true,null(),null());
HXLINE(2473)		renderer->_hx___render(source);
HXLINE(2475)		if (hx::IsNotNull( cacheRTT )) {
HXLINE(2477)			context->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            		}
            		else {
HXLINE(2481)			context->setRenderToBackBuffer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawGL,(void))

void BitmapData_obj::_hx___fillRect( ::openfl::geom::Rectangle rect,int color,bool allowFramebuffer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2488___fillRect)
HXLINE(2491)		if (hx::IsNull( rect )) {
HXLINE(2491)			return;
            		}
HXLINE(2493)		bool _hx_tmp;
HXDLIN(2493)		if (this->transparent) {
HXLINE(2493)			_hx_tmp = (((int)color & (int)(int)-16777216) == (int)0);
            		}
            		else {
HXLINE(2493)			_hx_tmp = false;
            		}
HXDLIN(2493)		if (_hx_tmp) {
HXLINE(2495)			color = (int)0;
            		}
HXLINE(2499)		bool _hx_tmp1;
HXDLIN(2499)		bool _hx_tmp2;
HXDLIN(2499)		bool _hx_tmp3;
HXDLIN(2499)		if (allowFramebuffer) {
HXLINE(2499)			_hx_tmp3 = hx::IsNotNull( this->_hx___texture );
            		}
            		else {
HXLINE(2499)			_hx_tmp3 = false;
            		}
HXDLIN(2499)		if (_hx_tmp3) {
HXLINE(2499)			_hx_tmp2 = hx::IsNotNull( this->_hx___texture->_hx___glFramebuffer );
            		}
            		else {
HXLINE(2499)			_hx_tmp2 = false;
            		}
HXDLIN(2499)		if (_hx_tmp2) {
HXLINE(2499)			_hx_tmp1 = (::openfl::Lib_obj::get_current()->stage->_hx___renderer->_hx___type == HX_("opengl",6f,64,94,21));
            		}
            		else {
HXLINE(2499)			_hx_tmp1 = false;
            		}
HXDLIN(2499)		if (_hx_tmp1) {
HXLINE(2501)			 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(::openfl::Lib_obj::get_current()->stage->_hx___renderer) );
HXLINE(2502)			 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(2503)			int color1 = color;
HXLINE(2504)			bool useScissor = !(this->rect->equals(rect));
HXLINE(2506)			 ::openfl::display3D::textures::TextureBase cacheRTT = context->_hx___state->renderToTexture;
HXLINE(2507)			bool cacheRTTDepthStencil = context->_hx___state->renderToTextureDepthStencil;
HXLINE(2508)			int cacheRTTAntiAlias = context->_hx___state->renderToTextureAntiAlias;
HXLINE(2509)			int cacheRTTSurfaceSelector = context->_hx___state->renderToTextureSurfaceSelector;
HXLINE(2511)			context->setRenderToTexture(this->_hx___texture,null(),null(),null());
HXLINE(2513)			if (useScissor) {
HXLINE(2515)				context->setScissorRectangle(rect);
            			}
HXLINE(2519)			Float _hx_tmp4;
HXDLIN(2519)			if (this->transparent) {
HXLINE(2519)				_hx_tmp4 = ((Float)((int)hx::UShr(color1,(int)24) & (int)(int)255) / (Float)(int)255);
            			}
            			else {
HXLINE(2519)				_hx_tmp4 = (int)1;
            			}
HXDLIN(2519)			context->clear(((Float)((int)hx::UShr(color1,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color1,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color1 & (int)(int)255) / (Float)(int)255),_hx_tmp4,(int)0,(int)0,(int)1);
HXLINE(2521)			if (useScissor) {
HXLINE(2523)				context->setScissorRectangle(null());
            			}
HXLINE(2527)			if (hx::IsNotNull( cacheRTT )) {
HXLINE(2529)				context->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            			}
            			else {
HXLINE(2533)				context->setRenderToBackBuffer();
            			}
            		}
            		else {
HXLINE(2537)			if (this->readable) {
HXLINE(2539)				 ::lime::graphics::Image _hx_tmp5 = this->image;
HXDLIN(2539)				_hx_tmp5->fillRect(rect->_hx___toLimeRectangle(),color,(int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fillRect,(void))

void BitmapData_obj::_hx___fromBase64(::String base64,::String type){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2547___fromBase64)
HXLINE(2550)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBase64(base64,type);
HXLINE(2551)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBase64,(void))

void BitmapData_obj::_hx___fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2557___fromBytes)
HXLINE(2560)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXLINE(2561)		this->_hx___fromImage(image);
HXLINE(2563)		if (hx::IsNotNull( rawAlpha )) {
HXLINE(2565)			this->_hx___applyAlpha(rawAlpha);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBytes,(void))

void BitmapData_obj::_hx___fromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2573___fromFile)
HXLINE(2576)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromFile(path);
HXLINE(2577)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromFile,(void))

void BitmapData_obj::_hx___fromImage( ::lime::graphics::Image image){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2586___fromImage)
HXDLIN(2586)		bool _hx_tmp;
HXDLIN(2586)		if (hx::IsNotNull( image )) {
HXDLIN(2586)			_hx_tmp = hx::IsNotNull( image->buffer );
            		}
            		else {
HXDLIN(2586)			_hx_tmp = false;
            		}
HXDLIN(2586)		if (_hx_tmp) {
HXLINE(2588)			this->image = image;
HXLINE(2590)			this->width = image->width;
HXLINE(2591)			this->height = image->height;
HXLINE(2592)			this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,image->width,image->height);
HXLINE(2594)			this->_hx___textureWidth = this->width;
HXLINE(2595)			this->_hx___textureHeight = this->height;
HXLINE(2598)			image->set_format((int)2);
HXLINE(2599)			image->set_premultiplied(true);
HXLINE(2602)			this->readable = true;
HXLINE(2603)			this->_hx___isValid = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromImage,(void))

void BitmapData_obj::_hx___fromSymbol( ::openfl::_internal::formats::swf::SWFLite swf, ::openfl::_internal::symbols::BitmapSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2612___fromSymbol)
HXLINE(2614)		this->_hx___symbol = symbol;
HXLINE(2652)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromFile(symbol->path);
HXLINE(2654)		if (hx::IsNotNull( symbol->alpha )) {
HXLINE(2656)			 ::lime::graphics::Image alpha = ::lime::graphics::Image_obj::fromFile(symbol->alpha);
HXLINE(2658)			bool _hx_tmp;
HXDLIN(2658)			if (hx::IsNotNull( image )) {
HXLINE(2658)				_hx_tmp = hx::IsNotNull( alpha );
            			}
            			else {
HXLINE(2658)				_hx_tmp = false;
            			}
HXDLIN(2658)			if (_hx_tmp) {
HXLINE(2660)				 ::lime::math::Rectangle _hx_tmp1 = alpha->get_rect();
HXDLIN(2660)				image->copyChannel(alpha,_hx_tmp1, ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null()),::lime::graphics::ImageChannel_obj::RED_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
HXLINE(2661)				image->buffer->premultiplied = true;
            			}
            		}
HXLINE(2671)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromSymbol,(void))

void BitmapData_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2679___getBounds)
HXLINE(2681)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2682)		this->rect->_hx___transform(bounds,matrix);
HXLINE(2683)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(2684)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___getBounds,(void))

 ::lime::app::Future BitmapData_obj::_hx___loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2740___loadFromBase64)
HXLINE(2742)			_gthis->_hx___fromImage(image);
HXLINE(2743)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2737___loadFromBase64)
HXDLIN(2737)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(2740)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::_hx___loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2756___loadFromBytes)
HXLINE(2758)			_gthis->_hx___fromImage(image);
HXLINE(2760)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(2762)				_gthis->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(2766)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2753___loadFromBytes)
HXDLIN(2753)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(2756)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha,_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::_hx___loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2779___loadFromFile)
HXLINE(2781)			_gthis->_hx___fromImage(image);
HXLINE(2782)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2776___loadFromFile)
HXDLIN(2776)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(2779)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___loadFromFile,return )

void BitmapData_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2792___renderCairo)
HXLINE(2795)		if (!(this->readable)) {
HXLINE(2795)			return;
            		}
HXLINE(2797)		 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXLINE(2799)		renderer->applyMatrix(this->_hx___renderTransform,cairo);
HXLINE(2801)		 ::Dynamic surface = this->getSurface();
HXLINE(2803)		if (hx::IsNotNull( surface )) {
HXLINE(2805)			 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE(2807)			bool _hx_tmp;
HXDLIN(2807)			if (!(!(renderer->_hx___allowSmoothing))) {
HXLINE(2807)				_hx_tmp = (cairo->get_antialias() == (int)1);
            			}
            			else {
HXLINE(2807)				_hx_tmp = true;
            			}
HXDLIN(2807)			if (_hx_tmp) {
HXLINE(2809)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)3);
            			}
            			else {
HXLINE(2813)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)1);
            			}
HXLINE(2817)			cairo->set_source(pattern);
HXLINE(2818)			cairo->paint();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairo,(void))

void BitmapData_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2826___renderCairoMask)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairoMask,(void))

void BitmapData_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2833___renderCanvas)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvas,(void))

void BitmapData_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2855___renderCanvasMask)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvasMask,(void))

void BitmapData_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2862___renderDOM)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderDOM,(void))

void BitmapData_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2869___renderGL)
HXLINE(2871)		 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(2872)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(2874)		renderer->_hx___setBlendMode((int)10);
HXLINE(2876)		 ::openfl::display::DisplayObjectShader shader = renderer->_hx___defaultDisplayShader;
HXLINE(2877)		renderer->setShader(shader);
HXLINE(2878)		bool _hx_tmp;
HXDLIN(2878)		if (renderer->_hx___allowSmoothing) {
HXLINE(2878)			_hx_tmp = renderer->_hx___upscaled;
            		}
            		else {
HXLINE(2878)			_hx_tmp = false;
            		}
HXDLIN(2878)		renderer->applyBitmapData(hx::ObjectPtr<OBJ_>(this),_hx_tmp,null());
HXLINE(2879)		renderer->applyMatrix(renderer->_hx___getMatrix(this->_hx___worldTransform,(int)1));
HXLINE(2880)		renderer->applyAlpha(this->_hx___worldAlpha);
HXLINE(2881)		renderer->applyColorTransform(this->_hx___worldColorTransform);
HXLINE(2882)		renderer->updateShader();
HXLINE(2886)		 ::openfl::display3D::VertexBuffer3D vertexBuffer = this->getVertexBuffer(context);
HXLINE(2887)		if (hx::IsNotNull( shader->_hx___position )) {
HXLINE(2887)			context->setVertexBufferAt(shader->_hx___position->index,vertexBuffer,(int)0,(int)3);
            		}
HXLINE(2888)		if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE(2888)			context->setVertexBufferAt(shader->_hx___textureCoord->index,vertexBuffer,(int)3,(int)2);
            		}
HXLINE(2889)		 ::openfl::display3D::IndexBuffer3D indexBuffer = this->getIndexBuffer(context);
HXLINE(2890)		context->drawTriangles(indexBuffer,null(),null());
HXLINE(2896)		renderer->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGL,(void))

void BitmapData_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2901___renderGLMask)
HXLINE(2903)		 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(2904)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(2906)		 ::openfl::_internal::renderer::context3D::Context3DMaskShader shader = renderer->_hx___maskShader;
HXLINE(2907)		renderer->setShader(shader);
HXLINE(2908)		bool _hx_tmp;
HXDLIN(2908)		if (renderer->_hx___allowSmoothing) {
HXLINE(2908)			_hx_tmp = renderer->_hx___upscaled;
            		}
            		else {
HXLINE(2908)			_hx_tmp = false;
            		}
HXDLIN(2908)		renderer->applyBitmapData(hx::ObjectPtr<OBJ_>(this),_hx_tmp,null());
HXLINE(2909)		renderer->applyMatrix(renderer->_hx___getMatrix(this->_hx___worldTransform,(int)1));
HXLINE(2910)		renderer->updateShader();
HXLINE(2912)		 ::openfl::display3D::VertexBuffer3D vertexBuffer = this->getVertexBuffer(context);
HXLINE(2913)		if (hx::IsNotNull( shader->_hx___position )) {
HXLINE(2913)			context->setVertexBufferAt(shader->_hx___position->index,vertexBuffer,(int)0,(int)3);
            		}
HXLINE(2914)		if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE(2914)			context->setVertexBufferAt(shader->_hx___textureCoord->index,vertexBuffer,(int)3,(int)2);
            		}
HXLINE(2915)		 ::openfl::display3D::IndexBuffer3D indexBuffer = this->getIndexBuffer(context);
HXLINE(2916)		context->drawTriangles(indexBuffer,null(),null());
HXLINE(2922)		renderer->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGLMask,(void))

void BitmapData_obj::_hx___resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2927___resize)
HXLINE(2929)		this->width = width;
HXLINE(2930)		this->height = height;
HXLINE(2931)		this->rect->width = width;
HXLINE(2932)		this->rect->height = height;
HXLINE(2934)		this->_hx___textureWidth = width;
HXLINE(2935)		this->_hx___textureHeight = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___resize,(void))

void BitmapData_obj::_hx___setUVRect( ::openfl::display3D::Context3D context,Float x,Float y,Float width,Float height){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2940___setUVRect)
HXLINE(2942)		 ::openfl::display3D::VertexBuffer3D buffer = this->getVertexBuffer(context);
HXLINE(2944)		bool _hx_tmp;
HXDLIN(2944)		if (hx::IsNotNull( buffer )) {
HXLINE(2944)			bool _hx_tmp1;
HXDLIN(2944)			bool _hx_tmp2;
HXDLIN(2944)			if ((width == this->_hx___uvRect->width)) {
HXLINE(2944)				_hx_tmp2 = (height != this->_hx___uvRect->height);
            			}
            			else {
HXLINE(2944)				_hx_tmp2 = true;
            			}
HXDLIN(2944)			if (!(_hx_tmp2)) {
HXLINE(2944)				_hx_tmp1 = (x != this->_hx___uvRect->x);
            			}
            			else {
HXLINE(2944)				_hx_tmp1 = true;
            			}
HXDLIN(2944)			if (!(_hx_tmp1)) {
HXLINE(2944)				_hx_tmp = (y != this->_hx___uvRect->y);
            			}
            			else {
HXLINE(2944)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(2944)			_hx_tmp = false;
            		}
HXDLIN(2944)		if (_hx_tmp) {
HXLINE(2946)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(2948)			if (hx::IsNull( this->_hx___uvRect )) {
HXLINE(2948)				this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE(2949)			this->_hx___uvRect->setTo(x,y,width,height);
HXLINE(2951)			Float uvX;
HXDLIN(2951)			if ((this->_hx___textureWidth > (int)0)) {
HXLINE(2951)				uvX = ((Float)x / (Float)this->_hx___textureWidth);
            			}
            			else {
HXLINE(2951)				uvX = (int)0;
            			}
HXLINE(2952)			Float uvY;
HXDLIN(2952)			if ((this->_hx___textureHeight > (int)0)) {
HXLINE(2952)				uvY = ((Float)y / (Float)this->_hx___textureHeight);
            			}
            			else {
HXLINE(2952)				uvY = (int)0;
            			}
HXLINE(2953)			Float uvWidth;
HXDLIN(2953)			if ((this->_hx___textureWidth > (int)0)) {
HXLINE(2953)				uvWidth = ((Float)width / (Float)this->_hx___textureWidth);
            			}
            			else {
HXLINE(2953)				uvWidth = (int)0;
            			}
HXLINE(2954)			Float uvHeight;
HXDLIN(2954)			if ((this->_hx___textureHeight > (int)0)) {
HXLINE(2954)				uvHeight = ((Float)height / (Float)this->_hx___textureHeight);
            			}
            			else {
HXLINE(2954)				uvHeight = (int)0;
            			}
HXLINE(2956)			{
HXLINE(2956)				 ::lime::utils::ArrayBufferView this1 = this->_hx___vertexBufferData;
HXDLIN(2956)				::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,width);
            			}
HXLINE(2957)			{
HXLINE(2957)				 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(2957)				::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + (int)4),height);
            			}
HXLINE(2958)			{
HXLINE(2958)				 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(2958)				Float val = (uvX + uvWidth);
HXDLIN(2958)				::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + (int)12),val);
            			}
HXLINE(2959)			{
HXLINE(2959)				 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(2959)				Float val1 = (uvY + uvHeight);
HXDLIN(2959)				::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + (int)16),val1);
            			}
HXLINE(2960)			{
HXLINE(2960)				 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(2960)				::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + (int)60),height);
            			}
HXLINE(2961)			{
HXLINE(2961)				 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(2961)				::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + (int)68),uvX);
            			}
HXLINE(2962)			{
HXLINE(2962)				 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(2962)				Float val2 = (uvY + uvHeight);
HXDLIN(2962)				::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + (int)72),val2);
            			}
HXLINE(2963)			{
HXLINE(2963)				 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(2963)				::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + (int)112),width);
            			}
HXLINE(2964)			{
HXLINE(2964)				 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(2964)				Float val3 = (uvX + uvWidth);
HXDLIN(2964)				::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + (int)124),val3);
            			}
HXLINE(2965)			{
HXLINE(2965)				 ::lime::utils::ArrayBufferView this10 = this->_hx___vertexBufferData;
HXDLIN(2965)				::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + (int)128),uvY);
            			}
HXLINE(2966)			{
HXLINE(2966)				 ::lime::utils::ArrayBufferView this11 = this->_hx___vertexBufferData;
HXDLIN(2966)				::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + (int)180),uvX);
            			}
HXLINE(2967)			{
HXLINE(2967)				 ::lime::utils::ArrayBufferView this12 = this->_hx___vertexBufferData;
HXDLIN(2967)				::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + (int)184),uvY);
            			}
HXLINE(2969)			this->_hx___vertexBuffer->uploadFromTypedArray(this->_hx___vertexBufferData,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,_hx___setUVRect,(void))

void BitmapData_obj::_hx___sync(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2976___sync)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,_hx___sync,(void))

void BitmapData_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2987___update)
HXDLIN(2987)		this->_hx___updateTransforms(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___update,(void))

void BitmapData_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2992___updateTransforms)
HXLINE(2994)		if (hx::IsNull( overrideTransform )) {
HXLINE(2996)			this->_hx___worldTransform->identity();
            		}
            		else {
HXLINE(3000)			this->_hx___worldTransform->copyFrom(overrideTransform);
            		}
HXLINE(3004)		this->_hx___renderTransform->copyFrom(this->_hx___worldTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateTransforms,(void))

int BitmapData_obj::_hx___vertexBufferStride;

 ::Dynamic BitmapData_obj::_hx___supportsBGRA;

int BitmapData_obj::_hx___textureFormat;

int BitmapData_obj::_hx___textureInternalFormat;

 ::lime::math::Vector2 BitmapData_obj::_hx___tempVector;

 ::openfl::display::BitmapData BitmapData_obj::fromBase64(::String base64,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1145_fromBase64)
HXLINE(1150)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,(int)0);
HXLINE(1151)		{
HXLINE(1151)			 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBase64(base64,type);
HXDLIN(1151)			bitmapData->_hx___fromImage(image);
            		}
HXLINE(1152)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBase64,return )

 ::openfl::display::BitmapData BitmapData_obj::fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1160_fromBytes)
HXLINE(1165)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,(int)0);
HXLINE(1166)		{
HXLINE(1166)			 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXDLIN(1166)			bitmapData->_hx___fromImage(image);
HXDLIN(1166)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(1166)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
            		}
HXLINE(1167)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBytes,return )

 ::openfl::display::BitmapData BitmapData_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1189_fromFile)
HXLINE(1194)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,true,(int)0);
HXLINE(1195)		bitmapData->_hx___fromFile(path);
HXLINE(1196)		if (hx::IsNotNull( bitmapData->image )) {
HXLINE(1196)			return bitmapData;
            		}
            		else {
HXLINE(1196)			return null();
            		}
HXDLIN(1196)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromFile,return )

 ::openfl::display::BitmapData BitmapData_obj::fromImage( ::lime::graphics::Image image,hx::Null< bool >  __o_transparent){
bool transparent = __o_transparent.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1204_fromImage)
HXLINE(1206)		bool _hx_tmp;
HXDLIN(1206)		if (hx::IsNotNull( image )) {
HXLINE(1206)			_hx_tmp = hx::IsNull( image->buffer );
            		}
            		else {
HXLINE(1206)			_hx_tmp = true;
            		}
HXDLIN(1206)		if (_hx_tmp) {
HXLINE(1206)			return null();
            		}
HXLINE(1208)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)0,(int)0,transparent,(int)0);
HXLINE(1209)		bitmapData->_hx___fromImage(image);
HXLINE(1210)		bitmapData->image->set_transparent(transparent);
HXLINE(1211)		if (hx::IsNotNull( bitmapData->image )) {
HXLINE(1211)			return bitmapData;
            		}
            		else {
HXLINE(1211)			return null();
            		}
HXDLIN(1211)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromImage,return )

 ::openfl::display::BitmapData BitmapData_obj::fromTexture( ::openfl::display3D::textures::RectangleTexture texture){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1217_fromTexture)
HXLINE(1219)		if (hx::IsNull( texture )) {
HXLINE(1219)			return null();
            		}
HXLINE(1221)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,texture->_hx___width,texture->_hx___height,true,(int)0);
HXLINE(1222)		bitmapData->readable = false;
HXLINE(1223)		bitmapData->_hx___texture = texture;
HXLINE(1224)		bitmapData->_hx___textureContext = texture->_hx___textureContext;
HXLINE(1225)		bitmapData->image = null();
HXLINE(1226)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromTexture,return )

 ::lime::app::Future BitmapData_obj::loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1901_loadFromBase64)
HXLINE(1901)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1899_loadFromBase64)
HXDLIN(1899)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1914_loadFromBytes)
HXLINE(1916)			 ::openfl::display::BitmapData bitmapData = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE(1918)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(1920)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(1924)			return ::lime::app::Future_obj::withValue(bitmapData);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1914_loadFromBytes)
HXDLIN(1914)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1939_loadFromFile)
HXLINE(1939)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1937_loadFromFile)
HXDLIN(1937)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,loadFromFile,return )


hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	hx::ObjectPtr< BitmapData_obj > __this = new BitmapData_obj();
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	BitmapData_obj *__this = (BitmapData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapData_obj), true, "openfl.display.BitmapData"));
	*(void **)__this = BitmapData_obj::_hx_vtable;
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(readable,"readable");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_MARK_MEMBER_NAME(_hx___indexBuffer,"__indexBuffer");
	HX_MARK_MEMBER_NAME(_hx___indexBufferContext,"__indexBufferContext");
	HX_MARK_MEMBER_NAME(_hx___indexBufferData,"__indexBufferData");
	HX_MARK_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___stencilBuffer,"__stencilBuffer");
	HX_MARK_MEMBER_NAME(_hx___surface,"__surface");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_MARK_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_MARK_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_MARK_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_MARK_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferContext,"__vertexBufferContext");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(readable,"readable");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_VISIT_MEMBER_NAME(_hx___indexBuffer,"__indexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferContext,"__indexBufferContext");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferData,"__indexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___stencilBuffer,"__stencilBuffer");
	HX_VISIT_MEMBER_NAME(_hx___surface,"__surface");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_VISIT_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_VISIT_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_VISIT_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_VISIT_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferContext,"__vertexBufferContext");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
}

hx::Val BitmapData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		if (HX_FIELD_EQ(inName,"noise") ) { return hx::Val( noise_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask ); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { return hx::Val( readable ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { return hx::Val( _hx___isMask ); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { return hx::Val( _hx___uvRect ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawGL") ) { return hx::Val( _hx___drawGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { return hx::Val( _hx___isValid ); }
		if (HX_FIELD_EQ(inName,"__surface") ) { return hx::Val( _hx___surface ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return hx::Val( getVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"histogram") ) { return hx::Val( histogram_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return hx::Val( setVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSurface") ) { return hx::Val( getSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"paletteMap") ) { return hx::Val( paletteMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fillRect") ) { return hx::Val( _hx___fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( transparent ); }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"perlinNoise") ) { return hx::Val( perlinNoise_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawCairo") ) { return hx::Val( _hx___drawCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromImage") ) { return hx::Val( _hx___fromImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setUVRect") ) { return hx::Val( _hx___setUVRect_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { return hx::Val( _hx___renderable ); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return hx::Val( _hx___scrollRect ); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return hx::Val( _hx___worldAlpha ); }
		if (HX_FIELD_EQ(inName,"disposeImage") ) { return hx::Val( disposeImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__applyAlpha") ) { return hx::Val( _hx___applyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawCanvas") ) { return hx::Val( _hx___drawCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer ); }
		if (HX_FIELD_EQ(inName,"__indexBuffer") ) { return hx::Val( _hx___indexBuffer ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { return hx::Val( _hx___textureWidth ); }
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { return hx::Val( _hx___vertexBuffer ); }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIndexBuffer") ) { return hx::Val( getIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromFile") ) { return hx::Val( _hx___loadFromFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__stencilBuffer") ) { return hx::Val( _hx___stencilBuffer ); }
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { return hx::Val( _hx___textureHeight ); }
		if (HX_FIELD_EQ(inName,"drawWithQuality") ) { return hx::Val( drawWithQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVertexBuffer") ) { return hx::Val( getVertexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromBytes") ) { return hx::Val( _hx___loadFromBytes_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { return hx::Val( _hx___textureContext ); }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { return hx::Val( _hx___textureVersion ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"__loadFromBase64") ) { return hx::Val( _hx___loadFromBase64_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__indexBufferData") ) { return hx::Val( _hx___indexBufferData ); }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { return hx::Val( _hx___vertexBufferData ); }
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return hx::Val( generateFilterRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { return hx::Val( _hx___framebufferContext ); }
		if (HX_FIELD_EQ(inName,"__indexBufferContext") ) { return hx::Val( _hx___indexBufferContext ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__vertexBufferContext") ) { return hx::Val( _hx___vertexBufferContext ); }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromImage") ) { outValue = fromImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromTexture") ) { outValue = fromTexture_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { outValue = ( _hx___tempVector ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { outValue = ( _hx___supportsBGRA ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBase64") ) { outValue = loadFromBase64_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { outValue = ( _hx___textureFormat ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { outValue = ( _hx___textureInternalFormat ); return true; }
	}
	return false;
}

hx::Val BitmapData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { readable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isMask") ) { _hx___isMask=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::BitmapSymbol >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { _hx___uvRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__surface") ) { _hx___surface=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBuffer") ) { _hx___indexBuffer=inValue.Cast<  ::openfl::display3D::IndexBuffer3D >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { _hx___textureWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { _hx___vertexBuffer=inValue.Cast<  ::openfl::display3D::VertexBuffer3D >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__stencilBuffer") ) { _hx___stencilBuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { _hx___textureHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { _hx___textureContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { _hx___textureVersion=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__indexBufferData") ) { _hx___indexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { _hx___vertexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { _hx___framebufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBufferContext") ) { _hx___indexBufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__vertexBufferContext") ) { _hx___vertexBufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { _hx___tempVector=ioValue.Cast<  ::lime::math::Vector2 >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { _hx___supportsBGRA=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { _hx___textureFormat=ioValue.Cast< int >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { _hx___textureInternalFormat=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"));
	outFields->push(HX_HCSTRING("__framebufferContext","\xa2","\x6b","\x52","\x89"));
	outFields->push(HX_HCSTRING("__indexBuffer","\x92","\xa6","\x1e","\x3e"));
	outFields->push(HX_HCSTRING("__indexBufferContext","\x7d","\xed","\x2f","\x1d"));
	outFields->push(HX_HCSTRING("__indexBufferData","\xdc","\xd9","\x26","\x67"));
	outFields->push(HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"));
	outFields->push(HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"));
	outFields->push(HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"));
	outFields->push(HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"));
	outFields->push(HX_HCSTRING("__stencilBuffer","\xfc","\xcc","\xeb","\xb8"));
	outFields->push(HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f"));
	outFields->push(HX_HCSTRING("__textureHeight","\x02","\x14","\x16","\x1d"));
	outFields->push(HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"));
	outFields->push(HX_HCSTRING("__textureWidth","\x4b","\xe6","\xc2","\xe3"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__uvRect","\x45","\x8f","\xb9","\x97"));
	outFields->push(HX_HCSTRING("__vertexBuffer","\xa4","\x32","\x6a","\x91"));
	outFields->push(HX_HCSTRING("__vertexBufferContext","\xab","\xe7","\x39","\x35"));
	outFields->push(HX_HCSTRING("__vertexBufferData","\xee","\xd6","\x5e","\x32"));
	outFields->push(HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::lime::graphics::Image*/ ,(int)offsetof(BitmapData_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,readable),HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(BitmapData_obj,_hx___framebuffer),HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2")},
	{hx::fsObject /*::lime::graphics::RenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___framebufferContext),HX_HCSTRING("__framebufferContext","\xa2","\x6b","\x52","\x89")},
	{hx::fsObject /*::openfl::display3D::IndexBuffer3D*/ ,(int)offsetof(BitmapData_obj,_hx___indexBuffer),HX_HCSTRING("__indexBuffer","\x92","\xa6","\x1e","\x3e")},
	{hx::fsObject /*::lime::graphics::RenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___indexBufferContext),HX_HCSTRING("__indexBufferContext","\x7d","\xed","\x2f","\x1d")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(BitmapData_obj,_hx___indexBufferData),HX_HCSTRING("__indexBufferData","\xdc","\xd9","\x26","\x67")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isMask),HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isValid),HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(BitmapData_obj,_hx___mask),HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___renderable),HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,_hx___scrollRect),HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(BitmapData_obj,_hx___stencilBuffer),HX_HCSTRING("__stencilBuffer","\xfc","\xcc","\xeb","\xb8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___surface),HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde")},
	{hx::fsObject /*::openfl::_internal::symbols::BitmapSymbol*/ ,(int)offsetof(BitmapData_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsObject /*::openfl::display3D::textures::RectangleTexture*/ ,(int)offsetof(BitmapData_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*::lime::graphics::RenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___textureContext),HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureHeight),HX_HCSTRING("__textureHeight","\x02","\x14","\x16","\x1d")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureVersion),HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureWidth),HX_HCSTRING("__textureWidth","\x4b","\xe6","\xc2","\xe3")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,_hx___uvRect),HX_HCSTRING("__uvRect","\x45","\x8f","\xb9","\x97")},
	{hx::fsObject /*::openfl::display3D::VertexBuffer3D*/ ,(int)offsetof(BitmapData_obj,_hx___vertexBuffer),HX_HCSTRING("__vertexBuffer","\xa4","\x32","\x6a","\x91")},
	{hx::fsObject /*::lime::graphics::RenderContext*/ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferContext),HX_HCSTRING("__vertexBufferContext","\xab","\xe7","\x39","\x35")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferData),HX_HCSTRING("__vertexBufferData","\xee","\xd6","\x5e","\x32")},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___worldAlpha),HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(BitmapData_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BitmapData_obj::_hx___vertexBufferStride,HX_HCSTRING("__vertexBufferStride","\xdd","\x59","\xa0","\x97")},
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::_hx___supportsBGRA,HX_HCSTRING("__supportsBGRA","\x58","\x53","\x57","\x0f")},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureFormat,HX_HCSTRING("__textureFormat","\x52","\x9b","\x58","\x18")},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureInternalFormat,HX_HCSTRING("__textureInternalFormat","\x6f","\x15","\xaa","\xa7")},
	{hx::fsObject /*::lime::math::Vector2*/ ,(void *) &BitmapData_obj::_hx___tempVector,HX_HCSTRING("__tempVector","\x17","\xea","\x60","\xeb")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"),
	HX_HCSTRING("__framebufferContext","\xa2","\x6b","\x52","\x89"),
	HX_HCSTRING("__indexBuffer","\x92","\xa6","\x1e","\x3e"),
	HX_HCSTRING("__indexBufferContext","\x7d","\xed","\x2f","\x1d"),
	HX_HCSTRING("__indexBufferData","\xdc","\xd9","\x26","\x67"),
	HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"),
	HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"),
	HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"),
	HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"),
	HX_HCSTRING("__stencilBuffer","\xfc","\xcc","\xeb","\xb8"),
	HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f"),
	HX_HCSTRING("__textureHeight","\x02","\x14","\x16","\x1d"),
	HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"),
	HX_HCSTRING("__textureWidth","\x4b","\xe6","\xc2","\xe3"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__uvRect","\x45","\x8f","\xb9","\x97"),
	HX_HCSTRING("__vertexBuffer","\xa4","\x32","\x6a","\x91"),
	HX_HCSTRING("__vertexBufferContext","\xab","\xe7","\x39","\x35"),
	HX_HCSTRING("__vertexBufferData","\xee","\xd6","\x5e","\x32"),
	HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("applyFilter","\xc6","\xdf","\x2f","\xc1"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("disposeImage","\x3c","\x6e","\xb8","\x62"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawWithQuality","\xb5","\xc5","\x05","\x6f"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("generateFilterRect","\x91","\x2c","\x98","\x7e"),
	HX_HCSTRING("getIndexBuffer","\xbc","\xb8","\x44","\x7d"),
	HX_HCSTRING("getVertexBuffer","\x3a","\x05","\x94","\x93"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("getSurface","\x37","\xec","\xaa","\xac"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("getVector","\xf9","\x39","\xb4","\x13"),
	HX_HCSTRING("histogram","\xa4","\xde","\x33","\x65"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("noise","\x9a","\x8f","\xc2","\x9f"),
	HX_HCSTRING("paletteMap","\xe1","\xae","\x2b","\x06"),
	HX_HCSTRING("perlinNoise","\x66","\x84","\xf8","\x8b"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("setVector","\x05","\x26","\x05","\xf7"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("__applyAlpha","\x30","\x9e","\x7b","\x05"),
	HX_HCSTRING("__drawCairo","\xc4","\xae","\x50","\x37"),
	HX_HCSTRING("__drawCanvas","\x1c","\x4b","\x99","\x32"),
	HX_HCSTRING("__drawGL","\x49","\xde","\x05","\x88"),
	HX_HCSTRING("__fillRect","\x67","\xb8","\xf1","\x0f"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImage","\x71","\x52","\x1e","\xa0"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__loadFromBase64","\x7f","\x97","\x5c","\x63"),
	HX_HCSTRING("__loadFromBytes","\x7b","\xfc","\x38","\x7c"),
	HX_HCSTRING("__loadFromFile","\x6c","\x0c","\xb1","\x7b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__setUVRect","\x27","\x52","\x8b","\x10"),
	HX_HCSTRING("__sync","\x7b","\x1d","\x58","\xfb"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___vertexBufferStride,"__vertexBufferStride");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___vertexBufferStride,"__vertexBufferStride");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
};

#endif

hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_HCSTRING("__vertexBufferStride","\xdd","\x59","\xa0","\x97"),
	HX_HCSTRING("__supportsBGRA","\x58","\x53","\x57","\x0f"),
	HX_HCSTRING("__textureFormat","\x52","\x9b","\x58","\x18"),
	HX_HCSTRING("__textureInternalFormat","\x6f","\x15","\xaa","\xa7"),
	HX_HCSTRING("__tempVector","\x17","\xea","\x60","\xeb"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImage","\x91","\x09","\xf2","\x71"),
	HX_HCSTRING("fromTexture","\x91","\x2c","\x21","\x37"),
	HX_HCSTRING("loadFromBase64","\x5f","\x0c","\x1d","\x2f"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	::String(null())
};

void BitmapData_obj::__register()
{
	hx::Object *dummy = new BitmapData_obj;
	BitmapData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.BitmapData","\xa3","\x12","\x41","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_160_boot)
HXDLIN( 160)		_hx___vertexBufferStride = (int)14;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_161_boot)
HXDLIN( 161)		_hx___supportsBGRA = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_166_boot)
HXDLIN( 166)		_hx___tempVector =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace openfl
} // end namespace display
