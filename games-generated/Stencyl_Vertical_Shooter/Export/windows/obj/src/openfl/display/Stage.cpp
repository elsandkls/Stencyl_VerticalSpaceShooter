// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ArraySort
#include <haxe/ds/ArraySort.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Int_Void
#include <lime/app/_Event_Float_Float_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Void
#include <lime/app/_Event_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_lime_ui_MouseButton_Void
#include <lime/app/_Event_Float_Float_lime_ui_MouseButton_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_lime_ui_MouseWheelMode_Void
#include <lime/app/_Event_Float_Float_lime_ui_MouseWheelMode_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Int_Void
#include <lime/app/_Event_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Int_Int_Void
#include <lime/app/_Event_String_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_graphics_RenderContext_Void
#include <lime/app/_Event_lime_graphics_RenderContext_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadAxis_Float_Void
#include <lime/app/_Event_lime_ui_GamepadAxis_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadButton_Void
#include <lime/app/_Event_lime_ui_GamepadButton_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Gamepad_Void
#include <lime/app/_Event_lime_ui_Gamepad_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Touch_Void
#include <lime/app/_Event_lime_ui_Touch_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Window_Void
#include <lime/app/_Event_lime_ui_Window_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_system_Display
#include <lime/system/Display.h>
#endif
#ifndef INCLUDED_lime_system_DisplayMode
#include <lime/system/DisplayMode.h>
#endif
#ifndef INCLUDED_lime_ui_Gamepad
#include <lime/ui/Gamepad.h>
#endif
#ifndef INCLUDED_lime_ui_Joystick
#include <lime/ui/Joystick.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_MouseWheelMode
#include <lime/ui/MouseWheelMode.h>
#endif
#ifndef INCLUDED_lime_ui_Touch
#include <lime/ui/Touch.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DState
#include <openfl/_internal/renderer/context3D/Context3DState.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_TouchData
#include <openfl/_internal/utils/TouchData.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_ActivityEvent
#include <openfl/events/ActivityEvent.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_FullScreenEvent
#include <openfl/events/FullScreenEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#include <openfl/events/UncaughtErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvents
#include <openfl/events/UncaughtErrorEvents.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInput
#include <openfl/ui/GameInput.h>
#endif
#ifndef INCLUDED_openfl_ui_Keyboard
#include <openfl/ui/Keyboard.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif
#ifndef INCLUDED_openfl_ui__MouseCursor_MouseCursor_Impl_
#include <openfl/ui/_MouseCursor/MouseCursor_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e171466d8d112c10_668_new,"openfl.display.Stage","new",0x908e7106,"openfl.display.Stage.new","openfl/display/Stage.hx",668,0xadca4c2c)
static const Float _hx_array_data_5c7c3614_2[] = {
	(Float)255,(Float)255,(Float)255,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_852_invalidate,"openfl.display.Stage","invalidate",0x70397995,"openfl.display.Stage.invalidate","openfl/display/Stage.hx",852,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_867_localToGlobal,"openfl.display.Stage","localToGlobal",0xb7e76def,"openfl.display.Stage.localToGlobal","openfl/display/Stage.hx",867,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_875_onGamepadAxisMove,"openfl.display.Stage","onGamepadAxisMove",0xc5912eda,"openfl.display.Stage.onGamepadAxisMove","openfl/display/Stage.hx",875,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_890_onGamepadButtonDown,"openfl.display.Stage","onGamepadButtonDown",0xf94bb7fc,"openfl.display.Stage.onGamepadButtonDown","openfl/display/Stage.hx",890,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_905_onGamepadButtonUp,"openfl.display.Stage","onGamepadButtonUp",0x91cf2b75,"openfl.display.Stage.onGamepadButtonUp","openfl/display/Stage.hx",905,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_920_onGamepadConnect,"openfl.display.Stage","onGamepadConnect",0xd0dcc662,"openfl.display.Stage.onGamepadConnect","openfl/display/Stage.hx",920,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_935_onGamepadDisconnect,"openfl.display.Stage","onGamepadDisconnect",0xb62bb4e4,"openfl.display.Stage.onGamepadDisconnect","openfl/display/Stage.hx",935,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_948_onJoystickAxisMove,"openfl.display.Stage","onJoystickAxisMove",0x5fc8fe87,"openfl.display.Stage.onJoystickAxisMove","openfl/display/Stage.hx",948,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_955_onJoystickButtonDown,"openfl.display.Stage","onJoystickButtonDown",0x6cd88ce9,"openfl.display.Stage.onJoystickButtonDown","openfl/display/Stage.hx",955,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_962_onJoystickButtonUp,"openfl.display.Stage","onJoystickButtonUp",0x2c06fb22,"openfl.display.Stage.onJoystickButtonUp","openfl/display/Stage.hx",962,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_969_onJoystickConnect,"openfl.display.Stage","onJoystickConnect",0x9b994b55,"openfl.display.Stage.onJoystickConnect","openfl/display/Stage.hx",969,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_976_onJoystickDisconnect,"openfl.display.Stage","onJoystickDisconnect",0x29b889d1,"openfl.display.Stage.onJoystickDisconnect","openfl/display/Stage.hx",976,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_983_onJoystickHatMove,"openfl.display.Stage","onJoystickHatMove",0x3124a777,"openfl.display.Stage.onJoystickHatMove","openfl/display/Stage.hx",983,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_990_onJoystickTrackballMove,"openfl.display.Stage","onJoystickTrackballMove",0x38b5dfe6,"openfl.display.Stage.onJoystickTrackballMove","openfl/display/Stage.hx",990,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_997_onKeyDown,"openfl.display.Stage","onKeyDown",0x4ccfc368,"openfl.display.Stage.onKeyDown","openfl/display/Stage.hx",997,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1006_onKeyUp,"openfl.display.Stage","onKeyUp",0x5bcb43e1,"openfl.display.Stage.onKeyUp","openfl/display/Stage.hx",1006,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1017_onModuleExit,"openfl.display.Stage","onModuleExit",0xdf5eda83,"openfl.display.Stage.onModuleExit","openfl/display/Stage.hx",1017,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1026_onMouseDown,"openfl.display.Stage","onMouseDown",0x156a4aae,"openfl.display.Stage.onMouseDown","openfl/display/Stage.hx",1026,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1050_onMouseMove,"openfl.display.Stage","onMouseMove",0x1b5d355d,"openfl.display.Stage.onMouseMove","openfl/display/Stage.hx",1050,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1065_onMouseMoveRelative,"openfl.display.Stage","onMouseMoveRelative",0xec53d349,"openfl.display.Stage.onMouseMoveRelative","openfl/display/Stage.hx",1065,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1072_onMouseUp,"openfl.display.Stage","onMouseUp",0x70fb4da7,"openfl.display.Stage.onMouseUp","openfl/display/Stage.hx",1072,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1097_onMouseWheel,"openfl.display.Stage","onMouseWheel",0x9385e4cf,"openfl.display.Stage.onMouseWheel","openfl/display/Stage.hx",1097,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1116_onPreloadComplete,"openfl.display.Stage","onPreloadComplete",0xfd196e69,"openfl.display.Stage.onPreloadComplete","openfl/display/Stage.hx",1116,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1123_onPreloadProgress,"openfl.display.Stage","onPreloadProgress",0x037c655d,"openfl.display.Stage.onPreloadProgress","openfl/display/Stage.hx",1123,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1132_onRenderContextLost,"openfl.display.Stage","onRenderContextLost",0xf63c6844,"openfl.display.Stage.onRenderContextLost","openfl/display/Stage.hx",1132,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1139_onRenderContextRestored,"openfl.display.Stage","onRenderContextRestored",0x98dd6bb6,"openfl.display.Stage.onRenderContextRestored","openfl/display/Stage.hx",1139,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1144_onTextEdit,"openfl.display.Stage","onTextEdit",0x0cd051b0,"openfl.display.Stage.onTextEdit","openfl/display/Stage.hx",1144,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1151_onTextInput,"openfl.display.Stage","onTextInput",0x7db2eda4,"openfl.display.Stage.onTextInput","openfl/display/Stage.hx",1151,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1188_onTouchCancel,"openfl.display.Stage","onTouchCancel",0xf0509be0,"openfl.display.Stage.onTouchCancel","openfl/display/Stage.hx",1188,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1205_onTouchMove,"openfl.display.Stage","onTouchMove",0x34750bf7,"openfl.display.Stage.onTouchMove","openfl/display/Stage.hx",1205,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1210_onTouchEnd,"openfl.display.Stage","onTouchEnd",0xc6cff9b5,"openfl.display.Stage.onTouchEnd","openfl/display/Stage.hx",1210,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1223_onTouchStart,"openfl.display.Stage","onTouchStart",0x299b14bc,"openfl.display.Stage.onTouchStart","openfl/display/Stage.hx",1223,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1238_onWindowActivate,"openfl.display.Stage","onWindowActivate",0xcfe358dc,"openfl.display.Stage.onWindowActivate","openfl/display/Stage.hx",1238,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1245_onWindowClose,"openfl.display.Stage","onWindowClose",0x0c1bf6ef,"openfl.display.Stage.onWindowClose","openfl/display/Stage.hx",1245,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1259_onWindowCreate,"openfl.display.Stage","onWindowCreate",0xfa19d7e5,"openfl.display.Stage.onWindowCreate","openfl/display/Stage.hx",1259,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1274_onWindowDeactivate,"openfl.display.Stage","onWindowDeactivate",0x9060f59d,"openfl.display.Stage.onWindowDeactivate","openfl/display/Stage.hx",1274,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1282_onWindowDropFile,"openfl.display.Stage","onWindowDropFile",0xd38db374,"openfl.display.Stage.onWindowDropFile","openfl/display/Stage.hx",1282,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1289_onWindowEnter,"openfl.display.Stage","onWindowEnter",0x343f4c4f,"openfl.display.Stage.onWindowEnter","openfl/display/Stage.hx",1289,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1296_onWindowExpose,"openfl.display.Stage","onWindowExpose",0x4288032d,"openfl.display.Stage.onWindowExpose","openfl/display/Stage.hx",1296,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1305_onWindowFocusIn,"openfl.display.Stage","onWindowFocusIn",0x0c9ba0d4,"openfl.display.Stage.onWindowFocusIn","openfl/display/Stage.hx",1305,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1323_onWindowFocusOut,"openfl.display.Stage","onWindowFocusOut",0xfb95acbf,"openfl.display.Stage.onWindowFocusOut","openfl/display/Stage.hx",1323,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1337_onWindowFullscreen,"openfl.display.Stage","onWindowFullscreen",0x4e13d3a4,"openfl.display.Stage.onWindowFullscreen","openfl/display/Stage.hx",1337,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1354_onWindowLeave,"openfl.display.Stage","onWindowLeave",0x360c142e,"openfl.display.Stage.onWindowLeave","openfl/display/Stage.hx",1354,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1366_onWindowMinimize,"openfl.display.Stage","onWindowMinimize",0x0bb07c47,"openfl.display.Stage.onWindowMinimize","openfl/display/Stage.hx",1366,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1374_onWindowMove,"openfl.display.Stage","onWindowMove",0x7f3617ba,"openfl.display.Stage.onWindowMove","openfl/display/Stage.hx",1374,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1381_onWindowResize,"openfl.display.Stage","onWindowResize",0x8685cadd,"openfl.display.Stage.onWindowResize","openfl/display/Stage.hx",1381,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1405_onWindowRestore,"openfl.display.Stage","onWindowRestore",0x35c8c245,"openfl.display.Stage.onWindowRestore","openfl/display/Stage.hx",1405,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1421_render,"openfl.display.Stage","render",0x050c3670,"openfl.display.Stage.render","openfl/display/Stage.hx",1421,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1531_update,"openfl.display.Stage","update",0x86e85123,"openfl.display.Stage.update","openfl/display/Stage.hx",1531,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1545___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1545,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1546___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1546,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1547___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1547,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1548___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1548,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1549___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1549,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1550___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1550,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1551___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1551,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1552___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1552,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1553___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1553,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1554___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1554,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1555___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1555,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1556___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1556,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1557___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1557,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1558___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1558,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1559___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1559,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1560___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1560,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1561___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1561,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1562___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1562,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1563___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1563,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1567___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1567,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1568___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1568,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1569___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1569,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1570___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1570,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1540___addWindow,"openfl.display.Stage","__addWindow",0x3d41c877,"openfl.display.Stage.__addWindow","openfl/display/Stage.hx",1540,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1580___broadcastEvent,"openfl.display.Stage","__broadcastEvent",0x79aa0c13,"openfl.display.Stage.__broadcastEvent","openfl/display/Stage.hx",1580,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1610___createRenderer,"openfl.display.Stage","__createRenderer",0x1d5b3f19,"openfl.display.Stage.__createRenderer","openfl/display/Stage.hx",1610,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1678___dispatchEvent,"openfl.display.Stage","__dispatchEvent",0xd6930186,"openfl.display.Stage.__dispatchEvent","openfl/display/Stage.hx",1678,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1694___dispatchPendingMouseEvent,"openfl.display.Stage","__dispatchPendingMouseEvent",0xd7687658,"openfl.display.Stage.__dispatchPendingMouseEvent","openfl/display/Stage.hx",1694,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1706___dispatchStack,"openfl.display.Stage","__dispatchStack",0xe4d9a0b4,"openfl.display.Stage.__dispatchStack","openfl/display/Stage.hx",1706,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1779___dispatchTarget,"openfl.display.Stage","__dispatchTarget",0xda90f865,"openfl.display.Stage.__dispatchTarget","openfl/display/Stage.hx",1779,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1793___drag,"openfl.display.Stage","__drag",0xf14b5a2e,"openfl.display.Stage.__drag","openfl/display/Stage.hx",1793,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1835___getInteractive,"openfl.display.Stage","__getInteractive",0xdc3c8ba6,"openfl.display.Stage.__getInteractive","openfl/display/Stage.hx",1835,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1848___globalToLocal,"openfl.display.Stage","__globalToLocal",0x7bdc8953,"openfl.display.Stage.__globalToLocal","openfl/display/Stage.hx",1848,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1861___handleError,"openfl.display.Stage","__handleError",0xdde7e406,"openfl.display.Stage.__handleError","openfl/display/Stage.hx",1861,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1909___onKey,"openfl.display.Stage","__onKey",0x83566246,"openfl.display.Stage.__onKey","openfl/display/Stage.hx",1909,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1971___onKey,"openfl.display.Stage","__onKey",0x83566246,"openfl.display.Stage.__onKey","openfl/display/Stage.hx",1971,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2083___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",2083,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2084___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",2084,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2085___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",2085,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2086___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",2086,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2079___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",2079,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2092___onMouse,"openfl.display.Stage","__onMouse",0xfccea68c,"openfl.display.Stage.__onMouse","openfl/display/Stage.hx",2092,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2372___onMouseWheel,"openfl.display.Stage","__onMouseWheel",0x6d35c26f,"openfl.display.Stage.__onMouseWheel","openfl/display/Stage.hx",2372,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2406___onTouch,"openfl.display.Stage","__onTouch",0x049ca826,"openfl.display.Stage.__onTouch","openfl/display/Stage.hx",2406,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2586___registerLimeModule,"openfl.display.Stage","__registerLimeModule",0x9fba419e,"openfl.display.Stage.__registerLimeModule","openfl/display/Stage.hx",2586,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2608___resize,"openfl.display.Stage","__resize",0x872a0aae,"openfl.display.Stage.__resize","openfl/display/Stage.hx",2608,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2694___setLogicalSize,"openfl.display.Stage","__setLogicalSize",0x16d2dd62,"openfl.display.Stage.__setLogicalSize","openfl/display/Stage.hx",2694,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2704___startDrag,"openfl.display.Stage","__startDrag",0x2df4a4fc,"openfl.display.Stage.__startDrag","openfl/display/Stage.hx",2704,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2755___stopDrag,"openfl.display.Stage","__stopDrag",0x21724450,"openfl.display.Stage.__stopDrag","openfl/display/Stage.hx",2755,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2763___unregisterLimeModule,"openfl.display.Stage","__unregisterLimeModule",0x975b14b7,"openfl.display.Stage.__unregisterLimeModule","openfl/display/Stage.hx",2763,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2782___update,"openfl.display.Stage","__update",0x05b436c3,"openfl.display.Stage.__update","openfl/display/Stage.hx",2782,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2847_get_color,"openfl.display.Stage","get_color",0x66e36ee0,"openfl.display.Stage.get_color","openfl/display/Stage.hx",2847,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2852_set_color,"openfl.display.Stage","set_color",0x4a345aec,"openfl.display.Stage.set_color","openfl/display/Stage.hx",2852,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2887_get_contentsScaleFactor,"openfl.display.Stage","get_contentsScaleFactor",0xe0f9f23c,"openfl.display.Stage.get_contentsScaleFactor","openfl/display/Stage.hx",2887,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2894_get_displayState,"openfl.display.Stage","get_displayState",0x7908a892,"openfl.display.Stage.get_displayState","openfl/display/Stage.hx",2894,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2899_set_displayState,"openfl.display.Stage","set_displayState",0xcf4a9606,"openfl.display.Stage.set_displayState","openfl/display/Stage.hx",2899,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2934_get_focus,"openfl.display.Stage","get_focus",0x21105d55,"openfl.display.Stage.get_focus","openfl/display/Stage.hx",2934,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2939_set_focus,"openfl.display.Stage","set_focus",0x04614961,"openfl.display.Stage.set_focus","openfl/display/Stage.hx",2939,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2974_get_frameRate,"openfl.display.Stage","get_frameRate",0x6a8511aa,"openfl.display.Stage.get_frameRate","openfl/display/Stage.hx",2974,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2987_set_frameRate,"openfl.display.Stage","set_frameRate",0xaf8af3b6,"openfl.display.Stage.set_frameRate","openfl/display/Stage.hx",2987,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3002_get_fullScreenHeight,"openfl.display.Stage","get_fullScreenHeight",0xb9098a45,"openfl.display.Stage.get_fullScreenHeight","openfl/display/Stage.hx",3002,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3009_get_fullScreenSourceRect,"openfl.display.Stage","get_fullScreenSourceRect",0x045c3cfd,"openfl.display.Stage.get_fullScreenSourceRect","openfl/display/Stage.hx",3009,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3014_set_fullScreenSourceRect,"openfl.display.Stage","set_fullScreenSourceRect",0x1736be71,"openfl.display.Stage.set_fullScreenSourceRect","openfl/display/Stage.hx",3014,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3039_get_fullScreenWidth,"openfl.display.Stage","get_fullScreenWidth",0xe22a2968,"openfl.display.Stage.get_fullScreenWidth","openfl/display/Stage.hx",3039,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3046_set_height,"openfl.display.Stage","set_height",0xdf60763e,"openfl.display.Stage.set_height","openfl/display/Stage.hx",3046,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3053_get_mouseX,"openfl.display.Stage","get_mouseX",0xa5a51a76,"openfl.display.Stage.get_mouseX","openfl/display/Stage.hx",3053,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3060_get_mouseY,"openfl.display.Stage","get_mouseY",0xa5a51a77,"openfl.display.Stage.get_mouseY","openfl/display/Stage.hx",3060,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3067_get_quality,"openfl.display.Stage","get_quality",0xceab1b7c,"openfl.display.Stage.get_quality","openfl/display/Stage.hx",3067,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3072_set_quality,"openfl.display.Stage","set_quality",0xd9182288,"openfl.display.Stage.set_quality","openfl/display/Stage.hx",3072,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3089_set_rotation,"openfl.display.Stage","set_rotation",0xa6542f55,"openfl.display.Stage.set_rotation","openfl/display/Stage.hx",3089,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3096_get_scaleMode,"openfl.display.Stage","get_scaleMode",0x5d33db0a,"openfl.display.Stage.get_scaleMode","openfl/display/Stage.hx",3096,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3105_set_scaleMode,"openfl.display.Stage","set_scaleMode",0xa239bd16,"openfl.display.Stage.set_scaleMode","openfl/display/Stage.hx",3105,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3112_set_scaleX,"openfl.display.Stage","set_scaleX",0x193a58e5,"openfl.display.Stage.set_scaleX","openfl/display/Stage.hx",3112,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3119_set_scaleY,"openfl.display.Stage","set_scaleY",0x193a58e6,"openfl.display.Stage.set_scaleY","openfl/display/Stage.hx",3119,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3126_get_tabEnabled,"openfl.display.Stage","get_tabEnabled",0x42a8f40f,"openfl.display.Stage.get_tabEnabled","openfl/display/Stage.hx",3126,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3133_set_tabEnabled,"openfl.display.Stage","set_tabEnabled",0x62c8dc83,"openfl.display.Stage.set_tabEnabled","openfl/display/Stage.hx",3133,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3140_get_tabIndex,"openfl.display.Stage","get_tabIndex",0xb58deb20,"openfl.display.Stage.get_tabIndex","openfl/display/Stage.hx",3140,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3147_set_tabIndex,"openfl.display.Stage","set_tabIndex",0xca870e94,"openfl.display.Stage.set_tabIndex","openfl/display/Stage.hx",3147,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3154_set_transform,"openfl.display.Stage","set_transform",0xbbf90f75,"openfl.display.Stage.set_transform","openfl/display/Stage.hx",3154,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3161_set_width,"openfl.display.Stage","set_width",0xca3a9f8f,"openfl.display.Stage.set_width","openfl/display/Stage.hx",3161,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3168_set_x,"openfl.display.Stage","set_x",0x86d03181,"openfl.display.Stage.set_x","openfl/display/Stage.hx",3168,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_3175_set_y,"openfl.display.Stage","set_y",0x86d03182,"openfl.display.Stage.set_y","openfl/display/Stage.hx",3175,0xadca4c2c)
namespace openfl{
namespace display{

void Stage_obj::__construct( ::lime::ui::Window window, ::Dynamic color){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_668_new)
HXLINE( 674)		super::__construct();
HXLINE( 676)		this->set_name(null());
HXLINE( 678)		this->_hx___color = (int)-1;
HXLINE( 679)		this->_hx___colorSplit = ::Array_obj< Float >::fromData( _hx_array_data_5c7c3614_2,3);
HXLINE( 680)		this->_hx___colorString = HX_("#FFFFFF",23,64,f1,28);
HXLINE( 681)		this->_hx___contentsScaleFactor = (int)1;
HXLINE( 682)		this->_hx___currentTabOrderIndex = (int)0;
HXLINE( 683)		this->_hx___deltaTime = (int)0;
HXLINE( 684)		this->_hx___displayState = (int)2;
HXLINE( 685)		this->_hx___mouseX = (int)0;
HXLINE( 686)		this->_hx___mouseY = (int)0;
HXLINE( 687)		this->_hx___lastClickTime = (int)0;
HXLINE( 688)		this->_hx___logicalWidth = (int)0;
HXLINE( 689)		this->_hx___logicalHeight = (int)0;
HXLINE( 690)		this->_hx___displayMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 691)		this->_hx___displayRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 692)		this->_hx___renderDirty = true;
HXLINE( 694)		int length = null();
HXDLIN( 694)		bool fixed = null();
HXDLIN( 694)		this->stage3Ds =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE( 695)		{
HXLINE( 695)			int _g = (int)0;
HXDLIN( 695)			while((_g < (int)4)){
HXLINE( 695)				_g = (_g + (int)1);
HXDLIN( 695)				int i = (_g - (int)1);
HXLINE( 696)				{
HXLINE( 696)					::Dynamic this1 = this->stage3Ds;
HXDLIN( 696)					( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::display::Stage3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this)));
            				}
            			}
            		}
HXLINE( 699)		this->stage = hx::ObjectPtr<OBJ_>(this);
HXLINE( 701)		this->align = (int)6;
HXLINE( 702)		this->allowsFullScreen = true;
HXLINE( 703)		this->allowsFullScreenInteractive = true;
HXLINE( 704)		this->_hx___quality = (int)1;
HXLINE( 705)		this->_hx___scaleMode = (int)2;
HXLINE( 706)		this->showDefaultContextMenu = true;
HXLINE( 707)		this->softKeyboardRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 708)		this->stageFocusRect = true;
HXLINE( 716)		this->_hx___clearBeforeRender = true;
HXLINE( 717)		this->_hx___forceRender = false;
HXLINE( 718)		this->_hx___stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 719)		this->_hx___rollOutStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 720)		this->_hx___mouseOutStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 721)		this->_hx___touchData =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 792)		this->application = window->application;
HXLINE( 793)		this->window = window;
HXLINE( 794)		this->set_color(color);
HXLINE( 798)		this->_hx___contentsScaleFactor = window->_hx___scale;
HXLINE( 799)		this->_hx___wasFullscreen = window->_hx___fullscreen;
HXLINE( 801)		this->_hx___resize();
HXLINE( 803)		if (hx::IsNull( ::openfl::Lib_obj::get_current()->stage )) {
HXLINE( 805)			 ::openfl::display::Stage _hx_tmp = this->stage;
HXDLIN( 805)			_hx_tmp->addChild(::openfl::Lib_obj::get_current());
            		}
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

void *Stage_obj::_hx_vtable = 0;

Dynamic Stage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Stage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x09aee5bc) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x09aee5bc;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
	}
}

static ::lime::app::IModule_obj _hx_openfl_display_Stage__hx_lime_app_IModule= {
	( void (hx::Object::*)( ::lime::app::Application))&::openfl::display::Stage_obj::_hx___registerLimeModule,
	( void (hx::Object::*)( ::lime::app::Application))&::openfl::display::Stage_obj::_hx___unregisterLimeModule,
};

void *Stage_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf464d6e9: return &_hx_openfl_display_Stage__hx_lime_app_IModule;
	}
	return super::_hx_getInterface(inHash);
}

void Stage_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_852_invalidate)
HXLINE( 854)		this->_hx___invalidated = true;
HXLINE( 857)		this->_hx___renderDirty = true;
            	}


 ::openfl::geom::Point Stage_obj::localToGlobal( ::openfl::geom::Point pos){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_867_localToGlobal)
HXDLIN( 867)		return pos->clone();
            	}


void Stage_obj::onGamepadAxisMove( ::lime::ui::Gamepad gamepad,int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_875_onGamepadAxisMove)
HXDLIN( 875)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 877)			::openfl::ui::GameInput_obj::_hx___onGamepadAxisMove(gamepad,axis,value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 881)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onGamepadAxisMove,(void))

void Stage_obj::onGamepadButtonDown( ::lime::ui::Gamepad gamepad,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_890_onGamepadButtonDown)
HXDLIN( 890)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 892)			::openfl::ui::GameInput_obj::_hx___onGamepadButtonDown(gamepad,button);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 896)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onGamepadButtonDown,(void))

void Stage_obj::onGamepadButtonUp( ::lime::ui::Gamepad gamepad,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_905_onGamepadButtonUp)
HXDLIN( 905)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 907)			::openfl::ui::GameInput_obj::_hx___onGamepadButtonUp(gamepad,button);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 911)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onGamepadButtonUp,(void))

void Stage_obj::onGamepadConnect( ::lime::ui::Gamepad gamepad){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_920_onGamepadConnect)
HXDLIN( 920)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 922)			::openfl::ui::GameInput_obj::_hx___onGamepadConnect(gamepad);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 926)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onGamepadConnect,(void))

void Stage_obj::onGamepadDisconnect( ::lime::ui::Gamepad gamepad){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_935_onGamepadDisconnect)
HXDLIN( 935)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 937)			::openfl::ui::GameInput_obj::_hx___onGamepadDisconnect(gamepad);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 941)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onGamepadDisconnect,(void))

void Stage_obj::onJoystickAxisMove( ::lime::ui::Joystick joystick,int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_948_onJoystickAxisMove)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onJoystickAxisMove,(void))

void Stage_obj::onJoystickButtonDown( ::lime::ui::Joystick joystick,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_955_onJoystickButtonDown)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onJoystickButtonDown,(void))

void Stage_obj::onJoystickButtonUp( ::lime::ui::Joystick joystick,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_962_onJoystickButtonUp)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onJoystickButtonUp,(void))

void Stage_obj::onJoystickConnect( ::lime::ui::Joystick joystick){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_969_onJoystickConnect)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onJoystickConnect,(void))

void Stage_obj::onJoystickDisconnect( ::lime::ui::Joystick joystick){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_976_onJoystickDisconnect)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onJoystickDisconnect,(void))

void Stage_obj::onJoystickHatMove( ::lime::ui::Joystick joystick,int hat,int position){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_983_onJoystickHatMove)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onJoystickHatMove,(void))

void Stage_obj::onJoystickTrackballMove( ::lime::ui::Joystick joystick,int trackball,Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_990_onJoystickTrackballMove)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onJoystickTrackballMove,(void))

void Stage_obj::onKeyDown( ::lime::ui::Window window,int keyCode,int modifier){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_997_onKeyDown)
HXLINE( 999)		bool _hx_tmp;
HXDLIN( 999)		if (hx::IsNotNull( this->window )) {
HXLINE( 999)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 999)			_hx_tmp = true;
            		}
HXDLIN( 999)		if (_hx_tmp) {
HXLINE( 999)			return;
            		}
HXLINE(1001)		this->_hx___onKey(HX_("keyDown",a1,69,47,9c),keyCode,modifier);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onKeyDown,(void))

void Stage_obj::onKeyUp( ::lime::ui::Window window,int keyCode,int modifier){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1006_onKeyUp)
HXLINE(1008)		bool _hx_tmp;
HXDLIN(1008)		if (hx::IsNotNull( this->window )) {
HXLINE(1008)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1008)			_hx_tmp = true;
            		}
HXDLIN(1008)		if (_hx_tmp) {
HXLINE(1008)			return;
            		}
HXLINE(1010)		this->_hx___onKey(HX_("keyUp",da,b9,fe,de),keyCode,modifier);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onKeyUp,(void))

void Stage_obj::onModuleExit(int code){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1017_onModuleExit)
HXDLIN(1017)		if (hx::IsNotNull( this->window )) {
HXLINE(1019)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("deactivate",34,5c,01,3c),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onModuleExit,(void))

void Stage_obj::onMouseDown( ::lime::ui::Window window,Float x,Float y,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1026_onMouseDown)
HXLINE(1028)		bool _hx_tmp;
HXDLIN(1028)		if (hx::IsNotNull( this->window )) {
HXLINE(1028)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1028)			_hx_tmp = true;
            		}
HXDLIN(1028)		if (_hx_tmp) {
HXLINE(1028)			return;
            		}
HXLINE(1030)		this->_hx___dispatchPendingMouseEvent();
HXLINE(1032)		::String type;
HXDLIN(1032)		switch((int)(button)){
            			case (int)1: {
HXLINE(1032)				type = HX_("middleMouseDown",12,2b,fe,01);
            			}
            			break;
            			case (int)2: {
HXLINE(1032)				type = HX_("rightMouseDown",ab,29,d7,cd);
            			}
            			break;
            			default:{
HXLINE(1032)				type = HX_("mouseDown",27,b1,c2,ee);
            			}
            		}
HXLINE(1040)		int _hx_tmp1 = ::Std_obj::_hx_int((x * window->_hx___scale));
HXDLIN(1040)		this->_hx___onMouse(type,_hx_tmp1,::Std_obj::_hx_int((y * window->_hx___scale)),button);
HXLINE(1042)		bool _hx_tmp2;
HXDLIN(1042)		if (!(this->showDefaultContextMenu)) {
HXLINE(1042)			_hx_tmp2 = (button == (int)2);
            		}
            		else {
HXLINE(1042)			_hx_tmp2 = false;
            		}
HXDLIN(1042)		if (_hx_tmp2) {
HXLINE(1044)			window->onMouseDown->cancel();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onMouseDown,(void))

void Stage_obj::onMouseMove( ::lime::ui::Window window,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1050_onMouseMove)
HXLINE(1052)		bool _hx_tmp;
HXDLIN(1052)		if (hx::IsNotNull( this->window )) {
HXLINE(1052)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1052)			_hx_tmp = true;
            		}
HXDLIN(1052)		if (_hx_tmp) {
HXLINE(1052)			return;
            		}
HXLINE(1057)		this->_hx___pendingMouseEvent = true;
HXLINE(1058)		this->_hx___pendingMouseX = ::Std_obj::_hx_int((x * window->_hx___scale));
HXLINE(1059)		this->_hx___pendingMouseY = ::Std_obj::_hx_int((y * window->_hx___scale));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onMouseMove,(void))

void Stage_obj::onMouseMoveRelative( ::lime::ui::Window window,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1065_onMouseMoveRelative)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onMouseMoveRelative,(void))

void Stage_obj::onMouseUp( ::lime::ui::Window window,Float x,Float y,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1072_onMouseUp)
HXLINE(1074)		bool _hx_tmp;
HXDLIN(1074)		if (hx::IsNotNull( this->window )) {
HXLINE(1074)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1074)			_hx_tmp = true;
            		}
HXDLIN(1074)		if (_hx_tmp) {
HXLINE(1074)			return;
            		}
HXLINE(1076)		this->_hx___dispatchPendingMouseEvent();
HXLINE(1078)		::String type;
HXDLIN(1078)		switch((int)(button)){
            			case (int)1: {
HXLINE(1078)				type = HX_("middleMouseUp",0b,8d,f5,3a);
            			}
            			break;
            			case (int)2: {
HXLINE(1078)				type = HX_("rightMouseUp",64,83,21,ab);
            			}
            			break;
            			default:{
HXLINE(1078)				type = HX_("mouseUp",e0,f3,72,c0);
            			}
            		}
HXLINE(1086)		int _hx_tmp1 = ::Std_obj::_hx_int((x * window->_hx___scale));
HXDLIN(1086)		this->_hx___onMouse(type,_hx_tmp1,::Std_obj::_hx_int((y * window->_hx___scale)),button);
HXLINE(1088)		bool _hx_tmp2;
HXDLIN(1088)		if (!(this->showDefaultContextMenu)) {
HXLINE(1088)			_hx_tmp2 = (button == (int)2);
            		}
            		else {
HXLINE(1088)			_hx_tmp2 = false;
            		}
HXDLIN(1088)		if (_hx_tmp2) {
HXLINE(1090)			window->onMouseUp->cancel();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onMouseUp,(void))

void Stage_obj::onMouseWheel( ::lime::ui::Window window,Float deltaX,Float deltaY, ::lime::ui::MouseWheelMode deltaMode){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1097_onMouseWheel)
HXLINE(1099)		bool _hx_tmp;
HXDLIN(1099)		if (hx::IsNotNull( this->window )) {
HXLINE(1099)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1099)			_hx_tmp = true;
            		}
HXDLIN(1099)		if (_hx_tmp) {
HXLINE(1099)			return;
            		}
HXLINE(1101)		this->_hx___dispatchPendingMouseEvent();
HXLINE(1103)		if (hx::IsEq( deltaMode,::lime::ui::MouseWheelMode_obj::PIXELS_dyn() )) {
HXLINE(1105)			int _hx_tmp1 = ::Std_obj::_hx_int((deltaX * window->_hx___scale));
HXDLIN(1105)			this->_hx___onMouseWheel(_hx_tmp1,::Std_obj::_hx_int((deltaY * window->_hx___scale)),deltaMode);
            		}
            		else {
HXLINE(1109)			int _hx_tmp2 = ::Std_obj::_hx_int(deltaX);
HXDLIN(1109)			this->_hx___onMouseWheel(_hx_tmp2,::Std_obj::_hx_int(deltaY),deltaMode);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onMouseWheel,(void))

void Stage_obj::onPreloadComplete(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1116_onPreloadComplete)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,onPreloadComplete,(void))

void Stage_obj::onPreloadProgress(int loaded,int total){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1123_onPreloadProgress)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onPreloadProgress,(void))

void Stage_obj::onRenderContextLost(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1132_onRenderContextLost)
HXDLIN(1132)		this->_hx___renderer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,onRenderContextLost,(void))

void Stage_obj::onRenderContextRestored( ::lime::graphics::RenderContext context){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1139_onRenderContextRestored)
HXDLIN(1139)		this->_hx___createRenderer();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onRenderContextRestored,(void))

void Stage_obj::onTextEdit( ::lime::ui::Window window,::String text,int start,int length){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1144_onTextEdit)
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onTextEdit,(void))

void Stage_obj::onTextInput( ::lime::ui::Window window,::String text){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1151_onTextInput)
HXLINE(1153)		bool _hx_tmp;
HXDLIN(1153)		if (hx::IsNotNull( this->window )) {
HXLINE(1153)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1153)			_hx_tmp = true;
            		}
HXDLIN(1153)		if (_hx_tmp) {
HXLINE(1153)			return;
            		}
HXLINE(1155)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(1157)		if (hx::IsNull( this->_hx___focus )) {
HXLINE(1159)			this->_hx___getInteractive(stack);
            		}
            		else {
HXLINE(1163)			this->_hx___focus->_hx___getInteractive(stack);
            		}
HXLINE(1167)		 ::openfl::events::TextEvent event =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,text);
HXLINE(1168)		if ((stack->length > (int)0)) {
HXLINE(1170)			stack->reverse();
HXLINE(1171)			this->_hx___dispatchStack(event,stack);
            		}
            		else {
HXLINE(1175)			this->_hx___dispatchEvent(event);
            		}
HXLINE(1179)		if (event->isDefaultPrevented()) {
HXLINE(1181)			window->onTextInput->cancel();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onTextInput,(void))

void Stage_obj::onTouchCancel( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1188_onTouchCancel)
HXLINE(1192)		if (hx::IsEq( this->_hx___primaryTouch,touch )) {
HXLINE(1194)			this->_hx___primaryTouch = null();
            		}
HXLINE(1198)		this->_hx___onTouch(HX_("touchEnd",5c,c5,09,00),touch);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchCancel,(void))

void Stage_obj::onTouchMove( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1205_onTouchMove)
HXDLIN(1205)		this->_hx___onTouch(HX_("touchMove",70,72,cd,0d),touch);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchMove,(void))

void Stage_obj::onTouchEnd( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1210_onTouchEnd)
HXLINE(1212)		if (hx::IsEq( this->_hx___primaryTouch,touch )) {
HXLINE(1214)			this->_hx___primaryTouch = null();
            		}
HXLINE(1218)		this->_hx___onTouch(HX_("touchEnd",5c,c5,09,00),touch);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchEnd,(void))

void Stage_obj::onTouchStart( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1223_onTouchStart)
HXLINE(1225)		if (hx::IsNull( this->_hx___primaryTouch )) {
HXLINE(1227)			this->_hx___primaryTouch = touch;
            		}
HXLINE(1231)		this->_hx___onTouch(HX_("touchBegin",ea,cd,e6,a9),touch);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchStart,(void))

void Stage_obj::onWindowActivate( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1238_onWindowActivate)
HXDLIN(1238)		bool _hx_tmp;
HXDLIN(1238)		if (hx::IsNotNull( this->window )) {
HXDLIN(1238)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN(1238)			_hx_tmp = true;
            		}
HXDLIN(1238)		if (_hx_tmp) {
HXDLIN(1238)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowActivate,(void))

void Stage_obj::onWindowClose( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1245_onWindowClose)
HXLINE(1247)		if (hx::IsEq( this->window,window )) {
HXLINE(1249)			this->window = null();
            		}
HXLINE(1253)		this->_hx___primaryTouch = null();
HXLINE(1254)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("deactivate",34,5c,01,3c),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowClose,(void))

void Stage_obj::onWindowCreate( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1259_onWindowCreate)
HXLINE(1261)		bool _hx_tmp;
HXDLIN(1261)		if (hx::IsNotNull( this->window )) {
HXLINE(1261)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1261)			_hx_tmp = true;
            		}
HXDLIN(1261)		if (_hx_tmp) {
HXLINE(1261)			return;
            		}
HXLINE(1263)		if (hx::IsNotNull( window->context )) {
HXLINE(1265)			this->_hx___createRenderer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowCreate,(void))

void Stage_obj::onWindowDeactivate( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1274_onWindowDeactivate)
HXDLIN(1274)		bool _hx_tmp;
HXDLIN(1274)		if (hx::IsNotNull( this->window )) {
HXDLIN(1274)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN(1274)			_hx_tmp = true;
            		}
HXDLIN(1274)		if (_hx_tmp) {
HXDLIN(1274)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowDeactivate,(void))

void Stage_obj::onWindowDropFile( ::lime::ui::Window window,::String file){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1282_onWindowDropFile)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onWindowDropFile,(void))

void Stage_obj::onWindowEnter( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1289_onWindowEnter)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowEnter,(void))

void Stage_obj::onWindowExpose( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1296_onWindowExpose)
HXLINE(1298)		bool _hx_tmp;
HXDLIN(1298)		if (hx::IsNotNull( this->window )) {
HXLINE(1298)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1298)			_hx_tmp = true;
            		}
HXDLIN(1298)		if (_hx_tmp) {
HXLINE(1298)			return;
            		}
HXLINE(1300)		this->_hx___renderDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowExpose,(void))

void Stage_obj::onWindowFocusIn( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1305_onWindowFocusIn)
HXLINE(1307)		bool _hx_tmp;
HXDLIN(1307)		if (hx::IsNotNull( this->window )) {
HXLINE(1307)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1307)			_hx_tmp = true;
            		}
HXDLIN(1307)		if (_hx_tmp) {
HXLINE(1307)			return;
            		}
HXLINE(1314)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("activate",b3,1b,ac,e5),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowFocusIn,(void))

void Stage_obj::onWindowFocusOut( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1323_onWindowFocusOut)
HXLINE(1325)		bool _hx_tmp;
HXDLIN(1325)		if (hx::IsNotNull( this->window )) {
HXLINE(1325)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1325)			_hx_tmp = true;
            		}
HXDLIN(1325)		if (_hx_tmp) {
HXLINE(1325)			return;
            		}
HXLINE(1327)		this->_hx___primaryTouch = null();
HXLINE(1328)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("deactivate",34,5c,01,3c),null(),null()));
HXLINE(1330)		 ::openfl::display::InteractiveObject currentFocus = this->get_focus();
HXLINE(1331)		this->set_focus(null());
HXLINE(1332)		this->_hx___cacheFocus = currentFocus;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowFocusOut,(void))

void Stage_obj::onWindowFullscreen( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1337_onWindowFullscreen)
HXLINE(1339)		bool _hx_tmp;
HXDLIN(1339)		if (hx::IsNotNull( this->window )) {
HXLINE(1339)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1339)			_hx_tmp = true;
            		}
HXDLIN(1339)		if (_hx_tmp) {
HXLINE(1339)			return;
            		}
HXLINE(1341)		this->_hx___resize();
HXLINE(1343)		if (!(this->_hx___wasFullscreen)) {
HXLINE(1345)			this->_hx___wasFullscreen = true;
HXLINE(1346)			if (hx::IsEq( this->_hx___displayState,(int)2 )) {
HXLINE(1346)				this->_hx___displayState = (int)1;
            			}
HXLINE(1347)			this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__alloc( HX_CTX ,HX_("fullScreen",5b,ae,48,2e),false,false,true,true));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowFullscreen,(void))

void Stage_obj::onWindowLeave( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1354_onWindowLeave)
HXLINE(1356)		bool _hx_tmp;
HXDLIN(1356)		bool _hx_tmp1;
HXDLIN(1356)		if (hx::IsNotNull( this->window )) {
HXLINE(1356)			_hx_tmp1 = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1356)			_hx_tmp1 = true;
            		}
HXDLIN(1356)		if (!(_hx_tmp1)) {
HXLINE(1356)			_hx_tmp = ::openfl::events::MouseEvent_obj::_hx___buttonDown;
            		}
            		else {
HXLINE(1356)			_hx_tmp = true;
            		}
HXDLIN(1356)		if (_hx_tmp) {
HXLINE(1356)			return;
            		}
HXLINE(1358)		this->_hx___dispatchPendingMouseEvent();
HXLINE(1359)		this->_hx___dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("mouseLeave",92,28,20,90),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowLeave,(void))

void Stage_obj::onWindowMinimize( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1366_onWindowMinimize)
HXDLIN(1366)		bool _hx_tmp;
HXDLIN(1366)		if (hx::IsNotNull( this->window )) {
HXDLIN(1366)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN(1366)			_hx_tmp = true;
            		}
HXDLIN(1366)		if (_hx_tmp) {
HXDLIN(1366)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowMinimize,(void))

void Stage_obj::onWindowMove( ::lime::ui::Window window,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1374_onWindowMove)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onWindowMove,(void))

void Stage_obj::onWindowResize( ::lime::ui::Window window,int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1381_onWindowResize)
HXLINE(1383)		bool _hx_tmp;
HXDLIN(1383)		if (hx::IsNotNull( this->window )) {
HXLINE(1383)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1383)			_hx_tmp = true;
            		}
HXDLIN(1383)		if (_hx_tmp) {
HXLINE(1383)			return;
            		}
HXLINE(1385)		this->_hx___resize();
HXLINE(1394)		bool _hx_tmp1;
HXDLIN(1394)		if (this->_hx___wasFullscreen) {
HXLINE(1394)			_hx_tmp1 = !(window->_hx___fullscreen);
            		}
            		else {
HXLINE(1394)			_hx_tmp1 = false;
            		}
HXDLIN(1394)		if (_hx_tmp1) {
HXLINE(1396)			this->_hx___wasFullscreen = false;
HXLINE(1397)			this->_hx___displayState = (int)2;
HXLINE(1398)			this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__alloc( HX_CTX ,HX_("fullScreen",5b,ae,48,2e),false,false,false,true));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onWindowResize,(void))

void Stage_obj::onWindowRestore( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1405_onWindowRestore)
HXLINE(1407)		bool _hx_tmp;
HXDLIN(1407)		if (hx::IsNotNull( this->window )) {
HXLINE(1407)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1407)			_hx_tmp = true;
            		}
HXDLIN(1407)		if (_hx_tmp) {
HXLINE(1407)			return;
            		}
HXLINE(1409)		bool _hx_tmp1;
HXDLIN(1409)		if (this->_hx___wasFullscreen) {
HXLINE(1409)			_hx_tmp1 = !(window->_hx___fullscreen);
            		}
            		else {
HXLINE(1409)			_hx_tmp1 = false;
            		}
HXDLIN(1409)		if (_hx_tmp1) {
HXLINE(1411)			this->_hx___wasFullscreen = false;
HXLINE(1412)			this->_hx___displayState = (int)2;
HXLINE(1413)			this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__alloc( HX_CTX ,HX_("fullScreen",5b,ae,48,2e),false,false,false,true));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowRestore,(void))

void Stage_obj::render( ::lime::graphics::RenderContext context){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1421_render)
HXLINE(1423)		if (this->_hx___rendering) {
HXLINE(1423)			return;
            		}
HXLINE(1424)		this->_hx___rendering = true;
HXLINE(1434)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("enterFrame",f5,03,50,02),null(),null()));
HXLINE(1435)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("frameConstructed",09,89,5d,98),null(),null()));
HXLINE(1436)		this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("exitFrame",2f,64,48,12),null(),null()));
HXLINE(1438)		this->_hx___renderable = true;
HXLINE(1439)		this->_hx___enterFrame(this->_hx___deltaTime);
HXLINE(1440)		this->_hx___deltaTime = (int)0;
HXLINE(1442)		bool shouldRender;
HXDLIN(1442)		if (hx::IsNotNull( this->_hx___renderer )) {
HXLINE(1442)			if (!(this->_hx___renderDirty)) {
HXLINE(1442)				shouldRender = this->_hx___forceRender;
            			}
            			else {
HXLINE(1442)				shouldRender = true;
            			}
            		}
            		else {
HXLINE(1442)			shouldRender = false;
            		}
HXLINE(1444)		bool _hx_tmp;
HXDLIN(1444)		if (this->_hx___invalidated) {
HXLINE(1444)			_hx_tmp = shouldRender;
            		}
            		else {
HXLINE(1444)			_hx_tmp = false;
            		}
HXDLIN(1444)		if (_hx_tmp) {
HXLINE(1446)			this->_hx___invalidated = false;
HXLINE(1447)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("render",56,6b,29,05),null(),null()));
            		}
HXLINE(1456)		this->_hx___update(false,true);
HXLINE(1459)		if (hx::IsNotNull( this->_hx___renderer )) {
HXLINE(1461)			if (hx::IsNotNull( this->context3D )) {
HXLINE(1463)				{
HXLINE(1463)					int _g = (int)0;
HXDLIN(1463)					 ::openfl::_Vector::ObjectVector _g1 = this->stage3Ds;
HXDLIN(1463)					while((_g < _g1->get_length())){
HXLINE(1463)						 ::openfl::display::Stage3D stage3D = _g1->get(_g).StaticCast<  ::openfl::display::Stage3D >();
HXDLIN(1463)						_g = (_g + (int)1);
HXLINE(1465)						this->context3D->_hx___renderStage3D(stage3D);
            					}
            				}
HXLINE(1469)				if (this->context3D->_hx___present) {
HXLINE(1469)					shouldRender = true;
            				}
            			}
HXLINE(1473)			if (shouldRender) {
HXLINE(1475)				if ((this->_hx___renderer->_hx___type == HX_("cairo",88,30,19,41))) {
HXLINE(1478)					hx::TCast<  ::openfl::display::CairoRenderer >::cast(this->_hx___renderer)->cairo = context->cairo;
            				}
HXLINE(1483)				if (hx::IsNull( this->context3D )) {
HXLINE(1485)					this->_hx___renderer->_hx___clear();
            				}
HXLINE(1489)				this->_hx___renderer->_hx___render(hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE(1491)				if (hx::IsNull( this->context3D )) {
HXLINE(1493)					this->window->onRender->cancel();
            				}
            			}
HXLINE(1497)			if (hx::IsNotNull( this->context3D )) {
HXLINE(1499)				if (!(this->context3D->_hx___present)) {
HXLINE(1501)					this->window->onRender->cancel();
            				}
            				else {
HXLINE(1505)					if (!(this->_hx___renderer->_hx___cleared)) {
HXLINE(1506)						this->_hx___renderer->_hx___clear();
            					}
HXLINE(1509)					this->context3D->_hx___present = false;
HXLINE(1510)					this->context3D->_hx___cleared = false;
            				}
            			}
HXLINE(1516)			this->_hx___renderer->_hx___cleared = false;
            		}
HXLINE(1526)		this->_hx___rendering = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,render,(void))

void Stage_obj::update(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1531_update)
HXLINE(1533)		this->_hx___deltaTime = deltaTime;
HXLINE(1535)		this->_hx___dispatchPendingMouseEvent();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,update,(void))

void Stage_obj::_hx___addWindow( ::lime::ui::Window window){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::lime::ui::Window,a1) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1545___addWindow)
HXLINE(1545)			f(a1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::ui::Window,a11, ::Dynamic,f1) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1546___addWindow)
HXLINE(1546)			f1(a11);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::lime::ui::Window,a12, ::Dynamic,f2) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1547___addWindow)
HXLINE(1547)			f2(a12);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::lime::ui::Window,a13, ::Dynamic,f3) HXARGC(1)
            		void _hx_run(::String a2){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1548___addWindow)
HXLINE(1548)			f3(a13,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_4, ::lime::ui::Window,a14, ::Dynamic,f4) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1549___addWindow)
HXLINE(1549)			f4(a14);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_5, ::Dynamic,f5, ::lime::ui::Window,a15) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1550___addWindow)
HXLINE(1550)			f5(a15);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_6, ::Dynamic,f6, ::lime::ui::Window,a16) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1551___addWindow)
HXLINE(1551)			f6(a16);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7, ::lime::ui::Window,a17, ::Dynamic,f7) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1552___addWindow)
HXLINE(1552)			f7(a17);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8, ::lime::ui::Window,a18, ::Dynamic,f8) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1553___addWindow)
HXLINE(1553)			f8(a18);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_9, ::Dynamic,f9, ::lime::ui::Window,a19) HXARGC(2)
            		void _hx_run(int a21,int a3){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1554___addWindow)
HXLINE(1554)			f9(a19,a21,a3);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_10, ::Dynamic,f10, ::lime::ui::Window,a110) HXARGC(2)
            		void _hx_run(int a22,int a31){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1555___addWindow)
HXLINE(1555)			f10(a110,a22,a31);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_11, ::Dynamic,f11, ::lime::ui::Window,a111) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1556___addWindow)
HXLINE(1556)			f11(a111);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_12, ::lime::ui::Window,a112, ::Dynamic,f12) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1557___addWindow)
HXLINE(1557)			f12(a112);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_13, ::Dynamic,f13, ::lime::ui::Window,a113) HXARGC(3)
            		void _hx_run(Float x,Float y,int a23){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1558___addWindow)
HXLINE(1558)			f13(a113,x,y,a23);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_14, ::Dynamic,f14, ::lime::ui::Window,a114) HXARGC(2)
            		void _hx_run(Float x1,Float y1){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1559___addWindow)
HXLINE(1559)			f14(a114,x1,y1);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_15, ::Dynamic,f15, ::lime::ui::Window,a115) HXARGC(2)
            		void _hx_run(Float x2,Float y2){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1560___addWindow)
HXLINE(1560)			f15(a115,x2,y2);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_16, ::lime::ui::Window,a116, ::Dynamic,f16) HXARGC(3)
            		void _hx_run(Float x3,Float y3,int a24){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1561___addWindow)
HXLINE(1561)			f16(a116,x3,y3,a24);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_17, ::Dynamic,f17, ::lime::ui::Window,a117) HXARGC(3)
            		void _hx_run(Float a25,Float a32, ::lime::ui::MouseWheelMode a4){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1562___addWindow)
HXLINE(1562)			f17(a117,a25,a32,a4);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_18, ::lime::ui::Window,a118, ::Dynamic,f18) HXARGC(2)
            		void _hx_run(Float x4,Float y4){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1563___addWindow)
HXLINE(1563)			f18(a118,x4,y4);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_19, ::Dynamic,f19, ::lime::ui::Window,a119) HXARGC(2)
            		void _hx_run(int a26,int a33){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1567___addWindow)
HXLINE(1567)			f19(a119,a26,a33);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_20, ::lime::ui::Window,a120, ::Dynamic,f20) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1568___addWindow)
HXLINE(1568)			f20(a120);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_21, ::lime::ui::Window,a121, ::Dynamic,f21) HXARGC(3)
            		void _hx_run(::String a27,int a34,int a41){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1569___addWindow)
HXLINE(1569)			f21(a121,a27,a34,a41);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_22, ::lime::ui::Window,a122, ::Dynamic,f22) HXARGC(1)
            		void _hx_run(::String a28){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1570___addWindow)
HXLINE(1570)			f22(a122,a28);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1540___addWindow)
HXLINE(1543)		if (hx::IsNotEq( this->window,window )) {
HXLINE(1543)			return;
            		}
HXLINE(1545)		 ::Dynamic f = this->onWindowActivate_dyn();
HXDLIN(1545)		 ::lime::ui::Window a1 = window;
HXDLIN(1545)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN(1545)		window->onActivate->add(_hx_tmp,null(),null());
HXLINE(1546)		 ::Dynamic f1 = this->onWindowClose_dyn();
HXDLIN(1546)		 ::lime::ui::Window a11 = window;
HXDLIN(1546)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(a11,f1));
HXDLIN(1546)		window->onClose->add(_hx_tmp1,false,(int)-9000);
HXLINE(1547)		 ::Dynamic f2 = this->onWindowDeactivate_dyn();
HXDLIN(1547)		 ::lime::ui::Window a12 = window;
HXDLIN(1547)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(a12,f2));
HXDLIN(1547)		window->onDeactivate->add(_hx_tmp2,null(),null());
HXLINE(1548)		 ::Dynamic f3 = this->onWindowDropFile_dyn();
HXDLIN(1548)		 ::lime::ui::Window a13 = window;
HXDLIN(1548)		 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_3(a13,f3));
HXDLIN(1548)		window->onDropFile->add(_hx_tmp3,null(),null());
HXLINE(1549)		 ::Dynamic f4 = this->onWindowEnter_dyn();
HXDLIN(1549)		 ::lime::ui::Window a14 = window;
HXDLIN(1549)		 ::Dynamic _hx_tmp4 =  ::Dynamic(new _hx_Closure_4(a14,f4));
HXDLIN(1549)		window->onEnter->add(_hx_tmp4,null(),null());
HXLINE(1550)		 ::Dynamic f5 = this->onWindowExpose_dyn();
HXDLIN(1550)		 ::lime::ui::Window a15 = window;
HXDLIN(1550)		 ::Dynamic _hx_tmp5 =  ::Dynamic(new _hx_Closure_5(f5,a15));
HXDLIN(1550)		window->onExpose->add(_hx_tmp5,null(),null());
HXLINE(1551)		 ::Dynamic f6 = this->onWindowFocusIn_dyn();
HXDLIN(1551)		 ::lime::ui::Window a16 = window;
HXDLIN(1551)		 ::Dynamic _hx_tmp6 =  ::Dynamic(new _hx_Closure_6(f6,a16));
HXDLIN(1551)		window->onFocusIn->add(_hx_tmp6,null(),null());
HXLINE(1552)		 ::Dynamic f7 = this->onWindowFocusOut_dyn();
HXDLIN(1552)		 ::lime::ui::Window a17 = window;
HXDLIN(1552)		 ::Dynamic _hx_tmp7 =  ::Dynamic(new _hx_Closure_7(a17,f7));
HXDLIN(1552)		window->onFocusOut->add(_hx_tmp7,null(),null());
HXLINE(1553)		 ::Dynamic f8 = this->onWindowFullscreen_dyn();
HXDLIN(1553)		 ::lime::ui::Window a18 = window;
HXDLIN(1553)		 ::Dynamic _hx_tmp8 =  ::Dynamic(new _hx_Closure_8(a18,f8));
HXDLIN(1553)		window->onFullscreen->add(_hx_tmp8,null(),null());
HXLINE(1554)		 ::Dynamic f9 = this->onKeyDown_dyn();
HXDLIN(1554)		 ::lime::ui::Window a19 = window;
HXDLIN(1554)		 ::Dynamic _hx_tmp9 =  ::Dynamic(new _hx_Closure_9(f9,a19));
HXDLIN(1554)		window->onKeyDown->add(_hx_tmp9,null(),null());
HXLINE(1555)		 ::Dynamic f10 = this->onKeyUp_dyn();
HXDLIN(1555)		 ::lime::ui::Window a110 = window;
HXDLIN(1555)		 ::Dynamic _hx_tmp10 =  ::Dynamic(new _hx_Closure_10(f10,a110));
HXDLIN(1555)		window->onKeyUp->add(_hx_tmp10,null(),null());
HXLINE(1556)		 ::Dynamic f11 = this->onWindowLeave_dyn();
HXDLIN(1556)		 ::lime::ui::Window a111 = window;
HXDLIN(1556)		 ::Dynamic _hx_tmp11 =  ::Dynamic(new _hx_Closure_11(f11,a111));
HXDLIN(1556)		window->onLeave->add(_hx_tmp11,null(),null());
HXLINE(1557)		 ::Dynamic f12 = this->onWindowMinimize_dyn();
HXDLIN(1557)		 ::lime::ui::Window a112 = window;
HXDLIN(1557)		 ::Dynamic _hx_tmp12 =  ::Dynamic(new _hx_Closure_12(a112,f12));
HXDLIN(1557)		window->onMinimize->add(_hx_tmp12,null(),null());
HXLINE(1558)		 ::Dynamic f13 = this->onMouseDown_dyn();
HXDLIN(1558)		 ::lime::ui::Window a113 = window;
HXDLIN(1558)		 ::Dynamic _hx_tmp13 =  ::Dynamic(new _hx_Closure_13(f13,a113));
HXDLIN(1558)		window->onMouseDown->add(_hx_tmp13,null(),null());
HXLINE(1559)		 ::Dynamic f14 = this->onMouseMove_dyn();
HXDLIN(1559)		 ::lime::ui::Window a114 = window;
HXDLIN(1559)		 ::Dynamic _hx_tmp14 =  ::Dynamic(new _hx_Closure_14(f14,a114));
HXDLIN(1559)		window->onMouseMove->add(_hx_tmp14,null(),null());
HXLINE(1560)		 ::Dynamic f15 = this->onMouseMoveRelative_dyn();
HXDLIN(1560)		 ::lime::ui::Window a115 = window;
HXDLIN(1560)		 ::Dynamic _hx_tmp15 =  ::Dynamic(new _hx_Closure_15(f15,a115));
HXDLIN(1560)		window->onMouseMoveRelative->add(_hx_tmp15,null(),null());
HXLINE(1561)		 ::Dynamic f16 = this->onMouseUp_dyn();
HXDLIN(1561)		 ::lime::ui::Window a116 = window;
HXDLIN(1561)		 ::Dynamic _hx_tmp16 =  ::Dynamic(new _hx_Closure_16(a116,f16));
HXDLIN(1561)		window->onMouseUp->add(_hx_tmp16,null(),null());
HXLINE(1562)		 ::Dynamic f17 = this->onMouseWheel_dyn();
HXDLIN(1562)		 ::lime::ui::Window a117 = window;
HXDLIN(1562)		 ::Dynamic _hx_tmp17 =  ::Dynamic(new _hx_Closure_17(f17,a117));
HXDLIN(1562)		window->onMouseWheel->add(_hx_tmp17,null(),null());
HXLINE(1563)		 ::Dynamic f18 = this->onWindowMove_dyn();
HXDLIN(1563)		 ::lime::ui::Window a118 = window;
HXDLIN(1563)		 ::Dynamic _hx_tmp18 =  ::Dynamic(new _hx_Closure_18(a118,f18));
HXDLIN(1563)		window->onMove->add(_hx_tmp18,null(),null());
HXLINE(1564)		window->onRender->add(this->render_dyn(),null(),null());
HXLINE(1565)		window->onRenderContextLost->add(this->onRenderContextLost_dyn(),null(),null());
HXLINE(1566)		window->onRenderContextRestored->add(this->onRenderContextRestored_dyn(),null(),null());
HXLINE(1567)		 ::Dynamic f19 = this->onWindowResize_dyn();
HXDLIN(1567)		 ::lime::ui::Window a119 = window;
HXDLIN(1567)		 ::Dynamic _hx_tmp19 =  ::Dynamic(new _hx_Closure_19(f19,a119));
HXDLIN(1567)		window->onResize->add(_hx_tmp19,null(),null());
HXLINE(1568)		 ::Dynamic f20 = this->onWindowRestore_dyn();
HXDLIN(1568)		 ::lime::ui::Window a120 = window;
HXDLIN(1568)		 ::Dynamic _hx_tmp20 =  ::Dynamic(new _hx_Closure_20(a120,f20));
HXDLIN(1568)		window->onRestore->add(_hx_tmp20,null(),null());
HXLINE(1569)		 ::Dynamic f21 = this->onTextEdit_dyn();
HXDLIN(1569)		 ::lime::ui::Window a121 = window;
HXDLIN(1569)		 ::Dynamic _hx_tmp21 =  ::Dynamic(new _hx_Closure_21(a121,f21));
HXDLIN(1569)		window->onTextEdit->add(_hx_tmp21,null(),null());
HXLINE(1570)		 ::Dynamic f22 = this->onTextInput_dyn();
HXDLIN(1570)		 ::lime::ui::Window a122 = window;
HXDLIN(1570)		 ::Dynamic _hx_tmp22 =  ::Dynamic(new _hx_Closure_22(a122,f22));
HXDLIN(1570)		window->onTextInput->add(_hx_tmp22,null(),null());
HXLINE(1572)		this->onWindowCreate(window);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___addWindow,(void))

void Stage_obj::_hx___broadcastEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1580___broadcastEvent)
HXDLIN(1580)		if (::openfl::display::DisplayObject_obj::_hx___broadcastEvents->exists(event->type)) {
HXLINE(1582)			::Array< ::Dynamic> dispatchers = ( (::Array< ::Dynamic>)(::openfl::display::DisplayObject_obj::_hx___broadcastEvents->get(event->type)) );
HXLINE(1584)			{
HXLINE(1584)				int _g = (int)0;
HXDLIN(1584)				while((_g < dispatchers->length)){
HXLINE(1584)					 ::openfl::display::DisplayObject dispatcher = dispatchers->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1584)					_g = (_g + (int)1);
HXLINE(1589)					bool _hx_tmp;
HXDLIN(1589)					if (hx::IsNotEq( dispatcher->stage,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1589)						_hx_tmp = hx::IsNull( dispatcher->stage );
            					}
            					else {
HXLINE(1589)						_hx_tmp = true;
            					}
HXDLIN(1589)					if (_hx_tmp) {
HXLINE(1591)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1593)							dispatcher->_hx___dispatch(event);
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic e = _hx_e;
HXLINE(1597)								this->_hx___handleError(e);
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___broadcastEvent,(void))

void Stage_obj::_hx___createRenderer(){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1610___createRenderer)
HXLINE(1624)		int windowWidth = ::Std_obj::_hx_int((this->window->_hx___width * this->window->_hx___scale));
HXLINE(1625)		int windowHeight = ::Std_obj::_hx_int((this->window->_hx___height * this->window->_hx___scale));
HXLINE(1627)		{
HXLINE(1627)			::String _g = this->window->context->type;
HXDLIN(1627)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("cairo",88,30,19,41)) ){
HXLINE(1655)				this->_hx___renderer =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX ,this->window->context->cairo);
HXDLIN(1655)				goto _hx_goto_79;
            			}
            			if (  (_hx_switch_0==HX_("canvas",d8,54,42,b8)) ){
HXLINE(1638)				goto _hx_goto_79;
            			}
            			if (  (_hx_switch_0==HX_("dom",82,42,4c,00)) ){
HXLINE(1645)				goto _hx_goto_79;
            			}
            			if (  (_hx_switch_0==HX_("opengl",6f,64,94,21)) ||  (_hx_switch_0==HX_("opengles",9d,f6,c9,fa)) ||  (_hx_switch_0==HX_("webgl",b9,4b,bc,c7)) ){
HXLINE(1632)				this->context3D =  ::openfl::display3D::Context3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),null(),null());
HXLINE(1633)				this->context3D->configureBackBuffer(windowWidth,windowHeight,(int)0,true,true,true);
HXLINE(1634)				this->context3D->present();
HXLINE(1635)				this->_hx___renderer =  ::openfl::display::OpenGLRenderer_obj::__alloc( HX_CTX ,this->context3D,null());
HXLINE(1629)				goto _hx_goto_79;
            			}
            			/* default */{
            			}
            			_hx_goto_79:;
            		}
HXLINE(1662)		if (hx::IsNotNull( this->_hx___renderer )) {
HXLINE(1664)			 ::Dynamic _hx_tmp = this->get_quality();
HXDLIN(1664)			this->_hx___renderer->_hx___allowSmoothing = hx::IsNotEq( _hx_tmp,(int)2 );
HXLINE(1665)			this->_hx___renderer->_hx___worldTransform = this->_hx___displayMatrix;
HXLINE(1666)			this->_hx___renderer->_hx___stage = hx::ObjectPtr<OBJ_>(this);
HXLINE(1668)			this->_hx___renderer->_hx___resize(windowWidth,windowHeight);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___createRenderer,(void))

bool Stage_obj::_hx___dispatchEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1678___dispatchEvent)
HXDLIN(1678)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1680)			return this->super::_hx___dispatchEvent(event);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(1684)				this->_hx___handleError(e);
HXLINE(1685)				return false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1678)		return false;
            	}


void Stage_obj::_hx___dispatchPendingMouseEvent(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1694___dispatchPendingMouseEvent)
HXDLIN(1694)		if (this->_hx___pendingMouseEvent) {
HXLINE(1696)			this->_hx___onMouse(HX_("mouseMove",d6,9b,b5,f4),this->_hx___pendingMouseX,this->_hx___pendingMouseY,(int)0);
HXLINE(1697)			this->_hx___pendingMouseEvent = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___dispatchPendingMouseEvent,(void))

void Stage_obj::_hx___dispatchStack( ::openfl::events::Event event,::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1706___dispatchStack)
HXDLIN(1706)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1708)			 ::openfl::display::DisplayObject target;
HXLINE(1709)			int length = stack->length;
HXLINE(1711)			if ((length == (int)0)) {
HXLINE(1713)				event->eventPhase = (int)2;
HXLINE(1714)				target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE(1715)				target->_hx___dispatch(event);
            			}
            			else {
HXLINE(1719)				event->eventPhase = (int)1;
HXLINE(1720)				event->target = stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(1722)				{
HXLINE(1722)					int _g1 = (int)0;
HXDLIN(1722)					int _g = (length - (int)1);
HXDLIN(1722)					while((_g1 < _g)){
HXLINE(1722)						_g1 = (_g1 + (int)1);
HXDLIN(1722)						int i = (_g1 - (int)1);
HXLINE(1724)						stack->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE(1726)						if (event->_hx___isCanceled) {
HXLINE(1728)							return;
            						}
            					}
            				}
HXLINE(1734)				event->eventPhase = (int)2;
HXLINE(1735)				target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE(1736)				target->_hx___dispatch(event);
HXLINE(1738)				if (event->_hx___isCanceled) {
HXLINE(1740)					return;
            				}
HXLINE(1744)				if (event->bubbles) {
HXLINE(1746)					event->eventPhase = (int)3;
HXLINE(1747)					int i1 = (length - (int)2);
HXLINE(1749)					while((i1 >= (int)0)){
HXLINE(1751)						stack->__get(i1).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE(1753)						if (event->_hx___isCanceled) {
HXLINE(1755)							return;
            						}
HXLINE(1759)						i1 = (i1 - (int)1);
            					}
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(1769)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___dispatchStack,(void))

bool Stage_obj::_hx___dispatchTarget( ::openfl::events::EventDispatcher target, ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1779___dispatchTarget)
HXDLIN(1779)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1781)			return target->_hx___dispatchEvent(event);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(1785)				this->_hx___handleError(e);
HXLINE(1786)				return false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1779)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___dispatchTarget,return )

void Stage_obj::_hx___drag( ::openfl::geom::Point mouse){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1793___drag)
HXLINE(1795)		 ::openfl::display::DisplayObjectContainer parent = this->_hx___dragObject->parent;
HXLINE(1796)		if (hx::IsNotNull( parent )) {
HXLINE(1798)			 ::openfl::geom::Matrix _this = parent->_hx___getWorldTransform();
HXDLIN(1798)			Float norm = (_this->a * _this->d);
HXDLIN(1798)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1798)			if ((norm1 == (int)0)) {
HXLINE(1798)				mouse->x = -(_this->tx);
HXDLIN(1798)				mouse->y = -(_this->ty);
            			}
            			else {
HXLINE(1798)				Float _this1 = _this->c;
HXDLIN(1798)				Float px = (_this1 * (_this->ty - mouse->y));
HXDLIN(1798)				Float _this2 = _this->d;
HXDLIN(1798)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (mouse->x - _this->tx))));
HXDLIN(1798)				Float _this3 = _this->a;
HXDLIN(1798)				Float _hx_tmp = (_this3 * (mouse->y - _this->ty));
HXDLIN(1798)				Float _this4 = _this->b;
HXDLIN(1798)				mouse->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this4 * (_this->tx - mouse->x))));
HXDLIN(1798)				mouse->x = px1;
            			}
            		}
HXLINE(1802)		Float x = (mouse->x + this->_hx___dragOffsetX);
HXLINE(1803)		Float y = (mouse->y + this->_hx___dragOffsetY);
HXLINE(1805)		if (hx::IsNotNull( this->_hx___dragBounds )) {
HXLINE(1807)			if ((x < this->_hx___dragBounds->x)) {
HXLINE(1809)				x = this->_hx___dragBounds->x;
            			}
            			else {
HXLINE(1811)				if ((x > this->_hx___dragBounds->get_right())) {
HXLINE(1813)					x = this->_hx___dragBounds->get_right();
            				}
            			}
HXLINE(1817)			if ((y < this->_hx___dragBounds->y)) {
HXLINE(1819)				y = this->_hx___dragBounds->y;
            			}
            			else {
HXLINE(1821)				if ((y > this->_hx___dragBounds->get_bottom())) {
HXLINE(1823)					y = this->_hx___dragBounds->get_bottom();
            				}
            			}
            		}
HXLINE(1829)		this->_hx___dragObject->set_x(x);
HXLINE(1830)		this->_hx___dragObject->set_y(y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___drag,(void))

bool Stage_obj::_hx___getInteractive(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1835___getInteractive)
HXLINE(1837)		if (hx::IsNotNull( stack )) {
HXLINE(1839)			stack->push(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1843)		return true;
            	}


 ::openfl::geom::Point Stage_obj::_hx___globalToLocal( ::openfl::geom::Point global, ::openfl::geom::Point local){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1848___globalToLocal)
HXLINE(1850)		if (hx::IsNotEq( global,local )) {
HXLINE(1852)			local->copyFrom(global);
            		}
HXLINE(1856)		return local;
            	}


void Stage_obj::_hx___handleError( ::Dynamic e){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1861___handleError)
HXLINE(1863)		 ::openfl::events::UncaughtErrorEvent event =  ::openfl::events::UncaughtErrorEvent_obj::__alloc( HX_CTX ,HX_("uncaughtError",f3,98,8b,8b),true,true,e);
HXLINE(1865)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1867)			::openfl::Lib_obj::get_current()->_hx___loaderInfo->uncaughtErrorEvents->dispatchEvent(event);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e1 = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1871)		if (!(event->_hx___preventDefault)) {
HXLINE(1879)			throw e;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___handleError,(void))

void Stage_obj::_hx___onKey(::String type,int keyCode,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1909___onKey)
HXLINE(1911)		this->_hx___dispatchPendingMouseEvent();
HXLINE(1913)		::openfl::events::MouseEvent_obj::_hx___altKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier);
HXLINE(1914)		::openfl::events::MouseEvent_obj::_hx___commandKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier);
HXLINE(1915)		::openfl::events::MouseEvent_obj::_hx___ctrlKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
HXLINE(1916)		::openfl::events::MouseEvent_obj::_hx___shiftKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier);
HXLINE(1918)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(1920)		if (hx::IsNull( this->_hx___focus )) {
HXLINE(1922)			this->_hx___getInteractive(stack);
            		}
            		else {
HXLINE(1926)			this->_hx___focus->_hx___getInteractive(stack);
            		}
HXLINE(1930)		if ((stack->length > (int)0)) {
HXLINE(1932)			int keyLocation;
HXDLIN(1932)			switch((int)(keyCode)){
            				case (int)1073741908: case (int)1073741909: case (int)1073741910: case (int)1073741911: case (int)1073741912: case (int)1073741913: case (int)1073741914: case (int)1073741915: case (int)1073741916: case (int)1073741917: case (int)1073741918: case (int)1073741919: case (int)1073741920: case (int)1073741921: case (int)1073741922: case (int)1073741923: case (int)1073742044: {
HXLINE(1932)					keyLocation = (int)3;
            				}
            				break;
            				case (int)1073742048: case (int)1073742049: case (int)1073742050: case (int)1073742051: {
HXLINE(1932)					keyLocation = (int)1;
            				}
            				break;
            				case (int)1073742052: case (int)1073742053: case (int)1073742054: case (int)1073742055: {
HXLINE(1932)					keyLocation = (int)2;
            				}
            				break;
            				default:{
HXLINE(1932)					keyLocation = (int)0;
            				}
            			}
HXLINE(1933)			int keyCode1;
HXDLIN(1933)			switch((int)(keyCode)){
            				case (int)8: {
HXLINE(1933)					keyCode1 = (int)8;
            				}
            				break;
            				case (int)9: {
HXLINE(1933)					keyCode1 = (int)9;
            				}
            				break;
            				case (int)13: {
HXLINE(1933)					keyCode1 = (int)13;
            				}
            				break;
            				case (int)27: {
HXLINE(1933)					keyCode1 = (int)27;
            				}
            				break;
            				case (int)32: {
HXLINE(1933)					keyCode1 = (int)32;
            				}
            				break;
            				case (int)33: {
HXLINE(1933)					keyCode1 = (int)49;
            				}
            				break;
            				case (int)34: {
HXLINE(1933)					keyCode1 = (int)222;
            				}
            				break;
            				case (int)35: {
HXLINE(1933)					keyCode1 = (int)51;
            				}
            				break;
            				case (int)36: {
HXLINE(1933)					keyCode1 = (int)52;
            				}
            				break;
            				case (int)37: {
HXLINE(1933)					keyCode1 = (int)53;
            				}
            				break;
            				case (int)38: {
HXLINE(1933)					keyCode1 = (int)55;
            				}
            				break;
            				case (int)39: {
HXLINE(1933)					keyCode1 = (int)222;
            				}
            				break;
            				case (int)40: {
HXLINE(1933)					keyCode1 = (int)57;
            				}
            				break;
            				case (int)41: {
HXLINE(1933)					keyCode1 = (int)48;
            				}
            				break;
            				case (int)42: {
HXLINE(1933)					keyCode1 = (int)56;
            				}
            				break;
            				case (int)44: {
HXLINE(1933)					keyCode1 = (int)188;
            				}
            				break;
            				case (int)45: {
HXLINE(1933)					keyCode1 = (int)189;
            				}
            				break;
            				case (int)46: {
HXLINE(1933)					keyCode1 = (int)190;
            				}
            				break;
            				case (int)47: {
HXLINE(1933)					keyCode1 = (int)191;
            				}
            				break;
            				case (int)48: {
HXLINE(1933)					keyCode1 = (int)48;
            				}
            				break;
            				case (int)49: {
HXLINE(1933)					keyCode1 = (int)49;
            				}
            				break;
            				case (int)50: {
HXLINE(1933)					keyCode1 = (int)50;
            				}
            				break;
            				case (int)51: {
HXLINE(1933)					keyCode1 = (int)51;
            				}
            				break;
            				case (int)52: {
HXLINE(1933)					keyCode1 = (int)52;
            				}
            				break;
            				case (int)53: {
HXLINE(1933)					keyCode1 = (int)53;
            				}
            				break;
            				case (int)54: {
HXLINE(1933)					keyCode1 = (int)54;
            				}
            				break;
            				case (int)55: {
HXLINE(1933)					keyCode1 = (int)55;
            				}
            				break;
            				case (int)56: {
HXLINE(1933)					keyCode1 = (int)56;
            				}
            				break;
            				case (int)57: {
HXLINE(1933)					keyCode1 = (int)57;
            				}
            				break;
            				case (int)58: {
HXLINE(1933)					keyCode1 = (int)186;
            				}
            				break;
            				case (int)59: {
HXLINE(1933)					keyCode1 = (int)186;
            				}
            				break;
            				case (int)60: {
HXLINE(1933)					keyCode1 = (int)60;
            				}
            				break;
            				case (int)61: {
HXLINE(1933)					keyCode1 = (int)187;
            				}
            				break;
            				case (int)62: {
HXLINE(1933)					keyCode1 = (int)190;
            				}
            				break;
            				case (int)63: {
HXLINE(1933)					keyCode1 = (int)191;
            				}
            				break;
            				case (int)64: {
HXLINE(1933)					keyCode1 = (int)50;
            				}
            				break;
            				case (int)91: {
HXLINE(1933)					keyCode1 = (int)219;
            				}
            				break;
            				case (int)92: {
HXLINE(1933)					keyCode1 = (int)220;
            				}
            				break;
            				case (int)93: {
HXLINE(1933)					keyCode1 = (int)221;
            				}
            				break;
            				case (int)94: {
HXLINE(1933)					keyCode1 = (int)54;
            				}
            				break;
            				case (int)95: {
HXLINE(1933)					keyCode1 = (int)189;
            				}
            				break;
            				case (int)96: {
HXLINE(1933)					keyCode1 = (int)192;
            				}
            				break;
            				case (int)97: {
HXLINE(1933)					keyCode1 = (int)65;
            				}
            				break;
            				case (int)98: {
HXLINE(1933)					keyCode1 = (int)66;
            				}
            				break;
            				case (int)99: {
HXLINE(1933)					keyCode1 = (int)67;
            				}
            				break;
            				case (int)100: {
HXLINE(1933)					keyCode1 = (int)68;
            				}
            				break;
            				case (int)101: {
HXLINE(1933)					keyCode1 = (int)69;
            				}
            				break;
            				case (int)102: {
HXLINE(1933)					keyCode1 = (int)70;
            				}
            				break;
            				case (int)103: {
HXLINE(1933)					keyCode1 = (int)71;
            				}
            				break;
            				case (int)104: {
HXLINE(1933)					keyCode1 = (int)72;
            				}
            				break;
            				case (int)105: {
HXLINE(1933)					keyCode1 = (int)73;
            				}
            				break;
            				case (int)106: {
HXLINE(1933)					keyCode1 = (int)74;
            				}
            				break;
            				case (int)107: {
HXLINE(1933)					keyCode1 = (int)75;
            				}
            				break;
            				case (int)108: {
HXLINE(1933)					keyCode1 = (int)76;
            				}
            				break;
            				case (int)109: {
HXLINE(1933)					keyCode1 = (int)77;
            				}
            				break;
            				case (int)110: {
HXLINE(1933)					keyCode1 = (int)78;
            				}
            				break;
            				case (int)111: {
HXLINE(1933)					keyCode1 = (int)79;
            				}
            				break;
            				case (int)112: {
HXLINE(1933)					keyCode1 = (int)80;
            				}
            				break;
            				case (int)113: {
HXLINE(1933)					keyCode1 = (int)81;
            				}
            				break;
            				case (int)114: {
HXLINE(1933)					keyCode1 = (int)82;
            				}
            				break;
            				case (int)115: {
HXLINE(1933)					keyCode1 = (int)83;
            				}
            				break;
            				case (int)116: {
HXLINE(1933)					keyCode1 = (int)84;
            				}
            				break;
            				case (int)117: {
HXLINE(1933)					keyCode1 = (int)85;
            				}
            				break;
            				case (int)118: {
HXLINE(1933)					keyCode1 = (int)86;
            				}
            				break;
            				case (int)119: {
HXLINE(1933)					keyCode1 = (int)87;
            				}
            				break;
            				case (int)120: {
HXLINE(1933)					keyCode1 = (int)88;
            				}
            				break;
            				case (int)121: {
HXLINE(1933)					keyCode1 = (int)89;
            				}
            				break;
            				case (int)122: {
HXLINE(1933)					keyCode1 = (int)90;
            				}
            				break;
            				case (int)127: {
HXLINE(1933)					keyCode1 = (int)46;
            				}
            				break;
            				case (int)1073741881: {
HXLINE(1933)					keyCode1 = (int)20;
            				}
            				break;
            				case (int)1073741882: {
HXLINE(1933)					keyCode1 = (int)112;
            				}
            				break;
            				case (int)1073741883: {
HXLINE(1933)					keyCode1 = (int)113;
            				}
            				break;
            				case (int)1073741884: {
HXLINE(1933)					keyCode1 = (int)114;
            				}
            				break;
            				case (int)1073741885: {
HXLINE(1933)					keyCode1 = (int)115;
            				}
            				break;
            				case (int)1073741886: {
HXLINE(1933)					keyCode1 = (int)116;
            				}
            				break;
            				case (int)1073741887: {
HXLINE(1933)					keyCode1 = (int)117;
            				}
            				break;
            				case (int)1073741888: {
HXLINE(1933)					keyCode1 = (int)118;
            				}
            				break;
            				case (int)1073741889: {
HXLINE(1933)					keyCode1 = (int)119;
            				}
            				break;
            				case (int)1073741890: {
HXLINE(1933)					keyCode1 = (int)120;
            				}
            				break;
            				case (int)1073741891: {
HXLINE(1933)					keyCode1 = (int)121;
            				}
            				break;
            				case (int)1073741892: {
HXLINE(1933)					keyCode1 = (int)122;
            				}
            				break;
            				case (int)1073741893: {
HXLINE(1933)					keyCode1 = (int)123;
            				}
            				break;
            				case (int)1073741894: {
HXLINE(1933)					keyCode1 = (int)301;
            				}
            				break;
            				case (int)1073741895: {
HXLINE(1933)					keyCode1 = (int)145;
            				}
            				break;
            				case (int)1073741896: {
HXLINE(1933)					keyCode1 = (int)19;
            				}
            				break;
            				case (int)1073741897: {
HXLINE(1933)					keyCode1 = (int)45;
            				}
            				break;
            				case (int)1073741898: {
HXLINE(1933)					keyCode1 = (int)36;
            				}
            				break;
            				case (int)1073741899: {
HXLINE(1933)					keyCode1 = (int)33;
            				}
            				break;
            				case (int)1073741901: {
HXLINE(1933)					keyCode1 = (int)35;
            				}
            				break;
            				case (int)1073741902: {
HXLINE(1933)					keyCode1 = (int)34;
            				}
            				break;
            				case (int)1073741903: {
HXLINE(1933)					keyCode1 = (int)39;
            				}
            				break;
            				case (int)1073741904: {
HXLINE(1933)					keyCode1 = (int)37;
            				}
            				break;
            				case (int)1073741905: {
HXLINE(1933)					keyCode1 = (int)40;
            				}
            				break;
            				case (int)1073741906: {
HXLINE(1933)					keyCode1 = (int)38;
            				}
            				break;
            				case (int)1073741907: {
HXLINE(1933)					keyCode1 = (int)144;
            				}
            				break;
            				case (int)1073741908: {
HXLINE(1933)					keyCode1 = (int)111;
            				}
            				break;
            				case (int)1073741909: {
HXLINE(1933)					keyCode1 = (int)106;
            				}
            				break;
            				case (int)1073741910: {
HXLINE(1933)					keyCode1 = (int)109;
            				}
            				break;
            				case (int)1073741911: {
HXLINE(1933)					keyCode1 = (int)107;
            				}
            				break;
            				case (int)1073741912: {
HXLINE(1933)					keyCode1 = (int)13;
            				}
            				break;
            				case (int)1073741913: {
HXLINE(1933)					keyCode1 = (int)97;
            				}
            				break;
            				case (int)1073741914: {
HXLINE(1933)					keyCode1 = (int)98;
            				}
            				break;
            				case (int)1073741915: {
HXLINE(1933)					keyCode1 = (int)99;
            				}
            				break;
            				case (int)1073741916: {
HXLINE(1933)					keyCode1 = (int)100;
            				}
            				break;
            				case (int)1073741917: {
HXLINE(1933)					keyCode1 = (int)101;
            				}
            				break;
            				case (int)1073741918: {
HXLINE(1933)					keyCode1 = (int)102;
            				}
            				break;
            				case (int)1073741919: {
HXLINE(1933)					keyCode1 = (int)103;
            				}
            				break;
            				case (int)1073741920: {
HXLINE(1933)					keyCode1 = (int)104;
            				}
            				break;
            				case (int)1073741921: {
HXLINE(1933)					keyCode1 = (int)105;
            				}
            				break;
            				case (int)1073741922: {
HXLINE(1933)					keyCode1 = (int)96;
            				}
            				break;
            				case (int)1073741923: {
HXLINE(1933)					keyCode1 = (int)110;
            				}
            				break;
            				case (int)1073741925: {
HXLINE(1933)					keyCode1 = (int)302;
            				}
            				break;
            				case (int)1073741928: {
HXLINE(1933)					keyCode1 = (int)124;
            				}
            				break;
            				case (int)1073741929: {
HXLINE(1933)					keyCode1 = (int)125;
            				}
            				break;
            				case (int)1073741930: {
HXLINE(1933)					keyCode1 = (int)126;
            				}
            				break;
            				case (int)1073741982: {
HXLINE(1933)					keyCode1 = (int)13;
            				}
            				break;
            				case (int)1073742044: {
HXLINE(1933)					keyCode1 = (int)110;
            				}
            				break;
            				case (int)1073742048: {
HXLINE(1933)					keyCode1 = (int)17;
            				}
            				break;
            				case (int)1073742049: {
HXLINE(1933)					keyCode1 = (int)16;
            				}
            				break;
            				case (int)1073742050: {
HXLINE(1933)					keyCode1 = (int)18;
            				}
            				break;
            				case (int)1073742051: {
HXLINE(1933)					keyCode1 = (int)15;
            				}
            				break;
            				case (int)1073742052: {
HXLINE(1933)					keyCode1 = (int)17;
            				}
            				break;
            				case (int)1073742053: {
HXLINE(1933)					keyCode1 = (int)16;
            				}
            				break;
            				case (int)1073742054: {
HXLINE(1933)					keyCode1 = (int)18;
            				}
            				break;
            				case (int)1073742055: {
HXLINE(1933)					keyCode1 = (int)15;
            				}
            				break;
            				default:{
HXLINE(1933)					keyCode1 = keyCode;
            				}
            			}
HXLINE(1934)			int charCode = ::openfl::ui::Keyboard_obj::_hx___getCharCode(keyCode1,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier));
HXLINE(1938)			bool event;
HXDLIN(1938)			if (this->_hx___macKeyboard) {
HXLINE(1938)				if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier))) {
HXLINE(1938)					event = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier);
            				}
            				else {
HXLINE(1938)					event = true;
            				}
            			}
            			else {
HXLINE(1938)				event = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
            			}
HXDLIN(1938)			bool event1 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier);
HXDLIN(1938)			bool event2 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier);
HXDLIN(1938)			bool event3 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
HXDLIN(1938)			 ::openfl::events::KeyboardEvent event4 =  ::openfl::events::KeyboardEvent_obj::__alloc( HX_CTX ,type,true,true,charCode,keyCode1,keyLocation,event,event1,event2,event3,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier));
HXLINE(1940)			stack->reverse();
HXLINE(1941)			this->_hx___dispatchStack(event4,stack);
HXLINE(1943)			if (event4->_hx___preventDefault) {
HXLINE(1945)				if ((type == HX_("keyDown",a1,69,47,9c))) {
HXLINE(1947)					this->window->onKeyDown->cancel();
            				}
            				else {
HXLINE(1951)					this->window->onKeyUp->cancel();
            				}
            			}
            			else {
HXLINE(1959)				bool _hx_tmp;
HXDLIN(1959)				if ((type == HX_("keyDown",a1,69,47,9c))) {
HXLINE(1959)					_hx_tmp = (keyCode1 == (int)9);
            				}
            				else {
HXLINE(1959)					_hx_tmp = false;
            				}
HXDLIN(1959)				if (_hx_tmp) {
HXLINE(1961)					::Array< ::Dynamic> tabStack = ::Array_obj< ::Dynamic>::__new();
HXLINE(1963)					this->_hx___tabTest(tabStack);
HXLINE(1965)					int nextIndex = (int)-1;
HXLINE(1966)					 ::openfl::display::InteractiveObject nextObject = null();
HXLINE(1967)					int nextOffset;
HXDLIN(1967)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(1967)						nextOffset = (int)-1;
            					}
            					else {
HXLINE(1967)						nextOffset = (int)1;
            					}
HXLINE(1969)					if ((tabStack->length > (int)1)) {
            						HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            						int _hx_run( ::openfl::display::InteractiveObject a, ::openfl::display::InteractiveObject b){
            							HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1971___onKey)
HXLINE(1971)							int _hx_tmp1 = a->get_tabIndex();
HXDLIN(1971)							return (_hx_tmp1 - b->get_tabIndex());
            						}
            						HX_END_LOCAL_FUNC2(return)

HXLINE(1971)						::haxe::ds::ArraySort_obj::sort(tabStack, ::Dynamic(new _hx_Closure_0()));
HXLINE(1973)						if ((tabStack->__get((tabStack->length - (int)1)).StaticCast<  ::openfl::display::InteractiveObject >()->get_tabIndex() == (int)-1)) {
HXLINE(1976)							if (hx::IsNotNull( this->get_focus() )) {
HXLINE(1976)								nextIndex = (int)0;
            							}
            							else {
HXLINE(1977)								nextIndex = this->_hx___currentTabOrderIndex;
            							}
            						}
            						else {
HXLINE(1981)							int i = (int)0;
HXLINE(1982)							while((i < tabStack->length)){
HXLINE(1984)								if ((tabStack->__get(i).StaticCast<  ::openfl::display::InteractiveObject >()->get_tabIndex() > (int)-1)) {
HXLINE(1986)									if ((i > (int)0)) {
HXLINE(1986)										tabStack->removeRange((int)0,i);
            									}
HXLINE(1987)									goto _hx_goto_91;
            								}
HXLINE(1991)								i = (i + (int)1);
            							}
            							_hx_goto_91:;
HXLINE(1995)							if (hx::IsNotNull( this->get_focus() )) {
HXLINE(1997)								int index = tabStack->indexOf(this->get_focus(),null());
HXLINE(1999)								if ((index < (int)0)) {
HXLINE(1999)									nextIndex = (int)0;
            								}
            								else {
HXLINE(2000)									nextIndex = (index + nextOffset);
            								}
            							}
            							else {
HXLINE(2004)								nextIndex = this->_hx___currentTabOrderIndex;
            							}
            						}
            					}
            					else {
HXLINE(2010)						if ((tabStack->length == (int)1)) {
HXLINE(2012)							nextObject = tabStack->__get((int)0).StaticCast<  ::openfl::display::InteractiveObject >();
HXLINE(2014)							if (hx::IsEq( this->get_focus(),nextObject )) {
HXLINE(2014)								nextObject = null();
            							}
            						}
            					}
HXLINE(2018)					bool _hx_tmp2;
HXDLIN(2018)					if ((tabStack->length != (int)1)) {
HXLINE(2018)						if ((tabStack->length == (int)0)) {
HXLINE(2018)							_hx_tmp2 = hx::IsNotNull( this->get_focus() );
            						}
            						else {
HXLINE(2018)							_hx_tmp2 = false;
            						}
            					}
            					else {
HXLINE(2018)						_hx_tmp2 = true;
            					}
HXDLIN(2018)					if (_hx_tmp2) {
HXLINE(2020)						nextIndex = (int)0;
            					}
            					else {
HXLINE(2022)						if ((tabStack->length > (int)1)) {
HXLINE(2024)							if ((nextIndex < (int)0)) {
HXLINE(2024)								nextIndex = (nextIndex + tabStack->length);
            							}
HXLINE(2026)							nextIndex = hx::Mod(nextIndex,tabStack->length);
HXLINE(2027)							nextObject = tabStack->__get(nextIndex).StaticCast<  ::openfl::display::InteractiveObject >();
HXLINE(2029)							if (hx::IsEq( nextObject,this->get_focus() )) {
HXLINE(2031)								nextIndex = (nextIndex + nextOffset);
HXLINE(2033)								if ((nextIndex < (int)0)) {
HXLINE(2033)									nextIndex = (nextIndex + tabStack->length);
            								}
HXLINE(2035)								nextIndex = hx::Mod(nextIndex,tabStack->length);
HXLINE(2036)								nextObject = tabStack->__get(nextIndex).StaticCast<  ::openfl::display::InteractiveObject >();
            							}
            						}
            					}
HXLINE(2042)					 ::openfl::events::FocusEvent focusEvent = null();
HXLINE(2044)					if (hx::IsNotNull( this->get_focus() )) {
HXLINE(2046)						focusEvent =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("keyFocusChange",09,9c,8e,e5),true,true,nextObject,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier),(int)0);
HXLINE(2048)						stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2050)						this->get_focus()->_hx___getInteractive(stack);
HXLINE(2051)						stack->reverse();
HXLINE(2053)						this->_hx___dispatchStack(focusEvent,stack);
            					}
HXLINE(2057)					bool _hx_tmp3;
HXDLIN(2057)					if (hx::IsNotNull( focusEvent )) {
HXLINE(2057)						_hx_tmp3 = !(focusEvent->isDefaultPrevented());
            					}
            					else {
HXLINE(2057)						_hx_tmp3 = true;
            					}
HXDLIN(2057)					if (_hx_tmp3) {
HXLINE(2059)						this->_hx___currentTabOrderIndex = nextIndex;
HXLINE(2060)						if (hx::IsNotNull( nextObject )) {
HXLINE(2060)							this->set_focus(nextObject);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onKey,(void))

void Stage_obj::_hx___onGamepadConnect( ::lime::ui::Gamepad gamepad){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::lime::ui::Gamepad,a1) HXARGC(2)
            		void _hx_run(int a2,Float a3){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2083___onGamepadConnect)
HXLINE(2083)			f(a1,a2,a3);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::ui::Gamepad,a11, ::Dynamic,f1) HXARGC(1)
            		void _hx_run(int a21){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2084___onGamepadConnect)
HXLINE(2084)			f1(a11,a21);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::lime::ui::Gamepad,a12, ::Dynamic,f2) HXARGC(1)
            		void _hx_run(int a22){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2085___onGamepadConnect)
HXLINE(2085)			f2(a12,a22);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::lime::ui::Gamepad,a13, ::Dynamic,f3) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2086___onGamepadConnect)
HXLINE(2086)			f3(a13);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2079___onGamepadConnect)
HXLINE(2081)		this->onGamepadConnect(gamepad);
HXLINE(2083)		 ::Dynamic f = this->onGamepadAxisMove_dyn();
HXDLIN(2083)		 ::lime::ui::Gamepad a1 = gamepad;
HXDLIN(2083)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN(2083)		gamepad->onAxisMove->add(_hx_tmp,null(),null());
HXLINE(2084)		 ::Dynamic f1 = this->onGamepadButtonDown_dyn();
HXDLIN(2084)		 ::lime::ui::Gamepad a11 = gamepad;
HXDLIN(2084)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(a11,f1));
HXDLIN(2084)		gamepad->onButtonDown->add(_hx_tmp1,null(),null());
HXLINE(2085)		 ::Dynamic f2 = this->onGamepadButtonUp_dyn();
HXDLIN(2085)		 ::lime::ui::Gamepad a12 = gamepad;
HXDLIN(2085)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(a12,f2));
HXDLIN(2085)		gamepad->onButtonUp->add(_hx_tmp2,null(),null());
HXLINE(2086)		 ::Dynamic f3 = this->onGamepadDisconnect_dyn();
HXDLIN(2086)		 ::lime::ui::Gamepad a13 = gamepad;
HXDLIN(2086)		 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_3(a13,f3));
HXDLIN(2086)		gamepad->onDisconnect->add(_hx_tmp3,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onGamepadConnect,(void))

void Stage_obj::_hx___onMouse(::String type,Float x,Float y,int button){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2092___onMouse)
HXLINE(2094)		if ((button > (int)2)) {
HXLINE(2094)			return;
            		}
HXLINE(2096)		 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2097)		targetPoint->setTo(x,y);
HXLINE(2098)		{
HXLINE(2098)			 ::openfl::geom::Matrix _this = this->_hx___displayMatrix;
HXDLIN(2098)			Float norm = (_this->a * _this->d);
HXDLIN(2098)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2098)			if ((norm1 == (int)0)) {
HXLINE(2098)				targetPoint->x = -(_this->tx);
HXDLIN(2098)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(2098)				Float _this1 = _this->c;
HXDLIN(2098)				Float px = (_this1 * (_this->ty - targetPoint->y));
HXDLIN(2098)				Float _this2 = _this->d;
HXDLIN(2098)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (targetPoint->x - _this->tx))));
HXDLIN(2098)				Float _this3 = _this->a;
HXDLIN(2098)				Float _hx_tmp = (_this3 * (targetPoint->y - _this->ty));
HXDLIN(2098)				Float _this4 = _this->b;
HXDLIN(2098)				targetPoint->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this4 * (_this->tx - targetPoint->x))));
HXDLIN(2098)				targetPoint->x = px1;
            			}
            		}
HXLINE(2100)		this->_hx___mouseX = targetPoint->x;
HXLINE(2101)		this->_hx___mouseY = targetPoint->y;
HXLINE(2103)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2104)		 ::openfl::display::InteractiveObject target = null();
HXLINE(2106)		if (this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack,true,hx::ObjectPtr<OBJ_>(this))) {
HXLINE(2108)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(2112)			target = hx::ObjectPtr<OBJ_>(this);
HXLINE(2113)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(2117)		if (hx::IsNull( target )) {
HXLINE(2117)			target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(2119)		::String clickType = null();
HXLINE(2121)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("middleMouseDown",12,2b,fe,01)) ){
HXLINE(2158)			this->_hx___mouseDownMiddle = target;
HXDLIN(2158)			goto _hx_goto_99;
            		}
            		if (  (_hx_switch_0==HX_("middleMouseUp",0b,8d,f5,3a)) ){
HXLINE(2186)			if (hx::IsEq( this->_hx___mouseDownMiddle,target )) {
HXLINE(2188)				clickType = HX_("middleClick",b3,e4,e5,43);
            			}
HXLINE(2192)			this->_hx___mouseDownMiddle = null();
HXLINE(2184)			goto _hx_goto_99;
            		}
            		if (  (_hx_switch_0==HX_("mouseDown",27,b1,c2,ee)) ){
HXLINE(2125)			if (target->_hx___allowMouseFocus()) {
HXLINE(2127)				if (hx::IsNotNull( this->get_focus() )) {
HXLINE(2129)					 ::openfl::events::FocusEvent focusEvent =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("mouseFocusChange",43,f1,81,96),true,true,target,false,(int)0);
HXLINE(2131)					this->_hx___dispatchStack(focusEvent,stack);
HXLINE(2133)					if (!(focusEvent->isDefaultPrevented())) {
HXLINE(2135)						this->set_focus(target);
            					}
            				}
            				else {
HXLINE(2143)					this->set_focus(target);
            				}
            			}
            			else {
HXLINE(2149)				this->set_focus(null());
            			}
HXLINE(2153)			this->_hx___mouseDownLeft = target;
HXLINE(2154)			::openfl::events::MouseEvent_obj::_hx___buttonDown = true;
HXLINE(2123)			goto _hx_goto_99;
            		}
            		if (  (_hx_switch_0==HX_("mouseUp",e0,f3,72,c0)) ){
HXLINE(2166)			if (hx::IsNotNull( this->_hx___mouseDownLeft )) {
HXLINE(2168)				::openfl::events::MouseEvent_obj::_hx___buttonDown = false;
HXLINE(2170)				if (hx::IsEq( this->_hx___mouseDownLeft,target )) {
HXLINE(2172)					clickType = HX_("click",48,7c,5e,48);
            				}
            				else {
HXLINE(2176)					 ::openfl::display::InteractiveObject _hx_tmp1 = this->_hx___mouseDownLeft;
HXDLIN(2176)					Float _hx_tmp2 = this->_hx___mouseX;
HXDLIN(2176)					Float _hx_tmp3 = this->_hx___mouseY;
HXDLIN(2176)					_hx_tmp1->dispatchEvent(::openfl::events::MouseEvent_obj::_hx___create(HX_("releaseOutside",1e,86,e3,ad),(int)1,_hx_tmp2,_hx_tmp3, ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->_hx___mouseX,this->_hx___mouseY),hx::ObjectPtr<OBJ_>(this),null()));
            				}
HXLINE(2180)				this->_hx___mouseDownLeft = null();
            			}
HXLINE(2166)			goto _hx_goto_99;
            		}
            		if (  (_hx_switch_0==HX_("rightMouseDown",ab,29,d7,cd)) ){
HXLINE(2162)			this->_hx___mouseDownRight = target;
HXDLIN(2162)			goto _hx_goto_99;
            		}
            		if (  (_hx_switch_0==HX_("rightMouseUp",64,83,21,ab)) ){
HXLINE(2196)			if (hx::IsEq( this->_hx___mouseDownRight,target )) {
HXLINE(2198)				clickType = HX_("rightClick",cc,62,23,4b);
            			}
HXLINE(2202)			this->_hx___mouseDownRight = null();
HXLINE(2194)			goto _hx_goto_99;
            		}
            		/* default */{
            		}
            		_hx_goto_99:;
HXLINE(2208)		 ::openfl::geom::Point localPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2210)		Float _hx_tmp4 = this->_hx___mouseX;
HXDLIN(2210)		Float _hx_tmp5 = this->_hx___mouseY;
HXDLIN(2210)		this->_hx___dispatchStack(::openfl::events::MouseEvent_obj::_hx___create(type,button,_hx_tmp4,_hx_tmp5,target->_hx___globalToLocal(targetPoint,localPoint),target,null()),stack);
HXLINE(2212)		if (hx::IsNotNull( clickType )) {
HXLINE(2214)			Float _hx_tmp6 = this->_hx___mouseX;
HXDLIN(2214)			Float _hx_tmp7 = this->_hx___mouseY;
HXDLIN(2214)			this->_hx___dispatchStack(::openfl::events::MouseEvent_obj::_hx___create(clickType,button,_hx_tmp6,_hx_tmp7,target->_hx___globalToLocal(targetPoint,localPoint),target,null()),stack);
HXLINE(2216)			bool _hx_tmp8;
HXDLIN(2216)			if ((type == HX_("mouseUp",e0,f3,72,c0))) {
HXLINE(2216)				_hx_tmp8 = target->doubleClickEnabled;
            			}
            			else {
HXLINE(2216)				_hx_tmp8 = false;
            			}
HXDLIN(2216)			if (_hx_tmp8) {
HXLINE(2218)				int currentTime = ::openfl::Lib_obj::getTimer();
HXLINE(2219)				if (((currentTime - this->_hx___lastClickTime) < (int)500)) {
HXLINE(2221)					Float _hx_tmp9 = this->_hx___mouseX;
HXDLIN(2221)					Float _hx_tmp10 = this->_hx___mouseY;
HXDLIN(2221)					this->_hx___dispatchStack(::openfl::events::MouseEvent_obj::_hx___create(HX_("doubleClick",77,03,76,cd),button,_hx_tmp9,_hx_tmp10,target->_hx___globalToLocal(targetPoint,localPoint),target,null()),stack);
HXLINE(2222)					this->_hx___lastClickTime = (int)0;
            				}
            				else {
HXLINE(2226)					this->_hx___lastClickTime = currentTime;
            				}
            			}
            		}
HXLINE(2234)		bool _hx_tmp11;
HXDLIN(2234)		if ((::openfl::ui::Mouse_obj::_hx___cursor == HX_("auto",6f,df,76,40))) {
HXLINE(2234)			_hx_tmp11 = !(::openfl::ui::Mouse_obj::_hx___hidden);
            		}
            		else {
HXLINE(2234)			_hx_tmp11 = false;
            		}
HXDLIN(2234)		if (_hx_tmp11) {
HXLINE(2236)			::String cursor = null();
HXLINE(2238)			if (hx::IsNotNull( this->_hx___mouseDownLeft )) {
HXLINE(2240)				cursor = this->_hx___mouseDownLeft->_hx___getCursor();
            			}
            			else {
HXLINE(2244)				int _g = (int)0;
HXDLIN(2244)				while((_g < stack->length)){
HXLINE(2244)					 ::openfl::display::DisplayObject target1 = stack->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(2244)					_g = (_g + (int)1);
HXLINE(2246)					cursor = target1->_hx___getCursor();
HXLINE(2248)					if (hx::IsNotNull( cursor )) {
HXLINE(2250)						 ::lime::ui::Window _hx_tmp12 = this->window;
HXDLIN(2250)						_hx_tmp12->set_cursor(::openfl::ui::_MouseCursor::MouseCursor_Impl__obj::toLimeCursor(cursor));
HXLINE(2251)						goto _hx_goto_100;
            					}
            				}
            				_hx_goto_100:;
            			}
HXLINE(2259)			if (hx::IsNull( cursor )) {
HXLINE(2261)				this->window->set_cursor(::lime::ui::MouseCursor_obj::ARROW_dyn());
            			}
            		}
HXLINE(2267)		 ::openfl::events::MouseEvent event;
HXLINE(2269)		if (hx::IsNotEq( target,this->_hx___mouseOverTarget )) {
HXLINE(2271)			if (hx::IsNotNull( this->_hx___mouseOverTarget )) {
HXLINE(2273)				Float event1 = this->_hx___mouseX;
HXDLIN(2273)				Float event2 = this->_hx___mouseY;
HXDLIN(2273)				 ::openfl::geom::Point event3 = this->_hx___mouseOverTarget->_hx___globalToLocal(targetPoint,localPoint);
HXDLIN(2273)				event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseOut",69,e7,1d,a4),button,event1,event2,event3,this->_hx___mouseOverTarget,null());
HXLINE(2274)				this->_hx___dispatchStack(event,this->_hx___mouseOutStack);
            			}
            		}
HXLINE(2280)		{
HXLINE(2280)			int _g1 = (int)0;
HXDLIN(2280)			::Array< ::Dynamic> _g11 = this->_hx___rollOutStack;
HXDLIN(2280)			while((_g1 < _g11->length)){
HXLINE(2280)				 ::openfl::display::DisplayObject target2 = _g11->__get(_g1).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(2280)				_g1 = (_g1 + (int)1);
HXLINE(2282)				if ((stack->indexOf(target2,null()) == (int)-1)) {
HXLINE(2284)					this->_hx___rollOutStack->remove(target2);
HXLINE(2286)					Float event4 = this->_hx___mouseX;
HXDLIN(2286)					Float event5 = this->_hx___mouseY;
HXDLIN(2286)					 ::openfl::geom::Point event6 = this->_hx___mouseOverTarget->_hx___globalToLocal(targetPoint,localPoint);
HXDLIN(2286)					event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("rollOut",11,f9,11,5d),button,event4,event5,event6,this->_hx___mouseOverTarget,null());
HXLINE(2287)					event->bubbles = false;
HXLINE(2288)					this->_hx___dispatchTarget(target2,event);
            				}
            			}
            		}
HXLINE(2294)		{
HXLINE(2294)			int _g2 = (int)0;
HXDLIN(2294)			while((_g2 < stack->length)){
HXLINE(2294)				 ::openfl::display::DisplayObject target3 = stack->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(2294)				_g2 = (_g2 + (int)1);
HXLINE(2296)				bool _hx_tmp13;
HXDLIN(2296)				if ((this->_hx___rollOutStack->indexOf(target3,null()) == (int)-1)) {
HXLINE(2296)					_hx_tmp13 = hx::IsNotNull( this->_hx___mouseOverTarget );
            				}
            				else {
HXLINE(2296)					_hx_tmp13 = false;
            				}
HXDLIN(2296)				if (_hx_tmp13) {
HXLINE(2298)					if (target3->hasEventListener(HX_("rollOver",71,ab,a8,12))) {
HXLINE(2300)						Float event7 = this->_hx___mouseX;
HXDLIN(2300)						Float event8 = this->_hx___mouseY;
HXDLIN(2300)						event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("rollOver",71,ab,a8,12),button,event7,event8,this->_hx___mouseOverTarget->_hx___globalToLocal(targetPoint,localPoint),( ( ::openfl::display::InteractiveObject)(target3) ),null());
HXLINE(2301)						event->bubbles = false;
HXLINE(2302)						this->_hx___dispatchTarget(target3,event);
            					}
HXLINE(2306)					bool _hx_tmp14;
HXDLIN(2306)					if (!(target3->hasEventListener(HX_("rollOut",11,f9,11,5d)))) {
HXLINE(2306)						_hx_tmp14 = target3->hasEventListener(HX_("rollOver",71,ab,a8,12));
            					}
            					else {
HXLINE(2306)						_hx_tmp14 = true;
            					}
HXDLIN(2306)					if (_hx_tmp14) {
HXLINE(2308)						this->_hx___rollOutStack->push(target3);
            					}
            				}
            			}
            		}
HXLINE(2316)		if (hx::IsNotEq( target,this->_hx___mouseOverTarget )) {
HXLINE(2318)			if (hx::IsNotNull( target )) {
HXLINE(2320)				Float event9 = this->_hx___mouseX;
HXDLIN(2320)				Float event10 = this->_hx___mouseY;
HXDLIN(2320)				event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseOver",19,4a,0d,f6),button,event9,event10,target->_hx___globalToLocal(targetPoint,localPoint),target,null());
HXLINE(2321)				this->_hx___dispatchStack(event,stack);
            			}
HXLINE(2325)			this->_hx___mouseOverTarget = target;
HXLINE(2326)			this->_hx___mouseOutStack = stack;
            		}
HXLINE(2330)		if (hx::IsNotNull( this->_hx___dragObject )) {
HXLINE(2332)			this->_hx___drag(targetPoint);
HXLINE(2334)			 ::openfl::display::DisplayObject dropTarget = null();
HXLINE(2336)			if (hx::IsEq( this->_hx___mouseOverTarget,this->_hx___dragObject )) {
HXLINE(2338)				bool cacheMouseEnabled = this->_hx___dragObject->mouseEnabled;
HXLINE(2339)				bool cacheMouseChildren = this->_hx___dragObject->mouseChildren;
HXLINE(2341)				this->_hx___dragObject->mouseEnabled = false;
HXLINE(2342)				this->_hx___dragObject->mouseChildren = false;
HXLINE(2344)				::Array< ::Dynamic> stack1 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2346)				if (this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack1,true,hx::ObjectPtr<OBJ_>(this))) {
HXLINE(2348)					dropTarget = stack1->__get((stack1->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >();
            				}
HXLINE(2352)				this->_hx___dragObject->mouseEnabled = cacheMouseEnabled;
HXLINE(2353)				this->_hx___dragObject->mouseChildren = cacheMouseChildren;
            			}
            			else {
HXLINE(2355)				if (hx::IsNotEq( this->_hx___mouseOverTarget,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2357)					dropTarget = this->_hx___mouseOverTarget;
            				}
            			}
HXLINE(2361)			this->_hx___dragObject->dropTarget = dropTarget;
            		}
HXLINE(2365)		::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
HXLINE(2366)		::openfl::geom::Point_obj::_hx___pool->release(localPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,_hx___onMouse,(void))

void Stage_obj::_hx___onMouseWheel(Float deltaX,Float deltaY, ::lime::ui::MouseWheelMode deltaMode){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2372___onMouseWheel)
HXLINE(2374)		Float x = this->_hx___mouseX;
HXLINE(2375)		Float y = this->_hx___mouseY;
HXLINE(2377)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2378)		 ::openfl::display::InteractiveObject target = null();
HXLINE(2380)		if (this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack,true,hx::ObjectPtr<OBJ_>(this))) {
HXLINE(2382)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(2386)			target = hx::ObjectPtr<OBJ_>(this);
HXLINE(2387)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(2391)		if (hx::IsNull( target )) {
HXLINE(2391)			target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(2392)		 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2393)		targetPoint->setTo(x,y);
HXLINE(2394)		{
HXLINE(2394)			 ::openfl::geom::Matrix _this = this->_hx___displayMatrix;
HXDLIN(2394)			Float norm = (_this->a * _this->d);
HXDLIN(2394)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2394)			if ((norm1 == (int)0)) {
HXLINE(2394)				targetPoint->x = -(_this->tx);
HXDLIN(2394)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(2394)				Float _this1 = _this->c;
HXDLIN(2394)				Float px = (_this1 * (_this->ty - targetPoint->y));
HXDLIN(2394)				Float _this2 = _this->d;
HXDLIN(2394)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (targetPoint->x - _this->tx))));
HXDLIN(2394)				Float _this3 = _this->a;
HXDLIN(2394)				Float _hx_tmp = (_this3 * (targetPoint->y - _this->ty));
HXDLIN(2394)				Float _this4 = _this->b;
HXDLIN(2394)				targetPoint->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this4 * (_this->tx - targetPoint->x))));
HXDLIN(2394)				targetPoint->x = px1;
            			}
            		}
HXLINE(2395)		int delta = ::Std_obj::_hx_int(deltaY);
HXLINE(2397)		Float _hx_tmp1 = this->_hx___mouseX;
HXDLIN(2397)		Float _hx_tmp2 = this->_hx___mouseY;
HXDLIN(2397)		this->_hx___dispatchStack(::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseWheel",36,28,87,e7),(int)0,_hx_tmp1,_hx_tmp2,target->_hx___globalToLocal(targetPoint,targetPoint),target,delta),stack);
HXLINE(2399)		::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onMouseWheel,(void))

void Stage_obj::_hx___onTouch(::String type, ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2406___onTouch)
HXLINE(2408)		 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2409)		int _hx_tmp = ::Math_obj::round(((touch->x * this->window->_hx___width) * this->window->_hx___scale));
HXDLIN(2409)		targetPoint->setTo(_hx_tmp,::Math_obj::round(((touch->y * this->window->_hx___height) * this->window->_hx___scale)));
HXLINE(2410)		{
HXLINE(2410)			 ::openfl::geom::Matrix _this = this->_hx___displayMatrix;
HXDLIN(2410)			Float norm = (_this->a * _this->d);
HXDLIN(2410)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2410)			if ((norm1 == (int)0)) {
HXLINE(2410)				targetPoint->x = -(_this->tx);
HXDLIN(2410)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(2410)				Float _this1 = _this->c;
HXDLIN(2410)				Float px = (_this1 * (_this->ty - targetPoint->y));
HXDLIN(2410)				Float _this2 = _this->d;
HXDLIN(2410)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (targetPoint->x - _this->tx))));
HXDLIN(2410)				Float _this3 = _this->a;
HXDLIN(2410)				Float _hx_tmp1 = (_this3 * (targetPoint->y - _this->ty));
HXDLIN(2410)				Float _this4 = _this->b;
HXDLIN(2410)				targetPoint->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp1 + (_this4 * (_this->tx - targetPoint->x))));
HXDLIN(2410)				targetPoint->x = px1;
            			}
            		}
HXLINE(2412)		Float touchX = targetPoint->x;
HXLINE(2413)		Float touchY = targetPoint->y;
HXLINE(2415)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2416)		 ::openfl::display::InteractiveObject target = null();
HXLINE(2418)		if (this->_hx___hitTest(touchX,touchY,false,stack,true,hx::ObjectPtr<OBJ_>(this))) {
HXLINE(2420)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(2425)			target = hx::ObjectPtr<OBJ_>(this);
HXLINE(2426)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(2430)		if (hx::IsNull( target )) {
HXLINE(2430)			target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(2432)		int touchId = touch->id;
HXLINE(2433)		 ::openfl::_internal::utils::TouchData touchData = null();
HXLINE(2435)		if (this->_hx___touchData->exists(touchId)) {
HXLINE(2437)			touchData = this->_hx___touchData->get(touchId).StaticCast<  ::openfl::_internal::utils::TouchData >();
            		}
            		else {
HXLINE(2441)			touchData = ::openfl::_internal::utils::TouchData_obj::_hx___pool->get().StaticCast<  ::openfl::_internal::utils::TouchData >();
HXLINE(2442)			touchData->reset();
HXLINE(2443)			touchData->touch = touch;
HXLINE(2444)			this->_hx___touchData->set(touchId,touchData);
            		}
HXLINE(2448)		::String touchType = null();
HXLINE(2449)		bool releaseTouchData = false;
HXLINE(2451)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("touchBegin",ea,cd,e6,a9)) ){
HXLINE(2455)			touchData->touchDownTarget = target;
HXDLIN(2455)			goto _hx_goto_105;
            		}
            		if (  (_hx_switch_0==HX_("touchEnd",5c,c5,09,00)) ){
HXLINE(2459)			if (hx::IsEq( touchData->touchDownTarget,target )) {
HXLINE(2461)				touchType = HX_("touchTap",e4,1b,15,00);
            			}
HXLINE(2465)			touchData->touchDownTarget = null();
HXLINE(2466)			releaseTouchData = true;
HXLINE(2457)			goto _hx_goto_105;
            		}
            		/* default */{
            		}
            		_hx_goto_105:;
HXLINE(2473)		 ::openfl::geom::Point localPoint = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2474)		bool isPrimaryTouchPoint = hx::IsEq( this->_hx___primaryTouch,touch );
HXLINE(2475)		 ::openfl::events::TouchEvent touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(type,null(),touchX,touchY,target->_hx___globalToLocal(targetPoint,localPoint),target);
HXLINE(2476)		touchEvent->touchPointID = touchId;
HXLINE(2477)		touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2478)		touchEvent->pressure = touch->pressure;
HXLINE(2480)		this->_hx___dispatchStack(touchEvent,stack);
HXLINE(2482)		if (hx::IsNotNull( touchType )) {
HXLINE(2484)			touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(touchType,null(),touchX,touchY,target->_hx___globalToLocal(targetPoint,localPoint),target);
HXLINE(2485)			touchEvent->touchPointID = touchId;
HXLINE(2486)			touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2487)			touchEvent->pressure = touch->pressure;
HXLINE(2489)			this->_hx___dispatchStack(touchEvent,stack);
            		}
HXLINE(2493)		 ::openfl::display::InteractiveObject touchOverTarget = touchData->touchOverTarget;
HXLINE(2495)		bool _hx_tmp2;
HXDLIN(2495)		if (hx::IsNotEq( target,touchOverTarget )) {
HXLINE(2495)			_hx_tmp2 = hx::IsNotNull( touchOverTarget );
            		}
            		else {
HXLINE(2495)			_hx_tmp2 = false;
            		}
HXDLIN(2495)		if (_hx_tmp2) {
HXLINE(2497)			touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchOut",0f,62,11,00),null(),touchX,touchY,touchOverTarget->_hx___globalToLocal(targetPoint,localPoint),touchOverTarget);
HXLINE(2498)			touchEvent->touchPointID = touchId;
HXLINE(2499)			touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2500)			touchEvent->pressure = touch->pressure;
HXLINE(2502)			this->_hx___dispatchTarget(touchOverTarget,touchEvent);
            		}
HXLINE(2506)		::Array< ::Dynamic> touchOutStack = touchData->rollOutStack;
HXLINE(2508)		{
HXLINE(2508)			int _g = (int)0;
HXDLIN(2508)			while((_g < touchOutStack->length)){
HXLINE(2508)				 ::openfl::display::DisplayObject target1 = touchOutStack->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(2508)				_g = (_g + (int)1);
HXLINE(2510)				if ((stack->indexOf(target1,null()) == (int)-1)) {
HXLINE(2512)					touchOutStack->remove(target1);
HXLINE(2514)					touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchRollOut",12,0f,74,87),null(),touchX,touchY,touchOverTarget->_hx___globalToLocal(targetPoint,localPoint),touchOverTarget);
HXLINE(2515)					touchEvent->touchPointID = touchId;
HXLINE(2516)					touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2517)					touchEvent->bubbles = false;
HXLINE(2518)					touchEvent->pressure = touch->pressure;
HXLINE(2520)					this->_hx___dispatchTarget(target1,touchEvent);
            				}
            			}
            		}
HXLINE(2526)		{
HXLINE(2526)			int _g1 = (int)0;
HXDLIN(2526)			while((_g1 < stack->length)){
HXLINE(2526)				 ::openfl::display::DisplayObject target2 = stack->__get(_g1).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(2526)				_g1 = (_g1 + (int)1);
HXLINE(2528)				if ((touchOutStack->indexOf(target2,null()) == (int)-1)) {
HXLINE(2530)					if (target2->hasEventListener(HX_("touchRollOver",50,d6,19,fe))) {
HXLINE(2532)						touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchRollOver",50,d6,19,fe),null(),touchX,touchY,touchOverTarget->_hx___globalToLocal(targetPoint,localPoint),( ( ::openfl::display::InteractiveObject)(target2) ));
HXLINE(2533)						touchEvent->touchPointID = touchId;
HXLINE(2534)						touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2535)						touchEvent->bubbles = false;
HXLINE(2536)						touchEvent->pressure = touch->pressure;
HXLINE(2538)						this->_hx___dispatchTarget(target2,touchEvent);
            					}
HXLINE(2542)					if (target2->hasEventListener(HX_("touchRollOut",12,0f,74,87))) {
HXLINE(2544)						touchOutStack->push(target2);
            					}
            				}
            			}
            		}
HXLINE(2552)		if (hx::IsNotEq( target,touchOverTarget )) {
HXLINE(2554)			if (hx::IsNotNull( target )) {
HXLINE(2556)				touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchOver",b3,20,25,0f),null(),touchX,touchY,target->_hx___globalToLocal(targetPoint,localPoint),target);
HXLINE(2557)				touchEvent->touchPointID = touchId;
HXLINE(2558)				touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(2559)				touchEvent->bubbles = true;
HXLINE(2560)				touchEvent->pressure = touch->pressure;
HXLINE(2562)				this->_hx___dispatchTarget(target,touchEvent);
            			}
HXLINE(2566)			touchData->touchOverTarget = target;
            		}
HXLINE(2570)		::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
HXLINE(2571)		::openfl::geom::Point_obj::_hx___pool->release(localPoint);
HXLINE(2573)		if (releaseTouchData) {
HXLINE(2575)			this->_hx___touchData->remove(touchId);
HXLINE(2576)			touchData->reset();
HXLINE(2577)			::openfl::_internal::utils::TouchData_obj::_hx___pool->release(touchData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onTouch,(void))

void Stage_obj::_hx___registerLimeModule( ::lime::app::Application application){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2586___registerLimeModule)
HXLINE(2588)		application->onCreateWindow->add(this->_hx___addWindow_dyn(),null(),null());
HXLINE(2589)		application->onUpdate->add(this->update_dyn(),null(),null());
HXLINE(2590)		application->onExit->add(this->onModuleExit_dyn(),false,(int)0);
HXLINE(2592)		{
HXLINE(2592)			 ::Dynamic gamepad = ::lime::ui::Gamepad_obj::devices->iterator();
HXDLIN(2592)			while(( (bool)(gamepad->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2592)				 ::lime::ui::Gamepad gamepad1 = ( ( ::lime::ui::Gamepad)(gamepad->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2594)				this->_hx___onGamepadConnect(gamepad1);
            			}
            		}
HXLINE(2598)		::lime::ui::Gamepad_obj::onConnect->add(this->_hx___onGamepadConnect_dyn(),null(),null());
HXLINE(2599)		::lime::ui::Touch_obj::onStart->add(this->onTouchStart_dyn(),null(),null());
HXLINE(2600)		::lime::ui::Touch_obj::onMove->add(this->onTouchMove_dyn(),null(),null());
HXLINE(2601)		::lime::ui::Touch_obj::onEnd->add(this->onTouchEnd_dyn(),null(),null());
HXLINE(2602)		::lime::ui::Touch_obj::onCancel->add(this->onTouchCancel_dyn(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___registerLimeModule,(void))

void Stage_obj::_hx___resize(){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2608___resize)
HXLINE(2610)		int cacheWidth = this->stageWidth;
HXLINE(2611)		int cacheHeight = this->stageHeight;
HXLINE(2613)		int windowWidth = ::Std_obj::_hx_int((this->window->_hx___width * this->window->_hx___scale));
HXLINE(2614)		int windowHeight = ::Std_obj::_hx_int((this->window->_hx___height * this->window->_hx___scale));
HXLINE(2621)		this->_hx___displayMatrix->identity();
HXLINE(2623)		bool _hx_tmp;
HXDLIN(2623)		if (hx::IsNotNull( this->get_fullScreenSourceRect() )) {
HXLINE(2623)			_hx_tmp = this->window->_hx___fullscreen;
            		}
            		else {
HXLINE(2623)			_hx_tmp = false;
            		}
HXDLIN(2623)		if (_hx_tmp) {
HXLINE(2625)			this->stageWidth = ::Std_obj::_hx_int(this->get_fullScreenSourceRect()->width);
HXLINE(2626)			this->stageHeight = ::Std_obj::_hx_int(this->get_fullScreenSourceRect()->height);
HXLINE(2628)			Float displayScaleX = ((Float)windowWidth / (Float)this->stageWidth);
HXLINE(2629)			Float displayScaleY = ((Float)windowHeight / (Float)this->stageHeight);
HXLINE(2631)			 ::openfl::geom::Matrix _hx_tmp1 = this->_hx___displayMatrix;
HXDLIN(2631)			Float _hx_tmp2 = -(this->get_fullScreenSourceRect()->x);
HXDLIN(2631)			_hx_tmp1->translate(_hx_tmp2,-(this->get_fullScreenSourceRect()->y));
HXLINE(2632)			this->_hx___displayMatrix->scale(displayScaleX,displayScaleY);
HXLINE(2634)			 ::openfl::geom::Rectangle _hx_tmp3 = this->_hx___displayRect;
HXDLIN(2634)			Float _hx_tmp4 = this->get_fullScreenSourceRect()->get_left();
HXDLIN(2634)			Float _hx_tmp5 = this->get_fullScreenSourceRect()->get_right();
HXDLIN(2634)			Float _hx_tmp6 = this->get_fullScreenSourceRect()->get_top();
HXDLIN(2634)			_hx_tmp3->setTo(_hx_tmp4,_hx_tmp5,_hx_tmp6,this->get_fullScreenSourceRect()->get_bottom());
            		}
            		else {
HXLINE(2638)			bool _hx_tmp7;
HXDLIN(2638)			if ((this->_hx___logicalWidth == (int)0)) {
HXLINE(2638)				_hx_tmp7 = (this->_hx___logicalHeight == (int)0);
            			}
            			else {
HXLINE(2638)				_hx_tmp7 = false;
            			}
HXDLIN(2638)			if (_hx_tmp7) {
HXLINE(2640)				this->stageWidth = windowWidth;
HXLINE(2641)				this->stageHeight = windowHeight;
            			}
            			else {
HXLINE(2645)				this->stageWidth = this->_hx___logicalWidth;
HXLINE(2646)				this->stageHeight = this->_hx___logicalHeight;
HXLINE(2648)				Float scaleX = ((Float)windowWidth / (Float)this->stageWidth);
HXLINE(2649)				Float scaleY = ((Float)windowHeight / (Float)this->stageHeight);
HXLINE(2650)				Float targetScale = ::Math_obj::min(scaleX,scaleY);
HXLINE(2652)				int offsetX = ::Math_obj::round(((Float)(windowWidth - (this->stageWidth * targetScale)) / (Float)(int)2));
HXLINE(2653)				int offsetY = ::Math_obj::round(((Float)(windowHeight - (this->stageHeight * targetScale)) / (Float)(int)2));
HXLINE(2655)				this->_hx___displayMatrix->scale(targetScale,targetScale);
HXLINE(2656)				this->_hx___displayMatrix->translate(offsetX,offsetY);
            			}
HXLINE(2660)			this->_hx___displayRect->setTo((int)0,(int)0,this->stageWidth,this->stageHeight);
            		}
HXLINE(2664)		if (hx::IsNotNull( this->context3D )) {
HXLINE(2666)			this->context3D->configureBackBuffer(windowWidth,windowHeight,(int)0,true,true,true);
            		}
HXLINE(2670)		{
HXLINE(2670)			int _g = (int)0;
HXDLIN(2670)			 ::openfl::_Vector::ObjectVector _g1 = this->stage3Ds;
HXDLIN(2670)			while((_g < _g1->get_length())){
HXLINE(2670)				 ::openfl::display::Stage3D stage3D = _g1->get(_g).StaticCast<  ::openfl::display::Stage3D >();
HXDLIN(2670)				_g = (_g + (int)1);
HXLINE(2672)				stage3D->_hx___resize(windowWidth,windowHeight);
            			}
            		}
HXLINE(2676)		if (hx::IsNotNull( this->_hx___renderer )) {
HXLINE(2678)			this->_hx___renderer->_hx___resize(windowWidth,windowHeight);
            		}
HXLINE(2682)		bool _hx_tmp8;
HXDLIN(2682)		if ((this->stageWidth == cacheWidth)) {
HXLINE(2682)			_hx_tmp8 = (this->stageHeight != cacheHeight);
            		}
            		else {
HXLINE(2682)			_hx_tmp8 = true;
            		}
HXDLIN(2682)		if (_hx_tmp8) {
HXLINE(2684)			this->_hx___renderDirty = true;
HXLINE(2685)			this->_hx___setTransformDirty();
HXLINE(2687)			this->_hx___dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("resize",f4,59,7b,08),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___resize,(void))

void Stage_obj::_hx___setLogicalSize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2694___setLogicalSize)
HXLINE(2696)		this->_hx___logicalWidth = width;
HXLINE(2697)		this->_hx___logicalHeight = height;
HXLINE(2699)		this->_hx___resize();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___setLogicalSize,(void))

void Stage_obj::_hx___startDrag( ::openfl::display::Sprite sprite,bool lockCenter, ::openfl::geom::Rectangle bounds){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2704___startDrag)
HXLINE(2706)		if (hx::IsNull( bounds )) {
HXLINE(2708)			this->_hx___dragBounds = null();
            		}
            		else {
HXLINE(2712)			this->_hx___dragBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(2714)			Float right = bounds->get_right();
HXLINE(2715)			Float bottom = bounds->get_bottom();
HXLINE(2716)			Float _hx_tmp;
HXDLIN(2716)			if ((right < bounds->x)) {
HXLINE(2716)				_hx_tmp = right;
            			}
            			else {
HXLINE(2716)				_hx_tmp = bounds->x;
            			}
HXDLIN(2716)			this->_hx___dragBounds->x = _hx_tmp;
HXLINE(2717)			Float _hx_tmp1;
HXDLIN(2717)			if ((bottom < bounds->y)) {
HXLINE(2717)				_hx_tmp1 = bottom;
            			}
            			else {
HXLINE(2717)				_hx_tmp1 = bounds->y;
            			}
HXDLIN(2717)			this->_hx___dragBounds->y = _hx_tmp1;
HXLINE(2718)			this->_hx___dragBounds->width = ::Math_obj::abs(bounds->width);
HXLINE(2719)			this->_hx___dragBounds->height = ::Math_obj::abs(bounds->height);
            		}
HXLINE(2723)		this->_hx___dragObject = sprite;
HXLINE(2725)		if (hx::IsNotNull( this->_hx___dragObject )) {
HXLINE(2727)			if (lockCenter) {
HXLINE(2729)				this->_hx___dragOffsetX = (int)0;
HXLINE(2730)				this->_hx___dragOffsetY = (int)0;
            			}
            			else {
HXLINE(2734)				 ::openfl::geom::Point mouse = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE(2735)				Float _hx_tmp2 = this->get_mouseX();
HXDLIN(2735)				mouse->setTo(_hx_tmp2,this->get_mouseY());
HXLINE(2736)				 ::openfl::display::DisplayObjectContainer parent = this->_hx___dragObject->parent;
HXLINE(2738)				if (hx::IsNotNull( parent )) {
HXLINE(2740)					 ::openfl::geom::Matrix _this = parent->_hx___getWorldTransform();
HXDLIN(2740)					Float norm = (_this->a * _this->d);
HXDLIN(2740)					Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2740)					if ((norm1 == (int)0)) {
HXLINE(2740)						mouse->x = -(_this->tx);
HXDLIN(2740)						mouse->y = -(_this->ty);
            					}
            					else {
HXLINE(2740)						Float _this1 = _this->c;
HXDLIN(2740)						Float px = (_this1 * (_this->ty - mouse->y));
HXDLIN(2740)						Float _this2 = _this->d;
HXDLIN(2740)						Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (mouse->x - _this->tx))));
HXDLIN(2740)						Float _this3 = _this->a;
HXDLIN(2740)						Float _hx_tmp3 = (_this3 * (mouse->y - _this->ty));
HXDLIN(2740)						Float _this4 = _this->b;
HXDLIN(2740)						mouse->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp3 + (_this4 * (_this->tx - mouse->x))));
HXDLIN(2740)						mouse->x = px1;
            					}
            				}
HXLINE(2744)				Float _hx_tmp4 = this->_hx___dragObject->get_x();
HXDLIN(2744)				this->_hx___dragOffsetX = (_hx_tmp4 - mouse->x);
HXLINE(2745)				Float _hx_tmp5 = this->_hx___dragObject->get_y();
HXDLIN(2745)				this->_hx___dragOffsetY = (_hx_tmp5 - mouse->y);
HXLINE(2746)				::openfl::geom::Point_obj::_hx___pool->release(mouse);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___startDrag,(void))

void Stage_obj::_hx___stopDrag( ::openfl::display::Sprite sprite){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2755___stopDrag)
HXLINE(2757)		this->_hx___dragBounds = null();
HXLINE(2758)		this->_hx___dragObject = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___stopDrag,(void))

void Stage_obj::_hx___unregisterLimeModule( ::lime::app::Application application){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2763___unregisterLimeModule)
HXLINE(2766)		application->onCreateWindow->remove(this->_hx___addWindow_dyn());
HXLINE(2767)		application->onUpdate->remove(this->update_dyn());
HXLINE(2768)		application->onExit->remove(this->onModuleExit_dyn());
HXLINE(2770)		::lime::ui::Gamepad_obj::onConnect->remove(this->_hx___onGamepadConnect_dyn());
HXLINE(2771)		::lime::ui::Touch_obj::onStart->remove(this->onTouchStart_dyn());
HXLINE(2772)		::lime::ui::Touch_obj::onMove->remove(this->onTouchMove_dyn());
HXLINE(2773)		::lime::ui::Touch_obj::onEnd->remove(this->onTouchEnd_dyn());
HXLINE(2774)		::lime::ui::Touch_obj::onCancel->remove(this->onTouchCancel_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___unregisterLimeModule,(void))

void Stage_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2782___update)
HXDLIN(2782)		if (transformOnly) {
HXLINE(2784)			if (this->_hx___transformDirty) {
HXLINE(2786)				this->super::_hx___update(true,updateChildren);
HXLINE(2788)				if (updateChildren) {
HXLINE(2790)					this->_hx___transformDirty = false;
            				}
            			}
            		}
            		else {
HXLINE(2799)			bool _hx_tmp;
HXDLIN(2799)			if (!(this->_hx___transformDirty)) {
HXLINE(2799)				_hx_tmp = this->_hx___renderDirty;
            			}
            			else {
HXLINE(2799)				_hx_tmp = true;
            			}
HXDLIN(2799)			if (_hx_tmp) {
HXLINE(2801)				this->super::_hx___update(false,updateChildren);
HXLINE(2803)				bool updateChildren1 = updateChildren;
            			}
            			else {
HXLINE(2818)				bool _hx_tmp1;
HXDLIN(2818)				if (!(this->_hx___renderDirty)) {
HXLINE(2818)					_hx_tmp1 = this->_hx___wasDirty;
            				}
            				else {
HXLINE(2818)					_hx_tmp1 = false;
            				}
HXDLIN(2818)				if (_hx_tmp1) {
HXLINE(2823)					this->super::_hx___update(false,updateChildren);
HXLINE(2825)					if (updateChildren) {
HXLINE(2827)						this->_hx___wasDirty = false;
            					}
            				}
            			}
            		}
            	}


 ::Dynamic Stage_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2847_get_color)
HXDLIN(2847)		return this->_hx___color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_color,return )

 ::Dynamic Stage_obj::set_color( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2852_set_color)
HXLINE(2854)		if (hx::IsNull( value )) {
HXLINE(2856)			this->_hx___transparent = true;
HXLINE(2857)			value = (int)0;
            		}
            		else {
HXLINE(2861)			this->_hx___transparent = false;
            		}
HXLINE(2865)		if (hx::IsNotEq( this->_hx___color,value )) {
HXLINE(2867)			int r = hx::UShr(((int)value & (int)(int)16711680),(int)16);
HXLINE(2868)			int g = hx::UShr(((int)value & (int)(int)65280),(int)8);
HXLINE(2869)			int b = ((int)value & (int)(int)255);
HXLINE(2871)			::Array< Float > _hx_tmp = this->_hx___colorSplit;
HXDLIN(2871)			_hx_tmp[(int)0] = ((Float)r / (Float)(int)255);
HXLINE(2872)			::Array< Float > _hx_tmp1 = this->_hx___colorSplit;
HXDLIN(2872)			_hx_tmp1[(int)1] = ((Float)g / (Float)(int)255);
HXLINE(2873)			::Array< Float > _hx_tmp2 = this->_hx___colorSplit;
HXDLIN(2873)			_hx_tmp2[(int)2] = ((Float)b / (Float)(int)255);
HXLINE(2874)			this->_hx___colorString = (HX_("#",23,00,00,00) + ::StringTools_obj::hex(((int)value & (int)(int)16777215),(int)6));
HXLINE(2875)			this->_hx___renderDirty = true;
HXLINE(2876)			this->_hx___color = ((int)(int)-16777216 | (int)((int)value & (int)(int)16777215));
            		}
HXLINE(2880)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_color,return )

Float Stage_obj::get_contentsScaleFactor(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2887_get_contentsScaleFactor)
HXDLIN(2887)		return this->_hx___contentsScaleFactor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_contentsScaleFactor,return )

 ::Dynamic Stage_obj::get_displayState(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2894_get_displayState)
HXDLIN(2894)		return this->_hx___displayState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_displayState,return )

 ::Dynamic Stage_obj::set_displayState( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2899_set_displayState)
HXLINE(2901)		if (hx::IsNotNull( this->window )) {
HXLINE(2903)			if (hx::IsEq( value,(int)2 )) {
HXLINE(2907)				if (this->window->_hx___fullscreen) {
HXLINE(2910)					this->window->set_fullscreen(false);
            				}
            			}
            			else {
HXLINE(2916)				if (!(this->window->_hx___fullscreen)) {
HXLINE(2919)					this->window->set_fullscreen(true);
            				}
            			}
            		}
HXLINE(2927)		return (this->_hx___displayState = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_displayState,return )

 ::openfl::display::InteractiveObject Stage_obj::get_focus(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2934_get_focus)
HXDLIN(2934)		return this->_hx___focus;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_focus,return )

 ::openfl::display::InteractiveObject Stage_obj::set_focus( ::openfl::display::InteractiveObject value){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2939_set_focus)
HXLINE(2941)		if (hx::IsNotEq( value,this->_hx___focus )) {
HXLINE(2943)			 ::openfl::display::InteractiveObject oldFocus = this->_hx___focus;
HXLINE(2944)			this->_hx___focus = value;
HXLINE(2945)			this->_hx___cacheFocus = value;
HXLINE(2947)			if (hx::IsNotNull( oldFocus )) {
HXLINE(2949)				 ::openfl::events::FocusEvent event =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusOut",96,6f,5e,11),true,false,value,false,(int)0);
HXLINE(2950)				::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(2951)				oldFocus->_hx___getInteractive(stack);
HXLINE(2952)				stack->reverse();
HXLINE(2953)				this->_hx___dispatchStack(event,stack);
            			}
HXLINE(2957)			if (hx::IsNotNull( value )) {
HXLINE(2959)				 ::openfl::events::FocusEvent event1 =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusIn",dd,45,83,41),true,false,oldFocus,false,(int)0);
HXLINE(2960)				::Array< ::Dynamic> stack1 = ::Array_obj< ::Dynamic>::__new();
HXLINE(2961)				value->_hx___getInteractive(stack1);
HXLINE(2962)				stack1->reverse();
HXLINE(2963)				this->_hx___dispatchStack(event1,stack1);
            			}
            		}
HXLINE(2969)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_focus,return )

Float Stage_obj::get_frameRate(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2974_get_frameRate)
HXLINE(2976)		if (hx::IsNotNull( this->window )) {
HXLINE(2978)			return this->window->_hx___backend->getFrameRate();
            		}
HXLINE(2982)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_frameRate,return )

Float Stage_obj::set_frameRate(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2987_set_frameRate)
HXLINE(2989)		if (hx::IsNotNull( this->window )) {
HXLINE(2991)			return this->window->_hx___backend->setFrameRate(value);
            		}
HXLINE(2995)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_frameRate,return )

int Stage_obj::get_fullScreenHeight(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3002_get_fullScreenHeight)
HXDLIN(3002)		Float _hx_tmp = this->window->_hx___scale;
HXDLIN(3002)		return ::Math_obj::ceil((this->window->get_display()->currentMode->height * _hx_tmp));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_fullScreenHeight,return )

 ::openfl::geom::Rectangle Stage_obj::get_fullScreenSourceRect(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3009_get_fullScreenSourceRect)
HXDLIN(3009)		if (hx::IsNull( this->_hx___fullScreenSourceRect )) {
HXDLIN(3009)			return null();
            		}
            		else {
HXDLIN(3009)			return this->_hx___fullScreenSourceRect->clone();
            		}
HXDLIN(3009)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_fullScreenSourceRect,return )

 ::openfl::geom::Rectangle Stage_obj::set_fullScreenSourceRect( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3014_set_fullScreenSourceRect)
HXLINE(3016)		if (hx::IsNull( value )) {
HXLINE(3018)			if (hx::IsNotNull( this->_hx___fullScreenSourceRect )) {
HXLINE(3020)				this->_hx___fullScreenSourceRect = null();
HXLINE(3021)				this->_hx___resize();
            			}
            		}
            		else {
HXLINE(3025)			if (!(value->equals(this->_hx___fullScreenSourceRect))) {
HXLINE(3027)				this->_hx___fullScreenSourceRect = value->clone();
HXLINE(3028)				this->_hx___resize();
            			}
            		}
HXLINE(3032)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_fullScreenSourceRect,return )

int Stage_obj::get_fullScreenWidth(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3039_get_fullScreenWidth)
HXDLIN(3039)		Float _hx_tmp = this->window->_hx___scale;
HXDLIN(3039)		return ::Math_obj::ceil((this->window->get_display()->currentMode->width * _hx_tmp));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_fullScreenWidth,return )

Float Stage_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3046_set_height)
HXDLIN(3046)		return this->get_height();
            	}


Float Stage_obj::get_mouseX(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3053_get_mouseX)
HXDLIN(3053)		return this->_hx___mouseX;
            	}


Float Stage_obj::get_mouseY(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3060_get_mouseY)
HXDLIN(3060)		return this->_hx___mouseY;
            	}


 ::Dynamic Stage_obj::get_quality(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3067_get_quality)
HXDLIN(3067)		return this->_hx___quality;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_quality,return )

 ::Dynamic Stage_obj::set_quality( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3072_set_quality)
HXLINE(3074)		this->_hx___quality = value;
HXLINE(3076)		if (hx::IsNotNull( this->_hx___renderer )) {
HXLINE(3078)			 ::Dynamic _hx_tmp = this->get_quality();
HXDLIN(3078)			this->_hx___renderer->_hx___allowSmoothing = hx::IsNotEq( _hx_tmp,(int)2 );
            		}
HXLINE(3082)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_quality,return )

Float Stage_obj::set_rotation(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3089_set_rotation)
HXDLIN(3089)		return (int)0;
            	}


 ::Dynamic Stage_obj::get_scaleMode(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3096_get_scaleMode)
HXDLIN(3096)		return this->_hx___scaleMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_scaleMode,return )

 ::Dynamic Stage_obj::set_scaleMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3105_set_scaleMode)
HXDLIN(3105)		return (this->_hx___scaleMode = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_scaleMode,return )

Float Stage_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3112_set_scaleX)
HXDLIN(3112)		return (int)0;
            	}


Float Stage_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3119_set_scaleY)
HXDLIN(3119)		return (int)0;
            	}


bool Stage_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3126_get_tabEnabled)
HXDLIN(3126)		return false;
            	}


bool Stage_obj::set_tabEnabled(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_3133_set_tabEnabled)
HXDLIN(3133)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Error: The Stage class does not implement this property or method.",a3,36,62,11)));
HXDLIN(3133)		return false;
            	}


int Stage_obj::get_tabIndex(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3140_get_tabIndex)
HXDLIN(3140)		return (int)-1;
            	}


int Stage_obj::set_tabIndex(int value){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_3147_set_tabIndex)
HXDLIN(3147)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Error: The Stage class does not implement this property or method.",a3,36,62,11)));
HXDLIN(3147)		return (int)0;
            	}


 ::openfl::geom::Transform Stage_obj::set_transform( ::openfl::geom::Transform value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3154_set_transform)
HXDLIN(3154)		return this->get_transform();
            	}


Float Stage_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3161_set_width)
HXDLIN(3161)		return this->get_width();
            	}


Float Stage_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3168_set_x)
HXDLIN(3168)		return (int)0;
            	}


Float Stage_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_3175_set_y)
HXDLIN(3175)		return (int)0;
            	}



hx::ObjectPtr< Stage_obj > Stage_obj::__new( ::lime::ui::Window window, ::Dynamic color) {
	hx::ObjectPtr< Stage_obj > __this = new Stage_obj();
	__this->__construct(window,color);
	return __this;
}

hx::ObjectPtr< Stage_obj > Stage_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::ui::Window window, ::Dynamic color) {
	Stage_obj *__this = (Stage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Stage_obj), true, "openfl.display.Stage"));
	*(void **)__this = Stage_obj::_hx_vtable;
	__this->__construct(window,color);
	return __this;
}

Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(align,"align");
	HX_MARK_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_MARK_MEMBER_NAME(allowsFullScreenInteractive,"allowsFullScreenInteractive");
	HX_MARK_MEMBER_NAME(application,"application");
	HX_MARK_MEMBER_NAME(context3D,"context3D");
	HX_MARK_MEMBER_NAME(showDefaultContextMenu,"showDefaultContextMenu");
	HX_MARK_MEMBER_NAME(softKeyboardRect,"softKeyboardRect");
	HX_MARK_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_MARK_MEMBER_NAME(stageFocusRect,"stageFocusRect");
	HX_MARK_MEMBER_NAME(stageHeight,"stageHeight");
	HX_MARK_MEMBER_NAME(stageWidth,"stageWidth");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(_hx___cacheFocus,"__cacheFocus");
	HX_MARK_MEMBER_NAME(_hx___clearBeforeRender,"__clearBeforeRender");
	HX_MARK_MEMBER_NAME(_hx___color,"__color");
	HX_MARK_MEMBER_NAME(_hx___colorSplit,"__colorSplit");
	HX_MARK_MEMBER_NAME(_hx___colorString,"__colorString");
	HX_MARK_MEMBER_NAME(_hx___contentsScaleFactor,"__contentsScaleFactor");
	HX_MARK_MEMBER_NAME(_hx___currentTabOrderIndex,"__currentTabOrderIndex");
	HX_MARK_MEMBER_NAME(_hx___deltaTime,"__deltaTime");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayMatrix,"__displayMatrix");
	HX_MARK_MEMBER_NAME(_hx___displayRect,"__displayRect");
	HX_MARK_MEMBER_NAME(_hx___displayState,"__displayState");
	HX_MARK_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_MARK_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_MARK_MEMBER_NAME(_hx___focus,"__focus");
	HX_MARK_MEMBER_NAME(_hx___forceRender,"__forceRender");
	HX_MARK_MEMBER_NAME(_hx___fullscreen,"__fullscreen");
	HX_MARK_MEMBER_NAME(_hx___fullScreenSourceRect,"__fullScreenSourceRect");
	HX_MARK_MEMBER_NAME(_hx___invalidated,"__invalidated");
	HX_MARK_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_MARK_MEMBER_NAME(_hx___logicalWidth,"__logicalWidth");
	HX_MARK_MEMBER_NAME(_hx___logicalHeight,"__logicalHeight");
	HX_MARK_MEMBER_NAME(_hx___macKeyboard,"__macKeyboard");
	HX_MARK_MEMBER_NAME(_hx___mouseDownLeft,"__mouseDownLeft");
	HX_MARK_MEMBER_NAME(_hx___mouseDownMiddle,"__mouseDownMiddle");
	HX_MARK_MEMBER_NAME(_hx___mouseDownRight,"__mouseDownRight");
	HX_MARK_MEMBER_NAME(_hx___mouseOutStack,"__mouseOutStack");
	HX_MARK_MEMBER_NAME(_hx___mouseOverTarget,"__mouseOverTarget");
	HX_MARK_MEMBER_NAME(_hx___mouseX,"__mouseX");
	HX_MARK_MEMBER_NAME(_hx___mouseY,"__mouseY");
	HX_MARK_MEMBER_NAME(_hx___pendingMouseEvent,"__pendingMouseEvent");
	HX_MARK_MEMBER_NAME(_hx___pendingMouseX,"__pendingMouseX");
	HX_MARK_MEMBER_NAME(_hx___pendingMouseY,"__pendingMouseY");
	HX_MARK_MEMBER_NAME(_hx___quality,"__quality");
	HX_MARK_MEMBER_NAME(_hx___renderer,"__renderer");
	HX_MARK_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_MARK_MEMBER_NAME(_hx___rollOutStack,"__rollOutStack");
	HX_MARK_MEMBER_NAME(_hx___scaleMode,"__scaleMode");
	HX_MARK_MEMBER_NAME(_hx___stack,"__stack");
	HX_MARK_MEMBER_NAME(_hx___touchData,"__touchData");
	HX_MARK_MEMBER_NAME(_hx___transparent,"__transparent");
	HX_MARK_MEMBER_NAME(_hx___wasDirty,"__wasDirty");
	HX_MARK_MEMBER_NAME(_hx___wasFullscreen,"__wasFullscreen");
	HX_MARK_MEMBER_NAME(_hx___primaryTouch,"__primaryTouch");
	 ::openfl::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(align,"align");
	HX_VISIT_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_VISIT_MEMBER_NAME(allowsFullScreenInteractive,"allowsFullScreenInteractive");
	HX_VISIT_MEMBER_NAME(application,"application");
	HX_VISIT_MEMBER_NAME(context3D,"context3D");
	HX_VISIT_MEMBER_NAME(showDefaultContextMenu,"showDefaultContextMenu");
	HX_VISIT_MEMBER_NAME(softKeyboardRect,"softKeyboardRect");
	HX_VISIT_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_VISIT_MEMBER_NAME(stageFocusRect,"stageFocusRect");
	HX_VISIT_MEMBER_NAME(stageHeight,"stageHeight");
	HX_VISIT_MEMBER_NAME(stageWidth,"stageWidth");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(_hx___cacheFocus,"__cacheFocus");
	HX_VISIT_MEMBER_NAME(_hx___clearBeforeRender,"__clearBeforeRender");
	HX_VISIT_MEMBER_NAME(_hx___color,"__color");
	HX_VISIT_MEMBER_NAME(_hx___colorSplit,"__colorSplit");
	HX_VISIT_MEMBER_NAME(_hx___colorString,"__colorString");
	HX_VISIT_MEMBER_NAME(_hx___contentsScaleFactor,"__contentsScaleFactor");
	HX_VISIT_MEMBER_NAME(_hx___currentTabOrderIndex,"__currentTabOrderIndex");
	HX_VISIT_MEMBER_NAME(_hx___deltaTime,"__deltaTime");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayMatrix,"__displayMatrix");
	HX_VISIT_MEMBER_NAME(_hx___displayRect,"__displayRect");
	HX_VISIT_MEMBER_NAME(_hx___displayState,"__displayState");
	HX_VISIT_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_VISIT_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_VISIT_MEMBER_NAME(_hx___focus,"__focus");
	HX_VISIT_MEMBER_NAME(_hx___forceRender,"__forceRender");
	HX_VISIT_MEMBER_NAME(_hx___fullscreen,"__fullscreen");
	HX_VISIT_MEMBER_NAME(_hx___fullScreenSourceRect,"__fullScreenSourceRect");
	HX_VISIT_MEMBER_NAME(_hx___invalidated,"__invalidated");
	HX_VISIT_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_VISIT_MEMBER_NAME(_hx___logicalWidth,"__logicalWidth");
	HX_VISIT_MEMBER_NAME(_hx___logicalHeight,"__logicalHeight");
	HX_VISIT_MEMBER_NAME(_hx___macKeyboard,"__macKeyboard");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownLeft,"__mouseDownLeft");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownMiddle,"__mouseDownMiddle");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownRight,"__mouseDownRight");
	HX_VISIT_MEMBER_NAME(_hx___mouseOutStack,"__mouseOutStack");
	HX_VISIT_MEMBER_NAME(_hx___mouseOverTarget,"__mouseOverTarget");
	HX_VISIT_MEMBER_NAME(_hx___mouseX,"__mouseX");
	HX_VISIT_MEMBER_NAME(_hx___mouseY,"__mouseY");
	HX_VISIT_MEMBER_NAME(_hx___pendingMouseEvent,"__pendingMouseEvent");
	HX_VISIT_MEMBER_NAME(_hx___pendingMouseX,"__pendingMouseX");
	HX_VISIT_MEMBER_NAME(_hx___pendingMouseY,"__pendingMouseY");
	HX_VISIT_MEMBER_NAME(_hx___quality,"__quality");
	HX_VISIT_MEMBER_NAME(_hx___renderer,"__renderer");
	HX_VISIT_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_VISIT_MEMBER_NAME(_hx___rollOutStack,"__rollOutStack");
	HX_VISIT_MEMBER_NAME(_hx___scaleMode,"__scaleMode");
	HX_VISIT_MEMBER_NAME(_hx___stack,"__stack");
	HX_VISIT_MEMBER_NAME(_hx___touchData,"__touchData");
	HX_VISIT_MEMBER_NAME(_hx___transparent,"__transparent");
	HX_VISIT_MEMBER_NAME(_hx___wasDirty,"__wasDirty");
	HX_VISIT_MEMBER_NAME(_hx___wasFullscreen,"__wasFullscreen");
	HX_VISIT_MEMBER_NAME(_hx___primaryTouch,"__primaryTouch");
	 ::openfl::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Stage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { return hx::Val( align ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_focus() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return hx::Val( window ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drag") ) { return hx::Val( _hx___drag_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_quality() ); }
		if (HX_FIELD_EQ(inName,"__color") ) { return hx::Val( _hx___color ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		if (HX_FIELD_EQ(inName,"__focus") ) { return hx::Val( _hx___focus ); }
		if (HX_FIELD_EQ(inName,"__stack") ) { return hx::Val( _hx___stack ); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return hx::Val( onKeyUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onKey") ) { return hx::Val( _hx___onKey_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { return hx::Val( stage3Ds ); }
		if (HX_FIELD_EQ(inName,"__mouseX") ) { return hx::Val( _hx___mouseX ); }
		if (HX_FIELD_EQ(inName,"__mouseY") ) { return hx::Val( _hx___mouseY ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"context3D") ) { return hx::Val( context3D ); }
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_frameRate() ); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleMode() ); }
		if (HX_FIELD_EQ(inName,"__quality") ) { return hx::Val( _hx___quality ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return hx::Val( onKeyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return hx::Val( onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouse") ) { return hx::Val( _hx___onMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onTouch") ) { return hx::Val( _hx___onTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_focus") ) { return hx::Val( get_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return hx::Val( set_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { return hx::Val( stageWidth ); }
		if (HX_FIELD_EQ(inName,"__renderer") ) { return hx::Val( _hx___renderer ); }
		if (HX_FIELD_EQ(inName,"__wasDirty") ) { return hx::Val( _hx___wasDirty ); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTextEdit") ) { return hx::Val( onTextEdit_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTouchEnd") ) { return hx::Val( onTouchEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopDrag") ) { return hx::Val( _hx___stopDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return hx::Val( get_mouseX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return hx::Val( get_mouseY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"application") ) { return hx::Val( application ); }
		if (HX_FIELD_EQ(inName,"stageHeight") ) { return hx::Val( stageHeight ); }
		if (HX_FIELD_EQ(inName,"__deltaTime") ) { return hx::Val( _hx___deltaTime ); }
		if (HX_FIELD_EQ(inName,"__rendering") ) { return hx::Val( _hx___rendering ); }
		if (HX_FIELD_EQ(inName,"__scaleMode") ) { return hx::Val( _hx___scaleMode ); }
		if (HX_FIELD_EQ(inName,"__touchData") ) { return hx::Val( _hx___touchData ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return hx::Val( onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTextInput") ) { return hx::Val( onTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTouchMove") ) { return hx::Val( onTouchMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"__addWindow") ) { return hx::Val( _hx___addWindow_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startDrag") ) { return hx::Val( _hx___startDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_quality") ) { return hx::Val( get_quality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_quality") ) { return hx::Val( set_quality_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_displayState() ); }
		if (HX_FIELD_EQ(inName,"__cacheFocus") ) { return hx::Val( _hx___cacheFocus ); }
		if (HX_FIELD_EQ(inName,"__colorSplit") ) { return hx::Val( _hx___colorSplit ); }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { return hx::Val( _hx___dragBounds ); }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { return hx::Val( _hx___dragObject ); }
		if (HX_FIELD_EQ(inName,"__fullscreen") ) { return hx::Val( _hx___fullscreen ); }
		if (HX_FIELD_EQ(inName,"onModuleExit") ) { return hx::Val( onModuleExit_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return hx::Val( onMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTouchStart") ) { return hx::Val( onTouchStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowMove") ) { return hx::Val( onWindowMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabIndex") ) { return hx::Val( get_tabIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tabIndex") ) { return hx::Val( set_tabIndex_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__colorString") ) { return hx::Val( _hx___colorString ); }
		if (HX_FIELD_EQ(inName,"__displayRect") ) { return hx::Val( _hx___displayRect ); }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { return hx::Val( _hx___dragOffsetX ); }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { return hx::Val( _hx___dragOffsetY ); }
		if (HX_FIELD_EQ(inName,"__forceRender") ) { return hx::Val( _hx___forceRender ); }
		if (HX_FIELD_EQ(inName,"__invalidated") ) { return hx::Val( _hx___invalidated ); }
		if (HX_FIELD_EQ(inName,"__macKeyboard") ) { return hx::Val( _hx___macKeyboard ); }
		if (HX_FIELD_EQ(inName,"__transparent") ) { return hx::Val( _hx___transparent ); }
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTouchCancel") ) { return hx::Val( onTouchCancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowClose") ) { return hx::Val( onWindowClose_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowEnter") ) { return hx::Val( onWindowEnter_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowLeave") ) { return hx::Val( onWindowLeave_dyn() ); }
		if (HX_FIELD_EQ(inName,"__handleError") ) { return hx::Val( _hx___handleError_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_frameRate") ) { return hx::Val( get_frameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frameRate") ) { return hx::Val( set_frameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleMode") ) { return hx::Val( get_scaleMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleMode") ) { return hx::Val( set_scaleMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return hx::Val( set_transform_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { return hx::Val( stageFocusRect ); }
		if (HX_FIELD_EQ(inName,"__displayState") ) { return hx::Val( _hx___displayState ); }
		if (HX_FIELD_EQ(inName,"__logicalWidth") ) { return hx::Val( _hx___logicalWidth ); }
		if (HX_FIELD_EQ(inName,"__rollOutStack") ) { return hx::Val( _hx___rollOutStack ); }
		if (HX_FIELD_EQ(inName,"__primaryTouch") ) { return hx::Val( _hx___primaryTouch ); }
		if (HX_FIELD_EQ(inName,"onWindowCreate") ) { return hx::Val( onWindowCreate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowExpose") ) { return hx::Val( onWindowExpose_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowResize") ) { return hx::Val( onWindowResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseWheel") ) { return hx::Val( _hx___onMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tabEnabled") ) { return hx::Val( set_tabEnabled_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fullScreenWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fullScreenWidth() ); }
		if (HX_FIELD_EQ(inName,"__displayMatrix") ) { return hx::Val( _hx___displayMatrix ); }
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { return hx::Val( _hx___lastClickTime ); }
		if (HX_FIELD_EQ(inName,"__logicalHeight") ) { return hx::Val( _hx___logicalHeight ); }
		if (HX_FIELD_EQ(inName,"__mouseDownLeft") ) { return hx::Val( _hx___mouseDownLeft ); }
		if (HX_FIELD_EQ(inName,"__mouseOutStack") ) { return hx::Val( _hx___mouseOutStack ); }
		if (HX_FIELD_EQ(inName,"__pendingMouseX") ) { return hx::Val( _hx___pendingMouseX ); }
		if (HX_FIELD_EQ(inName,"__pendingMouseY") ) { return hx::Val( _hx___pendingMouseY ); }
		if (HX_FIELD_EQ(inName,"__wasFullscreen") ) { return hx::Val( _hx___wasFullscreen ); }
		if (HX_FIELD_EQ(inName,"onWindowFocusIn") ) { return hx::Val( onWindowFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowRestore") ) { return hx::Val( onWindowRestore_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatchEvent") ) { return hx::Val( _hx___dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatchStack") ) { return hx::Val( _hx___dispatchStack_dyn() ); }
		if (HX_FIELD_EQ(inName,"__globalToLocal") ) { return hx::Val( _hx___globalToLocal_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { return hx::Val( allowsFullScreen ); }
		if (HX_FIELD_EQ(inName,"fullScreenHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fullScreenHeight() ); }
		if (HX_FIELD_EQ(inName,"softKeyboardRect") ) { return hx::Val( softKeyboardRect ); }
		if (HX_FIELD_EQ(inName,"__mouseDownRight") ) { return hx::Val( _hx___mouseDownRight ); }
		if (HX_FIELD_EQ(inName,"onGamepadConnect") ) { return hx::Val( onGamepadConnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowActivate") ) { return hx::Val( onWindowActivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowDropFile") ) { return hx::Val( onWindowDropFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowFocusOut") ) { return hx::Val( onWindowFocusOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowMinimize") ) { return hx::Val( onWindowMinimize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__broadcastEvent") ) { return hx::Val( _hx___broadcastEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__createRenderer") ) { return hx::Val( _hx___createRenderer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatchTarget") ) { return hx::Val( _hx___dispatchTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getInteractive") ) { return hx::Val( _hx___getInteractive_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setLogicalSize") ) { return hx::Val( _hx___setLogicalSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayState") ) { return hx::Val( get_displayState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayState") ) { return hx::Val( set_displayState_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__mouseDownMiddle") ) { return hx::Val( _hx___mouseDownMiddle ); }
		if (HX_FIELD_EQ(inName,"__mouseOverTarget") ) { return hx::Val( _hx___mouseOverTarget ); }
		if (HX_FIELD_EQ(inName,"onGamepadAxisMove") ) { return hx::Val( onGamepadAxisMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGamepadButtonUp") ) { return hx::Val( onGamepadButtonUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onJoystickConnect") ) { return hx::Val( onJoystickConnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onJoystickHatMove") ) { return hx::Val( onJoystickHatMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPreloadComplete") ) { return hx::Val( onPreloadComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPreloadProgress") ) { return hx::Val( onPreloadProgress_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onJoystickAxisMove") ) { return hx::Val( onJoystickAxisMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onJoystickButtonUp") ) { return hx::Val( onJoystickButtonUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowDeactivate") ) { return hx::Val( onWindowDeactivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowFullscreen") ) { return hx::Val( onWindowFullscreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onGamepadConnect") ) { return hx::Val( _hx___onGamepadConnect_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"contentsScaleFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_contentsScaleFactor() ); }
		if (HX_FIELD_EQ(inName,"__clearBeforeRender") ) { return hx::Val( _hx___clearBeforeRender ); }
		if (HX_FIELD_EQ(inName,"__pendingMouseEvent") ) { return hx::Val( _hx___pendingMouseEvent ); }
		if (HX_FIELD_EQ(inName,"onGamepadButtonDown") ) { return hx::Val( onGamepadButtonDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGamepadDisconnect") ) { return hx::Val( onGamepadDisconnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseMoveRelative") ) { return hx::Val( onMouseMoveRelative_dyn() ); }
		if (HX_FIELD_EQ(inName,"onRenderContextLost") ) { return hx::Val( onRenderContextLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fullScreenWidth") ) { return hx::Val( get_fullScreenWidth_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fullScreenSourceRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fullScreenSourceRect() ); }
		if (HX_FIELD_EQ(inName,"onJoystickButtonDown") ) { return hx::Val( onJoystickButtonDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onJoystickDisconnect") ) { return hx::Val( onJoystickDisconnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__registerLimeModule") ) { return hx::Val( _hx___registerLimeModule_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fullScreenHeight") ) { return hx::Val( get_fullScreenHeight_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__contentsScaleFactor") ) { return hx::Val( _hx___contentsScaleFactor ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"showDefaultContextMenu") ) { return hx::Val( showDefaultContextMenu ); }
		if (HX_FIELD_EQ(inName,"__currentTabOrderIndex") ) { return hx::Val( _hx___currentTabOrderIndex ); }
		if (HX_FIELD_EQ(inName,"__fullScreenSourceRect") ) { return hx::Val( _hx___fullScreenSourceRect ); }
		if (HX_FIELD_EQ(inName,"__unregisterLimeModule") ) { return hx::Val( _hx___unregisterLimeModule_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"onJoystickTrackballMove") ) { return hx::Val( onJoystickTrackballMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onRenderContextRestored") ) { return hx::Val( onRenderContextRestored_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_contentsScaleFactor") ) { return hx::Val( get_contentsScaleFactor_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"get_fullScreenSourceRect") ) { return hx::Val( get_fullScreenSourceRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fullScreenSourceRect") ) { return hx::Val( set_fullScreenSourceRect_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"allowsFullScreenInteractive") ) { return hx::Val( allowsFullScreenInteractive ); }
		if (HX_FIELD_EQ(inName,"__dispatchPendingMouseEvent") ) { return hx::Val( _hx___dispatchPendingMouseEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Stage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { align=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_focus(inValue.Cast<  ::openfl::display::InteractiveObject >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::lime::ui::Window >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_quality(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__color") ) { _hx___color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__focus") ) { _hx___focus=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stack") ) { _hx___stack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { stage3Ds=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseX") ) { _hx___mouseX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseY") ) { _hx___mouseY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"context3D") ) { context3D=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frameRate(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleMode(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__quality") ) { _hx___quality=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { stageWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderer") ) { _hx___renderer=inValue.Cast<  ::openfl::display::DisplayObjectRenderer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__wasDirty") ) { _hx___wasDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"application") ) { application=inValue.Cast<  ::lime::app::Application >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageHeight") ) { stageHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__deltaTime") ) { _hx___deltaTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rendering") ) { _hx___rendering=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleMode") ) { _hx___scaleMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__touchData") ) { _hx___touchData=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayState(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__cacheFocus") ) { _hx___cacheFocus=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__colorSplit") ) { _hx___colorSplit=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { _hx___dragBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { _hx___dragObject=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fullscreen") ) { _hx___fullscreen=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__colorString") ) { _hx___colorString=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__displayRect") ) { _hx___displayRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { _hx___dragOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { _hx___dragOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__forceRender") ) { _hx___forceRender=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__invalidated") ) { _hx___invalidated=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__macKeyboard") ) { _hx___macKeyboard=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transparent") ) { _hx___transparent=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { stageFocusRect=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__displayState") ) { _hx___displayState=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__logicalWidth") ) { _hx___logicalWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rollOutStack") ) { _hx___rollOutStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__primaryTouch") ) { _hx___primaryTouch=inValue.Cast<  ::lime::ui::Touch >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__displayMatrix") ) { _hx___displayMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { _hx___lastClickTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__logicalHeight") ) { _hx___logicalHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseDownLeft") ) { _hx___mouseDownLeft=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseOutStack") ) { _hx___mouseOutStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__pendingMouseX") ) { _hx___pendingMouseX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__pendingMouseY") ) { _hx___pendingMouseY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__wasFullscreen") ) { _hx___wasFullscreen=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { allowsFullScreen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"softKeyboardRect") ) { softKeyboardRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseDownRight") ) { _hx___mouseDownRight=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__mouseDownMiddle") ) { _hx___mouseDownMiddle=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseOverTarget") ) { _hx___mouseOverTarget=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__clearBeforeRender") ) { _hx___clearBeforeRender=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__pendingMouseEvent") ) { _hx___pendingMouseEvent=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fullScreenSourceRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fullScreenSourceRect(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__contentsScaleFactor") ) { _hx___contentsScaleFactor=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"showDefaultContextMenu") ) { showDefaultContextMenu=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentTabOrderIndex") ) { _hx___currentTabOrderIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fullScreenSourceRect") ) { _hx___fullScreenSourceRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"allowsFullScreenInteractive") ) { allowsFullScreenInteractive=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("align","\xc5","\x56","\x91","\x21"));
	outFields->push(HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b"));
	outFields->push(HX_HCSTRING("allowsFullScreenInteractive","\x1d","\x8b","\x2c","\xc8"));
	outFields->push(HX_HCSTRING("application","\x50","\xab","\x3e","\x2a"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("contentsScaleFactor","\xff","\x33","\x35","\xba"));
	outFields->push(HX_HCSTRING("context3D","\x60","\x5c","\xfc","\x16"));
	outFields->push(HX_HCSTRING("displayState","\x6f","\x4c","\x64","\x90"));
	outFields->push(HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("fullScreenHeight","\xa2","\xe0","\x00","\xaa"));
	outFields->push(HX_HCSTRING("fullScreenWidth","\xab","\x8d","\x8a","\xe5"));
	outFields->push(HX_HCSTRING("fullScreenSourceRect","\xda","\x85","\xfa","\x3e"));
	outFields->push(HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"));
	outFields->push(HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b"));
	outFields->push(HX_HCSTRING("showDefaultContextMenu","\x4a","\x8c","\x83","\x33"));
	outFields->push(HX_HCSTRING("softKeyboardRect","\x75","\x35","\x3a","\xec"));
	outFields->push(HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3"));
	outFields->push(HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74"));
	outFields->push(HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"));
	outFields->push(HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"));
	outFields->push(HX_HCSTRING("window","\xf0","\x93","\x8c","\x52"));
	outFields->push(HX_HCSTRING("__cacheFocus","\x56","\x41","\xd5","\x7f"));
	outFields->push(HX_HCSTRING("__clearBeforeRender","\x42","\xa3","\xd5","\xf3"));
	outFields->push(HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"));
	outFields->push(HX_HCSTRING("__colorSplit","\x97","\x7d","\x6e","\xde"));
	outFields->push(HX_HCSTRING("__colorString","\x74","\xfb","\xd0","\x13"));
	outFields->push(HX_HCSTRING("__contentsScaleFactor","\xdf","\x54","\x29","\x28"));
	outFields->push(HX_HCSTRING("__currentTabOrderIndex","\x80","\x39","\x3b","\x0f"));
	outFields->push(HX_HCSTRING("__deltaTime","\x05","\x85","\x88","\x23"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayMatrix","\x03","\x2b","\xdd","\x04"));
	outFields->push(HX_HCSTRING("__displayRect","\x66","\x2d","\x12","\x7c"));
	outFields->push(HX_HCSTRING("__displayState","\x8f","\xcf","\x24","\xb1"));
	outFields->push(HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47"));
	outFields->push(HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6"));
	outFields->push(HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5"));
	outFields->push(HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5"));
	outFields->push(HX_HCSTRING("__focus","\xb8","\xb8","\xe7","\x6e"));
	outFields->push(HX_HCSTRING("__forceRender","\x81","\x94","\x19","\xb1"));
	outFields->push(HX_HCSTRING("__fullscreen","\x5b","\xb5","\x47","\x32"));
	outFields->push(HX_HCSTRING("__fullScreenSourceRect","\xfa","\x28","\xa3","\x06"));
	outFields->push(HX_HCSTRING("__invalidated","\x69","\x73","\x24","\x06"));
	outFields->push(HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1"));
	outFields->push(HX_HCSTRING("__logicalWidth","\x9d","\xce","\x2c","\x0d"));
	outFields->push(HX_HCSTRING("__logicalHeight","\x70","\x73","\x57","\x30"));
	outFields->push(HX_HCSTRING("__macKeyboard","\x36","\x6b","\x9a","\xd8"));
	outFields->push(HX_HCSTRING("__mouseDownLeft","\xae","\x3d","\x4b","\x93"));
	outFields->push(HX_HCSTRING("__mouseDownMiddle","\xbc","\x00","\x70","\x1d"));
	outFields->push(HX_HCSTRING("__mouseDownRight","\x55","\xc8","\x97","\xc5"));
	outFields->push(HX_HCSTRING("__mouseOutStack","\xff","\xab","\x80","\x5d"));
	outFields->push(HX_HCSTRING("__mouseOverTarget","\x2a","\xfb","\x94","\x00"));
	outFields->push(HX_HCSTRING("__mouseX","\xb3","\xb5","\x3d","\x74"));
	outFields->push(HX_HCSTRING("__mouseY","\xb4","\xb5","\x3d","\x74"));
	outFields->push(HX_HCSTRING("__pendingMouseEvent","\xcc","\xf3","\x63","\xe3"));
	outFields->push(HX_HCSTRING("__pendingMouseX","\x2a","\xeb","\x8e","\x4d"));
	outFields->push(HX_HCSTRING("__pendingMouseY","\x2b","\xeb","\x8e","\x4d"));
	outFields->push(HX_HCSTRING("__quality","\x9f","\x55","\x9a","\xc5"));
	outFields->push(HX_HCSTRING("__renderer","\x63","\x38","\x14","\x56"));
	outFields->push(HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb"));
	outFields->push(HX_HCSTRING("__rollOutStack","\x97","\xe3","\x31","\x86"));
	outFields->push(HX_HCSTRING("__scaleMode","\xed","\x23","\x00","\x5a"));
	outFields->push(HX_HCSTRING("__stack","\x28","\xc0","\x69","\xee"));
	outFields->push(HX_HCSTRING("__touchData","\x69","\x2e","\xfc","\x35"));
	outFields->push(HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b"));
	outFields->push(HX_HCSTRING("__wasDirty","\x49","\xbd","\x55","\x63"));
	outFields->push(HX_HCSTRING("__wasFullscreen","\xa4","\x85","\x04","\xb2"));
	outFields->push(HX_HCSTRING("__primaryTouch","\xbd","\x6b","\x1c","\x30"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,align),HX_HCSTRING("align","\xc5","\x56","\x91","\x21")},
	{hx::fsBool,(int)offsetof(Stage_obj,allowsFullScreen),HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b")},
	{hx::fsBool,(int)offsetof(Stage_obj,allowsFullScreenInteractive),HX_HCSTRING("allowsFullScreenInteractive","\x1d","\x8b","\x2c","\xc8")},
	{hx::fsObject /*::lime::app::Application*/ ,(int)offsetof(Stage_obj,application),HX_HCSTRING("application","\x50","\xab","\x3e","\x2a")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(Stage_obj,context3D),HX_HCSTRING("context3D","\x60","\x5c","\xfc","\x16")},
	{hx::fsBool,(int)offsetof(Stage_obj,showDefaultContextMenu),HX_HCSTRING("showDefaultContextMenu","\x4a","\x8c","\x83","\x33")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Stage_obj,softKeyboardRect),HX_HCSTRING("softKeyboardRect","\x75","\x35","\x3a","\xec")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(Stage_obj,stage3Ds),HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3")},
	{hx::fsBool,(int)offsetof(Stage_obj,stageFocusRect),HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74")},
	{hx::fsInt,(int)offsetof(Stage_obj,stageHeight),HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95")},
	{hx::fsInt,(int)offsetof(Stage_obj,stageWidth),HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d")},
	{hx::fsObject /*::lime::ui::Window*/ ,(int)offsetof(Stage_obj,window),HX_HCSTRING("window","\xf0","\x93","\x8c","\x52")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___cacheFocus),HX_HCSTRING("__cacheFocus","\x56","\x41","\xd5","\x7f")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___clearBeforeRender),HX_HCSTRING("__clearBeforeRender","\x42","\xa3","\xd5","\xf3")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___color),HX_HCSTRING("__color","\x43","\xca","\xba","\xb4")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(Stage_obj,_hx___colorSplit),HX_HCSTRING("__colorSplit","\x97","\x7d","\x6e","\xde")},
	{hx::fsString,(int)offsetof(Stage_obj,_hx___colorString),HX_HCSTRING("__colorString","\x74","\xfb","\xd0","\x13")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___contentsScaleFactor),HX_HCSTRING("__contentsScaleFactor","\xdf","\x54","\x29","\x28")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___currentTabOrderIndex),HX_HCSTRING("__currentTabOrderIndex","\x80","\x39","\x3b","\x0f")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___deltaTime),HX_HCSTRING("__deltaTime","\x05","\x85","\x88","\x23")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Stage_obj,_hx___displayMatrix),HX_HCSTRING("__displayMatrix","\x03","\x2b","\xdd","\x04")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Stage_obj,_hx___displayRect),HX_HCSTRING("__displayRect","\x66","\x2d","\x12","\x7c")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,_hx___displayState),HX_HCSTRING("__displayState","\x8f","\xcf","\x24","\xb1")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Stage_obj,_hx___dragBounds),HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Stage_obj,_hx___dragObject),HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetX),HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetY),HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___focus),HX_HCSTRING("__focus","\xb8","\xb8","\xe7","\x6e")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___forceRender),HX_HCSTRING("__forceRender","\x81","\x94","\x19","\xb1")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___fullscreen),HX_HCSTRING("__fullscreen","\x5b","\xb5","\x47","\x32")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Stage_obj,_hx___fullScreenSourceRect),HX_HCSTRING("__fullScreenSourceRect","\xfa","\x28","\xa3","\x06")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___invalidated),HX_HCSTRING("__invalidated","\x69","\x73","\x24","\x06")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___lastClickTime),HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___logicalWidth),HX_HCSTRING("__logicalWidth","\x9d","\xce","\x2c","\x0d")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___logicalHeight),HX_HCSTRING("__logicalHeight","\x70","\x73","\x57","\x30")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___macKeyboard),HX_HCSTRING("__macKeyboard","\x36","\x6b","\x9a","\xd8")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseDownLeft),HX_HCSTRING("__mouseDownLeft","\xae","\x3d","\x4b","\x93")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseDownMiddle),HX_HCSTRING("__mouseDownMiddle","\xbc","\x00","\x70","\x1d")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseDownRight),HX_HCSTRING("__mouseDownRight","\x55","\xc8","\x97","\xc5")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___mouseOutStack),HX_HCSTRING("__mouseOutStack","\xff","\xab","\x80","\x5d")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseOverTarget),HX_HCSTRING("__mouseOverTarget","\x2a","\xfb","\x94","\x00")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___mouseX),HX_HCSTRING("__mouseX","\xb3","\xb5","\x3d","\x74")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___mouseY),HX_HCSTRING("__mouseY","\xb4","\xb5","\x3d","\x74")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___pendingMouseEvent),HX_HCSTRING("__pendingMouseEvent","\xcc","\xf3","\x63","\xe3")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___pendingMouseX),HX_HCSTRING("__pendingMouseX","\x2a","\xeb","\x8e","\x4d")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___pendingMouseY),HX_HCSTRING("__pendingMouseY","\x2b","\xeb","\x8e","\x4d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,_hx___quality),HX_HCSTRING("__quality","\x9f","\x55","\x9a","\xc5")},
	{hx::fsObject /*::openfl::display::DisplayObjectRenderer*/ ,(int)offsetof(Stage_obj,_hx___renderer),HX_HCSTRING("__renderer","\x63","\x38","\x14","\x56")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___rendering),HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___rollOutStack),HX_HCSTRING("__rollOutStack","\x97","\xe3","\x31","\x86")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,_hx___scaleMode),HX_HCSTRING("__scaleMode","\xed","\x23","\x00","\x5a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___stack),HX_HCSTRING("__stack","\x28","\xc0","\x69","\xee")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Stage_obj,_hx___touchData),HX_HCSTRING("__touchData","\x69","\x2e","\xfc","\x35")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___transparent),HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___wasDirty),HX_HCSTRING("__wasDirty","\x49","\xbd","\x55","\x63")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___wasFullscreen),HX_HCSTRING("__wasFullscreen","\xa4","\x85","\x04","\xb2")},
	{hx::fsObject /*::lime::ui::Touch*/ ,(int)offsetof(Stage_obj,_hx___primaryTouch),HX_HCSTRING("__primaryTouch","\xbd","\x6b","\x1c","\x30")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Stage_obj_sStaticStorageInfo = 0;
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_HCSTRING("align","\xc5","\x56","\x91","\x21"),
	HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b"),
	HX_HCSTRING("allowsFullScreenInteractive","\x1d","\x8b","\x2c","\xc8"),
	HX_HCSTRING("application","\x50","\xab","\x3e","\x2a"),
	HX_HCSTRING("context3D","\x60","\x5c","\xfc","\x16"),
	HX_HCSTRING("showDefaultContextMenu","\x4a","\x8c","\x83","\x33"),
	HX_HCSTRING("softKeyboardRect","\x75","\x35","\x3a","\xec"),
	HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3"),
	HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74"),
	HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"),
	HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"),
	HX_HCSTRING("window","\xf0","\x93","\x8c","\x52"),
	HX_HCSTRING("__cacheFocus","\x56","\x41","\xd5","\x7f"),
	HX_HCSTRING("__clearBeforeRender","\x42","\xa3","\xd5","\xf3"),
	HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"),
	HX_HCSTRING("__colorSplit","\x97","\x7d","\x6e","\xde"),
	HX_HCSTRING("__colorString","\x74","\xfb","\xd0","\x13"),
	HX_HCSTRING("__contentsScaleFactor","\xdf","\x54","\x29","\x28"),
	HX_HCSTRING("__currentTabOrderIndex","\x80","\x39","\x3b","\x0f"),
	HX_HCSTRING("__deltaTime","\x05","\x85","\x88","\x23"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayMatrix","\x03","\x2b","\xdd","\x04"),
	HX_HCSTRING("__displayRect","\x66","\x2d","\x12","\x7c"),
	HX_HCSTRING("__displayState","\x8f","\xcf","\x24","\xb1"),
	HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47"),
	HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6"),
	HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5"),
	HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5"),
	HX_HCSTRING("__focus","\xb8","\xb8","\xe7","\x6e"),
	HX_HCSTRING("__forceRender","\x81","\x94","\x19","\xb1"),
	HX_HCSTRING("__fullscreen","\x5b","\xb5","\x47","\x32"),
	HX_HCSTRING("__fullScreenSourceRect","\xfa","\x28","\xa3","\x06"),
	HX_HCSTRING("__invalidated","\x69","\x73","\x24","\x06"),
	HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1"),
	HX_HCSTRING("__logicalWidth","\x9d","\xce","\x2c","\x0d"),
	HX_HCSTRING("__logicalHeight","\x70","\x73","\x57","\x30"),
	HX_HCSTRING("__macKeyboard","\x36","\x6b","\x9a","\xd8"),
	HX_HCSTRING("__mouseDownLeft","\xae","\x3d","\x4b","\x93"),
	HX_HCSTRING("__mouseDownMiddle","\xbc","\x00","\x70","\x1d"),
	HX_HCSTRING("__mouseDownRight","\x55","\xc8","\x97","\xc5"),
	HX_HCSTRING("__mouseOutStack","\xff","\xab","\x80","\x5d"),
	HX_HCSTRING("__mouseOverTarget","\x2a","\xfb","\x94","\x00"),
	HX_HCSTRING("__mouseX","\xb3","\xb5","\x3d","\x74"),
	HX_HCSTRING("__mouseY","\xb4","\xb5","\x3d","\x74"),
	HX_HCSTRING("__pendingMouseEvent","\xcc","\xf3","\x63","\xe3"),
	HX_HCSTRING("__pendingMouseX","\x2a","\xeb","\x8e","\x4d"),
	HX_HCSTRING("__pendingMouseY","\x2b","\xeb","\x8e","\x4d"),
	HX_HCSTRING("__quality","\x9f","\x55","\x9a","\xc5"),
	HX_HCSTRING("__renderer","\x63","\x38","\x14","\x56"),
	HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb"),
	HX_HCSTRING("__rollOutStack","\x97","\xe3","\x31","\x86"),
	HX_HCSTRING("__scaleMode","\xed","\x23","\x00","\x5a"),
	HX_HCSTRING("__stack","\x28","\xc0","\x69","\xee"),
	HX_HCSTRING("__touchData","\x69","\x2e","\xfc","\x35"),
	HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b"),
	HX_HCSTRING("__wasDirty","\x49","\xbd","\x55","\x63"),
	HX_HCSTRING("__wasFullscreen","\xa4","\x85","\x04","\xb2"),
	HX_HCSTRING("__primaryTouch","\xbd","\x6b","\x1c","\x30"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("onGamepadAxisMove","\xb4","\xf7","\xd4","\x24"),
	HX_HCSTRING("onGamepadButtonDown","\x56","\xeb","\xb6","\x87"),
	HX_HCSTRING("onGamepadButtonUp","\x4f","\xf4","\x12","\xf1"),
	HX_HCSTRING("onGamepadConnect","\xc8","\x56","\xd7","\xec"),
	HX_HCSTRING("onGamepadDisconnect","\x3e","\xe8","\x96","\x44"),
	HX_HCSTRING("onJoystickAxisMove","\x6d","\xf4","\xd4","\x5b"),
	HX_HCSTRING("onJoystickButtonDown","\x4f","\x48","\x3a","\x7c"),
	HX_HCSTRING("onJoystickButtonUp","\x08","\xf1","\x12","\x28"),
	HX_HCSTRING("onJoystickConnect","\x2f","\x14","\xdd","\xfa"),
	HX_HCSTRING("onJoystickDisconnect","\x37","\x45","\x1a","\x39"),
	HX_HCSTRING("onJoystickHatMove","\x51","\x70","\x68","\x90"),
	HX_HCSTRING("onJoystickTrackballMove","\x40","\xc8","\x46","\x1a"),
	HX_HCSTRING("onKeyDown","\x42","\x22","\xf2","\x73"),
	HX_HCSTRING("onKeyUp","\x3b","\x58","\x3c","\x75"),
	HX_HCSTRING("onModuleExit","\xe9","\xbf","\xa3","\x0b"),
	HX_HCSTRING("onMouseDown","\x08","\x94","\x05","\x11"),
	HX_HCSTRING("onMouseMove","\xb7","\x7e","\xf8","\x16"),
	HX_HCSTRING("onMouseMoveRelative","\xa3","\x06","\xbf","\x7a"),
	HX_HCSTRING("onMouseUp","\x81","\xac","\x1d","\x98"),
	HX_HCSTRING("onMouseWheel","\x35","\xca","\xca","\xbf"),
	HX_HCSTRING("onPreloadComplete","\x43","\x37","\x5d","\x5c"),
	HX_HCSTRING("onPreloadProgress","\x37","\x2e","\xc0","\x62"),
	HX_HCSTRING("onRenderContextLost","\x9e","\x9b","\xa7","\x84"),
	HX_HCSTRING("onRenderContextRestored","\x10","\x54","\x6e","\x7a"),
	HX_HCSTRING("onTextEdit","\x96","\xf1","\xc0","\x23"),
	HX_HCSTRING("onTextInput","\xfe","\x36","\x4e","\x79"),
	HX_HCSTRING("onTouchCancel","\xba","\x6f","\x54","\x80"),
	HX_HCSTRING("onTouchMove","\x51","\x55","\x10","\x30"),
	HX_HCSTRING("onTouchEnd","\x9b","\x99","\xc0","\xdd"),
	HX_HCSTRING("onTouchStart","\x22","\xfa","\xdf","\x55"),
	HX_HCSTRING("onWindowActivate","\x42","\xe9","\xdd","\xeb"),
	HX_HCSTRING("onWindowClose","\xc9","\xca","\x1f","\x9c"),
	HX_HCSTRING("onWindowCreate","\xcb","\x62","\x6f","\x6d"),
	HX_HCSTRING("onWindowDeactivate","\x83","\xeb","\x6c","\x8c"),
	HX_HCSTRING("onWindowDropFile","\xda","\x43","\x88","\xef"),
	HX_HCSTRING("onWindowEnter","\x29","\x20","\x43","\xc4"),
	HX_HCSTRING("onWindowExpose","\x13","\x8e","\xdd","\xb5"),
	HX_HCSTRING("onWindowFocusIn","\x2e","\x9f","\x1f","\x84"),
	HX_HCSTRING("onWindowFocusOut","\x25","\x3d","\x90","\x17"),
	HX_HCSTRING("onWindowFullscreen","\x8a","\xc9","\x1f","\x4a"),
	HX_HCSTRING("onWindowLeave","\x08","\xe8","\x0f","\xc6"),
	HX_HCSTRING("onWindowMinimize","\xad","\x0c","\xab","\x27"),
	HX_HCSTRING("onWindowMove","\x20","\xfd","\x7a","\xab"),
	HX_HCSTRING("onWindowResize","\xc3","\x55","\xdb","\xf9"),
	HX_HCSTRING("onWindowRestore","\x9f","\xc0","\x4c","\xad"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("__addWindow","\xd1","\x11","\xdd","\x38"),
	HX_HCSTRING("__broadcastEvent","\x79","\x9c","\xa4","\x95"),
	HX_HCSTRING("__createRenderer","\x7f","\xcf","\x55","\x39"),
	HX_HCSTRING("__dispatchEvent","\xe0","\xff","\x16","\x4e"),
	HX_HCSTRING("__dispatchPendingMouseEvent","\xb2","\x93","\x9d","\x89"),
	HX_HCSTRING("__dispatchStack","\x0e","\x9f","\x5d","\x5c"),
	HX_HCSTRING("__dispatchTarget","\xcb","\x88","\x8b","\xf6"),
	HX_HCSTRING("__drag","\x14","\x8f","\x68","\xf1"),
	HX_HCSTRING("__getInteractive","\x0c","\x1c","\x37","\xf8"),
	HX_HCSTRING("__globalToLocal","\xad","\x87","\x60","\xf3"),
	HX_HCSTRING("__handleError","\xe0","\xb7","\xeb","\x6d"),
	HX_HCSTRING("__onKey","\xa0","\x76","\xc7","\x9c"),
	HX_HCSTRING("__onGamepadConnect","\xe8","\xe9","\x67","\x58"),
	HX_HCSTRING("__onMouse","\x66","\x05","\xf1","\x23"),
	HX_HCSTRING("__onMouseWheel","\x55","\x4d","\x8b","\xe0"),
	HX_HCSTRING("__onTouch","\x00","\x07","\xbf","\x2b"),
	HX_HCSTRING("__registerLimeModule","\x04","\xfd","\x1b","\xaf"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__setLogicalSize","\xc8","\x6d","\xcd","\x32"),
	HX_HCSTRING("__startDrag","\x56","\xee","\x8f","\x29"),
	HX_HCSTRING("__stopDrag","\x36","\xe4","\x62","\x38"),
	HX_HCSTRING("__unregisterLimeModule","\x9d","\xf5","\x2e","\x8f"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_contentsScaleFactor","\x96","\xda","\x8a","\xc2"),
	HX_HCSTRING("get_displayState","\xf8","\x38","\x03","\x95"),
	HX_HCSTRING("set_displayState","\x6c","\x26","\x45","\xeb"),
	HX_HCSTRING("get_focus","\x2f","\xbc","\x32","\x48"),
	HX_HCSTRING("set_focus","\x3b","\xa8","\x83","\x2b"),
	HX_HCSTRING("get_frameRate","\x84","\xe5","\x88","\xfa"),
	HX_HCSTRING("set_frameRate","\x90","\xc7","\x8e","\x3f"),
	HX_HCSTRING("get_fullScreenHeight","\xab","\x45","\x6b","\xc8"),
	HX_HCSTRING("get_fullScreenSourceRect","\x63","\xa3","\x96","\x81"),
	HX_HCSTRING("set_fullScreenSourceRect","\xd7","\x24","\x71","\x94"),
	HX_HCSTRING("get_fullScreenWidth","\xc2","\x5c","\x95","\x70"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_mouseX","\x5c","\xba","\x95","\xbc"),
	HX_HCSTRING("get_mouseY","\x5d","\xba","\x95","\xbc"),
	HX_HCSTRING("get_quality","\xd6","\x64","\x46","\xca"),
	HX_HCSTRING("set_quality","\xe2","\x6b","\xb3","\xd4"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_scaleMode","\xe4","\xae","\x37","\xed"),
	HX_HCSTRING("set_scaleMode","\xf0","\x90","\x3d","\x32"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_tabEnabled","\xf5","\x7e","\xfe","\xb5"),
	HX_HCSTRING("set_tabEnabled","\x69","\x67","\x1e","\xd6"),
	HX_HCSTRING("get_tabIndex","\x86","\xd0","\xd2","\xe1"),
	HX_HCSTRING("set_tabIndex","\xfa","\xf3","\xcb","\xf6"),
	HX_HCSTRING("set_transform","\x4f","\xe3","\xfc","\x4b"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void Stage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Stage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
};

#endif

hx::Class Stage_obj::__mClass;

void Stage_obj::__register()
{
	hx::Object *dummy = new Stage_obj;
	Stage_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Stage","\x14","\x36","\x7c","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Stage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Stage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Stage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
