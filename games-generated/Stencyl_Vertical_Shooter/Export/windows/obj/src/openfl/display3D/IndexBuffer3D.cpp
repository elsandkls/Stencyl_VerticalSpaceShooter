// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0f6a02916d47e310_34_new,"openfl.display3D.IndexBuffer3D","new",0x7b4eb39c,"openfl.display3D.IndexBuffer3D.new","openfl/display3D/IndexBuffer3D.hx",34,0x3d934296)
HX_LOCAL_STACK_FRAME(_hx_pos_0f6a02916d47e310_48_dispose,"openfl.display3D.IndexBuffer3D","dispose",0xbcffb1db,"openfl.display3D.IndexBuffer3D.dispose","openfl/display3D/IndexBuffer3D.hx",48,0x3d934296)
HX_LOCAL_STACK_FRAME(_hx_pos_0f6a02916d47e310_56_uploadFromByteArray,"openfl.display3D.IndexBuffer3D","uploadFromByteArray",0x61713322,"openfl.display3D.IndexBuffer3D.uploadFromByteArray","openfl/display3D/IndexBuffer3D.hx",56,0x3d934296)
HX_LOCAL_STACK_FRAME(_hx_pos_0f6a02916d47e310_66_uploadFromTypedArray,"openfl.display3D.IndexBuffer3D","uploadFromTypedArray",0x49f635fe,"openfl.display3D.IndexBuffer3D.uploadFromTypedArray","openfl/display3D/IndexBuffer3D.hx",66,0x3d934296)
HX_LOCAL_STACK_FRAME(_hx_pos_0f6a02916d47e310_76_uploadFromVector,"openfl.display3D.IndexBuffer3D","uploadFromVector",0xaabe3672,"openfl.display3D.IndexBuffer3D.uploadFromVector","openfl/display3D/IndexBuffer3D.hx",76,0x3d934296)
namespace openfl{
namespace display3D{

void IndexBuffer3D_obj::__construct( ::openfl::display3D::Context3D context3D,int numIndices, ::Dynamic bufferUsage){
            	HX_STACKFRAME(&_hx_pos_0f6a02916d47e310_34_new)
HXLINE(  36)		this->_hx___context = context3D;
HXLINE(  37)		this->_hx___numIndices = numIndices;
HXLINE(  39)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE(  40)		this->_hx___elementType = gl->UNSIGNED_SHORT;
HXLINE(  41)		this->_hx___id = gl->createBuffer();
HXLINE(  43)		int _hx_tmp;
HXDLIN(  43)		if (hx::IsEq( bufferUsage,(int)0 )) {
HXLINE(  43)			_hx_tmp = gl->DYNAMIC_DRAW;
            		}
            		else {
HXLINE(  43)			_hx_tmp = gl->STATIC_DRAW;
            		}
HXDLIN(  43)		this->_hx___usage = _hx_tmp;
            	}

Dynamic IndexBuffer3D_obj::__CreateEmpty() { return new IndexBuffer3D_obj; }

void *IndexBuffer3D_obj::_hx_vtable = 0;

Dynamic IndexBuffer3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IndexBuffer3D_obj > _hx_result = new IndexBuffer3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool IndexBuffer3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x36314040;
}

void IndexBuffer3D_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_0f6a02916d47e310_48_dispose)
HXLINE(  50)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE(  51)		gl->deleteBuffer(this->_hx___id);
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexBuffer3D_obj,dispose,(void))

void IndexBuffer3D_obj::uploadFromByteArray( ::openfl::utils::ByteArrayData data,int byteArrayOffset,int startOffset,int count){
            	HX_GC_STACKFRAME(&_hx_pos_0f6a02916d47e310_56_uploadFromByteArray)
HXLINE(  59)		int offset = (byteArrayOffset + (startOffset * (int)2));
HXLINE(  60)		 ::haxe::io::Bytes buffer = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN(  60)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(  60)		if (hx::IsNotNull( buffer )) {
HXLINE(  60)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN(  60)			int in_byteOffset = offset;
HXDLIN(  60)			if ((in_byteOffset < (int)0)) {
HXLINE(  60)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  60)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE(  60)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  60)			int bufferByteLength = buffer->length;
HXDLIN(  60)			int elementSize = _this->bytesPerElement;
HXDLIN(  60)			int newByteLength = bufferByteLength;
HXDLIN(  60)			if (hx::IsNull( count )) {
HXLINE(  60)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  60)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  60)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  60)				if ((newByteLength < (int)0)) {
HXLINE(  60)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
            			else {
HXLINE(  60)				newByteLength = (count * _this->bytesPerElement);
HXDLIN(  60)				int newRange = (in_byteOffset + newByteLength);
HXDLIN(  60)				if ((newRange > bufferByteLength)) {
HXLINE(  60)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  60)			_this->buffer = buffer;
HXDLIN(  60)			_this->byteOffset = in_byteOffset;
HXDLIN(  60)			_this->byteLength = newByteLength;
HXDLIN(  60)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN(  60)			this1 = _this;
            		}
            		else {
HXLINE(  60)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            		}
HXDLIN(  60)		this->uploadFromTypedArray(this1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(IndexBuffer3D_obj,uploadFromByteArray,(void))

void IndexBuffer3D_obj::uploadFromTypedArray( ::lime::utils::ArrayBufferView data,hx::Null< int >  __o_byteLength){
int byteLength = __o_byteLength.Default(-1);
            	HX_STACKFRAME(&_hx_pos_0f6a02916d47e310_66_uploadFromTypedArray)
HXLINE(  68)		if (hx::IsNull( data )) {
HXLINE(  68)			return;
            		}
HXLINE(  69)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE(  70)		this->_hx___context->_hx___bindGLElementArrayBuffer(this->_hx___id);
HXLINE(  71)		::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(gl,gl->ELEMENT_ARRAY_BUFFER,data,this->_hx___usage);
            	}


HX_DEFINE_DYNAMIC_FUNC2(IndexBuffer3D_obj,uploadFromTypedArray,(void))

void IndexBuffer3D_obj::uploadFromVector( ::openfl::_Vector::IntVector data,int startOffset,int count){
            	HX_GC_STACKFRAME(&_hx_pos_0f6a02916d47e310_76_uploadFromVector)
HXLINE(  81)		if (hx::IsNull( data )) {
HXLINE(  81)			return;
            		}
HXLINE(  82)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE(  84)		int length = (startOffset + count);
HXLINE(  85)		 ::lime::utils::ArrayBufferView existingUInt16Array = this->_hx___tempUInt16Array;
HXLINE(  87)		bool _hx_tmp;
HXDLIN(  87)		if (hx::IsNotNull( this->_hx___tempUInt16Array )) {
HXLINE(  87)			_hx_tmp = (this->_hx___tempUInt16Array->length < count);
            		}
            		else {
HXLINE(  87)			_hx_tmp = true;
            		}
HXDLIN(  87)		if (_hx_tmp) {
HXLINE(  89)			 ::lime::utils::ArrayBufferView this1;
HXDLIN(  89)			if (hx::IsNotNull( count )) {
HXLINE(  89)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,count,(int)6);
            			}
            			else {
HXLINE(  89)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            			}
HXDLIN(  89)			this->_hx___tempUInt16Array = this1;
HXLINE(  91)			if (hx::IsNotNull( existingUInt16Array )) {
HXLINE(  93)				 ::lime::utils::ArrayBufferView _this = this->_hx___tempUInt16Array;
HXDLIN(  93)				int offset = (int)0;
HXDLIN(  93)				if (hx::IsNotNull( existingUInt16Array )) {
HXLINE(  93)					 ::haxe::io::Bytes _this1 = _this->buffer;
HXDLIN(  93)					_this1->blit((offset * _this->bytesPerElement),existingUInt16Array->buffer,existingUInt16Array->byteOffset,existingUInt16Array->byteLength);
            				}
            				else {
HXLINE(  93)					HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            				}
            			}
            		}
HXLINE(  99)		{
HXLINE(  99)			int _g1 = startOffset;
HXDLIN(  99)			int _g = length;
HXDLIN(  99)			while((_g1 < _g)){
HXLINE(  99)				_g1 = (_g1 + (int)1);
HXDLIN(  99)				int i = (_g1 - (int)1);
HXLINE( 101)				{
HXLINE( 101)					 ::lime::utils::ArrayBufferView this2 = this->_hx___tempUInt16Array;
HXDLIN( 101)					int val = data->get(i);
HXDLIN( 101)					{
HXLINE( 101)						int this3 = this2->byteOffset;
HXDLIN( 101)						::__hxcpp_memory_set_ui16(this2->buffer->b,(this3 + ((i - startOffset) * (int)2)),val);
            					}
            				}
            			}
            		}
HXLINE( 105)		this->uploadFromTypedArray(this->_hx___tempUInt16Array,null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(IndexBuffer3D_obj,uploadFromVector,(void))


hx::ObjectPtr< IndexBuffer3D_obj > IndexBuffer3D_obj::__new( ::openfl::display3D::Context3D context3D,int numIndices, ::Dynamic bufferUsage) {
	hx::ObjectPtr< IndexBuffer3D_obj > __this = new IndexBuffer3D_obj();
	__this->__construct(context3D,numIndices,bufferUsage);
	return __this;
}

hx::ObjectPtr< IndexBuffer3D_obj > IndexBuffer3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context3D,int numIndices, ::Dynamic bufferUsage) {
	IndexBuffer3D_obj *__this = (IndexBuffer3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IndexBuffer3D_obj), true, "openfl.display3D.IndexBuffer3D"));
	*(void **)__this = IndexBuffer3D_obj::_hx_vtable;
	__this->__construct(context3D,numIndices,bufferUsage);
	return __this;
}

IndexBuffer3D_obj::IndexBuffer3D_obj()
{
}

void IndexBuffer3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IndexBuffer3D);
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___elementType,"__elementType");
	HX_MARK_MEMBER_NAME(_hx___id,"__id");
	HX_MARK_MEMBER_NAME(_hx___memoryUsage,"__memoryUsage");
	HX_MARK_MEMBER_NAME(_hx___numIndices,"__numIndices");
	HX_MARK_MEMBER_NAME(_hx___tempUInt16Array,"__tempUInt16Array");
	HX_MARK_MEMBER_NAME(_hx___usage,"__usage");
	HX_MARK_END_CLASS();
}

void IndexBuffer3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___elementType,"__elementType");
	HX_VISIT_MEMBER_NAME(_hx___id,"__id");
	HX_VISIT_MEMBER_NAME(_hx___memoryUsage,"__memoryUsage");
	HX_VISIT_MEMBER_NAME(_hx___numIndices,"__numIndices");
	HX_VISIT_MEMBER_NAME(_hx___tempUInt16Array,"__tempUInt16Array");
	HX_VISIT_MEMBER_NAME(_hx___usage,"__usage");
}

hx::Val IndexBuffer3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"__id") ) { return hx::Val( _hx___id ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__usage") ) { return hx::Val( _hx___usage ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__numIndices") ) { return hx::Val( _hx___numIndices ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__elementType") ) { return hx::Val( _hx___elementType ); }
		if (HX_FIELD_EQ(inName,"__memoryUsage") ) { return hx::Val( _hx___memoryUsage ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uploadFromVector") ) { return hx::Val( uploadFromVector_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__tempUInt16Array") ) { return hx::Val( _hx___tempUInt16Array ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"uploadFromByteArray") ) { return hx::Val( uploadFromByteArray_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"uploadFromTypedArray") ) { return hx::Val( uploadFromTypedArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IndexBuffer3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"__id") ) { _hx___id=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__usage") ) { _hx___usage=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__numIndices") ) { _hx___numIndices=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__elementType") ) { _hx___elementType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__memoryUsage") ) { _hx___memoryUsage=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__tempUInt16Array") ) { _hx___tempUInt16Array=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IndexBuffer3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"));
	outFields->push(HX_HCSTRING("__elementType","\x76","\x1c","\xf3","\x38"));
	outFields->push(HX_HCSTRING("__id","\xfb","\xb6","\x13","\x3f"));
	outFields->push(HX_HCSTRING("__memoryUsage","\x40","\xbf","\x50","\xc5"));
	outFields->push(HX_HCSTRING("__numIndices","\xa1","\x00","\x08","\x4c"));
	outFields->push(HX_HCSTRING("__tempUInt16Array","\x66","\x92","\xc0","\xbd"));
	outFields->push(HX_HCSTRING("__usage","\x01","\xb6","\x8d","\x14"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IndexBuffer3D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(IndexBuffer3D_obj,_hx___context),HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a")},
	{hx::fsInt,(int)offsetof(IndexBuffer3D_obj,_hx___elementType),HX_HCSTRING("__elementType","\x76","\x1c","\xf3","\x38")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(IndexBuffer3D_obj,_hx___id),HX_HCSTRING("__id","\xfb","\xb6","\x13","\x3f")},
	{hx::fsInt,(int)offsetof(IndexBuffer3D_obj,_hx___memoryUsage),HX_HCSTRING("__memoryUsage","\x40","\xbf","\x50","\xc5")},
	{hx::fsInt,(int)offsetof(IndexBuffer3D_obj,_hx___numIndices),HX_HCSTRING("__numIndices","\xa1","\x00","\x08","\x4c")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(IndexBuffer3D_obj,_hx___tempUInt16Array),HX_HCSTRING("__tempUInt16Array","\x66","\x92","\xc0","\xbd")},
	{hx::fsInt,(int)offsetof(IndexBuffer3D_obj,_hx___usage),HX_HCSTRING("__usage","\x01","\xb6","\x8d","\x14")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IndexBuffer3D_obj_sStaticStorageInfo = 0;
#endif

static ::String IndexBuffer3D_obj_sMemberFields[] = {
	HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"),
	HX_HCSTRING("__elementType","\x76","\x1c","\xf3","\x38"),
	HX_HCSTRING("__id","\xfb","\xb6","\x13","\x3f"),
	HX_HCSTRING("__memoryUsage","\x40","\xbf","\x50","\xc5"),
	HX_HCSTRING("__numIndices","\xa1","\x00","\x08","\x4c"),
	HX_HCSTRING("__tempUInt16Array","\x66","\x92","\xc0","\xbd"),
	HX_HCSTRING("__usage","\x01","\xb6","\x8d","\x14"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("uploadFromByteArray","\xe6","\x17","\x1b","\xee"),
	HX_HCSTRING("uploadFromTypedArray","\xba","\x7c","\xf4","\xd1"),
	HX_HCSTRING("uploadFromVector","\x2e","\x6f","\x6b","\xa8"),
	::String(null()) };

static void IndexBuffer3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IndexBuffer3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IndexBuffer3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IndexBuffer3D_obj::__mClass,"__mClass");
};

#endif

hx::Class IndexBuffer3D_obj::__mClass;

void IndexBuffer3D_obj::__register()
{
	hx::Object *dummy = new IndexBuffer3D_obj;
	IndexBuffer3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.IndexBuffer3D","\xaa","\xf5","\xd5","\x3f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IndexBuffer3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IndexBuffer3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IndexBuffer3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IndexBuffer3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IndexBuffer3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IndexBuffer3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
