// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_SamplerState
#include <openfl/_internal/renderer/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DState
#include <openfl/_internal/renderer/context3D/Context3DState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Uniform
#include <openfl/display3D/Uniform.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DProgramType_Context3DProgramType_Impl_
#include <openfl/display3D/_Context3DProgramType/Context3DProgramType_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_VideoTexture
#include <openfl/display3D/textures/VideoTexture.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_AGALMiniAssembler
#include <openfl/utils/AGALMiniAssembler.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_67_new,"openfl.display3D.Context3D","new",0x4f12c019,"openfl.display3D.Context3D.new","openfl/display3D/Context3D.hx",67,0xc899cbb9)
static const Float _hx_array_data_2fa0bfa7_2[] = {
	1.0,1.0,1.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_241_clear,"openfl.display3D.Context3D","clear",0xf8808186,"openfl.display3D.Context3D.clear","openfl/display3D/Context3D.hx",241,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_314_configureBackBuffer,"openfl.display3D.Context3D","configureBackBuffer",0x7210edc6,"openfl.display3D.Context3D.configureBackBuffer","openfl/display3D/Context3D.hx",314,0xc899cbb9)
static const int _hx_array_data_2fa0bfa7_5[] = {
	(int)0,(int)1,(int)2,(int)2,(int)1,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_376_createCubeTexture,"openfl.display3D.Context3D","createCubeTexture",0xbb69e843,"openfl.display3D.Context3D.createCubeTexture","openfl/display3D/Context3D.hx",376,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_383_createIndexBuffer,"openfl.display3D.Context3D","createIndexBuffer",0x3b80e18f,"openfl.display3D.Context3D.createIndexBuffer","openfl/display3D/Context3D.hx",383,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_390_createProgram,"openfl.display3D.Context3D","createProgram",0x0b5753e1,"openfl.display3D.Context3D.createProgram","openfl/display3D/Context3D.hx",390,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_397_createRectangleTexture,"openfl.display3D.Context3D","createRectangleTexture",0x8720f36f,"openfl.display3D.Context3D.createRectangleTexture","openfl/display3D/Context3D.hx",397,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_404_createTexture,"openfl.display3D.Context3D","createTexture",0xb63ed238,"openfl.display3D.Context3D.createTexture","openfl/display3D/Context3D.hx",404,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_411_createVertexBuffer,"openfl.display3D.Context3D","createVertexBuffer",0x49fb9507,"openfl.display3D.Context3D.createVertexBuffer","openfl/display3D/Context3D.hx",411,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_421_createVideoTexture,"openfl.display3D.Context3D","createVideoTexture",0x922f1723,"openfl.display3D.Context3D.createVideoTexture","openfl/display3D/Context3D.hx",421,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_428_dispose,"openfl.display3D.Context3D","dispose",0x8ad040d8,"openfl.display3D.Context3D.dispose","openfl/display3D/Context3D.hx",428,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_435_drawToBitmapData,"openfl.display3D.Context3D","drawToBitmapData",0x474f45df,"openfl.display3D.Context3D.drawToBitmapData","openfl/display3D/Context3D.hx",435,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_482_drawTriangles,"openfl.display3D.Context3D","drawTriangles",0x0d837500,"openfl.display3D.Context3D.drawTriangles","openfl/display3D/Context3D.hx",482,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_518_present,"openfl.display3D.Context3D","present",0x095ffb34,"openfl.display3D.Context3D.present","openfl/display3D/Context3D.hx",518,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_548_setBlendFactors,"openfl.display3D.Context3D","setBlendFactors",0x86d16c6e,"openfl.display3D.Context3D.setBlendFactors","openfl/display3D/Context3D.hx",548,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_553_setBlendFactorsSeparate,"openfl.display3D.Context3D","setBlendFactorsSeparate",0x9ca665f1,"openfl.display3D.Context3D.setBlendFactorsSeparate","openfl/display3D/Context3D.hx",553,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_566_setColorMask,"openfl.display3D.Context3D","setColorMask",0xad4f5d14,"openfl.display3D.Context3D.setColorMask","openfl/display3D/Context3D.hx",566,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_578_setCulling,"openfl.display3D.Context3D","setCulling",0x39687055,"openfl.display3D.Context3D.setCulling","openfl/display3D/Context3D.hx",578,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_583_setDepthTest,"openfl.display3D.Context3D","setDepthTest",0x2d08b41a,"openfl.display3D.Context3D.setDepthTest","openfl/display3D/Context3D.hx",583,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_591_setProgram,"openfl.display3D.Context3D","setProgram",0xd9d9d869,"openfl.display3D.Context3D.setProgram","openfl/display3D/Context3D.hx",591,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_609_setProgramConstantsFromByteArray,"openfl.display3D.Context3D","setProgramConstantsFromByteArray",0xd8990de1,"openfl.display3D.Context3D.setProgramConstantsFromByteArray","openfl/display3D/Context3D.hx",609,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_656_setProgramConstantsFromMatrix,"openfl.display3D.Context3D","setProgramConstantsFromMatrix",0x29e843d1,"openfl.display3D.Context3D.setProgramConstantsFromMatrix","openfl/display3D/Context3D.hx",656,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_733_setProgramConstantsFromVector,"openfl.display3D.Context3D","setProgramConstantsFromVector",0x057dbe53,"openfl.display3D.Context3D.setProgramConstantsFromVector","openfl/display3D/Context3D.hx",733,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_778_setRenderToBackBuffer,"openfl.display3D.Context3D","setRenderToBackBuffer",0x6095d693,"openfl.display3D.Context3D.setRenderToBackBuffer","openfl/display3D/Context3D.hx",778,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_783_setRenderToTexture,"openfl.display3D.Context3D","setRenderToTexture",0x25c5d54f,"openfl.display3D.Context3D.setRenderToTexture","openfl/display3D/Context3D.hx",783,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_793_setSamplerStateAt,"openfl.display3D.Context3D","setSamplerStateAt",0x9f8ad1f7,"openfl.display3D.Context3D.setSamplerStateAt","openfl/display3D/Context3D.hx",793,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_815_setScissorRectangle,"openfl.display3D.Context3D","setScissorRectangle",0x712bb5ee,"openfl.display3D.Context3D.setScissorRectangle","openfl/display3D/Context3D.hx",815,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_825_setStencilActions,"openfl.display3D.Context3D","setStencilActions",0x1fe08e1c,"openfl.display3D.Context3D.setStencilActions","openfl/display3D/Context3D.hx",825,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_836_setStencilReferenceValue,"openfl.display3D.Context3D","setStencilReferenceValue",0xaa284f67,"openfl.display3D.Context3D.setStencilReferenceValue","openfl/display3D/Context3D.hx",836,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_853_setTextureAt,"openfl.display3D.Context3D","setTextureAt",0x38d4bfd3,"openfl.display3D.Context3D.setTextureAt","openfl/display3D/Context3D.hx",853,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_858_setVertexBufferAt,"openfl.display3D.Context3D","setVertexBufferAt",0xbb32fa52,"openfl.display3D.Context3D.setVertexBufferAt","openfl/display3D/Context3D.hx",858,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_906___bindGLArrayBuffer,"openfl.display3D.Context3D","__bindGLArrayBuffer",0x84209c10,"openfl.display3D.Context3D.__bindGLArrayBuffer","openfl/display3D/Context3D.hx",906,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_918___bindGLElementArrayBuffer,"openfl.display3D.Context3D","__bindGLElementArrayBuffer",0x269f0e66,"openfl.display3D.Context3D.__bindGLElementArrayBuffer","openfl/display3D/Context3D.hx",918,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_930___bindGLFramebuffer,"openfl.display3D.Context3D","__bindGLFramebuffer",0x408c5984,"openfl.display3D.Context3D.__bindGLFramebuffer","openfl/display3D/Context3D.hx",930,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_940___bindGLTexture2D,"openfl.display3D.Context3D","__bindGLTexture2D",0x24624244,"openfl.display3D.Context3D.__bindGLTexture2D","openfl/display3D/Context3D.hx",940,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_954___bindGLTextureCubeMap,"openfl.display3D.Context3D","__bindGLTextureCubeMap",0x811ec0d5,"openfl.display3D.Context3D.__bindGLTextureCubeMap","openfl/display3D/Context3D.hx",954,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_968___drawTriangles,"openfl.display3D.Context3D","__drawTriangles",0xf71e9e20,"openfl.display3D.Context3D.__drawTriangles","openfl/display3D/Context3D.hx",968,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1000___flushGL,"openfl.display3D.Context3D","__flushGL",0x73ba2b42,"openfl.display3D.Context3D.__flushGL","openfl/display3D/Context3D.hx",1000,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1019___flushGLBlend,"openfl.display3D.Context3D","__flushGLBlend",0xce3a1daf,"openfl.display3D.Context3D.__flushGLBlend","openfl/display3D/Context3D.hx",1019,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1045___flushGLColor,"openfl.display3D.Context3D","__flushGLColor",0x63a1a6c1,"openfl.display3D.Context3D.__flushGLColor","openfl/display3D/Context3D.hx",1045,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1060___flushGLCulling,"openfl.display3D.Context3D","__flushGLCulling",0x308bab4e,"openfl.display3D.Context3D.__flushGLCulling","openfl/display3D/Context3D.hx",1060,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1089___flushGLDepth,"openfl.display3D.Context3D","__flushGLDepth",0xf06f2661,"openfl.display3D.Context3D.__flushGLDepth","openfl/display3D/Context3D.hx",1089,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1123___flushGLFramebuffer,"openfl.display3D.Context3D","__flushGLFramebuffer",0x8bc4a4cb,"openfl.display3D.Context3D.__flushGLFramebuffer","openfl/display3D/Context3D.hx",1123,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1169___flushGLProgram,"openfl.display3D.Context3D","__flushGLProgram",0xd0fd1362,"openfl.display3D.Context3D.__flushGLProgram","openfl/display3D/Context3D.hx",1169,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1214___flushGLScissor,"openfl.display3D.Context3D","__flushGLScissor",0xe1eaf0fa,"openfl.display3D.Context3D.__flushGLScissor","openfl/display3D/Context3D.hx",1214,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1252___flushGLStencil,"openfl.display3D.Context3D","__flushGLStencil",0x5d0786da,"openfl.display3D.Context3D.__flushGLStencil","openfl/display3D/Context3D.hx",1252,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1283___flushGLTextures,"openfl.display3D.Context3D","__flushGLTextures",0xec1af09a,"openfl.display3D.Context3D.__flushGLTextures","openfl/display3D/Context3D.hx",1283,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1367___flushGLViewport,"openfl.display3D.Context3D","__flushGLViewport",0x22f145c8,"openfl.display3D.Context3D.__flushGLViewport","openfl/display3D/Context3D.hx",1367,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1415___getGLBlend,"openfl.display3D.Context3D","__getGLBlend",0x53955e5d,"openfl.display3D.Context3D.__getGLBlend","openfl/display3D/Context3D.hx",1415,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1438___getGLCompareMode,"openfl.display3D.Context3D","__getGLCompareMode",0xec8b55b4,"openfl.display3D.Context3D.__getGLCompareMode","openfl/display3D/Context3D.hx",1438,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1457___getGLStencilAction,"openfl.display3D.Context3D","__getGLStencilAction",0xdf4274de,"openfl.display3D.Context3D.__getGLStencilAction","openfl/display3D/Context3D.hx",1457,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1476___getGLTriangleFace,"openfl.display3D.Context3D","__getGLTriangleFace",0x318746f9,"openfl.display3D.Context3D.__getGLTriangleFace","openfl/display3D/Context3D.hx",1476,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1489___renderStage3D,"openfl.display3D.Context3D","__renderStage3D",0x426e1052,"openfl.display3D.Context3D.__renderStage3D","openfl/display3D/Context3D.hx",1489,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1543___setGLBlend,"openfl.display3D.Context3D","__setGLBlend",0x5712fcd1,"openfl.display3D.Context3D.__setGLBlend","openfl/display3D/Context3D.hx",1543,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1557___setGLBlendEquation,"openfl.display3D.Context3D","__setGLBlendEquation",0x47b42d7d,"openfl.display3D.Context3D.__setGLBlendEquation","openfl/display3D/Context3D.hx",1557,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1567___setGLCullFace,"openfl.display3D.Context3D","__setGLCullFace",0x3db3a2ef,"openfl.display3D.Context3D.__setGLCullFace","openfl/display3D/Context3D.hx",1567,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1581___setGLDepthTest,"openfl.display3D.Context3D","__setGLDepthTest",0x637f7775,"openfl.display3D.Context3D.__setGLDepthTest","openfl/display3D/Context3D.hx",1581,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1595___setGLFrontFace,"openfl.display3D.Context3D","__setGLFrontFace",0x40c35666,"openfl.display3D.Context3D.__setGLFrontFace","openfl/display3D/Context3D.hx",1595,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1605___setGLScissorTest,"openfl.display3D.Context3D","__setGLScissorTest",0xe746cf0e,"openfl.display3D.Context3D.__setGLScissorTest","openfl/display3D/Context3D.hx",1605,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1619___setGLStencilTest,"openfl.display3D.Context3D","__setGLStencilTest",0xce93d4ee,"openfl.display3D.Context3D.__setGLStencilTest","openfl/display3D/Context3D.hx",1619,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1640_get_enableErrorChecking,"openfl.display3D.Context3D","get_enableErrorChecking",0x0dbc654f,"openfl.display3D.Context3D.get_enableErrorChecking","openfl/display3D/Context3D.hx",1640,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1647_set_enableErrorChecking,"openfl.display3D.Context3D","set_enableErrorChecking",0x101dce5b,"openfl.display3D.Context3D.set_enableErrorChecking","openfl/display3D/Context3D.hx",1647,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_70_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",70,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_72_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",72,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_73_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",73,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_74_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",74,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_75_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",75,0xc899cbb9)
namespace openfl{
namespace display3D{

void Context3D_obj::__construct( ::openfl::display::Stage stage, ::openfl::_internal::renderer::context3D::Context3DState contextState, ::openfl::display::Stage3D stage3D){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_67_new)
HXLINE(  86)		this->totalGPUMemory = (int)0;
HXLINE(  85)		this->profile = (int)3;
HXLINE(  81)		this->driverInfo = HX_("OpenGL (Direct blitting)",e6,33,c8,a6);
HXLINE(  80)		this->backBufferWidth = (int)0;
HXLINE(  79)		this->backBufferHeight = (int)0;
HXLINE( 115)		super::__construct(null());
HXLINE( 117)		this->_hx___stage = stage;
HXLINE( 118)		this->_hx___contextState = contextState;
HXLINE( 119)		this->_hx___stage3D = stage3D;
HXLINE( 121)		this->_hx___context = stage->window->context;
HXLINE( 122)		this->gl = this->_hx___context->webgl;
HXLINE( 124)		if (hx::IsNull( this->_hx___contextState )) {
HXLINE( 124)			this->_hx___contextState =  ::openfl::_internal::renderer::context3D::Context3DState_obj::__alloc( HX_CTX );
            		}
HXLINE( 125)		this->_hx___state =  ::openfl::_internal::renderer::context3D::Context3DState_obj::__alloc( HX_CTX );
HXLINE( 128)		 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN( 128)		this->_hx___vertexConstants = this1;
HXLINE( 129)		 ::lime::utils::ArrayBufferView this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN( 129)		this->_hx___fragmentConstants = this2;
HXLINE( 130)		::cpp::VirtualArray array = ::Array_obj< Float >::fromData( _hx_array_data_2fa0bfa7_2,4);
HXDLIN( 130)		 ::lime::utils::ArrayBufferView this3;
HXDLIN( 130)		if (hx::IsNotNull( array )) {
HXLINE( 130)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 130)			_this->byteOffset = (int)0;
HXDLIN( 130)			_this->length = array->get_length();
HXDLIN( 130)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 130)			 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 130)			_this->buffer = this4;
HXDLIN( 130)			_this->copyFromArray(array,null());
HXDLIN( 130)			this3 = _this;
            		}
            		else {
HXLINE( 130)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 130)		this->_hx___positionScale = this3;
HXLINE( 132)		this->_hx___programs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 134)		if ((::openfl::display3D::Context3D_obj::GL_MAX_VIEWPORT_DIMS == (int)-1)) {
HXLINE( 139)			::openfl::display3D::Context3D_obj::GL_MAX_VIEWPORT_DIMS = (int)16384;
            		}
HXLINE( 144)		this->maxBackBufferWidth = ::openfl::display3D::Context3D_obj::GL_MAX_VIEWPORT_DIMS;
HXLINE( 145)		this->maxBackBufferHeight = ::openfl::display3D::Context3D_obj::GL_MAX_VIEWPORT_DIMS;
HXLINE( 147)		if ((::openfl::display3D::Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT == (int)-1)) {
HXLINE( 149)			 ::Dynamic extension = this->gl->getExtension(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d));
HXLINE( 158)			if (hx::IsNotNull( extension )) {
HXLINE( 160)				::openfl::display3D::Context3D_obj::GL_TEXTURE_MAX_ANISOTROPY_EXT = ( (int)(extension->__Field(HX_("TEXTURE_MAX_ANISOTROPY_EXT",63,c1,6c,51),hx::paccDynamic)) );
HXLINE( 161)				::openfl::display3D::Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = ( (int)(this->gl->getParameter(( (int)(extension->__Field(HX_("MAX_TEXTURE_MAX_ANISOTROPY_EXT",7e,54,e7,a3),hx::paccDynamic)) ))) );
            			}
            			else {
HXLINE( 165)				::openfl::display3D::Context3D_obj::GL_TEXTURE_MAX_ANISOTROPY_EXT = (int)0;
HXLINE( 166)				::openfl::display3D::Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = (int)0;
            			}
            		}
HXLINE( 173)		if ((::openfl::display3D::Context3D_obj::GL_DEPTH_STENCIL == (int)-1)) {
HXLINE( 178)			bool _hx_tmp;
HXDLIN( 178)			if ((this->_hx___context->type == HX_("opengles",9d,f6,c9,fa))) {
HXLINE( 178)				_hx_tmp = (::Std_obj::parseFloat(this->_hx___context->version) >= (int)3);
            			}
            			else {
HXLINE( 178)				_hx_tmp = false;
            			}
HXDLIN( 178)			if (_hx_tmp) {
HXLINE( 179)				::openfl::display3D::Context3D_obj::GL_DEPTH_STENCIL = this->_hx___context->gles3->DEPTH24_STENCIL8;
            			}
            			else {
HXLINE( 181)				 ::Dynamic extension1 = this->gl->getExtension(HX_("OES_packed_depth_stencil",7b,19,31,fc));
HXLINE( 182)				if (hx::IsNotNull( extension1 )) {
HXLINE( 183)					::openfl::display3D::Context3D_obj::GL_DEPTH_STENCIL = ( (int)(extension1->__Field(HX_("DEPTH24_STENCIL8_OES",b4,24,e8,3a),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 185)					extension1 = this->gl->getExtension(HX_("EXT_packed_depth_stencil",f7,88,e3,09));
HXLINE( 186)					if (hx::IsNotNull( extension1 )) {
HXLINE( 187)						::openfl::display3D::Context3D_obj::GL_DEPTH_STENCIL = ( (int)(extension1->__Field(HX_("DEPTH24_STENCIL8_EXT",b8,9e,e0,3a),hx::paccDynamic)) );
            					}
            					else {
HXLINE( 189)						::openfl::display3D::Context3D_obj::GL_DEPTH_STENCIL = (int)0;
            					}
            				}
            			}
            		}
HXLINE( 198)		if (hx::IsNull( ::openfl::display3D::Context3D_obj::_hx___driverInfo )) {
HXLINE( 200)			::String vendor = ( (::String)(this->gl->getParameter(this->gl->VENDOR)) );
HXLINE( 201)			::String version = ( (::String)(this->gl->getParameter(this->gl->VERSION)) );
HXLINE( 202)			::String renderer = ( (::String)(this->gl->getParameter(this->gl->RENDERER)) );
HXLINE( 203)			::String glslVersion = ( (::String)(this->gl->getParameter(this->gl->SHADING_LANGUAGE_VERSION)) );
HXLINE( 205)			::openfl::display3D::Context3D_obj::_hx___driverInfo = (((((((HX_("OpenGL Vendor=",04,c1,2f,f5) + vendor) + HX_(" Version=",65,2a,97,0e)) + version) + HX_(" Renderer=",5a,b1,92,78)) + renderer) + HX_(" GLSL=",5f,30,5a,df)) + glslVersion);
            		}
HXLINE( 209)		this->driverInfo = ::openfl::display3D::Context3D_obj::_hx___driverInfo;
HXLINE( 211)		this->_hx___quadIndexBufferElements = (int)16383;
HXLINE( 212)		this->_hx___quadIndexBufferCount = (this->_hx___quadIndexBufferElements * (int)6);
HXLINE( 215)		 ::Dynamic elements = this->_hx___quadIndexBufferCount;
HXDLIN( 215)		 ::lime::utils::ArrayBufferView this5;
HXDLIN( 215)		if (hx::IsNotNull( elements )) {
HXLINE( 215)			this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)6);
            		}
            		else {
HXLINE( 215)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            		}
HXDLIN( 215)		 ::lime::utils::ArrayBufferView data = this5;
HXLINE( 217)		int index = (int)0;
HXLINE( 218)		int vertex = (int)0;
HXLINE( 220)		{
HXLINE( 220)			int _g1 = (int)0;
HXDLIN( 220)			int _g = this->_hx___quadIndexBufferElements;
HXDLIN( 220)			while((_g1 < _g)){
HXLINE( 220)				_g1 = (_g1 + (int)1);
HXDLIN( 220)				int i = (_g1 - (int)1);
HXLINE( 222)				{
HXLINE( 222)					int data1 = data->byteOffset;
HXDLIN( 222)					::Array< unsigned char > data2 = data->buffer->b;
HXDLIN( 222)					::__hxcpp_memory_set_ui16(data2,(data1 + (index * (int)2)),vertex);
            				}
HXLINE( 223)				{
HXLINE( 223)					int val = (vertex + (int)1);
HXDLIN( 223)					{
HXLINE( 223)						int data21 = data->byteOffset;
HXDLIN( 223)						::Array< unsigned char > data3 = data->buffer->b;
HXDLIN( 223)						::__hxcpp_memory_set_ui16(data3,(data21 + ((index + (int)1) * (int)2)),val);
            					}
            				}
HXLINE( 224)				{
HXLINE( 224)					int val1 = (vertex + (int)2);
HXDLIN( 224)					{
HXLINE( 224)						int data31 = data->byteOffset;
HXDLIN( 224)						::Array< unsigned char > data4 = data->buffer->b;
HXDLIN( 224)						::__hxcpp_memory_set_ui16(data4,(data31 + ((index + (int)2) * (int)2)),val1);
            					}
            				}
HXLINE( 225)				{
HXLINE( 225)					int val2 = (vertex + (int)2);
HXDLIN( 225)					{
HXLINE( 225)						int data41 = data->byteOffset;
HXDLIN( 225)						::Array< unsigned char > data5 = data->buffer->b;
HXDLIN( 225)						::__hxcpp_memory_set_ui16(data5,(data41 + ((index + (int)3) * (int)2)),val2);
            					}
            				}
HXLINE( 226)				{
HXLINE( 226)					int val3 = (vertex + (int)1);
HXDLIN( 226)					{
HXLINE( 226)						int data51 = data->byteOffset;
HXDLIN( 226)						::Array< unsigned char > data6 = data->buffer->b;
HXDLIN( 226)						::__hxcpp_memory_set_ui16(data6,(data51 + ((index + (int)4) * (int)2)),val3);
            					}
            				}
HXLINE( 227)				{
HXLINE( 227)					int val4 = (vertex + (int)3);
HXDLIN( 227)					{
HXLINE( 227)						int data61 = data->byteOffset;
HXDLIN( 227)						::Array< unsigned char > data7 = data->buffer->b;
HXDLIN( 227)						::__hxcpp_memory_set_ui16(data7,(data61 + ((index + (int)5) * (int)2)),val4);
            					}
            				}
HXLINE( 229)				index = (index + (int)6);
HXLINE( 230)				vertex = (vertex + (int)4);
            			}
            		}
HXLINE( 234)		this->_hx___quadIndexBuffer = this->createIndexBuffer(this->_hx___quadIndexBufferCount,null());
HXLINE( 235)		this->_hx___quadIndexBuffer->uploadFromTypedArray(data,null());
            	}

Dynamic Context3D_obj::__CreateEmpty() { return new Context3D_obj; }

void *Context3D_obj::_hx_vtable = 0;

Dynamic Context3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3D_obj > _hx_result = new Context3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Context3D_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
	} else {
		return inClassId==(int)0x6271873d;
	}
}

void Context3D_obj::clear(hx::Null< Float >  __o_red,hx::Null< Float >  __o_green,hx::Null< Float >  __o_blue,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< int >  __o_stencil,hx::Null< int >  __o_mask){
Float red = __o_red.Default(0);
Float green = __o_green.Default(0);
Float blue = __o_blue.Default(0);
Float alpha = __o_alpha.Default(1);
Float depth = __o_depth.Default(1);
int stencil = __o_stencil.Default(0);
int mask = __o_mask.Default(7);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_241_clear)
HXLINE( 243)		this->_hx___flushGLFramebuffer();
HXLINE( 244)		this->_hx___flushGLViewport();
HXLINE( 246)		int clearMask = (int)0;
HXLINE( 248)		if ((((int)mask & (int)(int)1) != (int)0)) {
HXLINE( 250)			if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE( 252)				bool _hx_tmp;
HXDLIN( 252)				if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 252)					_hx_tmp = !(this->_hx___stage->_hx___renderer->_hx___cleared);
            				}
            				else {
HXLINE( 252)					_hx_tmp = false;
            				}
HXDLIN( 252)				if (_hx_tmp) {
HXLINE( 252)					this->_hx___stage->_hx___renderer->_hx___cleared = true;
            				}
HXLINE( 253)				this->_hx___cleared = true;
            			}
HXLINE( 257)			clearMask = ((int)clearMask | (int)this->gl->COLOR_BUFFER_BIT);
HXLINE( 259)			bool _hx_tmp1;
HXDLIN( 259)			bool _hx_tmp2;
HXDLIN( 259)			bool _hx_tmp3;
HXDLIN( 259)			if ((this->_hx___contextState->colorMaskRed == true)) {
HXLINE( 259)				_hx_tmp3 = (this->_hx___contextState->colorMaskGreen != true);
            			}
            			else {
HXLINE( 259)				_hx_tmp3 = true;
            			}
HXDLIN( 259)			if (!(_hx_tmp3)) {
HXLINE( 259)				_hx_tmp2 = (this->_hx___contextState->colorMaskBlue != true);
            			}
            			else {
HXLINE( 259)				_hx_tmp2 = true;
            			}
HXDLIN( 259)			if (!(_hx_tmp2)) {
HXLINE( 259)				_hx_tmp1 = (this->_hx___contextState->colorMaskAlpha != true);
            			}
            			else {
HXLINE( 259)				_hx_tmp1 = true;
            			}
HXDLIN( 259)			if (_hx_tmp1) {
HXLINE( 261)				this->gl->colorMask(true,true,true,true);
HXLINE( 262)				this->_hx___contextState->colorMaskRed = true;
HXLINE( 263)				this->_hx___contextState->colorMaskGreen = true;
HXLINE( 264)				this->_hx___contextState->colorMaskBlue = true;
HXLINE( 265)				this->_hx___contextState->colorMaskAlpha = true;
            			}
HXLINE( 269)			this->gl->clearColor(red,green,blue,alpha);
            		}
HXLINE( 273)		if ((((int)mask & (int)(int)2) != (int)0)) {
HXLINE( 275)			clearMask = ((int)clearMask | (int)this->gl->DEPTH_BUFFER_BIT);
HXLINE( 277)			if ((this->_hx___contextState->depthMask != true)) {
HXLINE( 279)				this->gl->depthMask(true);
HXLINE( 280)				this->_hx___contextState->depthMask = true;
            			}
HXLINE( 284)			this->gl->clearDepthf(depth);
            		}
HXLINE( 288)		if ((((int)mask & (int)(int)4) != (int)0)) {
HXLINE( 290)			clearMask = ((int)clearMask | (int)this->gl->STENCIL_BUFFER_BIT);
HXLINE( 292)			if ((this->_hx___contextState->stencilWriteMask != (int)255)) {
HXLINE( 294)				this->gl->stencilMask((int)255);
HXLINE( 295)				this->_hx___contextState->stencilWriteMask = (int)255;
            			}
HXLINE( 299)			this->gl->clearStencil(stencil);
HXLINE( 300)			this->_hx___contextState->stencilWriteMask = (int)255;
            		}
HXLINE( 304)		if ((clearMask == (int)0)) {
HXLINE( 304)			return;
            		}
HXLINE( 306)		this->_hx___setGLScissorTest(false);
HXLINE( 307)		this->gl->clear(clearMask);
            	}


HX_DEFINE_DYNAMIC_FUNC7(Context3D_obj,clear,(void))

void Context3D_obj::configureBackBuffer(int width,int height,int antiAlias,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< bool >  __o_wantsBestResolution,hx::Null< bool >  __o_wantsBestResolutionOnBrowserZoom){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
bool wantsBestResolution = __o_wantsBestResolution.Default(false);
bool wantsBestResolutionOnBrowserZoom = __o_wantsBestResolutionOnBrowserZoom.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_314_configureBackBuffer)
HXDLIN( 314)		if (hx::IsNull( this->_hx___stage3D )) {
HXLINE( 316)			this->backBufferWidth = width;
HXLINE( 317)			this->backBufferHeight = height;
HXLINE( 319)			this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 320)			this->_hx___state->backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 321)			this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 322)			this->_hx___backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
            		}
            		else {
HXLINE( 326)			bool _hx_tmp;
HXDLIN( 326)			bool _hx_tmp1;
HXDLIN( 326)			if (hx::IsNotNull( this->_hx___backBufferTexture )) {
HXLINE( 326)				_hx_tmp1 = (this->backBufferWidth != width);
            			}
            			else {
HXLINE( 326)				_hx_tmp1 = true;
            			}
HXDLIN( 326)			if (!(_hx_tmp1)) {
HXLINE( 326)				_hx_tmp = (this->backBufferHeight != height);
            			}
            			else {
HXLINE( 326)				_hx_tmp = true;
            			}
HXDLIN( 326)			if (_hx_tmp) {
HXLINE( 328)				this->_hx___backBufferTexture = this->createRectangleTexture(width,height,(int)1,true);
HXLINE( 329)				this->_hx___frontBufferTexture = this->createRectangleTexture(width,height,(int)1,true);
HXLINE( 331)				if (hx::IsNull( this->_hx___stage3D->_hx___vertexBuffer )) {
HXLINE( 332)					this->_hx___stage3D->_hx___vertexBuffer = this->createVertexBuffer((int)4,(int)5,null());
            				}
HXLINE( 335)				int length = null();
HXDLIN( 335)				bool fixed = null();
HXDLIN( 335)				 ::openfl::_Vector::FloatVector vertexData =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::__new(20)->init(0,width)->init(1,height)->init(2,(int)0)->init(3,(int)1)->init(4,(int)1)->init(5,(int)0)->init(6,height)->init(7,(int)0)->init(8,(int)0)->init(9,(int)1)->init(10,width)->init(11,(int)0)->init(12,(int)0)->init(13,(int)1)->init(14,(int)0)->init(15,(int)0)->init(16,(int)0)->init(17,(int)0)->init(18,(int)0)->init(19,((Float)0.0)),true);
HXLINE( 342)				this->_hx___stage3D->_hx___vertexBuffer->uploadFromVector(vertexData,(int)0,(int)20);
HXLINE( 344)				if (hx::IsNull( this->_hx___stage3D->_hx___indexBuffer )) {
HXLINE( 346)					this->_hx___stage3D->_hx___indexBuffer = this->createIndexBuffer((int)6,null());
HXLINE( 348)					int length1 = null();
HXDLIN( 348)					bool fixed1 = null();
HXDLIN( 348)					 ::openfl::_Vector::IntVector indexData =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,::Array_obj< int >::fromData( _hx_array_data_2fa0bfa7_5,6));
HXLINE( 353)					this->_hx___stage3D->_hx___indexBuffer->uploadFromVector(indexData,(int)0,(int)6);
            				}
            			}
HXLINE( 359)			this->backBufferWidth = width;
HXLINE( 360)			this->backBufferHeight = height;
HXLINE( 362)			this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 363)			this->_hx___state->backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 364)			this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 365)			this->_hx___backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
HXLINE( 366)			this->_hx___state->_hx___primaryGLFramebuffer = this->_hx___backBufferTexture->_hx___getGLFramebuffer(enableDepthAndStencil,antiAlias,(int)0);
HXLINE( 367)			this->_hx___frontBufferTexture->_hx___getGLFramebuffer(enableDepthAndStencil,antiAlias,(int)0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Context3D_obj,configureBackBuffer,(void))

 ::openfl::display3D::textures::CubeTexture Context3D_obj::createCubeTexture(int size, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_376_createCubeTexture)
HXDLIN( 376)		return  ::openfl::display3D::textures::CubeTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),size,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createCubeTexture,return )

 ::openfl::display3D::IndexBuffer3D Context3D_obj::createIndexBuffer(int numIndices, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_383_createIndexBuffer)
HXDLIN( 383)		return  ::openfl::display3D::IndexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numIndices,bufferUsage);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,createIndexBuffer,return )

 ::openfl::display3D::Program3D Context3D_obj::createProgram( ::Dynamic __o_format){
 ::Dynamic format = __o_format.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_390_createProgram)
HXDLIN( 390)		return  ::openfl::display3D::Program3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),format);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,createProgram,return )

 ::openfl::display3D::textures::RectangleTexture Context3D_obj::createRectangleTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_397_createRectangleTexture)
HXDLIN( 397)		return  ::openfl::display3D::textures::RectangleTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString(format),optimizeForRenderToTexture);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createRectangleTexture,return )

 ::openfl::display3D::textures::Texture Context3D_obj::createTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_404_createTexture)
HXDLIN( 404)		return  ::openfl::display3D::textures::Texture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,createTexture,return )

 ::openfl::display3D::VertexBuffer3D Context3D_obj::createVertexBuffer(int numVertices,int data32PerVertex, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_411_createVertexBuffer)
HXDLIN( 411)		return  ::openfl::display3D::VertexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numVertices,data32PerVertex,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,createVertexBuffer,return )

 ::openfl::display3D::textures::VideoTexture Context3D_obj::createVideoTexture(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_421_createVideoTexture)
HXDLIN( 421)		HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Video textures are not supported on this platform",02,cd,86,ca),null()));
HXDLIN( 421)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createVideoTexture,return )

void Context3D_obj::dispose(hx::Null< bool >  __o_recreate){
bool recreate = __o_recreate.Default(true);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_428_dispose)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,dispose,(void))

void Context3D_obj::drawToBitmapData( ::openfl::display::BitmapData destination, ::openfl::geom::Rectangle srcRect, ::openfl::geom::Point destPoint){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_435_drawToBitmapData)
HXLINE( 438)		if (hx::IsNull( destination )) {
HXLINE( 438)			return;
            		}
HXLINE( 440)		 ::lime::math::Rectangle sourceRect;
HXDLIN( 440)		if (hx::IsNotNull( srcRect )) {
HXLINE( 440)			sourceRect = srcRect->_hx___toLimeRectangle();
            		}
            		else {
HXLINE( 440)			sourceRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->backBufferWidth,this->backBufferHeight);
            		}
HXLINE( 441)		 ::lime::math::Vector2 destVector;
HXDLIN( 441)		if (hx::IsNotNull( destPoint )) {
HXLINE( 441)			destVector = destPoint->_hx___toLimeVector2();
            		}
            		else {
HXLINE( 441)			destVector =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 443)		if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 445)			if (hx::IsNotNull( this->_hx___stage->window )) {
HXLINE( 447)				if (hx::IsNotNull( this->_hx___stage3D )) {
HXLINE( 448)					Float xa = ::Std_obj::_hx_int(-(this->_hx___stage3D->get_x()));
HXDLIN( 448)					Float ya = ::Std_obj::_hx_int(-(this->_hx___stage3D->get_y()));
HXDLIN( 448)					destVector->x = xa;
HXDLIN( 448)					destVector->y = ya;
            				}
HXLINE( 451)				 ::lime::graphics::Image image = this->_hx___stage->window->readPixels(null());
HXLINE( 452)				destination->image->copyPixels(image,sourceRect,destVector,null(),null(),null());
            			}
            		}
            		else {
HXLINE( 456)			if (hx::IsNotNull( this->_hx___backBufferTexture )) {
HXLINE( 458)				 ::openfl::display3D::textures::TextureBase cacheRenderToTexture = this->_hx___state->renderToTexture;
HXLINE( 459)				this->setRenderToBackBuffer();
HXLINE( 461)				this->_hx___flushGLFramebuffer();
HXLINE( 462)				this->_hx___flushGLViewport();
HXLINE( 466)				 ::Dynamic elements = ((this->backBufferWidth * this->backBufferHeight) * (int)4);
HXDLIN( 466)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 466)				if (hx::IsNotNull( elements )) {
HXLINE( 466)					this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            				}
            				else {
HXLINE( 466)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXDLIN( 466)				 ::lime::utils::ArrayBufferView data = this1;
HXLINE( 467)				{
HXLINE( 467)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext this2 = this->gl;
HXDLIN( 467)					int width = this->backBufferWidth;
HXDLIN( 467)					int height = this->backBufferHeight;
HXDLIN( 467)					int format = this->_hx___backBufferTexture->_hx___format;
HXDLIN( 467)					int type = this->gl->UNSIGNED_BYTE;
HXDLIN( 467)					{
HXLINE( 467)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data,null(),(int)0);
HXDLIN( 467)						this2->readPixels((int)0,(int)0,width,height,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
HXLINE( 469)				 ::lime::graphics::Image image1 =  ::lime::graphics::Image_obj::__alloc( HX_CTX , ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,data,this->backBufferWidth,this->backBufferHeight,(int)32,(int)2),null(),null(),null(),null(),null(),null());
HXLINE( 470)				destination->image->copyPixels(image1,sourceRect,destVector,null(),null(),null());
HXLINE( 472)				if (hx::IsNotNull( cacheRenderToTexture )) {
HXLINE( 473)					this->setRenderToTexture(cacheRenderToTexture,this->_hx___state->renderToTextureDepthStencil,this->_hx___state->renderToTextureAntiAlias,this->_hx___state->renderToTextureSurfaceSelector);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawToBitmapData,(void))

void Context3D_obj::drawTriangles( ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< int >  __o_firstIndex,hx::Null< int >  __o_numTriangles){
int firstIndex = __o_firstIndex.Default(0);
int numTriangles = __o_numTriangles.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_482_drawTriangles)
HXLINE( 485)		if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE( 488)			bool _hx_tmp;
HXDLIN( 488)			if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 488)				_hx_tmp = !(this->_hx___stage->_hx___renderer->_hx___cleared);
            			}
            			else {
HXLINE( 488)				_hx_tmp = false;
            			}
HXDLIN( 488)			if (_hx_tmp) {
HXLINE( 490)				this->_hx___stage->_hx___renderer->_hx___clear();
            			}
            			else {
HXLINE( 492)				if (!(this->_hx___cleared)) {
HXLINE( 495)					this->clear((int)0,(int)0,(int)0,(int)0,(int)1,(int)0,(int)1);
            				}
            			}
            		}
HXLINE( 501)		this->_hx___flushGL();
HXLINE( 505)		if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE( 506)			this->_hx___state->program->_hx___flush();
            		}
HXLINE( 509)		int count;
HXDLIN( 509)		if ((numTriangles == (int)-1)) {
HXLINE( 509)			count = indexBuffer->_hx___numIndices;
            		}
            		else {
HXLINE( 509)			count = (numTriangles * (int)3);
            		}
HXLINE( 511)		this->_hx___bindGLElementArrayBuffer(indexBuffer->_hx___id);
HXLINE( 512)		{
HXLINE( 512)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN( 512)			int mode = this->gl->TRIANGLES;
HXDLIN( 512)			int type = indexBuffer->_hx___elementType;
HXDLIN( 512)			this1->drawElements(mode,count,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(firstIndex));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawTriangles,(void))

void Context3D_obj::present(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_518_present)
HXLINE( 520)		this->setRenderToBackBuffer();
HXLINE( 522)		if (hx::IsNotNull( this->_hx___stage3D )) {
HXLINE( 524)			if (!(this->_hx___cleared)) {
HXLINE( 528)				this->clear((int)0,(int)0,(int)0,(int)0,(int)1,(int)0,(int)1);
            			}
HXLINE( 532)			 ::openfl::display3D::textures::RectangleTexture cacheBuffer = this->_hx___backBufferTexture;
HXLINE( 533)			this->_hx___backBufferTexture = this->_hx___frontBufferTexture;
HXLINE( 534)			this->_hx___frontBufferTexture = cacheBuffer;
HXLINE( 536)			this->_hx___state->_hx___primaryGLFramebuffer = this->_hx___backBufferTexture->_hx___getGLFramebuffer(this->_hx___state->backBufferEnableDepthAndStencil,this->_hx___backBufferAntiAlias,(int)0);
HXLINE( 537)			this->_hx___cleared = false;
            		}
HXLINE( 541)		this->_hx___present = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,present,(void))

void Context3D_obj::setBlendFactors( ::Dynamic sourceFactor, ::Dynamic destinationFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_548_setBlendFactors)
HXDLIN( 548)		this->setBlendFactorsSeparate(sourceFactor,destinationFactor,sourceFactor,destinationFactor);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setBlendFactors,(void))

void Context3D_obj::setBlendFactorsSeparate( ::Dynamic sourceRGBFactor, ::Dynamic destinationRGBFactor, ::Dynamic sourceAlphaFactor, ::Dynamic destinationAlphaFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_553_setBlendFactorsSeparate)
HXLINE( 555)		this->_hx___state->blendSourceRGBFactor = sourceRGBFactor;
HXLINE( 556)		this->_hx___state->blendDestinationRGBFactor = destinationRGBFactor;
HXLINE( 557)		this->_hx___state->blendSourceAlphaFactor = sourceAlphaFactor;
HXLINE( 558)		this->_hx___state->blendDestinationAlphaFactor = destinationAlphaFactor;
HXLINE( 561)		this->_hx___setGLBlendEquation(this->gl->FUNC_ADD);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setBlendFactorsSeparate,(void))

void Context3D_obj::setColorMask(bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_566_setColorMask)
HXLINE( 568)		this->_hx___state->colorMaskRed = red;
HXLINE( 569)		this->_hx___state->colorMaskGreen = green;
HXLINE( 570)		this->_hx___state->colorMaskBlue = blue;
HXLINE( 571)		this->_hx___state->colorMaskAlpha = alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setColorMask,(void))

void Context3D_obj::setCulling( ::Dynamic triangleFaceToCull){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_578_setCulling)
HXDLIN( 578)		this->_hx___state->culling = triangleFaceToCull;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setCulling,(void))

void Context3D_obj::setDepthTest(bool depthMask, ::Dynamic passCompareMode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_583_setDepthTest)
HXLINE( 585)		this->_hx___state->depthMask = depthMask;
HXLINE( 586)		this->_hx___state->depthCompareMode = passCompareMode;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setDepthTest,(void))

void Context3D_obj::setProgram( ::openfl::display3D::Program3D program){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_591_setProgram)
HXLINE( 593)		this->_hx___state->program = program;
HXLINE( 594)		this->_hx___state->shader = null();
HXLINE( 596)		if (hx::IsNotNull( program )) {
HXLINE( 597)			int _g1 = (int)0;
HXDLIN( 597)			int _g = program->_hx___samplerStates->length;
HXDLIN( 597)			while((_g1 < _g)){
HXLINE( 597)				_g1 = (_g1 + (int)1);
HXDLIN( 597)				int i = (_g1 - (int)1);
HXLINE( 598)				if (hx::IsNull( this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >() )) {
HXLINE( 599)					::Array< ::Dynamic> _hx_tmp = this->_hx___state->samplerStates;
HXDLIN( 599)					_hx_tmp[i] = program->_hx___samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >()->clone();
            				}
            				else {
HXLINE( 601)					 ::openfl::_internal::renderer::SamplerState _hx_tmp1 = this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >();
HXDLIN( 601)					_hx_tmp1->copyFrom(program->_hx___samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setProgram,(void))

void Context3D_obj::setProgramConstantsFromByteArray( ::Dynamic programType,int firstRegister,int numRegisters, ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_609_setProgramConstantsFromByteArray)
HXLINE( 612)		bool _hx_tmp;
HXDLIN( 612)		if ((numRegisters != (int)0)) {
HXLINE( 612)			_hx_tmp = hx::IsNull( this->_hx___state->program );
            		}
            		else {
HXLINE( 612)			_hx_tmp = true;
            		}
HXDLIN( 612)		if (_hx_tmp) {
HXLINE( 612)			return;
            		}
HXLINE( 614)		bool _hx_tmp1;
HXDLIN( 614)		if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE( 614)			_hx_tmp1 = hx::IsEq( this->_hx___state->program->_hx___format,(int)1 );
            		}
            		else {
HXLINE( 614)			_hx_tmp1 = false;
            		}
HXDLIN( 614)		if (!(_hx_tmp1)) {
HXLINE( 622)			if ((numRegisters == (int)-1)) {
HXLINE( 624)				numRegisters = (((int)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data) >> (int)(int)2) - byteArrayOffset);
            			}
HXLINE( 628)			bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 629)			 ::lime::utils::ArrayBufferView dest;
HXDLIN( 629)			if (isVertex) {
HXLINE( 629)				dest = this->_hx___vertexConstants;
            			}
            			else {
HXLINE( 629)				dest = this->_hx___fragmentConstants;
            			}
HXLINE( 631)			 ::haxe::io::Bytes bytes = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 631)			 ::Dynamic len = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data);
HXDLIN( 631)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 631)			if (hx::IsNotNull( bytes )) {
HXLINE( 631)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 631)				int in_byteOffset = (int)0;
HXDLIN( 631)				if ((in_byteOffset < (int)0)) {
HXLINE( 631)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 631)				if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 631)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 631)				int bufferByteLength = bytes->length;
HXDLIN( 631)				int elementSize = _this->bytesPerElement;
HXDLIN( 631)				int newByteLength = bufferByteLength;
HXDLIN( 631)				if (hx::IsNull( len )) {
HXLINE( 631)					newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 631)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 631)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 631)					if ((newByteLength < (int)0)) {
HXLINE( 631)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
            				else {
HXLINE( 631)					newByteLength = (len * _this->bytesPerElement);
HXDLIN( 631)					int newRange = (in_byteOffset + newByteLength);
HXDLIN( 631)					if ((newRange > bufferByteLength)) {
HXLINE( 631)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN( 631)				_this->buffer = bytes;
HXDLIN( 631)				_this->byteOffset = in_byteOffset;
HXDLIN( 631)				_this->byteLength = newByteLength;
HXDLIN( 631)				_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 631)				this1 = _this;
            			}
            			else {
HXLINE( 631)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 631)			 ::lime::utils::ArrayBufferView floatData = this1;
HXLINE( 632)			int outOffset = (firstRegister * (int)4);
HXLINE( 633)			int _hx_int = byteArrayOffset;
HXDLIN( 633)			Float inOffset;
HXDLIN( 633)			if ((_hx_int < (int)0)) {
HXLINE( 633)				inOffset = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE( 633)				inOffset = (_hx_int + ((Float)0.0));
            			}
HXDLIN( 633)			int int1 = (int)4;
HXDLIN( 633)			Float inOffset1;
HXDLIN( 633)			if ((int1 < (int)0)) {
HXLINE( 633)				inOffset1 = (((Float)4294967296.0) + int1);
            			}
            			else {
HXLINE( 633)				inOffset1 = (int1 + ((Float)0.0));
            			}
HXDLIN( 633)			int inOffset2 = ::Std_obj::_hx_int(((Float)inOffset / (Float)inOffset1));
HXLINE( 635)			{
HXLINE( 635)				int _g1 = (int)0;
HXDLIN( 635)				int _g = (numRegisters * (int)4);
HXDLIN( 635)				while((_g1 < _g)){
HXLINE( 635)					_g1 = (_g1 + (int)1);
HXDLIN( 635)					int i = (_g1 - (int)1);
HXLINE( 637)					{
HXLINE( 637)						int floatData1 = floatData->byteOffset;
HXDLIN( 637)						Float val = ::__hxcpp_memory_get_float(floatData->buffer->b,(floatData1 + ((inOffset2 + i) * (int)4)));
HXDLIN( 637)						{
HXLINE( 637)							int dest1 = dest->byteOffset;
HXDLIN( 637)							::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((outOffset + i) * (int)4)),val);
            						}
            					}
            				}
            			}
HXLINE( 641)			if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE( 643)				this->_hx___state->program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setProgramConstantsFromByteArray,(void))

void Context3D_obj::setProgramConstantsFromMatrix( ::Dynamic programType,int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transposedMatrix){
bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_656_setProgramConstantsFromMatrix)
HXDLIN( 656)		bool _hx_tmp;
HXDLIN( 656)		if (hx::IsNotNull( this->_hx___state->program )) {
HXDLIN( 656)			_hx_tmp = hx::IsEq( this->_hx___state->program->_hx___format,(int)1 );
            		}
            		else {
HXDLIN( 656)			_hx_tmp = false;
            		}
HXDLIN( 656)		if (_hx_tmp) {
HXLINE( 658)			this->_hx___flushGLProgram();
HXLINE( 661)			 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)16,(int)8);
HXDLIN( 661)			 ::lime::utils::ArrayBufferView data = this1;
HXLINE( 662)			{
HXLINE( 662)				int _g = (int)0;
HXDLIN( 662)				while((_g < (int)16)){
HXLINE( 662)					_g = (_g + (int)1);
HXDLIN( 662)					int i = (_g - (int)1);
HXLINE( 663)					{
HXLINE( 663)						Float val = matrix->rawData->get(i);
HXDLIN( 663)						{
HXLINE( 663)							int data1 = data->byteOffset;
HXDLIN( 663)							::__hxcpp_memory_set_float(data->buffer->b,(data1 + (i * (int)4)),val);
            						}
            					}
            				}
            			}
HXLINE( 666)			::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix4fv(this->gl,firstRegister,transposedMatrix,data);
            		}
            		else {
HXLINE( 670)			bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 671)			 ::lime::utils::ArrayBufferView dest;
HXDLIN( 671)			if (isVertex) {
HXLINE( 671)				dest = this->_hx___vertexConstants;
            			}
            			else {
HXLINE( 671)				dest = this->_hx___fragmentConstants;
            			}
HXLINE( 672)			 ::openfl::_Vector::FloatVector source = matrix->rawData;
HXLINE( 673)			int i1 = (firstRegister * (int)4);
HXLINE( 675)			if (transposedMatrix) {
HXLINE( 677)				{
HXLINE( 677)					i1 = (i1 + (int)1);
HXDLIN( 677)					Float val1 = source->get((int)0);
HXDLIN( 677)					{
HXLINE( 677)						int dest1 = dest->byteOffset;
HXDLIN( 677)						::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((i1 - (int)1) * (int)4)),val1);
            					}
            				}
HXLINE( 678)				{
HXLINE( 678)					i1 = (i1 + (int)1);
HXDLIN( 678)					Float val2 = source->get((int)4);
HXDLIN( 678)					{
HXLINE( 678)						int dest2 = dest->byteOffset;
HXDLIN( 678)						::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((i1 - (int)1) * (int)4)),val2);
            					}
            				}
HXLINE( 679)				{
HXLINE( 679)					i1 = (i1 + (int)1);
HXDLIN( 679)					Float val3 = source->get((int)8);
HXDLIN( 679)					{
HXLINE( 679)						int dest3 = dest->byteOffset;
HXDLIN( 679)						::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((i1 - (int)1) * (int)4)),val3);
            					}
            				}
HXLINE( 680)				{
HXLINE( 680)					i1 = (i1 + (int)1);
HXDLIN( 680)					Float val4 = source->get((int)12);
HXDLIN( 680)					{
HXLINE( 680)						int dest4 = dest->byteOffset;
HXDLIN( 680)						::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((i1 - (int)1) * (int)4)),val4);
            					}
            				}
HXLINE( 682)				{
HXLINE( 682)					i1 = (i1 + (int)1);
HXDLIN( 682)					Float val5 = source->get((int)1);
HXDLIN( 682)					{
HXLINE( 682)						int dest5 = dest->byteOffset;
HXDLIN( 682)						::__hxcpp_memory_set_float(dest->buffer->b,(dest5 + ((i1 - (int)1) * (int)4)),val5);
            					}
            				}
HXLINE( 683)				{
HXLINE( 683)					i1 = (i1 + (int)1);
HXDLIN( 683)					Float val6 = source->get((int)5);
HXDLIN( 683)					{
HXLINE( 683)						int dest6 = dest->byteOffset;
HXDLIN( 683)						::__hxcpp_memory_set_float(dest->buffer->b,(dest6 + ((i1 - (int)1) * (int)4)),val6);
            					}
            				}
HXLINE( 684)				{
HXLINE( 684)					i1 = (i1 + (int)1);
HXDLIN( 684)					Float val7 = source->get((int)9);
HXDLIN( 684)					{
HXLINE( 684)						int dest7 = dest->byteOffset;
HXDLIN( 684)						::__hxcpp_memory_set_float(dest->buffer->b,(dest7 + ((i1 - (int)1) * (int)4)),val7);
            					}
            				}
HXLINE( 685)				{
HXLINE( 685)					i1 = (i1 + (int)1);
HXDLIN( 685)					Float val8 = source->get((int)13);
HXDLIN( 685)					{
HXLINE( 685)						int dest8 = dest->byteOffset;
HXDLIN( 685)						::__hxcpp_memory_set_float(dest->buffer->b,(dest8 + ((i1 - (int)1) * (int)4)),val8);
            					}
            				}
HXLINE( 687)				{
HXLINE( 687)					i1 = (i1 + (int)1);
HXDLIN( 687)					Float val9 = source->get((int)2);
HXDLIN( 687)					{
HXLINE( 687)						int dest9 = dest->byteOffset;
HXDLIN( 687)						::__hxcpp_memory_set_float(dest->buffer->b,(dest9 + ((i1 - (int)1) * (int)4)),val9);
            					}
            				}
HXLINE( 688)				{
HXLINE( 688)					i1 = (i1 + (int)1);
HXDLIN( 688)					Float val10 = source->get((int)6);
HXDLIN( 688)					{
HXLINE( 688)						int dest10 = dest->byteOffset;
HXDLIN( 688)						::__hxcpp_memory_set_float(dest->buffer->b,(dest10 + ((i1 - (int)1) * (int)4)),val10);
            					}
            				}
HXLINE( 689)				{
HXLINE( 689)					i1 = (i1 + (int)1);
HXDLIN( 689)					Float val11 = source->get((int)10);
HXDLIN( 689)					{
HXLINE( 689)						int dest11 = dest->byteOffset;
HXDLIN( 689)						::__hxcpp_memory_set_float(dest->buffer->b,(dest11 + ((i1 - (int)1) * (int)4)),val11);
            					}
            				}
HXLINE( 690)				{
HXLINE( 690)					i1 = (i1 + (int)1);
HXDLIN( 690)					Float val12 = source->get((int)14);
HXDLIN( 690)					{
HXLINE( 690)						int dest12 = dest->byteOffset;
HXDLIN( 690)						::__hxcpp_memory_set_float(dest->buffer->b,(dest12 + ((i1 - (int)1) * (int)4)),val12);
            					}
            				}
HXLINE( 692)				{
HXLINE( 692)					i1 = (i1 + (int)1);
HXDLIN( 692)					Float val13 = source->get((int)3);
HXDLIN( 692)					{
HXLINE( 692)						int dest13 = dest->byteOffset;
HXDLIN( 692)						::__hxcpp_memory_set_float(dest->buffer->b,(dest13 + ((i1 - (int)1) * (int)4)),val13);
            					}
            				}
HXLINE( 693)				{
HXLINE( 693)					i1 = (i1 + (int)1);
HXDLIN( 693)					Float val14 = source->get((int)7);
HXDLIN( 693)					{
HXLINE( 693)						int dest14 = dest->byteOffset;
HXDLIN( 693)						::__hxcpp_memory_set_float(dest->buffer->b,(dest14 + ((i1 - (int)1) * (int)4)),val14);
            					}
            				}
HXLINE( 694)				{
HXLINE( 694)					i1 = (i1 + (int)1);
HXDLIN( 694)					Float val15 = source->get((int)11);
HXDLIN( 694)					{
HXLINE( 694)						int dest15 = dest->byteOffset;
HXDLIN( 694)						::__hxcpp_memory_set_float(dest->buffer->b,(dest15 + ((i1 - (int)1) * (int)4)),val15);
            					}
            				}
HXLINE( 695)				{
HXLINE( 695)					i1 = (i1 + (int)1);
HXDLIN( 695)					Float val16 = source->get((int)15);
HXDLIN( 695)					{
HXLINE( 695)						int dest16 = dest->byteOffset;
HXDLIN( 695)						::__hxcpp_memory_set_float(dest->buffer->b,(dest16 + ((i1 - (int)1) * (int)4)),val16);
            					}
            				}
            			}
            			else {
HXLINE( 699)				{
HXLINE( 699)					i1 = (i1 + (int)1);
HXDLIN( 699)					Float val17 = source->get((int)0);
HXDLIN( 699)					{
HXLINE( 699)						int dest17 = dest->byteOffset;
HXDLIN( 699)						::__hxcpp_memory_set_float(dest->buffer->b,(dest17 + ((i1 - (int)1) * (int)4)),val17);
            					}
            				}
HXLINE( 700)				{
HXLINE( 700)					i1 = (i1 + (int)1);
HXDLIN( 700)					Float val18 = source->get((int)1);
HXDLIN( 700)					{
HXLINE( 700)						int dest18 = dest->byteOffset;
HXDLIN( 700)						::__hxcpp_memory_set_float(dest->buffer->b,(dest18 + ((i1 - (int)1) * (int)4)),val18);
            					}
            				}
HXLINE( 701)				{
HXLINE( 701)					i1 = (i1 + (int)1);
HXDLIN( 701)					Float val19 = source->get((int)2);
HXDLIN( 701)					{
HXLINE( 701)						int dest19 = dest->byteOffset;
HXDLIN( 701)						::__hxcpp_memory_set_float(dest->buffer->b,(dest19 + ((i1 - (int)1) * (int)4)),val19);
            					}
            				}
HXLINE( 702)				{
HXLINE( 702)					i1 = (i1 + (int)1);
HXDLIN( 702)					Float val20 = source->get((int)3);
HXDLIN( 702)					{
HXLINE( 702)						int dest20 = dest->byteOffset;
HXDLIN( 702)						::__hxcpp_memory_set_float(dest->buffer->b,(dest20 + ((i1 - (int)1) * (int)4)),val20);
            					}
            				}
HXLINE( 704)				{
HXLINE( 704)					i1 = (i1 + (int)1);
HXDLIN( 704)					Float val21 = source->get((int)4);
HXDLIN( 704)					{
HXLINE( 704)						int dest21 = dest->byteOffset;
HXDLIN( 704)						::__hxcpp_memory_set_float(dest->buffer->b,(dest21 + ((i1 - (int)1) * (int)4)),val21);
            					}
            				}
HXLINE( 705)				{
HXLINE( 705)					i1 = (i1 + (int)1);
HXDLIN( 705)					Float val22 = source->get((int)5);
HXDLIN( 705)					{
HXLINE( 705)						int dest22 = dest->byteOffset;
HXDLIN( 705)						::__hxcpp_memory_set_float(dest->buffer->b,(dest22 + ((i1 - (int)1) * (int)4)),val22);
            					}
            				}
HXLINE( 706)				{
HXLINE( 706)					i1 = (i1 + (int)1);
HXDLIN( 706)					Float val23 = source->get((int)6);
HXDLIN( 706)					{
HXLINE( 706)						int dest23 = dest->byteOffset;
HXDLIN( 706)						::__hxcpp_memory_set_float(dest->buffer->b,(dest23 + ((i1 - (int)1) * (int)4)),val23);
            					}
            				}
HXLINE( 707)				{
HXLINE( 707)					i1 = (i1 + (int)1);
HXDLIN( 707)					Float val24 = source->get((int)7);
HXDLIN( 707)					{
HXLINE( 707)						int dest24 = dest->byteOffset;
HXDLIN( 707)						::__hxcpp_memory_set_float(dest->buffer->b,(dest24 + ((i1 - (int)1) * (int)4)),val24);
            					}
            				}
HXLINE( 709)				{
HXLINE( 709)					i1 = (i1 + (int)1);
HXDLIN( 709)					Float val25 = source->get((int)8);
HXDLIN( 709)					{
HXLINE( 709)						int dest25 = dest->byteOffset;
HXDLIN( 709)						::__hxcpp_memory_set_float(dest->buffer->b,(dest25 + ((i1 - (int)1) * (int)4)),val25);
            					}
            				}
HXLINE( 710)				{
HXLINE( 710)					i1 = (i1 + (int)1);
HXDLIN( 710)					Float val26 = source->get((int)9);
HXDLIN( 710)					{
HXLINE( 710)						int dest26 = dest->byteOffset;
HXDLIN( 710)						::__hxcpp_memory_set_float(dest->buffer->b,(dest26 + ((i1 - (int)1) * (int)4)),val26);
            					}
            				}
HXLINE( 711)				{
HXLINE( 711)					i1 = (i1 + (int)1);
HXDLIN( 711)					Float val27 = source->get((int)10);
HXDLIN( 711)					{
HXLINE( 711)						int dest27 = dest->byteOffset;
HXDLIN( 711)						::__hxcpp_memory_set_float(dest->buffer->b,(dest27 + ((i1 - (int)1) * (int)4)),val27);
            					}
            				}
HXLINE( 712)				{
HXLINE( 712)					i1 = (i1 + (int)1);
HXDLIN( 712)					Float val28 = source->get((int)11);
HXDLIN( 712)					{
HXLINE( 712)						int dest28 = dest->byteOffset;
HXDLIN( 712)						::__hxcpp_memory_set_float(dest->buffer->b,(dest28 + ((i1 - (int)1) * (int)4)),val28);
            					}
            				}
HXLINE( 714)				{
HXLINE( 714)					i1 = (i1 + (int)1);
HXDLIN( 714)					Float val29 = source->get((int)12);
HXDLIN( 714)					{
HXLINE( 714)						int dest29 = dest->byteOffset;
HXDLIN( 714)						::__hxcpp_memory_set_float(dest->buffer->b,(dest29 + ((i1 - (int)1) * (int)4)),val29);
            					}
            				}
HXLINE( 715)				{
HXLINE( 715)					i1 = (i1 + (int)1);
HXDLIN( 715)					Float val30 = source->get((int)13);
HXDLIN( 715)					{
HXLINE( 715)						int dest30 = dest->byteOffset;
HXDLIN( 715)						::__hxcpp_memory_set_float(dest->buffer->b,(dest30 + ((i1 - (int)1) * (int)4)),val30);
            					}
            				}
HXLINE( 716)				{
HXLINE( 716)					i1 = (i1 + (int)1);
HXDLIN( 716)					Float val31 = source->get((int)14);
HXDLIN( 716)					{
HXLINE( 716)						int dest31 = dest->byteOffset;
HXDLIN( 716)						::__hxcpp_memory_set_float(dest->buffer->b,(dest31 + ((i1 - (int)1) * (int)4)),val31);
            					}
            				}
HXLINE( 717)				{
HXLINE( 717)					i1 = (i1 + (int)1);
HXDLIN( 717)					Float val32 = source->get((int)15);
HXDLIN( 717)					{
HXLINE( 717)						int dest32 = dest->byteOffset;
HXDLIN( 717)						::__hxcpp_memory_set_float(dest->buffer->b,(dest32 + ((i1 - (int)1) * (int)4)),val32);
            					}
            				}
            			}
HXLINE( 721)			if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE( 723)				this->_hx___state->program->_hx___markDirty(isVertex,firstRegister,(int)4);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromMatrix,(void))

void Context3D_obj::setProgramConstantsFromVector( ::Dynamic programType,int firstRegister, ::openfl::_Vector::FloatVector data,hx::Null< int >  __o_numRegisters){
int numRegisters = __o_numRegisters.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_733_setProgramConstantsFromVector)
HXLINE( 735)		if ((numRegisters == (int)0)) {
HXLINE( 735)			return;
            		}
HXLINE( 737)		bool _hx_tmp;
HXDLIN( 737)		if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE( 737)			_hx_tmp = hx::IsEq( this->_hx___state->program->_hx___format,(int)1 );
            		}
            		else {
HXLINE( 737)			_hx_tmp = false;
            		}
HXDLIN( 737)		if (!(_hx_tmp)) {
HXLINE( 743)			if ((numRegisters == (int)-1)) {
HXLINE( 745)				numRegisters = ((int)data->get_length() >> (int)(int)2);
            			}
HXLINE( 749)			bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 750)			 ::lime::utils::ArrayBufferView dest;
HXDLIN( 750)			if (isVertex) {
HXLINE( 750)				dest = this->_hx___vertexConstants;
            			}
            			else {
HXLINE( 750)				dest = this->_hx___fragmentConstants;
            			}
HXLINE( 751)			 ::openfl::_Vector::FloatVector source = data;
HXLINE( 753)			int sourceIndex = (int)0;
HXLINE( 754)			int destIndex = (firstRegister * (int)4);
HXLINE( 756)			{
HXLINE( 756)				int _g1 = (int)0;
HXDLIN( 756)				int _g = numRegisters;
HXDLIN( 756)				while((_g1 < _g)){
HXLINE( 756)					_g1 = (_g1 + (int)1);
HXDLIN( 756)					int i = (_g1 - (int)1);
HXLINE( 758)					{
HXLINE( 758)						destIndex = (destIndex + (int)1);
HXDLIN( 758)						sourceIndex = (sourceIndex + (int)1);
HXDLIN( 758)						Float val = source->get((sourceIndex - (int)1));
HXDLIN( 758)						{
HXLINE( 758)							int dest1 = dest->byteOffset;
HXDLIN( 758)							::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((destIndex - (int)1) * (int)4)),val);
            						}
            					}
HXLINE( 759)					{
HXLINE( 759)						destIndex = (destIndex + (int)1);
HXDLIN( 759)						sourceIndex = (sourceIndex + (int)1);
HXDLIN( 759)						Float val1 = source->get((sourceIndex - (int)1));
HXDLIN( 759)						{
HXLINE( 759)							int dest2 = dest->byteOffset;
HXDLIN( 759)							::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((destIndex - (int)1) * (int)4)),val1);
            						}
            					}
HXLINE( 760)					{
HXLINE( 760)						destIndex = (destIndex + (int)1);
HXDLIN( 760)						sourceIndex = (sourceIndex + (int)1);
HXDLIN( 760)						Float val2 = source->get((sourceIndex - (int)1));
HXDLIN( 760)						{
HXLINE( 760)							int dest3 = dest->byteOffset;
HXDLIN( 760)							::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((destIndex - (int)1) * (int)4)),val2);
            						}
            					}
HXLINE( 761)					{
HXLINE( 761)						destIndex = (destIndex + (int)1);
HXDLIN( 761)						sourceIndex = (sourceIndex + (int)1);
HXDLIN( 761)						Float val3 = source->get((sourceIndex - (int)1));
HXDLIN( 761)						{
HXLINE( 761)							int dest4 = dest->byteOffset;
HXDLIN( 761)							::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((destIndex - (int)1) * (int)4)),val3);
            						}
            					}
            				}
            			}
HXLINE( 765)			if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE( 767)				this->_hx___state->program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromVector,(void))

void Context3D_obj::setRenderToBackBuffer(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_778_setRenderToBackBuffer)
HXDLIN( 778)		this->_hx___state->renderToTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,setRenderToBackBuffer,(void))

void Context3D_obj::setRenderToTexture( ::openfl::display3D::textures::TextureBase texture,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< int >  __o_antiAlias,hx::Null< int >  __o_surfaceSelector){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
int antiAlias = __o_antiAlias.Default(0);
int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_783_setRenderToTexture)
HXLINE( 785)		this->_hx___state->renderToTexture = texture;
HXLINE( 786)		this->_hx___state->renderToTextureDepthStencil = enableDepthAndStencil;
HXLINE( 787)		this->_hx___state->renderToTextureAntiAlias = antiAlias;
HXLINE( 788)		this->_hx___state->renderToTextureSurfaceSelector = surfaceSelector;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setRenderToTexture,(void))

void Context3D_obj::setSamplerStateAt(int sampler, ::Dynamic wrap, ::Dynamic filter, ::Dynamic mipfilter){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_793_setSamplerStateAt)
HXLINE( 801)		if (hx::IsNull( this->_hx___state->samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::renderer::SamplerState >() )) {
HXLINE( 802)			::Array< ::Dynamic> _hx_tmp = this->_hx___state->samplerStates;
HXDLIN( 802)			_hx_tmp[sampler] =  ::openfl::_internal::renderer::SamplerState_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE( 805)		 ::openfl::_internal::renderer::SamplerState state = this->_hx___state->samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::renderer::SamplerState >();
HXLINE( 806)		state->wrap = wrap;
HXLINE( 807)		state->filter = filter;
HXLINE( 808)		state->mipfilter = mipfilter;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setSamplerStateAt,(void))

void Context3D_obj::setScissorRectangle( ::openfl::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_815_setScissorRectangle)
HXDLIN( 815)		if (hx::IsNotNull( rectangle )) {
HXLINE( 816)			this->_hx___state->scissorEnabled = true;
HXLINE( 817)			this->_hx___state->scissorRectangle->copyFrom(rectangle);
            		}
            		else {
HXLINE( 819)			this->_hx___state->scissorEnabled = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setScissorRectangle,(void))

void Context3D_obj::setStencilActions( ::Dynamic __o_triangleFace, ::Dynamic __o_compareMode, ::Dynamic __o_actionOnBothPass, ::Dynamic __o_actionOnDepthFail, ::Dynamic __o_actionOnDepthPassStencilFail){
 ::Dynamic triangleFace = __o_triangleFace.Default(2);
 ::Dynamic compareMode = __o_compareMode.Default(0);
 ::Dynamic actionOnBothPass = __o_actionOnBothPass.Default(5);
 ::Dynamic actionOnDepthFail = __o_actionOnDepthFail.Default(5);
 ::Dynamic actionOnDepthPassStencilFail = __o_actionOnDepthPassStencilFail.Default(5);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_825_setStencilActions)
HXLINE( 827)		this->_hx___state->stencilTriangleFace = triangleFace;
HXLINE( 828)		this->_hx___state->stencilCompareMode = compareMode;
HXLINE( 829)		this->_hx___state->stencilPass = actionOnBothPass;
HXLINE( 830)		this->_hx___state->stencilDepthFail = actionOnDepthFail;
HXLINE( 831)		this->_hx___state->stencilFail = actionOnDepthPassStencilFail;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setStencilActions,(void))

void Context3D_obj::setStencilReferenceValue(int referenceValue,hx::Null< int >  __o_readMask,hx::Null< int >  __o_writeMask){
int readMask = __o_readMask.Default(255);
int writeMask = __o_writeMask.Default(255);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_836_setStencilReferenceValue)
HXLINE( 838)		this->_hx___state->stencilReferenceValue = referenceValue;
HXLINE( 839)		this->_hx___state->stencilReadMask = readMask;
HXLINE( 840)		this->_hx___state->stencilWriteMask = writeMask;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setStencilReferenceValue,(void))

void Context3D_obj::setTextureAt(int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_853_setTextureAt)
HXDLIN( 853)		this->_hx___state->textures[sampler] = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setTextureAt,(void))

void Context3D_obj::setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_bufferOffset, ::Dynamic __o_format){
int bufferOffset = __o_bufferOffset.Default(0);
 ::Dynamic format = __o_format.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_858_setVertexBufferAt)
HXLINE( 860)		if (hx::IsNull( buffer )) {
HXLINE( 862)			this->gl->disableVertexAttribArray(index);
HXLINE( 863)			this->_hx___bindGLArrayBuffer(null());
HXLINE( 864)			return;
            		}
HXLINE( 868)		this->_hx___bindGLArrayBuffer(buffer->_hx___id);
HXLINE( 869)		this->gl->enableVertexAttribArray(index);
HXLINE( 871)		int byteOffset = (bufferOffset * (int)4);
HXLINE( 873)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 877)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN( 877)			int type = this->gl->UNSIGNED_BYTE;
HXDLIN( 877)			int stride = buffer->_hx___stride;
HXDLIN( 877)			this1->vertexAttribPointer(index,(int)4,type,true,stride,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN( 877)			goto _hx_goto_37;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 893)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this2 = this->gl;
HXDLIN( 893)			int type1 = this->gl->FLOAT;
HXDLIN( 893)			int stride1 = buffer->_hx___stride;
HXDLIN( 893)			this2->vertexAttribPointer(index,(int)1,type1,false,stride1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN( 893)			goto _hx_goto_37;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 889)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this3 = this->gl;
HXDLIN( 889)			int type2 = this->gl->FLOAT;
HXDLIN( 889)			int stride2 = buffer->_hx___stride;
HXDLIN( 889)			this3->vertexAttribPointer(index,(int)2,type2,false,stride2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN( 889)			goto _hx_goto_37;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 885)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this4 = this->gl;
HXDLIN( 885)			int type3 = this->gl->FLOAT;
HXDLIN( 885)			int stride3 = buffer->_hx___stride;
HXDLIN( 885)			this4->vertexAttribPointer(index,(int)3,type3,false,stride3,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN( 885)			goto _hx_goto_37;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 881)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this5 = this->gl;
HXDLIN( 881)			int type4 = this->gl->FLOAT;
HXDLIN( 881)			int stride4 = buffer->_hx___stride;
HXDLIN( 881)			this5->vertexAttribPointer(index,(int)4,type4,false,stride4,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN( 881)			goto _hx_goto_37;
            		}
            		/* default */{
HXLINE( 897)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_37:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setVertexBufferAt,(void))

void Context3D_obj::_hx___bindGLArrayBuffer( ::lime::graphics::opengl::GLObject buffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_906___bindGLArrayBuffer)
HXDLIN( 906)		if (hx::IsNotEq( this->_hx___contextState->_hx___currentGLArrayBuffer,buffer )) {
HXLINE( 908)			this->gl->bindBuffer(this->gl->ARRAY_BUFFER,buffer);
HXLINE( 909)			this->_hx___contextState->_hx___currentGLArrayBuffer = buffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLArrayBuffer,(void))

void Context3D_obj::_hx___bindGLElementArrayBuffer( ::lime::graphics::opengl::GLObject buffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_918___bindGLElementArrayBuffer)
HXDLIN( 918)		if (hx::IsNotEq( this->_hx___contextState->_hx___currentGLElementArrayBuffer,buffer )) {
HXLINE( 920)			this->gl->bindBuffer(this->gl->ELEMENT_ARRAY_BUFFER,buffer);
HXLINE( 921)			this->_hx___contextState->_hx___currentGLElementArrayBuffer = buffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLElementArrayBuffer,(void))

void Context3D_obj::_hx___bindGLFramebuffer( ::lime::graphics::opengl::GLObject framebuffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_930___bindGLFramebuffer)
HXDLIN( 930)		if (hx::IsNotEq( this->_hx___contextState->_hx___currentGLFramebuffer,framebuffer )) {
HXLINE( 932)			this->gl->bindFramebuffer(this->gl->FRAMEBUFFER,framebuffer);
HXLINE( 933)			this->_hx___contextState->_hx___currentGLFramebuffer = framebuffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLFramebuffer,(void))

void Context3D_obj::_hx___bindGLTexture2D( ::lime::graphics::opengl::GLObject texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_940___bindGLTexture2D)
HXLINE( 946)		this->gl->bindTexture(this->gl->TEXTURE_2D,texture);
HXLINE( 947)		this->_hx___contextState->_hx___currentGLTexture2D = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLTexture2D,(void))

void Context3D_obj::_hx___bindGLTextureCubeMap( ::lime::graphics::opengl::GLObject texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_954___bindGLTextureCubeMap)
HXLINE( 960)		this->gl->bindTexture(this->gl->TEXTURE_CUBE_MAP,texture);
HXLINE( 961)		this->_hx___contextState->_hx___currentGLTextureCubeMap = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLTextureCubeMap,(void))

void Context3D_obj::_hx___drawTriangles(hx::Null< int >  __o_firstIndex,int count){
int firstIndex = __o_firstIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_968___drawTriangles)
HXLINE( 971)		if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE( 974)			bool _hx_tmp;
HXDLIN( 974)			if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 974)				_hx_tmp = !(this->_hx___stage->_hx___renderer->_hx___cleared);
            			}
            			else {
HXLINE( 974)				_hx_tmp = false;
            			}
HXDLIN( 974)			if (_hx_tmp) {
HXLINE( 976)				this->_hx___stage->_hx___renderer->_hx___clear();
            			}
            			else {
HXLINE( 978)				if (!(this->_hx___cleared)) {
HXLINE( 981)					this->clear((int)0,(int)0,(int)0,(int)0,(int)1,(int)0,(int)1);
            				}
            			}
            		}
HXLINE( 987)		this->_hx___flushGL();
HXLINE( 991)		if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE( 992)			this->_hx___state->program->_hx___flush();
            		}
HXLINE( 995)		this->gl->drawArrays(this->gl->TRIANGLES,firstIndex,count);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___drawTriangles,(void))

void Context3D_obj::_hx___flushGL(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1000___flushGL)
HXLINE(1002)		this->_hx___flushGLProgram();
HXLINE(1003)		this->_hx___flushGLFramebuffer();
HXLINE(1004)		this->_hx___flushGLViewport();
HXLINE(1006)		this->_hx___flushGLBlend();
HXLINE(1007)		bool _hx_tmp;
HXDLIN(1007)		bool _hx_tmp1;
HXDLIN(1007)		bool _hx_tmp2;
HXDLIN(1007)		if ((this->_hx___contextState->colorMaskRed == this->_hx___state->colorMaskRed)) {
HXLINE(1007)			_hx_tmp2 = (this->_hx___contextState->colorMaskGreen != this->_hx___state->colorMaskGreen);
            		}
            		else {
HXLINE(1007)			_hx_tmp2 = true;
            		}
HXDLIN(1007)		if (!(_hx_tmp2)) {
HXLINE(1007)			_hx_tmp1 = (this->_hx___contextState->colorMaskBlue != this->_hx___state->colorMaskBlue);
            		}
            		else {
HXLINE(1007)			_hx_tmp1 = true;
            		}
HXDLIN(1007)		if (!(_hx_tmp1)) {
HXLINE(1007)			_hx_tmp = (this->_hx___contextState->colorMaskAlpha != this->_hx___state->colorMaskAlpha);
            		}
            		else {
HXLINE(1007)			_hx_tmp = true;
            		}
HXDLIN(1007)		if (_hx_tmp) {
HXLINE(1007)			this->gl->colorMask(this->_hx___state->colorMaskRed,this->_hx___state->colorMaskGreen,this->_hx___state->colorMaskBlue,this->_hx___state->colorMaskAlpha);
HXDLIN(1007)			this->_hx___contextState->colorMaskRed = this->_hx___state->colorMaskRed;
HXDLIN(1007)			this->_hx___contextState->colorMaskGreen = this->_hx___state->colorMaskGreen;
HXDLIN(1007)			this->_hx___contextState->colorMaskBlue = this->_hx___state->colorMaskBlue;
HXDLIN(1007)			this->_hx___contextState->colorMaskAlpha = this->_hx___state->colorMaskAlpha;
            		}
HXLINE(1008)		this->_hx___flushGLCulling();
HXLINE(1009)		this->_hx___flushGLDepth();
HXLINE(1010)		this->_hx___flushGLScissor();
HXLINE(1011)		this->_hx___flushGLStencil();
HXLINE(1012)		this->_hx___flushGLTextures();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGL,(void))

void Context3D_obj::_hx___flushGLBlend(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1019___flushGLBlend)
HXDLIN(1019)		bool _hx_tmp;
HXDLIN(1019)		bool _hx_tmp1;
HXDLIN(1019)		bool _hx_tmp2;
HXDLIN(1019)		if (hx::IsEq( this->_hx___contextState->blendDestinationRGBFactor,this->_hx___state->blendDestinationRGBFactor )) {
HXDLIN(1019)			_hx_tmp2 = hx::IsNotEq( this->_hx___contextState->blendSourceRGBFactor,this->_hx___state->blendSourceRGBFactor );
            		}
            		else {
HXDLIN(1019)			_hx_tmp2 = true;
            		}
HXDLIN(1019)		if (!(_hx_tmp2)) {
HXDLIN(1019)			_hx_tmp1 = hx::IsNotEq( this->_hx___contextState->blendDestinationAlphaFactor,this->_hx___state->blendDestinationAlphaFactor );
            		}
            		else {
HXDLIN(1019)			_hx_tmp1 = true;
            		}
HXDLIN(1019)		if (!(_hx_tmp1)) {
HXDLIN(1019)			_hx_tmp = hx::IsNotEq( this->_hx___contextState->blendSourceAlphaFactor,this->_hx___state->blendSourceAlphaFactor );
            		}
            		else {
HXDLIN(1019)			_hx_tmp = true;
            		}
HXDLIN(1019)		if (_hx_tmp) {
HXLINE(1021)			this->_hx___setGLBlend(true);
HXLINE(1023)			bool _hx_tmp3;
HXDLIN(1023)			if (hx::IsEq( this->_hx___state->blendDestinationRGBFactor,this->_hx___state->blendDestinationAlphaFactor )) {
HXLINE(1023)				_hx_tmp3 = hx::IsEq( this->_hx___state->blendSourceRGBFactor,this->_hx___state->blendSourceAlphaFactor );
            			}
            			else {
HXLINE(1023)				_hx_tmp3 = false;
            			}
HXDLIN(1023)			if (_hx_tmp3) {
HXLINE(1025)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(1025)				int sfactor = this->_hx___getGLBlend(this->_hx___state->blendSourceRGBFactor);
HXDLIN(1025)				this1->blendFunc(sfactor,this->_hx___getGLBlend(this->_hx___state->blendDestinationRGBFactor));
            			}
            			else {
HXLINE(1029)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this2 = this->gl;
HXDLIN(1029)				int srcRGB = this->_hx___getGLBlend(this->_hx___state->blendSourceRGBFactor);
HXDLIN(1029)				int dstRGB = this->_hx___getGLBlend(this->_hx___state->blendDestinationRGBFactor);
HXDLIN(1029)				int srcAlpha = this->_hx___getGLBlend(this->_hx___state->blendSourceAlphaFactor);
HXDLIN(1029)				this2->blendFuncSeparate(srcRGB,dstRGB,srcAlpha,this->_hx___getGLBlend(this->_hx___state->blendDestinationAlphaFactor));
            			}
HXLINE(1033)			this->_hx___contextState->blendDestinationRGBFactor = this->_hx___state->blendDestinationRGBFactor;
HXLINE(1034)			this->_hx___contextState->blendSourceRGBFactor = this->_hx___state->blendSourceRGBFactor;
HXLINE(1035)			this->_hx___contextState->blendDestinationAlphaFactor = this->_hx___state->blendDestinationAlphaFactor;
HXLINE(1036)			this->_hx___contextState->blendSourceAlphaFactor = this->_hx___state->blendSourceAlphaFactor;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLBlend,(void))

void Context3D_obj::_hx___flushGLColor(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1045___flushGLColor)
HXDLIN(1045)		bool _hx_tmp;
HXDLIN(1045)		bool _hx_tmp1;
HXDLIN(1045)		bool _hx_tmp2;
HXDLIN(1045)		if ((this->_hx___contextState->colorMaskRed == this->_hx___state->colorMaskRed)) {
HXDLIN(1045)			_hx_tmp2 = (this->_hx___contextState->colorMaskGreen != this->_hx___state->colorMaskGreen);
            		}
            		else {
HXDLIN(1045)			_hx_tmp2 = true;
            		}
HXDLIN(1045)		if (!(_hx_tmp2)) {
HXDLIN(1045)			_hx_tmp1 = (this->_hx___contextState->colorMaskBlue != this->_hx___state->colorMaskBlue);
            		}
            		else {
HXDLIN(1045)			_hx_tmp1 = true;
            		}
HXDLIN(1045)		if (!(_hx_tmp1)) {
HXDLIN(1045)			_hx_tmp = (this->_hx___contextState->colorMaskAlpha != this->_hx___state->colorMaskAlpha);
            		}
            		else {
HXDLIN(1045)			_hx_tmp = true;
            		}
HXDLIN(1045)		if (_hx_tmp) {
HXLINE(1047)			this->gl->colorMask(this->_hx___state->colorMaskRed,this->_hx___state->colorMaskGreen,this->_hx___state->colorMaskBlue,this->_hx___state->colorMaskAlpha);
HXLINE(1048)			this->_hx___contextState->colorMaskRed = this->_hx___state->colorMaskRed;
HXLINE(1049)			this->_hx___contextState->colorMaskGreen = this->_hx___state->colorMaskGreen;
HXLINE(1050)			this->_hx___contextState->colorMaskBlue = this->_hx___state->colorMaskBlue;
HXLINE(1051)			this->_hx___contextState->colorMaskAlpha = this->_hx___state->colorMaskAlpha;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLColor,(void))

void Context3D_obj::_hx___flushGLCulling(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1060___flushGLCulling)
HXDLIN(1060)		if (hx::IsNotEq( this->_hx___contextState->culling,this->_hx___state->culling )) {
HXLINE(1062)			if (hx::IsEq( this->_hx___state->culling,(int)3 )) {
HXLINE(1064)				this->_hx___setGLCullFace(false);
            			}
            			else {
HXLINE(1068)				this->_hx___setGLCullFace(true);
HXLINE(1070)				{
HXLINE(1070)					 ::Dynamic _g = this->_hx___state->culling;
HXDLIN(1070)					 ::Dynamic _hx_switch_0 = _g;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE(1073)						this->gl->cullFace(this->gl->BACK);
HXDLIN(1073)						goto _hx_goto_48;
            					}
            					if (  (_hx_switch_0==(int)1) ){
HXLINE(1074)						this->gl->cullFace(this->gl->FRONT);
HXDLIN(1074)						goto _hx_goto_48;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE(1075)						this->gl->cullFace(this->gl->FRONT_AND_BACK);
HXDLIN(1075)						goto _hx_goto_48;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE(1072)						goto _hx_goto_48;
            					}
            					/* default */{
HXLINE(1076)						HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            					}
            					_hx_goto_48:;
            				}
            			}
HXLINE(1082)			this->_hx___contextState->culling = this->_hx___state->culling;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLCulling,(void))

void Context3D_obj::_hx___flushGLDepth(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1089___flushGLDepth)
HXLINE(1091)		bool depthMask;
HXDLIN(1091)		if (this->_hx___state->depthMask) {
HXLINE(1091)			if (hx::IsNotNull( this->_hx___state->renderToTexture )) {
HXLINE(1091)				depthMask = this->_hx___state->renderToTextureDepthStencil;
            			}
            			else {
HXLINE(1091)				depthMask = this->_hx___state->backBufferEnableDepthAndStencil;
            			}
            		}
            		else {
HXLINE(1091)			depthMask = false;
            		}
HXLINE(1093)		if ((this->_hx___contextState->depthMask != depthMask)) {
HXLINE(1095)			this->gl->depthMask(depthMask);
HXLINE(1096)			this->_hx___contextState->depthMask = depthMask;
            		}
HXLINE(1100)		if (hx::IsNotEq( this->_hx___contextState->depthCompareMode,this->_hx___state->depthCompareMode )) {
HXLINE(1102)			{
HXLINE(1102)				 ::Dynamic _g = this->_hx___state->depthCompareMode;
HXDLIN(1102)				 ::Dynamic _hx_switch_0 = _g;
            				if (  (_hx_switch_0==(int)0) ){
HXLINE(1103)					this->gl->depthFunc(this->gl->ALWAYS);
HXDLIN(1103)					goto _hx_goto_50;
            				}
            				if (  (_hx_switch_0==(int)1) ){
HXLINE(1104)					this->gl->depthFunc(this->gl->EQUAL);
HXDLIN(1104)					goto _hx_goto_50;
            				}
            				if (  (_hx_switch_0==(int)2) ){
HXLINE(1105)					this->gl->depthFunc(this->gl->GREATER);
HXDLIN(1105)					goto _hx_goto_50;
            				}
            				if (  (_hx_switch_0==(int)3) ){
HXLINE(1106)					this->gl->depthFunc(this->gl->GEQUAL);
HXDLIN(1106)					goto _hx_goto_50;
            				}
            				if (  (_hx_switch_0==(int)4) ){
HXLINE(1107)					this->gl->depthFunc(this->gl->LESS);
HXDLIN(1107)					goto _hx_goto_50;
            				}
            				if (  (_hx_switch_0==(int)5) ){
HXLINE(1108)					this->gl->depthFunc(this->gl->LEQUAL);
HXDLIN(1108)					goto _hx_goto_50;
            				}
            				if (  (_hx_switch_0==(int)6) ){
HXLINE(1109)					this->gl->depthFunc(this->gl->NEVER);
HXDLIN(1109)					goto _hx_goto_50;
            				}
            				if (  (_hx_switch_0==(int)7) ){
HXLINE(1110)					this->gl->depthFunc(this->gl->NOTEQUAL);
HXDLIN(1110)					goto _hx_goto_50;
            				}
            				/* default */{
HXLINE(1111)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            				}
            				_hx_goto_50:;
            			}
HXLINE(1114)			this->_hx___contextState->depthCompareMode = this->_hx___state->depthCompareMode;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLDepth,(void))

void Context3D_obj::_hx___flushGLFramebuffer(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1123___flushGLFramebuffer)
HXDLIN(1123)		if (hx::IsNotNull( this->_hx___state->renderToTexture )) {
HXLINE(1125)			bool _hx_tmp;
HXDLIN(1125)			if (hx::IsEq( this->_hx___contextState->renderToTexture,this->_hx___state->renderToTexture )) {
HXLINE(1125)				_hx_tmp = (this->_hx___contextState->renderToTextureSurfaceSelector != this->_hx___state->renderToTextureSurfaceSelector);
            			}
            			else {
HXLINE(1125)				_hx_tmp = true;
            			}
HXDLIN(1125)			if (_hx_tmp) {
HXLINE(1127)				 ::lime::graphics::opengl::GLObject framebuffer = this->_hx___state->renderToTexture->_hx___getGLFramebuffer(this->_hx___state->renderToTextureDepthStencil,this->_hx___state->renderToTextureAntiAlias,this->_hx___state->renderToTextureSurfaceSelector);
HXLINE(1128)				this->_hx___bindGLFramebuffer(framebuffer);
HXLINE(1130)				this->_hx___contextState->renderToTexture = this->_hx___state->renderToTexture;
HXLINE(1131)				this->_hx___contextState->renderToTextureAntiAlias = this->_hx___state->renderToTextureAntiAlias;
HXLINE(1132)				this->_hx___contextState->renderToTextureDepthStencil = this->_hx___state->renderToTextureDepthStencil;
HXLINE(1133)				this->_hx___contextState->renderToTextureSurfaceSelector = this->_hx___state->renderToTextureSurfaceSelector;
            			}
HXLINE(1137)			this->_hx___setGLDepthTest(this->_hx___state->renderToTextureDepthStencil);
HXLINE(1138)			this->_hx___setGLStencilTest(this->_hx___state->renderToTextureDepthStencil);
HXLINE(1140)			this->_hx___setGLFrontFace(true);
            		}
            		else {
HXLINE(1144)			bool _hx_tmp1;
HXDLIN(1144)			bool _hx_tmp2;
HXDLIN(1144)			if (hx::IsNull( this->_hx___stage )) {
HXLINE(1144)				_hx_tmp2 = (this->backBufferWidth == (int)0);
            			}
            			else {
HXLINE(1144)				_hx_tmp2 = false;
            			}
HXDLIN(1144)			if (_hx_tmp2) {
HXLINE(1144)				_hx_tmp1 = (this->backBufferHeight == (int)0);
            			}
            			else {
HXLINE(1144)				_hx_tmp1 = false;
            			}
HXDLIN(1144)			if (_hx_tmp1) {
HXLINE(1146)				HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Context3D backbuffer has not been configured",c6,54,6f,c8),null()));
            			}
HXLINE(1150)			bool _hx_tmp3;
HXDLIN(1150)			bool _hx_tmp4;
HXDLIN(1150)			if (hx::IsNull( this->_hx___contextState->renderToTexture )) {
HXLINE(1150)				_hx_tmp4 = hx::IsNotEq( this->_hx___contextState->_hx___currentGLFramebuffer,this->_hx___state->_hx___primaryGLFramebuffer );
            			}
            			else {
HXLINE(1150)				_hx_tmp4 = true;
            			}
HXDLIN(1150)			if (!(_hx_tmp4)) {
HXLINE(1150)				_hx_tmp3 = (this->_hx___contextState->backBufferEnableDepthAndStencil != this->_hx___state->backBufferEnableDepthAndStencil);
            			}
            			else {
HXLINE(1150)				_hx_tmp3 = true;
            			}
HXDLIN(1150)			if (_hx_tmp3) {
HXLINE(1152)				this->_hx___bindGLFramebuffer(this->_hx___state->_hx___primaryGLFramebuffer);
HXLINE(1154)				this->_hx___contextState->renderToTexture = null();
HXLINE(1155)				this->_hx___contextState->backBufferEnableDepthAndStencil = this->_hx___state->backBufferEnableDepthAndStencil;
            			}
HXLINE(1159)			this->_hx___setGLDepthTest(this->_hx___state->backBufferEnableDepthAndStencil);
HXLINE(1160)			this->_hx___setGLStencilTest(this->_hx___state->backBufferEnableDepthAndStencil);
HXLINE(1162)			this->_hx___setGLFrontFace(hx::IsNotEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLFramebuffer,(void))

void Context3D_obj::_hx___flushGLProgram(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1169___flushGLProgram)
HXLINE(1171)		 ::openfl::display::Shader shader = this->_hx___state->shader;
HXLINE(1172)		 ::openfl::display3D::Program3D program = this->_hx___state->program;
HXLINE(1174)		if (hx::IsNotEq( this->_hx___contextState->shader,shader )) {
HXLINE(1178)			if (hx::IsNotNull( this->_hx___contextState->shader )) {
HXLINE(1179)				this->_hx___contextState->shader->_hx___disable();
            			}
HXLINE(1182)			if (hx::IsNotNull( shader )) {
HXLINE(1183)				shader->_hx___enable();
            			}
HXLINE(1186)			this->_hx___contextState->shader = shader;
            		}
HXLINE(1190)		if (hx::IsNotEq( this->_hx___contextState->program,program )) {
HXLINE(1192)			if (hx::IsNotNull( this->_hx___contextState->program )) {
HXLINE(1193)				this->_hx___contextState->program->_hx___disable();
            			}
HXLINE(1196)			if (hx::IsNotNull( program )) {
HXLINE(1197)				program->_hx___enable();
            			}
HXLINE(1200)			this->_hx___contextState->program = program;
            		}
HXLINE(1204)		bool _hx_tmp;
HXDLIN(1204)		if (hx::IsNotNull( program )) {
HXLINE(1204)			_hx_tmp = hx::IsEq( program->_hx___format,(int)0 );
            		}
            		else {
HXLINE(1204)			_hx_tmp = false;
            		}
HXDLIN(1204)		if (_hx_tmp) {
HXLINE(1205)			{
HXLINE(1205)				 ::lime::utils::ArrayBufferView this1 = this->_hx___positionScale;
HXDLIN(1205)				Float val;
HXDLIN(1205)				bool val1;
HXDLIN(1205)				if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1205)					val1 = hx::IsNull( this->_hx___state->renderToTexture );
            				}
            				else {
HXLINE(1205)					val1 = false;
            				}
HXDLIN(1205)				if (val1) {
HXLINE(1205)					val = ((Float)1.0);
            				}
            				else {
HXLINE(1205)					val = ((Float)-1.0);
            				}
HXDLIN(1205)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val);
            			}
HXLINE(1206)			program->_hx___setPositionScale(this->_hx___positionScale);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLProgram,(void))

void Context3D_obj::_hx___flushGLScissor(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1214___flushGLScissor)
HXDLIN(1214)		if (!(this->_hx___state->scissorEnabled)) {
HXLINE(1216)			if ((this->_hx___contextState->scissorEnabled != this->_hx___state->scissorEnabled)) {
HXLINE(1218)				this->_hx___setGLScissorTest(false);
HXLINE(1219)				this->_hx___contextState->scissorEnabled = false;
            			}
            		}
            		else {
HXLINE(1225)			this->_hx___setGLScissorTest(true);
HXLINE(1226)			this->_hx___contextState->scissorEnabled = true;
HXLINE(1228)			int scissorX = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->x);
HXLINE(1229)			int scissorY = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->y);
HXLINE(1230)			int scissorWidth = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->width);
HXLINE(1231)			int scissorHeight = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->height);
HXLINE(1233)			bool _hx_tmp;
HXDLIN(1233)			if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(1233)				_hx_tmp = hx::IsNull( this->_hx___stage3D );
            			}
            			else {
HXLINE(1233)				_hx_tmp = false;
            			}
HXDLIN(1233)			if (_hx_tmp) {
HXLINE(1235)				int contextHeight = ::Std_obj::_hx_int((this->_hx___stage->window->_hx___height * this->_hx___stage->window->_hx___scale));
HXLINE(1236)				scissorY = ((contextHeight - ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->height)) - scissorY);
            			}
HXLINE(1240)			bool _hx_tmp1;
HXDLIN(1240)			bool _hx_tmp2;
HXDLIN(1240)			bool _hx_tmp3;
HXDLIN(1240)			if ((this->_hx___contextState->scissorRectangle->x == scissorX)) {
HXLINE(1240)				_hx_tmp3 = (this->_hx___contextState->scissorRectangle->y != scissorY);
            			}
            			else {
HXLINE(1240)				_hx_tmp3 = true;
            			}
HXDLIN(1240)			if (!(_hx_tmp3)) {
HXLINE(1240)				_hx_tmp2 = (this->_hx___contextState->scissorRectangle->width != scissorWidth);
            			}
            			else {
HXLINE(1240)				_hx_tmp2 = true;
            			}
HXDLIN(1240)			if (!(_hx_tmp2)) {
HXLINE(1240)				_hx_tmp1 = (this->_hx___contextState->scissorRectangle->height != scissorHeight);
            			}
            			else {
HXLINE(1240)				_hx_tmp1 = true;
            			}
HXDLIN(1240)			if (_hx_tmp1) {
HXLINE(1242)				this->gl->scissor(scissorX,scissorY,scissorWidth,scissorHeight);
HXLINE(1243)				this->_hx___contextState->scissorRectangle->setTo(scissorX,scissorY,scissorWidth,scissorHeight);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLScissor,(void))

void Context3D_obj::_hx___flushGLStencil(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1252___flushGLStencil)
HXLINE(1254)		bool _hx_tmp;
HXDLIN(1254)		bool _hx_tmp1;
HXDLIN(1254)		bool _hx_tmp2;
HXDLIN(1254)		if (hx::IsEq( this->_hx___contextState->stencilTriangleFace,this->_hx___state->stencilTriangleFace )) {
HXLINE(1254)			_hx_tmp2 = hx::IsNotEq( this->_hx___contextState->stencilPass,this->_hx___state->stencilPass );
            		}
            		else {
HXLINE(1254)			_hx_tmp2 = true;
            		}
HXDLIN(1254)		if (!(_hx_tmp2)) {
HXLINE(1254)			_hx_tmp1 = hx::IsNotEq( this->_hx___contextState->stencilDepthFail,this->_hx___state->stencilDepthFail );
            		}
            		else {
HXLINE(1254)			_hx_tmp1 = true;
            		}
HXDLIN(1254)		if (!(_hx_tmp1)) {
HXLINE(1254)			_hx_tmp = hx::IsNotEq( this->_hx___contextState->stencilFail,this->_hx___state->stencilFail );
            		}
            		else {
HXLINE(1254)			_hx_tmp = true;
            		}
HXDLIN(1254)		if (_hx_tmp) {
HXLINE(1256)			{
HXLINE(1256)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(1256)				int face = this->_hx___getGLTriangleFace(this->_hx___state->stencilTriangleFace);
HXDLIN(1256)				int fail = this->_hx___getGLStencilAction(this->_hx___state->stencilFail);
HXDLIN(1256)				int zfail = this->_hx___getGLStencilAction(this->_hx___state->stencilDepthFail);
HXDLIN(1256)				this1->stencilOpSeparate(face,fail,zfail,this->_hx___getGLStencilAction(this->_hx___state->stencilPass));
            			}
HXLINE(1257)			this->_hx___contextState->stencilTriangleFace = this->_hx___state->stencilTriangleFace;
HXLINE(1258)			this->_hx___contextState->stencilPass = this->_hx___state->stencilPass;
HXLINE(1259)			this->_hx___contextState->stencilDepthFail = this->_hx___state->stencilDepthFail;
HXLINE(1260)			this->_hx___contextState->stencilFail = this->_hx___state->stencilFail;
            		}
HXLINE(1264)		if ((this->_hx___contextState->stencilWriteMask != this->_hx___state->stencilWriteMask)) {
HXLINE(1266)			this->gl->stencilMask(this->_hx___state->stencilWriteMask);
HXLINE(1267)			this->_hx___contextState->stencilWriteMask = this->_hx___state->stencilWriteMask;
            		}
HXLINE(1271)		bool _hx_tmp3;
HXDLIN(1271)		bool _hx_tmp4;
HXDLIN(1271)		if (hx::IsEq( this->_hx___contextState->stencilCompareMode,this->_hx___state->stencilCompareMode )) {
HXLINE(1271)			_hx_tmp4 = (this->_hx___contextState->stencilReferenceValue != this->_hx___state->stencilReferenceValue);
            		}
            		else {
HXLINE(1271)			_hx_tmp4 = true;
            		}
HXDLIN(1271)		if (!(_hx_tmp4)) {
HXLINE(1271)			_hx_tmp3 = (this->_hx___contextState->stencilReadMask != this->_hx___state->stencilReadMask);
            		}
            		else {
HXLINE(1271)			_hx_tmp3 = true;
            		}
HXDLIN(1271)		if (_hx_tmp3) {
HXLINE(1273)			{
HXLINE(1273)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this2 = this->gl;
HXDLIN(1273)				int func = this->_hx___getGLCompareMode(this->_hx___state->stencilCompareMode);
HXDLIN(1273)				this2->stencilFunc(func,this->_hx___state->stencilReferenceValue,this->_hx___state->stencilReadMask);
            			}
HXLINE(1274)			this->_hx___contextState->stencilCompareMode = this->_hx___state->stencilCompareMode;
HXLINE(1275)			this->_hx___contextState->stencilReferenceValue = this->_hx___state->stencilReferenceValue;
HXLINE(1276)			this->_hx___contextState->stencilReadMask = this->_hx___state->stencilReadMask;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLStencil,(void))

void Context3D_obj::_hx___flushGLTextures(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1283___flushGLTextures)
HXLINE(1285)		int sampler = (int)0;
HXLINE(1286)		 ::openfl::display3D::textures::TextureBase texture;
HXDLIN(1286)		 ::openfl::_internal::renderer::SamplerState samplerState;
HXLINE(1288)		{
HXLINE(1288)			int _g1 = (int)0;
HXDLIN(1288)			int _g = this->_hx___state->textures->length;
HXDLIN(1288)			while((_g1 < _g)){
HXLINE(1288)				_g1 = (_g1 + (int)1);
HXDLIN(1288)				int i = (_g1 - (int)1);
HXLINE(1290)				texture = this->_hx___state->textures->__get(i).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE(1291)				samplerState = this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >();
HXLINE(1292)				if (hx::IsNull( samplerState )) {
HXLINE(1293)					::Array< ::Dynamic> _hx_tmp = this->_hx___state->samplerStates;
HXDLIN(1293)					_hx_tmp[i] =  ::openfl::_internal::renderer::SamplerState_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE(1294)					samplerState = this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >();
            				}
HXLINE(1297)				this->gl->activeTexture((this->gl->TEXTURE0 + sampler));
HXLINE(1299)				if (hx::IsNotNull( texture )) {
HXLINE(1304)					if ((texture->_hx___textureTarget == this->gl->TEXTURE_2D)) {
HXLINE(1305)						this->_hx___bindGLTexture2D(texture->_hx___getTexture());
            					}
            					else {
HXLINE(1307)						this->_hx___bindGLTextureCubeMap(texture->_hx___getTexture());
            					}
HXLINE(1312)					this->gl->enable(this->gl->TEXTURE_2D);
HXLINE(1315)					this->_hx___contextState->textures[i] = texture;
HXLINE(1319)					texture->_hx___setSamplerState(samplerState);
            				}
            				else {
HXLINE(1323)					this->_hx___bindGLTexture2D(null());
            				}
HXLINE(1327)				bool _hx_tmp1;
HXDLIN(1327)				bool _hx_tmp2;
HXDLIN(1327)				if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1327)					_hx_tmp2 = hx::IsEq( this->_hx___state->program->_hx___format,(int)0 );
            				}
            				else {
HXLINE(1327)					_hx_tmp2 = false;
            				}
HXDLIN(1327)				if (_hx_tmp2) {
HXLINE(1327)					_hx_tmp1 = samplerState->textureAlpha;
            				}
            				else {
HXLINE(1327)					_hx_tmp1 = false;
            				}
HXDLIN(1327)				if (_hx_tmp1) {
HXLINE(1329)					this->gl->activeTexture(((this->gl->TEXTURE0 + sampler) + (int)4));
HXLINE(1331)					bool _hx_tmp3;
HXDLIN(1331)					if (hx::IsNotNull( texture )) {
HXLINE(1331)						_hx_tmp3 = hx::IsNotNull( texture->_hx___alphaTexture );
            					}
            					else {
HXLINE(1331)						_hx_tmp3 = false;
            					}
HXDLIN(1331)					if (_hx_tmp3) {
HXLINE(1333)						if ((texture->_hx___alphaTexture->_hx___textureTarget == this->gl->TEXTURE_2D)) {
HXLINE(1334)							this->_hx___bindGLTexture2D(texture->_hx___alphaTexture->_hx___getTexture());
            						}
            						else {
HXLINE(1336)							this->_hx___bindGLTextureCubeMap(texture->_hx___alphaTexture->_hx___getTexture());
            						}
HXLINE(1339)						texture->_hx___alphaTexture->_hx___setSamplerState(samplerState);
HXLINE(1340)						this->gl->uniform1i(this->_hx___state->program->_hx___agalAlphaSamplerEnabled->__get(sampler).StaticCast<  ::openfl::display3D::Uniform >()->location,(int)1);
HXLINE(1344)						this->gl->enable(this->gl->TEXTURE_2D);
            					}
            					else {
HXLINE(1349)						this->_hx___bindGLTexture2D(null());
HXLINE(1350)						this->gl->uniform1i(this->_hx___state->program->_hx___agalAlphaSamplerEnabled->__get(sampler).StaticCast<  ::openfl::display3D::Uniform >()->location,(int)0);
            					}
            				}
HXLINE(1356)				sampler = (sampler + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLTextures,(void))

void Context3D_obj::_hx___flushGLViewport(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1367___flushGLViewport)
HXDLIN(1367)		if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(1369)			if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1371)				int x;
HXDLIN(1371)				if (hx::IsNull( this->_hx___stage3D )) {
HXLINE(1371)					x = (int)0;
            				}
            				else {
HXLINE(1371)					x = ::Std_obj::_hx_int(this->_hx___stage3D->get_x());
            				}
HXLINE(1372)				Float y = ((this->_hx___stage->window->_hx___height * this->_hx___stage->window->_hx___scale) - this->backBufferHeight);
HXDLIN(1372)				Float y1;
HXDLIN(1372)				if (hx::IsNull( this->_hx___stage3D )) {
HXLINE(1372)					y1 = (int)0;
            				}
            				else {
HXLINE(1372)					y1 = this->_hx___stage3D->get_y();
            				}
HXDLIN(1372)				int y2 = ::Std_obj::_hx_int((y - y1));
HXLINE(1373)				this->gl->viewport(x,y2,this->backBufferWidth,this->backBufferHeight);
            			}
            			else {
HXLINE(1377)				this->gl->viewport((int)0,(int)0,this->backBufferWidth,this->backBufferHeight);
            			}
            		}
            		else {
HXLINE(1383)			int width = (int)0;
HXDLIN(1383)			int height = (int)0;
HXLINE(1386)			if (::Std_obj::is(this->_hx___state->renderToTexture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE(1388)				 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(this->_hx___state->renderToTexture) );
HXLINE(1389)				width = texture2D->_hx___width;
HXLINE(1390)				height = texture2D->_hx___height;
            			}
            			else {
HXLINE(1392)				if (::Std_obj::is(this->_hx___state->renderToTexture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE(1394)					 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(this->_hx___state->renderToTexture) );
HXLINE(1395)					width = rectTexture->_hx___width;
HXLINE(1396)					height = rectTexture->_hx___height;
            				}
            				else {
HXLINE(1398)					if (::Std_obj::is(this->_hx___state->renderToTexture,hx::ClassOf< ::openfl::display3D::textures::CubeTexture >())) {
HXLINE(1400)						 ::openfl::display3D::textures::CubeTexture cubeTexture = ( ( ::openfl::display3D::textures::CubeTexture)(this->_hx___state->renderToTexture) );
HXLINE(1401)						width = cubeTexture->_hx___size;
HXLINE(1402)						height = cubeTexture->_hx___size;
            					}
            				}
            			}
HXLINE(1406)			this->gl->viewport((int)0,(int)0,width,height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLViewport,(void))

int Context3D_obj::_hx___getGLBlend( ::Dynamic blendFactor){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1415___getGLBlend)
HXDLIN(1415)		 ::Dynamic _hx_switch_0 = blendFactor;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1417)			return this->gl->DST_ALPHA;
HXDLIN(1417)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1418)			return this->gl->DST_COLOR;
HXDLIN(1418)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1419)			return this->gl->ONE;
HXDLIN(1419)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1420)			return this->gl->ONE_MINUS_DST_ALPHA;
HXDLIN(1420)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1421)			return this->gl->ONE_MINUS_DST_COLOR;
HXDLIN(1421)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1422)			return this->gl->ONE_MINUS_SRC_ALPHA;
HXDLIN(1422)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1423)			return this->gl->ONE_MINUS_SRC_COLOR;
HXDLIN(1423)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1424)			return this->gl->SRC_ALPHA;
HXDLIN(1424)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==(int)8) ){
HXLINE(1425)			return this->gl->SRC_COLOR;
HXDLIN(1425)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==(int)9) ){
HXLINE(1426)			return this->gl->ZERO;
HXDLIN(1426)			goto _hx_goto_59;
            		}
            		/* default */{
HXLINE(1427)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_59:;
HXLINE(1415)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLBlend,return )

int Context3D_obj::_hx___getGLCompareMode( ::Dynamic mode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1438___getGLCompareMode)
HXDLIN(1438)		 ::Dynamic _hx_switch_0 = mode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1440)			return this->gl->ALWAYS;
HXDLIN(1440)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1441)			return this->gl->EQUAL;
HXDLIN(1441)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1442)			return this->gl->GREATER;
HXDLIN(1442)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1443)			return this->gl->GEQUAL;
HXDLIN(1443)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1444)			return this->gl->LESS;
HXDLIN(1444)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1445)			return this->gl->LEQUAL;
HXDLIN(1445)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1446)			return this->gl->NEVER;
HXDLIN(1446)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1447)			return this->gl->NOTEQUAL;
HXDLIN(1447)			goto _hx_goto_61;
            		}
            		/* default */{
HXLINE(1448)			return this->gl->EQUAL;
            		}
            		_hx_goto_61:;
HXLINE(1438)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLCompareMode,return )

int Context3D_obj::_hx___getGLStencilAction( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1457___getGLStencilAction)
HXDLIN(1457)		 ::Dynamic _hx_switch_0 = action;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1459)			return this->gl->DECR;
HXDLIN(1459)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1460)			return this->gl->DECR_WRAP;
HXDLIN(1460)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1461)			return this->gl->INCR;
HXDLIN(1461)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1462)			return this->gl->INCR_WRAP;
HXDLIN(1462)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1463)			return this->gl->INVERT;
HXDLIN(1463)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1464)			return this->gl->KEEP;
HXDLIN(1464)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1465)			return this->gl->REPLACE;
HXDLIN(1465)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1466)			return this->gl->ZERO;
HXDLIN(1466)			goto _hx_goto_63;
            		}
            		/* default */{
HXLINE(1467)			return this->gl->KEEP;
            		}
            		_hx_goto_63:;
HXLINE(1457)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLStencilAction,return )

int Context3D_obj::_hx___getGLTriangleFace( ::Dynamic face){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1476___getGLTriangleFace)
HXDLIN(1476)		 ::Dynamic _hx_switch_0 = face;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1479)			return this->gl->BACK;
HXDLIN(1479)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1478)			return this->gl->FRONT;
HXDLIN(1478)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1480)			return this->gl->FRONT_AND_BACK;
HXDLIN(1480)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1481)			return this->gl->NONE;
HXDLIN(1481)			goto _hx_goto_65;
            		}
            		/* default */{
HXLINE(1482)			return this->gl->FRONT_AND_BACK;
            		}
            		_hx_goto_65:;
HXLINE(1476)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLTriangleFace,return )

void Context3D_obj::_hx___renderStage3D( ::openfl::display::Stage3D stage3D){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1489___renderStage3D)
HXLINE(1493)		 ::openfl::display3D::Context3D context = stage3D->context3D;
HXLINE(1495)		bool _hx_tmp;
HXDLIN(1495)		bool _hx_tmp1;
HXDLIN(1495)		bool _hx_tmp2;
HXDLIN(1495)		bool _hx_tmp3;
HXDLIN(1495)		bool _hx_tmp4;
HXDLIN(1495)		if (hx::IsNotNull( context )) {
HXLINE(1495)			_hx_tmp4 = hx::IsNotEq( context,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(1495)			_hx_tmp4 = false;
            		}
HXDLIN(1495)		if (_hx_tmp4) {
HXLINE(1495)			_hx_tmp3 = hx::IsNotNull( context->_hx___frontBufferTexture );
            		}
            		else {
HXLINE(1495)			_hx_tmp3 = false;
            		}
HXDLIN(1495)		if (_hx_tmp3) {
HXLINE(1495)			_hx_tmp2 = stage3D->visible;
            		}
            		else {
HXLINE(1495)			_hx_tmp2 = false;
            		}
HXDLIN(1495)		if (_hx_tmp2) {
HXLINE(1495)			_hx_tmp1 = (this->backBufferHeight > (int)0);
            		}
            		else {
HXLINE(1495)			_hx_tmp1 = false;
            		}
HXDLIN(1495)		if (_hx_tmp1) {
HXLINE(1495)			_hx_tmp = (this->backBufferWidth > (int)0);
            		}
            		else {
HXLINE(1495)			_hx_tmp = false;
            		}
HXDLIN(1495)		if (_hx_tmp) {
HXLINE(1499)			if (hx::IsNull( this->_hx___renderStage3DProgram )) {
HXLINE(1501)				 ::openfl::utils::AGALMiniAssembler vertexAssembler =  ::openfl::utils::AGALMiniAssembler_obj::__alloc( HX_CTX ,null());
HXLINE(1502)				::String _hx_tmp5 = ::openfl::display3D::_Context3DProgramType::Context3DProgramType_Impl__obj::toString((int)1);
HXDLIN(1502)				vertexAssembler->assemble(_hx_tmp5,(HX_("m44 op, va0, vc0\n",78,3e,5a,08) + HX_("mov v0, va1",2c,96,ba,67)),null(),null());
HXLINE(1507)				 ::openfl::utils::AGALMiniAssembler fragmentAssembler =  ::openfl::utils::AGALMiniAssembler_obj::__alloc( HX_CTX ,null());
HXLINE(1508)				::String _hx_tmp6 = ::openfl::display3D::_Context3DProgramType::Context3DProgramType_Impl__obj::toString((int)0);
HXDLIN(1508)				fragmentAssembler->assemble(_hx_tmp6,(HX_("tex ft1, v0, fs0 <2d,nearest,nomip>\n",ca,8f,17,34) + HX_("mov oc, ft1",4f,aa,cb,a8)),null(),null());
HXLINE(1513)				this->_hx___renderStage3DProgram = this->createProgram(null());
HXLINE(1514)				this->_hx___renderStage3DProgram->upload(vertexAssembler->agalcode,fragmentAssembler->agalcode);
            			}
HXLINE(1518)			this->setProgram(this->_hx___renderStage3DProgram);
HXLINE(1520)			this->setBlendFactors((int)2,(int)9);
HXLINE(1521)			this->setColorMask(true,true,true,true);
HXLINE(1522)			this->setCulling((int)3);
HXLINE(1523)			this->setDepthTest(false,(int)0);
HXLINE(1524)			this->setStencilActions(null(),null(),null(),null(),null());
HXLINE(1525)			this->setStencilReferenceValue((int)0,(int)0,(int)0);
HXLINE(1526)			this->setScissorRectangle(null());
HXLINE(1528)			this->setTextureAt((int)0,context->_hx___frontBufferTexture);
HXLINE(1529)			this->setVertexBufferAt((int)0,stage3D->_hx___vertexBuffer,(int)0,(int)3);
HXLINE(1530)			this->setVertexBufferAt((int)1,stage3D->_hx___vertexBuffer,(int)3,(int)2);
HXLINE(1531)			this->setProgramConstantsFromMatrix((int)1,(int)0,stage3D->_hx___renderTransform,true);
HXLINE(1532)			this->drawTriangles(stage3D->_hx___indexBuffer,null(),null());
HXLINE(1534)			this->_hx___present = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___renderStage3D,(void))

void Context3D_obj::_hx___setGLBlend(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1543___setGLBlend)
HXDLIN(1543)		if ((this->_hx___contextState->_hx___enableGLBlend != enable)) {
HXLINE(1544)			if (enable) {
HXLINE(1545)				this->gl->enable(this->gl->BLEND);
            			}
            			else {
HXLINE(1547)				this->gl->disable(this->gl->BLEND);
            			}
HXLINE(1549)			this->_hx___contextState->_hx___enableGLBlend = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLBlend,(void))

void Context3D_obj::_hx___setGLBlendEquation(int value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1557___setGLBlendEquation)
HXDLIN(1557)		if ((this->_hx___contextState->_hx___glBlendEquation != value)) {
HXLINE(1558)			this->gl->blendEquation(value);
HXLINE(1559)			this->_hx___contextState->_hx___glBlendEquation = value;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLBlendEquation,(void))

void Context3D_obj::_hx___setGLCullFace(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1567___setGLCullFace)
HXDLIN(1567)		if ((this->_hx___contextState->_hx___enableGLCullFace != enable)) {
HXLINE(1568)			if (enable) {
HXLINE(1569)				this->gl->enable(this->gl->CULL_FACE);
            			}
            			else {
HXLINE(1571)				this->gl->disable(this->gl->CULL_FACE);
            			}
HXLINE(1573)			this->_hx___contextState->_hx___enableGLCullFace = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLCullFace,(void))

void Context3D_obj::_hx___setGLDepthTest(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1581___setGLDepthTest)
HXDLIN(1581)		if ((this->_hx___contextState->_hx___enableGLDepthTest != enable)) {
HXLINE(1582)			if (enable) {
HXLINE(1583)				this->gl->enable(this->gl->DEPTH_TEST);
            			}
            			else {
HXLINE(1585)				this->gl->disable(this->gl->DEPTH_TEST);
            			}
HXLINE(1587)			this->_hx___contextState->_hx___enableGLDepthTest = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLDepthTest,(void))

void Context3D_obj::_hx___setGLFrontFace(bool counterClockWise){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1595___setGLFrontFace)
HXDLIN(1595)		if ((this->_hx___contextState->_hx___frontFaceGLCCW != counterClockWise)) {
HXLINE(1596)			{
HXLINE(1596)				int mode;
HXDLIN(1596)				if (counterClockWise) {
HXLINE(1596)					mode = this->gl->CCW;
            				}
            				else {
HXLINE(1596)					mode = this->gl->CW;
            				}
HXDLIN(1596)				this->gl->frontFace(mode);
            			}
HXLINE(1597)			this->_hx___contextState->_hx___frontFaceGLCCW = counterClockWise;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLFrontFace,(void))

void Context3D_obj::_hx___setGLScissorTest(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1605___setGLScissorTest)
HXDLIN(1605)		if ((this->_hx___contextState->_hx___enableGLScissorTest != enable)) {
HXLINE(1606)			if (enable) {
HXLINE(1607)				this->gl->enable(this->gl->SCISSOR_TEST);
            			}
            			else {
HXLINE(1609)				this->gl->disable(this->gl->SCISSOR_TEST);
            			}
HXLINE(1611)			this->_hx___contextState->_hx___enableGLScissorTest = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLScissorTest,(void))

void Context3D_obj::_hx___setGLStencilTest(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1619___setGLStencilTest)
HXDLIN(1619)		if ((this->_hx___contextState->_hx___enableGLStencilTest != enable)) {
HXLINE(1620)			if (enable) {
HXLINE(1621)				this->gl->enable(this->gl->STENCIL_TEST);
            			}
            			else {
HXLINE(1623)				this->gl->disable(this->gl->STENCIL_TEST);
            			}
HXLINE(1625)			this->_hx___contextState->_hx___enableGLStencilTest = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLStencilTest,(void))

bool Context3D_obj::get_enableErrorChecking(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1640_get_enableErrorChecking)
HXDLIN(1640)		return this->_hx___enableErrorChecking;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,get_enableErrorChecking,return )

bool Context3D_obj::set_enableErrorChecking(bool value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1647_set_enableErrorChecking)
HXDLIN(1647)		return (this->_hx___enableErrorChecking = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,set_enableErrorChecking,return )

bool Context3D_obj::supportsVideoTexture;

int Context3D_obj::GL_DEPTH_STENCIL;

int Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;

int Context3D_obj::GL_MAX_VIEWPORT_DIMS;

int Context3D_obj::GL_TEXTURE_MAX_ANISOTROPY_EXT;

::String Context3D_obj::_hx___driverInfo;


hx::ObjectPtr< Context3D_obj > Context3D_obj::__new( ::openfl::display::Stage stage, ::openfl::_internal::renderer::context3D::Context3DState contextState, ::openfl::display::Stage3D stage3D) {
	hx::ObjectPtr< Context3D_obj > __this = new Context3D_obj();
	__this->__construct(stage,contextState,stage3D);
	return __this;
}

hx::ObjectPtr< Context3D_obj > Context3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Stage stage, ::openfl::_internal::renderer::context3D::Context3DState contextState, ::openfl::display::Stage3D stage3D) {
	Context3D_obj *__this = (Context3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context3D_obj), true, "openfl.display3D.Context3D"));
	*(void **)__this = Context3D_obj::_hx_vtable;
	__this->__construct(stage,contextState,stage3D);
	return __this;
}

Context3D_obj::Context3D_obj()
{
}

void Context3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3D);
	HX_MARK_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_MARK_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_MARK_MEMBER_NAME(driverInfo,"driverInfo");
	HX_MARK_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_MARK_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_MARK_MEMBER_NAME(profile,"profile");
	HX_MARK_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_MARK_MEMBER_NAME(_hx___backBufferTexture,"__backBufferTexture");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolutionOnBrowserZoom,"__backBufferWantsBestResolutionOnBrowserZoom");
	HX_MARK_MEMBER_NAME(_hx___cleared,"__cleared");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___contextState,"__contextState");
	HX_MARK_MEMBER_NAME(_hx___renderStage3DProgram,"__renderStage3DProgram");
	HX_MARK_MEMBER_NAME(_hx___enableErrorChecking,"__enableErrorChecking");
	HX_MARK_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_MARK_MEMBER_NAME(_hx___frontBufferTexture,"__frontBufferTexture");
	HX_MARK_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_MARK_MEMBER_NAME(_hx___present,"__present");
	HX_MARK_MEMBER_NAME(_hx___programs,"__programs");
	HX_MARK_MEMBER_NAME(_hx___quadIndexBuffer,"__quadIndexBuffer");
	HX_MARK_MEMBER_NAME(_hx___quadIndexBufferCount,"__quadIndexBufferCount");
	HX_MARK_MEMBER_NAME(_hx___quadIndexBufferElements,"__quadIndexBufferElements");
	HX_MARK_MEMBER_NAME(_hx___stage,"__stage");
	HX_MARK_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_MARK_MEMBER_NAME(_hx___state,"__state");
	HX_MARK_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Context3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_VISIT_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_VISIT_MEMBER_NAME(driverInfo,"driverInfo");
	HX_VISIT_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_VISIT_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_VISIT_MEMBER_NAME(profile,"profile");
	HX_VISIT_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_VISIT_MEMBER_NAME(_hx___backBufferTexture,"__backBufferTexture");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolutionOnBrowserZoom,"__backBufferWantsBestResolutionOnBrowserZoom");
	HX_VISIT_MEMBER_NAME(_hx___cleared,"__cleared");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___contextState,"__contextState");
	HX_VISIT_MEMBER_NAME(_hx___renderStage3DProgram,"__renderStage3DProgram");
	HX_VISIT_MEMBER_NAME(_hx___enableErrorChecking,"__enableErrorChecking");
	HX_VISIT_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_VISIT_MEMBER_NAME(_hx___frontBufferTexture,"__frontBufferTexture");
	HX_VISIT_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_VISIT_MEMBER_NAME(_hx___present,"__present");
	HX_VISIT_MEMBER_NAME(_hx___programs,"__programs");
	HX_VISIT_MEMBER_NAME(_hx___quadIndexBuffer,"__quadIndexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___quadIndexBufferCount,"__quadIndexBufferCount");
	HX_VISIT_MEMBER_NAME(_hx___quadIndexBufferElements,"__quadIndexBufferElements");
	HX_VISIT_MEMBER_NAME(_hx___stage,"__stage");
	HX_VISIT_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_VISIT_MEMBER_NAME(_hx___state,"__state");
	HX_VISIT_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Context3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { return hx::Val( profile ); }
		if (HX_FIELD_EQ(inName,"__stage") ) { return hx::Val( _hx___stage ); }
		if (HX_FIELD_EQ(inName,"__state") ) { return hx::Val( _hx___state ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"present") ) { return hx::Val( present_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleared") ) { return hx::Val( _hx___cleared ); }
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context ); }
		if (HX_FIELD_EQ(inName,"__present") ) { return hx::Val( _hx___present ); }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { return hx::Val( _hx___stage3D ); }
		if (HX_FIELD_EQ(inName,"__flushGL") ) { return hx::Val( _hx___flushGL_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { return hx::Val( driverInfo ); }
		if (HX_FIELD_EQ(inName,"__programs") ) { return hx::Val( _hx___programs ); }
		if (HX_FIELD_EQ(inName,"setCulling") ) { return hx::Val( setCulling_dyn() ); }
		if (HX_FIELD_EQ(inName,"setProgram") ) { return hx::Val( setProgram_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setColorMask") ) { return hx::Val( setColorMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { return hx::Val( setDepthTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { return hx::Val( setTextureAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLBlend") ) { return hx::Val( _hx___getGLBlend_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLBlend") ) { return hx::Val( _hx___setGLBlend_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { return hx::Val( totalGPUMemory ); }
		if (HX_FIELD_EQ(inName,"__contextState") ) { return hx::Val( _hx___contextState ); }
		if (HX_FIELD_EQ(inName,"__flushGLBlend") ) { return hx::Val( _hx___flushGLBlend_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLColor") ) { return hx::Val( _hx___flushGLColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLDepth") ) { return hx::Val( _hx___flushGLDepth_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { return hx::Val( backBufferWidth ); }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { return hx::Val( _hx___positionScale ); }
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { return hx::Val( setBlendFactors_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawTriangles") ) { return hx::Val( _hx___drawTriangles_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderStage3D") ) { return hx::Val( _hx___renderStage3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLCullFace") ) { return hx::Val( _hx___setGLCullFace_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { return hx::Val( backBufferHeight ); }
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { return hx::Val( drawToBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLCulling") ) { return hx::Val( _hx___flushGLCulling_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLProgram") ) { return hx::Val( _hx___flushGLProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLScissor") ) { return hx::Val( _hx___flushGLScissor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLStencil") ) { return hx::Val( _hx___flushGLStencil_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLDepthTest") ) { return hx::Val( _hx___setGLDepthTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLFrontFace") ) { return hx::Val( _hx___setGLFrontFace_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__quadIndexBuffer") ) { return hx::Val( _hx___quadIndexBuffer ); }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { return hx::Val( _hx___vertexConstants ); }
		if (HX_FIELD_EQ(inName,"createCubeTexture") ) { return hx::Val( createCubeTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"createIndexBuffer") ) { return hx::Val( createIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { return hx::Val( setSamplerStateAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { return hx::Val( setStencilActions_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { return hx::Val( setVertexBufferAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLTexture2D") ) { return hx::Val( _hx___bindGLTexture2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLTextures") ) { return hx::Val( _hx___flushGLTextures_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLViewport") ) { return hx::Val( _hx___flushGLViewport_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { return hx::Val( maxBackBufferWidth ); }
		if (HX_FIELD_EQ(inName,"createVertexBuffer") ) { return hx::Val( createVertexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"createVideoTexture") ) { return hx::Val( createVideoTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { return hx::Val( setRenderToTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLCompareMode") ) { return hx::Val( _hx___getGLCompareMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLScissorTest") ) { return hx::Val( _hx___setGLScissorTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLStencilTest") ) { return hx::Val( _hx___setGLStencilTest_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_enableErrorChecking() ); }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { return hx::Val( maxBackBufferHeight ); }
		if (HX_FIELD_EQ(inName,"__backBufferTexture") ) { return hx::Val( _hx___backBufferTexture ); }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { return hx::Val( _hx___fragmentConstants ); }
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { return hx::Val( configureBackBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { return hx::Val( setScissorRectangle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLArrayBuffer") ) { return hx::Val( _hx___bindGLArrayBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLFramebuffer") ) { return hx::Val( _hx___bindGLFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLTriangleFace") ) { return hx::Val( _hx___getGLTriangleFace_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__frontBufferTexture") ) { return hx::Val( _hx___frontBufferTexture ); }
		if (HX_FIELD_EQ(inName,"__flushGLFramebuffer") ) { return hx::Val( _hx___flushGLFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLStencilAction") ) { return hx::Val( _hx___getGLStencilAction_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLBlendEquation") ) { return hx::Val( _hx___setGLBlendEquation_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { return hx::Val( _hx___backBufferAntiAlias ); }
		if (HX_FIELD_EQ(inName,"__enableErrorChecking") ) { return hx::Val( _hx___enableErrorChecking ); }
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { return hx::Val( setRenderToBackBuffer_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderStage3DProgram") ) { return hx::Val( _hx___renderStage3DProgram ); }
		if (HX_FIELD_EQ(inName,"__quadIndexBufferCount") ) { return hx::Val( _hx___quadIndexBufferCount ); }
		if (HX_FIELD_EQ(inName,"createRectangleTexture") ) { return hx::Val( createRectangleTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLTextureCubeMap") ) { return hx::Val( _hx___bindGLTextureCubeMap_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setBlendFactorsSeparate") ) { return hx::Val( setBlendFactorsSeparate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_enableErrorChecking") ) { return hx::Val( get_enableErrorChecking_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_enableErrorChecking") ) { return hx::Val( set_enableErrorChecking_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { return hx::Val( setStencilReferenceValue_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__quadIndexBufferElements") ) { return hx::Val( _hx___quadIndexBufferElements ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__bindGLElementArrayBuffer") ) { return hx::Val( _hx___bindGLElementArrayBuffer_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { return hx::Val( setProgramConstantsFromMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromVector") ) { return hx::Val( setProgramConstantsFromVector_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { return hx::Val( _hx___backBufferWantsBestResolution ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromByteArray") ) { return hx::Val( setProgramConstantsFromByteArray_dyn() ); }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolutionOnBrowserZoom") ) { return hx::Val( _hx___backBufferWantsBestResolutionOnBrowserZoom ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Context3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__driverInfo") ) { outValue = ( _hx___driverInfo ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"GL_DEPTH_STENCIL") ) { outValue = ( GL_DEPTH_STENCIL ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { outValue = ( supportsVideoTexture ); return true; }
		if (HX_FIELD_EQ(inName,"GL_MAX_VIEWPORT_DIMS") ) { outValue = ( GL_MAX_VIEWPORT_DIMS ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"GL_TEXTURE_MAX_ANISOTROPY_EXT") ) { outValue = ( GL_TEXTURE_MAX_ANISOTROPY_EXT ); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT") ) { outValue = ( GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT ); return true; }
	}
	return false;
}

hx::Val Context3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { profile=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stage") ) { _hx___stage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__state") ) { _hx___state=inValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DState >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleared") ) { _hx___cleared=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__present") ) { _hx___present=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { _hx___stage3D=inValue.Cast<  ::openfl::display::Stage3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { driverInfo=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__programs") ) { _hx___programs=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { totalGPUMemory=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__contextState") ) { _hx___contextState=inValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DState >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { backBufferWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { _hx___positionScale=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { backBufferHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__quadIndexBuffer") ) { _hx___quadIndexBuffer=inValue.Cast<  ::openfl::display3D::IndexBuffer3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { _hx___vertexConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { maxBackBufferWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enableErrorChecking(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { maxBackBufferHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__backBufferTexture") ) { _hx___backBufferTexture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { _hx___fragmentConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__frontBufferTexture") ) { _hx___frontBufferTexture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { _hx___backBufferAntiAlias=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__enableErrorChecking") ) { _hx___enableErrorChecking=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderStage3DProgram") ) { _hx___renderStage3DProgram=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__quadIndexBufferCount") ) { _hx___quadIndexBufferCount=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__quadIndexBufferElements") ) { _hx___quadIndexBufferElements=inValue.Cast< int >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { _hx___backBufferWantsBestResolution=inValue.Cast< bool >(); return inValue; }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolutionOnBrowserZoom") ) { _hx___backBufferWantsBestResolutionOnBrowserZoom=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Context3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__driverInfo") ) { _hx___driverInfo=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"GL_DEPTH_STENCIL") ) { GL_DEPTH_STENCIL=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { supportsVideoTexture=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"GL_MAX_VIEWPORT_DIMS") ) { GL_MAX_VIEWPORT_DIMS=ioValue.Cast< int >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"GL_TEXTURE_MAX_ANISOTROPY_EXT") ) { GL_TEXTURE_MAX_ANISOTROPY_EXT=ioValue.Cast< int >(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT") ) { GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Context3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"));
	outFields->push(HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"));
	outFields->push(HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"));
	outFields->push(HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"));
	outFields->push(HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"));
	outFields->push(HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"));
	outFields->push(HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"));
	outFields->push(HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"));
	outFields->push(HX_HCSTRING("__backBufferTexture","\xf4","\xe5","\x95","\x65"));
	outFields->push(HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"));
	outFields->push(HX_HCSTRING("__backBufferWantsBestResolutionOnBrowserZoom","\x50","\xf3","\x6e","\xfd"));
	outFields->push(HX_HCSTRING("__cleared","\x0c","\x58","\x93","\x2c"));
	outFields->push(HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"));
	outFields->push(HX_HCSTRING("__contextState","\xc2","\xf0","\x30","\x2b"));
	outFields->push(HX_HCSTRING("__renderStage3DProgram","\x6b","\x88","\x79","\xad"));
	outFields->push(HX_HCSTRING("__enableErrorChecking","\x5f","\x5d","\x0d","\x28"));
	outFields->push(HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"));
	outFields->push(HX_HCSTRING("__frontBufferTexture","\x72","\xb0","\x71","\x38"));
	outFields->push(HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"));
	outFields->push(HX_HCSTRING("__present","\xdb","\x8b","\x2a","\xbb"));
	outFields->push(HX_HCSTRING("__programs","\x8f","\x5c","\x60","\x29"));
	outFields->push(HX_HCSTRING("__quadIndexBuffer","\x0b","\x2d","\x32","\x36"));
	outFields->push(HX_HCSTRING("__quadIndexBufferCount","\xc4","\x5f","\x48","\x67"));
	outFields->push(HX_HCSTRING("__quadIndexBufferElements","\x62","\xa2","\x7c","\x95"));
	outFields->push(HX_HCSTRING("__stage","\x9e","\xc3","\x69","\xee"));
	outFields->push(HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"));
	outFields->push(HX_HCSTRING("__state","\xf1","\xce","\x69","\xee"));
	outFields->push(HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Context3D_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferHeight),HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferWidth),HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c")},
	{hx::fsString,(int)offsetof(Context3D_obj,driverInfo),HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferHeight),HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferWidth),HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3D_obj,profile),HX_HCSTRING("profile","\x29","\x49","\x49","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,totalGPUMemory),HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c")},
	{hx::fsObject /*::lime::_internal::backend::native::NativeOpenGLRenderContext*/ ,(int)offsetof(Context3D_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___backBufferAntiAlias),HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd")},
	{hx::fsObject /*::openfl::display3D::textures::RectangleTexture*/ ,(int)offsetof(Context3D_obj,_hx___backBufferTexture),HX_HCSTRING("__backBufferTexture","\xf4","\xe5","\x95","\x65")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolution),HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolutionOnBrowserZoom),HX_HCSTRING("__backBufferWantsBestResolutionOnBrowserZoom","\x50","\xf3","\x6e","\xfd")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___cleared),HX_HCSTRING("__cleared","\x0c","\x58","\x93","\x2c")},
	{hx::fsObject /*::lime::graphics::RenderContext*/ ,(int)offsetof(Context3D_obj,_hx___context),HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a")},
	{hx::fsObject /*::openfl::_internal::renderer::context3D::Context3DState*/ ,(int)offsetof(Context3D_obj,_hx___contextState),HX_HCSTRING("__contextState","\xc2","\xf0","\x30","\x2b")},
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(int)offsetof(Context3D_obj,_hx___renderStage3DProgram),HX_HCSTRING("__renderStage3DProgram","\x6b","\x88","\x79","\xad")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___enableErrorChecking),HX_HCSTRING("__enableErrorChecking","\x5f","\x5d","\x0d","\x28")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___fragmentConstants),HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65")},
	{hx::fsObject /*::openfl::display3D::textures::RectangleTexture*/ ,(int)offsetof(Context3D_obj,_hx___frontBufferTexture),HX_HCSTRING("__frontBufferTexture","\x72","\xb0","\x71","\x38")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___positionScale),HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___present),HX_HCSTRING("__present","\xdb","\x8b","\x2a","\xbb")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Context3D_obj,_hx___programs),HX_HCSTRING("__programs","\x8f","\x5c","\x60","\x29")},
	{hx::fsObject /*::openfl::display3D::IndexBuffer3D*/ ,(int)offsetof(Context3D_obj,_hx___quadIndexBuffer),HX_HCSTRING("__quadIndexBuffer","\x0b","\x2d","\x32","\x36")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___quadIndexBufferCount),HX_HCSTRING("__quadIndexBufferCount","\xc4","\x5f","\x48","\x67")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___quadIndexBufferElements),HX_HCSTRING("__quadIndexBufferElements","\x62","\xa2","\x7c","\x95")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(int)offsetof(Context3D_obj,_hx___stage),HX_HCSTRING("__stage","\x9e","\xc3","\x69","\xee")},
	{hx::fsObject /*::openfl::display::Stage3D*/ ,(int)offsetof(Context3D_obj,_hx___stage3D),HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf")},
	{hx::fsObject /*::openfl::_internal::renderer::context3D::Context3DState*/ ,(int)offsetof(Context3D_obj,_hx___state),HX_HCSTRING("__state","\xf1","\xce","\x69","\xee")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___vertexConstants),HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3D_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Context3D_obj::supportsVideoTexture,HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67")},
	{hx::fsInt,(void *) &Context3D_obj::GL_DEPTH_STENCIL,HX_HCSTRING("GL_DEPTH_STENCIL","\x66","\xf4","\x80","\xe2")},
	{hx::fsInt,(void *) &Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT,HX_HCSTRING("GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT","\x98","\x64","\x2e","\x42")},
	{hx::fsInt,(void *) &Context3D_obj::GL_MAX_VIEWPORT_DIMS,HX_HCSTRING("GL_MAX_VIEWPORT_DIMS","\xcf","\x7d","\xdc","\xc1")},
	{hx::fsInt,(void *) &Context3D_obj::GL_TEXTURE_MAX_ANISOTROPY_EXT,HX_HCSTRING("GL_TEXTURE_MAX_ANISOTROPY_EXT","\x7d","\x3c","\xef","\xc4")},
	{hx::fsString,(void *) &Context3D_obj::_hx___driverInfo,HX_HCSTRING("__driverInfo","\xd6","\x93","\x0e","\x1c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3D_obj_sMemberFields[] = {
	HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"),
	HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"),
	HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"),
	HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"),
	HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"),
	HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"),
	HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"),
	HX_HCSTRING("__backBufferTexture","\xf4","\xe5","\x95","\x65"),
	HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"),
	HX_HCSTRING("__backBufferWantsBestResolutionOnBrowserZoom","\x50","\xf3","\x6e","\xfd"),
	HX_HCSTRING("__cleared","\x0c","\x58","\x93","\x2c"),
	HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"),
	HX_HCSTRING("__contextState","\xc2","\xf0","\x30","\x2b"),
	HX_HCSTRING("__renderStage3DProgram","\x6b","\x88","\x79","\xad"),
	HX_HCSTRING("__enableErrorChecking","\x5f","\x5d","\x0d","\x28"),
	HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"),
	HX_HCSTRING("__frontBufferTexture","\x72","\xb0","\x71","\x38"),
	HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"),
	HX_HCSTRING("__present","\xdb","\x8b","\x2a","\xbb"),
	HX_HCSTRING("__programs","\x8f","\x5c","\x60","\x29"),
	HX_HCSTRING("__quadIndexBuffer","\x0b","\x2d","\x32","\x36"),
	HX_HCSTRING("__quadIndexBufferCount","\xc4","\x5f","\x48","\x67"),
	HX_HCSTRING("__quadIndexBufferElements","\x62","\xa2","\x7c","\x95"),
	HX_HCSTRING("__stage","\x9e","\xc3","\x69","\xee"),
	HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"),
	HX_HCSTRING("__state","\xf1","\xce","\x69","\xee"),
	HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("configureBackBuffer","\x0d","\x3c","\x11","\x04"),
	HX_HCSTRING("createCubeTexture","\xca","\x46","\x30","\xc8"),
	HX_HCSTRING("createIndexBuffer","\x16","\x40","\x47","\x48"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("createRectangleTexture","\x88","\x8b","\xb3","\xf2"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("createVertexBuffer","\xa0","\xec","\xc7","\x6a"),
	HX_HCSTRING("createVideoTexture","\xbc","\x6e","\xfb","\xb2"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("drawToBitmapData","\x38","\x55","\xb6","\xf4"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("setBlendFactors","\x35","\x4b","\xcd","\xf5"),
	HX_HCSTRING("setBlendFactorsSeparate","\xb8","\xe3","\x58","\x51"),
	HX_HCSTRING("setColorMask","\xed","\x8b","\x13","\x48"),
	HX_HCSTRING("setCulling","\xee","\x06","\x67","\xa6"),
	HX_HCSTRING("setDepthTest","\xf3","\xe2","\xcc","\xc7"),
	HX_HCSTRING("setProgram","\x02","\x6f","\xd8","\x46"),
	HX_HCSTRING("setProgramConstantsFromByteArray","\x3a","\x1f","\x12","\xd4"),
	HX_HCSTRING("setProgramConstantsFromMatrix","\xd8","\xd0","\x45","\xbe"),
	HX_HCSTRING("setProgramConstantsFromVector","\x5a","\x4b","\xdb","\x99"),
	HX_HCSTRING("setRenderToBackBuffer","\x9a","\x84","\xfb","\xad"),
	HX_HCSTRING("setRenderToTexture","\xe8","\x2c","\x92","\x46"),
	HX_HCSTRING("setSamplerStateAt","\x7e","\x30","\x51","\xac"),
	HX_HCSTRING("setScissorRectangle","\x35","\x04","\x2c","\x03"),
	HX_HCSTRING("setStencilActions","\xa3","\xec","\xa6","\x2c"),
	HX_HCSTRING("setStencilReferenceValue","\xc0","\xdf","\xa3","\x11"),
	HX_HCSTRING("setTextureAt","\xac","\xee","\x98","\xd3"),
	HX_HCSTRING("setVertexBufferAt","\xd9","\x58","\xf9","\xc7"),
	HX_HCSTRING("__bindGLArrayBuffer","\x57","\xea","\x20","\x16"),
	HX_HCSTRING("__bindGLElementArrayBuffer","\xff","\x26","\x62","\x10"),
	HX_HCSTRING("__bindGLFramebuffer","\xcb","\xa7","\x8c","\xd2"),
	HX_HCSTRING("__bindGLTexture2D","\xcb","\xa0","\x28","\x31"),
	HX_HCSTRING("__bindGLTextureCubeMap","\xee","\x58","\xb1","\xec"),
	HX_HCSTRING("__drawTriangles","\xe7","\x7c","\x1a","\x66"),
	HX_HCSTRING("__flushGL","\xc9","\x2a","\x9b","\xeb"),
	HX_HCSTRING("__flushGLBlend","\xc8","\x74","\x8a","\xc5"),
	HX_HCSTRING("__flushGLColor","\xda","\xfd","\xf1","\x5a"),
	HX_HCSTRING("__flushGLCulling","\xa7","\xba","\xf2","\xdd"),
	HX_HCSTRING("__flushGLDepth","\x7a","\x7d","\xbf","\xe7"),
	HX_HCSTRING("__flushGLFramebuffer","\xa4","\xd4","\x08","\xba"),
	HX_HCSTRING("__flushGLProgram","\xbb","\x22","\x64","\x7e"),
	HX_HCSTRING("__flushGLScissor","\x53","\x00","\x52","\x8f"),
	HX_HCSTRING("__flushGLStencil","\x33","\x96","\x6e","\x0a"),
	HX_HCSTRING("__flushGLTextures","\x21","\x4f","\xe1","\xf8"),
	HX_HCSTRING("__flushGLViewport","\x4f","\xa4","\xb7","\x2f"),
	HX_HCSTRING("__getGLBlend","\x36","\x8d","\x59","\xee"),
	HX_HCSTRING("__getGLCompareMode","\x4d","\xad","\x57","\x0d"),
	HX_HCSTRING("__getGLStencilAction","\xb7","\xa4","\x86","\x0d"),
	HX_HCSTRING("__getGLTriangleFace","\x40","\x95","\x87","\xc3"),
	HX_HCSTRING("__renderStage3D","\x19","\xef","\x69","\xb1"),
	HX_HCSTRING("__setGLBlend","\xaa","\x2b","\xd7","\xf1"),
	HX_HCSTRING("__setGLBlendEquation","\x56","\x5d","\xf8","\x75"),
	HX_HCSTRING("__setGLCullFace","\xb6","\x81","\xaf","\xac"),
	HX_HCSTRING("__setGLDepthTest","\xce","\x86","\xe6","\x10"),
	HX_HCSTRING("__setGLFrontFace","\xbf","\x65","\x2a","\xee"),
	HX_HCSTRING("__setGLScissorTest","\xa7","\x26","\x13","\x08"),
	HX_HCSTRING("__setGLStencilTest","\x87","\x2c","\x60","\xef"),
	HX_HCSTRING("get_enableErrorChecking","\x16","\xe3","\x6e","\xc2"),
	HX_HCSTRING("set_enableErrorChecking","\x22","\x4c","\xd0","\xc4"),
	::String(null()) };

static void Context3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_MARK_MEMBER_NAME(Context3D_obj::GL_DEPTH_STENCIL,"GL_DEPTH_STENCIL");
	HX_MARK_MEMBER_NAME(Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT,"GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT");
	HX_MARK_MEMBER_NAME(Context3D_obj::GL_MAX_VIEWPORT_DIMS,"GL_MAX_VIEWPORT_DIMS");
	HX_MARK_MEMBER_NAME(Context3D_obj::GL_TEXTURE_MAX_ANISOTROPY_EXT,"GL_TEXTURE_MAX_ANISOTROPY_EXT");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___driverInfo,"__driverInfo");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_VISIT_MEMBER_NAME(Context3D_obj::GL_DEPTH_STENCIL,"GL_DEPTH_STENCIL");
	HX_VISIT_MEMBER_NAME(Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT,"GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT");
	HX_VISIT_MEMBER_NAME(Context3D_obj::GL_MAX_VIEWPORT_DIMS,"GL_MAX_VIEWPORT_DIMS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::GL_TEXTURE_MAX_ANISOTROPY_EXT,"GL_TEXTURE_MAX_ANISOTROPY_EXT");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___driverInfo,"__driverInfo");
};

#endif

hx::Class Context3D_obj::__mClass;

static ::String Context3D_obj_sStaticFields[] = {
	HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67"),
	HX_HCSTRING("GL_DEPTH_STENCIL","\x66","\xf4","\x80","\xe2"),
	HX_HCSTRING("GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT","\x98","\x64","\x2e","\x42"),
	HX_HCSTRING("GL_MAX_VIEWPORT_DIMS","\xcf","\x7d","\xdc","\xc1"),
	HX_HCSTRING("GL_TEXTURE_MAX_ANISOTROPY_EXT","\x7d","\x3c","\xef","\xc4"),
	HX_HCSTRING("__driverInfo","\xd6","\x93","\x0e","\x1c"),
	::String(null())
};

void Context3D_obj::__register()
{
	hx::Object *dummy = new Context3D_obj;
	Context3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.Context3D","\xa7","\xbf","\xa0","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3D_obj::__SetStatic;
	__mClass->mMarkFunc = Context3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_70_boot)
HXDLIN(  70)		supportsVideoTexture = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_72_boot)
HXDLIN(  72)		GL_DEPTH_STENCIL = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_73_boot)
HXDLIN(  73)		GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_74_boot)
HXDLIN(  74)		GL_MAX_VIEWPORT_DIMS = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_75_boot)
HXDLIN(  75)		GL_TEXTURE_MAX_ANISOTROPY_EXT = (int)-1;
            	}
}

} // end namespace openfl
} // end namespace display3D
