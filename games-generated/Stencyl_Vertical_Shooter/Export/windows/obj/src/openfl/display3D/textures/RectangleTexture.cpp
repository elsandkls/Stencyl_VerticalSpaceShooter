// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_SamplerState
#include <openfl/_internal/renderer/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_574e9a3948a11606_26_new,"openfl.display3D.textures.RectangleTexture","new",0xcccbdd5b,"openfl.display3D.textures.RectangleTexture.new","openfl/display3D/textures/RectangleTexture.hx",26,0x83565556)
HX_LOCAL_STACK_FRAME(_hx_pos_574e9a3948a11606_43_uploadFromBitmapData,"openfl.display3D.textures.RectangleTexture","uploadFromBitmapData",0x711b2e49,"openfl.display3D.textures.RectangleTexture.uploadFromBitmapData","openfl/display3D/textures/RectangleTexture.hx",43,0x83565556)
HX_LOCAL_STACK_FRAME(_hx_pos_574e9a3948a11606_82_uploadFromByteArray,"openfl.display3D.textures.RectangleTexture","uploadFromByteArray",0xfd7a0ae1,"openfl.display3D.textures.RectangleTexture.uploadFromByteArray","openfl/display3D/textures/RectangleTexture.hx",82,0x83565556)
HX_LOCAL_STACK_FRAME(_hx_pos_574e9a3948a11606_88_uploadFromTypedArray,"openfl.display3D.textures.RectangleTexture","uploadFromTypedArray",0x35aa255f,"openfl.display3D.textures.RectangleTexture.uploadFromTypedArray","openfl/display3D/textures/RectangleTexture.hx",88,0x83565556)
HX_LOCAL_STACK_FRAME(_hx_pos_574e9a3948a11606_99___setSamplerState,"openfl.display3D.textures.RectangleTexture","__setSamplerState",0xea7a95c6,"openfl.display3D.textures.RectangleTexture.__setSamplerState","openfl/display3D/textures/RectangleTexture.hx",99,0x83565556)
HX_LOCAL_STACK_FRAME(_hx_pos_574e9a3948a11606_133___uploadFromImage,"openfl.display3D.textures.RectangleTexture","__uploadFromImage",0x4731366b,"openfl.display3D.textures.RectangleTexture.__uploadFromImage","openfl/display3D/textures/RectangleTexture.hx",133,0x83565556)
namespace openfl{
namespace display3D{
namespace textures{

void RectangleTexture_obj::__construct( ::openfl::display3D::Context3D context,int width,int height,::String format,bool optimizeForRenderToTexture){
            	HX_STACKFRAME(&_hx_pos_574e9a3948a11606_26_new)
HXLINE(  28)		super::__construct(context);
HXLINE(  30)		this->_hx___width = width;
HXLINE(  31)		this->_hx___height = height;
HXLINE(  33)		this->_hx___optimizeForRenderToTexture = optimizeForRenderToTexture;
HXLINE(  35)		this->_hx___textureTarget = this->_hx___context->gl->TEXTURE_2D;
HXLINE(  36)		this->uploadFromTypedArray(null());
HXLINE(  38)		if (optimizeForRenderToTexture) {
HXLINE(  38)			this->_hx___getGLFramebuffer(true,(int)0,(int)0);
            		}
            	}

Dynamic RectangleTexture_obj::__CreateEmpty() { return new RectangleTexture_obj; }

void *RectangleTexture_obj::_hx_vtable = 0;

Dynamic RectangleTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RectangleTexture_obj > _hx_result = new RectangleTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool RectangleTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19affbf1) {
		if (inClassId<=(int)0x0b79cce7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b79cce7;
		} else {
			return inClassId==(int)0x19affbf1;
		}
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

void RectangleTexture_obj::uploadFromBitmapData( ::openfl::display::BitmapData source){
            	HX_STACKFRAME(&_hx_pos_574e9a3948a11606_43_uploadFromBitmapData)
HXLINE(  46)		if (hx::IsNull( source )) {
HXLINE(  46)			return;
            		}
HXLINE(  48)		 ::lime::graphics::Image image = this->_hx___getImage(source);
HXLINE(  49)		if (hx::IsNull( image )) {
HXLINE(  49)			return;
            		}
HXLINE(  64)		this->uploadFromTypedArray(image->get_data());
            	}


HX_DEFINE_DYNAMIC_FUNC1(RectangleTexture_obj,uploadFromBitmapData,(void))

void RectangleTexture_obj::uploadFromByteArray( ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            	HX_GC_STACKFRAME(&_hx_pos_574e9a3948a11606_82_uploadFromByteArray)
HXDLIN(  82)		 ::haxe::io::Bytes buffer = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN(  82)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(  82)		if (hx::IsNotNull( buffer )) {
HXDLIN(  82)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN(  82)			int in_byteOffset = byteArrayOffset;
HXDLIN(  82)			if ((in_byteOffset < (int)0)) {
HXDLIN(  82)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  82)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXDLIN(  82)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  82)			int bufferByteLength = buffer->length;
HXDLIN(  82)			int elementSize = _this->bytesPerElement;
HXDLIN(  82)			int newByteLength = bufferByteLength;
HXDLIN(  82)			{
HXDLIN(  82)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  82)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXDLIN(  82)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  82)				if ((newByteLength < (int)0)) {
HXDLIN(  82)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  82)			_this->buffer = buffer;
HXDLIN(  82)			_this->byteOffset = in_byteOffset;
HXDLIN(  82)			_this->byteLength = newByteLength;
HXDLIN(  82)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN(  82)			this1 = _this;
            		}
            		else {
HXDLIN(  82)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(  82)		this->uploadFromTypedArray(this1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RectangleTexture_obj,uploadFromByteArray,(void))

void RectangleTexture_obj::uploadFromTypedArray( ::lime::utils::ArrayBufferView data){
            	HX_STACKFRAME(&_hx_pos_574e9a3948a11606_88_uploadFromTypedArray)
HXLINE(  90)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE(  92)		this->_hx___context->_hx___bindGLTexture2D(this->_hx___textureID);
HXLINE(  93)		{
HXLINE(  93)			int target = this->_hx___textureTarget;
HXDLIN(  93)			int internalformat = this->_hx___internalFormat;
HXDLIN(  93)			int width = this->_hx___width;
HXDLIN(  93)			int height = this->_hx___height;
HXDLIN(  93)			int format = this->_hx___format;
HXDLIN(  93)			int type = gl->UNSIGNED_BYTE;
HXDLIN(  93)			{
HXLINE(  93)				::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data,null(),(int)0);
HXDLIN(  93)				gl->texImage2D(target,(int)0,internalformat,width,height,(int)0,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            			}
            		}
HXLINE(  94)		this->_hx___context->_hx___bindGLTexture2D(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(RectangleTexture_obj,uploadFromTypedArray,(void))

bool RectangleTexture_obj::_hx___setSamplerState( ::openfl::_internal::renderer::SamplerState state){
            	HX_STACKFRAME(&_hx_pos_574e9a3948a11606_99___setSamplerState)
HXLINE( 101)		if (this->super::_hx___setSamplerState(state)) {
HXLINE( 103)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 105)			if ((::openfl::display3D::Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT != (int)0)) {
HXLINE( 107)				int aniso;
HXDLIN( 107)				 ::Dynamic _g = state->filter;
HXDLIN( 107)				 ::Dynamic _hx_switch_0 = _g;
            				if (  (_hx_switch_0==(int)0) ){
HXLINE( 107)					aniso = (int)16;
HXDLIN( 107)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==(int)1) ){
HXLINE( 107)					aniso = (int)2;
HXDLIN( 107)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==(int)2) ){
HXLINE( 107)					aniso = (int)4;
HXDLIN( 107)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==(int)3) ){
HXLINE( 107)					aniso = (int)8;
HXDLIN( 107)					goto _hx_goto_4;
            				}
            				/* default */{
HXLINE( 107)					aniso = (int)1;
            				}
            				_hx_goto_4:;
HXLINE( 115)				if ((aniso > ::openfl::display3D::Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT)) {
HXLINE( 116)					aniso = ::openfl::display3D::Context3D_obj::GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;
            				}
HXLINE( 119)				gl->texParameterf(gl->TEXTURE_2D,::openfl::display3D::Context3D_obj::GL_TEXTURE_MAX_ANISOTROPY_EXT,aniso);
            			}
HXLINE( 123)			return true;
            		}
HXLINE( 127)		return false;
            	}


void RectangleTexture_obj::_hx___uploadFromImage( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_574e9a3948a11606_133___uploadFromImage)
HXLINE( 135)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 136)		int internalFormat;
HXDLIN( 136)		int format;
HXLINE( 138)		if ((image->buffer->bitsPerPixel == (int)1)) {
HXLINE( 140)			internalFormat = gl->ALPHA;
HXLINE( 141)			format = gl->ALPHA;
            		}
            		else {
HXLINE( 145)			internalFormat = ::openfl::display3D::textures::TextureBase_obj::_hx___textureInternalFormat;
HXLINE( 146)			format = ::openfl::display3D::textures::TextureBase_obj::_hx___textureFormat;
            		}
HXLINE( 150)		this->_hx___context->_hx___bindGLTexture2D(this->_hx___textureID);
HXLINE( 179)		{
HXLINE( 179)			int target = gl->TEXTURE_2D;
HXDLIN( 179)			int width = image->buffer->width;
HXDLIN( 179)			int height = image->buffer->height;
HXDLIN( 179)			int type = gl->UNSIGNED_BYTE;
HXDLIN( 179)			 ::lime::utils::ArrayBufferView srcData = image->get_data();
HXDLIN( 179)			{
HXLINE( 179)				::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),srcData,null(),(int)0);
HXDLIN( 179)				gl->texImage2D(target,(int)0,internalFormat,width,height,(int)0,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            			}
            		}
HXLINE( 183)		this->_hx___context->_hx___bindGLTexture2D(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(RectangleTexture_obj,_hx___uploadFromImage,(void))


hx::ObjectPtr< RectangleTexture_obj > RectangleTexture_obj::__new( ::openfl::display3D::Context3D context,int width,int height,::String format,bool optimizeForRenderToTexture) {
	hx::ObjectPtr< RectangleTexture_obj > __this = new RectangleTexture_obj();
	__this->__construct(context,width,height,format,optimizeForRenderToTexture);
	return __this;
}

hx::ObjectPtr< RectangleTexture_obj > RectangleTexture_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context,int width,int height,::String format,bool optimizeForRenderToTexture) {
	RectangleTexture_obj *__this = (RectangleTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RectangleTexture_obj), true, "openfl.display3D.textures.RectangleTexture"));
	*(void **)__this = RectangleTexture_obj::_hx_vtable;
	__this->__construct(context,width,height,format,optimizeForRenderToTexture);
	return __this;
}

RectangleTexture_obj::RectangleTexture_obj()
{
}

hx::Val RectangleTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"__setSamplerState") ) { return hx::Val( _hx___setSamplerState_dyn() ); }
		if (HX_FIELD_EQ(inName,"__uploadFromImage") ) { return hx::Val( _hx___uploadFromImage_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"uploadFromByteArray") ) { return hx::Val( uploadFromByteArray_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"uploadFromBitmapData") ) { return hx::Val( uploadFromBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"uploadFromTypedArray") ) { return hx::Val( uploadFromTypedArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *RectangleTexture_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *RectangleTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String RectangleTexture_obj_sMemberFields[] = {
	HX_HCSTRING("uploadFromBitmapData","\xa4","\x85","\x65","\x0d"),
	HX_HCSTRING("uploadFromByteArray","\xe6","\x17","\x1b","\xee"),
	HX_HCSTRING("uploadFromTypedArray","\xba","\x7c","\xf4","\xd1"),
	HX_HCSTRING("__setSamplerState","\x8b","\xe7","\xcf","\x5d"),
	HX_HCSTRING("__uploadFromImage","\x30","\x88","\x86","\xba"),
	::String(null()) };

static void RectangleTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RectangleTexture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RectangleTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RectangleTexture_obj::__mClass,"__mClass");
};

#endif

hx::Class RectangleTexture_obj::__mClass;

void RectangleTexture_obj::__register()
{
	hx::Object *dummy = new RectangleTexture_obj;
	RectangleTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.textures.RectangleTexture","\xe9","\x93","\xed","\xa3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RectangleTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RectangleTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RectangleTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RectangleTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RectangleTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RectangleTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
} // end namespace textures
