// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_agal_AGALConverter
#include <openfl/_internal/formats/agal/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_SamplerState
#include <openfl/_internal/renderer/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Uniform
#include <openfl/display3D/Uniform.h>
#endif
#ifndef INCLUDED_openfl_display3D_UniformMap
#include <openfl/display3D/UniformMap.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_536f681b10c755a2_64_new,"openfl.display3D.Program3D","new",0xcbd1926e,"openfl.display3D.Program3D.new","openfl/display3D/Program3D.hx",64,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_95_dispose,"openfl.display3D.Program3D","dispose",0x556f61ad,"openfl.display3D.Program3D.dispose","openfl/display3D/Program3D.hx",95,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_102_getAttributeIndex,"openfl.display3D.Program3D","getAttributeIndex",0x2e3d631a,"openfl.display3D.Program3D.getAttributeIndex","openfl/display3D/Program3D.hx",102,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_133_getConstantIndex,"openfl.display3D.Program3D","getConstantIndex",0x8204f5ca,"openfl.display3D.Program3D.getConstantIndex","openfl/display3D/Program3D.hx",133,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_166_upload,"openfl.display3D.Program3D","upload",0x91a244b3,"openfl.display3D.Program3D.upload","openfl/display3D/Program3D.hx",166,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_196_uploadSources,"openfl.display3D.Program3D","uploadSources",0xb1ce3ec5,"openfl.display3D.Program3D.uploadSources","openfl/display3D/Program3D.hx",196,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_267___buildAGALUniformList,"openfl.display3D.Program3D","__buildAGALUniformList",0x8e0fee45,"openfl.display3D.Program3D.__buildAGALUniformList","openfl/display3D/Program3D.hx",267,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_377___deleteShaders,"openfl.display3D.Program3D","__deleteShaders",0x8861ecb1,"openfl.display3D.Program3D.__deleteShaders","openfl/display3D/Program3D.hx",377,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_406___disable,"openfl.display3D.Program3D","__disable",0xc40e7b56,"openfl.display3D.Program3D.__disable","openfl/display3D/Program3D.hx",406,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_449___enable,"openfl.display3D.Program3D","__enable",0xe51924d5,"openfl.display3D.Program3D.__enable","openfl/display3D/Program3D.hx",449,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_513___flush,"openfl.display3D.Program3D","__flush",0x071c9cb2,"openfl.display3D.Program3D.__flush","openfl/display3D/Program3D.hx",513,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_557___getSamplerState,"openfl.display3D.Program3D","__getSamplerState",0x4314690d,"openfl.display3D.Program3D.__getSamplerState","openfl/display3D/Program3D.hx",557,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_562___markDirty,"openfl.display3D.Program3D","__markDirty",0xf012f9b3,"openfl.display3D.Program3D.__markDirty","openfl/display3D/Program3D.hx",562,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_579___processGLSLData,"openfl.display3D.Program3D","__processGLSLData",0x3f7fcc25,"openfl.display3D.Program3D.__processGLSLData","openfl/display3D/Program3D.hx",579,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_659___setPositionScale,"openfl.display3D.Program3D","__setPositionScale",0x1baf80f1,"openfl.display3D.Program3D.__setPositionScale","openfl/display3D/Program3D.hx",659,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_675___setSamplerState,"openfl.display3D.Program3D","__setSamplerState",0x3edfe619,"openfl.display3D.Program3D.__setSamplerState","openfl/display3D/Program3D.hx",675,0x0a985b04)
HX_LOCAL_STACK_FRAME(_hx_pos_536f681b10c755a2_680___uploadFromGLSL,"openfl.display3D.Program3D","__uploadFromGLSL",0x163cc3db,"openfl.display3D.Program3D.__uploadFromGLSL","openfl/display3D/Program3D.hx",680,0x0a985b04)
namespace openfl{
namespace display3D{

void Program3D_obj::__construct( ::openfl::display3D::Context3D context3D, ::Dynamic format){
            	HX_GC_STACKFRAME(&_hx_pos_536f681b10c755a2_64_new)
HXLINE(  66)		this->_hx___context = context3D;
HXLINE(  67)		this->_hx___format = format;
HXLINE(  69)		if (hx::IsEq( this->_hx___format,(int)0 )) {
HXLINE(  72)			this->_hx___agalSamplerUsageMask = (int)0;
HXLINE(  73)			this->_hx___agalUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE(  74)			this->_hx___agalSamplerUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE(  75)			this->_hx___agalAlphaSamplerUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE(  76)			this->_hx___agalAlphaSamplerEnabled = ::Array_obj< ::Dynamic>::__new();
            		}
            		else {
HXLINE(  80)			this->_hx___glslAttribNames = ::Array_obj< ::String >::__new();
HXLINE(  81)			this->_hx___glslAttribTypes = ::Array_obj< ::Dynamic>::__new();
HXLINE(  82)			this->_hx___glslSamplerNames = ::Array_obj< ::String >::__new();
HXLINE(  83)			this->_hx___glslUniformNames = ::Array_obj< ::String >::__new();
HXLINE(  84)			this->_hx___glslUniformTypes = ::Array_obj< ::Dynamic>::__new();
            		}
HXLINE(  88)		this->_hx___samplerStates = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic Program3D_obj::__CreateEmpty() { return new Program3D_obj; }

void *Program3D_obj::_hx_vtable = 0;

Dynamic Program3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Program3D_obj > _hx_result = new Program3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Program3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28394b12;
}

void Program3D_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_95_dispose)
HXDLIN(  95)		this->_hx___deleteShaders();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,dispose,(void))

int Program3D_obj::getAttributeIndex(::String name){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_102_getAttributeIndex)
HXDLIN( 102)		if (hx::IsEq( this->_hx___format,(int)0 )) {
HXLINE( 106)			if (::StringTools_obj::startsWith(name,HX_("va",2b,67,00,00))) {
HXLINE( 108)				return ::Std_obj::parseInt(name.substring((int)2,null()));
            			}
            			else {
HXLINE( 112)				return (int)-1;
            			}
            		}
            		else {
HXLINE( 118)			{
HXLINE( 118)				int _g1 = (int)0;
HXDLIN( 118)				int _g = this->_hx___glslAttribNames->length;
HXDLIN( 118)				while((_g1 < _g)){
HXLINE( 118)					_g1 = (_g1 + (int)1);
HXDLIN( 118)					int i = (_g1 - (int)1);
HXLINE( 120)					if ((this->_hx___glslAttribNames->__get(i) == name)) {
HXLINE( 120)						return i;
            					}
            				}
            			}
HXLINE( 124)			return (int)-1;
            		}
HXLINE( 102)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Program3D_obj,getAttributeIndex,return )

int Program3D_obj::getConstantIndex(::String name){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_133_getConstantIndex)
HXDLIN( 133)		if (hx::IsEq( this->_hx___format,(int)0 )) {
HXLINE( 137)			if (::StringTools_obj::startsWith(name,HX_("vc",2d,67,00,00))) {
HXLINE( 139)				return ::Std_obj::parseInt(name.substring((int)2,null()));
            			}
            			else {
HXLINE( 141)				if (::StringTools_obj::startsWith(name,HX_("fc",3d,59,00,00))) {
HXLINE( 143)					return ::Std_obj::parseInt(name.substring((int)2,null()));
            				}
            				else {
HXLINE( 147)					return (int)-1;
            				}
            			}
            		}
            		else {
HXLINE( 153)			{
HXLINE( 153)				int _g1 = (int)0;
HXDLIN( 153)				int _g = this->_hx___glslUniformNames->length;
HXDLIN( 153)				while((_g1 < _g)){
HXLINE( 153)					_g1 = (_g1 + (int)1);
HXDLIN( 153)					int i = (_g1 - (int)1);
HXLINE( 155)					if ((this->_hx___glslUniformNames->__get(i) == name)) {
HXLINE( 155)						return i;
            					}
            				}
            			}
HXLINE( 159)			return (int)-1;
            		}
HXLINE( 133)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Program3D_obj,getConstantIndex,return )

void Program3D_obj::upload( ::openfl::utils::ByteArrayData vertexProgram, ::openfl::utils::ByteArrayData fragmentProgram){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_166_upload)
HXLINE( 168)		if (hx::IsNotEq( this->_hx___format,(int)0 )) {
HXLINE( 168)			return;
            		}
HXLINE( 171)		::Array< ::Dynamic> samplerStates = ::Array_obj< ::Dynamic>::__new();
HXLINE( 173)		::String glslVertex = ::openfl::_internal::formats::agal::AGALConverter_obj::convertToGLSL(vertexProgram,null());
HXLINE( 174)		::String glslFragment = ::openfl::_internal::formats::agal::AGALConverter_obj::convertToGLSL(fragmentProgram,samplerStates);
HXLINE( 176)		if ((::lime::utils::Log_obj::level == (int)5)) {
HXLINE( 178)			::lime::utils::Log_obj::info(glslVertex,hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),178,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("upload",01,ca,59,8c)));
HXLINE( 179)			::lime::utils::Log_obj::info(glslFragment,hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),179,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("upload",01,ca,59,8c)));
            		}
HXLINE( 183)		this->_hx___deleteShaders();
HXLINE( 184)		this->_hx___uploadFromGLSL(glslVertex,glslFragment);
HXLINE( 185)		this->_hx___buildAGALUniformList();
HXLINE( 187)		{
HXLINE( 187)			int _g1 = (int)0;
HXDLIN( 187)			int _g = samplerStates->length;
HXDLIN( 187)			while((_g1 < _g)){
HXLINE( 187)				_g1 = (_g1 + (int)1);
HXDLIN( 187)				int i = (_g1 - (int)1);
HXLINE( 189)				::Array< ::Dynamic> _hx_tmp = this->_hx___samplerStates;
HXDLIN( 189)				_hx_tmp[i] = samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Program3D_obj,upload,(void))

void Program3D_obj::uploadSources(::String vertexSource,::String fragmentSource){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_196_uploadSources)
HXLINE( 198)		if (hx::IsNotEq( this->_hx___format,(int)1 )) {
HXLINE( 198)			return;
            		}
HXLINE( 202)		::String prefix = HX_("#ifdef GL_ES\n\t\t\t#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\tprecision highp float;\n\t\t\t#else\n\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t#endif\n\t\t\t",10,0d,3d,d3);
HXLINE( 213)		::String vertex = (prefix + vertexSource);
HXLINE( 214)		::String fragment = (prefix + fragmentSource);
HXLINE( 216)		bool _hx_tmp;
HXDLIN( 216)		if ((vertex == this->_hx___glVertexSource)) {
HXLINE( 216)			_hx_tmp = (fragment == this->_hx___glFragmentSource);
            		}
            		else {
HXLINE( 216)			_hx_tmp = false;
            		}
HXDLIN( 216)		if (_hx_tmp) {
HXLINE( 216)			return;
            		}
HXLINE( 218)		this->_hx___processGLSLData(vertexSource,HX_("attribute",1c,70,f0,fa));
HXLINE( 219)		this->_hx___processGLSLData(vertexSource,HX_("uniform",34,41,64,b5));
HXLINE( 220)		this->_hx___processGLSLData(fragmentSource,HX_("uniform",34,41,64,b5));
HXLINE( 222)		this->_hx___deleteShaders();
HXLINE( 223)		this->_hx___uploadFromGLSL(vertex,fragment);
HXLINE( 227)		::Array< ::String > samplerNames = this->_hx___glslSamplerNames;
HXLINE( 228)		::Array< ::String > attribNames = this->_hx___glslAttribNames;
HXLINE( 229)		::Array< ::Dynamic> attribTypes = this->_hx___glslAttribTypes;
HXLINE( 230)		::Array< ::String > uniformNames = this->_hx___glslUniformNames;
HXLINE( 231)		::Array< ::Dynamic> uniformTypes = this->_hx___glslUniformTypes;
HXLINE( 233)		this->_hx___glslSamplerNames = ::Array_obj< ::String >::__new();
HXLINE( 234)		this->_hx___glslAttribNames = ::Array_obj< ::String >::__new();
HXLINE( 235)		this->_hx___glslAttribTypes = ::Array_obj< ::Dynamic>::__new();
HXLINE( 236)		this->_hx___glslUniformNames = ::Array_obj< ::String >::__new();
HXLINE( 238)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 239)		int index;
HXLINE( 241)		{
HXLINE( 241)			int _g = (int)0;
HXDLIN( 241)			while((_g < samplerNames->length)){
HXLINE( 241)				::String name = samplerNames->__get(_g);
HXDLIN( 241)				_g = (_g + (int)1);
HXLINE( 243)				index = gl->getUniformLocation(this->_hx___glProgram,name);
HXLINE( 244)				this->_hx___glslSamplerNames[index] = name;
            			}
            		}
HXLINE( 248)		{
HXLINE( 248)			int _g1 = (int)0;
HXDLIN( 248)			int _g2 = attribNames->length;
HXDLIN( 248)			while((_g1 < _g2)){
HXLINE( 248)				_g1 = (_g1 + (int)1);
HXDLIN( 248)				int i = (_g1 - (int)1);
HXLINE( 250)				index = gl->getAttribLocation(this->_hx___glProgram,attribNames->__get(i));
HXLINE( 251)				::Array< ::String > _hx_tmp1 = this->_hx___glslAttribNames;
HXDLIN( 251)				_hx_tmp1[index] = attribNames->__get(i);
HXLINE( 252)				::Array< ::Dynamic> _hx_tmp2 = this->_hx___glslAttribTypes;
HXDLIN( 252)				_hx_tmp2[index] = attribTypes->__get(i);
            			}
            		}
HXLINE( 256)		{
HXLINE( 256)			int _g11 = (int)0;
HXDLIN( 256)			int _g3 = uniformNames->length;
HXDLIN( 256)			while((_g11 < _g3)){
HXLINE( 256)				_g11 = (_g11 + (int)1);
HXDLIN( 256)				int i1 = (_g11 - (int)1);
HXLINE( 258)				index = gl->getUniformLocation(this->_hx___glProgram,uniformNames->__get(i1));
HXLINE( 259)				::Array< ::String > _hx_tmp3 = this->_hx___glslAttribNames;
HXDLIN( 259)				_hx_tmp3[index] = uniformNames->__get(i1);
HXLINE( 260)				::Array< ::Dynamic> _hx_tmp4 = this->_hx___glslAttribTypes;
HXDLIN( 260)				_hx_tmp4[index] = uniformTypes->__get(i1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Program3D_obj,uploadSources,(void))

void Program3D_obj::_hx___buildAGALUniformList(){
            	HX_GC_STACKFRAME(&_hx_pos_536f681b10c755a2_267___buildAGALUniformList)
HXLINE( 269)		if (hx::IsEq( this->_hx___format,(int)1 )) {
HXLINE( 269)			return;
            		}
HXLINE( 272)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 274)		this->_hx___agalUniforms->clear();
HXLINE( 275)		this->_hx___agalSamplerUniforms->clear();
HXLINE( 276)		this->_hx___agalAlphaSamplerUniforms->clear();
HXLINE( 277)		this->_hx___agalAlphaSamplerEnabled = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 279)		this->_hx___agalSamplerUsageMask = (int)0;
HXLINE( 281)		int numActive = (int)0;
HXLINE( 282)		numActive = ( (int)(gl->getProgramParameter(this->_hx___glProgram,gl->ACTIVE_UNIFORMS)) );
HXLINE( 284)		 ::List vertexUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE( 285)		 ::List fragmentUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE( 287)		{
HXLINE( 287)			int _g1 = (int)0;
HXDLIN( 287)			int _g = numActive;
HXDLIN( 287)			while((_g1 < _g)){
HXLINE( 287)				_g1 = (_g1 + (int)1);
HXDLIN( 287)				int i = (_g1 - (int)1);
HXLINE( 289)				 ::Dynamic info = gl->getActiveUniform(this->_hx___glProgram,i);
HXLINE( 290)				::String name = ( (::String)(info->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE( 291)				int size = ( (int)(info->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) );
HXLINE( 292)				int uniformType = ( (int)(info->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) );
HXLINE( 294)				 ::openfl::display3D::Uniform uniform =  ::openfl::display3D::Uniform_obj::__alloc( HX_CTX ,this->_hx___context);
HXLINE( 295)				uniform->name = name;
HXLINE( 296)				uniform->size = size;
HXLINE( 297)				uniform->type = uniformType;
HXLINE( 299)				uniform->location = gl->getUniformLocation(this->_hx___glProgram,uniform->name);
HXLINE( 301)				int indexBracket = uniform->name.indexOf(HX_("[",5b,00,00,00),null());
HXLINE( 303)				if ((indexBracket >= (int)0)) {
HXLINE( 305)					uniform->name = uniform->name.substring((int)0,indexBracket);
            				}
HXLINE( 309)				{
HXLINE( 309)					int _g2 = uniform->type;
HXDLIN( 309)					switch((int)(_g2)){
            						case (int)35674: {
HXLINE( 311)							uniform->regCount = (int)2;
            						}
            						break;
            						case (int)35675: {
HXLINE( 312)							uniform->regCount = (int)3;
            						}
            						break;
            						case (int)35676: {
HXLINE( 313)							uniform->regCount = (int)4;
            						}
            						break;
            						default:{
HXLINE( 314)							uniform->regCount = (int)1;
            						}
            					}
            				}
HXLINE( 318)				 ::openfl::display3D::Uniform uniform1 = uniform;
HXDLIN( 318)				uniform1->regCount = (uniform1->regCount * uniform->size);
HXLINE( 320)				this->_hx___agalUniforms->add(uniform);
HXLINE( 322)				if ((uniform->name == HX_("vcPositionScale",b4,c9,c0,1f))) {
HXLINE( 324)					this->_hx___agalPositionScale = uniform;
            				}
            				else {
HXLINE( 326)					if (::StringTools_obj::startsWith(uniform->name,HX_("vc",2d,67,00,00))) {
HXLINE( 328)						uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)2,null()));
HXLINE( 329)						uniform->regData = this->_hx___context->_hx___vertexConstants;
HXLINE( 330)						vertexUniforms->add(uniform);
            					}
            					else {
HXLINE( 332)						if (::StringTools_obj::startsWith(uniform->name,HX_("fc",3d,59,00,00))) {
HXLINE( 334)							uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)2,null()));
HXLINE( 335)							uniform->regData = this->_hx___context->_hx___fragmentConstants;
HXLINE( 336)							fragmentUniforms->add(uniform);
            						}
            						else {
HXLINE( 338)							bool _hx_tmp;
HXDLIN( 338)							if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 338)								_hx_tmp = (uniform->name.indexOf(HX_("alpha",5e,a7,96,21),null()) == (int)-1);
            							}
            							else {
HXLINE( 338)								_hx_tmp = false;
            							}
HXDLIN( 338)							if (_hx_tmp) {
HXLINE( 340)								uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)7,null()));
HXLINE( 341)								this->_hx___agalSamplerUniforms->add(uniform);
HXLINE( 343)								{
HXLINE( 343)									int _g4 = (int)0;
HXDLIN( 343)									int _g3 = uniform->regCount;
HXDLIN( 343)									while((_g4 < _g3)){
HXLINE( 343)										_g4 = (_g4 + (int)1);
HXDLIN( 343)										int reg = (_g4 - (int)1);
HXLINE( 345)										 ::openfl::display3D::Program3D _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 345)										_hx_tmp1->_hx___agalSamplerUsageMask = ((int)_hx_tmp1->_hx___agalSamplerUsageMask | (int)((int)(int)1 << (int)(uniform->regIndex + reg)));
            									}
            								}
            							}
            							else {
HXLINE( 349)								bool _hx_tmp2;
HXDLIN( 349)								if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 349)									_hx_tmp2 = ::StringTools_obj::endsWith(uniform->name,HX_("_alpha",9f,ee,7d,1d));
            								}
            								else {
HXLINE( 349)									_hx_tmp2 = false;
            								}
HXDLIN( 349)								if (_hx_tmp2) {
HXLINE( 351)									int len = (uniform->name.indexOf(HX_("_",5f,00,00,00),null()) - (int)7);
HXLINE( 352)									::String uniform2 = uniform->name;
HXDLIN( 352)									uniform->regIndex = (::Std_obj::parseInt(uniform2.substring((int)7,((int)7 + len))) + (int)4);
HXLINE( 353)									this->_hx___agalAlphaSamplerUniforms->add(uniform);
            								}
            								else {
HXLINE( 355)									bool _hx_tmp3;
HXDLIN( 355)									if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 355)										_hx_tmp3 = ::StringTools_obj::endsWith(uniform->name,HX_("_alphaEnabled",a2,df,12,f4));
            									}
            									else {
HXLINE( 355)										_hx_tmp3 = false;
            									}
HXDLIN( 355)									if (_hx_tmp3) {
HXLINE( 357)										uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)7,null()));
HXLINE( 358)										this->_hx___agalAlphaSamplerEnabled[uniform->regIndex] = uniform;
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE( 362)				if ((::lime::utils::Log_obj::level == (int)5)) {
HXLINE( 364)					 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 364)					_hx_tmp4((((((((((HX_("",00,00,00,00) + i) + HX_(" name:",6f,1b,f0,61)) + uniform->name) + HX_(" type:",20,fc,36,e6)) + uniform->type) + HX_(" size:",39,94,44,48)) + uniform->size) + HX_(" location:",45,fc,a8,c1)) + uniform->location),hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),364,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__buildAGALUniformList",93,6f,2b,39)));
            				}
            			}
            		}
HXLINE( 370)		this->_hx___agalVertexUniformMap =  ::openfl::display3D::UniformMap_obj::__alloc( HX_CTX ,::Lambda_obj::array(vertexUniforms));
HXLINE( 371)		this->_hx___agalFragmentUniformMap =  ::openfl::display3D::UniformMap_obj::__alloc( HX_CTX ,::Lambda_obj::array(fragmentUniforms));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,_hx___buildAGALUniformList,(void))

void Program3D_obj::_hx___deleteShaders(){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_377___deleteShaders)
HXLINE( 379)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 381)		if (hx::IsNotNull( this->_hx___glProgram )) {
HXLINE( 383)			this->_hx___glProgram = null();
            		}
HXLINE( 387)		if (hx::IsNotNull( this->_hx___glVertexShader )) {
HXLINE( 389)			gl->deleteShader(this->_hx___glVertexShader);
HXLINE( 390)			this->_hx___glVertexShader = null();
            		}
HXLINE( 394)		if (hx::IsNotNull( this->_hx___glFragmentShader )) {
HXLINE( 396)			gl->deleteShader(this->_hx___glFragmentShader);
HXLINE( 397)			this->_hx___glFragmentShader = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,_hx___deleteShaders,(void))

void Program3D_obj::_hx___disable(){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_406___disable)
HXDLIN( 406)		bool _hx_tmp = hx::IsEq( this->_hx___format,(int)1 );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,_hx___disable,(void))

void Program3D_obj::_hx___enable(){
            	HX_GC_STACKFRAME(&_hx_pos_536f681b10c755a2_449___enable)
HXLINE( 451)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 452)		gl->useProgram(this->_hx___glProgram);
HXLINE( 454)		if (hx::IsEq( this->_hx___format,(int)0 )) {
HXLINE( 456)			this->_hx___agalVertexUniformMap->markAllDirty();
HXLINE( 457)			this->_hx___agalFragmentUniformMap->markAllDirty();
HXLINE( 459)			{
HXLINE( 459)				 ::_List::ListNode _g_head = this->_hx___agalSamplerUniforms->h;
HXDLIN( 459)				while(hx::IsNotNull( _g_head )){
HXLINE( 459)					 ::openfl::display3D::Uniform val = ( ( ::openfl::display3D::Uniform)(_g_head->item) );
HXDLIN( 459)					_g_head = _g_head->next;
HXDLIN( 459)					 ::openfl::display3D::Uniform sampler = val;
HXLINE( 461)					if ((sampler->regCount == (int)1)) {
HXLINE( 463)						gl->uniform1i(sampler->location,sampler->regIndex);
            					}
            					else {
HXLINE( 467)						HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("!!! TODO: uniform location on webgl",0c,47,d9,53)));
            					}
            				}
            			}
HXLINE( 473)			{
HXLINE( 473)				 ::_List::ListNode _g_head1 = this->_hx___agalAlphaSamplerUniforms->h;
HXDLIN( 473)				while(hx::IsNotNull( _g_head1 )){
HXLINE( 473)					 ::openfl::display3D::Uniform val1 = ( ( ::openfl::display3D::Uniform)(_g_head1->item) );
HXDLIN( 473)					_g_head1 = _g_head1->next;
HXDLIN( 473)					 ::openfl::display3D::Uniform sampler1 = val1;
HXLINE( 475)					if ((sampler1->regCount == (int)1)) {
HXLINE( 477)						gl->uniform1i(sampler1->location,sampler1->regIndex);
            					}
            					else {
HXLINE( 481)						HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("!!! TODO: uniform location on webgl",0c,47,d9,53)));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,_hx___enable,(void))

void Program3D_obj::_hx___flush(){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_513___flush)
HXDLIN( 513)		if (hx::IsEq( this->_hx___format,(int)0 )) {
HXLINE( 515)			this->_hx___agalVertexUniformMap->flush();
HXLINE( 516)			this->_hx___agalFragmentUniformMap->flush();
            		}
            		else {
HXLINE( 521)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Program3D_obj,_hx___flush,(void))

 ::openfl::_internal::renderer::SamplerState Program3D_obj::_hx___getSamplerState(int sampler){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_557___getSamplerState)
HXDLIN( 557)		return this->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::renderer::SamplerState >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Program3D_obj,_hx___getSamplerState,return )

void Program3D_obj::_hx___markDirty(bool isVertex,int index,int count){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_562___markDirty)
HXLINE( 564)		if (hx::IsEq( this->_hx___format,(int)1 )) {
HXLINE( 564)			return;
            		}
HXLINE( 566)		if (isVertex) {
HXLINE( 568)			this->_hx___agalVertexUniformMap->markDirty(index,count);
            		}
            		else {
HXLINE( 572)			this->_hx___agalFragmentUniformMap->markDirty(index,count);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Program3D_obj,_hx___markDirty,(void))

void Program3D_obj::_hx___processGLSLData(::String source,::String storageType){
            	HX_GC_STACKFRAME(&_hx_pos_536f681b10c755a2_579___processGLSLData)
HXLINE( 581)		int lastMatch = (int)0;
HXDLIN( 581)		 ::Dynamic position;
HXDLIN( 581)		 ::EReg regex;
HXDLIN( 581)		::String name;
HXDLIN( 581)		::String type;
HXLINE( 583)		if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 585)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)",e3,a8,c0,f8),HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 589)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)",fb,2e,25,cc),HX_("",00,00,00,00));
            		}
HXLINE( 593)		while(regex->matchSub(source,lastMatch,null())){
HXLINE( 595)			type = regex->matched((int)1);
HXLINE( 596)			name = regex->matched((int)2);
HXLINE( 598)			if (::StringTools_obj::startsWith(name,HX_("gl_",9a,86,4e,00))) {
HXLINE( 600)				continue;
            			}
HXLINE( 604)			if (::StringTools_obj::startsWith(type,HX_("sampler",08,c5,c9,83))) {
HXLINE( 606)				this->_hx___glslSamplerNames->push(name);
            			}
            			else {
HXLINE( 610)				 ::Dynamic parameterType;
HXDLIN( 610)				::String _hx_switch_0 = type;
            				if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ){
HXLINE( 610)					parameterType = (int)0;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("bvec2",c0,00,91,bb)) ){
HXLINE( 610)					parameterType = (int)1;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("bvec3",c1,00,91,bb)) ){
HXLINE( 610)					parameterType = (int)2;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("bvec4",c2,00,91,bb)) ){
HXLINE( 610)					parameterType = (int)3;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("dvec2",c2,29,5e,e2)) ||  (_hx_switch_0==HX_("vec2",5e,27,4c,4e)) ){
HXLINE( 610)					parameterType = (int)5;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("dvec3",c3,29,5e,e2)) ||  (_hx_switch_0==HX_("vec3",5f,27,4c,4e)) ){
HXLINE( 610)					parameterType = (int)6;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("double",11,2b,cb,32)) ||  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE( 610)					parameterType = (int)4;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("ivec3",48,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec3",54,06,2e,ac)) ){
HXLINE( 610)					parameterType = (int)10;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("ivec4",49,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec4",55,06,2e,ac)) ){
HXLINE( 610)					parameterType = (int)11;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("mat2",92,41,56,48)) ||  (_hx_switch_0==HX_("mat2x2",cc,b2,97,bb)) ){
HXLINE( 610)					parameterType = (int)12;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("mat2x3",cd,b2,97,bb)) ){
HXLINE( 610)					parameterType = (int)13;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("mat2x4",ce,b2,97,bb)) ){
HXLINE( 610)					parameterType = (int)14;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("mat3x2",0d,75,98,bb)) ){
HXLINE( 610)					parameterType = (int)15;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("mat3",93,41,56,48)) ||  (_hx_switch_0==HX_("mat3x3",0e,75,98,bb)) ){
HXLINE( 610)					parameterType = (int)16;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("mat3x4",0f,75,98,bb)) ){
HXLINE( 610)					parameterType = (int)17;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("mat4",94,41,56,48)) ||  (_hx_switch_0==HX_("mat4x4",50,37,99,bb)) ){
HXLINE( 610)					parameterType = (int)20;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("mat4x2",4e,37,99,bb)) ){
HXLINE( 610)					parameterType = (int)18;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("mat4x3",4f,37,99,bb)) ){
HXLINE( 610)					parameterType = (int)19;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ||  (_hx_switch_0==HX_("uint",9a,03,a6,4d)) ){
HXLINE( 610)					parameterType = (int)8;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("ivec2",47,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec2",53,06,2e,ac)) ){
HXLINE( 610)					parameterType = (int)9;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("dvec4",c4,29,5e,e2)) ||  (_hx_switch_0==HX_("vec4",60,27,4c,4e)) ){
HXLINE( 610)					parameterType = (int)7;
HXDLIN( 610)					goto _hx_goto_24;
            				}
            				/* default */{
HXLINE( 610)					parameterType = null();
            				}
            				_hx_goto_24:;
HXLINE( 637)				if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 639)					this->_hx___glslUniformNames->push(name);
HXLINE( 640)					this->_hx___glslUniformTypes->push(parameterType);
            				}
            				else {
HXLINE( 644)					this->_hx___glslAttribNames->push(name);
HXLINE( 645)					this->_hx___glslAttribTypes->push(parameterType);
            				}
            			}
HXLINE( 651)			position = regex->matchedPos();
HXLINE( 652)			lastMatch = (( (int)(position->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) + ( (int)(position->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Program3D_obj,_hx___processGLSLData,(void))

void Program3D_obj::_hx___setPositionScale( ::lime::utils::ArrayBufferView positionScale){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_659___setPositionScale)
HXLINE( 661)		if (hx::IsEq( this->_hx___format,(int)1 )) {
HXLINE( 661)			return;
            		}
HXLINE( 663)		if (hx::IsNotNull( this->_hx___agalPositionScale )) {
HXLINE( 665)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 666)			{
HXLINE( 666)				int location = this->_hx___agalPositionScale->location;
HXDLIN( 666)				int _hx_tmp;
HXDLIN( 666)				if (hx::IsNotNull( positionScale )) {
HXLINE( 666)					_hx_tmp = ((int)positionScale->length >> (int)(int)2);
            				}
            				else {
HXLINE( 666)					_hx_tmp = (int)0;
            				}
HXDLIN( 666)				gl->uniform4fv(location,_hx_tmp,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(positionScale));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Program3D_obj,_hx___setPositionScale,(void))

void Program3D_obj::_hx___setSamplerState(int sampler, ::openfl::_internal::renderer::SamplerState state){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_675___setSamplerState)
HXDLIN( 675)		this->_hx___samplerStates[sampler] = state;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Program3D_obj,_hx___setSamplerState,(void))

void Program3D_obj::_hx___uploadFromGLSL(::String vertexShaderSource,::String fragmentShaderSource){
            	HX_STACKFRAME(&_hx_pos_536f681b10c755a2_680___uploadFromGLSL)
HXLINE( 682)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 684)		this->_hx___glVertexSource = vertexShaderSource;
HXLINE( 685)		this->_hx___glFragmentSource = fragmentShaderSource;
HXLINE( 687)		this->_hx___glVertexShader = gl->createShader(gl->VERTEX_SHADER);
HXLINE( 688)		gl->shaderSource(this->_hx___glVertexShader,vertexShaderSource);
HXLINE( 689)		gl->compileShader(this->_hx___glVertexShader);
HXLINE( 691)		if (hx::IsEq( gl->getShaderParameter(this->_hx___glVertexShader,gl->COMPILE_STATUS),(int)0 )) {
HXLINE( 693)			::String message = HX_("Error compiling vertex shader",39,c9,c1,b2);
HXLINE( 694)			message = (message + (HX_("\n",0a,00,00,00) + gl->getShaderInfoLog(this->_hx___glVertexShader)));
HXLINE( 695)			message = (message + (HX_("\n",0a,00,00,00) + vertexShaderSource));
HXLINE( 696)			::lime::utils::Log_obj::error(message,hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),696,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__uploadFromGLSL",a9,36,31,0d)));
            		}
HXLINE( 700)		this->_hx___glFragmentShader = gl->createShader(gl->FRAGMENT_SHADER);
HXLINE( 701)		gl->shaderSource(this->_hx___glFragmentShader,fragmentShaderSource);
HXLINE( 702)		gl->compileShader(this->_hx___glFragmentShader);
HXLINE( 704)		if (hx::IsEq( gl->getShaderParameter(this->_hx___glFragmentShader,gl->COMPILE_STATUS),(int)0 )) {
HXLINE( 706)			::String message1 = HX_("Error compiling fragment shader",4d,d0,be,e3);
HXLINE( 707)			message1 = (message1 + (HX_("\n",0a,00,00,00) + gl->getShaderInfoLog(this->_hx___glFragmentShader)));
HXLINE( 708)			message1 = (message1 + (HX_("\n",0a,00,00,00) + fragmentShaderSource));
HXLINE( 709)			::lime::utils::Log_obj::error(message1,hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),709,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__uploadFromGLSL",a9,36,31,0d)));
            		}
HXLINE( 713)		this->_hx___glProgram = gl->createProgram();
HXLINE( 715)		if (hx::IsEq( this->_hx___format,(int)0 )) {
HXLINE( 718)			int _g = (int)0;
HXDLIN( 718)			while((_g < (int)16)){
HXLINE( 718)				_g = (_g + (int)1);
HXDLIN( 718)				int i = (_g - (int)1);
HXLINE( 721)				::String name = (HX_("va",2b,67,00,00) + i);
HXLINE( 723)				if ((vertexShaderSource.indexOf((HX_(" ",20,00,00,00) + name),null()) != (int)-1)) {
HXLINE( 725)					gl->bindAttribLocation(this->_hx___glProgram,i,name);
            				}
            			}
            		}
            		else {
HXLINE( 734)			int _g1 = (int)0;
HXDLIN( 734)			::Array< ::String > _g11 = this->_hx___glslAttribNames;
HXDLIN( 734)			while((_g1 < _g11->length)){
HXLINE( 734)				::String name1 = _g11->__get(_g1);
HXDLIN( 734)				_g1 = (_g1 + (int)1);
HXLINE( 736)				bool _hx_tmp;
HXDLIN( 736)				if ((name1.indexOf(HX_("Position",c9,5c,ac,a4),null()) > (int)-1)) {
HXLINE( 736)					_hx_tmp = ::StringTools_obj::startsWith(name1,HX_("openfl_",cf,ba,42,40));
            				}
            				else {
HXLINE( 736)					_hx_tmp = false;
            				}
HXDLIN( 736)				if (_hx_tmp) {
HXLINE( 738)					gl->bindAttribLocation(this->_hx___glProgram,(int)0,name1);
HXLINE( 739)					goto _hx_goto_29;
            				}
            			}
            			_hx_goto_29:;
            		}
HXLINE( 747)		gl->attachShader(this->_hx___glProgram,this->_hx___glVertexShader);
HXLINE( 748)		gl->attachShader(this->_hx___glProgram,this->_hx___glFragmentShader);
HXLINE( 749)		gl->linkProgram(this->_hx___glProgram);
HXLINE( 751)		if (hx::IsEq( gl->getProgramParameter(this->_hx___glProgram,gl->LINK_STATUS),(int)0 )) {
HXLINE( 753)			::String message2 = HX_("Unable to initialize the shader program",f0,86,8b,39);
HXLINE( 754)			message2 = (message2 + (HX_("\n",0a,00,00,00) + gl->getProgramInfoLog(this->_hx___glProgram)));
HXLINE( 755)			::lime::utils::Log_obj::error(message2,hx::SourceInfo(HX_("Program3D.hx",c9,bd,cd,87),755,HX_("openfl.display3D.Program3D",7c,83,68,f5),HX_("__uploadFromGLSL",a9,36,31,0d)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Program3D_obj,_hx___uploadFromGLSL,(void))


hx::ObjectPtr< Program3D_obj > Program3D_obj::__new( ::openfl::display3D::Context3D context3D, ::Dynamic format) {
	hx::ObjectPtr< Program3D_obj > __this = new Program3D_obj();
	__this->__construct(context3D,format);
	return __this;
}

hx::ObjectPtr< Program3D_obj > Program3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context3D, ::Dynamic format) {
	Program3D_obj *__this = (Program3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Program3D_obj), true, "openfl.display3D.Program3D"));
	*(void **)__this = Program3D_obj::_hx_vtable;
	__this->__construct(context3D,format);
	return __this;
}

Program3D_obj::Program3D_obj()
{
}

void Program3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Program3D);
	HX_MARK_MEMBER_NAME(_hx___agalAlphaSamplerEnabled,"__agalAlphaSamplerEnabled");
	HX_MARK_MEMBER_NAME(_hx___agalAlphaSamplerUniforms,"__agalAlphaSamplerUniforms");
	HX_MARK_MEMBER_NAME(_hx___agalFragmentUniformMap,"__agalFragmentUniformMap");
	HX_MARK_MEMBER_NAME(_hx___agalPositionScale,"__agalPositionScale");
	HX_MARK_MEMBER_NAME(_hx___agalSamplerUniforms,"__agalSamplerUniforms");
	HX_MARK_MEMBER_NAME(_hx___agalSamplerUsageMask,"__agalSamplerUsageMask");
	HX_MARK_MEMBER_NAME(_hx___agalUniforms,"__agalUniforms");
	HX_MARK_MEMBER_NAME(_hx___agalVertexUniformMap,"__agalVertexUniformMap");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___format,"__format");
	HX_MARK_MEMBER_NAME(_hx___glFragmentShader,"__glFragmentShader");
	HX_MARK_MEMBER_NAME(_hx___glFragmentSource,"__glFragmentSource");
	HX_MARK_MEMBER_NAME(_hx___glProgram,"__glProgram");
	HX_MARK_MEMBER_NAME(_hx___glslAttribNames,"__glslAttribNames");
	HX_MARK_MEMBER_NAME(_hx___glslAttribTypes,"__glslAttribTypes");
	HX_MARK_MEMBER_NAME(_hx___glslSamplerNames,"__glslSamplerNames");
	HX_MARK_MEMBER_NAME(_hx___glslUniformNames,"__glslUniformNames");
	HX_MARK_MEMBER_NAME(_hx___glslUniformTypes,"__glslUniformTypes");
	HX_MARK_MEMBER_NAME(_hx___glVertexShader,"__glVertexShader");
	HX_MARK_MEMBER_NAME(_hx___glVertexSource,"__glVertexSource");
	HX_MARK_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_MARK_END_CLASS();
}

void Program3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___agalAlphaSamplerEnabled,"__agalAlphaSamplerEnabled");
	HX_VISIT_MEMBER_NAME(_hx___agalAlphaSamplerUniforms,"__agalAlphaSamplerUniforms");
	HX_VISIT_MEMBER_NAME(_hx___agalFragmentUniformMap,"__agalFragmentUniformMap");
	HX_VISIT_MEMBER_NAME(_hx___agalPositionScale,"__agalPositionScale");
	HX_VISIT_MEMBER_NAME(_hx___agalSamplerUniforms,"__agalSamplerUniforms");
	HX_VISIT_MEMBER_NAME(_hx___agalSamplerUsageMask,"__agalSamplerUsageMask");
	HX_VISIT_MEMBER_NAME(_hx___agalUniforms,"__agalUniforms");
	HX_VISIT_MEMBER_NAME(_hx___agalVertexUniformMap,"__agalVertexUniformMap");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___format,"__format");
	HX_VISIT_MEMBER_NAME(_hx___glFragmentShader,"__glFragmentShader");
	HX_VISIT_MEMBER_NAME(_hx___glFragmentSource,"__glFragmentSource");
	HX_VISIT_MEMBER_NAME(_hx___glProgram,"__glProgram");
	HX_VISIT_MEMBER_NAME(_hx___glslAttribNames,"__glslAttribNames");
	HX_VISIT_MEMBER_NAME(_hx___glslAttribTypes,"__glslAttribTypes");
	HX_VISIT_MEMBER_NAME(_hx___glslSamplerNames,"__glslSamplerNames");
	HX_VISIT_MEMBER_NAME(_hx___glslUniformNames,"__glslUniformNames");
	HX_VISIT_MEMBER_NAME(_hx___glslUniformTypes,"__glslUniformTypes");
	HX_VISIT_MEMBER_NAME(_hx___glVertexShader,"__glVertexShader");
	HX_VISIT_MEMBER_NAME(_hx___glVertexSource,"__glVertexSource");
	HX_VISIT_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
}

hx::Val Program3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"upload") ) { return hx::Val( upload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flush") ) { return hx::Val( _hx___flush_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__format") ) { return hx::Val( _hx___format ); }
		if (HX_FIELD_EQ(inName,"__enable") ) { return hx::Val( _hx___enable_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context ); }
		if (HX_FIELD_EQ(inName,"__disable") ) { return hx::Val( _hx___disable_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__glProgram") ) { return hx::Val( _hx___glProgram ); }
		if (HX_FIELD_EQ(inName,"__markDirty") ) { return hx::Val( _hx___markDirty_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"uploadSources") ) { return hx::Val( uploadSources_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__agalUniforms") ) { return hx::Val( _hx___agalUniforms ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { return hx::Val( _hx___samplerStates ); }
		if (HX_FIELD_EQ(inName,"__deleteShaders") ) { return hx::Val( _hx___deleteShaders_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__glVertexShader") ) { return hx::Val( _hx___glVertexShader ); }
		if (HX_FIELD_EQ(inName,"__glVertexSource") ) { return hx::Val( _hx___glVertexSource ); }
		if (HX_FIELD_EQ(inName,"getConstantIndex") ) { return hx::Val( getConstantIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__uploadFromGLSL") ) { return hx::Val( _hx___uploadFromGLSL_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__glslAttribNames") ) { return hx::Val( _hx___glslAttribNames ); }
		if (HX_FIELD_EQ(inName,"__glslAttribTypes") ) { return hx::Val( _hx___glslAttribTypes ); }
		if (HX_FIELD_EQ(inName,"getAttributeIndex") ) { return hx::Val( getAttributeIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getSamplerState") ) { return hx::Val( _hx___getSamplerState_dyn() ); }
		if (HX_FIELD_EQ(inName,"__processGLSLData") ) { return hx::Val( _hx___processGLSLData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setSamplerState") ) { return hx::Val( _hx___setSamplerState_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__glFragmentShader") ) { return hx::Val( _hx___glFragmentShader ); }
		if (HX_FIELD_EQ(inName,"__glFragmentSource") ) { return hx::Val( _hx___glFragmentSource ); }
		if (HX_FIELD_EQ(inName,"__glslSamplerNames") ) { return hx::Val( _hx___glslSamplerNames ); }
		if (HX_FIELD_EQ(inName,"__glslUniformNames") ) { return hx::Val( _hx___glslUniformNames ); }
		if (HX_FIELD_EQ(inName,"__glslUniformTypes") ) { return hx::Val( _hx___glslUniformTypes ); }
		if (HX_FIELD_EQ(inName,"__setPositionScale") ) { return hx::Val( _hx___setPositionScale_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__agalPositionScale") ) { return hx::Val( _hx___agalPositionScale ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__agalSamplerUniforms") ) { return hx::Val( _hx___agalSamplerUniforms ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__agalSamplerUsageMask") ) { return hx::Val( _hx___agalSamplerUsageMask ); }
		if (HX_FIELD_EQ(inName,"__agalVertexUniformMap") ) { return hx::Val( _hx___agalVertexUniformMap ); }
		if (HX_FIELD_EQ(inName,"__buildAGALUniformList") ) { return hx::Val( _hx___buildAGALUniformList_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__agalFragmentUniformMap") ) { return hx::Val( _hx___agalFragmentUniformMap ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__agalAlphaSamplerEnabled") ) { return hx::Val( _hx___agalAlphaSamplerEnabled ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__agalAlphaSamplerUniforms") ) { return hx::Val( _hx___agalAlphaSamplerUniforms ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Program3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__format") ) { _hx___format=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__glProgram") ) { _hx___glProgram=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__agalUniforms") ) { _hx___agalUniforms=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { _hx___samplerStates=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__glVertexShader") ) { _hx___glVertexShader=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__glVertexSource") ) { _hx___glVertexSource=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__glslAttribNames") ) { _hx___glslAttribNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__glslAttribTypes") ) { _hx___glslAttribTypes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__glFragmentShader") ) { _hx___glFragmentShader=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__glFragmentSource") ) { _hx___glFragmentSource=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__glslSamplerNames") ) { _hx___glslSamplerNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__glslUniformNames") ) { _hx___glslUniformNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__glslUniformTypes") ) { _hx___glslUniformTypes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__agalPositionScale") ) { _hx___agalPositionScale=inValue.Cast<  ::openfl::display3D::Uniform >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__agalSamplerUniforms") ) { _hx___agalSamplerUniforms=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__agalSamplerUsageMask") ) { _hx___agalSamplerUsageMask=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__agalVertexUniformMap") ) { _hx___agalVertexUniformMap=inValue.Cast<  ::openfl::display3D::UniformMap >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__agalFragmentUniformMap") ) { _hx___agalFragmentUniformMap=inValue.Cast<  ::openfl::display3D::UniformMap >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__agalAlphaSamplerEnabled") ) { _hx___agalAlphaSamplerEnabled=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__agalAlphaSamplerUniforms") ) { _hx___agalAlphaSamplerUniforms=inValue.Cast<  ::List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Program3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__agalAlphaSamplerEnabled","\x66","\x8c","\x0e","\x14"));
	outFields->push(HX_HCSTRING("__agalAlphaSamplerUniforms","\x3a","\x2d","\x4e","\x8e"));
	outFields->push(HX_HCSTRING("__agalFragmentUniformMap","\x89","\xa8","\x27","\xea"));
	outFields->push(HX_HCSTRING("__agalPositionScale","\xf0","\xe3","\xe7","\x34"));
	outFields->push(HX_HCSTRING("__agalSamplerUniforms","\x76","\x72","\x86","\xf3"));
	outFields->push(HX_HCSTRING("__agalSamplerUsageMask","\x16","\xc9","\x49","\x7f"));
	outFields->push(HX_HCSTRING("__agalUniforms","\x50","\x74","\xdc","\x99"));
	outFields->push(HX_HCSTRING("__agalVertexUniformMap","\xdd","\xde","\xb1","\xfa"));
	outFields->push(HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"));
	outFields->push(HX_HCSTRING("__format","\x57","\xfa","\xbd","\xa5"));
	outFields->push(HX_HCSTRING("__glFragmentShader","\x3a","\x67","\x4a","\x4e"));
	outFields->push(HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63"));
	outFields->push(HX_HCSTRING("__glProgram","\xbf","\x1f","\xe0","\xef"));
	outFields->push(HX_HCSTRING("__glslAttribNames","\xa0","\x47","\xfc","\xf6"));
	outFields->push(HX_HCSTRING("__glslAttribTypes","\x51","\x28","\x43","\x7b"));
	outFields->push(HX_HCSTRING("__glslSamplerNames","\xde","\x33","\x75","\xe1"));
	outFields->push(HX_HCSTRING("__glslUniformNames","\x32","\x18","\x0d","\x7a"));
	outFields->push(HX_HCSTRING("__glslUniformTypes","\xe3","\xf8","\x53","\xfe"));
	outFields->push(HX_HCSTRING("__glVertexShader","\x8e","\x06","\x79","\x7a"));
	outFields->push(HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f"));
	outFields->push(HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Program3D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Program3D_obj,_hx___agalAlphaSamplerEnabled),HX_HCSTRING("__agalAlphaSamplerEnabled","\x66","\x8c","\x0e","\x14")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Program3D_obj,_hx___agalAlphaSamplerUniforms),HX_HCSTRING("__agalAlphaSamplerUniforms","\x3a","\x2d","\x4e","\x8e")},
	{hx::fsObject /*::openfl::display3D::UniformMap*/ ,(int)offsetof(Program3D_obj,_hx___agalFragmentUniformMap),HX_HCSTRING("__agalFragmentUniformMap","\x89","\xa8","\x27","\xea")},
	{hx::fsObject /*::openfl::display3D::Uniform*/ ,(int)offsetof(Program3D_obj,_hx___agalPositionScale),HX_HCSTRING("__agalPositionScale","\xf0","\xe3","\xe7","\x34")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Program3D_obj,_hx___agalSamplerUniforms),HX_HCSTRING("__agalSamplerUniforms","\x76","\x72","\x86","\xf3")},
	{hx::fsInt,(int)offsetof(Program3D_obj,_hx___agalSamplerUsageMask),HX_HCSTRING("__agalSamplerUsageMask","\x16","\xc9","\x49","\x7f")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Program3D_obj,_hx___agalUniforms),HX_HCSTRING("__agalUniforms","\x50","\x74","\xdc","\x99")},
	{hx::fsObject /*::openfl::display3D::UniformMap*/ ,(int)offsetof(Program3D_obj,_hx___agalVertexUniformMap),HX_HCSTRING("__agalVertexUniformMap","\xdd","\xde","\xb1","\xfa")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(Program3D_obj,_hx___context),HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Program3D_obj,_hx___format),HX_HCSTRING("__format","\x57","\xfa","\xbd","\xa5")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Program3D_obj,_hx___glFragmentShader),HX_HCSTRING("__glFragmentShader","\x3a","\x67","\x4a","\x4e")},
	{hx::fsString,(int)offsetof(Program3D_obj,_hx___glFragmentSource),HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Program3D_obj,_hx___glProgram),HX_HCSTRING("__glProgram","\xbf","\x1f","\xe0","\xef")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Program3D_obj,_hx___glslAttribNames),HX_HCSTRING("__glslAttribNames","\xa0","\x47","\xfc","\xf6")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Program3D_obj,_hx___glslAttribTypes),HX_HCSTRING("__glslAttribTypes","\x51","\x28","\x43","\x7b")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Program3D_obj,_hx___glslSamplerNames),HX_HCSTRING("__glslSamplerNames","\xde","\x33","\x75","\xe1")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Program3D_obj,_hx___glslUniformNames),HX_HCSTRING("__glslUniformNames","\x32","\x18","\x0d","\x7a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Program3D_obj,_hx___glslUniformTypes),HX_HCSTRING("__glslUniformTypes","\xe3","\xf8","\x53","\xfe")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Program3D_obj,_hx___glVertexShader),HX_HCSTRING("__glVertexShader","\x8e","\x06","\x79","\x7a")},
	{hx::fsString,(int)offsetof(Program3D_obj,_hx___glVertexSource),HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Program3D_obj,_hx___samplerStates),HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Program3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Program3D_obj_sMemberFields[] = {
	HX_HCSTRING("__agalAlphaSamplerEnabled","\x66","\x8c","\x0e","\x14"),
	HX_HCSTRING("__agalAlphaSamplerUniforms","\x3a","\x2d","\x4e","\x8e"),
	HX_HCSTRING("__agalFragmentUniformMap","\x89","\xa8","\x27","\xea"),
	HX_HCSTRING("__agalPositionScale","\xf0","\xe3","\xe7","\x34"),
	HX_HCSTRING("__agalSamplerUniforms","\x76","\x72","\x86","\xf3"),
	HX_HCSTRING("__agalSamplerUsageMask","\x16","\xc9","\x49","\x7f"),
	HX_HCSTRING("__agalUniforms","\x50","\x74","\xdc","\x99"),
	HX_HCSTRING("__agalVertexUniformMap","\xdd","\xde","\xb1","\xfa"),
	HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"),
	HX_HCSTRING("__format","\x57","\xfa","\xbd","\xa5"),
	HX_HCSTRING("__glFragmentShader","\x3a","\x67","\x4a","\x4e"),
	HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63"),
	HX_HCSTRING("__glProgram","\xbf","\x1f","\xe0","\xef"),
	HX_HCSTRING("__glslAttribNames","\xa0","\x47","\xfc","\xf6"),
	HX_HCSTRING("__glslAttribTypes","\x51","\x28","\x43","\x7b"),
	HX_HCSTRING("__glslSamplerNames","\xde","\x33","\x75","\xe1"),
	HX_HCSTRING("__glslUniformNames","\x32","\x18","\x0d","\x7a"),
	HX_HCSTRING("__glslUniformTypes","\xe3","\xf8","\x53","\xfe"),
	HX_HCSTRING("__glVertexShader","\x8e","\x06","\x79","\x7a"),
	HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f"),
	HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("getAttributeIndex","\x8c","\x64","\x2d","\x4d"),
	HX_HCSTRING("getConstantIndex","\x98","\x68","\xf9","\x78"),
	HX_HCSTRING("upload","\x01","\xca","\x59","\x8c"),
	HX_HCSTRING("uploadSources","\x37","\x1f","\xa0","\x2e"),
	HX_HCSTRING("__buildAGALUniformList","\x93","\x6f","\x2b","\x39"),
	HX_HCSTRING("__deleteShaders","\xa3","\x4d","\xc2","\x45"),
	HX_HCSTRING("__disable","\xc8","\xba","\xa6","\x32"),
	HX_HCSTRING("__enable","\xa3","\x19","\xb7","\xa0"),
	HX_HCSTRING("__flush","\xa4","\xbb","\xf9","\x6c"),
	HX_HCSTRING("__getSamplerState","\x7f","\x6a","\x04","\x62"),
	HX_HCSTRING("__markDirty","\xa5","\x79","\xcf","\x64"),
	HX_HCSTRING("__processGLSLData","\x97","\xcd","\x6f","\x5e"),
	HX_HCSTRING("__setPositionScale","\x3f","\xc3","\xc0","\x0e"),
	HX_HCSTRING("__setSamplerState","\x8b","\xe7","\xcf","\x5d"),
	HX_HCSTRING("__uploadFromGLSL","\xa9","\x36","\x31","\x0d"),
	::String(null()) };

static void Program3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Program3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Program3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Program3D_obj::__mClass,"__mClass");
};

#endif

hx::Class Program3D_obj::__mClass;

void Program3D_obj::__register()
{
	hx::Object *dummy = new Program3D_obj;
	Program3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.Program3D","\x7c","\x83","\x68","\xf5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Program3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Program3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Program3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Program3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Program3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Program3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
