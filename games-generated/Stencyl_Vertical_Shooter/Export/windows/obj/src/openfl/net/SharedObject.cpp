// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl__internal_Lib
#include <openfl/_internal/Lib.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_NetConnection
#include <openfl/net/NetConnection.h>
#endif
#ifndef INCLUDED_openfl_net_SharedObject
#include <openfl/net/SharedObject.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1b14c676d7ad0011_229_new,"openfl.net.SharedObject","new",0x9a737b25,"openfl.net.SharedObject.new","openfl/net/SharedObject.hx",229,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_251_clear,"openfl.net.SharedObject","clear",0x69cf1792,"openfl.net.SharedObject.clear","openfl/net/SharedObject.hx",251,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_284_close,"openfl.net.SharedObject","close",0x69d6bdbd,"openfl.net.SharedObject.close","openfl/net/SharedObject.hx",284,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_293_connect,"openfl.net.SharedObject","connect",0x37ad2d2f,"openfl.net.SharedObject.connect","openfl/net/SharedObject.hx",293,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_357_flush,"openfl.net.SharedObject","flush",0x240f08c9,"openfl.net.SharedObject.flush","openfl/net/SharedObject.hx",357,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_680_send,"openfl.net.SharedObject","send",0x8de64ee3,"openfl.net.SharedObject.send","openfl/net/SharedObject.hx",680,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_685_setDirty,"openfl.net.SharedObject","setDirty",0xad2ae42b,"openfl.net.SharedObject.setDirty","openfl/net/SharedObject.hx",685,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_694_setProperty,"openfl.net.SharedObject","setProperty",0xd13889dc,"openfl.net.SharedObject.setProperty","openfl/net/SharedObject.hx",694,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_875_get_size,"openfl.net.SharedObject","get_size",0x91348765,"openfl.net.SharedObject.get_size","openfl/net/SharedObject.hx",875,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_556_getLocal,"openfl.net.SharedObject","getLocal",0x9dee0410,"openfl.net.SharedObject.getLocal","openfl/net/SharedObject.hx",556,0x31b7bda9)
static const ::String _hx_array_data_0aac04b3_11[] = {
	HX_(" ",20,00,00,00),HX_("~",7e,00,00,00),HX_("%",25,00,00,00),HX_("&",26,00,00,00),HX_("\\",5c,00,00,00),HX_(";",3b,00,00,00),HX_(":",3a,00,00,00),HX_("\"",22,00,00,00),HX_("'",27,00,00,00),HX_(",",2c,00,00,00),HX_("<",3c,00,00,00),HX_(">",3e,00,00,00),HX_("?",3f,00,00,00),HX_("#",23,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_669_getRemote,"openfl.net.SharedObject","getRemote",0x3d1eb041,"openfl.net.SharedObject.getRemote","openfl/net/SharedObject.hx",669,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_703___getPath,"openfl.net.SharedObject","__getPath",0x5a6272c0,"openfl.net.SharedObject.__getPath","openfl/net/SharedObject.hx",703,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_746___mkdir,"openfl.net.SharedObject","__mkdir",0x963e96d4,"openfl.net.SharedObject.__mkdir","openfl/net/SharedObject.hx",746,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_805___resolveClass,"openfl.net.SharedObject","__resolveClass",0x44fa3227,"openfl.net.SharedObject.__resolveClass","openfl/net/SharedObject.hx",805,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_857_application_onExit,"openfl.net.SharedObject","application_onExit",0x83beab07,"openfl.net.SharedObject.application_onExit","openfl/net/SharedObject.hx",857,0x31b7bda9)
HX_LOCAL_STACK_FRAME(_hx_pos_1b14c676d7ad0011_177_boot,"openfl.net.SharedObject","boot",0x82b145cd,"openfl.net.SharedObject.boot","openfl/net/SharedObject.hx",177,0x31b7bda9)
namespace openfl{
namespace net{

void SharedObject_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_229_new)
HXLINE( 231)		super::__construct(null());
HXLINE( 233)		this->client = hx::ObjectPtr<OBJ_>(this);
HXLINE( 234)		this->objectEncoding = ::openfl::net::SharedObject_obj::defaultObjectEncoding;
            	}

Dynamic SharedObject_obj::__CreateEmpty() { return new SharedObject_obj; }

void *SharedObject_obj::_hx_vtable = 0;

Dynamic SharedObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SharedObject_obj > _hx_result = new SharedObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SharedObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
	} else {
		return inClassId==(int)0x54b89ef1;
	}
}

void SharedObject_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_251_clear)
HXLINE( 253)		this->data =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 255)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 269)			::String path = ::openfl::net::SharedObject_obj::_hx___getPath(this->_hx___localPath,this->_hx___name);
HXLINE( 271)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 273)				::sys::FileSystem_obj::deleteFile(path);
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SharedObject_obj,clear,(void))

void SharedObject_obj::close(){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_284_close)
            	}


HX_DEFINE_DYNAMIC_FUNC0(SharedObject_obj,close,(void))

void SharedObject_obj::connect( ::openfl::net::NetConnection myConnection,::String params){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_293_connect)
HXDLIN( 293)		::openfl::_internal::Lib_obj::notImplemented(hx::SourceInfo(HX_("SharedObject.hx",da,51,3d,f3),293,HX_("openfl.net.SharedObject",b3,04,ac,0a),HX_("connect",ea,3b,80,15)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(SharedObject_obj,connect,(void))

 ::Dynamic SharedObject_obj::flush(hx::Null< int >  __o_minDiskSpace){
int minDiskSpace = __o_minDiskSpace.Default(0);
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_357_flush)
HXLINE( 359)		if ((::Reflect_obj::fields(this->data)->length == (int)0)) {
HXLINE( 361)			return (int)0;
            		}
HXLINE( 365)		::String encodedData = ::haxe::Serializer_obj::run(this->data);
HXLINE( 367)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 382)			::String path = ::openfl::net::SharedObject_obj::_hx___getPath(this->_hx___localPath,this->_hx___name);
HXLINE( 383)			::String directory = ::haxe::io::Path_obj::directory(path);
HXLINE( 385)			if (!(::sys::FileSystem_obj::exists(directory))) {
HXLINE( 387)				::openfl::net::SharedObject_obj::_hx___mkdir(directory);
            			}
HXLINE( 391)			 ::sys::io::FileOutput output = ::sys::io::File_obj::write(path,false);
HXLINE( 392)			output->writeString(encodedData);
HXLINE( 393)			output->close();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 399)				return (int)1;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 403)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,flush,return )

void SharedObject_obj::send(::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_680_send)
HXDLIN( 680)		::openfl::_internal::Lib_obj::notImplemented(hx::SourceInfo(HX_("SharedObject.hx",da,51,3d,f3),680,HX_("openfl.net.SharedObject",b3,04,ac,0a),HX_("send",48,8d,50,4c)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,send,(void))

void SharedObject_obj::setDirty(::String propertyName){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_685_setDirty)
            	}


HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,setDirty,(void))

void SharedObject_obj::setProperty(::String propertyName, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_694_setProperty)
HXDLIN( 694)		if (hx::IsNotNull( this->data )) {
HXLINE( 696)			::Reflect_obj::setField(this->data,propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SharedObject_obj,setProperty,(void))

int SharedObject_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_875_get_size)
HXDLIN( 875)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 877)			::String d = ::haxe::Serializer_obj::run(this->data);
HXLINE( 878)			return ::haxe::io::Bytes_obj::ofString(d,null())->length;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 882)				return (int)0;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 875)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SharedObject_obj,get_size,return )

int SharedObject_obj::defaultObjectEncoding;

 ::haxe::ds::StringMap SharedObject_obj::_hx___sharedObjects;

 ::openfl::net::SharedObject SharedObject_obj::getLocal(::String name,::String localPath,hx::Null< bool >  __o_secure){
bool secure = __o_secure.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_1b14c676d7ad0011_556_getLocal)
HXLINE( 558)		::Array< ::String > illegalValues = ::Array_obj< ::String >::fromData( _hx_array_data_0aac04b3_11,14);
HXLINE( 559)		bool allowed = true;
HXLINE( 561)		bool _hx_tmp;
HXDLIN( 561)		if (hx::IsNotNull( name )) {
HXLINE( 561)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 561)			_hx_tmp = true;
            		}
HXDLIN( 561)		if (_hx_tmp) {
HXLINE( 563)			allowed = false;
            		}
            		else {
HXLINE( 567)			int _g = (int)0;
HXDLIN( 567)			while((_g < illegalValues->length)){
HXLINE( 567)				::String value = illegalValues->__get(_g);
HXDLIN( 567)				_g = (_g + (int)1);
HXLINE( 569)				if ((name.indexOf(value,null()) > (int)-1)) {
HXLINE( 571)					allowed = false;
HXLINE( 572)					goto _hx_goto_9;
            				}
            			}
            			_hx_goto_9:;
            		}
HXLINE( 580)		if (!(allowed)) {
HXLINE( 582)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Error #2134: Cannot create SharedObject.",32,71,4f,04),null()));
            		}
HXLINE( 587)		if (hx::IsNull( localPath )) {
HXLINE( 592)			localPath = HX_("",00,00,00,00);
            		}
HXLINE( 597)		if (hx::IsNull( ::openfl::net::SharedObject_obj::_hx___sharedObjects )) {
HXLINE( 599)			::openfl::net::SharedObject_obj::_hx___sharedObjects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 602)			if (hx::IsNotNull( ::lime::app::Application_obj::current )) {
HXLINE( 604)				::lime::app::Application_obj::current->onExit->add(::openfl::net::SharedObject_obj::application_onExit_dyn(),null(),null());
            			}
            		}
HXLINE( 611)		::String id = ((localPath + HX_("/",2f,00,00,00)) + name);
HXLINE( 613)		if (!(::openfl::net::SharedObject_obj::_hx___sharedObjects->exists(id))) {
HXLINE( 615)			 ::openfl::net::SharedObject sharedObject =  ::openfl::net::SharedObject_obj::__alloc( HX_CTX );
HXLINE( 616)			sharedObject->data =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 617)			sharedObject->_hx___localPath = localPath;
HXLINE( 618)			sharedObject->_hx___name = name;
HXLINE( 620)			::String encodedData = null();
HXLINE( 622)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 636)				::String path = ::openfl::net::SharedObject_obj::_hx___getPath(localPath,name);
HXLINE( 638)				if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 640)					encodedData = ::sys::io::File_obj::getContent(path);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 648)			bool _hx_tmp1;
HXDLIN( 648)			if (hx::IsNotNull( encodedData )) {
HXLINE( 648)				_hx_tmp1 = (encodedData != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 648)				_hx_tmp1 = false;
            			}
HXDLIN( 648)			if (_hx_tmp1) {
HXLINE( 650)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 652)					 ::haxe::Unserializer unserializer =  ::haxe::Unserializer_obj::__alloc( HX_CTX ,encodedData);
HXLINE( 653)					unserializer->setResolver( ::Dynamic(hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("resolveClass",ac,bd,dd,80),::openfl::net::SharedObject_obj::_hx___resolveClass_dyn())
            						->setFixed(1,HX_("resolveEnum",0d,90,51,de),::Type_obj::resolveEnum_dyn())));
HXLINE( 654)					sharedObject->data = unserializer->unserialize();
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic e1 = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
HXLINE( 660)			::openfl::net::SharedObject_obj::_hx___sharedObjects->set(id,sharedObject);
            		}
HXLINE( 664)		return ::openfl::net::SharedObject_obj::_hx___sharedObjects->get(id).StaticCast<  ::openfl::net::SharedObject >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SharedObject_obj,getLocal,return )

 ::openfl::net::SharedObject SharedObject_obj::getRemote(::String name,::String remotePath, ::Dynamic __o_persistence,hx::Null< bool >  __o_secure){
 ::Dynamic persistence = __o_persistence.Default(false);
bool secure = __o_secure.Default(false);
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_669_getRemote)
HXLINE( 671)		::openfl::_internal::Lib_obj::notImplemented(hx::SourceInfo(HX_("SharedObject.hx",da,51,3d,f3),671,HX_("openfl.net.SharedObject",b3,04,ac,0a),HX_("getRemote",bc,23,df,80)));
HXLINE( 673)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SharedObject_obj,getRemote,return )

::String SharedObject_obj::_hx___getPath(::String localPath,::String name){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_703___getPath)
HXLINE( 706)		::String path = (((::lime::_hx_system::System_obj::get_applicationStorageDirectory() + HX_("/",2f,00,00,00)) + localPath) + HX_("/",2f,00,00,00));
HXLINE( 708)		name = ::StringTools_obj::replace(name,HX_("//",20,29,00,00),HX_("/",2f,00,00,00));
HXLINE( 709)		name = ::StringTools_obj::replace(name,HX_("//",20,29,00,00),HX_("/",2f,00,00,00));
HXLINE( 711)		if (::StringTools_obj::startsWith(name,HX_("/",2f,00,00,00))) {
HXLINE( 713)			name = name.substr((int)1,null());
            		}
HXLINE( 717)		if (::StringTools_obj::endsWith(name,HX_("/",2f,00,00,00))) {
HXLINE( 719)			name = name.substring((int)0,(name.length - (int)1));
            		}
HXLINE( 723)		if ((name.indexOf(HX_("/",2f,00,00,00),null()) > (int)-1)) {
HXLINE( 725)			::Array< ::String > split = name.split(HX_("/",2f,00,00,00));
HXLINE( 726)			name = HX_("",00,00,00,00);
HXLINE( 728)			{
HXLINE( 728)				int _g1 = (int)0;
HXDLIN( 728)				int _g = (split->length - (int)1);
HXDLIN( 728)				while((_g1 < _g)){
HXLINE( 728)					_g1 = (_g1 + (int)1);
HXDLIN( 728)					int i = (_g1 - (int)1);
HXLINE( 730)					name = (name + ((HX_("#",23,00,00,00) + split->__get(i)) + HX_("/",2f,00,00,00)));
            				}
            			}
HXLINE( 734)			name = (name + split->__get((split->length - (int)1)));
            		}
HXLINE( 738)		return ((path + name) + HX_(".sol",e2,74,bf,1e));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SharedObject_obj,_hx___getPath,return )

void SharedObject_obj::_hx___mkdir(::String directory){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_746___mkdir)
HXLINE( 752)		directory = ::StringTools_obj::replace(directory,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 753)		::String total = HX_("",00,00,00,00);
HXLINE( 755)		if ((directory.substr((int)0,(int)1) == HX_("/",2f,00,00,00))) {
HXLINE( 757)			total = HX_("/",2f,00,00,00);
            		}
HXLINE( 761)		::Array< ::String > parts = directory.split(HX_("/",2f,00,00,00));
HXLINE( 762)		::String oldPath = HX_("",00,00,00,00);
HXLINE( 764)		bool _hx_tmp;
HXDLIN( 764)		if ((parts->length > (int)0)) {
HXLINE( 764)			_hx_tmp = (parts->__get((int)0).indexOf(HX_(":",3a,00,00,00),null()) > (int)-1);
            		}
            		else {
HXLINE( 764)			_hx_tmp = false;
            		}
HXDLIN( 764)		if (_hx_tmp) {
HXLINE( 766)			oldPath = ::Sys_obj::getCwd();
HXLINE( 767)			::Sys_obj::setCwd((parts->__get((int)0) + HX_("\\",5c,00,00,00)));
HXLINE( 768)			parts->shift();
            		}
HXLINE( 772)		{
HXLINE( 772)			int _g = (int)0;
HXDLIN( 772)			while((_g < parts->length)){
HXLINE( 772)				::String part = parts->__get(_g);
HXDLIN( 772)				_g = (_g + (int)1);
HXLINE( 774)				bool _hx_tmp1;
HXDLIN( 774)				if ((part != HX_(".",2e,00,00,00))) {
HXLINE( 774)					_hx_tmp1 = (part != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 774)					_hx_tmp1 = false;
            				}
HXDLIN( 774)				if (_hx_tmp1) {
HXLINE( 776)					bool _hx_tmp2;
HXDLIN( 776)					if ((total != HX_("",00,00,00,00))) {
HXLINE( 776)						_hx_tmp2 = (total != HX_("/",2f,00,00,00));
            					}
            					else {
HXLINE( 776)						_hx_tmp2 = false;
            					}
HXDLIN( 776)					if (_hx_tmp2) {
HXLINE( 778)						total = (total + HX_("/",2f,00,00,00));
            					}
HXLINE( 782)					total = (total + part);
HXLINE( 784)					if (!(::sys::FileSystem_obj::exists(total))) {
HXLINE( 786)						::sys::FileSystem_obj::createDirectory(total);
            					}
            				}
            			}
            		}
HXLINE( 794)		if ((oldPath != HX_("",00,00,00,00))) {
HXLINE( 796)			::Sys_obj::setCwd(oldPath);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,_hx___mkdir,(void))

hx::Class SharedObject_obj::_hx___resolveClass(::String name){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_805___resolveClass)
HXLINE( 807)		if (hx::IsNotNull( name )) {
HXLINE( 809)			if (::StringTools_obj::startsWith(name,HX_("neash.",ef,97,2f,63))) {
HXLINE( 811)				name = ::StringTools_obj::replace(name,HX_("neash.",ef,97,2f,63),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 815)			if (::StringTools_obj::startsWith(name,HX_("native.",b7,9a,13,b7))) {
HXLINE( 817)				name = ::StringTools_obj::replace(name,HX_("native.",b7,9a,13,b7),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 821)			if (::StringTools_obj::startsWith(name,HX_("flash.",7e,c4,22,38))) {
HXLINE( 823)				name = ::StringTools_obj::replace(name,HX_("flash.",7e,c4,22,38),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 827)			if (::StringTools_obj::startsWith(name,HX_("openfl._v2.",51,5c,9c,49))) {
HXLINE( 829)				name = ::StringTools_obj::replace(name,HX_("openfl._v2.",51,5c,9c,49),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 833)			if (::StringTools_obj::startsWith(name,HX_("openfl._legacy.",e4,67,0c,9f))) {
HXLINE( 835)				name = ::StringTools_obj::replace(name,HX_("openfl._legacy.",e4,67,0c,9f),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 839)			return ::Type_obj::resolveClass(name);
            		}
HXLINE( 843)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,_hx___resolveClass,return )

void SharedObject_obj::application_onExit(int _){
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_857_application_onExit)
HXDLIN( 857)		 ::Dynamic sharedObject = ::openfl::net::SharedObject_obj::_hx___sharedObjects->iterator();
HXDLIN( 857)		while(( (bool)(sharedObject->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 857)			 ::openfl::net::SharedObject sharedObject1 = ( ( ::openfl::net::SharedObject)(sharedObject->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 859)			sharedObject1->flush(null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,application_onExit,(void))


hx::ObjectPtr< SharedObject_obj > SharedObject_obj::__new() {
	hx::ObjectPtr< SharedObject_obj > __this = new SharedObject_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SharedObject_obj > SharedObject_obj::__alloc(hx::Ctx *_hx_ctx) {
	SharedObject_obj *__this = (SharedObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SharedObject_obj), true, "openfl.net.SharedObject"));
	*(void **)__this = SharedObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SharedObject_obj::SharedObject_obj()
{
}

void SharedObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SharedObject);
	HX_MARK_MEMBER_NAME(client,"client");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(fps,"fps");
	HX_MARK_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_MARK_MEMBER_NAME(_hx___localPath,"__localPath");
	HX_MARK_MEMBER_NAME(_hx___name,"__name");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SharedObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(client,"client");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(fps,"fps");
	HX_VISIT_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_VISIT_MEMBER_NAME(_hx___localPath,"__localPath");
	HX_VISIT_MEMBER_NAME(_hx___name,"__name");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SharedObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { return hx::Val( fps ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		if (HX_FIELD_EQ(inName,"send") ) { return hx::Val( send_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn() ); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"client") ) { return hx::Val( client ); }
		if (HX_FIELD_EQ(inName,"__name") ) { return hx::Val( _hx___name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"connect") ) { return hx::Val( connect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setDirty") ) { return hx::Val( setDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__localPath") ) { return hx::Val( _hx___localPath ); }
		if (HX_FIELD_EQ(inName,"setProperty") ) { return hx::Val( setProperty_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { return hx::Val( objectEncoding ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SharedObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__mkdir") ) { outValue = _hx___mkdir_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getLocal") ) { outValue = getLocal_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getRemote") ) { outValue = getRemote_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getPath") ) { outValue = _hx___getPath_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__resolveClass") ) { outValue = _hx___resolveClass_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__sharedObjects") ) { outValue = ( _hx___sharedObjects ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"application_onExit") ) { outValue = application_onExit_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultObjectEncoding") ) { outValue = ( defaultObjectEncoding ); return true; }
	}
	return false;
}

hx::Val SharedObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { fps=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"client") ) { client=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__name") ) { _hx___name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__localPath") ) { _hx___localPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { objectEncoding=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SharedObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__sharedObjects") ) { _hx___sharedObjects=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultObjectEncoding") ) { defaultObjectEncoding=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void SharedObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("client","\x4b","\xca","\x4f","\x0a"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00"));
	outFields->push(HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("__localPath","\x90","\xb5","\xc0","\x3a"));
	outFields->push(HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SharedObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SharedObject_obj,client),HX_HCSTRING("client","\x4b","\xca","\x4f","\x0a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SharedObject_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsFloat,(int)offsetof(SharedObject_obj,fps),HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00")},
	{hx::fsInt,(int)offsetof(SharedObject_obj,objectEncoding),HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a")},
	{hx::fsString,(int)offsetof(SharedObject_obj,_hx___localPath),HX_HCSTRING("__localPath","\x90","\xb5","\xc0","\x3a")},
	{hx::fsString,(int)offsetof(SharedObject_obj,_hx___name),HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SharedObject_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &SharedObject_obj::defaultObjectEncoding,HX_HCSTRING("defaultObjectEncoding","\x53","\xfb","\xeb","\xff")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &SharedObject_obj::_hx___sharedObjects,HX_HCSTRING("__sharedObjects","\x8f","\xb9","\xf2","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SharedObject_obj_sMemberFields[] = {
	HX_HCSTRING("client","\x4b","\xca","\x4f","\x0a"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00"),
	HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"),
	HX_HCSTRING("__localPath","\x90","\xb5","\xc0","\x3a"),
	HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("connect","\xea","\x3b","\x80","\x15"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("send","\x48","\x8d","\x50","\x4c"),
	HX_HCSTRING("setDirty","\x10","\xb9","\x04","\xe8"),
	HX_HCSTRING("setProperty","\x17","\x12","\x99","\xdc"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	::String(null()) };

static void SharedObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SharedObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SharedObject_obj::defaultObjectEncoding,"defaultObjectEncoding");
	HX_MARK_MEMBER_NAME(SharedObject_obj::_hx___sharedObjects,"__sharedObjects");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SharedObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SharedObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SharedObject_obj::defaultObjectEncoding,"defaultObjectEncoding");
	HX_VISIT_MEMBER_NAME(SharedObject_obj::_hx___sharedObjects,"__sharedObjects");
};

#endif

hx::Class SharedObject_obj::__mClass;

static ::String SharedObject_obj_sStaticFields[] = {
	HX_HCSTRING("defaultObjectEncoding","\x53","\xfb","\xeb","\xff"),
	HX_HCSTRING("__sharedObjects","\x8f","\xb9","\xf2","\xe8"),
	HX_HCSTRING("getLocal","\xf5","\xd8","\xc7","\xd8"),
	HX_HCSTRING("getRemote","\xbc","\x23","\xdf","\x80"),
	HX_HCSTRING("__getPath","\x3b","\xe6","\x22","\x9e"),
	HX_HCSTRING("__mkdir","\x8f","\xa5","\x11","\x74"),
	HX_HCSTRING("__resolveClass","\xcc","\x40","\x9e","\xa1"),
	HX_HCSTRING("application_onExit","\x2c","\x70","\x9f","\x9f"),
	::String(null())
};

void SharedObject_obj::__register()
{
	hx::Object *dummy = new SharedObject_obj;
	SharedObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.net.SharedObject","\xb3","\x04","\xac","\x0a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SharedObject_obj::__GetStatic;
	__mClass->mSetStaticField = &SharedObject_obj::__SetStatic;
	__mClass->mMarkFunc = SharedObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SharedObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SharedObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SharedObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SharedObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SharedObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SharedObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SharedObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1b14c676d7ad0011_177_boot)
HXDLIN( 177)		defaultObjectEncoding = (int)10;
            	}
}

} // end namespace openfl
} // end namespace net
