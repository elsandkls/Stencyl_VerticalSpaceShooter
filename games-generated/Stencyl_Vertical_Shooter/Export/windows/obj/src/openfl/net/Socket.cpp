// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_openfl__internal_Lib
#include <openfl/_internal/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IOError
#include <openfl/errors/IOError.h>
#endif
#ifndef INCLUDED_openfl_errors_SecurityError
#include <openfl/errors/SecurityError.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_ProgressEvent
#include <openfl/events/ProgressEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_net_Socket
#include <openfl/net/Socket.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_76_new,"openfl.net.Socket","new",0xed4fa1d4,"openfl.net.Socket.new","openfl/net/Socket.hx",76,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_94_connect,"openfl.net.Socket","connect",0x25b3d75e,"openfl.net.Socket.connect","openfl/net/Socket.hx",94,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_182_close,"openfl.net.Socket","close",0x490d2e2c,"openfl.net.Socket.close","openfl/net/Socket.hx",182,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_195_flush,"openfl.net.Socket","flush",0x03457938,"openfl.net.Socket.flush","openfl/net/Socket.hx",195,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_228_readBoolean,"openfl.net.Socket","readBoolean",0x5d02e366,"openfl.net.Socket.readBoolean","openfl/net/Socket.hx",228,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_241_readByte,"openfl.net.Socket","readByte",0x860f638a,"openfl.net.Socket.readByte","openfl/net/Socket.hx",241,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_254_readBytes,"openfl.net.Socket","readBytes",0xc767b5a9,"openfl.net.Socket.readBytes","openfl/net/Socket.hx",254,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_267_readDouble,"openfl.net.Socket","readDouble",0xbeb31413,"openfl.net.Socket.readDouble","openfl/net/Socket.hx",267,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_280_readFloat,"openfl.net.Socket","readFloat",0x0c6672da,"openfl.net.Socket.readFloat","openfl/net/Socket.hx",280,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_293_readInt,"openfl.net.Socket","readInt",0x12fd4ead,"openfl.net.Socket.readInt","openfl/net/Socket.hx",293,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_306_readMultiByte,"openfl.net.Socket","readMultiByte",0x24dd2a5f,"openfl.net.Socket.readMultiByte","openfl/net/Socket.hx",306,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_321_readObject,"openfl.net.Socket","readObject",0xa12767c1,"openfl.net.Socket.readObject","openfl/net/Socket.hx",321,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_335_readShort,"openfl.net.Socket","readShort",0x85f731ba,"openfl.net.Socket.readShort","openfl/net/Socket.hx",335,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_348_readUnsignedByte,"openfl.net.Socket","readUnsignedByte",0xa58d611f,"openfl.net.Socket.readUnsignedByte","openfl/net/Socket.hx",348,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_360_readUnsignedInt,"openfl.net.Socket","readUnsignedInt",0xc079dab8,"openfl.net.Socket.readUnsignedInt","openfl/net/Socket.hx",360,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_373_readUnsignedShort,"openfl.net.Socket","readUnsignedShort",0xf4b71685,"openfl.net.Socket.readUnsignedShort","openfl/net/Socket.hx",373,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_386_readUTF,"openfl.net.Socket","readUTF",0x130652e5,"openfl.net.Socket.readUTF","openfl/net/Socket.hx",386,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_399_readUTFBytes,"openfl.net.Socket","readUTFBytes",0x5b4f8746,"openfl.net.Socket.readUTFBytes","openfl/net/Socket.hx",399,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_412_writeBoolean,"openfl.net.Socket","writeBoolean",0x4c6def95,"openfl.net.Socket.writeBoolean","openfl/net/Socket.hx",412,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_425_writeByte,"openfl.net.Socket","writeByte",0x82bf73fb,"openfl.net.Socket.writeByte","openfl/net/Socket.hx",425,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_438_writeBytes,"openfl.net.Socket","writeBytes",0xe4c60818,"openfl.net.Socket.writeBytes","openfl/net/Socket.hx",438,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_451_writeDouble,"openfl.net.Socket","writeDouble",0x53dce2c4,"openfl.net.Socket.writeDouble","openfl/net/Socket.hx",451,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_464_writeFloat,"openfl.net.Socket","writeFloat",0x29c4c549,"openfl.net.Socket.writeFloat","openfl/net/Socket.hx",464,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_477_writeInt,"openfl.net.Socket","writeInt",0x40e4d75c,"openfl.net.Socket.writeInt","openfl/net/Socket.hx",477,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_490_writeMultiByte,"openfl.net.Socket","writeMultiByte",0x0e46e04e,"openfl.net.Socket.writeMultiByte","openfl/net/Socket.hx",490,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_505_writeObject,"openfl.net.Socket","writeObject",0x36513672,"openfl.net.Socket.writeObject","openfl/net/Socket.hx",505,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_518_writeShort,"openfl.net.Socket","writeShort",0xa3558429,"openfl.net.Socket.writeShort","openfl/net/Socket.hx",518,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_531_writeUnsignedInt,"openfl.net.Socket","writeUnsignedInt",0x20302a67,"openfl.net.Socket.writeUnsignedInt","openfl/net/Socket.hx",531,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_544_writeUTF,"openfl.net.Socket","writeUTF",0x40eddb94,"openfl.net.Socket.writeUTF","openfl/net/Socket.hx",544,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_557_writeUTFBytes,"openfl.net.Socket","writeUTFBytes",0xe98f2437,"openfl.net.Socket.writeUTFBytes","openfl/net/Socket.hx",557,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_571___cleanSocket,"openfl.net.Socket","__cleanSocket",0x6b69a970,"openfl.net.Socket.__cleanSocket","openfl/net/Socket.hx",571,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_595_socket_onClose,"openfl.net.Socket","socket_onClose",0xa9908159,"openfl.net.Socket.socket_onClose","openfl/net/Socket.hx",595,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_602_socket_onError,"openfl.net.Socket","socket_onError",0xd4573569,"openfl.net.Socket.socket_onError","openfl/net/Socket.hx",602,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_607_socket_onMessage,"openfl.net.Socket","socket_onMessage",0xb0a509a8,"openfl.net.Socket.socket_onMessage","openfl/net/Socket.hx",607,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_640_socket_onOpen,"openfl.net.Socket","socket_onOpen",0x9a7f6949,"openfl.net.Socket.socket_onOpen","openfl/net/Socket.hx",640,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_648_this_onEnterFrame,"openfl.net.Socket","this_onEnterFrame",0x0bcb0429,"openfl.net.Socket.this_onEnterFrame","openfl/net/Socket.hx",648,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_788_get_bytesAvailable,"openfl.net.Socket","get_bytesAvailable",0xb0011db3,"openfl.net.Socket.get_bytesAvailable","openfl/net/Socket.hx",788,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_795_get_bytesPending,"openfl.net.Socket","get_bytesPending",0x28aaadc1,"openfl.net.Socket.get_bytesPending","openfl/net/Socket.hx",795,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_802_get_connected,"openfl.net.Socket","get_connected",0x736e6114,"openfl.net.Socket.get_connected","openfl/net/Socket.hx",802,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_809_get_endian,"openfl.net.Socket","get_endian",0x7d7c0d70,"openfl.net.Socket.get_endian","openfl/net/Socket.hx",809,0x34d23f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3c8c666d2a175c_814_set_endian,"openfl.net.Socket","set_endian",0x80f9abe4,"openfl.net.Socket.set_endian","openfl/net/Socket.hx",814,0x34d23f5a)
namespace openfl{
namespace net{

void Socket_obj::__construct(::String host,hx::Null< int >  __o_port){
int port = __o_port.Default(0);
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_76_new)
HXLINE(  78)		super::__construct(null());
HXLINE(  80)		this->set_endian((int)0);
HXLINE(  81)		this->timeout = (int)20000;
HXLINE(  83)		this->_hx___buffer = ::haxe::io::Bytes_obj::alloc((int)4096);
HXLINE(  85)		bool _hx_tmp;
HXDLIN(  85)		if ((port > (int)0)) {
HXLINE(  85)			_hx_tmp = (port < (int)65535);
            		}
            		else {
HXLINE(  85)			_hx_tmp = false;
            		}
HXDLIN(  85)		if (_hx_tmp) {
HXLINE(  87)			this->connect(host,port);
            		}
            	}

Dynamic Socket_obj::__CreateEmpty() { return new Socket_obj; }

void *Socket_obj::_hx_vtable = 0;

Dynamic Socket_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Socket_obj > _hx_result = new Socket_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Socket_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
	} else {
		return inClassId==(int)0x3c209fa0;
	}
}

static ::openfl::utils::IDataOutput_obj _hx_openfl_net_Socket__hx_openfl_utils_IDataOutput= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::openfl::net::Socket_obj::set_endian,
	(  ::Dynamic (hx::Object::*)())&::openfl::net::Socket_obj::get_endian,
	( void (hx::Object::*)(bool))&::openfl::net::Socket_obj::writeBoolean,
	( void (hx::Object::*)(int))&::openfl::net::Socket_obj::writeByte,
	( void (hx::Object::*)( ::openfl::utils::ByteArrayData,hx::Null< int > ,hx::Null< int > ))&::openfl::net::Socket_obj::writeBytes,
	( void (hx::Object::*)(Float))&::openfl::net::Socket_obj::writeDouble,
	( void (hx::Object::*)(Float))&::openfl::net::Socket_obj::writeFloat,
	( void (hx::Object::*)(int))&::openfl::net::Socket_obj::writeInt,
	( void (hx::Object::*)(::String,::String))&::openfl::net::Socket_obj::writeMultiByte,
	( void (hx::Object::*)(int))&::openfl::net::Socket_obj::writeShort,
	( void (hx::Object::*)(::String))&::openfl::net::Socket_obj::writeUTF,
	( void (hx::Object::*)(::String))&::openfl::net::Socket_obj::writeUTFBytes,
	( void (hx::Object::*)(int))&::openfl::net::Socket_obj::writeUnsignedInt,
};

static ::openfl::utils::IDataInput_obj _hx_openfl_net_Socket__hx_openfl_utils_IDataInput= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::openfl::net::Socket_obj::set_endian,
	(  ::Dynamic (hx::Object::*)())&::openfl::net::Socket_obj::get_endian,
	( int (hx::Object::*)())&::openfl::net::Socket_obj::get_bytesAvailable,
	( bool (hx::Object::*)())&::openfl::net::Socket_obj::readBoolean,
	( int (hx::Object::*)())&::openfl::net::Socket_obj::readByte,
	( void (hx::Object::*)( ::openfl::utils::ByteArrayData,hx::Null< int > ,hx::Null< int > ))&::openfl::net::Socket_obj::readBytes,
	( Float (hx::Object::*)())&::openfl::net::Socket_obj::readDouble,
	( Float (hx::Object::*)())&::openfl::net::Socket_obj::readFloat,
	( int (hx::Object::*)())&::openfl::net::Socket_obj::readInt,
	( ::String (hx::Object::*)(int,::String))&::openfl::net::Socket_obj::readMultiByte,
	( int (hx::Object::*)())&::openfl::net::Socket_obj::readShort,
	( int (hx::Object::*)())&::openfl::net::Socket_obj::readUnsignedByte,
	( int (hx::Object::*)())&::openfl::net::Socket_obj::readUnsignedInt,
	( int (hx::Object::*)())&::openfl::net::Socket_obj::readUnsignedShort,
	( ::String (hx::Object::*)())&::openfl::net::Socket_obj::readUTF,
	( ::String (hx::Object::*)(int))&::openfl::net::Socket_obj::readUTFBytes,
};

void *Socket_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x948d2d33: return &_hx_openfl_net_Socket__hx_openfl_utils_IDataOutput;
		case (int)0xbeb9f218: return &_hx_openfl_net_Socket__hx_openfl_utils_IDataInput;
	}
	return super::_hx_getInterface(inHash);
}

void Socket_obj::connect(::String host,hx::Null< int >  __o_port){
int port = __o_port.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_94_connect)
HXLINE(  96)		if (hx::IsNotNull( this->_hx___socket )) {
HXLINE(  98)			this->close();
            		}
HXLINE( 102)		bool _hx_tmp;
HXDLIN( 102)		if ((port >= (int)0)) {
HXLINE( 102)			_hx_tmp = (port > (int)65535);
            		}
            		else {
HXLINE( 102)			_hx_tmp = true;
            		}
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 104)			HX_STACK_DO_THROW( ::openfl::errors::SecurityError_obj::__alloc( HX_CTX ,HX_("Invalid socket port number specified.",5a,8e,7c,a7)));
            		}
HXLINE( 114)		 ::sys::net::Host h = null();
HXLINE( 116)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 118)			h =  ::sys::net::Host_obj::__alloc( HX_CTX ,host);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 122)				this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,HX_("Invalid host",51,b1,1f,8c),null()));
HXLINE( 123)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 127)		this->_hx___timestamp = ::Sys_obj::time();
HXLINE( 131)		this->_hx___host = host;
HXLINE( 132)		this->_hx___port = port;
HXLINE( 134)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN( 134)		this->_hx___output = this1;
HXLINE( 135)		this->_hx___output->_hx___endian = this->_hx___endian;
HXLINE( 137)		 ::openfl::utils::ByteArrayData this2 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN( 137)		this->_hx___input = this2;
HXLINE( 138)		this->_hx___input->_hx___endian = this->_hx___endian;
HXLINE( 163)		this->_hx___socket =  ::sys::net::Socket_obj::__alloc( HX_CTX );
HXLINE( 165)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 167)			this->_hx___socket->setBlocking(false);
HXLINE( 168)			this->_hx___socket->connect(h,port);
HXLINE( 169)			this->_hx___socket->setFastSend(true);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e1 = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 175)		::openfl::_internal::Lib_obj::current->addEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Socket_obj,connect,(void))

void Socket_obj::close(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_182_close)
HXDLIN( 182)		if (hx::IsNotNull( this->_hx___socket )) {
HXLINE( 184)			this->_hx___cleanSocket();
            		}
            		else {
HXLINE( 188)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,close,(void))

void Socket_obj::flush(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_195_flush)
HXLINE( 197)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 199)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 203)		if ((::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_hx___output) > (int)0)) {
HXLINE( 205)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 212)				 ::haxe::io::Output _hx_tmp = this->_hx___socket->output;
HXDLIN( 212)				 ::haxe::io::Bytes _hx_tmp1 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(this->_hx___output);
HXDLIN( 212)				_hx_tmp->writeBytes(_hx_tmp1,(int)0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_hx___output));
HXLINE( 214)				 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN( 214)				this->_hx___output = this1;
HXLINE( 215)				this->_hx___output->_hx___endian = this->_hx___endian;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 219)					HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,flush,(void))

bool Socket_obj::readBoolean(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_228_readBoolean)
HXLINE( 230)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 232)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 236)		return this->_hx___input->readBoolean();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readBoolean,return )

int Socket_obj::readByte(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_241_readByte)
HXLINE( 243)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 245)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 249)		return this->_hx___input->readByte();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readByte,return )

void Socket_obj::readBytes( ::openfl::utils::ByteArrayData bytes,hx::Null< int >  __o_offset,hx::Null< int >  __o_length){
int offset = __o_offset.Default(0);
int length = __o_length.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_254_readBytes)
HXLINE( 256)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 258)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 262)		this->_hx___input->readBytes(bytes,offset,length);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Socket_obj,readBytes,(void))

Float Socket_obj::readDouble(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_267_readDouble)
HXLINE( 269)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 271)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 275)		return this->_hx___input->readDouble();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readDouble,return )

Float Socket_obj::readFloat(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_280_readFloat)
HXLINE( 282)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 284)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 288)		return this->_hx___input->readFloat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readFloat,return )

int Socket_obj::readInt(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_293_readInt)
HXLINE( 295)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 297)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 301)		return this->_hx___input->readInt();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readInt,return )

::String Socket_obj::readMultiByte(int length,::String charSet){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_306_readMultiByte)
HXLINE( 308)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 310)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 314)		return this->_hx___input->readMultiByte(length,charSet);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Socket_obj,readMultiByte,return )

 ::Dynamic Socket_obj::readObject(){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_321_readObject)
HXDLIN( 321)		if ((this->objectEncoding == (int)10)) {
HXLINE( 323)			return ::haxe::Unserializer_obj::run(this->readUTF());
            		}
            		else {
HXLINE( 328)			return null();
            		}
HXLINE( 321)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readObject,return )

int Socket_obj::readShort(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_335_readShort)
HXLINE( 337)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 339)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 343)		return this->_hx___input->readShort();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readShort,return )

int Socket_obj::readUnsignedByte(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_348_readUnsignedByte)
HXLINE( 350)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 352)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 355)		return this->_hx___input->readUnsignedByte();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readUnsignedByte,return )

int Socket_obj::readUnsignedInt(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_360_readUnsignedInt)
HXLINE( 362)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 364)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 368)		return this->_hx___input->readUnsignedInt();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readUnsignedInt,return )

int Socket_obj::readUnsignedShort(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_373_readUnsignedShort)
HXLINE( 375)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 377)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 381)		return this->_hx___input->readUnsignedShort();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readUnsignedShort,return )

::String Socket_obj::readUTF(){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_386_readUTF)
HXLINE( 388)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 390)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 394)		return this->_hx___input->readUTF();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,readUTF,return )

::String Socket_obj::readUTFBytes(int length){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_399_readUTFBytes)
HXLINE( 401)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 403)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 407)		return this->_hx___input->readUTFBytes(length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,readUTFBytes,return )

void Socket_obj::writeBoolean(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_412_writeBoolean)
HXLINE( 414)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 416)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 420)		this->_hx___output->writeBoolean(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeBoolean,(void))

void Socket_obj::writeByte(int value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_425_writeByte)
HXLINE( 427)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 429)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 433)		this->_hx___output->writeByte(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeByte,(void))

void Socket_obj::writeBytes( ::openfl::utils::ByteArrayData bytes,hx::Null< int >  __o_offset,hx::Null< int >  __o_length){
int offset = __o_offset.Default(0);
int length = __o_length.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_438_writeBytes)
HXLINE( 440)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 442)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 446)		this->_hx___output->writeBytes(bytes,offset,length);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Socket_obj,writeBytes,(void))

void Socket_obj::writeDouble(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_451_writeDouble)
HXLINE( 453)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 455)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 459)		this->_hx___output->writeDouble(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeDouble,(void))

void Socket_obj::writeFloat(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_464_writeFloat)
HXLINE( 466)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 468)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 472)		this->_hx___output->writeFloat(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeFloat,(void))

void Socket_obj::writeInt(int value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_477_writeInt)
HXLINE( 479)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 481)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 485)		this->_hx___output->writeInt(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeInt,(void))

void Socket_obj::writeMultiByte(::String value,::String charSet){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_490_writeMultiByte)
HXLINE( 492)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 494)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 498)		this->_hx___output->writeUTFBytes(value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Socket_obj,writeMultiByte,(void))

void Socket_obj::writeObject( ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_505_writeObject)
HXDLIN( 505)		if ((this->objectEncoding == (int)10)) {
HXLINE( 507)			 ::openfl::utils::ByteArrayData _hx_tmp = this->_hx___output;
HXDLIN( 507)			_hx_tmp->writeUTF(::haxe::Serializer_obj::run(object));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeObject,(void))

void Socket_obj::writeShort(int value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_518_writeShort)
HXLINE( 520)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 522)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 526)		this->_hx___output->writeShort(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeShort,(void))

void Socket_obj::writeUnsignedInt(int value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_531_writeUnsignedInt)
HXLINE( 533)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 535)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 539)		this->_hx___output->writeUnsignedInt(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeUnsignedInt,(void))

void Socket_obj::writeUTF(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_544_writeUTF)
HXLINE( 546)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 548)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 552)		this->_hx___output->writeUTF(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeUTF,(void))

void Socket_obj::writeUTFBytes(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_557_writeUTFBytes)
HXLINE( 559)		if (hx::IsNull( this->_hx___socket )) {
HXLINE( 561)			HX_STACK_DO_THROW( ::openfl::errors::IOError_obj::__alloc( HX_CTX ,HX_("Operation attempted on invalid socket.",9e,8c,0a,27)));
            		}
HXLINE( 565)		this->_hx___output->writeUTFBytes(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,writeUTFBytes,(void))

void Socket_obj::_hx___cleanSocket(){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_571___cleanSocket)
HXLINE( 573)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 575)			this->_hx___socket->close();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 579)		this->_hx___socket = null();
HXLINE( 580)		this->_hx___connected = false;
HXLINE( 581)		::openfl::_internal::Lib_obj::current->removeEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,_hx___cleanSocket,(void))

void Socket_obj::socket_onClose( ::Dynamic _){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_595_socket_onClose)
HXDLIN( 595)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("close",b8,17,63,48),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,socket_onClose,(void))

void Socket_obj::socket_onError( ::Dynamic e){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_602_socket_onError)
HXDLIN( 602)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,socket_onError,(void))

void Socket_obj::socket_onMessage( ::Dynamic msg){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_607_socket_onMessage)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,socket_onMessage,(void))

void Socket_obj::socket_onOpen( ::Dynamic _){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_640_socket_onOpen)
HXLINE( 642)		this->_hx___connected = true;
HXLINE( 643)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("connect",ea,3b,80,15),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,socket_onOpen,(void))

void Socket_obj::this_onEnterFrame( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_648_this_onEnterFrame)
HXLINE( 660)		bool doConnect = false;
HXLINE( 661)		bool doClose = false;
HXLINE( 663)		if (!(this->get_connected())) {
HXLINE( 665)			 ::Dynamic r = ::sys::net::Socket_obj::select(null(),::Array_obj< ::Dynamic>::__new(1)->init(0,this->_hx___socket),null(),(int)0);
HXLINE( 667)			if (hx::IsEq( Dynamic(  ::Dynamic(r->__Field(HX_("write",df,6c,59,d0),hx::paccDynamic))->__GetItem((int)0)).StaticCast<  ::sys::net::Socket >(),this->_hx___socket )) {
HXLINE( 669)				doConnect = true;
            			}
            			else {
HXLINE( 671)				Float _hx_tmp = ::Sys_obj::time();
HXDLIN( 671)				Float _hx_tmp1 = (_hx_tmp - this->_hx___timestamp);
HXDLIN( 671)				if ((_hx_tmp1 > ((Float)this->timeout / (Float)(int)1000))) {
HXLINE( 673)					doClose = true;
            				}
            			}
            		}
HXLINE( 679)		 ::haxe::io::BytesBuffer b =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXLINE( 680)		int bLength = (int)0;
HXLINE( 682)		bool _hx_tmp2;
HXDLIN( 682)		if (!(this->get_connected())) {
HXLINE( 682)			_hx_tmp2 = doConnect;
            		}
            		else {
HXLINE( 682)			_hx_tmp2 = true;
            		}
HXDLIN( 682)		if (_hx_tmp2) {
HXLINE( 684)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            				HX_STACK_CATCHABLE( ::haxe::io::Error, 1);
            				HX_STACK_CATCHABLE( ::Dynamic, 2);
HXLINE( 686)				int l;
HXLINE( 688)				while(true){
HXLINE( 690)					l = this->_hx___socket->input->readBytes(this->_hx___buffer,(int)0,this->_hx___buffer->length);
HXLINE( 692)					if ((l > (int)0)) {
HXLINE( 694)						{
HXLINE( 694)							 ::haxe::io::Bytes src = this->_hx___buffer;
HXDLIN( 694)							bool _hx_tmp3;
HXDLIN( 694)							if ((l >= (int)0)) {
HXLINE( 694)								_hx_tmp3 = (l > src->length);
            							}
            							else {
HXLINE( 694)								_hx_tmp3 = true;
            							}
HXDLIN( 694)							if (_hx_tmp3) {
HXLINE( 694)								HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            							}
HXDLIN( 694)							::Array< unsigned char > b1 = b->b;
HXDLIN( 694)							::Array< unsigned char > b2 = src->b;
HXDLIN( 694)							{
HXLINE( 694)								int _g1 = (int)0;
HXDLIN( 694)								int _g = l;
HXDLIN( 694)								while((_g1 < _g)){
HXLINE( 694)									_g1 = (_g1 + (int)1);
HXDLIN( 694)									int i = (_g1 - (int)1);
HXDLIN( 694)									::Array< unsigned char > b3 = b->b;
HXDLIN( 694)									b3->push(b2->__get(i));
            								}
            							}
            						}
HXLINE( 695)						bLength = (bLength + l);
            					}
HXLINE( 688)					if (!((l == this->_hx___buffer->length))) {
HXLINE( 688)						goto _hx_goto_35;
            					}
            				}
            				_hx_goto_35:;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof e = _hx_e;
            				}
            				else if (_hx_e.IsClass<  ::haxe::io::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Error e1 = _hx_e;
HXLINE( 707)					switch((int)(_hx_getEnumValueIndex(e1))){
            						case (int)0: {
            						}
            						break;
            						case (int)3: {
HXLINE( 710)							 ::Dynamic customError = e1->_hx_getObject(0);
HXLINE( 711)							doClose = hx::IsNotEq( customError,HX_("EOF",9c,a0,34,00) );
            						}
            						break;
            						default:{
HXLINE( 713)							doClose = true;
            						}
            					}
            				}
            				else if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e2 = _hx_e;
HXLINE( 718)					doClose = true;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 724)		bool _hx_tmp4;
HXDLIN( 724)		if (doClose) {
HXLINE( 724)			_hx_tmp4 = this->get_connected();
            		}
            		else {
HXLINE( 724)			_hx_tmp4 = false;
            		}
HXDLIN( 724)		if (_hx_tmp4) {
HXLINE( 726)			this->_hx___cleanSocket();
HXLINE( 728)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("close",b8,17,63,48),null(),null()));
            		}
            		else {
HXLINE( 730)			if (doClose) {
HXLINE( 732)				this->_hx___cleanSocket();
HXLINE( 734)				this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,HX_("Connection failed",5f,1d,9e,a8),null()));
            			}
            			else {
HXLINE( 736)				if (doConnect) {
HXLINE( 738)					this->_hx___connected = true;
HXLINE( 739)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("connect",ea,3b,80,15),null(),null()));
            				}
            			}
            		}
HXLINE( 743)		if ((bLength > (int)0)) {
HXLINE( 745)			 ::haxe::io::Bytes newData = b->getBytes();
HXLINE( 747)			int rl = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_hx___input);
HXDLIN( 747)			int rl1 = (rl - this->_hx___input->position);
HXLINE( 748)			if ((rl1 < (int)0)) {
HXLINE( 748)				rl1 = (int)0;
            			}
HXLINE( 750)			 ::haxe::io::Bytes newInput = ::haxe::io::Bytes_obj::alloc((rl1 + newData->length));
HXLINE( 751)			if ((rl1 > (int)0)) {
HXLINE( 751)				newInput->blit((int)0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(this->_hx___input),this->_hx___input->position,rl1);
            			}
HXLINE( 752)			newInput->blit(rl1,newData,(int)0,newData->length);
HXLINE( 753)			this->_hx___input = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(newInput);
HXLINE( 754)			this->_hx___input->_hx___endian = this->_hx___endian;
HXLINE( 756)			this->dispatchEvent( ::openfl::events::ProgressEvent_obj::__alloc( HX_CTX ,HX_("socketData",7d,63,de,b1),false,false,newData->length,(int)0));
            		}
HXLINE( 760)		if (hx::IsNotNull( this->_hx___socket )) {
HXLINE( 762)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::IOError, 0);
HXLINE( 764)				this->flush();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::openfl::errors::IOError >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::IOError e3 = _hx_e;
HXLINE( 768)					this->dispatchEvent( ::openfl::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,e3->message,null()));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,this_onEnterFrame,(void))

int Socket_obj::get_bytesAvailable(){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_788_get_bytesAvailable)
HXDLIN( 788)		 ::openfl::utils::ByteArrayData _this = this->_hx___input;
HXDLIN( 788)		return (_this->length - _this->position);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,get_bytesAvailable,return )

int Socket_obj::get_bytesPending(){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_795_get_bytesPending)
HXDLIN( 795)		return ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_hx___output);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,get_bytesPending,return )

bool Socket_obj::get_connected(){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_802_get_connected)
HXDLIN( 802)		return this->_hx___connected;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,get_connected,return )

 ::Dynamic Socket_obj::get_endian(){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_809_get_endian)
HXDLIN( 809)		return this->_hx___endian;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Socket_obj,get_endian,return )

 ::Dynamic Socket_obj::set_endian( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_1b3c8c666d2a175c_814_set_endian)
HXLINE( 816)		this->_hx___endian = value;
HXLINE( 818)		if (hx::IsNotNull( this->_hx___input )) {
HXLINE( 818)			this->_hx___input->_hx___endian = value;
            		}
HXLINE( 819)		if (hx::IsNotNull( this->_hx___output )) {
HXLINE( 819)			this->_hx___output->_hx___endian = value;
            		}
HXLINE( 821)		return this->_hx___endian;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Socket_obj,set_endian,return )


hx::ObjectPtr< Socket_obj > Socket_obj::__new(::String host,hx::Null< int >  __o_port) {
	hx::ObjectPtr< Socket_obj > __this = new Socket_obj();
	__this->__construct(host,__o_port);
	return __this;
}

hx::ObjectPtr< Socket_obj > Socket_obj::__alloc(hx::Ctx *_hx_ctx,::String host,hx::Null< int >  __o_port) {
	Socket_obj *__this = (Socket_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Socket_obj), true, "openfl.net.Socket"));
	*(void **)__this = Socket_obj::_hx_vtable;
	__this->__construct(host,__o_port);
	return __this;
}

Socket_obj::Socket_obj()
{
}

void Socket_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Socket);
	HX_MARK_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_MARK_MEMBER_NAME(secure,"secure");
	HX_MARK_MEMBER_NAME(timeout,"timeout");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___connected,"__connected");
	HX_MARK_MEMBER_NAME(_hx___endian,"__endian");
	HX_MARK_MEMBER_NAME(_hx___host,"__host");
	HX_MARK_MEMBER_NAME(_hx___input,"__input");
	HX_MARK_MEMBER_NAME(_hx___output,"__output");
	HX_MARK_MEMBER_NAME(_hx___port,"__port");
	HX_MARK_MEMBER_NAME(_hx___socket,"__socket");
	HX_MARK_MEMBER_NAME(_hx___timestamp,"__timestamp");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Socket_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_VISIT_MEMBER_NAME(secure,"secure");
	HX_VISIT_MEMBER_NAME(timeout,"timeout");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___connected,"__connected");
	HX_VISIT_MEMBER_NAME(_hx___endian,"__endian");
	HX_VISIT_MEMBER_NAME(_hx___host,"__host");
	HX_VISIT_MEMBER_NAME(_hx___input,"__input");
	HX_VISIT_MEMBER_NAME(_hx___output,"__output");
	HX_VISIT_MEMBER_NAME(_hx___port,"__port");
	HX_VISIT_MEMBER_NAME(_hx___socket,"__socket");
	HX_VISIT_MEMBER_NAME(_hx___timestamp,"__timestamp");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Socket_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn() ); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"secure") ) { return hx::Val( secure ); }
		if (HX_FIELD_EQ(inName,"endian") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_endian() ); }
		if (HX_FIELD_EQ(inName,"__host") ) { return hx::Val( _hx___host ); }
		if (HX_FIELD_EQ(inName,"__port") ) { return hx::Val( _hx___port ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeout") ) { return hx::Val( timeout ); }
		if (HX_FIELD_EQ(inName,"__input") ) { return hx::Val( _hx___input ); }
		if (HX_FIELD_EQ(inName,"connect") ) { return hx::Val( connect_dyn() ); }
		if (HX_FIELD_EQ(inName,"readInt") ) { return hx::Val( readInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"readUTF") ) { return hx::Val( readUTF_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer ); }
		if (HX_FIELD_EQ(inName,"__endian") ) { return hx::Val( _hx___endian ); }
		if (HX_FIELD_EQ(inName,"__output") ) { return hx::Val( _hx___output ); }
		if (HX_FIELD_EQ(inName,"__socket") ) { return hx::Val( _hx___socket ); }
		if (HX_FIELD_EQ(inName,"readByte") ) { return hx::Val( readByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeInt") ) { return hx::Val( writeInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeUTF") ) { return hx::Val( writeUTF_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_connected() ); }
		if (HX_FIELD_EQ(inName,"readBytes") ) { return hx::Val( readBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"readFloat") ) { return hx::Val( readFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"readShort") ) { return hx::Val( readShort_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeByte") ) { return hx::Val( writeByte_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readDouble") ) { return hx::Val( readDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"readObject") ) { return hx::Val( readObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeBytes") ) { return hx::Val( writeBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeFloat") ) { return hx::Val( writeFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeShort") ) { return hx::Val( writeShort_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_endian") ) { return hx::Val( get_endian_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_endian") ) { return hx::Val( set_endian_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__connected") ) { return hx::Val( _hx___connected ); }
		if (HX_FIELD_EQ(inName,"__timestamp") ) { return hx::Val( _hx___timestamp ); }
		if (HX_FIELD_EQ(inName,"readBoolean") ) { return hx::Val( readBoolean_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeDouble") ) { return hx::Val( writeDouble_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeObject") ) { return hx::Val( writeObject_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bytesPending") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bytesPending() ); }
		if (HX_FIELD_EQ(inName,"readUTFBytes") ) { return hx::Val( readUTFBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeBoolean") ) { return hx::Val( writeBoolean_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"readMultiByte") ) { return hx::Val( readMultiByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeUTFBytes") ) { return hx::Val( writeUTFBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"__cleanSocket") ) { return hx::Val( _hx___cleanSocket_dyn() ); }
		if (HX_FIELD_EQ(inName,"socket_onOpen") ) { return hx::Val( socket_onOpen_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_connected") ) { return hx::Val( get_connected_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bytesAvailable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bytesAvailable() ); }
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { return hx::Val( objectEncoding ); }
		if (HX_FIELD_EQ(inName,"writeMultiByte") ) { return hx::Val( writeMultiByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"socket_onClose") ) { return hx::Val( socket_onClose_dyn() ); }
		if (HX_FIELD_EQ(inName,"socket_onError") ) { return hx::Val( socket_onError_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"readUnsignedInt") ) { return hx::Val( readUnsignedInt_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"readUnsignedByte") ) { return hx::Val( readUnsignedByte_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeUnsignedInt") ) { return hx::Val( writeUnsignedInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"socket_onMessage") ) { return hx::Val( socket_onMessage_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bytesPending") ) { return hx::Val( get_bytesPending_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"readUnsignedShort") ) { return hx::Val( readUnsignedShort_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onEnterFrame") ) { return hx::Val( this_onEnterFrame_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_bytesAvailable") ) { return hx::Val( get_bytesAvailable_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Socket_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"secure") ) { secure=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endian") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_endian(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__host") ) { _hx___host=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__port") ) { _hx___port=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeout") ) { timeout=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__input") ) { _hx___input=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__endian") ) { _hx___endian=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__output") ) { _hx___output=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__socket") ) { _hx___socket=inValue.Cast<  ::sys::net::Socket >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__connected") ) { _hx___connected=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__timestamp") ) { _hx___timestamp=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { objectEncoding=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Socket_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bytesAvailable","\xde","\x4b","\x9d","\x9b"));
	outFields->push(HX_HCSTRING("bytesPending","\x2c","\x6b","\x4c","\x1a"));
	outFields->push(HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"));
	outFields->push(HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"));
	outFields->push(HX_HCSTRING("secure","\x77","\x60","\x4c","\x64"));
	outFields->push(HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8"));
	outFields->push(HX_HCSTRING("endian","\x9b","\x98","\x88","\xfa"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__connected","\xa9","\x2b","\x23","\xd1"));
	outFields->push(HX_HCSTRING("__endian","\xbb","\x03","\xb8","\xa2"));
	outFields->push(HX_HCSTRING("__host","\x88","\x32","\x0b","\xf4"));
	outFields->push(HX_HCSTRING("__input","\xea","\x1c","\x7c","\x28"));
	outFields->push(HX_HCSTRING("__output","\x21","\x7a","\xb0","\xb4"));
	outFields->push(HX_HCSTRING("__port","\xa1","\xe6","\x54","\xf9"));
	outFields->push(HX_HCSTRING("__socket","\xd3","\xf6","\x75","\xce"));
	outFields->push(HX_HCSTRING("__timestamp","\xb6","\x1d","\xfb","\xd3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Socket_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Socket_obj,objectEncoding),HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a")},
	{hx::fsBool,(int)offsetof(Socket_obj,secure),HX_HCSTRING("secure","\x77","\x60","\x4c","\x64")},
	{hx::fsInt,(int)offsetof(Socket_obj,timeout),HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Socket_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsBool,(int)offsetof(Socket_obj,_hx___connected),HX_HCSTRING("__connected","\xa9","\x2b","\x23","\xd1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Socket_obj,_hx___endian),HX_HCSTRING("__endian","\xbb","\x03","\xb8","\xa2")},
	{hx::fsString,(int)offsetof(Socket_obj,_hx___host),HX_HCSTRING("__host","\x88","\x32","\x0b","\xf4")},
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(Socket_obj,_hx___input),HX_HCSTRING("__input","\xea","\x1c","\x7c","\x28")},
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(Socket_obj,_hx___output),HX_HCSTRING("__output","\x21","\x7a","\xb0","\xb4")},
	{hx::fsInt,(int)offsetof(Socket_obj,_hx___port),HX_HCSTRING("__port","\xa1","\xe6","\x54","\xf9")},
	{hx::fsObject /*::sys::net::Socket*/ ,(int)offsetof(Socket_obj,_hx___socket),HX_HCSTRING("__socket","\xd3","\xf6","\x75","\xce")},
	{hx::fsFloat,(int)offsetof(Socket_obj,_hx___timestamp),HX_HCSTRING("__timestamp","\xb6","\x1d","\xfb","\xd3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Socket_obj_sStaticStorageInfo = 0;
#endif

static ::String Socket_obj_sMemberFields[] = {
	HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"),
	HX_HCSTRING("secure","\x77","\x60","\x4c","\x64"),
	HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__connected","\xa9","\x2b","\x23","\xd1"),
	HX_HCSTRING("__endian","\xbb","\x03","\xb8","\xa2"),
	HX_HCSTRING("__host","\x88","\x32","\x0b","\xf4"),
	HX_HCSTRING("__input","\xea","\x1c","\x7c","\x28"),
	HX_HCSTRING("__output","\x21","\x7a","\xb0","\xb4"),
	HX_HCSTRING("__port","\xa1","\xe6","\x54","\xf9"),
	HX_HCSTRING("__socket","\xd3","\xf6","\x75","\xce"),
	HX_HCSTRING("__timestamp","\xb6","\x1d","\xfb","\xd3"),
	HX_HCSTRING("connect","\xea","\x3b","\x80","\x15"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("readBoolean","\xf2","\x7d","\xea","\xd0"),
	HX_HCSTRING("readByte","\x7e","\xf9","\x1a","\x69"),
	HX_HCSTRING("readBytes","\x35","\x55","\x7f","\x8e"),
	HX_HCSTRING("readDouble","\x07","\x0f","\x47","\x2c"),
	HX_HCSTRING("readFloat","\x66","\x12","\x7e","\xd3"),
	HX_HCSTRING("readInt","\x39","\xb3","\xc9","\x02"),
	HX_HCSTRING("readMultiByte","\xeb","\x7f","\xc9","\x15"),
	HX_HCSTRING("readObject","\xb5","\x62","\xbb","\x0e"),
	HX_HCSTRING("readShort","\x46","\xd1","\x0e","\x4d"),
	HX_HCSTRING("readUnsignedByte","\x13","\x0b","\xce","\x9b"),
	HX_HCSTRING("readUnsignedInt","\x44","\xab","\x4f","\x05"),
	HX_HCSTRING("readUnsignedShort","\x11","\x22","\x0b","\x77"),
	HX_HCSTRING("readUTF","\x71","\xb7","\xd2","\x02"),
	HX_HCSTRING("readUTFBytes","\x3a","\x27","\x0f","\x52"),
	HX_HCSTRING("writeBoolean","\x89","\x8f","\x2d","\x43"),
	HX_HCSTRING("writeByte","\x87","\x13","\xd7","\x49"),
	HX_HCSTRING("writeBytes","\x0c","\x03","\x5a","\x52"),
	HX_HCSTRING("writeDouble","\x50","\x7d","\xc4","\xc7"),
	HX_HCSTRING("writeFloat","\x3d","\xc0","\x58","\x97"),
	HX_HCSTRING("writeInt","\x50","\x6d","\xf0","\x23"),
	HX_HCSTRING("writeMultiByte","\x42","\x65","\x25","\xec"),
	HX_HCSTRING("writeObject","\xfe","\xd0","\x38","\xaa"),
	HX_HCSTRING("writeShort","\x1d","\x7f","\xe9","\x10"),
	HX_HCSTRING("writeUnsignedInt","\x5b","\xd4","\x70","\x16"),
	HX_HCSTRING("writeUTF","\x88","\x71","\xf9","\x23"),
	HX_HCSTRING("writeUTFBytes","\xc3","\x79","\x7b","\xda"),
	HX_HCSTRING("__cleanSocket","\xfc","\xfe","\x55","\x5c"),
	HX_HCSTRING("socket_onClose","\x4d","\x06","\x6f","\x87"),
	HX_HCSTRING("socket_onError","\x5d","\xba","\x35","\xb2"),
	HX_HCSTRING("socket_onMessage","\x9c","\xb3","\xe5","\xa6"),
	HX_HCSTRING("socket_onOpen","\xd5","\xbe","\x6b","\x8b"),
	HX_HCSTRING("this_onEnterFrame","\xb5","\x0f","\x1f","\x8e"),
	HX_HCSTRING("get_bytesAvailable","\xa7","\x2c","\x37","\x37"),
	HX_HCSTRING("get_bytesPending","\xb5","\x57","\xeb","\x1e"),
	HX_HCSTRING("get_connected","\xa0","\xb6","\x5a","\x64"),
	HX_HCSTRING("get_endian","\x64","\x08","\x10","\xeb"),
	HX_HCSTRING("set_endian","\xd8","\xa6","\x8d","\xee"),
	::String(null()) };

static void Socket_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Socket_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Socket_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Socket_obj::__mClass,"__mClass");
};

#endif

hx::Class Socket_obj::__mClass;

void Socket_obj::__register()
{
	hx::Object *dummy = new Socket_obj;
	Socket_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.net.Socket","\xe2","\x67","\xc5","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Socket_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Socket_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Socket_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Socket_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Socket_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Socket_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace net
