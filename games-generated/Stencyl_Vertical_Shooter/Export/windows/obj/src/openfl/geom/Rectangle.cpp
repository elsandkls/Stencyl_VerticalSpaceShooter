// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_45de901e99b61471_193_new,"openfl.geom.Rectangle","new",0xe1148d6d,"openfl.geom.Rectangle.new","openfl/geom/Rectangle.hx",193,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_214_clone,"openfl.geom.Rectangle","clone",0x6896edaa,"openfl.geom.Rectangle.clone","openfl/geom/Rectangle.hx",214,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_230_contains,"openfl.geom.Rectangle","contains",0x39912df2,"openfl.geom.Rectangle.contains","openfl/geom/Rectangle.hx",230,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_248_containsPoint,"openfl.geom.Rectangle","containsPoint",0xa42628fe,"openfl.geom.Rectangle.containsPoint","openfl/geom/Rectangle.hx",248,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_266_containsRect,"openfl.geom.Rectangle","containsRect",0x6ba48836,"openfl.geom.Rectangle.containsRect","openfl/geom/Rectangle.hx",266,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_279_copyFrom,"openfl.geom.Rectangle","copyFrom",0xd576df92,"openfl.geom.Rectangle.copyFrom","openfl/geom/Rectangle.hx",279,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_304_equals,"openfl.geom.Rectangle","equals",0xcd1e1752,"openfl.geom.Rectangle.equals","openfl/geom/Rectangle.hx",304,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_323_inflate,"openfl.geom.Rectangle","inflate",0x84b46414,"openfl.geom.Rectangle.inflate","openfl/geom/Rectangle.hx",323,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_345_inflatePoint,"openfl.geom.Rectangle","inflatePoint",0xf7c1779c,"openfl.geom.Rectangle.inflatePoint","openfl/geom/Rectangle.hx",345,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_365_intersection,"openfl.geom.Rectangle","intersection",0x4de95b9c,"openfl.geom.Rectangle.intersection","openfl/geom/Rectangle.hx",365,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_402_intersects,"openfl.geom.Rectangle","intersects",0xc0fc7147,"openfl.geom.Rectangle.intersects","openfl/geom/Rectangle.hx",402,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_429_isEmpty,"openfl.geom.Rectangle","isEmpty",0x84f8a5d0,"openfl.geom.Rectangle.isEmpty","openfl/geom/Rectangle.hx",429,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_441_offset,"openfl.geom.Rectangle","offset",0x6d6ac0a6,"openfl.geom.Rectangle.offset","openfl/geom/Rectangle.hx",441,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_456_offsetPoint,"openfl.geom.Rectangle","offsetPoint",0xf09849ca,"openfl.geom.Rectangle.offsetPoint","openfl/geom/Rectangle.hx",456,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_474_setEmpty,"openfl.geom.Rectangle","setEmpty",0x8b24775e,"openfl.geom.Rectangle.setEmpty","openfl/geom/Rectangle.hx",474,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_479_setTo,"openfl.geom.Rectangle","setTo",0x9a636c0a,"openfl.geom.Rectangle.setTo","openfl/geom/Rectangle.hx",479,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_491_toString,"openfl.geom.Rectangle","toString",0x4584a47f,"openfl.geom.Rectangle.toString","openfl/geom/Rectangle.hx",491,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_507_union,"openfl.geom.Rectangle","union",0xc71b3f5c,"openfl.geom.Rectangle.union","openfl/geom/Rectangle.hx",507,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_529___contract,"openfl.geom.Rectangle","__contract",0xb7fb00c5,"openfl.geom.Rectangle.__contract","openfl/geom/Rectangle.hx",529,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_555___expand,"openfl.geom.Rectangle","__expand",0x79b82d4d,"openfl.geom.Rectangle.__expand","openfl/geom/Rectangle.hx",555,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_587___toLimeRectangle,"openfl.geom.Rectangle","__toLimeRectangle",0x990c368c,"openfl.geom.Rectangle.__toLimeRectangle","openfl/geom/Rectangle.hx",587,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_602___transform,"openfl.geom.Rectangle","__transform",0x05478859,"openfl.geom.Rectangle.__transform","openfl/geom/Rectangle.hx",602,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_645_get_bottom,"openfl.geom.Rectangle","get_bottom",0x33110547,"openfl.geom.Rectangle.get_bottom","openfl/geom/Rectangle.hx",645,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_646_set_bottom,"openfl.geom.Rectangle","set_bottom",0x368ea3bb,"openfl.geom.Rectangle.set_bottom","openfl/geom/Rectangle.hx",646,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_647_get_bottomRight,"openfl.geom.Rectangle","get_bottomRight",0xb804f515,"openfl.geom.Rectangle.get_bottomRight","openfl/geom/Rectangle.hx",647,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_648_set_bottomRight,"openfl.geom.Rectangle","set_bottomRight",0xb3d07221,"openfl.geom.Rectangle.set_bottomRight","openfl/geom/Rectangle.hx",648,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_649_get_left,"openfl.geom.Rectangle","get_left",0xd4809763,"openfl.geom.Rectangle.get_left","openfl/geom/Rectangle.hx",649,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_650_set_left,"openfl.geom.Rectangle","set_left",0x82ddf0d7,"openfl.geom.Rectangle.set_left","openfl/geom/Rectangle.hx",650,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_651_get_right,"openfl.geom.Rectangle","get_right",0x9310ed00,"openfl.geom.Rectangle.get_right","openfl/geom/Rectangle.hx",651,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_652_set_right,"openfl.geom.Rectangle","set_right",0x7661d90c,"openfl.geom.Rectangle.set_right","openfl/geom/Rectangle.hx",652,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_653_get_size,"openfl.geom.Rectangle","get_size",0xd924301d,"openfl.geom.Rectangle.get_size","openfl/geom/Rectangle.hx",653,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_654_set_size,"openfl.geom.Rectangle","set_size",0x87818991,"openfl.geom.Rectangle.set_size","openfl/geom/Rectangle.hx",654,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_655_get_top,"openfl.geom.Rectangle","get_top",0x9f65f6b9,"openfl.geom.Rectangle.get_top","openfl/geom/Rectangle.hx",655,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_656_set_top,"openfl.geom.Rectangle","set_top",0x926787c5,"openfl.geom.Rectangle.set_top","openfl/geom/Rectangle.hx",656,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_657_get_topLeft,"openfl.geom.Rectangle","get_topLeft",0x00437b60,"openfl.geom.Rectangle.get_topLeft","openfl/geom/Rectangle.hx",657,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_658_set_topLeft,"openfl.geom.Rectangle","set_topLeft",0x0ab0826c,"openfl.geom.Rectangle.set_topLeft","openfl/geom/Rectangle.hx",658,0xf2fb2b03)
HX_LOCAL_STACK_FRAME(_hx_pos_45de901e99b61471_65_boot,"openfl.geom.Rectangle","boot",0x09003285,"openfl.geom.Rectangle.boot","openfl/geom/Rectangle.hx",65,0xf2fb2b03)
namespace openfl{
namespace geom{

void Rectangle_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float width = __o_width.Default(0);
Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_193_new)
HXLINE( 195)		this->x = x;
HXLINE( 196)		this->y = y;
HXLINE( 197)		this->width = width;
HXLINE( 198)		this->height = height;
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

void *Rectangle_obj::_hx_vtable = 0;

Dynamic Rectangle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Rectangle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1cd3ebc3;
}

 ::openfl::geom::Rectangle Rectangle_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_214_clone)
HXDLIN( 214)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,this->x,this->y,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,clone,return )

bool Rectangle_obj::contains(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_230_contains)
HXDLIN( 230)		bool _hx_tmp;
HXDLIN( 230)		bool _hx_tmp1;
HXDLIN( 230)		if ((x >= this->x)) {
HXDLIN( 230)			_hx_tmp1 = (y >= this->y);
            		}
            		else {
HXDLIN( 230)			_hx_tmp1 = false;
            		}
HXDLIN( 230)		if (_hx_tmp1) {
HXDLIN( 230)			_hx_tmp = (x < this->get_right());
            		}
            		else {
HXDLIN( 230)			_hx_tmp = false;
            		}
HXDLIN( 230)		if (_hx_tmp) {
HXDLIN( 230)			return (y < this->get_bottom());
            		}
            		else {
HXDLIN( 230)			return false;
            		}
HXDLIN( 230)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,contains,return )

bool Rectangle_obj::containsPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_248_containsPoint)
HXDLIN( 248)		return this->contains(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsPoint,return )

bool Rectangle_obj::containsRect( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_266_containsRect)
HXDLIN( 266)		bool _hx_tmp;
HXDLIN( 266)		if (!((rect->width <= (int)0))) {
HXDLIN( 266)			_hx_tmp = (rect->height <= (int)0);
            		}
            		else {
HXDLIN( 266)			_hx_tmp = true;
            		}
HXDLIN( 266)		if (_hx_tmp) {
HXLINE( 268)			bool _hx_tmp1;
HXDLIN( 268)			bool _hx_tmp2;
HXDLIN( 268)			if ((rect->x > this->x)) {
HXLINE( 268)				_hx_tmp2 = (rect->y > this->y);
            			}
            			else {
HXLINE( 268)				_hx_tmp2 = false;
            			}
HXDLIN( 268)			if (_hx_tmp2) {
HXLINE( 268)				Float _hx_tmp3 = rect->get_right();
HXDLIN( 268)				_hx_tmp1 = (_hx_tmp3 < this->get_right());
            			}
            			else {
HXLINE( 268)				_hx_tmp1 = false;
            			}
HXDLIN( 268)			if (_hx_tmp1) {
HXLINE( 268)				Float _hx_tmp4 = rect->get_bottom();
HXDLIN( 268)				return (_hx_tmp4 < this->get_bottom());
            			}
            			else {
HXLINE( 268)				return false;
            			}
            		}
            		else {
HXLINE( 272)			bool _hx_tmp5;
HXDLIN( 272)			bool _hx_tmp6;
HXDLIN( 272)			if ((rect->x >= this->x)) {
HXLINE( 272)				_hx_tmp6 = (rect->y >= this->y);
            			}
            			else {
HXLINE( 272)				_hx_tmp6 = false;
            			}
HXDLIN( 272)			if (_hx_tmp6) {
HXLINE( 272)				Float _hx_tmp7 = rect->get_right();
HXDLIN( 272)				_hx_tmp5 = (_hx_tmp7 <= this->get_right());
            			}
            			else {
HXLINE( 272)				_hx_tmp5 = false;
            			}
HXDLIN( 272)			if (_hx_tmp5) {
HXLINE( 272)				Float _hx_tmp8 = rect->get_bottom();
HXDLIN( 272)				return (_hx_tmp8 <= this->get_bottom());
            			}
            			else {
HXLINE( 272)				return false;
            			}
            		}
HXLINE( 266)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsRect,return )

void Rectangle_obj::copyFrom( ::openfl::geom::Rectangle sourceRect){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_279_copyFrom)
HXLINE( 281)		this->x = sourceRect->x;
HXLINE( 282)		this->y = sourceRect->y;
HXLINE( 283)		this->width = sourceRect->width;
HXLINE( 284)		this->height = sourceRect->height;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,copyFrom,(void))

bool Rectangle_obj::equals( ::openfl::geom::Rectangle toCompare){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_304_equals)
HXDLIN( 304)		if (hx::IsEq( toCompare,hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 304)			return true;
            		}
            		else {
HXLINE( 305)			bool _hx_tmp;
HXDLIN( 305)			bool _hx_tmp1;
HXDLIN( 305)			bool _hx_tmp2;
HXDLIN( 305)			if (hx::IsNotNull( toCompare )) {
HXLINE( 305)				_hx_tmp2 = (this->x == toCompare->x);
            			}
            			else {
HXLINE( 305)				_hx_tmp2 = false;
            			}
HXDLIN( 305)			if (_hx_tmp2) {
HXLINE( 305)				_hx_tmp1 = (this->y == toCompare->y);
            			}
            			else {
HXLINE( 305)				_hx_tmp1 = false;
            			}
HXDLIN( 305)			if (_hx_tmp1) {
HXLINE( 305)				_hx_tmp = (this->width == toCompare->width);
            			}
            			else {
HXLINE( 305)				_hx_tmp = false;
            			}
HXDLIN( 305)			if (_hx_tmp) {
HXLINE( 305)				return (this->height == toCompare->height);
            			}
            			else {
HXLINE( 305)				return false;
            			}
            		}
HXLINE( 304)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,equals,return )

void Rectangle_obj::inflate(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_323_inflate)
HXLINE( 325)		 ::openfl::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 325)		_hx_tmp->x = (_hx_tmp->x - dx);
HXDLIN( 325)		 ::openfl::geom::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 325)		_hx_tmp1->width = (_hx_tmp1->width + (dx * (int)2));
HXLINE( 326)		 ::openfl::geom::Rectangle _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 326)		_hx_tmp2->y = (_hx_tmp2->y - dy);
HXDLIN( 326)		 ::openfl::geom::Rectangle _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 326)		_hx_tmp3->height = (_hx_tmp3->height + (dy * (int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,inflate,(void))

void Rectangle_obj::inflatePoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_345_inflatePoint)
HXDLIN( 345)		this->inflate(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,inflatePoint,(void))

 ::openfl::geom::Rectangle Rectangle_obj::intersection( ::openfl::geom::Rectangle toIntersect){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_365_intersection)
HXLINE( 367)		Float x0;
HXDLIN( 367)		if ((this->x < toIntersect->x)) {
HXLINE( 367)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 367)			x0 = this->x;
            		}
HXLINE( 368)		Float x1;
HXDLIN( 368)		Float x11 = this->get_right();
HXDLIN( 368)		if ((x11 > toIntersect->get_right())) {
HXLINE( 368)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 368)			x1 = this->get_right();
            		}
HXLINE( 370)		if ((x1 <= x0)) {
HXLINE( 372)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 376)		Float y0;
HXDLIN( 376)		if ((this->y < toIntersect->y)) {
HXLINE( 376)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 376)			y0 = this->y;
            		}
HXLINE( 377)		Float y1;
HXDLIN( 377)		Float y11 = this->get_bottom();
HXDLIN( 377)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 377)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 377)			y1 = this->get_bottom();
            		}
HXLINE( 379)		if ((y1 <= y0)) {
HXLINE( 381)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 385)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersection,return )

bool Rectangle_obj::intersects( ::openfl::geom::Rectangle toIntersect){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_402_intersects)
HXLINE( 404)		Float x0;
HXDLIN( 404)		if ((this->x < toIntersect->x)) {
HXLINE( 404)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 404)			x0 = this->x;
            		}
HXLINE( 405)		Float x1;
HXDLIN( 405)		Float x11 = this->get_right();
HXDLIN( 405)		if ((x11 > toIntersect->get_right())) {
HXLINE( 405)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 405)			x1 = this->get_right();
            		}
HXLINE( 407)		if ((x1 <= x0)) {
HXLINE( 409)			return false;
            		}
HXLINE( 413)		Float y0;
HXDLIN( 413)		if ((this->y < toIntersect->y)) {
HXLINE( 413)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 413)			y0 = this->y;
            		}
HXLINE( 414)		Float y1;
HXDLIN( 414)		Float y11 = this->get_bottom();
HXDLIN( 414)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 414)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 414)			y1 = this->get_bottom();
            		}
HXLINE( 416)		return (y1 > y0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersects,return )

bool Rectangle_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_429_isEmpty)
HXDLIN( 429)		if (!((this->width <= (int)0))) {
HXDLIN( 429)			return (this->height <= (int)0);
            		}
            		else {
HXDLIN( 429)			return true;
            		}
HXDLIN( 429)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,isEmpty,return )

void Rectangle_obj::offset(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_441_offset)
HXLINE( 443)		 ::openfl::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 443)		_hx_tmp->x = (_hx_tmp->x + dx);
HXLINE( 444)		 ::openfl::geom::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 444)		_hx_tmp1->y = (_hx_tmp1->y + dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,offset,(void))

void Rectangle_obj::offsetPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_456_offsetPoint)
HXLINE( 458)		 ::openfl::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 458)		_hx_tmp->x = (_hx_tmp->x + point->x);
HXLINE( 459)		 ::openfl::geom::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 459)		_hx_tmp1->y = (_hx_tmp1->y + point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,offsetPoint,(void))

void Rectangle_obj::setEmpty(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_474_setEmpty)
HXDLIN( 474)		this->x = (this->y = (this->width = (this->height = (int)0)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,setEmpty,(void))

void Rectangle_obj::setTo(Float xa,Float ya,Float widtha,Float heighta){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_479_setTo)
HXLINE( 481)		this->x = xa;
HXLINE( 482)		this->y = ya;
HXLINE( 483)		this->width = widtha;
HXLINE( 484)		this->height = heighta;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,setTo,(void))

::String Rectangle_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_491_toString)
HXDLIN( 491)		return ((((((((HX_("(x=",ed,c2,1e,00) + this->x) + HX_(", y=",18,15,2e,1d)) + this->y) + HX_(", width=",eb,04,57,53)) + this->width) + HX_(", height=",82,32,07,68)) + this->height) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,toString,return )

 ::openfl::geom::Rectangle Rectangle_obj::_hx_union( ::openfl::geom::Rectangle toUnion){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_507_union)
HXLINE( 509)		bool _hx_tmp;
HXDLIN( 509)		if ((this->width != (int)0)) {
HXLINE( 509)			_hx_tmp = (this->height == (int)0);
            		}
            		else {
HXLINE( 509)			_hx_tmp = true;
            		}
HXDLIN( 509)		if (_hx_tmp) {
HXLINE( 511)			return toUnion->clone();
            		}
            		else {
HXLINE( 513)			bool _hx_tmp1;
HXDLIN( 513)			if ((toUnion->width != (int)0)) {
HXLINE( 513)				_hx_tmp1 = (toUnion->height == (int)0);
            			}
            			else {
HXLINE( 513)				_hx_tmp1 = true;
            			}
HXDLIN( 513)			if (_hx_tmp1) {
HXLINE( 515)				return this->clone();
            			}
            		}
HXLINE( 519)		Float x0;
HXDLIN( 519)		if ((this->x > toUnion->x)) {
HXLINE( 519)			x0 = toUnion->x;
            		}
            		else {
HXLINE( 519)			x0 = this->x;
            		}
HXLINE( 520)		Float x1;
HXDLIN( 520)		Float x11 = this->get_right();
HXDLIN( 520)		if ((x11 < toUnion->get_right())) {
HXLINE( 520)			x1 = toUnion->get_right();
            		}
            		else {
HXLINE( 520)			x1 = this->get_right();
            		}
HXLINE( 521)		Float y0;
HXDLIN( 521)		if ((this->y > toUnion->y)) {
HXLINE( 521)			y0 = toUnion->y;
            		}
            		else {
HXLINE( 521)			y0 = this->y;
            		}
HXLINE( 522)		Float y1;
HXDLIN( 522)		Float y11 = this->get_bottom();
HXDLIN( 522)		if ((y11 < toUnion->get_bottom())) {
HXLINE( 522)			y1 = toUnion->get_bottom();
            		}
            		else {
HXLINE( 522)			y1 = this->get_bottom();
            		}
HXLINE( 524)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,_hx_union,return )

void Rectangle_obj::_hx___contract(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_529___contract)
HXLINE( 531)		bool _hx_tmp;
HXDLIN( 531)		if ((this->width == (int)0)) {
HXLINE( 531)			_hx_tmp = (this->height == (int)0);
            		}
            		else {
HXLINE( 531)			_hx_tmp = false;
            		}
HXDLIN( 531)		if (_hx_tmp) {
HXLINE( 533)			return;
            		}
HXLINE( 537)		Float offsetX = ((Float)0.0);
HXLINE( 538)		Float offsetY = ((Float)0.0);
HXLINE( 539)		Float offsetRight = ((Float)0.0);
HXLINE( 540)		Float offsetBottom = ((Float)0.0);
HXLINE( 542)		if ((this->x < x)) {
HXLINE( 542)			offsetX = (x - this->x);
            		}
HXLINE( 543)		if ((this->y < y)) {
HXLINE( 543)			offsetY = (y - this->y);
            		}
HXLINE( 544)		Float _hx_tmp1 = this->get_right();
HXDLIN( 544)		if ((_hx_tmp1 > (x + width))) {
HXLINE( 544)			offsetRight = ((x + width) - this->get_right());
            		}
HXLINE( 545)		Float _hx_tmp2 = this->get_bottom();
HXDLIN( 545)		if ((_hx_tmp2 > (y + height))) {
HXLINE( 545)			offsetBottom = ((y + height) - this->get_bottom());
            		}
HXLINE( 547)		 ::openfl::geom::Rectangle _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 547)		_hx_tmp3->x = (_hx_tmp3->x + offsetX);
HXLINE( 548)		 ::openfl::geom::Rectangle _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 548)		_hx_tmp4->y = (_hx_tmp4->y + offsetY);
HXLINE( 549)		 ::openfl::geom::Rectangle _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 549)		_hx_tmp5->width = (_hx_tmp5->width + (offsetRight - offsetX));
HXLINE( 550)		 ::openfl::geom::Rectangle _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 550)		_hx_tmp6->height = (_hx_tmp6->height + (offsetBottom - offsetY));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,_hx___contract,(void))

void Rectangle_obj::_hx___expand(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_555___expand)
HXLINE( 557)		bool _hx_tmp;
HXDLIN( 557)		if ((this->width == (int)0)) {
HXLINE( 557)			_hx_tmp = (this->height == (int)0);
            		}
            		else {
HXLINE( 557)			_hx_tmp = false;
            		}
HXDLIN( 557)		if (_hx_tmp) {
HXLINE( 559)			this->x = x;
HXLINE( 560)			this->y = y;
HXLINE( 561)			this->width = width;
HXLINE( 562)			this->height = height;
HXLINE( 563)			return;
            		}
HXLINE( 567)		Float cacheRight = this->get_right();
HXLINE( 568)		Float cacheBottom = this->get_bottom();
HXLINE( 570)		if ((this->x > x)) {
HXLINE( 572)			this->x = x;
HXLINE( 573)			this->width = (cacheRight - x);
            		}
HXLINE( 575)		if ((this->y > y)) {
HXLINE( 577)			this->y = y;
HXLINE( 578)			this->height = (cacheBottom - y);
            		}
HXLINE( 580)		if ((cacheRight < (x + width))) {
HXLINE( 580)			this->width = ((x + width) - this->x);
            		}
HXLINE( 581)		if ((cacheBottom < (y + height))) {
HXLINE( 581)			this->height = ((y + height) - this->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,_hx___expand,(void))

 ::lime::math::Rectangle Rectangle_obj::_hx___toLimeRectangle(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_587___toLimeRectangle)
HXLINE( 589)		if (hx::IsNull( ::openfl::geom::Rectangle_obj::_hx___limeRectangle )) {
HXLINE( 591)			::openfl::geom::Rectangle_obj::_hx___limeRectangle =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 595)		::openfl::geom::Rectangle_obj::_hx___limeRectangle->setTo(this->x,this->y,this->width,this->height);
HXLINE( 596)		return ::openfl::geom::Rectangle_obj::_hx___limeRectangle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,_hx___toLimeRectangle,return )

void Rectangle_obj::_hx___transform( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix m){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_602___transform)
HXLINE( 604)		Float tx0 = (m->a * this->x);
HXDLIN( 604)		Float tx01 = (tx0 + (m->c * this->y));
HXLINE( 605)		Float tx1 = tx01;
HXLINE( 606)		Float ty0 = (m->b * this->x);
HXDLIN( 606)		Float ty01 = (ty0 + (m->d * this->y));
HXLINE( 607)		Float ty1 = ty01;
HXLINE( 609)		Float m1 = m->a;
HXDLIN( 609)		Float tx = (m1 * (this->x + this->width));
HXDLIN( 609)		Float tx2 = (tx + (m->c * this->y));
HXLINE( 610)		Float m2 = m->b;
HXDLIN( 610)		Float ty = (m2 * (this->x + this->width));
HXDLIN( 610)		Float ty2 = (ty + (m->d * this->y));
HXLINE( 612)		if ((tx2 < tx01)) {
HXLINE( 612)			tx01 = tx2;
            		}
HXLINE( 613)		if ((ty2 < ty01)) {
HXLINE( 613)			ty01 = ty2;
            		}
HXLINE( 614)		if ((tx2 > tx1)) {
HXLINE( 614)			tx1 = tx2;
            		}
HXLINE( 615)		if ((ty2 > ty1)) {
HXLINE( 615)			ty1 = ty2;
            		}
HXLINE( 617)		Float m3 = m->a;
HXDLIN( 617)		Float tx3 = (m3 * (this->x + this->width));
HXDLIN( 617)		Float m4 = m->c;
HXDLIN( 617)		tx2 = (tx3 + (m4 * (this->y + this->height)));
HXLINE( 618)		Float m5 = m->b;
HXDLIN( 618)		Float ty3 = (m5 * (this->x + this->width));
HXDLIN( 618)		Float m6 = m->d;
HXDLIN( 618)		ty2 = (ty3 + (m6 * (this->y + this->height)));
HXLINE( 620)		if ((tx2 < tx01)) {
HXLINE( 620)			tx01 = tx2;
            		}
HXLINE( 621)		if ((ty2 < ty01)) {
HXLINE( 621)			ty01 = ty2;
            		}
HXLINE( 622)		if ((tx2 > tx1)) {
HXLINE( 622)			tx1 = tx2;
            		}
HXLINE( 623)		if ((ty2 > ty1)) {
HXLINE( 623)			ty1 = ty2;
            		}
HXLINE( 625)		Float tx4 = (m->a * this->x);
HXDLIN( 625)		Float m7 = m->c;
HXDLIN( 625)		tx2 = (tx4 + (m7 * (this->y + this->height)));
HXLINE( 626)		Float ty4 = (m->b * this->x);
HXDLIN( 626)		Float m8 = m->d;
HXDLIN( 626)		ty2 = (ty4 + (m8 * (this->y + this->height)));
HXLINE( 628)		if ((tx2 < tx01)) {
HXLINE( 628)			tx01 = tx2;
            		}
HXLINE( 629)		if ((ty2 < ty01)) {
HXLINE( 629)			ty01 = ty2;
            		}
HXLINE( 630)		if ((tx2 > tx1)) {
HXLINE( 630)			tx1 = tx2;
            		}
HXLINE( 631)		if ((ty2 > ty1)) {
HXLINE( 631)			ty1 = ty2;
            		}
HXLINE( 633)		Float _hx_tmp = (tx01 + m->tx);
HXDLIN( 633)		Float _hx_tmp1 = (ty01 + m->ty);
HXDLIN( 633)		rect->setTo(_hx_tmp,_hx_tmp1,(tx1 - tx01),(ty1 - ty01));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,_hx___transform,(void))

Float Rectangle_obj::get_bottom(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_645_get_bottom)
HXDLIN( 645)		return (this->y + this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottom,return )

Float Rectangle_obj::set_bottom(Float b){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_646_set_bottom)
HXDLIN( 646)		this->height = (b - this->y);
HXDLIN( 646)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottom,return )

 ::openfl::geom::Point Rectangle_obj::get_bottomRight(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_647_get_bottomRight)
HXDLIN( 647)		Float _hx_tmp = (this->x + this->width);
HXDLIN( 647)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp,(this->y + this->height));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottomRight,return )

 ::openfl::geom::Point Rectangle_obj::set_bottomRight( ::openfl::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_648_set_bottomRight)
HXDLIN( 648)		this->width = (p->x - this->x);
HXDLIN( 648)		this->height = (p->y - this->y);
HXDLIN( 648)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottomRight,return )

Float Rectangle_obj::get_left(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_649_get_left)
HXDLIN( 649)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_left,return )

Float Rectangle_obj::set_left(Float l){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_650_set_left)
HXDLIN( 650)		 ::openfl::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 650)		_hx_tmp->width = (_hx_tmp->width - (l - this->x));
HXDLIN( 650)		this->x = l;
HXDLIN( 650)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_left,return )

Float Rectangle_obj::get_right(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_651_get_right)
HXDLIN( 651)		return (this->x + this->width);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_right,return )

Float Rectangle_obj::set_right(Float r){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_652_set_right)
HXDLIN( 652)		this->width = (r - this->x);
HXDLIN( 652)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_right,return )

 ::openfl::geom::Point Rectangle_obj::get_size(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_653_get_size)
HXDLIN( 653)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_size,return )

 ::openfl::geom::Point Rectangle_obj::set_size( ::openfl::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_654_set_size)
HXDLIN( 654)		this->width = p->x;
HXDLIN( 654)		this->height = p->y;
HXDLIN( 654)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_size,return )

Float Rectangle_obj::get_top(){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_655_get_top)
HXDLIN( 655)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_top,return )

Float Rectangle_obj::set_top(Float t){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_656_set_top)
HXDLIN( 656)		 ::openfl::geom::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 656)		_hx_tmp->height = (_hx_tmp->height - (t - this->y));
HXDLIN( 656)		this->y = t;
HXDLIN( 656)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_top,return )

 ::openfl::geom::Point Rectangle_obj::get_topLeft(){
            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_657_get_topLeft)
HXDLIN( 657)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_topLeft,return )

 ::openfl::geom::Point Rectangle_obj::set_topLeft( ::openfl::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_45de901e99b61471_658_set_topLeft)
HXDLIN( 658)		this->x = p->x;
HXDLIN( 658)		this->y = p->y;
HXDLIN( 658)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_topLeft,return )

 ::lime::utils::ObjectPool Rectangle_obj::_hx___pool;

 ::lime::math::Rectangle Rectangle_obj::_hx___limeRectangle;


hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	Rectangle_obj *__this = (Rectangle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), false, "openfl.geom.Rectangle"));
	*(void **)__this = Rectangle_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

Rectangle_obj::Rectangle_obj()
{
}

hx::Val Rectangle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_top() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_left() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_right() ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"union") ) { return hx::Val( _hx_union_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottom() ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_topLeft() ); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return hx::Val( inflate_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return hx::Val( get_top_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return hx::Val( set_top_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setEmpty") ) { return hx::Val( setEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"__expand") ) { return hx::Val( _hx___expand_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return hx::Val( get_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return hx::Val( set_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_right") ) { return hx::Val( get_right_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return hx::Val( set_right_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"intersects") ) { return hx::Val( intersects_dyn() ); }
		if (HX_FIELD_EQ(inName,"__contract") ) { return hx::Val( _hx___contract_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return hx::Val( get_bottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return hx::Val( set_bottom_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottomRight() ); }
		if (HX_FIELD_EQ(inName,"offsetPoint") ) { return hx::Val( offsetPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_topLeft") ) { return hx::Val( get_topLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_topLeft") ) { return hx::Val( set_topLeft_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"containsRect") ) { return hx::Val( containsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"inflatePoint") ) { return hx::Val( inflatePoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"intersection") ) { return hx::Val( intersection_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return hx::Val( containsPoint_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_bottomRight") ) { return hx::Val( get_bottomRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottomRight") ) { return hx::Val( set_bottomRight_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__toLimeRectangle") ) { return hx::Val( _hx___toLimeRectangle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Rectangle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { outValue = ( _hx___pool ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__limeRectangle") ) { outValue = ( _hx___limeRectangle ); return true; }
	}
	return false;
}

hx::Val Rectangle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_top(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_left(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast<  ::openfl::geom::Point >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_right(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_topLeft(inValue.Cast<  ::openfl::geom::Point >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottomRight(inValue.Cast<  ::openfl::geom::Point >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Rectangle_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { _hx___pool=ioValue.Cast<  ::lime::utils::ObjectPool >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__limeRectangle") ) { _hx___limeRectangle=ioValue.Cast<  ::lime::math::Rectangle >(); return true; }
	}
	return false;
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"));
	outFields->push(HX_HCSTRING("bottomRight","\xf1","\xa0","\xf4","\x4e"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("top","\x95","\x66","\x58","\x00"));
	outFields->push(HX_HCSTRING("topLeft","\x3c","\x09","\xc1","\xe8"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Rectangle_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Rectangle_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::utils::ObjectPool*/ ,(void *) &Rectangle_obj::_hx___pool,HX_HCSTRING("__pool","\xfc","\xe3","\x54","\xf9")},
	{hx::fsObject /*::lime::math::Rectangle*/ ,(void *) &Rectangle_obj::_hx___limeRectangle,HX_HCSTRING("__limeRectangle","\x3a","\xcb","\xcf","\x63")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("containsPoint","\xb1","\xb9","\xeb","\x92"),
	HX_HCSTRING("containsRect","\xe3","\xce","\x1c","\xa6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("inflate","\x87","\x9c","\x1b","\x0c"),
	HX_HCSTRING("inflatePoint","\x49","\xbe","\x39","\x32"),
	HX_HCSTRING("intersection","\x49","\xa2","\x61","\x88"),
	HX_HCSTRING("intersects","\xb4","\xc2","\xeb","\xe3"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("offsetPoint","\xbd","\x37","\x10","\x5f"),
	HX_HCSTRING("setEmpty","\x8b","\xa3","\x0e","\x7e"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("union","\x0f","\x65","\xe7","\xa6"),
	HX_HCSTRING("__contract","\x32","\x52","\xea","\xda"),
	HX_HCSTRING("__expand","\x7a","\x59","\xa2","\x6c"),
	HX_HCSTRING("__toLimeRectangle","\xbf","\x9c","\x93","\x92"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("get_bottom","\xb4","\x56","\x00","\x56"),
	HX_HCSTRING("set_bottom","\x28","\xf5","\x7d","\x59"),
	HX_HCSTRING("get_bottomRight","\x88","\x58","\xd6","\x0f"),
	HX_HCSTRING("set_bottomRight","\x94","\xd5","\xa1","\x0b"),
	HX_HCSTRING("get_left","\x90","\xc3","\x6a","\xc7"),
	HX_HCSTRING("set_left","\x04","\x1d","\xc8","\x75"),
	HX_HCSTRING("get_right","\x33","\x68","\x0d","\x2d"),
	HX_HCSTRING("set_right","\x3f","\x54","\x5e","\x10"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("get_top","\x2c","\x2f","\xcd","\x26"),
	HX_HCSTRING("set_top","\x38","\xc0","\xce","\x19"),
	HX_HCSTRING("get_topLeft","\x53","\x69","\xbb","\x6e"),
	HX_HCSTRING("set_topLeft","\x5f","\x70","\x28","\x79"),
	::String(null()) };

static void Rectangle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Rectangle_obj::_hx___pool,"__pool");
	HX_MARK_MEMBER_NAME(Rectangle_obj::_hx___limeRectangle,"__limeRectangle");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rectangle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Rectangle_obj::_hx___pool,"__pool");
	HX_VISIT_MEMBER_NAME(Rectangle_obj::_hx___limeRectangle,"__limeRectangle");
};

#endif

hx::Class Rectangle_obj::__mClass;

static ::String Rectangle_obj_sStaticFields[] = {
	HX_HCSTRING("__pool","\xfc","\xe3","\x54","\xf9"),
	HX_HCSTRING("__limeRectangle","\x3a","\xcb","\xcf","\x63"),
	::String(null())
};

void Rectangle_obj::__register()
{
	hx::Object *dummy = new Rectangle_obj;
	Rectangle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Rectangle","\xfb","\x52","\x34","\xb7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rectangle_obj::__GetStatic;
	__mClass->mSetStaticField = &Rectangle_obj::__SetStatic;
	__mClass->mMarkFunc = Rectangle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Rectangle_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rectangle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Rectangle_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::geom::Rectangle _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_65_boot)
HXDLIN(  65)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::openfl::geom::Rectangle r){
            			HX_STACKFRAME(&_hx_pos_45de901e99b61471_65_boot)
HXDLIN(  65)			r->setTo((int)0,(int)0,(int)0,(int)0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_45de901e99b61471_65_boot)
HXDLIN(  65)		_hx___pool =  ::lime::utils::ObjectPool_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()),null());
            	}
}

} // end namespace openfl
} // end namespace geom
