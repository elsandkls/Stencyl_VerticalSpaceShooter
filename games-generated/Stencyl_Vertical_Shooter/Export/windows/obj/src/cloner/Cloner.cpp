// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_cloner_Cloner
#include <cloner/Cloner.h>
#endif
#ifndef INCLUDED_cloner_MapCloner
#include <cloner/MapCloner.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1ce5c1ce8fbccfd1_14_new,"cloner.Cloner","new",0x013aa360,"cloner.Cloner.new","cloner/Cloner.hx",14,0xb15f5fef)
HX_LOCAL_STACK_FRAME(_hx_pos_1ce5c1ce8fbccfd1_25_returnString,"cloner.Cloner","returnString",0x58adb2a1,"cloner.Cloner.returnString","cloner/Cloner.hx",25,0xb15f5fef)
HX_LOCAL_STACK_FRAME(_hx_pos_1ce5c1ce8fbccfd1_28_clone,"cloner.Cloner","clone",0x6ee4a65d,"cloner.Cloner.clone","cloner/Cloner.hx",28,0xb15f5fef)
HX_LOCAL_STACK_FRAME(_hx_pos_1ce5c1ce8fbccfd1_35__clone,"cloner.Cloner","_clone",0xcf29679e,"cloner.Cloner._clone","cloner/Cloner.hx",35,0xb15f5fef)
HX_LOCAL_STACK_FRAME(_hx_pos_1ce5c1ce8fbccfd1_74_handleAnonymous,"cloner.Cloner","handleAnonymous",0xafd60ea5,"cloner.Cloner.handleAnonymous","cloner/Cloner.hx",74,0xb15f5fef)
HX_LOCAL_STACK_FRAME(_hx_pos_1ce5c1ce8fbccfd1_84_handleClass,"cloner.Cloner","handleClass",0x4b13f670,"cloner.Cloner.handleClass","cloner/Cloner.hx",84,0xb15f5fef)
HX_LOCAL_STACK_FRAME(_hx_pos_1ce5c1ce8fbccfd1_91_cloneArray,"cloner.Cloner","cloneArray",0x3c6f05fc,"cloner.Cloner.cloneArray","cloner/Cloner.hx",91,0xb15f5fef)
HX_LOCAL_STACK_FRAME(_hx_pos_1ce5c1ce8fbccfd1_98_cloneClass,"cloner.Cloner","cloneClass",0x5f38109b,"cloner.Cloner.cloneClass","cloner/Cloner.hx",98,0xb15f5fef)
namespace cloner{

void Cloner_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_1ce5c1ce8fbccfd1_14_new)
HXLINE(  15)		this->stringMapCloner =  ::cloner::MapCloner_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),hx::ClassOf< ::haxe::ds::StringMap >());
HXLINE(  16)		this->intMapCloner =  ::cloner::MapCloner_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),hx::ClassOf< ::haxe::ds::IntMap >());
HXLINE(  17)		this->classHandles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  18)		this->classHandles->set(HX_("String",f1,9c,c4,45),this->returnString_dyn());
HXLINE(  19)		this->classHandles->set(HX_("Array",79,dd,bc,b8),this->cloneArray_dyn());
HXLINE(  20)		this->classHandles->set(HX_("haxe.ds.StringMap",d4,d5,d6,62),this->stringMapCloner->clone_dyn());
HXLINE(  21)		this->classHandles->set(HX_("haxe.ds.IntMap",c4,f1,10,1f),this->intMapCloner->clone_dyn());
            	}

Dynamic Cloner_obj::__CreateEmpty() { return new Cloner_obj; }

void *Cloner_obj::_hx_vtable = 0;

Dynamic Cloner_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Cloner_obj > _hx_result = new Cloner_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Cloner_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08ddf0ca;
}

::String Cloner_obj::returnString(::String v){
            	HX_STACKFRAME(&_hx_pos_1ce5c1ce8fbccfd1_25_returnString)
HXDLIN(  25)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Cloner_obj,returnString,return )

 ::Dynamic Cloner_obj::clone( ::Dynamic v){
            	HX_GC_STACKFRAME(&_hx_pos_1ce5c1ce8fbccfd1_28_clone)
HXLINE(  29)		this->cache =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  30)		 ::Dynamic outcome = this->_clone(v);
HXLINE(  31)		this->cache = null();
HXLINE(  32)		return outcome;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Cloner_obj,clone,return )

 ::Dynamic Cloner_obj::_clone( ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_1ce5c1ce8fbccfd1_35__clone)
HXLINE(  47)		if (hx::IsNotNull( ::Type_obj::getClassName(v) )) {
HXLINE(  48)			return v;
            		}
HXLINE(  50)		 ::ValueType _g = ::Type_obj::_hx_typeof(v);
HXDLIN(  50)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE(  52)				return null();
            			}
            			break;
            			case (int)1: {
HXLINE(  54)				return v;
            			}
            			break;
            			case (int)2: {
HXLINE(  56)				return v;
            			}
            			break;
            			case (int)3: {
HXLINE(  58)				return v;
            			}
            			break;
            			case (int)4: {
HXLINE(  60)				return this->handleAnonymous(v);
            			}
            			break;
            			case (int)5: {
HXLINE(  62)				return null();
            			}
            			break;
            			case (int)6: {
HXLINE(  63)				hx::Class c = _g->_hx_getObject(0).StaticCast< hx::Class >();
HXLINE(  64)				if (!(this->cache->exists(v))) {
HXLINE(  65)					 ::haxe::ds::ObjectMap _hx_tmp = this->cache;
HXDLIN(  65)					_hx_tmp->set(v,this->handleClass(c,v));
            				}
HXLINE(  66)				return this->cache->get(v);
            			}
            			break;
            			case (int)7: {
HXLINE(  67)				hx::Class e = _g->_hx_getObject(0).StaticCast< hx::Class >();
HXLINE(  68)				return v;
            			}
            			break;
            			case (int)8: {
HXLINE(  70)				return null();
            			}
            			break;
            		}
HXLINE(  50)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Cloner_obj,_clone,return )

 ::Dynamic Cloner_obj::handleAnonymous( ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_1ce5c1ce8fbccfd1_74_handleAnonymous)
HXLINE(  75)		::Array< ::String > properties = ::Reflect_obj::fields(v);
HXLINE(  76)		 ::Dynamic anonymous =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE(  77)		{
HXLINE(  77)			int _g1 = (int)0;
HXDLIN(  77)			int _g = properties->length;
HXDLIN(  77)			while((_g1 < _g)){
HXLINE(  77)				_g1 = (_g1 + (int)1);
HXDLIN(  77)				int i = (_g1 - (int)1);
HXLINE(  78)				::String property = properties->__get(i);
HXLINE(  79)				::Reflect_obj::setField(anonymous,property,this->_clone(::Reflect_obj::getProperty(v,property)));
            			}
            		}
HXLINE(  81)		return anonymous;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Cloner_obj,handleAnonymous,return )

 ::Dynamic Cloner_obj::handleClass(hx::Class c, ::Dynamic inValue){
            	HX_STACKFRAME(&_hx_pos_1ce5c1ce8fbccfd1_84_handleClass)
HXLINE(  85)		::Dynamic this1 = this->classHandles;
HXDLIN(  85)		 ::Dynamic handle = ( ( ::haxe::ds::StringMap)(this1) )->get(::Type_obj::getClassName(c));
HXLINE(  86)		if (hx::IsNull( handle )) {
HXLINE(  87)			handle = this->cloneClass_dyn();
            		}
HXLINE(  88)		return handle(inValue);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Cloner_obj,handleClass,return )

::cpp::VirtualArray Cloner_obj::cloneArray(::cpp::VirtualArray inValue){
            	HX_STACKFRAME(&_hx_pos_1ce5c1ce8fbccfd1_91_cloneArray)
HXLINE(  92)		::cpp::VirtualArray array = inValue->copy();
HXLINE(  93)		{
HXLINE(  93)			int _g1 = (int)0;
HXDLIN(  93)			int _g = array->get_length();
HXDLIN(  93)			while((_g1 < _g)){
HXLINE(  93)				_g1 = (_g1 + (int)1);
HXDLIN(  93)				int i = (_g1 - (int)1);
HXLINE(  94)				array->set(i,this->_clone(array->__get(i)));
            			}
            		}
HXLINE(  95)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Cloner_obj,cloneArray,return )

 ::Dynamic Cloner_obj::cloneClass( ::Dynamic inValue){
            	HX_STACKFRAME(&_hx_pos_1ce5c1ce8fbccfd1_98_cloneClass)
HXLINE(  99)		 ::Dynamic outValue = ::Type_obj::createEmptyInstance(::Type_obj::getClass(inValue));
HXLINE( 100)		::Array< ::String > fields = ::Reflect_obj::fields(inValue);
HXLINE( 101)		{
HXLINE( 101)			int _g1 = (int)0;
HXDLIN( 101)			int _g = fields->length;
HXDLIN( 101)			while((_g1 < _g)){
HXLINE( 101)				_g1 = (_g1 + (int)1);
HXDLIN( 101)				int i = (_g1 - (int)1);
HXLINE( 102)				::String field = fields->__get(i);
HXLINE( 103)				 ::Dynamic property = ::Reflect_obj::getProperty(inValue,field);
HXLINE( 104)				::Reflect_obj::setField(outValue,field,this->_clone(property));
            			}
            		}
HXLINE( 106)		return outValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Cloner_obj,cloneClass,return )


hx::ObjectPtr< Cloner_obj > Cloner_obj::__new() {
	hx::ObjectPtr< Cloner_obj > __this = new Cloner_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Cloner_obj > Cloner_obj::__alloc(hx::Ctx *_hx_ctx) {
	Cloner_obj *__this = (Cloner_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Cloner_obj), true, "cloner.Cloner"));
	*(void **)__this = Cloner_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Cloner_obj::Cloner_obj()
{
}

void Cloner_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Cloner);
	HX_MARK_MEMBER_NAME(cache,"cache");
	HX_MARK_MEMBER_NAME(classHandles,"classHandles");
	HX_MARK_MEMBER_NAME(stringMapCloner,"stringMapCloner");
	HX_MARK_MEMBER_NAME(intMapCloner,"intMapCloner");
	HX_MARK_END_CLASS();
}

void Cloner_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cache,"cache");
	HX_VISIT_MEMBER_NAME(classHandles,"classHandles");
	HX_VISIT_MEMBER_NAME(stringMapCloner,"stringMapCloner");
	HX_VISIT_MEMBER_NAME(intMapCloner,"intMapCloner");
}

hx::Val Cloner_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { return hx::Val( cache ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_clone") ) { return hx::Val( _clone_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cloneArray") ) { return hx::Val( cloneArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"cloneClass") ) { return hx::Val( cloneClass_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"handleClass") ) { return hx::Val( handleClass_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"classHandles") ) { return hx::Val( classHandles ); }
		if (HX_FIELD_EQ(inName,"intMapCloner") ) { return hx::Val( intMapCloner ); }
		if (HX_FIELD_EQ(inName,"returnString") ) { return hx::Val( returnString_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"stringMapCloner") ) { return hx::Val( stringMapCloner ); }
		if (HX_FIELD_EQ(inName,"handleAnonymous") ) { return hx::Val( handleAnonymous_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Cloner_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"classHandles") ) { classHandles=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intMapCloner") ) { intMapCloner=inValue.Cast<  ::cloner::MapCloner >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"stringMapCloner") ) { stringMapCloner=inValue.Cast<  ::cloner::MapCloner >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Cloner_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"));
	outFields->push(HX_HCSTRING("classHandles","\x73","\x56","\x56","\x2e"));
	outFields->push(HX_HCSTRING("stringMapCloner","\x20","\xcf","\x56","\x7b"));
	outFields->push(HX_HCSTRING("intMapCloner","\x42","\x77","\xd4","\x0b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Cloner_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(Cloner_obj,cache),HX_HCSTRING("cache","\x42","\x9a","\x14","\x41")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Cloner_obj,classHandles),HX_HCSTRING("classHandles","\x73","\x56","\x56","\x2e")},
	{hx::fsObject /*::cloner::MapCloner*/ ,(int)offsetof(Cloner_obj,stringMapCloner),HX_HCSTRING("stringMapCloner","\x20","\xcf","\x56","\x7b")},
	{hx::fsObject /*::cloner::MapCloner*/ ,(int)offsetof(Cloner_obj,intMapCloner),HX_HCSTRING("intMapCloner","\x42","\x77","\xd4","\x0b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Cloner_obj_sStaticStorageInfo = 0;
#endif

static ::String Cloner_obj_sMemberFields[] = {
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("classHandles","\x73","\x56","\x56","\x2e"),
	HX_HCSTRING("stringMapCloner","\x20","\xcf","\x56","\x7b"),
	HX_HCSTRING("intMapCloner","\x42","\x77","\xd4","\x0b"),
	HX_HCSTRING("returnString","\xa1","\xe5","\x86","\x45"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("_clone","\x9e","\x5a","\x4a","\x44"),
	HX_HCSTRING("handleAnonymous","\xa5","\xbb","\x7e","\x46"),
	HX_HCSTRING("handleClass","\x70","\x23","\xa2","\xfa"),
	HX_HCSTRING("cloneArray","\xfc","\x78","\x85","\x20"),
	HX_HCSTRING("cloneClass","\x9b","\x83","\x4e","\x43"),
	::String(null()) };

static void Cloner_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Cloner_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Cloner_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Cloner_obj::__mClass,"__mClass");
};

#endif

hx::Class Cloner_obj::__mClass;

void Cloner_obj::__register()
{
	hx::Object *dummy = new Cloner_obj;
	Cloner_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("cloner.Cloner","\x6e","\xb3","\x15","\xa4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Cloner_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Cloner_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Cloner_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Cloner_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Cloner_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Cloner_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cloner
