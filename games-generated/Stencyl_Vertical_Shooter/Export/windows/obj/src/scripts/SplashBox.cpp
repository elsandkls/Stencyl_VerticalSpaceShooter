// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Universal
#include <Universal.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenManager
#include <com/stencyl/utils/motion/TweenManager.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenTimer
#include <com/stencyl/utils/motion/TweenTimer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_scripts_SplashBox
#include <scripts/SplashBox.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_113d08a4eef47d11_24_new,"scripts.SplashBox","new",0x1383b6d0,"scripts.SplashBox.new","scripts/SplashBox.hx",24,0xb5319021)
HX_DEFINE_STACK_FRAME(_hx_pos_113d08a4eef47d11_12_new,"scripts.SplashBox","new",0x1383b6d0,"scripts.SplashBox.new","scripts/SplashBox.hx",12,0xb5319021)
namespace scripts{

void SplashBox_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::text::TextField,label) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_113d08a4eef47d11_24_new)
HXLINE(  24)			::com::stencyl::Engine_obj::engine->root->addChild(label);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_113d08a4eef47d11_12_new)
HXLINE(  13)		 ::openfl::text::TextField label =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  14)		 ::openfl::text::TextFormat fnt =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Arial",23,09,b6,b8),(int)12,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  15)		fnt->color = (int)16777215;
HXLINE(  16)		label->set_defaultTextFormat(fnt);
HXLINE(  17)		label->set_text(HX_("Stencyl - Trial Mode",14,67,cb,06));
HXLINE(  18)		label->set_background(true);
HXLINE(  19)		label->set_backgroundColor((int)3355443);
HXLINE(  20)		label->set_x((int)0);
HXLINE(  21)		label->set_y((int)0);
HXLINE(  22)		label->set_width((int)120);
HXLINE(  23)		label->set_height((int)20);
HXLINE(  24)		::com::stencyl::utils::motion::TweenManager_obj::timer((int)100)->doOnComplete( ::Dynamic(new _hx_Closure_0(label)));
            	}

Dynamic SplashBox_obj::__CreateEmpty() { return new SplashBox_obj; }

void *SplashBox_obj::_hx_vtable = 0;

Dynamic SplashBox_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SplashBox_obj > _hx_result = new SplashBox_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SplashBox_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x032cd4fc;
}


hx::ObjectPtr< SplashBox_obj > SplashBox_obj::__new() {
	hx::ObjectPtr< SplashBox_obj > __this = new SplashBox_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SplashBox_obj > SplashBox_obj::__alloc(hx::Ctx *_hx_ctx) {
	SplashBox_obj *__this = (SplashBox_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SplashBox_obj), false, "scripts.SplashBox"));
	*(void **)__this = SplashBox_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SplashBox_obj::SplashBox_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SplashBox_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SplashBox_obj_sStaticStorageInfo = 0;
#endif

static void SplashBox_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SplashBox_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SplashBox_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SplashBox_obj::__mClass,"__mClass");
};

#endif

hx::Class SplashBox_obj::__mClass;

void SplashBox_obj::__register()
{
	hx::Object *dummy = new SplashBox_obj;
	SplashBox_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("scripts.SplashBox","\xde","\x4e","\x94","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SplashBox_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SplashBox_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SplashBox_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SplashBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SplashBox_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace scripts
