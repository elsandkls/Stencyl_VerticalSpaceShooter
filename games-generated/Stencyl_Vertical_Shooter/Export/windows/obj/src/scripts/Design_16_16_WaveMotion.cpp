// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_ActorScript
#include <com/stencyl/behavior/ActorScript.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Behavior
#include <com/stencyl/behavior/Behavior.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Script
#include <com/stencyl/behavior/Script.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_scripts_Design_16_16_WaveMotion
#include <scripts/Design_16_16_WaveMotion.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5e493b811892d474_76_new,"scripts.Design_16_16_WaveMotion","new",0x4d8f64fc,"scripts.Design_16_16_WaveMotion.new","scripts/Design_16_16_WaveMotion.hx",76,0xfe260b35)
HX_LOCAL_STACK_FRAME(_hx_pos_5e493b811892d474_116_init,"scripts.Design_16_16_WaveMotion","init",0x8ca1aef4,"scripts.Design_16_16_WaveMotion.init","scripts/Design_16_16_WaveMotion.hx",116,0xfe260b35)
HX_LOCAL_STACK_FRAME(_hx_pos_5e493b811892d474_97_init,"scripts.Design_16_16_WaveMotion","init",0x8ca1aef4,"scripts.Design_16_16_WaveMotion.init","scripts/Design_16_16_WaveMotion.hx",97,0xfe260b35)
HX_LOCAL_STACK_FRAME(_hx_pos_5e493b811892d474_132_forwardMessage,"scripts.Design_16_16_WaveMotion","forwardMessage",0x5ba32766,"scripts.Design_16_16_WaveMotion.forwardMessage","scripts/Design_16_16_WaveMotion.hx",132,0xfe260b35)
namespace scripts{

void Design_16_16_WaveMotion_obj::__construct(int dummy, ::com::stencyl::models::Actor actor, ::com::stencyl::Engine dummy2){
            	HX_STACKFRAME(&_hx_pos_5e493b811892d474_76_new)
HXLINE(  77)		super::__construct(actor);
HXLINE(  78)		this->nameMap->set(HX_("Actor",d5,3a,d4,ae),HX_("actor",f5,ca,a6,1b));
HXLINE(  79)		this->nameMap->set(HX_("Start X",fa,14,6c,02),HX_("_StartX",75,e7,05,a9));
HXLINE(  80)		this->_StartX = ((Float)0.0);
HXLINE(  81)		this->nameMap->set(HX_("Wavelength",7f,8f,07,ab),HX_("_Wavelength",9e,5c,91,7d));
HXLINE(  82)		this->_Wavelength = ((Float)128.0);
HXLINE(  83)		this->nameMap->set(HX_("Amplitude",23,f5,cd,0b),HX_("_Amplitude",e4,70,70,67));
HXLINE(  84)		this->_Amplitude = ((Float)64.0);
HXLINE(  85)		this->nameMap->set(HX_("Direction",1f,42,13,b2),HX_("_Direction",e0,bd,b5,0d));
HXLINE(  86)		this->_Direction = HX_("Horizontal",04,01,75,0c);
HXLINE(  87)		this->nameMap->set(HX_("Start Y",fb,14,6c,02),HX_("_StartY",76,e7,05,a9));
HXLINE(  88)		this->_StartY = ((Float)0.0);
HXLINE(  89)		this->nameMap->set(HX_("Starting Speed",27,f9,93,db),HX_("_StartingSpeed",c8,ed,8e,48));
HXLINE(  90)		this->_StartingSpeed = ((Float)5.0);
HXLINE(  91)		this->nameMap->set(HX_("Wavenumber",62,81,7a,ad),HX_("_Wavenumber",81,4e,04,80));
HXLINE(  92)		this->_Wavenumber = ((Float)0.0);
            	}

Dynamic Design_16_16_WaveMotion_obj::__CreateEmpty() { return new Design_16_16_WaveMotion_obj; }

void *Design_16_16_WaveMotion_obj::_hx_vtable = 0;

Dynamic Design_16_16_WaveMotion_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Design_16_16_WaveMotion_obj > _hx_result = new Design_16_16_WaveMotion_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Design_16_16_WaveMotion_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1d343a03) {
		if (inClassId<=(int)0x17cc67f4) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17cc67f4;
		} else {
			return inClassId==(int)0x1d343a03;
		}
	} else {
		return inClassId==(int)0x5b8a460c;
	}
}

void Design_16_16_WaveMotion_obj::init(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::scripts::Design_16_16_WaveMotion,_gthis) HXARGC(2)
            		void _hx_run(Float elapsedTime,::cpp::VirtualArray list){
            			HX_STACKFRAME(&_hx_pos_5e493b811892d474_116_init)
HXLINE( 116)			if (_gthis->wrapper->enabled) {
HXLINE( 118)				if ((_gthis->_Direction == HX_("Horizontal",04,01,75,0c))) {
HXLINE( 120)					 ::com::stencyl::models::Actor _gthis1 = _gthis->actor;
HXDLIN( 120)					Float _gthis2 = _gthis->_StartY;
HXDLIN( 120)					Float _gthis3 = _gthis->_Amplitude;
HXDLIN( 120)					Float _gthis4 = _gthis->_Wavenumber;
HXDLIN( 120)					Float _gthis5 = _gthis->_StartX;
HXDLIN( 120)					Float _hx_tmp = (_gthis3 * ::Math_obj::sin((_gthis4 * (_gthis5 - _gthis->actor->getXCenter()))));
HXDLIN( 120)					_gthis1->setY((_gthis2 + (_hx_tmp - ((Float)_gthis->actor->getHeight() / (Float)(int)2))),null(),null());
            				}
            				else {
HXLINE( 122)					if ((_gthis->_Direction == HX_("Vertical",96,78,c7,43))) {
HXLINE( 124)						 ::com::stencyl::models::Actor _gthis6 = _gthis->actor;
HXDLIN( 124)						Float _gthis7 = _gthis->_StartX;
HXDLIN( 124)						Float _gthis8 = _gthis->_Amplitude;
HXDLIN( 124)						Float _gthis9 = _gthis->_Wavenumber;
HXDLIN( 124)						Float _gthis10 = _gthis->_StartY;
HXDLIN( 124)						Float _hx_tmp1 = (_gthis8 * ::Math_obj::sin((_gthis9 * (_gthis10 - _gthis->actor->getYCenter()))));
HXDLIN( 124)						_gthis6->setX((_gthis7 + (_hx_tmp1 - ((Float)_gthis->actor->getWidth() / (Float)(int)2))),null(),null());
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_5e493b811892d474_97_init)
HXLINE(  96)		 ::scripts::Design_16_16_WaveMotion _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 100)		this->actor->makeAlwaysSimulate(null());
HXLINE( 101)		this->_Wavenumber = ((Float)((int)2 * ::Math_obj::PI) / (Float)this->_Wavelength);
HXLINE( 102)		this->_StartX = this->actor->getXCenter();
HXLINE( 103)		this->_StartY = this->actor->getYCenter();
HXLINE( 104)		if ((this->_Direction == HX_("Horizontal",04,01,75,0c))) {
HXLINE( 106)			this->actor->setXVelocity(this->_StartingSpeed);
            		}
            		else {
HXLINE( 110)			this->actor->setYVelocity(this->_StartingSpeed);
            		}
HXLINE( 114)		this->addWhenUpdatedListener(null(), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


void Design_16_16_WaveMotion_obj::forwardMessage(::String msg){
            	HX_STACKFRAME(&_hx_pos_5e493b811892d474_132_forwardMessage)
            	}



hx::ObjectPtr< Design_16_16_WaveMotion_obj > Design_16_16_WaveMotion_obj::__new(int dummy, ::com::stencyl::models::Actor actor, ::com::stencyl::Engine dummy2) {
	hx::ObjectPtr< Design_16_16_WaveMotion_obj > __this = new Design_16_16_WaveMotion_obj();
	__this->__construct(dummy,actor,dummy2);
	return __this;
}

hx::ObjectPtr< Design_16_16_WaveMotion_obj > Design_16_16_WaveMotion_obj::__alloc(hx::Ctx *_hx_ctx,int dummy, ::com::stencyl::models::Actor actor, ::com::stencyl::Engine dummy2) {
	Design_16_16_WaveMotion_obj *__this = (Design_16_16_WaveMotion_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Design_16_16_WaveMotion_obj), true, "scripts.Design_16_16_WaveMotion"));
	*(void **)__this = Design_16_16_WaveMotion_obj::_hx_vtable;
	__this->__construct(dummy,actor,dummy2);
	return __this;
}

Design_16_16_WaveMotion_obj::Design_16_16_WaveMotion_obj()
{
}

void Design_16_16_WaveMotion_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Design_16_16_WaveMotion);
	HX_MARK_MEMBER_NAME(_StartX,"_StartX");
	HX_MARK_MEMBER_NAME(_Wavelength,"_Wavelength");
	HX_MARK_MEMBER_NAME(_Amplitude,"_Amplitude");
	HX_MARK_MEMBER_NAME(_Direction,"_Direction");
	HX_MARK_MEMBER_NAME(_StartY,"_StartY");
	HX_MARK_MEMBER_NAME(_StartingSpeed,"_StartingSpeed");
	HX_MARK_MEMBER_NAME(_Wavenumber,"_Wavenumber");
	 ::com::stencyl::behavior::ActorScript_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Design_16_16_WaveMotion_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_StartX,"_StartX");
	HX_VISIT_MEMBER_NAME(_Wavelength,"_Wavelength");
	HX_VISIT_MEMBER_NAME(_Amplitude,"_Amplitude");
	HX_VISIT_MEMBER_NAME(_Direction,"_Direction");
	HX_VISIT_MEMBER_NAME(_StartY,"_StartY");
	HX_VISIT_MEMBER_NAME(_StartingSpeed,"_StartingSpeed");
	HX_VISIT_MEMBER_NAME(_Wavenumber,"_Wavenumber");
	 ::com::stencyl::behavior::ActorScript_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Design_16_16_WaveMotion_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_StartX") ) { return hx::Val( _StartX ); }
		if (HX_FIELD_EQ(inName,"_StartY") ) { return hx::Val( _StartY ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_Amplitude") ) { return hx::Val( _Amplitude ); }
		if (HX_FIELD_EQ(inName,"_Direction") ) { return hx::Val( _Direction ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_Wavelength") ) { return hx::Val( _Wavelength ); }
		if (HX_FIELD_EQ(inName,"_Wavenumber") ) { return hx::Val( _Wavenumber ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_StartingSpeed") ) { return hx::Val( _StartingSpeed ); }
		if (HX_FIELD_EQ(inName,"forwardMessage") ) { return hx::Val( forwardMessage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Design_16_16_WaveMotion_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_StartX") ) { _StartX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_StartY") ) { _StartY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_Amplitude") ) { _Amplitude=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_Direction") ) { _Direction=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_Wavelength") ) { _Wavelength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_Wavenumber") ) { _Wavenumber=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_StartingSpeed") ) { _StartingSpeed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Design_16_16_WaveMotion_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_StartX","\x75","\xe7","\x05","\xa9"));
	outFields->push(HX_HCSTRING("_Wavelength","\x9e","\x5c","\x91","\x7d"));
	outFields->push(HX_HCSTRING("_Amplitude","\xe4","\x70","\x70","\x67"));
	outFields->push(HX_HCSTRING("_Direction","\xe0","\xbd","\xb5","\x0d"));
	outFields->push(HX_HCSTRING("_StartY","\x76","\xe7","\x05","\xa9"));
	outFields->push(HX_HCSTRING("_StartingSpeed","\xc8","\xed","\x8e","\x48"));
	outFields->push(HX_HCSTRING("_Wavenumber","\x81","\x4e","\x04","\x80"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Design_16_16_WaveMotion_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Design_16_16_WaveMotion_obj,_StartX),HX_HCSTRING("_StartX","\x75","\xe7","\x05","\xa9")},
	{hx::fsFloat,(int)offsetof(Design_16_16_WaveMotion_obj,_Wavelength),HX_HCSTRING("_Wavelength","\x9e","\x5c","\x91","\x7d")},
	{hx::fsFloat,(int)offsetof(Design_16_16_WaveMotion_obj,_Amplitude),HX_HCSTRING("_Amplitude","\xe4","\x70","\x70","\x67")},
	{hx::fsString,(int)offsetof(Design_16_16_WaveMotion_obj,_Direction),HX_HCSTRING("_Direction","\xe0","\xbd","\xb5","\x0d")},
	{hx::fsFloat,(int)offsetof(Design_16_16_WaveMotion_obj,_StartY),HX_HCSTRING("_StartY","\x76","\xe7","\x05","\xa9")},
	{hx::fsFloat,(int)offsetof(Design_16_16_WaveMotion_obj,_StartingSpeed),HX_HCSTRING("_StartingSpeed","\xc8","\xed","\x8e","\x48")},
	{hx::fsFloat,(int)offsetof(Design_16_16_WaveMotion_obj,_Wavenumber),HX_HCSTRING("_Wavenumber","\x81","\x4e","\x04","\x80")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Design_16_16_WaveMotion_obj_sStaticStorageInfo = 0;
#endif

static ::String Design_16_16_WaveMotion_obj_sMemberFields[] = {
	HX_HCSTRING("_StartX","\x75","\xe7","\x05","\xa9"),
	HX_HCSTRING("_Wavelength","\x9e","\x5c","\x91","\x7d"),
	HX_HCSTRING("_Amplitude","\xe4","\x70","\x70","\x67"),
	HX_HCSTRING("_Direction","\xe0","\xbd","\xb5","\x0d"),
	HX_HCSTRING("_StartY","\x76","\xe7","\x05","\xa9"),
	HX_HCSTRING("_StartingSpeed","\xc8","\xed","\x8e","\x48"),
	HX_HCSTRING("_Wavenumber","\x81","\x4e","\x04","\x80"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("forwardMessage","\x82","\x6e","\xf7","\x88"),
	::String(null()) };

static void Design_16_16_WaveMotion_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Design_16_16_WaveMotion_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Design_16_16_WaveMotion_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Design_16_16_WaveMotion_obj::__mClass,"__mClass");
};

#endif

hx::Class Design_16_16_WaveMotion_obj::__mClass;

void Design_16_16_WaveMotion_obj::__register()
{
	hx::Object *dummy = new Design_16_16_WaveMotion_obj;
	Design_16_16_WaveMotion_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("scripts.Design_16_16_WaveMotion","\x0a","\x77","\xca","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Design_16_16_WaveMotion_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Design_16_16_WaveMotion_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Design_16_16_WaveMotion_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Design_16_16_WaveMotion_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Design_16_16_WaveMotion_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Design_16_16_WaveMotion_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace scripts
