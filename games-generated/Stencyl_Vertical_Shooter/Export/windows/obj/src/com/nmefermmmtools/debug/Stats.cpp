// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_nmefermmmtools_debug_Stats
#include <com/nmefermmmtools/debug/Stats.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_20cb522eff95d0c5_71_new,"com.nmefermmmtools.debug.Stats","new",0xe9d88770,"com.nmefermmmtools.debug.Stats.new","com/nmefermmmtools/debug/Stats.hx",71,0x8c268021)
HX_LOCAL_STACK_FRAME(_hx_pos_20cb522eff95d0c5_97_init,"com.nmefermmmtools.debug.Stats","init",0xb056b200,"com.nmefermmmtools.debug.Stats.init","com/nmefermmmtools/debug/Stats.hx",97,0x8c268021)
HX_LOCAL_STACK_FRAME(_hx_pos_20cb522eff95d0c5_130_destroy,"com.nmefermmmtools.debug.Stats","destroy",0xaa9bac0a,"com.nmefermmmtools.debug.Stats.destroy","com/nmefermmmtools/debug/Stats.hx",130,0x8c268021)
HX_LOCAL_STACK_FRAME(_hx_pos_20cb522eff95d0c5_143_update,"com.nmefermmmtools.debug.Stats","update",0x68a098f9,"com.nmefermmmtools.debug.Stats.update","com/nmefermmmtools/debug/Stats.hx",143,0x8c268021)
HX_LOCAL_STACK_FRAME(_hx_pos_20cb522eff95d0c5_241_normalizeMem,"com.nmefermmmtools.debug.Stats","normalizeMem",0x4d7ceb78,"com.nmefermmmtools.debug.Stats.normalizeMem","com/nmefermmmtools/debug/Stats.hx",241,0x8c268021)
HX_LOCAL_STACK_FRAME(_hx_pos_20cb522eff95d0c5_35_boot,"com.nmefermmmtools.debug.Stats","boot",0xabb6fb22,"com.nmefermmmtools.debug.Stats.boot","com/nmefermmmtools/debug/Stats.hx",35,0x8c268021)
HX_LOCAL_STACK_FRAME(_hx_pos_20cb522eff95d0c5_37_boot,"com.nmefermmmtools.debug.Stats","boot",0xabb6fb22,"com.nmefermmmtools.debug.Stats.boot","com/nmefermmmtools/debug/Stats.hx",37,0x8c268021)
HX_LOCAL_STACK_FRAME(_hx_pos_20cb522eff95d0c5_38_boot,"com.nmefermmmtools.debug.Stats","boot",0xabb6fb22,"com.nmefermmmtools.debug.Stats.boot","com/nmefermmmtools/debug/Stats.hx",38,0x8c268021)
HX_LOCAL_STACK_FRAME(_hx_pos_20cb522eff95d0c5_39_boot,"com.nmefermmmtools.debug.Stats","boot",0xabb6fb22,"com.nmefermmmtools.debug.Stats.boot","com/nmefermmmtools/debug/Stats.hx",39,0x8c268021)
HX_LOCAL_STACK_FRAME(_hx_pos_20cb522eff95d0c5_40_boot,"com.nmefermmmtools.debug.Stats","boot",0xabb6fb22,"com.nmefermmmtools.debug.Stats.boot","com/nmefermmmtools/debug/Stats.hx",40,0x8c268021)
namespace com{
namespace nmefermmmtools{
namespace debug{

void Stats_obj::__construct(hx::Null< bool >  __o_alignRight){
bool alignRight = __o_alignRight.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_20cb522eff95d0c5_71_new)
HXLINE(  72)		super::__construct();
HXLINE(  73)		this->alignRight = alignRight;
HXLINE(  74)		this->start = true;
HXLINE(  75)		this->mem_max = (int)0;
HXLINE(  76)		this->fps = (int)0;
HXLINE(  78)		this->text =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  82)		 ::openfl::text::TextField _hx_tmp = this->text;
HXDLIN(  82)		_hx_tmp->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("_sans",32,a0,5e,ff),(int)9,(int)16776960,null(),null(),null(),null(),null(),null(),null(),null(),null(),(int)-2));
HXLINE(  84)		this->text->set_wordWrap(true);
HXLINE(  85)		this->text->set_multiline(true);
HXLINE(  86)		this->text->set_width((int)70);
HXLINE(  87)		this->text->set_height((int)50);
HXLINE(  88)		this->text->set_selectable(false);
HXLINE(  89)		this->text->mouseEnabled = false;
HXLINE(  91)		this->rectangle =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)69,(int)0,(int)1,(int)50);
HXLINE(  93)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->init_dyn(),false,(int)0,true);
HXLINE(  94)		this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->destroy_dyn(),false,(int)0,true);
            	}

Dynamic Stats_obj::__CreateEmpty() { return new Stats_obj; }

void *Stats_obj::_hx_vtable = 0;

Dynamic Stats_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Stats_obj > _hx_result = new Stats_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Stats_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x217a7bc8) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x217a7bc8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Stats_obj::init( ::openfl::events::Event e){
            	HX_GC_STACKFRAME(&_hx_pos_20cb522eff95d0c5_97_init)
HXLINE(  99)		this->_stage = ::openfl::Lib_obj::get_current()->stage;
HXLINE( 100)		this->get_graphics()->beginFill((int)51,null());
HXLINE( 101)		this->get_graphics()->drawRect((int)0,(int)0,(int)70,(int)50);
HXLINE( 102)		this->get_graphics()->endFill();
HXLINE( 104)		this->addChild(this->text);
HXLINE( 106)		this->graph =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)70,(int)50,false,(int)51);
HXLINE( 108)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->update_dyn(),null(),null(),null());
HXLINE( 110)		bool _hx_tmp = this->alignRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stats_obj,init,(void))

void Stats_obj::destroy( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_20cb522eff95d0c5_130_destroy)
HXLINE( 132)		this->get_graphics()->clear();
HXLINE( 134)		while((this->get_numChildren() > (int)0)){
HXLINE( 135)			this->removeChildAt((int)0);
            		}
HXLINE( 137)		this->graph->dispose();
HXLINE( 139)		this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->update_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stats_obj,destroy,(void))

void Stats_obj::update( ::openfl::events::Event e){
            	HX_GC_STACKFRAME(&_hx_pos_20cb522eff95d0c5_143_update)
HXLINE( 147)		bool _hx_tmp;
HXDLIN( 147)		if (this->start) {
HXLINE( 147)			_hx_tmp = this->alignRight;
            		}
            		else {
HXLINE( 147)			_hx_tmp = false;
            		}
HXDLIN( 147)		if (_hx_tmp) {
HXLINE( 149)			int _hx_tmp1 = this->_stage->stageWidth;
HXDLIN( 149)			this->set_x((_hx_tmp1 - this->get_width()));
HXLINE( 150)			this->start = false;
            		}
HXLINE( 154)		this->timer = ::openfl::Lib_obj::getTimer();
HXLINE( 157)		if (((this->timer - (int)1000) > this->ms_prev)) {
HXLINE( 159)			this->mem = (::openfl::_hx_system::System_obj::get_totalMemory() * ((Float)0.000000954));
HXLINE( 160)			Float _hx_tmp2;
HXDLIN( 160)			if ((this->mem_max > this->mem)) {
HXLINE( 160)				_hx_tmp2 = this->mem_max;
            			}
            			else {
HXLINE( 160)				_hx_tmp2 = this->mem;
            			}
HXDLIN( 160)			this->mem_max = _hx_tmp2;
HXLINE( 163)			{
HXLINE( 164)				int _hx_tmp3 = this->fps;
HXDLIN( 164)				this->fps_graph = ((int)50 - ::Std_obj::_hx_int(::Math_obj::min((int)50,(((Float)_hx_tmp3 / (Float)this->_stage->get_frameRate()) * (int)50))));
HXLINE( 166)				this->mem_graph = ((int)50 - this->normalizeMem(this->mem));
HXLINE( 167)				this->mem_max_graph = ((int)50 - this->normalizeMem(this->mem_max));
HXLINE( 169)				this->ms_graph = ::Std_obj::_hx_int(((int)50 - ((int)(this->timer - this->ms) >> (int)(int)1)));
HXLINE( 170)				this->graph->scroll((int)-1,(int)0);
HXLINE( 172)				this->get_graphics()->clear();
HXLINE( 173)				this->get_graphics()->beginFill((int)51,null());
HXLINE( 174)				this->get_graphics()->drawRect((int)0,(int)0,(int)70,(int)50);
HXLINE( 175)				this->get_graphics()->endFill();
HXLINE( 176)				 ::openfl::display::Graphics _hx_tmp4 = this->get_graphics();
HXDLIN( 176)				 ::openfl::display::BitmapData _hx_tmp5 = this->graph;
HXDLIN( 176)				_hx_tmp4->beginBitmapFill(_hx_tmp5, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,(int)1,(int)0,(int)50),null(),null());
HXLINE( 177)				this->get_graphics()->drawRect((int)0,(int)50,(int)70,(int)50);
HXLINE( 178)				this->get_graphics()->endFill();
HXLINE( 180)				this->graph->fillRect(this->rectangle,(int)51);
HXLINE( 181)				this->graph->lock();
HXLINE( 182)				this->graph->setPixel((int)69,this->fps_graph,(int)16776960);
HXLINE( 183)				this->graph->setPixel((int)69,this->mem_graph,(int)65535);
HXLINE( 184)				this->graph->setPixel((int)69,this->mem_max_graph,(int)16711792);
HXLINE( 185)				this->graph->setPixel((int)69,this->ms_graph,(int)65280);
HXLINE( 186)				this->graph->unlock(null());
            			}
HXLINE( 191)			if ((this->fps > (int)60)) {
HXLINE( 192)				this->fps = (int)60;
            			}
HXLINE( 193)			this->fpsStr = ((HX_("FPS: ",af,da,2c,83) + this->fps) + HX_(" / 60",ab,0e,fc,8b));
HXLINE( 195)			this->memStr = (HX_("MEM: ",db,03,b1,83) + ::Math_obj::round(this->mem));
HXLINE( 196)			this->memMaxStr = (HX_("MAX: ",2a,82,14,81) + ::Math_obj::round(this->mem_max));
HXLINE( 201)			this->fps = (int)0;
HXLINE( 202)			this->ms_prev = this->timer;
HXLINE( 218)			{
HXLINE( 219)				::String htmlText = ((((((((((((((((HX_("<font color='",58,f8,ea,b6) + HX_("#ffff00",e3,88,6e,76)) + HX_("'>",37,22,00,00)) + this->fpsStr) + HX_("</font>",3c,82,5f,8e)) + HX_("<br>",b2,8d,f3,27)) + HX_("<font color='",58,f8,ea,b6)) + HX_("#00ffff",e3,e8,85,c7)) + HX_("'>",37,22,00,00)) + this->memStr) + HX_("</font>",3c,82,5f,8e)) + HX_("<br>",b2,8d,f3,27)) + HX_("<font color='",58,f8,ea,b6)) + HX_("#ff0070",bc,0f,94,52)) + HX_("'>",37,22,00,00)) + this->memMaxStr) + HX_("</font>",3c,82,5f,8e));
HXLINE( 225)				this->text->set_htmlText(htmlText);
            			}
HXLINE( 229)			return;
            		}
HXLINE( 233)		this->fps++;
HXLINE( 235)		this->ms = this->timer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stats_obj,update,(void))

int Stats_obj::normalizeMem(Float _mem){
            	HX_STACKFRAME(&_hx_pos_20cb522eff95d0c5_241_normalizeMem)
HXDLIN( 241)		return ::Std_obj::_hx_int((::Math_obj::min((int)50,::Math_obj::sqrt(::Math_obj::sqrt((_mem * (int)5000)))) - (int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stats_obj,normalizeMem,return )

bool Stats_obj::FPS_ONLY;

int Stats_obj::GRAPH_WIDTH;

int Stats_obj::XPOS;

int Stats_obj::GRAPH_HEIGHT;

int Stats_obj::TEXT_HEIGHT;


hx::ObjectPtr< Stats_obj > Stats_obj::__new(hx::Null< bool >  __o_alignRight) {
	hx::ObjectPtr< Stats_obj > __this = new Stats_obj();
	__this->__construct(__o_alignRight);
	return __this;
}

hx::ObjectPtr< Stats_obj > Stats_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< bool >  __o_alignRight) {
	Stats_obj *__this = (Stats_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Stats_obj), true, "com.nmefermmmtools.debug.Stats"));
	*(void **)__this = Stats_obj::_hx_vtable;
	__this->__construct(__o_alignRight);
	return __this;
}

Stats_obj::Stats_obj()
{
}

void Stats_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stats);
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(fps,"fps");
	HX_MARK_MEMBER_NAME(ms,"ms");
	HX_MARK_MEMBER_NAME(ms_prev,"ms_prev");
	HX_MARK_MEMBER_NAME(mem,"mem");
	HX_MARK_MEMBER_NAME(mem_max,"mem_max");
	HX_MARK_MEMBER_NAME(graph,"graph");
	HX_MARK_MEMBER_NAME(rectangle,"rectangle");
	HX_MARK_MEMBER_NAME(alignRight,"alignRight");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(fps_graph,"fps_graph");
	HX_MARK_MEMBER_NAME(mem_graph,"mem_graph");
	HX_MARK_MEMBER_NAME(ms_graph,"ms_graph");
	HX_MARK_MEMBER_NAME(mem_max_graph,"mem_max_graph");
	HX_MARK_MEMBER_NAME(_stage,"_stage");
	HX_MARK_MEMBER_NAME(fpsStr,"fpsStr");
	HX_MARK_MEMBER_NAME(memStr,"memStr");
	HX_MARK_MEMBER_NAME(memMaxStr,"memMaxStr");
	HX_MARK_MEMBER_NAME(msStr,"msStr");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stats_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(fps,"fps");
	HX_VISIT_MEMBER_NAME(ms,"ms");
	HX_VISIT_MEMBER_NAME(ms_prev,"ms_prev");
	HX_VISIT_MEMBER_NAME(mem,"mem");
	HX_VISIT_MEMBER_NAME(mem_max,"mem_max");
	HX_VISIT_MEMBER_NAME(graph,"graph");
	HX_VISIT_MEMBER_NAME(rectangle,"rectangle");
	HX_VISIT_MEMBER_NAME(alignRight,"alignRight");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(fps_graph,"fps_graph");
	HX_VISIT_MEMBER_NAME(mem_graph,"mem_graph");
	HX_VISIT_MEMBER_NAME(ms_graph,"ms_graph");
	HX_VISIT_MEMBER_NAME(mem_max_graph,"mem_max_graph");
	HX_VISIT_MEMBER_NAME(_stage,"_stage");
	HX_VISIT_MEMBER_NAME(fpsStr,"fpsStr");
	HX_VISIT_MEMBER_NAME(memStr,"memStr");
	HX_VISIT_MEMBER_NAME(memMaxStr,"memMaxStr");
	HX_VISIT_MEMBER_NAME(msStr,"msStr");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Stats_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ms") ) { return hx::Val( ms ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { return hx::Val( fps ); }
		if (HX_FIELD_EQ(inName,"mem") ) { return hx::Val( mem ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer ); }
		if (HX_FIELD_EQ(inName,"graph") ) { return hx::Val( graph ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"msStr") ) { return hx::Val( msStr ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_stage") ) { return hx::Val( _stage ); }
		if (HX_FIELD_EQ(inName,"fpsStr") ) { return hx::Val( fpsStr ); }
		if (HX_FIELD_EQ(inName,"memStr") ) { return hx::Val( memStr ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ms_prev") ) { return hx::Val( ms_prev ); }
		if (HX_FIELD_EQ(inName,"mem_max") ) { return hx::Val( mem_max ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ms_graph") ) { return hx::Val( ms_graph ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rectangle") ) { return hx::Val( rectangle ); }
		if (HX_FIELD_EQ(inName,"fps_graph") ) { return hx::Val( fps_graph ); }
		if (HX_FIELD_EQ(inName,"mem_graph") ) { return hx::Val( mem_graph ); }
		if (HX_FIELD_EQ(inName,"memMaxStr") ) { return hx::Val( memMaxStr ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alignRight") ) { return hx::Val( alignRight ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"normalizeMem") ) { return hx::Val( normalizeMem_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mem_max_graph") ) { return hx::Val( mem_max_graph ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Stats_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ms") ) { ms=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { fps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mem") ) { mem=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"graph") ) { graph=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"msStr") ) { msStr=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_stage") ) { _stage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fpsStr") ) { fpsStr=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"memStr") ) { memStr=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ms_prev") ) { ms_prev=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mem_max") ) { mem_max=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ms_graph") ) { ms_graph=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rectangle") ) { rectangle=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fps_graph") ) { fps_graph=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mem_graph") ) { mem_graph=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"memMaxStr") ) { memMaxStr=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alignRight") ) { alignRight=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mem_max_graph") ) { mem_max_graph=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stats_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	outFields->push(HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00"));
	outFields->push(HX_HCSTRING("ms","\x66","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("ms_prev","\xac","\xe9","\x1d","\xad"));
	outFields->push(HX_HCSTRING("mem","\x15","\x0e","\x53","\x00"));
	outFields->push(HX_HCSTRING("mem_max","\x3a","\x8c","\x7a","\x18"));
	outFields->push(HX_HCSTRING("graph","\x4e","\x0f","\xea","\x99"));
	outFields->push(HX_HCSTRING("rectangle","\x2f","\xd4","\x7c","\x19"));
	outFields->push(HX_HCSTRING("alignRight","\xd7","\x7a","\xb6","\x82"));
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("fps_graph","\x38","\x73","\x37","\x56"));
	outFields->push(HX_HCSTRING("mem_graph","\x64","\xa2","\x25","\xac"));
	outFields->push(HX_HCSTRING("ms_graph","\x75","\x46","\x70","\x9e"));
	outFields->push(HX_HCSTRING("mem_max_graph","\x49","\xca","\x99","\x6e"));
	outFields->push(HX_HCSTRING("_stage","\xff","\xb1","\xf2","\x7f"));
	outFields->push(HX_HCSTRING("fpsStr","\x48","\xb0","\x8a","\x91"));
	outFields->push(HX_HCSTRING("memStr","\x9c","\x8d","\xaa","\x04"));
	outFields->push(HX_HCSTRING("memMaxStr","\x62","\x54","\x3e","\x09"));
	outFields->push(HX_HCSTRING("msStr","\xeb","\x24","\xf0","\x0e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Stats_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Stats_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsInt,(int)offsetof(Stats_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{hx::fsInt,(int)offsetof(Stats_obj,fps),HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00")},
	{hx::fsInt,(int)offsetof(Stats_obj,ms),HX_HCSTRING("ms","\x66","\x5f","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Stats_obj,ms_prev),HX_HCSTRING("ms_prev","\xac","\xe9","\x1d","\xad")},
	{hx::fsFloat,(int)offsetof(Stats_obj,mem),HX_HCSTRING("mem","\x15","\x0e","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(Stats_obj,mem_max),HX_HCSTRING("mem_max","\x3a","\x8c","\x7a","\x18")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Stats_obj,graph),HX_HCSTRING("graph","\x4e","\x0f","\xea","\x99")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Stats_obj,rectangle),HX_HCSTRING("rectangle","\x2f","\xd4","\x7c","\x19")},
	{hx::fsBool,(int)offsetof(Stats_obj,alignRight),HX_HCSTRING("alignRight","\xd7","\x7a","\xb6","\x82")},
	{hx::fsBool,(int)offsetof(Stats_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsInt,(int)offsetof(Stats_obj,fps_graph),HX_HCSTRING("fps_graph","\x38","\x73","\x37","\x56")},
	{hx::fsInt,(int)offsetof(Stats_obj,mem_graph),HX_HCSTRING("mem_graph","\x64","\xa2","\x25","\xac")},
	{hx::fsInt,(int)offsetof(Stats_obj,ms_graph),HX_HCSTRING("ms_graph","\x75","\x46","\x70","\x9e")},
	{hx::fsInt,(int)offsetof(Stats_obj,mem_max_graph),HX_HCSTRING("mem_max_graph","\x49","\xca","\x99","\x6e")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(int)offsetof(Stats_obj,_stage),HX_HCSTRING("_stage","\xff","\xb1","\xf2","\x7f")},
	{hx::fsString,(int)offsetof(Stats_obj,fpsStr),HX_HCSTRING("fpsStr","\x48","\xb0","\x8a","\x91")},
	{hx::fsString,(int)offsetof(Stats_obj,memStr),HX_HCSTRING("memStr","\x9c","\x8d","\xaa","\x04")},
	{hx::fsString,(int)offsetof(Stats_obj,memMaxStr),HX_HCSTRING("memMaxStr","\x62","\x54","\x3e","\x09")},
	{hx::fsString,(int)offsetof(Stats_obj,msStr),HX_HCSTRING("msStr","\xeb","\x24","\xf0","\x0e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Stats_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Stats_obj::FPS_ONLY,HX_HCSTRING("FPS_ONLY","\xe2","\xac","\xa3","\xb9")},
	{hx::fsInt,(void *) &Stats_obj::GRAPH_WIDTH,HX_HCSTRING("GRAPH_WIDTH","\xd5","\x12","\xdb","\xba")},
	{hx::fsInt,(void *) &Stats_obj::XPOS,HX_HCSTRING("XPOS","\x1c","\xc0","\x67","\x3a")},
	{hx::fsInt,(void *) &Stats_obj::GRAPH_HEIGHT,HX_HCSTRING("GRAPH_HEIGHT","\x18","\xe0","\x24","\x7b")},
	{hx::fsInt,(void *) &Stats_obj::TEXT_HEIGHT,HX_HCSTRING("TEXT_HEIGHT","\x79","\xd0","\xdc","\x87")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Stats_obj_sMemberFields[] = {
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00"),
	HX_HCSTRING("ms","\x66","\x5f","\x00","\x00"),
	HX_HCSTRING("ms_prev","\xac","\xe9","\x1d","\xad"),
	HX_HCSTRING("mem","\x15","\x0e","\x53","\x00"),
	HX_HCSTRING("mem_max","\x3a","\x8c","\x7a","\x18"),
	HX_HCSTRING("graph","\x4e","\x0f","\xea","\x99"),
	HX_HCSTRING("rectangle","\x2f","\xd4","\x7c","\x19"),
	HX_HCSTRING("alignRight","\xd7","\x7a","\xb6","\x82"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("fps_graph","\x38","\x73","\x37","\x56"),
	HX_HCSTRING("mem_graph","\x64","\xa2","\x25","\xac"),
	HX_HCSTRING("ms_graph","\x75","\x46","\x70","\x9e"),
	HX_HCSTRING("mem_max_graph","\x49","\xca","\x99","\x6e"),
	HX_HCSTRING("_stage","\xff","\xb1","\xf2","\x7f"),
	HX_HCSTRING("fpsStr","\x48","\xb0","\x8a","\x91"),
	HX_HCSTRING("memStr","\x9c","\x8d","\xaa","\x04"),
	HX_HCSTRING("memMaxStr","\x62","\x54","\x3e","\x09"),
	HX_HCSTRING("msStr","\xeb","\x24","\xf0","\x0e"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("normalizeMem","\x88","\x04","\x29","\x47"),
	::String(null()) };

static void Stats_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Stats_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Stats_obj::FPS_ONLY,"FPS_ONLY");
	HX_MARK_MEMBER_NAME(Stats_obj::GRAPH_WIDTH,"GRAPH_WIDTH");
	HX_MARK_MEMBER_NAME(Stats_obj::XPOS,"XPOS");
	HX_MARK_MEMBER_NAME(Stats_obj::GRAPH_HEIGHT,"GRAPH_HEIGHT");
	HX_MARK_MEMBER_NAME(Stats_obj::TEXT_HEIGHT,"TEXT_HEIGHT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Stats_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Stats_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Stats_obj::FPS_ONLY,"FPS_ONLY");
	HX_VISIT_MEMBER_NAME(Stats_obj::GRAPH_WIDTH,"GRAPH_WIDTH");
	HX_VISIT_MEMBER_NAME(Stats_obj::XPOS,"XPOS");
	HX_VISIT_MEMBER_NAME(Stats_obj::GRAPH_HEIGHT,"GRAPH_HEIGHT");
	HX_VISIT_MEMBER_NAME(Stats_obj::TEXT_HEIGHT,"TEXT_HEIGHT");
};

#endif

hx::Class Stats_obj::__mClass;

static ::String Stats_obj_sStaticFields[] = {
	HX_HCSTRING("FPS_ONLY","\xe2","\xac","\xa3","\xb9"),
	HX_HCSTRING("GRAPH_WIDTH","\xd5","\x12","\xdb","\xba"),
	HX_HCSTRING("XPOS","\x1c","\xc0","\x67","\x3a"),
	HX_HCSTRING("GRAPH_HEIGHT","\x18","\xe0","\x24","\x7b"),
	HX_HCSTRING("TEXT_HEIGHT","\x79","\xd0","\xdc","\x87"),
	::String(null())
};

void Stats_obj::__register()
{
	hx::Object *dummy = new Stats_obj;
	Stats_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.nmefermmmtools.debug.Stats","\x7e","\x4f","\xcc","\x40");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Stats_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Stats_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Stats_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Stats_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Stats_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stats_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stats_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Stats_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_20cb522eff95d0c5_35_boot)
HXDLIN(  35)		FPS_ONLY = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_20cb522eff95d0c5_37_boot)
HXDLIN(  37)		GRAPH_WIDTH = (int)70;
            	}
{
            	HX_STACKFRAME(&_hx_pos_20cb522eff95d0c5_38_boot)
HXDLIN(  38)		XPOS = (int)69;
            	}
{
            	HX_STACKFRAME(&_hx_pos_20cb522eff95d0c5_39_boot)
HXDLIN(  39)		GRAPH_HEIGHT = (int)50;
            	}
{
            	HX_STACKFRAME(&_hx_pos_20cb522eff95d0c5_40_boot)
HXDLIN(  40)		TEXT_HEIGHT = (int)50;
            	}
}

} // end namespace com
} // end namespace nmefermmmtools
} // end namespace debug
