// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_box2D_collision_B2Manifold
#include <box2D/collision/B2Manifold.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_ActorType
#include <com/stencyl/models/actor/ActorType.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Collision
#include <com/stencyl/models/actor/Collision.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_CollisionPoint
#include <com/stencyl/models/actor/CollisionPoint.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Group
#include <com/stencyl/models/actor/Group.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Mask
#include <com/stencyl/models/collision/Mask.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_74ea407d83c7929d_124_new,"com.stencyl.models.actor.Collision","new",0xd80ec096,"com.stencyl.models.actor.Collision.new","com/stencyl/models/actor/Collision.hx",124,0xed5ab81a)
HX_LOCAL_STACK_FRAME(_hx_pos_74ea407d83c7929d_148_clear,"com.stencyl.models.actor.Collision","clear",0xb8db5b43,"com.stencyl.models.actor.Collision.clear","com/stencyl/models/actor/Collision.hx",148,0xed5ab81a)
HX_LOCAL_STACK_FRAME(_hx_pos_74ea407d83c7929d_195_switchData,"com.stencyl.models.actor.Collision","switchData",0xb07af8c8,"com.stencyl.models.actor.Collision.switchData","com/stencyl/models/actor/Collision.hx",195,0xed5ab81a)
HX_LOCAL_STACK_FRAME(_hx_pos_74ea407d83c7929d_20_resetStatics,"com.stencyl.models.actor.Collision","resetStatics",0x695fdb00,"com.stencyl.models.actor.Collision.resetStatics","com/stencyl/models/actor/Collision.hx",20,0xed5ab81a)
HX_LOCAL_STACK_FRAME(_hx_pos_74ea407d83c7929d_71_addResponse,"com.stencyl.models.actor.Collision","addResponse",0xc67ffbf8,"com.stencyl.models.actor.Collision.addResponse","com/stencyl/models/actor/Collision.hx",71,0xed5ab81a)
HX_LOCAL_STACK_FRAME(_hx_pos_74ea407d83c7929d_108_preSolve,"com.stencyl.models.actor.Collision","preSolve",0x2483fc66,"com.stencyl.models.actor.Collision.preSolve","com/stencyl/models/actor/Collision.hx",108,0xed5ab81a)
HX_LOCAL_STACK_FRAME(_hx_pos_74ea407d83c7929d_132_get,"com.stencyl.models.actor.Collision","get",0xd80970cc,"com.stencyl.models.actor.Collision.get","com/stencyl/models/actor/Collision.hx",132,0xed5ab81a)
HX_LOCAL_STACK_FRAME(_hx_pos_74ea407d83c7929d_142_recycle,"com.stencyl.models.actor.Collision","recycle",0xb7225349,"com.stencyl.models.actor.Collision.recycle","com/stencyl/models/actor/Collision.hx",142,0xed5ab81a)
HX_LOCAL_STACK_FRAME(_hx_pos_74ea407d83c7929d_16_boot,"com.stencyl.models.actor.Collision","boot",0x2cf2c33c,"com.stencyl.models.actor.Collision.boot","com/stencyl/models/actor/Collision.hx",16,0xed5ab81a)
HX_LOCAL_STACK_FRAME(_hx_pos_74ea407d83c7929d_17_boot,"com.stencyl.models.actor.Collision","boot",0x2cf2c33c,"com.stencyl.models.actor.Collision.boot","com/stencyl/models/actor/Collision.hx",17,0xed5ab81a)
namespace com{
namespace stencyl{
namespace models{
namespace actor{

void Collision_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_74ea407d83c7929d_124_new)
HXLINE( 125)		this->points = ::Array_obj< ::Dynamic>::__new();
HXLINE( 126)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 128)		this->clear();
            	}

Dynamic Collision_obj::__CreateEmpty() { return new Collision_obj; }

void *Collision_obj::_hx_vtable = 0;

Dynamic Collision_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Collision_obj > _hx_result = new Collision_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Collision_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x014f77f2;
}

void Collision_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_74ea407d83c7929d_148_clear)
HXLINE( 149)		while((this->points->length > (int)0)){
HXLINE( 151)			this->points->pop().StaticCast<  ::com::stencyl::models::actor::CollisionPoint >();
            		}
HXLINE( 154)		this->thisFromTop = false;
HXLINE( 155)		this->thisFromLeft = false;
HXLINE( 156)		this->thisFromBottom = false;
HXLINE( 157)		this->thisFromRight = false;
HXLINE( 159)		this->thisCollidedWithActor = false;
HXLINE( 160)		this->thisCollidedWithTile = false;
HXLINE( 161)		this->thisCollidedWithSensor = false;
HXLINE( 162)		this->thisCollidedWithTerrain = false;
HXLINE( 164)		this->otherFromTop = false;
HXLINE( 165)		this->otherFromLeft = false;
HXLINE( 166)		this->otherFromBottom = false;
HXLINE( 167)		this->otherFromRight = false;
HXLINE( 169)		this->otherCollidedWithActor = false;
HXLINE( 170)		this->otherCollidedWithTile = false;
HXLINE( 171)		this->otherCollidedWithSensor = false;
HXLINE( 172)		this->otherCollidedWithTerrain = false;
HXLINE( 174)		this->useBounds = false;
HXLINE( 175)		this->solidCollision = false;
HXLINE( 176)		this->remove = false;
HXLINE( 178)		this->thisActor = null();
HXLINE( 179)		this->otherActor = null();
HXLINE( 181)		this->thisShape = null();
HXLINE( 182)		this->otherShape = null();
HXLINE( 184)		this->actorA = null();
HXLINE( 185)		this->actorB = null();
HXLINE( 187)		this->maskA = (this->maskB = null());
HXLINE( 188)		this->linkedCollision = null();
HXLINE( 190)		this->bounds->setEmpty();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Collision_obj,clear,(void))

 ::com::stencyl::models::actor::Collision Collision_obj::switchData( ::com::stencyl::models::actor::Collision c){
            	HX_STACKFRAME(&_hx_pos_74ea407d83c7929d_195_switchData)
HXLINE( 196)		if (hx::IsNull( c )) {
HXLINE( 196)			return null();
            		}
HXLINE( 198)		c->thisActor = this->otherActor;
HXLINE( 199)		c->thisShape = this->otherShape;
HXLINE( 200)		c->thisFromTop = this->otherFromTop;
HXLINE( 201)		c->thisFromLeft = this->otherFromLeft;
HXLINE( 202)		c->thisFromBottom = this->otherFromBottom;
HXLINE( 203)		c->thisFromRight = this->otherFromRight;
HXLINE( 204)		c->thisCollidedWithActor = this->otherCollidedWithActor;
HXLINE( 205)		c->thisCollidedWithTile = this->otherCollidedWithTile;
HXLINE( 206)		c->thisCollidedWithSensor = this->otherCollidedWithSensor;
HXLINE( 207)		c->thisCollidedWithTerrain = this->otherCollidedWithTerrain;
HXLINE( 209)		c->otherActor = this->thisActor;
HXLINE( 210)		c->otherShape = this->thisShape;
HXLINE( 211)		c->otherFromTop = this->thisFromTop;
HXLINE( 212)		c->otherFromLeft = this->thisFromLeft;
HXLINE( 213)		c->otherFromBottom = this->thisFromBottom;
HXLINE( 214)		c->otherFromRight = this->thisFromRight;
HXLINE( 215)		c->otherCollidedWithActor = this->thisCollidedWithActor;
HXLINE( 216)		c->otherCollidedWithTile = this->thisCollidedWithTile;
HXLINE( 217)		c->otherCollidedWithSensor = this->thisCollidedWithSensor;
HXLINE( 218)		c->otherCollidedWithTerrain = this->thisCollidedWithTerrain;
HXLINE( 220)		c->actorA = this->actorA;
HXLINE( 221)		c->actorB = this->actorB;
HXLINE( 222)		c->points = this->points;
HXLINE( 224)		c->useBounds = this->useBounds;
HXLINE( 225)		c->maskA = this->maskA;
HXLINE( 226)		c->maskB = this->maskB;
HXLINE( 227)		c->solidCollision = this->solidCollision;
HXLINE( 229)		c->groupA = this->groupA;
HXLINE( 230)		c->groupB = this->groupB;
HXLINE( 232)		c->linkedCollision = hx::ObjectPtr<OBJ_>(this);
HXLINE( 233)		this->linkedCollision = c;
HXLINE( 235)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Collision_obj,switchData,return )

::Array< ::Dynamic> Collision_obj::recycledCollisions;

 ::haxe::ds::IntMap Collision_obj::collisionResponses;

void Collision_obj::resetStatics(){
            	HX_GC_STACKFRAME(&_hx_pos_74ea407d83c7929d_20_resetStatics)
HXLINE(  21)		::com::stencyl::models::actor::Collision_obj::recycledCollisions = ::Array_obj< ::Dynamic>::__new();
HXLINE(  22)		::com::stencyl::models::actor::Collision_obj::collisionResponses =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Collision_obj,resetStatics,(void))

void Collision_obj::addResponse( ::Dynamic firstObject, ::Dynamic secondObject,::String response){
            	HX_GC_STACKFRAME(&_hx_pos_74ea407d83c7929d_71_addResponse)
HXLINE(  72)		int groupID1 = (int)-1;
HXLINE(  73)		int groupID2 = (int)-1;
HXLINE(  75)		if (::Std_obj::is(firstObject,hx::ClassOf< ::com::stencyl::models::actor::ActorType >())) {
HXLINE(  77)			groupID1 = ( (int)(firstObject->__Field(HX_("groupID",da,80,f7,86),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  79)			if (::Std_obj::is(firstObject,hx::ClassOf< ::com::stencyl::models::actor::Group >())) {
HXLINE(  81)				groupID1 = ( (int)(firstObject->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) );
            			}
            		}
HXLINE(  84)		if (::Std_obj::is(secondObject,hx::ClassOf< ::com::stencyl::models::actor::ActorType >())) {
HXLINE(  86)			groupID2 = ( (int)(secondObject->__Field(HX_("groupID",da,80,f7,86),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  88)			if (::Std_obj::is(secondObject,hx::ClassOf< ::com::stencyl::models::actor::Group >())) {
HXLINE(  90)				groupID2 = ( (int)(secondObject->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)) );
            			}
            		}
HXLINE(  93)		if (hx::IsNull( ::com::stencyl::models::actor::Collision_obj::collisionResponses->get(groupID1).StaticCast<  ::haxe::ds::IntMap >() )) {
HXLINE(  95)			::Dynamic this1 = ::com::stencyl::models::actor::Collision_obj::collisionResponses;
HXDLIN(  95)			( ( ::haxe::ds::IntMap)(this1) )->set(groupID1, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            		}
HXLINE(  98)		if (hx::IsNull( ::com::stencyl::models::actor::Collision_obj::collisionResponses->get(groupID2).StaticCast<  ::haxe::ds::IntMap >() )) {
HXLINE( 100)			::Dynamic this2 = ::com::stencyl::models::actor::Collision_obj::collisionResponses;
HXDLIN( 100)			( ( ::haxe::ds::IntMap)(this2) )->set(groupID2, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            		}
HXLINE( 103)		::com::stencyl::models::actor::Collision_obj::collisionResponses->get(groupID1).StaticCast<  ::haxe::ds::IntMap >()->set(groupID2,response);
HXLINE( 104)		::com::stencyl::models::actor::Collision_obj::collisionResponses->get(groupID2).StaticCast<  ::haxe::ds::IntMap >()->set(groupID1,response);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Collision_obj,addResponse,(void))

void Collision_obj::preSolve( ::box2D::dynamics::contacts::B2Contact contact, ::box2D::collision::B2Manifold oldManifold){
            	HX_STACKFRAME(&_hx_pos_74ea407d83c7929d_108_preSolve)
HXLINE( 109)		int groupID1 = contact->getFixtureA()->getBody()->groupID;
HXLINE( 110)		int groupID2 = contact->getFixtureB()->getBody()->groupID;
HXLINE( 112)		if (hx::IsNotNull( ::com::stencyl::models::actor::Collision_obj::collisionResponses->get(groupID1).StaticCast<  ::haxe::ds::IntMap >() )) {
HXLINE( 114)			::String response = ( (::String)(::com::stencyl::models::actor::Collision_obj::collisionResponses->get(groupID1).StaticCast<  ::haxe::ds::IntMap >()->get(groupID2)) );
HXLINE( 116)			if ((response == HX_("sensor",3a,32,90,6b))) {
HXLINE( 118)				contact->setEnabled(false);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Collision_obj,preSolve,(void))

 ::com::stencyl::models::actor::Collision Collision_obj::get(){
            	HX_GC_STACKFRAME(&_hx_pos_74ea407d83c7929d_132_get)
HXLINE( 133)		if ((::com::stencyl::models::actor::Collision_obj::recycledCollisions->length > (int)0)) {
HXLINE( 135)			return ::com::stencyl::models::actor::Collision_obj::recycledCollisions->pop().StaticCast<  ::com::stencyl::models::actor::Collision >();
            		}
HXLINE( 138)		return  ::com::stencyl::models::actor::Collision_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Collision_obj,get,return )

void Collision_obj::recycle( ::com::stencyl::models::actor::Collision c){
            	HX_STACKFRAME(&_hx_pos_74ea407d83c7929d_142_recycle)
HXLINE( 143)		c->clear();
HXLINE( 144)		::com::stencyl::models::actor::Collision_obj::recycledCollisions->push(c);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Collision_obj,recycle,(void))


hx::ObjectPtr< Collision_obj > Collision_obj::__new() {
	hx::ObjectPtr< Collision_obj > __this = new Collision_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Collision_obj > Collision_obj::__alloc(hx::Ctx *_hx_ctx) {
	Collision_obj *__this = (Collision_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Collision_obj), true, "com.stencyl.models.actor.Collision"));
	*(void **)__this = Collision_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Collision_obj::Collision_obj()
{
}

void Collision_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Collision);
	HX_MARK_MEMBER_NAME(thisFromTop,"thisFromTop");
	HX_MARK_MEMBER_NAME(thisFromLeft,"thisFromLeft");
	HX_MARK_MEMBER_NAME(thisFromBottom,"thisFromBottom");
	HX_MARK_MEMBER_NAME(thisFromRight,"thisFromRight");
	HX_MARK_MEMBER_NAME(thisCollidedWithActor,"thisCollidedWithActor");
	HX_MARK_MEMBER_NAME(thisCollidedWithTile,"thisCollidedWithTile");
	HX_MARK_MEMBER_NAME(thisCollidedWithSensor,"thisCollidedWithSensor");
	HX_MARK_MEMBER_NAME(thisCollidedWithTerrain,"thisCollidedWithTerrain");
	HX_MARK_MEMBER_NAME(otherFromTop,"otherFromTop");
	HX_MARK_MEMBER_NAME(otherFromLeft,"otherFromLeft");
	HX_MARK_MEMBER_NAME(otherFromBottom,"otherFromBottom");
	HX_MARK_MEMBER_NAME(otherFromRight,"otherFromRight");
	HX_MARK_MEMBER_NAME(otherCollidedWithActor,"otherCollidedWithActor");
	HX_MARK_MEMBER_NAME(otherCollidedWithTile,"otherCollidedWithTile");
	HX_MARK_MEMBER_NAME(otherCollidedWithSensor,"otherCollidedWithSensor");
	HX_MARK_MEMBER_NAME(otherCollidedWithTerrain,"otherCollidedWithTerrain");
	HX_MARK_MEMBER_NAME(points,"points");
	HX_MARK_MEMBER_NAME(thisActor,"thisActor");
	HX_MARK_MEMBER_NAME(otherActor,"otherActor");
	HX_MARK_MEMBER_NAME(thisShape,"thisShape");
	HX_MARK_MEMBER_NAME(otherShape,"otherShape");
	HX_MARK_MEMBER_NAME(actorA,"actorA");
	HX_MARK_MEMBER_NAME(actorB,"actorB");
	HX_MARK_MEMBER_NAME(maskA,"maskA");
	HX_MARK_MEMBER_NAME(maskB,"maskB");
	HX_MARK_MEMBER_NAME(groupA,"groupA");
	HX_MARK_MEMBER_NAME(groupB,"groupB");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(useBounds,"useBounds");
	HX_MARK_MEMBER_NAME(remove,"remove");
	HX_MARK_MEMBER_NAME(solidCollision,"solidCollision");
	HX_MARK_MEMBER_NAME(linkedCollision,"linkedCollision");
	HX_MARK_END_CLASS();
}

void Collision_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(thisFromTop,"thisFromTop");
	HX_VISIT_MEMBER_NAME(thisFromLeft,"thisFromLeft");
	HX_VISIT_MEMBER_NAME(thisFromBottom,"thisFromBottom");
	HX_VISIT_MEMBER_NAME(thisFromRight,"thisFromRight");
	HX_VISIT_MEMBER_NAME(thisCollidedWithActor,"thisCollidedWithActor");
	HX_VISIT_MEMBER_NAME(thisCollidedWithTile,"thisCollidedWithTile");
	HX_VISIT_MEMBER_NAME(thisCollidedWithSensor,"thisCollidedWithSensor");
	HX_VISIT_MEMBER_NAME(thisCollidedWithTerrain,"thisCollidedWithTerrain");
	HX_VISIT_MEMBER_NAME(otherFromTop,"otherFromTop");
	HX_VISIT_MEMBER_NAME(otherFromLeft,"otherFromLeft");
	HX_VISIT_MEMBER_NAME(otherFromBottom,"otherFromBottom");
	HX_VISIT_MEMBER_NAME(otherFromRight,"otherFromRight");
	HX_VISIT_MEMBER_NAME(otherCollidedWithActor,"otherCollidedWithActor");
	HX_VISIT_MEMBER_NAME(otherCollidedWithTile,"otherCollidedWithTile");
	HX_VISIT_MEMBER_NAME(otherCollidedWithSensor,"otherCollidedWithSensor");
	HX_VISIT_MEMBER_NAME(otherCollidedWithTerrain,"otherCollidedWithTerrain");
	HX_VISIT_MEMBER_NAME(points,"points");
	HX_VISIT_MEMBER_NAME(thisActor,"thisActor");
	HX_VISIT_MEMBER_NAME(otherActor,"otherActor");
	HX_VISIT_MEMBER_NAME(thisShape,"thisShape");
	HX_VISIT_MEMBER_NAME(otherShape,"otherShape");
	HX_VISIT_MEMBER_NAME(actorA,"actorA");
	HX_VISIT_MEMBER_NAME(actorB,"actorB");
	HX_VISIT_MEMBER_NAME(maskA,"maskA");
	HX_VISIT_MEMBER_NAME(maskB,"maskB");
	HX_VISIT_MEMBER_NAME(groupA,"groupA");
	HX_VISIT_MEMBER_NAME(groupB,"groupB");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(useBounds,"useBounds");
	HX_VISIT_MEMBER_NAME(remove,"remove");
	HX_VISIT_MEMBER_NAME(solidCollision,"solidCollision");
	HX_VISIT_MEMBER_NAME(linkedCollision,"linkedCollision");
}

hx::Val Collision_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"maskA") ) { return hx::Val( maskA ); }
		if (HX_FIELD_EQ(inName,"maskB") ) { return hx::Val( maskB ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { return hx::Val( points ); }
		if (HX_FIELD_EQ(inName,"actorA") ) { return hx::Val( actorA ); }
		if (HX_FIELD_EQ(inName,"actorB") ) { return hx::Val( actorB ); }
		if (HX_FIELD_EQ(inName,"groupA") ) { return hx::Val( groupA ); }
		if (HX_FIELD_EQ(inName,"groupB") ) { return hx::Val( groupB ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"thisActor") ) { return hx::Val( thisActor ); }
		if (HX_FIELD_EQ(inName,"thisShape") ) { return hx::Val( thisShape ); }
		if (HX_FIELD_EQ(inName,"useBounds") ) { return hx::Val( useBounds ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"otherActor") ) { return hx::Val( otherActor ); }
		if (HX_FIELD_EQ(inName,"otherShape") ) { return hx::Val( otherShape ); }
		if (HX_FIELD_EQ(inName,"switchData") ) { return hx::Val( switchData_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"thisFromTop") ) { return hx::Val( thisFromTop ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"thisFromLeft") ) { return hx::Val( thisFromLeft ); }
		if (HX_FIELD_EQ(inName,"otherFromTop") ) { return hx::Val( otherFromTop ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"thisFromRight") ) { return hx::Val( thisFromRight ); }
		if (HX_FIELD_EQ(inName,"otherFromLeft") ) { return hx::Val( otherFromLeft ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"thisFromBottom") ) { return hx::Val( thisFromBottom ); }
		if (HX_FIELD_EQ(inName,"otherFromRight") ) { return hx::Val( otherFromRight ); }
		if (HX_FIELD_EQ(inName,"solidCollision") ) { return hx::Val( solidCollision ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"otherFromBottom") ) { return hx::Val( otherFromBottom ); }
		if (HX_FIELD_EQ(inName,"linkedCollision") ) { return hx::Val( linkedCollision ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"thisCollidedWithTile") ) { return hx::Val( thisCollidedWithTile ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"thisCollidedWithActor") ) { return hx::Val( thisCollidedWithActor ); }
		if (HX_FIELD_EQ(inName,"otherCollidedWithTile") ) { return hx::Val( otherCollidedWithTile ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"thisCollidedWithSensor") ) { return hx::Val( thisCollidedWithSensor ); }
		if (HX_FIELD_EQ(inName,"otherCollidedWithActor") ) { return hx::Val( otherCollidedWithActor ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"thisCollidedWithTerrain") ) { return hx::Val( thisCollidedWithTerrain ); }
		if (HX_FIELD_EQ(inName,"otherCollidedWithSensor") ) { return hx::Val( otherCollidedWithSensor ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"otherCollidedWithTerrain") ) { return hx::Val( otherCollidedWithTerrain ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Collision_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"recycle") ) { outValue = recycle_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"preSolve") ) { outValue = preSolve_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addResponse") ) { outValue = addResponse_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"recycledCollisions") ) { outValue = ( recycledCollisions ); return true; }
		if (HX_FIELD_EQ(inName,"collisionResponses") ) { outValue = ( collisionResponses ); return true; }
	}
	return false;
}

hx::Val Collision_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"maskA") ) { maskA=inValue.Cast<  ::com::stencyl::models::collision::Mask >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maskB") ) { maskB=inValue.Cast<  ::com::stencyl::models::collision::Mask >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { points=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"actorA") ) { actorA=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"actorB") ) { actorB=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groupA") ) { groupA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groupB") ) { groupB=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"remove") ) { remove=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"thisActor") ) { thisActor=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"thisShape") ) { thisShape=inValue.Cast<  ::box2D::dynamics::B2Fixture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useBounds") ) { useBounds=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"otherActor") ) { otherActor=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"otherShape") ) { otherShape=inValue.Cast<  ::box2D::dynamics::B2Fixture >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"thisFromTop") ) { thisFromTop=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"thisFromLeft") ) { thisFromLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"otherFromTop") ) { otherFromTop=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"thisFromRight") ) { thisFromRight=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"otherFromLeft") ) { otherFromLeft=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"thisFromBottom") ) { thisFromBottom=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"otherFromRight") ) { otherFromRight=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"solidCollision") ) { solidCollision=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"otherFromBottom") ) { otherFromBottom=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"linkedCollision") ) { linkedCollision=inValue.Cast<  ::com::stencyl::models::actor::Collision >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"thisCollidedWithTile") ) { thisCollidedWithTile=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"thisCollidedWithActor") ) { thisCollidedWithActor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"otherCollidedWithTile") ) { otherCollidedWithTile=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"thisCollidedWithSensor") ) { thisCollidedWithSensor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"otherCollidedWithActor") ) { otherCollidedWithActor=inValue.Cast< bool >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"thisCollidedWithTerrain") ) { thisCollidedWithTerrain=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"otherCollidedWithSensor") ) { otherCollidedWithSensor=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"otherCollidedWithTerrain") ) { otherCollidedWithTerrain=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Collision_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"recycledCollisions") ) { recycledCollisions=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"collisionResponses") ) { collisionResponses=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

void Collision_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("thisFromTop","\x8d","\x00","\x0b","\xdf"));
	outFields->push(HX_HCSTRING("thisFromLeft","\x0f","\x27","\x44","\x45"));
	outFields->push(HX_HCSTRING("thisFromBottom","\xf3","\xd7","\x98","\x07"));
	outFields->push(HX_HCSTRING("thisFromRight","\xd4","\x13","\x6b","\xcd"));
	outFields->push(HX_HCSTRING("thisCollidedWithActor","\xcb","\xca","\xbf","\x8f"));
	outFields->push(HX_HCSTRING("thisCollidedWithTile","\x18","\x18","\xe7","\xa5"));
	outFields->push(HX_HCSTRING("thisCollidedWithSensor","\xa4","\x0d","\x57","\x8d"));
	outFields->push(HX_HCSTRING("thisCollidedWithTerrain","\x0b","\xcd","\x50","\x95"));
	outFields->push(HX_HCSTRING("otherFromTop","\x5b","\x72","\x13","\xdc"));
	outFields->push(HX_HCSTRING("otherFromLeft","\x81","\x49","\x9f","\xaf"));
	outFields->push(HX_HCSTRING("otherFromBottom","\xe5","\xfa","\xd6","\x18"));
	outFields->push(HX_HCSTRING("otherFromRight","\x22","\x15","\xce","\x72"));
	outFields->push(HX_HCSTRING("otherCollidedWithActor","\x19","\xca","\x19","\x07"));
	outFields->push(HX_HCSTRING("otherCollidedWithTile","\x8a","\xfc","\xb4","\x62"));
	outFields->push(HX_HCSTRING("otherCollidedWithSensor","\x96","\x72","\xbc","\x84"));
	outFields->push(HX_HCSTRING("otherCollidedWithTerrain","\xd9","\xbb","\xa3","\x16"));
	outFields->push(HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("thisActor","\xb7","\x5f","\x0e","\x8a"));
	outFields->push(HX_HCSTRING("otherActor","\x05","\x22","\xa7","\xdd"));
	outFields->push(HX_HCSTRING("thisShape","\xe3","\x77","\x84","\xea"));
	outFields->push(HX_HCSTRING("otherShape","\x31","\x3a","\x1d","\x3e"));
	outFields->push(HX_HCSTRING("actorA","\xac","\xcb","\x4a","\x16"));
	outFields->push(HX_HCSTRING("actorB","\xad","\xcb","\x4a","\x16"));
	outFields->push(HX_HCSTRING("maskA","\xd5","\x8d","\x22","\x03"));
	outFields->push(HX_HCSTRING("maskB","\xd6","\x8d","\x22","\x03"));
	outFields->push(HX_HCSTRING("groupA","\x22","\x24","\x28","\x1c"));
	outFields->push(HX_HCSTRING("groupB","\x23","\x24","\x28","\x1c"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("useBounds","\x1c","\x16","\xa8","\x1c"));
	outFields->push(HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"));
	outFields->push(HX_HCSTRING("solidCollision","\xc7","\x76","\x73","\xe4"));
	outFields->push(HX_HCSTRING("linkedCollision","\x59","\x02","\xdc","\x98"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Collision_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Collision_obj,thisFromTop),HX_HCSTRING("thisFromTop","\x8d","\x00","\x0b","\xdf")},
	{hx::fsBool,(int)offsetof(Collision_obj,thisFromLeft),HX_HCSTRING("thisFromLeft","\x0f","\x27","\x44","\x45")},
	{hx::fsBool,(int)offsetof(Collision_obj,thisFromBottom),HX_HCSTRING("thisFromBottom","\xf3","\xd7","\x98","\x07")},
	{hx::fsBool,(int)offsetof(Collision_obj,thisFromRight),HX_HCSTRING("thisFromRight","\xd4","\x13","\x6b","\xcd")},
	{hx::fsBool,(int)offsetof(Collision_obj,thisCollidedWithActor),HX_HCSTRING("thisCollidedWithActor","\xcb","\xca","\xbf","\x8f")},
	{hx::fsBool,(int)offsetof(Collision_obj,thisCollidedWithTile),HX_HCSTRING("thisCollidedWithTile","\x18","\x18","\xe7","\xa5")},
	{hx::fsBool,(int)offsetof(Collision_obj,thisCollidedWithSensor),HX_HCSTRING("thisCollidedWithSensor","\xa4","\x0d","\x57","\x8d")},
	{hx::fsBool,(int)offsetof(Collision_obj,thisCollidedWithTerrain),HX_HCSTRING("thisCollidedWithTerrain","\x0b","\xcd","\x50","\x95")},
	{hx::fsBool,(int)offsetof(Collision_obj,otherFromTop),HX_HCSTRING("otherFromTop","\x5b","\x72","\x13","\xdc")},
	{hx::fsBool,(int)offsetof(Collision_obj,otherFromLeft),HX_HCSTRING("otherFromLeft","\x81","\x49","\x9f","\xaf")},
	{hx::fsBool,(int)offsetof(Collision_obj,otherFromBottom),HX_HCSTRING("otherFromBottom","\xe5","\xfa","\xd6","\x18")},
	{hx::fsBool,(int)offsetof(Collision_obj,otherFromRight),HX_HCSTRING("otherFromRight","\x22","\x15","\xce","\x72")},
	{hx::fsBool,(int)offsetof(Collision_obj,otherCollidedWithActor),HX_HCSTRING("otherCollidedWithActor","\x19","\xca","\x19","\x07")},
	{hx::fsBool,(int)offsetof(Collision_obj,otherCollidedWithTile),HX_HCSTRING("otherCollidedWithTile","\x8a","\xfc","\xb4","\x62")},
	{hx::fsBool,(int)offsetof(Collision_obj,otherCollidedWithSensor),HX_HCSTRING("otherCollidedWithSensor","\x96","\x72","\xbc","\x84")},
	{hx::fsBool,(int)offsetof(Collision_obj,otherCollidedWithTerrain),HX_HCSTRING("otherCollidedWithTerrain","\xd9","\xbb","\xa3","\x16")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Collision_obj,points),HX_HCSTRING("points","\x23","\x12","\x2e","\xf7")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(Collision_obj,thisActor),HX_HCSTRING("thisActor","\xb7","\x5f","\x0e","\x8a")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(Collision_obj,otherActor),HX_HCSTRING("otherActor","\x05","\x22","\xa7","\xdd")},
	{hx::fsObject /*::box2D::dynamics::B2Fixture*/ ,(int)offsetof(Collision_obj,thisShape),HX_HCSTRING("thisShape","\xe3","\x77","\x84","\xea")},
	{hx::fsObject /*::box2D::dynamics::B2Fixture*/ ,(int)offsetof(Collision_obj,otherShape),HX_HCSTRING("otherShape","\x31","\x3a","\x1d","\x3e")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(Collision_obj,actorA),HX_HCSTRING("actorA","\xac","\xcb","\x4a","\x16")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(Collision_obj,actorB),HX_HCSTRING("actorB","\xad","\xcb","\x4a","\x16")},
	{hx::fsObject /*::com::stencyl::models::collision::Mask*/ ,(int)offsetof(Collision_obj,maskA),HX_HCSTRING("maskA","\xd5","\x8d","\x22","\x03")},
	{hx::fsObject /*::com::stencyl::models::collision::Mask*/ ,(int)offsetof(Collision_obj,maskB),HX_HCSTRING("maskB","\xd6","\x8d","\x22","\x03")},
	{hx::fsInt,(int)offsetof(Collision_obj,groupA),HX_HCSTRING("groupA","\x22","\x24","\x28","\x1c")},
	{hx::fsInt,(int)offsetof(Collision_obj,groupB),HX_HCSTRING("groupB","\x23","\x24","\x28","\x1c")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Collision_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsBool,(int)offsetof(Collision_obj,useBounds),HX_HCSTRING("useBounds","\x1c","\x16","\xa8","\x1c")},
	{hx::fsBool,(int)offsetof(Collision_obj,remove),HX_HCSTRING("remove","\x44","\x9c","\x88","\x04")},
	{hx::fsBool,(int)offsetof(Collision_obj,solidCollision),HX_HCSTRING("solidCollision","\xc7","\x76","\x73","\xe4")},
	{hx::fsObject /*::com::stencyl::models::actor::Collision*/ ,(int)offsetof(Collision_obj,linkedCollision),HX_HCSTRING("linkedCollision","\x59","\x02","\xdc","\x98")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Collision_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Collision_obj::recycledCollisions,HX_HCSTRING("recycledCollisions","\x12","\xb8","\xae","\x39")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Collision_obj::collisionResponses,HX_HCSTRING("collisionResponses","\x00","\x9c","\x38","\x38")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Collision_obj_sMemberFields[] = {
	HX_HCSTRING("thisFromTop","\x8d","\x00","\x0b","\xdf"),
	HX_HCSTRING("thisFromLeft","\x0f","\x27","\x44","\x45"),
	HX_HCSTRING("thisFromBottom","\xf3","\xd7","\x98","\x07"),
	HX_HCSTRING("thisFromRight","\xd4","\x13","\x6b","\xcd"),
	HX_HCSTRING("thisCollidedWithActor","\xcb","\xca","\xbf","\x8f"),
	HX_HCSTRING("thisCollidedWithTile","\x18","\x18","\xe7","\xa5"),
	HX_HCSTRING("thisCollidedWithSensor","\xa4","\x0d","\x57","\x8d"),
	HX_HCSTRING("thisCollidedWithTerrain","\x0b","\xcd","\x50","\x95"),
	HX_HCSTRING("otherFromTop","\x5b","\x72","\x13","\xdc"),
	HX_HCSTRING("otherFromLeft","\x81","\x49","\x9f","\xaf"),
	HX_HCSTRING("otherFromBottom","\xe5","\xfa","\xd6","\x18"),
	HX_HCSTRING("otherFromRight","\x22","\x15","\xce","\x72"),
	HX_HCSTRING("otherCollidedWithActor","\x19","\xca","\x19","\x07"),
	HX_HCSTRING("otherCollidedWithTile","\x8a","\xfc","\xb4","\x62"),
	HX_HCSTRING("otherCollidedWithSensor","\x96","\x72","\xbc","\x84"),
	HX_HCSTRING("otherCollidedWithTerrain","\xd9","\xbb","\xa3","\x16"),
	HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"),
	HX_HCSTRING("thisActor","\xb7","\x5f","\x0e","\x8a"),
	HX_HCSTRING("otherActor","\x05","\x22","\xa7","\xdd"),
	HX_HCSTRING("thisShape","\xe3","\x77","\x84","\xea"),
	HX_HCSTRING("otherShape","\x31","\x3a","\x1d","\x3e"),
	HX_HCSTRING("actorA","\xac","\xcb","\x4a","\x16"),
	HX_HCSTRING("actorB","\xad","\xcb","\x4a","\x16"),
	HX_HCSTRING("maskA","\xd5","\x8d","\x22","\x03"),
	HX_HCSTRING("maskB","\xd6","\x8d","\x22","\x03"),
	HX_HCSTRING("groupA","\x22","\x24","\x28","\x1c"),
	HX_HCSTRING("groupB","\x23","\x24","\x28","\x1c"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("useBounds","\x1c","\x16","\xa8","\x1c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("solidCollision","\xc7","\x76","\x73","\xe4"),
	HX_HCSTRING("linkedCollision","\x59","\x02","\xdc","\x98"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("switchData","\x3e","\xd6","\x53","\x61"),
	::String(null()) };

static void Collision_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Collision_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Collision_obj::recycledCollisions,"recycledCollisions");
	HX_MARK_MEMBER_NAME(Collision_obj::collisionResponses,"collisionResponses");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Collision_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Collision_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Collision_obj::recycledCollisions,"recycledCollisions");
	HX_VISIT_MEMBER_NAME(Collision_obj::collisionResponses,"collisionResponses");
};

#endif

hx::Class Collision_obj::__mClass;

static ::String Collision_obj_sStaticFields[] = {
	HX_HCSTRING("recycledCollisions","\x12","\xb8","\xae","\x39"),
	HX_HCSTRING("collisionResponses","\x00","\x9c","\x38","\x38"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	HX_HCSTRING("addResponse","\xc2","\xe5","\x68","\xd3"),
	HX_HCSTRING("preSolve","\x5c","\x70","\x9f","\x00"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("recycle","\x13","\x10","\x8c","\x37"),
	::String(null())
};

void Collision_obj::__register()
{
	hx::Object *dummy = new Collision_obj;
	Collision_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.actor.Collision","\xa4","\x7d","\x99","\x74");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Collision_obj::__GetStatic;
	__mClass->mSetStaticField = &Collision_obj::__SetStatic;
	__mClass->mMarkFunc = Collision_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Collision_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Collision_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Collision_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Collision_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Collision_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Collision_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Collision_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_74ea407d83c7929d_16_boot)
HXDLIN(  16)		recycledCollisions = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_74ea407d83c7929d_17_boot)
HXDLIN(  17)		collisionResponses =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace actor
