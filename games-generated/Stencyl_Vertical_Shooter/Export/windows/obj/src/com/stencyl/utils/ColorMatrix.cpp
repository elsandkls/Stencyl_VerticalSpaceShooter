// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_ARGB
#include <com/stencyl/utils/ARGB.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_ColorDeficiencyTypes
#include <com/stencyl/utils/ColorDeficiencyTypes.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_ColorMatrix
#include <com/stencyl/utils/ColorMatrix.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Utils
#include <com/stencyl/utils/Utils.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_40551333bb1ead78_188_new,"com.stencyl.utils.ColorMatrix","new",0x05651daa,"com.stencyl.utils.ColorMatrix.new","com/stencyl/utils/ColorMatrix.hx",188,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_194_getFilter,"com.stencyl.utils.ColorMatrix","getFilter",0xa34909b8,"com.stencyl.utils.ColorMatrix.getFilter","com/stencyl/utils/ColorMatrix.hx",194,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_200_identity,"com.stencyl.utils.ColorMatrix","identity",0xc7af8bb4,"com.stencyl.utils.ColorMatrix.identity","com/stencyl/utils/ColorMatrix.hx",200,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_212_invert,"com.stencyl.utils.ColorMatrix","invert",0x71bf840c,"com.stencyl.utils.ColorMatrix.invert","com/stencyl/utils/ColorMatrix.hx",212,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_224_adjustSaturation,"com.stencyl.utils.ColorMatrix","adjustSaturation",0xcfde39b7,"com.stencyl.utils.ColorMatrix.adjustSaturation","com/stencyl/utils/ColorMatrix.hx",224,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_241_adjustBrightness,"com.stencyl.utils.ColorMatrix","adjustBrightness",0x3eadf3b6,"com.stencyl.utils.ColorMatrix.adjustBrightness","com/stencyl/utils/ColorMatrix.hx",241,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_247_adjustBrightnessRGB,"com.stencyl.utils.ColorMatrix","adjustBrightnessRGB",0x82d738f7,"com.stencyl.utils.ColorMatrix.adjustBrightnessRGB","com/stencyl/utils/ColorMatrix.hx",247,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_259_adjustContrast,"com.stencyl.utils.ColorMatrix","adjustContrast",0x21e09fa7,"com.stencyl.utils.ColorMatrix.adjustContrast","com/stencyl/utils/ColorMatrix.hx",259,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_265_adjustContrastRGB,"com.stencyl.utils.ColorMatrix","adjustContrastRGB",0xd1add9a6,"com.stencyl.utils.ColorMatrix.adjustContrastRGB","com/stencyl/utils/ColorMatrix.hx",265,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_281_adjustHue,"com.stencyl.utils.ColorMatrix","adjustHue",0x6a87a033,"com.stencyl.utils.ColorMatrix.adjustHue","com/stencyl/utils/ColorMatrix.hx",281,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_297_luminance2Alpha,"com.stencyl.utils.ColorMatrix","luminance2Alpha",0x8067b80e,"com.stencyl.utils.ColorMatrix.luminance2Alpha","com/stencyl/utils/ColorMatrix.hx",297,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_309_adjustAlphaContrast,"com.stencyl.utils.ColorMatrix","adjustAlphaContrast",0x974c75bb,"com.stencyl.utils.ColorMatrix.adjustAlphaContrast","com/stencyl/utils/ColorMatrix.hx",309,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_323_colorize,"com.stencyl.utils.ColorMatrix","colorize",0x9880ac47,"com.stencyl.utils.ColorMatrix.colorize","com/stencyl/utils/ColorMatrix.hx",323,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_341_rotateHue,"com.stencyl.utils.ColorMatrix","rotateHue",0x0bea4de7,"com.stencyl.utils.ColorMatrix.rotateHue","com/stencyl/utils/ColorMatrix.hx",341,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_351_setChannels,"com.stencyl.utils.ColorMatrix","setChannels",0x2fbe1b5c,"com.stencyl.utils.ColorMatrix.setChannels","com/stencyl/utils/ColorMatrix.hx",351,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_397_average,"com.stencyl.utils.ColorMatrix","average",0x3abe2ba7,"com.stencyl.utils.ColorMatrix.average","com/stencyl/utils/ColorMatrix.hx",397,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_409_threshold,"com.stencyl.utils.ColorMatrix","threshold",0xd6612475,"com.stencyl.utils.ColorMatrix.threshold","com/stencyl/utils/ColorMatrix.hx",409,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_421_desaturate,"com.stencyl.utils.ColorMatrix","desaturate",0xb883e066,"com.stencyl.utils.ColorMatrix.desaturate","com/stencyl/utils/ColorMatrix.hx",421,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_433_setMultiplicators,"com.stencyl.utils.ColorMatrix","setMultiplicators",0xb0bfc6ba,"com.stencyl.utils.ColorMatrix.setMultiplicators","com/stencyl/utils/ColorMatrix.hx",433,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_445_clearChannels,"com.stencyl.utils.ColorMatrix","clearChannels",0x292a3ac7,"com.stencyl.utils.ColorMatrix.clearChannels","com/stencyl/utils/ColorMatrix.hx",445,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_466_thresholdAlpha,"com.stencyl.utils.ColorMatrix","thresholdAlpha",0xbf81aaa9,"com.stencyl.utils.ColorMatrix.thresholdAlpha","com/stencyl/utils/ColorMatrix.hx",466,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_478_averageRGB2Alpha,"com.stencyl.utils.ColorMatrix","averageRGB2Alpha",0x49aeaff2,"com.stencyl.utils.ColorMatrix.averageRGB2Alpha","com/stencyl/utils/ColorMatrix.hx",478,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_490_invertAlpha,"com.stencyl.utils.ColorMatrix","invertAlpha",0x768e67b2,"com.stencyl.utils.ColorMatrix.invertAlpha","com/stencyl/utils/ColorMatrix.hx",490,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_502_rgb2Alpha,"com.stencyl.utils.ColorMatrix","rgb2Alpha",0x325da563,"com.stencyl.utils.ColorMatrix.rgb2Alpha","com/stencyl/utils/ColorMatrix.hx",502,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_513_setAlpha,"com.stencyl.utils.ColorMatrix","setAlpha",0x3e4b56d2,"com.stencyl.utils.ColorMatrix.setAlpha","com/stencyl/utils/ColorMatrix.hx",513,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_525_rotateRed,"com.stencyl.utils.ColorMatrix","rotateRed",0x0bf1d680,"com.stencyl.utils.ColorMatrix.rotateRed","com/stencyl/utils/ColorMatrix.hx",525,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_541_rotateGreen,"com.stencyl.utils.ColorMatrix","rotateGreen",0x0024f5b2,"com.stencyl.utils.ColorMatrix.rotateGreen","com/stencyl/utils/ColorMatrix.hx",541,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_557_rotateBlue,"com.stencyl.utils.ColorMatrix","rotateBlue",0x5d1bce8b,"com.stencyl.utils.ColorMatrix.rotateBlue","com/stencyl/utils/ColorMatrix.hx",557,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_573_shearRed,"com.stencyl.utils.ColorMatrix","shearRed",0x2c646326,"com.stencyl.utils.ColorMatrix.shearRed","com/stencyl/utils/ColorMatrix.hx",573,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_585_shearGreen,"com.stencyl.utils.ColorMatrix","shearGreen",0x0bd077d8,"com.stencyl.utils.ColorMatrix.shearGreen","com/stencyl/utils/ColorMatrix.hx",585,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_597_shearBlue,"com.stencyl.utils.ColorMatrix","shearBlue",0xa0e45325,"com.stencyl.utils.ColorMatrix.shearBlue","com/stencyl/utils/ColorMatrix.hx",597,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_609_applyColorDeficiency,"com.stencyl.utils.ColorMatrix","applyColorDeficiency",0x35ed87f4,"com.stencyl.utils.ColorMatrix.applyColorDeficiency","com/stencyl/utils/ColorMatrix.hx",609,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_626_applyMatrix,"com.stencyl.utils.ColorMatrix","applyMatrix",0x8c319d99,"com.stencyl.utils.ColorMatrix.applyMatrix","com/stencyl/utils/ColorMatrix.hx",626,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_646_transformVector,"com.stencyl.utils.ColorMatrix","transformVector",0xbca83f99,"com.stencyl.utils.ColorMatrix.transformVector","com/stencyl/utils/ColorMatrix.hx",646,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_666_initHue,"com.stencyl.utils.ColorMatrix","initHue",0xa368d1d2,"com.stencyl.utils.ColorMatrix.initHue","com/stencyl/utils/ColorMatrix.hx",666,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_701_toArray,"com.stencyl.utils.ColorMatrix","toArray",0xc9f67468,"com.stencyl.utils.ColorMatrix.toArray","com/stencyl/utils/ColorMatrix.hx",701,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_716_set,"com.stencyl.utils.ColorMatrix","set",0x0568e8ec,"com.stencyl.utils.ColorMatrix.set","com/stencyl/utils/ColorMatrix.hx",716,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_730_mul,"com.stencyl.utils.ColorMatrix","mul",0x0564694e,"com.stencyl.utils.ColorMatrix.mul","com/stencyl/utils/ColorMatrix.hx",730,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_87_mulMatrixMatrix,"com.stencyl.utils.ColorMatrix","mulMatrixMatrix",0x4fbaf9d0,"com.stencyl.utils.ColorMatrix.mulMatrixMatrix","com/stencyl/utils/ColorMatrix.hx",87,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_136_blendMatrixMatrix,"com.stencyl.utils.ColorMatrix","blendMatrixMatrix",0x8769ac1d,"com.stencyl.utils.ColorMatrix.blendMatrixMatrix","com/stencyl/utils/ColorMatrix.hx",136,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_166_boot,"com.stencyl.utils.ColorMatrix","boot",0xab2dd7a8,"com.stencyl.utils.ColorMatrix.boot","com/stencyl/utils/ColorMatrix.hx",166,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_167_boot,"com.stencyl.utils.ColorMatrix","boot",0xab2dd7a8,"com.stencyl.utils.ColorMatrix.boot","com/stencyl/utils/ColorMatrix.hx",167,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_168_boot,"com.stencyl.utils.ColorMatrix","boot",0xab2dd7a8,"com.stencyl.utils.ColorMatrix.boot","com/stencyl/utils/ColorMatrix.hx",168,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_170_boot,"com.stencyl.utils.ColorMatrix","boot",0xab2dd7a8,"com.stencyl.utils.ColorMatrix.boot","com/stencyl/utils/ColorMatrix.hx",170,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_171_boot,"com.stencyl.utils.ColorMatrix","boot",0xab2dd7a8,"com.stencyl.utils.ColorMatrix.boot","com/stencyl/utils/ColorMatrix.hx",171,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_172_boot,"com.stencyl.utils.ColorMatrix","boot",0xab2dd7a8,"com.stencyl.utils.ColorMatrix.boot","com/stencyl/utils/ColorMatrix.hx",172,0x5fba1ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_40551333bb1ead78_174_boot,"com.stencyl.utils.ColorMatrix","boot",0xab2dd7a8,"com.stencyl.utils.ColorMatrix.boot","com/stencyl/utils/ColorMatrix.hx",174,0x5fba1ac9)
namespace com{
namespace stencyl{
namespace utils{

void ColorMatrix_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_188_new)
HXLINE( 189)		this->identity();
HXLINE( 190)		this->matrix = ::Array_obj< Float >::__new();
            	}

Dynamic ColorMatrix_obj::__CreateEmpty() { return new ColorMatrix_obj; }

void *ColorMatrix_obj::_hx_vtable = 0;

Dynamic ColorMatrix_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorMatrix_obj > _hx_result = new ColorMatrix_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorMatrix_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54915c26;
}

 ::openfl::filters::ColorMatrixFilter ColorMatrix_obj::getFilter(){
            	HX_GC_STACKFRAME(&_hx_pos_40551333bb1ead78_194_getFilter)
HXLINE( 195)		{
HXLINE( 195)			::Array< Float > out = this->matrix;
HXDLIN( 195)			out[(int)0] = this->m11;
HXDLIN( 195)			out[(int)1] = this->m12;
HXDLIN( 195)			out[(int)2] = this->m13;
HXDLIN( 195)			out[(int)3] = this->m14;
HXDLIN( 195)			out[(int)4] = this->m15;
HXDLIN( 195)			out[(int)5] = this->m21;
HXDLIN( 195)			out[(int)6] = this->m22;
HXDLIN( 195)			out[(int)7] = this->m23;
HXDLIN( 195)			out[(int)8] = this->m24;
HXDLIN( 195)			out[(int)9] = this->m25;
HXDLIN( 195)			out[(int)10] = this->m31;
HXDLIN( 195)			out[(int)11] = this->m32;
HXDLIN( 195)			out[(int)12] = this->m33;
HXDLIN( 195)			out[(int)13] = this->m34;
HXDLIN( 195)			out[(int)14] = this->m35;
HXDLIN( 195)			out[(int)15] = this->m41;
HXDLIN( 195)			out[(int)16] = this->m42;
HXDLIN( 195)			out[(int)17] = this->m43;
HXDLIN( 195)			out[(int)18] = this->m44;
HXDLIN( 195)			out[(int)19] = this->m45;
            		}
HXLINE( 196)		return  ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,this->matrix);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorMatrix_obj,getFilter,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::identity(){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_200_identity)
HXLINE( 201)		{
HXLINE( 201)			this->m11 = ((Float)1.0);
HXDLIN( 201)			this->m12 = ((Float)0.0);
HXDLIN( 201)			this->m13 = ((Float)0.0);
HXDLIN( 201)			this->m14 = ((Float)0.0);
HXDLIN( 201)			this->m15 = ((Float)0.0);
HXDLIN( 201)			this->m21 = ((Float)0.0);
HXDLIN( 201)			this->m22 = ((Float)1.0);
HXDLIN( 201)			this->m23 = ((Float)0.0);
HXDLIN( 201)			this->m24 = ((Float)0.0);
HXDLIN( 201)			this->m25 = ((Float)0.0);
HXDLIN( 201)			this->m31 = ((Float)0.0);
HXDLIN( 201)			this->m32 = ((Float)0.0);
HXDLIN( 201)			this->m33 = ((Float)1.0);
HXDLIN( 201)			this->m34 = ((Float)0.0);
HXDLIN( 201)			this->m35 = ((Float)0.0);
HXDLIN( 201)			this->m41 = ((Float)0.0);
HXDLIN( 201)			this->m42 = ((Float)0.0);
HXDLIN( 201)			this->m43 = ((Float)0.0);
HXDLIN( 201)			this->m44 = ((Float)1.0);
HXDLIN( 201)			this->m45 = ((Float)0.0);
            		}
HXLINE( 208)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorMatrix_obj,identity,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::invert(){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_212_invert)
HXLINE( 213)		{
HXLINE( 213)			Float t11 = this->m11;
HXDLIN( 213)			Float t12 = this->m12;
HXDLIN( 213)			Float t13 = this->m13;
HXDLIN( 213)			Float t14 = this->m14;
HXDLIN( 213)			Float _hx_tmp = (this->m11 * ((Float)-1.0));
HXDLIN( 213)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 213)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + (this->m12 * ((Float)-1.0)));
HXDLIN( 213)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 213)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (this->m13 * ((Float)-1.0)));
HXDLIN( 213)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 213)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + this->m14);
HXDLIN( 213)			this->m15 = ((((t11 * (int)255) + (t12 * (int)255)) + (t13 * (int)255)) + (t14 * ((Float)0.0)));
HXDLIN( 213)			Float t21 = this->m21;
HXDLIN( 213)			Float t22 = this->m22;
HXDLIN( 213)			Float t23 = this->m23;
HXDLIN( 213)			Float t24 = this->m24;
HXDLIN( 213)			Float _hx_tmp6 = (this->m21 * ((Float)-1.0));
HXDLIN( 213)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 213)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + (this->m22 * ((Float)-1.0)));
HXDLIN( 213)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 213)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (this->m23 * ((Float)-1.0)));
HXDLIN( 213)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 213)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + this->m24);
HXDLIN( 213)			this->m25 = ((((t21 * (int)255) + (t22 * (int)255)) + (t23 * (int)255)) + (t24 * ((Float)0.0)));
HXDLIN( 213)			Float t31 = this->m31;
HXDLIN( 213)			Float t32 = this->m32;
HXDLIN( 213)			Float t33 = this->m33;
HXDLIN( 213)			Float t34 = this->m34;
HXDLIN( 213)			Float _hx_tmp12 = (this->m31 * ((Float)-1.0));
HXDLIN( 213)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 213)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + (this->m32 * ((Float)-1.0)));
HXDLIN( 213)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 213)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (this->m33 * ((Float)-1.0)));
HXDLIN( 213)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 213)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + this->m34);
HXDLIN( 213)			this->m35 = ((((t31 * (int)255) + (t32 * (int)255)) + (t33 * (int)255)) + (t34 * ((Float)0.0)));
HXDLIN( 213)			Float t41 = this->m41;
HXDLIN( 213)			Float t42 = this->m42;
HXDLIN( 213)			Float t43 = this->m43;
HXDLIN( 213)			Float t44 = this->m44;
HXDLIN( 213)			Float _hx_tmp18 = (this->m41 * ((Float)-1.0));
HXDLIN( 213)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 213)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + (this->m42 * ((Float)-1.0)));
HXDLIN( 213)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 213)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 213)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (this->m43 * ((Float)-1.0)));
HXDLIN( 213)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 213)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + this->m44);
HXDLIN( 213)			this->m45 = ((((t41 * (int)255) + (t42 * (int)255)) + (t43 * (int)255)) + (t44 * ((Float)0.0)));
            		}
HXLINE( 220)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorMatrix_obj,invert,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::adjustSaturation(Float s){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_224_adjustSaturation)
HXLINE( 225)		Float sInv = (((Float)1.0) - s);
HXLINE( 226)		Float irlum = (sInv * ::com::stencyl::utils::ColorMatrix_obj::LUMA_R);
HXLINE( 227)		Float iglum = (sInv * ::com::stencyl::utils::ColorMatrix_obj::LUMA_G);
HXLINE( 228)		Float iblum = (sInv * ::com::stencyl::utils::ColorMatrix_obj::LUMA_B);
HXLINE( 230)		{
HXLINE( 230)			Float i11 = (irlum + s);
HXDLIN( 230)			Float i22 = (iglum + s);
HXDLIN( 230)			Float i33 = (iblum + s);
HXDLIN( 230)			Float t11 = this->m11;
HXDLIN( 230)			Float t12 = this->m12;
HXDLIN( 230)			Float t13 = this->m13;
HXDLIN( 230)			Float t14 = this->m14;
HXDLIN( 230)			Float _hx_tmp = (this->m11 * i11);
HXDLIN( 230)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * irlum));
HXDLIN( 230)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * irlum));
HXDLIN( 230)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 230)			Float _hx_tmp3 = ((t11 * iglum) + (this->m12 * i22));
HXDLIN( 230)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * iglum));
HXDLIN( 230)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 230)			Float _hx_tmp5 = (((t11 * iblum) + (t12 * iblum)) + (this->m13 * i33));
HXDLIN( 230)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 230)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + this->m14);
HXDLIN( 230)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * ((Float)0.0)));
HXDLIN( 230)			Float t21 = this->m21;
HXDLIN( 230)			Float t22 = this->m22;
HXDLIN( 230)			Float t23 = this->m23;
HXDLIN( 230)			Float t24 = this->m24;
HXDLIN( 230)			Float _hx_tmp6 = (this->m21 * i11);
HXDLIN( 230)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * irlum));
HXDLIN( 230)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * irlum));
HXDLIN( 230)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 230)			Float _hx_tmp9 = ((t21 * iglum) + (this->m22 * i22));
HXDLIN( 230)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * iglum));
HXDLIN( 230)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 230)			Float _hx_tmp11 = (((t21 * iblum) + (t22 * iblum)) + (this->m23 * i33));
HXDLIN( 230)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 230)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + this->m24);
HXDLIN( 230)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * ((Float)0.0)));
HXDLIN( 230)			Float t31 = this->m31;
HXDLIN( 230)			Float t32 = this->m32;
HXDLIN( 230)			Float t33 = this->m33;
HXDLIN( 230)			Float t34 = this->m34;
HXDLIN( 230)			Float _hx_tmp12 = (this->m31 * i11);
HXDLIN( 230)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * irlum));
HXDLIN( 230)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * irlum));
HXDLIN( 230)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 230)			Float _hx_tmp15 = ((t31 * iglum) + (this->m32 * i22));
HXDLIN( 230)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * iglum));
HXDLIN( 230)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 230)			Float _hx_tmp17 = (((t31 * iblum) + (t32 * iblum)) + (this->m33 * i33));
HXDLIN( 230)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 230)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + this->m34);
HXDLIN( 230)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * ((Float)0.0)));
HXDLIN( 230)			Float t41 = this->m41;
HXDLIN( 230)			Float t42 = this->m42;
HXDLIN( 230)			Float t43 = this->m43;
HXDLIN( 230)			Float t44 = this->m44;
HXDLIN( 230)			Float _hx_tmp18 = (this->m41 * i11);
HXDLIN( 230)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * irlum));
HXDLIN( 230)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * irlum));
HXDLIN( 230)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 230)			Float _hx_tmp21 = ((t41 * iglum) + (this->m42 * i22));
HXDLIN( 230)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * iglum));
HXDLIN( 230)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 230)			Float _hx_tmp23 = (((t41 * iblum) + (t42 * iblum)) + (this->m43 * i33));
HXDLIN( 230)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 230)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + this->m44);
HXDLIN( 230)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 237)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,adjustSaturation,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::adjustBrightness(Float x){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_241_adjustBrightness)
HXLINE( 242)		this->adjustBrightnessRGB(x,x,x);
HXLINE( 243)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,adjustBrightness,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::adjustBrightnessRGB(Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_247_adjustBrightnessRGB)
HXLINE( 248)		{
HXLINE( 248)			Float i15 = (r * (int)255);
HXDLIN( 248)			Float i25 = (g * (int)255);
HXDLIN( 248)			Float i35 = (b * (int)255);
HXDLIN( 248)			Float t11 = this->m11;
HXDLIN( 248)			Float t12 = this->m12;
HXDLIN( 248)			Float t13 = this->m13;
HXDLIN( 248)			Float t14 = this->m14;
HXDLIN( 248)			Float _hx_tmp = this->m11;
HXDLIN( 248)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 248)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + this->m12);
HXDLIN( 248)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 248)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + this->m13);
HXDLIN( 248)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 248)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + this->m14);
HXDLIN( 248)			this->m15 = ((((t11 * i15) + (t12 * i25)) + (t13 * i35)) + (t14 * ((Float)0.0)));
HXDLIN( 248)			Float t21 = this->m21;
HXDLIN( 248)			Float t22 = this->m22;
HXDLIN( 248)			Float t23 = this->m23;
HXDLIN( 248)			Float t24 = this->m24;
HXDLIN( 248)			Float _hx_tmp6 = this->m21;
HXDLIN( 248)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 248)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + this->m22);
HXDLIN( 248)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 248)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + this->m23);
HXDLIN( 248)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 248)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + this->m24);
HXDLIN( 248)			this->m25 = ((((t21 * i15) + (t22 * i25)) + (t23 * i35)) + (t24 * ((Float)0.0)));
HXDLIN( 248)			Float t31 = this->m31;
HXDLIN( 248)			Float t32 = this->m32;
HXDLIN( 248)			Float t33 = this->m33;
HXDLIN( 248)			Float t34 = this->m34;
HXDLIN( 248)			Float _hx_tmp12 = this->m31;
HXDLIN( 248)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 248)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + this->m32);
HXDLIN( 248)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 248)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + this->m33);
HXDLIN( 248)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 248)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + this->m34);
HXDLIN( 248)			this->m35 = ((((t31 * i15) + (t32 * i25)) + (t33 * i35)) + (t34 * ((Float)0.0)));
HXDLIN( 248)			Float t41 = this->m41;
HXDLIN( 248)			Float t42 = this->m42;
HXDLIN( 248)			Float t43 = this->m43;
HXDLIN( 248)			Float t44 = this->m44;
HXDLIN( 248)			Float _hx_tmp18 = this->m41;
HXDLIN( 248)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 248)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + this->m42);
HXDLIN( 248)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 248)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 248)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + this->m43);
HXDLIN( 248)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 248)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + this->m44);
HXDLIN( 248)			this->m45 = ((((t41 * i15) + (t42 * i25)) + (t43 * i35)) + (t44 * ((Float)0.0)));
            		}
HXLINE( 255)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ColorMatrix_obj,adjustBrightnessRGB,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::adjustContrast(Float x){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_259_adjustContrast)
HXLINE( 260)		this->adjustContrastRGB(x,x,x);
HXLINE( 261)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,adjustContrast,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::adjustContrastRGB(Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_265_adjustContrastRGB)
HXLINE( 266)		r = (r + ((Float)1.0));
HXLINE( 267)		g = (g + ((Float)1.0));
HXLINE( 268)		b = (b + ((Float)1.0));
HXLINE( 270)		{
HXLINE( 270)			Float i15 = (((Float)128.0) * (((Float)1.0) - r));
HXDLIN( 270)			Float i25 = (((Float)128.0) * (((Float)1.0) - g));
HXDLIN( 270)			Float i35 = (((Float)128.0) * (((Float)1.0) - b));
HXDLIN( 270)			Float t11 = this->m11;
HXDLIN( 270)			Float t12 = this->m12;
HXDLIN( 270)			Float t13 = this->m13;
HXDLIN( 270)			Float t14 = this->m14;
HXDLIN( 270)			Float _hx_tmp = (this->m11 * r);
HXDLIN( 270)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 270)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + (this->m12 * g));
HXDLIN( 270)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 270)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (this->m13 * b));
HXDLIN( 270)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 270)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + this->m14);
HXDLIN( 270)			this->m15 = ((((t11 * i15) + (t12 * i25)) + (t13 * i35)) + (t14 * ((Float)0.0)));
HXDLIN( 270)			Float t21 = this->m21;
HXDLIN( 270)			Float t22 = this->m22;
HXDLIN( 270)			Float t23 = this->m23;
HXDLIN( 270)			Float t24 = this->m24;
HXDLIN( 270)			Float _hx_tmp6 = (this->m21 * r);
HXDLIN( 270)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 270)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + (this->m22 * g));
HXDLIN( 270)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 270)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (this->m23 * b));
HXDLIN( 270)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 270)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + this->m24);
HXDLIN( 270)			this->m25 = ((((t21 * i15) + (t22 * i25)) + (t23 * i35)) + (t24 * ((Float)0.0)));
HXDLIN( 270)			Float t31 = this->m31;
HXDLIN( 270)			Float t32 = this->m32;
HXDLIN( 270)			Float t33 = this->m33;
HXDLIN( 270)			Float t34 = this->m34;
HXDLIN( 270)			Float _hx_tmp12 = (this->m31 * r);
HXDLIN( 270)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 270)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + (this->m32 * g));
HXDLIN( 270)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 270)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (this->m33 * b));
HXDLIN( 270)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 270)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + this->m34);
HXDLIN( 270)			this->m35 = ((((t31 * i15) + (t32 * i25)) + (t33 * i35)) + (t34 * ((Float)0.0)));
HXDLIN( 270)			Float t41 = this->m41;
HXDLIN( 270)			Float t42 = this->m42;
HXDLIN( 270)			Float t43 = this->m43;
HXDLIN( 270)			Float t44 = this->m44;
HXDLIN( 270)			Float _hx_tmp18 = (this->m41 * r);
HXDLIN( 270)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 270)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + (this->m42 * g));
HXDLIN( 270)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 270)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 270)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (this->m43 * b));
HXDLIN( 270)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 270)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + this->m44);
HXDLIN( 270)			this->m45 = ((((t41 * i15) + (t42 * i25)) + (t43 * i35)) + (t44 * ((Float)0.0)));
            		}
HXLINE( 277)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ColorMatrix_obj,adjustContrastRGB,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::adjustHue(Float angle){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_281_adjustHue)
HXLINE( 282)		angle = (angle * ((Float)0.017453292519942779));
HXLINE( 283)		Float c = ::Math_obj::cos(angle);
HXLINE( 284)		Float s = ::Math_obj::sin(angle);
HXLINE( 286)		{
HXLINE( 288)			Float i11 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_R;
HXDLIN( 288)			Float i111 = (i11 + (c * (((Float)1.0) - ::com::stencyl::utils::ColorMatrix_obj::LUMA_R)));
HXLINE( 286)			Float i112 = (i111 + (s * -(::com::stencyl::utils::ColorMatrix_obj::LUMA_R)));
HXLINE( 288)			Float i12 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_G;
HXDLIN( 288)			Float i121 = (i12 + (c * -(::com::stencyl::utils::ColorMatrix_obj::LUMA_G)));
HXLINE( 286)			Float i122 = (i121 + (s * -(::com::stencyl::utils::ColorMatrix_obj::LUMA_G)));
HXLINE( 288)			Float i13 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_B;
HXDLIN( 288)			Float i131 = (i13 + (c * -(::com::stencyl::utils::ColorMatrix_obj::LUMA_B)));
HXLINE( 286)			Float i132 = (i131 + (s * (((Float)1.0) - ::com::stencyl::utils::ColorMatrix_obj::LUMA_B)));
HXLINE( 289)			Float i21 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_R;
HXDLIN( 289)			Float i211 = (i21 + (c * -(::com::stencyl::utils::ColorMatrix_obj::LUMA_R)));
HXLINE( 286)			Float i212 = (i211 + (s * ((Float)0.143)));
HXLINE( 289)			Float i22 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_G;
HXDLIN( 289)			Float i221 = (i22 + (c * ((int)1 - ::com::stencyl::utils::ColorMatrix_obj::LUMA_G)));
HXLINE( 286)			Float i222 = (i221 + (s * ((Float)0.14)));
HXLINE( 289)			Float i23 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_B;
HXDLIN( 289)			Float i231 = (i23 + (c * -(::com::stencyl::utils::ColorMatrix_obj::LUMA_B)));
HXLINE( 286)			Float i232 = (i231 + (s * ((Float)-0.283)));
HXLINE( 290)			Float i31 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_R;
HXDLIN( 290)			Float i311 = (i31 + (c * -(::com::stencyl::utils::ColorMatrix_obj::LUMA_R)));
HXLINE( 286)			Float i312 = (i311 + (s * -((((Float)1.0) - ::com::stencyl::utils::ColorMatrix_obj::LUMA_R))));
HXLINE( 290)			Float i32 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_G;
HXDLIN( 290)			Float i321 = (i32 + (c * -(::com::stencyl::utils::ColorMatrix_obj::LUMA_G)));
HXLINE( 286)			Float i322 = (i321 + (s * ::com::stencyl::utils::ColorMatrix_obj::LUMA_G));
HXLINE( 290)			Float i33 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_B;
HXDLIN( 290)			Float i331 = (i33 + (c * ((int)1 - ::com::stencyl::utils::ColorMatrix_obj::LUMA_B)));
HXLINE( 286)			Float i332 = (i331 + (s * ::com::stencyl::utils::ColorMatrix_obj::LUMA_B));
HXDLIN( 286)			Float t11 = this->m11;
HXDLIN( 286)			Float t12 = this->m12;
HXDLIN( 286)			Float t13 = this->m13;
HXDLIN( 286)			Float t14 = this->m14;
HXDLIN( 286)			Float _hx_tmp = (this->m11 * i112);
HXDLIN( 286)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * i212));
HXDLIN( 286)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * i312));
HXDLIN( 286)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 286)			Float _hx_tmp3 = ((t11 * i122) + (this->m12 * i222));
HXDLIN( 286)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * i322));
HXDLIN( 286)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 286)			Float _hx_tmp5 = (((t11 * i132) + (t12 * i232)) + (this->m13 * i332));
HXDLIN( 286)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 286)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + this->m14);
HXDLIN( 286)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * ((Float)0.0)));
HXDLIN( 286)			Float t21 = this->m21;
HXDLIN( 286)			Float t22 = this->m22;
HXDLIN( 286)			Float t23 = this->m23;
HXDLIN( 286)			Float t24 = this->m24;
HXDLIN( 286)			Float _hx_tmp6 = (this->m21 * i112);
HXDLIN( 286)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * i212));
HXDLIN( 286)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * i312));
HXDLIN( 286)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 286)			Float _hx_tmp9 = ((t21 * i122) + (this->m22 * i222));
HXDLIN( 286)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * i322));
HXDLIN( 286)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 286)			Float _hx_tmp11 = (((t21 * i132) + (t22 * i232)) + (this->m23 * i332));
HXDLIN( 286)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 286)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + this->m24);
HXDLIN( 286)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * ((Float)0.0)));
HXDLIN( 286)			Float t31 = this->m31;
HXDLIN( 286)			Float t32 = this->m32;
HXDLIN( 286)			Float t33 = this->m33;
HXDLIN( 286)			Float t34 = this->m34;
HXDLIN( 286)			Float _hx_tmp12 = (this->m31 * i112);
HXDLIN( 286)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * i212));
HXDLIN( 286)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * i312));
HXDLIN( 286)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 286)			Float _hx_tmp15 = ((t31 * i122) + (this->m32 * i222));
HXDLIN( 286)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * i322));
HXDLIN( 286)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 286)			Float _hx_tmp17 = (((t31 * i132) + (t32 * i232)) + (this->m33 * i332));
HXDLIN( 286)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 286)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + this->m34);
HXDLIN( 286)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * ((Float)0.0)));
HXDLIN( 286)			Float t41 = this->m41;
HXDLIN( 286)			Float t42 = this->m42;
HXDLIN( 286)			Float t43 = this->m43;
HXDLIN( 286)			Float t44 = this->m44;
HXDLIN( 286)			Float _hx_tmp18 = (this->m41 * i112);
HXDLIN( 286)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * i212));
HXDLIN( 286)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * i312));
HXDLIN( 286)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 286)			Float _hx_tmp21 = ((t41 * i122) + (this->m42 * i222));
HXDLIN( 286)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * i322));
HXDLIN( 286)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 286)			Float _hx_tmp23 = (((t41 * i132) + (t42 * i232)) + (this->m43 * i332));
HXDLIN( 286)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 286)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + this->m44);
HXDLIN( 286)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 293)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,adjustHue,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::luminance2Alpha(){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_297_luminance2Alpha)
HXLINE( 298)		{
HXLINE( 298)			Float i41 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_R;
HXDLIN( 298)			Float i42 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_G;
HXDLIN( 298)			Float i43 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_B;
HXDLIN( 298)			Float t11 = this->m11;
HXDLIN( 298)			Float t12 = this->m12;
HXDLIN( 298)			Float t13 = this->m13;
HXDLIN( 298)			Float t14 = this->m14;
HXDLIN( 298)			Float _hx_tmp = (this->m11 * ((Float)0.0));
HXDLIN( 298)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 298)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 298)			this->m11 = (_hx_tmp2 + (this->m14 * i41));
HXDLIN( 298)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + (this->m12 * ((Float)0.0)));
HXDLIN( 298)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 298)			this->m12 = (_hx_tmp4 + (this->m14 * i42));
HXDLIN( 298)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (this->m13 * ((Float)0.0)));
HXDLIN( 298)			this->m13 = (_hx_tmp5 + (this->m14 * i43));
HXDLIN( 298)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (this->m14 * ((Float)0.0)));
HXDLIN( 298)			this->m15 = ((((t11 * ((Float)255.0)) + (t12 * ((Float)255.0))) + (t13 * ((Float)255.0))) + (t14 * ((Float)0.0)));
HXDLIN( 298)			Float t21 = this->m21;
HXDLIN( 298)			Float t22 = this->m22;
HXDLIN( 298)			Float t23 = this->m23;
HXDLIN( 298)			Float t24 = this->m24;
HXDLIN( 298)			Float _hx_tmp6 = (this->m21 * ((Float)0.0));
HXDLIN( 298)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 298)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 298)			this->m21 = (_hx_tmp8 + (this->m24 * i41));
HXDLIN( 298)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + (this->m22 * ((Float)0.0)));
HXDLIN( 298)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 298)			this->m22 = (_hx_tmp10 + (this->m24 * i42));
HXDLIN( 298)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (this->m23 * ((Float)0.0)));
HXDLIN( 298)			this->m23 = (_hx_tmp11 + (this->m24 * i43));
HXDLIN( 298)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (this->m24 * ((Float)0.0)));
HXDLIN( 298)			this->m25 = ((((t21 * ((Float)255.0)) + (t22 * ((Float)255.0))) + (t23 * ((Float)255.0))) + (t24 * ((Float)0.0)));
HXDLIN( 298)			Float t31 = this->m31;
HXDLIN( 298)			Float t32 = this->m32;
HXDLIN( 298)			Float t33 = this->m33;
HXDLIN( 298)			Float t34 = this->m34;
HXDLIN( 298)			Float _hx_tmp12 = (this->m31 * ((Float)0.0));
HXDLIN( 298)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 298)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 298)			this->m31 = (_hx_tmp14 + (this->m34 * i41));
HXDLIN( 298)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + (this->m32 * ((Float)0.0)));
HXDLIN( 298)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 298)			this->m32 = (_hx_tmp16 + (this->m34 * i42));
HXDLIN( 298)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (this->m33 * ((Float)0.0)));
HXDLIN( 298)			this->m33 = (_hx_tmp17 + (this->m34 * i43));
HXDLIN( 298)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (this->m34 * ((Float)0.0)));
HXDLIN( 298)			this->m35 = ((((t31 * ((Float)255.0)) + (t32 * ((Float)255.0))) + (t33 * ((Float)255.0))) + (t34 * ((Float)0.0)));
HXDLIN( 298)			Float t41 = this->m41;
HXDLIN( 298)			Float t42 = this->m42;
HXDLIN( 298)			Float t43 = this->m43;
HXDLIN( 298)			Float t44 = this->m44;
HXDLIN( 298)			Float _hx_tmp18 = (this->m41 * ((Float)0.0));
HXDLIN( 298)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 298)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 298)			this->m41 = (_hx_tmp20 + (this->m44 * i41));
HXDLIN( 298)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + (this->m42 * ((Float)0.0)));
HXDLIN( 298)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 298)			this->m42 = (_hx_tmp22 + (this->m44 * i42));
HXDLIN( 298)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (this->m43 * ((Float)0.0)));
HXDLIN( 298)			this->m43 = (_hx_tmp23 + (this->m44 * i43));
HXDLIN( 298)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (this->m44 * ((Float)0.0)));
HXDLIN( 298)			this->m45 = ((((t41 * ((Float)255.0)) + (t42 * ((Float)255.0))) + (t43 * ((Float)255.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 305)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorMatrix_obj,luminance2Alpha,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::adjustAlphaContrast(Float amount){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_309_adjustAlphaContrast)
HXLINE( 310)		amount = (amount + ((Float)1.0));
HXLINE( 312)		{
HXLINE( 312)			Float i45 = (((Float)128.0) * (((Float)1.0) - amount));
HXDLIN( 312)			Float t11 = this->m11;
HXDLIN( 312)			Float t12 = this->m12;
HXDLIN( 312)			Float t13 = this->m13;
HXDLIN( 312)			Float t14 = this->m14;
HXDLIN( 312)			Float _hx_tmp = this->m11;
HXDLIN( 312)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 312)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + this->m12);
HXDLIN( 312)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 312)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + this->m13);
HXDLIN( 312)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 312)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (this->m14 * amount));
HXDLIN( 312)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * i45));
HXDLIN( 312)			Float t21 = this->m21;
HXDLIN( 312)			Float t22 = this->m22;
HXDLIN( 312)			Float t23 = this->m23;
HXDLIN( 312)			Float t24 = this->m24;
HXDLIN( 312)			Float _hx_tmp6 = this->m21;
HXDLIN( 312)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 312)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + this->m22);
HXDLIN( 312)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 312)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + this->m23);
HXDLIN( 312)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 312)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (this->m24 * amount));
HXDLIN( 312)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * i45));
HXDLIN( 312)			Float t31 = this->m31;
HXDLIN( 312)			Float t32 = this->m32;
HXDLIN( 312)			Float t33 = this->m33;
HXDLIN( 312)			Float t34 = this->m34;
HXDLIN( 312)			Float _hx_tmp12 = this->m31;
HXDLIN( 312)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 312)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + this->m32);
HXDLIN( 312)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 312)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + this->m33);
HXDLIN( 312)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 312)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (this->m34 * amount));
HXDLIN( 312)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * i45));
HXDLIN( 312)			Float t41 = this->m41;
HXDLIN( 312)			Float t42 = this->m42;
HXDLIN( 312)			Float t43 = this->m43;
HXDLIN( 312)			Float t44 = this->m44;
HXDLIN( 312)			Float _hx_tmp18 = this->m41;
HXDLIN( 312)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 312)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + this->m42);
HXDLIN( 312)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 312)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 312)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + this->m43);
HXDLIN( 312)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 312)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (this->m44 * amount));
HXDLIN( 312)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * i45));
            		}
HXLINE( 319)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,adjustAlphaContrast,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::colorize(int rgb, ::Dynamic __o_amount){
 ::Dynamic amount = __o_amount.Default(((Float)1.));
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_323_colorize)
HXLINE( 324)		Float r = (((int)hx::UShr(rgb,(int)16) & (int)(int)255) * ((Float)0.00392156862745098));
HXLINE( 325)		Float g = (((int)hx::UShr(rgb,(int)8) & (int)(int)255) * ((Float)0.00392156862745098));
HXLINE( 326)		Float b = (((int)rgb & (int)(int)255) * ((Float)0.00392156862745098));
HXLINE( 328)		Float inv_amount = ((int)1 - amount);
HXLINE( 330)		{
HXLINE( 330)			Float i11 = (inv_amount + ((amount * r) * ::com::stencyl::utils::ColorMatrix_obj::LUMA_R));
HXDLIN( 330)			Float i12 = ((amount * r) * ::com::stencyl::utils::ColorMatrix_obj::LUMA_G);
HXDLIN( 330)			Float i13 = ((amount * r) * ::com::stencyl::utils::ColorMatrix_obj::LUMA_B);
HXDLIN( 330)			Float i21 = ((amount * g) * ::com::stencyl::utils::ColorMatrix_obj::LUMA_R);
HXDLIN( 330)			Float i22 = (inv_amount + ((amount * g) * ::com::stencyl::utils::ColorMatrix_obj::LUMA_G));
HXDLIN( 330)			Float i23 = ((amount * g) * ::com::stencyl::utils::ColorMatrix_obj::LUMA_B);
HXDLIN( 330)			Float i31 = ((amount * b) * ::com::stencyl::utils::ColorMatrix_obj::LUMA_R);
HXDLIN( 330)			Float i32 = ((amount * b) * ::com::stencyl::utils::ColorMatrix_obj::LUMA_G);
HXDLIN( 330)			Float i33 = (inv_amount + ((amount * b) * ::com::stencyl::utils::ColorMatrix_obj::LUMA_B));
HXDLIN( 330)			Float t11 = this->m11;
HXDLIN( 330)			Float t12 = this->m12;
HXDLIN( 330)			Float t13 = this->m13;
HXDLIN( 330)			Float t14 = this->m14;
HXDLIN( 330)			Float _hx_tmp = (this->m11 * i11);
HXDLIN( 330)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * i21));
HXDLIN( 330)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * i31));
HXDLIN( 330)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 330)			Float _hx_tmp3 = ((t11 * i12) + (this->m12 * i22));
HXDLIN( 330)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * i32));
HXDLIN( 330)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 330)			Float _hx_tmp5 = (((t11 * i13) + (t12 * i23)) + (this->m13 * i33));
HXDLIN( 330)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 330)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + this->m14);
HXDLIN( 330)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * ((Float)0.0)));
HXDLIN( 330)			Float t21 = this->m21;
HXDLIN( 330)			Float t22 = this->m22;
HXDLIN( 330)			Float t23 = this->m23;
HXDLIN( 330)			Float t24 = this->m24;
HXDLIN( 330)			Float _hx_tmp6 = (this->m21 * i11);
HXDLIN( 330)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * i21));
HXDLIN( 330)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * i31));
HXDLIN( 330)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 330)			Float _hx_tmp9 = ((t21 * i12) + (this->m22 * i22));
HXDLIN( 330)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * i32));
HXDLIN( 330)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 330)			Float _hx_tmp11 = (((t21 * i13) + (t22 * i23)) + (this->m23 * i33));
HXDLIN( 330)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 330)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + this->m24);
HXDLIN( 330)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * ((Float)0.0)));
HXDLIN( 330)			Float t31 = this->m31;
HXDLIN( 330)			Float t32 = this->m32;
HXDLIN( 330)			Float t33 = this->m33;
HXDLIN( 330)			Float t34 = this->m34;
HXDLIN( 330)			Float _hx_tmp12 = (this->m31 * i11);
HXDLIN( 330)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * i21));
HXDLIN( 330)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * i31));
HXDLIN( 330)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 330)			Float _hx_tmp15 = ((t31 * i12) + (this->m32 * i22));
HXDLIN( 330)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * i32));
HXDLIN( 330)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 330)			Float _hx_tmp17 = (((t31 * i13) + (t32 * i23)) + (this->m33 * i33));
HXDLIN( 330)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 330)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + this->m34);
HXDLIN( 330)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * ((Float)0.0)));
HXDLIN( 330)			Float t41 = this->m41;
HXDLIN( 330)			Float t42 = this->m42;
HXDLIN( 330)			Float t43 = this->m43;
HXDLIN( 330)			Float t44 = this->m44;
HXDLIN( 330)			Float _hx_tmp18 = (this->m41 * i11);
HXDLIN( 330)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * i21));
HXDLIN( 330)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * i31));
HXDLIN( 330)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 330)			Float _hx_tmp21 = ((t41 * i12) + (this->m42 * i22));
HXDLIN( 330)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * i32));
HXDLIN( 330)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 330)			Float _hx_tmp23 = (((t41 * i13) + (t42 * i23)) + (this->m43 * i33));
HXDLIN( 330)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 330)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + this->m44);
HXDLIN( 330)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 337)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_obj,colorize,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::rotateHue(Float angle){
            	HX_GC_STACKFRAME(&_hx_pos_40551333bb1ead78_341_rotateHue)
HXLINE( 342)		{
HXLINE( 342)			Float greenRotation = ((Float)39.182655);
HXDLIN( 342)			if (!(this->hueInitialized)) {
HXLINE( 342)				this->hueInitialized = true;
HXDLIN( 342)				this->preHue =  ::com::stencyl::utils::ColorMatrix_obj::__alloc( HX_CTX );
HXDLIN( 342)				this->preHue->rotateRed(((Float)45.0));
HXDLIN( 342)				this->preHue->rotateGreen(-(greenRotation));
HXDLIN( 342)				::Array< Float > lum = ::Array_obj< Float >::__new();
HXDLIN( 342)				lum[(int)0] = ::com::stencyl::utils::ColorMatrix_obj::LUMA_R2;
HXDLIN( 342)				lum[(int)1] = ::com::stencyl::utils::ColorMatrix_obj::LUMA_G2;
HXDLIN( 342)				lum[(int)2] = ::com::stencyl::utils::ColorMatrix_obj::LUMA_B2;
HXDLIN( 342)				lum[(int)3] = ((Float)1.0);
HXDLIN( 342)				this->preHue->transformVector(lum);
HXDLIN( 342)				Float red = ((Float)lum->__get((int)0) / (Float)lum->__get((int)2));
HXDLIN( 342)				Float green = ((Float)lum->__get((int)1) / (Float)lum->__get((int)2));
HXDLIN( 342)				this->preHue->shearBlue(red,green);
HXDLIN( 342)				this->postHue =  ::com::stencyl::utils::ColorMatrix_obj::__alloc( HX_CTX );
HXDLIN( 342)				this->postHue->shearBlue(-(red),-(green));
HXDLIN( 342)				this->postHue->rotateGreen(greenRotation);
HXDLIN( 342)				this->postHue->rotateRed(((Float)-45.0));
            			}
            		}
HXLINE( 344)		{
HXLINE( 344)			 ::com::stencyl::utils::ColorMatrix B = this->preHue;
HXDLIN( 344)			Float t11 = this->m11;
HXDLIN( 344)			Float t12 = this->m12;
HXDLIN( 344)			Float t13 = this->m13;
HXDLIN( 344)			Float t14 = this->m14;
HXDLIN( 344)			Float _hx_tmp = (this->m11 * B->m11);
HXDLIN( 344)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * B->m21));
HXDLIN( 344)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * B->m31));
HXDLIN( 344)			this->m11 = (_hx_tmp2 + (this->m14 * B->m41));
HXDLIN( 344)			Float _hx_tmp3 = (t11 * B->m12);
HXDLIN( 344)			Float _hx_tmp4 = (_hx_tmp3 + (this->m12 * B->m22));
HXDLIN( 344)			Float _hx_tmp5 = (_hx_tmp4 + (this->m13 * B->m32));
HXDLIN( 344)			this->m12 = (_hx_tmp5 + (this->m14 * B->m42));
HXDLIN( 344)			Float _hx_tmp6 = (t11 * B->m13);
HXDLIN( 344)			Float _hx_tmp7 = (_hx_tmp6 + (t12 * B->m23));
HXDLIN( 344)			Float _hx_tmp8 = (_hx_tmp7 + (this->m13 * B->m33));
HXDLIN( 344)			this->m13 = (_hx_tmp8 + (this->m14 * B->m43));
HXDLIN( 344)			Float _hx_tmp9 = (t11 * B->m14);
HXDLIN( 344)			Float _hx_tmp10 = (_hx_tmp9 + (t12 * B->m24));
HXDLIN( 344)			Float _hx_tmp11 = (_hx_tmp10 + (t13 * B->m34));
HXDLIN( 344)			this->m14 = (_hx_tmp11 + (this->m14 * B->m44));
HXDLIN( 344)			Float _hx_tmp12 = (t11 * B->m15);
HXDLIN( 344)			Float _hx_tmp13 = (_hx_tmp12 + (t12 * B->m25));
HXDLIN( 344)			Float _hx_tmp14 = (_hx_tmp13 + (t13 * B->m35));
HXDLIN( 344)			this->m15 = (_hx_tmp14 + (t14 * B->m45));
HXDLIN( 344)			Float t21 = this->m21;
HXDLIN( 344)			Float t22 = this->m22;
HXDLIN( 344)			Float t23 = this->m23;
HXDLIN( 344)			Float t24 = this->m24;
HXDLIN( 344)			Float _hx_tmp15 = (this->m21 * B->m11);
HXDLIN( 344)			Float _hx_tmp16 = (_hx_tmp15 + (this->m22 * B->m21));
HXDLIN( 344)			Float _hx_tmp17 = (_hx_tmp16 + (this->m23 * B->m31));
HXDLIN( 344)			this->m21 = (_hx_tmp17 + (this->m24 * B->m41));
HXDLIN( 344)			Float _hx_tmp18 = (t21 * B->m12);
HXDLIN( 344)			Float _hx_tmp19 = (_hx_tmp18 + (this->m22 * B->m22));
HXDLIN( 344)			Float _hx_tmp20 = (_hx_tmp19 + (this->m23 * B->m32));
HXDLIN( 344)			this->m22 = (_hx_tmp20 + (this->m24 * B->m42));
HXDLIN( 344)			Float _hx_tmp21 = (t21 * B->m13);
HXDLIN( 344)			Float _hx_tmp22 = (_hx_tmp21 + (t22 * B->m23));
HXDLIN( 344)			Float _hx_tmp23 = (_hx_tmp22 + (this->m23 * B->m33));
HXDLIN( 344)			this->m23 = (_hx_tmp23 + (this->m24 * B->m43));
HXDLIN( 344)			Float _hx_tmp24 = (t21 * B->m14);
HXDLIN( 344)			Float _hx_tmp25 = (_hx_tmp24 + (t22 * B->m24));
HXDLIN( 344)			Float _hx_tmp26 = (_hx_tmp25 + (t23 * B->m34));
HXDLIN( 344)			this->m24 = (_hx_tmp26 + (this->m24 * B->m44));
HXDLIN( 344)			Float _hx_tmp27 = (t21 * B->m15);
HXDLIN( 344)			Float _hx_tmp28 = (_hx_tmp27 + (t22 * B->m25));
HXDLIN( 344)			Float _hx_tmp29 = (_hx_tmp28 + (t23 * B->m35));
HXDLIN( 344)			this->m25 = (_hx_tmp29 + (t24 * B->m45));
HXDLIN( 344)			Float t31 = this->m31;
HXDLIN( 344)			Float t32 = this->m32;
HXDLIN( 344)			Float t33 = this->m33;
HXDLIN( 344)			Float t34 = this->m34;
HXDLIN( 344)			Float _hx_tmp30 = (this->m31 * B->m11);
HXDLIN( 344)			Float _hx_tmp31 = (_hx_tmp30 + (this->m32 * B->m21));
HXDLIN( 344)			Float _hx_tmp32 = (_hx_tmp31 + (this->m33 * B->m31));
HXDLIN( 344)			this->m31 = (_hx_tmp32 + (this->m34 * B->m41));
HXDLIN( 344)			Float _hx_tmp33 = (t31 * B->m12);
HXDLIN( 344)			Float _hx_tmp34 = (_hx_tmp33 + (this->m32 * B->m22));
HXDLIN( 344)			Float _hx_tmp35 = (_hx_tmp34 + (this->m33 * B->m32));
HXDLIN( 344)			this->m32 = (_hx_tmp35 + (this->m34 * B->m42));
HXDLIN( 344)			Float _hx_tmp36 = (t31 * B->m13);
HXDLIN( 344)			Float _hx_tmp37 = (_hx_tmp36 + (t32 * B->m23));
HXDLIN( 344)			Float _hx_tmp38 = (_hx_tmp37 + (this->m33 * B->m33));
HXDLIN( 344)			this->m33 = (_hx_tmp38 + (this->m34 * B->m43));
HXDLIN( 344)			Float _hx_tmp39 = (t31 * B->m14);
HXDLIN( 344)			Float _hx_tmp40 = (_hx_tmp39 + (t32 * B->m24));
HXDLIN( 344)			Float _hx_tmp41 = (_hx_tmp40 + (t33 * B->m34));
HXDLIN( 344)			this->m34 = (_hx_tmp41 + (this->m34 * B->m44));
HXDLIN( 344)			Float _hx_tmp42 = (t31 * B->m15);
HXDLIN( 344)			Float _hx_tmp43 = (_hx_tmp42 + (t32 * B->m25));
HXDLIN( 344)			Float _hx_tmp44 = (_hx_tmp43 + (t33 * B->m35));
HXDLIN( 344)			this->m35 = (_hx_tmp44 + (t34 * B->m45));
HXDLIN( 344)			Float t41 = this->m41;
HXDLIN( 344)			Float t42 = this->m42;
HXDLIN( 344)			Float t43 = this->m43;
HXDLIN( 344)			Float t44 = this->m44;
HXDLIN( 344)			Float _hx_tmp45 = (this->m41 * B->m11);
HXDLIN( 344)			Float _hx_tmp46 = (_hx_tmp45 + (this->m42 * B->m21));
HXDLIN( 344)			Float _hx_tmp47 = (_hx_tmp46 + (this->m43 * B->m31));
HXDLIN( 344)			this->m41 = (_hx_tmp47 + (this->m44 * B->m41));
HXDLIN( 344)			Float _hx_tmp48 = (t41 * B->m12);
HXDLIN( 344)			Float _hx_tmp49 = (_hx_tmp48 + (this->m42 * B->m22));
HXDLIN( 344)			Float _hx_tmp50 = (_hx_tmp49 + (this->m43 * B->m32));
HXDLIN( 344)			this->m42 = (_hx_tmp50 + (this->m44 * B->m42));
HXDLIN( 344)			Float _hx_tmp51 = (t41 * B->m13);
HXDLIN( 344)			Float _hx_tmp52 = (_hx_tmp51 + (t42 * B->m23));
HXDLIN( 344)			Float _hx_tmp53 = (_hx_tmp52 + (this->m43 * B->m33));
HXDLIN( 344)			this->m43 = (_hx_tmp53 + (this->m44 * B->m43));
HXDLIN( 344)			Float _hx_tmp54 = (t41 * B->m14);
HXDLIN( 344)			Float _hx_tmp55 = (_hx_tmp54 + (t42 * B->m24));
HXDLIN( 344)			Float _hx_tmp56 = (_hx_tmp55 + (t43 * B->m34));
HXDLIN( 344)			this->m44 = (_hx_tmp56 + (this->m44 * B->m44));
HXDLIN( 344)			Float _hx_tmp57 = (t41 * B->m15);
HXDLIN( 344)			Float _hx_tmp58 = (_hx_tmp57 + (t42 * B->m25));
HXDLIN( 344)			Float _hx_tmp59 = (_hx_tmp58 + (t43 * B->m35));
HXDLIN( 344)			this->m45 = (_hx_tmp59 + (t44 * B->m45));
            		}
HXLINE( 345)		this->rotateBlue(angle);
HXLINE( 346)		{
HXLINE( 346)			 ::com::stencyl::utils::ColorMatrix B1 = this->postHue;
HXDLIN( 346)			Float t111 = this->m11;
HXDLIN( 346)			Float t121 = this->m12;
HXDLIN( 346)			Float t131 = this->m13;
HXDLIN( 346)			Float t141 = this->m14;
HXDLIN( 346)			Float _hx_tmp60 = (this->m11 * B1->m11);
HXDLIN( 346)			Float _hx_tmp61 = (_hx_tmp60 + (this->m12 * B1->m21));
HXDLIN( 346)			Float _hx_tmp62 = (_hx_tmp61 + (this->m13 * B1->m31));
HXDLIN( 346)			this->m11 = (_hx_tmp62 + (this->m14 * B1->m41));
HXDLIN( 346)			Float _hx_tmp63 = (t111 * B1->m12);
HXDLIN( 346)			Float _hx_tmp64 = (_hx_tmp63 + (this->m12 * B1->m22));
HXDLIN( 346)			Float _hx_tmp65 = (_hx_tmp64 + (this->m13 * B1->m32));
HXDLIN( 346)			this->m12 = (_hx_tmp65 + (this->m14 * B1->m42));
HXDLIN( 346)			Float _hx_tmp66 = (t111 * B1->m13);
HXDLIN( 346)			Float _hx_tmp67 = (_hx_tmp66 + (t121 * B1->m23));
HXDLIN( 346)			Float _hx_tmp68 = (_hx_tmp67 + (this->m13 * B1->m33));
HXDLIN( 346)			this->m13 = (_hx_tmp68 + (this->m14 * B1->m43));
HXDLIN( 346)			Float _hx_tmp69 = (t111 * B1->m14);
HXDLIN( 346)			Float _hx_tmp70 = (_hx_tmp69 + (t121 * B1->m24));
HXDLIN( 346)			Float _hx_tmp71 = (_hx_tmp70 + (t131 * B1->m34));
HXDLIN( 346)			this->m14 = (_hx_tmp71 + (this->m14 * B1->m44));
HXDLIN( 346)			Float _hx_tmp72 = (t111 * B1->m15);
HXDLIN( 346)			Float _hx_tmp73 = (_hx_tmp72 + (t121 * B1->m25));
HXDLIN( 346)			Float _hx_tmp74 = (_hx_tmp73 + (t131 * B1->m35));
HXDLIN( 346)			this->m15 = (_hx_tmp74 + (t141 * B1->m45));
HXDLIN( 346)			Float t211 = this->m21;
HXDLIN( 346)			Float t221 = this->m22;
HXDLIN( 346)			Float t231 = this->m23;
HXDLIN( 346)			Float t241 = this->m24;
HXDLIN( 346)			Float _hx_tmp75 = (this->m21 * B1->m11);
HXDLIN( 346)			Float _hx_tmp76 = (_hx_tmp75 + (this->m22 * B1->m21));
HXDLIN( 346)			Float _hx_tmp77 = (_hx_tmp76 + (this->m23 * B1->m31));
HXDLIN( 346)			this->m21 = (_hx_tmp77 + (this->m24 * B1->m41));
HXDLIN( 346)			Float _hx_tmp78 = (t211 * B1->m12);
HXDLIN( 346)			Float _hx_tmp79 = (_hx_tmp78 + (this->m22 * B1->m22));
HXDLIN( 346)			Float _hx_tmp80 = (_hx_tmp79 + (this->m23 * B1->m32));
HXDLIN( 346)			this->m22 = (_hx_tmp80 + (this->m24 * B1->m42));
HXDLIN( 346)			Float _hx_tmp81 = (t211 * B1->m13);
HXDLIN( 346)			Float _hx_tmp82 = (_hx_tmp81 + (t221 * B1->m23));
HXDLIN( 346)			Float _hx_tmp83 = (_hx_tmp82 + (this->m23 * B1->m33));
HXDLIN( 346)			this->m23 = (_hx_tmp83 + (this->m24 * B1->m43));
HXDLIN( 346)			Float _hx_tmp84 = (t211 * B1->m14);
HXDLIN( 346)			Float _hx_tmp85 = (_hx_tmp84 + (t221 * B1->m24));
HXDLIN( 346)			Float _hx_tmp86 = (_hx_tmp85 + (t231 * B1->m34));
HXDLIN( 346)			this->m24 = (_hx_tmp86 + (this->m24 * B1->m44));
HXDLIN( 346)			Float _hx_tmp87 = (t211 * B1->m15);
HXDLIN( 346)			Float _hx_tmp88 = (_hx_tmp87 + (t221 * B1->m25));
HXDLIN( 346)			Float _hx_tmp89 = (_hx_tmp88 + (t231 * B1->m35));
HXDLIN( 346)			this->m25 = (_hx_tmp89 + (t241 * B1->m45));
HXDLIN( 346)			Float t311 = this->m31;
HXDLIN( 346)			Float t321 = this->m32;
HXDLIN( 346)			Float t331 = this->m33;
HXDLIN( 346)			Float t341 = this->m34;
HXDLIN( 346)			Float _hx_tmp90 = (this->m31 * B1->m11);
HXDLIN( 346)			Float _hx_tmp91 = (_hx_tmp90 + (this->m32 * B1->m21));
HXDLIN( 346)			Float _hx_tmp92 = (_hx_tmp91 + (this->m33 * B1->m31));
HXDLIN( 346)			this->m31 = (_hx_tmp92 + (this->m34 * B1->m41));
HXDLIN( 346)			Float _hx_tmp93 = (t311 * B1->m12);
HXDLIN( 346)			Float _hx_tmp94 = (_hx_tmp93 + (this->m32 * B1->m22));
HXDLIN( 346)			Float _hx_tmp95 = (_hx_tmp94 + (this->m33 * B1->m32));
HXDLIN( 346)			this->m32 = (_hx_tmp95 + (this->m34 * B1->m42));
HXDLIN( 346)			Float _hx_tmp96 = (t311 * B1->m13);
HXDLIN( 346)			Float _hx_tmp97 = (_hx_tmp96 + (t321 * B1->m23));
HXDLIN( 346)			Float _hx_tmp98 = (_hx_tmp97 + (this->m33 * B1->m33));
HXDLIN( 346)			this->m33 = (_hx_tmp98 + (this->m34 * B1->m43));
HXDLIN( 346)			Float _hx_tmp99 = (t311 * B1->m14);
HXDLIN( 346)			Float _hx_tmp100 = (_hx_tmp99 + (t321 * B1->m24));
HXDLIN( 346)			Float _hx_tmp101 = (_hx_tmp100 + (t331 * B1->m34));
HXDLIN( 346)			this->m34 = (_hx_tmp101 + (this->m34 * B1->m44));
HXDLIN( 346)			Float _hx_tmp102 = (t311 * B1->m15);
HXDLIN( 346)			Float _hx_tmp103 = (_hx_tmp102 + (t321 * B1->m25));
HXDLIN( 346)			Float _hx_tmp104 = (_hx_tmp103 + (t331 * B1->m35));
HXDLIN( 346)			this->m35 = (_hx_tmp104 + (t341 * B1->m45));
HXDLIN( 346)			Float t411 = this->m41;
HXDLIN( 346)			Float t421 = this->m42;
HXDLIN( 346)			Float t431 = this->m43;
HXDLIN( 346)			Float t441 = this->m44;
HXDLIN( 346)			Float _hx_tmp105 = (this->m41 * B1->m11);
HXDLIN( 346)			Float _hx_tmp106 = (_hx_tmp105 + (this->m42 * B1->m21));
HXDLIN( 346)			Float _hx_tmp107 = (_hx_tmp106 + (this->m43 * B1->m31));
HXDLIN( 346)			this->m41 = (_hx_tmp107 + (this->m44 * B1->m41));
HXDLIN( 346)			Float _hx_tmp108 = (t411 * B1->m12);
HXDLIN( 346)			Float _hx_tmp109 = (_hx_tmp108 + (this->m42 * B1->m22));
HXDLIN( 346)			Float _hx_tmp110 = (_hx_tmp109 + (this->m43 * B1->m32));
HXDLIN( 346)			this->m42 = (_hx_tmp110 + (this->m44 * B1->m42));
HXDLIN( 346)			Float _hx_tmp111 = (t411 * B1->m13);
HXDLIN( 346)			Float _hx_tmp112 = (_hx_tmp111 + (t421 * B1->m23));
HXDLIN( 346)			Float _hx_tmp113 = (_hx_tmp112 + (this->m43 * B1->m33));
HXDLIN( 346)			this->m43 = (_hx_tmp113 + (this->m44 * B1->m43));
HXDLIN( 346)			Float _hx_tmp114 = (t411 * B1->m14);
HXDLIN( 346)			Float _hx_tmp115 = (_hx_tmp114 + (t421 * B1->m24));
HXDLIN( 346)			Float _hx_tmp116 = (_hx_tmp115 + (t431 * B1->m34));
HXDLIN( 346)			this->m44 = (_hx_tmp116 + (this->m44 * B1->m44));
HXDLIN( 346)			Float _hx_tmp117 = (t411 * B1->m15);
HXDLIN( 346)			Float _hx_tmp118 = (_hx_tmp117 + (t421 * B1->m25));
HXDLIN( 346)			Float _hx_tmp119 = (_hx_tmp118 + (t431 * B1->m35));
HXDLIN( 346)			this->m45 = (_hx_tmp119 + (t441 * B1->m45));
            		}
HXLINE( 347)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,rotateHue,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::setChannels( ::Dynamic __o_r, ::Dynamic __o_g, ::Dynamic __o_b, ::Dynamic __o_a){
 ::Dynamic r = __o_r.Default(1);
 ::Dynamic g = __o_g.Default(2);
 ::Dynamic b = __o_b.Default(4);
 ::Dynamic a = __o_a.Default(8);
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_351_setChannels)
HXLINE( 352)		int t1;
HXDLIN( 352)		int t2;
HXDLIN( 352)		int t3;
HXDLIN( 352)		int t4;
HXLINE( 354)		if ((((int)r & (int)(int)1) == (int)1)) {
HXLINE( 354)			t1 = (int)1;
            		}
            		else {
HXLINE( 354)			t1 = (int)0;
            		}
HXLINE( 355)		if ((((int)r & (int)(int)2) == (int)2)) {
HXLINE( 355)			t2 = (int)1;
            		}
            		else {
HXLINE( 355)			t2 = (int)0;
            		}
HXLINE( 356)		if ((((int)r & (int)(int)4) == (int)4)) {
HXLINE( 356)			t3 = (int)1;
            		}
            		else {
HXLINE( 356)			t3 = (int)0;
            		}
HXLINE( 357)		if ((((int)r & (int)(int)8) == (int)8)) {
HXLINE( 357)			t4 = (int)1;
            		}
            		else {
HXLINE( 357)			t4 = (int)0;
            		}
HXLINE( 359)		Float rf = (((t1 + t2) + t3) + t4);
HXLINE( 360)		if ((rf > (int)0)) {
HXLINE( 360)			rf = ((Float)(int)1 / (Float)rf);
            		}
HXLINE( 362)		if ((((int)g & (int)(int)1) == (int)1)) {
HXLINE( 362)			t1 = (int)1;
            		}
            		else {
HXLINE( 362)			t1 = (int)0;
            		}
HXLINE( 363)		if ((((int)g & (int)(int)2) == (int)2)) {
HXLINE( 363)			t2 = (int)1;
            		}
            		else {
HXLINE( 363)			t2 = (int)0;
            		}
HXLINE( 364)		if ((((int)g & (int)(int)4) == (int)4)) {
HXLINE( 364)			t3 = (int)1;
            		}
            		else {
HXLINE( 364)			t3 = (int)0;
            		}
HXLINE( 365)		if ((((int)g & (int)(int)8) == (int)8)) {
HXLINE( 365)			t4 = (int)1;
            		}
            		else {
HXLINE( 365)			t4 = (int)0;
            		}
HXLINE( 367)		Float gf = (((t1 + t2) + t3) + t4);
HXLINE( 368)		if ((gf > (int)0)) {
HXLINE( 368)			gf = ((Float)(int)1 / (Float)gf);
            		}
HXLINE( 370)		if ((((int)b & (int)(int)1) == (int)1)) {
HXLINE( 370)			t1 = (int)1;
            		}
            		else {
HXLINE( 370)			t1 = (int)0;
            		}
HXLINE( 371)		if ((((int)b & (int)(int)2) == (int)2)) {
HXLINE( 371)			t2 = (int)1;
            		}
            		else {
HXLINE( 371)			t2 = (int)0;
            		}
HXLINE( 372)		if ((((int)b & (int)(int)4) == (int)4)) {
HXLINE( 372)			t3 = (int)1;
            		}
            		else {
HXLINE( 372)			t3 = (int)0;
            		}
HXLINE( 373)		if ((((int)b & (int)(int)8) == (int)8)) {
HXLINE( 373)			t4 = (int)1;
            		}
            		else {
HXLINE( 373)			t4 = (int)0;
            		}
HXLINE( 375)		Float bf = (((t1 + t2) + t3) + t4);
HXLINE( 376)		if ((bf > (int)0)) {
HXLINE( 376)			bf = ((Float)(int)1 / (Float)bf);
            		}
HXLINE( 378)		if ((((int)a & (int)(int)1) == (int)1)) {
HXLINE( 378)			t1 = (int)1;
            		}
            		else {
HXLINE( 378)			t1 = (int)0;
            		}
HXLINE( 379)		if ((((int)a & (int)(int)2) == (int)2)) {
HXLINE( 379)			t2 = (int)1;
            		}
            		else {
HXLINE( 379)			t2 = (int)0;
            		}
HXLINE( 380)		if ((((int)a & (int)(int)4) == (int)4)) {
HXLINE( 380)			t3 = (int)1;
            		}
            		else {
HXLINE( 380)			t3 = (int)0;
            		}
HXLINE( 381)		if ((((int)a & (int)(int)8) == (int)8)) {
HXLINE( 381)			t4 = (int)1;
            		}
            		else {
HXLINE( 381)			t4 = (int)0;
            		}
HXLINE( 383)		Float af = (((t1 + t2) + t3) + t4);
HXLINE( 384)		if ((af > (int)0)) {
HXLINE( 384)			af = ((Float)(int)1 / (Float)af);
            		}
HXLINE( 386)		{
HXLINE( 386)			Float i11;
HXLINE( 388)			if ((((int)r & (int)(int)1) == (int)1)) {
HXLINE( 386)				i11 = rf;
            			}
            			else {
HXLINE( 386)				i11 = (int)0;
            			}
HXDLIN( 386)			Float i12;
HXLINE( 388)			if ((((int)r & (int)(int)2) == (int)2)) {
HXLINE( 386)				i12 = rf;
            			}
            			else {
HXLINE( 386)				i12 = (int)0;
            			}
HXDLIN( 386)			Float i13;
HXLINE( 388)			if ((((int)r & (int)(int)4) == (int)4)) {
HXLINE( 386)				i13 = rf;
            			}
            			else {
HXLINE( 386)				i13 = (int)0;
            			}
HXDLIN( 386)			Float i14;
HXLINE( 388)			if ((((int)r & (int)(int)8) == (int)8)) {
HXLINE( 386)				i14 = rf;
            			}
            			else {
HXLINE( 386)				i14 = (int)0;
            			}
HXDLIN( 386)			Float i21;
HXLINE( 389)			if ((((int)g & (int)(int)1) == (int)1)) {
HXLINE( 386)				i21 = gf;
            			}
            			else {
HXLINE( 386)				i21 = (int)0;
            			}
HXDLIN( 386)			Float i22;
HXLINE( 389)			if ((((int)g & (int)(int)2) == (int)2)) {
HXLINE( 386)				i22 = gf;
            			}
            			else {
HXLINE( 386)				i22 = (int)0;
            			}
HXDLIN( 386)			Float i23;
HXLINE( 389)			if ((((int)g & (int)(int)4) == (int)4)) {
HXLINE( 386)				i23 = gf;
            			}
            			else {
HXLINE( 386)				i23 = (int)0;
            			}
HXDLIN( 386)			Float i24;
HXLINE( 389)			if ((((int)g & (int)(int)8) == (int)8)) {
HXLINE( 386)				i24 = gf;
            			}
            			else {
HXLINE( 386)				i24 = (int)0;
            			}
HXDLIN( 386)			Float i31;
HXLINE( 390)			if ((((int)b & (int)(int)1) == (int)1)) {
HXLINE( 386)				i31 = bf;
            			}
            			else {
HXLINE( 386)				i31 = (int)0;
            			}
HXDLIN( 386)			Float i32;
HXLINE( 390)			if ((((int)b & (int)(int)2) == (int)2)) {
HXLINE( 386)				i32 = bf;
            			}
            			else {
HXLINE( 386)				i32 = (int)0;
            			}
HXDLIN( 386)			Float i33;
HXLINE( 390)			if ((((int)b & (int)(int)4) == (int)4)) {
HXLINE( 386)				i33 = bf;
            			}
            			else {
HXLINE( 386)				i33 = (int)0;
            			}
HXDLIN( 386)			Float i34;
HXLINE( 390)			if ((((int)b & (int)(int)8) == (int)8)) {
HXLINE( 386)				i34 = bf;
            			}
            			else {
HXLINE( 386)				i34 = (int)0;
            			}
HXDLIN( 386)			Float i41;
HXLINE( 391)			if ((((int)a & (int)(int)1) == (int)1)) {
HXLINE( 386)				i41 = af;
            			}
            			else {
HXLINE( 386)				i41 = (int)0;
            			}
HXDLIN( 386)			Float i42;
HXLINE( 391)			if ((((int)a & (int)(int)2) == (int)2)) {
HXLINE( 386)				i42 = af;
            			}
            			else {
HXLINE( 386)				i42 = (int)0;
            			}
HXDLIN( 386)			Float i43;
HXLINE( 391)			if ((((int)a & (int)(int)4) == (int)4)) {
HXLINE( 386)				i43 = af;
            			}
            			else {
HXLINE( 386)				i43 = (int)0;
            			}
HXDLIN( 386)			Float i44;
HXLINE( 391)			if ((((int)a & (int)(int)8) == (int)8)) {
HXLINE( 386)				i44 = af;
            			}
            			else {
HXLINE( 386)				i44 = (int)0;
            			}
HXDLIN( 386)			Float t11 = this->m11;
HXDLIN( 386)			Float t12 = this->m12;
HXDLIN( 386)			Float t13 = this->m13;
HXDLIN( 386)			Float t14 = this->m14;
HXDLIN( 386)			Float _hx_tmp = (this->m11 * i11);
HXDLIN( 386)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * i21));
HXDLIN( 386)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * i31));
HXDLIN( 386)			this->m11 = (_hx_tmp2 + (this->m14 * i41));
HXDLIN( 386)			Float _hx_tmp3 = ((t11 * i12) + (this->m12 * i22));
HXDLIN( 386)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * i32));
HXDLIN( 386)			this->m12 = (_hx_tmp4 + (this->m14 * i42));
HXDLIN( 386)			Float _hx_tmp5 = (((t11 * i13) + (t12 * i23)) + (this->m13 * i33));
HXDLIN( 386)			this->m13 = (_hx_tmp5 + (this->m14 * i43));
HXDLIN( 386)			this->m14 = ((((t11 * i14) + (t12 * i24)) + (t13 * i34)) + (this->m14 * i44));
HXDLIN( 386)			this->m15 = ((((t11 * (int)0) + (t12 * (int)0)) + (t13 * (int)0)) + (t14 * (int)0));
HXDLIN( 386)			Float t21 = this->m21;
HXDLIN( 386)			Float t22 = this->m22;
HXDLIN( 386)			Float t23 = this->m23;
HXDLIN( 386)			Float t24 = this->m24;
HXDLIN( 386)			Float _hx_tmp6 = (this->m21 * i11);
HXDLIN( 386)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * i21));
HXDLIN( 386)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * i31));
HXDLIN( 386)			this->m21 = (_hx_tmp8 + (this->m24 * i41));
HXDLIN( 386)			Float _hx_tmp9 = ((t21 * i12) + (this->m22 * i22));
HXDLIN( 386)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * i32));
HXDLIN( 386)			this->m22 = (_hx_tmp10 + (this->m24 * i42));
HXDLIN( 386)			Float _hx_tmp11 = (((t21 * i13) + (t22 * i23)) + (this->m23 * i33));
HXDLIN( 386)			this->m23 = (_hx_tmp11 + (this->m24 * i43));
HXDLIN( 386)			this->m24 = ((((t21 * i14) + (t22 * i24)) + (t23 * i34)) + (this->m24 * i44));
HXDLIN( 386)			this->m25 = ((((t21 * (int)0) + (t22 * (int)0)) + (t23 * (int)0)) + (t24 * (int)0));
HXDLIN( 386)			Float t31 = this->m31;
HXDLIN( 386)			Float t32 = this->m32;
HXDLIN( 386)			Float t33 = this->m33;
HXDLIN( 386)			Float t34 = this->m34;
HXDLIN( 386)			Float _hx_tmp12 = (this->m31 * i11);
HXDLIN( 386)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * i21));
HXDLIN( 386)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * i31));
HXDLIN( 386)			this->m31 = (_hx_tmp14 + (this->m34 * i41));
HXDLIN( 386)			Float _hx_tmp15 = ((t31 * i12) + (this->m32 * i22));
HXDLIN( 386)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * i32));
HXDLIN( 386)			this->m32 = (_hx_tmp16 + (this->m34 * i42));
HXDLIN( 386)			Float _hx_tmp17 = (((t31 * i13) + (t32 * i23)) + (this->m33 * i33));
HXDLIN( 386)			this->m33 = (_hx_tmp17 + (this->m34 * i43));
HXDLIN( 386)			this->m34 = ((((t31 * i14) + (t32 * i24)) + (t33 * i34)) + (this->m34 * i44));
HXDLIN( 386)			this->m35 = ((((t31 * (int)0) + (t32 * (int)0)) + (t33 * (int)0)) + (t34 * (int)0));
HXDLIN( 386)			Float t41 = this->m41;
HXDLIN( 386)			Float t42 = this->m42;
HXDLIN( 386)			Float t43 = this->m43;
HXDLIN( 386)			Float t44 = this->m44;
HXDLIN( 386)			Float _hx_tmp18 = (this->m41 * i11);
HXDLIN( 386)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * i21));
HXDLIN( 386)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * i31));
HXDLIN( 386)			this->m41 = (_hx_tmp20 + (this->m44 * i41));
HXDLIN( 386)			Float _hx_tmp21 = ((t41 * i12) + (this->m42 * i22));
HXDLIN( 386)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * i32));
HXDLIN( 386)			this->m42 = (_hx_tmp22 + (this->m44 * i42));
HXDLIN( 386)			Float _hx_tmp23 = (((t41 * i13) + (t42 * i23)) + (this->m43 * i33));
HXDLIN( 386)			this->m43 = (_hx_tmp23 + (this->m44 * i43));
HXDLIN( 386)			this->m44 = ((((t41 * i14) + (t42 * i24)) + (t43 * i34)) + (this->m44 * i44));
HXDLIN( 386)			this->m45 = ((((t41 * (int)0) + (t42 * (int)0)) + (t43 * (int)0)) + (t44 * (int)0));
            		}
HXLINE( 393)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ColorMatrix_obj,setChannels,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::average( ::Dynamic __o_r, ::Dynamic __o_g, ::Dynamic __o_b){
 ::Dynamic r = __o_r.Default(((Float)0.33333333));
 ::Dynamic g = __o_g.Default(((Float)0.33333333));
 ::Dynamic b = __o_b.Default(((Float)0.33333333));
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_397_average)
HXLINE( 398)		{
HXLINE( 398)			Float i11 = r;
HXDLIN( 398)			Float i12 = g;
HXDLIN( 398)			Float i13 = b;
HXDLIN( 398)			Float i21 = r;
HXDLIN( 398)			Float i22 = g;
HXDLIN( 398)			Float i23 = b;
HXDLIN( 398)			Float i31 = r;
HXDLIN( 398)			Float i32 = g;
HXDLIN( 398)			Float i33 = b;
HXDLIN( 398)			Float t11 = this->m11;
HXDLIN( 398)			Float t12 = this->m12;
HXDLIN( 398)			Float t13 = this->m13;
HXDLIN( 398)			Float t14 = this->m14;
HXDLIN( 398)			Float _hx_tmp = (this->m11 * i11);
HXDLIN( 398)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * i21));
HXDLIN( 398)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * i31));
HXDLIN( 398)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 398)			Float _hx_tmp3 = ((t11 * i12) + (this->m12 * i22));
HXDLIN( 398)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * i32));
HXDLIN( 398)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 398)			Float _hx_tmp5 = (((t11 * i13) + (t12 * i23)) + (this->m13 * i33));
HXDLIN( 398)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 398)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + this->m14);
HXDLIN( 398)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * ((Float)0.0)));
HXDLIN( 398)			Float t21 = this->m21;
HXDLIN( 398)			Float t22 = this->m22;
HXDLIN( 398)			Float t23 = this->m23;
HXDLIN( 398)			Float t24 = this->m24;
HXDLIN( 398)			Float _hx_tmp6 = (this->m21 * i11);
HXDLIN( 398)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * i21));
HXDLIN( 398)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * i31));
HXDLIN( 398)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 398)			Float _hx_tmp9 = ((t21 * i12) + (this->m22 * i22));
HXDLIN( 398)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * i32));
HXDLIN( 398)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 398)			Float _hx_tmp11 = (((t21 * i13) + (t22 * i23)) + (this->m23 * i33));
HXDLIN( 398)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 398)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + this->m24);
HXDLIN( 398)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * ((Float)0.0)));
HXDLIN( 398)			Float t31 = this->m31;
HXDLIN( 398)			Float t32 = this->m32;
HXDLIN( 398)			Float t33 = this->m33;
HXDLIN( 398)			Float t34 = this->m34;
HXDLIN( 398)			Float _hx_tmp12 = (this->m31 * i11);
HXDLIN( 398)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * i21));
HXDLIN( 398)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * i31));
HXDLIN( 398)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 398)			Float _hx_tmp15 = ((t31 * i12) + (this->m32 * i22));
HXDLIN( 398)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * i32));
HXDLIN( 398)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 398)			Float _hx_tmp17 = (((t31 * i13) + (t32 * i23)) + (this->m33 * i33));
HXDLIN( 398)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 398)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + this->m34);
HXDLIN( 398)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * ((Float)0.0)));
HXDLIN( 398)			Float t41 = this->m41;
HXDLIN( 398)			Float t42 = this->m42;
HXDLIN( 398)			Float t43 = this->m43;
HXDLIN( 398)			Float t44 = this->m44;
HXDLIN( 398)			Float _hx_tmp18 = (this->m41 * i11);
HXDLIN( 398)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * i21));
HXDLIN( 398)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * i31));
HXDLIN( 398)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 398)			Float _hx_tmp21 = ((t41 * i12) + (this->m42 * i22));
HXDLIN( 398)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * i32));
HXDLIN( 398)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 398)			Float _hx_tmp23 = (((t41 * i13) + (t42 * i23)) + (this->m43 * i33));
HXDLIN( 398)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 398)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + this->m44);
HXDLIN( 398)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 405)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ColorMatrix_obj,average,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::threshold(Float threshold, ::Dynamic __o_factor){
 ::Dynamic factor = __o_factor.Default(((Float)256.));
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_409_threshold)
HXLINE( 410)		{
HXLINE( 410)			Float i11 = (::com::stencyl::utils::ColorMatrix_obj::LUMA_R * factor);
HXDLIN( 410)			Float i12 = (::com::stencyl::utils::ColorMatrix_obj::LUMA_G * factor);
HXDLIN( 410)			Float i13 = (::com::stencyl::utils::ColorMatrix_obj::LUMA_B * factor);
HXDLIN( 410)			Float i15 = (-(factor) * threshold);
HXDLIN( 410)			Float i21 = (::com::stencyl::utils::ColorMatrix_obj::LUMA_R * factor);
HXDLIN( 410)			Float i22 = (::com::stencyl::utils::ColorMatrix_obj::LUMA_G * factor);
HXDLIN( 410)			Float i23 = (::com::stencyl::utils::ColorMatrix_obj::LUMA_B * factor);
HXDLIN( 410)			Float i25 = (-(factor) * threshold);
HXDLIN( 410)			Float i31 = (::com::stencyl::utils::ColorMatrix_obj::LUMA_R * factor);
HXDLIN( 410)			Float i32 = (::com::stencyl::utils::ColorMatrix_obj::LUMA_G * factor);
HXDLIN( 410)			Float i33 = (::com::stencyl::utils::ColorMatrix_obj::LUMA_B * factor);
HXDLIN( 410)			Float i35 = (-(factor) * threshold);
HXDLIN( 410)			Float t11 = this->m11;
HXDLIN( 410)			Float t12 = this->m12;
HXDLIN( 410)			Float t13 = this->m13;
HXDLIN( 410)			Float t14 = this->m14;
HXDLIN( 410)			Float _hx_tmp = (this->m11 * i11);
HXDLIN( 410)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * i21));
HXDLIN( 410)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * i31));
HXDLIN( 410)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 410)			Float _hx_tmp3 = ((t11 * i12) + (this->m12 * i22));
HXDLIN( 410)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * i32));
HXDLIN( 410)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 410)			Float _hx_tmp5 = (((t11 * i13) + (t12 * i23)) + (this->m13 * i33));
HXDLIN( 410)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 410)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + this->m14);
HXDLIN( 410)			this->m15 = ((((t11 * i15) + (t12 * i25)) + (t13 * i35)) + (t14 * ((Float)0.0)));
HXDLIN( 410)			Float t21 = this->m21;
HXDLIN( 410)			Float t22 = this->m22;
HXDLIN( 410)			Float t23 = this->m23;
HXDLIN( 410)			Float t24 = this->m24;
HXDLIN( 410)			Float _hx_tmp6 = (this->m21 * i11);
HXDLIN( 410)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * i21));
HXDLIN( 410)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * i31));
HXDLIN( 410)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 410)			Float _hx_tmp9 = ((t21 * i12) + (this->m22 * i22));
HXDLIN( 410)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * i32));
HXDLIN( 410)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 410)			Float _hx_tmp11 = (((t21 * i13) + (t22 * i23)) + (this->m23 * i33));
HXDLIN( 410)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 410)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + this->m24);
HXDLIN( 410)			this->m25 = ((((t21 * i15) + (t22 * i25)) + (t23 * i35)) + (t24 * ((Float)0.0)));
HXDLIN( 410)			Float t31 = this->m31;
HXDLIN( 410)			Float t32 = this->m32;
HXDLIN( 410)			Float t33 = this->m33;
HXDLIN( 410)			Float t34 = this->m34;
HXDLIN( 410)			Float _hx_tmp12 = (this->m31 * i11);
HXDLIN( 410)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * i21));
HXDLIN( 410)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * i31));
HXDLIN( 410)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 410)			Float _hx_tmp15 = ((t31 * i12) + (this->m32 * i22));
HXDLIN( 410)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * i32));
HXDLIN( 410)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 410)			Float _hx_tmp17 = (((t31 * i13) + (t32 * i23)) + (this->m33 * i33));
HXDLIN( 410)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 410)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + this->m34);
HXDLIN( 410)			this->m35 = ((((t31 * i15) + (t32 * i25)) + (t33 * i35)) + (t34 * ((Float)0.0)));
HXDLIN( 410)			Float t41 = this->m41;
HXDLIN( 410)			Float t42 = this->m42;
HXDLIN( 410)			Float t43 = this->m43;
HXDLIN( 410)			Float t44 = this->m44;
HXDLIN( 410)			Float _hx_tmp18 = (this->m41 * i11);
HXDLIN( 410)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * i21));
HXDLIN( 410)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * i31));
HXDLIN( 410)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 410)			Float _hx_tmp21 = ((t41 * i12) + (this->m42 * i22));
HXDLIN( 410)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * i32));
HXDLIN( 410)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 410)			Float _hx_tmp23 = (((t41 * i13) + (t42 * i23)) + (this->m43 * i33));
HXDLIN( 410)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 410)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + this->m44);
HXDLIN( 410)			this->m45 = ((((t41 * i15) + (t42 * i25)) + (t43 * i35)) + (t44 * ((Float)0.0)));
            		}
HXLINE( 417)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_obj,threshold,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::desaturate(){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_421_desaturate)
HXLINE( 422)		{
HXLINE( 422)			Float i11 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_R;
HXDLIN( 422)			Float i12 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_G;
HXDLIN( 422)			Float i13 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_B;
HXDLIN( 422)			Float i21 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_R;
HXDLIN( 422)			Float i22 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_G;
HXDLIN( 422)			Float i23 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_B;
HXDLIN( 422)			Float i31 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_R;
HXDLIN( 422)			Float i32 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_G;
HXDLIN( 422)			Float i33 = ::com::stencyl::utils::ColorMatrix_obj::LUMA_B;
HXDLIN( 422)			Float t11 = this->m11;
HXDLIN( 422)			Float t12 = this->m12;
HXDLIN( 422)			Float t13 = this->m13;
HXDLIN( 422)			Float t14 = this->m14;
HXDLIN( 422)			Float _hx_tmp = (this->m11 * i11);
HXDLIN( 422)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * i21));
HXDLIN( 422)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * i31));
HXDLIN( 422)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 422)			Float _hx_tmp3 = ((t11 * i12) + (this->m12 * i22));
HXDLIN( 422)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * i32));
HXDLIN( 422)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 422)			Float _hx_tmp5 = (((t11 * i13) + (t12 * i23)) + (this->m13 * i33));
HXDLIN( 422)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 422)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + this->m14);
HXDLIN( 422)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * ((Float)0.0)));
HXDLIN( 422)			Float t21 = this->m21;
HXDLIN( 422)			Float t22 = this->m22;
HXDLIN( 422)			Float t23 = this->m23;
HXDLIN( 422)			Float t24 = this->m24;
HXDLIN( 422)			Float _hx_tmp6 = (this->m21 * i11);
HXDLIN( 422)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * i21));
HXDLIN( 422)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * i31));
HXDLIN( 422)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 422)			Float _hx_tmp9 = ((t21 * i12) + (this->m22 * i22));
HXDLIN( 422)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * i32));
HXDLIN( 422)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 422)			Float _hx_tmp11 = (((t21 * i13) + (t22 * i23)) + (this->m23 * i33));
HXDLIN( 422)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 422)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + this->m24);
HXDLIN( 422)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * ((Float)0.0)));
HXDLIN( 422)			Float t31 = this->m31;
HXDLIN( 422)			Float t32 = this->m32;
HXDLIN( 422)			Float t33 = this->m33;
HXDLIN( 422)			Float t34 = this->m34;
HXDLIN( 422)			Float _hx_tmp12 = (this->m31 * i11);
HXDLIN( 422)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * i21));
HXDLIN( 422)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * i31));
HXDLIN( 422)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 422)			Float _hx_tmp15 = ((t31 * i12) + (this->m32 * i22));
HXDLIN( 422)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * i32));
HXDLIN( 422)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 422)			Float _hx_tmp17 = (((t31 * i13) + (t32 * i23)) + (this->m33 * i33));
HXDLIN( 422)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 422)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + this->m34);
HXDLIN( 422)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * ((Float)0.0)));
HXDLIN( 422)			Float t41 = this->m41;
HXDLIN( 422)			Float t42 = this->m42;
HXDLIN( 422)			Float t43 = this->m43;
HXDLIN( 422)			Float t44 = this->m44;
HXDLIN( 422)			Float _hx_tmp18 = (this->m41 * i11);
HXDLIN( 422)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * i21));
HXDLIN( 422)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * i31));
HXDLIN( 422)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 422)			Float _hx_tmp21 = ((t41 * i12) + (this->m42 * i22));
HXDLIN( 422)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * i32));
HXDLIN( 422)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 422)			Float _hx_tmp23 = (((t41 * i13) + (t42 * i23)) + (this->m43 * i33));
HXDLIN( 422)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 422)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + this->m44);
HXDLIN( 422)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 429)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorMatrix_obj,desaturate,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::setMultiplicators( ::Dynamic __o_red, ::Dynamic __o_green, ::Dynamic __o_blue, ::Dynamic __o_alpha){
 ::Dynamic red = __o_red.Default(((Float)1.));
 ::Dynamic green = __o_green.Default(((Float)1.));
 ::Dynamic blue = __o_blue.Default(((Float)1.));
 ::Dynamic alpha = __o_alpha.Default(((Float)1.));
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_433_setMultiplicators)
HXLINE( 434)		{
HXLINE( 434)			Float i11 = red;
HXDLIN( 434)			Float i22 = green;
HXDLIN( 434)			Float i33 = blue;
HXDLIN( 434)			Float i44 = alpha;
HXDLIN( 434)			Float t11 = this->m11;
HXDLIN( 434)			Float t12 = this->m12;
HXDLIN( 434)			Float t13 = this->m13;
HXDLIN( 434)			Float t14 = this->m14;
HXDLIN( 434)			Float _hx_tmp = (this->m11 * i11);
HXDLIN( 434)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 434)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + (this->m12 * i22));
HXDLIN( 434)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 434)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (this->m13 * i33));
HXDLIN( 434)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 434)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (this->m14 * i44));
HXDLIN( 434)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * ((Float)0.0)));
HXDLIN( 434)			Float t21 = this->m21;
HXDLIN( 434)			Float t22 = this->m22;
HXDLIN( 434)			Float t23 = this->m23;
HXDLIN( 434)			Float t24 = this->m24;
HXDLIN( 434)			Float _hx_tmp6 = (this->m21 * i11);
HXDLIN( 434)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 434)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + (this->m22 * i22));
HXDLIN( 434)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 434)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (this->m23 * i33));
HXDLIN( 434)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 434)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (this->m24 * i44));
HXDLIN( 434)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * ((Float)0.0)));
HXDLIN( 434)			Float t31 = this->m31;
HXDLIN( 434)			Float t32 = this->m32;
HXDLIN( 434)			Float t33 = this->m33;
HXDLIN( 434)			Float t34 = this->m34;
HXDLIN( 434)			Float _hx_tmp12 = (this->m31 * i11);
HXDLIN( 434)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 434)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + (this->m32 * i22));
HXDLIN( 434)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 434)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (this->m33 * i33));
HXDLIN( 434)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 434)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (this->m34 * i44));
HXDLIN( 434)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * ((Float)0.0)));
HXDLIN( 434)			Float t41 = this->m41;
HXDLIN( 434)			Float t42 = this->m42;
HXDLIN( 434)			Float t43 = this->m43;
HXDLIN( 434)			Float t44 = this->m44;
HXDLIN( 434)			Float _hx_tmp18 = (this->m41 * i11);
HXDLIN( 434)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 434)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + (this->m42 * i22));
HXDLIN( 434)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 434)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 434)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (this->m43 * i33));
HXDLIN( 434)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 434)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (this->m44 * i44));
HXDLIN( 434)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 441)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ColorMatrix_obj,setMultiplicators,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::clearChannels( ::Dynamic __o_red, ::Dynamic __o_green, ::Dynamic __o_blue, ::Dynamic __o_alpha){
 ::Dynamic red = __o_red.Default(false);
 ::Dynamic green = __o_green.Default(false);
 ::Dynamic blue = __o_blue.Default(false);
 ::Dynamic alpha = __o_alpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_445_clearChannels)
HXLINE( 446)		if (red) {
HXLINE( 448)			this->m11 = (this->m12 = (this->m13 = (this->m14 = (this->m15 = ((Float)0.0)))));
            		}
HXLINE( 450)		if (green) {
HXLINE( 452)			this->m21 = (this->m22 = (this->m23 = (this->m24 = (this->m25 = ((Float)0.0)))));
            		}
HXLINE( 454)		if (blue) {
HXLINE( 456)			this->m31 = (this->m32 = (this->m33 = (this->m34 = (this->m35 = ((Float)0.0)))));
            		}
HXLINE( 458)		if (alpha) {
HXLINE( 460)			this->m41 = (this->m42 = (this->m43 = (this->m44 = (this->m45 = ((Float)0.0)))));
            		}
HXLINE( 462)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ColorMatrix_obj,clearChannels,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::thresholdAlpha(Float threshold, ::Dynamic __o_factor){
 ::Dynamic factor = __o_factor.Default(((Float)256.));
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_466_thresholdAlpha)
HXLINE( 467)		{
HXLINE( 467)			Float i44 = factor;
HXDLIN( 467)			Float i45 = (-(factor) * threshold);
HXDLIN( 467)			Float t11 = this->m11;
HXDLIN( 467)			Float t12 = this->m12;
HXDLIN( 467)			Float t13 = this->m13;
HXDLIN( 467)			Float t14 = this->m14;
HXDLIN( 467)			Float _hx_tmp = this->m11;
HXDLIN( 467)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 467)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + this->m12);
HXDLIN( 467)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 467)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + this->m13);
HXDLIN( 467)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 467)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (this->m14 * i44));
HXDLIN( 467)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * i45));
HXDLIN( 467)			Float t21 = this->m21;
HXDLIN( 467)			Float t22 = this->m22;
HXDLIN( 467)			Float t23 = this->m23;
HXDLIN( 467)			Float t24 = this->m24;
HXDLIN( 467)			Float _hx_tmp6 = this->m21;
HXDLIN( 467)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 467)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + this->m22);
HXDLIN( 467)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 467)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + this->m23);
HXDLIN( 467)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 467)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (this->m24 * i44));
HXDLIN( 467)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * i45));
HXDLIN( 467)			Float t31 = this->m31;
HXDLIN( 467)			Float t32 = this->m32;
HXDLIN( 467)			Float t33 = this->m33;
HXDLIN( 467)			Float t34 = this->m34;
HXDLIN( 467)			Float _hx_tmp12 = this->m31;
HXDLIN( 467)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 467)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + this->m32);
HXDLIN( 467)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 467)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + this->m33);
HXDLIN( 467)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 467)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (this->m34 * i44));
HXDLIN( 467)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * i45));
HXDLIN( 467)			Float t41 = this->m41;
HXDLIN( 467)			Float t42 = this->m42;
HXDLIN( 467)			Float t43 = this->m43;
HXDLIN( 467)			Float t44 = this->m44;
HXDLIN( 467)			Float _hx_tmp18 = this->m41;
HXDLIN( 467)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 467)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + this->m42);
HXDLIN( 467)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 467)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 467)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + this->m43);
HXDLIN( 467)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 467)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (this->m44 * i44));
HXDLIN( 467)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * i45));
            		}
HXLINE( 474)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_obj,thresholdAlpha,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::averageRGB2Alpha(){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_478_averageRGB2Alpha)
HXLINE( 479)		{
HXLINE( 479)			Float i41 = ::com::stencyl::utils::ColorMatrix_obj::INV3;
HXDLIN( 479)			Float i42 = ::com::stencyl::utils::ColorMatrix_obj::INV3;
HXDLIN( 479)			Float i43 = ::com::stencyl::utils::ColorMatrix_obj::INV3;
HXDLIN( 479)			Float t11 = this->m11;
HXDLIN( 479)			Float t12 = this->m12;
HXDLIN( 479)			Float t13 = this->m13;
HXDLIN( 479)			Float t14 = this->m14;
HXDLIN( 479)			Float _hx_tmp = (this->m11 * ((Float)0.0));
HXDLIN( 479)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 479)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 479)			this->m11 = (_hx_tmp2 + (this->m14 * i41));
HXDLIN( 479)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + (this->m12 * ((Float)0.0)));
HXDLIN( 479)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 479)			this->m12 = (_hx_tmp4 + (this->m14 * i42));
HXDLIN( 479)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (this->m13 * ((Float)0.0)));
HXDLIN( 479)			this->m13 = (_hx_tmp5 + (this->m14 * i43));
HXDLIN( 479)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (this->m14 * ((Float)0.0)));
HXDLIN( 479)			this->m15 = ((((t11 * ((Float)255.0)) + (t12 * ((Float)255.0))) + (t13 * ((Float)255.0))) + (t14 * ((Float)0.0)));
HXDLIN( 479)			Float t21 = this->m21;
HXDLIN( 479)			Float t22 = this->m22;
HXDLIN( 479)			Float t23 = this->m23;
HXDLIN( 479)			Float t24 = this->m24;
HXDLIN( 479)			Float _hx_tmp6 = (this->m21 * ((Float)0.0));
HXDLIN( 479)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 479)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 479)			this->m21 = (_hx_tmp8 + (this->m24 * i41));
HXDLIN( 479)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + (this->m22 * ((Float)0.0)));
HXDLIN( 479)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 479)			this->m22 = (_hx_tmp10 + (this->m24 * i42));
HXDLIN( 479)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (this->m23 * ((Float)0.0)));
HXDLIN( 479)			this->m23 = (_hx_tmp11 + (this->m24 * i43));
HXDLIN( 479)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (this->m24 * ((Float)0.0)));
HXDLIN( 479)			this->m25 = ((((t21 * ((Float)255.0)) + (t22 * ((Float)255.0))) + (t23 * ((Float)255.0))) + (t24 * ((Float)0.0)));
HXDLIN( 479)			Float t31 = this->m31;
HXDLIN( 479)			Float t32 = this->m32;
HXDLIN( 479)			Float t33 = this->m33;
HXDLIN( 479)			Float t34 = this->m34;
HXDLIN( 479)			Float _hx_tmp12 = (this->m31 * ((Float)0.0));
HXDLIN( 479)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 479)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 479)			this->m31 = (_hx_tmp14 + (this->m34 * i41));
HXDLIN( 479)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + (this->m32 * ((Float)0.0)));
HXDLIN( 479)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 479)			this->m32 = (_hx_tmp16 + (this->m34 * i42));
HXDLIN( 479)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (this->m33 * ((Float)0.0)));
HXDLIN( 479)			this->m33 = (_hx_tmp17 + (this->m34 * i43));
HXDLIN( 479)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (this->m34 * ((Float)0.0)));
HXDLIN( 479)			this->m35 = ((((t31 * ((Float)255.0)) + (t32 * ((Float)255.0))) + (t33 * ((Float)255.0))) + (t34 * ((Float)0.0)));
HXDLIN( 479)			Float t41 = this->m41;
HXDLIN( 479)			Float t42 = this->m42;
HXDLIN( 479)			Float t43 = this->m43;
HXDLIN( 479)			Float t44 = this->m44;
HXDLIN( 479)			Float _hx_tmp18 = (this->m41 * ((Float)0.0));
HXDLIN( 479)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 479)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 479)			this->m41 = (_hx_tmp20 + (this->m44 * i41));
HXDLIN( 479)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + (this->m42 * ((Float)0.0)));
HXDLIN( 479)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 479)			this->m42 = (_hx_tmp22 + (this->m44 * i42));
HXDLIN( 479)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (this->m43 * ((Float)0.0)));
HXDLIN( 479)			this->m43 = (_hx_tmp23 + (this->m44 * i43));
HXDLIN( 479)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (this->m44 * ((Float)0.0)));
HXDLIN( 479)			this->m45 = ((((t41 * ((Float)255.0)) + (t42 * ((Float)255.0))) + (t43 * ((Float)255.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 486)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorMatrix_obj,averageRGB2Alpha,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::invertAlpha(){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_490_invertAlpha)
HXLINE( 491)		{
HXLINE( 491)			Float t11 = this->m11;
HXDLIN( 491)			Float t12 = this->m12;
HXDLIN( 491)			Float t13 = this->m13;
HXDLIN( 491)			Float t14 = this->m14;
HXDLIN( 491)			Float _hx_tmp = this->m11;
HXDLIN( 491)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 491)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + this->m12);
HXDLIN( 491)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 491)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + this->m13);
HXDLIN( 491)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 491)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (this->m14 * ((Float)-1.0)));
HXDLIN( 491)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * ((Float)255.0)));
HXDLIN( 491)			Float t21 = this->m21;
HXDLIN( 491)			Float t22 = this->m22;
HXDLIN( 491)			Float t23 = this->m23;
HXDLIN( 491)			Float t24 = this->m24;
HXDLIN( 491)			Float _hx_tmp6 = this->m21;
HXDLIN( 491)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 491)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + this->m22);
HXDLIN( 491)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 491)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + this->m23);
HXDLIN( 491)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 491)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (this->m24 * ((Float)-1.0)));
HXDLIN( 491)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * ((Float)255.0)));
HXDLIN( 491)			Float t31 = this->m31;
HXDLIN( 491)			Float t32 = this->m32;
HXDLIN( 491)			Float t33 = this->m33;
HXDLIN( 491)			Float t34 = this->m34;
HXDLIN( 491)			Float _hx_tmp12 = this->m31;
HXDLIN( 491)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 491)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + this->m32);
HXDLIN( 491)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 491)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + this->m33);
HXDLIN( 491)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 491)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (this->m34 * ((Float)-1.0)));
HXDLIN( 491)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * ((Float)255.0)));
HXDLIN( 491)			Float t41 = this->m41;
HXDLIN( 491)			Float t42 = this->m42;
HXDLIN( 491)			Float t43 = this->m43;
HXDLIN( 491)			Float t44 = this->m44;
HXDLIN( 491)			Float _hx_tmp18 = this->m41;
HXDLIN( 491)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 491)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + this->m42);
HXDLIN( 491)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 491)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 491)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + this->m43);
HXDLIN( 491)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 491)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (this->m44 * ((Float)-1.0)));
HXDLIN( 491)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * ((Float)255.0)));
            		}
HXLINE( 498)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorMatrix_obj,invertAlpha,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::rgb2Alpha(Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_502_rgb2Alpha)
HXLINE( 503)		{
HXLINE( 503)			Float t11 = this->m11;
HXDLIN( 503)			Float t12 = this->m12;
HXDLIN( 503)			Float t13 = this->m13;
HXDLIN( 503)			Float t14 = this->m14;
HXDLIN( 503)			Float _hx_tmp = (this->m11 * ((Float)0.0));
HXDLIN( 503)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 503)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 503)			this->m11 = (_hx_tmp2 + (this->m14 * r));
HXDLIN( 503)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + (this->m12 * ((Float)0.0)));
HXDLIN( 503)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 503)			this->m12 = (_hx_tmp4 + (this->m14 * g));
HXDLIN( 503)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (this->m13 * ((Float)0.0)));
HXDLIN( 503)			this->m13 = (_hx_tmp5 + (this->m14 * b));
HXDLIN( 503)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (this->m14 * ((Float)0.0)));
HXDLIN( 503)			this->m15 = ((((t11 * ((Float)255.0)) + (t12 * ((Float)255.0))) + (t13 * ((Float)255.0))) + (t14 * ((Float)0.0)));
HXDLIN( 503)			Float t21 = this->m21;
HXDLIN( 503)			Float t22 = this->m22;
HXDLIN( 503)			Float t23 = this->m23;
HXDLIN( 503)			Float t24 = this->m24;
HXDLIN( 503)			Float _hx_tmp6 = (this->m21 * ((Float)0.0));
HXDLIN( 503)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 503)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 503)			this->m21 = (_hx_tmp8 + (this->m24 * r));
HXDLIN( 503)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + (this->m22 * ((Float)0.0)));
HXDLIN( 503)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 503)			this->m22 = (_hx_tmp10 + (this->m24 * g));
HXDLIN( 503)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (this->m23 * ((Float)0.0)));
HXDLIN( 503)			this->m23 = (_hx_tmp11 + (this->m24 * b));
HXDLIN( 503)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (this->m24 * ((Float)0.0)));
HXDLIN( 503)			this->m25 = ((((t21 * ((Float)255.0)) + (t22 * ((Float)255.0))) + (t23 * ((Float)255.0))) + (t24 * ((Float)0.0)));
HXDLIN( 503)			Float t31 = this->m31;
HXDLIN( 503)			Float t32 = this->m32;
HXDLIN( 503)			Float t33 = this->m33;
HXDLIN( 503)			Float t34 = this->m34;
HXDLIN( 503)			Float _hx_tmp12 = (this->m31 * ((Float)0.0));
HXDLIN( 503)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 503)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 503)			this->m31 = (_hx_tmp14 + (this->m34 * r));
HXDLIN( 503)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + (this->m32 * ((Float)0.0)));
HXDLIN( 503)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 503)			this->m32 = (_hx_tmp16 + (this->m34 * g));
HXDLIN( 503)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (this->m33 * ((Float)0.0)));
HXDLIN( 503)			this->m33 = (_hx_tmp17 + (this->m34 * b));
HXDLIN( 503)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (this->m34 * ((Float)0.0)));
HXDLIN( 503)			this->m35 = ((((t31 * ((Float)255.0)) + (t32 * ((Float)255.0))) + (t33 * ((Float)255.0))) + (t34 * ((Float)0.0)));
HXDLIN( 503)			Float t41 = this->m41;
HXDLIN( 503)			Float t42 = this->m42;
HXDLIN( 503)			Float t43 = this->m43;
HXDLIN( 503)			Float t44 = this->m44;
HXDLIN( 503)			Float _hx_tmp18 = (this->m41 * ((Float)0.0));
HXDLIN( 503)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 503)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 503)			this->m41 = (_hx_tmp20 + (this->m44 * r));
HXDLIN( 503)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + (this->m42 * ((Float)0.0)));
HXDLIN( 503)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 503)			this->m42 = (_hx_tmp22 + (this->m44 * g));
HXDLIN( 503)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (this->m43 * ((Float)0.0)));
HXDLIN( 503)			this->m43 = (_hx_tmp23 + (this->m44 * b));
HXDLIN( 503)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (this->m44 * ((Float)0.0)));
HXDLIN( 503)			this->m45 = ((((t41 * ((Float)255.0)) + (t42 * ((Float)255.0))) + (t43 * ((Float)255.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 509)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ColorMatrix_obj,rgb2Alpha,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::setAlpha(Float alpha){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_513_setAlpha)
HXLINE( 514)		{
HXLINE( 514)			Float t11 = this->m11;
HXDLIN( 514)			Float t12 = this->m12;
HXDLIN( 514)			Float t13 = this->m13;
HXDLIN( 514)			Float t14 = this->m14;
HXDLIN( 514)			Float _hx_tmp = this->m11;
HXDLIN( 514)			Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * ((Float)0.0)));
HXDLIN( 514)			this->m11 = (_hx_tmp2 + (this->m14 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp3 = ((t11 * ((Float)0.0)) + this->m12);
HXDLIN( 514)			Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.0)));
HXDLIN( 514)			this->m12 = (_hx_tmp4 + (this->m14 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp5 = (((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + this->m13);
HXDLIN( 514)			this->m13 = (_hx_tmp5 + (this->m14 * ((Float)0.0)));
HXDLIN( 514)			this->m14 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (this->m14 * alpha));
HXDLIN( 514)			this->m15 = ((((t11 * ((Float)0.0)) + (t12 * ((Float)0.0))) + (t13 * ((Float)0.0))) + (t14 * ((Float)0.0)));
HXDLIN( 514)			Float t21 = this->m21;
HXDLIN( 514)			Float t22 = this->m22;
HXDLIN( 514)			Float t23 = this->m23;
HXDLIN( 514)			Float t24 = this->m24;
HXDLIN( 514)			Float _hx_tmp6 = this->m21;
HXDLIN( 514)			Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * ((Float)0.0)));
HXDLIN( 514)			this->m21 = (_hx_tmp8 + (this->m24 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp9 = ((t21 * ((Float)0.0)) + this->m22);
HXDLIN( 514)			Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.0)));
HXDLIN( 514)			this->m22 = (_hx_tmp10 + (this->m24 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp11 = (((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + this->m23);
HXDLIN( 514)			this->m23 = (_hx_tmp11 + (this->m24 * ((Float)0.0)));
HXDLIN( 514)			this->m24 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (this->m24 * alpha));
HXDLIN( 514)			this->m25 = ((((t21 * ((Float)0.0)) + (t22 * ((Float)0.0))) + (t23 * ((Float)0.0))) + (t24 * ((Float)0.0)));
HXDLIN( 514)			Float t31 = this->m31;
HXDLIN( 514)			Float t32 = this->m32;
HXDLIN( 514)			Float t33 = this->m33;
HXDLIN( 514)			Float t34 = this->m34;
HXDLIN( 514)			Float _hx_tmp12 = this->m31;
HXDLIN( 514)			Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * ((Float)0.0)));
HXDLIN( 514)			this->m31 = (_hx_tmp14 + (this->m34 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp15 = ((t31 * ((Float)0.0)) + this->m32);
HXDLIN( 514)			Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.0)));
HXDLIN( 514)			this->m32 = (_hx_tmp16 + (this->m34 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp17 = (((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + this->m33);
HXDLIN( 514)			this->m33 = (_hx_tmp17 + (this->m34 * ((Float)0.0)));
HXDLIN( 514)			this->m34 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (this->m34 * alpha));
HXDLIN( 514)			this->m35 = ((((t31 * ((Float)0.0)) + (t32 * ((Float)0.0))) + (t33 * ((Float)0.0))) + (t34 * ((Float)0.0)));
HXDLIN( 514)			Float t41 = this->m41;
HXDLIN( 514)			Float t42 = this->m42;
HXDLIN( 514)			Float t43 = this->m43;
HXDLIN( 514)			Float t44 = this->m44;
HXDLIN( 514)			Float _hx_tmp18 = this->m41;
HXDLIN( 514)			Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * ((Float)0.0)));
HXDLIN( 514)			this->m41 = (_hx_tmp20 + (this->m44 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp21 = ((t41 * ((Float)0.0)) + this->m42);
HXDLIN( 514)			Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.0)));
HXDLIN( 514)			this->m42 = (_hx_tmp22 + (this->m44 * ((Float)0.0)));
HXDLIN( 514)			Float _hx_tmp23 = (((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + this->m43);
HXDLIN( 514)			this->m43 = (_hx_tmp23 + (this->m44 * ((Float)0.0)));
HXDLIN( 514)			this->m44 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (this->m44 * alpha));
HXDLIN( 514)			this->m45 = ((((t41 * ((Float)0.0)) + (t42 * ((Float)0.0))) + (t43 * ((Float)0.0))) + (t44 * ((Float)0.0)));
            		}
HXLINE( 521)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,setAlpha,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::rotateRed(Float angle){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_525_rotateRed)
HXLINE( 526)		angle = (angle * ((Float)0.017453292519942779));
HXLINE( 527)		Float c = ::Math_obj::cos(angle);
HXLINE( 528)		Float s = ::Math_obj::cos(angle);
HXLINE( 530)		{
HXLINE( 530)			this->m11 = ((Float)1.0);
HXDLIN( 530)			this->m12 = ((Float)0.0);
HXDLIN( 530)			this->m13 = ((Float)0.0);
HXDLIN( 530)			this->m14 = ((Float)0.0);
HXDLIN( 530)			this->m15 = ((Float)0.0);
HXDLIN( 530)			this->m21 = ((Float)0.0);
HXDLIN( 530)			this->m22 = c;
HXDLIN( 530)			this->m23 = -(s);
HXDLIN( 530)			this->m24 = ((Float)0.0);
HXDLIN( 530)			this->m25 = ((Float)0.0);
HXDLIN( 530)			this->m31 = ((Float)0.0);
HXDLIN( 530)			this->m32 = s;
HXDLIN( 530)			this->m33 = c;
HXDLIN( 530)			this->m34 = ((Float)0.0);
HXDLIN( 530)			this->m35 = ((Float)0.0);
HXDLIN( 530)			this->m41 = ((Float)0.0);
HXDLIN( 530)			this->m42 = ((Float)0.0);
HXDLIN( 530)			this->m43 = ((Float)0.0);
HXDLIN( 530)			this->m44 = ((Float)1.0);
HXDLIN( 530)			this->m45 = ((Float)0.0);
            		}
HXLINE( 537)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,rotateRed,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::rotateGreen(Float angle){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_541_rotateGreen)
HXLINE( 542)		angle = (angle * ((Float)0.017453292519942779));
HXLINE( 543)		Float c = ::Math_obj::cos(angle);
HXLINE( 544)		Float s = ::Math_obj::cos(angle);
HXLINE( 546)		{
HXLINE( 546)			this->m11 = c;
HXDLIN( 546)			this->m12 = ((Float)0.0);
HXDLIN( 546)			this->m13 = s;
HXDLIN( 546)			this->m14 = ((Float)0.0);
HXDLIN( 546)			this->m15 = ((Float)0.0);
HXDLIN( 546)			this->m21 = ((Float)0.0);
HXDLIN( 546)			this->m22 = ((Float)1.0);
HXDLIN( 546)			this->m23 = ((Float)0.0);
HXDLIN( 546)			this->m24 = ((Float)0.0);
HXDLIN( 546)			this->m25 = ((Float)0.0);
HXDLIN( 546)			this->m31 = -(s);
HXDLIN( 546)			this->m32 = ((Float)0.0);
HXDLIN( 546)			this->m33 = c;
HXDLIN( 546)			this->m34 = ((Float)0.0);
HXDLIN( 546)			this->m35 = ((Float)0.0);
HXDLIN( 546)			this->m41 = ((Float)0.0);
HXDLIN( 546)			this->m42 = ((Float)0.0);
HXDLIN( 546)			this->m43 = ((Float)0.0);
HXDLIN( 546)			this->m44 = ((Float)1.0);
HXDLIN( 546)			this->m45 = ((Float)0.0);
            		}
HXLINE( 553)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,rotateGreen,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::rotateBlue(Float angle){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_557_rotateBlue)
HXLINE( 558)		angle = (angle * ((Float)0.017453292519942779));
HXLINE( 559)		Float c = ::Math_obj::cos(angle);
HXLINE( 560)		Float s = ::Math_obj::cos(angle);
HXLINE( 562)		{
HXLINE( 562)			this->m11 = c;
HXDLIN( 562)			this->m12 = -(s);
HXDLIN( 562)			this->m13 = ((Float)0.0);
HXDLIN( 562)			this->m14 = ((Float)0.0);
HXDLIN( 562)			this->m15 = ((Float)0.0);
HXDLIN( 562)			this->m21 = s;
HXDLIN( 562)			this->m22 = c;
HXDLIN( 562)			this->m23 = ((Float)0.0);
HXDLIN( 562)			this->m24 = ((Float)0.0);
HXDLIN( 562)			this->m25 = ((Float)0.0);
HXDLIN( 562)			this->m31 = ((Float)0.0);
HXDLIN( 562)			this->m32 = ((Float)0.0);
HXDLIN( 562)			this->m33 = ((Float)1.0);
HXDLIN( 562)			this->m34 = ((Float)0.0);
HXDLIN( 562)			this->m35 = ((Float)0.0);
HXDLIN( 562)			this->m41 = ((Float)0.0);
HXDLIN( 562)			this->m42 = ((Float)0.0);
HXDLIN( 562)			this->m43 = ((Float)0.0);
HXDLIN( 562)			this->m44 = ((Float)1.0);
HXDLIN( 562)			this->m45 = ((Float)0.0);
            		}
HXLINE( 569)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,rotateBlue,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::shearRed(Float green,Float blue){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_573_shearRed)
HXLINE( 574)		{
HXLINE( 574)			this->m11 = ((Float)1.0);
HXDLIN( 574)			this->m12 = green;
HXDLIN( 574)			this->m13 = blue;
HXDLIN( 574)			this->m14 = ((Float)0.0);
HXDLIN( 574)			this->m15 = ((Float)0.0);
HXDLIN( 574)			this->m21 = ((Float)0.0);
HXDLIN( 574)			this->m22 = ((Float)1.0);
HXDLIN( 574)			this->m23 = ((Float)0.0);
HXDLIN( 574)			this->m24 = ((Float)0.0);
HXDLIN( 574)			this->m25 = ((Float)0.0);
HXDLIN( 574)			this->m31 = ((Float)0.0);
HXDLIN( 574)			this->m32 = ((Float)0.0);
HXDLIN( 574)			this->m33 = ((Float)1.0);
HXDLIN( 574)			this->m34 = ((Float)0.0);
HXDLIN( 574)			this->m35 = ((Float)0.0);
HXDLIN( 574)			this->m41 = ((Float)0.0);
HXDLIN( 574)			this->m42 = ((Float)0.0);
HXDLIN( 574)			this->m43 = ((Float)0.0);
HXDLIN( 574)			this->m44 = ((Float)1.0);
HXDLIN( 574)			this->m45 = ((Float)0.0);
            		}
HXLINE( 581)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_obj,shearRed,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::shearGreen(Float red,Float blue){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_585_shearGreen)
HXLINE( 586)		{
HXLINE( 586)			this->m11 = ((Float)1.0);
HXDLIN( 586)			this->m12 = ((Float)0.0);
HXDLIN( 586)			this->m13 = ((Float)0.0);
HXDLIN( 586)			this->m14 = ((Float)0.0);
HXDLIN( 586)			this->m15 = ((Float)0.0);
HXDLIN( 586)			this->m21 = red;
HXDLIN( 586)			this->m22 = ((Float)1.0);
HXDLIN( 586)			this->m23 = blue;
HXDLIN( 586)			this->m24 = ((Float)0.0);
HXDLIN( 586)			this->m25 = ((Float)0.0);
HXDLIN( 586)			this->m31 = ((Float)0.0);
HXDLIN( 586)			this->m32 = ((Float)0.0);
HXDLIN( 586)			this->m33 = ((Float)1.0);
HXDLIN( 586)			this->m34 = ((Float)0.0);
HXDLIN( 586)			this->m35 = ((Float)0.0);
HXDLIN( 586)			this->m41 = ((Float)0.0);
HXDLIN( 586)			this->m42 = ((Float)0.0);
HXDLIN( 586)			this->m43 = ((Float)0.0);
HXDLIN( 586)			this->m44 = ((Float)1.0);
HXDLIN( 586)			this->m45 = ((Float)0.0);
            		}
HXLINE( 593)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_obj,shearGreen,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::shearBlue(Float red,Float green){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_597_shearBlue)
HXLINE( 598)		{
HXLINE( 598)			this->m11 = ((Float)1.0);
HXDLIN( 598)			this->m12 = ((Float)0.0);
HXDLIN( 598)			this->m13 = ((Float)0.0);
HXDLIN( 598)			this->m14 = ((Float)0.0);
HXDLIN( 598)			this->m15 = ((Float)0.0);
HXDLIN( 598)			this->m21 = ((Float)0.0);
HXDLIN( 598)			this->m22 = ((Float)1.0);
HXDLIN( 598)			this->m23 = ((Float)0.0);
HXDLIN( 598)			this->m24 = ((Float)0.0);
HXDLIN( 598)			this->m25 = ((Float)0.0);
HXDLIN( 598)			this->m31 = red;
HXDLIN( 598)			this->m32 = green;
HXDLIN( 598)			this->m33 = ((Float)1.0);
HXDLIN( 598)			this->m34 = ((Float)0.0);
HXDLIN( 598)			this->m35 = ((Float)0.0);
HXDLIN( 598)			this->m41 = ((Float)0.0);
HXDLIN( 598)			this->m42 = ((Float)0.0);
HXDLIN( 598)			this->m43 = ((Float)0.0);
HXDLIN( 598)			this->m44 = ((Float)1.0);
HXDLIN( 598)			this->m45 = ((Float)0.0);
            		}
HXLINE( 605)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_obj,shearBlue,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::applyColorDeficiency( ::com::stencyl::utils::ColorDeficiencyTypes type){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_609_applyColorDeficiency)
HXLINE( 611)		switch((int)(_hx_getEnumValueIndex(type))){
            			case (int)0: {
HXLINE( 613)				Float t11 = this->m11;
HXDLIN( 613)				Float t12 = this->m12;
HXDLIN( 613)				Float t13 = this->m13;
HXDLIN( 613)				Float t14 = this->m14;
HXDLIN( 613)				Float _hx_tmp = (this->m11 * ((Float)0.567));
HXDLIN( 613)				Float _hx_tmp1 = (_hx_tmp + (this->m12 * ((Float)0.558)));
HXDLIN( 613)				Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * (int)0));
HXDLIN( 613)				this->m11 = (_hx_tmp2 + (this->m14 * (int)0));
HXDLIN( 613)				Float _hx_tmp3 = ((t11 * ((Float)0.433)) + (this->m12 * ((Float)0.442)));
HXDLIN( 613)				Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * ((Float)0.242)));
HXDLIN( 613)				this->m12 = (_hx_tmp4 + (this->m14 * (int)0));
HXDLIN( 613)				Float _hx_tmp5 = (((t11 * (int)0) + (t12 * (int)0)) + (this->m13 * ((Float)0.758)));
HXDLIN( 613)				this->m13 = (_hx_tmp5 + (this->m14 * (int)0));
HXDLIN( 613)				this->m14 = ((((t11 * (int)0) + (t12 * (int)0)) + (t13 * (int)0)) + this->m14);
HXDLIN( 613)				this->m15 = ((((t11 * (int)0) + (t12 * (int)0)) + (t13 * (int)0)) + (t14 * (int)0));
HXDLIN( 613)				Float t21 = this->m21;
HXDLIN( 613)				Float t22 = this->m22;
HXDLIN( 613)				Float t23 = this->m23;
HXDLIN( 613)				Float t24 = this->m24;
HXDLIN( 613)				Float _hx_tmp6 = (this->m21 * ((Float)0.567));
HXDLIN( 613)				Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * ((Float)0.558)));
HXDLIN( 613)				Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * (int)0));
HXDLIN( 613)				this->m21 = (_hx_tmp8 + (this->m24 * (int)0));
HXDLIN( 613)				Float _hx_tmp9 = ((t21 * ((Float)0.433)) + (this->m22 * ((Float)0.442)));
HXDLIN( 613)				Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * ((Float)0.242)));
HXDLIN( 613)				this->m22 = (_hx_tmp10 + (this->m24 * (int)0));
HXDLIN( 613)				Float _hx_tmp11 = (((t21 * (int)0) + (t22 * (int)0)) + (this->m23 * ((Float)0.758)));
HXDLIN( 613)				this->m23 = (_hx_tmp11 + (this->m24 * (int)0));
HXDLIN( 613)				this->m24 = ((((t21 * (int)0) + (t22 * (int)0)) + (t23 * (int)0)) + this->m24);
HXDLIN( 613)				this->m25 = ((((t21 * (int)0) + (t22 * (int)0)) + (t23 * (int)0)) + (t24 * (int)0));
HXDLIN( 613)				Float t31 = this->m31;
HXDLIN( 613)				Float t32 = this->m32;
HXDLIN( 613)				Float t33 = this->m33;
HXDLIN( 613)				Float t34 = this->m34;
HXDLIN( 613)				Float _hx_tmp12 = (this->m31 * ((Float)0.567));
HXDLIN( 613)				Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * ((Float)0.558)));
HXDLIN( 613)				Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * (int)0));
HXDLIN( 613)				this->m31 = (_hx_tmp14 + (this->m34 * (int)0));
HXDLIN( 613)				Float _hx_tmp15 = ((t31 * ((Float)0.433)) + (this->m32 * ((Float)0.442)));
HXDLIN( 613)				Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * ((Float)0.242)));
HXDLIN( 613)				this->m32 = (_hx_tmp16 + (this->m34 * (int)0));
HXDLIN( 613)				Float _hx_tmp17 = (((t31 * (int)0) + (t32 * (int)0)) + (this->m33 * ((Float)0.758)));
HXDLIN( 613)				this->m33 = (_hx_tmp17 + (this->m34 * (int)0));
HXDLIN( 613)				this->m34 = ((((t31 * (int)0) + (t32 * (int)0)) + (t33 * (int)0)) + this->m34);
HXDLIN( 613)				this->m35 = ((((t31 * (int)0) + (t32 * (int)0)) + (t33 * (int)0)) + (t34 * (int)0));
HXDLIN( 613)				Float t41 = this->m41;
HXDLIN( 613)				Float t42 = this->m42;
HXDLIN( 613)				Float t43 = this->m43;
HXDLIN( 613)				Float t44 = this->m44;
HXDLIN( 613)				Float _hx_tmp18 = (this->m41 * ((Float)0.567));
HXDLIN( 613)				Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * ((Float)0.558)));
HXDLIN( 613)				Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * (int)0));
HXDLIN( 613)				this->m41 = (_hx_tmp20 + (this->m44 * (int)0));
HXDLIN( 613)				Float _hx_tmp21 = ((t41 * ((Float)0.433)) + (this->m42 * ((Float)0.442)));
HXDLIN( 613)				Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * ((Float)0.242)));
HXDLIN( 613)				this->m42 = (_hx_tmp22 + (this->m44 * (int)0));
HXDLIN( 613)				Float _hx_tmp23 = (((t41 * (int)0) + (t42 * (int)0)) + (this->m43 * ((Float)0.758)));
HXDLIN( 613)				this->m43 = (_hx_tmp23 + (this->m44 * (int)0));
HXDLIN( 613)				this->m44 = ((((t41 * (int)0) + (t42 * (int)0)) + (t43 * (int)0)) + this->m44);
HXDLIN( 613)				this->m45 = ((((t41 * (int)0) + (t42 * (int)0)) + (t43 * (int)0)) + (t44 * (int)0));
            			}
            			break;
            			case (int)1: {
HXLINE( 614)				Float t111 = this->m11;
HXDLIN( 614)				Float t121 = this->m12;
HXDLIN( 614)				Float t131 = this->m13;
HXDLIN( 614)				Float t141 = this->m14;
HXDLIN( 614)				Float _hx_tmp24 = (this->m11 * ((Float)0.817));
HXDLIN( 614)				Float _hx_tmp25 = (_hx_tmp24 + (this->m12 * ((Float)0.333)));
HXDLIN( 614)				Float _hx_tmp26 = (_hx_tmp25 + (this->m13 * (int)0));
HXDLIN( 614)				this->m11 = (_hx_tmp26 + (this->m14 * (int)0));
HXDLIN( 614)				Float _hx_tmp27 = ((t111 * ((Float)0.183)) + (this->m12 * ((Float)0.667)));
HXDLIN( 614)				Float _hx_tmp28 = (_hx_tmp27 + (this->m13 * ((Float)0.125)));
HXDLIN( 614)				this->m12 = (_hx_tmp28 + (this->m14 * (int)0));
HXDLIN( 614)				Float _hx_tmp29 = (((t111 * (int)0) + (t121 * (int)0)) + (this->m13 * ((Float)0.875)));
HXDLIN( 614)				this->m13 = (_hx_tmp29 + (this->m14 * (int)0));
HXDLIN( 614)				this->m14 = ((((t111 * (int)0) + (t121 * (int)0)) + (t131 * (int)0)) + this->m14);
HXDLIN( 614)				this->m15 = ((((t111 * (int)0) + (t121 * (int)0)) + (t131 * (int)0)) + (t141 * (int)0));
HXDLIN( 614)				Float t211 = this->m21;
HXDLIN( 614)				Float t221 = this->m22;
HXDLIN( 614)				Float t231 = this->m23;
HXDLIN( 614)				Float t241 = this->m24;
HXDLIN( 614)				Float _hx_tmp30 = (this->m21 * ((Float)0.817));
HXDLIN( 614)				Float _hx_tmp31 = (_hx_tmp30 + (this->m22 * ((Float)0.333)));
HXDLIN( 614)				Float _hx_tmp32 = (_hx_tmp31 + (this->m23 * (int)0));
HXDLIN( 614)				this->m21 = (_hx_tmp32 + (this->m24 * (int)0));
HXDLIN( 614)				Float _hx_tmp33 = ((t211 * ((Float)0.183)) + (this->m22 * ((Float)0.667)));
HXDLIN( 614)				Float _hx_tmp34 = (_hx_tmp33 + (this->m23 * ((Float)0.125)));
HXDLIN( 614)				this->m22 = (_hx_tmp34 + (this->m24 * (int)0));
HXDLIN( 614)				Float _hx_tmp35 = (((t211 * (int)0) + (t221 * (int)0)) + (this->m23 * ((Float)0.875)));
HXDLIN( 614)				this->m23 = (_hx_tmp35 + (this->m24 * (int)0));
HXDLIN( 614)				this->m24 = ((((t211 * (int)0) + (t221 * (int)0)) + (t231 * (int)0)) + this->m24);
HXDLIN( 614)				this->m25 = ((((t211 * (int)0) + (t221 * (int)0)) + (t231 * (int)0)) + (t241 * (int)0));
HXDLIN( 614)				Float t311 = this->m31;
HXDLIN( 614)				Float t321 = this->m32;
HXDLIN( 614)				Float t331 = this->m33;
HXDLIN( 614)				Float t341 = this->m34;
HXDLIN( 614)				Float _hx_tmp36 = (this->m31 * ((Float)0.817));
HXDLIN( 614)				Float _hx_tmp37 = (_hx_tmp36 + (this->m32 * ((Float)0.333)));
HXDLIN( 614)				Float _hx_tmp38 = (_hx_tmp37 + (this->m33 * (int)0));
HXDLIN( 614)				this->m31 = (_hx_tmp38 + (this->m34 * (int)0));
HXDLIN( 614)				Float _hx_tmp39 = ((t311 * ((Float)0.183)) + (this->m32 * ((Float)0.667)));
HXDLIN( 614)				Float _hx_tmp40 = (_hx_tmp39 + (this->m33 * ((Float)0.125)));
HXDLIN( 614)				this->m32 = (_hx_tmp40 + (this->m34 * (int)0));
HXDLIN( 614)				Float _hx_tmp41 = (((t311 * (int)0) + (t321 * (int)0)) + (this->m33 * ((Float)0.875)));
HXDLIN( 614)				this->m33 = (_hx_tmp41 + (this->m34 * (int)0));
HXDLIN( 614)				this->m34 = ((((t311 * (int)0) + (t321 * (int)0)) + (t331 * (int)0)) + this->m34);
HXDLIN( 614)				this->m35 = ((((t311 * (int)0) + (t321 * (int)0)) + (t331 * (int)0)) + (t341 * (int)0));
HXDLIN( 614)				Float t411 = this->m41;
HXDLIN( 614)				Float t421 = this->m42;
HXDLIN( 614)				Float t431 = this->m43;
HXDLIN( 614)				Float t441 = this->m44;
HXDLIN( 614)				Float _hx_tmp42 = (this->m41 * ((Float)0.817));
HXDLIN( 614)				Float _hx_tmp43 = (_hx_tmp42 + (this->m42 * ((Float)0.333)));
HXDLIN( 614)				Float _hx_tmp44 = (_hx_tmp43 + (this->m43 * (int)0));
HXDLIN( 614)				this->m41 = (_hx_tmp44 + (this->m44 * (int)0));
HXDLIN( 614)				Float _hx_tmp45 = ((t411 * ((Float)0.183)) + (this->m42 * ((Float)0.667)));
HXDLIN( 614)				Float _hx_tmp46 = (_hx_tmp45 + (this->m43 * ((Float)0.125)));
HXDLIN( 614)				this->m42 = (_hx_tmp46 + (this->m44 * (int)0));
HXDLIN( 614)				Float _hx_tmp47 = (((t411 * (int)0) + (t421 * (int)0)) + (this->m43 * ((Float)0.875)));
HXDLIN( 614)				this->m43 = (_hx_tmp47 + (this->m44 * (int)0));
HXDLIN( 614)				this->m44 = ((((t411 * (int)0) + (t421 * (int)0)) + (t431 * (int)0)) + this->m44);
HXDLIN( 614)				this->m45 = ((((t411 * (int)0) + (t421 * (int)0)) + (t431 * (int)0)) + (t441 * (int)0));
            			}
            			break;
            			case (int)2: {
HXLINE( 615)				Float t112 = this->m11;
HXDLIN( 615)				Float t122 = this->m12;
HXDLIN( 615)				Float t132 = this->m13;
HXDLIN( 615)				Float t142 = this->m14;
HXDLIN( 615)				Float _hx_tmp48 = (this->m11 * ((Float)0.625));
HXDLIN( 615)				Float _hx_tmp49 = (_hx_tmp48 + (this->m12 * ((Float)0.7)));
HXDLIN( 615)				Float _hx_tmp50 = (_hx_tmp49 + (this->m13 * (int)0));
HXDLIN( 615)				this->m11 = (_hx_tmp50 + (this->m14 * (int)0));
HXDLIN( 615)				Float _hx_tmp51 = ((t112 * ((Float)0.375)) + (this->m12 * ((Float)0.3)));
HXDLIN( 615)				Float _hx_tmp52 = (_hx_tmp51 + (this->m13 * ((Float)0.3)));
HXDLIN( 615)				this->m12 = (_hx_tmp52 + (this->m14 * (int)0));
HXDLIN( 615)				Float _hx_tmp53 = (((t112 * (int)0) + (t122 * (int)0)) + (this->m13 * ((Float)0.7)));
HXDLIN( 615)				this->m13 = (_hx_tmp53 + (this->m14 * (int)0));
HXDLIN( 615)				this->m14 = ((((t112 * (int)0) + (t122 * (int)0)) + (t132 * (int)0)) + this->m14);
HXDLIN( 615)				this->m15 = ((((t112 * (int)0) + (t122 * (int)0)) + (t132 * (int)0)) + (t142 * (int)0));
HXDLIN( 615)				Float t212 = this->m21;
HXDLIN( 615)				Float t222 = this->m22;
HXDLIN( 615)				Float t232 = this->m23;
HXDLIN( 615)				Float t242 = this->m24;
HXDLIN( 615)				Float _hx_tmp54 = (this->m21 * ((Float)0.625));
HXDLIN( 615)				Float _hx_tmp55 = (_hx_tmp54 + (this->m22 * ((Float)0.7)));
HXDLIN( 615)				Float _hx_tmp56 = (_hx_tmp55 + (this->m23 * (int)0));
HXDLIN( 615)				this->m21 = (_hx_tmp56 + (this->m24 * (int)0));
HXDLIN( 615)				Float _hx_tmp57 = ((t212 * ((Float)0.375)) + (this->m22 * ((Float)0.3)));
HXDLIN( 615)				Float _hx_tmp58 = (_hx_tmp57 + (this->m23 * ((Float)0.3)));
HXDLIN( 615)				this->m22 = (_hx_tmp58 + (this->m24 * (int)0));
HXDLIN( 615)				Float _hx_tmp59 = (((t212 * (int)0) + (t222 * (int)0)) + (this->m23 * ((Float)0.7)));
HXDLIN( 615)				this->m23 = (_hx_tmp59 + (this->m24 * (int)0));
HXDLIN( 615)				this->m24 = ((((t212 * (int)0) + (t222 * (int)0)) + (t232 * (int)0)) + this->m24);
HXDLIN( 615)				this->m25 = ((((t212 * (int)0) + (t222 * (int)0)) + (t232 * (int)0)) + (t242 * (int)0));
HXDLIN( 615)				Float t312 = this->m31;
HXDLIN( 615)				Float t322 = this->m32;
HXDLIN( 615)				Float t332 = this->m33;
HXDLIN( 615)				Float t342 = this->m34;
HXDLIN( 615)				Float _hx_tmp60 = (this->m31 * ((Float)0.625));
HXDLIN( 615)				Float _hx_tmp61 = (_hx_tmp60 + (this->m32 * ((Float)0.7)));
HXDLIN( 615)				Float _hx_tmp62 = (_hx_tmp61 + (this->m33 * (int)0));
HXDLIN( 615)				this->m31 = (_hx_tmp62 + (this->m34 * (int)0));
HXDLIN( 615)				Float _hx_tmp63 = ((t312 * ((Float)0.375)) + (this->m32 * ((Float)0.3)));
HXDLIN( 615)				Float _hx_tmp64 = (_hx_tmp63 + (this->m33 * ((Float)0.3)));
HXDLIN( 615)				this->m32 = (_hx_tmp64 + (this->m34 * (int)0));
HXDLIN( 615)				Float _hx_tmp65 = (((t312 * (int)0) + (t322 * (int)0)) + (this->m33 * ((Float)0.7)));
HXDLIN( 615)				this->m33 = (_hx_tmp65 + (this->m34 * (int)0));
HXDLIN( 615)				this->m34 = ((((t312 * (int)0) + (t322 * (int)0)) + (t332 * (int)0)) + this->m34);
HXDLIN( 615)				this->m35 = ((((t312 * (int)0) + (t322 * (int)0)) + (t332 * (int)0)) + (t342 * (int)0));
HXDLIN( 615)				Float t412 = this->m41;
HXDLIN( 615)				Float t422 = this->m42;
HXDLIN( 615)				Float t432 = this->m43;
HXDLIN( 615)				Float t442 = this->m44;
HXDLIN( 615)				Float _hx_tmp66 = (this->m41 * ((Float)0.625));
HXDLIN( 615)				Float _hx_tmp67 = (_hx_tmp66 + (this->m42 * ((Float)0.7)));
HXDLIN( 615)				Float _hx_tmp68 = (_hx_tmp67 + (this->m43 * (int)0));
HXDLIN( 615)				this->m41 = (_hx_tmp68 + (this->m44 * (int)0));
HXDLIN( 615)				Float _hx_tmp69 = ((t412 * ((Float)0.375)) + (this->m42 * ((Float)0.3)));
HXDLIN( 615)				Float _hx_tmp70 = (_hx_tmp69 + (this->m43 * ((Float)0.3)));
HXDLIN( 615)				this->m42 = (_hx_tmp70 + (this->m44 * (int)0));
HXDLIN( 615)				Float _hx_tmp71 = (((t412 * (int)0) + (t422 * (int)0)) + (this->m43 * ((Float)0.7)));
HXDLIN( 615)				this->m43 = (_hx_tmp71 + (this->m44 * (int)0));
HXDLIN( 615)				this->m44 = ((((t412 * (int)0) + (t422 * (int)0)) + (t432 * (int)0)) + this->m44);
HXDLIN( 615)				this->m45 = ((((t412 * (int)0) + (t422 * (int)0)) + (t432 * (int)0)) + (t442 * (int)0));
            			}
            			break;
            			case (int)3: {
HXLINE( 616)				Float t113 = this->m11;
HXDLIN( 616)				Float t123 = this->m12;
HXDLIN( 616)				Float t133 = this->m13;
HXDLIN( 616)				Float t143 = this->m14;
HXDLIN( 616)				Float _hx_tmp72 = (this->m11 * ((Float)0.8));
HXDLIN( 616)				Float _hx_tmp73 = (_hx_tmp72 + (this->m12 * ((Float)0.258)));
HXDLIN( 616)				Float _hx_tmp74 = (_hx_tmp73 + (this->m13 * (int)0));
HXDLIN( 616)				this->m11 = (_hx_tmp74 + (this->m14 * (int)0));
HXDLIN( 616)				Float _hx_tmp75 = ((t113 * ((Float)0.2)) + (this->m12 * ((Float)0.742)));
HXDLIN( 616)				Float _hx_tmp76 = (_hx_tmp75 + (this->m13 * ((Float)0.142)));
HXDLIN( 616)				this->m12 = (_hx_tmp76 + (this->m14 * (int)0));
HXDLIN( 616)				Float _hx_tmp77 = (((t113 * (int)0) + (t123 * (int)0)) + (this->m13 * ((Float)0.858)));
HXDLIN( 616)				this->m13 = (_hx_tmp77 + (this->m14 * (int)0));
HXDLIN( 616)				this->m14 = ((((t113 * (int)0) + (t123 * (int)0)) + (t133 * (int)0)) + this->m14);
HXDLIN( 616)				this->m15 = ((((t113 * (int)0) + (t123 * (int)0)) + (t133 * (int)0)) + (t143 * (int)0));
HXDLIN( 616)				Float t213 = this->m21;
HXDLIN( 616)				Float t223 = this->m22;
HXDLIN( 616)				Float t233 = this->m23;
HXDLIN( 616)				Float t243 = this->m24;
HXDLIN( 616)				Float _hx_tmp78 = (this->m21 * ((Float)0.8));
HXDLIN( 616)				Float _hx_tmp79 = (_hx_tmp78 + (this->m22 * ((Float)0.258)));
HXDLIN( 616)				Float _hx_tmp80 = (_hx_tmp79 + (this->m23 * (int)0));
HXDLIN( 616)				this->m21 = (_hx_tmp80 + (this->m24 * (int)0));
HXDLIN( 616)				Float _hx_tmp81 = ((t213 * ((Float)0.2)) + (this->m22 * ((Float)0.742)));
HXDLIN( 616)				Float _hx_tmp82 = (_hx_tmp81 + (this->m23 * ((Float)0.142)));
HXDLIN( 616)				this->m22 = (_hx_tmp82 + (this->m24 * (int)0));
HXDLIN( 616)				Float _hx_tmp83 = (((t213 * (int)0) + (t223 * (int)0)) + (this->m23 * ((Float)0.858)));
HXDLIN( 616)				this->m23 = (_hx_tmp83 + (this->m24 * (int)0));
HXDLIN( 616)				this->m24 = ((((t213 * (int)0) + (t223 * (int)0)) + (t233 * (int)0)) + this->m24);
HXDLIN( 616)				this->m25 = ((((t213 * (int)0) + (t223 * (int)0)) + (t233 * (int)0)) + (t243 * (int)0));
HXDLIN( 616)				Float t313 = this->m31;
HXDLIN( 616)				Float t323 = this->m32;
HXDLIN( 616)				Float t333 = this->m33;
HXDLIN( 616)				Float t343 = this->m34;
HXDLIN( 616)				Float _hx_tmp84 = (this->m31 * ((Float)0.8));
HXDLIN( 616)				Float _hx_tmp85 = (_hx_tmp84 + (this->m32 * ((Float)0.258)));
HXDLIN( 616)				Float _hx_tmp86 = (_hx_tmp85 + (this->m33 * (int)0));
HXDLIN( 616)				this->m31 = (_hx_tmp86 + (this->m34 * (int)0));
HXDLIN( 616)				Float _hx_tmp87 = ((t313 * ((Float)0.2)) + (this->m32 * ((Float)0.742)));
HXDLIN( 616)				Float _hx_tmp88 = (_hx_tmp87 + (this->m33 * ((Float)0.142)));
HXDLIN( 616)				this->m32 = (_hx_tmp88 + (this->m34 * (int)0));
HXDLIN( 616)				Float _hx_tmp89 = (((t313 * (int)0) + (t323 * (int)0)) + (this->m33 * ((Float)0.858)));
HXDLIN( 616)				this->m33 = (_hx_tmp89 + (this->m34 * (int)0));
HXDLIN( 616)				this->m34 = ((((t313 * (int)0) + (t323 * (int)0)) + (t333 * (int)0)) + this->m34);
HXDLIN( 616)				this->m35 = ((((t313 * (int)0) + (t323 * (int)0)) + (t333 * (int)0)) + (t343 * (int)0));
HXDLIN( 616)				Float t413 = this->m41;
HXDLIN( 616)				Float t423 = this->m42;
HXDLIN( 616)				Float t433 = this->m43;
HXDLIN( 616)				Float t443 = this->m44;
HXDLIN( 616)				Float _hx_tmp90 = (this->m41 * ((Float)0.8));
HXDLIN( 616)				Float _hx_tmp91 = (_hx_tmp90 + (this->m42 * ((Float)0.258)));
HXDLIN( 616)				Float _hx_tmp92 = (_hx_tmp91 + (this->m43 * (int)0));
HXDLIN( 616)				this->m41 = (_hx_tmp92 + (this->m44 * (int)0));
HXDLIN( 616)				Float _hx_tmp93 = ((t413 * ((Float)0.2)) + (this->m42 * ((Float)0.742)));
HXDLIN( 616)				Float _hx_tmp94 = (_hx_tmp93 + (this->m43 * ((Float)0.142)));
HXDLIN( 616)				this->m42 = (_hx_tmp94 + (this->m44 * (int)0));
HXDLIN( 616)				Float _hx_tmp95 = (((t413 * (int)0) + (t423 * (int)0)) + (this->m43 * ((Float)0.858)));
HXDLIN( 616)				this->m43 = (_hx_tmp95 + (this->m44 * (int)0));
HXDLIN( 616)				this->m44 = ((((t413 * (int)0) + (t423 * (int)0)) + (t433 * (int)0)) + this->m44);
HXDLIN( 616)				this->m45 = ((((t413 * (int)0) + (t423 * (int)0)) + (t433 * (int)0)) + (t443 * (int)0));
            			}
            			break;
            			case (int)4: {
HXLINE( 617)				Float t114 = this->m11;
HXDLIN( 617)				Float t124 = this->m12;
HXDLIN( 617)				Float t134 = this->m13;
HXDLIN( 617)				Float t144 = this->m14;
HXDLIN( 617)				Float _hx_tmp96 = (this->m11 * ((Float)0.95));
HXDLIN( 617)				Float _hx_tmp97 = (_hx_tmp96 + (this->m12 * (int)0));
HXDLIN( 617)				Float _hx_tmp98 = (_hx_tmp97 + (this->m13 * (int)0));
HXDLIN( 617)				this->m11 = (_hx_tmp98 + (this->m14 * (int)0));
HXDLIN( 617)				Float _hx_tmp99 = ((t114 * ((Float)0.05)) + (this->m12 * ((Float)0.433)));
HXDLIN( 617)				Float _hx_tmp100 = (_hx_tmp99 + (this->m13 * ((Float)0.475)));
HXDLIN( 617)				this->m12 = (_hx_tmp100 + (this->m14 * (int)0));
HXDLIN( 617)				Float _hx_tmp101 = (((t114 * (int)0) + (t124 * ((Float)0.567))) + (this->m13 * ((Float)0.525)));
HXDLIN( 617)				this->m13 = (_hx_tmp101 + (this->m14 * (int)0));
HXDLIN( 617)				this->m14 = ((((t114 * (int)0) + (t124 * (int)0)) + (t134 * (int)0)) + this->m14);
HXDLIN( 617)				this->m15 = ((((t114 * (int)0) + (t124 * (int)0)) + (t134 * (int)0)) + (t144 * (int)0));
HXDLIN( 617)				Float t214 = this->m21;
HXDLIN( 617)				Float t224 = this->m22;
HXDLIN( 617)				Float t234 = this->m23;
HXDLIN( 617)				Float t244 = this->m24;
HXDLIN( 617)				Float _hx_tmp102 = (this->m21 * ((Float)0.95));
HXDLIN( 617)				Float _hx_tmp103 = (_hx_tmp102 + (this->m22 * (int)0));
HXDLIN( 617)				Float _hx_tmp104 = (_hx_tmp103 + (this->m23 * (int)0));
HXDLIN( 617)				this->m21 = (_hx_tmp104 + (this->m24 * (int)0));
HXDLIN( 617)				Float _hx_tmp105 = ((t214 * ((Float)0.05)) + (this->m22 * ((Float)0.433)));
HXDLIN( 617)				Float _hx_tmp106 = (_hx_tmp105 + (this->m23 * ((Float)0.475)));
HXDLIN( 617)				this->m22 = (_hx_tmp106 + (this->m24 * (int)0));
HXDLIN( 617)				Float _hx_tmp107 = (((t214 * (int)0) + (t224 * ((Float)0.567))) + (this->m23 * ((Float)0.525)));
HXDLIN( 617)				this->m23 = (_hx_tmp107 + (this->m24 * (int)0));
HXDLIN( 617)				this->m24 = ((((t214 * (int)0) + (t224 * (int)0)) + (t234 * (int)0)) + this->m24);
HXDLIN( 617)				this->m25 = ((((t214 * (int)0) + (t224 * (int)0)) + (t234 * (int)0)) + (t244 * (int)0));
HXDLIN( 617)				Float t314 = this->m31;
HXDLIN( 617)				Float t324 = this->m32;
HXDLIN( 617)				Float t334 = this->m33;
HXDLIN( 617)				Float t344 = this->m34;
HXDLIN( 617)				Float _hx_tmp108 = (this->m31 * ((Float)0.95));
HXDLIN( 617)				Float _hx_tmp109 = (_hx_tmp108 + (this->m32 * (int)0));
HXDLIN( 617)				Float _hx_tmp110 = (_hx_tmp109 + (this->m33 * (int)0));
HXDLIN( 617)				this->m31 = (_hx_tmp110 + (this->m34 * (int)0));
HXDLIN( 617)				Float _hx_tmp111 = ((t314 * ((Float)0.05)) + (this->m32 * ((Float)0.433)));
HXDLIN( 617)				Float _hx_tmp112 = (_hx_tmp111 + (this->m33 * ((Float)0.475)));
HXDLIN( 617)				this->m32 = (_hx_tmp112 + (this->m34 * (int)0));
HXDLIN( 617)				Float _hx_tmp113 = (((t314 * (int)0) + (t324 * ((Float)0.567))) + (this->m33 * ((Float)0.525)));
HXDLIN( 617)				this->m33 = (_hx_tmp113 + (this->m34 * (int)0));
HXDLIN( 617)				this->m34 = ((((t314 * (int)0) + (t324 * (int)0)) + (t334 * (int)0)) + this->m34);
HXDLIN( 617)				this->m35 = ((((t314 * (int)0) + (t324 * (int)0)) + (t334 * (int)0)) + (t344 * (int)0));
HXDLIN( 617)				Float t414 = this->m41;
HXDLIN( 617)				Float t424 = this->m42;
HXDLIN( 617)				Float t434 = this->m43;
HXDLIN( 617)				Float t444 = this->m44;
HXDLIN( 617)				Float _hx_tmp114 = (this->m41 * ((Float)0.95));
HXDLIN( 617)				Float _hx_tmp115 = (_hx_tmp114 + (this->m42 * (int)0));
HXDLIN( 617)				Float _hx_tmp116 = (_hx_tmp115 + (this->m43 * (int)0));
HXDLIN( 617)				this->m41 = (_hx_tmp116 + (this->m44 * (int)0));
HXDLIN( 617)				Float _hx_tmp117 = ((t414 * ((Float)0.05)) + (this->m42 * ((Float)0.433)));
HXDLIN( 617)				Float _hx_tmp118 = (_hx_tmp117 + (this->m43 * ((Float)0.475)));
HXDLIN( 617)				this->m42 = (_hx_tmp118 + (this->m44 * (int)0));
HXDLIN( 617)				Float _hx_tmp119 = (((t414 * (int)0) + (t424 * ((Float)0.567))) + (this->m43 * ((Float)0.525)));
HXDLIN( 617)				this->m43 = (_hx_tmp119 + (this->m44 * (int)0));
HXDLIN( 617)				this->m44 = ((((t414 * (int)0) + (t424 * (int)0)) + (t434 * (int)0)) + this->m44);
HXDLIN( 617)				this->m45 = ((((t414 * (int)0) + (t424 * (int)0)) + (t434 * (int)0)) + (t444 * (int)0));
            			}
            			break;
            			case (int)5: {
HXLINE( 618)				Float t115 = this->m11;
HXDLIN( 618)				Float t125 = this->m12;
HXDLIN( 618)				Float t135 = this->m13;
HXDLIN( 618)				Float t145 = this->m14;
HXDLIN( 618)				Float _hx_tmp120 = (this->m11 * ((Float)0.967));
HXDLIN( 618)				Float _hx_tmp121 = (_hx_tmp120 + (this->m12 * (int)0));
HXDLIN( 618)				Float _hx_tmp122 = (_hx_tmp121 + (this->m13 * (int)0));
HXDLIN( 618)				this->m11 = (_hx_tmp122 + (this->m14 * (int)0));
HXDLIN( 618)				Float _hx_tmp123 = ((t115 * ((Float)0.033)) + (this->m12 * ((Float)0.733)));
HXDLIN( 618)				Float _hx_tmp124 = (_hx_tmp123 + (this->m13 * ((Float)0.183)));
HXDLIN( 618)				this->m12 = (_hx_tmp124 + (this->m14 * (int)0));
HXDLIN( 618)				Float _hx_tmp125 = (((t115 * (int)0) + (t125 * ((Float)0.267))) + (this->m13 * ((Float)0.817)));
HXDLIN( 618)				this->m13 = (_hx_tmp125 + (this->m14 * (int)0));
HXDLIN( 618)				this->m14 = ((((t115 * (int)0) + (t125 * (int)0)) + (t135 * (int)0)) + this->m14);
HXDLIN( 618)				this->m15 = ((((t115 * (int)0) + (t125 * (int)0)) + (t135 * (int)0)) + (t145 * (int)0));
HXDLIN( 618)				Float t215 = this->m21;
HXDLIN( 618)				Float t225 = this->m22;
HXDLIN( 618)				Float t235 = this->m23;
HXDLIN( 618)				Float t245 = this->m24;
HXDLIN( 618)				Float _hx_tmp126 = (this->m21 * ((Float)0.967));
HXDLIN( 618)				Float _hx_tmp127 = (_hx_tmp126 + (this->m22 * (int)0));
HXDLIN( 618)				Float _hx_tmp128 = (_hx_tmp127 + (this->m23 * (int)0));
HXDLIN( 618)				this->m21 = (_hx_tmp128 + (this->m24 * (int)0));
HXDLIN( 618)				Float _hx_tmp129 = ((t215 * ((Float)0.033)) + (this->m22 * ((Float)0.733)));
HXDLIN( 618)				Float _hx_tmp130 = (_hx_tmp129 + (this->m23 * ((Float)0.183)));
HXDLIN( 618)				this->m22 = (_hx_tmp130 + (this->m24 * (int)0));
HXDLIN( 618)				Float _hx_tmp131 = (((t215 * (int)0) + (t225 * ((Float)0.267))) + (this->m23 * ((Float)0.817)));
HXDLIN( 618)				this->m23 = (_hx_tmp131 + (this->m24 * (int)0));
HXDLIN( 618)				this->m24 = ((((t215 * (int)0) + (t225 * (int)0)) + (t235 * (int)0)) + this->m24);
HXDLIN( 618)				this->m25 = ((((t215 * (int)0) + (t225 * (int)0)) + (t235 * (int)0)) + (t245 * (int)0));
HXDLIN( 618)				Float t315 = this->m31;
HXDLIN( 618)				Float t325 = this->m32;
HXDLIN( 618)				Float t335 = this->m33;
HXDLIN( 618)				Float t345 = this->m34;
HXDLIN( 618)				Float _hx_tmp132 = (this->m31 * ((Float)0.967));
HXDLIN( 618)				Float _hx_tmp133 = (_hx_tmp132 + (this->m32 * (int)0));
HXDLIN( 618)				Float _hx_tmp134 = (_hx_tmp133 + (this->m33 * (int)0));
HXDLIN( 618)				this->m31 = (_hx_tmp134 + (this->m34 * (int)0));
HXDLIN( 618)				Float _hx_tmp135 = ((t315 * ((Float)0.033)) + (this->m32 * ((Float)0.733)));
HXDLIN( 618)				Float _hx_tmp136 = (_hx_tmp135 + (this->m33 * ((Float)0.183)));
HXDLIN( 618)				this->m32 = (_hx_tmp136 + (this->m34 * (int)0));
HXDLIN( 618)				Float _hx_tmp137 = (((t315 * (int)0) + (t325 * ((Float)0.267))) + (this->m33 * ((Float)0.817)));
HXDLIN( 618)				this->m33 = (_hx_tmp137 + (this->m34 * (int)0));
HXDLIN( 618)				this->m34 = ((((t315 * (int)0) + (t325 * (int)0)) + (t335 * (int)0)) + this->m34);
HXDLIN( 618)				this->m35 = ((((t315 * (int)0) + (t325 * (int)0)) + (t335 * (int)0)) + (t345 * (int)0));
HXDLIN( 618)				Float t415 = this->m41;
HXDLIN( 618)				Float t425 = this->m42;
HXDLIN( 618)				Float t435 = this->m43;
HXDLIN( 618)				Float t445 = this->m44;
HXDLIN( 618)				Float _hx_tmp138 = (this->m41 * ((Float)0.967));
HXDLIN( 618)				Float _hx_tmp139 = (_hx_tmp138 + (this->m42 * (int)0));
HXDLIN( 618)				Float _hx_tmp140 = (_hx_tmp139 + (this->m43 * (int)0));
HXDLIN( 618)				this->m41 = (_hx_tmp140 + (this->m44 * (int)0));
HXDLIN( 618)				Float _hx_tmp141 = ((t415 * ((Float)0.033)) + (this->m42 * ((Float)0.733)));
HXDLIN( 618)				Float _hx_tmp142 = (_hx_tmp141 + (this->m43 * ((Float)0.183)));
HXDLIN( 618)				this->m42 = (_hx_tmp142 + (this->m44 * (int)0));
HXDLIN( 618)				Float _hx_tmp143 = (((t415 * (int)0) + (t425 * ((Float)0.267))) + (this->m43 * ((Float)0.817)));
HXDLIN( 618)				this->m43 = (_hx_tmp143 + (this->m44 * (int)0));
HXDLIN( 618)				this->m44 = ((((t415 * (int)0) + (t425 * (int)0)) + (t435 * (int)0)) + this->m44);
HXDLIN( 618)				this->m45 = ((((t415 * (int)0) + (t425 * (int)0)) + (t435 * (int)0)) + (t445 * (int)0));
            			}
            			break;
            			case (int)6: {
HXLINE( 619)				Float t116 = this->m11;
HXDLIN( 619)				Float t126 = this->m12;
HXDLIN( 619)				Float t136 = this->m13;
HXDLIN( 619)				Float t146 = this->m14;
HXDLIN( 619)				Float _hx_tmp144 = (this->m11 * ((Float)0.299));
HXDLIN( 619)				Float _hx_tmp145 = (_hx_tmp144 + (this->m12 * ((Float)0.299)));
HXDLIN( 619)				Float _hx_tmp146 = (_hx_tmp145 + (this->m13 * ((Float)0.299)));
HXDLIN( 619)				this->m11 = (_hx_tmp146 + (this->m14 * (int)0));
HXDLIN( 619)				Float _hx_tmp147 = ((t116 * ((Float)0.587)) + (this->m12 * ((Float)0.587)));
HXDLIN( 619)				Float _hx_tmp148 = (_hx_tmp147 + (this->m13 * ((Float)0.587)));
HXDLIN( 619)				this->m12 = (_hx_tmp148 + (this->m14 * (int)0));
HXDLIN( 619)				Float _hx_tmp149 = (((t116 * ((Float)0.114)) + (t126 * ((Float)0.114))) + (this->m13 * ((Float)0.114)));
HXDLIN( 619)				this->m13 = (_hx_tmp149 + (this->m14 * (int)0));
HXDLIN( 619)				this->m14 = ((((t116 * (int)0) + (t126 * (int)0)) + (t136 * (int)0)) + this->m14);
HXDLIN( 619)				this->m15 = ((((t116 * (int)0) + (t126 * (int)0)) + (t136 * (int)0)) + (t146 * (int)0));
HXDLIN( 619)				Float t216 = this->m21;
HXDLIN( 619)				Float t226 = this->m22;
HXDLIN( 619)				Float t236 = this->m23;
HXDLIN( 619)				Float t246 = this->m24;
HXDLIN( 619)				Float _hx_tmp150 = (this->m21 * ((Float)0.299));
HXDLIN( 619)				Float _hx_tmp151 = (_hx_tmp150 + (this->m22 * ((Float)0.299)));
HXDLIN( 619)				Float _hx_tmp152 = (_hx_tmp151 + (this->m23 * ((Float)0.299)));
HXDLIN( 619)				this->m21 = (_hx_tmp152 + (this->m24 * (int)0));
HXDLIN( 619)				Float _hx_tmp153 = ((t216 * ((Float)0.587)) + (this->m22 * ((Float)0.587)));
HXDLIN( 619)				Float _hx_tmp154 = (_hx_tmp153 + (this->m23 * ((Float)0.587)));
HXDLIN( 619)				this->m22 = (_hx_tmp154 + (this->m24 * (int)0));
HXDLIN( 619)				Float _hx_tmp155 = (((t216 * ((Float)0.114)) + (t226 * ((Float)0.114))) + (this->m23 * ((Float)0.114)));
HXDLIN( 619)				this->m23 = (_hx_tmp155 + (this->m24 * (int)0));
HXDLIN( 619)				this->m24 = ((((t216 * (int)0) + (t226 * (int)0)) + (t236 * (int)0)) + this->m24);
HXDLIN( 619)				this->m25 = ((((t216 * (int)0) + (t226 * (int)0)) + (t236 * (int)0)) + (t246 * (int)0));
HXDLIN( 619)				Float t316 = this->m31;
HXDLIN( 619)				Float t326 = this->m32;
HXDLIN( 619)				Float t336 = this->m33;
HXDLIN( 619)				Float t346 = this->m34;
HXDLIN( 619)				Float _hx_tmp156 = (this->m31 * ((Float)0.299));
HXDLIN( 619)				Float _hx_tmp157 = (_hx_tmp156 + (this->m32 * ((Float)0.299)));
HXDLIN( 619)				Float _hx_tmp158 = (_hx_tmp157 + (this->m33 * ((Float)0.299)));
HXDLIN( 619)				this->m31 = (_hx_tmp158 + (this->m34 * (int)0));
HXDLIN( 619)				Float _hx_tmp159 = ((t316 * ((Float)0.587)) + (this->m32 * ((Float)0.587)));
HXDLIN( 619)				Float _hx_tmp160 = (_hx_tmp159 + (this->m33 * ((Float)0.587)));
HXDLIN( 619)				this->m32 = (_hx_tmp160 + (this->m34 * (int)0));
HXDLIN( 619)				Float _hx_tmp161 = (((t316 * ((Float)0.114)) + (t326 * ((Float)0.114))) + (this->m33 * ((Float)0.114)));
HXDLIN( 619)				this->m33 = (_hx_tmp161 + (this->m34 * (int)0));
HXDLIN( 619)				this->m34 = ((((t316 * (int)0) + (t326 * (int)0)) + (t336 * (int)0)) + this->m34);
HXDLIN( 619)				this->m35 = ((((t316 * (int)0) + (t326 * (int)0)) + (t336 * (int)0)) + (t346 * (int)0));
HXDLIN( 619)				Float t416 = this->m41;
HXDLIN( 619)				Float t426 = this->m42;
HXDLIN( 619)				Float t436 = this->m43;
HXDLIN( 619)				Float t446 = this->m44;
HXDLIN( 619)				Float _hx_tmp162 = (this->m41 * ((Float)0.299));
HXDLIN( 619)				Float _hx_tmp163 = (_hx_tmp162 + (this->m42 * ((Float)0.299)));
HXDLIN( 619)				Float _hx_tmp164 = (_hx_tmp163 + (this->m43 * ((Float)0.299)));
HXDLIN( 619)				this->m41 = (_hx_tmp164 + (this->m44 * (int)0));
HXDLIN( 619)				Float _hx_tmp165 = ((t416 * ((Float)0.587)) + (this->m42 * ((Float)0.587)));
HXDLIN( 619)				Float _hx_tmp166 = (_hx_tmp165 + (this->m43 * ((Float)0.587)));
HXDLIN( 619)				this->m42 = (_hx_tmp166 + (this->m44 * (int)0));
HXDLIN( 619)				Float _hx_tmp167 = (((t416 * ((Float)0.114)) + (t426 * ((Float)0.114))) + (this->m43 * ((Float)0.114)));
HXDLIN( 619)				this->m43 = (_hx_tmp167 + (this->m44 * (int)0));
HXDLIN( 619)				this->m44 = ((((t416 * (int)0) + (t426 * (int)0)) + (t436 * (int)0)) + this->m44);
HXDLIN( 619)				this->m45 = ((((t416 * (int)0) + (t426 * (int)0)) + (t436 * (int)0)) + (t446 * (int)0));
            			}
            			break;
            			case (int)7: {
HXLINE( 620)				Float t117 = this->m11;
HXDLIN( 620)				Float t127 = this->m12;
HXDLIN( 620)				Float t137 = this->m13;
HXDLIN( 620)				Float t147 = this->m14;
HXDLIN( 620)				Float _hx_tmp168 = (this->m11 * ((Float)0.618));
HXDLIN( 620)				Float _hx_tmp169 = (_hx_tmp168 + (this->m12 * ((Float)0.163)));
HXDLIN( 620)				Float _hx_tmp170 = (_hx_tmp169 + (this->m13 * ((Float)0.163)));
HXDLIN( 620)				this->m11 = (_hx_tmp170 + (this->m14 * (int)0));
HXDLIN( 620)				Float _hx_tmp171 = ((t117 * ((Float)0.320)) + (this->m12 * ((Float)0.775)));
HXDLIN( 620)				Float _hx_tmp172 = (_hx_tmp171 + (this->m13 * ((Float)0.320)));
HXDLIN( 620)				this->m12 = (_hx_tmp172 + (this->m14 * (int)0));
HXDLIN( 620)				Float _hx_tmp173 = (((t117 * ((Float)0.062)) + (t127 * ((Float)0.062))) + (this->m13 * ((Float)0.516)));
HXDLIN( 620)				this->m13 = (_hx_tmp173 + (this->m14 * (int)0));
HXDLIN( 620)				this->m14 = ((((t117 * (int)0) + (t127 * (int)0)) + (t137 * (int)0)) + this->m14);
HXDLIN( 620)				this->m15 = ((((t117 * (int)0) + (t127 * (int)0)) + (t137 * (int)0)) + (t147 * (int)0));
HXDLIN( 620)				Float t217 = this->m21;
HXDLIN( 620)				Float t227 = this->m22;
HXDLIN( 620)				Float t237 = this->m23;
HXDLIN( 620)				Float t247 = this->m24;
HXDLIN( 620)				Float _hx_tmp174 = (this->m21 * ((Float)0.618));
HXDLIN( 620)				Float _hx_tmp175 = (_hx_tmp174 + (this->m22 * ((Float)0.163)));
HXDLIN( 620)				Float _hx_tmp176 = (_hx_tmp175 + (this->m23 * ((Float)0.163)));
HXDLIN( 620)				this->m21 = (_hx_tmp176 + (this->m24 * (int)0));
HXDLIN( 620)				Float _hx_tmp177 = ((t217 * ((Float)0.320)) + (this->m22 * ((Float)0.775)));
HXDLIN( 620)				Float _hx_tmp178 = (_hx_tmp177 + (this->m23 * ((Float)0.320)));
HXDLIN( 620)				this->m22 = (_hx_tmp178 + (this->m24 * (int)0));
HXDLIN( 620)				Float _hx_tmp179 = (((t217 * ((Float)0.062)) + (t227 * ((Float)0.062))) + (this->m23 * ((Float)0.516)));
HXDLIN( 620)				this->m23 = (_hx_tmp179 + (this->m24 * (int)0));
HXDLIN( 620)				this->m24 = ((((t217 * (int)0) + (t227 * (int)0)) + (t237 * (int)0)) + this->m24);
HXDLIN( 620)				this->m25 = ((((t217 * (int)0) + (t227 * (int)0)) + (t237 * (int)0)) + (t247 * (int)0));
HXDLIN( 620)				Float t317 = this->m31;
HXDLIN( 620)				Float t327 = this->m32;
HXDLIN( 620)				Float t337 = this->m33;
HXDLIN( 620)				Float t347 = this->m34;
HXDLIN( 620)				Float _hx_tmp180 = (this->m31 * ((Float)0.618));
HXDLIN( 620)				Float _hx_tmp181 = (_hx_tmp180 + (this->m32 * ((Float)0.163)));
HXDLIN( 620)				Float _hx_tmp182 = (_hx_tmp181 + (this->m33 * ((Float)0.163)));
HXDLIN( 620)				this->m31 = (_hx_tmp182 + (this->m34 * (int)0));
HXDLIN( 620)				Float _hx_tmp183 = ((t317 * ((Float)0.320)) + (this->m32 * ((Float)0.775)));
HXDLIN( 620)				Float _hx_tmp184 = (_hx_tmp183 + (this->m33 * ((Float)0.320)));
HXDLIN( 620)				this->m32 = (_hx_tmp184 + (this->m34 * (int)0));
HXDLIN( 620)				Float _hx_tmp185 = (((t317 * ((Float)0.062)) + (t327 * ((Float)0.062))) + (this->m33 * ((Float)0.516)));
HXDLIN( 620)				this->m33 = (_hx_tmp185 + (this->m34 * (int)0));
HXDLIN( 620)				this->m34 = ((((t317 * (int)0) + (t327 * (int)0)) + (t337 * (int)0)) + this->m34);
HXDLIN( 620)				this->m35 = ((((t317 * (int)0) + (t327 * (int)0)) + (t337 * (int)0)) + (t347 * (int)0));
HXDLIN( 620)				Float t417 = this->m41;
HXDLIN( 620)				Float t427 = this->m42;
HXDLIN( 620)				Float t437 = this->m43;
HXDLIN( 620)				Float t447 = this->m44;
HXDLIN( 620)				Float _hx_tmp186 = (this->m41 * ((Float)0.618));
HXDLIN( 620)				Float _hx_tmp187 = (_hx_tmp186 + (this->m42 * ((Float)0.163)));
HXDLIN( 620)				Float _hx_tmp188 = (_hx_tmp187 + (this->m43 * ((Float)0.163)));
HXDLIN( 620)				this->m41 = (_hx_tmp188 + (this->m44 * (int)0));
HXDLIN( 620)				Float _hx_tmp189 = ((t417 * ((Float)0.320)) + (this->m42 * ((Float)0.775)));
HXDLIN( 620)				Float _hx_tmp190 = (_hx_tmp189 + (this->m43 * ((Float)0.320)));
HXDLIN( 620)				this->m42 = (_hx_tmp190 + (this->m44 * (int)0));
HXDLIN( 620)				Float _hx_tmp191 = (((t417 * ((Float)0.062)) + (t427 * ((Float)0.062))) + (this->m43 * ((Float)0.516)));
HXDLIN( 620)				this->m43 = (_hx_tmp191 + (this->m44 * (int)0));
HXDLIN( 620)				this->m44 = ((((t417 * (int)0) + (t427 * (int)0)) + (t437 * (int)0)) + this->m44);
HXDLIN( 620)				this->m45 = ((((t417 * (int)0) + (t427 * (int)0)) + (t437 * (int)0)) + (t447 * (int)0));
            			}
            			break;
            		}
HXLINE( 622)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,applyColorDeficiency,return )

 ::com::stencyl::utils::ARGB ColorMatrix_obj::applyMatrix( ::com::stencyl::utils::ARGB argb, ::com::stencyl::utils::ARGB out){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_626_applyMatrix)
HXLINE( 627)		Float a = argb->a;
HXLINE( 628)		Float r = argb->r;
HXLINE( 629)		Float g = argb->g;
HXLINE( 630)		Float b = argb->b;
HXLINE( 632)		Float a2 = (((Float)0.5) + (r * this->m41));
HXDLIN( 632)		Float a21 = (a2 + (g * this->m42));
HXDLIN( 632)		Float a22 = (a21 + (b * this->m43));
HXDLIN( 632)		Float a23 = ::com::stencyl::utils::Utils_obj::clamp(::Std_obj::_hx_int(((a22 + (a * this->m44)) + this->m45)),(int)0,(int)255);
HXLINE( 633)		Float r2 = (((Float)0.5) + (r * this->m11));
HXDLIN( 633)		Float r21 = (r2 + (g * this->m12));
HXDLIN( 633)		Float r22 = (r21 + (b * this->m13));
HXDLIN( 633)		Float r23 = ::com::stencyl::utils::Utils_obj::clamp(::Std_obj::_hx_int(((r22 + (a * this->m14)) + this->m15)),(int)0,(int)255);
HXLINE( 634)		Float g2 = (((Float)0.5) + (r * this->m21));
HXDLIN( 634)		Float g21 = (g2 + (g * this->m22));
HXDLIN( 634)		Float g22 = (g21 + (b * this->m23));
HXDLIN( 634)		Float g23 = ::com::stencyl::utils::Utils_obj::clamp(::Std_obj::_hx_int(((g22 + (a * this->m24)) + this->m25)),(int)0,(int)255);
HXLINE( 635)		Float b2 = (((Float)0.5) + (r * this->m31));
HXDLIN( 635)		Float b21 = (b2 + (g * this->m32));
HXDLIN( 635)		Float b22 = (b21 + (b * this->m33));
HXDLIN( 635)		Float b23 = ::com::stencyl::utils::Utils_obj::clamp(::Std_obj::_hx_int(((b22 + (a * this->m34)) + this->m35)),(int)0,(int)255);
HXLINE( 637)		{
HXLINE( 637)			out->a = a23;
HXDLIN( 637)			out->r = r23;
HXDLIN( 637)			out->g = g23;
HXDLIN( 637)			out->b = b23;
            		}
HXLINE( 638)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_obj,applyMatrix,return )

::Array< Float > ColorMatrix_obj::transformVector(::Array< Float > values){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_646_transformVector)
HXLINE( 647)		Float v0 = values->__get((int)0);
HXLINE( 648)		Float v1 = values->__get((int)1);
HXLINE( 649)		Float v2 = values->__get((int)2);
HXLINE( 650)		Float v3 = values->__get((int)3);
HXLINE( 652)		Float r = (v0 * this->m11);
HXDLIN( 652)		Float r1 = (r + (v1 * this->m12));
HXDLIN( 652)		Float r2 = (r1 + (v2 * this->m13));
HXDLIN( 652)		Float r3 = ((r2 + (v3 * this->m14)) + this->m15);
HXLINE( 653)		Float g = (v0 * this->m21);
HXDLIN( 653)		Float g1 = (g + (v1 * this->m22));
HXDLIN( 653)		Float g2 = (g1 + (v2 * this->m23));
HXDLIN( 653)		Float g3 = ((g2 + (v3 * this->m24)) + this->m25);
HXLINE( 654)		Float b = (v0 * this->m31);
HXDLIN( 654)		Float b1 = (b + (v1 * this->m32));
HXDLIN( 654)		Float b2 = (b1 + (v2 * this->m33));
HXDLIN( 654)		Float b3 = ((b2 + (v3 * this->m34)) + this->m35);
HXLINE( 655)		Float a = (v0 * this->m41);
HXDLIN( 655)		Float a1 = (a + (v1 * this->m42));
HXDLIN( 655)		Float a2 = (a1 + (v2 * this->m43));
HXDLIN( 655)		Float a3 = ((a2 + (v3 * this->m44)) + this->m45);
HXLINE( 657)		values[(int)0] = r3;
HXLINE( 658)		values[(int)1] = g3;
HXLINE( 659)		values[(int)2] = b3;
HXLINE( 660)		values[(int)3] = a3;
HXLINE( 662)		return values;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,transformVector,return )

void ColorMatrix_obj::initHue(){
            	HX_GC_STACKFRAME(&_hx_pos_40551333bb1ead78_666_initHue)
HXLINE( 667)		Float greenRotation = ((Float)39.182655);
HXLINE( 669)		if (!(this->hueInitialized)) {
HXLINE( 671)			this->hueInitialized = true;
HXLINE( 672)			this->preHue =  ::com::stencyl::utils::ColorMatrix_obj::__alloc( HX_CTX );
HXLINE( 673)			this->preHue->rotateRed(((Float)45.0));
HXLINE( 674)			this->preHue->rotateGreen(-(greenRotation));
HXLINE( 679)			::Array< Float > lum = ::Array_obj< Float >::__new();
HXLINE( 681)			lum[(int)0] = ::com::stencyl::utils::ColorMatrix_obj::LUMA_R2;
HXLINE( 682)			lum[(int)1] = ::com::stencyl::utils::ColorMatrix_obj::LUMA_G2;
HXLINE( 683)			lum[(int)2] = ::com::stencyl::utils::ColorMatrix_obj::LUMA_B2;
HXLINE( 684)			lum[(int)3] = ((Float)1.0);
HXLINE( 686)			this->preHue->transformVector(lum);
HXLINE( 688)			Float red = ((Float)lum->__get((int)0) / (Float)lum->__get((int)2));
HXLINE( 689)			Float green = ((Float)lum->__get((int)1) / (Float)lum->__get((int)2));
HXLINE( 691)			this->preHue->shearBlue(red,green);
HXLINE( 693)			this->postHue =  ::com::stencyl::utils::ColorMatrix_obj::__alloc( HX_CTX );
HXLINE( 694)			this->postHue->shearBlue(-(red),-(green));
HXLINE( 695)			this->postHue->rotateGreen(greenRotation);
HXLINE( 696)			this->postHue->rotateRed(((Float)-45.0));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorMatrix_obj,initHue,(void))

::Array< Float > ColorMatrix_obj::toArray(::Array< Float > out){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_701_toArray)
HXLINE( 702)		out[(int)0] = this->m11;
HXDLIN( 702)		out[(int)1] = this->m12;
HXDLIN( 702)		out[(int)2] = this->m13;
HXDLIN( 702)		out[(int)3] = this->m14;
HXDLIN( 702)		out[(int)4] = this->m15;
HXLINE( 703)		out[(int)5] = this->m21;
HXDLIN( 703)		out[(int)6] = this->m22;
HXDLIN( 703)		out[(int)7] = this->m23;
HXDLIN( 703)		out[(int)8] = this->m24;
HXDLIN( 703)		out[(int)9] = this->m25;
HXLINE( 704)		out[(int)10] = this->m31;
HXDLIN( 704)		out[(int)11] = this->m32;
HXDLIN( 704)		out[(int)12] = this->m33;
HXDLIN( 704)		out[(int)13] = this->m34;
HXDLIN( 704)		out[(int)14] = this->m35;
HXLINE( 705)		out[(int)15] = this->m41;
HXDLIN( 705)		out[(int)16] = this->m42;
HXDLIN( 705)		out[(int)17] = this->m43;
HXDLIN( 705)		out[(int)18] = this->m44;
HXDLIN( 705)		out[(int)19] = this->m45;
HXLINE( 706)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_obj,toArray,return )

void ColorMatrix_obj::set(Float i11,Float i12,Float i13,Float i14,Float i15,Float i21,Float i22,Float i23,Float i24,Float i25,Float i31,Float i32,Float i33,Float i34,Float i35,Float i41,Float i42,Float i43,Float i44,Float i45){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_716_set)
HXLINE( 717)		this->m11 = i11;
HXDLIN( 717)		this->m12 = i12;
HXDLIN( 717)		this->m13 = i13;
HXDLIN( 717)		this->m14 = i14;
HXDLIN( 717)		this->m15 = i15;
HXLINE( 718)		this->m21 = i21;
HXDLIN( 718)		this->m22 = i22;
HXDLIN( 718)		this->m23 = i23;
HXDLIN( 718)		this->m24 = i24;
HXDLIN( 718)		this->m25 = i25;
HXLINE( 719)		this->m31 = i31;
HXDLIN( 719)		this->m32 = i32;
HXDLIN( 719)		this->m33 = i33;
HXDLIN( 719)		this->m34 = i34;
HXDLIN( 719)		this->m35 = i35;
HXLINE( 720)		this->m41 = i41;
HXDLIN( 720)		this->m42 = i42;
HXDLIN( 720)		this->m43 = i43;
HXDLIN( 720)		this->m44 = i44;
HXDLIN( 720)		this->m45 = i45;
            	}


HX_DEFINE_DYNAMIC_FUNC20(ColorMatrix_obj,set,(void))

void ColorMatrix_obj::mul(Float i11,Float i12,Float i13,Float i14,Float i15,Float i21,Float i22,Float i23,Float i24,Float i25,Float i31,Float i32,Float i33,Float i34,Float i35,Float i41,Float i42,Float i43,Float i44,Float i45){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_730_mul)
HXLINE( 731)		Float t11 = this->m11;
HXLINE( 732)		Float t12 = this->m12;
HXLINE( 733)		Float t13 = this->m13;
HXLINE( 734)		Float t14 = this->m14;
HXLINE( 736)		Float _hx_tmp = (this->m11 * i11);
HXDLIN( 736)		Float _hx_tmp1 = (_hx_tmp + (this->m12 * i21));
HXDLIN( 736)		Float _hx_tmp2 = (_hx_tmp1 + (this->m13 * i31));
HXDLIN( 736)		this->m11 = (_hx_tmp2 + (this->m14 * i41));
HXLINE( 737)		Float _hx_tmp3 = ((t11 * i12) + (this->m12 * i22));
HXDLIN( 737)		Float _hx_tmp4 = (_hx_tmp3 + (this->m13 * i32));
HXDLIN( 737)		this->m12 = (_hx_tmp4 + (this->m14 * i42));
HXLINE( 738)		Float _hx_tmp5 = (((t11 * i13) + (t12 * i23)) + (this->m13 * i33));
HXDLIN( 738)		this->m13 = (_hx_tmp5 + (this->m14 * i43));
HXLINE( 739)		this->m14 = ((((t11 * i14) + (t12 * i24)) + (t13 * i34)) + (this->m14 * i44));
HXLINE( 740)		this->m15 = ((((t11 * i15) + (t12 * i25)) + (t13 * i35)) + (t14 * i45));
HXLINE( 742)		Float t21 = this->m21;
HXLINE( 743)		Float t22 = this->m22;
HXLINE( 744)		Float t23 = this->m23;
HXLINE( 745)		Float t24 = this->m24;
HXLINE( 747)		Float _hx_tmp6 = (this->m21 * i11);
HXDLIN( 747)		Float _hx_tmp7 = (_hx_tmp6 + (this->m22 * i21));
HXDLIN( 747)		Float _hx_tmp8 = (_hx_tmp7 + (this->m23 * i31));
HXDLIN( 747)		this->m21 = (_hx_tmp8 + (this->m24 * i41));
HXLINE( 748)		Float _hx_tmp9 = ((t21 * i12) + (this->m22 * i22));
HXDLIN( 748)		Float _hx_tmp10 = (_hx_tmp9 + (this->m23 * i32));
HXDLIN( 748)		this->m22 = (_hx_tmp10 + (this->m24 * i42));
HXLINE( 749)		Float _hx_tmp11 = (((t21 * i13) + (t22 * i23)) + (this->m23 * i33));
HXDLIN( 749)		this->m23 = (_hx_tmp11 + (this->m24 * i43));
HXLINE( 750)		this->m24 = ((((t21 * i14) + (t22 * i24)) + (t23 * i34)) + (this->m24 * i44));
HXLINE( 751)		this->m25 = ((((t21 * i15) + (t22 * i25)) + (t23 * i35)) + (t24 * i45));
HXLINE( 753)		Float t31 = this->m31;
HXLINE( 754)		Float t32 = this->m32;
HXLINE( 755)		Float t33 = this->m33;
HXLINE( 756)		Float t34 = this->m34;
HXLINE( 758)		Float _hx_tmp12 = (this->m31 * i11);
HXDLIN( 758)		Float _hx_tmp13 = (_hx_tmp12 + (this->m32 * i21));
HXDLIN( 758)		Float _hx_tmp14 = (_hx_tmp13 + (this->m33 * i31));
HXDLIN( 758)		this->m31 = (_hx_tmp14 + (this->m34 * i41));
HXLINE( 759)		Float _hx_tmp15 = ((t31 * i12) + (this->m32 * i22));
HXDLIN( 759)		Float _hx_tmp16 = (_hx_tmp15 + (this->m33 * i32));
HXDLIN( 759)		this->m32 = (_hx_tmp16 + (this->m34 * i42));
HXLINE( 760)		Float _hx_tmp17 = (((t31 * i13) + (t32 * i23)) + (this->m33 * i33));
HXDLIN( 760)		this->m33 = (_hx_tmp17 + (this->m34 * i43));
HXLINE( 761)		this->m34 = ((((t31 * i14) + (t32 * i24)) + (t33 * i34)) + (this->m34 * i44));
HXLINE( 762)		this->m35 = ((((t31 * i15) + (t32 * i25)) + (t33 * i35)) + (t34 * i45));
HXLINE( 764)		Float t41 = this->m41;
HXLINE( 765)		Float t42 = this->m42;
HXLINE( 766)		Float t43 = this->m43;
HXLINE( 767)		Float t44 = this->m44;
HXLINE( 769)		Float _hx_tmp18 = (this->m41 * i11);
HXDLIN( 769)		Float _hx_tmp19 = (_hx_tmp18 + (this->m42 * i21));
HXDLIN( 769)		Float _hx_tmp20 = (_hx_tmp19 + (this->m43 * i31));
HXDLIN( 769)		this->m41 = (_hx_tmp20 + (this->m44 * i41));
HXLINE( 770)		Float _hx_tmp21 = ((t41 * i12) + (this->m42 * i22));
HXDLIN( 770)		Float _hx_tmp22 = (_hx_tmp21 + (this->m43 * i32));
HXDLIN( 770)		this->m42 = (_hx_tmp22 + (this->m44 * i42));
HXLINE( 771)		Float _hx_tmp23 = (((t41 * i13) + (t42 * i23)) + (this->m43 * i33));
HXDLIN( 771)		this->m43 = (_hx_tmp23 + (this->m44 * i43));
HXLINE( 772)		this->m44 = ((((t41 * i14) + (t42 * i24)) + (t43 * i34)) + (this->m44 * i44));
HXLINE( 773)		this->m45 = ((((t41 * i15) + (t42 * i25)) + (t43 * i35)) + (t44 * i45));
            	}


HX_DEFINE_DYNAMIC_FUNC20(ColorMatrix_obj,mul,(void))

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::mulMatrixMatrix( ::com::stencyl::utils::ColorMatrix A, ::com::stencyl::utils::ColorMatrix B, ::com::stencyl::utils::ColorMatrix C){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_87_mulMatrixMatrix)
HXLINE(  88)		Float t11 = A->m11;
HXLINE(  89)		Float t12 = A->m12;
HXLINE(  90)		Float t13 = A->m13;
HXLINE(  91)		Float t14 = A->m14;
HXLINE(  93)		Float _hx_tmp = (A->m11 * B->m11);
HXDLIN(  93)		Float _hx_tmp1 = (_hx_tmp + (A->m12 * B->m21));
HXDLIN(  93)		Float _hx_tmp2 = (_hx_tmp1 + (A->m13 * B->m31));
HXDLIN(  93)		C->m11 = (_hx_tmp2 + (A->m14 * B->m41));
HXLINE(  94)		Float _hx_tmp3 = (t11 * B->m12);
HXDLIN(  94)		Float _hx_tmp4 = (_hx_tmp3 + (A->m12 * B->m22));
HXDLIN(  94)		Float _hx_tmp5 = (_hx_tmp4 + (A->m13 * B->m32));
HXDLIN(  94)		C->m12 = (_hx_tmp5 + (A->m14 * B->m42));
HXLINE(  95)		Float _hx_tmp6 = (t11 * B->m13);
HXDLIN(  95)		Float _hx_tmp7 = (_hx_tmp6 + (t12 * B->m23));
HXDLIN(  95)		Float _hx_tmp8 = (_hx_tmp7 + (A->m13 * B->m33));
HXDLIN(  95)		C->m13 = (_hx_tmp8 + (A->m14 * B->m43));
HXLINE(  96)		Float _hx_tmp9 = (t11 * B->m14);
HXDLIN(  96)		Float _hx_tmp10 = (_hx_tmp9 + (t12 * B->m24));
HXDLIN(  96)		Float _hx_tmp11 = (_hx_tmp10 + (t13 * B->m34));
HXDLIN(  96)		C->m14 = (_hx_tmp11 + (A->m14 * B->m44));
HXLINE(  97)		Float _hx_tmp12 = (t11 * B->m15);
HXDLIN(  97)		Float _hx_tmp13 = (_hx_tmp12 + (t12 * B->m25));
HXDLIN(  97)		Float _hx_tmp14 = (_hx_tmp13 + (t13 * B->m35));
HXDLIN(  97)		C->m15 = (_hx_tmp14 + (t14 * B->m45));
HXLINE(  99)		Float t21 = A->m21;
HXLINE( 100)		Float t22 = A->m22;
HXLINE( 101)		Float t23 = A->m23;
HXLINE( 102)		Float t24 = A->m24;
HXLINE( 104)		Float _hx_tmp15 = (A->m21 * B->m11);
HXDLIN( 104)		Float _hx_tmp16 = (_hx_tmp15 + (A->m22 * B->m21));
HXDLIN( 104)		Float _hx_tmp17 = (_hx_tmp16 + (A->m23 * B->m31));
HXDLIN( 104)		C->m21 = (_hx_tmp17 + (A->m24 * B->m41));
HXLINE( 105)		Float _hx_tmp18 = (t21 * B->m12);
HXDLIN( 105)		Float _hx_tmp19 = (_hx_tmp18 + (A->m22 * B->m22));
HXDLIN( 105)		Float _hx_tmp20 = (_hx_tmp19 + (A->m23 * B->m32));
HXDLIN( 105)		C->m22 = (_hx_tmp20 + (A->m24 * B->m42));
HXLINE( 106)		Float _hx_tmp21 = (t21 * B->m13);
HXDLIN( 106)		Float _hx_tmp22 = (_hx_tmp21 + (t22 * B->m23));
HXDLIN( 106)		Float _hx_tmp23 = (_hx_tmp22 + (A->m23 * B->m33));
HXDLIN( 106)		C->m23 = (_hx_tmp23 + (A->m24 * B->m43));
HXLINE( 107)		Float _hx_tmp24 = (t21 * B->m14);
HXDLIN( 107)		Float _hx_tmp25 = (_hx_tmp24 + (t22 * B->m24));
HXDLIN( 107)		Float _hx_tmp26 = (_hx_tmp25 + (t23 * B->m34));
HXDLIN( 107)		C->m24 = (_hx_tmp26 + (A->m24 * B->m44));
HXLINE( 108)		Float _hx_tmp27 = (t21 * B->m15);
HXDLIN( 108)		Float _hx_tmp28 = (_hx_tmp27 + (t22 * B->m25));
HXDLIN( 108)		Float _hx_tmp29 = (_hx_tmp28 + (t23 * B->m35));
HXDLIN( 108)		C->m25 = (_hx_tmp29 + (t24 * B->m45));
HXLINE( 110)		Float t31 = A->m31;
HXLINE( 111)		Float t32 = A->m32;
HXLINE( 112)		Float t33 = A->m33;
HXLINE( 113)		Float t34 = A->m34;
HXLINE( 115)		Float _hx_tmp30 = (A->m31 * B->m11);
HXDLIN( 115)		Float _hx_tmp31 = (_hx_tmp30 + (A->m32 * B->m21));
HXDLIN( 115)		Float _hx_tmp32 = (_hx_tmp31 + (A->m33 * B->m31));
HXDLIN( 115)		C->m31 = (_hx_tmp32 + (A->m34 * B->m41));
HXLINE( 116)		Float _hx_tmp33 = (t31 * B->m12);
HXDLIN( 116)		Float _hx_tmp34 = (_hx_tmp33 + (A->m32 * B->m22));
HXDLIN( 116)		Float _hx_tmp35 = (_hx_tmp34 + (A->m33 * B->m32));
HXDLIN( 116)		C->m32 = (_hx_tmp35 + (A->m34 * B->m42));
HXLINE( 117)		Float _hx_tmp36 = (t31 * B->m13);
HXDLIN( 117)		Float _hx_tmp37 = (_hx_tmp36 + (t32 * B->m23));
HXDLIN( 117)		Float _hx_tmp38 = (_hx_tmp37 + (A->m33 * B->m33));
HXDLIN( 117)		C->m33 = (_hx_tmp38 + (A->m34 * B->m43));
HXLINE( 118)		Float _hx_tmp39 = (t31 * B->m14);
HXDLIN( 118)		Float _hx_tmp40 = (_hx_tmp39 + (t32 * B->m24));
HXDLIN( 118)		Float _hx_tmp41 = (_hx_tmp40 + (t33 * B->m34));
HXDLIN( 118)		C->m34 = (_hx_tmp41 + (A->m34 * B->m44));
HXLINE( 119)		Float _hx_tmp42 = (t31 * B->m15);
HXDLIN( 119)		Float _hx_tmp43 = (_hx_tmp42 + (t32 * B->m25));
HXDLIN( 119)		Float _hx_tmp44 = (_hx_tmp43 + (t33 * B->m35));
HXDLIN( 119)		C->m35 = (_hx_tmp44 + (t34 * B->m45));
HXLINE( 121)		Float t41 = A->m41;
HXLINE( 122)		Float t42 = A->m42;
HXLINE( 123)		Float t43 = A->m43;
HXLINE( 124)		Float t44 = A->m44;
HXLINE( 126)		Float _hx_tmp45 = (A->m41 * B->m11);
HXDLIN( 126)		Float _hx_tmp46 = (_hx_tmp45 + (A->m42 * B->m21));
HXDLIN( 126)		Float _hx_tmp47 = (_hx_tmp46 + (A->m43 * B->m31));
HXDLIN( 126)		C->m41 = (_hx_tmp47 + (A->m44 * B->m41));
HXLINE( 127)		Float _hx_tmp48 = (t41 * B->m12);
HXDLIN( 127)		Float _hx_tmp49 = (_hx_tmp48 + (A->m42 * B->m22));
HXDLIN( 127)		Float _hx_tmp50 = (_hx_tmp49 + (A->m43 * B->m32));
HXDLIN( 127)		C->m42 = (_hx_tmp50 + (A->m44 * B->m42));
HXLINE( 128)		Float _hx_tmp51 = (t41 * B->m13);
HXDLIN( 128)		Float _hx_tmp52 = (_hx_tmp51 + (t42 * B->m23));
HXDLIN( 128)		Float _hx_tmp53 = (_hx_tmp52 + (A->m43 * B->m33));
HXDLIN( 128)		C->m43 = (_hx_tmp53 + (A->m44 * B->m43));
HXLINE( 129)		Float _hx_tmp54 = (t41 * B->m14);
HXDLIN( 129)		Float _hx_tmp55 = (_hx_tmp54 + (t42 * B->m24));
HXDLIN( 129)		Float _hx_tmp56 = (_hx_tmp55 + (t43 * B->m34));
HXDLIN( 129)		C->m44 = (_hx_tmp56 + (A->m44 * B->m44));
HXLINE( 130)		Float _hx_tmp57 = (t41 * B->m15);
HXDLIN( 130)		Float _hx_tmp58 = (_hx_tmp57 + (t42 * B->m25));
HXDLIN( 130)		Float _hx_tmp59 = (_hx_tmp58 + (t43 * B->m35));
HXDLIN( 130)		C->m45 = (_hx_tmp59 + (t44 * B->m45));
HXLINE( 132)		return C;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorMatrix_obj,mulMatrixMatrix,return )

 ::com::stencyl::utils::ColorMatrix ColorMatrix_obj::blendMatrixMatrix( ::com::stencyl::utils::ColorMatrix A, ::com::stencyl::utils::ColorMatrix B, ::com::stencyl::utils::ColorMatrix C,Float amount){
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_136_blendMatrixMatrix)
HXLINE( 137)		Float inv_amount = ((int)1 - amount);
HXLINE( 139)		Float _hx_tmp = (inv_amount * A->m11);
HXDLIN( 139)		C->m11 = (_hx_tmp + (amount * B->m11));
HXLINE( 140)		Float _hx_tmp1 = (inv_amount * A->m12);
HXDLIN( 140)		C->m12 = (_hx_tmp1 + (amount * B->m12));
HXLINE( 141)		Float _hx_tmp2 = (inv_amount * A->m13);
HXDLIN( 141)		C->m13 = (_hx_tmp2 + (amount * B->m13));
HXLINE( 142)		Float _hx_tmp3 = (inv_amount * A->m14);
HXDLIN( 142)		C->m14 = (_hx_tmp3 + (amount * B->m14));
HXLINE( 143)		Float _hx_tmp4 = (inv_amount * A->m15);
HXDLIN( 143)		C->m15 = (_hx_tmp4 + (amount * B->m15));
HXLINE( 145)		Float _hx_tmp5 = (inv_amount * A->m21);
HXDLIN( 145)		C->m21 = (_hx_tmp5 + (amount * B->m21));
HXLINE( 146)		Float _hx_tmp6 = (inv_amount * A->m22);
HXDLIN( 146)		C->m22 = (_hx_tmp6 + (amount * B->m22));
HXLINE( 147)		Float _hx_tmp7 = (inv_amount * A->m23);
HXDLIN( 147)		C->m23 = (_hx_tmp7 + (amount * B->m23));
HXLINE( 148)		Float _hx_tmp8 = (inv_amount * A->m24);
HXDLIN( 148)		C->m24 = (_hx_tmp8 + (amount * B->m24));
HXLINE( 149)		Float _hx_tmp9 = (inv_amount * A->m25);
HXDLIN( 149)		C->m25 = (_hx_tmp9 + (amount * B->m25));
HXLINE( 151)		Float _hx_tmp10 = (inv_amount * A->m31);
HXDLIN( 151)		C->m31 = (_hx_tmp10 + (amount * B->m31));
HXLINE( 152)		Float _hx_tmp11 = (inv_amount * A->m32);
HXDLIN( 152)		C->m32 = (_hx_tmp11 + (amount * B->m32));
HXLINE( 153)		Float _hx_tmp12 = (inv_amount * A->m33);
HXDLIN( 153)		C->m33 = (_hx_tmp12 + (amount * B->m33));
HXLINE( 154)		Float _hx_tmp13 = (inv_amount * A->m34);
HXDLIN( 154)		C->m34 = (_hx_tmp13 + (amount * B->m34));
HXLINE( 155)		Float _hx_tmp14 = (inv_amount * A->m35);
HXDLIN( 155)		C->m35 = (_hx_tmp14 + (amount * B->m35));
HXLINE( 157)		Float _hx_tmp15 = (inv_amount * A->m41);
HXDLIN( 157)		C->m41 = (_hx_tmp15 + (amount * B->m41));
HXLINE( 158)		Float _hx_tmp16 = (inv_amount * A->m42);
HXDLIN( 158)		C->m42 = (_hx_tmp16 + (amount * B->m42));
HXLINE( 159)		Float _hx_tmp17 = (inv_amount * A->m43);
HXDLIN( 159)		C->m43 = (_hx_tmp17 + (amount * B->m43));
HXLINE( 160)		Float _hx_tmp18 = (inv_amount * A->m44);
HXDLIN( 160)		C->m44 = (_hx_tmp18 + (amount * B->m44));
HXLINE( 161)		Float _hx_tmp19 = (inv_amount * A->m45);
HXDLIN( 161)		C->m45 = (_hx_tmp19 + (amount * B->m45));
HXLINE( 163)		return C;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ColorMatrix_obj,blendMatrixMatrix,return )

Float ColorMatrix_obj::LUMA_R;

Float ColorMatrix_obj::LUMA_G;

Float ColorMatrix_obj::LUMA_B;

Float ColorMatrix_obj::LUMA_R2;

Float ColorMatrix_obj::LUMA_G2;

Float ColorMatrix_obj::LUMA_B2;

Float ColorMatrix_obj::INV3;


hx::ObjectPtr< ColorMatrix_obj > ColorMatrix_obj::__new() {
	hx::ObjectPtr< ColorMatrix_obj > __this = new ColorMatrix_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ColorMatrix_obj > ColorMatrix_obj::__alloc(hx::Ctx *_hx_ctx) {
	ColorMatrix_obj *__this = (ColorMatrix_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ColorMatrix_obj), true, "com.stencyl.utils.ColorMatrix"));
	*(void **)__this = ColorMatrix_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ColorMatrix_obj::ColorMatrix_obj()
{
}

void ColorMatrix_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColorMatrix);
	HX_MARK_MEMBER_NAME(m11,"m11");
	HX_MARK_MEMBER_NAME(m12,"m12");
	HX_MARK_MEMBER_NAME(m13,"m13");
	HX_MARK_MEMBER_NAME(m14,"m14");
	HX_MARK_MEMBER_NAME(m15,"m15");
	HX_MARK_MEMBER_NAME(m21,"m21");
	HX_MARK_MEMBER_NAME(m22,"m22");
	HX_MARK_MEMBER_NAME(m23,"m23");
	HX_MARK_MEMBER_NAME(m24,"m24");
	HX_MARK_MEMBER_NAME(m25,"m25");
	HX_MARK_MEMBER_NAME(m31,"m31");
	HX_MARK_MEMBER_NAME(m32,"m32");
	HX_MARK_MEMBER_NAME(m33,"m33");
	HX_MARK_MEMBER_NAME(m34,"m34");
	HX_MARK_MEMBER_NAME(m35,"m35");
	HX_MARK_MEMBER_NAME(m41,"m41");
	HX_MARK_MEMBER_NAME(m42,"m42");
	HX_MARK_MEMBER_NAME(m43,"m43");
	HX_MARK_MEMBER_NAME(m44,"m44");
	HX_MARK_MEMBER_NAME(m45,"m45");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(preHue,"preHue");
	HX_MARK_MEMBER_NAME(postHue,"postHue");
	HX_MARK_MEMBER_NAME(hueInitialized,"hueInitialized");
	HX_MARK_END_CLASS();
}

void ColorMatrix_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m11,"m11");
	HX_VISIT_MEMBER_NAME(m12,"m12");
	HX_VISIT_MEMBER_NAME(m13,"m13");
	HX_VISIT_MEMBER_NAME(m14,"m14");
	HX_VISIT_MEMBER_NAME(m15,"m15");
	HX_VISIT_MEMBER_NAME(m21,"m21");
	HX_VISIT_MEMBER_NAME(m22,"m22");
	HX_VISIT_MEMBER_NAME(m23,"m23");
	HX_VISIT_MEMBER_NAME(m24,"m24");
	HX_VISIT_MEMBER_NAME(m25,"m25");
	HX_VISIT_MEMBER_NAME(m31,"m31");
	HX_VISIT_MEMBER_NAME(m32,"m32");
	HX_VISIT_MEMBER_NAME(m33,"m33");
	HX_VISIT_MEMBER_NAME(m34,"m34");
	HX_VISIT_MEMBER_NAME(m35,"m35");
	HX_VISIT_MEMBER_NAME(m41,"m41");
	HX_VISIT_MEMBER_NAME(m42,"m42");
	HX_VISIT_MEMBER_NAME(m43,"m43");
	HX_VISIT_MEMBER_NAME(m44,"m44");
	HX_VISIT_MEMBER_NAME(m45,"m45");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(preHue,"preHue");
	HX_VISIT_MEMBER_NAME(postHue,"postHue");
	HX_VISIT_MEMBER_NAME(hueInitialized,"hueInitialized");
}

hx::Val ColorMatrix_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m11") ) { return hx::Val( m11 ); }
		if (HX_FIELD_EQ(inName,"m12") ) { return hx::Val( m12 ); }
		if (HX_FIELD_EQ(inName,"m13") ) { return hx::Val( m13 ); }
		if (HX_FIELD_EQ(inName,"m14") ) { return hx::Val( m14 ); }
		if (HX_FIELD_EQ(inName,"m15") ) { return hx::Val( m15 ); }
		if (HX_FIELD_EQ(inName,"m21") ) { return hx::Val( m21 ); }
		if (HX_FIELD_EQ(inName,"m22") ) { return hx::Val( m22 ); }
		if (HX_FIELD_EQ(inName,"m23") ) { return hx::Val( m23 ); }
		if (HX_FIELD_EQ(inName,"m24") ) { return hx::Val( m24 ); }
		if (HX_FIELD_EQ(inName,"m25") ) { return hx::Val( m25 ); }
		if (HX_FIELD_EQ(inName,"m31") ) { return hx::Val( m31 ); }
		if (HX_FIELD_EQ(inName,"m32") ) { return hx::Val( m32 ); }
		if (HX_FIELD_EQ(inName,"m33") ) { return hx::Val( m33 ); }
		if (HX_FIELD_EQ(inName,"m34") ) { return hx::Val( m34 ); }
		if (HX_FIELD_EQ(inName,"m35") ) { return hx::Val( m35 ); }
		if (HX_FIELD_EQ(inName,"m41") ) { return hx::Val( m41 ); }
		if (HX_FIELD_EQ(inName,"m42") ) { return hx::Val( m42 ); }
		if (HX_FIELD_EQ(inName,"m43") ) { return hx::Val( m43 ); }
		if (HX_FIELD_EQ(inName,"m44") ) { return hx::Val( m44 ); }
		if (HX_FIELD_EQ(inName,"m45") ) { return hx::Val( m45 ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"mul") ) { return hx::Val( mul_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix ); }
		if (HX_FIELD_EQ(inName,"preHue") ) { return hx::Val( preHue ); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"postHue") ) { return hx::Val( postHue ); }
		if (HX_FIELD_EQ(inName,"average") ) { return hx::Val( average_dyn() ); }
		if (HX_FIELD_EQ(inName,"initHue") ) { return hx::Val( initHue_dyn() ); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn() ); }
		if (HX_FIELD_EQ(inName,"colorize") ) { return hx::Val( colorize_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAlpha") ) { return hx::Val( setAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"shearRed") ) { return hx::Val( shearRed_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getFilter") ) { return hx::Val( getFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"adjustHue") ) { return hx::Val( adjustHue_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotateHue") ) { return hx::Val( rotateHue_dyn() ); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn() ); }
		if (HX_FIELD_EQ(inName,"rgb2Alpha") ) { return hx::Val( rgb2Alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotateRed") ) { return hx::Val( rotateRed_dyn() ); }
		if (HX_FIELD_EQ(inName,"shearBlue") ) { return hx::Val( shearBlue_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"desaturate") ) { return hx::Val( desaturate_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotateBlue") ) { return hx::Val( rotateBlue_dyn() ); }
		if (HX_FIELD_EQ(inName,"shearGreen") ) { return hx::Val( shearGreen_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setChannels") ) { return hx::Val( setChannels_dyn() ); }
		if (HX_FIELD_EQ(inName,"invertAlpha") ) { return hx::Val( invertAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotateGreen") ) { return hx::Val( rotateGreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyMatrix") ) { return hx::Val( applyMatrix_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"clearChannels") ) { return hx::Val( clearChannels_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"hueInitialized") ) { return hx::Val( hueInitialized ); }
		if (HX_FIELD_EQ(inName,"adjustContrast") ) { return hx::Val( adjustContrast_dyn() ); }
		if (HX_FIELD_EQ(inName,"thresholdAlpha") ) { return hx::Val( thresholdAlpha_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"luminance2Alpha") ) { return hx::Val( luminance2Alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformVector") ) { return hx::Val( transformVector_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"adjustSaturation") ) { return hx::Val( adjustSaturation_dyn() ); }
		if (HX_FIELD_EQ(inName,"adjustBrightness") ) { return hx::Val( adjustBrightness_dyn() ); }
		if (HX_FIELD_EQ(inName,"averageRGB2Alpha") ) { return hx::Val( averageRGB2Alpha_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"adjustContrastRGB") ) { return hx::Val( adjustContrastRGB_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMultiplicators") ) { return hx::Val( setMultiplicators_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"adjustBrightnessRGB") ) { return hx::Val( adjustBrightnessRGB_dyn() ); }
		if (HX_FIELD_EQ(inName,"adjustAlphaContrast") ) { return hx::Val( adjustAlphaContrast_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"applyColorDeficiency") ) { return hx::Val( applyColorDeficiency_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ColorMatrix_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"INV3") ) { outValue = ( INV3 ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"LUMA_R") ) { outValue = ( LUMA_R ); return true; }
		if (HX_FIELD_EQ(inName,"LUMA_G") ) { outValue = ( LUMA_G ); return true; }
		if (HX_FIELD_EQ(inName,"LUMA_B") ) { outValue = ( LUMA_B ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"LUMA_R2") ) { outValue = ( LUMA_R2 ); return true; }
		if (HX_FIELD_EQ(inName,"LUMA_G2") ) { outValue = ( LUMA_G2 ); return true; }
		if (HX_FIELD_EQ(inName,"LUMA_B2") ) { outValue = ( LUMA_B2 ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mulMatrixMatrix") ) { outValue = mulMatrixMatrix_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"blendMatrixMatrix") ) { outValue = blendMatrixMatrix_dyn(); return true; }
	}
	return false;
}

hx::Val ColorMatrix_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m11") ) { m11=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m12") ) { m12=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m13") ) { m13=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m14") ) { m14=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m15") ) { m15=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m21") ) { m21=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m22") ) { m22=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m23") ) { m23=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m24") ) { m24=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m25") ) { m25=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m31") ) { m31=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m32") ) { m32=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m33") ) { m33=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m34") ) { m34=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m35") ) { m35=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m41") ) { m41=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m42") ) { m42=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m43") ) { m43=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m44") ) { m44=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m45") ) { m45=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"preHue") ) { preHue=inValue.Cast<  ::com::stencyl::utils::ColorMatrix >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"postHue") ) { postHue=inValue.Cast<  ::com::stencyl::utils::ColorMatrix >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"hueInitialized") ) { hueInitialized=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ColorMatrix_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"INV3") ) { INV3=ioValue.Cast< Float >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"LUMA_R") ) { LUMA_R=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"LUMA_G") ) { LUMA_G=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"LUMA_B") ) { LUMA_B=ioValue.Cast< Float >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"LUMA_R2") ) { LUMA_R2=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"LUMA_G2") ) { LUMA_G2=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"LUMA_B2") ) { LUMA_B2=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void ColorMatrix_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m11","\x8d","\xe0","\x52","\x00"));
	outFields->push(HX_HCSTRING("m12","\x8e","\xe0","\x52","\x00"));
	outFields->push(HX_HCSTRING("m13","\x8f","\xe0","\x52","\x00"));
	outFields->push(HX_HCSTRING("m14","\x90","\xe0","\x52","\x00"));
	outFields->push(HX_HCSTRING("m15","\x91","\xe0","\x52","\x00"));
	outFields->push(HX_HCSTRING("m21","\x6c","\xe1","\x52","\x00"));
	outFields->push(HX_HCSTRING("m22","\x6d","\xe1","\x52","\x00"));
	outFields->push(HX_HCSTRING("m23","\x6e","\xe1","\x52","\x00"));
	outFields->push(HX_HCSTRING("m24","\x6f","\xe1","\x52","\x00"));
	outFields->push(HX_HCSTRING("m25","\x70","\xe1","\x52","\x00"));
	outFields->push(HX_HCSTRING("m31","\x4b","\xe2","\x52","\x00"));
	outFields->push(HX_HCSTRING("m32","\x4c","\xe2","\x52","\x00"));
	outFields->push(HX_HCSTRING("m33","\x4d","\xe2","\x52","\x00"));
	outFields->push(HX_HCSTRING("m34","\x4e","\xe2","\x52","\x00"));
	outFields->push(HX_HCSTRING("m35","\x4f","\xe2","\x52","\x00"));
	outFields->push(HX_HCSTRING("m41","\x2a","\xe3","\x52","\x00"));
	outFields->push(HX_HCSTRING("m42","\x2b","\xe3","\x52","\x00"));
	outFields->push(HX_HCSTRING("m43","\x2c","\xe3","\x52","\x00"));
	outFields->push(HX_HCSTRING("m44","\x2d","\xe3","\x52","\x00"));
	outFields->push(HX_HCSTRING("m45","\x2e","\xe3","\x52","\x00"));
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	outFields->push(HX_HCSTRING("preHue","\x55","\x20","\xa0","\xae"));
	outFields->push(HX_HCSTRING("postHue","\x38","\x80","\xf9","\x16"));
	outFields->push(HX_HCSTRING("hueInitialized","\x3c","\x07","\x2c","\x03"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ColorMatrix_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m11),HX_HCSTRING("m11","\x8d","\xe0","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m12),HX_HCSTRING("m12","\x8e","\xe0","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m13),HX_HCSTRING("m13","\x8f","\xe0","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m14),HX_HCSTRING("m14","\x90","\xe0","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m15),HX_HCSTRING("m15","\x91","\xe0","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m21),HX_HCSTRING("m21","\x6c","\xe1","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m22),HX_HCSTRING("m22","\x6d","\xe1","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m23),HX_HCSTRING("m23","\x6e","\xe1","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m24),HX_HCSTRING("m24","\x6f","\xe1","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m25),HX_HCSTRING("m25","\x70","\xe1","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m31),HX_HCSTRING("m31","\x4b","\xe2","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m32),HX_HCSTRING("m32","\x4c","\xe2","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m33),HX_HCSTRING("m33","\x4d","\xe2","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m34),HX_HCSTRING("m34","\x4e","\xe2","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m35),HX_HCSTRING("m35","\x4f","\xe2","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m41),HX_HCSTRING("m41","\x2a","\xe3","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m42),HX_HCSTRING("m42","\x2b","\xe3","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m43),HX_HCSTRING("m43","\x2c","\xe3","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m44),HX_HCSTRING("m44","\x2d","\xe3","\x52","\x00")},
	{hx::fsFloat,(int)offsetof(ColorMatrix_obj,m45),HX_HCSTRING("m45","\x2e","\xe3","\x52","\x00")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ColorMatrix_obj,matrix),HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{hx::fsObject /*::com::stencyl::utils::ColorMatrix*/ ,(int)offsetof(ColorMatrix_obj,preHue),HX_HCSTRING("preHue","\x55","\x20","\xa0","\xae")},
	{hx::fsObject /*::com::stencyl::utils::ColorMatrix*/ ,(int)offsetof(ColorMatrix_obj,postHue),HX_HCSTRING("postHue","\x38","\x80","\xf9","\x16")},
	{hx::fsBool,(int)offsetof(ColorMatrix_obj,hueInitialized),HX_HCSTRING("hueInitialized","\x3c","\x07","\x2c","\x03")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ColorMatrix_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &ColorMatrix_obj::LUMA_R,HX_HCSTRING("LUMA_R","\x70","\xce","\x45","\x87")},
	{hx::fsFloat,(void *) &ColorMatrix_obj::LUMA_G,HX_HCSTRING("LUMA_G","\x65","\xce","\x45","\x87")},
	{hx::fsFloat,(void *) &ColorMatrix_obj::LUMA_B,HX_HCSTRING("LUMA_B","\x60","\xce","\x45","\x87")},
	{hx::fsFloat,(void *) &ColorMatrix_obj::LUMA_R2,HX_HCSTRING("LUMA_R2","\xc2","\xd3","\xce","\xd5")},
	{hx::fsFloat,(void *) &ColorMatrix_obj::LUMA_G2,HX_HCSTRING("LUMA_G2","\x2d","\xca","\xce","\xd5")},
	{hx::fsFloat,(void *) &ColorMatrix_obj::LUMA_B2,HX_HCSTRING("LUMA_B2","\xd2","\xc5","\xce","\xd5")},
	{hx::fsFloat,(void *) &ColorMatrix_obj::INV3,HX_HCSTRING("INV3","\x42","\x0e","\x7c","\x30")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ColorMatrix_obj_sMemberFields[] = {
	HX_HCSTRING("m11","\x8d","\xe0","\x52","\x00"),
	HX_HCSTRING("m12","\x8e","\xe0","\x52","\x00"),
	HX_HCSTRING("m13","\x8f","\xe0","\x52","\x00"),
	HX_HCSTRING("m14","\x90","\xe0","\x52","\x00"),
	HX_HCSTRING("m15","\x91","\xe0","\x52","\x00"),
	HX_HCSTRING("m21","\x6c","\xe1","\x52","\x00"),
	HX_HCSTRING("m22","\x6d","\xe1","\x52","\x00"),
	HX_HCSTRING("m23","\x6e","\xe1","\x52","\x00"),
	HX_HCSTRING("m24","\x6f","\xe1","\x52","\x00"),
	HX_HCSTRING("m25","\x70","\xe1","\x52","\x00"),
	HX_HCSTRING("m31","\x4b","\xe2","\x52","\x00"),
	HX_HCSTRING("m32","\x4c","\xe2","\x52","\x00"),
	HX_HCSTRING("m33","\x4d","\xe2","\x52","\x00"),
	HX_HCSTRING("m34","\x4e","\xe2","\x52","\x00"),
	HX_HCSTRING("m35","\x4f","\xe2","\x52","\x00"),
	HX_HCSTRING("m41","\x2a","\xe3","\x52","\x00"),
	HX_HCSTRING("m42","\x2b","\xe3","\x52","\x00"),
	HX_HCSTRING("m43","\x2c","\xe3","\x52","\x00"),
	HX_HCSTRING("m44","\x2d","\xe3","\x52","\x00"),
	HX_HCSTRING("m45","\x2e","\xe3","\x52","\x00"),
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("preHue","\x55","\x20","\xa0","\xae"),
	HX_HCSTRING("postHue","\x38","\x80","\xf9","\x16"),
	HX_HCSTRING("hueInitialized","\x3c","\x07","\x2c","\x03"),
	HX_HCSTRING("getFilter","\xee","\xa8","\x8b","\x01"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("adjustSaturation","\x41","\x8d","\x61","\x03"),
	HX_HCSTRING("adjustBrightness","\x40","\x47","\x31","\x72"),
	HX_HCSTRING("adjustBrightnessRGB","\xad","\x37","\x21","\x5b"),
	HX_HCSTRING("adjustContrast","\xb1","\x1c","\x03","\x2a"),
	HX_HCSTRING("adjustContrastRGB","\xdc","\x9e","\x13","\xb1"),
	HX_HCSTRING("adjustHue","\x69","\x3f","\xca","\xc8"),
	HX_HCSTRING("luminance2Alpha","\xc4","\xa3","\x72","\x96"),
	HX_HCSTRING("adjustAlphaContrast","\x71","\x74","\x96","\x6f"),
	HX_HCSTRING("colorize","\xd1","\x65","\x00","\x8a"),
	HX_HCSTRING("rotateHue","\x1d","\xed","\x2c","\x6a"),
	HX_HCSTRING("setChannels","\x12","\x74","\x4f","\x9b"),
	HX_HCSTRING("average","\x5d","\x71","\xdb","\x62"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("desaturate","\x70","\x90","\x8c","\xd4"),
	HX_HCSTRING("setMultiplicators","\xf0","\x8b","\x25","\x90"),
	HX_HCSTRING("clearChannels","\xfd","\xac","\x4b","\x9e"),
	HX_HCSTRING("thresholdAlpha","\xb3","\x27","\xa4","\xc7"),
	HX_HCSTRING("averageRGB2Alpha","\x7c","\x03","\x32","\x7d"),
	HX_HCSTRING("invertAlpha","\x68","\xc0","\x1f","\xe2"),
	HX_HCSTRING("rgb2Alpha","\x99","\x44","\xa0","\x90"),
	HX_HCSTRING("setAlpha","\x5c","\x10","\xcb","\x2f"),
	HX_HCSTRING("rotateRed","\xb6","\x75","\x34","\x6a"),
	HX_HCSTRING("rotateGreen","\x68","\x4e","\xb6","\x6b"),
	HX_HCSTRING("rotateBlue","\x95","\x7e","\x24","\x79"),
	HX_HCSTRING("shearRed","\xb0","\x1c","\xe4","\x1d"),
	HX_HCSTRING("shearGreen","\xe2","\x27","\xd9","\x27"),
	HX_HCSTRING("shearBlue","\x5b","\xf2","\x26","\xff"),
	HX_HCSTRING("applyColorDeficiency","\x7e","\x68","\x62","\x9e"),
	HX_HCSTRING("applyMatrix","\x4f","\xf6","\xc2","\xf7"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("initHue","\x88","\x17","\x86","\xcb"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("mul","\x04","\x1c","\x53","\x00"),
	::String(null()) };

static void ColorMatrix_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorMatrix_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ColorMatrix_obj::LUMA_R,"LUMA_R");
	HX_MARK_MEMBER_NAME(ColorMatrix_obj::LUMA_G,"LUMA_G");
	HX_MARK_MEMBER_NAME(ColorMatrix_obj::LUMA_B,"LUMA_B");
	HX_MARK_MEMBER_NAME(ColorMatrix_obj::LUMA_R2,"LUMA_R2");
	HX_MARK_MEMBER_NAME(ColorMatrix_obj::LUMA_G2,"LUMA_G2");
	HX_MARK_MEMBER_NAME(ColorMatrix_obj::LUMA_B2,"LUMA_B2");
	HX_MARK_MEMBER_NAME(ColorMatrix_obj::INV3,"INV3");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorMatrix_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorMatrix_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ColorMatrix_obj::LUMA_R,"LUMA_R");
	HX_VISIT_MEMBER_NAME(ColorMatrix_obj::LUMA_G,"LUMA_G");
	HX_VISIT_MEMBER_NAME(ColorMatrix_obj::LUMA_B,"LUMA_B");
	HX_VISIT_MEMBER_NAME(ColorMatrix_obj::LUMA_R2,"LUMA_R2");
	HX_VISIT_MEMBER_NAME(ColorMatrix_obj::LUMA_G2,"LUMA_G2");
	HX_VISIT_MEMBER_NAME(ColorMatrix_obj::LUMA_B2,"LUMA_B2");
	HX_VISIT_MEMBER_NAME(ColorMatrix_obj::INV3,"INV3");
};

#endif

hx::Class ColorMatrix_obj::__mClass;

static ::String ColorMatrix_obj_sStaticFields[] = {
	HX_HCSTRING("mulMatrixMatrix","\x86","\xe5","\xc5","\x65"),
	HX_HCSTRING("blendMatrixMatrix","\x53","\x71","\xcf","\x66"),
	HX_HCSTRING("LUMA_R","\x70","\xce","\x45","\x87"),
	HX_HCSTRING("LUMA_G","\x65","\xce","\x45","\x87"),
	HX_HCSTRING("LUMA_B","\x60","\xce","\x45","\x87"),
	HX_HCSTRING("LUMA_R2","\xc2","\xd3","\xce","\xd5"),
	HX_HCSTRING("LUMA_G2","\x2d","\xca","\xce","\xd5"),
	HX_HCSTRING("LUMA_B2","\xd2","\xc5","\xce","\xd5"),
	HX_HCSTRING("INV3","\x42","\x0e","\x7c","\x30"),
	::String(null())
};

void ColorMatrix_obj::__register()
{
	hx::Object *dummy = new ColorMatrix_obj;
	ColorMatrix_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.ColorMatrix","\xb8","\xc0","\x8e","\xa6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColorMatrix_obj::__GetStatic;
	__mClass->mSetStaticField = &ColorMatrix_obj::__SetStatic;
	__mClass->mMarkFunc = ColorMatrix_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ColorMatrix_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColorMatrix_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColorMatrix_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorMatrix_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorMatrix_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorMatrix_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ColorMatrix_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_166_boot)
HXDLIN( 166)		LUMA_R = ((Float)0.212671);
            	}
{
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_167_boot)
HXDLIN( 167)		LUMA_G = ((Float)0.71516);
            	}
{
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_168_boot)
HXDLIN( 168)		LUMA_B = ((Float)0.072169);
            	}
{
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_170_boot)
HXDLIN( 170)		LUMA_R2 = ((Float)0.3086);
            	}
{
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_171_boot)
HXDLIN( 171)		LUMA_G2 = ((Float)0.6094);
            	}
{
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_172_boot)
HXDLIN( 172)		LUMA_B2 = ((Float)0.0820);
            	}
{
            	HX_STACKFRAME(&_hx_pos_40551333bb1ead78_174_boot)
HXDLIN( 174)		INV3 = ((Float)0.33333333333333331);
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
