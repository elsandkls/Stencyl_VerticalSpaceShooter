// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_graphics_fonts_FontSymbol
#include <com/stencyl/graphics/fonts/FontSymbol.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fbc16ca81d66e0ed_28_new,"com.stencyl.graphics.fonts.FontSymbol","new",0x87aaa517,"com.stencyl.graphics.fonts.FontSymbol.new","com/stencyl/graphics/fonts/FontSymbol.hx",28,0x9d384a39)
namespace com{
namespace stencyl{
namespace graphics{
namespace fonts{

void FontSymbol_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_fbc16ca81d66e0ed_28_new)
            	}

Dynamic FontSymbol_obj::__CreateEmpty() { return new FontSymbol_obj; }

void *FontSymbol_obj::_hx_vtable = 0;

Dynamic FontSymbol_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FontSymbol_obj > _hx_result = new FontSymbol_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FontSymbol_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2fce0131;
}


FontSymbol_obj::FontSymbol_obj()
{
}

hx::Val FontSymbol_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"tileID") ) { return hx::Val( tileID ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xoffset") ) { return hx::Val( xoffset ); }
		if (HX_FIELD_EQ(inName,"yoffset") ) { return hx::Val( yoffset ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"xadvance") ) { return hx::Val( xadvance ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FontSymbol_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"tileID") ) { tileID=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xoffset") ) { xoffset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yoffset") ) { yoffset=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"xadvance") ) { xadvance=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FontSymbol_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("xoffset","\x0b","\x42","\x4f","\xde"));
	outFields->push(HX_HCSTRING("yoffset","\xcc","\xb8","\xe4","\x07"));
	outFields->push(HX_HCSTRING("xadvance","\x0a","\x87","\xb1","\xbe"));
	outFields->push(HX_HCSTRING("tileID","\x89","\xb2","\x28","\x1e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FontSymbol_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FontSymbol_obj,xoffset),HX_HCSTRING("xoffset","\x0b","\x42","\x4f","\xde")},
	{hx::fsInt,(int)offsetof(FontSymbol_obj,yoffset),HX_HCSTRING("yoffset","\xcc","\xb8","\xe4","\x07")},
	{hx::fsInt,(int)offsetof(FontSymbol_obj,xadvance),HX_HCSTRING("xadvance","\x0a","\x87","\xb1","\xbe")},
	{hx::fsInt,(int)offsetof(FontSymbol_obj,tileID),HX_HCSTRING("tileID","\x89","\xb2","\x28","\x1e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FontSymbol_obj_sStaticStorageInfo = 0;
#endif

static ::String FontSymbol_obj_sMemberFields[] = {
	HX_HCSTRING("xoffset","\x0b","\x42","\x4f","\xde"),
	HX_HCSTRING("yoffset","\xcc","\xb8","\xe4","\x07"),
	HX_HCSTRING("xadvance","\x0a","\x87","\xb1","\xbe"),
	HX_HCSTRING("tileID","\x89","\xb2","\x28","\x1e"),
	::String(null()) };

static void FontSymbol_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FontSymbol_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FontSymbol_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FontSymbol_obj::__mClass,"__mClass");
};

#endif

hx::Class FontSymbol_obj::__mClass;

void FontSymbol_obj::__register()
{
	hx::Object *dummy = new FontSymbol_obj;
	FontSymbol_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.fonts.FontSymbol","\xa5","\xcd","\xe6","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FontSymbol_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FontSymbol_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FontSymbol_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FontSymbol_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FontSymbol_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FontSymbol_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace fonts
