// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_HscriptRunner
#include <com/stencyl/utils/HscriptRunner.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_ToolsetInterface
#include <com/stencyl/utils/ToolsetInterface.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_73370661030c001b_13_new,"com.stencyl.utils.HscriptRunner","new",0x63b3d8e9,"com.stencyl.utils.HscriptRunner.new","com/stencyl/utils/HscriptRunner.hx",13,0x451a032a)
HX_DEFINE_STACK_FRAME(_hx_pos_73370661030c001b_17_new,"com.stencyl.utils.HscriptRunner","new",0x63b3d8e9,"com.stencyl.utils.HscriptRunner.new","com/stencyl/utils/HscriptRunner.hx",17,0x451a032a)
HX_LOCAL_STACK_FRAME(_hx_pos_73370661030c001b_27_registerVar,"com.stencyl.utils.HscriptRunner","registerVar",0x49b709cd,"com.stencyl.utils.HscriptRunner.registerVar","com/stencyl/utils/HscriptRunner.hx",27,0x451a032a)
HX_LOCAL_STACK_FRAME(_hx_pos_73370661030c001b_31_execute,"com.stencyl.utils.HscriptRunner","execute",0x75f68b3e,"com.stencyl.utils.HscriptRunner.execute","com/stencyl/utils/HscriptRunner.hx",31,0x451a032a)
namespace com{
namespace stencyl{
namespace utils{

void HscriptRunner_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_73370661030c001b_13_new)
HXLINE(  12)		 ::com::stencyl::utils::HscriptRunner _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  14)		this->parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE(  15)		this->interp =  ::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE(  17)		{
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::com::stencyl::utils::HscriptRunner,_gthis) HXARGC(1)
            			void _hx_run(::cpp::VirtualArray el){
            				HX_GC_STACKFRAME(&_hx_pos_73370661030c001b_17_new)
HXLINE(  18)				 ::Dynamic inf = _gthis->interp->posInfos();
HXLINE(  19)				 ::Dynamic v = el->shift();
HXLINE(  20)				if ((el->get_length() > (int)0)) {
HXLINE(  20)					inf->__SetField(HX_("customParams",d7,51,18,ed),el,hx::paccDynamic);
            				}
HXLINE(  21)				::com::stencyl::utils::ToolsetInterface_obj::imageTrace(( ( ::openfl::display::BitmapData)(v) ),inf);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  17)			::Dynamic this1 = this->interp->variables;
HXDLIN(  17)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("imageTrace",2a,55,ed,21),::Reflect_obj::makeVarArgs( ::Dynamic(new _hx_Closure_0(_gthis))));
            		}
            	}

Dynamic HscriptRunner_obj::__CreateEmpty() { return new HscriptRunner_obj; }

void *HscriptRunner_obj::_hx_vtable = 0;

Dynamic HscriptRunner_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HscriptRunner_obj > _hx_result = new HscriptRunner_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HscriptRunner_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2fe81201;
}

void HscriptRunner_obj::registerVar(::String name, ::Dynamic obj){
            	HX_STACKFRAME(&_hx_pos_73370661030c001b_27_registerVar)
HXDLIN(  27)		this->interp->variables->set(name,obj);
            	}


HX_DEFINE_DYNAMIC_FUNC2(HscriptRunner_obj,registerVar,(void))

void HscriptRunner_obj::execute(::String script){
            	HX_STACKFRAME(&_hx_pos_73370661030c001b_31_execute)
HXLINE(  32)		 ::hscript::Expr program = this->parser->parseString(script,null());
HXLINE(  33)		this->interp->execute(program);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HscriptRunner_obj,execute,(void))


hx::ObjectPtr< HscriptRunner_obj > HscriptRunner_obj::__new() {
	hx::ObjectPtr< HscriptRunner_obj > __this = new HscriptRunner_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< HscriptRunner_obj > HscriptRunner_obj::__alloc(hx::Ctx *_hx_ctx) {
	HscriptRunner_obj *__this = (HscriptRunner_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HscriptRunner_obj), true, "com.stencyl.utils.HscriptRunner"));
	*(void **)__this = HscriptRunner_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

HscriptRunner_obj::HscriptRunner_obj()
{
}

void HscriptRunner_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HscriptRunner);
	HX_MARK_MEMBER_NAME(parser,"parser");
	HX_MARK_MEMBER_NAME(interp,"interp");
	HX_MARK_END_CLASS();
}

void HscriptRunner_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parser,"parser");
	HX_VISIT_MEMBER_NAME(interp,"interp");
}

hx::Val HscriptRunner_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parser") ) { return hx::Val( parser ); }
		if (HX_FIELD_EQ(inName,"interp") ) { return hx::Val( interp ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"registerVar") ) { return hx::Val( registerVar_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HscriptRunner_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parser") ) { parser=inValue.Cast<  ::hscript::Parser >(); return inValue; }
		if (HX_FIELD_EQ(inName,"interp") ) { interp=inValue.Cast<  ::hscript::Interp >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HscriptRunner_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parser","\xdf","\x9c","\x88","\xed"));
	outFields->push(HX_HCSTRING("interp","\xd4","\x79","\x86","\x9e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HscriptRunner_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hscript::Parser*/ ,(int)offsetof(HscriptRunner_obj,parser),HX_HCSTRING("parser","\xdf","\x9c","\x88","\xed")},
	{hx::fsObject /*::hscript::Interp*/ ,(int)offsetof(HscriptRunner_obj,interp),HX_HCSTRING("interp","\xd4","\x79","\x86","\x9e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HscriptRunner_obj_sStaticStorageInfo = 0;
#endif

static ::String HscriptRunner_obj_sMemberFields[] = {
	HX_HCSTRING("parser","\xdf","\x9c","\x88","\xed"),
	HX_HCSTRING("interp","\xd4","\x79","\x86","\x9e"),
	HX_HCSTRING("registerVar","\x44","\xd0","\xdd","\x17"),
	HX_HCSTRING("execute","\x35","\x0a","\x0d","\xcc"),
	::String(null()) };

static void HscriptRunner_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HscriptRunner_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HscriptRunner_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HscriptRunner_obj::__mClass,"__mClass");
};

#endif

hx::Class HscriptRunner_obj::__mClass;

void HscriptRunner_obj::__register()
{
	hx::Object *dummy = new HscriptRunner_obj;
	HscriptRunner_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.HscriptRunner","\x77","\x30","\xf1","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HscriptRunner_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HscriptRunner_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HscriptRunner_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HscriptRunner_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HscriptRunner_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HscriptRunner_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
