// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_RGB
#include <com/stencyl/utils/RGB.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_24443989863d9969_118_new,"com.stencyl.utils.RGB","new",0xc631f933,"com.stencyl.utils.RGB.new","com/stencyl/utils/RGB.hx",118,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_125_set,"com.stencyl.utils.RGB","set",0xc635c475,"com.stencyl.utils.RGB.set","com/stencyl/utils/RGB.hx",125,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_129_lerp,"com.stencyl.utils.RGB","lerp",0xa435a244,"com.stencyl.utils.RGB.lerp","com/stencyl/utils/RGB.hx",129,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_136_getR8,"com.stencyl.utils.RGB","getR8",0x29b8dd4f,"com.stencyl.utils.RGB.getR8","com/stencyl/utils/RGB.hx",136,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_138_getG8,"com.stencyl.utils.RGB","getG8",0x29b8d3ba,"com.stencyl.utils.RGB.getG8","com/stencyl/utils/RGB.hx",138,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_140_getB8,"com.stencyl.utils.RGB","getB8",0x29b8cf5f,"com.stencyl.utils.RGB.getB8","com/stencyl/utils/RGB.hx",140,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_143_get24,"com.stencyl.utils.RGB","get24",0x29b8c16b,"com.stencyl.utils.RGB.get24","com/stencyl/utils/RGB.hx",143,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_145_set24,"com.stencyl.utils.RGB","set24",0x1287b777,"com.stencyl.utils.RGB.set24","com/stencyl/utils/RGB.hx",145,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_149_copy,"com.stencyl.utils.RGB","copy",0x9e4a4b82,"com.stencyl.utils.RGB.copy","com/stencyl/utils/RGB.hx",149,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_62_setRGBi,"com.stencyl.utils.RGB","setRGBi",0xa2b33bd1,"com.stencyl.utils.RGB.setRGBi","com/stencyl/utils/RGB.hx",62,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_71_setRGBf,"com.stencyl.utils.RGB","setRGBf",0xa2b33bce,"com.stencyl.utils.RGB.setRGBf","com/stencyl/utils/RGB.hx",71,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_80_getR,"com.stencyl.utils.RGB","getR",0xa0e792c9,"com.stencyl.utils.RGB.getR","com/stencyl/utils/RGB.hx",80,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_82_getRf,"com.stencyl.utils.RGB","getRf",0x29b8dd7d,"com.stencyl.utils.RGB.getRf","com/stencyl/utils/RGB.hx",82,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_85_getG,"com.stencyl.utils.RGB","getG",0xa0e792be,"com.stencyl.utils.RGB.getG","com/stencyl/utils/RGB.hx",85,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_87_getGf,"com.stencyl.utils.RGB","getGf",0x29b8d3e8,"com.stencyl.utils.RGB.getGf","com/stencyl/utils/RGB.hx",87,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_90_getB,"com.stencyl.utils.RGB","getB",0xa0e792b9,"com.stencyl.utils.RGB.getB","com/stencyl/utils/RGB.hx",90,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_92_getBf,"com.stencyl.utils.RGB","getBf",0x29b8cf8d,"com.stencyl.utils.RGB.getBf","com/stencyl/utils/RGB.hx",92,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_95_setR,"com.stencyl.utils.RGB","setR",0xa8d6223d,"com.stencyl.utils.RGB.setR","com/stencyl/utils/RGB.hx",95,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_97_setRf,"com.stencyl.utils.RGB","setRf",0x1287d389,"com.stencyl.utils.RGB.setRf","com/stencyl/utils/RGB.hx",97,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_100_setG,"com.stencyl.utils.RGB","setG",0xa8d62232,"com.stencyl.utils.RGB.setG","com/stencyl/utils/RGB.hx",100,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_102_setGf,"com.stencyl.utils.RGB","setGf",0x1287c9f4,"com.stencyl.utils.RGB.setGf","com/stencyl/utils/RGB.hx",102,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_105_setB,"com.stencyl.utils.RGB","setB",0xa8d6222d,"com.stencyl.utils.RGB.setB","com/stencyl/utils/RGB.hx",105,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_107_setBf,"com.stencyl.utils.RGB","setBf",0x1287c599,"com.stencyl.utils.RGB.setBf","com/stencyl/utils/RGB.hx",107,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_47_boot,"com.stencyl.utils.RGB","boot",0x9da113ff,"com.stencyl.utils.RGB.boot","com/stencyl/utils/RGB.hx",47,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_48_boot,"com.stencyl.utils.RGB","boot",0x9da113ff,"com.stencyl.utils.RGB.boot","com/stencyl/utils/RGB.hx",48,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_49_boot,"com.stencyl.utils.RGB","boot",0x9da113ff,"com.stencyl.utils.RGB.boot","com/stencyl/utils/RGB.hx",49,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_50_boot,"com.stencyl.utils.RGB","boot",0x9da113ff,"com.stencyl.utils.RGB.boot","com/stencyl/utils/RGB.hx",50,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_51_boot,"com.stencyl.utils.RGB","boot",0x9da113ff,"com.stencyl.utils.RGB.boot","com/stencyl/utils/RGB.hx",51,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_52_boot,"com.stencyl.utils.RGB","boot",0x9da113ff,"com.stencyl.utils.RGB.boot","com/stencyl/utils/RGB.hx",52,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_53_boot,"com.stencyl.utils.RGB","boot",0x9da113ff,"com.stencyl.utils.RGB.boot","com/stencyl/utils/RGB.hx",53,0x0ef3c860)
HX_LOCAL_STACK_FRAME(_hx_pos_24443989863d9969_54_boot,"com.stencyl.utils.RGB","boot",0x9da113ff,"com.stencyl.utils.RGB.boot","com/stencyl/utils/RGB.hx",54,0x0ef3c860)
namespace com{
namespace stencyl{
namespace utils{

void RGB_obj::__construct( ::Dynamic __o_r, ::Dynamic __o_g, ::Dynamic __o_b){
 ::Dynamic r = __o_r.Default(((Float)0.0));
 ::Dynamic g = __o_g.Default(((Float)0.0));
 ::Dynamic b = __o_b.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_118_new)
HXLINE( 119)		this->r = r;
HXLINE( 120)		this->g = g;
HXLINE( 121)		this->b = b;
            	}

Dynamic RGB_obj::__CreateEmpty() { return new RGB_obj; }

void *RGB_obj::_hx_vtable = 0;

Dynamic RGB_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RGB_obj > _hx_result = new RGB_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool RGB_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x41a254cb;
}

void RGB_obj::set(Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_125_set)
HXDLIN( 125)		this->r = r;
HXDLIN( 125)		this->g = g;
HXDLIN( 125)		this->b = b;
            	}


HX_DEFINE_DYNAMIC_FUNC3(RGB_obj,set,(void))

void RGB_obj::lerp( ::com::stencyl::utils::RGB input, ::com::stencyl::utils::RGB output,Float t){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_129_lerp)
HXLINE( 130)		Float _hx_tmp = this->r;
HXDLIN( 130)		output->r = (_hx_tmp + ((input->r - this->r) * t));
HXLINE( 131)		Float _hx_tmp1 = this->g;
HXDLIN( 131)		output->g = (_hx_tmp1 + ((input->g - this->g) * t));
HXLINE( 132)		Float _hx_tmp2 = this->b;
HXDLIN( 132)		output->b = (_hx_tmp2 + ((input->b - this->b) * t));
            	}


HX_DEFINE_DYNAMIC_FUNC3(RGB_obj,lerp,(void))

int RGB_obj::getR8(){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_136_getR8)
HXDLIN( 136)		Float x = (this->r * (int)255);
HXDLIN( 136)		Float _hx_tmp;
HXDLIN( 136)		if ((x > (int)0)) {
HXDLIN( 136)			_hx_tmp = (x + ((Float).5));
            		}
            		else {
HXDLIN( 136)			if ((x < (int)0)) {
HXDLIN( 136)				_hx_tmp = (x - ((Float).5));
            			}
            			else {
HXDLIN( 136)				_hx_tmp = (int)0;
            			}
            		}
HXDLIN( 136)		return ::Std_obj::_hx_int(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RGB_obj,getR8,return )

int RGB_obj::getG8(){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_138_getG8)
HXDLIN( 138)		Float x = (this->g * (int)255);
HXDLIN( 138)		Float _hx_tmp;
HXDLIN( 138)		if ((x > (int)0)) {
HXDLIN( 138)			_hx_tmp = (x + ((Float).5));
            		}
            		else {
HXDLIN( 138)			if ((x < (int)0)) {
HXDLIN( 138)				_hx_tmp = (x - ((Float).5));
            			}
            			else {
HXDLIN( 138)				_hx_tmp = (int)0;
            			}
            		}
HXDLIN( 138)		return ::Std_obj::_hx_int(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RGB_obj,getG8,return )

int RGB_obj::getB8(){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_140_getB8)
HXDLIN( 140)		Float x = (this->b * (int)255);
HXDLIN( 140)		Float _hx_tmp;
HXDLIN( 140)		if ((x > (int)0)) {
HXDLIN( 140)			_hx_tmp = (x + ((Float).5));
            		}
            		else {
HXDLIN( 140)			if ((x < (int)0)) {
HXDLIN( 140)				_hx_tmp = (x - ((Float).5));
            			}
            			else {
HXDLIN( 140)				_hx_tmp = (int)0;
            			}
            		}
HXDLIN( 140)		return ::Std_obj::_hx_int(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RGB_obj,getB8,return )

int RGB_obj::get24(){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_143_get24)
HXDLIN( 143)		Float x = (this->r * (int)255);
HXDLIN( 143)		Float _hx_tmp;
HXDLIN( 143)		if ((x > (int)0)) {
HXDLIN( 143)			_hx_tmp = (x + ((Float).5));
            		}
            		else {
HXDLIN( 143)			if ((x < (int)0)) {
HXDLIN( 143)				_hx_tmp = (x - ((Float).5));
            			}
            			else {
HXDLIN( 143)				_hx_tmp = (int)0;
            			}
            		}
HXDLIN( 143)		int _hx_tmp1 = ((int)::Std_obj::_hx_int(_hx_tmp) << (int)(int)16);
HXDLIN( 143)		Float x1 = (this->g * (int)255);
HXDLIN( 143)		Float _hx_tmp2;
HXDLIN( 143)		if ((x1 > (int)0)) {
HXDLIN( 143)			_hx_tmp2 = (x1 + ((Float).5));
            		}
            		else {
HXDLIN( 143)			if ((x1 < (int)0)) {
HXDLIN( 143)				_hx_tmp2 = (x1 - ((Float).5));
            			}
            			else {
HXDLIN( 143)				_hx_tmp2 = (int)0;
            			}
            		}
HXDLIN( 143)		int _hx_tmp3 = ((int)_hx_tmp1 | (int)((int)::Std_obj::_hx_int(_hx_tmp2) << (int)(int)8));
HXDLIN( 143)		Float x2 = (this->b * (int)255);
HXDLIN( 143)		Float _hx_tmp4;
HXDLIN( 143)		if ((x2 > (int)0)) {
HXDLIN( 143)			_hx_tmp4 = (x2 + ((Float).5));
            		}
            		else {
HXDLIN( 143)			if ((x2 < (int)0)) {
HXDLIN( 143)				_hx_tmp4 = (x2 - ((Float).5));
            			}
            			else {
HXDLIN( 143)				_hx_tmp4 = (int)0;
            			}
            		}
HXDLIN( 143)		return ((int)_hx_tmp3 | (int)::Std_obj::_hx_int(_hx_tmp4));
            	}


HX_DEFINE_DYNAMIC_FUNC0(RGB_obj,get24,return )

void RGB_obj::set24(int r,int g,int b){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_145_set24)
HXDLIN( 145)		this->r = (((int)r & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 145)		this->g = (((int)g & (int)(int)255) * ((Float)0.00392156862745098));
HXDLIN( 145)		this->b = (((int)b & (int)(int)255) * ((Float)0.00392156862745098));
            	}


HX_DEFINE_DYNAMIC_FUNC3(RGB_obj,set24,(void))

 ::com::stencyl::utils::RGB RGB_obj::copy( ::com::stencyl::utils::RGB target){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_149_copy)
HXLINE( 150)		target->r = this->r;
HXLINE( 151)		target->g = this->g;
HXLINE( 152)		target->b = this->b;
HXLINE( 153)		return target;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RGB_obj,copy,return )

int RGB_obj::BLACK;

int RGB_obj::WHITE;

int RGB_obj::RED;

int RGB_obj::GREEN;

int RGB_obj::BLUE;

int RGB_obj::CYAN;

int RGB_obj::MAGENTA;

int RGB_obj::YELLOW;

int RGB_obj::setRGBi(int r,int g,int b){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_62_setRGBi)
HXDLIN(  62)		return ((int)((int)((int)((int)r & (int)(int)255) << (int)(int)16) | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(RGB_obj,setRGBi,return )

int RGB_obj::setRGBf(Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_71_setRGBf)
HXLINE(  73)		Float x;
HXDLIN(  73)		if ((r < (int)0)) {
HXLINE(  73)			x = (int)0;
            		}
            		else {
HXLINE(  73)			if ((r > (int)1)) {
HXLINE(  73)				x = (int)1;
            			}
            			else {
HXLINE(  73)				x = r;
            			}
            		}
HXDLIN(  73)		Float x1 = (x * (int)255);
HXDLIN(  73)		Float r1;
HXDLIN(  73)		if ((x1 > (int)0)) {
HXLINE(  73)			r1 = (x1 + ((Float).5));
            		}
            		else {
HXLINE(  73)			if ((x1 < (int)0)) {
HXLINE(  73)				r1 = (x1 - ((Float).5));
            			}
            			else {
HXLINE(  73)				r1 = (int)0;
            			}
            		}
HXLINE(  71)		int r2 = ::Std_obj::_hx_int(r1);
HXLINE(  74)		Float x2;
HXDLIN(  74)		if ((g < (int)0)) {
HXLINE(  74)			x2 = (int)0;
            		}
            		else {
HXLINE(  74)			if ((g > (int)1)) {
HXLINE(  74)				x2 = (int)1;
            			}
            			else {
HXLINE(  74)				x2 = g;
            			}
            		}
HXDLIN(  74)		Float x3 = (x2 * (int)255);
HXDLIN(  74)		Float g1;
HXDLIN(  74)		if ((x3 > (int)0)) {
HXLINE(  74)			g1 = (x3 + ((Float).5));
            		}
            		else {
HXLINE(  74)			if ((x3 < (int)0)) {
HXLINE(  74)				g1 = (x3 - ((Float).5));
            			}
            			else {
HXLINE(  74)				g1 = (int)0;
            			}
            		}
HXLINE(  71)		int g2 = ::Std_obj::_hx_int(g1);
HXLINE(  75)		Float x4;
HXDLIN(  75)		if ((b < (int)0)) {
HXLINE(  75)			x4 = (int)0;
            		}
            		else {
HXLINE(  75)			if ((b > (int)1)) {
HXLINE(  75)				x4 = (int)1;
            			}
            			else {
HXLINE(  75)				x4 = b;
            			}
            		}
HXDLIN(  75)		Float x5 = (x4 * (int)255);
HXDLIN(  75)		Float b1;
HXDLIN(  75)		if ((x5 > (int)0)) {
HXLINE(  75)			b1 = (x5 + ((Float).5));
            		}
            		else {
HXLINE(  75)			if ((x5 < (int)0)) {
HXLINE(  75)				b1 = (x5 - ((Float).5));
            			}
            			else {
HXLINE(  75)				b1 = (int)0;
            			}
            		}
HXLINE(  71)		return ((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)16) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)8)) | (int)((int)::Std_obj::_hx_int(b1) & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(RGB_obj,setRGBf,return )

int RGB_obj::getR(int x){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_80_getR)
HXDLIN(  80)		return ((int)hx::UShr(x,(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGB_obj,getR,return )

Float RGB_obj::getRf(int x){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_82_getRf)
HXDLIN(  82)		return (((int)hx::UShr(x,(int)16) & (int)(int)255) * ((Float)0.00392156862745098));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGB_obj,getRf,return )

int RGB_obj::getG(int x){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_85_getG)
HXDLIN(  85)		return ((int)hx::UShr(x,(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGB_obj,getG,return )

Float RGB_obj::getGf(int x){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_87_getGf)
HXDLIN(  87)		return (((int)hx::UShr(x,(int)8) & (int)(int)255) * ((Float)0.00392156862745098));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGB_obj,getGf,return )

int RGB_obj::getB(int x){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_90_getB)
HXDLIN(  90)		return ((int)x & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGB_obj,getB,return )

Float RGB_obj::getBf(int x){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_92_getBf)
HXDLIN(  92)		return (((int)x & (int)(int)255) * ((Float)0.00392156862745098));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGB_obj,getBf,return )

int RGB_obj::setR(int x,int r){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_95_setR)
HXDLIN(  95)		return ((int)((int)((int)r & (int)(int)255) << (int)(int)16) | (int)((int)x & (int)(int)-16711681));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGB_obj,setR,return )

int RGB_obj::setRf(int x,Float r){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_97_setRf)
HXDLIN(  97)		Float x1;
HXDLIN(  97)		if ((r < ((Float)0.0))) {
HXDLIN(  97)			x1 = ((Float)0.0);
            		}
            		else {
HXDLIN(  97)			if ((r > ((Float)1.0))) {
HXDLIN(  97)				x1 = ((Float)1.0);
            			}
            			else {
HXDLIN(  97)				x1 = r;
            			}
            		}
HXDLIN(  97)		Float x2 = (x1 * (int)255);
HXDLIN(  97)		Float r1;
HXDLIN(  97)		if ((x2 > (int)0)) {
HXDLIN(  97)			r1 = (x2 + ((Float).5));
            		}
            		else {
HXDLIN(  97)			if ((x2 < (int)0)) {
HXDLIN(  97)				r1 = (x2 - ((Float).5));
            			}
            			else {
HXDLIN(  97)				r1 = (int)0;
            			}
            		}
HXDLIN(  97)		return ((int)((int)((int)::Std_obj::_hx_int(r1) & (int)(int)255) << (int)(int)16) | (int)((int)x & (int)(int)-16711681));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGB_obj,setRf,return )

int RGB_obj::setG(int x,int g){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_100_setG)
HXDLIN( 100)		return ((int)((int)((int)g & (int)(int)255) << (int)(int)8) | (int)((int)x & (int)(int)-65281));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGB_obj,setG,return )

int RGB_obj::setGf(int x,Float g){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_102_setGf)
HXDLIN( 102)		Float x1;
HXDLIN( 102)		if ((g < ((Float)0.0))) {
HXDLIN( 102)			x1 = ((Float)0.0);
            		}
            		else {
HXDLIN( 102)			if ((g > ((Float)1.0))) {
HXDLIN( 102)				x1 = ((Float)1.0);
            			}
            			else {
HXDLIN( 102)				x1 = g;
            			}
            		}
HXDLIN( 102)		Float x2 = (x1 * (int)255);
HXDLIN( 102)		Float g1;
HXDLIN( 102)		if ((x2 > (int)0)) {
HXDLIN( 102)			g1 = (x2 + ((Float).5));
            		}
            		else {
HXDLIN( 102)			if ((x2 < (int)0)) {
HXDLIN( 102)				g1 = (x2 - ((Float).5));
            			}
            			else {
HXDLIN( 102)				g1 = (int)0;
            			}
            		}
HXDLIN( 102)		return ((int)((int)((int)::Std_obj::_hx_int(g1) & (int)(int)255) << (int)(int)8) | (int)((int)x & (int)(int)-65281));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGB_obj,setGf,return )

int RGB_obj::setB(int x,int b){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_105_setB)
HXDLIN( 105)		return ((int)((int)b & (int)(int)255) | (int)((int)x & (int)(int)-256));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGB_obj,setB,return )

int RGB_obj::setBf(int x,Float b){
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_107_setBf)
HXDLIN( 107)		Float x1;
HXDLIN( 107)		if ((b < ((Float)0.0))) {
HXDLIN( 107)			x1 = ((Float)0.0);
            		}
            		else {
HXDLIN( 107)			if ((b > ((Float)1.0))) {
HXDLIN( 107)				x1 = ((Float)1.0);
            			}
            			else {
HXDLIN( 107)				x1 = b;
            			}
            		}
HXDLIN( 107)		Float x2 = (x1 * (int)255);
HXDLIN( 107)		Float b1;
HXDLIN( 107)		if ((x2 > (int)0)) {
HXDLIN( 107)			b1 = (x2 + ((Float).5));
            		}
            		else {
HXDLIN( 107)			if ((x2 < (int)0)) {
HXDLIN( 107)				b1 = (x2 - ((Float).5));
            			}
            			else {
HXDLIN( 107)				b1 = (int)0;
            			}
            		}
HXDLIN( 107)		return ((int)((int)::Std_obj::_hx_int(b1) & (int)(int)255) | (int)((int)x & (int)(int)-256));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGB_obj,setBf,return )


hx::ObjectPtr< RGB_obj > RGB_obj::__new( ::Dynamic __o_r, ::Dynamic __o_g, ::Dynamic __o_b) {
	hx::ObjectPtr< RGB_obj > __this = new RGB_obj();
	__this->__construct(__o_r,__o_g,__o_b);
	return __this;
}

hx::ObjectPtr< RGB_obj > RGB_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_r, ::Dynamic __o_g, ::Dynamic __o_b) {
	RGB_obj *__this = (RGB_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RGB_obj), false, "com.stencyl.utils.RGB"));
	*(void **)__this = RGB_obj::_hx_vtable;
	__this->__construct(__o_r,__o_g,__o_b);
	return __this;
}

RGB_obj::RGB_obj()
{
}

hx::Val RGB_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r ); }
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { return hx::Val( lerp_dyn() ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"getR8") ) { return hx::Val( getR8_dyn() ); }
		if (HX_FIELD_EQ(inName,"getG8") ) { return hx::Val( getG8_dyn() ); }
		if (HX_FIELD_EQ(inName,"getB8") ) { return hx::Val( getB8_dyn() ); }
		if (HX_FIELD_EQ(inName,"get24") ) { return hx::Val( get24_dyn() ); }
		if (HX_FIELD_EQ(inName,"set24") ) { return hx::Val( set24_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RGB_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"getR") ) { outValue = getR_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getG") ) { outValue = getG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getB") ) { outValue = getB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setR") ) { outValue = setR_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setG") ) { outValue = setG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setB") ) { outValue = setB_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"getRf") ) { outValue = getRf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getGf") ) { outValue = getGf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBf") ) { outValue = getBf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRf") ) { outValue = setRf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setGf") ) { outValue = setGf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setBf") ) { outValue = setBf_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setRGBi") ) { outValue = setRGBi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRGBf") ) { outValue = setRGBf_dyn(); return true; }
	}
	return false;
}

hx::Val RGB_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RGB_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("r","\x72","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RGB_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(RGB_obj,r),HX_HCSTRING("r","\x72","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(RGB_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(RGB_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo RGB_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &RGB_obj::BLACK,HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32")},
	{hx::fsInt,(void *) &RGB_obj::WHITE,HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47")},
	{hx::fsInt,(void *) &RGB_obj::RED,HX_HCSTRING("RED","\x31","\x75","\x3e","\x00")},
	{hx::fsInt,(void *) &RGB_obj::GREEN,HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17")},
	{hx::fsInt,(void *) &RGB_obj::BLUE,HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b")},
	{hx::fsInt,(void *) &RGB_obj::CYAN,HX_HCSTRING("CYAN","\x23","\x0d","\x8d","\x2c")},
	{hx::fsInt,(void *) &RGB_obj::MAGENTA,HX_HCSTRING("MAGENTA","\x09","\x8e","\x71","\x8e")},
	{hx::fsInt,(void *) &RGB_obj::YELLOW,HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String RGB_obj_sMemberFields[] = {
	HX_HCSTRING("r","\x72","\x00","\x00","\x00"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("getR8","\xbc","\x99","\x60","\x91"),
	HX_HCSTRING("getG8","\x27","\x90","\x60","\x91"),
	HX_HCSTRING("getB8","\xcc","\x8b","\x60","\x91"),
	HX_HCSTRING("get24","\xd8","\x7d","\x60","\x91"),
	HX_HCSTRING("set24","\xe4","\x73","\x2f","\x7a"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	::String(null()) };

static void RGB_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RGB_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(RGB_obj::BLACK,"BLACK");
	HX_MARK_MEMBER_NAME(RGB_obj::WHITE,"WHITE");
	HX_MARK_MEMBER_NAME(RGB_obj::RED,"RED");
	HX_MARK_MEMBER_NAME(RGB_obj::GREEN,"GREEN");
	HX_MARK_MEMBER_NAME(RGB_obj::BLUE,"BLUE");
	HX_MARK_MEMBER_NAME(RGB_obj::CYAN,"CYAN");
	HX_MARK_MEMBER_NAME(RGB_obj::MAGENTA,"MAGENTA");
	HX_MARK_MEMBER_NAME(RGB_obj::YELLOW,"YELLOW");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RGB_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RGB_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(RGB_obj::BLACK,"BLACK");
	HX_VISIT_MEMBER_NAME(RGB_obj::WHITE,"WHITE");
	HX_VISIT_MEMBER_NAME(RGB_obj::RED,"RED");
	HX_VISIT_MEMBER_NAME(RGB_obj::GREEN,"GREEN");
	HX_VISIT_MEMBER_NAME(RGB_obj::BLUE,"BLUE");
	HX_VISIT_MEMBER_NAME(RGB_obj::CYAN,"CYAN");
	HX_VISIT_MEMBER_NAME(RGB_obj::MAGENTA,"MAGENTA");
	HX_VISIT_MEMBER_NAME(RGB_obj::YELLOW,"YELLOW");
};

#endif

hx::Class RGB_obj::__mClass;

static ::String RGB_obj_sStaticFields[] = {
	HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32"),
	HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47"),
	HX_HCSTRING("RED","\x31","\x75","\x3e","\x00"),
	HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17"),
	HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b"),
	HX_HCSTRING("CYAN","\x23","\x0d","\x8d","\x2c"),
	HX_HCSTRING("MAGENTA","\x09","\x8e","\x71","\x8e"),
	HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82"),
	HX_HCSTRING("setRGBi","\x7e","\xad","\x14","\x11"),
	HX_HCSTRING("setRGBf","\x7b","\xad","\x14","\x11"),
	HX_HCSTRING("getR","\xfc","\x02","\x62","\x44"),
	HX_HCSTRING("getRf","\xea","\x99","\x60","\x91"),
	HX_HCSTRING("getG","\xf1","\x02","\x62","\x44"),
	HX_HCSTRING("getGf","\x55","\x90","\x60","\x91"),
	HX_HCSTRING("getB","\xec","\x02","\x62","\x44"),
	HX_HCSTRING("getBf","\xfa","\x8b","\x60","\x91"),
	HX_HCSTRING("setR","\x70","\x92","\x50","\x4c"),
	HX_HCSTRING("setRf","\xf6","\x8f","\x2f","\x7a"),
	HX_HCSTRING("setG","\x65","\x92","\x50","\x4c"),
	HX_HCSTRING("setGf","\x61","\x86","\x2f","\x7a"),
	HX_HCSTRING("setB","\x60","\x92","\x50","\x4c"),
	HX_HCSTRING("setBf","\x06","\x82","\x2f","\x7a"),
	::String(null())
};

void RGB_obj::__register()
{
	hx::Object *dummy = new RGB_obj;
	RGB_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.RGB","\xc1","\xe3","\x72","\x70");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RGB_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RGB_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RGB_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RGB_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RGB_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RGB_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RGB_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RGB_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RGB_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_47_boot)
HXDLIN(  47)		BLACK = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_48_boot)
HXDLIN(  48)		WHITE = (int)16777215;
            	}
{
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_49_boot)
HXDLIN(  49)		RED = (int)16711680;
            	}
{
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_50_boot)
HXDLIN(  50)		GREEN = (int)65280;
            	}
{
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_51_boot)
HXDLIN(  51)		BLUE = (int)255;
            	}
{
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_52_boot)
HXDLIN(  52)		CYAN = (int)65535;
            	}
{
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_53_boot)
HXDLIN(  53)		MAGENTA = (int)16711935;
            	}
{
            	HX_STACKFRAME(&_hx_pos_24443989863d9969_54_boot)
HXDLIN(  54)		YELLOW = (int)16776960;
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
