// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_BloomShader
#include <com/stencyl/graphics/shaders/BloomShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3039c33240cc02cc_18_new,"com.stencyl.graphics.shaders.BloomShader","new",0x5d470946,"com.stencyl.graphics.shaders.BloomShader.new","com/stencyl/graphics/shaders/BloomShader.hx",18,0xce408eaa)
namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{

void BloomShader_obj::__construct(hx::Null< Float >  __o_currPixelWeight,hx::Null< Float >  __o_neighborPixelWeight,hx::Null< Float >  __o_sampleX,hx::Null< Float >  __o_sampleY,hx::Null< Float >  __o_lowThreshold,hx::Null< Float >  __o_mediumThreshold,hx::Null< Float >  __o_lowMultiplier,hx::Null< Float >  __o_mediumMultiplier,hx::Null< Float >  __o_highMultiplier){
Float currPixelWeight = __o_currPixelWeight.Default(((Float)0.25));
Float neighborPixelWeight = __o_neighborPixelWeight.Default(((Float)0.004));
Float sampleX = __o_sampleX.Default(4);
Float sampleY = __o_sampleY.Default(3);
Float lowThreshold = __o_lowThreshold.Default(((Float)0.4));
Float mediumThreshold = __o_mediumThreshold.Default(((Float)0.6));
Float lowMultiplier = __o_lowMultiplier.Default(((Float)0.012));
Float mediumMultiplier = __o_mediumMultiplier.Default(((Float)0.009));
Float highMultiplier = __o_highMultiplier.Default(((Float)0.0075));
            	HX_GC_STACKFRAME(&_hx_pos_3039c33240cc02cc_18_new)
HXLINE(  19)		super::__construct();
HXLINE(  22)		::String script = HX_("\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform vec2 uResolution;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tuniform float currPixelWeight;\n\t\t\tuniform float neighborPixelWeight;\n\t\t\tuniform float sampleX;\n\t\t\tuniform float sampleY;\n\t\t\tuniform float lowThreshold;\n\t\t\tuniform float mediumThreshold;\n\t\t\tuniform float lowMultiplier;\n\t\t\tuniform float mediumMultiplier;\n\t\t\tuniform float highMultiplier;\n\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tvec4 sum = vec4(0.0);\n\t\t\t\tvec2 q1 = vTexCoord;\n\t\t\t\tvec4 oricol = texture2D(uImage0, vec2(q1.x, q1.y));\n\t\t\t\tvec3 col;\n\t\t\t\t\n\t\t\t\tfor(int i = -int(sampleX); i < int(sampleX); i++) \n\t\t\t\t{\n\t\t\t\t\tfor(int j = -int(sampleY); j < int(sampleY); j++) \n\t\t\t\t\t{\n\t\t\t\t\t\tsum += texture2D(uImage0, vec2(j, i) * neighborPixelWeight + vec2(q1.x, q1.y)) * currPixelWeight;\n\t\t\t\t\t}\n\t\t\t   \t}\n\t\t\t \n\t\t\t  \tif(oricol.r < lowThreshold) \n\t\t\t  \t{\n\t\t\t\t\tgl_FragColor = sum * sum * lowMultiplier + oricol;\n\t\t\t  \t} \n\t\t\t  \n\t\t\t  \telse \n\t\t\t  \t{\n\t\t\t\t\tif(oricol.r < mediumThreshold) \n\t\t\t\t\t{\n\t\t\t\t\t\tgl_FragColor = sum * sum * mediumMultiplier + oricol;\n\t\t\t\t   \t} \n\t\t\t\t   \t\n\t\t\t\t   \telse \n\t\t\t\t   \t{\n\t\t\t\t\t\tgl_FragColor = sum * sum * highMultiplier + oricol;\n\t\t\t\t   \t}\n\t\t\t   }\n\t\t\t}\n\t\t",38,df,f0,d3);
HXLINE( 129)		this->model =  ::com::stencyl::graphics::shaders::PostProcess_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),script,true);
HXLINE( 131)		this->setProperty(HX_("currPixelWeight",cc,82,e2,44),currPixelWeight);
HXLINE( 132)		this->setProperty(HX_("neighborPixelWeight",cc,98,1b,31),neighborPixelWeight);
HXLINE( 133)		this->setProperty(HX_("sampleX",ee,c4,c9,83),sampleX);
HXLINE( 134)		this->setProperty(HX_("sampleY",ef,c4,c9,83),sampleY);
HXLINE( 135)		this->setProperty(HX_("lowThreshold",77,1c,47,d6),lowThreshold);
HXLINE( 136)		this->setProperty(HX_("mediumThreshold",76,98,0c,10),mediumThreshold);
HXLINE( 137)		this->setProperty(HX_("lowMultiplier",35,41,63,ce),lowMultiplier);
HXLINE( 138)		this->setProperty(HX_("mediumMultiplier",56,44,6a,21),mediumMultiplier);
HXLINE( 139)		this->setProperty(HX_("highMultiplier",83,f1,87,78),highMultiplier);
            	}

Dynamic BloomShader_obj::__CreateEmpty() { return new BloomShader_obj; }

void *BloomShader_obj::_hx_vtable = 0;

Dynamic BloomShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BloomShader_obj > _hx_result = new BloomShader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool BloomShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x36ff7950) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x36ff7950;
	} else {
		return inClassId==(int)0x488ca67b;
	}
}


hx::ObjectPtr< BloomShader_obj > BloomShader_obj::__new(hx::Null< Float >  __o_currPixelWeight,hx::Null< Float >  __o_neighborPixelWeight,hx::Null< Float >  __o_sampleX,hx::Null< Float >  __o_sampleY,hx::Null< Float >  __o_lowThreshold,hx::Null< Float >  __o_mediumThreshold,hx::Null< Float >  __o_lowMultiplier,hx::Null< Float >  __o_mediumMultiplier,hx::Null< Float >  __o_highMultiplier) {
	hx::ObjectPtr< BloomShader_obj > __this = new BloomShader_obj();
	__this->__construct(__o_currPixelWeight,__o_neighborPixelWeight,__o_sampleX,__o_sampleY,__o_lowThreshold,__o_mediumThreshold,__o_lowMultiplier,__o_mediumMultiplier,__o_highMultiplier);
	return __this;
}

hx::ObjectPtr< BloomShader_obj > BloomShader_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_currPixelWeight,hx::Null< Float >  __o_neighborPixelWeight,hx::Null< Float >  __o_sampleX,hx::Null< Float >  __o_sampleY,hx::Null< Float >  __o_lowThreshold,hx::Null< Float >  __o_mediumThreshold,hx::Null< Float >  __o_lowMultiplier,hx::Null< Float >  __o_mediumMultiplier,hx::Null< Float >  __o_highMultiplier) {
	BloomShader_obj *__this = (BloomShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BloomShader_obj), true, "com.stencyl.graphics.shaders.BloomShader"));
	*(void **)__this = BloomShader_obj::_hx_vtable;
	__this->__construct(__o_currPixelWeight,__o_neighborPixelWeight,__o_sampleX,__o_sampleY,__o_lowThreshold,__o_mediumThreshold,__o_lowMultiplier,__o_mediumMultiplier,__o_highMultiplier);
	return __this;
}

BloomShader_obj::BloomShader_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BloomShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BloomShader_obj_sStaticStorageInfo = 0;
#endif

static void BloomShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BloomShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BloomShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BloomShader_obj::__mClass,"__mClass");
};

#endif

hx::Class BloomShader_obj::__mClass;

void BloomShader_obj::__register()
{
	hx::Object *dummy = new BloomShader_obj;
	BloomShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.shaders.BloomShader","\x54","\xae","\x73","\x72");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BloomShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< BloomShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BloomShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BloomShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BloomShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders
