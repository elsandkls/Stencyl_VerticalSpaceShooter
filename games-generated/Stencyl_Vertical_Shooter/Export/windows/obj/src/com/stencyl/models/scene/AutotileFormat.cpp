// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_models_scene_AutotileFormat
#include <com/stencyl/models/scene/AutotileFormat.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_Corners
#include <com/stencyl/models/scene/Corners.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_daa8b9fbfb28a1ac_6_new,"com.stencyl.models.scene.AutotileFormat","new",0x834568bd,"com.stencyl.models.scene.AutotileFormat.new","com/stencyl/models/scene/AutotileFormat.hx",6,0xe1d498d3)
namespace com{
namespace stencyl{
namespace models{
namespace scene{

void AutotileFormat_obj::__construct(::String name,int id,int tilesAcross,int tilesDown,::Array< ::Dynamic> corners){
            	HX_GC_STACKFRAME(&_hx_pos_daa8b9fbfb28a1ac_6_new)
HXLINE(  18)		this->animIndex = ::Array_obj< int >::__new(0);
HXLINE(   9)		this->defaultAnimationIndex = (int)0;
HXLINE(  25)		this->name = name;
HXLINE(  26)		this->id = id;
HXLINE(  27)		this->tilesAcross = tilesAcross;
HXLINE(  28)		this->tilesDown = tilesDown;
HXLINE(  30)		int arrayIndex = (int)0;
HXLINE(  34)		 ::haxe::ds::ObjectMap cornerIndices =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  36)		{
HXLINE(  36)			int _g1 = (int)0;
HXDLIN(  36)			int _g = (int)256;
HXDLIN(  36)			while((_g1 < _g)){
HXLINE(  36)				_g1 = (_g1 + (int)1);
HXDLIN(  36)				int i = (_g1 - (int)1);
HXLINE(  38)				if (cornerIndices->exists(corners->__get(i).StaticCast<  ::com::stencyl::models::scene::Corners >())) {
HXLINE(  40)					::Array< int > _hx_tmp = this->animIndex;
HXDLIN(  40)					_hx_tmp[i] = ( (int)(cornerIndices->get(corners->__get(i).StaticCast<  ::com::stencyl::models::scene::Corners >())) );
HXLINE(  41)					continue;
            				}
HXLINE(  44)				this->animIndex[i] = arrayIndex;
HXLINE(  45)				cornerIndices->set(corners->__get(i).StaticCast<  ::com::stencyl::models::scene::Corners >(),arrayIndex);
HXLINE(  46)				arrayIndex = (arrayIndex + (int)1);
            			}
            		}
HXLINE(  49)		this->defaultAnimationIndex = this->animIndex->__get((int)255);
HXLINE(  50)		this->autotileArrayLength = arrayIndex;
HXLINE(  52)		this->animCorners = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  53)		{
HXLINE(  53)			int _g11 = (int)0;
HXDLIN(  53)			int _g2 = (int)256;
HXDLIN(  53)			while((_g11 < _g2)){
HXLINE(  53)				_g11 = (_g11 + (int)1);
HXDLIN(  53)				int i1 = (_g11 - (int)1);
HXLINE(  55)				::Array< ::Dynamic> _hx_tmp1 = this->animCorners;
HXDLIN(  55)				int _hx_tmp2 = this->animIndex->__get(i1);
HXDLIN(  55)				_hx_tmp1[_hx_tmp2] = corners->__get(i1).StaticCast<  ::com::stencyl::models::scene::Corners >();
            			}
            		}
            	}

Dynamic AutotileFormat_obj::__CreateEmpty() { return new AutotileFormat_obj; }

void *AutotileFormat_obj::_hx_vtable = 0;

Dynamic AutotileFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AutotileFormat_obj > _hx_result = new AutotileFormat_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool AutotileFormat_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a5cb427;
}


hx::ObjectPtr< AutotileFormat_obj > AutotileFormat_obj::__new(::String name,int id,int tilesAcross,int tilesDown,::Array< ::Dynamic> corners) {
	hx::ObjectPtr< AutotileFormat_obj > __this = new AutotileFormat_obj();
	__this->__construct(name,id,tilesAcross,tilesDown,corners);
	return __this;
}

hx::ObjectPtr< AutotileFormat_obj > AutotileFormat_obj::__alloc(hx::Ctx *_hx_ctx,::String name,int id,int tilesAcross,int tilesDown,::Array< ::Dynamic> corners) {
	AutotileFormat_obj *__this = (AutotileFormat_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AutotileFormat_obj), true, "com.stencyl.models.scene.AutotileFormat"));
	*(void **)__this = AutotileFormat_obj::_hx_vtable;
	__this->__construct(name,id,tilesAcross,tilesDown,corners);
	return __this;
}

AutotileFormat_obj::AutotileFormat_obj()
{
}

void AutotileFormat_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AutotileFormat);
	HX_MARK_MEMBER_NAME(autotileArrayLength,"autotileArrayLength");
	HX_MARK_MEMBER_NAME(defaultAnimationIndex,"defaultAnimationIndex");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(tilesAcross,"tilesAcross");
	HX_MARK_MEMBER_NAME(tilesDown,"tilesDown");
	HX_MARK_MEMBER_NAME(animIndex,"animIndex");
	HX_MARK_MEMBER_NAME(animCorners,"animCorners");
	HX_MARK_END_CLASS();
}

void AutotileFormat_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(autotileArrayLength,"autotileArrayLength");
	HX_VISIT_MEMBER_NAME(defaultAnimationIndex,"defaultAnimationIndex");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(tilesAcross,"tilesAcross");
	HX_VISIT_MEMBER_NAME(tilesDown,"tilesDown");
	HX_VISIT_MEMBER_NAME(animIndex,"animIndex");
	HX_VISIT_MEMBER_NAME(animCorners,"animCorners");
}

hx::Val AutotileFormat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tilesDown") ) { return hx::Val( tilesDown ); }
		if (HX_FIELD_EQ(inName,"animIndex") ) { return hx::Val( animIndex ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tilesAcross") ) { return hx::Val( tilesAcross ); }
		if (HX_FIELD_EQ(inName,"animCorners") ) { return hx::Val( animCorners ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"autotileArrayLength") ) { return hx::Val( autotileArrayLength ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultAnimationIndex") ) { return hx::Val( defaultAnimationIndex ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AutotileFormat_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tilesDown") ) { tilesDown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animIndex") ) { animIndex=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tilesAcross") ) { tilesAcross=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animCorners") ) { animCorners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"autotileArrayLength") ) { autotileArrayLength=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultAnimationIndex") ) { defaultAnimationIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AutotileFormat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("autotileArrayLength","\x42","\x64","\x56","\x2f"));
	outFields->push(HX_HCSTRING("defaultAnimationIndex","\x0f","\x0a","\x0f","\xa4"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("tilesAcross","\xe4","\x42","\xc4","\xc9"));
	outFields->push(HX_HCSTRING("tilesDown","\x87","\xc8","\x89","\x5c"));
	outFields->push(HX_HCSTRING("animIndex","\x41","\xe7","\x9b","\x75"));
	outFields->push(HX_HCSTRING("animCorners","\xed","\x90","\x30","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AutotileFormat_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(AutotileFormat_obj,autotileArrayLength),HX_HCSTRING("autotileArrayLength","\x42","\x64","\x56","\x2f")},
	{hx::fsInt,(int)offsetof(AutotileFormat_obj,defaultAnimationIndex),HX_HCSTRING("defaultAnimationIndex","\x0f","\x0a","\x0f","\xa4")},
	{hx::fsString,(int)offsetof(AutotileFormat_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(AutotileFormat_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(AutotileFormat_obj,tilesAcross),HX_HCSTRING("tilesAcross","\xe4","\x42","\xc4","\xc9")},
	{hx::fsInt,(int)offsetof(AutotileFormat_obj,tilesDown),HX_HCSTRING("tilesDown","\x87","\xc8","\x89","\x5c")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(AutotileFormat_obj,animIndex),HX_HCSTRING("animIndex","\x41","\xe7","\x9b","\x75")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AutotileFormat_obj,animCorners),HX_HCSTRING("animCorners","\xed","\x90","\x30","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AutotileFormat_obj_sStaticStorageInfo = 0;
#endif

static ::String AutotileFormat_obj_sMemberFields[] = {
	HX_HCSTRING("autotileArrayLength","\x42","\x64","\x56","\x2f"),
	HX_HCSTRING("defaultAnimationIndex","\x0f","\x0a","\x0f","\xa4"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("tilesAcross","\xe4","\x42","\xc4","\xc9"),
	HX_HCSTRING("tilesDown","\x87","\xc8","\x89","\x5c"),
	HX_HCSTRING("animIndex","\x41","\xe7","\x9b","\x75"),
	HX_HCSTRING("animCorners","\xed","\x90","\x30","\x84"),
	::String(null()) };

static void AutotileFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AutotileFormat_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AutotileFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AutotileFormat_obj::__mClass,"__mClass");
};

#endif

hx::Class AutotileFormat_obj::__mClass;

void AutotileFormat_obj::__register()
{
	hx::Object *dummy = new AutotileFormat_obj;
	AutotileFormat_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.scene.AutotileFormat","\x4b","\x46","\x61","\xe4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AutotileFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AutotileFormat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AutotileFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AutotileFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AutotileFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AutotileFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace scene
