// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_models_Atlas
#include <com/stencyl/models/Atlas.h>
#endif
#ifndef INCLUDED_com_stencyl_models_GameModel
#include <com/stencyl/models/GameModel.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1273691e359e256d_13_new,"com.stencyl.models.Resource","new",0x72f827f5,"com.stencyl.models.Resource.new","com/stencyl/models/Resource.hx",13,0x5d390c3c)
HX_LOCAL_STACK_FRAME(_hx_pos_1273691e359e256d_23_toString,"com.stencyl.models.Resource","toString",0x52dbdcf7,"com.stencyl.models.Resource.toString","com/stencyl/models/Resource.hx",23,0x5d390c3c)
HX_LOCAL_STACK_FRAME(_hx_pos_1273691e359e256d_29_isAtlasActive,"com.stencyl.models.Resource","isAtlasActive",0xe1a9617c,"com.stencyl.models.Resource.isAtlasActive","com/stencyl/models/Resource.hx",29,0x5d390c3c)
HX_LOCAL_STACK_FRAME(_hx_pos_1273691e359e256d_41_loadGraphics,"com.stencyl.models.Resource","loadGraphics",0x1ec172dc,"com.stencyl.models.Resource.loadGraphics","com/stencyl/models/Resource.hx",41,0x5d390c3c)
HX_LOCAL_STACK_FRAME(_hx_pos_1273691e359e256d_45_unloadGraphics,"com.stencyl.models.Resource","unloadGraphics",0x1845c375,"com.stencyl.models.Resource.unloadGraphics","com/stencyl/models/Resource.hx",45,0x5d390c3c)
HX_LOCAL_STACK_FRAME(_hx_pos_1273691e359e256d_49_reloadGraphics,"com.stencyl.models.Resource","reloadGraphics",0x5c795fcf,"com.stencyl.models.Resource.reloadGraphics","com/stencyl/models/Resource.hx",49,0x5d390c3c)
namespace com{
namespace stencyl{
namespace models{

void Resource_obj::__construct(int ID,::String name,int atlasID){
            	HX_STACKFRAME(&_hx_pos_1273691e359e256d_13_new)
HXLINE(  14)		this->ID = ID;
HXLINE(  15)		this->atlasID = atlasID;
HXLINE(  16)		this->name = name;
HXLINE(  18)		this->sID = ((ID + HX_(",",2c,00,00,00)) + name);
            	}

Dynamic Resource_obj::__CreateEmpty() { return new Resource_obj; }

void *Resource_obj::_hx_vtable = 0;

Dynamic Resource_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Resource_obj > _hx_result = new Resource_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Resource_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x170dc54f;
}

::String Resource_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_1273691e359e256d_23_toString)
HXDLIN(  23)		return this->sID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,toString,return )

bool Resource_obj::isAtlasActive(){
            	HX_STACKFRAME(&_hx_pos_1273691e359e256d_29_isAtlasActive)
HXLINE(  30)		::Dynamic this1 = ::com::stencyl::models::GameModel_obj::get()->atlases;
HXDLIN(  30)		 ::com::stencyl::models::Atlas atlas = ( ( ::haxe::ds::IntMap)(this1) )->get(this->atlasID).StaticCast<  ::com::stencyl::models::Atlas >();
HXLINE(  32)		if (hx::IsNull( atlas )) {
HXLINE(  34)			return false;
            		}
HXLINE(  37)		return atlas->active;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,isAtlasActive,return )

void Resource_obj::loadGraphics(){
            	HX_STACKFRAME(&_hx_pos_1273691e359e256d_41_loadGraphics)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,loadGraphics,(void))

void Resource_obj::unloadGraphics(){
            	HX_STACKFRAME(&_hx_pos_1273691e359e256d_45_unloadGraphics)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Resource_obj,unloadGraphics,(void))

void Resource_obj::reloadGraphics(int subID){
            	HX_STACKFRAME(&_hx_pos_1273691e359e256d_49_reloadGraphics)
HXLINE(  50)		this->unloadGraphics();
HXLINE(  51)		this->loadGraphics();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Resource_obj,reloadGraphics,(void))


hx::ObjectPtr< Resource_obj > Resource_obj::__new(int ID,::String name,int atlasID) {
	hx::ObjectPtr< Resource_obj > __this = new Resource_obj();
	__this->__construct(ID,name,atlasID);
	return __this;
}

hx::ObjectPtr< Resource_obj > Resource_obj::__alloc(hx::Ctx *_hx_ctx,int ID,::String name,int atlasID) {
	Resource_obj *__this = (Resource_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Resource_obj), true, "com.stencyl.models.Resource"));
	*(void **)__this = Resource_obj::_hx_vtable;
	__this->__construct(ID,name,atlasID);
	return __this;
}

Resource_obj::Resource_obj()
{
}

void Resource_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Resource);
	HX_MARK_MEMBER_NAME(ID,"ID");
	HX_MARK_MEMBER_NAME(atlasID,"atlasID");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(sID,"sID");
	HX_MARK_END_CLASS();
}

void Resource_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ID,"ID");
	HX_VISIT_MEMBER_NAME(atlasID,"atlasID");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(sID,"sID");
}

hx::Val Resource_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { return hx::Val( ID ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"sID") ) { return hx::Val( sID ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"atlasID") ) { return hx::Val( atlasID ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadGraphics") ) { return hx::Val( loadGraphics_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isAtlasActive") ) { return hx::Val( isAtlasActive_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"unloadGraphics") ) { return hx::Val( unloadGraphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadGraphics") ) { return hx::Val( reloadGraphics_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Resource_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { ID=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"sID") ) { sID=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"atlasID") ) { atlasID=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Resource_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"));
	outFields->push(HX_HCSTRING("atlasID","\xe6","\xb5","\xc3","\x92"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("sID","\x0e","\x83","\x57","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Resource_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Resource_obj,ID),HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Resource_obj,atlasID),HX_HCSTRING("atlasID","\xe6","\xb5","\xc3","\x92")},
	{hx::fsString,(int)offsetof(Resource_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(Resource_obj,sID),HX_HCSTRING("sID","\x0e","\x83","\x57","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Resource_obj_sStaticStorageInfo = 0;
#endif

static ::String Resource_obj_sMemberFields[] = {
	HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"),
	HX_HCSTRING("atlasID","\xe6","\xb5","\xc3","\x92"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("sID","\x0e","\x83","\x57","\x00"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("isAtlasActive","\xa7","\xdd","\x1d","\xa2"),
	HX_HCSTRING("loadGraphics","\x11","\xe5","\xd0","\xcb"),
	HX_HCSTRING("unloadGraphics","\xea","\xec","\xbd","\xbd"),
	HX_HCSTRING("reloadGraphics","\x44","\x89","\xf1","\x01"),
	::String(null()) };

static void Resource_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Resource_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Resource_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Resource_obj::__mClass,"__mClass");
};

#endif

hx::Class Resource_obj::__mClass;

void Resource_obj::__register()
{
	hx::Object *dummy = new Resource_obj;
	Resource_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.Resource","\x83","\x09","\x86","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Resource_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Resource_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Resource_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Resource_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Resource_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Resource_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
