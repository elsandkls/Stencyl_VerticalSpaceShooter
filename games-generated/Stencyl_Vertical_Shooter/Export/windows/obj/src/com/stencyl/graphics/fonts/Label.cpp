// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_EngineScaleUpdateListener
#include <com/stencyl/graphics/EngineScaleUpdateListener.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_fonts_BitmapFont
#include <com/stencyl/graphics/fonts/BitmapFont.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_fonts_DefaultFontGenerator
#include <com/stencyl/graphics/fonts/DefaultFontGenerator.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_fonts_Label
#include <com/stencyl/graphics/fonts/Label.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Font
#include <com/stencyl/models/Font.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_ColorMatrix
#include <com/stencyl/utils/ColorMatrix.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Utils
#include <com/stencyl/utils/Utils.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5aeaf135f786593e_19_new,"com.stencyl.graphics.fonts.Label","new",0xc7c2ff88,"com.stencyl.graphics.fonts.Label.new","com/stencyl/graphics/fonts/Label.hx",19,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_128_destroy,"com.stencyl.graphics.fonts.Label","destroy",0xacc01022,"com.stencyl.graphics.fonts.Label.destroy","com/stencyl/graphics/fonts/Label.hx",128,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_155_get_text,"com.stencyl.graphics.fonts.Label","get_text",0x7721680e,"com.stencyl.graphics.fonts.Label.get_text","com/stencyl/graphics/fonts/Label.hx",155,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_159_set_text,"com.stencyl.graphics.fonts.Label","set_text",0x257ec182,"com.stencyl.graphics.fonts.Label.set_text","com/stencyl/graphics/fonts/Label.hx",159,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_180_updateBitmapData,"com.stencyl.graphics.fonts.Label","updateBitmapData",0xba40fcfa,"com.stencyl.graphics.fonts.Label.updateBitmapData","com/stencyl/graphics/fonts/Label.hx",180,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_443_update,"com.stencyl.graphics.fonts.Label","update",0xfa6e3fe1,"com.stencyl.graphics.fonts.Label.update","com/stencyl/graphics/fonts/Label.hx",443,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_459_get_background,"com.stencyl.graphics.fonts.Label","get_background",0x280d6e0f,"com.stencyl.graphics.fonts.Label.get_background","com/stencyl/graphics/fonts/Label.hx",459,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_463_set_background,"com.stencyl.graphics.fonts.Label","set_background",0x482d5683,"com.stencyl.graphics.fonts.Label.set_background","com/stencyl/graphics/fonts/Label.hx",463,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_480_get_backgroundColor,"com.stencyl.graphics.fonts.Label","get_backgroundColor",0xa7681cd4,"com.stencyl.graphics.fonts.Label.get_backgroundColor","com/stencyl/graphics/fonts/Label.hx",480,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_484_set_backgroundColor,"com.stencyl.graphics.fonts.Label","set_backgroundColor",0xe4050fe0,"com.stencyl.graphics.fonts.Label.set_backgroundColor","com/stencyl/graphics/fonts/Label.hx",484,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_504_get_shadow,"com.stencyl.graphics.fonts.Label","get_shadow",0xd4eebd81,"com.stencyl.graphics.fonts.Label.get_shadow","com/stencyl/graphics/fonts/Label.hx",504,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_508_set_shadow,"com.stencyl.graphics.fonts.Label","set_shadow",0xd86c5bf5,"com.stencyl.graphics.fonts.Label.set_shadow","com/stencyl/graphics/fonts/Label.hx",508,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_528_get_shadowColor,"com.stencyl.graphics.fonts.Label","get_shadowColor",0x71179022,"com.stencyl.graphics.fonts.Label.get_shadowColor","com/stencyl/graphics/fonts/Label.hx",528,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_532_set_shadowColor,"com.stencyl.graphics.fonts.Label","set_shadowColor",0x6ce30d2e,"com.stencyl.graphics.fonts.Label.set_shadowColor","com/stencyl/graphics/fonts/Label.hx",532,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_551_get_padding,"com.stencyl.graphics.fonts.Label","get_padding",0xece65110,"com.stencyl.graphics.fonts.Label.get_padding","com/stencyl/graphics/fonts/Label.hx",551,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_555_set_padding,"com.stencyl.graphics.fonts.Label","set_padding",0xf753581c,"com.stencyl.graphics.fonts.Label.set_padding","com/stencyl/graphics/fonts/Label.hx",555,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_572_get_color,"com.stencyl.graphics.fonts.Label","get_color",0x02dccae2,"com.stencyl.graphics.fonts.Label.get_color","com/stencyl/graphics/fonts/Label.hx",572,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_576_set_color,"com.stencyl.graphics.fonts.Label","set_color",0xe62db6ee,"com.stencyl.graphics.fonts.Label.set_color","com/stencyl/graphics/fonts/Label.hx",576,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_591_get_useColor,"com.stencyl.graphics.fonts.Label","get_useColor",0xd137337d,"com.stencyl.graphics.fonts.Label.get_useColor","com/stencyl/graphics/fonts/Label.hx",591,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_595_set_useColor,"com.stencyl.graphics.fonts.Label","set_useColor",0xe63056f1,"com.stencyl.graphics.fonts.Label.set_useColor","com/stencyl/graphics/fonts/Label.hx",595,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_610_setWidth,"com.stencyl.graphics.fonts.Label","setWidth",0x8303fedc,"com.stencyl.graphics.fonts.Label.setWidth","com/stencyl/graphics/fonts/Label.hx",610,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_633_get_alignment,"com.stencyl.graphics.fonts.Label","get_alignment",0xac4267e2,"com.stencyl.graphics.fonts.Label.get_alignment","com/stencyl/graphics/fonts/Label.hx",633,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_637_set_alignment,"com.stencyl.graphics.fonts.Label","set_alignment",0xf14849ee,"com.stencyl.graphics.fonts.Label.set_alignment","com/stencyl/graphics/fonts/Label.hx",637,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_654_get_multiLine,"com.stencyl.graphics.fonts.Label","get_multiLine",0x4aef840c,"com.stencyl.graphics.fonts.Label.get_multiLine","com/stencyl/graphics/fonts/Label.hx",654,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_658_set_multiLine,"com.stencyl.graphics.fonts.Label","set_multiLine",0x8ff56618,"com.stencyl.graphics.fonts.Label.set_multiLine","com/stencyl/graphics/fonts/Label.hx",658,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_675_get_outline,"com.stencyl.graphics.fonts.Label","get_outline",0xfe270ec1,"com.stencyl.graphics.fonts.Label.get_outline","com/stencyl/graphics/fonts/Label.hx",675,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_679_set_outline,"com.stencyl.graphics.fonts.Label","set_outline",0x089415cd,"com.stencyl.graphics.fonts.Label.set_outline","com/stencyl/graphics/fonts/Label.hx",679,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_698_get_outlineColor,"com.stencyl.graphics.fonts.Label","get_outlineColor",0x5bf0b6e2,"com.stencyl.graphics.fonts.Label.get_outlineColor","com/stencyl/graphics/fonts/Label.hx",698,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_702_set_outlineColor,"com.stencyl.graphics.fonts.Label","set_outlineColor",0xb232a456,"com.stencyl.graphics.fonts.Label.set_outlineColor","com/stencyl/graphics/fonts/Label.hx",702,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_720_get_font,"com.stencyl.graphics.fonts.Label","get_font",0x6de7f930,"com.stencyl.graphics.fonts.Label.get_font","com/stencyl/graphics/fonts/Label.hx",720,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_724_set_font,"com.stencyl.graphics.fonts.Label","set_font",0x1c4552a4,"com.stencyl.graphics.fonts.Label.set_font","com/stencyl/graphics/fonts/Label.hx",724,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_742_get_stencylFont,"com.stencyl.graphics.fonts.Label","get_stencylFont",0x565ebe9a,"com.stencyl.graphics.fonts.Label.get_stencylFont","com/stencyl/graphics/fonts/Label.hx",742,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_746_set_stencylFont,"com.stencyl.graphics.fonts.Label","set_stencylFont",0x522a3ba6,"com.stencyl.graphics.fonts.Label.set_stencylFont","com/stencyl/graphics/fonts/Label.hx",746,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_762_get_lineSpacing,"com.stencyl.graphics.fonts.Label","get_lineSpacing",0x7ffdecae,"com.stencyl.graphics.fonts.Label.get_lineSpacing","com/stencyl/graphics/fonts/Label.hx",762,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_766_set_lineSpacing,"com.stencyl.graphics.fonts.Label","set_lineSpacing",0x7bc969ba,"com.stencyl.graphics.fonts.Label.set_lineSpacing","com/stencyl/graphics/fonts/Label.hx",766,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_778_setAlpha,"com.stencyl.graphics.fonts.Label","setAlpha",0xda37f034,"com.stencyl.graphics.fonts.Label.setAlpha","com/stencyl/graphics/fonts/Label.hx",778,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_792_getAlpha,"com.stencyl.graphics.fonts.Label","getAlpha",0x2bda96c0,"com.stencyl.graphics.fonts.Label.getAlpha","com/stencyl/graphics/fonts/Label.hx",792,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_802_get_fontScale,"com.stencyl.graphics.fonts.Label","get_fontScale",0xe6aef73a,"com.stencyl.graphics.fonts.Label.get_fontScale","com/stencyl/graphics/fonts/Label.hx",802,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_806_set_fontScale,"com.stencyl.graphics.fonts.Label","set_fontScale",0x2bb4d946,"com.stencyl.graphics.fonts.Label.set_fontScale","com/stencyl/graphics/fonts/Label.hx",806,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_822_get_letterSpacing,"com.stencyl.graphics.fonts.Label","get_letterSpacing",0xc0c827bc,"com.stencyl.graphics.fonts.Label.get_letterSpacing","com/stencyl/graphics/fonts/Label.hx",822,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_826_set_letterSpacing,"com.stencyl.graphics.fonts.Label","set_letterSpacing",0xe435ffc8,"com.stencyl.graphics.fonts.Label.set_letterSpacing","com/stencyl/graphics/fonts/Label.hx",826,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_841_get_autoUpperCase,"com.stencyl.graphics.fonts.Label","get_autoUpperCase",0x7f2e4842,"com.stencyl.graphics.fonts.Label.get_autoUpperCase","com/stencyl/graphics/fonts/Label.hx",841,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_845_set_autoUpperCase,"com.stencyl.graphics.fonts.Label","set_autoUpperCase",0xa29c204e,"com.stencyl.graphics.fonts.Label.set_autoUpperCase","com/stencyl/graphics/fonts/Label.hx",845,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_861_get_wordWrap,"com.stencyl.graphics.fonts.Label","get_wordWrap",0xc04a7495,"com.stencyl.graphics.fonts.Label.get_wordWrap","com/stencyl/graphics/fonts/Label.hx",861,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_865_set_wordWrap,"com.stencyl.graphics.fonts.Label","set_wordWrap",0xd5439809,"com.stencyl.graphics.fonts.Label.set_wordWrap","com/stencyl/graphics/fonts/Label.hx",865,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_879_get_fixedWidth,"com.stencyl.graphics.fonts.Label","get_fixedWidth",0xb57d4213,"com.stencyl.graphics.fonts.Label.get_fixedWidth","com/stencyl/graphics/fonts/Label.hx",879,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_883_set_fixedWidth,"com.stencyl.graphics.fonts.Label","set_fixedWidth",0xd59d2a87,"com.stencyl.graphics.fonts.Label.set_fixedWidth","com/stencyl/graphics/fonts/Label.hx",883,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_894_set_labelX,"com.stencyl.graphics.fonts.Label","set_labelX",0x04c8bbf9,"com.stencyl.graphics.fonts.Label.set_labelX","com/stencyl/graphics/fonts/Label.hx",894,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_902_get_labelX,"com.stencyl.graphics.fonts.Label","get_labelX",0x014b1d85,"com.stencyl.graphics.fonts.Label.get_labelX","com/stencyl/graphics/fonts/Label.hx",902,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_906_set_labelY,"com.stencyl.graphics.fonts.Label","set_labelY",0x04c8bbfa,"com.stencyl.graphics.fonts.Label.set_labelY","com/stencyl/graphics/fonts/Label.hx",906,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_914_get_labelY,"com.stencyl.graphics.fonts.Label","get_labelY",0x014b1d86,"com.stencyl.graphics.fonts.Label.get_labelY","com/stencyl/graphics/fonts/Label.hx",914,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_918_updatePosition,"com.stencyl.graphics.fonts.Label","updatePosition",0x8c1ee5aa,"com.stencyl.graphics.fonts.Label.updatePosition","com/stencyl/graphics/fonts/Label.hx",918,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_924_updateScale,"com.stencyl.graphics.fonts.Label","updateScale",0xf4d5cee9,"com.stencyl.graphics.fonts.Label.updateScale","com/stencyl/graphics/fonts/Label.hx",924,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_933_updateGlyphs,"com.stencyl.graphics.fonts.Label","updateGlyphs",0xb8724c08,"com.stencyl.graphics.fonts.Label.updateGlyphs","com/stencyl/graphics/fonts/Label.hx",933,0x10e3c8e8)
HX_LOCAL_STACK_FRAME(_hx_pos_5aeaf135f786593e_972_tint,"com.stencyl.graphics.fonts.Label","tint",0x06d6e0d3,"com.stencyl.graphics.fonts.Label.tint","com/stencyl/graphics/fonts/Label.hx",972,0x10e3c8e8)
namespace com{
namespace stencyl{
namespace graphics{
namespace fonts{

void Label_obj::__construct( ::com::stencyl::graphics::fonts::BitmapFont pFont){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_19_new)
HXLINE(  64)		this->cacheParentAnchor = ::com::stencyl::utils::Utils_obj::zero;
HXLINE(  72)		super::__construct();
HXLINE(  74)		this->_text = HX_("",00,00,00,00);
HXLINE(  75)		this->_color = (int)0;
HXLINE(  76)		this->_useColor = true;
HXLINE(  77)		this->_outline = false;
HXLINE(  78)		this->_outlineColor = (int)0;
HXLINE(  79)		this->_shadow = false;
HXLINE(  80)		this->_shadowColor = (int)0;
HXLINE(  81)		this->_background = false;
HXLINE(  82)		this->_backgroundColor = (int)16777215;
HXLINE(  83)		this->_alignment = (int)1;
HXLINE(  84)		this->_padding = (int)0;
HXLINE(  85)		this->_pendingTextChange = false;
HXLINE(  86)		this->_fieldWidth = (int)1;
HXLINE(  87)		this->_multiLine = false;
HXLINE(  89)		this->_lineSpacing = (int)0;
HXLINE(  90)		this->_letterSpacing = (int)0;
HXLINE(  91)		this->_fontScale = (int)1;
HXLINE(  92)		this->_autoUpperCase = false;
HXLINE(  93)		this->_fixedWidth = true;
HXLINE(  94)		this->_wordWrap = true;
HXLINE(  95)		this->_alpha = (int)1;
HXLINE(  97)		if (hx::IsNull( pFont )) {
HXLINE(  99)			if (hx::IsNull( ::com::stencyl::graphics::fonts::BitmapFont_obj::fetch(HX_("default",c1,d8,c3,9b)) )) {
HXLINE( 101)				::com::stencyl::graphics::fonts::DefaultFontGenerator_obj::generateAndStoreDefaultFont();
            			}
HXLINE( 103)			this->_font = ::com::stencyl::graphics::fonts::BitmapFont_obj::fetch(HX_("default",c1,d8,c3,9b));
            		}
            		else {
HXLINE( 107)			this->_font = pFont;
            		}
HXLINE( 117)		this->set_cacheAsBitmap(true);
HXLINE( 120)		this->_pendingTextChange = true;
HXLINE( 121)		this->update();
            	}

Dynamic Label_obj::__CreateEmpty() { return new Label_obj; }

void *Label_obj::_hx_vtable = 0;

Dynamic Label_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Label_obj > _hx_result = new Label_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Label_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17120186) {
		if (inClassId<=(int)0x0e7a4126) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x0e7a4126;
			}
		} else {
			return inClassId==(int)0x17120186;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

static ::com::stencyl::graphics::EngineScaleUpdateListener_obj _hx_com_stencyl_graphics_fonts_Label__hx_com_stencyl_graphics_EngineScaleUpdateListener= {
	( void (hx::Object::*)())&::com::stencyl::graphics::fonts::Label_obj::updateScale,
};

void *Label_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xac8361ef: return &_hx_com_stencyl_graphics_fonts_Label__hx_com_stencyl_graphics_EngineScaleUpdateListener;
	}
	return super::_hx_getInterface(inHash);
}

void Label_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_128_destroy)
HXLINE( 129)		this->_stencylFont = null();
HXLINE( 130)		this->_font = null();
HXLINE( 141)		this->removeChildren(null(),null());
HXLINE( 142)		this->_outlineTilemap = null();
HXLINE( 143)		this->_shadowTilemap = null();
HXLINE( 144)		this->_characterTilemap = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,destroy,(void))

::String Label_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_155_get_text)
HXDLIN( 155)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_text,return )

::String Label_obj::set_text(::String pText){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_159_set_text)
HXLINE( 160)		::String tmp = pText;
HXLINE( 161)		tmp = tmp.split(HX_("\\n",92,50,00,00))->join(HX_("\n",0a,00,00,00));
HXLINE( 162)		if ((tmp != this->_text)) {
HXLINE( 164)			this->_text = pText;
HXLINE( 165)			this->_text = this->_text.split(HX_("\\n",92,50,00,00))->join(HX_("\n",0a,00,00,00));
HXLINE( 166)			if (this->_autoUpperCase) {
HXLINE( 168)				this->_text = this->_text.toUpperCase();
            			}
HXLINE( 170)			this->_pendingTextChange = true;
HXLINE( 171)			this->update();
            		}
HXLINE( 173)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_text,return )

void Label_obj::updateBitmapData(){
            	HX_GC_STACKFRAME(&_hx_pos_5aeaf135f786593e_180_updateBitmapData)
HXLINE( 181)		if (hx::IsNull( this->_font )) {
HXLINE( 183)			return;
            		}
HXLINE( 186)		int calcFieldWidth = this->_fieldWidth;
HXLINE( 187)		::Array< ::String > rows = ::Array_obj< ::String >::__new(0);
HXLINE( 191)		int fontHeight = this->_font->getFontHeight();
HXLINE( 193)		int alignment = this->_alignment;
HXLINE( 196)		bool lineComplete;
HXLINE( 199)		::Array< ::String > lines = this->_text.split(HX_("\n",0a,00,00,00));
HXLINE( 200)		int i = (int)-1;
HXLINE( 201)		int j = (int)-1;
HXLINE( 202)		if (!(this->_multiLine)) {
HXLINE( 204)			lines = ::Array_obj< ::String >::__new(1)->init(0,lines->__get((int)0));
            		}
HXLINE( 207)		int wordLength;
HXLINE( 208)		::String word;
HXLINE( 209)		::String tempStr;
HXLINE( 210)		while(true){
HXLINE( 210)			i = (i + (int)1);
HXDLIN( 210)			if (!((i < lines->length))) {
HXLINE( 210)				goto _hx_goto_4;
            			}
HXLINE( 212)			if (this->_fixedWidth) {
HXLINE( 214)				lineComplete = false;
HXLINE( 215)				::Array< ::String > words = lines->__get(i).split(HX_(" ",20,00,00,00));
HXLINE( 217)				if ((words->length > (int)0)) {
HXLINE( 219)					int wordPos = (int)0;
HXLINE( 220)					::String txt = HX_("",00,00,00,00);
HXLINE( 221)					while(!(lineComplete)){
HXLINE( 223)						word = words->__get(wordPos);
HXLINE( 224)						::String currentRow = ((txt + word) + HX_(" ",20,00,00,00));
HXLINE( 225)						bool changed = false;
HXLINE( 227)						if (this->_wordWrap) {
HXLINE( 229)							int _hx_tmp = this->_font->getTextWidth(currentRow,this->_letterSpacing,this->_fontScale);
HXDLIN( 229)							if ((_hx_tmp > this->_fieldWidth)) {
HXLINE( 231)								if ((txt == HX_("",00,00,00,00))) {
HXLINE( 233)									words->removeRange((int)0,(int)1);
            								}
            								else {
HXLINE( 237)									rows->push(txt.substr((int)0,(txt.length - (int)1)));
            								}
HXLINE( 240)								txt = HX_("",00,00,00,00);
HXLINE( 241)								if (this->_multiLine) {
HXLINE( 243)									words->removeRange((int)0,wordPos);
            								}
            								else {
HXLINE( 247)									words->removeRange((int)0,words->length);
            								}
HXLINE( 249)								wordPos = (int)0;
HXLINE( 250)								changed = true;
            							}
            							else {
HXLINE( 254)								txt = (txt + (word + HX_(" ",20,00,00,00)));
HXLINE( 255)								wordPos = (wordPos + (int)1);
            							}
            						}
            						else {
HXLINE( 261)							int _hx_tmp1 = this->_font->getTextWidth(currentRow,this->_letterSpacing,this->_fontScale);
HXDLIN( 261)							if ((_hx_tmp1 > this->_fieldWidth)) {
HXLINE( 263)								j = (int)0;
HXLINE( 264)								tempStr = HX_("",00,00,00,00);
HXLINE( 265)								wordLength = word.length;
HXLINE( 266)								while((j < wordLength)){
HXLINE( 268)									currentRow = (txt + word.charAt(j));
HXLINE( 269)									int _hx_tmp2 = this->_font->getTextWidth(currentRow,this->_letterSpacing,this->_fontScale);
HXDLIN( 269)									if ((_hx_tmp2 > this->_fieldWidth)) {
HXLINE( 271)										rows->push(txt.substr((int)0,(txt.length - (int)1)));
HXLINE( 272)										txt = HX_("",00,00,00,00);
HXLINE( 273)										word = HX_("",00,00,00,00);
HXLINE( 274)										wordPos = words->length;
HXLINE( 275)										j = wordLength;
HXLINE( 276)										changed = true;
            									}
            									else {
HXLINE( 280)										txt = (txt + word.charAt(j));
            									}
HXLINE( 282)									j = (j + (int)1);
            								}
            							}
            							else {
HXLINE( 287)								txt = (txt + (word + HX_(" ",20,00,00,00)));
HXLINE( 288)								wordPos = (wordPos + (int)1);
            							}
            						}
HXLINE( 292)						if ((wordPos >= words->length)) {
HXLINE( 294)							if (!(changed)) {
HXLINE( 296)								::String subText = txt.substr((int)0,(txt.length - (int)1));
HXLINE( 297)								calcFieldWidth = ::Math_obj::floor(::Math_obj::max(calcFieldWidth,this->_font->getTextWidth(subText,this->_letterSpacing,this->_fontScale)));
HXLINE( 298)								rows->push(subText);
            							}
HXLINE( 300)							lineComplete = true;
            						}
            					}
            				}
            				else {
HXLINE( 306)					rows->push(HX_("",00,00,00,00));
            				}
            			}
            			else {
HXLINE( 311)				 ::com::stencyl::graphics::fonts::BitmapFont calcFieldWidth1 = this->_font;
HXDLIN( 311)				calcFieldWidth = ::Math_obj::floor(::Math_obj::max(calcFieldWidth,calcFieldWidth1->getTextWidth(lines->__get(i),this->_letterSpacing,this->_fontScale)));
HXLINE( 312)				rows->push(lines->__get(i));
            			}
            		}
            		_hx_goto_4:;
HXLINE( 316)		int finalWidth;
HXDLIN( 316)		if (this->_outline) {
HXLINE( 316)			finalWidth = (int)2;
            		}
            		else {
HXLINE( 316)			finalWidth = (int)0;
            		}
HXDLIN( 316)		int finalWidth1 = ((calcFieldWidth + (this->_padding * (int)2)) + finalWidth);
HXLINE( 320)		int finalHeight = (this->_padding * (int)2);
HXDLIN( 320)		int finalHeight1;
HXDLIN( 320)		if (this->_shadow) {
HXLINE( 320)			finalHeight1 = (int)1;
            		}
            		else {
HXLINE( 320)			finalHeight1 = (int)0;
            		}
HXDLIN( 320)		int finalHeight2;
HXDLIN( 320)		if (this->_outline) {
HXLINE( 320)			finalHeight2 = (int)2;
            		}
            		else {
HXLINE( 320)			finalHeight2 = (int)0;
            		}
HXDLIN( 320)		int finalHeight3;
HXDLIN( 320)		if ((rows->length >= (int)1)) {
HXLINE( 320)			int finalHeight4 = this->_lineSpacing;
HXDLIN( 320)			finalHeight3 = (finalHeight4 * (rows->length - (int)1));
            		}
            		else {
HXLINE( 320)			finalHeight3 = (int)0;
            		}
HXDLIN( 320)		int finalHeight5 = (::Math_obj::floor((finalHeight + ::Math_obj::max((int)1,((((rows->length * fontHeight) * this->_fontScale) + finalHeight1) + finalHeight2)))) + finalHeight3);
HXLINE( 343)		this->get_graphics()->clear();
HXLINE( 344)		if ((this->_background == true)) {
HXLINE( 346)			this->get_graphics()->beginFill(this->_backgroundColor,this->_alpha);
HXLINE( 347)			this->get_graphics()->drawRect((int)0,(int)0,finalWidth1,finalHeight5);
HXLINE( 348)			this->get_graphics()->endFill();
            		}
HXLINE( 350)		this->removeChildren(null(),null());
HXLINE( 351)		if (this->_outline) {
HXLINE( 353)			this->_outlineTilemap =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,finalWidth1,finalHeight5,this->_font->getTileset(),null());
HXLINE( 354)			this->tint(this->_outlineTilemap,this->_outlineColor);
HXLINE( 355)			this->addChild(this->_outlineTilemap);
            		}
HXLINE( 357)		if (this->_shadow) {
HXLINE( 359)			this->_shadowTilemap =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,finalWidth1,finalHeight5,this->_font->getTileset(),null());
HXLINE( 360)			this->tint(this->_shadowTilemap,this->_shadowColor);
HXLINE( 361)			this->addChild(this->_shadowTilemap);
            		}
HXLINE( 363)		this->_characterTilemap =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,finalWidth1,finalHeight5,this->_font->getTileset(),null());
HXLINE( 364)		if (this->_useColor) {
HXLINE( 366)			this->tint(this->_characterTilemap,this->_color);
            		}
HXLINE( 368)		this->addChild(this->_characterTilemap);
HXLINE( 372)		int row = (int)0;
HXLINE( 374)		{
HXLINE( 374)			int _g = (int)0;
HXDLIN( 374)			while((_g < rows->length)){
HXLINE( 374)				::String t = rows->__get(_g);
HXDLIN( 374)				_g = (_g + (int)1);
HXLINE( 376)				int ox = (int)0;
HXLINE( 377)				int oy = (int)0;
HXLINE( 378)				if ((alignment == (int)3)) {
HXLINE( 380)					if (this->_fixedWidth) {
HXLINE( 382)						int ox1 = this->_fieldWidth;
HXDLIN( 382)						ox = ::Math_obj::floor(((Float)(ox1 - this->_font->getTextWidth(t,this->_letterSpacing,this->_fontScale)) / (Float)(int)2));
            					}
            					else {
HXLINE( 386)						ox = ::Math_obj::floor(((Float)(finalWidth1 - this->_font->getTextWidth(t,this->_letterSpacing,this->_fontScale)) / (Float)(int)2));
            					}
            				}
HXLINE( 389)				if ((alignment == (int)2)) {
HXLINE( 391)					if (this->_fixedWidth) {
HXLINE( 393)						int ox2 = this->_fieldWidth;
HXDLIN( 393)						ox = (ox2 - ::Math_obj::floor(this->_font->getTextWidth(t,this->_letterSpacing,this->_fontScale)));
            					}
            					else {
HXLINE( 397)						int ox3 = (finalWidth1 - ::Math_obj::floor(this->_font->getTextWidth(t,this->_letterSpacing,this->_fontScale)));
HXDLIN( 397)						ox = (ox3 - ((int)2 * this->get_padding()));
            					}
            				}
HXLINE( 400)				if (this->_outline) {
HXLINE( 402)					{
HXLINE( 402)						int _g2 = (int)0;
HXDLIN( 402)						int _g1 = (int)3;
HXDLIN( 402)						while((_g2 < _g1)){
HXLINE( 402)							_g2 = (_g2 + (int)1);
HXDLIN( 402)							int py = (_g2 - (int)1);
HXLINE( 404)							{
HXLINE( 404)								int _g4 = (int)0;
HXDLIN( 404)								int _g3 = (int)3;
HXDLIN( 404)								while((_g4 < _g3)){
HXLINE( 404)									_g4 = (_g4 + (int)1);
HXDLIN( 404)									int px = (_g4 - (int)1);
HXLINE( 409)									 ::com::stencyl::graphics::fonts::BitmapFont _hx_tmp3 = this->_font;
HXDLIN( 409)									 ::openfl::display::Tilemap _hx_tmp4 = this->_outlineTilemap;
HXDLIN( 409)									Float _hx_tmp5 = this->_alpha;
HXDLIN( 409)									int _hx_tmp6 = ((px + ox) + this->_padding);
HXDLIN( 409)									_hx_tmp3->render(_hx_tmp4,t,_hx_tmp5,_hx_tmp6,((py + (row * (::Math_obj::floor((fontHeight * this->_fontScale)) + this->_lineSpacing))) + this->_padding),this->_letterSpacing,this->_fontScale,null());
            								}
            							}
            						}
            					}
HXLINE( 413)					ox = (ox + (int)1);
HXLINE( 414)					oy = (oy + (int)1);
            				}
HXLINE( 416)				if (this->_shadow) {
HXLINE( 421)					 ::com::stencyl::graphics::fonts::BitmapFont _hx_tmp7 = this->_font;
HXDLIN( 421)					 ::openfl::display::Tilemap _hx_tmp8 = this->_shadowTilemap;
HXDLIN( 421)					Float _hx_tmp9 = this->_alpha;
HXDLIN( 421)					int _hx_tmp10 = (((int)1 + ox) + this->_padding);
HXDLIN( 421)					_hx_tmp7->render(_hx_tmp8,t,_hx_tmp9,_hx_tmp10,((((int)1 + oy) + (row * (::Math_obj::floor((fontHeight * this->_fontScale)) + this->_lineSpacing))) + this->_padding),this->_letterSpacing,this->_fontScale,null());
            				}
HXLINE( 427)				 ::com::stencyl::graphics::fonts::BitmapFont _hx_tmp11 = this->_font;
HXDLIN( 427)				 ::openfl::display::Tilemap _hx_tmp12 = this->_characterTilemap;
HXDLIN( 427)				Float _hx_tmp13 = this->_alpha;
HXDLIN( 427)				int _hx_tmp14 = (ox + this->_padding);
HXDLIN( 427)				_hx_tmp11->render(_hx_tmp12,t,_hx_tmp13,_hx_tmp14,((oy + (row * (::Math_obj::floor((fontHeight * this->_fontScale)) + this->_lineSpacing))) + this->_padding),this->_letterSpacing,this->_fontScale,null());
HXLINE( 429)				row = (row + (int)1);
            			}
            		}
HXLINE( 435)		this->_pendingTextChange = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,updateBitmapData,(void))

void Label_obj::update(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_443_update)
HXDLIN( 443)		if (this->_pendingTextChange) {
HXLINE( 445)			this->updateBitmapData();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,update,(void))

bool Label_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_459_get_background)
HXDLIN( 459)		return this->_background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_background,return )

bool Label_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_463_set_background)
HXLINE( 464)		if ((this->_background != value)) {
HXLINE( 466)			this->_background = value;
HXLINE( 467)			this->_pendingTextChange = true;
HXLINE( 468)			this->update();
            		}
HXLINE( 470)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_background,return )

int Label_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_480_get_backgroundColor)
HXDLIN( 480)		return this->_backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_backgroundColor,return )

int Label_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_484_set_backgroundColor)
HXLINE( 485)		if ((this->_backgroundColor != value)) {
HXLINE( 487)			this->_backgroundColor = value;
HXLINE( 488)			if (this->_background) {
HXLINE( 490)				this->_pendingTextChange = true;
HXLINE( 491)				this->update();
            			}
            		}
HXLINE( 494)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_backgroundColor,return )

bool Label_obj::get_shadow(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_504_get_shadow)
HXDLIN( 504)		return this->_shadow;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_shadow,return )

bool Label_obj::set_shadow(bool value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_508_set_shadow)
HXLINE( 509)		if ((this->_shadow != value)) {
HXLINE( 511)			this->_shadow = value;
HXLINE( 512)			this->_outline = false;
HXLINE( 513)			this->updateGlyphs(false,this->_shadow,false);
HXLINE( 514)			this->_pendingTextChange = true;
HXLINE( 515)			this->update();
            		}
HXLINE( 518)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_shadow,return )

int Label_obj::get_shadowColor(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_528_get_shadowColor)
HXDLIN( 528)		return this->_shadowColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_shadowColor,return )

int Label_obj::set_shadowColor(int value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_532_set_shadowColor)
HXLINE( 533)		if ((this->_shadowColor != value)) {
HXLINE( 535)			this->_shadowColor = value;
HXLINE( 536)			this->updateGlyphs(false,this->_shadow,false);
HXLINE( 537)			this->_pendingTextChange = true;
HXLINE( 538)			this->update();
            		}
HXLINE( 541)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_shadowColor,return )

int Label_obj::get_padding(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_551_get_padding)
HXDLIN( 551)		return this->_padding;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_padding,return )

int Label_obj::set_padding(int value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_555_set_padding)
HXLINE( 556)		if ((this->_padding != value)) {
HXLINE( 558)			this->_padding = value;
HXLINE( 559)			this->_pendingTextChange = true;
HXLINE( 560)			this->update();
            		}
HXLINE( 562)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_padding,return )

int Label_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_572_get_color)
HXDLIN( 572)		return this->_color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_color,return )

int Label_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_576_set_color)
HXLINE( 577)		if ((this->_color != value)) {
HXLINE( 579)			this->_color = value;
HXLINE( 580)			this->updateGlyphs(true,false,false);
HXLINE( 581)			this->_pendingTextChange = true;
HXLINE( 582)			this->update();
            		}
HXLINE( 584)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_color,return )

bool Label_obj::get_useColor(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_591_get_useColor)
HXDLIN( 591)		return this->_useColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_useColor,return )

bool Label_obj::set_useColor(bool value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_595_set_useColor)
HXLINE( 596)		if ((this->_useColor != value)) {
HXLINE( 598)			this->_useColor = value;
HXLINE( 599)			this->updateGlyphs(true,false,false);
HXLINE( 600)			this->_pendingTextChange = true;
HXLINE( 601)			this->update();
            		}
HXLINE( 603)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_useColor,return )

int Label_obj::setWidth(int pWidth){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_610_setWidth)
HXLINE( 611)		if ((pWidth < (int)1)) {
HXLINE( 613)			pWidth = (int)1;
            		}
HXLINE( 615)		if ((pWidth != this->_fieldWidth)) {
HXLINE( 617)			this->_fieldWidth = pWidth;
HXLINE( 618)			this->_pendingTextChange = true;
HXLINE( 619)			this->update();
            		}
HXLINE( 622)		return pWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,setWidth,return )

int Label_obj::get_alignment(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_633_get_alignment)
HXDLIN( 633)		return this->_alignment;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_alignment,return )

int Label_obj::set_alignment(int pAlignment){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_637_set_alignment)
HXLINE( 638)		if ((this->_alignment != pAlignment)) {
HXLINE( 640)			this->_alignment = pAlignment;
HXLINE( 641)			this->_pendingTextChange = true;
HXLINE( 642)			this->update();
            		}
HXLINE( 644)		return pAlignment;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_alignment,return )

bool Label_obj::get_multiLine(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_654_get_multiLine)
HXDLIN( 654)		return this->_multiLine;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_multiLine,return )

bool Label_obj::set_multiLine(bool pMultiLine){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_658_set_multiLine)
HXLINE( 659)		if ((this->_multiLine != pMultiLine)) {
HXLINE( 661)			this->_multiLine = pMultiLine;
HXLINE( 662)			this->_pendingTextChange = true;
HXLINE( 663)			this->update();
            		}
HXLINE( 665)		return pMultiLine;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_multiLine,return )

bool Label_obj::get_outline(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_675_get_outline)
HXDLIN( 675)		return this->_outline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_outline,return )

bool Label_obj::set_outline(bool value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_679_set_outline)
HXLINE( 680)		if ((this->_outline != value)) {
HXLINE( 682)			this->_outline = value;
HXLINE( 683)			this->_shadow = false;
HXLINE( 684)			this->updateGlyphs(false,false,true);
HXLINE( 685)			this->_pendingTextChange = true;
HXLINE( 686)			this->update();
            		}
HXLINE( 688)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_outline,return )

int Label_obj::get_outlineColor(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_698_get_outlineColor)
HXDLIN( 698)		return this->_outlineColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_outlineColor,return )

int Label_obj::set_outlineColor(int value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_702_set_outlineColor)
HXLINE( 703)		if ((this->_outlineColor != value)) {
HXLINE( 705)			this->_outlineColor = value;
HXLINE( 706)			this->updateGlyphs(false,false,this->_outline);
HXLINE( 707)			this->_pendingTextChange = true;
HXLINE( 708)			this->update();
            		}
HXLINE( 710)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_outlineColor,return )

 ::com::stencyl::graphics::fonts::BitmapFont Label_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_720_get_font)
HXDLIN( 720)		return this->_font;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_font,return )

 ::com::stencyl::graphics::fonts::BitmapFont Label_obj::set_font( ::com::stencyl::graphics::fonts::BitmapFont pFont){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_724_set_font)
HXLINE( 725)		if (hx::IsNotEq( this->_font,pFont )) {
HXLINE( 727)			this->_font = pFont;
HXLINE( 728)			this->updateGlyphs(true,this->_shadow,this->_outline);
HXLINE( 729)			this->_pendingTextChange = true;
HXLINE( 730)			this->update();
            		}
HXLINE( 732)		return pFont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_font,return )

 ::com::stencyl::models::Font Label_obj::get_stencylFont(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_742_get_stencylFont)
HXDLIN( 742)		return this->_stencylFont;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_stencylFont,return )

 ::com::stencyl::models::Font Label_obj::set_stencylFont( ::com::stencyl::models::Font pFont){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_746_set_stencylFont)
HXLINE( 747)		if (hx::IsNotEq( this->_stencylFont,pFont )) {
HXLINE( 749)			this->_stencylFont = pFont;
HXLINE( 750)			this->set_font(pFont->font);
            		}
HXLINE( 752)		return pFont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_stencylFont,return )

int Label_obj::get_lineSpacing(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_762_get_lineSpacing)
HXDLIN( 762)		return this->_lineSpacing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_lineSpacing,return )

int Label_obj::set_lineSpacing(int pSpacing){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_766_set_lineSpacing)
HXLINE( 767)		if ((this->_lineSpacing != pSpacing)) {
HXLINE( 769)			this->_lineSpacing = ::Math_obj::floor(::Math_obj::abs(pSpacing));
HXLINE( 770)			this->_pendingTextChange = true;
HXLINE( 771)			this->update();
            		}
HXLINE( 773)		return pSpacing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_lineSpacing,return )

void Label_obj::setAlpha(Float pAlpha){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_778_setAlpha)
HXDLIN( 778)		if ((this->_alpha != pAlpha)) {
HXLINE( 780)			this->_alpha = pAlpha;
HXLINE( 784)			this->_pendingTextChange = true;
HXLINE( 785)			this->update();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,setAlpha,(void))

Float Label_obj::getAlpha(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_792_getAlpha)
HXDLIN( 792)		return this->_alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,getAlpha,return )

Float Label_obj::get_fontScale(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_802_get_fontScale)
HXDLIN( 802)		return this->_fontScale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_fontScale,return )

Float Label_obj::set_fontScale(Float pScale){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_806_set_fontScale)
HXLINE( 807)		Float tmp = ::Math_obj::abs(pScale);
HXLINE( 808)		if ((tmp != this->_fontScale)) {
HXLINE( 810)			this->_fontScale = tmp;
HXLINE( 811)			this->updateGlyphs(true,this->_shadow,this->_outline);
HXLINE( 812)			this->_pendingTextChange = true;
HXLINE( 813)			this->update();
            		}
HXLINE( 815)		return pScale;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_fontScale,return )

int Label_obj::get_letterSpacing(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_822_get_letterSpacing)
HXDLIN( 822)		return this->_letterSpacing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_letterSpacing,return )

int Label_obj::set_letterSpacing(int pSpacing){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_826_set_letterSpacing)
HXLINE( 827)		int tmp = ::Math_obj::floor(pSpacing);
HXLINE( 828)		if ((tmp != this->_letterSpacing)) {
HXLINE( 830)			this->_letterSpacing = tmp;
HXLINE( 831)			this->_pendingTextChange = true;
HXLINE( 832)			this->update();
            		}
HXLINE( 834)		return this->_letterSpacing;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_letterSpacing,return )

bool Label_obj::get_autoUpperCase(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_841_get_autoUpperCase)
HXDLIN( 841)		return this->_autoUpperCase;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_autoUpperCase,return )

bool Label_obj::set_autoUpperCase(bool value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_845_set_autoUpperCase)
HXLINE( 846)		if ((this->_autoUpperCase != value)) {
HXLINE( 848)			this->_autoUpperCase = value;
HXLINE( 849)			if (this->_autoUpperCase) {
HXLINE( 851)				this->set_text(this->_text.toUpperCase());
            			}
            		}
HXLINE( 854)		return this->_autoUpperCase;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_autoUpperCase,return )

bool Label_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_861_get_wordWrap)
HXDLIN( 861)		return this->_wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_wordWrap,return )

bool Label_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_865_set_wordWrap)
HXLINE( 866)		if ((this->_wordWrap != value)) {
HXLINE( 868)			this->_wordWrap = value;
HXLINE( 869)			this->_pendingTextChange = true;
HXLINE( 870)			this->update();
            		}
HXLINE( 872)		return this->_wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_wordWrap,return )

bool Label_obj::get_fixedWidth(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_879_get_fixedWidth)
HXDLIN( 879)		return this->_fixedWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_fixedWidth,return )

bool Label_obj::set_fixedWidth(bool value){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_883_set_fixedWidth)
HXLINE( 884)		if ((this->_fixedWidth != value)) {
HXLINE( 886)			this->_fixedWidth = value;
HXLINE( 887)			this->_pendingTextChange = true;
HXLINE( 888)			this->update();
            		}
HXLINE( 890)		return this->_fixedWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_fixedWidth,return )

Float Label_obj::set_labelX(Float x){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_894_set_labelX)
HXLINE( 895)		this->set_x((x * ::com::stencyl::Engine_obj::SCALE));
HXLINE( 897)		return (this->labelX = x);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_labelX,return )

Float Label_obj::get_labelX(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_902_get_labelX)
HXDLIN( 902)		return this->labelX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_labelX,return )

Float Label_obj::set_labelY(Float y){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_906_set_labelY)
HXLINE( 907)		this->set_y((y * ::com::stencyl::Engine_obj::SCALE));
HXLINE( 909)		return (this->labelY = y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Label_obj,set_labelY,return )

Float Label_obj::get_labelY(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_914_get_labelY)
HXDLIN( 914)		return this->labelY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,get_labelY,return )

void Label_obj::updatePosition(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_918_updatePosition)
HXLINE( 919)		Float _hx_tmp = this->get_labelX();
HXDLIN( 919)		this->set_x(((_hx_tmp * ::com::stencyl::Engine_obj::SCALE) - this->cacheParentAnchor->x));
HXLINE( 920)		Float _hx_tmp1 = this->get_labelY();
HXDLIN( 920)		this->set_y(((_hx_tmp1 * ::com::stencyl::Engine_obj::SCALE) - this->cacheParentAnchor->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,updatePosition,(void))

void Label_obj::updateScale(){
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_924_updateScale)
HXLINE( 925)		this->updatePosition();
HXLINE( 926)		if (hx::IsNotNull( this->_stencylFont )) {
HXLINE( 928)			this->set_font(this->_stencylFont->font);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Label_obj,updateScale,(void))

void Label_obj::updateGlyphs( ::Dynamic __o_textGlyphs, ::Dynamic __o_shadowGlyphs, ::Dynamic __o_outlineGlyphs){
 ::Dynamic textGlyphs = __o_textGlyphs.Default(false);
 ::Dynamic shadowGlyphs = __o_shadowGlyphs.Default(false);
 ::Dynamic outlineGlyphs = __o_outlineGlyphs.Default(false);
            	HX_STACKFRAME(&_hx_pos_5aeaf135f786593e_933_updateGlyphs)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Label_obj,updateGlyphs,(void))

void Label_obj::tint( ::openfl::display::Tilemap tilemap,int color){
            	HX_GC_STACKFRAME(&_hx_pos_5aeaf135f786593e_972_tint)
HXLINE( 973)		 ::com::stencyl::utils::ColorMatrix cm =  ::com::stencyl::utils::ColorMatrix_obj::__alloc( HX_CTX );
HXLINE( 974)		cm->colorize(color,(int)1);
HXLINE( 975)		tilemap->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0,cm->getFilter()));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Label_obj,tint,(void))


hx::ObjectPtr< Label_obj > Label_obj::__new( ::com::stencyl::graphics::fonts::BitmapFont pFont) {
	hx::ObjectPtr< Label_obj > __this = new Label_obj();
	__this->__construct(pFont);
	return __this;
}

hx::ObjectPtr< Label_obj > Label_obj::__alloc(hx::Ctx *_hx_ctx, ::com::stencyl::graphics::fonts::BitmapFont pFont) {
	Label_obj *__this = (Label_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Label_obj), true, "com.stencyl.graphics.fonts.Label"));
	*(void **)__this = Label_obj::_hx_vtable;
	__this->__construct(pFont);
	return __this;
}

Label_obj::Label_obj()
{
}

void Label_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Label);
	HX_MARK_MEMBER_NAME(_stencylFont,"_stencylFont");
	HX_MARK_MEMBER_NAME(_font,"_font");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_color,"_color");
	HX_MARK_MEMBER_NAME(_useColor,"_useColor");
	HX_MARK_MEMBER_NAME(_outline,"_outline");
	HX_MARK_MEMBER_NAME(_outlineColor,"_outlineColor");
	HX_MARK_MEMBER_NAME(_shadow,"_shadow");
	HX_MARK_MEMBER_NAME(_shadowColor,"_shadowColor");
	HX_MARK_MEMBER_NAME(_background,"_background");
	HX_MARK_MEMBER_NAME(_backgroundColor,"_backgroundColor");
	HX_MARK_MEMBER_NAME(_alignment,"_alignment");
	HX_MARK_MEMBER_NAME(_padding,"_padding");
	HX_MARK_MEMBER_NAME(_lineSpacing,"_lineSpacing");
	HX_MARK_MEMBER_NAME(_letterSpacing,"_letterSpacing");
	HX_MARK_MEMBER_NAME(_fontScale,"_fontScale");
	HX_MARK_MEMBER_NAME(_autoUpperCase,"_autoUpperCase");
	HX_MARK_MEMBER_NAME(_wordWrap,"_wordWrap");
	HX_MARK_MEMBER_NAME(_fixedWidth,"_fixedWidth");
	HX_MARK_MEMBER_NAME(_pendingTextChange,"_pendingTextChange");
	HX_MARK_MEMBER_NAME(_fieldWidth,"_fieldWidth");
	HX_MARK_MEMBER_NAME(_multiLine,"_multiLine");
	HX_MARK_MEMBER_NAME(_alpha,"_alpha");
	HX_MARK_MEMBER_NAME(labelX,"labelX");
	HX_MARK_MEMBER_NAME(labelY,"labelY");
	HX_MARK_MEMBER_NAME(_shadowTilemap,"_shadowTilemap");
	HX_MARK_MEMBER_NAME(_outlineTilemap,"_outlineTilemap");
	HX_MARK_MEMBER_NAME(_characterTilemap,"_characterTilemap");
	HX_MARK_MEMBER_NAME(cacheParentAnchor,"cacheParentAnchor");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Label_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_stencylFont,"_stencylFont");
	HX_VISIT_MEMBER_NAME(_font,"_font");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_color,"_color");
	HX_VISIT_MEMBER_NAME(_useColor,"_useColor");
	HX_VISIT_MEMBER_NAME(_outline,"_outline");
	HX_VISIT_MEMBER_NAME(_outlineColor,"_outlineColor");
	HX_VISIT_MEMBER_NAME(_shadow,"_shadow");
	HX_VISIT_MEMBER_NAME(_shadowColor,"_shadowColor");
	HX_VISIT_MEMBER_NAME(_background,"_background");
	HX_VISIT_MEMBER_NAME(_backgroundColor,"_backgroundColor");
	HX_VISIT_MEMBER_NAME(_alignment,"_alignment");
	HX_VISIT_MEMBER_NAME(_padding,"_padding");
	HX_VISIT_MEMBER_NAME(_lineSpacing,"_lineSpacing");
	HX_VISIT_MEMBER_NAME(_letterSpacing,"_letterSpacing");
	HX_VISIT_MEMBER_NAME(_fontScale,"_fontScale");
	HX_VISIT_MEMBER_NAME(_autoUpperCase,"_autoUpperCase");
	HX_VISIT_MEMBER_NAME(_wordWrap,"_wordWrap");
	HX_VISIT_MEMBER_NAME(_fixedWidth,"_fixedWidth");
	HX_VISIT_MEMBER_NAME(_pendingTextChange,"_pendingTextChange");
	HX_VISIT_MEMBER_NAME(_fieldWidth,"_fieldWidth");
	HX_VISIT_MEMBER_NAME(_multiLine,"_multiLine");
	HX_VISIT_MEMBER_NAME(_alpha,"_alpha");
	HX_VISIT_MEMBER_NAME(labelX,"labelX");
	HX_VISIT_MEMBER_NAME(labelY,"labelY");
	HX_VISIT_MEMBER_NAME(_shadowTilemap,"_shadowTilemap");
	HX_VISIT_MEMBER_NAME(_outlineTilemap,"_outlineTilemap");
	HX_VISIT_MEMBER_NAME(_characterTilemap,"_characterTilemap");
	HX_VISIT_MEMBER_NAME(cacheParentAnchor,"cacheParentAnchor");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Label_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_font() ); }
		if (HX_FIELD_EQ(inName,"tint") ) { return hx::Val( tint_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_font") ) { return hx::Val( _font ); }
		if (HX_FIELD_EQ(inName,"_text") ) { return hx::Val( _text ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_color") ) { return hx::Val( _color ); }
		if (HX_FIELD_EQ(inName,"_alpha") ) { return hx::Val( _alpha ); }
		if (HX_FIELD_EQ(inName,"labelX") ) { return hx::Val( inCallProp == hx::paccAlways ? get_labelX() : labelX ); }
		if (HX_FIELD_EQ(inName,"labelY") ) { return hx::Val( inCallProp == hx::paccAlways ? get_labelY() : labelY ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"shadow") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shadow() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_shadow") ) { return hx::Val( _shadow ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_padding() ); }
		if (HX_FIELD_EQ(inName,"outline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_outline() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_outline") ) { return hx::Val( _outline ); }
		if (HX_FIELD_EQ(inName,"_padding") ) { return hx::Val( _padding ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"useColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_useColor() ); }
		if (HX_FIELD_EQ(inName,"setWidth") ) { return hx::Val( setWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return hx::Val( get_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAlpha") ) { return hx::Val( setAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAlpha") ) { return hx::Val( getAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_useColor") ) { return hx::Val( _useColor ); }
		if (HX_FIELD_EQ(inName,"_wordWrap") ) { return hx::Val( _wordWrap ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"alignment") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alignment() ); }
		if (HX_FIELD_EQ(inName,"multiLine") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_multiLine() ); }
		if (HX_FIELD_EQ(inName,"fontScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fontScale() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_alignment") ) { return hx::Val( _alignment ); }
		if (HX_FIELD_EQ(inName,"_fontScale") ) { return hx::Val( _fontScale ); }
		if (HX_FIELD_EQ(inName,"_multiLine") ) { return hx::Val( _multiLine ); }
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_background() ); }
		if (HX_FIELD_EQ(inName,"get_shadow") ) { return hx::Val( get_shadow_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shadow") ) { return hx::Val( set_shadow_dyn() ); }
		if (HX_FIELD_EQ(inName,"fixedWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fixedWidth() ); }
		if (HX_FIELD_EQ(inName,"set_labelX") ) { return hx::Val( set_labelX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_labelX") ) { return hx::Val( get_labelX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_labelY") ) { return hx::Val( set_labelY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_labelY") ) { return hx::Val( get_labelY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { return hx::Val( _background ); }
		if (HX_FIELD_EQ(inName,"_fixedWidth") ) { return hx::Val( _fixedWidth ); }
		if (HX_FIELD_EQ(inName,"_fieldWidth") ) { return hx::Val( _fieldWidth ); }
		if (HX_FIELD_EQ(inName,"shadowColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shadowColor() ); }
		if (HX_FIELD_EQ(inName,"get_padding") ) { return hx::Val( get_padding_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_padding") ) { return hx::Val( set_padding_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_outline") ) { return hx::Val( get_outline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_outline") ) { return hx::Val( set_outline_dyn() ); }
		if (HX_FIELD_EQ(inName,"stencylFont") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stencylFont() ); }
		if (HX_FIELD_EQ(inName,"lineSpacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_lineSpacing() ); }
		if (HX_FIELD_EQ(inName,"updateScale") ) { return hx::Val( updateScale_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_stencylFont") ) { return hx::Val( _stencylFont ); }
		if (HX_FIELD_EQ(inName,"_shadowColor") ) { return hx::Val( _shadowColor ); }
		if (HX_FIELD_EQ(inName,"_lineSpacing") ) { return hx::Val( _lineSpacing ); }
		if (HX_FIELD_EQ(inName,"get_useColor") ) { return hx::Val( get_useColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_useColor") ) { return hx::Val( set_useColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"outlineColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_outlineColor() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateGlyphs") ) { return hx::Val( updateGlyphs_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_outlineColor") ) { return hx::Val( _outlineColor ); }
		if (HX_FIELD_EQ(inName,"get_alignment") ) { return hx::Val( get_alignment_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alignment") ) { return hx::Val( set_alignment_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiLine") ) { return hx::Val( get_multiLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiLine") ) { return hx::Val( set_multiLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fontScale") ) { return hx::Val( get_fontScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fontScale") ) { return hx::Val( set_fontScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_letterSpacing() ); }
		if (HX_FIELD_EQ(inName,"autoUpperCase") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoUpperCase() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_letterSpacing") ) { return hx::Val( _letterSpacing ); }
		if (HX_FIELD_EQ(inName,"_autoUpperCase") ) { return hx::Val( _autoUpperCase ); }
		if (HX_FIELD_EQ(inName,"_shadowTilemap") ) { return hx::Val( _shadowTilemap ); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fixedWidth") ) { return hx::Val( get_fixedWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fixedWidth") ) { return hx::Val( set_fixedWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePosition") ) { return hx::Val( updatePosition_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_outlineTilemap") ) { return hx::Val( _outlineTilemap ); }
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backgroundColor() ); }
		if (HX_FIELD_EQ(inName,"get_shadowColor") ) { return hx::Val( get_shadowColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shadowColor") ) { return hx::Val( set_shadowColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stencylFont") ) { return hx::Val( get_stencylFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_stencylFont") ) { return hx::Val( set_stencylFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_lineSpacing") ) { return hx::Val( get_lineSpacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_lineSpacing") ) { return hx::Val( set_lineSpacing_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_backgroundColor") ) { return hx::Val( _backgroundColor ); }
		if (HX_FIELD_EQ(inName,"updateBitmapData") ) { return hx::Val( updateBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_outlineColor") ) { return hx::Val( get_outlineColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_outlineColor") ) { return hx::Val( set_outlineColor_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_characterTilemap") ) { return hx::Val( _characterTilemap ); }
		if (HX_FIELD_EQ(inName,"cacheParentAnchor") ) { return hx::Val( cacheParentAnchor ); }
		if (HX_FIELD_EQ(inName,"get_letterSpacing") ) { return hx::Val( get_letterSpacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_letterSpacing") ) { return hx::Val( set_letterSpacing_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoUpperCase") ) { return hx::Val( get_autoUpperCase_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoUpperCase") ) { return hx::Val( set_autoUpperCase_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_pendingTextChange") ) { return hx::Val( _pendingTextChange ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Label_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_font(inValue.Cast<  ::com::stencyl::graphics::fonts::BitmapFont >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_font") ) { _font=inValue.Cast<  ::com::stencyl::graphics::fonts::BitmapFont >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_text") ) { _text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_color") ) { _color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_alpha") ) { _alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"labelX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_labelX(inValue.Cast< Float >()) );labelX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"labelY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_labelY(inValue.Cast< Float >()) );labelY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shadow") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shadow(inValue.Cast< bool >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_shadow") ) { _shadow=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_padding(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"outline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_outline(inValue.Cast< bool >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_outline") ) { _outline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_padding") ) { _padding=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_useColor(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_useColor") ) { _useColor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_wordWrap") ) { _wordWrap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alignment") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alignment(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"multiLine") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiLine(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"fontScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fontScale(inValue.Cast< Float >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_alignment") ) { _alignment=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fontScale") ) { _fontScale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_multiLine") ) { _multiLine=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"fixedWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fixedWidth(inValue.Cast< bool >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { _background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fixedWidth") ) { _fixedWidth=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fieldWidth") ) { _fieldWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shadowColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shadowColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"stencylFont") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_stencylFont(inValue.Cast<  ::com::stencyl::models::Font >()) ); }
		if (HX_FIELD_EQ(inName,"lineSpacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_lineSpacing(inValue.Cast< int >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_stencylFont") ) { _stencylFont=inValue.Cast<  ::com::stencyl::models::Font >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_shadowColor") ) { _shadowColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lineSpacing") ) { _lineSpacing=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outlineColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_outlineColor(inValue.Cast< int >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_outlineColor") ) { _outlineColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_letterSpacing(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"autoUpperCase") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoUpperCase(inValue.Cast< bool >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_letterSpacing") ) { _letterSpacing=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_autoUpperCase") ) { _autoUpperCase=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_shadowTilemap") ) { _shadowTilemap=inValue.Cast<  ::openfl::display::Tilemap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_outlineTilemap") ) { _outlineTilemap=inValue.Cast<  ::openfl::display::Tilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue.Cast< int >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_backgroundColor") ) { _backgroundColor=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_characterTilemap") ) { _characterTilemap=inValue.Cast<  ::openfl::display::Tilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheParentAnchor") ) { cacheParentAnchor=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_pendingTextChange") ) { _pendingTextChange=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Label_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_stencylFont","\xdc","\x69","\x79","\x0c"));
	outFields->push(HX_HCSTRING("_font","\xae","\x79","\xd1","\xf6"));
	outFields->push(HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00"));
	outFields->push(HX_HCSTRING("_color","\xa4","\xb8","\x43","\x46"));
	outFields->push(HX_HCSTRING("_useColor","\xfb","\xca","\x5d","\x59"));
	outFields->push(HX_HCSTRING("_outline","\x03","\x71","\x76","\x1b"));
	outFields->push(HX_HCSTRING("_outlineColor","\x60","\xe5","\x2b","\xfd"));
	outFields->push(HX_HCSTRING("_shadow","\x7f","\xd9","\x97","\x8b"));
	outFields->push(HX_HCSTRING("_shadowColor","\x64","\x3b","\x32","\x27"));
	outFields->push(HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"));
	outFields->push(HX_HCSTRING("_backgroundColor","\x16","\x91","\x26","\xf8"));
	outFields->push(HX_HCSTRING("_alignment","\xa4","\x5e","\xe0","\x45"));
	outFields->push(HX_HCSTRING("_padding","\x52","\xb3","\x35","\x0a"));
	outFields->push(HX_HCSTRING("_lineSpacing","\xf0","\x97","\x18","\x36"));
	outFields->push(HX_HCSTRING("_letterSpacing","\x7e","\xa7","\x55","\x33"));
	outFields->push(HX_HCSTRING("_fontScale","\xfc","\xed","\x4c","\x80"));
	outFields->push(HX_HCSTRING("_autoUpperCase","\x04","\xc8","\xbb","\xf1"));
	outFields->push(HX_HCSTRING("_wordWrap","\x13","\x0c","\x71","\x48"));
	outFields->push(HX_HCSTRING("_fixedWidth","\x11","\x35","\x17","\x86"));
	outFields->push(HX_HCSTRING("_pendingTextChange","\xf5","\xc5","\x5a","\x5e"));
	outFields->push(HX_HCSTRING("_fieldWidth","\x0b","\xfc","\x6e","\x6a"));
	outFields->push(HX_HCSTRING("_multiLine","\xce","\x7a","\x8d","\xe4"));
	outFields->push(HX_HCSTRING("_alpha","\x9f","\xee","\x7d","\x1d"));
	outFields->push(HX_HCSTRING("labelX","\xe4","\x27","\x7d","\x49"));
	outFields->push(HX_HCSTRING("labelY","\xe5","\x27","\x7d","\x49"));
	outFields->push(HX_HCSTRING("_shadowTilemap","\x6f","\xfc","\xeb","\x5a"));
	outFields->push(HX_HCSTRING("_outlineTilemap","\x6b","\x1d","\x21","\xe2"));
	outFields->push(HX_HCSTRING("_characterTilemap","\xe4","\xe1","\x97","\x9f"));
	outFields->push(HX_HCSTRING("cacheParentAnchor","\xa1","\x30","\x21","\x91"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("shadow","\xe0","\xc7","\x20","\x1d"));
	outFields->push(HX_HCSTRING("shadowColor","\x63","\x8d","\x28","\xc1"));
	outFields->push(HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("useColor","\x9c","\xd3","\xc7","\x11"));
	outFields->push(HX_HCSTRING("alignment","\xe3","\xe2","\x3d","\xea"));
	outFields->push(HX_HCSTRING("multiLine","\x0d","\xff","\xea","\x88"));
	outFields->push(HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1"));
	outFields->push(HX_HCSTRING("outlineColor","\x81","\x52","\xbd","\x1a"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("stencylFont","\xdb","\xbb","\x6f","\xa6"));
	outFields->push(HX_HCSTRING("lineSpacing","\xef","\xe9","\x0e","\xd0"));
	outFields->push(HX_HCSTRING("fontScale","\x3b","\x72","\xaa","\x24"));
	outFields->push(HX_HCSTRING("letterSpacing","\x3d","\xb7","\x03","\xf5"));
	outFields->push(HX_HCSTRING("autoUpperCase","\xc3","\xd7","\x69","\xb3"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("fixedWidth","\xf2","\x67","\x8d","\xb3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Label_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::models::Font*/ ,(int)offsetof(Label_obj,_stencylFont),HX_HCSTRING("_stencylFont","\xdc","\x69","\x79","\x0c")},
	{hx::fsObject /*::com::stencyl::graphics::fonts::BitmapFont*/ ,(int)offsetof(Label_obj,_font),HX_HCSTRING("_font","\xae","\x79","\xd1","\xf6")},
	{hx::fsString,(int)offsetof(Label_obj,_text),HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00")},
	{hx::fsInt,(int)offsetof(Label_obj,_color),HX_HCSTRING("_color","\xa4","\xb8","\x43","\x46")},
	{hx::fsBool,(int)offsetof(Label_obj,_useColor),HX_HCSTRING("_useColor","\xfb","\xca","\x5d","\x59")},
	{hx::fsBool,(int)offsetof(Label_obj,_outline),HX_HCSTRING("_outline","\x03","\x71","\x76","\x1b")},
	{hx::fsInt,(int)offsetof(Label_obj,_outlineColor),HX_HCSTRING("_outlineColor","\x60","\xe5","\x2b","\xfd")},
	{hx::fsBool,(int)offsetof(Label_obj,_shadow),HX_HCSTRING("_shadow","\x7f","\xd9","\x97","\x8b")},
	{hx::fsInt,(int)offsetof(Label_obj,_shadowColor),HX_HCSTRING("_shadowColor","\x64","\x3b","\x32","\x27")},
	{hx::fsBool,(int)offsetof(Label_obj,_background),HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8")},
	{hx::fsInt,(int)offsetof(Label_obj,_backgroundColor),HX_HCSTRING("_backgroundColor","\x16","\x91","\x26","\xf8")},
	{hx::fsInt,(int)offsetof(Label_obj,_alignment),HX_HCSTRING("_alignment","\xa4","\x5e","\xe0","\x45")},
	{hx::fsInt,(int)offsetof(Label_obj,_padding),HX_HCSTRING("_padding","\x52","\xb3","\x35","\x0a")},
	{hx::fsInt,(int)offsetof(Label_obj,_lineSpacing),HX_HCSTRING("_lineSpacing","\xf0","\x97","\x18","\x36")},
	{hx::fsInt,(int)offsetof(Label_obj,_letterSpacing),HX_HCSTRING("_letterSpacing","\x7e","\xa7","\x55","\x33")},
	{hx::fsFloat,(int)offsetof(Label_obj,_fontScale),HX_HCSTRING("_fontScale","\xfc","\xed","\x4c","\x80")},
	{hx::fsBool,(int)offsetof(Label_obj,_autoUpperCase),HX_HCSTRING("_autoUpperCase","\x04","\xc8","\xbb","\xf1")},
	{hx::fsBool,(int)offsetof(Label_obj,_wordWrap),HX_HCSTRING("_wordWrap","\x13","\x0c","\x71","\x48")},
	{hx::fsBool,(int)offsetof(Label_obj,_fixedWidth),HX_HCSTRING("_fixedWidth","\x11","\x35","\x17","\x86")},
	{hx::fsBool,(int)offsetof(Label_obj,_pendingTextChange),HX_HCSTRING("_pendingTextChange","\xf5","\xc5","\x5a","\x5e")},
	{hx::fsInt,(int)offsetof(Label_obj,_fieldWidth),HX_HCSTRING("_fieldWidth","\x0b","\xfc","\x6e","\x6a")},
	{hx::fsBool,(int)offsetof(Label_obj,_multiLine),HX_HCSTRING("_multiLine","\xce","\x7a","\x8d","\xe4")},
	{hx::fsFloat,(int)offsetof(Label_obj,_alpha),HX_HCSTRING("_alpha","\x9f","\xee","\x7d","\x1d")},
	{hx::fsFloat,(int)offsetof(Label_obj,labelX),HX_HCSTRING("labelX","\xe4","\x27","\x7d","\x49")},
	{hx::fsFloat,(int)offsetof(Label_obj,labelY),HX_HCSTRING("labelY","\xe5","\x27","\x7d","\x49")},
	{hx::fsObject /*::openfl::display::Tilemap*/ ,(int)offsetof(Label_obj,_shadowTilemap),HX_HCSTRING("_shadowTilemap","\x6f","\xfc","\xeb","\x5a")},
	{hx::fsObject /*::openfl::display::Tilemap*/ ,(int)offsetof(Label_obj,_outlineTilemap),HX_HCSTRING("_outlineTilemap","\x6b","\x1d","\x21","\xe2")},
	{hx::fsObject /*::openfl::display::Tilemap*/ ,(int)offsetof(Label_obj,_characterTilemap),HX_HCSTRING("_characterTilemap","\xe4","\xe1","\x97","\x9f")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Label_obj,cacheParentAnchor),HX_HCSTRING("cacheParentAnchor","\xa1","\x30","\x21","\x91")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Label_obj_sStaticStorageInfo = 0;
#endif

static ::String Label_obj_sMemberFields[] = {
	HX_HCSTRING("_stencylFont","\xdc","\x69","\x79","\x0c"),
	HX_HCSTRING("_font","\xae","\x79","\xd1","\xf6"),
	HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00"),
	HX_HCSTRING("_color","\xa4","\xb8","\x43","\x46"),
	HX_HCSTRING("_useColor","\xfb","\xca","\x5d","\x59"),
	HX_HCSTRING("_outline","\x03","\x71","\x76","\x1b"),
	HX_HCSTRING("_outlineColor","\x60","\xe5","\x2b","\xfd"),
	HX_HCSTRING("_shadow","\x7f","\xd9","\x97","\x8b"),
	HX_HCSTRING("_shadowColor","\x64","\x3b","\x32","\x27"),
	HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"),
	HX_HCSTRING("_backgroundColor","\x16","\x91","\x26","\xf8"),
	HX_HCSTRING("_alignment","\xa4","\x5e","\xe0","\x45"),
	HX_HCSTRING("_padding","\x52","\xb3","\x35","\x0a"),
	HX_HCSTRING("_lineSpacing","\xf0","\x97","\x18","\x36"),
	HX_HCSTRING("_letterSpacing","\x7e","\xa7","\x55","\x33"),
	HX_HCSTRING("_fontScale","\xfc","\xed","\x4c","\x80"),
	HX_HCSTRING("_autoUpperCase","\x04","\xc8","\xbb","\xf1"),
	HX_HCSTRING("_wordWrap","\x13","\x0c","\x71","\x48"),
	HX_HCSTRING("_fixedWidth","\x11","\x35","\x17","\x86"),
	HX_HCSTRING("_pendingTextChange","\xf5","\xc5","\x5a","\x5e"),
	HX_HCSTRING("_fieldWidth","\x0b","\xfc","\x6e","\x6a"),
	HX_HCSTRING("_multiLine","\xce","\x7a","\x8d","\xe4"),
	HX_HCSTRING("_alpha","\x9f","\xee","\x7d","\x1d"),
	HX_HCSTRING("labelX","\xe4","\x27","\x7d","\x49"),
	HX_HCSTRING("labelY","\xe5","\x27","\x7d","\x49"),
	HX_HCSTRING("_shadowTilemap","\x6f","\xfc","\xeb","\x5a"),
	HX_HCSTRING("_outlineTilemap","\x6b","\x1d","\x21","\xe2"),
	HX_HCSTRING("_characterTilemap","\xe4","\xe1","\x97","\x9f"),
	HX_HCSTRING("cacheParentAnchor","\xa1","\x30","\x21","\x91"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("updateBitmapData","\x22","\x85","\xac","\x7d"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("get_backgroundColor","\xac","\x1d","\x52","\x98"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	HX_HCSTRING("get_shadow","\xa9","\x37","\xa8","\x0d"),
	HX_HCSTRING("set_shadow","\x1d","\xd6","\x25","\x11"),
	HX_HCSTRING("get_shadowColor","\xfa","\x44","\x0a","\x82"),
	HX_HCSTRING("set_shadowColor","\x06","\xc2","\xd5","\x7d"),
	HX_HCSTRING("get_padding","\xe8","\xb9","\x77","\x56"),
	HX_HCSTRING("set_padding","\xf4","\xc0","\xe4","\x60"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_useColor","\xa5","\x87","\xe1","\xc6"),
	HX_HCSTRING("set_useColor","\x19","\xab","\xda","\xdb"),
	HX_HCSTRING("setWidth","\x04","\x1f","\x97","\xd8"),
	HX_HCSTRING("get_alignment","\xba","\xb6","\xa1","\xab"),
	HX_HCSTRING("set_alignment","\xc6","\x98","\xa7","\xf0"),
	HX_HCSTRING("get_multiLine","\xe4","\xd2","\x4e","\x4a"),
	HX_HCSTRING("set_multiLine","\xf0","\xb4","\x54","\x8f"),
	HX_HCSTRING("get_outline","\x99","\x77","\xb8","\x67"),
	HX_HCSTRING("set_outline","\xa5","\x7e","\x25","\x72"),
	HX_HCSTRING("get_outlineColor","\x0a","\x3f","\x5c","\x1f"),
	HX_HCSTRING("set_outlineColor","\x7e","\x2c","\x9e","\x75"),
	HX_HCSTRING("get_font","\x58","\x19","\x7b","\xc3"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("get_stencylFont","\x72","\x73","\x51","\x67"),
	HX_HCSTRING("set_stencylFont","\x7e","\xf0","\x1c","\x63"),
	HX_HCSTRING("get_lineSpacing","\x86","\xa1","\xf0","\x90"),
	HX_HCSTRING("set_lineSpacing","\x92","\x1e","\xbc","\x8c"),
	HX_HCSTRING("setAlpha","\x5c","\x10","\xcb","\x2f"),
	HX_HCSTRING("getAlpha","\xe8","\xb6","\x6d","\x81"),
	HX_HCSTRING("get_fontScale","\x12","\x46","\x0e","\xe6"),
	HX_HCSTRING("set_fontScale","\x1e","\x28","\x14","\x2b"),
	HX_HCSTRING("get_letterSpacing","\x94","\xc2","\x73","\xfb"),
	HX_HCSTRING("set_letterSpacing","\xa0","\x9a","\xe1","\x1e"),
	HX_HCSTRING("get_autoUpperCase","\x1a","\xe3","\xd9","\xb9"),
	HX_HCSTRING("set_autoUpperCase","\x26","\xbb","\x47","\xdd"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("get_fixedWidth","\x3b","\xf0","\x82","\x29"),
	HX_HCSTRING("set_fixedWidth","\xaf","\xd8","\xa2","\x49"),
	HX_HCSTRING("set_labelX","\x21","\x36","\x82","\x3d"),
	HX_HCSTRING("get_labelX","\xad","\x97","\x04","\x3a"),
	HX_HCSTRING("set_labelY","\x22","\x36","\x82","\x3d"),
	HX_HCSTRING("get_labelY","\xae","\x97","\x04","\x3a"),
	HX_HCSTRING("updatePosition","\xd2","\x93","\x24","\x00"),
	HX_HCSTRING("updateScale","\xc1","\x37","\x67","\x5e"),
	HX_HCSTRING("updateGlyphs","\x30","\xa0","\x1c","\xae"),
	HX_HCSTRING("tint","\xfb","\xcc","\xfc","\x4c"),
	::String(null()) };

static void Label_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Label_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Label_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Label_obj::__mClass,"__mClass");
};

#endif

hx::Class Label_obj::__mClass;

void Label_obj::__register()
{
	hx::Object *dummy = new Label_obj;
	Label_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.fonts.Label","\x96","\xdb","\xe2","\x70");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Label_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Label_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Label_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Label_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Label_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Label_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace fonts
