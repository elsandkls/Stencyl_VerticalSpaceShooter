// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_dynamics_B2BodyDef
#include <box2D/dynamics/B2BodyDef.h>
#endif
#ifndef INCLUDED_com_stencyl_Data
#include <com/stencyl/Data.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_ActorType
#include <com/stencyl/models/actor/ActorType.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_LazyIntMap
#include <com/stencyl/utils/LazyIntMap.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d86ece03da96c8f0_34_new,"com.stencyl.models.actor.ActorType","new",0xcddfd2f3,"com.stencyl.models.actor.ActorType.new","com/stencyl/models/actor/ActorType.hx",34,0xc76ce05d)
HX_LOCAL_STACK_FRAME(_hx_pos_d86ece03da96c8f0_49_toString,"com.stencyl.models.actor.ActorType","toString",0x4c919939,"com.stencyl.models.actor.ActorType.toString","com/stencyl/models/actor/ActorType.hx",49,0xc76ce05d)
HX_LOCAL_STACK_FRAME(_hx_pos_d86ece03da96c8f0_56_loadGraphics,"com.stencyl.models.actor.ActorType","loadGraphics",0xec77781e,"com.stencyl.models.actor.ActorType.loadGraphics","com/stencyl/models/actor/ActorType.hx",56,0xc76ce05d)
HX_LOCAL_STACK_FRAME(_hx_pos_d86ece03da96c8f0_61_unloadGraphics,"com.stencyl.models.actor.ActorType","unloadGraphics",0x43791d37,"com.stencyl.models.actor.ActorType.unloadGraphics","com/stencyl/models/actor/ActorType.hx",61,0xc76ce05d)
namespace com{
namespace stencyl{
namespace models{
namespace actor{

void ActorType_obj::__construct(int ID,int atlasID,::String name,int groupID,int spriteID, ::haxe::ds::StringMap behaviorValues, ::box2D::dynamics::B2BodyDef bodyDef,int physicsMode,bool autoScale,bool pausable,bool ignoreGravity){
            	HX_STACKFRAME(&_hx_pos_d86ece03da96c8f0_34_new)
HXLINE(  35)		super::__construct(ID,name,atlasID);
HXLINE(  37)		this->groupID = groupID;
HXLINE(  38)		this->spriteID = spriteID;
HXLINE(  39)		this->behaviorValues = behaviorValues;
HXLINE(  40)		this->bodyDef = bodyDef;
HXLINE(  41)		this->physicsMode = physicsMode;
HXLINE(  42)		this->autoScale = autoScale;
HXLINE(  43)		this->pausable = pausable;
HXLINE(  44)		this->ignoreGravity = ignoreGravity;
            	}

Dynamic ActorType_obj::__CreateEmpty() { return new ActorType_obj; }

void *ActorType_obj::_hx_vtable = 0;

Dynamic ActorType_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ActorType_obj > _hx_result = new ActorType_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool ActorType_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x170dc54f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x170dc54f;
	} else {
		return inClassId==(int)0x46f6d7cf;
	}
}

::String ActorType_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d86ece03da96c8f0_49_toString)
HXDLIN(  49)		return this->name;
            	}


void ActorType_obj::loadGraphics(){
            	HX_STACKFRAME(&_hx_pos_d86ece03da96c8f0_56_loadGraphics)
HXDLIN(  56)		::com::stencyl::Data_obj::get()->resources->get(this->spriteID).StaticCast<  ::com::stencyl::models::Resource >()->loadGraphics();
            	}


void ActorType_obj::unloadGraphics(){
            	HX_STACKFRAME(&_hx_pos_d86ece03da96c8f0_61_unloadGraphics)
HXDLIN(  61)		::com::stencyl::Data_obj::get()->resources->get(this->spriteID).StaticCast<  ::com::stencyl::models::Resource >()->unloadGraphics();
            	}



hx::ObjectPtr< ActorType_obj > ActorType_obj::__new(int ID,int atlasID,::String name,int groupID,int spriteID, ::haxe::ds::StringMap behaviorValues, ::box2D::dynamics::B2BodyDef bodyDef,int physicsMode,bool autoScale,bool pausable,bool ignoreGravity) {
	hx::ObjectPtr< ActorType_obj > __this = new ActorType_obj();
	__this->__construct(ID,atlasID,name,groupID,spriteID,behaviorValues,bodyDef,physicsMode,autoScale,pausable,ignoreGravity);
	return __this;
}

hx::ObjectPtr< ActorType_obj > ActorType_obj::__alloc(hx::Ctx *_hx_ctx,int ID,int atlasID,::String name,int groupID,int spriteID, ::haxe::ds::StringMap behaviorValues, ::box2D::dynamics::B2BodyDef bodyDef,int physicsMode,bool autoScale,bool pausable,bool ignoreGravity) {
	ActorType_obj *__this = (ActorType_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ActorType_obj), true, "com.stencyl.models.actor.ActorType"));
	*(void **)__this = ActorType_obj::_hx_vtable;
	__this->__construct(ID,atlasID,name,groupID,spriteID,behaviorValues,bodyDef,physicsMode,autoScale,pausable,ignoreGravity);
	return __this;
}

ActorType_obj::ActorType_obj()
{
}

void ActorType_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ActorType);
	HX_MARK_MEMBER_NAME(groupID,"groupID");
	HX_MARK_MEMBER_NAME(spriteID,"spriteID");
	HX_MARK_MEMBER_NAME(behaviorValues,"behaviorValues");
	HX_MARK_MEMBER_NAME(bodyDef,"bodyDef");
	HX_MARK_MEMBER_NAME(physicsMode,"physicsMode");
	HX_MARK_MEMBER_NAME(autoScale,"autoScale");
	HX_MARK_MEMBER_NAME(pausable,"pausable");
	HX_MARK_MEMBER_NAME(ignoreGravity,"ignoreGravity");
	 ::com::stencyl::models::Resource_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ActorType_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(groupID,"groupID");
	HX_VISIT_MEMBER_NAME(spriteID,"spriteID");
	HX_VISIT_MEMBER_NAME(behaviorValues,"behaviorValues");
	HX_VISIT_MEMBER_NAME(bodyDef,"bodyDef");
	HX_VISIT_MEMBER_NAME(physicsMode,"physicsMode");
	HX_VISIT_MEMBER_NAME(autoScale,"autoScale");
	HX_VISIT_MEMBER_NAME(pausable,"pausable");
	HX_VISIT_MEMBER_NAME(ignoreGravity,"ignoreGravity");
	 ::com::stencyl::models::Resource_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ActorType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"groupID") ) { return hx::Val( groupID ); }
		if (HX_FIELD_EQ(inName,"bodyDef") ) { return hx::Val( bodyDef ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"spriteID") ) { return hx::Val( spriteID ); }
		if (HX_FIELD_EQ(inName,"pausable") ) { return hx::Val( pausable ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoScale") ) { return hx::Val( autoScale ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"physicsMode") ) { return hx::Val( physicsMode ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadGraphics") ) { return hx::Val( loadGraphics_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ignoreGravity") ) { return hx::Val( ignoreGravity ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"behaviorValues") ) { return hx::Val( behaviorValues ); }
		if (HX_FIELD_EQ(inName,"unloadGraphics") ) { return hx::Val( unloadGraphics_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ActorType_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"groupID") ) { groupID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bodyDef") ) { bodyDef=inValue.Cast<  ::box2D::dynamics::B2BodyDef >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"spriteID") ) { spriteID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pausable") ) { pausable=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoScale") ) { autoScale=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"physicsMode") ) { physicsMode=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ignoreGravity") ) { ignoreGravity=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"behaviorValues") ) { behaviorValues=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ActorType_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"));
	outFields->push(HX_HCSTRING("spriteID","\x20","\xe7","\xc8","\x39"));
	outFields->push(HX_HCSTRING("behaviorValues","\x14","\xc2","\x67","\x92"));
	outFields->push(HX_HCSTRING("bodyDef","\x43","\x48","\x15","\x31"));
	outFields->push(HX_HCSTRING("physicsMode","\xca","\xa7","\x44","\xf3"));
	outFields->push(HX_HCSTRING("autoScale","\x9b","\x0c","\xda","\x56"));
	outFields->push(HX_HCSTRING("pausable","\xa9","\x47","\xf2","\x06"));
	outFields->push(HX_HCSTRING("ignoreGravity","\x5c","\x03","\x8d","\x95"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ActorType_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ActorType_obj,groupID),HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86")},
	{hx::fsInt,(int)offsetof(ActorType_obj,spriteID),HX_HCSTRING("spriteID","\x20","\xe7","\xc8","\x39")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(ActorType_obj,behaviorValues),HX_HCSTRING("behaviorValues","\x14","\xc2","\x67","\x92")},
	{hx::fsObject /*::box2D::dynamics::B2BodyDef*/ ,(int)offsetof(ActorType_obj,bodyDef),HX_HCSTRING("bodyDef","\x43","\x48","\x15","\x31")},
	{hx::fsInt,(int)offsetof(ActorType_obj,physicsMode),HX_HCSTRING("physicsMode","\xca","\xa7","\x44","\xf3")},
	{hx::fsBool,(int)offsetof(ActorType_obj,autoScale),HX_HCSTRING("autoScale","\x9b","\x0c","\xda","\x56")},
	{hx::fsBool,(int)offsetof(ActorType_obj,pausable),HX_HCSTRING("pausable","\xa9","\x47","\xf2","\x06")},
	{hx::fsBool,(int)offsetof(ActorType_obj,ignoreGravity),HX_HCSTRING("ignoreGravity","\x5c","\x03","\x8d","\x95")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ActorType_obj_sStaticStorageInfo = 0;
#endif

static ::String ActorType_obj_sMemberFields[] = {
	HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"),
	HX_HCSTRING("spriteID","\x20","\xe7","\xc8","\x39"),
	HX_HCSTRING("behaviorValues","\x14","\xc2","\x67","\x92"),
	HX_HCSTRING("bodyDef","\x43","\x48","\x15","\x31"),
	HX_HCSTRING("physicsMode","\xca","\xa7","\x44","\xf3"),
	HX_HCSTRING("autoScale","\x9b","\x0c","\xda","\x56"),
	HX_HCSTRING("pausable","\xa9","\x47","\xf2","\x06"),
	HX_HCSTRING("ignoreGravity","\x5c","\x03","\x8d","\x95"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("loadGraphics","\x11","\xe5","\xd0","\xcb"),
	HX_HCSTRING("unloadGraphics","\xea","\xec","\xbd","\xbd"),
	::String(null()) };

static void ActorType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ActorType_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ActorType_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ActorType_obj::__mClass,"__mClass");
};

#endif

hx::Class ActorType_obj::__mClass;

void ActorType_obj::__register()
{
	hx::Object *dummy = new ActorType_obj;
	ActorType_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.actor.ActorType","\x81","\xdd","\x40","\xba");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ActorType_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ActorType_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ActorType_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ActorType_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ActorType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ActorType_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace actor
