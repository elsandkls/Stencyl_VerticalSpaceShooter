// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cloner_Cloner
#include <cloner/Cloner.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Collision
#include <com/stencyl/models/actor/Collision.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Utils
#include <com/stencyl/utils/Utils.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_utils__Bytes_Bytes_Impl_
#include <lime/utils/_Bytes/Bytes_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_openfl_net_SharedObject
#include <openfl/net/SharedObject.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_98_toBoolean,"com.stencyl.utils.Utils","toBoolean",0x0c38c0a4,"com.stencyl.utils.Utils.toBoolean","com/stencyl/utils/Utils.hx",98,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_114_clear,"com.stencyl.utils.Utils","clear",0x3939e844,"com.stencyl.utils.Utils.clear","com/stencyl/utils/Utils.hx",114,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_121_removeValueFromArray,"com.stencyl.utils.Utils","removeValueFromArray",0xe9db10ab,"com.stencyl.utils.Utils.removeValueFromArray","com/stencyl/utils/Utils.hx",121,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_138_contains,"com.stencyl.utils.Utils","contains",0x1280afc8,"com.stencyl.utils.Utils.contains","com/stencyl/utils/Utils.hx",138,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_162_mapContainsValue,"com.stencyl.utils.Utils","mapContainsValue",0x10f2ff3f,"com.stencyl.utils.Utils.mapContainsValue","com/stencyl/utils/Utils.hx",162,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_175_mapCount,"com.stencyl.utils.Utils","mapCount",0xa7ab0a3c,"com.stencyl.utils.Utils.mapCount","com/stencyl/utils/Utils.hx",175,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_187_mapToList,"com.stencyl.utils.Utils","mapToList",0xbef1816c,"com.stencyl.utils.Utils.mapToList","com/stencyl/utils/Utils.hx",187,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_213_clone,"com.stencyl.utils.Utils","clone",0x39418a14,"com.stencyl.utils.Utils.clone","com/stencyl/utils/Utils.hx",213,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_217_copyMap,"com.stencyl.utils.Utils","copyMap",0x01f3585e,"com.stencyl.utils.Utils.copyMap","com/stencyl/utils/Utils.hx",217,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_230_applyToAllChildren,"com.stencyl.utils.Utils","applyToAllChildren",0x35673660,"com.stencyl.utils.Utils.applyToAllChildren","com/stencyl/utils/Utils.hx",230,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_243_removeAllChildren,"com.stencyl.utils.Utils","removeAllChildren",0x52471ed3,"com.stencyl.utils.Utils.removeAllChildren","com/stencyl/utils/Utils.hx",243,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_262_removeAllTiles,"com.stencyl.utils.Utils","removeAllTiles",0x9f4d7371,"com.stencyl.utils.Utils.removeAllTiles","com/stencyl/utils/Utils.hx",262,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_277_demouse,"com.stencyl.utils.Utils","demouse",0x6b45bd7b,"com.stencyl.utils.Utils.demouse","com/stencyl/utils/Utils.hx",277,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_295_getAnchorPoint,"com.stencyl.utils.Utils","getAnchorPoint",0x8dd7af0e,"com.stencyl.utils.Utils.getAnchorPoint","com/stencyl/utils/Utils.hx",295,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_306_setCamera,"com.stencyl.utils.Utils","setCamera",0x75d95a1e,"com.stencyl.utils.Utils.setCamera","com/stencyl/utils/Utils.hx",306,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_316_resetCamera,"com.stencyl.utils.Utils","resetCamera",0xe193a3cb,"com.stencyl.utils.Utils.resetCamera","com/stencyl/utils/Utils.hx",316,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_323_get_volume,"com.stencyl.utils.Utils","get_volume",0xc21f6b8c,"com.stencyl.utils.Utils.get_volume","com/stencyl/utils/Utils.hx",323,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_325_set_volume,"com.stencyl.utils.Utils","set_volume",0xc59d0a00,"com.stencyl.utils.Utils.set_volume","com/stencyl/utils/Utils.hx",325,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_339_get_pan,"com.stencyl.utils.Utils","get_pan",0xe53cec6b,"com.stencyl.utils.Utils.get_pan","com/stencyl/utils/Utils.hx",339,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_341_set_pan,"com.stencyl.utils.Utils","set_pan",0xd83e7d77,"com.stencyl.utils.Utils.set_pan","com/stencyl/utils/Utils.hx",341,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_369_sign,"com.stencyl.utils.Utils","sign",0x96e09d66,"com.stencyl.utils.Utils.sign","com/stencyl/utils/Utils.hx",369,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_381_approach,"com.stencyl.utils.Utils","approach",0x78d5b311,"com.stencyl.utils.Utils.approach","com/stencyl/utils/Utils.hx",381,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_393_lerp,"com.stencyl.utils.Utils","lerp",0x923d1fa0,"com.stencyl.utils.Utils.lerp","com/stencyl/utils/Utils.hx",393,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_404_colorLerp,"com.stencyl.utils.Utils","colorLerp",0x81c33bb1,"com.stencyl.utils.Utils.colorLerp","com/stencyl/utils/Utils.hx",404,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_430_stepTowards,"com.stencyl.utils.Utils","stepTowards",0x9ab74b67,"com.stencyl.utils.Utils.stepTowards","com/stencyl/utils/Utils.hx",430,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_451_anchorTo,"com.stencyl.utils.Utils","anchorTo",0x311220f9,"com.stencyl.utils.Utils.anchorTo","com/stencyl/utils/Utils.hx",451,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_468_angle,"com.stencyl.utils.Utils","angle",0x13c0ba8a,"com.stencyl.utils.Utils.angle","com/stencyl/utils/Utils.hx",468,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_482_angleXY,"com.stencyl.utils.Utils","angleXY",0x114c3e0b,"com.stencyl.utils.Utils.angleXY","com/stencyl/utils/Utils.hx",482,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_495_rotateAround,"com.stencyl.utils.Utils","rotateAround",0x9ede4731,"com.stencyl.utils.Utils.rotateAround","com/stencyl/utils/Utils.hx",495,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_510_distance,"com.stencyl.utils.Utils","distance",0x51fee8de,"com.stencyl.utils.Utils.distance","com/stencyl/utils/Utils.hx",510,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_515_distanceSquared,"com.stencyl.utils.Utils","distanceSquared",0xa30cbfe9,"com.stencyl.utils.Utils.distanceSquared","com/stencyl/utils/Utils.hx",515,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_531_distanceRects,"com.stencyl.utils.Utils","distanceRects",0xbe1bd511,"com.stencyl.utils.Utils.distanceRects","com/stencyl/utils/Utils.hx",531,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_563_distanceRectPoint,"com.stencyl.utils.Utils","distanceRectPoint",0xada29fce,"com.stencyl.utils.Utils.distanceRectPoint","com/stencyl/utils/Utils.hx",563,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_592_clamp,"com.stencyl.utils.Utils","clamp",0x3936e9b2,"com.stencyl.utils.Utils.clamp","com/stencyl/utils/Utils.hx",592,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_611_clampInRect,"com.stencyl.utils.Utils","clampInRect",0xb559dafb,"com.stencyl.utils.Utils.clampInRect","com/stencyl/utils/Utils.hx",611,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_627_scale,"com.stencyl.utils.Utils","scale",0x69ad4541,"com.stencyl.utils.Utils.scale","com/stencyl/utils/Utils.hx",627,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_640_scaleClamp,"com.stencyl.utils.Utils","scaleClamp",0xdbd0f1fa,"com.stencyl.utils.Utils.scaleClamp","com/stencyl/utils/Utils.hx",640,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_695_indexOf,"com.stencyl.utils.Utils","indexOf",0x9f321b40,"com.stencyl.utils.Utils.indexOf","com/stencyl/utils/Utils.hx",695,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_714_next,"com.stencyl.utils.Utils","next",0x938f921c,"com.stencyl.utils.Utils.next","com/stencyl/utils/Utils.hx",714,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_729_prev,"com.stencyl.utils.Utils","prev",0x94ebcc1c,"com.stencyl.utils.Utils.prev","com/stencyl/utils/Utils.hx",729,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_744_swap,"com.stencyl.utils.Utils","swap",0x96eb37bc,"com.stencyl.utils.Utils.swap","com/stencyl/utils/Utils.hx",744,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_756_getColorRGB,"com.stencyl.utils.Utils","getColorRGB",0x39d56217,"com.stencyl.utils.Utils.getColorRGB","com/stencyl/utils/Utils.hx",756,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_766_getRed,"com.stencyl.utils.Utils","getRed",0x74ef7bc4,"com.stencyl.utils.Utils.getRed","com/stencyl/utils/Utils.hx",766,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_776_getGreen,"com.stencyl.utils.Utils","getGreen",0xdfc973f6,"com.stencyl.utils.Utils.getGreen","com/stencyl/utils/Utils.hx",776,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_786_getBlue,"com.stencyl.utils.Utils","getBlue",0xd20ec4c7,"com.stencyl.utils.Utils.getBlue","com/stencyl/utils/Utils.hx",786,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_791_convertColor,"com.stencyl.utils.Utils","convertColor",0xa7af5099,"com.stencyl.utils.Utils.convertColor","com/stencyl/utils/Utils.hx",791,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_806_timeFlag,"com.stencyl.utils.Utils","timeFlag",0xca24e402,"com.stencyl.utils.Utils.timeFlag","com/stencyl/utils/Utils.hx",806,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_820_frames,"com.stencyl.utils.Utils","frames",0x7e4f190f,"com.stencyl.utils.Utils.frames","com/stencyl/utils/Utils.hx",820,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_861_set_time,"com.stencyl.utils.Utils","set_time",0x611a36b3,"com.stencyl.utils.Utils.set_time","com/stencyl/utils/Utils.hx",861,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_869_saveToSharedObject,"com.stencyl.utils.Utils","saveToSharedObject",0x930dac65,"com.stencyl.utils.Utils.saveToSharedObject","com/stencyl/utils/Utils.hx",869,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_893_loadFromSharedObject,"com.stencyl.utils.Utils","loadFromSharedObject",0x4d17153d,"com.stencyl.utils.Utils.loadFromSharedObject","com/stencyl/utils/Utils.hx",893,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_899_flushSharedObject,"com.stencyl.utils.Utils","flushSharedObject",0x03194d5f,"com.stencyl.utils.Utils.flushSharedObject","com/stencyl/utils/Utils.hx",899,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_932_saveMap,"com.stencyl.utils.Utils","saveMap",0x697aedd6,"com.stencyl.utils.Utils.saveMap","com/stencyl/utils/Utils.hx",932,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_949_loadMap,"com.stencyl.utils.Utils","loadMap",0xc750568d,"com.stencyl.utils.Utils.loadMap","com/stencyl/utils/Utils.hx",949,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_963_convertLegacySharedObject,"com.stencyl.utils.Utils","convertLegacySharedObject",0x18f44237,"com.stencyl.utils.Utils.convertLegacySharedObject","com/stencyl/utils/Utils.hx",963,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1025_getConfigBytes,"com.stencyl.utils.Utils","getConfigBytes",0x85742fbc,"com.stencyl.utils.Utils.getConfigBytes","com/stencyl/utils/Utils.hx",1025,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1038_getConfigText,"com.stencyl.utils.Utils","getConfigText",0xe68dba7c,"com.stencyl.utils.Utils.getConfigText","com/stencyl/utils/Utils.hx",1038,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1081_getConfigBitmap,"com.stencyl.utils.Utils","getConfigBitmap",0x09d24f7e,"com.stencyl.utils.Utils.getConfigBitmap","com/stencyl/utils/Utils.hx",1081,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1080_getConfigBitmap,"com.stencyl.utils.Utils","getConfigBitmap",0x09d24f7e,"com.stencyl.utils.Utils.getConfigBitmap","com/stencyl/utils/Utils.hx",1080,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1087_loadBytes,"com.stencyl.utils.Utils","loadBytes",0x3774f29c,"com.stencyl.utils.Utils.loadBytes","com/stencyl/utils/Utils.hx",1087,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1105_loadText,"com.stencyl.utils.Utils","loadText",0xa39ef39c,"com.stencyl.utils.Utils.loadText","com/stencyl/utils/Utils.hx",1105,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1111_loadBitmapData,"com.stencyl.utils.Utils","loadBitmapData",0x965039e8,"com.stencyl.utils.Utils.loadBitmapData","com/stencyl/utils/Utils.hx",1111,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1128_saveImage,"com.stencyl.utils.Utils","saveImage",0xaabbc515,"com.stencyl.utils.Utils.saveImage","com/stencyl/utils/Utils.hx",1128,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1176_resetStatics,"com.stencyl.utils.Utils","resetStatics",0xd2cf601f,"com.stencyl.utils.Utils.resetStatics","com/stencyl/utils/Utils.hx",1176,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_49_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",49,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_58_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",58,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_64_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",64,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_84_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",84,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_94_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",94,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_209_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",209,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1144_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1144,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1147_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1147,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1151_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1151,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1152_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1152,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1153_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1153,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1159_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1159,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1160_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1160,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1166_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1166,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1167_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1167,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1168_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1168,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1169_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1169,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1170_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1170,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1171_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1171,0xd66c6d7c)
HX_LOCAL_STACK_FRAME(_hx_pos_d9a23d4e040eee89_1173_boot,"com.stencyl.utils.Utils","boot",0x8ba8915b,"com.stencyl.utils.Utils.boot","com/stencyl/utils/Utils.hx",1173,0xd66c6d7c)
namespace com{
namespace stencyl{
namespace utils{

void Utils_obj::__construct() { }

Dynamic Utils_obj::__CreateEmpty() { return new Utils_obj; }

void *Utils_obj::_hx_vtable = 0;

Dynamic Utils_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Utils_obj > _hx_result = new Utils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Utils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b8fbe0b;
}

int Utils_obj::INTEGER_MAX;

Float Utils_obj::NUMBER_MAX_VALUE;

int Utils_obj::blackColor;

int Utils_obj::width;

int Utils_obj::height;

Float Utils_obj::elapsed;

Float Utils_obj::rate;

 ::openfl::geom::Rectangle Utils_obj::bounds;

 ::openfl::geom::Point Utils_obj::camera;

bool Utils_obj::toBoolean(::String s){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_98_toBoolean)
HXDLIN(  98)		if ((s == HX_("true",4e,a7,03,4d))) {
HXDLIN(  98)			return true;
            		}
            		else {
HXDLIN(  98)			return false;
            		}
HXDLIN(  98)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,toBoolean,return )

void Utils_obj::clear(::cpp::VirtualArray arr){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_114_clear)
HXDLIN( 114)		arr->splice((int)0,arr->get_length());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,clear,(void))

void Utils_obj::removeValueFromArray(::cpp::VirtualArray arr, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_121_removeValueFromArray)
HXLINE( 122)		int len = arr->get_length();
HXLINE( 124)		int i = (len - (int)1);
HXLINE( 126)		while((i > (int)-1)){
HXLINE( 128)			if (hx::IsEq( arr->__get(i),value )) {
HXLINE( 130)				arr->splice(i,(int)1);
            			}
HXLINE( 133)			i = (i - (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,removeValueFromArray,(void))

bool Utils_obj::contains(::cpp::VirtualArray arr, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_138_contains)
HXLINE( 139)		if (hx::IsNull( arr )) {
HXLINE( 141)			return false;
            		}
HXLINE( 144)		int len = arr->get_length();
HXLINE( 146)		int i = (len - (int)1);
HXLINE( 148)		while((i > (int)-1)){
HXLINE( 150)			if (hx::IsEq( arr->__get(i),value )) {
HXLINE( 152)				return true;
            			}
HXLINE( 155)			i = (i - (int)1);
            		}
HXLINE( 158)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,contains,return )

bool Utils_obj::mapContainsValue( ::haxe::ds::StringMap map, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_162_mapContainsValue)
HXLINE( 163)		{
HXLINE( 163)			 ::Dynamic item = map->iterator();
HXDLIN( 163)			while(( (bool)(item->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 163)				 ::Dynamic item1 = item->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXLINE( 165)				if (hx::IsEq( item1,value )) {
HXLINE( 167)					return true;
            				}
            			}
            		}
HXLINE( 171)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,mapContainsValue,return )

int Utils_obj::mapCount( ::haxe::ds::StringMap map){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_175_mapCount)
HXLINE( 176)		int i = (int)0;
HXLINE( 178)		{
HXLINE( 178)			 ::Dynamic item = map->iterator();
HXDLIN( 178)			while(( (bool)(item->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 178)				 ::Dynamic item1 = item->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXLINE( 180)				i = (i + (int)1);
            			}
            		}
HXLINE( 183)		return i;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,mapCount,return )

::cpp::VirtualArray Utils_obj::mapToList( ::haxe::ds::StringMap map,::String type){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_187_mapToList)
HXLINE( 188)		::cpp::VirtualArray toReturn = ::cpp::VirtualArray_obj::__new();
HXLINE( 190)		if ((type == HX_("keys",f4,e1,06,47))) {
HXLINE( 192)			 ::Dynamic item = map->keys();
HXDLIN( 192)			while(( (bool)(item->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 192)				::String item1 = ( (::String)(item->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 194)				toReturn->push(item1);
            			}
            		}
            		else {
HXLINE( 200)			 ::Dynamic item2 = map->iterator();
HXDLIN( 200)			while(( (bool)(item2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 200)				 ::Dynamic item3 = item2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXLINE( 202)				toReturn->push(item3);
            			}
            		}
HXLINE( 206)		return toReturn;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,mapToList,return )

 ::cloner::Cloner Utils_obj::cloner;

 ::Dynamic Utils_obj::clone( ::Dynamic obj){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_213_clone)
HXDLIN( 213)		return ::com::stencyl::utils::Utils_obj::cloner->clone(obj);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,clone,return )

 ::haxe::ds::StringMap Utils_obj::copyMap( ::haxe::ds::StringMap map){
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_217_copyMap)
HXLINE( 218)		 ::haxe::ds::StringMap newMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 220)		{
HXLINE( 220)			 ::Dynamic key = map->keys();
HXDLIN( 220)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 220)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 222)				newMap->set(key1,map->get(key1));
            			}
            		}
HXLINE( 225)		return newMap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,copyMap,return )

void Utils_obj::applyToAllChildren( ::openfl::display::DisplayObjectContainer container, ::Dynamic fun){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_230_applyToAllChildren)
HXDLIN( 230)		int _g1 = (int)0;
HXDLIN( 230)		int _g = container->get_numChildren();
HXDLIN( 230)		while((_g1 < _g)){
HXDLIN( 230)			_g1 = (_g1 + (int)1);
HXDLIN( 230)			int i = (_g1 - (int)1);
HXLINE( 232)			 ::openfl::display::DisplayObject obj = container->getChildAt(i);
HXLINE( 233)			if (::Std_obj::is(obj,hx::ClassOf< ::openfl::display::DisplayObjectContainer >())) {
HXLINE( 235)				::com::stencyl::utils::Utils_obj::applyToAllChildren(( ( ::openfl::display::DisplayObjectContainer)(obj) ),fun);
            			}
HXLINE( 237)			fun(obj);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,applyToAllChildren,(void))

void Utils_obj::removeAllChildren( ::openfl::display::DisplayObjectContainer container){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_243_removeAllChildren)
HXDLIN( 243)		while((container->get_numChildren() > (int)0)){
HXLINE( 245)			 ::openfl::display::DisplayObject c = container->getChildAt((int)0);
HXLINE( 247)			if (::Std_obj::is(c,hx::ClassOf< ::openfl::display::DisplayObjectContainer >())) {
HXLINE( 249)				::com::stencyl::utils::Utils_obj::removeAllChildren(hx::TCast<  ::openfl::display::DisplayObjectContainer >::cast(c));
            			}
HXLINE( 251)			if (::Std_obj::is(c,hx::ClassOf< ::openfl::display::Tilemap >())) {
HXLINE( 253)				::com::stencyl::utils::Utils_obj::removeAllTiles(c);
            			}
HXLINE( 256)			container->removeChild(c);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,removeAllChildren,(void))

void Utils_obj::removeAllTiles(::Dynamic container){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_262_removeAllTiles)
HXDLIN( 262)		while((::openfl::display::ITileContainer_obj::get_numTiles(container) > (int)0)){
HXLINE( 264)			 ::openfl::display::Tile c = ::openfl::display::ITileContainer_obj::getTileAt(container,(int)0);
HXLINE( 266)			if (::Std_obj::is(c,hx::ClassOf< ::openfl::display::ITileContainer >())) {
HXLINE( 268)				::com::stencyl::utils::Utils_obj::removeAllTiles(c);
            			}
HXLINE( 271)			::openfl::display::ITileContainer_obj::removeTile(container,c);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,removeAllTiles,(void))

void Utils_obj::demouse( ::openfl::display::DisplayObjectContainer container){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_277_demouse)
HXDLIN( 277)		int _g1 = (int)0;
HXDLIN( 277)		int _g = container->get_numChildren();
HXDLIN( 277)		while((_g1 < _g)){
HXDLIN( 277)			_g1 = (_g1 + (int)1);
HXDLIN( 277)			int i = (_g1 - (int)1);
HXLINE( 279)			 ::openfl::display::DisplayObject c = container->getChildAt(i);
HXLINE( 281)			if (::Std_obj::is(c,hx::ClassOf< ::openfl::display::DisplayObjectContainer >())) {
HXLINE( 283)				::com::stencyl::utils::Utils_obj::demouse(hx::TCast<  ::openfl::display::DisplayObjectContainer >::cast(c));
            			}
HXLINE( 286)			container->mouseChildren = false;
HXLINE( 287)			container->mouseEnabled = false;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,demouse,(void))

 ::openfl::geom::Point Utils_obj::getAnchorPoint( ::openfl::display::DisplayObject obj){
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_295_getAnchorPoint)
HXLINE( 296)		 ::openfl::geom::Rectangle rect = obj->getRect(obj);
HXLINE( 297)		Float _hx_tmp = ((int)-1 * rect->x);
HXDLIN( 297)		return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp,((int)-1 * rect->y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,getAnchorPoint,return )

void Utils_obj::setCamera(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_306_setCamera)
HXLINE( 307)		::com::stencyl::utils::Utils_obj::camera->x = x;
HXLINE( 308)		::com::stencyl::utils::Utils_obj::camera->y = y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,setCamera,(void))

void Utils_obj::resetCamera(){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_316_resetCamera)
HXDLIN( 316)		::com::stencyl::utils::Utils_obj::camera->x = (::com::stencyl::utils::Utils_obj::camera->y = (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Utils_obj,resetCamera,(void))

Float Utils_obj::get_volume(){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_323_get_volume)
HXDLIN( 323)		return ::com::stencyl::utils::Utils_obj::_volume;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Utils_obj,get_volume,return )

Float Utils_obj::set_volume(Float value){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_325_set_volume)
HXLINE( 326)		if ((value < (int)0)) {
HXLINE( 326)			value = (int)0;
            		}
HXLINE( 327)		if ((::com::stencyl::utils::Utils_obj::_volume == value)) {
HXLINE( 327)			return value;
            		}
HXLINE( 328)		::com::stencyl::utils::Utils_obj::_soundTransform->volume = (::com::stencyl::utils::Utils_obj::_volume = value);
HXLINE( 332)		return ::com::stencyl::utils::Utils_obj::_volume;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,set_volume,return )

Float Utils_obj::get_pan(){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_339_get_pan)
HXDLIN( 339)		return ::com::stencyl::utils::Utils_obj::_pan;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Utils_obj,get_pan,return )

Float Utils_obj::set_pan(Float value){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_341_set_pan)
HXLINE( 342)		if ((value < (int)-1)) {
HXLINE( 342)			value = (int)-1;
            		}
HXLINE( 343)		if ((value > (int)1)) {
HXLINE( 343)			value = (int)1;
            		}
HXLINE( 344)		if ((::com::stencyl::utils::Utils_obj::_pan == value)) {
HXLINE( 344)			return value;
            		}
HXLINE( 345)		::com::stencyl::utils::Utils_obj::_soundTransform->pan = (::com::stencyl::utils::Utils_obj::_pan = value);
HXLINE( 349)		return ::com::stencyl::utils::Utils_obj::_pan;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,set_pan,return )

int Utils_obj::sign(Float value){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_369_sign)
HXDLIN( 369)		if ((value < (int)0)) {
HXDLIN( 369)			return (int)-1;
            		}
            		else {
HXDLIN( 369)			if ((value > (int)0)) {
HXDLIN( 369)				return (int)1;
            			}
            			else {
HXDLIN( 369)				return (int)0;
            			}
            		}
HXDLIN( 369)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,sign,return )

Float Utils_obj::approach(Float value,Float target,Float amount){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_381_approach)
HXDLIN( 381)		if ((value < target)) {
HXDLIN( 381)			if ((target < (value + amount))) {
HXDLIN( 381)				return target;
            			}
            			else {
HXDLIN( 381)				return (value + amount);
            			}
            		}
            		else {
HXDLIN( 381)			if ((target > (value - amount))) {
HXDLIN( 381)				return target;
            			}
            			else {
HXDLIN( 381)				return (value - amount);
            			}
            		}
HXDLIN( 381)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,approach,return )

Float Utils_obj::lerp(Float a,Float b,hx::Null< Float >  __o_t){
Float t = __o_t.Default(1);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_393_lerp)
HXDLIN( 393)		return (a + ((b - a) * t));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,lerp,return )

int Utils_obj::colorLerp(int fromColor,int toColor,hx::Null< Float >  __o_t){
Float t = __o_t.Default(1);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_404_colorLerp)
HXLINE( 405)		if ((t <= (int)0)) {
HXLINE( 405)			return fromColor;
            		}
HXLINE( 406)		if ((t >= (int)1)) {
HXLINE( 406)			return toColor;
            		}
HXLINE( 407)		int a = ((int)((int)fromColor >> (int)(int)24) & (int)(int)255);
HXDLIN( 407)		int r = ((int)((int)fromColor >> (int)(int)16) & (int)(int)255);
HXDLIN( 407)		int g = ((int)((int)fromColor >> (int)(int)8) & (int)(int)255);
HXDLIN( 407)		int b = ((int)fromColor & (int)(int)255);
HXDLIN( 407)		int dA = (((int)((int)toColor >> (int)(int)24) & (int)(int)255) - a);
HXDLIN( 407)		int dR = (((int)((int)toColor >> (int)(int)16) & (int)(int)255) - r);
HXDLIN( 407)		int dG = (((int)((int)toColor >> (int)(int)8) & (int)(int)255) - g);
HXDLIN( 407)		int dB = (((int)toColor & (int)(int)255) - b);
HXLINE( 415)		a = (a + ::Std_obj::_hx_int((dA * t)));
HXLINE( 416)		r = (r + ::Std_obj::_hx_int((dR * t)));
HXLINE( 417)		g = (g + ::Std_obj::_hx_int((dG * t)));
HXLINE( 418)		b = (b + ::Std_obj::_hx_int((dB * t)));
HXLINE( 419)		return ((int)((int)((int)((int)a << (int)(int)24) | (int)((int)r << (int)(int)16)) | (int)((int)g << (int)(int)8)) | (int)b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,colorLerp,return )

void Utils_obj::stepTowards( ::Dynamic object,Float x,Float y,hx::Null< Float >  __o_distance){
Float distance = __o_distance.Default(1);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_430_stepTowards)
HXLINE( 431)		::com::stencyl::utils::Utils_obj::point->x = (x -  ::Dynamic(object->__Field(HX_("x",78,00,00,00),hx::paccDynamic)));
HXLINE( 432)		::com::stencyl::utils::Utils_obj::point->y = (y -  ::Dynamic(object->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
HXLINE( 433)		if ((::com::stencyl::utils::Utils_obj::point->get_length() <= distance)) {
HXLINE( 435)			object->__SetField(HX_("x",78,00,00,00),x,hx::paccDynamic);
HXLINE( 436)			object->__SetField(HX_("y",79,00,00,00),y,hx::paccDynamic);
HXLINE( 437)			return;
            		}
HXLINE( 439)		::com::stencyl::utils::Utils_obj::point->normalize(distance);
HXLINE( 440)		 ::Dynamic object1 = object;
HXDLIN( 440)		object1->__SetField(HX_("x",78,00,00,00),( ::Dynamic(object1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) + ::com::stencyl::utils::Utils_obj::point->x),hx::paccDynamic);
HXLINE( 441)		 ::Dynamic object2 = object;
HXDLIN( 441)		object2->__SetField(HX_("y",79,00,00,00),( ::Dynamic(object2->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) + ::com::stencyl::utils::Utils_obj::point->y),hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Utils_obj,stepTowards,(void))

void Utils_obj::anchorTo( ::Dynamic object, ::Dynamic anchor,hx::Null< Float >  __o_distance){
Float distance = __o_distance.Default(0);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_451_anchorTo)
HXLINE( 452)		::com::stencyl::utils::Utils_obj::point->x = ( ::Dynamic(object->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) -  ::Dynamic(anchor->__Field(HX_("x",78,00,00,00),hx::paccDynamic)));
HXLINE( 453)		::com::stencyl::utils::Utils_obj::point->y = ( ::Dynamic(object->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) -  ::Dynamic(anchor->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
HXLINE( 454)		if ((::com::stencyl::utils::Utils_obj::point->get_length() > distance)) {
HXLINE( 454)			::com::stencyl::utils::Utils_obj::point->normalize(distance);
            		}
HXLINE( 455)		object->__SetField(HX_("x",78,00,00,00),( ::Dynamic(anchor->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) + ::com::stencyl::utils::Utils_obj::point->x),hx::paccDynamic);
HXLINE( 456)		object->__SetField(HX_("y",79,00,00,00),( ::Dynamic(anchor->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) + ::com::stencyl::utils::Utils_obj::point->y),hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,anchorTo,(void))

Float Utils_obj::angle(Float x1,Float y1,Float x2,Float y2){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_468_angle)
HXLINE( 469)		Float a = (::Math_obj::atan2((y2 - y1),(x2 - x1)) * ((Float)57.295779513084021));
HXLINE( 470)		if ((a < (int)0)) {
HXLINE( 470)			return (a + (int)360);
            		}
            		else {
HXLINE( 470)			return a;
            		}
HXDLIN( 470)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Utils_obj,angle,return )

void Utils_obj::angleXY( ::Dynamic object,Float angle,hx::Null< Float >  __o_length,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y){
Float length = __o_length.Default(1);
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_482_angleXY)
HXLINE( 483)		angle = (angle * ((Float)0.017453292519942779));
HXLINE( 484)		object->__SetField(HX_("x",78,00,00,00),((::Math_obj::cos(angle) * length) + x),hx::paccDynamic);
HXLINE( 485)		object->__SetField(HX_("y",79,00,00,00),((::Math_obj::sin(angle) * length) + y),hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Utils_obj,angleXY,(void))

void Utils_obj::rotateAround( ::Dynamic object, ::Dynamic anchor,hx::Null< Float >  __o_angle,hx::Null< bool >  __o_relative){
Float angle = __o_angle.Default(0);
bool relative = __o_relative.Default(true);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_495_rotateAround)
HXLINE( 496)		if (relative) {
HXLINE( 496)			Float a = (::Math_obj::atan2((( (Float)(object->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ( (Float)(anchor->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) )),(( (Float)(object->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ( (Float)(anchor->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))) * ((Float)57.295779513084021));
HXDLIN( 496)			Float angle1;
HXDLIN( 496)			if ((a < (int)0)) {
HXLINE( 496)				angle1 = (a + (int)360);
            			}
            			else {
HXLINE( 496)				angle1 = a;
            			}
HXDLIN( 496)			angle = (angle + angle1);
            		}
HXLINE( 497)		{
HXLINE( 497)			Float angle2 = angle;
HXDLIN( 497)			Float x1 = ( (Float)(anchor->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 497)			Float y1 = ( (Float)(anchor->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 497)			Float x2 = ( (Float)(object->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 497)			Float y2 = ( (Float)(object->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 497)			Float length = ::Math_obj::sqrt((((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1))));
HXDLIN( 497)			angle2 = (angle2 * ((Float)0.017453292519942779));
HXDLIN( 497)			object->__SetField(HX_("x",78,00,00,00),((::Math_obj::cos(angle2) * length) + ( (Float)(anchor->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) )),hx::paccDynamic);
HXDLIN( 497)			object->__SetField(HX_("y",79,00,00,00),((::Math_obj::sin(angle2) * length) + ( (Float)(anchor->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) )),hx::paccDynamic);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Utils_obj,rotateAround,(void))

Float Utils_obj::distance(Float x1,Float y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2){
Float x2 = __o_x2.Default(0);
Float y2 = __o_y2.Default(0);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_510_distance)
HXDLIN( 510)		return ::Math_obj::sqrt((((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Utils_obj,distance,return )

Float Utils_obj::distanceSquared(Float x1,Float y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2){
Float x2 = __o_x2.Default(0);
Float y2 = __o_y2.Default(0);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_515_distanceSquared)
HXDLIN( 515)		return (((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Utils_obj,distanceSquared,return )

Float Utils_obj::distanceRects(Float x1,Float y1,Float w1,Float h1,Float x2,Float y2,Float w2,Float h2){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_531_distanceRects)
HXLINE( 532)		bool _hx_tmp;
HXDLIN( 532)		if ((x1 < (x2 + w2))) {
HXLINE( 532)			_hx_tmp = (x2 < (x1 + w1));
            		}
            		else {
HXLINE( 532)			_hx_tmp = false;
            		}
HXDLIN( 532)		if (_hx_tmp) {
HXLINE( 534)			bool _hx_tmp1;
HXDLIN( 534)			if ((y1 < (y2 + h2))) {
HXLINE( 534)				_hx_tmp1 = (y2 < (y1 + h1));
            			}
            			else {
HXLINE( 534)				_hx_tmp1 = false;
            			}
HXDLIN( 534)			if (_hx_tmp1) {
HXLINE( 534)				return (int)0;
            			}
HXLINE( 535)			if ((y1 > y2)) {
HXLINE( 535)				return (y1 - (y2 + h2));
            			}
HXLINE( 536)			return (y2 - (y1 + h1));
            		}
HXLINE( 538)		bool _hx_tmp2;
HXDLIN( 538)		if ((y1 < (y2 + h2))) {
HXLINE( 538)			_hx_tmp2 = (y2 < (y1 + h1));
            		}
            		else {
HXLINE( 538)			_hx_tmp2 = false;
            		}
HXDLIN( 538)		if (_hx_tmp2) {
HXLINE( 540)			if ((x1 > x2)) {
HXLINE( 540)				return (x1 - (x2 + w2));
            			}
HXLINE( 541)			return (x2 - (x1 + w1));
            		}
HXLINE( 543)		if ((x1 > x2)) {
HXLINE( 545)			if ((y1 > y2)) {
HXLINE( 545)				Float x21 = (x2 + w2);
HXDLIN( 545)				Float y21 = (y2 + h2);
HXDLIN( 545)				return ::Math_obj::sqrt((((x21 - x1) * (x21 - x1)) + ((y21 - y1) * (y21 - y1))));
            			}
HXLINE( 546)			Float y11 = (y1 + h1);
HXDLIN( 546)			Float x22 = (x2 + w2);
HXDLIN( 546)			return ::Math_obj::sqrt((((x22 - x1) * (x22 - x1)) + ((y2 - y11) * (y2 - y11))));
            		}
HXLINE( 548)		if ((y1 > y2)) {
HXLINE( 548)			Float x11 = (x1 + w1);
HXDLIN( 548)			Float y22 = (y2 + h2);
HXDLIN( 548)			return ::Math_obj::sqrt((((x2 - x11) * (x2 - x11)) + ((y22 - y1) * (y22 - y1))));
            		}
HXLINE( 549)		Float x12 = (x1 + w1);
HXDLIN( 549)		Float y12 = (y1 + h1);
HXDLIN( 549)		return ::Math_obj::sqrt((((x2 - x12) * (x2 - x12)) + ((y2 - y12) * (y2 - y12))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Utils_obj,distanceRects,return )

Float Utils_obj::distanceRectPoint(Float px,Float py,Float rx,Float ry,Float rw,Float rh){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_563_distanceRectPoint)
HXLINE( 564)		bool _hx_tmp;
HXDLIN( 564)		if ((px >= rx)) {
HXLINE( 564)			_hx_tmp = (px <= (rx + rw));
            		}
            		else {
HXLINE( 564)			_hx_tmp = false;
            		}
HXDLIN( 564)		if (_hx_tmp) {
HXLINE( 566)			bool _hx_tmp1;
HXDLIN( 566)			if ((py >= ry)) {
HXLINE( 566)				_hx_tmp1 = (py <= (ry + rh));
            			}
            			else {
HXLINE( 566)				_hx_tmp1 = false;
            			}
HXDLIN( 566)			if (_hx_tmp1) {
HXLINE( 566)				return (int)0;
            			}
HXLINE( 567)			if ((py > ry)) {
HXLINE( 567)				return (py - (ry + rh));
            			}
HXLINE( 568)			return (ry - py);
            		}
HXLINE( 570)		bool _hx_tmp2;
HXDLIN( 570)		if ((py >= ry)) {
HXLINE( 570)			_hx_tmp2 = (py <= (ry + rh));
            		}
            		else {
HXLINE( 570)			_hx_tmp2 = false;
            		}
HXDLIN( 570)		if (_hx_tmp2) {
HXLINE( 572)			if ((px > rx)) {
HXLINE( 572)				return (px - (rx + rw));
            			}
HXLINE( 573)			return (rx - px);
            		}
HXLINE( 575)		if ((px > rx)) {
HXLINE( 577)			if ((py > ry)) {
HXLINE( 577)				Float x2 = (rx + rw);
HXDLIN( 577)				Float y2 = (ry + rh);
HXDLIN( 577)				return ::Math_obj::sqrt((((x2 - px) * (x2 - px)) + ((y2 - py) * (y2 - py))));
            			}
HXLINE( 578)			Float x21 = (rx + rw);
HXDLIN( 578)			return ::Math_obj::sqrt((((x21 - px) * (x21 - px)) + ((ry - py) * (ry - py))));
            		}
HXLINE( 580)		if ((py > ry)) {
HXLINE( 580)			Float y21 = (ry + rh);
HXDLIN( 580)			return ::Math_obj::sqrt((((rx - px) * (rx - px)) + ((y21 - py) * (y21 - py))));
            		}
HXLINE( 581)		return ::Math_obj::sqrt((((rx - px) * (rx - px)) + ((ry - py) * (ry - py))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Utils_obj,distanceRectPoint,return )

Float Utils_obj::clamp(Float value,Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_592_clamp)
HXLINE( 593)		if ((max > min)) {
HXLINE( 595)			if ((value < max)) {
HXLINE( 595)				value = value;
            			}
            			else {
HXLINE( 595)				value = max;
            			}
HXLINE( 596)			if ((value > min)) {
HXLINE( 596)				return value;
            			}
            			else {
HXLINE( 596)				return min;
            			}
            		}
HXLINE( 598)		if ((value < min)) {
HXLINE( 598)			value = value;
            		}
            		else {
HXLINE( 598)			value = min;
            		}
HXLINE( 599)		if ((value > max)) {
HXLINE( 599)			return value;
            		}
            		else {
HXLINE( 599)			return max;
            		}
HXDLIN( 599)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,clamp,return )

void Utils_obj::clampInRect( ::Dynamic object,Float x,Float y,Float width,Float height,hx::Null< Float >  __o_padding){
Float padding = __o_padding.Default(0);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_611_clampInRect)
HXLINE( 612)		 ::Dynamic object1 =  ::Dynamic(object->__Field(HX_("x",78,00,00,00),hx::paccDynamic));
HXDLIN( 612)		object->__SetField(HX_("x",78,00,00,00),::com::stencyl::utils::Utils_obj::clamp(( (Float)(object1) ),(x + padding),((x + width) - padding)),hx::paccDynamic);
HXLINE( 613)		 ::Dynamic object2 =  ::Dynamic(object->__Field(HX_("y",79,00,00,00),hx::paccDynamic));
HXDLIN( 613)		object->__SetField(HX_("y",79,00,00,00),::com::stencyl::utils::Utils_obj::clamp(( (Float)(object2) ),(y + padding),((y + height) - padding)),hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Utils_obj,clampInRect,(void))

Float Utils_obj::scale(Float value,Float min,Float max,Float min2,Float max2){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_627_scale)
HXDLIN( 627)		return (min2 + (((Float)(value - min) / (Float)(max - min)) * (max2 - min2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Utils_obj,scale,return )

Float Utils_obj::scaleClamp(Float value,Float min,Float max,Float min2,Float max2){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_640_scaleClamp)
HXLINE( 641)		value = (min2 + (((Float)(value - min) / (Float)(max - min)) * (max2 - min2)));
HXLINE( 642)		if ((max2 > min2)) {
HXLINE( 644)			if ((value < max2)) {
HXLINE( 644)				value = value;
            			}
            			else {
HXLINE( 644)				value = max2;
            			}
HXLINE( 645)			if ((value > min2)) {
HXLINE( 645)				return value;
            			}
            			else {
HXLINE( 645)				return min2;
            			}
            		}
HXLINE( 647)		if ((value < min2)) {
HXLINE( 647)			value = value;
            		}
            		else {
HXLINE( 647)			value = min2;
            		}
HXLINE( 648)		if ((value > max2)) {
HXLINE( 648)			return value;
            		}
            		else {
HXLINE( 648)			return max2;
            		}
HXDLIN( 648)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Utils_obj,scaleClamp,return )

int Utils_obj::indexOf(::cpp::VirtualArray a, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_695_indexOf)
HXLINE( 696)		int i = (int)0;
HXLINE( 697)		{
HXLINE( 697)			int _g = (int)0;
HXDLIN( 697)			while((_g < a->get_length())){
HXLINE( 697)				 ::Dynamic v2 = a->__get(_g);
HXDLIN( 697)				_g = (_g + (int)1);
HXLINE( 698)				if (hx::IsEq( v,v2 )) {
HXLINE( 699)					return i;
            				}
HXLINE( 700)				i = (i + (int)1);
            			}
            		}
HXLINE( 702)		return (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,indexOf,return )

 ::Dynamic Utils_obj::next( ::Dynamic current,::cpp::VirtualArray options,hx::Null< bool >  __o_loop){
bool loop = __o_loop.Default(true);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_714_next)
HXDLIN( 714)		if (loop) {
HXLINE( 715)			int _hx_tmp = (::com::stencyl::utils::Utils_obj::indexOf(options,current) + (int)1);
HXDLIN( 715)			return options->__get(hx::Mod(_hx_tmp,options->get_length()));
            		}
            		else {
HXLINE( 717)			int _hx_tmp1 = (::com::stencyl::utils::Utils_obj::indexOf(options,current) + (int)1);
HXDLIN( 717)			return options->__get(::Std_obj::_hx_int(::Math_obj::max(_hx_tmp1,(options->get_length() - (int)1))));
            		}
HXLINE( 714)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,next,return )

 ::Dynamic Utils_obj::prev( ::Dynamic current,::cpp::VirtualArray options,hx::Null< bool >  __o_loop){
bool loop = __o_loop.Default(true);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_729_prev)
HXDLIN( 729)		if (loop) {
HXLINE( 730)			int _hx_tmp = (::com::stencyl::utils::Utils_obj::indexOf(options,current) - (int)1);
HXDLIN( 730)			return options->__get(hx::Mod((_hx_tmp + options->get_length()),options->get_length()));
            		}
            		else {
HXLINE( 732)			return options->__get(::Std_obj::_hx_int(::Math_obj::max((::com::stencyl::utils::Utils_obj::indexOf(options,current) - (int)1),(int)0)));
            		}
HXLINE( 729)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,prev,return )

 ::Dynamic Utils_obj::swap( ::Dynamic current, ::Dynamic a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_744_swap)
HXDLIN( 744)		if (hx::IsEq( current,a )) {
HXDLIN( 744)			return b;
            		}
            		else {
HXDLIN( 744)			return a;
            		}
HXDLIN( 744)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,swap,return )

int Utils_obj::getColorRGB(hx::Null< int >  __o_R,hx::Null< int >  __o_G,hx::Null< int >  __o_B){
int R = __o_R.Default(0);
int G = __o_G.Default(0);
int B = __o_B.Default(0);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_756_getColorRGB)
HXDLIN( 756)		return ((int)((int)((int)R << (int)(int)16) | (int)((int)G << (int)(int)8)) | (int)B);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,getColorRGB,return )

int Utils_obj::getRed(int color){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_766_getRed)
HXDLIN( 766)		return ((int)((int)color >> (int)(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,getRed,return )

int Utils_obj::getGreen(int color){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_776_getGreen)
HXDLIN( 776)		return ((int)((int)color >> (int)(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,getGreen,return )

int Utils_obj::getBlue(int color){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_786_getBlue)
HXDLIN( 786)		return ((int)color & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,getBlue,return )

int Utils_obj::convertColor(int color){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_791_convertColor)
HXDLIN( 791)		if ((color < (int)0)) {
HXLINE( 793)			return (color + (int)16777216);
            		}
            		else {
HXLINE( 797)			return color;
            		}
HXLINE( 791)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,convertColor,return )

Float Utils_obj::timeFlag(){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_806_timeFlag)
HXLINE( 807)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 807)		Float t;
HXDLIN( 807)		if ((timer > (int)0)) {
HXLINE( 807)			t = ((Float)timer / (Float)(int)1000);
            		}
            		else {
HXLINE( 807)			t = (int)0;
            		}
HXDLIN( 807)		Float e = (t - ::com::stencyl::utils::Utils_obj::_time);
HXLINE( 809)		::com::stencyl::utils::Utils_obj::_time = t;
HXLINE( 810)		return e;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Utils_obj,timeFlag,return )

::Array< int > Utils_obj::frames(int from,int to,hx::Null< int >  __o_skip){
int skip = __o_skip.Default(0);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_820_frames)
HXLINE( 821)		::Array< int > a = ::Array_obj< int >::__new();
HXLINE( 822)		skip = (skip + (int)1);
HXLINE( 823)		if ((from < to)) {
HXLINE( 825)			while((from <= to)){
HXLINE( 827)				a->push(from);
HXLINE( 828)				from = (from + skip);
            			}
            		}
            		else {
HXLINE( 833)			while((from >= to)){
HXLINE( 835)				a->push(from);
HXLINE( 836)				from = (from - skip);
            			}
            		}
HXLINE( 839)		return a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,frames,return )

Float Utils_obj::time;

Float Utils_obj::set_time(Float value){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_861_set_time)
HXLINE( 862)		::com::stencyl::utils::Utils_obj::_time = value;
HXLINE( 863)		return ::com::stencyl::utils::Utils_obj::_time;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,set_time,return )

void Utils_obj::saveToSharedObject( ::openfl::net::SharedObject so,::String name, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_869_saveToSharedObject)
HXDLIN( 869)		 ::Dynamic so1 = so->data;
HXDLIN( 869)		::Reflect_obj::setField(so1,name,::com::stencyl::utils::Utils_obj::clone(value));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,saveToSharedObject,(void))

 ::Dynamic Utils_obj::loadFromSharedObject( ::openfl::net::SharedObject so,::String name){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_893_loadFromSharedObject)
HXDLIN( 893)		 ::cloner::Cloner _hx_tmp = ::com::stencyl::utils::Utils_obj::cloner;
HXDLIN( 893)		return _hx_tmp->clone(::Reflect_obj::field(so->data,name));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,loadFromSharedObject,return )

void Utils_obj::flushSharedObject( ::openfl::net::SharedObject so, ::Dynamic onComplete){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_899_flushSharedObject)
HXLINE( 903)		 ::Dynamic flushStatus = null();
HXLINE( 906)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 908)			flushStatus = so->flush(null());
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 913)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 913)				::String _hx_tmp1 = (HX_("Error: Failed to flush save file: ",f9,4c,b7,c8) + ::Std_obj::string(e));
HXDLIN( 913)				_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Utils.hx",4d,09,60,4c),913,HX_("com.stencyl.utils.Utils",e5,63,d4,75),HX_("flushSharedObject",28,20,c8,a6)));
HXLINE( 914)				if (hx::IsNotNull( onComplete )) {
HXLINE( 915)					onComplete(false);
            				}
HXLINE( 916)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 919)		if (hx::IsEq( flushStatus,(int)0 )) {
HXLINE( 921)			if (hx::IsNotNull( onComplete )) {
HXLINE( 922)				onComplete(true);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,flushSharedObject,(void))

void Utils_obj::saveMap( ::haxe::ds::StringMap map,::String fileName, ::Dynamic onComplete){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_932_saveMap)
HXLINE( 933)		 ::openfl::net::SharedObject so = ::openfl::net::SharedObject_obj::getLocal(fileName,null(),null());
HXLINE( 935)		{
HXLINE( 935)			 ::Dynamic key = map->keys();
HXDLIN( 935)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 935)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 937)				 ::Dynamic so1 = so->data;
HXDLIN( 937)				::Reflect_obj::setField(so1,key1,map->get(key1));
            			}
            		}
HXLINE( 940)		::com::stencyl::utils::Utils_obj::flushSharedObject(so,onComplete);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,saveMap,(void))

void Utils_obj::loadMap( ::haxe::ds::StringMap map,::String fileName, ::Dynamic onComplete){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_949_loadMap)
HXLINE( 950)		 ::openfl::net::SharedObject so = ::openfl::net::SharedObject_obj::getLocal(fileName,null(),null());
HXLINE( 952)		{
HXLINE( 952)			int _g = (int)0;
HXDLIN( 952)			::Array< ::String > _g1 = ::Reflect_obj::fields(so->data);
HXDLIN( 952)			while((_g < _g1->length)){
HXLINE( 952)				::String key = _g1->__get(_g);
HXDLIN( 952)				_g = (_g + (int)1);
HXLINE( 954)				map->set(key,::Reflect_obj::field(so->data,key));
            			}
            		}
HXLINE( 957)		if (hx::IsNotNull( onComplete )) {
HXLINE( 958)			onComplete(true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Utils_obj,loadMap,(void))

void Utils_obj::convertLegacySharedObject(::String name,hx::Null< bool >  __o_overwrite){
bool overwrite = __o_overwrite.Default(false);
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_963_convertLegacySharedObject)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,convertLegacySharedObject,(void))

 ::haxe::io::Bytes Utils_obj::getConfigBytes(::String path){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1025_getConfigBytes)
HXDLIN(1025)		return ::com::stencyl::utils::Utils_obj::loadBytes(path);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,getConfigBytes,return )

::String Utils_obj::getConfigText(::String path){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1038_getConfigText)
HXDLIN(1038)		return ::com::stencyl::utils::Utils_obj::loadText(path);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,getConfigText,return )

 ::lime::app::Future Utils_obj::getConfigBitmap(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::openfl::display::BitmapData bmp){
            			HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1081_getConfigBitmap)
HXLINE(1081)			return ::lime::app::Future_obj::withValue(( ( ::openfl::display::DisplayObject)( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,bmp,null(),null())) ));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1080_getConfigBitmap)
HXDLIN(1080)		return ::openfl::display::BitmapData_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,getConfigBitmap,return )

 ::haxe::io::Bytes Utils_obj::loadBytes(::String path){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1087_loadBytes)
HXLINE(1097)		 ::haxe::io::Bytes bytes = ::lime::utils::_Bytes::Bytes_Impl__obj::fromFile(path);
HXLINE(1098)		if (hx::IsNull( bytes )) {
HXLINE(1098)			bytes = ::lime::utils::_Bytes::Bytes_Impl__obj::alloc((int)0);
            		}
HXLINE(1099)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,loadBytes,return )

::String Utils_obj::loadText(::String path){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1105_loadText)
HXLINE(1106)		 ::haxe::io::Bytes bytes = ::com::stencyl::utils::Utils_obj::loadBytes(path);
HXLINE(1107)		return bytes->getString((int)0,bytes->length,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,loadText,return )

 ::openfl::display::BitmapData Utils_obj::loadBitmapData(::String path){
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1111_loadBitmapData)
HXLINE(1120)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromFile(path);
HXLINE(1121)		return ::openfl::display::BitmapData_obj::fromImage(image,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,loadBitmapData,return )

void Utils_obj::saveImage( ::openfl::display::BitmapData image,::String outputFile){
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1128_saveImage)
HXLINE(1129)		 ::openfl::geom::Rectangle image1 = image->rect;
HXDLIN(1129)		 ::openfl::utils::ByteArrayData imageData = image->encode(image1, ::openfl::display::PNGEncoderOptions_obj::__alloc( HX_CTX ,null()),null());
HXLINE(1130)		 ::haxe::io::Output fo = ::sys::io::File_obj::write(outputFile,true);
HXLINE(1131)		 ::haxe::io::Bytes _hx_tmp = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(imageData);
HXDLIN(1131)		fo->writeBytes(_hx_tmp,(int)0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(imageData));
HXLINE(1132)		fo->close();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,saveImage,(void))

Float Utils_obj::_time;

Float Utils_obj::_updateTime;

Float Utils_obj::_renderTime;

Float Utils_obj::_gameTime;

Float Utils_obj::_flashTime;

 ::haxe::ds::StringMap Utils_obj::_bitmap;

int Utils_obj::_seed;

int Utils_obj::_getSeed;

Float Utils_obj::_volume;

Float Utils_obj::_pan;

 ::openfl::media::SoundTransform Utils_obj::_soundTransform;

Float Utils_obj::DEG;

Float Utils_obj::RAD;

 ::openfl::display::Stage Utils_obj::stage;

 ::openfl::geom::Point Utils_obj::point;

 ::openfl::geom::Point Utils_obj::point2;

 ::openfl::geom::Point Utils_obj::zero;

 ::openfl::geom::Rectangle Utils_obj::rect;

 ::openfl::geom::Matrix Utils_obj::matrix;

 ::openfl::display::Sprite Utils_obj::sprite;

 ::com::stencyl::models::actor::Collision Utils_obj::collision;

void Utils_obj::resetStatics(){
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1176_resetStatics)
HXLINE(1177)		::com::stencyl::utils::Utils_obj::width = (int)0;
HXLINE(1178)		::com::stencyl::utils::Utils_obj::height = (int)0;
HXLINE(1179)		::com::stencyl::utils::Utils_obj::elapsed = (int)0;
HXLINE(1180)		::com::stencyl::utils::Utils_obj::rate = (int)1;
HXLINE(1181)		::com::stencyl::utils::Utils_obj::bounds = null();
HXLINE(1182)		::com::stencyl::utils::Utils_obj::camera =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1183)		::com::stencyl::utils::Utils_obj::_time = (int)0;
HXLINE(1184)		::com::stencyl::utils::Utils_obj::_updateTime = (int)0;
HXLINE(1185)		::com::stencyl::utils::Utils_obj::_renderTime = (int)0;
HXLINE(1186)		::com::stencyl::utils::Utils_obj::_gameTime = (int)0;
HXLINE(1187)		::com::stencyl::utils::Utils_obj::_flashTime = (int)0;
HXLINE(1188)		::com::stencyl::utils::Utils_obj::_bitmap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1189)		::com::stencyl::utils::Utils_obj::_seed = (int)0;
HXLINE(1190)		::com::stencyl::utils::Utils_obj::_getSeed = (int)0;
HXLINE(1191)		::com::stencyl::utils::Utils_obj::_volume = (int)1;
HXLINE(1192)		::com::stencyl::utils::Utils_obj::_pan = (int)0;
HXLINE(1193)		::com::stencyl::utils::Utils_obj::_soundTransform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1194)		::com::stencyl::utils::Utils_obj::stage = null();
HXLINE(1195)		::com::stencyl::utils::Utils_obj::point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1196)		::com::stencyl::utils::Utils_obj::point2 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1197)		::com::stencyl::utils::Utils_obj::zero =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1198)		::com::stencyl::utils::Utils_obj::rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1199)		::com::stencyl::utils::Utils_obj::matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(1200)		::com::stencyl::utils::Utils_obj::sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(1201)		::com::stencyl::utils::Utils_obj::collision =  ::com::stencyl::models::actor::Collision_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Utils_obj,resetStatics,(void))


Utils_obj::Utils_obj()
{
}

bool Utils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pan") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_pan() ); return true; } }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { outValue = ( rate ); return true; }
		if (HX_FIELD_EQ(inName,"sign") ) { outValue = sign_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prev") ) { outValue = prev_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"swap") ) { outValue = swap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"time") ) { outValue = ( time ); return true; }
		if (HX_FIELD_EQ(inName,"_pan") ) { outValue = ( _pan ); return true; }
		if (HX_FIELD_EQ(inName,"zero") ) { outValue = ( zero ); return true; }
		if (HX_FIELD_EQ(inName,"rect") ) { outValue = ( rect ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { outValue = ( width ); return true; }
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"angle") ) { outValue = angle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_time") ) { outValue = ( _time ); return true; }
		if (HX_FIELD_EQ(inName,"_seed") ) { outValue = ( _seed ); return true; }
		if (HX_FIELD_EQ(inName,"stage") ) { outValue = ( stage ); return true; }
		if (HX_FIELD_EQ(inName,"point") ) { outValue = ( point ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { outValue = ( height ); return true; }
		if (HX_FIELD_EQ(inName,"bounds") ) { outValue = ( bounds ); return true; }
		if (HX_FIELD_EQ(inName,"camera") ) { outValue = ( camera ); return true; }
		if (HX_FIELD_EQ(inName,"cloner") ) { outValue = ( cloner ); return true; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_volume() ); return true; } }
		if (HX_FIELD_EQ(inName,"getRed") ) { outValue = getRed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"frames") ) { outValue = frames_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"point2") ) { outValue = ( point2 ); return true; }
		if (HX_FIELD_EQ(inName,"matrix") ) { outValue = ( matrix ); return true; }
		if (HX_FIELD_EQ(inName,"sprite") ) { outValue = ( sprite ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"elapsed") ) { outValue = ( elapsed ); return true; }
		if (HX_FIELD_EQ(inName,"copyMap") ) { outValue = copyMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"demouse") ) { outValue = demouse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_pan") ) { outValue = get_pan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_pan") ) { outValue = set_pan_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"angleXY") ) { outValue = angleXY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"indexOf") ) { outValue = indexOf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBlue") ) { outValue = getBlue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"saveMap") ) { outValue = saveMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadMap") ) { outValue = loadMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_bitmap") ) { outValue = ( _bitmap ); return true; }
		if (HX_FIELD_EQ(inName,"_volume") ) { outValue = ( _volume ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { outValue = contains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mapCount") ) { outValue = mapCount_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"approach") ) { outValue = approach_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"anchorTo") ) { outValue = anchorTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getGreen") ) { outValue = getGreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"timeFlag") ) { outValue = timeFlag_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_time") ) { outValue = set_time_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadText") ) { outValue = loadText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_getSeed") ) { outValue = ( _getSeed ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"toBoolean") ) { outValue = toBoolean_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mapToList") ) { outValue = mapToList_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setCamera") ) { outValue = setCamera_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"colorLerp") ) { outValue = colorLerp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"saveImage") ) { outValue = saveImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_gameTime") ) { outValue = ( _gameTime ); return true; }
		if (HX_FIELD_EQ(inName,"collision") ) { outValue = ( collision ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_volume") ) { outValue = get_volume_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_volume") ) { outValue = set_volume_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleClamp") ) { outValue = scaleClamp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_flashTime") ) { outValue = ( _flashTime ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"resetCamera") ) { outValue = resetCamera_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stepTowards") ) { outValue = stepTowards_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clampInRect") ) { outValue = clampInRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getColorRGB") ) { outValue = getColorRGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_updateTime") ) { outValue = ( _updateTime ); return true; }
		if (HX_FIELD_EQ(inName,"_renderTime") ) { outValue = ( _renderTime ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rotateAround") ) { outValue = rotateAround_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"convertColor") ) { outValue = convertColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"distanceRects") ) { outValue = distanceRects_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getConfigText") ) { outValue = getConfigText_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"removeAllTiles") ) { outValue = removeAllTiles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getAnchorPoint") ) { outValue = getAnchorPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getConfigBytes") ) { outValue = getConfigBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadBitmapData") ) { outValue = loadBitmapData_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"distanceSquared") ) { outValue = distanceSquared_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getConfigBitmap") ) { outValue = getConfigBitmap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_soundTransform") ) { outValue = ( _soundTransform ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mapContainsValue") ) { outValue = mapContainsValue_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"removeAllChildren") ) { outValue = removeAllChildren_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"distanceRectPoint") ) { outValue = distanceRectPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flushSharedObject") ) { outValue = flushSharedObject_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"applyToAllChildren") ) { outValue = applyToAllChildren_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"saveToSharedObject") ) { outValue = saveToSharedObject_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"removeValueFromArray") ) { outValue = removeValueFromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromSharedObject") ) { outValue = loadFromSharedObject_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"convertLegacySharedObject") ) { outValue = convertLegacySharedObject_dyn(); return true; }
	}
	return false;
}

bool Utils_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pan") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_pan(ioValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { rate=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"time") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_time(ioValue.Cast< Float >()) ); else time=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"_pan") ) { _pan=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"zero") ) { zero=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		if (HX_FIELD_EQ(inName,"rect") ) { rect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_time") ) { _time=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"_seed") ) { _seed=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		if (HX_FIELD_EQ(inName,"point") ) { point=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"camera") ) { camera=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		if (HX_FIELD_EQ(inName,"cloner") ) { cloner=ioValue.Cast<  ::cloner::Cloner >(); return true; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_volume(ioValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"point2") ) { point2=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		if (HX_FIELD_EQ(inName,"sprite") ) { sprite=ioValue.Cast<  ::openfl::display::Sprite >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"elapsed") ) { elapsed=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"_bitmap") ) { _bitmap=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"_volume") ) { _volume=ioValue.Cast< Float >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_getSeed") ) { _getSeed=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_gameTime") ) { _gameTime=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"collision") ) { collision=ioValue.Cast<  ::com::stencyl::models::actor::Collision >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_flashTime") ) { _flashTime=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_updateTime") ) { _updateTime=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"_renderTime") ) { _renderTime=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_soundTransform") ) { _soundTransform=ioValue.Cast<  ::openfl::media::SoundTransform >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Utils_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Utils_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Utils_obj::INTEGER_MAX,HX_HCSTRING("INTEGER_MAX","\x23","\xa4","\xe1","\x8c")},
	{hx::fsFloat,(void *) &Utils_obj::NUMBER_MAX_VALUE,HX_HCSTRING("NUMBER_MAX_VALUE","\xe0","\xc3","\xce","\xfc")},
	{hx::fsInt,(void *) &Utils_obj::blackColor,HX_HCSTRING("blackColor","\x24","\xd7","\xfd","\x00")},
	{hx::fsInt,(void *) &Utils_obj::width,HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(void *) &Utils_obj::height,HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(void *) &Utils_obj::elapsed,HX_HCSTRING("elapsed","\x3c","\x98","\xc0","\xba")},
	{hx::fsFloat,(void *) &Utils_obj::rate,HX_HCSTRING("rate","\xe0","\x52","\xa4","\x4b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Utils_obj::bounds,HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &Utils_obj::camera,HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7")},
	{hx::fsObject /*::cloner::Cloner*/ ,(void *) &Utils_obj::cloner,HX_HCSTRING("cloner","\x75","\xde","\x4d","\x0e")},
	{hx::fsFloat,(void *) &Utils_obj::time,HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsFloat,(void *) &Utils_obj::_time,HX_HCSTRING("_time","\xec","\xe7","\x0d","\x00")},
	{hx::fsFloat,(void *) &Utils_obj::_updateTime,HX_HCSTRING("_updateTime","\xd5","\x83","\x3b","\xd8")},
	{hx::fsFloat,(void *) &Utils_obj::_renderTime,HX_HCSTRING("_renderTime","\xa2","\x93","\x90","\xbc")},
	{hx::fsFloat,(void *) &Utils_obj::_gameTime,HX_HCSTRING("_gameTime","\x7e","\xc4","\xb8","\x00")},
	{hx::fsFloat,(void *) &Utils_obj::_flashTime,HX_HCSTRING("_flashTime","\x9e","\x41","\x49","\x5f")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Utils_obj::_bitmap,HX_HCSTRING("_bitmap","\x8e","\x21","\x83","\x5f")},
	{hx::fsInt,(void *) &Utils_obj::_seed,HX_HCSTRING("_seed","\x50","\xa1","\x61","\xff")},
	{hx::fsInt,(void *) &Utils_obj::_getSeed,HX_HCSTRING("_getSeed","\xa8","\x8e","\x8b","\x58")},
	{hx::fsFloat,(void *) &Utils_obj::_volume,HX_HCSTRING("_volume","\x79","\x3b","\xca","\xcd")},
	{hx::fsFloat,(void *) &Utils_obj::_pan,HX_HCSTRING("_pan","\x5e","\x96","\x20","\x3f")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(void *) &Utils_obj::_soundTransform,HX_HCSTRING("_soundTransform","\x3c","\x37","\x3f","\x6c")},
	{hx::fsFloat,(void *) &Utils_obj::DEG,HX_HCSTRING("DEG","\xa6","\xd5","\x33","\x00")},
	{hx::fsFloat,(void *) &Utils_obj::RAD,HX_HCSTRING("RAD","\xb5","\x71","\x3e","\x00")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &Utils_obj::stage,HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &Utils_obj::point,HX_HCSTRING("point","\x50","\xb4","\x8f","\xc6")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &Utils_obj::point2,HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &Utils_obj::zero,HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Utils_obj::rect,HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Utils_obj::matrix,HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(void *) &Utils_obj::sprite,HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3")},
	{hx::fsObject /*::com::stencyl::models::actor::Collision*/ ,(void *) &Utils_obj::collision,HX_HCSTRING("collision","\x72","\xa8","\x3a","\xdb")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Utils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Utils_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Utils_obj::INTEGER_MAX,"INTEGER_MAX");
	HX_MARK_MEMBER_NAME(Utils_obj::NUMBER_MAX_VALUE,"NUMBER_MAX_VALUE");
	HX_MARK_MEMBER_NAME(Utils_obj::blackColor,"blackColor");
	HX_MARK_MEMBER_NAME(Utils_obj::width,"width");
	HX_MARK_MEMBER_NAME(Utils_obj::height,"height");
	HX_MARK_MEMBER_NAME(Utils_obj::elapsed,"elapsed");
	HX_MARK_MEMBER_NAME(Utils_obj::rate,"rate");
	HX_MARK_MEMBER_NAME(Utils_obj::bounds,"bounds");
	HX_MARK_MEMBER_NAME(Utils_obj::camera,"camera");
	HX_MARK_MEMBER_NAME(Utils_obj::cloner,"cloner");
	HX_MARK_MEMBER_NAME(Utils_obj::time,"time");
	HX_MARK_MEMBER_NAME(Utils_obj::_time,"_time");
	HX_MARK_MEMBER_NAME(Utils_obj::_updateTime,"_updateTime");
	HX_MARK_MEMBER_NAME(Utils_obj::_renderTime,"_renderTime");
	HX_MARK_MEMBER_NAME(Utils_obj::_gameTime,"_gameTime");
	HX_MARK_MEMBER_NAME(Utils_obj::_flashTime,"_flashTime");
	HX_MARK_MEMBER_NAME(Utils_obj::_bitmap,"_bitmap");
	HX_MARK_MEMBER_NAME(Utils_obj::_seed,"_seed");
	HX_MARK_MEMBER_NAME(Utils_obj::_getSeed,"_getSeed");
	HX_MARK_MEMBER_NAME(Utils_obj::_volume,"_volume");
	HX_MARK_MEMBER_NAME(Utils_obj::_pan,"_pan");
	HX_MARK_MEMBER_NAME(Utils_obj::_soundTransform,"_soundTransform");
	HX_MARK_MEMBER_NAME(Utils_obj::DEG,"DEG");
	HX_MARK_MEMBER_NAME(Utils_obj::RAD,"RAD");
	HX_MARK_MEMBER_NAME(Utils_obj::stage,"stage");
	HX_MARK_MEMBER_NAME(Utils_obj::point,"point");
	HX_MARK_MEMBER_NAME(Utils_obj::point2,"point2");
	HX_MARK_MEMBER_NAME(Utils_obj::zero,"zero");
	HX_MARK_MEMBER_NAME(Utils_obj::rect,"rect");
	HX_MARK_MEMBER_NAME(Utils_obj::matrix,"matrix");
	HX_MARK_MEMBER_NAME(Utils_obj::sprite,"sprite");
	HX_MARK_MEMBER_NAME(Utils_obj::collision,"collision");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Utils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Utils_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Utils_obj::INTEGER_MAX,"INTEGER_MAX");
	HX_VISIT_MEMBER_NAME(Utils_obj::NUMBER_MAX_VALUE,"NUMBER_MAX_VALUE");
	HX_VISIT_MEMBER_NAME(Utils_obj::blackColor,"blackColor");
	HX_VISIT_MEMBER_NAME(Utils_obj::width,"width");
	HX_VISIT_MEMBER_NAME(Utils_obj::height,"height");
	HX_VISIT_MEMBER_NAME(Utils_obj::elapsed,"elapsed");
	HX_VISIT_MEMBER_NAME(Utils_obj::rate,"rate");
	HX_VISIT_MEMBER_NAME(Utils_obj::bounds,"bounds");
	HX_VISIT_MEMBER_NAME(Utils_obj::camera,"camera");
	HX_VISIT_MEMBER_NAME(Utils_obj::cloner,"cloner");
	HX_VISIT_MEMBER_NAME(Utils_obj::time,"time");
	HX_VISIT_MEMBER_NAME(Utils_obj::_time,"_time");
	HX_VISIT_MEMBER_NAME(Utils_obj::_updateTime,"_updateTime");
	HX_VISIT_MEMBER_NAME(Utils_obj::_renderTime,"_renderTime");
	HX_VISIT_MEMBER_NAME(Utils_obj::_gameTime,"_gameTime");
	HX_VISIT_MEMBER_NAME(Utils_obj::_flashTime,"_flashTime");
	HX_VISIT_MEMBER_NAME(Utils_obj::_bitmap,"_bitmap");
	HX_VISIT_MEMBER_NAME(Utils_obj::_seed,"_seed");
	HX_VISIT_MEMBER_NAME(Utils_obj::_getSeed,"_getSeed");
	HX_VISIT_MEMBER_NAME(Utils_obj::_volume,"_volume");
	HX_VISIT_MEMBER_NAME(Utils_obj::_pan,"_pan");
	HX_VISIT_MEMBER_NAME(Utils_obj::_soundTransform,"_soundTransform");
	HX_VISIT_MEMBER_NAME(Utils_obj::DEG,"DEG");
	HX_VISIT_MEMBER_NAME(Utils_obj::RAD,"RAD");
	HX_VISIT_MEMBER_NAME(Utils_obj::stage,"stage");
	HX_VISIT_MEMBER_NAME(Utils_obj::point,"point");
	HX_VISIT_MEMBER_NAME(Utils_obj::point2,"point2");
	HX_VISIT_MEMBER_NAME(Utils_obj::zero,"zero");
	HX_VISIT_MEMBER_NAME(Utils_obj::rect,"rect");
	HX_VISIT_MEMBER_NAME(Utils_obj::matrix,"matrix");
	HX_VISIT_MEMBER_NAME(Utils_obj::sprite,"sprite");
	HX_VISIT_MEMBER_NAME(Utils_obj::collision,"collision");
};

#endif

hx::Class Utils_obj::__mClass;

static ::String Utils_obj_sStaticFields[] = {
	HX_HCSTRING("INTEGER_MAX","\x23","\xa4","\xe1","\x8c"),
	HX_HCSTRING("NUMBER_MAX_VALUE","\xe0","\xc3","\xce","\xfc"),
	HX_HCSTRING("blackColor","\x24","\xd7","\xfd","\x00"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("elapsed","\x3c","\x98","\xc0","\xba"),
	HX_HCSTRING("rate","\xe0","\x52","\xa4","\x4b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7"),
	HX_HCSTRING("toBoolean","\x6d","\x22","\x93","\xad"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("removeValueFromArray","\x82","\x61","\x97","\x9a"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("mapContainsValue","\x96","\x58","\xb2","\xb4"),
	HX_HCSTRING("mapCount","\x93","\xb4","\xa5","\xc1"),
	HX_HCSTRING("mapToList","\x35","\xe3","\x4b","\x60"),
	HX_HCSTRING("cloner","\x75","\xde","\x4d","\x0e"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyMap","\xe7","\x85","\x80","\x43"),
	HX_HCSTRING("applyToAllChildren","\x77","\xd3","\xb0","\xca"),
	HX_HCSTRING("removeAllChildren","\x9c","\xf1","\xf5","\xf5"),
	HX_HCSTRING("removeAllTiles","\x08","\xf9","\x6e","\xd3"),
	HX_HCSTRING("demouse","\x04","\xeb","\xd2","\xac"),
	HX_HCSTRING("getAnchorPoint","\xa5","\x34","\xf9","\xc1"),
	HX_HCSTRING("setCamera","\xe7","\xbb","\x33","\x17"),
	HX_HCSTRING("resetCamera","\xd4","\xc9","\xa0","\x57"),
	HX_HCSTRING("get_volume","\xa3","\x99","\xda","\x4f"),
	HX_HCSTRING("set_volume","\x17","\x38","\x58","\x53"),
	HX_HCSTRING("get_pan","\xf4","\x19","\xca","\x26"),
	HX_HCSTRING("set_pan","\x00","\xab","\xcb","\x19"),
	HX_HCSTRING("sign","\x3d","\x90","\x53","\x4c"),
	HX_HCSTRING("approach","\x68","\x5d","\xd0","\x92"),
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("colorLerp","\x7a","\x9d","\x1d","\x23"),
	HX_HCSTRING("stepTowards","\x70","\x71","\xc4","\x10"),
	HX_HCSTRING("anchorTo","\x50","\xcb","\x0c","\x4b"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("angleXY","\x94","\x6b","\xd9","\x52"),
	HX_HCSTRING("rotateAround","\x08","\x69","\x52","\x74"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("distanceSquared","\x72","\x1e","\x40","\x0c"),
	HX_HCSTRING("distanceRects","\x5a","\x4f","\x45","\xae"),
	HX_HCSTRING("distanceRectPoint","\x97","\x72","\x51","\x51"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	HX_HCSTRING("clampInRect","\x04","\x01","\x67","\x2b"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("scaleClamp","\x11","\x20","\x8c","\x69"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("swap","\x93","\x2a","\x5e","\x4c"),
	HX_HCSTRING("getColorRGB","\x20","\x88","\xe2","\xaf"),
	HX_HCSTRING("getRed","\x5b","\x12","\x26","\xa3"),
	HX_HCSTRING("getGreen","\x4d","\x1e","\xc4","\xf9"),
	HX_HCSTRING("getBlue","\x50","\xf2","\x9b","\x13"),
	HX_HCSTRING("convertColor","\x70","\x72","\x23","\x7d"),
	HX_HCSTRING("timeFlag","\x59","\x8e","\x1f","\xe4"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("set_time","\x0a","\xe1","\x14","\x7b"),
	HX_HCSTRING("saveToSharedObject","\x7c","\x49","\x57","\x28"),
	HX_HCSTRING("loadFromSharedObject","\x14","\x66","\xd3","\xfd"),
	HX_HCSTRING("flushSharedObject","\x28","\x20","\xc8","\xa6"),
	HX_HCSTRING("saveMap","\x5f","\x1b","\x08","\xab"),
	HX_HCSTRING("loadMap","\x16","\x84","\xdd","\x08"),
	HX_HCSTRING("convertLegacySharedObject","\x00","\x86","\x50","\xc2"),
	HX_HCSTRING("getConfigBytes","\x53","\xb5","\x95","\xb9"),
	HX_HCSTRING("getConfigText","\xc5","\x34","\xb7","\xd6"),
	HX_HCSTRING("getConfigBitmap","\x07","\xae","\x05","\x73"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("loadBitmapData","\x7f","\xbf","\x71","\xca"),
	HX_HCSTRING("saveImage","\xde","\x26","\x16","\x4c"),
	HX_HCSTRING("_time","\xec","\xe7","\x0d","\x00"),
	HX_HCSTRING("_updateTime","\xd5","\x83","\x3b","\xd8"),
	HX_HCSTRING("_renderTime","\xa2","\x93","\x90","\xbc"),
	HX_HCSTRING("_gameTime","\x7e","\xc4","\xb8","\x00"),
	HX_HCSTRING("_flashTime","\x9e","\x41","\x49","\x5f"),
	HX_HCSTRING("_bitmap","\x8e","\x21","\x83","\x5f"),
	HX_HCSTRING("_seed","\x50","\xa1","\x61","\xff"),
	HX_HCSTRING("_getSeed","\xa8","\x8e","\x8b","\x58"),
	HX_HCSTRING("_volume","\x79","\x3b","\xca","\xcd"),
	HX_HCSTRING("_pan","\x5e","\x96","\x20","\x3f"),
	HX_HCSTRING("_soundTransform","\x3c","\x37","\x3f","\x6c"),
	HX_HCSTRING("DEG","\xa6","\xd5","\x33","\x00"),
	HX_HCSTRING("RAD","\xb5","\x71","\x3e","\x00"),
	HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"),
	HX_HCSTRING("point","\x50","\xb4","\x8f","\xc6"),
	HX_HCSTRING("point2","\xe2","\x11","\x2e","\xf7"),
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"),
	HX_HCSTRING("collision","\x72","\xa8","\x3a","\xdb"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	::String(null())
};

void Utils_obj::__register()
{
	hx::Object *dummy = new Utils_obj;
	Utils_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.Utils","\xe5","\x63","\xd4","\x75");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Utils_obj::__GetStatic;
	__mClass->mSetStaticField = &Utils_obj::__SetStatic;
	__mClass->mMarkFunc = Utils_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Utils_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Utils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Utils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Utils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Utils_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Utils_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_49_boot)
HXDLIN(  49)		INTEGER_MAX = (int)100000000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_58_boot)
HXDLIN(  58)		NUMBER_MAX_VALUE = ((Float)1.79769313486231e+308);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_64_boot)
HXDLIN(  64)		blackColor = (int)-16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_84_boot)
HXDLIN(  84)		rate = ((Float)1);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_94_boot)
HXDLIN(  94)		camera =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_209_boot)
HXDLIN( 209)		cloner =  ::cloner::Cloner_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1144_boot)
HXDLIN(1144)		_bitmap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1147_boot)
HXDLIN(1147)		_seed = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1151_boot)
HXDLIN(1151)		_volume = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1152_boot)
HXDLIN(1152)		_pan = ((Float)0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1153_boot)
HXDLIN(1153)		_soundTransform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1159_boot)
HXDLIN(1159)		DEG = ((Float)57.295779513084021);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1160_boot)
HXDLIN(1160)		RAD = ((Float)0.017453292519942779);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1166_boot)
HXDLIN(1166)		point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1167_boot)
HXDLIN(1167)		point2 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1168_boot)
HXDLIN(1168)		zero =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1169_boot)
HXDLIN(1169)		rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1170_boot)
HXDLIN(1170)		matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1171_boot)
HXDLIN(1171)		sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d9a23d4e040eee89_1173_boot)
HXDLIN(1173)		collision =  ::com::stencyl::models::actor::Collision_obj::__alloc( HX_CTX );
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
