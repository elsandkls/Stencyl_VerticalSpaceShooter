// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2WorldManifold
#include <box2D/collision/B2WorldManifold.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2CircleShape
#include <box2D/collision/shapes/B2CircleShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2MassData
#include <box2D/collision/shapes/B2MassData.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2PolygonShape
#include <box2D/collision/shapes/B2PolygonShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2BodyDef
#include <box2D/dynamics/B2BodyDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactListener
#include <box2D/dynamics/B2ContactListener.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactManager
#include <box2D/dynamics/B2ContactManager.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2FixtureDef
#include <box2D/dynamics/B2FixtureDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2World
#include <box2D/dynamics/B2World.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactEdge
#include <box2D/dynamics/contacts/B2ContactEdge.h>
#endif
#ifndef INCLUDED_com_stencyl_Config
#include <com/stencyl/Config.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_Input
#include <com/stencyl/Input.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Behavior
#include <com/stencyl/behavior/Behavior.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_BehaviorManager
#include <com/stencyl/behavior/BehaviorManager.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Script
#include <com/stencyl/behavior/Script.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_AbstractAnimation
#include <com/stencyl/graphics/AbstractAnimation.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_BitmapAnimation
#include <com/stencyl/graphics/BitmapAnimation.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_BitmapWrapper
#include <com/stencyl/graphics/BitmapWrapper.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_EngineScaleUpdateListener
#include <com/stencyl/graphics/EngineScaleUpdateListener.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_G
#include <com/stencyl/graphics/G.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_fonts_Label
#include <com/stencyl/graphics/fonts/Label.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Region
#include <com/stencyl/models/Region.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Terrain
#include <com/stencyl/models/Terrain.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_ActorTweenProperties
#include <com/stencyl/models/actor/ActorTweenProperties.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_ActorType
#include <com/stencyl/models/actor/ActorType.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Animation
#include <com/stencyl/models/actor/Animation.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Collision
#include <com/stencyl/models/actor/Collision.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_CollisionPoint
#include <com/stencyl/models/actor/CollisionPoint.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Group
#include <com/stencyl/models/actor/Group.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Sprite
#include <com/stencyl/models/actor/Sprite.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Hitbox
#include <com/stencyl/models/collision/Hitbox.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Mask
#include <com/stencyl/models/collision/Mask.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Masklist
#include <com/stencyl/models/collision/Masklist.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_Layer
#include <com/stencyl/models/scene/Layer.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_layers_RegularLayer
#include <com/stencyl/models/scene/layers/RegularLayer.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Utils
#include <com/stencyl/utils/Utils.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat
#include <com/stencyl/utils/motion/TweenFloat.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat2
#include <com/stencyl/utils/motion/TweenFloat2.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Collection
#include <de/polygonal/ds/Collection.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Hashable
#include <de/polygonal/ds/Hashable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntHashTable
#include <de/polygonal/ds/IntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntIntHashTable
#include <de/polygonal/ds/IntIntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Itr
#include <de/polygonal/ds/Itr.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Map
#include <de/polygonal/ds/Map.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_03717d9f6aea6544_92_new,"com.stencyl.models.Actor","new",0xb2ccfc12,"com.stencyl.models.Actor.new","com/stencyl/models/Actor.hx",92,0x1b8c1ddd)
static const int _hx_array_data_373d4b20_2[] = {
	(int)10,
};
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_603_destroy,"com.stencyl.models.Actor","destroy",0xbfc419ac,"com.stencyl.models.Actor.destroy","com/stencyl/models/Actor.hx",603,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_691_resetListeners,"com.stencyl.models.Actor","resetListeners",0x8aa9b73e,"com.stencyl.models.Actor.resetListeners","com/stencyl/models/Actor.hx",691,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_740_addAnim,"com.stencyl.models.Actor","addAnim",0x17ecb584,"com.stencyl.models.Actor.addAnim","com/stencyl/models/Actor.hx",740,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_791_reloadAnimationGraphics,"com.stencyl.models.Actor","reloadAnimationGraphics",0xce705108,"com.stencyl.models.Actor.reloadAnimationGraphics","com/stencyl/models/Actor.hx",791,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_813_initScripts,"com.stencyl.models.Actor","initScripts",0x7145988a,"com.stencyl.models.Actor.initScripts","com/stencyl/models/Actor.hx",813,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_855_initFromBody,"com.stencyl.models.Actor","initFromBody",0x2fee9e6a,"com.stencyl.models.Actor.initFromBody","com/stencyl/models/Actor.hx",855,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_863_initBody,"com.stencyl.models.Actor","initBody",0x80c3d8e0,"com.stencyl.models.Actor.initBody","com/stencyl/models/Actor.hx",863,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_936_addAnimation,"com.stencyl.models.Actor","addAnimation",0x36d9deb1,"com.stencyl.models.Actor.addAnimation","com/stencyl/models/Actor.hx",936,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_941_getAnimation,"com.stencyl.models.Actor","getAnimation",0x46dc599c,"com.stencyl.models.Actor.getAnimation","com/stencyl/models/Actor.hx",941,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_946_setAnimation,"com.stencyl.models.Actor","setAnimation",0x5bd57d10,"com.stencyl.models.Actor.setAnimation","com/stencyl/models/Actor.hx",946,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_951_switchToDefaultAnimation,"com.stencyl.models.Actor","switchToDefaultAnimation",0xf57623c0,"com.stencyl.models.Actor.switchToDefaultAnimation","com/stencyl/models/Actor.hx",951,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_960_isAnimationPlaying,"com.stencyl.models.Actor","isAnimationPlaying",0xa494e962,"com.stencyl.models.Actor.isAnimationPlaying","com/stencyl/models/Actor.hx",960,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_965_getCurrentFrame,"com.stencyl.models.Actor","getCurrentFrame",0x495ea19c,"com.stencyl.models.Actor.getCurrentFrame","com/stencyl/models/Actor.hx",965,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_970_setCurrentFrame,"com.stencyl.models.Actor","setCurrentFrame",0x452a1ea8,"com.stencyl.models.Actor.setCurrentFrame","com/stencyl/models/Actor.hx",970,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_975_getNumFrames,"com.stencyl.models.Actor","getNumFrames",0x592e6524,"com.stencyl.models.Actor.getNumFrames","com/stencyl/models/Actor.hx",975,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_979_defaultShapeChanged,"com.stencyl.models.Actor","defaultShapeChanged",0xa6d3fde6,"com.stencyl.models.Actor.defaultShapeChanged","com/stencyl/models/Actor.hx",979,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1088_switchAnimation,"com.stencyl.models.Actor","switchAnimation",0x8c7c9522,"com.stencyl.models.Actor.switchAnimation","com/stencyl/models/Actor.hx",1088,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1417_updateChildrenPositions,"com.stencyl.models.Actor","updateChildrenPositions",0x8e4dead4,"com.stencyl.models.Actor.updateChildrenPositions","com/stencyl/models/Actor.hx",1417,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1434_removeAttachedImages,"com.stencyl.models.Actor","removeAttachedImages",0x0c4922ae,"com.stencyl.models.Actor.removeAttachedImages","com/stencyl/models/Actor.hx",1434,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1451_update,"com.stencyl.models.Actor","update",0xc8013597,"com.stencyl.models.Actor.update","com/stencyl/models/Actor.hx",1451,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1455_innerUpdate,"com.stencyl.models.Actor","innerUpdate",0x7bfbadf1,"com.stencyl.models.Actor.innerUpdate","com/stencyl/models/Actor.hx",1455,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1571_internalUpdate,"com.stencyl.models.Actor","internalUpdate",0xe89fdab4,"com.stencyl.models.Actor.internalUpdate","com/stencyl/models/Actor.hx",1571,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1635_updateDrawingMatrix,"com.stencyl.models.Actor","updateDrawingMatrix",0x0b52e828,"com.stencyl.models.Actor.updateDrawingMatrix","com/stencyl/models/Actor.hx",1635,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1804_updateTweenAlpha,"com.stencyl.models.Actor","updateTweenAlpha",0x1232856a,"com.stencyl.models.Actor.updateTweenAlpha","com/stencyl/models/Actor.hx",1804,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1808_updateTweenScaleXY,"com.stencyl.models.Actor","updateTweenScaleXY",0x9adfcb17,"com.stencyl.models.Actor.updateTweenScaleXY","com/stencyl/models/Actor.hx",1808,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1817_updateTweenAngle,"com.stencyl.models.Actor","updateTweenAngle",0x137e21df,"com.stencyl.models.Actor.updateTweenAngle","com/stencyl/models/Actor.hx",1817,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1821_updateTweenXY,"com.stencyl.models.Actor","updateTweenXY",0x7c928b55,"com.stencyl.models.Actor.updateTweenXY","com/stencyl/models/Actor.hx",1821,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1844_updateBodyScale,"com.stencyl.models.Actor","updateBodyScale",0x6146b7f1,"com.stencyl.models.Actor.updateBodyScale","com/stencyl/models/Actor.hx",1844,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1859_scaleBody,"com.stencyl.models.Actor","scaleBody",0x7ca67f7e,"com.stencyl.models.Actor.scaleBody","com/stencyl/models/Actor.hx",1859,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1934_checkScreenState,"com.stencyl.models.Actor","checkScreenState",0xdfdd542b,"com.stencyl.models.Actor.checkScreenState","com/stencyl/models/Actor.hx",1934,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1971_handleCollisions,"com.stencyl.models.Actor","handleCollisions",0xb74b5297,"com.stencyl.models.Actor.handleCollisions","com/stencyl/models/Actor.hx",1971,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2185_addContact,"com.stencyl.models.Actor","addContact",0x3de4350d,"com.stencyl.models.Actor.addContact","com/stencyl/models/Actor.hx",2185,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2193_removeContact,"com.stencyl.models.Actor","removeContact",0xcc9254ee,"com.stencyl.models.Actor.removeContact","com/stencyl/models/Actor.hx",2193,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2217_addRegionContact,"com.stencyl.models.Actor","addRegionContact",0x98007239,"com.stencyl.models.Actor.addRegionContact","com/stencyl/models/Actor.hx",2217,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2225_removeRegionContact,"com.stencyl.models.Actor","removeRegionContact",0x02ed30da,"com.stencyl.models.Actor.removeRegionContact","com/stencyl/models/Actor.hx",2225,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2237_getID,"com.stencyl.models.Actor","getID",0xb5418e23,"com.stencyl.models.Actor.getID","com/stencyl/models/Actor.hx",2237,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2242_getName,"com.stencyl.models.Actor","getName",0xb6c00eb3,"com.stencyl.models.Actor.getName","com/stencyl/models/Actor.hx",2242,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2247_getGroupID,"com.stencyl.models.Actor","getGroupID",0x933e9572,"com.stencyl.models.Actor.getGroupID","com/stencyl/models/Actor.hx",2247,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2260_getLayerID,"com.stencyl.models.Actor","getLayerID",0x4e88ac84,"com.stencyl.models.Actor.getLayerID","com/stencyl/models/Actor.hx",2260,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2265_getLayer,"com.stencyl.models.Actor","getLayer",0x0a88c069,"com.stencyl.models.Actor.getLayer","com/stencyl/models/Actor.hx",2265,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2270_getLayerName,"com.stencyl.models.Actor","getLayerName",0x86d44754,"com.stencyl.models.Actor.getLayerName","com/stencyl/models/Actor.hx",2270,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2275_getLayerOrder,"com.stencyl.models.Actor","getLayerOrder",0x11868365,"com.stencyl.models.Actor.getLayerOrder","com/stencyl/models/Actor.hx",2275,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2280_getType,"com.stencyl.models.Actor","getType",0xbac98f22,"com.stencyl.models.Actor.getType","com/stencyl/models/Actor.hx",2280,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2289_isPausable,"com.stencyl.models.Actor","isPausable",0x3e86e841,"com.stencyl.models.Actor.isPausable","com/stencyl/models/Actor.hx",2289,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2294_isPaused,"com.stencyl.models.Actor","isPaused",0x82df0b46,"com.stencyl.models.Actor.isPaused","com/stencyl/models/Actor.hx",2294,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2299_pause,"com.stencyl.models.Actor","pause",0xe138d328,"com.stencyl.models.Actor.pause","com/stencyl/models/Actor.hx",2299,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2320_unpause,"com.stencyl.models.Actor","unpause",0x5526baaf,"com.stencyl.models.Actor.unpause","com/stencyl/models/Actor.hx",2320,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2345_getGroup,"com.stencyl.models.Actor","getGroup",0x34bcf1d7,"com.stencyl.models.Actor.getGroup","com/stencyl/models/Actor.hx",2345,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2350_getIsRegion,"com.stencyl.models.Actor","getIsRegion",0x0ae14ce6,"com.stencyl.models.Actor.getIsRegion","com/stencyl/models/Actor.hx",2350,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2355_getIsTerrainRegion,"com.stencyl.models.Actor","getIsTerrainRegion",0x244accd7,"com.stencyl.models.Actor.getIsTerrainRegion","com/stencyl/models/Actor.hx",2355,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2364_moveToLayer,"com.stencyl.models.Actor","moveToLayer",0xa0b834f7,"com.stencyl.models.Actor.moveToLayer","com/stencyl/models/Actor.hx",2364,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2372_bringToFront,"com.stencyl.models.Actor","bringToFront",0xa09a484a,"com.stencyl.models.Actor.bringToFront","com/stencyl/models/Actor.hx",2372,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2381_bringForward,"com.stencyl.models.Actor","bringForward",0xb352c4e1,"com.stencyl.models.Actor.bringForward","com/stencyl/models/Actor.hx",2381,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2389_sendToBack,"com.stencyl.models.Actor","sendToBack",0xd505fb38,"com.stencyl.models.Actor.sendToBack","com/stencyl/models/Actor.hx",2389,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2398_sendBackward,"com.stencyl.models.Actor","sendBackward",0x54267b59,"com.stencyl.models.Actor.sendBackward","com/stencyl/models/Actor.hx",2398,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2409_moveToBottom,"com.stencyl.models.Actor","moveToBottom",0x0d3df505,"com.stencyl.models.Actor.moveToBottom","com/stencyl/models/Actor.hx",2409,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2418_moveToTop,"com.stencyl.models.Actor","moveToTop",0x29f8e43b,"com.stencyl.models.Actor.moveToTop","com/stencyl/models/Actor.hx",2418,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2423_moveDown,"com.stencyl.models.Actor","moveDown",0x20169321,"com.stencyl.models.Actor.moveDown","com/stencyl/models/Actor.hx",2423,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2440_moveUp,"com.stencyl.models.Actor","moveUp",0x0da8835a,"com.stencyl.models.Actor.moveUp","com/stencyl/models/Actor.hx",2440,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2461_getZIndex,"com.stencyl.models.Actor","getZIndex",0xed3a96a0,"com.stencyl.models.Actor.getZIndex","com/stencyl/models/Actor.hx",2461,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2468_setZIndex,"com.stencyl.models.Actor","setZIndex",0xd08b82ac,"com.stencyl.models.Actor.setZIndex","com/stencyl/models/Actor.hx",2468,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2495_enableSmoothMotion,"com.stencyl.models.Actor","enableSmoothMotion",0x182158b5,"com.stencyl.models.Actor.enableSmoothMotion","com/stencyl/models/Actor.hx",2495,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2501_getX,"com.stencyl.models.Actor","getX",0xbbef1310,"com.stencyl.models.Actor.getX","com/stencyl/models/Actor.hx",2501,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2526_getY,"com.stencyl.models.Actor","getY",0xbbef1311,"com.stencyl.models.Actor.getY","com/stencyl/models/Actor.hx",2526,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2552_getXCenter,"com.stencyl.models.Actor","getXCenter",0xc4c65905,"com.stencyl.models.Actor.getXCenter","com/stencyl/models/Actor.hx",2552,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2565_getYCenter,"com.stencyl.models.Actor","getYCenter",0xee5bcfc6,"com.stencyl.models.Actor.getYCenter","com/stencyl/models/Actor.hx",2565,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2578_getScreenX,"com.stencyl.models.Actor","getScreenX",0x367dd804,"com.stencyl.models.Actor.getScreenX","com/stencyl/models/Actor.hx",2578,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2591_getScreenY,"com.stencyl.models.Actor","getScreenY",0x367dd805,"com.stencyl.models.Actor.getScreenY","com/stencyl/models/Actor.hx",2591,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2603_setX,"com.stencyl.models.Actor","setX",0xc3dda284,"com.stencyl.models.Actor.setX","com/stencyl/models/Actor.hx",2603,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2646_setY,"com.stencyl.models.Actor","setY",0xc3dda285,"com.stencyl.models.Actor.setY","com/stencyl/models/Actor.hx",2646,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2688_setXY,"com.stencyl.models.Actor","setXY",0x9e109155,"com.stencyl.models.Actor.setXY","com/stencyl/models/Actor.hx",2688,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2735_setXCenter,"com.stencyl.models.Actor","setXCenter",0xc843f779,"com.stencyl.models.Actor.setXCenter","com/stencyl/models/Actor.hx",2735,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2740_setYCenter,"com.stencyl.models.Actor","setYCenter",0xf1d96e3a,"com.stencyl.models.Actor.setYCenter","com/stencyl/models/Actor.hx",2740,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2745_setScreenX,"com.stencyl.models.Actor","setScreenX",0x39fb7678,"com.stencyl.models.Actor.setScreenX","com/stencyl/models/Actor.hx",2745,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2757_setScreenY,"com.stencyl.models.Actor","setScreenY",0x39fb7679,"com.stencyl.models.Actor.setScreenY","com/stencyl/models/Actor.hx",2757,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2768_follow,"com.stencyl.models.Actor","follow",0x3a9240ff,"com.stencyl.models.Actor.follow","com/stencyl/models/Actor.hx",2768,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2784_followWithOffset,"com.stencyl.models.Actor","followWithOffset",0x2029e418,"com.stencyl.models.Actor.followWithOffset","com/stencyl/models/Actor.hx",2784,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2800_setOriginPoint,"com.stencyl.models.Actor","setOriginPoint",0x519f9196,"com.stencyl.models.Actor.setOriginPoint","com/stencyl/models/Actor.hx",2800,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2870_getXVelocity,"com.stencyl.models.Actor","getXVelocity",0xd580614d,"com.stencyl.models.Actor.getXVelocity","com/stencyl/models/Actor.hx",2870,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2880_getYVelocity,"com.stencyl.models.Actor","getYVelocity",0xa871ca4e,"com.stencyl.models.Actor.getYVelocity","com/stencyl/models/Actor.hx",2880,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2890_setXVelocity,"com.stencyl.models.Actor","setXVelocity",0xea7984c1,"com.stencyl.models.Actor.setXVelocity","com/stencyl/models/Actor.hx",2890,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2904_setYVelocity,"com.stencyl.models.Actor","setYVelocity",0xbd6aedc2,"com.stencyl.models.Actor.setYVelocity","com/stencyl/models/Actor.hx",2904,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2918_setVelocity,"com.stencyl.models.Actor","setVelocity",0xdb55f991,"com.stencyl.models.Actor.setVelocity","com/stencyl/models/Actor.hx",2918,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2925_accelerateX,"com.stencyl.models.Actor","accelerateX",0xb28a8a8d,"com.stencyl.models.Actor.accelerateX","com/stencyl/models/Actor.hx",2925,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2930_accelerateY,"com.stencyl.models.Actor","accelerateY",0xb28a8a8e,"com.stencyl.models.Actor.accelerateY","com/stencyl/models/Actor.hx",2930,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2934_accelerate,"com.stencyl.models.Actor","accelerate",0x549a736b,"com.stencyl.models.Actor.accelerate","com/stencyl/models/Actor.hx",2934,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2944_getAngle,"com.stencyl.models.Actor","getAngle",0xbdaa826b,"com.stencyl.models.Actor.getAngle","com/stencyl/models/Actor.hx",2944,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2954_getAngleInDegrees,"com.stencyl.models.Actor","getAngleInDegrees",0x2f455e57,"com.stencyl.models.Actor.getAngleInDegrees","com/stencyl/models/Actor.hx",2954,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2964_setAngle,"com.stencyl.models.Actor","setAngle",0x6c07dbdf,"com.stencyl.models.Actor.setAngle","com/stencyl/models/Actor.hx",2964,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_2996_rotate,"com.stencyl.models.Actor","rotate",0x0c1bf5e9,"com.stencyl.models.Actor.rotate","com/stencyl/models/Actor.hx",2996,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3024_getAngularVelocity,"com.stencyl.models.Actor","getAngularVelocity",0x9fcf8bb7,"com.stencyl.models.Actor.getAngularVelocity","com/stencyl/models/Actor.hx",3024,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3035_setAngularVelocity,"com.stencyl.models.Actor","setAngularVelocity",0x7c7ebe2b,"com.stencyl.models.Actor.setAngularVelocity","com/stencyl/models/Actor.hx",3035,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3049_changeAngularVelocity,"com.stencyl.models.Actor","changeAngularVelocity",0x18ecb3c1,"com.stencyl.models.Actor.changeAngularVelocity","com/stencyl/models/Actor.hx",3049,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3066_push,"com.stencyl.models.Actor","push",0xc1ee21e8,"com.stencyl.models.Actor.push","com/stencyl/models/Actor.hx",3066,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3094_pushInDirection,"com.stencyl.models.Actor","pushInDirection",0x1cee3092,"com.stencyl.models.Actor.pushInDirection","com/stencyl/models/Actor.hx",3094,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3103_applyImpulse,"com.stencyl.models.Actor","applyImpulse",0x997b6af5,"com.stencyl.models.Actor.applyImpulse","com/stencyl/models/Actor.hx",3103,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3134_applyImpulseInDirection,"com.stencyl.models.Actor","applyImpulseInDirection",0xf37c18a5,"com.stencyl.models.Actor.applyImpulseInDirection","com/stencyl/models/Actor.hx",3134,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3144_applyTorque,"com.stencyl.models.Actor","applyTorque",0x5e82a48a,"com.stencyl.models.Actor.applyTorque","com/stencyl/models/Actor.hx",3144,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3165_getWidth,"com.stencyl.models.Actor","getWidth",0x652af49e,"com.stencyl.models.Actor.getWidth","com/stencyl/models/Actor.hx",3165,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3170_getHeight,"com.stencyl.models.Actor","getHeight",0xd6ba8e4f,"com.stencyl.models.Actor.getHeight","com/stencyl/models/Actor.hx",3170,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3175_getPhysicsWidth,"com.stencyl.models.Actor","getPhysicsWidth",0xa2a80027,"com.stencyl.models.Actor.getPhysicsWidth","com/stencyl/models/Actor.hx",3175,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3180_getPhysicsHeight,"com.stencyl.models.Actor","getPhysicsHeight",0x66a79aa6,"com.stencyl.models.Actor.getPhysicsHeight","com/stencyl/models/Actor.hx",3180,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3189_getBody,"com.stencyl.models.Actor","getBody",0xaedc170a,"com.stencyl.models.Actor.getBody","com/stencyl/models/Actor.hx",3189,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3194_enableRotation,"com.stencyl.models.Actor","enableRotation",0x7d51506f,"com.stencyl.models.Actor.enableRotation","com/stencyl/models/Actor.hx",3194,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3207_disableRotation,"com.stencyl.models.Actor","disableRotation",0xb34d79f8,"com.stencyl.models.Actor.disableRotation","com/stencyl/models/Actor.hx",3207,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3219_setIgnoreGravity,"com.stencyl.models.Actor","setIgnoreGravity",0x455b8768,"com.stencyl.models.Actor.setIgnoreGravity","com/stencyl/models/Actor.hx",3219,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3229_ignoresGravity,"com.stencyl.models.Actor","ignoresGravity",0x1847e2bb,"com.stencyl.models.Actor.ignoresGravity","com/stencyl/models/Actor.hx",3229,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3239_getFriction,"com.stencyl.models.Actor","getFriction",0x49b46962,"com.stencyl.models.Actor.getFriction","com/stencyl/models/Actor.hx",3239,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3249_getBounciness,"com.stencyl.models.Actor","getBounciness",0x9fb5968b,"com.stencyl.models.Actor.getBounciness","com/stencyl/models/Actor.hx",3249,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3259_getMass,"com.stencyl.models.Actor","getMass",0xb616dd5c,"com.stencyl.models.Actor.getMass","com/stencyl/models/Actor.hx",3259,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3269_getAngularMass,"com.stencyl.models.Actor","getAngularMass",0x6648758e,"com.stencyl.models.Actor.getAngularMass","com/stencyl/models/Actor.hx",3269,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3279_getLinearDamping,"com.stencyl.models.Actor","getLinearDamping",0x427f33f5,"com.stencyl.models.Actor.getLinearDamping","com/stencyl/models/Actor.hx",3279,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3289_getAngularDamping,"com.stencyl.models.Actor","getAngularDamping",0x7e36b868,"com.stencyl.models.Actor.getAngularDamping","com/stencyl/models/Actor.hx",3289,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3300_setFriction,"com.stencyl.models.Actor","setFriction",0x5421706e,"com.stencyl.models.Actor.setFriction","com/stencyl/models/Actor.hx",3300,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3308_setBounciness,"com.stencyl.models.Actor","setBounciness",0xe4bb7897,"com.stencyl.models.Actor.setBounciness","com/stencyl/models/Actor.hx",3308,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3316_setMass,"com.stencyl.models.Actor","setMass",0xa9186e68,"com.stencyl.models.Actor.setMass","com/stencyl/models/Actor.hx",3316,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3325_setAngularMass,"com.stencyl.models.Actor","setAngularMass",0x86685e02,"com.stencyl.models.Actor.setAngularMass","com/stencyl/models/Actor.hx",3325,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3334_setLinearDamping,"com.stencyl.models.Actor","setLinearDamping",0x98c12169,"com.stencyl.models.Actor.setLinearDamping","com/stencyl/models/Actor.hx",3334,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3342_setAngularDamping,"com.stencyl.models.Actor","setAngularDamping",0xa1a49074,"com.stencyl.models.Actor.setAngularDamping","com/stencyl/models/Actor.hx",3342,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3353_isMouseOver,"com.stencyl.models.Actor","isMouseOver",0x60852e81,"com.stencyl.models.Actor.isMouseOver","com/stencyl/models/Actor.hx",3353,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3425_isMouseHover,"com.stencyl.models.Actor","isMouseHover",0x07a1cfef,"com.stencyl.models.Actor.isMouseHover","com/stencyl/models/Actor.hx",3425,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3430_isMouseDown,"com.stencyl.models.Actor","isMouseDown",0x593a958f,"com.stencyl.models.Actor.isMouseDown","com/stencyl/models/Actor.hx",3430,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3435_isMousePressed,"com.stencyl.models.Actor","isMousePressed",0x4ed8ef95,"com.stencyl.models.Actor.isMousePressed","com/stencyl/models/Actor.hx",3435,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3440_isMouseReleased,"com.stencyl.models.Actor","isMouseReleased",0xb5cec06a,"com.stencyl.models.Actor.isMouseReleased","com/stencyl/models/Actor.hx",3440,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3449_cancelTweens,"com.stencyl.models.Actor","cancelTweens",0xdaa7fad0,"com.stencyl.models.Actor.cancelTweens","com/stencyl/models/Actor.hx",3449,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3454_fadeTo,"com.stencyl.models.Actor","fadeTo",0x25a705a5,"com.stencyl.models.Actor.fadeTo","com/stencyl/models/Actor.hx",3454,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3459_growTo,"com.stencyl.models.Actor","growTo",0x5d253ffc,"com.stencyl.models.Actor.growTo","com/stencyl/models/Actor.hx",3459,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3465_spinTo,"com.stencyl.models.Actor","spinTo",0xfea24f6b,"com.stencyl.models.Actor.spinTo","com/stencyl/models/Actor.hx",3465,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3470_moveTo,"com.stencyl.models.Actor","moveTo",0x0da8827a,"com.stencyl.models.Actor.moveTo","com/stencyl/models/Actor.hx",3470,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3476_spinBy,"com.stencyl.models.Actor","spinBy",0xfea23fc7,"com.stencyl.models.Actor.spinBy","com/stencyl/models/Actor.hx",3476,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3481_moveBy,"com.stencyl.models.Actor","moveBy",0x0da872d6,"com.stencyl.models.Actor.moveBy","com/stencyl/models/Actor.hx",3481,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3491_drawImage,"com.stencyl.models.Actor","drawImage",0xdd8c51e9,"com.stencyl.models.Actor.drawImage","com/stencyl/models/Actor.hx",3491,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3536_getCurrentImage,"com.stencyl.models.Actor","getCurrentImage",0x004448ca,"com.stencyl.models.Actor.getCurrentImage","com/stencyl/models/Actor.hx",3536,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3540_enableActorDrawing,"com.stencyl.models.Actor","enableActorDrawing",0xa39a109a,"com.stencyl.models.Actor.enableActorDrawing","com/stencyl/models/Actor.hx",3540,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3550_disableActorDrawing,"com.stencyl.models.Actor","disableActorDrawing",0xd74432a3,"com.stencyl.models.Actor.disableActorDrawing","com/stencyl/models/Actor.hx",3550,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3561_drawsImage,"com.stencyl.models.Actor","drawsImage",0x15b5a37a,"com.stencyl.models.Actor.drawsImage","com/stencyl/models/Actor.hx",3561,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3569_setFilter,"com.stencyl.models.Actor","setFilter",0x3cf4922c,"com.stencyl.models.Actor.setFilter","com/stencyl/models/Actor.hx",3569,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3581_clearFilters,"com.stencyl.models.Actor","clearFilters",0xd11621bc,"com.stencyl.models.Actor.clearFilters","com/stencyl/models/Actor.hx",3581,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3593_setBlendMode,"com.stencyl.models.Actor","setBlendMode",0x1cd87260,"com.stencyl.models.Actor.setBlendMode","com/stencyl/models/Actor.hx",3593,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3600_resetBlendMode,"com.stencyl.models.Actor","resetBlendMode",0xa3533613,"com.stencyl.models.Actor.resetBlendMode","com/stencyl/models/Actor.hx",3600,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3610_addBehavior,"com.stencyl.models.Actor","addBehavior",0xc7e5f585,"com.stencyl.models.Actor.addBehavior","com/stencyl/models/Actor.hx",3610,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3617_hasBehavior,"com.stencyl.models.Actor","hasBehavior",0x6940a3be,"com.stencyl.models.Actor.hasBehavior","com/stencyl/models/Actor.hx",3617,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3628_enableBehavior,"com.stencyl.models.Actor","enableBehavior",0x7f5da3c3,"com.stencyl.models.Actor.enableBehavior","com/stencyl/models/Actor.hx",3628,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3636_disableBehavior,"com.stencyl.models.Actor","disableBehavior",0xb559cd4c,"com.stencyl.models.Actor.disableBehavior","com/stencyl/models/Actor.hx",3636,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3643_isBehaviorEnabled,"com.stencyl.models.Actor","isBehaviorEnabled",0xb659d477,"com.stencyl.models.Actor.isBehaviorEnabled","com/stencyl/models/Actor.hx",3643,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3654_enableAllBehaviors,"com.stencyl.models.Actor","enableAllBehaviors",0x483a29f1,"com.stencyl.models.Actor.enableAllBehaviors","com/stencyl/models/Actor.hx",3654,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3669_getValue,"com.stencyl.models.Actor","getValue",0xcc80be09,"com.stencyl.models.Actor.getValue","com/stencyl/models/Actor.hx",3669,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3674_setValue,"com.stencyl.models.Actor","setValue",0x7ade177d,"com.stencyl.models.Actor.setValue","com/stencyl/models/Actor.hx",3674,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3679_shout,"com.stencyl.models.Actor","shout",0xa008834b,"com.stencyl.models.Actor.shout","com/stencyl/models/Actor.hx",3679,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3684_say,"com.stencyl.models.Actor","say",0xb2d0c3dd,"com.stencyl.models.Actor.say","com/stencyl/models/Actor.hx",3684,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3693_setActorValue,"com.stencyl.models.Actor","setActorValue",0x37ae08b0,"com.stencyl.models.Actor.setActorValue","com/stencyl/models/Actor.hx",3693,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3701_getActorValue,"com.stencyl.models.Actor","getActorValue",0xf2a826a4,"com.stencyl.models.Actor.getActorValue","com/stencyl/models/Actor.hx",3701,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3713_hasActorValue,"com.stencyl.models.Actor","hasActorValue",0xb08c8268,"com.stencyl.models.Actor.hasActorValue","com/stencyl/models/Actor.hx",3713,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3727_registerListener,"com.stencyl.models.Actor","registerListener",0x2660eb05,"com.stencyl.models.Actor.registerListener","com/stencyl/models/Actor.hx",3727,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3750_removeAllListeners,"com.stencyl.models.Actor","removeAllListeners",0xdc6bab10,"com.stencyl.models.Actor.removeAllListeners","com/stencyl/models/Actor.hx",3750,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3777_anchorToScreen,"com.stencyl.models.Actor","anchorToScreen",0x5888c46a,"com.stencyl.models.Actor.anchorToScreen","com/stencyl/models/Actor.hx",3777,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3785_unanchorFromScreen,"com.stencyl.models.Actor","unanchorFromScreen",0xc3733832,"com.stencyl.models.Actor.unanchorFromScreen","com/stencyl/models/Actor.hx",3785,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3794_isAnchoredToScreen,"com.stencyl.models.Actor","isAnchoredToScreen",0x9a2ba613,"com.stencyl.models.Actor.isAnchoredToScreen","com/stencyl/models/Actor.hx",3794,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3799_makeAlwaysSimulate,"com.stencyl.models.Actor","makeAlwaysSimulate",0xc89ec8af,"com.stencyl.models.Actor.makeAlwaysSimulate","com/stencyl/models/Actor.hx",3799,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3813_makeSometimesSimulate,"com.stencyl.models.Actor","makeSometimesSimulate",0xc00f787a,"com.stencyl.models.Actor.makeSometimesSimulate","com/stencyl/models/Actor.hx",3813,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3827_alwaysSimulates,"com.stencyl.models.Actor","alwaysSimulates",0xd40a6632,"com.stencyl.models.Actor.alwaysSimulates","com/stencyl/models/Actor.hx",3827,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3831_die,"com.stencyl.models.Actor","die",0xb2c568f2,"com.stencyl.models.Actor.die","com/stencyl/models/Actor.hx",3831,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3854_isDying,"com.stencyl.models.Actor","isDying",0x1c2070d5,"com.stencyl.models.Actor.isDying","com/stencyl/models/Actor.hx",3854,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3859_isAlive,"com.stencyl.models.Actor","isAlive",0x5954f435,"com.stencyl.models.Actor.isAlive","com/stencyl/models/Actor.hx",3859,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3864_isOnScreen,"com.stencyl.models.Actor","isOnScreen",0x5e9ed283,"com.stencyl.models.Actor.isOnScreen","com/stencyl/models/Actor.hx",3864,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3882_isInScene,"com.stencyl.models.Actor","isInScene",0x71a5298f,"com.stencyl.models.Actor.isInScene","com/stencyl/models/Actor.hx",3882,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3891_getLastCollidedActor,"com.stencyl.models.Actor","getLastCollidedActor",0xbafc7c51,"com.stencyl.models.Actor.getLastCollidedActor","com/stencyl/models/Actor.hx",3891,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3898_killSelfAfterLeavingScreen,"com.stencyl.models.Actor","killSelfAfterLeavingScreen",0x5d26383c,"com.stencyl.models.Actor.killSelfAfterLeavingScreen","com/stencyl/models/Actor.hx",3898,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3902_toString,"com.stencyl.models.Actor","toString",0x735fffba,"com.stencyl.models.Actor.toString","com/stencyl/models/Actor.hx",3902,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3940_addRectangularShape,"com.stencyl.models.Actor","addRectangularShape",0x45bff3f6,"com.stencyl.models.Actor.addRectangularShape","com/stencyl/models/Actor.hx",3940,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3960_addCircularShape,"com.stencyl.models.Actor","addCircularShape",0x8e9ffe6f,"com.stencyl.models.Actor.addCircularShape","com/stencyl/models/Actor.hx",3960,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3972_addVertex,"com.stencyl.models.Actor","addVertex",0xb1840d97,"com.stencyl.models.Actor.addVertex","com/stencyl/models/Actor.hx",3972,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3980_addPolygonalShape,"com.stencyl.models.Actor","addPolygonalShape",0x50cb082f,"com.stencyl.models.Actor.addPolygonalShape","com/stencyl/models/Actor.hx",3980,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3997_createFixture,"com.stencyl.models.Actor","createFixture",0xb4c8125f,"com.stencyl.models.Actor.createFixture","com/stencyl/models/Actor.hx",3997,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4007_getLastCreatedFixture,"com.stencyl.models.Actor","getLastCreatedFixture",0x708a861f,"com.stencyl.models.Actor.getLastCreatedFixture","com/stencyl/models/Actor.hx",4007,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4020_setLocation,"com.stencyl.models.Actor","setLocation",0xa19e65a9,"com.stencyl.models.Actor.setLocation","com/stencyl/models/Actor.hx",4020,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4036_get_shape,"com.stencyl.models.Actor","get_shape",0x17de3caa,"com.stencyl.models.Actor.get_shape","com/stencyl/models/Actor.hx",4036,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4038_set_shape,"com.stencyl.models.Actor","set_shape",0xfb2f28b6,"com.stencyl.models.Actor.set_shape","com/stencyl/models/Actor.hx",4038,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4054_collide,"com.stencyl.models.Actor","collide",0x88a19c30,"com.stencyl.models.Actor.collide","com/stencyl/models/Actor.hx",4054,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4128_collideTypes,"com.stencyl.models.Actor","collideTypes",0x1b231629,"com.stencyl.models.Actor.collideTypes","com/stencyl/models/Actor.hx",4128,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4156_collideWith,"com.stencyl.models.Actor","collideWith",0x4cad1656,"com.stencyl.models.Actor.collideWith","com/stencyl/models/Actor.hx",4156,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4195_collideInto,"com.stencyl.models.Actor","collideInto",0x436fe4f0,"com.stencyl.models.Actor.collideInto","com/stencyl/models/Actor.hx",4195,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4258_clearCollisionInfoList,"com.stencyl.models.Actor","clearCollisionInfoList",0x0aba61bf,"com.stencyl.models.Actor.clearCollisionInfoList","com/stencyl/models/Actor.hx",4258,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4274_disposeRemovedCollisionInfo,"com.stencyl.models.Actor","disposeRemovedCollisionInfo",0xc123e231,"com.stencyl.models.Actor.disposeRemovedCollisionInfo","com/stencyl/models/Actor.hx",4274,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4297_clearCollidedList,"com.stencyl.models.Actor","clearCollidedList",0xe5d38f03,"com.stencyl.models.Actor.clearCollidedList","com/stencyl/models/Actor.hx",4297,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4307_addCollision,"com.stencyl.models.Actor","addCollision",0xc6df981f,"com.stencyl.models.Actor.addCollision","com/stencyl/models/Actor.hx",4307,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4333_alreadyCollided,"com.stencyl.models.Actor","alreadyCollided",0xb6997990,"com.stencyl.models.Actor.alreadyCollided","com/stencyl/models/Actor.hx",4333,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4377_resetReal,"com.stencyl.models.Actor","resetReal",0xe9ab51ff,"com.stencyl.models.Actor.resetReal","com/stencyl/models/Actor.hx",4377,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4384_adjustByWidth,"com.stencyl.models.Actor","adjustByWidth",0x59d05e12,"com.stencyl.models.Actor.adjustByWidth","com/stencyl/models/Actor.hx",4384,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4404_adjustByHeight,"com.stencyl.models.Actor","adjustByHeight",0xf2d16a5b,"com.stencyl.models.Actor.adjustByHeight","com/stencyl/models/Actor.hx",4404,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4424_getAllCollisionInfo,"com.stencyl.models.Actor","getAllCollisionInfo",0x92d53c87,"com.stencyl.models.Actor.getAllCollisionInfo","com/stencyl/models/Actor.hx",4424,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4456_moveActorBy,"com.stencyl.models.Actor","moveActorBy",0xcf9ad2cd,"com.stencyl.models.Actor.moveActorBy","com/stencyl/models/Actor.hx",4456,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4596_moveActorTo,"com.stencyl.models.Actor","moveActorTo",0xcf9ae271,"com.stencyl.models.Actor.moveActorTo","com/stencyl/models/Actor.hx",4596,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4608_moveActorTowards,"com.stencyl.models.Actor","moveActorTowards",0xfd2936a6,"com.stencyl.models.Actor.moveActorTowards","com/stencyl/models/Actor.hx",4608,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4620_moveCollideX,"com.stencyl.models.Actor","moveCollideX",0x4a5c4559,"com.stencyl.models.Actor.moveCollideX","com/stencyl/models/Actor.hx",4620,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4628_moveCollideY,"com.stencyl.models.Actor","moveCollideY",0x4a5c455a,"com.stencyl.models.Actor.moveCollideY","com/stencyl/models/Actor.hx",4628,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4632_fillCollisionInfo,"com.stencyl.models.Actor","fillCollisionInfo",0xd81218af,"com.stencyl.models.Actor.fillCollisionInfo","com/stencyl/models/Actor.hx",4632,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_4754_handleCollisionsSimple,"com.stencyl.models.Actor","handleCollisionsSimple",0x15d15629,"com.stencyl.models.Actor.handleCollisionsSimple","com/stencyl/models/Actor.hx",4754,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_101_resetStatics,"com.stencyl.models.Actor","resetStatics",0x94945004,"com.stencyl.models.Actor.resetStatics","com/stencyl/models/Actor.hx",101,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_848_createBox,"com.stencyl.models.Actor","createBox",0xa1f091a1,"com.stencyl.models.Actor.createBox","com/stencyl/models/Actor.hx",848,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_3913_scaleShape,"com.stencyl.models.Actor","scaleShape",0x5a361ec5,"com.stencyl.models.Actor.scaleShape","com/stencyl/models/Actor.hx",3913,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_124_boot,"com.stencyl.models.Actor","boot",0xb8a89440,"com.stencyl.models.Actor.boot","com/stencyl/models/Actor.hx",124,0x1b8c1ddd)
HX_LOCAL_STACK_FRAME(_hx_pos_03717d9f6aea6544_1966_boot,"com.stencyl.models.Actor","boot",0xb8a89440,"com.stencyl.models.Actor.boot","com/stencyl/models/Actor.hx",1966,0x1b8c1ddd)
namespace com{
namespace stencyl{
namespace models{

void Actor_obj::__construct( ::com::stencyl::Engine engine,int ID,int groupID,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< int >  __o_layerID,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height, ::com::stencyl::models::actor::Sprite sprite, ::haxe::ds::StringMap behaviorValues, ::com::stencyl::models::actor::ActorType actorType, ::box2D::dynamics::B2BodyDef bodyDef,hx::Null< bool >  __o_isSensor,hx::Null< bool >  __o_isStationary,hx::Null< bool >  __o_isKinematic,hx::Null< bool >  __o_canRotate, ::Dynamic shape,hx::Null< bool >  __o_autoScale,hx::Null< bool >  __o_ignoreGravity,hx::Null< int >  __o_physicsMode){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
int layerID = __o_layerID.Default(-1);
Float width = __o_width.Default(32);
Float height = __o_height.Default(32);
bool isSensor = __o_isSensor.Default(false);
bool isStationary = __o_isStationary.Default(false);
bool isKinematic = __o_isKinematic.Default(false);
bool canRotate = __o_canRotate.Default(false);
bool autoScale = __o_autoScale.Default(true);
bool ignoreGravity = __o_ignoreGravity.Default(false);
int physicsMode = __o_physicsMode.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_92_new)
HXLINE( 265)		this->collisionListenerCount = (int)0;
HXLINE( 232)		this->maxMove = ((Float)99999);
HXLINE( 231)		this->minMove = ((Float)3);
HXLINE( 230)		this->moveYDistance = ((Float)0);
HXLINE( 229)		this->moveXDistance = ((Float)0);
HXLINE( 228)		this->moveMultiplier = ((Float)0.33);
HXLINE( 227)		this->drawY = ((Float)0);
HXLINE( 226)		this->drawX = ((Float)0);
HXLINE( 225)		this->snapOnSet = false;
HXLINE( 224)		this->firstMove = false;
HXLINE( 223)		this->smoothMove = false;
HXLINE( 220)		this->attachedImages = null();
HXLINE( 326)		super::__construct();
HXLINE( 328)		bool _hx_tmp;
HXDLIN( 328)		if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE( 328)			_hx_tmp = (physicsMode == (int)0);
            		}
            		else {
HXLINE( 328)			_hx_tmp = false;
            		}
HXDLIN( 328)		if (_hx_tmp) {
HXLINE( 330)			physicsMode = (int)1;
HXLINE( 331)			this->physicsMode = (int)1;
            		}
HXLINE( 336)		this->dummy =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 337)		this->zero =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE( 339)		this->_point = ::com::stencyl::utils::Utils_obj::point;
HXLINE( 340)		this->_moveX = (this->_moveY = (int)0);
HXLINE( 342)		this->HITBOX =  ::com::stencyl::models::collision::Mask_obj::__alloc( HX_CTX );
HXLINE( 343)		this->set_shape(this->HITBOX);
HXLINE( 345)		bool _hx_tmp1;
HXDLIN( 345)		if (::Std_obj::is(hx::ObjectPtr<OBJ_>(this),hx::ClassOf< ::com::stencyl::models::Region >())) {
HXLINE( 345)			_hx_tmp1 = ::com::stencyl::Engine_obj::NO_PHYSICS;
            		}
            		else {
HXLINE( 345)			_hx_tmp1 = false;
            		}
HXDLIN( 345)		if (_hx_tmp1) {
HXLINE( 347)			int shape1 = ::Std_obj::_hx_int(width);
HXDLIN( 347)			shape = (this->HITBOX =  ::com::stencyl::models::collision::Hitbox_obj::__alloc( HX_CTX ,shape1,::Std_obj::_hx_int(height),(int)0,(int)0,false,(int)-2));
HXLINE( 348)			this->set_shape(( ( ::com::stencyl::models::collision::Mask)(shape) ));
            		}
HXLINE( 352)		this->set_x((int)0);
HXLINE( 353)		this->set_y((int)0);
HXLINE( 354)		this->set_rotation((int)0);
HXLINE( 356)		this->realX = (int)0;
HXLINE( 357)		this->realY = (int)0;
HXLINE( 358)		this->realAngle = (int)0;
HXLINE( 359)		this->realScaleX = (int)1;
HXLINE( 360)		this->realScaleY = (int)1;
HXLINE( 362)		this->collidable = true;
HXLINE( 363)		this->solid = !(isSensor);
HXLINE( 364)		this->updateMatrix = true;
HXLINE( 366)		this->colX = (int)0;
HXLINE( 367)		this->colY = (int)0;
HXLINE( 371)		this->lastScale =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)1,(int)1);
HXLINE( 372)		this->lastX = (int)-1000;
HXLINE( 373)		this->lastY = (int)-1000;
HXLINE( 374)		this->lastAngle = (int)0;
HXLINE( 376)		this->tweenProps =  ::com::stencyl::models::actor::ActorTweenProperties_obj::__alloc( HX_CTX );
HXLINE( 377)		this->tweenProps->xy->doOnUpdate(this->updateTweenXY_dyn());
HXLINE( 378)		this->tweenProps->angle->doOnUpdate(this->updateTweenAngle_dyn());
HXLINE( 379)		this->tweenProps->alpha->doOnUpdate(this->updateTweenAlpha_dyn());
HXLINE( 380)		this->tweenProps->realScaleXY->doOnUpdate(this->updateTweenScaleXY_dyn());
HXLINE( 382)		this->transformPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE( 383)		this->transformMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 384)		this->drawMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 386)		this->currOrigin =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE( 387)		this->currOffset =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE( 388)		this->registry =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 390)		this->attachedImages = ::Array_obj< ::Dynamic>::__new();
HXLINE( 392)		this->physicsMode = physicsMode;
HXLINE( 393)		this->autoScale = autoScale;
HXLINE( 394)		this->xSpeed = (int)0;
HXLINE( 395)		this->ySpeed = (int)0;
HXLINE( 396)		this->rSpeed = (int)0;
HXLINE( 398)		this->mouseState = (int)0;
HXLINE( 400)		this->lastScreenState = false;
HXLINE( 401)		this->lastSceneState = false;
HXLINE( 402)		this->isOnScreenCache = false;
HXLINE( 404)		this->isCamera = false;
HXLINE( 405)		this->isRegion = false;
HXLINE( 406)		this->isTerrainRegion = false;
HXLINE( 407)		this->drawActor = true;
HXLINE( 409)		this->killLeaveScreen = false;
HXLINE( 410)		this->alwaysSimulate = false;
HXLINE( 411)		this->isHUD = false;
HXLINE( 412)		this->continuousCollision = false;
HXLINE( 414)		this->fixedRotation = false;
HXLINE( 415)		this->ignoreGravity = ignoreGravity;
HXLINE( 416)		this->defaultGravity = ignoreGravity;
HXLINE( 417)		this->resetOrigin = true;
HXLINE( 421)		this->allListeners =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 422)		this->allListenerReferences = ::cpp::VirtualArray_obj::__new();
HXLINE( 424)		this->whenCreatedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE( 425)		this->whenUpdatedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE( 426)		this->whenDrawingListeners = ::cpp::VirtualArray_obj::__new();
HXLINE( 427)		this->whenKilledListeners = ::cpp::VirtualArray_obj::__new();
HXLINE( 428)		this->mouseOverListeners = ::cpp::VirtualArray_obj::__new();
HXLINE( 429)		this->positionListeners = ::cpp::VirtualArray_obj::__new();
HXLINE( 430)		this->collisionListeners = ::cpp::VirtualArray_obj::__new();
HXLINE( 434)		this->recycled = false;
HXLINE( 435)		this->paused = false;
HXLINE( 436)		this->destroyed = false;
HXLINE( 438)		this->set_name(HX_("Unknown",6a,4b,cc,ae));
HXLINE( 439)		this->ID = ID;
HXLINE( 440)		this->groupID = groupID;
HXLINE( 441)		int _hx_tmp2;
HXDLIN( 441)		if (hx::IsNotNull( actorType )) {
HXLINE( 441)			_hx_tmp2 = actorType->ID;
            		}
            		else {
HXLINE( 441)			_hx_tmp2 = (int)-1;
            		}
HXDLIN( 441)		this->typeID = _hx_tmp2;
HXLINE( 442)		this->engine = engine;
HXLINE( 444)		this->collidedList = ::Array_obj< ::Dynamic>::__new();
HXLINE( 446)		this->collisions =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)16,null());
HXLINE( 447)		this->simpleCollisions =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)16,null());
HXLINE( 448)		this->contacts =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)16,null());
HXLINE( 449)		this->regionContacts =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)16,null());
HXLINE( 451)		this->collisions->reuseIterator = true;
HXLINE( 452)		this->simpleCollisions->reuseIterator = true;
HXLINE( 453)		this->contacts->reuseIterator = true;
HXLINE( 454)		this->regionContacts->reuseIterator = true;
HXLINE( 456)		this->contactCount = (int)0;
HXLINE( 457)		this->collisionsCount = (int)0;
HXLINE( 459)		this->handlesCollisions = true;
HXLINE( 463)		this->behaviors =  ::com::stencyl::behavior::BehaviorManager_obj::__alloc( HX_CTX );
HXLINE( 467)		this->currAnimationName = HX_("",00,00,00,00);
HXLINE( 468)		this->animationMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 469)		this->shapeMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 470)		this->originMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 472)		this->sprite = sprite;
HXLINE( 473)		this->type = actorType;
HXLINE( 477)		if (hx::IsNotNull( sprite )) {
HXLINE( 479)			 ::Dynamic a = sprite->animations->iterator();
HXDLIN( 479)			while(( (bool)(a->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 479)				 ::com::stencyl::models::actor::Animation a1 = ( ( ::com::stencyl::models::actor::Animation)(a->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 481)				this->addAnim(a1);
HXLINE( 483)				if ((a1->animID == sprite->defaultAnimation)) {
HXLINE( 485)					this->defaultAnim = a1->animName;
            				}
            			}
            		}
HXLINE( 492)		if (hx::IsNull( ::com::stencyl::models::Actor_obj::recycledAnimation )) {
HXLINE( 493)			::com::stencyl::models::Actor_obj::recycledAnimation =  ::com::stencyl::models::actor::Animation_obj::__alloc( HX_CTX ,(int)-1,HX_("recyclingDefault",91,be,3e,75),null(),null(),null(),false,false,(int)1,(int)1,(int)0,(int)0,::Array_obj< int >::fromData( _hx_array_data_373d4b20_2,1),(int)1,(int)1,(int)1);
            		}
HXLINE( 494)		this->addAnim(::com::stencyl::models::Actor_obj::recycledAnimation);
HXLINE( 496)		bool _hx_tmp3;
HXDLIN( 496)		if (hx::IsNotNull( bodyDef )) {
HXLINE( 496)			_hx_tmp3 = (physicsMode == (int)0);
            		}
            		else {
HXLINE( 496)			_hx_tmp3 = false;
            		}
HXDLIN( 496)		if (_hx_tmp3) {
HXLINE( 498)			if (bodyDef->bullet) {
HXLINE( 500)				::box2D::dynamics::B2World_obj::m_continuousPhysics = true;
            			}
HXLINE( 503)			bodyDef->groupID = groupID;
HXLINE( 505)			this->initFromBody(bodyDef);
HXLINE( 508)			 ::box2D::collision::shapes::B2PolygonShape box =  ::box2D::collision::shapes::B2PolygonShape_obj::__alloc( HX_CTX );
HXLINE( 509)			box->setAsBox((int)1,(int)1);
HXLINE( 510)			this->body->createFixture2(box,((Float)0.1));
HXLINE( 512)			this->md =  ::box2D::collision::shapes::B2MassData_obj::__alloc( HX_CTX );
HXLINE( 513)			this->md->mass = bodyDef->mass;
HXLINE( 514)			this->md->I = bodyDef->aMass;
HXLINE( 515)			this->md->center->x = (int)0;
HXLINE( 516)			this->md->center->y = (int)0;
HXLINE( 518)			this->body->setMassData(this->md);
HXLINE( 519)			this->bodyScale =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)1,(int)1);
            		}
            		else {
HXLINE( 524)			bool _hx_tmp4;
HXDLIN( 524)			if (hx::IsNotNull( shape )) {
HXLINE( 524)				_hx_tmp4 = hx::IsEq( ::Type_obj::_hx_typeof(shape),::ValueType_obj::TFloat_dyn() );
            			}
            			else {
HXLINE( 524)				_hx_tmp4 = true;
            			}
HXDLIN( 524)			if (_hx_tmp4) {
HXLINE( 526)				shape = ::com::stencyl::models::Actor_obj::createBox(width,height);
            			}
HXLINE( 529)			if (hx::IsNotNull( bodyDef )) {
HXLINE( 531)				this->continuousCollision = bodyDef->bullet;
            			}
HXLINE( 534)			if (::Std_obj::is(hx::ObjectPtr<OBJ_>(this),hx::ClassOf< ::com::stencyl::models::Region >())) {
HXLINE( 536)				isSensor = true;
HXLINE( 537)				canRotate = false;
            			}
HXLINE( 540)			if (::Std_obj::is(hx::ObjectPtr<OBJ_>(this),hx::ClassOf< ::com::stencyl::models::Terrain >())) {
HXLINE( 542)				canRotate = false;
            			}
HXLINE( 545)			bool _hx_tmp5;
HXDLIN( 545)			if (hx::IsNotNull( shape )) {
HXLINE( 545)				_hx_tmp5 = ::Std_obj::is(shape,hx::ClassOf< ::com::stencyl::models::collision::Mask >());
            			}
            			else {
HXLINE( 545)				_hx_tmp5 = false;
            			}
HXDLIN( 545)			if (_hx_tmp5) {
HXLINE( 547)				this->set_shape(( ( ::com::stencyl::models::collision::Mask)(shape) ));
HXLINE( 548)				this->isTerrain = true;
            			}
            			else {
HXLINE( 551)				if ((physicsMode == (int)0)) {
HXLINE( 553)					this->initBody(groupID,isSensor,isStationary,isKinematic,canRotate,shape);
            				}
            			}
            		}
HXLINE( 557)		this->cacheAnchor =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE( 559)		this->switchToDefaultAnimation();
HXLINE( 562)		if (hx::IsNotNull( sprite )) {
HXLINE( 564)			this->setLocation(x,y);
            		}
            		else {
HXLINE( 569)			bool _hx_tmp6;
HXDLIN( 569)			if (hx::IsNotNull( shape )) {
HXLINE( 569)				_hx_tmp6 = ::Std_obj::is(shape,hx::ClassOf< ::com::stencyl::models::collision::Mask >());
            			}
            			else {
HXLINE( 569)				_hx_tmp6 = false;
            			}
HXDLIN( 569)			if (_hx_tmp6) {
HXLINE( 573)				 ::openfl::display::Bitmap dummy =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)1,(int)1,true,(int)0),null(),null());
HXLINE( 574)				dummy->set_x(width);
HXLINE( 575)				dummy->set_y(height);
HXLINE( 576)				this->addChild(dummy);
HXLINE( 577)				this->cacheWidth = this->set_width(width);
HXLINE( 578)				this->cacheHeight = this->set_height(height);
            			}
            			else {
HXLINE( 582)				if ((physicsMode == (int)0)) {
HXLINE( 584)					 ::box2D::dynamics::B2Body _hx_tmp7 = this->body;
HXDLIN( 584)					Float _hx_tmp8 = ::com::stencyl::Engine_obj::toPhysicalUnits(x);
HXDLIN( 584)					_hx_tmp7->setPosition( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp8,::com::stencyl::Engine_obj::toPhysicalUnits(y)));
            				}
            			}
            		}
HXLINE( 589)		bool _hx_tmp9;
HXDLIN( 589)		if (hx::IsNull( behaviorValues )) {
HXLINE( 589)			_hx_tmp9 = hx::IsNotNull( actorType );
            		}
            		else {
HXLINE( 589)			_hx_tmp9 = false;
            		}
HXDLIN( 589)		if (_hx_tmp9) {
HXLINE( 591)			behaviorValues = actorType->behaviorValues;
            		}
HXLINE( 594)		if ((layerID != (int)-1)) {
HXLINE( 596)			engine->moveActorToLayer(hx::ObjectPtr<OBJ_>(this),( ( ::com::stencyl::models::scene::Layer)(engine->getLayerById(layerID,null())) ));
            		}
HXLINE( 599)		::com::stencyl::Engine_obj::initBehaviors(this->behaviors,behaviorValues,hx::ObjectPtr<OBJ_>(this),engine,false);
            	}

Dynamic Actor_obj::__CreateEmpty() { return new Actor_obj; }

void *Actor_obj::_hx_vtable = 0;

Dynamic Actor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Actor_obj > _hx_result = new Actor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16],inArgs[17],inArgs[18],inArgs[19]);
	return _hx_result;
}

bool Actor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x4fb21980;
		}
	}
}

void Actor_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_603_destroy)
HXLINE( 604)		if (this->destroyed) {
HXLINE( 606)			return;
            		}
HXLINE( 609)		this->destroyed = true;
HXLINE( 611)		{
HXLINE( 611)			 ::Dynamic anim = this->animationMap->iterator();
HXDLIN( 611)			while(( (bool)(anim->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 611)				 ::com::stencyl::graphics::BitmapAnimation anim1 = ( ( ::com::stencyl::graphics::BitmapAnimation)(anim->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 613)				anim1->set_visible(false);
            			}
            		}
HXLINE( 617)		::com::stencyl::utils::Utils_obj::removeAllChildren(hx::ObjectPtr<OBJ_>(this));
HXLINE( 622)		bool _hx_tmp;
HXDLIN( 622)		if (hx::IsNotNull( this->body )) {
HXLINE( 622)			_hx_tmp = (this->physicsMode == (int)0);
            		}
            		else {
HXLINE( 622)			_hx_tmp = false;
            		}
HXDLIN( 622)		if (_hx_tmp) {
HXLINE( 624)			 ::box2D::dynamics::contacts::B2ContactEdge contact = this->body->getContactList();
HXLINE( 626)			while(hx::IsNotNull( contact )){
HXLINE( 628)				::com::stencyl::Engine_obj::engine->world->m_contactManager->m_contactListener->endContact(contact->contact);
HXLINE( 629)				contact = contact->next;
            			}
HXLINE( 632)			::com::stencyl::Engine_obj::engine->world->destroyBody(this->body);
            		}
HXLINE( 635)		this->cancelTweens();
HXLINE( 637)		::com::stencyl::models::Actor_obj::lastCollided = null();
HXLINE( 639)		this->shapeMap = null();
HXLINE( 640)		this->originMap = null();
HXLINE( 641)		this->defaultAnim = null();
HXLINE( 642)		this->animationMap = null();
HXLINE( 643)		this->currAnimation = null();
HXLINE( 644)		this->currOffset = null();
HXLINE( 645)		this->currOrigin = null();
HXLINE( 646)		this->body = null();
HXLINE( 647)		this->sprite = null();
HXLINE( 648)		this->contacts = null();
HXLINE( 649)		this->regionContacts = null();
HXLINE( 650)		this->contactCount = (int)0;
HXLINE( 651)		this->collisionsCount = (int)0;
HXLINE( 653)		this->transformPoint = null();
HXLINE( 654)		this->transformMatrix = null();
HXLINE( 656)		this->whenCreatedListeners = null();
HXLINE( 657)		this->whenUpdatedListeners = null();
HXLINE( 658)		this->whenDrawingListeners = null();
HXLINE( 659)		this->whenKilledListeners = null();
HXLINE( 660)		this->mouseOverListeners = null();
HXLINE( 661)		this->positionListeners = null();
HXLINE( 662)		this->collisionListeners = null();
HXLINE( 663)		this->allListeners = null();
HXLINE( 664)		this->allListenerReferences = null();
HXLINE( 666)		this->positionListenerCount = (int)0;
HXLINE( 667)		this->collisionListenerCount = (int)0;
HXLINE( 669)		this->registry = null();
HXLINE( 671)		{
HXLINE( 671)			::Dynamic k = this->collisions->keys();
HXDLIN( 671)			while(::de::polygonal::ds::Itr_obj::hasNext(k)){
HXLINE( 671)				int k1 = ( (int)(::de::polygonal::ds::Itr_obj::next(k)) );
HXLINE( 673)				 ::de::polygonal::ds::IntHashTable _this = this->collisions;
HXDLIN( 673)				 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN( 673)				int i = _this1->mHash->__get(((int)(k1 * (int)73856093) & (int)_this1->mMask));
HXDLIN( 673)				int i1;
HXDLIN( 673)				if ((i == (int)-1)) {
HXLINE( 673)					i1 = (int)-2147483647;
            				}
            				else {
HXLINE( 673)					::Array< int > d = _this1->mData;
HXDLIN( 673)					if ((d->__get(i) == k1)) {
HXLINE( 673)						i1 = d->__get((i + (int)1));
            					}
            					else {
HXLINE( 673)						int v = (int)-2147483647;
HXDLIN( 673)						i = d->__get((i + (int)2));
HXDLIN( 673)						while((i != (int)-1)){
HXLINE( 673)							if ((d->__get(i) == k1)) {
HXLINE( 673)								v = d->__get((i + (int)1));
HXDLIN( 673)								goto _hx_goto_6;
            							}
HXDLIN( 673)							i = d->__get((i + (int)2));
            						}
            						_hx_goto_6:;
HXDLIN( 673)						i1 = v;
            					}
            				}
HXDLIN( 673)				 ::com::stencyl::models::actor::Collision d1;
HXDLIN( 673)				if ((i1 == (int)-2147483647)) {
HXLINE( 673)					d1 = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            				}
            				else {
HXLINE( 673)					d1 = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            				}
HXLINE( 674)				while((d1->points->length > (int)0)){
HXLINE( 675)					::com::stencyl::models::actor::CollisionPoint_obj::free(d1->points->pop().StaticCast<  ::com::stencyl::models::actor::CollisionPoint >());
            				}
            			}
            		}
HXLINE( 678)		this->collisions = null();
HXLINE( 679)		this->simpleCollisions = null();
HXLINE( 681)		if (hx::IsNotNull( this->bodyDef )) {
HXLINE( 683)			this->bodyDef->userData = null();
HXLINE( 684)			this->bodyDef = null();
            		}
HXLINE( 687)		this->behaviors->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,destroy,(void))

void Actor_obj::resetListeners(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_691_resetListeners)
HXLINE( 692)		{
HXLINE( 692)			 ::Dynamic key = this->allListeners->iterator();
HXDLIN( 692)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 692)				int key1 = ( (int)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 694)				this->allListeners->remove(key1);
            			}
            		}
HXLINE( 697)		while((this->allListenerReferences->get_length() > (int)0)){
HXLINE( 699)			this->allListenerReferences->pop();
            		}
HXLINE( 702)		while((this->whenUpdatedListeners->get_length() > (int)0)){
HXLINE( 704)			this->whenUpdatedListeners->pop();
            		}
HXLINE( 707)		while((this->whenDrawingListeners->get_length() > (int)0)){
HXLINE( 709)			this->whenDrawingListeners->pop();
            		}
HXLINE( 712)		while((this->whenKilledListeners->get_length() > (int)0)){
HXLINE( 714)			this->whenKilledListeners->pop();
            		}
HXLINE( 717)		while((this->mouseOverListeners->get_length() > (int)0)){
HXLINE( 719)			this->mouseOverListeners->pop();
            		}
HXLINE( 722)		while((this->positionListeners->get_length() > (int)0)){
HXLINE( 724)			this->positionListeners->pop();
            		}
HXLINE( 727)		while((this->collisionListeners->get_length() > (int)0)){
HXLINE( 729)			this->collisionListeners->pop();
            		}
HXLINE( 732)		this->positionListenerCount = (int)0;
HXLINE( 733)		this->collisionListenerCount = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,resetListeners,(void))

void Actor_obj::addAnim( ::com::stencyl::models::actor::Animation anim){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_740_addAnim)
HXLINE( 741)		 ::haxe::ds::IntMap shapes;
HXDLIN( 741)		if ((this->physicsMode == (int)0)) {
HXLINE( 741)			shapes = anim->physicsShapes;
            		}
            		else {
HXLINE( 741)			shapes = anim->simpleShapes;
            		}
HXLINE( 743)		if (hx::IsNotNull( shapes )) {
HXLINE( 745)			::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE( 747)			if ((this->physicsMode == (int)1)) {
HXLINE( 749)				 ::Dynamic s = shapes->iterator();
HXDLIN( 749)				while(( (bool)(s->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 749)					 ::com::stencyl::models::collision::Hitbox s1 = ( ( ::com::stencyl::models::collision::Hitbox)(s->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 751)					bool _hx_tmp;
HXDLIN( 751)					if (::Std_obj::is(s1,hx::ClassOf< ::com::stencyl::models::collision::Hitbox >())) {
HXLINE( 751)						_hx_tmp = (this->physicsMode != (int)0);
            					}
            					else {
HXLINE( 751)						_hx_tmp = false;
            					}
HXDLIN( 751)					if (_hx_tmp) {
HXLINE( 753)						s1 = s1->clone();
HXLINE( 754)						s1->assignTo(hx::ObjectPtr<OBJ_>(this));
            					}
HXLINE( 757)					arr->push(s1);
            				}
            			}
            			else {
HXLINE( 761)				if ((this->physicsMode != (int)2)) {
HXLINE( 768)					 ::Dynamic s2 = shapes->iterator();
HXDLIN( 768)					while(( (bool)(s2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 768)						 ::Dynamic s3 = s2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXLINE( 770)						arr->push(s3);
            					}
            				}
            			}
HXLINE( 774)			if ((this->physicsMode != (int)0)) {
HXLINE( 776)				::Dynamic this1 = this->shapeMap;
HXDLIN( 776)				::String key = anim->animName;
HXDLIN( 776)				( ( ::haxe::ds::StringMap)(this1) )->set(key, ::com::stencyl::models::collision::Masklist_obj::__alloc( HX_CTX ,arr,hx::ObjectPtr<OBJ_>(this)));
            			}
            			else {
HXLINE( 781)				this->shapeMap->set(anim->animName,arr);
            			}
            		}
HXLINE( 785)		{
HXLINE( 785)			::Dynamic this2 = this->animationMap;
HXDLIN( 785)			::String key1 = anim->animName;
HXDLIN( 785)			( ( ::haxe::ds::StringMap)(this2) )->set(key1, ::com::stencyl::graphics::BitmapAnimation_obj::__alloc( HX_CTX ,anim));
            		}
HXLINE( 786)		{
HXLINE( 786)			::Dynamic this3 = this->originMap;
HXDLIN( 786)			::String key2 = anim->animName;
HXDLIN( 786)			( ( ::haxe::ds::StringMap)(this3) )->set(key2, ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,anim->originX,anim->originY));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,addAnim,(void))

void Actor_obj::reloadAnimationGraphics(int animID){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_791_reloadAnimationGraphics)
HXDLIN( 791)		if ((animID == (int)-1)) {
HXLINE( 793)			{
HXLINE( 793)				 ::Dynamic a = this->sprite->animations->iterator();
HXDLIN( 793)				while(( (bool)(a->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 793)					 ::com::stencyl::models::actor::Animation a1 = ( ( ::com::stencyl::models::actor::Animation)(a->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 795)					 ::com::stencyl::graphics::BitmapAnimation actorAnim = this->animationMap->get(a1->animName).StaticCast<  ::com::stencyl::graphics::BitmapAnimation >();
HXLINE( 796)					actorAnim->framesUpdated();
            				}
            			}
HXLINE( 798)			this->updateChildrenPositions();
            		}
            		else {
HXLINE( 802)			 ::com::stencyl::models::actor::Animation a2 = this->sprite->animations->get(animID).StaticCast<  ::com::stencyl::models::actor::Animation >();
HXLINE( 803)			 ::com::stencyl::graphics::BitmapAnimation actorAnim1 = this->animationMap->get(a2->animName).StaticCast<  ::com::stencyl::graphics::BitmapAnimation >();
HXLINE( 804)			actorAnim1->framesUpdated();
HXLINE( 805)			if (hx::IsEq( actorAnim1,this->currAnimation )) {
HXLINE( 807)				this->updateChildrenPositions();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,reloadAnimationGraphics,(void))

void Actor_obj::initScripts(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_813_initScripts)
HXLINE( 814)		if ((this->physicsMode == (int)2)) {
HXLINE( 816)			this->handlesCollisions = false;
HXLINE( 817)			return;
            		}
HXLINE( 820)		this->handlesCollisions = true;
HXLINE( 821)		this->behaviors->initScripts();
HXLINE( 823)		int r = (int)0;
HXLINE( 825)		while((r < this->whenCreatedListeners->get_length())){
HXLINE( 827)			try {
            				HX_STACK_CATCHABLE(::String, 0);
HXLINE( 829)				 ::Dynamic f = this->whenCreatedListeners->__get(r);
HXLINE( 830)				f(this->whenCreatedListeners);
HXLINE( 832)				if ((::com::stencyl::utils::Utils_obj::indexOf(this->whenCreatedListeners,f) == (int)-1)) {
HXLINE( 834)					r = (r - (int)1);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass< ::String >() ){
            					HX_STACK_BEGIN_CATCH
            					::String e = _hx_e;
HXLINE( 840)					::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Actor.hx",09,bb,f9,30),840,HX_("com.stencyl.models.Actor",20,4b,3d,37),HX_("initScripts",d8,6a,4e,e5)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 843)			r = (r + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,initScripts,(void))

void Actor_obj::initFromBody( ::box2D::dynamics::B2BodyDef bodyDef){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_855_initFromBody)
HXLINE( 856)		bodyDef->allowSleep = false;
HXLINE( 857)		bodyDef->userData = hx::ObjectPtr<OBJ_>(this);
HXLINE( 858)		this->bodyDef = bodyDef;
HXLINE( 859)		this->body = ::com::stencyl::Engine_obj::engine->world->createBody(bodyDef);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,initFromBody,(void))

void Actor_obj::initBody(int groupID,bool isSensor,bool isStationary,bool isKinematic,bool canRotate, ::Dynamic shape){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_863_initBody)
HXLINE( 864)		 ::box2D::dynamics::B2BodyDef bodyDef =  ::box2D::dynamics::B2BodyDef_obj::__alloc( HX_CTX );
HXLINE( 866)		bodyDef->groupID = groupID;
HXLINE( 867)		Float _hx_tmp = this->get_x();
HXDLIN( 867)		bodyDef->position->x = ::com::stencyl::Engine_obj::toPhysicalUnits(_hx_tmp);
HXLINE( 868)		Float _hx_tmp1 = this->get_y();
HXDLIN( 868)		bodyDef->position->y = ::com::stencyl::Engine_obj::toPhysicalUnits(_hx_tmp1);
HXLINE( 870)		bodyDef->angle = (int)0;
HXLINE( 871)		bodyDef->fixedRotation = !(canRotate);
HXLINE( 872)		bodyDef->allowSleep = false;
HXLINE( 874)		if (isStationary) {
HXLINE( 876)			bodyDef->type = ::box2D::dynamics::B2Body_obj::b2_staticBody;
            		}
            		else {
HXLINE( 879)			if (isKinematic) {
HXLINE( 881)				bodyDef->type = ::box2D::dynamics::B2Body_obj::b2_kinematicBody;
            			}
            			else {
HXLINE( 886)				bodyDef->type = ::box2D::dynamics::B2Body_obj::b2_dynamicBody;
            			}
            		}
HXLINE( 889)		if (::Std_obj::is(shape,hx::ArrayBase::__mClass)) {
HXLINE( 891)			bodyDef->userData = hx::ObjectPtr<OBJ_>(this);
HXLINE( 892)			this->body = ::com::stencyl::Engine_obj::engine->world->createBody(bodyDef);
HXLINE( 894)			::cpp::VirtualArray arr = hx::TCast< ::cpp::VirtualArray >::cast(shape);
HXLINE( 896)			{
HXLINE( 896)				int _g = (int)0;
HXDLIN( 896)				while((_g < arr->get_length())){
HXLINE( 896)					 ::Dynamic item = arr->__get(_g);
HXDLIN( 896)					_g = (_g + (int)1);
HXLINE( 898)					 ::box2D::dynamics::B2FixtureDef fixtureDef =  ::box2D::dynamics::B2FixtureDef_obj::__alloc( HX_CTX );
HXLINE( 899)					fixtureDef->shape = ( ( ::box2D::collision::shapes::B2Shape)(item) );
HXLINE( 900)					fixtureDef->friction = ((Float)1.0);
HXLINE( 901)					fixtureDef->density = ((Float)0.1);
HXLINE( 902)					fixtureDef->restitution = (int)0;
HXLINE( 903)					fixtureDef->isSensor = false;
HXLINE( 904)					fixtureDef->groupID = (int)1;
HXLINE( 905)					fixtureDef->userData = hx::ObjectPtr<OBJ_>(this);
HXLINE( 907)					this->body->createFixture(fixtureDef);
            				}
            			}
            		}
            		else {
HXLINE( 913)			 ::box2D::dynamics::B2FixtureDef fixtureDef1 =  ::box2D::dynamics::B2FixtureDef_obj::__alloc( HX_CTX );
HXLINE( 914)			fixtureDef1->shape = ( ( ::box2D::collision::shapes::B2Shape)(shape) );
HXLINE( 915)			fixtureDef1->friction = ((Float)1.0);
HXLINE( 916)			fixtureDef1->density = ((Float)0.1);
HXLINE( 917)			fixtureDef1->restitution = (int)0;
HXLINE( 918)			fixtureDef1->isSensor = isSensor;
HXLINE( 919)			fixtureDef1->groupID = (int)-1000;
HXLINE( 920)			fixtureDef1->userData = hx::ObjectPtr<OBJ_>(this);
HXLINE( 922)			bodyDef->userData = hx::ObjectPtr<OBJ_>(this);
HXLINE( 923)			this->body = ::com::stencyl::Engine_obj::engine->world->createBody(bodyDef);
HXLINE( 924)			this->body->createFixture(fixtureDef1);
            		}
HXLINE( 927)		this->bodyDef = bodyDef;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Actor_obj,initBody,(void))

void Actor_obj::addAnimation(::String name, ::com::stencyl::graphics::BitmapAnimation sprite){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_936_addAnimation)
HXDLIN( 936)		this->animationMap->set(name,sprite);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,addAnimation,(void))

::String Actor_obj::getAnimation(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_941_getAnimation)
HXDLIN( 941)		return this->currAnimationName;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getAnimation,return )

void Actor_obj::setAnimation(::String name){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_946_setAnimation)
HXDLIN( 946)		this->switchAnimation(name,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setAnimation,(void))

void Actor_obj::switchToDefaultAnimation(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_951_switchToDefaultAnimation)
HXDLIN( 951)		if (hx::IsNotNull( this->defaultAnim )) {
HXLINE( 953)			::String _hx_tmp = this->defaultAnim;
HXDLIN( 953)			this->switchAnimation(_hx_tmp,this->defaultShapeChanged());
HXLINE( 954)			this->setCurrentFrame((int)0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,switchToDefaultAnimation,(void))

bool Actor_obj::isAnimationPlaying(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_960_isAnimationPlaying)
HXDLIN( 960)		return !(this->currAnimation->isFinished());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isAnimationPlaying,return )

int Actor_obj::getCurrentFrame(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_965_getCurrentFrame)
HXDLIN( 965)		return this->currAnimation->getCurrentFrame();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getCurrentFrame,return )

void Actor_obj::setCurrentFrame(int frame){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_970_setCurrentFrame)
HXDLIN( 970)		this->currAnimation->setFrame(frame);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setCurrentFrame,(void))

int Actor_obj::getNumFrames(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_975_getNumFrames)
HXDLIN( 975)		return this->currAnimation->getNumFrames();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getNumFrames,return )

bool Actor_obj::defaultShapeChanged(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_979_defaultShapeChanged)
HXLINE( 980)		if ((this->physicsMode != (int)0)) {
HXLINE( 982)			return true;
            		}
HXLINE( 985)		 ::Dynamic arrDefault = this->shapeMap->get(this->defaultAnim);
HXLINE( 987)		bool _hx_tmp;
HXDLIN( 987)		bool _hx_tmp1;
HXDLIN( 987)		if (hx::IsNotNull( this->getBody() )) {
HXLINE( 987)			_hx_tmp1 = hx::IsNull( this->getBody()->getFixtureList() );
            		}
            		else {
HXLINE( 987)			_hx_tmp1 = true;
            		}
HXDLIN( 987)		if (!(_hx_tmp1)) {
HXLINE( 987)			_hx_tmp = hx::IsNull( this->getBody()->getFixtureList()->getShape() );
            		}
            		else {
HXLINE( 987)			_hx_tmp = true;
            		}
HXDLIN( 987)		if (_hx_tmp) {
HXLINE( 989)			bool _hx_tmp2;
HXDLIN( 989)			if (hx::IsNotNull( arrDefault )) {
HXLINE( 989)				_hx_tmp2 = hx::IsGreater(  ::Dynamic(arrDefault->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)),(int)0 );
            			}
            			else {
HXLINE( 989)				_hx_tmp2 = false;
            			}
HXDLIN( 989)			if (_hx_tmp2) {
HXLINE( 991)				return true;
            			}
            		}
            		else {
HXLINE( 996)			bool _hx_tmp3;
HXDLIN( 996)			if (hx::IsNotNull( arrDefault )) {
HXLINE( 996)				_hx_tmp3 = hx::IsEq(  ::Dynamic(arrDefault->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)),(int)0 );
            			}
            			else {
HXLINE( 996)				_hx_tmp3 = true;
            			}
HXDLIN( 996)			if (_hx_tmp3) {
HXLINE( 998)				return true;
            			}
            			else {
HXLINE(1002)				if (hx::IsGreater(  ::Dynamic(arrDefault->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)),(int)1 )) {
HXLINE(1004)					return true;
            				}
            				else {
HXLINE(1008)					 ::box2D::dynamics::B2FixtureDef defaultDef = Dynamic( arrDefault->__GetItem((int)0)).StaticCast<  ::box2D::dynamics::B2FixtureDef >();
HXLINE(1010)					if (hx::IsNull( defaultDef )) {
HXLINE(1012)						return true;
            					}
            					else {
HXLINE(1016)						 ::box2D::dynamics::B2Fixture currFixture = this->getBody()->getFixtureList();
HXLINE(1017)						 ::box2D::collision::shapes::B2Shape currShape = this->getBody()->getFixtureList()->getShape();
HXLINE(1018)						 ::box2D::collision::shapes::B2Shape defaultShape = defaultDef->shape;
HXLINE(1020)						if ((currFixture->groupID != defaultDef->groupID)) {
HXLINE(1022)							return true;
            						}
HXLINE(1025)						bool _hx_tmp4 = this->getBody()->getFixtureList()->isSensor();
HXDLIN(1025)						if ((_hx_tmp4 != defaultDef->isSensor)) {
HXLINE(1027)							return true;
            						}
            						else {
HXLINE(1029)							hx::Class _hx_tmp5 = ::Type_obj::getClass(currShape);
HXDLIN(1029)							if (hx::IsEq( _hx_tmp5,::Type_obj::getClass(defaultShape) )) {
HXLINE(1031)								if (hx::IsEq( ::Type_obj::getClass(currShape),hx::ClassOf< ::box2D::collision::shapes::B2PolygonShape >() )) {
HXLINE(1033)									 ::box2D::collision::shapes::B2PolygonShape polyOld = ( ( ::box2D::collision::shapes::B2PolygonShape)(currShape) );
HXLINE(1034)									 ::box2D::collision::shapes::B2PolygonShape polyNew = ( ( ::box2D::collision::shapes::B2PolygonShape)(defaultShape) );
HXLINE(1036)									if ((polyOld->m_vertexCount != polyNew->m_vertexCount)) {
HXLINE(1038)										return true;
            									}
            									else {
HXLINE(1043)										int _g1 = (int)0;
HXDLIN(1043)										int _g = polyOld->m_vertexCount;
HXDLIN(1043)										while((_g1 < _g)){
HXLINE(1043)											_g1 = (_g1 + (int)1);
HXDLIN(1043)											int i = (_g1 - (int)1);
HXLINE(1045)											if ((polyOld->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->x != polyNew->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->x)) {
HXLINE(1047)												return true;
            											}
            											else {
HXLINE(1051)												if ((polyOld->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->y != polyNew->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->y)) {
HXLINE(1053)													return true;
            												}
            											}
            										}
            									}
            								}
            								else {
HXLINE(1060)									if (hx::IsEq( ::Type_obj::getClass(currShape),hx::ClassOf< ::box2D::collision::shapes::B2CircleShape >() )) {
HXLINE(1062)										 ::box2D::collision::shapes::B2CircleShape circleOld = ( ( ::box2D::collision::shapes::B2CircleShape)(currShape) );
HXLINE(1063)										 ::box2D::collision::shapes::B2CircleShape circleNew = ( ( ::box2D::collision::shapes::B2CircleShape)(defaultShape) );
HXLINE(1065)										bool _hx_tmp6;
HXDLIN(1065)										bool _hx_tmp7;
HXDLIN(1065)										if ((circleOld->m_radius == circleNew->m_radius)) {
HXLINE(1065)											_hx_tmp7 = (circleOld->m_p->x != circleNew->m_p->x);
            										}
            										else {
HXLINE(1065)											_hx_tmp7 = true;
            										}
HXDLIN(1065)										if (!(_hx_tmp7)) {
HXLINE(1065)											_hx_tmp6 = (circleOld->m_p->y != circleNew->m_p->y);
            										}
            										else {
HXLINE(1065)											_hx_tmp6 = true;
            										}
HXDLIN(1065)										if (_hx_tmp6) {
HXLINE(1069)											return true;
            										}
            									}
            								}
            							}
            							else {
HXLINE(1076)								return true;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1083)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,defaultShapeChanged,return )

void Actor_obj::switchAnimation(::String name,hx::Null< bool >  __o_defaultShapeChanged){
bool defaultShapeChanged = __o_defaultShapeChanged.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_1088_switchAnimation)
HXDLIN(1088)		bool _hx_tmp;
HXDLIN(1088)		if ((name == this->currAnimationName)) {
HXDLIN(1088)			_hx_tmp = defaultShapeChanged;
            		}
            		else {
HXDLIN(1088)			_hx_tmp = true;
            		}
HXDLIN(1088)		if (_hx_tmp) {
HXLINE(1090)			 ::com::stencyl::graphics::BitmapAnimation newAnimation = this->animationMap->get(name).StaticCast<  ::com::stencyl::graphics::BitmapAnimation >();
HXLINE(1092)			if (hx::IsNull( newAnimation )) {
HXLINE(1094)				return;
            			}
HXLINE(1097)			if (hx::IsNotNull( this->currAnimation )) {
HXLINE(1100)				this->removeChild(this->currAnimation);
            			}
HXLINE(1108)			bool isDifferentShape = defaultShapeChanged;
HXLINE(1113)			bool _hx_tmp1;
HXDLIN(1113)			bool _hx_tmp2;
HXDLIN(1113)			if (hx::IsNotNull( this->body )) {
HXLINE(1113)				_hx_tmp2 = (this->physicsMode == (int)0);
            			}
            			else {
HXLINE(1113)				_hx_tmp2 = false;
            			}
HXDLIN(1113)			if (_hx_tmp2) {
HXLINE(1113)				_hx_tmp1 = !(isDifferentShape);
            			}
            			else {
HXLINE(1113)				_hx_tmp1 = false;
            			}
HXDLIN(1113)			if (_hx_tmp1) {
HXLINE(1115)				 ::Dynamic arrOld = this->shapeMap->get(this->currAnimationName);
HXLINE(1116)				 ::Dynamic arrNew = this->shapeMap->get(name);
HXLINE(1118)				bool _hx_tmp3;
HXDLIN(1118)				if (hx::IsNotNull( arrOld )) {
HXLINE(1118)					_hx_tmp3 = hx::IsNull( arrNew );
            				}
            				else {
HXLINE(1118)					_hx_tmp3 = true;
            				}
HXDLIN(1118)				if (_hx_tmp3) {
HXLINE(1120)					isDifferentShape = true;
            				}
            				else {
HXLINE(1125)					bool _hx_tmp4;
HXDLIN(1125)					if (hx::IsEq(  ::Dynamic(arrOld->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)), ::Dynamic(arrNew->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) )) {
HXLINE(1125)						_hx_tmp4 = hx::IsGreater(  ::Dynamic(arrOld->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)),(int)1 );
            					}
            					else {
HXLINE(1125)						_hx_tmp4 = true;
            					}
HXDLIN(1125)					if (_hx_tmp4) {
HXLINE(1127)						isDifferentShape = true;
            					}
            					else {
HXLINE(1132)						 ::box2D::dynamics::B2FixtureDef oldDef = Dynamic( arrOld->__GetItem((int)0)).StaticCast<  ::box2D::dynamics::B2FixtureDef >();
HXLINE(1133)						 ::box2D::dynamics::B2FixtureDef newDef = Dynamic( arrNew->__GetItem((int)0)).StaticCast<  ::box2D::dynamics::B2FixtureDef >();
HXLINE(1135)						bool _hx_tmp5;
HXDLIN(1135)						if (hx::IsNotNull( oldDef )) {
HXLINE(1135)							_hx_tmp5 = hx::IsNull( newDef );
            						}
            						else {
HXLINE(1135)							_hx_tmp5 = true;
            						}
HXDLIN(1135)						if (_hx_tmp5) {
HXLINE(1137)							isDifferentShape = true;
            						}
            						else {
HXLINE(1142)							 ::box2D::collision::shapes::B2Shape oldShape = oldDef->shape;
HXLINE(1143)							 ::box2D::collision::shapes::B2Shape newShape = newDef->shape;
HXLINE(1145)							if ((oldDef->isSensor != newDef->isSensor)) {
HXLINE(1147)								isDifferentShape = true;
            							}
            							else {
HXLINE(1150)								if ((oldDef->groupID != newDef->groupID)) {
HXLINE(1152)									isDifferentShape = true;
            								}
            								else {
HXLINE(1155)									hx::Class _hx_tmp6 = ::Type_obj::getClass(oldShape);
HXDLIN(1155)									if (hx::IsEq( _hx_tmp6,::Type_obj::getClass(newShape) )) {
HXLINE(1157)										if (hx::IsEq( ::Type_obj::getClass(oldShape),hx::ClassOf< ::box2D::collision::shapes::B2PolygonShape >() )) {
HXLINE(1159)											 ::box2D::collision::shapes::B2PolygonShape polyOld = ( ( ::box2D::collision::shapes::B2PolygonShape)(oldShape) );
HXLINE(1160)											 ::box2D::collision::shapes::B2PolygonShape polyNew = ( ( ::box2D::collision::shapes::B2PolygonShape)(newShape) );
HXLINE(1162)											if ((polyOld->m_vertexCount != polyNew->m_vertexCount)) {
HXLINE(1164)												isDifferentShape = true;
            											}
            											else {
HXLINE(1169)												int _g1 = (int)0;
HXDLIN(1169)												int _g = polyOld->m_vertexCount;
HXDLIN(1169)												while((_g1 < _g)){
HXLINE(1169)													_g1 = (_g1 + (int)1);
HXDLIN(1169)													int i = (_g1 - (int)1);
HXLINE(1171)													if ((polyOld->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->x != polyNew->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->x)) {
HXLINE(1173)														isDifferentShape = true;
HXLINE(1174)														goto _hx_goto_38;
            													}
            													else {
HXLINE(1177)														if ((polyOld->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->y != polyNew->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->y)) {
HXLINE(1179)															isDifferentShape = true;
HXLINE(1180)															goto _hx_goto_38;
            														}
            													}
            												}
            												_hx_goto_38:;
            											}
            										}
            										else {
HXLINE(1186)											if (hx::IsEq( ::Type_obj::getClass(oldShape),hx::ClassOf< ::box2D::collision::shapes::B2CircleShape >() )) {
HXLINE(1188)												 ::box2D::collision::shapes::B2CircleShape circleOld = ( ( ::box2D::collision::shapes::B2CircleShape)(oldShape) );
HXLINE(1189)												 ::box2D::collision::shapes::B2CircleShape circleNew = ( ( ::box2D::collision::shapes::B2CircleShape)(newShape) );
HXLINE(1191)												bool _hx_tmp7;
HXDLIN(1191)												bool _hx_tmp8;
HXDLIN(1191)												if ((circleOld->m_radius == circleNew->m_radius)) {
HXLINE(1191)													_hx_tmp8 = (circleOld->m_p->x != circleNew->m_p->x);
            												}
            												else {
HXLINE(1191)													_hx_tmp8 = true;
            												}
HXDLIN(1191)												if (!(_hx_tmp8)) {
HXLINE(1191)													_hx_tmp7 = (circleOld->m_p->y != circleNew->m_p->y);
            												}
            												else {
HXLINE(1191)													_hx_tmp7 = true;
            												}
HXDLIN(1191)												if (_hx_tmp7) {
HXLINE(1195)													isDifferentShape = true;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1202)										isDifferentShape = true;
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1211)			this->currAnimationName = name;
HXLINE(1212)			this->currAnimation = newAnimation;
HXLINE(1214)			this->currAnimation->set_filter(this->bitmapFilters);
HXLINE(1216)			this->currAnimation->set_visible(this->drawActor);
HXLINE(1219)			this->addChild(newAnimation);
HXLINE(1226)			 ::box2D::common::math::B2Vec2 animOrigin = this->originMap->get(name).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXLINE(1228)			Float centerx = this->currAnimation->get_width();
HXDLIN(1228)			Float centerx1 = (((Float)((Float)centerx / (Float)::com::stencyl::Engine_obj::SCALE) / (Float)(int)2) - animOrigin->x);
HXLINE(1229)			Float centery = this->currAnimation->get_height();
HXDLIN(1229)			Float centery1 = (((Float)((Float)centery / (Float)::com::stencyl::Engine_obj::SCALE) / (Float)(int)2) - animOrigin->y);
HXLINE(1231)			bool _hx_tmp9;
HXDLIN(1231)			bool _hx_tmp10;
HXDLIN(1231)			if (hx::IsNotNull( this->body )) {
HXLINE(1231)				_hx_tmp10 = isDifferentShape;
            			}
            			else {
HXLINE(1231)				_hx_tmp10 = false;
            			}
HXDLIN(1231)			if (_hx_tmp10) {
HXLINE(1231)				_hx_tmp9 = (this->physicsMode == (int)0);
            			}
            			else {
HXLINE(1231)				_hx_tmp9 = false;
            			}
HXDLIN(1231)			if (_hx_tmp9) {
HXLINE(1234)				::Array< ::Dynamic> regions = ::Array_obj< ::Dynamic>::__new();
HXLINE(1238)				 ::box2D::dynamics::contacts::B2ContactEdge contact = this->body->getContactList();
HXLINE(1240)				while(hx::IsNotNull( contact )){
HXLINE(1242)					bool _hx_tmp11;
HXDLIN(1242)					if (::Std_obj::is(contact->other->getUserData(),hx::ClassOf< ::com::stencyl::models::Region >())) {
HXLINE(1242)						_hx_tmp11 = contact->contact->isTouching();
            					}
            					else {
HXLINE(1242)						_hx_tmp11 = false;
            					}
HXDLIN(1242)					if (_hx_tmp11) {
HXLINE(1244)						regions->push(( ( ::com::stencyl::models::Region)(contact->other->getUserData()) ));
            					}
HXLINE(1247)					::com::stencyl::Engine_obj::engine->world->m_contactManager->m_contactListener->endContact(contact->contact);
HXLINE(1248)					contact = contact->next;
            				}
HXLINE(1253)				{
HXLINE(1253)					::Dynamic k = this->collisions->keys();
HXDLIN(1253)					while(::de::polygonal::ds::Itr_obj::hasNext(k)){
HXLINE(1253)						int k1 = ( (int)(::de::polygonal::ds::Itr_obj::next(k)) );
HXLINE(1255)						 ::de::polygonal::ds::IntHashTable _this = this->collisions;
HXDLIN(1255)						 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(1255)						int i1 = _this1->mHash->__get(((int)(k1 * (int)73856093) & (int)_this1->mMask));
HXDLIN(1255)						int i2;
HXDLIN(1255)						if ((i1 == (int)-1)) {
HXLINE(1255)							i2 = (int)-2147483647;
            						}
            						else {
HXLINE(1255)							::Array< int > d = _this1->mData;
HXDLIN(1255)							if ((d->__get(i1) == k1)) {
HXLINE(1255)								i2 = d->__get((i1 + (int)1));
            							}
            							else {
HXLINE(1255)								int v = (int)-2147483647;
HXDLIN(1255)								i1 = d->__get((i1 + (int)2));
HXDLIN(1255)								while((i1 != (int)-1)){
HXLINE(1255)									if ((d->__get(i1) == k1)) {
HXLINE(1255)										v = d->__get((i1 + (int)1));
HXDLIN(1255)										goto _hx_goto_41;
            									}
HXDLIN(1255)									i1 = d->__get((i1 + (int)2));
            								}
            								_hx_goto_41:;
HXDLIN(1255)								i2 = v;
            							}
            						}
HXDLIN(1255)						 ::com::stencyl::models::actor::Collision d1;
HXDLIN(1255)						if ((i2 == (int)-2147483647)) {
HXLINE(1255)							d1 = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            						}
            						else {
HXLINE(1255)							d1 = Dynamic( _this->mVals->__get(i2)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            						}
HXLINE(1256)						while((d1->points->length > (int)0)){
HXLINE(1257)							::com::stencyl::models::actor::CollisionPoint_obj::free(d1->points->pop().StaticCast<  ::com::stencyl::models::actor::CollisionPoint >());
            						}
HXLINE(1258)						this->collisions->unset(k1);
            					}
            				}
HXLINE(1261)				this->collisions =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)16,null());
HXLINE(1262)				this->simpleCollisions =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)16,null());
HXLINE(1263)				this->contacts =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)16,null());
HXLINE(1264)				this->regionContacts =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)16,null());
HXLINE(1266)				this->collisions->reuseIterator = true;
HXLINE(1267)				this->simpleCollisions->reuseIterator = true;
HXLINE(1268)				this->contacts->reuseIterator = true;
HXLINE(1269)				this->regionContacts->reuseIterator = true;
HXLINE(1271)				this->contactCount = (int)0;
HXLINE(1272)				this->collisionsCount = (int)0;
HXLINE(1276)				while((this->body->m_fixtureCount > (int)0)){
HXLINE(1278)					 ::box2D::dynamics::B2Body _hx_tmp12 = this->body;
HXDLIN(1278)					_hx_tmp12->DestroyFixture(this->body->getFixtureList());
            				}
HXLINE(1281)				{
HXLINE(1281)					int _g2 = (int)0;
HXDLIN(1281)					::cpp::VirtualArray _g11 = hx::TCast< ::cpp::VirtualArray >::cast(this->shapeMap->get(name));
HXDLIN(1281)					while((_g2 < _g11->get_length())){
HXLINE(1281)						 ::Dynamic f = _g11->__get(_g2);
HXDLIN(1281)						_g2 = (_g2 + (int)1);
HXLINE(1283)						 ::box2D::dynamics::B2FixtureDef originFixDef =  ::box2D::dynamics::B2FixtureDef_obj::__alloc( HX_CTX );
HXLINE(1285)						if ((this->bodyDef->friction < ((Float)1.79769313486231e+308))) {
HXLINE(1287)							originFixDef->friction = this->bodyDef->friction;
HXLINE(1288)							originFixDef->restitution = this->bodyDef->bounciness;
HXLINE(1290)							if ((this->bodyDef->mass > (int)0)) {
HXLINE(1292)								originFixDef->density = ((Float)0.1);
            							}
            						}
HXLINE(1296)						originFixDef->density = ( (Float)(f->__Field(HX_("density",e8,3f,d5,42),hx::paccDynamic)) );
HXLINE(1297)						originFixDef->isSensor = ( (bool)(f->__Field(HX_("isSensor",c4,cd,f9,c3),hx::paccDynamic)) );
HXLINE(1298)						originFixDef->groupID = ( (int)(f->__Field(HX_("groupID",da,80,f7,86),hx::paccDynamic)) );
HXLINE(1299)						originFixDef->shape = ( ( ::box2D::collision::shapes::B2Shape)(f->__Field(HX_("shape",21,e3,1c,7c),hx::paccDynamic)) );
HXLINE(1302)						if (hx::IsNotNull( animOrigin )) {
HXLINE(1304)							this->body->origin->x = ::com::stencyl::Engine_obj::toPhysicalUnits(-(animOrigin->x));
HXLINE(1305)							this->body->origin->y = ::com::stencyl::Engine_obj::toPhysicalUnits(-(animOrigin->y));
HXLINE(1307)							if (::Std_obj::is( ::Dynamic(f->__Field(HX_("shape",21,e3,1c,7c),hx::paccDynamic)),hx::ClassOf< ::box2D::collision::shapes::B2PolygonShape >())) {
HXLINE(1309)								 ::box2D::common::math::B2Transform xf =  ::box2D::common::math::B2Transform_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1310)								 ::box2D::collision::shapes::B2PolygonShape oldBox = ( ( ::box2D::collision::shapes::B2PolygonShape)(f->__Field(HX_("shape",21,e3,1c,7c),hx::paccDynamic)) );
HXLINE(1311)								 ::box2D::collision::shapes::B2PolygonShape newBox =  ::box2D::collision::shapes::B2PolygonShape_obj::__alloc( HX_CTX );
HXLINE(1313)								newBox->setAsArray(oldBox->m_vertices,oldBox->m_vertices->length);
HXLINE(1315)								::Array< ::Dynamic> vertices = newBox->m_vertices;
HXLINE(1316)								::Array< ::Dynamic> normals = newBox->m_normals;
HXLINE(1318)								{
HXLINE(1318)									 ::box2D::common::math::B2Vec2 _this2 = xf->position;
HXDLIN(1318)									Float x_ = ::com::stencyl::Engine_obj::toPhysicalUnits(centerx1);
HXDLIN(1318)									Float y_ = ::com::stencyl::Engine_obj::toPhysicalUnits(centery1);
HXDLIN(1318)									_this2->x = x_;
HXDLIN(1318)									_this2->y = y_;
            								}
HXLINE(1319)								xf->R->setAngle((int)0);
HXLINE(1321)								{
HXLINE(1321)									int _g3 = (int)0;
HXDLIN(1321)									int _g21 = newBox->m_vertexCount;
HXDLIN(1321)									while((_g3 < _g21)){
HXLINE(1321)										_g3 = (_g3 + (int)1);
HXDLIN(1321)										int i3 = (_g3 - (int)1);
HXLINE(1323)										vertices[i3] = xf->multiply(vertices->__get(i3).StaticCast<  ::box2D::common::math::B2Vec2 >());
HXLINE(1324)										 ::box2D::common::math::B2Mat22 xf1 = xf->R;
HXDLIN(1324)										normals[i3] = xf1->multiplyV(normals->__get(i3).StaticCast<  ::box2D::common::math::B2Vec2 >());
            									}
            								}
HXLINE(1327)								newBox->setAsArray(vertices,vertices->length);
HXLINE(1328)								newBox->m_normals = normals;
HXLINE(1330)								originFixDef->shape = newBox;
            							}
            							else {
HXLINE(1333)								if (::Std_obj::is( ::Dynamic(f->__Field(HX_("shape",21,e3,1c,7c),hx::paccDynamic)),hx::ClassOf< ::box2D::collision::shapes::B2CircleShape >())) {
HXLINE(1335)									 ::box2D::collision::shapes::B2CircleShape oldCircle = ( ( ::box2D::collision::shapes::B2CircleShape)(f->__Field(HX_("shape",21,e3,1c,7c),hx::paccDynamic)) );
HXLINE(1336)									 ::box2D::collision::shapes::B2CircleShape newCircle =  ::box2D::collision::shapes::B2CircleShape_obj::__alloc( HX_CTX ,null());
HXLINE(1338)									newCircle->setRadius(oldCircle->getRadius());
HXLINE(1339)									Float oldCircle1 = oldCircle->m_p->x;
HXDLIN(1339)									Float _hx_tmp13 = ::com::stencyl::Engine_obj::toPhysicalUnits(centerx1);
HXDLIN(1339)									newCircle->m_p->x = (oldCircle1 + _hx_tmp13);
HXLINE(1340)									Float oldCircle2 = oldCircle->m_p->y;
HXDLIN(1340)									Float _hx_tmp14 = ::com::stencyl::Engine_obj::toPhysicalUnits(centery1);
HXDLIN(1340)									newCircle->m_p->y = (oldCircle2 + _hx_tmp14);
HXLINE(1342)									originFixDef->shape = newCircle;
            								}
            							}
            						}
HXLINE(1346)						 ::box2D::dynamics::B2Fixture fix = this->body->createFixture(originFixDef);
HXLINE(1347)						fix->SetUserData(hx::ObjectPtr<OBJ_>(this));
            					}
            				}
HXLINE(1350)				if (hx::IsNotNull( this->body->getFixtureList() )) {
HXLINE(1352)					this->bodyScale->x = (int)1;
HXLINE(1353)					this->bodyScale->y = (int)1;
HXLINE(1355)					{
HXLINE(1355)						int _g4 = (int)0;
HXDLIN(1355)						while((_g4 < regions->length)){
HXLINE(1355)							 ::com::stencyl::models::Region r = regions->__get(_g4).StaticCast<  ::com::stencyl::models::Region >();
HXDLIN(1355)							_g4 = (_g4 + (int)1);
HXLINE(1357)							 ::box2D::collision::B2AABB mine = this->body->getFixtureList()->m_aabb;
HXLINE(1358)							 ::box2D::collision::B2AABB other = r->getBody()->getFixtureList()->m_aabb;
HXLINE(1360)							if (other->testOverlap(mine)) {
HXLINE(1362)								r->addActor(hx::ObjectPtr<OBJ_>(this));
            							}
            						}
            					}
            				}
HXLINE(1367)				if (hx::IsNotNull( this->md )) {
HXLINE(1369)					this->body->setMassData(this->md);
            				}
            			}
            			else {
HXLINE(1373)				bool _hx_tmp15;
HXDLIN(1373)				if (hx::IsNotNull( this->shapeMap->get(name) )) {
HXLINE(1373)					_hx_tmp15 = (this->physicsMode == (int)1);
            				}
            				else {
HXLINE(1373)					_hx_tmp15 = false;
            				}
HXDLIN(1373)				if (_hx_tmp15) {
HXLINE(1376)					this->set_shape(( ( ::com::stencyl::models::collision::Mask)(this->shapeMap->get(name)) ));
HXLINE(1377)					this->HITBOX = this->_mask;
HXLINE(1380)					isDifferentShape = true;
            				}
            			}
HXLINE(1383)			Float _hx_tmp16 = this->currAnimation->get_width();
HXDLIN(1383)			this->cacheWidth = ((Float)_hx_tmp16 / (Float)::com::stencyl::Engine_obj::SCALE);
HXLINE(1384)			Float _hx_tmp17 = this->currAnimation->get_height();
HXDLIN(1384)			this->cacheHeight = ((Float)_hx_tmp17 / (Float)::com::stencyl::Engine_obj::SCALE);
HXLINE(1386)			if (hx::IsNotNull( this->body )) {
HXLINE(1388)				this->body->size->x = ::com::stencyl::Engine_obj::toPhysicalUnits(this->cacheWidth);
HXLINE(1389)				this->body->size->y = ::com::stencyl::Engine_obj::toPhysicalUnits(this->cacheHeight);
            			}
HXLINE(1392)			if ((this->physicsMode == (int)0)) {
HXLINE(1394)				this->realX = this->getX(false);
HXLINE(1395)				this->realY = this->getY(false);
HXLINE(1397)				this->updateBodyScale();
            			}
HXLINE(1400)			if (hx::IsNotNull( animOrigin )) {
HXLINE(1402)				int _hx_tmp18 = ::Std_obj::_hx_int(animOrigin->x);
HXDLIN(1402)				this->setOriginPoint(_hx_tmp18,::Std_obj::_hx_int(animOrigin->y));
            			}
HXLINE(1405)			this->updateChildrenPositions();
HXLINE(1407)			this->updateMatrix = true;
HXLINE(1411)			{
HXLINE(1411)				 ::com::stencyl::graphics::BitmapAnimation _this3 = this->currAnimation;
HXDLIN(1411)				_this3->timer = (int)0;
HXDLIN(1411)				_this3->frameIndex = (int)0;
HXDLIN(1411)				_this3->finished = false;
HXDLIN(1411)				{
HXLINE(1411)					if (hx::IsNotNull( _this3->filter )) {
HXLINE(1411)						if (!(_this3->filteredFrames->__get(_this3->frameIndex))) {
HXLINE(1411)							::Array< ::Dynamic> _this4 = _this3->frames;
HXDLIN(1411)							int _this5 = _this3->frameIndex;
HXDLIN(1411)							 ::openfl::display::BitmapData _this6 = _this3->frames->__get(_this3->frameIndex).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN(1411)							_this4[_this5] = _this3->applyFilters(_this6,_this3->model->frames->__get(_this3->frameIndex).StaticCast<  ::openfl::display::BitmapData >(),_this3->filter);
HXDLIN(1411)							_this3->filteredFrames[_this3->frameIndex] = true;
            						}
HXDLIN(1411)						_this3->set_bitmapData(_this3->frames->__get(_this3->frameIndex).StaticCast<  ::openfl::display::BitmapData >());
            					}
            					else {
HXLINE(1411)						_this3->set_bitmapData(_this3->model->frames->__get(_this3->frameIndex).StaticCast<  ::openfl::display::BitmapData >());
            					}
HXDLIN(1411)					_this3->smoothing = ::com::stencyl::Config_obj::antialias;
            				}
            			}
HXLINE(1412)			 ::com::stencyl::graphics::BitmapAnimation _this7 = this->currAnimation;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,switchAnimation,(void))

void Actor_obj::updateChildrenPositions(){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_1417_updateChildrenPositions)
HXLINE(1418)		Float newAnchor = -(this->currAnimation->get_x());
HXDLIN(1418)		 ::openfl::geom::Point newAnchor1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,newAnchor,-(this->currAnimation->get_y()));
HXLINE(1419)		if (!(newAnchor1->equals(this->cacheAnchor))) {
HXLINE(1421)			this->cacheAnchor->copyFrom(newAnchor1);
HXLINE(1422)			{
HXLINE(1422)				int _g = (int)0;
HXDLIN(1422)				::Array< ::Dynamic> _g1 = this->attachedImages;
HXDLIN(1422)				while((_g < _g1->length)){
HXLINE(1422)					 ::com::stencyl::graphics::BitmapWrapper img = _g1->__get(_g).StaticCast<  ::com::stencyl::graphics::BitmapWrapper >();
HXDLIN(1422)					_g = (_g + (int)1);
HXLINE(1424)					img->updatePosition();
            				}
            			}
HXLINE(1426)			if (hx::IsNotNull( this->label )) {
HXLINE(1428)				this->label->updatePosition();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,updateChildrenPositions,(void))

void Actor_obj::removeAttachedImages(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1434_removeAttachedImages)
HXLINE(1436)		{
HXLINE(1436)			int _g = (int)0;
HXDLIN(1436)			::Array< ::Dynamic> _g1 = this->attachedImages;
HXDLIN(1436)			while((_g < _g1->length)){
HXLINE(1436)				 ::com::stencyl::graphics::BitmapWrapper b = _g1->__get(_g).StaticCast<  ::com::stencyl::graphics::BitmapWrapper >();
HXDLIN(1436)				_g = (_g + (int)1);
HXLINE(1438)				b->cacheParentAnchor = ::com::stencyl::utils::Utils_obj::zero;
HXLINE(1439)				this->removeChild(b);
            			}
            		}
HXLINE(1441)		this->attachedImages = ::Array_obj< ::Dynamic>::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,removeAttachedImages,(void))

void Actor_obj::update(Float elapsedTime){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1451_update)
HXDLIN(1451)		this->innerUpdate(elapsedTime,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,update,(void))

void Actor_obj::innerUpdate(Float elapsedTime,bool hudCheck){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_1455_innerUpdate)
HXLINE(1457)		bool _hx_tmp;
HXDLIN(1457)		bool _hx_tmp1;
HXDLIN(1457)		bool _hx_tmp2;
HXDLIN(1457)		bool _hx_tmp3;
HXDLIN(1457)		bool _hx_tmp4;
HXDLIN(1457)		if (!(this->paused)) {
HXLINE(1457)			_hx_tmp4 = this->isCamera;
            		}
            		else {
HXLINE(1457)			_hx_tmp4 = true;
            		}
HXDLIN(1457)		if (!(_hx_tmp4)) {
HXLINE(1457)			_hx_tmp3 = this->dying;
            		}
            		else {
HXLINE(1457)			_hx_tmp3 = true;
            		}
HXDLIN(1457)		if (!(_hx_tmp3)) {
HXLINE(1457)			_hx_tmp2 = this->dead;
            		}
            		else {
HXLINE(1457)			_hx_tmp2 = true;
            		}
HXDLIN(1457)		if (!(_hx_tmp2)) {
HXLINE(1457)			_hx_tmp1 = this->destroyed;
            		}
            		else {
HXLINE(1457)			_hx_tmp1 = true;
            		}
HXDLIN(1457)		if (!(_hx_tmp1)) {
HXLINE(1457)			if (hudCheck) {
HXLINE(1457)				if (!(this->isHUD)) {
HXLINE(1457)					_hx_tmp = this->alwaysSimulate;
            				}
            				else {
HXLINE(1457)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1457)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1457)			_hx_tmp = true;
            		}
HXDLIN(1457)		if (_hx_tmp) {
HXLINE(1459)			return;
            		}
HXLINE(1462)		if ((this->mouseOverListeners->get_length() > (int)0)) {
HXLINE(1465)			bool mouseOver = this->isMouseOver();
HXLINE(1467)			if (mouseOver) {
HXLINE(1469)				if ((this->mouseState <= (int)0)) {
HXLINE(1472)					this->mouseState = (int)1;
HXLINE(1473)					{
HXLINE(1473)						::cpp::VirtualArray listeners = this->mouseOverListeners;
HXDLIN(1473)						 ::Dynamic value = this->mouseState;
HXDLIN(1473)						int r = (int)0;
HXDLIN(1473)						while((r < listeners->get_length())){
HXLINE(1473)							try {
            								HX_STACK_CATCHABLE(::String, 0);
HXLINE(1473)								 ::Dynamic f = listeners->__get(r);
HXDLIN(1473)								f(value,listeners);
HXDLIN(1473)								if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(1473)									r = (r - (int)1);
            								}
            							}
            							catch( ::Dynamic _hx_e){
            								if (_hx_e.IsClass< ::String >() ){
            									HX_STACK_BEGIN_CATCH
            									::String e = _hx_e;
HXLINE(1473)									::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
HXDLIN(1473)							r = (r + (int)1);
            						}
            					}
            				}
            				else {
HXLINE(1478)					this->mouseState = (int)2;
            				}
HXLINE(1481)				if (::com::stencyl::Input_obj::mousePressed) {
HXLINE(1484)					this->mouseState = (int)3;
HXLINE(1485)					{
HXLINE(1485)						::cpp::VirtualArray listeners1 = this->mouseOverListeners;
HXDLIN(1485)						 ::Dynamic value1 = this->mouseState;
HXDLIN(1485)						int r1 = (int)0;
HXDLIN(1485)						while((r1 < listeners1->get_length())){
HXLINE(1485)							try {
            								HX_STACK_CATCHABLE(::String, 0);
HXLINE(1485)								 ::Dynamic f1 = listeners1->__get(r1);
HXDLIN(1485)								f1(value1,listeners1);
HXDLIN(1485)								if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f1) == (int)-1)) {
HXLINE(1485)									r1 = (r1 - (int)1);
            								}
            							}
            							catch( ::Dynamic _hx_e){
            								if (_hx_e.IsClass< ::String >() ){
            									HX_STACK_BEGIN_CATCH
            									::String e1 = _hx_e;
HXLINE(1485)									::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
HXDLIN(1485)							r1 = (r1 + (int)1);
            						}
            					}
            				}
            				else {
HXLINE(1488)					if (::com::stencyl::Input_obj::mouseDown) {
HXLINE(1491)						this->mouseState = (int)4;
HXLINE(1492)						{
HXLINE(1492)							::cpp::VirtualArray listeners2 = this->mouseOverListeners;
HXDLIN(1492)							 ::Dynamic value2 = this->mouseState;
HXDLIN(1492)							int r2 = (int)0;
HXDLIN(1492)							while((r2 < listeners2->get_length())){
HXLINE(1492)								try {
            									HX_STACK_CATCHABLE(::String, 0);
HXLINE(1492)									 ::Dynamic f2 = listeners2->__get(r2);
HXDLIN(1492)									f2(value2,listeners2);
HXDLIN(1492)									if ((::com::stencyl::utils::Utils_obj::indexOf(listeners2,f2) == (int)-1)) {
HXLINE(1492)										r2 = (r2 - (int)1);
            									}
            								}
            								catch( ::Dynamic _hx_e){
            									if (_hx_e.IsClass< ::String >() ){
            										HX_STACK_BEGIN_CATCH
            										::String e2 = _hx_e;
HXLINE(1492)										::haxe::Log_obj::trace(e2,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            									}
            									else {
            										HX_STACK_DO_THROW(_hx_e);
            									}
            								}
HXDLIN(1492)								r2 = (r2 + (int)1);
            							}
            						}
            					}
            				}
HXLINE(1495)				if (::com::stencyl::Input_obj::mouseReleased) {
HXLINE(1498)					this->mouseState = (int)5;
HXLINE(1499)					{
HXLINE(1499)						::cpp::VirtualArray listeners3 = this->mouseOverListeners;
HXDLIN(1499)						 ::Dynamic value3 = this->mouseState;
HXDLIN(1499)						int r3 = (int)0;
HXDLIN(1499)						while((r3 < listeners3->get_length())){
HXLINE(1499)							try {
            								HX_STACK_CATCHABLE(::String, 0);
HXLINE(1499)								 ::Dynamic f3 = listeners3->__get(r3);
HXDLIN(1499)								f3(value3,listeners3);
HXDLIN(1499)								if ((::com::stencyl::utils::Utils_obj::indexOf(listeners3,f3) == (int)-1)) {
HXLINE(1499)									r3 = (r3 - (int)1);
            								}
            							}
            							catch( ::Dynamic _hx_e){
            								if (_hx_e.IsClass< ::String >() ){
            									HX_STACK_BEGIN_CATCH
            									::String e3 = _hx_e;
HXLINE(1499)									::haxe::Log_obj::trace(e3,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
HXDLIN(1499)							r3 = (r3 + (int)1);
            						}
            					}
            				}
            			}
            			else {
HXLINE(1505)				if ((this->mouseState > (int)0)) {
HXLINE(1508)					this->mouseState = (int)-1;
HXLINE(1509)					{
HXLINE(1509)						::cpp::VirtualArray listeners4 = this->mouseOverListeners;
HXDLIN(1509)						 ::Dynamic value4 = this->mouseState;
HXDLIN(1509)						int r4 = (int)0;
HXDLIN(1509)						while((r4 < listeners4->get_length())){
HXLINE(1509)							try {
            								HX_STACK_CATCHABLE(::String, 0);
HXLINE(1509)								 ::Dynamic f4 = listeners4->__get(r4);
HXDLIN(1509)								f4(value4,listeners4);
HXDLIN(1509)								if ((::com::stencyl::utils::Utils_obj::indexOf(listeners4,f4) == (int)-1)) {
HXLINE(1509)									r4 = (r4 - (int)1);
            								}
            							}
            							catch( ::Dynamic _hx_e){
            								if (_hx_e.IsClass< ::String >() ){
            									HX_STACK_BEGIN_CATCH
            									::String e4 = _hx_e;
HXLINE(1509)									::haxe::Log_obj::trace(e4,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
HXDLIN(1509)							r4 = (r4 + (int)1);
            						}
            					}
            				}
            				else {
HXLINE(1512)					if ((this->mouseState == (int)-1)) {
HXLINE(1514)						this->mouseState = (int)0;
            					}
            				}
            			}
            		}
HXLINE(1519)		int checkType = this->type->ID;
HXLINE(1520)		int groupType = ((int)1000000 + this->groupID);
HXLINE(1522)		 ::haxe::ds::IntMap ec = this->engine->collisionListeners;
HXLINE(1523)		 ::haxe::ds::IntMap ep = this->engine->typeGroupPositionListeners;
HXLINE(1525)		if ((this->physicsMode == (int)0)) {
HXLINE(1527)			bool _hx_tmp5;
HXDLIN(1527)			bool _hx_tmp6;
HXDLIN(1527)			if ((this->collisionListenerCount <= (int)0)) {
HXLINE(1527)				_hx_tmp6 = hx::IsNotNull( ec->get(checkType) );
            			}
            			else {
HXLINE(1527)				_hx_tmp6 = true;
            			}
HXDLIN(1527)			if (!(_hx_tmp6)) {
HXLINE(1527)				_hx_tmp5 = hx::IsNotNull( ec->get(groupType) );
            			}
            			else {
HXLINE(1527)				_hx_tmp5 = true;
            			}
HXDLIN(1527)			if (_hx_tmp5) {
HXLINE(1532)				 ::com::stencyl::models::Actor otherActor;
HXDLIN(1532)				 ::box2D::dynamics::B2Fixture otherShape;
HXDLIN(1532)				 ::box2D::dynamics::B2Fixture thisShape;
HXDLIN(1532)				if ((this->contactCount > (int)0)) {
HXLINE(1532)					int cp_count = (int)0;
HXDLIN(1532)					 ::com::stencyl::models::actor::CollisionPoint cp = null();
HXDLIN(1532)					{
HXLINE(1532)						::Dynamic p = this->contacts->iterator();
HXDLIN(1532)						while(::de::polygonal::ds::Itr_obj::hasNext(p)){
HXLINE(1532)							 ::box2D::dynamics::contacts::B2Contact p1 = ( ( ::box2D::dynamics::contacts::B2Contact)(::de::polygonal::ds::Itr_obj::next(p)) );
HXDLIN(1532)							int key = p1->key;
HXDLIN(1532)							 ::de::polygonal::ds::IntIntHashTable _this = this->collisions->mH;
HXDLIN(1532)							int i = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN(1532)							bool _hx_tmp7;
HXDLIN(1532)							if ((i == (int)-1)) {
HXLINE(1532)								_hx_tmp7 = false;
            							}
            							else {
HXLINE(1532)								::Array< int > d = _this->mData;
HXDLIN(1532)								if ((d->__get(i) == key)) {
HXLINE(1532)									_hx_tmp7 = true;
            								}
            								else {
HXLINE(1532)									bool exists = false;
HXDLIN(1532)									i = d->__get((i + (int)2));
HXDLIN(1532)									while((i != (int)-1)){
HXLINE(1532)										if ((d->__get(i) == key)) {
HXLINE(1532)											exists = true;
HXDLIN(1532)											goto _hx_goto_59;
            										}
HXDLIN(1532)										i = d->__get((i + (int)2));
            									}
            									_hx_goto_59:;
HXDLIN(1532)									_hx_tmp7 = exists;
            								}
            							}
HXDLIN(1532)							if (_hx_tmp7) {
HXLINE(1532)								 ::de::polygonal::ds::IntHashTable _this1 = this->collisions;
HXDLIN(1532)								 ::de::polygonal::ds::IntIntHashTable _this2 = _this1->mH;
HXDLIN(1532)								int i1 = _this2->mHash->__get(((int)(key * (int)73856093) & (int)_this2->mMask));
HXDLIN(1532)								int i2;
HXDLIN(1532)								if ((i1 == (int)-1)) {
HXLINE(1532)									i2 = (int)-2147483647;
            								}
            								else {
HXLINE(1532)									::Array< int > d1 = _this2->mData;
HXDLIN(1532)									if ((d1->__get(i1) == key)) {
HXLINE(1532)										i2 = d1->__get((i1 + (int)1));
            									}
            									else {
HXLINE(1532)										int v = (int)-2147483647;
HXDLIN(1532)										i1 = d1->__get((i1 + (int)2));
HXDLIN(1532)										while((i1 != (int)-1)){
HXLINE(1532)											if ((d1->__get(i1) == key)) {
HXLINE(1532)												v = d1->__get((i1 + (int)1));
HXDLIN(1532)												goto _hx_goto_60;
            											}
HXDLIN(1532)											i1 = d1->__get((i1 + (int)2));
            										}
            										_hx_goto_60:;
HXDLIN(1532)										i2 = v;
            									}
            								}
HXDLIN(1532)								 ::com::stencyl::models::actor::Collision d2;
HXDLIN(1532)								if ((i2 == (int)-2147483647)) {
HXLINE(1532)									d2 = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            								}
            								else {
HXLINE(1532)									d2 = Dynamic( _this1->mVals->__get(i2)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            								}
HXDLIN(1532)								p1->getWorldManifold(::com::stencyl::models::Actor_obj::manifold);
HXDLIN(1532)								{
HXLINE(1532)									int _g = (int)0;
HXDLIN(1532)									::Array< ::Dynamic> _g1 = ::com::stencyl::models::Actor_obj::manifold->m_points;
HXDLIN(1532)									while((_g < _g1->length)){
HXLINE(1532)										 ::box2D::common::math::B2Vec2 point = _g1->__get(_g).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN(1532)										_g = (_g + (int)1);
HXDLIN(1532)										bool _hx_tmp8;
HXDLIN(1532)										if ((point->x != (int)0)) {
HXLINE(1532)											_hx_tmp8 = (point->y != (int)0);
            										}
            										else {
HXLINE(1532)											_hx_tmp8 = false;
            										}
HXDLIN(1532)										if (_hx_tmp8) {
HXLINE(1532)											cp = d2->points->__get(cp_count).StaticCast<  ::com::stencyl::models::actor::CollisionPoint >();
HXDLIN(1532)											if (hx::IsNull( cp )) {
HXLINE(1532)												::Array< ::Dynamic> d3 = d2->points;
HXDLIN(1532)												d3[cp_count] = ::com::stencyl::models::actor::CollisionPoint_obj::get(point->x,point->y,::com::stencyl::models::Actor_obj::manifold->m_normal->x,::com::stencyl::models::Actor_obj::manifold->m_normal->y);
            											}
            											else {
HXLINE(1532)												cp = d2->points->__get(cp_count).StaticCast<  ::com::stencyl::models::actor::CollisionPoint >();
HXDLIN(1532)												cp->x = point->x;
HXDLIN(1532)												cp->y = point->y;
HXDLIN(1532)												cp->normalX = ::com::stencyl::models::Actor_obj::manifold->m_normal->x;
HXDLIN(1532)												cp->normalY = ::com::stencyl::models::Actor_obj::manifold->m_normal->y;
            											}
HXDLIN(1532)											cp_count = (cp_count + (int)1);
            										}
            									}
            								}
HXDLIN(1532)								while((d2->points->length > cp_count)){
HXLINE(1532)									::com::stencyl::models::actor::CollisionPoint_obj::free(d2->points->pop().StaticCast<  ::com::stencyl::models::actor::CollisionPoint >());
            								}
HXDLIN(1532)								cp_count = (int)0;
HXDLIN(1532)								continue;
            							}
HXDLIN(1532)							 ::com::stencyl::models::Actor a1 = p1->getFixtureA()->getUserData();
HXDLIN(1532)							 ::com::stencyl::models::Actor a2 = p1->getFixtureB()->getUserData();
HXDLIN(1532)							if (hx::IsEq( a1,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1532)								otherActor = a2;
HXDLIN(1532)								otherShape = p1->getFixtureB();
HXDLIN(1532)								thisShape = p1->getFixtureA();
            							}
            							else {
HXLINE(1532)								otherActor = a1;
HXDLIN(1532)								otherShape = p1->getFixtureA();
HXDLIN(1532)								thisShape = p1->getFixtureB();
            							}
HXDLIN(1532)							 ::com::stencyl::models::actor::Collision d4 =  ::com::stencyl::models::actor::Collision_obj::__alloc( HX_CTX );
HXDLIN(1532)							d4->otherActor = otherActor;
HXDLIN(1532)							d4->otherShape = otherShape;
HXDLIN(1532)							d4->thisActor = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1532)							d4->thisShape = thisShape;
HXDLIN(1532)							d4->actorA = a1;
HXDLIN(1532)							d4->actorB = a2;
HXDLIN(1532)							p1->getWorldManifold(::com::stencyl::models::Actor_obj::manifold);
HXDLIN(1532)							 ::box2D::common::math::B2Vec2 pt = null();
HXDLIN(1532)							this->collisions->set(key,d4);
HXDLIN(1532)							this->collisionsCount++;
HXDLIN(1532)							 ::com::stencyl::models::Actor thisActor = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1532)							 ::box2D::dynamics::B2Body body = thisActor->getBody();
HXDLIN(1532)							 ::box2D::dynamics::B2Body otherBody = otherActor->getBody();
HXDLIN(1532)							 ::box2D::dynamics::B2Body body1 = p1->getFixtureA()->getBody();
HXDLIN(1532)							 ::box2D::dynamics::B2Body body2 = p1->getFixtureB()->getBody();
HXDLIN(1532)							{
HXLINE(1532)								int _g2 = (int)0;
HXDLIN(1532)								::Array< ::Dynamic> _g11 = ::com::stencyl::models::Actor_obj::manifold->m_points;
HXDLIN(1532)								while((_g2 < _g11->length)){
HXLINE(1532)									 ::box2D::common::math::B2Vec2 point1 = _g11->__get(_g2).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN(1532)									_g2 = (_g2 + (int)1);
HXDLIN(1532)									bool _hx_tmp9;
HXDLIN(1532)									bool _hx_tmp10;
HXDLIN(1532)									if ((point1->x != (int)0)) {
HXLINE(1532)										_hx_tmp10 = (point1->y != (int)0);
            									}
            									else {
HXLINE(1532)										_hx_tmp10 = false;
            									}
HXDLIN(1532)									if (_hx_tmp10) {
HXLINE(1532)										_hx_tmp9 = !(thisShape->isSensor());
            									}
            									else {
HXLINE(1532)										_hx_tmp9 = false;
            									}
HXDLIN(1532)									if (_hx_tmp9) {
HXLINE(1532)										pt = point1;
HXDLIN(1532)										cp = ::com::stencyl::models::actor::CollisionPoint_obj::get(pt->x,pt->y,::com::stencyl::models::Actor_obj::manifold->m_normal->x,::com::stencyl::models::Actor_obj::manifold->m_normal->y);
HXDLIN(1532)										d4->points->push(cp);
HXDLIN(1532)										if (hx::IsEq( body1,body )) {
HXLINE(1532)											bool _hx_tmp11;
HXDLIN(1532)											if (!(d4->thisFromBottom)) {
HXLINE(1532)												_hx_tmp11 = (cp->normalY > (int)0);
            											}
            											else {
HXLINE(1532)												_hx_tmp11 = true;
            											}
HXDLIN(1532)											d4->thisFromBottom = _hx_tmp11;
HXDLIN(1532)											bool _hx_tmp12;
HXDLIN(1532)											if (!(d4->thisFromTop)) {
HXLINE(1532)												_hx_tmp12 = (cp->normalY < (int)0);
            											}
            											else {
HXLINE(1532)												_hx_tmp12 = true;
            											}
HXDLIN(1532)											d4->thisFromTop = _hx_tmp12;
HXDLIN(1532)											bool _hx_tmp13;
HXDLIN(1532)											if (!(d4->thisFromLeft)) {
HXLINE(1532)												_hx_tmp13 = (cp->normalX < (int)0);
            											}
            											else {
HXLINE(1532)												_hx_tmp13 = true;
            											}
HXDLIN(1532)											d4->thisFromLeft = _hx_tmp13;
HXDLIN(1532)											bool _hx_tmp14;
HXDLIN(1532)											if (!(d4->thisFromRight)) {
HXLINE(1532)												_hx_tmp14 = (cp->normalX > (int)0);
            											}
            											else {
HXLINE(1532)												_hx_tmp14 = true;
            											}
HXDLIN(1532)											d4->thisFromRight = _hx_tmp14;
            										}
            										else {
HXLINE(1532)											if (hx::IsEq( body2,body )) {
HXLINE(1532)												bool _hx_tmp15;
HXDLIN(1532)												if (!(d4->thisFromBottom)) {
HXLINE(1532)													_hx_tmp15 = (cp->normalY < (int)0);
            												}
            												else {
HXLINE(1532)													_hx_tmp15 = true;
            												}
HXDLIN(1532)												d4->thisFromBottom = _hx_tmp15;
HXDLIN(1532)												bool _hx_tmp16;
HXDLIN(1532)												if (!(d4->thisFromTop)) {
HXLINE(1532)													_hx_tmp16 = (cp->normalY > (int)0);
            												}
            												else {
HXLINE(1532)													_hx_tmp16 = true;
            												}
HXDLIN(1532)												d4->thisFromTop = _hx_tmp16;
HXDLIN(1532)												bool _hx_tmp17;
HXDLIN(1532)												if (!(d4->thisFromLeft)) {
HXLINE(1532)													_hx_tmp17 = (cp->normalX > (int)0);
            												}
            												else {
HXLINE(1532)													_hx_tmp17 = true;
            												}
HXDLIN(1532)												d4->thisFromLeft = _hx_tmp17;
HXDLIN(1532)												bool _hx_tmp18;
HXDLIN(1532)												if (!(d4->thisFromRight)) {
HXLINE(1532)													_hx_tmp18 = (cp->normalX < (int)0);
            												}
            												else {
HXLINE(1532)													_hx_tmp18 = true;
            												}
HXDLIN(1532)												d4->thisFromRight = _hx_tmp18;
            											}
            										}
HXDLIN(1532)										if (hx::IsEq( body1,otherBody )) {
HXLINE(1532)											bool _hx_tmp19;
HXDLIN(1532)											if (!(d4->otherFromBottom)) {
HXLINE(1532)												_hx_tmp19 = (cp->normalY > (int)0);
            											}
            											else {
HXLINE(1532)												_hx_tmp19 = true;
            											}
HXDLIN(1532)											d4->otherFromBottom = _hx_tmp19;
HXDLIN(1532)											bool _hx_tmp20;
HXDLIN(1532)											if (!(d4->otherFromTop)) {
HXLINE(1532)												_hx_tmp20 = (cp->normalY < (int)0);
            											}
            											else {
HXLINE(1532)												_hx_tmp20 = true;
            											}
HXDLIN(1532)											d4->otherFromTop = _hx_tmp20;
HXDLIN(1532)											bool _hx_tmp21;
HXDLIN(1532)											if (!(d4->otherFromLeft)) {
HXLINE(1532)												_hx_tmp21 = (cp->normalX < (int)0);
            											}
            											else {
HXLINE(1532)												_hx_tmp21 = true;
            											}
HXDLIN(1532)											d4->otherFromLeft = _hx_tmp21;
HXDLIN(1532)											bool _hx_tmp22;
HXDLIN(1532)											if (!(d4->otherFromRight)) {
HXLINE(1532)												_hx_tmp22 = (cp->normalX > (int)0);
            											}
            											else {
HXLINE(1532)												_hx_tmp22 = true;
            											}
HXDLIN(1532)											d4->otherFromRight = _hx_tmp22;
            										}
            										else {
HXLINE(1532)											if (hx::IsEq( body2,otherBody )) {
HXLINE(1532)												bool _hx_tmp23;
HXDLIN(1532)												if (!(d4->otherFromBottom)) {
HXLINE(1532)													_hx_tmp23 = (cp->normalY < (int)0);
            												}
            												else {
HXLINE(1532)													_hx_tmp23 = true;
            												}
HXDLIN(1532)												d4->otherFromBottom = _hx_tmp23;
HXDLIN(1532)												bool _hx_tmp24;
HXDLIN(1532)												if (!(d4->otherFromTop)) {
HXLINE(1532)													_hx_tmp24 = (cp->normalY > (int)0);
            												}
            												else {
HXLINE(1532)													_hx_tmp24 = true;
            												}
HXDLIN(1532)												d4->otherFromTop = _hx_tmp24;
HXDLIN(1532)												bool _hx_tmp25;
HXDLIN(1532)												if (!(d4->otherFromLeft)) {
HXLINE(1532)													_hx_tmp25 = (cp->normalX > (int)0);
            												}
            												else {
HXLINE(1532)													_hx_tmp25 = true;
            												}
HXDLIN(1532)												d4->otherFromLeft = _hx_tmp25;
HXDLIN(1532)												bool _hx_tmp26;
HXDLIN(1532)												if (!(d4->otherFromRight)) {
HXLINE(1532)													_hx_tmp26 = (cp->normalX < (int)0);
            												}
            												else {
HXLINE(1532)													_hx_tmp26 = true;
            												}
HXDLIN(1532)												d4->otherFromRight = _hx_tmp26;
            											}
            										}
HXDLIN(1532)										if (hx::IsNotNull( otherActor )) {
HXLINE(1532)											bool _hx_tmp27;
HXDLIN(1532)											if (!(d4->thisCollidedWithActor)) {
HXLINE(1532)												bool _hx_tmp28;
HXDLIN(1532)												if ((otherActor->groupID != (int)1)) {
HXLINE(1532)													_hx_tmp28 = (otherActor->groupID != (int)-2);
            												}
            												else {
HXLINE(1532)													_hx_tmp28 = false;
            												}
HXDLIN(1532)												if (_hx_tmp28) {
HXLINE(1532)													_hx_tmp27 = !(otherActor->isTerrainRegion);
            												}
            												else {
HXLINE(1532)													_hx_tmp27 = false;
            												}
            											}
            											else {
HXLINE(1532)												_hx_tmp27 = true;
            											}
HXDLIN(1532)											d4->thisCollidedWithActor = _hx_tmp27;
HXDLIN(1532)											bool _hx_tmp29;
HXDLIN(1532)											if (!(d4->thisCollidedWithTerrain)) {
HXLINE(1532)												_hx_tmp29 = otherActor->isTerrainRegion;
            											}
            											else {
HXLINE(1532)												_hx_tmp29 = true;
            											}
HXDLIN(1532)											d4->thisCollidedWithTerrain = _hx_tmp29;
HXDLIN(1532)											bool _hx_tmp30;
HXDLIN(1532)											if (!(d4->thisCollidedWithTile)) {
HXLINE(1532)												_hx_tmp30 = (otherActor->groupID == (int)1);
            											}
            											else {
HXLINE(1532)												_hx_tmp30 = true;
            											}
HXDLIN(1532)											d4->thisCollidedWithTile = _hx_tmp30;
            										}
HXDLIN(1532)										bool _hx_tmp31;
HXDLIN(1532)										if (!(d4->otherCollidedWithActor)) {
HXLINE(1532)											bool _hx_tmp32;
HXDLIN(1532)											if ((this->groupID != (int)1)) {
HXLINE(1532)												_hx_tmp32 = (this->groupID != (int)-2);
            											}
            											else {
HXLINE(1532)												_hx_tmp32 = false;
            											}
HXDLIN(1532)											if (_hx_tmp32) {
HXLINE(1532)												_hx_tmp31 = !(this->isTerrainRegion);
            											}
            											else {
HXLINE(1532)												_hx_tmp31 = false;
            											}
            										}
            										else {
HXLINE(1532)											_hx_tmp31 = true;
            										}
HXDLIN(1532)										d4->otherCollidedWithActor = _hx_tmp31;
HXDLIN(1532)										bool _hx_tmp33;
HXDLIN(1532)										if (!(d4->otherCollidedWithTerrain)) {
HXLINE(1532)											_hx_tmp33 = this->isTerrainRegion;
            										}
            										else {
HXLINE(1532)											_hx_tmp33 = true;
            										}
HXDLIN(1532)										d4->otherCollidedWithTerrain = _hx_tmp33;
HXDLIN(1532)										bool _hx_tmp34;
HXDLIN(1532)										if (!(d4->otherCollidedWithTile)) {
HXLINE(1532)											_hx_tmp34 = (this->groupID == (int)1);
            										}
            										else {
HXLINE(1532)											_hx_tmp34 = true;
            										}
HXDLIN(1532)										d4->otherCollidedWithTile = _hx_tmp34;
HXDLIN(1532)										bool _hx_tmp35;
HXDLIN(1532)										if (!(d4->thisCollidedWithSensor)) {
HXLINE(1532)											_hx_tmp35 = otherShape->isSensor();
            										}
            										else {
HXLINE(1532)											_hx_tmp35 = true;
            										}
HXDLIN(1532)										d4->thisCollidedWithSensor = _hx_tmp35;
HXDLIN(1532)										bool _hx_tmp36;
HXDLIN(1532)										if (!(d4->otherCollidedWithSensor)) {
HXLINE(1532)											_hx_tmp36 = thisShape->isSensor();
            										}
            										else {
HXLINE(1532)											_hx_tmp36 = true;
            										}
HXDLIN(1532)										d4->otherCollidedWithSensor = _hx_tmp36;
            									}
            									else {
HXLINE(1532)										if (thisShape->isSensor()) {
HXLINE(1532)											if (hx::IsNotNull( otherActor )) {
HXLINE(1532)												bool _hx_tmp37;
HXDLIN(1532)												if (!(d4->thisCollidedWithActor)) {
HXLINE(1532)													bool _hx_tmp38;
HXDLIN(1532)													if ((otherActor->groupID != (int)1)) {
HXLINE(1532)														_hx_tmp38 = (otherActor->groupID != (int)-2);
            													}
            													else {
HXLINE(1532)														_hx_tmp38 = false;
            													}
HXDLIN(1532)													if (_hx_tmp38) {
HXLINE(1532)														_hx_tmp37 = !(otherActor->isTerrainRegion);
            													}
            													else {
HXLINE(1532)														_hx_tmp37 = false;
            													}
            												}
            												else {
HXLINE(1532)													_hx_tmp37 = true;
            												}
HXDLIN(1532)												d4->thisCollidedWithActor = _hx_tmp37;
HXDLIN(1532)												bool _hx_tmp39;
HXDLIN(1532)												if (!(d4->thisCollidedWithTerrain)) {
HXLINE(1532)													_hx_tmp39 = otherActor->isTerrainRegion;
            												}
            												else {
HXLINE(1532)													_hx_tmp39 = true;
            												}
HXDLIN(1532)												d4->thisCollidedWithTerrain = _hx_tmp39;
HXDLIN(1532)												bool _hx_tmp40;
HXDLIN(1532)												if (!(d4->thisCollidedWithTile)) {
HXLINE(1532)													_hx_tmp40 = (otherActor->groupID == (int)1);
            												}
            												else {
HXLINE(1532)													_hx_tmp40 = true;
            												}
HXDLIN(1532)												d4->thisCollidedWithTile = _hx_tmp40;
            											}
HXDLIN(1532)											bool _hx_tmp41;
HXDLIN(1532)											if (!(d4->otherCollidedWithActor)) {
HXLINE(1532)												bool _hx_tmp42;
HXDLIN(1532)												if ((this->groupID != (int)1)) {
HXLINE(1532)													_hx_tmp42 = (this->groupID != (int)-2);
            												}
            												else {
HXLINE(1532)													_hx_tmp42 = false;
            												}
HXDLIN(1532)												if (_hx_tmp42) {
HXLINE(1532)													_hx_tmp41 = !(this->isTerrainRegion);
            												}
            												else {
HXLINE(1532)													_hx_tmp41 = false;
            												}
            											}
            											else {
HXLINE(1532)												_hx_tmp41 = true;
            											}
HXDLIN(1532)											d4->otherCollidedWithActor = _hx_tmp41;
HXDLIN(1532)											bool _hx_tmp43;
HXDLIN(1532)											if (!(d4->otherCollidedWithTerrain)) {
HXLINE(1532)												_hx_tmp43 = this->isTerrainRegion;
            											}
            											else {
HXLINE(1532)												_hx_tmp43 = true;
            											}
HXDLIN(1532)											d4->otherCollidedWithTerrain = _hx_tmp43;
HXDLIN(1532)											bool _hx_tmp44;
HXDLIN(1532)											if (!(d4->otherCollidedWithTile)) {
HXLINE(1532)												_hx_tmp44 = (this->groupID == (int)1);
            											}
            											else {
HXLINE(1532)												_hx_tmp44 = true;
            											}
HXDLIN(1532)											d4->otherCollidedWithTile = _hx_tmp44;
HXDLIN(1532)											bool _hx_tmp45;
HXDLIN(1532)											if (!(d4->thisCollidedWithSensor)) {
HXLINE(1532)												_hx_tmp45 = otherShape->isSensor();
            											}
            											else {
HXLINE(1532)												_hx_tmp45 = true;
            											}
HXDLIN(1532)											d4->thisCollidedWithSensor = _hx_tmp45;
HXDLIN(1532)											bool _hx_tmp46;
HXDLIN(1532)											if (!(d4->otherCollidedWithSensor)) {
HXLINE(1532)												_hx_tmp46 = thisShape->isSensor();
            											}
            											else {
HXLINE(1532)												_hx_tmp46 = true;
            											}
HXDLIN(1532)											d4->otherCollidedWithSensor = _hx_tmp46;
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(1532)				if ((this->collisionsCount > (int)0)) {
HXLINE(1532)					::Dynamic collision = this->collisions->iterator();
HXDLIN(1532)					while(::de::polygonal::ds::Itr_obj::hasNext(collision)){
HXLINE(1532)						 ::com::stencyl::models::actor::Collision collision1 = ( ( ::com::stencyl::models::actor::Collision)(::de::polygonal::ds::Itr_obj::next(collision)) );
HXDLIN(1532)						bool _hx_tmp47;
HXDLIN(1532)						bool _hx_tmp48;
HXDLIN(1532)						bool _hx_tmp49;
HXDLIN(1532)						bool _hx_tmp50;
HXDLIN(1532)						if (hx::IsNotNull( collision1 )) {
HXLINE(1532)							_hx_tmp50 = hx::IsNull( collision1->thisActor );
            						}
            						else {
HXLINE(1532)							_hx_tmp50 = true;
            						}
HXDLIN(1532)						if (!(_hx_tmp50)) {
HXLINE(1532)							_hx_tmp49 = hx::IsNull( collision1->otherActor );
            						}
            						else {
HXLINE(1532)							_hx_tmp49 = true;
            						}
HXDLIN(1532)						if (!(_hx_tmp49)) {
HXLINE(1532)							_hx_tmp48 = !(collision1->thisActor->handlesCollisions);
            						}
            						else {
HXLINE(1532)							_hx_tmp48 = true;
            						}
HXDLIN(1532)						if (!(_hx_tmp48)) {
HXLINE(1532)							_hx_tmp47 = !(collision1->otherActor->handlesCollisions);
            						}
            						else {
HXLINE(1532)							_hx_tmp47 = true;
            						}
HXDLIN(1532)						if (_hx_tmp47) {
HXLINE(1532)							continue;
            						}
HXDLIN(1532)						::com::stencyl::models::Actor_obj::lastCollided = collision1->otherActor;
HXDLIN(1532)						{
HXLINE(1532)							::cpp::VirtualArray listeners5 = this->collisionListeners;
HXDLIN(1532)							int r5 = (int)0;
HXDLIN(1532)							while((r5 < listeners5->get_length())){
HXLINE(1532)								try {
            									HX_STACK_CATCHABLE(::String, 0);
HXLINE(1532)									 ::Dynamic f5 = listeners5->__get(r5);
HXDLIN(1532)									f5(collision1,listeners5);
HXDLIN(1532)									if ((::com::stencyl::utils::Utils_obj::indexOf(listeners5,f5) == (int)-1)) {
HXLINE(1532)										r5 = (r5 - (int)1);
            									}
            								}
            								catch( ::Dynamic _hx_e){
            									if (_hx_e.IsClass< ::String >() ){
            										HX_STACK_BEGIN_CATCH
            										::String e5 = _hx_e;
HXLINE(1532)										::haxe::Log_obj::trace(e5,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            									}
            									else {
            										HX_STACK_DO_THROW(_hx_e);
            									}
            								}
HXDLIN(1532)								r5 = (r5 + (int)1);
            							}
            						}
HXDLIN(1532)						this->engine->handleCollision(hx::ObjectPtr<OBJ_>(this),collision1);
            					}
            				}
            			}
            		}
HXLINE(1536)		this->internalUpdate(elapsedTime,true);
HXLINE(1538)		if ((this->physicsMode == (int)1)) {
HXLINE(1540)			bool _hx_tmp51;
HXDLIN(1540)			bool _hx_tmp52;
HXDLIN(1540)			if ((this->collisionListenerCount <= (int)0)) {
HXLINE(1540)				_hx_tmp52 = hx::IsNotNull( ec->get(checkType) );
            			}
            			else {
HXLINE(1540)				_hx_tmp52 = true;
            			}
HXDLIN(1540)			if (!(_hx_tmp52)) {
HXLINE(1540)				_hx_tmp51 = hx::IsNotNull( ec->get(groupType) );
            			}
            			else {
HXLINE(1540)				_hx_tmp51 = true;
            			}
HXDLIN(1540)			if (_hx_tmp51) {
HXLINE(1544)				this->handleCollisionsSimple();
            			}
HXLINE(1546)			this->disposeRemovedCollisionInfo();
            		}
HXLINE(1549)		if ((this->physicsMode != (int)2)) {
HXLINE(1551)			::cpp::VirtualArray listeners6 = this->whenUpdatedListeners;
HXDLIN(1551)			int r6 = (int)0;
HXDLIN(1551)			while((r6 < listeners6->get_length())){
HXLINE(1551)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(1551)					 ::Dynamic f6 = listeners6->__get(r6);
HXDLIN(1551)					f6(elapsedTime,listeners6);
HXDLIN(1551)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners6,f6) == (int)-1)) {
HXLINE(1551)						r6 = (r6 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e6 = _hx_e;
HXLINE(1551)						::haxe::Log_obj::trace(e6,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(1551)				r6 = (r6 + (int)1);
            			}
            		}
HXLINE(1554)		bool _hx_tmp53;
HXDLIN(1554)		bool _hx_tmp54;
HXDLIN(1554)		if ((this->positionListenerCount <= (int)0)) {
HXLINE(1554)			_hx_tmp54 = hx::IsNotNull( ep->get(checkType) );
            		}
            		else {
HXLINE(1554)			_hx_tmp54 = true;
            		}
HXDLIN(1554)		if (!(_hx_tmp54)) {
HXLINE(1554)			_hx_tmp53 = hx::IsNotNull( ep->get(groupType) );
            		}
            		else {
HXLINE(1554)			_hx_tmp53 = true;
            		}
HXDLIN(1554)		if (_hx_tmp53) {
HXLINE(1558)			this->checkScreenState();
            		}
HXLINE(1562)		if (hx::IsNotNull( this->label )) {
HXLINE(1564)			 ::com::stencyl::graphics::fonts::Label _hx_tmp55 = this->label;
HXDLIN(1564)			_hx_tmp55->setAlpha(this->get_alpha());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,innerUpdate,(void))

void Actor_obj::internalUpdate(Float elapsedTime,bool doAll){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1571_internalUpdate)
HXLINE(1572)		if (this->paused) {
HXLINE(1574)			return;
            		}
HXLINE(1577)		if ((this->physicsMode != (int)0)) {
HXLINE(1579)			bool _hx_tmp;
HXDLIN(1579)			bool _hx_tmp1;
HXDLIN(1579)			if ((this->physicsMode == (int)1)) {
HXLINE(1579)				_hx_tmp1 = !(this->ignoreGravity);
            			}
            			else {
HXLINE(1579)				_hx_tmp1 = false;
            			}
HXDLIN(1579)			if (_hx_tmp1) {
HXLINE(1579)				_hx_tmp = !(this->isHUD);
            			}
            			else {
HXLINE(1579)				_hx_tmp = false;
            			}
HXDLIN(1579)			if (_hx_tmp) {
HXLINE(1582)				 ::com::stencyl::models::Actor _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1582)				_hx_tmp2->xSpeed = (_hx_tmp2->xSpeed + ((elapsedTime * this->engine->gravityX) * ((Float)0.001)));
HXLINE(1583)				 ::com::stencyl::models::Actor _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1583)				_hx_tmp3->ySpeed = (_hx_tmp3->ySpeed + ((elapsedTime * this->engine->gravityY) * ((Float)0.001)));
            			}
HXLINE(1586)			bool _hx_tmp4;
HXDLIN(1586)			if ((this->xSpeed == (int)0)) {
HXLINE(1586)				_hx_tmp4 = (this->ySpeed != (int)0);
            			}
            			else {
HXLINE(1586)				_hx_tmp4 = true;
            			}
HXDLIN(1586)			if (_hx_tmp4) {
HXLINE(1588)				this->resetReal(this->realX,this->realY);
HXLINE(1590)				Float _hx_tmp5 = (elapsedTime * this->xSpeed);
HXDLIN(1590)				Float _hx_tmp6 = ((_hx_tmp5 * ((Float)(int)10 / (Float)::com::stencyl::Engine_obj::STEP_SIZE)) * ((Float)0.01));
HXDLIN(1590)				Float _hx_tmp7 = (elapsedTime * this->ySpeed);
HXDLIN(1590)				this->moveActorBy(_hx_tmp6,((_hx_tmp7 * ((Float)(int)10 / (Float)::com::stencyl::Engine_obj::STEP_SIZE)) * ((Float)0.01)),false,null());
            			}
HXLINE(1593)			if ((this->rSpeed != (int)0)) {
HXLINE(1595)				 ::com::stencyl::models::Actor _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1595)				_hx_tmp8->realAngle = (_hx_tmp8->realAngle + ((elapsedTime * this->rSpeed) * ((Float)0.001)));
            			}
HXLINE(1598)			if (this->fixedRotation) {
HXLINE(1600)				this->realAngle = (int)0;
HXLINE(1601)				this->rSpeed = (int)0;
            			}
            		}
            		else {
HXLINE(1607)			 ::box2D::common::math::B2Vec2 p = this->body->getPosition();
HXLINE(1609)			this->realX = (p->x * ::com::stencyl::Engine_obj::physicsScale);
HXLINE(1610)			this->realY = (p->y * ::com::stencyl::Engine_obj::physicsScale);
HXLINE(1612)			this->resetReal(this->realX,this->realY);
HXLINE(1614)			this->realAngle = (this->body->getAngle() * ((Float)57.295779513084021));
            		}
HXLINE(1617)		bool _hx_tmp9;
HXDLIN(1617)		bool _hx_tmp10;
HXDLIN(1617)		bool _hx_tmp11;
HXDLIN(1617)		bool _hx_tmp12;
HXDLIN(1617)		if ((this->lastX == this->realX)) {
HXLINE(1617)			_hx_tmp12 = (this->lastY != this->realY);
            		}
            		else {
HXLINE(1617)			_hx_tmp12 = true;
            		}
HXDLIN(1617)		if (!(_hx_tmp12)) {
HXLINE(1617)			_hx_tmp11 = (this->lastAngle != this->realAngle);
            		}
            		else {
HXLINE(1617)			_hx_tmp11 = true;
            		}
HXDLIN(1617)		if (!(_hx_tmp11)) {
HXLINE(1617)			_hx_tmp10 = (this->lastScale->x != this->realScaleX);
            		}
            		else {
HXLINE(1617)			_hx_tmp10 = true;
            		}
HXDLIN(1617)		if (!(_hx_tmp10)) {
HXLINE(1617)			_hx_tmp9 = (this->lastScale->y != this->realScaleY);
            		}
            		else {
HXLINE(1617)			_hx_tmp9 = true;
            		}
HXDLIN(1617)		if (_hx_tmp9) {
HXLINE(1619)			this->updateMatrix = true;
            		}
HXLINE(1622)		this->lastX = this->realX;
HXLINE(1623)		this->lastY = this->realY;
HXLINE(1624)		this->lastAngle = this->realAngle;
HXLINE(1625)		this->lastScale->x = this->realScaleX;
HXLINE(1626)		this->lastScale->y = this->realScaleY;
HXLINE(1628)		bool _hx_tmp13;
HXDLIN(1628)		if (doAll) {
HXLINE(1628)			_hx_tmp13 = hx::IsNotNull( this->currAnimation );
            		}
            		else {
HXLINE(1628)			_hx_tmp13 = false;
            		}
HXDLIN(1628)		if (_hx_tmp13) {
HXLINE(1630)			 ::com::stencyl::graphics::BitmapAnimation _this = this->currAnimation;
HXDLIN(1630)			bool _hx_tmp14;
HXDLIN(1630)			if (_this->model->sync) {
HXLINE(1630)				_hx_tmp14 = _this->model->looping;
            			}
            			else {
HXLINE(1630)				_hx_tmp14 = false;
            			}
HXDLIN(1630)			if (!(_hx_tmp14)) {
HXLINE(1630)				 ::com::stencyl::graphics::BitmapAnimation _this1 = _this;
HXDLIN(1630)				_this1->timer = (_this1->timer + elapsedTime);
HXDLIN(1630)				bool _hx_tmp15;
HXDLIN(1630)				if ((_this->numFrames > (int)0)) {
HXLINE(1630)					Float _this2 = _this->timer;
HXDLIN(1630)					_hx_tmp15 = (_this2 > _this->durations->__get(_this->frameIndex));
            				}
            				else {
HXLINE(1630)					_hx_tmp15 = false;
            				}
HXDLIN(1630)				if (_hx_tmp15) {
HXLINE(1630)					int old = _this->frameIndex;
HXDLIN(1630)					 ::com::stencyl::graphics::BitmapAnimation _this3 = _this;
HXDLIN(1630)					_this3->timer = (_this3->timer - _this->durations->__get(_this->frameIndex));
HXDLIN(1630)					_this->frameIndex++;
HXDLIN(1630)					if ((_this->frameIndex >= _this->numFrames)) {
HXLINE(1630)						if (_this->model->looping) {
HXLINE(1630)							_this->frameIndex = (int)0;
            						}
            						else {
HXLINE(1630)							_this->finished = true;
HXDLIN(1630)							_this->frameIndex--;
            						}
            					}
HXDLIN(1630)					if ((old != _this->frameIndex)) {
HXLINE(1630)						if (hx::IsNotNull( _this->filter )) {
HXLINE(1630)							if (!(_this->filteredFrames->__get(_this->frameIndex))) {
HXLINE(1630)								::Array< ::Dynamic> _this4 = _this->frames;
HXDLIN(1630)								int _this5 = _this->frameIndex;
HXDLIN(1630)								 ::openfl::display::BitmapData _this6 = _this->frames->__get(_this->frameIndex).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN(1630)								_this4[_this5] = _this->applyFilters(_this6,_this->model->frames->__get(_this->frameIndex).StaticCast<  ::openfl::display::BitmapData >(),_this->filter);
HXDLIN(1630)								_this->filteredFrames[_this->frameIndex] = true;
            							}
HXDLIN(1630)							_this->set_bitmapData(_this->frames->__get(_this->frameIndex).StaticCast<  ::openfl::display::BitmapData >());
            						}
            						else {
HXLINE(1630)							_this->set_bitmapData(_this->model->frames->__get(_this->frameIndex).StaticCast<  ::openfl::display::BitmapData >());
            						}
HXDLIN(1630)						_this->smoothing = ::com::stencyl::Config_obj::antialias;
            					}
            				}
            			}
            			else {
HXLINE(1630)				int old1 = _this->frameIndex;
HXDLIN(1630)				_this->timer = _this->model->sharedTimer;
HXDLIN(1630)				_this->frameIndex = _this->model->sharedFrameIndex;
HXDLIN(1630)				if ((old1 != _this->frameIndex)) {
HXLINE(1630)					if (hx::IsNotNull( _this->filter )) {
HXLINE(1630)						if (!(_this->filteredFrames->__get(_this->frameIndex))) {
HXLINE(1630)							::Array< ::Dynamic> _this7 = _this->frames;
HXDLIN(1630)							int _this8 = _this->frameIndex;
HXDLIN(1630)							 ::openfl::display::BitmapData _this9 = _this->frames->__get(_this->frameIndex).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN(1630)							_this7[_this8] = _this->applyFilters(_this9,_this->model->frames->__get(_this->frameIndex).StaticCast<  ::openfl::display::BitmapData >(),_this->filter);
HXDLIN(1630)							_this->filteredFrames[_this->frameIndex] = true;
            						}
HXDLIN(1630)						_this->set_bitmapData(_this->frames->__get(_this->frameIndex).StaticCast<  ::openfl::display::BitmapData >());
            					}
            					else {
HXLINE(1630)						_this->set_bitmapData(_this->model->frames->__get(_this->frameIndex).StaticCast<  ::openfl::display::BitmapData >());
            					}
HXDLIN(1630)					_this->smoothing = ::com::stencyl::Config_obj::antialias;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,internalUpdate,(void))

void Actor_obj::updateDrawingMatrix(hx::Null< bool >  __o_force){
bool force = __o_force.Default(false);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1635_updateDrawingMatrix)
HXLINE(1636)		bool _hx_tmp;
HXDLIN(1636)		if (this->paused) {
HXLINE(1636)			_hx_tmp = !(force);
            		}
            		else {
HXLINE(1636)			_hx_tmp = false;
            		}
HXDLIN(1636)		if (_hx_tmp) {
HXLINE(1638)			return;
            		}
HXLINE(1641)		if (this->smoothMove) {
HXLINE(1643)			if (!(this->firstMove)) {
HXLINE(1645)				this->drawX = this->realX;
HXLINE(1646)				this->drawY = this->realY;
HXLINE(1647)				this->firstMove = true;
            			}
HXLINE(1650)			this->moveXDistance = (this->realX - this->drawX);
HXLINE(1651)			this->moveYDistance = (this->realY - this->drawY);
HXLINE(1654)			if ((this->moveXDistance > this->minMove)) {
HXLINE(1656)				if (((this->moveXDistance * this->moveMultiplier) > this->minMove)) {
HXLINE(1658)					if ((this->moveXDistance > this->maxMove)) {
HXLINE(1660)						this->drawX = this->realX;
            					}
            					else {
HXLINE(1665)						 ::com::stencyl::models::Actor _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1665)						_hx_tmp1->drawX = (_hx_tmp1->drawX + (this->moveXDistance * this->moveMultiplier));
            					}
            				}
            				else {
HXLINE(1671)					 ::com::stencyl::models::Actor _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1671)					_hx_tmp2->drawX = (_hx_tmp2->drawX + this->minMove);
            				}
            			}
            			else {
HXLINE(1675)				Float _hx_tmp3 = this->moveXDistance;
HXDLIN(1675)				if ((_hx_tmp3 < (this->minMove * (int)-1))) {
HXLINE(1677)					Float _hx_tmp4 = (this->moveXDistance * this->moveMultiplier);
HXDLIN(1677)					if ((_hx_tmp4 < (this->minMove * (int)-1))) {
HXLINE(1679)						Float _hx_tmp5 = this->moveXDistance;
HXDLIN(1679)						if ((_hx_tmp5 < (this->maxMove * (int)-1))) {
HXLINE(1681)							this->drawX = this->realX;
            						}
            						else {
HXLINE(1686)							 ::com::stencyl::models::Actor _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1686)							_hx_tmp6->drawX = (_hx_tmp6->drawX + (this->moveXDistance * this->moveMultiplier));
            						}
            					}
            					else {
HXLINE(1692)						 ::com::stencyl::models::Actor _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1692)						_hx_tmp7->drawX = (_hx_tmp7->drawX - this->minMove);
            					}
            				}
            				else {
HXLINE(1698)					this->drawX = this->realX;
            				}
            			}
HXLINE(1702)			if ((this->moveYDistance > this->minMove)) {
HXLINE(1704)				if (((this->moveYDistance * this->moveMultiplier) > this->minMove)) {
HXLINE(1706)					if ((this->moveYDistance > this->maxMove)) {
HXLINE(1708)						this->drawY = this->realY;
            					}
            					else {
HXLINE(1713)						 ::com::stencyl::models::Actor _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1713)						_hx_tmp8->drawY = (_hx_tmp8->drawY + (this->moveYDistance * this->moveMultiplier));
            					}
            				}
            				else {
HXLINE(1719)					 ::com::stencyl::models::Actor _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1719)					_hx_tmp9->drawY = (_hx_tmp9->drawY + this->minMove);
            				}
            			}
            			else {
HXLINE(1723)				Float _hx_tmp10 = this->moveYDistance;
HXDLIN(1723)				if ((_hx_tmp10 < (this->minMove * (int)-1))) {
HXLINE(1725)					Float _hx_tmp11 = (this->moveYDistance * this->moveMultiplier);
HXDLIN(1725)					if ((_hx_tmp11 < (this->minMove * (int)-1))) {
HXLINE(1727)						Float _hx_tmp12 = this->moveYDistance;
HXDLIN(1727)						if ((_hx_tmp12 < (this->maxMove * (int)-1))) {
HXLINE(1729)							this->drawY = this->realY;
            						}
            						else {
HXLINE(1734)							 ::com::stencyl::models::Actor _hx_tmp13 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1734)							_hx_tmp13->drawY = (_hx_tmp13->drawY + (this->moveYDistance * this->moveMultiplier));
            						}
            					}
            					else {
HXLINE(1740)						 ::com::stencyl::models::Actor _hx_tmp14 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1740)						_hx_tmp14->drawY = (_hx_tmp14->drawY - this->minMove);
            					}
            				}
            				else {
HXLINE(1746)					this->drawY = this->realY;
            				}
            			}
            		}
            		else {
HXLINE(1753)			if ((this->physicsMode != (int)0)) {
HXLINE(1755)				this->drawX = this->realX;
HXLINE(1756)				this->drawY = this->realY;
            			}
            			else {
HXLINE(1761)				 ::box2D::common::math::B2Vec2 p = this->body->getPosition();
HXLINE(1763)				this->drawX = (p->x * ::com::stencyl::Engine_obj::physicsScale);
HXLINE(1764)				this->drawY = (p->y * ::com::stencyl::Engine_obj::physicsScale);
            			}
            		}
HXLINE(1768)		Float _hx_tmp15 = this->currOrigin->x;
HXDLIN(1768)		this->transformPoint->x = ((_hx_tmp15 - ((Float)this->cacheWidth / (Float)(int)2)) * ::com::stencyl::Engine_obj::SCALE);
HXLINE(1769)		Float _hx_tmp16 = this->currOrigin->y;
HXDLIN(1769)		this->transformPoint->y = ((_hx_tmp16 - ((Float)this->cacheHeight / (Float)(int)2)) * ::com::stencyl::Engine_obj::SCALE);
HXLINE(1771)		this->transformMatrix->identity();
HXLINE(1772)		this->transformMatrix->translate(-(this->transformPoint->x),-(this->transformPoint->y));
HXLINE(1773)		this->transformMatrix->scale(this->realScaleX,this->realScaleY);
HXLINE(1775)		if ((this->realAngle != (int)0)) {
HXLINE(1777)			 ::openfl::geom::Matrix _hx_tmp17 = this->transformMatrix;
HXDLIN(1777)			_hx_tmp17->rotate((this->realAngle * ((Float)0.017453292519942779)));
            		}
HXLINE(1780)		if (::com::stencyl::Config_obj::pixelsnap) {
HXLINE(1782)			 ::openfl::geom::Matrix _hx_tmp18 = this->transformMatrix;
HXDLIN(1782)			Float _hx_tmp19 = (::Math_obj::round(this->drawX) * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(1782)			_hx_tmp18->translate(_hx_tmp19,(::Math_obj::round(this->drawY) * ::com::stencyl::Engine_obj::SCALE));
            		}
            		else {
HXLINE(1787)			 ::openfl::geom::Matrix _hx_tmp20 = this->transformMatrix;
HXDLIN(1787)			Float _hx_tmp21 = (this->drawX * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(1787)			_hx_tmp20->translate(_hx_tmp21,(this->drawY * ::com::stencyl::Engine_obj::SCALE));
            		}
HXLINE(1791)		if (hx::IsNull( this->transformObj )) {
HXLINE(1793)			this->transformObj = this->get_transform();
            		}
HXLINE(1796)		this->transformObj->set_matrix(this->transformMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,updateDrawingMatrix,(void))

void Actor_obj::updateTweenAlpha(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1804_updateTweenAlpha)
HXDLIN(1804)		this->set_alpha(this->tweenProps->alpha->value);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,updateTweenAlpha,(void))

void Actor_obj::updateTweenScaleXY(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1808_updateTweenScaleXY)
HXLINE(1809)		this->realScaleX = this->tweenProps->realScaleXY->value1;
HXLINE(1810)		this->realScaleY = this->tweenProps->realScaleXY->value2;
HXLINE(1812)		this->updateBodyScale();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,updateTweenScaleXY,(void))

void Actor_obj::updateTweenAngle(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1817_updateTweenAngle)
HXDLIN(1817)		this->setAngle(this->tweenProps->angle->value,false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,updateTweenAngle,(void))

void Actor_obj::updateTweenXY(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1821_updateTweenXY)
HXLINE(1822)		if ((this->physicsMode == (int)0)) {
HXLINE(1824)			this->setXY(this->tweenProps->xy->value1,this->tweenProps->xy->value2,null(),null());
            		}
            		else {
HXLINE(1829)			Float _hx_tmp = this->tweenProps->xy->value1;
HXDLIN(1829)			Float _hx_tmp1 = (_hx_tmp - this->getX(false));
HXDLIN(1829)			Float _hx_tmp2 = this->tweenProps->xy->value2;
HXDLIN(1829)			this->moveActorBy(_hx_tmp1,(_hx_tmp2 - this->getY(false)),false,null());
HXLINE(1830)			this->updateMatrix = true;
            		}
HXLINE(1833)		if (this->tweenProps->xy->finished) {
HXLINE(1835)			if (hx::IsNotNull( this->currOffset )) {
HXLINE(1837)				this->resetReal(this->realX,this->realY);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,updateTweenXY,(void))

void Actor_obj::updateBodyScale(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1844_updateBodyScale)
HXDLIN(1844)		bool _hx_tmp;
HXDLIN(1844)		bool _hx_tmp1;
HXDLIN(1844)		bool _hx_tmp2;
HXDLIN(1844)		if (this->autoScale) {
HXDLIN(1844)			_hx_tmp2 = (this->physicsMode == (int)0);
            		}
            		else {
HXDLIN(1844)			_hx_tmp2 = false;
            		}
HXDLIN(1844)		if (_hx_tmp2) {
HXDLIN(1844)			_hx_tmp1 = hx::IsNotNull( this->body );
            		}
            		else {
HXDLIN(1844)			_hx_tmp1 = false;
            		}
HXDLIN(1844)		if (_hx_tmp1) {
HXDLIN(1844)			_hx_tmp = (this->bodyDef->type != ::box2D::dynamics::B2Body_obj::b2_staticBody);
            		}
            		else {
HXDLIN(1844)			_hx_tmp = false;
            		}
HXDLIN(1844)		if (_hx_tmp) {
HXLINE(1846)			bool _hx_tmp3;
HXDLIN(1846)			if ((this->realScaleX != (int)0)) {
HXLINE(1846)				_hx_tmp3 = (this->realScaleY != (int)0);
            			}
            			else {
HXLINE(1846)				_hx_tmp3 = false;
            			}
HXDLIN(1846)			if (_hx_tmp3) {
HXLINE(1848)				this->scaleBody(this->realScaleX,this->realScaleY);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,updateBodyScale,(void))

void Actor_obj::scaleBody(Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1859_scaleBody)
HXLINE(1860)		::Array< ::Dynamic> fixtureList = ::Array_obj< ::Dynamic>::__new();
HXLINE(1861)		 ::box2D::dynamics::B2Fixture fixture = this->body->getFixtureList();
HXLINE(1863)		while(hx::IsNotNull( fixture )){
HXLINE(1865)			fixtureList->push(fixture);
HXLINE(1866)			fixture = fixture->getNext();
            		}
HXLINE(1869)		{
HXLINE(1869)			int _g = (int)0;
HXDLIN(1869)			while((_g < fixtureList->length)){
HXLINE(1869)				 ::box2D::dynamics::B2Fixture f = fixtureList->__get(_g).StaticCast<  ::box2D::dynamics::B2Fixture >();
HXDLIN(1869)				_g = (_g + (int)1);
HXLINE(1871)				 ::box2D::collision::shapes::B2Shape poly = f->getShape();
HXLINE(1872)				 ::box2D::common::math::B2Vec2 center = this->body->getLocalCenter();
HXLINE(1873)				if (::Std_obj::is(poly,hx::ClassOf< ::box2D::collision::shapes::B2CircleShape >())) {
HXLINE(1875)					 ::box2D::collision::shapes::B2CircleShape circle = ( ( ::box2D::collision::shapes::B2CircleShape)(poly) );
HXLINE(1876)					Float factorX = (((Float)(int)1 / (Float)this->bodyScale->x) * width);
HXLINE(1877)					Float factorY = (((Float)(int)1 / (Float)this->bodyScale->y) * height);
HXLINE(1879)					 ::box2D::common::math::B2Vec2 p = circle->m_p;
HXLINE(1880)					p->subtract(center);
HXLINE(1881)					p->x = (p->x * factorX);
HXLINE(1882)					p->y = (p->y * factorY);
HXLINE(1884)					circle->m_p = center->copy(null());
HXLINE(1885)					circle->m_p->add(p);
HXLINE(1886)					Float poly1 = poly->m_radius;
HXDLIN(1886)					poly->m_radius = (poly1 * ::Math_obj::abs(factorX));
            				}
            				else {
HXLINE(1889)					if (::Std_obj::is(poly,hx::ClassOf< ::box2D::collision::shapes::B2PolygonShape >())) {
HXLINE(1891)						 ::box2D::collision::shapes::B2PolygonShape polygon = ( ( ::box2D::collision::shapes::B2PolygonShape)(poly) );
HXLINE(1892)						::Array< ::Dynamic> verts = polygon->m_vertices;
HXLINE(1893)						::Array< ::Dynamic> newVerts = ::Array_obj< ::Dynamic>::__new();
HXLINE(1895)						bool horiChange;
HXDLIN(1895)						bool horiChange1;
HXDLIN(1895)						if ((this->bodyScale->x > (int)0)) {
HXLINE(1895)							horiChange1 = (width < (int)0);
            						}
            						else {
HXLINE(1895)							horiChange1 = false;
            						}
HXDLIN(1895)						if (!(horiChange1)) {
HXLINE(1895)							if ((this->bodyScale->x < (int)0)) {
HXLINE(1895)								horiChange = (width > (int)0);
            							}
            							else {
HXLINE(1895)								horiChange = false;
            							}
            						}
            						else {
HXLINE(1895)							horiChange = true;
            						}
HXLINE(1896)						bool vertChange;
HXDLIN(1896)						bool vertChange1;
HXDLIN(1896)						if ((this->bodyScale->y > (int)0)) {
HXLINE(1896)							vertChange1 = (height < (int)0);
            						}
            						else {
HXLINE(1896)							vertChange1 = false;
            						}
HXDLIN(1896)						if (!(vertChange1)) {
HXLINE(1896)							if ((this->bodyScale->y < (int)0)) {
HXLINE(1896)								vertChange = (height > (int)0);
            							}
            							else {
HXLINE(1896)								vertChange = false;
            							}
            						}
            						else {
HXLINE(1896)							vertChange = true;
            						}
HXLINE(1898)						{
HXLINE(1898)							int _g1 = (int)0;
HXDLIN(1898)							while((_g1 < verts->length)){
HXLINE(1898)								 ::box2D::common::math::B2Vec2 v = verts->__get(_g1).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN(1898)								_g1 = (_g1 + (int)1);
HXLINE(1900)								v->subtract(center);
HXLINE(1901)								Float v1 = v->x;
HXDLIN(1901)								Float _hx_tmp = (v1 * ((Float)(int)1 / (Float)::Math_obj::abs(this->bodyScale->x)));
HXDLIN(1901)								v->x = (_hx_tmp * ::Math_obj::abs(width));
HXLINE(1902)								Float v2 = v->y;
HXDLIN(1902)								Float _hx_tmp1 = (v2 * ((Float)(int)1 / (Float)::Math_obj::abs(this->bodyScale->y)));
HXDLIN(1902)								v->y = (_hx_tmp1 * ::Math_obj::abs(height));
HXLINE(1904)								if (horiChange) {
HXLINE(1906)									v->x = -(v->x);
            								}
HXLINE(1909)								if (vertChange) {
HXLINE(1911)									v->y = -(v->y);
            								}
HXLINE(1914)								 ::box2D::common::math::B2Vec2 newVert = center->copy(null());
HXLINE(1915)								newVert->add(v);
HXLINE(1917)								newVerts->push(newVert);
            							}
            						}
HXLINE(1920)						bool _hx_tmp2;
HXDLIN(1920)						bool _hx_tmp3;
HXDLIN(1920)						if (horiChange) {
HXLINE(1920)							_hx_tmp3 = vertChange;
            						}
            						else {
HXLINE(1920)							_hx_tmp3 = false;
            						}
HXDLIN(1920)						if (!(_hx_tmp3)) {
HXLINE(1920)							if (!(horiChange)) {
HXLINE(1920)								_hx_tmp2 = vertChange;
            							}
            							else {
HXLINE(1920)								_hx_tmp2 = true;
            							}
            						}
            						else {
HXLINE(1920)							_hx_tmp2 = false;
            						}
HXDLIN(1920)						if (_hx_tmp2) {
HXLINE(1922)							newVerts->reverse();
            						}
HXLINE(1925)						polygon->setAsArray(newVerts,newVerts->length);
            					}
            				}
            			}
            		}
HXLINE(1929)		this->bodyScale->x = width;
HXLINE(1930)		this->bodyScale->y = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,scaleBody,(void))

void Actor_obj::checkScreenState(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_1934_checkScreenState)
HXLINE(1935)		bool onScreen = this->isOnScreen();
HXLINE(1936)		bool inScene;
HXDLIN(1936)		if (!(onScreen)) {
HXLINE(1936)			inScene = this->isInScene();
            		}
            		else {
HXLINE(1936)			inScene = true;
            		}
HXLINE(1938)		bool enteredScreen;
HXDLIN(1938)		if (!(this->lastScreenState)) {
HXLINE(1938)			enteredScreen = onScreen;
            		}
            		else {
HXLINE(1938)			enteredScreen = false;
            		}
HXLINE(1939)		bool enteredScene;
HXDLIN(1939)		if (!(this->lastSceneState)) {
HXLINE(1939)			enteredScene = inScene;
            		}
            		else {
HXLINE(1939)			enteredScene = false;
            		}
HXLINE(1940)		bool exitedScreen;
HXDLIN(1940)		if (this->lastScreenState) {
HXLINE(1940)			exitedScreen = !(onScreen);
            		}
            		else {
HXLINE(1940)			exitedScreen = false;
            		}
HXLINE(1941)		bool exitedScene;
HXDLIN(1941)		if (this->lastSceneState) {
HXLINE(1941)			exitedScene = !(inScene);
            		}
            		else {
HXLINE(1941)			exitedScene = false;
            		}
HXLINE(1943)		{
HXLINE(1943)			::cpp::VirtualArray listeners = this->positionListeners;
HXDLIN(1943)			int r = (int)0;
HXDLIN(1943)			while((r < listeners->get_length())){
HXLINE(1943)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(1943)					 ::Dynamic f = listeners->__get(r);
HXDLIN(1943)					f(enteredScreen,exitedScreen,enteredScene,exitedScene,listeners);
HXDLIN(1943)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(1943)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE(1943)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4309,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners5",6e,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(1943)				r = (r + (int)1);
            			}
            		}
HXLINE(1945)		 ::Dynamic typeListeners = this->engine->typeGroupPositionListeners->get((this->groupID + (int)1000000));
HXLINE(1946)		 ::Dynamic groupListeners = this->engine->typeGroupPositionListeners->get(this->typeID);
HXLINE(1948)		if (hx::IsNotNull( typeListeners )) {
HXLINE(1950)			::cpp::VirtualArray listeners1 = ( (::cpp::VirtualArray)(typeListeners) );
HXDLIN(1950)			int r1 = (int)0;
HXDLIN(1950)			while((r1 < listeners1->get_length())){
HXLINE(1950)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(1950)					 ::Dynamic f1 = listeners1->__get(r1);
HXDLIN(1950)					f1(hx::ObjectPtr<OBJ_>(this),enteredScreen,exitedScreen,enteredScene,exitedScene,listeners1);
HXDLIN(1950)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f1) == (int)-1)) {
HXLINE(1950)						r1 = (r1 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE(1950)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4336,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners6",6f,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(1950)				r1 = (r1 + (int)1);
            			}
            		}
HXLINE(1953)		if (hx::IsNotNull( groupListeners )) {
HXLINE(1955)			::cpp::VirtualArray listeners2 = ( (::cpp::VirtualArray)(groupListeners) );
HXDLIN(1955)			int r2 = (int)0;
HXDLIN(1955)			while((r2 < listeners2->get_length())){
HXLINE(1955)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(1955)					 ::Dynamic f2 = listeners2->__get(r2);
HXDLIN(1955)					f2(hx::ObjectPtr<OBJ_>(this),enteredScreen,exitedScreen,enteredScene,exitedScene,listeners2);
HXDLIN(1955)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners2,f2) == (int)-1)) {
HXLINE(1955)						r2 = (r2 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e2 = _hx_e;
HXLINE(1955)						::haxe::Log_obj::trace(e2,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4336,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners6",6f,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(1955)				r2 = (r2 + (int)1);
            			}
            		}
HXLINE(1958)		this->lastScreenState = onScreen;
HXLINE(1959)		this->lastSceneState = inScene;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,checkScreenState,(void))

void Actor_obj::handleCollisions(){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_1971_handleCollisions)
HXLINE(1972)		 ::com::stencyl::models::Actor otherActor;
HXLINE(1973)		 ::box2D::dynamics::B2Fixture otherShape;
HXLINE(1974)		 ::box2D::dynamics::B2Fixture thisShape;
HXLINE(1977)		if ((this->contactCount > (int)0)) {
HXLINE(1979)			int cp_count = (int)0;
HXLINE(1980)			 ::com::stencyl::models::actor::CollisionPoint cp = null();
HXLINE(1982)			{
HXLINE(1982)				::Dynamic p = this->contacts->iterator();
HXDLIN(1982)				while(::de::polygonal::ds::Itr_obj::hasNext(p)){
HXLINE(1982)					 ::box2D::dynamics::contacts::B2Contact p1 = ( ( ::box2D::dynamics::contacts::B2Contact)(::de::polygonal::ds::Itr_obj::next(p)) );
HXLINE(1984)					int key = p1->key;
HXLINE(1986)					 ::de::polygonal::ds::IntIntHashTable _this = this->collisions->mH;
HXDLIN(1986)					int i = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN(1986)					bool _hx_tmp;
HXDLIN(1986)					if ((i == (int)-1)) {
HXLINE(1986)						_hx_tmp = false;
            					}
            					else {
HXLINE(1986)						::Array< int > d = _this->mData;
HXDLIN(1986)						if ((d->__get(i) == key)) {
HXLINE(1986)							_hx_tmp = true;
            						}
            						else {
HXLINE(1986)							bool exists = false;
HXDLIN(1986)							i = d->__get((i + (int)2));
HXDLIN(1986)							while((i != (int)-1)){
HXLINE(1986)								if ((d->__get(i) == key)) {
HXLINE(1986)									exists = true;
HXDLIN(1986)									goto _hx_goto_84;
            								}
HXDLIN(1986)								i = d->__get((i + (int)2));
            							}
            							_hx_goto_84:;
HXDLIN(1986)							_hx_tmp = exists;
            						}
            					}
HXDLIN(1986)					if (_hx_tmp) {
HXLINE(1990)						 ::de::polygonal::ds::IntHashTable _this1 = this->collisions;
HXDLIN(1990)						 ::de::polygonal::ds::IntIntHashTable _this2 = _this1->mH;
HXDLIN(1990)						int i1 = _this2->mHash->__get(((int)(key * (int)73856093) & (int)_this2->mMask));
HXDLIN(1990)						int i2;
HXDLIN(1990)						if ((i1 == (int)-1)) {
HXLINE(1990)							i2 = (int)-2147483647;
            						}
            						else {
HXLINE(1990)							::Array< int > d1 = _this2->mData;
HXDLIN(1990)							if ((d1->__get(i1) == key)) {
HXLINE(1990)								i2 = d1->__get((i1 + (int)1));
            							}
            							else {
HXLINE(1990)								int v = (int)-2147483647;
HXDLIN(1990)								i1 = d1->__get((i1 + (int)2));
HXDLIN(1990)								while((i1 != (int)-1)){
HXLINE(1990)									if ((d1->__get(i1) == key)) {
HXLINE(1990)										v = d1->__get((i1 + (int)1));
HXDLIN(1990)										goto _hx_goto_85;
            									}
HXDLIN(1990)									i1 = d1->__get((i1 + (int)2));
            								}
            								_hx_goto_85:;
HXDLIN(1990)								i2 = v;
            							}
            						}
HXDLIN(1990)						 ::com::stencyl::models::actor::Collision d2;
HXDLIN(1990)						if ((i2 == (int)-2147483647)) {
HXLINE(1990)							d2 = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            						}
            						else {
HXLINE(1990)							d2 = Dynamic( _this1->mVals->__get(i2)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            						}
HXLINE(1994)						p1->getWorldManifold(::com::stencyl::models::Actor_obj::manifold);
HXLINE(1996)						{
HXLINE(1996)							int _g = (int)0;
HXDLIN(1996)							::Array< ::Dynamic> _g1 = ::com::stencyl::models::Actor_obj::manifold->m_points;
HXDLIN(1996)							while((_g < _g1->length)){
HXLINE(1996)								 ::box2D::common::math::B2Vec2 point = _g1->__get(_g).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN(1996)								_g = (_g + (int)1);
HXLINE(1998)								bool _hx_tmp1;
HXDLIN(1998)								if ((point->x != (int)0)) {
HXLINE(1998)									_hx_tmp1 = (point->y != (int)0);
            								}
            								else {
HXLINE(1998)									_hx_tmp1 = false;
            								}
HXDLIN(1998)								if (_hx_tmp1) {
HXLINE(2000)									cp = d2->points->__get(cp_count).StaticCast<  ::com::stencyl::models::actor::CollisionPoint >();
HXLINE(2001)									if (hx::IsNull( cp )) {
HXLINE(2003)										::Array< ::Dynamic> d3 = d2->points;
HXDLIN(2003)										d3[cp_count] = ::com::stencyl::models::actor::CollisionPoint_obj::get(point->x,point->y,::com::stencyl::models::Actor_obj::manifold->m_normal->x,::com::stencyl::models::Actor_obj::manifold->m_normal->y);
            									}
            									else {
HXLINE(2013)										cp = d2->points->__get(cp_count).StaticCast<  ::com::stencyl::models::actor::CollisionPoint >();
HXLINE(2014)										cp->x = point->x;
HXLINE(2015)										cp->y = point->y;
HXLINE(2016)										cp->normalX = ::com::stencyl::models::Actor_obj::manifold->m_normal->x;
HXLINE(2017)										cp->normalY = ::com::stencyl::models::Actor_obj::manifold->m_normal->y;
            									}
HXLINE(2019)									cp_count = (cp_count + (int)1);
            								}
            							}
            						}
HXLINE(2023)						while((d2->points->length > cp_count)){
HXLINE(2024)							::com::stencyl::models::actor::CollisionPoint_obj::free(d2->points->pop().StaticCast<  ::com::stencyl::models::actor::CollisionPoint >());
            						}
HXLINE(2025)						cp_count = (int)0;
HXLINE(2027)						continue;
            					}
HXLINE(2030)					 ::com::stencyl::models::Actor a1 = p1->getFixtureA()->getUserData();
HXLINE(2031)					 ::com::stencyl::models::Actor a2 = p1->getFixtureB()->getUserData();
HXLINE(2033)					if (hx::IsEq( a1,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2035)						otherActor = a2;
HXLINE(2036)						otherShape = p1->getFixtureB();
HXLINE(2037)						thisShape = p1->getFixtureA();
            					}
            					else {
HXLINE(2042)						otherActor = a1;
HXLINE(2043)						otherShape = p1->getFixtureA();
HXLINE(2044)						thisShape = p1->getFixtureB();
            					}
HXLINE(2048)					 ::com::stencyl::models::actor::Collision d4 =  ::com::stencyl::models::actor::Collision_obj::__alloc( HX_CTX );
HXLINE(2049)					d4->otherActor = otherActor;
HXLINE(2050)					d4->otherShape = otherShape;
HXLINE(2051)					d4->thisActor = hx::ObjectPtr<OBJ_>(this);
HXLINE(2052)					d4->thisShape = thisShape;
HXLINE(2053)					d4->actorA = a1;
HXLINE(2054)					d4->actorB = a2;
HXLINE(2058)					p1->getWorldManifold(::com::stencyl::models::Actor_obj::manifold);
HXLINE(2060)					 ::box2D::common::math::B2Vec2 pt = null();
HXLINE(2062)					this->collisions->set(key,d4);
HXLINE(2063)					this->collisionsCount++;
HXLINE(2065)					 ::com::stencyl::models::Actor thisActor = hx::ObjectPtr<OBJ_>(this);
HXLINE(2066)					 ::box2D::dynamics::B2Body body = thisActor->getBody();
HXLINE(2067)					 ::box2D::dynamics::B2Body otherBody = otherActor->getBody();
HXLINE(2068)					 ::box2D::dynamics::B2Body body1 = p1->getFixtureA()->getBody();
HXLINE(2069)					 ::box2D::dynamics::B2Body body2 = p1->getFixtureB()->getBody();
HXLINE(2072)					{
HXLINE(2072)						int _g2 = (int)0;
HXDLIN(2072)						::Array< ::Dynamic> _g11 = ::com::stencyl::models::Actor_obj::manifold->m_points;
HXDLIN(2072)						while((_g2 < _g11->length)){
HXLINE(2072)							 ::box2D::common::math::B2Vec2 point1 = _g11->__get(_g2).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN(2072)							_g2 = (_g2 + (int)1);
HXLINE(2075)							bool _hx_tmp2;
HXDLIN(2075)							bool _hx_tmp3;
HXDLIN(2075)							if ((point1->x != (int)0)) {
HXLINE(2075)								_hx_tmp3 = (point1->y != (int)0);
            							}
            							else {
HXLINE(2075)								_hx_tmp3 = false;
            							}
HXDLIN(2075)							if (_hx_tmp3) {
HXLINE(2075)								_hx_tmp2 = !(thisShape->isSensor());
            							}
            							else {
HXLINE(2075)								_hx_tmp2 = false;
            							}
HXDLIN(2075)							if (_hx_tmp2) {
HXLINE(2077)								pt = point1;
HXLINE(2079)								cp = ::com::stencyl::models::actor::CollisionPoint_obj::get(pt->x,pt->y,::com::stencyl::models::Actor_obj::manifold->m_normal->x,::com::stencyl::models::Actor_obj::manifold->m_normal->y);
HXLINE(2087)								d4->points->push(cp);
HXLINE(2089)								if (hx::IsEq( body1,body )) {
HXLINE(2091)									bool _hx_tmp4;
HXDLIN(2091)									if (!(d4->thisFromBottom)) {
HXLINE(2091)										_hx_tmp4 = (cp->normalY > (int)0);
            									}
            									else {
HXLINE(2091)										_hx_tmp4 = true;
            									}
HXDLIN(2091)									d4->thisFromBottom = _hx_tmp4;
HXLINE(2092)									bool _hx_tmp5;
HXDLIN(2092)									if (!(d4->thisFromTop)) {
HXLINE(2092)										_hx_tmp5 = (cp->normalY < (int)0);
            									}
            									else {
HXLINE(2092)										_hx_tmp5 = true;
            									}
HXDLIN(2092)									d4->thisFromTop = _hx_tmp5;
HXLINE(2093)									bool _hx_tmp6;
HXDLIN(2093)									if (!(d4->thisFromLeft)) {
HXLINE(2093)										_hx_tmp6 = (cp->normalX < (int)0);
            									}
            									else {
HXLINE(2093)										_hx_tmp6 = true;
            									}
HXDLIN(2093)									d4->thisFromLeft = _hx_tmp6;
HXLINE(2094)									bool _hx_tmp7;
HXDLIN(2094)									if (!(d4->thisFromRight)) {
HXLINE(2094)										_hx_tmp7 = (cp->normalX > (int)0);
            									}
            									else {
HXLINE(2094)										_hx_tmp7 = true;
            									}
HXDLIN(2094)									d4->thisFromRight = _hx_tmp7;
            								}
            								else {
HXLINE(2097)									if (hx::IsEq( body2,body )) {
HXLINE(2099)										bool _hx_tmp8;
HXDLIN(2099)										if (!(d4->thisFromBottom)) {
HXLINE(2099)											_hx_tmp8 = (cp->normalY < (int)0);
            										}
            										else {
HXLINE(2099)											_hx_tmp8 = true;
            										}
HXDLIN(2099)										d4->thisFromBottom = _hx_tmp8;
HXLINE(2100)										bool _hx_tmp9;
HXDLIN(2100)										if (!(d4->thisFromTop)) {
HXLINE(2100)											_hx_tmp9 = (cp->normalY > (int)0);
            										}
            										else {
HXLINE(2100)											_hx_tmp9 = true;
            										}
HXDLIN(2100)										d4->thisFromTop = _hx_tmp9;
HXLINE(2101)										bool _hx_tmp10;
HXDLIN(2101)										if (!(d4->thisFromLeft)) {
HXLINE(2101)											_hx_tmp10 = (cp->normalX > (int)0);
            										}
            										else {
HXLINE(2101)											_hx_tmp10 = true;
            										}
HXDLIN(2101)										d4->thisFromLeft = _hx_tmp10;
HXLINE(2102)										bool _hx_tmp11;
HXDLIN(2102)										if (!(d4->thisFromRight)) {
HXLINE(2102)											_hx_tmp11 = (cp->normalX < (int)0);
            										}
            										else {
HXLINE(2102)											_hx_tmp11 = true;
            										}
HXDLIN(2102)										d4->thisFromRight = _hx_tmp11;
            									}
            								}
HXLINE(2107)								if (hx::IsEq( body1,otherBody )) {
HXLINE(2109)									bool _hx_tmp12;
HXDLIN(2109)									if (!(d4->otherFromBottom)) {
HXLINE(2109)										_hx_tmp12 = (cp->normalY > (int)0);
            									}
            									else {
HXLINE(2109)										_hx_tmp12 = true;
            									}
HXDLIN(2109)									d4->otherFromBottom = _hx_tmp12;
HXLINE(2110)									bool _hx_tmp13;
HXDLIN(2110)									if (!(d4->otherFromTop)) {
HXLINE(2110)										_hx_tmp13 = (cp->normalY < (int)0);
            									}
            									else {
HXLINE(2110)										_hx_tmp13 = true;
            									}
HXDLIN(2110)									d4->otherFromTop = _hx_tmp13;
HXLINE(2111)									bool _hx_tmp14;
HXDLIN(2111)									if (!(d4->otherFromLeft)) {
HXLINE(2111)										_hx_tmp14 = (cp->normalX < (int)0);
            									}
            									else {
HXLINE(2111)										_hx_tmp14 = true;
            									}
HXDLIN(2111)									d4->otherFromLeft = _hx_tmp14;
HXLINE(2112)									bool _hx_tmp15;
HXDLIN(2112)									if (!(d4->otherFromRight)) {
HXLINE(2112)										_hx_tmp15 = (cp->normalX > (int)0);
            									}
            									else {
HXLINE(2112)										_hx_tmp15 = true;
            									}
HXDLIN(2112)									d4->otherFromRight = _hx_tmp15;
            								}
            								else {
HXLINE(2115)									if (hx::IsEq( body2,otherBody )) {
HXLINE(2117)										bool _hx_tmp16;
HXDLIN(2117)										if (!(d4->otherFromBottom)) {
HXLINE(2117)											_hx_tmp16 = (cp->normalY < (int)0);
            										}
            										else {
HXLINE(2117)											_hx_tmp16 = true;
            										}
HXDLIN(2117)										d4->otherFromBottom = _hx_tmp16;
HXLINE(2118)										bool _hx_tmp17;
HXDLIN(2118)										if (!(d4->otherFromTop)) {
HXLINE(2118)											_hx_tmp17 = (cp->normalY > (int)0);
            										}
            										else {
HXLINE(2118)											_hx_tmp17 = true;
            										}
HXDLIN(2118)										d4->otherFromTop = _hx_tmp17;
HXLINE(2119)										bool _hx_tmp18;
HXDLIN(2119)										if (!(d4->otherFromLeft)) {
HXLINE(2119)											_hx_tmp18 = (cp->normalX > (int)0);
            										}
            										else {
HXLINE(2119)											_hx_tmp18 = true;
            										}
HXDLIN(2119)										d4->otherFromLeft = _hx_tmp18;
HXLINE(2120)										bool _hx_tmp19;
HXDLIN(2120)										if (!(d4->otherFromRight)) {
HXLINE(2120)											_hx_tmp19 = (cp->normalX < (int)0);
            										}
            										else {
HXLINE(2120)											_hx_tmp19 = true;
            										}
HXDLIN(2120)										d4->otherFromRight = _hx_tmp19;
            									}
            								}
HXLINE(2125)								if (hx::IsNotNull( otherActor )) {
HXLINE(2127)									bool _hx_tmp20;
HXDLIN(2127)									if (!(d4->thisCollidedWithActor)) {
HXLINE(2127)										bool _hx_tmp21;
HXDLIN(2127)										if ((otherActor->groupID != (int)1)) {
HXLINE(2127)											_hx_tmp21 = (otherActor->groupID != (int)-2);
            										}
            										else {
HXLINE(2127)											_hx_tmp21 = false;
            										}
HXDLIN(2127)										if (_hx_tmp21) {
HXLINE(2127)											_hx_tmp20 = !(otherActor->isTerrainRegion);
            										}
            										else {
HXLINE(2127)											_hx_tmp20 = false;
            										}
            									}
            									else {
HXLINE(2127)										_hx_tmp20 = true;
            									}
HXDLIN(2127)									d4->thisCollidedWithActor = _hx_tmp20;
HXLINE(2128)									bool _hx_tmp22;
HXDLIN(2128)									if (!(d4->thisCollidedWithTerrain)) {
HXLINE(2128)										_hx_tmp22 = otherActor->isTerrainRegion;
            									}
            									else {
HXLINE(2128)										_hx_tmp22 = true;
            									}
HXDLIN(2128)									d4->thisCollidedWithTerrain = _hx_tmp22;
HXLINE(2129)									bool _hx_tmp23;
HXDLIN(2129)									if (!(d4->thisCollidedWithTile)) {
HXLINE(2129)										_hx_tmp23 = (otherActor->groupID == (int)1);
            									}
            									else {
HXLINE(2129)										_hx_tmp23 = true;
            									}
HXDLIN(2129)									d4->thisCollidedWithTile = _hx_tmp23;
            								}
HXLINE(2132)								bool _hx_tmp24;
HXDLIN(2132)								if (!(d4->otherCollidedWithActor)) {
HXLINE(2132)									bool _hx_tmp25;
HXDLIN(2132)									if ((this->groupID != (int)1)) {
HXLINE(2132)										_hx_tmp25 = (this->groupID != (int)-2);
            									}
            									else {
HXLINE(2132)										_hx_tmp25 = false;
            									}
HXDLIN(2132)									if (_hx_tmp25) {
HXLINE(2132)										_hx_tmp24 = !(this->isTerrainRegion);
            									}
            									else {
HXLINE(2132)										_hx_tmp24 = false;
            									}
            								}
            								else {
HXLINE(2132)									_hx_tmp24 = true;
            								}
HXDLIN(2132)								d4->otherCollidedWithActor = _hx_tmp24;
HXLINE(2133)								bool _hx_tmp26;
HXDLIN(2133)								if (!(d4->otherCollidedWithTerrain)) {
HXLINE(2133)									_hx_tmp26 = this->isTerrainRegion;
            								}
            								else {
HXLINE(2133)									_hx_tmp26 = true;
            								}
HXDLIN(2133)								d4->otherCollidedWithTerrain = _hx_tmp26;
HXLINE(2134)								bool _hx_tmp27;
HXDLIN(2134)								if (!(d4->otherCollidedWithTile)) {
HXLINE(2134)									_hx_tmp27 = (this->groupID == (int)1);
            								}
            								else {
HXLINE(2134)									_hx_tmp27 = true;
            								}
HXDLIN(2134)								d4->otherCollidedWithTile = _hx_tmp27;
HXLINE(2136)								bool _hx_tmp28;
HXDLIN(2136)								if (!(d4->thisCollidedWithSensor)) {
HXLINE(2136)									_hx_tmp28 = otherShape->isSensor();
            								}
            								else {
HXLINE(2136)									_hx_tmp28 = true;
            								}
HXDLIN(2136)								d4->thisCollidedWithSensor = _hx_tmp28;
HXLINE(2137)								bool _hx_tmp29;
HXDLIN(2137)								if (!(d4->otherCollidedWithSensor)) {
HXLINE(2137)									_hx_tmp29 = thisShape->isSensor();
            								}
            								else {
HXLINE(2137)									_hx_tmp29 = true;
            								}
HXDLIN(2137)								d4->otherCollidedWithSensor = _hx_tmp29;
            							}
            							else {
HXLINE(2139)								if (thisShape->isSensor()) {
HXLINE(2141)									if (hx::IsNotNull( otherActor )) {
HXLINE(2143)										bool _hx_tmp30;
HXDLIN(2143)										if (!(d4->thisCollidedWithActor)) {
HXLINE(2143)											bool _hx_tmp31;
HXDLIN(2143)											if ((otherActor->groupID != (int)1)) {
HXLINE(2143)												_hx_tmp31 = (otherActor->groupID != (int)-2);
            											}
            											else {
HXLINE(2143)												_hx_tmp31 = false;
            											}
HXDLIN(2143)											if (_hx_tmp31) {
HXLINE(2143)												_hx_tmp30 = !(otherActor->isTerrainRegion);
            											}
            											else {
HXLINE(2143)												_hx_tmp30 = false;
            											}
            										}
            										else {
HXLINE(2143)											_hx_tmp30 = true;
            										}
HXDLIN(2143)										d4->thisCollidedWithActor = _hx_tmp30;
HXLINE(2144)										bool _hx_tmp32;
HXDLIN(2144)										if (!(d4->thisCollidedWithTerrain)) {
HXLINE(2144)											_hx_tmp32 = otherActor->isTerrainRegion;
            										}
            										else {
HXLINE(2144)											_hx_tmp32 = true;
            										}
HXDLIN(2144)										d4->thisCollidedWithTerrain = _hx_tmp32;
HXLINE(2145)										bool _hx_tmp33;
HXDLIN(2145)										if (!(d4->thisCollidedWithTile)) {
HXLINE(2145)											_hx_tmp33 = (otherActor->groupID == (int)1);
            										}
            										else {
HXLINE(2145)											_hx_tmp33 = true;
            										}
HXDLIN(2145)										d4->thisCollidedWithTile = _hx_tmp33;
            									}
HXLINE(2148)									bool _hx_tmp34;
HXDLIN(2148)									if (!(d4->otherCollidedWithActor)) {
HXLINE(2148)										bool _hx_tmp35;
HXDLIN(2148)										if ((this->groupID != (int)1)) {
HXLINE(2148)											_hx_tmp35 = (this->groupID != (int)-2);
            										}
            										else {
HXLINE(2148)											_hx_tmp35 = false;
            										}
HXDLIN(2148)										if (_hx_tmp35) {
HXLINE(2148)											_hx_tmp34 = !(this->isTerrainRegion);
            										}
            										else {
HXLINE(2148)											_hx_tmp34 = false;
            										}
            									}
            									else {
HXLINE(2148)										_hx_tmp34 = true;
            									}
HXDLIN(2148)									d4->otherCollidedWithActor = _hx_tmp34;
HXLINE(2149)									bool _hx_tmp36;
HXDLIN(2149)									if (!(d4->otherCollidedWithTerrain)) {
HXLINE(2149)										_hx_tmp36 = this->isTerrainRegion;
            									}
            									else {
HXLINE(2149)										_hx_tmp36 = true;
            									}
HXDLIN(2149)									d4->otherCollidedWithTerrain = _hx_tmp36;
HXLINE(2150)									bool _hx_tmp37;
HXDLIN(2150)									if (!(d4->otherCollidedWithTile)) {
HXLINE(2150)										_hx_tmp37 = (this->groupID == (int)1);
            									}
            									else {
HXLINE(2150)										_hx_tmp37 = true;
            									}
HXDLIN(2150)									d4->otherCollidedWithTile = _hx_tmp37;
HXLINE(2152)									bool _hx_tmp38;
HXDLIN(2152)									if (!(d4->thisCollidedWithSensor)) {
HXLINE(2152)										_hx_tmp38 = otherShape->isSensor();
            									}
            									else {
HXLINE(2152)										_hx_tmp38 = true;
            									}
HXDLIN(2152)									d4->thisCollidedWithSensor = _hx_tmp38;
HXLINE(2153)									bool _hx_tmp39;
HXDLIN(2153)									if (!(d4->otherCollidedWithSensor)) {
HXLINE(2153)										_hx_tmp39 = thisShape->isSensor();
            									}
            									else {
HXLINE(2153)										_hx_tmp39 = true;
            									}
HXDLIN(2153)									d4->otherCollidedWithSensor = _hx_tmp39;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(2160)		if ((this->collisionsCount > (int)0)) {
HXLINE(2162)			::Dynamic collision = this->collisions->iterator();
HXDLIN(2162)			while(::de::polygonal::ds::Itr_obj::hasNext(collision)){
HXLINE(2162)				 ::com::stencyl::models::actor::Collision collision1 = ( ( ::com::stencyl::models::actor::Collision)(::de::polygonal::ds::Itr_obj::next(collision)) );
HXLINE(2168)				bool _hx_tmp40;
HXDLIN(2168)				bool _hx_tmp41;
HXDLIN(2168)				bool _hx_tmp42;
HXDLIN(2168)				bool _hx_tmp43;
HXDLIN(2168)				if (hx::IsNotNull( collision1 )) {
HXLINE(2168)					_hx_tmp43 = hx::IsNull( collision1->thisActor );
            				}
            				else {
HXLINE(2168)					_hx_tmp43 = true;
            				}
HXDLIN(2168)				if (!(_hx_tmp43)) {
HXLINE(2168)					_hx_tmp42 = hx::IsNull( collision1->otherActor );
            				}
            				else {
HXLINE(2168)					_hx_tmp42 = true;
            				}
HXDLIN(2168)				if (!(_hx_tmp42)) {
HXLINE(2168)					_hx_tmp41 = !(collision1->thisActor->handlesCollisions);
            				}
            				else {
HXLINE(2168)					_hx_tmp41 = true;
            				}
HXDLIN(2168)				if (!(_hx_tmp41)) {
HXLINE(2168)					_hx_tmp40 = !(collision1->otherActor->handlesCollisions);
            				}
            				else {
HXLINE(2168)					_hx_tmp40 = true;
            				}
HXLINE(2166)				if (_hx_tmp40) {
HXLINE(2172)					continue;
            				}
HXLINE(2175)				::com::stencyl::models::Actor_obj::lastCollided = collision1->otherActor;
HXLINE(2176)				{
HXLINE(2176)					::cpp::VirtualArray listeners = this->collisionListeners;
HXDLIN(2176)					int r = (int)0;
HXDLIN(2176)					while((r < listeners->get_length())){
HXLINE(2176)						try {
            							HX_STACK_CATCHABLE(::String, 0);
HXLINE(2176)							 ::Dynamic f = listeners->__get(r);
HXDLIN(2176)							f(collision1,listeners);
HXDLIN(2176)							if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(2176)								r = (r - (int)1);
            							}
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass< ::String >() ){
            								HX_STACK_BEGIN_CATCH
            								::String e = _hx_e;
HXLINE(2176)								::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXDLIN(2176)						r = (r + (int)1);
            					}
            				}
HXLINE(2178)				this->engine->handleCollision(hx::ObjectPtr<OBJ_>(this),collision1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,handleCollisions,(void))

void Actor_obj::addContact( ::box2D::dynamics::contacts::B2Contact point){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2185_addContact)
HXDLIN(2185)		if (hx::IsNotNull( this->contacts )) {
HXLINE(2187)			this->contacts->set(point->key,point);
HXLINE(2188)			this->contactCount++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,addContact,(void))

void Actor_obj::removeContact( ::box2D::dynamics::contacts::B2Contact point){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2193_removeContact)
HXLINE(2194)		if (hx::IsNotNull( this->collisions )) {
HXLINE(2196)			 ::de::polygonal::ds::IntHashTable _this = this->collisions;
HXDLIN(2196)			int key = point->key;
HXDLIN(2196)			 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(2196)			int i = _this1->mHash->__get(((int)(key * (int)73856093) & (int)_this1->mMask));
HXDLIN(2196)			int i1;
HXDLIN(2196)			if ((i == (int)-1)) {
HXLINE(2196)				i1 = (int)-2147483647;
            			}
            			else {
HXLINE(2196)				::Array< int > d = _this1->mData;
HXDLIN(2196)				if ((d->__get(i) == key)) {
HXLINE(2196)					i1 = d->__get((i + (int)1));
            				}
            				else {
HXLINE(2196)					int v = (int)-2147483647;
HXDLIN(2196)					i = d->__get((i + (int)2));
HXDLIN(2196)					while((i != (int)-1)){
HXLINE(2196)						if ((d->__get(i) == key)) {
HXLINE(2196)							v = d->__get((i + (int)1));
HXDLIN(2196)							goto _hx_goto_93;
            						}
HXDLIN(2196)						i = d->__get((i + (int)2));
            					}
            					_hx_goto_93:;
HXDLIN(2196)					i1 = v;
            				}
            			}
HXDLIN(2196)			 ::com::stencyl::models::actor::Collision d1;
HXDLIN(2196)			if ((i1 == (int)-2147483647)) {
HXLINE(2196)				d1 = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            			}
            			else {
HXLINE(2196)				d1 = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            			}
HXLINE(2197)			if (hx::IsNotNull( d1 )) {
HXLINE(2199)				this->collisions->unset(point->key);
HXLINE(2200)				this->collisionsCount--;
HXLINE(2201)				while((d1->points->length > (int)0)){
HXLINE(2202)					::com::stencyl::models::actor::CollisionPoint_obj::free(d1->points->pop().StaticCast<  ::com::stencyl::models::actor::CollisionPoint >());
            				}
            			}
            		}
HXLINE(2206)		if (hx::IsNotNull( this->contacts )) {
HXLINE(2208)			if (this->contacts->unset(point->key)) {
HXLINE(2210)				this->contactCount--;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,removeContact,(void))

void Actor_obj::addRegionContact( ::box2D::dynamics::contacts::B2Contact point){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2217_addRegionContact)
HXDLIN(2217)		if (hx::IsNotNull( this->regionContacts )) {
HXLINE(2219)			this->regionContacts->set(point->key,point);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,addRegionContact,(void))

void Actor_obj::removeRegionContact( ::box2D::dynamics::contacts::B2Contact point){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2225_removeRegionContact)
HXDLIN(2225)		if (hx::IsNotNull( this->regionContacts )) {
HXLINE(2227)			this->regionContacts->unset(point->key);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,removeRegionContact,(void))

int Actor_obj::getID(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2237_getID)
HXDLIN(2237)		return this->ID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getID,return )

::String Actor_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2242_getName)
HXDLIN(2242)		return this->get_name();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getName,return )

int Actor_obj::getGroupID(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2247_getGroupID)
HXDLIN(2247)		if ((this->physicsMode != (int)0)) {
HXLINE(2249)			return this->groupID;
            		}
            		else {
HXLINE(2254)			return this->body->groupID;
            		}
HXLINE(2247)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getGroupID,return )

int Actor_obj::getLayerID(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2260_getLayerID)
HXDLIN(2260)		return this->layer->ID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getLayerID,return )

 ::com::stencyl::models::scene::Layer Actor_obj::getLayer(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2265_getLayer)
HXDLIN(2265)		return this->layer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getLayer,return )

::String Actor_obj::getLayerName(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2270_getLayerName)
HXDLIN(2270)		return this->layer->layerName;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getLayerName,return )

int Actor_obj::getLayerOrder(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2275_getLayerOrder)
HXDLIN(2275)		return this->layer->order;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getLayerOrder,return )

 ::com::stencyl::models::actor::ActorType Actor_obj::getType(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2280_getType)
HXDLIN(2280)		return this->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getType,return )

bool Actor_obj::isPausable(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2289_isPausable)
HXDLIN(2289)		return this->getType()->pausable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isPausable,return )

bool Actor_obj::isPaused(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2294_isPaused)
HXDLIN(2294)		return this->paused;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isPaused,return )

void Actor_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2299_pause)
HXDLIN(2299)		if (this->isPausable()) {
HXLINE(2301)			this->tweenProps->pause();
HXLINE(2303)			{
HXLINE(2303)				int _g = (int)0;
HXDLIN(2303)				::Array< ::Dynamic> _g1 = this->behaviors->behaviors;
HXDLIN(2303)				while((_g < _g1->length)){
HXLINE(2303)					 ::com::stencyl::behavior::Behavior b = _g1->__get(_g).StaticCast<  ::com::stencyl::behavior::Behavior >();
HXDLIN(2303)					_g = (_g + (int)1);
HXLINE(2305)					if (hx::IsNotNull( b->script )) {
HXLINE(2306)						b->script->pauseTweens();
            					}
            				}
            			}
HXLINE(2309)			this->paused = true;
HXLINE(2311)			if ((this->physicsMode == (int)0)) {
HXLINE(2313)				this->body->setPaused(true);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,pause,(void))

void Actor_obj::unpause(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2320_unpause)
HXDLIN(2320)		if (this->isPausable()) {
HXLINE(2322)			this->tweenProps->unpause();
HXLINE(2324)			{
HXLINE(2324)				int _g = (int)0;
HXDLIN(2324)				::Array< ::Dynamic> _g1 = this->behaviors->behaviors;
HXDLIN(2324)				while((_g < _g1->length)){
HXLINE(2324)					 ::com::stencyl::behavior::Behavior b = _g1->__get(_g).StaticCast<  ::com::stencyl::behavior::Behavior >();
HXDLIN(2324)					_g = (_g + (int)1);
HXLINE(2326)					if (hx::IsNotNull( b->script )) {
HXLINE(2327)						b->script->unpauseTweens();
            					}
            				}
            			}
HXLINE(2330)			this->paused = false;
HXLINE(2332)			if ((this->physicsMode == (int)0)) {
HXLINE(2334)				this->body->setPaused(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,unpause,(void))

 ::com::stencyl::models::actor::Group Actor_obj::getGroup(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2345_getGroup)
HXDLIN(2345)		::Dynamic this1 = this->engine->groups;
HXDLIN(2345)		return ( ( ::haxe::ds::IntMap)(this1) )->get(this->getGroupID()).StaticCast<  ::com::stencyl::models::actor::Group >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getGroup,return )

bool Actor_obj::getIsRegion(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2350_getIsRegion)
HXDLIN(2350)		return this->isRegion;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getIsRegion,return )

bool Actor_obj::getIsTerrainRegion(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2355_getIsTerrainRegion)
HXDLIN(2355)		return this->isTerrainRegion;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getIsTerrainRegion,return )

void Actor_obj::moveToLayer( ::com::stencyl::models::scene::layers::RegularLayer layer){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2364_moveToLayer)
HXDLIN(2364)		bool _hx_tmp;
HXDLIN(2364)		if (!(this->isHUD)) {
HXDLIN(2364)			_hx_tmp = ::Std_obj::is(layer,hx::ClassOf< ::com::stencyl::models::scene::Layer >());
            		}
            		else {
HXDLIN(2364)			_hx_tmp = false;
            		}
HXDLIN(2364)		if (_hx_tmp) {
HXLINE(2366)			this->engine->moveActorToLayer(hx::ObjectPtr<OBJ_>(this),( ( ::com::stencyl::models::scene::Layer)(layer) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,moveToLayer,(void))

void Actor_obj::bringToFront(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2372_bringToFront)
HXDLIN(2372)		if (!(this->isHUD)) {
HXLINE(2374)			this->engine->bringToFront(hx::ObjectPtr<OBJ_>(this));
HXLINE(2375)			this->moveToTop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,bringToFront,(void))

void Actor_obj::bringForward(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2381_bringForward)
HXDLIN(2381)		if (!(this->isHUD)) {
HXLINE(2383)			this->engine->bringForward(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,bringForward,(void))

void Actor_obj::sendToBack(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2389_sendToBack)
HXDLIN(2389)		if (!(this->isHUD)) {
HXLINE(2391)			this->engine->sendToBack(hx::ObjectPtr<OBJ_>(this));
HXLINE(2392)			this->moveToBottom();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,sendToBack,(void))

void Actor_obj::sendBackward(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2398_sendBackward)
HXDLIN(2398)		if (!(this->isHUD)) {
HXLINE(2400)			this->engine->sendBackward(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,sendBackward,(void))

void Actor_obj::moveToBottom(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2409_moveToBottom)
HXDLIN(2409)		this->parent->setChildIndex(hx::ObjectPtr<OBJ_>(this),(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,moveToBottom,(void))

void Actor_obj::moveToTop(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2418_moveToTop)
HXDLIN(2418)		 ::openfl::display::DisplayObjectContainer _hx_tmp = this->parent;
HXDLIN(2418)		_hx_tmp->setChildIndex(hx::ObjectPtr<OBJ_>(this),(this->parent->get_numChildren() - (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,moveToTop,(void))

void Actor_obj::moveDown(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2423_moveDown)
HXLINE(2425)		int index = this->parent->getChildIndex(hx::ObjectPtr<OBJ_>(this));
HXLINE(2426)		if ((index > (int)0)) {
HXLINE(2428)			 ::openfl::display::DisplayObjectContainer _hx_tmp = this->parent;
HXDLIN(2428)			_hx_tmp->setChildIndex(hx::ObjectPtr<OBJ_>(this),(index - (int)1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,moveDown,(void))

void Actor_obj::moveUp(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2440_moveUp)
HXLINE(2442)		int index = this->parent->getChildIndex(hx::ObjectPtr<OBJ_>(this));
HXLINE(2443)		int max = (this->parent->get_numChildren() - (int)1);
HXLINE(2444)		if ((index < max)) {
HXLINE(2446)			 ::openfl::display::DisplayObjectContainer _hx_tmp = this->parent;
HXDLIN(2446)			_hx_tmp->setChildIndex(hx::ObjectPtr<OBJ_>(this),(index + (int)1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,moveUp,(void))

int Actor_obj::getZIndex(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2461_getZIndex)
HXDLIN(2461)		return this->parent->getChildIndex(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getZIndex,return )

void Actor_obj::setZIndex(int zindex){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2468_setZIndex)
HXLINE(2470)		int max = (this->parent->get_numChildren() - (int)1);
HXLINE(2474)		if ((zindex > max)) {
HXLINE(2476)			zindex = max;
            		}
HXLINE(2478)		if ((zindex < (int)0)) {
HXLINE(2480)			zindex = (int)0;
            		}
HXLINE(2483)		this->parent->setChildIndex(hx::ObjectPtr<OBJ_>(this),zindex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setZIndex,(void))

void Actor_obj::enableSmoothMotion(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2495_enableSmoothMotion)
HXDLIN(2495)		this->smoothMove = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,enableSmoothMotion,(void))

Float Actor_obj::getX(hx::Null< bool >  __o_round){
bool round = __o_round.Default(true);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2501_getX)
HXLINE(2502)		Float toReturn = (int)-1;
HXLINE(2504)		if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(2506)			bool _hx_tmp;
HXDLIN(2506)			if (!(this->isRegion)) {
HXLINE(2506)				_hx_tmp = this->isTerrainRegion;
            			}
            			else {
HXLINE(2506)				_hx_tmp = true;
            			}
HXDLIN(2506)			if (_hx_tmp) {
HXLINE(2508)				Float toReturn1 = ::com::stencyl::Engine_obj::toPixelUnits(this->body->getPosition()->x);
HXDLIN(2508)				toReturn = (toReturn1 - ((Float)this->cacheWidth / (Float)(int)2));
            			}
            			else {
HXLINE(2511)				if ((this->physicsMode == (int)0)) {
HXLINE(2513)					Float toReturn2 = (this->body->getPosition()->x * ::com::stencyl::Engine_obj::physicsScale);
HXDLIN(2513)					toReturn = ((toReturn2 - ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) - this->currOffset->x);
            				}
            			}
            		}
HXLINE(2517)		bool _hx_tmp1;
HXDLIN(2517)		if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(2517)			_hx_tmp1 = (this->physicsMode != (int)0);
            		}
            		else {
HXLINE(2517)			_hx_tmp1 = true;
            		}
HXDLIN(2517)		if (_hx_tmp1) {
HXLINE(2519)			Float toReturn3 = this->realX;
HXDLIN(2519)			toReturn = ((toReturn3 - ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) - this->currOffset->x);
            		}
HXLINE(2522)		if (round) {
HXLINE(2522)			return ::Math_obj::round(toReturn);
            		}
            		else {
HXLINE(2522)			return toReturn;
            		}
HXDLIN(2522)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,getX,return )

Float Actor_obj::getY(hx::Null< bool >  __o_round){
bool round = __o_round.Default(true);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2526_getY)
HXLINE(2527)		Float toReturn = (int)-1;
HXLINE(2529)		if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(2531)			bool _hx_tmp;
HXDLIN(2531)			if (!(this->isRegion)) {
HXLINE(2531)				_hx_tmp = this->isTerrainRegion;
            			}
            			else {
HXLINE(2531)				_hx_tmp = true;
            			}
HXDLIN(2531)			if (_hx_tmp) {
HXLINE(2533)				Float toReturn1 = ::com::stencyl::Engine_obj::toPixelUnits(this->body->getPosition()->y);
HXDLIN(2533)				toReturn = (toReturn1 - ((Float)this->cacheHeight / (Float)(int)2));
            			}
            			else {
HXLINE(2536)				if ((this->physicsMode == (int)0)) {
HXLINE(2538)					Float toReturn2 = (this->body->getPosition()->y * ::com::stencyl::Engine_obj::physicsScale);
HXDLIN(2538)					toReturn = ((toReturn2 - ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) - this->currOffset->y);
            				}
            			}
            		}
HXLINE(2542)		bool _hx_tmp1;
HXDLIN(2542)		if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(2542)			_hx_tmp1 = (this->physicsMode != (int)0);
            		}
            		else {
HXLINE(2542)			_hx_tmp1 = true;
            		}
HXDLIN(2542)		if (_hx_tmp1) {
HXLINE(2544)			Float toReturn3 = this->realY;
HXDLIN(2544)			toReturn = ((toReturn3 - ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) - this->currOffset->y);
            		}
HXLINE(2547)		if (round) {
HXLINE(2547)			return ::Math_obj::round(toReturn);
            		}
            		else {
HXLINE(2547)			return toReturn;
            		}
HXDLIN(2547)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,getY,return )

Float Actor_obj::getXCenter(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2552_getXCenter)
HXDLIN(2552)		if ((this->physicsMode == (int)0)) {
HXLINE(2554)			Float _hx_tmp = ::com::stencyl::Engine_obj::toPixelUnits(this->body->getWorldCenter()->x);
HXDLIN(2554)			return ::Math_obj::round((_hx_tmp - this->currOffset->x));
            		}
            		else {
HXLINE(2559)			return (this->realX - this->currOffset->x);
            		}
HXLINE(2552)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getXCenter,return )

Float Actor_obj::getYCenter(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2565_getYCenter)
HXDLIN(2565)		if ((this->physicsMode == (int)0)) {
HXLINE(2567)			Float _hx_tmp = ::com::stencyl::Engine_obj::toPixelUnits(this->body->getWorldCenter()->y);
HXDLIN(2567)			return ::Math_obj::round((_hx_tmp - this->currOffset->y));
            		}
            		else {
HXLINE(2572)			return (this->realY - this->currOffset->y);
            		}
HXLINE(2565)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getYCenter,return )

Float Actor_obj::getScreenX(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2578_getScreenX)
HXDLIN(2578)		if (this->isHUD) {
HXLINE(2580)			return this->getX(true);
            		}
            		else {
HXLINE(2585)			Float _hx_tmp = this->getX(true);
HXDLIN(2585)			return (_hx_tmp - ((Float)::com::stencyl::Engine_obj::cameraX / (Float)::com::stencyl::Engine_obj::SCALE));
            		}
HXLINE(2578)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getScreenX,return )

Float Actor_obj::getScreenY(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2591_getScreenY)
HXDLIN(2591)		if (this->isHUD) {
HXLINE(2593)			return this->getY(true);
            		}
            		else {
HXLINE(2598)			Float _hx_tmp = this->getY(true);
HXDLIN(2598)			return (_hx_tmp - ((Float)::com::stencyl::Engine_obj::cameraY / (Float)::com::stencyl::Engine_obj::SCALE));
            		}
HXLINE(2591)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getScreenY,return )

void Actor_obj::setX(Float x,hx::Null< bool >  __o_resetSpeed,hx::Null< bool >  __o_noCollision){
bool resetSpeed = __o_resetSpeed.Default(false);
bool noCollision = __o_noCollision.Default(false);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2603_setX)
HXLINE(2604)		if ((this->physicsMode == (int)1)) {
HXLINE(2606)			bool noCollision1;
HXDLIN(2606)			if (!(noCollision)) {
HXLINE(2606)				noCollision1 = !(this->continuousCollision);
            			}
            			else {
HXLINE(2606)				noCollision1 = true;
            			}
HXDLIN(2606)			Float _hx_tmp = (((x + ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) + this->currOffset->x) - this->realX);
HXDLIN(2606)			this->moveActorBy(_hx_tmp,(this->realY - this->realY),noCollision1,false);
            		}
            		else {
HXLINE(2609)			if ((this->physicsMode == (int)2)) {
HXLINE(2611)				this->resetReal(((x + ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) + this->currOffset->x),this->realY);
            			}
            			else {
HXLINE(2616)				bool _hx_tmp1;
HXDLIN(2616)				if (!(this->isRegion)) {
HXLINE(2616)					_hx_tmp1 = this->isTerrainRegion;
            				}
            				else {
HXLINE(2616)					_hx_tmp1 = true;
            				}
HXDLIN(2616)				if (_hx_tmp1) {
HXLINE(2618)					this->dummy->x = ::com::stencyl::Engine_obj::toPhysicalUnits(x);
            				}
            				else {
HXLINE(2623)					this->dummy->x = ::com::stencyl::Engine_obj::toPhysicalUnits(((x + ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) + this->currOffset->x));
            				}
HXLINE(2626)				this->dummy->y = this->body->getPosition()->y;
HXLINE(2628)				this->body->setPosition(this->dummy);
HXLINE(2630)				if (resetSpeed) {
HXLINE(2632)					this->body->setLinearVelocity(this->zero);
            				}
            			}
            		}
HXLINE(2636)		if (this->snapOnSet) {
HXLINE(2638)			this->drawX = this->realX;
HXLINE(2639)			this->drawY = this->realY;
            		}
HXLINE(2642)		this->updateMatrix = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,setX,(void))

void Actor_obj::setY(Float y,hx::Null< bool >  __o_resetSpeed,hx::Null< bool >  __o_noCollision){
bool resetSpeed = __o_resetSpeed.Default(false);
bool noCollision = __o_noCollision.Default(false);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2646_setY)
HXLINE(2647)		if ((this->physicsMode == (int)1)) {
HXLINE(2649)			bool noCollision1;
HXDLIN(2649)			if (!(noCollision)) {
HXLINE(2649)				noCollision1 = !(this->continuousCollision);
            			}
            			else {
HXLINE(2649)				noCollision1 = true;
            			}
HXDLIN(2649)			Float _hx_tmp = (this->realX - this->realX);
HXDLIN(2649)			this->moveActorBy(_hx_tmp,(((y + ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) + this->currOffset->y) - this->realY),noCollision1,false);
            		}
            		else {
HXLINE(2652)			if ((this->physicsMode == (int)2)) {
HXLINE(2654)				Float _hx_tmp1 = this->realX;
HXDLIN(2654)				this->resetReal(_hx_tmp1,((y + ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) + this->currOffset->y));
            			}
            			else {
HXLINE(2659)				bool _hx_tmp2;
HXDLIN(2659)				if (!(this->isRegion)) {
HXLINE(2659)					_hx_tmp2 = this->isTerrainRegion;
            				}
            				else {
HXLINE(2659)					_hx_tmp2 = true;
            				}
HXDLIN(2659)				if (_hx_tmp2) {
HXLINE(2661)					this->dummy->y = ::com::stencyl::Engine_obj::toPhysicalUnits(y);
            				}
            				else {
HXLINE(2666)					this->dummy->y = ::com::stencyl::Engine_obj::toPhysicalUnits(((y + ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) + this->currOffset->y));
            				}
HXLINE(2669)				this->dummy->x = this->body->getPosition()->x;
HXLINE(2671)				this->body->setPosition(this->dummy);
HXLINE(2673)				if (resetSpeed) {
HXLINE(2675)					this->body->setLinearVelocity(this->zero);
            				}
            			}
            		}
HXLINE(2679)		if (this->snapOnSet) {
HXLINE(2681)			this->drawX = this->realX;
HXLINE(2682)			this->drawY = this->realY;
            		}
HXLINE(2685)		this->updateMatrix = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,setY,(void))

void Actor_obj::setXY(Float x,Float y,hx::Null< bool >  __o_resetSpeed,hx::Null< bool >  __o_noCollision){
bool resetSpeed = __o_resetSpeed.Default(false);
bool noCollision = __o_noCollision.Default(false);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2688_setXY)
HXLINE(2689)		if ((this->physicsMode == (int)1)) {
HXLINE(2691)			bool noCollision1;
HXLINE(2694)			if (!(noCollision)) {
HXLINE(2691)				noCollision1 = !(this->continuousCollision);
            			}
            			else {
HXLINE(2691)				noCollision1 = true;
            			}
HXDLIN(2691)			Float _hx_tmp = (((x + ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) + this->currOffset->x) - this->realX);
HXDLIN(2691)			this->moveActorBy(_hx_tmp,(((y + ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) + this->currOffset->y) - this->realY),noCollision1,false);
            		}
            		else {
HXLINE(2697)			if ((this->physicsMode == (int)2)) {
HXLINE(2699)				Float _hx_tmp1 = ((x + ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) + this->currOffset->x);
HXDLIN(2699)				this->resetReal(_hx_tmp1,((y + ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) + this->currOffset->y));
            			}
            			else {
HXLINE(2704)				bool _hx_tmp2;
HXDLIN(2704)				if (!(this->isRegion)) {
HXLINE(2704)					_hx_tmp2 = this->isTerrainRegion;
            				}
            				else {
HXLINE(2704)					_hx_tmp2 = true;
            				}
HXDLIN(2704)				if (_hx_tmp2) {
HXLINE(2706)					this->dummy->x = ::com::stencyl::Engine_obj::toPhysicalUnits(x);
HXLINE(2707)					this->dummy->y = ::com::stencyl::Engine_obj::toPhysicalUnits(y);
            				}
            				else {
HXLINE(2712)					this->dummy->x = ::com::stencyl::Engine_obj::toPhysicalUnits(((x + ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) + this->currOffset->x));
HXLINE(2713)					this->dummy->y = ::com::stencyl::Engine_obj::toPhysicalUnits(((y + ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) + this->currOffset->y));
            				}
HXLINE(2716)				this->body->setPosition(this->dummy);
HXLINE(2718)				if (resetSpeed) {
HXLINE(2720)					this->body->setLinearVelocity(this->zero);
            				}
            			}
            		}
HXLINE(2724)		if (this->snapOnSet) {
HXLINE(2726)			this->drawX = this->realX;
HXLINE(2727)			this->drawY = this->realY;
            		}
HXLINE(2730)		this->updateMatrix = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Actor_obj,setXY,(void))

void Actor_obj::setXCenter(Float x){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2735_setXCenter)
HXDLIN(2735)		this->setX((x - ((Float)this->getWidth() / (Float)(int)2)),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setXCenter,(void))

void Actor_obj::setYCenter(Float y){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2740_setYCenter)
HXDLIN(2740)		this->setY((y - ((Float)this->getHeight() / (Float)(int)2)),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setYCenter,(void))

void Actor_obj::setScreenX(Float x){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2745_setScreenX)
HXDLIN(2745)		if (this->isHUD) {
HXLINE(2747)			this->setX(x,null(),null());
            		}
            		else {
HXLINE(2751)			this->setX((x + ((Float)::com::stencyl::Engine_obj::cameraX / (Float)::com::stencyl::Engine_obj::SCALE)),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setScreenX,(void))

void Actor_obj::setScreenY(Float y){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2757_setScreenY)
HXDLIN(2757)		if (this->isHUD) {
HXLINE(2759)			this->setY(y,null(),null());
            		}
            		else {
HXLINE(2763)			this->setY((y + ((Float)::com::stencyl::Engine_obj::cameraY / (Float)::com::stencyl::Engine_obj::SCALE)),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setScreenY,(void))

void Actor_obj::follow( ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2768_follow)
HXLINE(2769)		if (hx::IsNull( a )) {
HXLINE(2771)			return;
            		}
HXLINE(2774)		if ((this->physicsMode != (int)0)) {
HXLINE(2776)			{
HXLINE(2776)				Float x = a->getXCenter();
HXDLIN(2776)				Float y = a->getYCenter();
HXDLIN(2776)				Float _hx_tmp = (x - this->realX);
HXDLIN(2776)				this->moveActorBy(_hx_tmp,(y - this->realY),true,false);
            			}
HXLINE(2777)			return;
            		}
HXLINE(2780)		 ::box2D::dynamics::B2Body _hx_tmp1 = this->body;
HXDLIN(2780)		_hx_tmp1->setPosition(a->body->getWorldCenter());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,follow,(void))

void Actor_obj::followWithOffset( ::com::stencyl::models::Actor a,int ox,int oy){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2784_followWithOffset)
HXLINE(2785)		if ((this->physicsMode != (int)0)) {
HXLINE(2787)			{
HXLINE(2787)				Float x = (a->getXCenter() + ox);
HXDLIN(2787)				Float y = (a->getYCenter() + oy);
HXDLIN(2787)				Float _hx_tmp = (x - this->realX);
HXDLIN(2787)				this->moveActorBy(_hx_tmp,(y - this->realY),true,false);
            			}
HXLINE(2788)			return;
            		}
HXLINE(2791)		 ::box2D::common::math::B2Vec2 pt = a->body->getWorldCenter();
HXLINE(2793)		 ::box2D::common::math::B2Vec2 pt1 = pt;
HXDLIN(2793)		Float pt2 = pt1->x;
HXDLIN(2793)		pt1->x = (pt2 + ::com::stencyl::Engine_obj::toPhysicalUnits(ox));
HXLINE(2794)		 ::box2D::common::math::B2Vec2 pt3 = pt;
HXDLIN(2794)		Float pt4 = pt3->y;
HXDLIN(2794)		pt3->y = (pt4 + ::com::stencyl::Engine_obj::toPhysicalUnits(oy));
HXLINE(2796)		this->body->setPosition(pt);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,followWithOffset,(void))

void Actor_obj::setOriginPoint(int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_2800_setOriginPoint)
HXLINE(2801)		 ::box2D::common::math::B2Vec2 resetPosition = null();
HXLINE(2803)		if ((this->physicsMode == (int)0)) {
HXLINE(2805)			resetPosition = this->body->getPosition();
            		}
            		else {
HXLINE(2810)			Float resetPosition1 = ::com::stencyl::Engine_obj::toPhysicalUnits(this->realX);
HXDLIN(2810)			resetPosition =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,resetPosition1,::com::stencyl::Engine_obj::toPhysicalUnits(this->realY));
            		}
HXLINE(2813)		 ::box2D::common::math::B2Vec2 offsetDiff =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,this->currOffset->x,this->currOffset->y);
HXLINE(2814)		Float radians = this->getAngle();
HXLINE(2816)		bool rotated = (::Std_obj::_hx_int((radians * ((Float)57.295779513084021))) != (int)0);
HXLINE(2818)		Float w = this->cacheWidth;
HXLINE(2819)		Float h = this->cacheHeight;
HXLINE(2821)		int newOffX = ::Std_obj::_hx_int((x - ((Float)w / (Float)(int)2)));
HXLINE(2822)		int newOffY = ::Std_obj::_hx_int((y - ((Float)h / (Float)(int)2)));
HXLINE(2824)		bool _hx_tmp;
HXDLIN(2824)		bool _hx_tmp1;
HXDLIN(2824)		if (hx::IsNotNull( this->currOrigin )) {
HXLINE(2824)			if ((::Std_obj::_hx_int(this->currOffset->x) == newOffX)) {
HXLINE(2824)				_hx_tmp1 = (::Std_obj::_hx_int(this->currOffset->y) != newOffY);
            			}
            			else {
HXLINE(2824)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(2824)			_hx_tmp1 = false;
            		}
HXDLIN(2824)		if (_hx_tmp1) {
HXLINE(2824)			_hx_tmp = rotated;
            		}
            		else {
HXLINE(2824)			_hx_tmp = false;
            		}
HXDLIN(2824)		if (_hx_tmp) {
HXLINE(2826)			Float oldAng = (radians + ::Math_obj::atan2(-(this->currOffset->y),-(this->currOffset->x)));
HXLINE(2827)			Float newAng = (radians + ::Math_obj::atan2(-(newOffY),-(newOffX)));
HXLINE(2828)			Float oldDist = ::Math_obj::pow(this->currOffset->x,(int)2);
HXDLIN(2828)			Float oldDist1 = ::Math_obj::sqrt((oldDist + ::Math_obj::pow(this->currOffset->y,(int)2)));
HXLINE(2829)			Float newDist = ::Math_obj::pow(newOffX,(int)2);
HXDLIN(2829)			Float newDist1 = ::Math_obj::sqrt((newDist + ::Math_obj::pow(newOffY,(int)2)));
HXLINE(2831)			Float oldFixCenterX = this->currOrigin->x;
HXDLIN(2831)			int oldFixCenterX1 = ::Math_obj::round((oldFixCenterX + (::Math_obj::cos(oldAng) * oldDist1)));
HXLINE(2832)			Float oldFixCenterY = this->currOrigin->y;
HXDLIN(2832)			int oldFixCenterY1 = ::Math_obj::round((oldFixCenterY + (::Math_obj::sin(oldAng) * oldDist1)));
HXLINE(2833)			int newFixCenterX = ::Math_obj::round((x + (::Math_obj::cos(newAng) * newDist1)));
HXLINE(2834)			int newFixCenterY = ::Math_obj::round((y + (::Math_obj::sin(newAng) * newDist1)));
HXLINE(2836)			 ::box2D::common::math::B2Vec2 resetPosition2 = resetPosition;
HXDLIN(2836)			Float resetPosition3 = resetPosition2->x;
HXDLIN(2836)			resetPosition2->x = (resetPosition3 + ::com::stencyl::Engine_obj::toPhysicalUnits((oldFixCenterX1 - newFixCenterX)));
HXLINE(2837)			 ::box2D::common::math::B2Vec2 resetPosition4 = resetPosition;
HXDLIN(2837)			Float resetPosition5 = resetPosition4->y;
HXDLIN(2837)			resetPosition4->y = (resetPosition5 + ::com::stencyl::Engine_obj::toPhysicalUnits((oldFixCenterY1 - newFixCenterY)));
            		}
HXLINE(2840)		this->currOrigin->x = x;
HXLINE(2841)		this->currOrigin->y = y;
HXLINE(2842)		this->currOffset->x = newOffX;
HXLINE(2843)		this->currOffset->y = newOffY;
HXLINE(2845)		offsetDiff->x = (this->currOffset->x - offsetDiff->x);
HXLINE(2846)		offsetDiff->y = (this->currOffset->y - offsetDiff->y);
HXLINE(2848)		 ::box2D::common::math::B2Vec2 resetPosition6 = resetPosition;
HXDLIN(2848)		Float resetPosition7 = resetPosition6->x;
HXDLIN(2848)		resetPosition6->x = (resetPosition7 + ::com::stencyl::Engine_obj::toPhysicalUnits(offsetDiff->x));
HXLINE(2849)		 ::box2D::common::math::B2Vec2 resetPosition8 = resetPosition;
HXDLIN(2849)		Float resetPosition9 = resetPosition8->y;
HXDLIN(2849)		resetPosition8->y = (resetPosition9 + ::com::stencyl::Engine_obj::toPhysicalUnits(offsetDiff->y));
HXLINE(2851)		if ((this->physicsMode == (int)0)) {
HXLINE(2853)			this->body->setPosition(resetPosition);
            		}
            		else {
HXLINE(2858)			this->realX = ::com::stencyl::Engine_obj::toPixelUnits(resetPosition->x);
HXLINE(2859)			this->realY = ::com::stencyl::Engine_obj::toPixelUnits(resetPosition->y);
            		}
HXLINE(2862)		this->resetOrigin = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,setOriginPoint,(void))

Float Actor_obj::getXVelocity(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2870_getXVelocity)
HXLINE(2871)		if ((this->physicsMode != (int)0)) {
HXLINE(2873)			return this->xSpeed;
            		}
HXLINE(2876)		return this->body->getLinearVelocity()->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getXVelocity,return )

Float Actor_obj::getYVelocity(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2880_getYVelocity)
HXLINE(2881)		if ((this->physicsMode != (int)0)) {
HXLINE(2883)			return this->ySpeed;
            		}
HXLINE(2886)		return this->body->getLinearVelocity()->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getYVelocity,return )

void Actor_obj::setXVelocity(Float dx){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2890_setXVelocity)
HXLINE(2891)		if ((this->physicsMode != (int)0)) {
HXLINE(2893)			this->xSpeed = dx;
HXLINE(2894)			return;
            		}
HXLINE(2897)		 ::box2D::common::math::B2Vec2 v = this->body->getLinearVelocity();
HXLINE(2898)		v->x = dx;
HXLINE(2899)		this->body->setLinearVelocity(v);
HXLINE(2900)		this->body->setAwake(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setXVelocity,(void))

void Actor_obj::setYVelocity(Float dy){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2904_setYVelocity)
HXLINE(2905)		if ((this->physicsMode != (int)0)) {
HXLINE(2907)			this->ySpeed = dy;
HXLINE(2908)			return;
            		}
HXLINE(2911)		 ::box2D::common::math::B2Vec2 v = this->body->getLinearVelocity();
HXLINE(2912)		v->y = dy;
HXLINE(2913)		this->body->setLinearVelocity(v);
HXLINE(2914)		this->body->setAwake(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setYVelocity,(void))

void Actor_obj::setVelocity(Float angle,Float speed){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2918_setVelocity)
HXLINE(2919)		this->setXVelocity((speed * ::Math_obj::cos((((Float)0.017453292519942779) * angle))));
HXLINE(2920)		this->setYVelocity((speed * ::Math_obj::sin((((Float)0.017453292519942779) * angle))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,setVelocity,(void))

void Actor_obj::accelerateX(Float dx){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2925_accelerateX)
HXDLIN(2925)		this->setXVelocity((this->getXVelocity() + dx));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,accelerateX,(void))

void Actor_obj::accelerateY(Float dy){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2930_accelerateY)
HXDLIN(2930)		this->setYVelocity((this->getYVelocity() + dy));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,accelerateY,(void))

void Actor_obj::accelerate(Float angle,Float speed){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2934_accelerate)
HXLINE(2935)		Float _hx_tmp = this->getXVelocity();
HXDLIN(2935)		this->setXVelocity((_hx_tmp + (speed * ::Math_obj::cos((((Float)0.017453292519942779) * angle)))));
HXLINE(2936)		Float _hx_tmp1 = this->getYVelocity();
HXDLIN(2936)		this->setYVelocity((_hx_tmp1 + (speed * ::Math_obj::sin((((Float)0.017453292519942779) * angle)))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,accelerate,(void))

Float Actor_obj::getAngle(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2944_getAngle)
HXLINE(2945)		if ((this->physicsMode != (int)0)) {
HXLINE(2947)			return (((Float)0.017453292519942779) * this->realAngle);
            		}
HXLINE(2950)		return this->body->getAngle();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getAngle,return )

Float Actor_obj::getAngleInDegrees(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2954_getAngleInDegrees)
HXLINE(2955)		if ((this->physicsMode != (int)0)) {
HXLINE(2957)			return this->realAngle;
            		}
HXLINE(2960)		return (((Float)57.295779513084021) * this->body->getAngle());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getAngleInDegrees,return )

void Actor_obj::setAngle(Float angle,hx::Null< bool >  __o_inRadians){
bool inRadians = __o_inRadians.Default(true);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2964_setAngle)
HXLINE(2965)		if (inRadians) {
HXLINE(2967)			if ((this->physicsMode != (int)0)) {
HXLINE(2969)				this->realAngle = (((Float)57.295779513084021) * angle);
            			}
            			else {
HXLINE(2974)				this->body->setAngle(angle);
            			}
            		}
            		else {
HXLINE(2980)			if ((this->physicsMode != (int)0)) {
HXLINE(2982)				this->realAngle = angle;
            			}
            			else {
HXLINE(2987)				 ::box2D::dynamics::B2Body _hx_tmp = this->body;
HXDLIN(2987)				_hx_tmp->setAngle((((Float)0.017453292519942779) * angle));
            			}
            		}
HXLINE(2991)		this->updateMatrix = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,setAngle,(void))

void Actor_obj::rotate(Float angle,hx::Null< bool >  __o_inRadians){
bool inRadians = __o_inRadians.Default(true);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_2996_rotate)
HXDLIN(2996)		if (inRadians) {
HXLINE(2998)			if ((this->physicsMode != (int)0)) {
HXLINE(3000)				 ::com::stencyl::models::Actor _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(3000)				_hx_tmp->realAngle = (_hx_tmp->realAngle + (((Float)57.295779513084021) * angle));
            			}
            			else {
HXLINE(3005)				 ::box2D::dynamics::B2Body _hx_tmp1 = this->body;
HXDLIN(3005)				_hx_tmp1->setAngle((this->body->getAngle() + angle));
            			}
            		}
            		else {
HXLINE(3011)			if ((this->physicsMode != (int)0)) {
HXLINE(3013)				 ::com::stencyl::models::Actor _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(3013)				_hx_tmp2->realAngle = (_hx_tmp2->realAngle + angle);
            			}
            			else {
HXLINE(3018)				 ::box2D::dynamics::B2Body _hx_tmp3 = this->body;
HXDLIN(3018)				Float _hx_tmp4 = this->body->getAngle();
HXDLIN(3018)				_hx_tmp3->setAngle((_hx_tmp4 + (((Float)0.017453292519942779) * angle)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,rotate,(void))

Float Actor_obj::getAngularVelocity(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3024_getAngularVelocity)
HXLINE(3025)		if ((this->physicsMode != (int)0)) {
HXLINE(3027)			return (((Float)0.017453292519942779) * this->rSpeed);
            		}
HXLINE(3030)		return this->body->getAngularVelocity();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getAngularVelocity,return )

void Actor_obj::setAngularVelocity(Float omega){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3035_setAngularVelocity)
HXDLIN(3035)		if ((this->physicsMode != (int)0)) {
HXLINE(3037)			this->rSpeed = (((Float)57.295779513084021) * omega);
            		}
            		else {
HXLINE(3042)			this->body->setAngularVelocity(omega);
HXLINE(3043)			this->body->setAwake(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setAngularVelocity,(void))

void Actor_obj::changeAngularVelocity(Float omega){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3049_changeAngularVelocity)
HXDLIN(3049)		if ((this->physicsMode != (int)0)) {
HXLINE(3051)			 ::com::stencyl::models::Actor _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(3051)			_hx_tmp->rSpeed = (_hx_tmp->rSpeed + (((Float)57.295779513084021) * omega));
            		}
            		else {
HXLINE(3056)			 ::box2D::dynamics::B2Body _hx_tmp1 = this->body;
HXDLIN(3056)			_hx_tmp1->setAngularVelocity((this->body->getAngularVelocity() + omega));
HXLINE(3057)			this->body->setAwake(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,changeAngularVelocity,(void))

void Actor_obj::push(Float dirX,Float dirY,Float magnitude){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3066_push)
HXLINE(3067)		if ((this->physicsMode != (int)0)) {
HXLINE(3069)			this->dummy->x = dirX;
HXLINE(3070)			this->dummy->y = dirY;
HXLINE(3071)			this->dummy->normalize();
HXLINE(3073)			this->accelerateX(((this->dummy->x * magnitude) * ((Float)0.01)));
HXLINE(3074)			this->accelerateY(((this->dummy->y * magnitude) * ((Float)0.01)));
HXLINE(3075)			return;
            		}
HXLINE(3078)		bool _hx_tmp;
HXDLIN(3078)		if ((dirX == (int)0)) {
HXLINE(3078)			_hx_tmp = (dirY == (int)0);
            		}
            		else {
HXLINE(3078)			_hx_tmp = false;
            		}
HXDLIN(3078)		if (_hx_tmp) {
HXLINE(3080)			return;
            		}
HXLINE(3083)		this->dummy->x = dirX;
HXLINE(3084)		this->dummy->y = dirY;
HXLINE(3085)		this->dummy->normalize();
HXLINE(3086)		this->dummy->multiply(magnitude);
HXLINE(3088)		 ::box2D::dynamics::B2Body _hx_tmp1 = this->body;
HXDLIN(3088)		 ::box2D::common::math::B2Vec2 _hx_tmp2 = this->dummy;
HXDLIN(3088)		_hx_tmp1->applyForce(_hx_tmp2,this->body->getWorldCenter());
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,push,(void))

void Actor_obj::pushInDirection(Float angle,Float speed){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3094_pushInDirection)
HXLINE(3096)		Float _hx_tmp = ::Math_obj::cos((((Float)0.017453292519942779) * angle));
HXLINE(3094)		this->push(_hx_tmp,::Math_obj::sin((((Float)0.017453292519942779) * angle)),speed);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,pushInDirection,(void))

void Actor_obj::applyImpulse(Float dirX,Float dirY,Float magnitude){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3103_applyImpulse)
HXLINE(3104)		if ((this->physicsMode != (int)0)) {
HXLINE(3106)			this->dummy->x = dirX;
HXLINE(3107)			this->dummy->y = dirY;
HXLINE(3108)			this->dummy->normalize();
HXLINE(3111)			this->accelerateX((this->dummy->x * magnitude));
HXLINE(3112)			this->accelerateY((this->dummy->y * magnitude));
HXLINE(3115)			return;
            		}
HXLINE(3118)		bool _hx_tmp;
HXDLIN(3118)		if ((dirX == (int)0)) {
HXLINE(3118)			_hx_tmp = (dirY == (int)0);
            		}
            		else {
HXLINE(3118)			_hx_tmp = false;
            		}
HXDLIN(3118)		if (_hx_tmp) {
HXLINE(3120)			return;
            		}
HXLINE(3123)		this->dummy->x = dirX;
HXLINE(3124)		this->dummy->y = dirY;
HXLINE(3125)		this->dummy->normalize();
HXLINE(3126)		this->dummy->multiply(magnitude);
HXLINE(3128)		 ::box2D::dynamics::B2Body _hx_tmp1 = this->body;
HXDLIN(3128)		 ::box2D::common::math::B2Vec2 _hx_tmp2 = this->dummy;
HXDLIN(3128)		_hx_tmp1->applyImpulse(_hx_tmp2,this->body->getWorldCenter());
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,applyImpulse,(void))

void Actor_obj::applyImpulseInDirection(Float angle,Float speed){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3134_applyImpulseInDirection)
HXLINE(3136)		Float _hx_tmp = ::Math_obj::cos((((Float)0.017453292519942779) * angle));
HXLINE(3134)		this->applyImpulse(_hx_tmp,::Math_obj::sin((((Float)0.017453292519942779) * angle)),speed);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,applyImpulseInDirection,(void))

void Actor_obj::applyTorque(Float torque){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3144_applyTorque)
HXDLIN(3144)		if ((this->physicsMode != (int)0)) {
HXLINE(3146)			if (!(this->fixedRotation)) {
HXLINE(3148)				 ::com::stencyl::models::Actor _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(3148)				_hx_tmp->rSpeed = (_hx_tmp->rSpeed - torque);
            			}
            		}
            		else {
HXLINE(3154)			this->body->applyTorque(torque);
HXLINE(3155)			this->body->setAwake(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,applyTorque,(void))

Float Actor_obj::getWidth(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3165_getWidth)
HXDLIN(3165)		return this->cacheWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getWidth,return )

Float Actor_obj::getHeight(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3170_getHeight)
HXDLIN(3170)		return this->cacheHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getHeight,return )

Float Actor_obj::getPhysicsWidth(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3175_getPhysicsWidth)
HXDLIN(3175)		return ((Float)this->cacheWidth / (Float)::com::stencyl::Engine_obj::physicsScale);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getPhysicsWidth,return )

Float Actor_obj::getPhysicsHeight(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3180_getPhysicsHeight)
HXDLIN(3180)		return ((Float)this->cacheHeight / (Float)::com::stencyl::Engine_obj::physicsScale);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getPhysicsHeight,return )

 ::box2D::dynamics::B2Body Actor_obj::getBody(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3189_getBody)
HXDLIN(3189)		return this->body;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getBody,return )

void Actor_obj::enableRotation(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3194_enableRotation)
HXDLIN(3194)		if ((this->physicsMode != (int)0)) {
HXLINE(3196)			this->fixedRotation = false;
            		}
            		else {
HXLINE(3201)			this->body->setFixedRotation(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,enableRotation,(void))

void Actor_obj::disableRotation(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3207_disableRotation)
HXDLIN(3207)		if ((this->physicsMode != (int)0)) {
HXLINE(3209)			this->fixedRotation = true;
            		}
            		else {
HXLINE(3214)			this->body->setFixedRotation(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,disableRotation,(void))

void Actor_obj::setIgnoreGravity(bool state){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3219_setIgnoreGravity)
HXLINE(3220)		this->ignoreGravity = state;
HXLINE(3222)		if ((this->physicsMode == (int)0)) {
HXLINE(3224)			this->body->setIgnoreGravity(state);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setIgnoreGravity,(void))

bool Actor_obj::ignoresGravity(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3229_ignoresGravity)
HXLINE(3230)		if ((this->physicsMode != (int)0)) {
HXLINE(3232)			return this->ignoreGravity;
            		}
HXLINE(3235)		return this->body->isIgnoringGravity();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,ignoresGravity,return )

Float Actor_obj::getFriction(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3239_getFriction)
HXLINE(3240)		bool _hx_tmp;
HXDLIN(3240)		if ((this->physicsMode == (int)0)) {
HXLINE(3240)			_hx_tmp = hx::IsNotNull( this->body->m_fixtureList );
            		}
            		else {
HXLINE(3240)			_hx_tmp = false;
            		}
HXDLIN(3240)		if (_hx_tmp) {
HXLINE(3242)			return this->body->m_fixtureList->m_friction;
            		}
HXLINE(3245)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getFriction,return )

Float Actor_obj::getBounciness(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3249_getBounciness)
HXLINE(3250)		bool _hx_tmp;
HXDLIN(3250)		if ((this->physicsMode == (int)0)) {
HXLINE(3250)			_hx_tmp = hx::IsNotNull( this->body->m_fixtureList );
            		}
            		else {
HXLINE(3250)			_hx_tmp = false;
            		}
HXDLIN(3250)		if (_hx_tmp) {
HXLINE(3252)			return this->body->m_fixtureList->m_restitution;
            		}
HXLINE(3255)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getBounciness,return )

Float Actor_obj::getMass(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3259_getMass)
HXLINE(3260)		if ((this->physicsMode == (int)0)) {
HXLINE(3262)			return this->md->mass;
            		}
HXLINE(3265)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getMass,return )

Float Actor_obj::getAngularMass(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3269_getAngularMass)
HXLINE(3270)		if ((this->physicsMode == (int)0)) {
HXLINE(3272)			return this->md->I;
            		}
HXLINE(3275)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getAngularMass,return )

Float Actor_obj::getLinearDamping(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3279_getLinearDamping)
HXLINE(3280)		if ((this->physicsMode == (int)0)) {
HXLINE(3282)			return this->body->getLinearDamping();
            		}
HXLINE(3285)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getLinearDamping,return )

Float Actor_obj::getAngularDamping(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3289_getAngularDamping)
HXLINE(3290)		if ((this->physicsMode == (int)0)) {
HXLINE(3292)			return this->body->getAngularDamping();
            		}
HXLINE(3295)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getAngularDamping,return )

void Actor_obj::setFriction(Float value){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3300_setFriction)
HXDLIN(3300)		if ((this->physicsMode == (int)0)) {
HXLINE(3302)			this->body->setFriction(value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setFriction,(void))

void Actor_obj::setBounciness(Float value){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3308_setBounciness)
HXDLIN(3308)		if ((this->physicsMode == (int)0)) {
HXLINE(3310)			this->body->setBounciness(value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setBounciness,(void))

void Actor_obj::setMass(Float newMass){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3316_setMass)
HXDLIN(3316)		if ((this->physicsMode == (int)0)) {
HXLINE(3318)			this->md->mass = newMass;
HXLINE(3319)			this->body->setMassData(this->md);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setMass,(void))

void Actor_obj::setAngularMass(Float newAMass){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3325_setAngularMass)
HXDLIN(3325)		if ((this->physicsMode == (int)0)) {
HXLINE(3327)			this->md->I = newAMass;
HXLINE(3328)			this->body->setMassData(this->md);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setAngularMass,(void))

void Actor_obj::setLinearDamping(Float newDamping){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3334_setLinearDamping)
HXDLIN(3334)		if ((this->physicsMode == (int)0)) {
HXLINE(3336)			this->body->setLinearDamping(newDamping);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setLinearDamping,(void))

void Actor_obj::setAngularDamping(Float newDamping){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3342_setAngularDamping)
HXDLIN(3342)		if ((this->physicsMode == (int)0)) {
HXLINE(3344)			this->body->setAngularDamping(newDamping);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setAngularDamping,(void))

bool Actor_obj::isMouseOver(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3353_isMouseOver)
HXLINE(3354)		Float mx;
HXLINE(3355)		Float my;
HXLINE(3357)		if (this->isHUD) {
HXLINE(3359)			Float mx1 = ::com::stencyl::Input_obj::mouseX;
HXDLIN(3359)			Float mx2 = (mx1 - ::com::stencyl::Engine_obj::engine->hudLayer->get_x());
HXDLIN(3359)			mx = ((Float)mx2 / (Float)::com::stencyl::Engine_obj::SCALE);
HXLINE(3360)			Float my1 = ::com::stencyl::Input_obj::mouseY;
HXDLIN(3360)			Float my2 = (my1 - ::com::stencyl::Engine_obj::engine->hudLayer->get_y());
HXDLIN(3360)			my = ((Float)my2 / (Float)::com::stencyl::Engine_obj::SCALE);
            		}
            		else {
HXLINE(3365)			Float mx3 = ::com::stencyl::Input_obj::mouseX;
HXDLIN(3365)			mx = ((Float)(mx3 + (::com::stencyl::Engine_obj::cameraX * this->layer->scrollFactorX)) / (Float)::com::stencyl::Engine_obj::SCALE);
HXLINE(3366)			Float my3 = ::com::stencyl::Input_obj::mouseY;
HXDLIN(3366)			my = ((Float)(my3 + (::com::stencyl::Engine_obj::cameraY * this->layer->scrollFactorY)) / (Float)::com::stencyl::Engine_obj::SCALE);
            		}
HXLINE(3372)		Float scaleXAbs = ::Math_obj::abs(this->get_scaleX());
HXLINE(3373)		Float scaleYAbs = ::Math_obj::abs(this->get_scaleY());
HXLINE(3374)		Float offsetLeft = this->currOrigin->x;
HXDLIN(3374)		Float offsetLeft1 = (offsetLeft * (scaleXAbs - (int)1));
HXLINE(3375)		Float offsetRight = (this->cacheWidth - this->currOrigin->x);
HXDLIN(3375)		Float offsetRight1 = (offsetRight * (scaleXAbs - (int)1));
HXLINE(3376)		Float offsetUp = this->currOrigin->y;
HXDLIN(3376)		Float offsetUp1 = (offsetUp * (scaleYAbs - (int)1));
HXLINE(3377)		Float offsetDown = (this->cacheHeight - this->currOrigin->y);
HXDLIN(3377)		Float offsetDown1 = (offsetDown * (scaleYAbs - (int)1));
HXLINE(3380)		if ((this->physicsMode != (int)0)) {
HXLINE(3383)			bool _hx_tmp;
HXDLIN(3383)			Float _hx_tmp1 = this->currOrigin->x;
HXDLIN(3383)			if ((_hx_tmp1 == ((Float)this->cacheWidth / (Float)(int)2))) {
HXLINE(3383)				Float _hx_tmp2 = this->currOrigin->y;
HXDLIN(3383)				_hx_tmp = (_hx_tmp2 != ((Float)this->cacheHeight / (Float)(int)2));
            			}
            			else {
HXLINE(3383)				_hx_tmp = true;
            			}
HXDLIN(3383)			if (_hx_tmp) {
HXLINE(3385)				this->resetReal(this->realX,this->realY);
            			}
            		}
HXLINE(3389)		Float xPos = (this->colX - offsetLeft1);
HXLINE(3390)		Float yPos = (this->colY - offsetUp1);
HXLINE(3392)		if ((this->get_rotation() != (int)0)) {
HXLINE(3396)			Float actorOriginX = (xPos + (this->currOrigin->x * scaleXAbs));
HXLINE(3397)			Float actorOriginY = (yPos + (this->currOrigin->y * scaleYAbs));
HXLINE(3398)			Float xFromOrigin = (mx - actorOriginX);
HXLINE(3399)			Float yFromOrigin = (my - actorOriginY);
HXLINE(3400)			Float rotationRadians = (((Float)0.017453292519942779) * this->get_rotation());
HXLINE(3401)			Float mxNew = (actorOriginX + (xFromOrigin * ::Math_obj::cos(rotationRadians)));
HXDLIN(3401)			Float mxNew1 = (mxNew + (yFromOrigin * ::Math_obj::sin(rotationRadians)));
HXLINE(3402)			Float myNew = (actorOriginY - (xFromOrigin * ::Math_obj::sin(rotationRadians)));
HXDLIN(3402)			Float myNew1 = (myNew + (yFromOrigin * ::Math_obj::cos(rotationRadians)));
HXLINE(3403)			mx = mxNew1;
HXLINE(3404)			my = myNew1;
            		}
HXLINE(3407)		bool _hx_tmp3;
HXDLIN(3407)		if (this->isHUD) {
HXLINE(3407)			_hx_tmp3 = !(::com::stencyl::Engine_obj::engine->isHUDZoomable);
            		}
            		else {
HXLINE(3407)			_hx_tmp3 = false;
            		}
HXDLIN(3407)		if (_hx_tmp3) {
HXLINE(3409)			bool _hx_tmp4;
HXDLIN(3409)			bool _hx_tmp5;
HXDLIN(3409)			if ((mx >= ((Float)xPos / (Float)::com::stencyl::Engine_obj::engine->zoomMultiplier))) {
HXLINE(3409)				_hx_tmp5 = (my >= ((Float)yPos / (Float)::com::stencyl::Engine_obj::engine->zoomMultiplier));
            			}
            			else {
HXLINE(3409)				_hx_tmp5 = false;
            			}
HXDLIN(3409)			if (_hx_tmp5) {
HXLINE(3409)				_hx_tmp4 = (mx < ((Float)(((xPos + this->cacheWidth) + offsetLeft1) + offsetRight1) / (Float)::com::stencyl::Engine_obj::engine->zoomMultiplier));
            			}
            			else {
HXLINE(3409)				_hx_tmp4 = false;
            			}
HXDLIN(3409)			if (_hx_tmp4) {
HXLINE(3412)				return (my < ((Float)(((yPos + this->cacheHeight) + offsetUp1) + offsetDown1) / (Float)::com::stencyl::Engine_obj::engine->zoomMultiplier));
            			}
            			else {
HXLINE(3409)				return false;
            			}
            		}
            		else {
HXLINE(3416)			bool _hx_tmp6;
HXDLIN(3416)			bool _hx_tmp7;
HXDLIN(3416)			if ((mx >= xPos)) {
HXLINE(3416)				_hx_tmp7 = (my >= yPos);
            			}
            			else {
HXLINE(3416)				_hx_tmp7 = false;
            			}
HXDLIN(3416)			if (_hx_tmp7) {
HXLINE(3416)				_hx_tmp6 = (mx < (((xPos + this->cacheWidth) + offsetLeft1) + offsetRight1));
            			}
            			else {
HXLINE(3416)				_hx_tmp6 = false;
            			}
HXDLIN(3416)			if (_hx_tmp6) {
HXLINE(3419)				return (my < (((yPos + this->cacheHeight) + offsetUp1) + offsetDown1));
            			}
            			else {
HXLINE(3416)				return false;
            			}
            		}
HXLINE(3407)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isMouseOver,return )

bool Actor_obj::isMouseHover(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3425_isMouseHover)
HXDLIN(3425)		if (this->isMouseOver()) {
HXDLIN(3425)			return !(::com::stencyl::Input_obj::mouseDown);
            		}
            		else {
HXDLIN(3425)			return false;
            		}
HXDLIN(3425)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isMouseHover,return )

bool Actor_obj::isMouseDown(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3430_isMouseDown)
HXDLIN(3430)		if (this->isMouseOver()) {
HXDLIN(3430)			return ::com::stencyl::Input_obj::mouseDown;
            		}
            		else {
HXDLIN(3430)			return false;
            		}
HXDLIN(3430)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isMouseDown,return )

bool Actor_obj::isMousePressed(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3435_isMousePressed)
HXDLIN(3435)		if (this->isMouseOver()) {
HXDLIN(3435)			return ::com::stencyl::Input_obj::mousePressed;
            		}
            		else {
HXDLIN(3435)			return false;
            		}
HXDLIN(3435)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isMousePressed,return )

bool Actor_obj::isMouseReleased(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3440_isMouseReleased)
HXDLIN(3440)		if (this->isMouseOver()) {
HXDLIN(3440)			return ::com::stencyl::Input_obj::mouseReleased;
            		}
            		else {
HXDLIN(3440)			return false;
            		}
HXDLIN(3440)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isMouseReleased,return )

void Actor_obj::cancelTweens(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3449_cancelTweens)
HXDLIN(3449)		this->tweenProps->cancel();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,cancelTweens,(void))

void Actor_obj::fadeTo(Float value,hx::Null< Float >  __o_duration, ::com::stencyl::utils::motion::EasingFunction easing){
Float duration = __o_duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3454_fadeTo)
HXDLIN(3454)		 ::com::stencyl::utils::motion::TweenFloat _hx_tmp = this->tweenProps->alpha;
HXDLIN(3454)		Float _hx_tmp1 = this->get_alpha();
HXDLIN(3454)		_hx_tmp->tween(_hx_tmp1,value,easing,::Std_obj::_hx_int((duration * (int)1000)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,fadeTo,(void))

void Actor_obj::growTo(hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,hx::Null< Float >  __o_duration, ::com::stencyl::utils::motion::EasingFunction easing){
Float scaleX = __o_scaleX.Default(1);
Float scaleY = __o_scaleY.Default(1);
Float duration = __o_duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3459_growTo)
HXDLIN(3459)		 ::com::stencyl::utils::motion::TweenFloat2 _hx_tmp = this->tweenProps->realScaleXY;
HXDLIN(3459)		Float _hx_tmp1 = this->realScaleX;
HXDLIN(3459)		Float _hx_tmp2 = this->realScaleY;
HXDLIN(3459)		_hx_tmp->tween(_hx_tmp1,scaleX,_hx_tmp2,scaleY,easing,::Std_obj::_hx_int((duration * (int)1000)));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Actor_obj,growTo,(void))

void Actor_obj::spinTo(Float angle,hx::Null< Float >  __o_duration, ::com::stencyl::utils::motion::EasingFunction easing){
Float duration = __o_duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3465_spinTo)
HXDLIN(3465)		 ::com::stencyl::utils::motion::TweenFloat _hx_tmp = this->tweenProps->angle;
HXDLIN(3465)		Float _hx_tmp1 = this->getAngleInDegrees();
HXDLIN(3465)		_hx_tmp->tween(_hx_tmp1,angle,easing,::Std_obj::_hx_int((duration * (int)1000)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,spinTo,(void))

void Actor_obj::moveTo(Float x,Float y,hx::Null< Float >  __o_duration, ::com::stencyl::utils::motion::EasingFunction easing){
Float duration = __o_duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3470_moveTo)
HXDLIN(3470)		 ::com::stencyl::utils::motion::TweenFloat2 _hx_tmp = this->tweenProps->xy;
HXDLIN(3470)		Float _hx_tmp1 = this->getX(false);
HXDLIN(3470)		Float _hx_tmp2 = this->getY(false);
HXDLIN(3470)		_hx_tmp->tween(_hx_tmp1,x,_hx_tmp2,y,easing,::Std_obj::_hx_int((duration * (int)1000)));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Actor_obj,moveTo,(void))

void Actor_obj::spinBy(Float angle,hx::Null< Float >  __o_duration, ::com::stencyl::utils::motion::EasingFunction easing){
Float duration = __o_duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3476_spinBy)
HXDLIN(3476)		this->spinTo((this->getAngleInDegrees() + angle),duration,easing);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,spinBy,(void))

void Actor_obj::moveBy(Float x,Float y,hx::Null< Float >  __o_duration, ::com::stencyl::utils::motion::EasingFunction easing){
Float duration = __o_duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3481_moveBy)
HXDLIN(3481)		Float _hx_tmp = (this->getX(false) + x);
HXDLIN(3481)		this->moveTo(_hx_tmp,(this->getY(false) + y),duration,easing);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Actor_obj,moveBy,(void))

void Actor_obj::drawImage( ::com::stencyl::graphics::G g){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_3491_drawImage)
HXDLIN(3491)		if (hx::IsNotNull( this->currAnimation )) {
HXLINE(3493)			Float x = (int)0;
HXLINE(3494)			Float y = (int)0;
HXLINE(3511)			if ((this->realAngle > (int)0)) {
HXLINE(3513)				this->drawMatrix->identity();
HXLINE(3514)				this->transformPoint->x = (((int)0 - ((Float)this->cacheWidth / (Float)(int)2)) * ::com::stencyl::Engine_obj::SCALE);
HXLINE(3515)				this->transformPoint->y = (((int)0 - ((Float)this->cacheHeight / (Float)(int)2)) * ::com::stencyl::Engine_obj::SCALE);
HXLINE(3517)				this->drawMatrix->translate(-(this->transformPoint->x),-(this->transformPoint->y));
HXLINE(3518)				this->drawMatrix->scale(this->realScaleX,this->realScaleY);
HXLINE(3519)				 ::openfl::geom::Matrix _hx_tmp = this->drawMatrix;
HXDLIN(3519)				_hx_tmp->rotate((this->realAngle * ((Float)0.017453292519942779)));
HXLINE(3521)				 ::openfl::geom::Matrix _hx_tmp1 = this->drawMatrix;
HXDLIN(3521)				Float _hx_tmp2 = (this->colX * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(3521)				_hx_tmp1->translate(_hx_tmp2,(this->colY * ::com::stencyl::Engine_obj::SCALE));
HXLINE(3523)				x = (x + (this->transformMatrix->tx - this->drawMatrix->tx));
HXLINE(3524)				y = (y + (this->transformMatrix->ty - this->drawMatrix->ty));
            			}
HXLINE(3527)			bool visibleCache = this->currAnimation->get_visible();
HXLINE(3528)			this->currAnimation->set_visible(true);
HXLINE(3529)			{
HXLINE(3529)				 ::com::stencyl::graphics::BitmapAnimation _this = this->currAnimation;
HXDLIN(3529)				Float angle = (this->realAngle * ((Float)0.017453292519942779));
HXDLIN(3529)				Float alpha = g->alpha;
HXDLIN(3529)				bool _hx_tmp3;
HXDLIN(3529)				if (::com::stencyl::Config_obj::disposeImages) {
HXLINE(3529)					_hx_tmp3 = !(_this->model->checkImageReadable());
            				}
            				else {
HXLINE(3529)					_hx_tmp3 = false;
            				}
HXDLIN(3529)				if (!(_hx_tmp3)) {
HXLINE(3529)					 ::openfl::display::BitmapData img = _this->get_bitmapData();
HXDLIN(3529)					Float x1 = x;
HXDLIN(3529)					Float y1 = y;
HXDLIN(3529)					x1 = (x1 * g->scaleX);
HXDLIN(3529)					y1 = (y1 * g->scaleY);
HXDLIN(3529)					g->rect->x = (int)0;
HXDLIN(3529)					g->rect->y = (int)0;
HXDLIN(3529)					g->rect->width = img->width;
HXDLIN(3529)					g->rect->height = img->height;
HXDLIN(3529)					if (g->drawActor) {
HXLINE(3529)						bool _hx_tmp4;
HXDLIN(3529)						if (hx::IsNotNull( g->actor )) {
HXLINE(3529)							_hx_tmp4 = g->actor->isHUD;
            						}
            						else {
HXLINE(3529)							_hx_tmp4 = false;
            						}
HXDLIN(3529)						if (_hx_tmp4) {
HXLINE(3529)							g->point->x = (g->x + x1);
HXDLIN(3529)							g->point->y = (g->y + y1);
            						}
            						else {
HXLINE(3529)							g->point->x = ((g->x + x1) - ::com::stencyl::Engine_obj::cameraX);
HXDLIN(3529)							g->point->y = ((g->y + y1) - ::com::stencyl::Engine_obj::cameraY);
            						}
            					}
            					else {
HXLINE(3529)						g->point->x = (g->x + x1);
HXDLIN(3529)						g->point->y = (g->y + y1);
            					}
HXDLIN(3529)					 ::openfl::display::BitmapData newImg = null();
HXDLIN(3529)					int imgSize = (int)0;
HXDLIN(3529)					g->mtx->identity();
HXDLIN(3529)					g->mtx->rotate(angle);
HXDLIN(3529)					g->mtx->translate(g->point->x,g->point->y);
HXDLIN(3529)					if ((angle == (int)0)) {
HXLINE(3529)						if ((g->alpha == (int)1)) {
HXLINE(3529)							g->graphics->beginBitmapFill(img,g->mtx,null(),null());
            						}
            						else {
HXLINE(3529)							g->point2->x = (int)0;
HXDLIN(3529)							g->point2->y = (int)0;
HXDLIN(3529)							g->rect2->width = img->width;
HXDLIN(3529)							g->rect2->height = img->height;
HXDLIN(3529)							int img1 = img->width;
HXDLIN(3529)							int img2 = img->height;
HXDLIN(3529)							 ::openfl::display::BitmapData temp =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,img1,img2,true,g->toARGB((int)0,::Std_obj::_hx_int((g->alpha * (int)255))));
HXDLIN(3529)							 ::openfl::display::BitmapData temp2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,img->width,img->height,true,(int)0);
HXDLIN(3529)							temp2->copyPixels(img,g->rect2,g->point2,temp,null(),true);
HXDLIN(3529)							img = temp2;
HXDLIN(3529)							g->graphics->beginBitmapFill(img,g->mtx,null(),null());
            						}
HXDLIN(3529)						g->graphics->drawRect(g->point->x,g->point->y,img->width,img->height);
            					}
            					else {
HXLINE(3529)						if ((g->alpha != (int)1)) {
HXLINE(3529)							g->point2->x = (int)0;
HXDLIN(3529)							g->point2->y = (int)0;
HXDLIN(3529)							g->rect2->width = img->width;
HXDLIN(3529)							g->rect2->height = img->height;
HXDLIN(3529)							int img3 = img->width;
HXDLIN(3529)							int img4 = img->height;
HXDLIN(3529)							 ::openfl::display::BitmapData temp1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,img3,img4,true,g->toARGB((int)0,::Std_obj::_hx_int((g->alpha * (int)255))));
HXDLIN(3529)							 ::openfl::display::BitmapData temp21 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,img->width,img->height,true,(int)0);
HXDLIN(3529)							temp21->copyPixels(img,g->rect2,g->point2,temp1,null(),true);
HXDLIN(3529)							img = temp21;
            						}
HXDLIN(3529)						int newImg1 = (img->width + (int)2);
HXDLIN(3529)						newImg =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,newImg1,(img->height + (int)2),true,(int)0);
HXDLIN(3529)						Float imgSize1 = ::Math_obj::pow(newImg->width,(int)2);
HXDLIN(3529)						imgSize = ::Std_obj::_hx_int(::Math_obj::sqrt((imgSize1 + ::Math_obj::pow(newImg->height,(int)2))));
HXDLIN(3529)						 ::openfl::geom::Rectangle srcRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,img->width,img->height);
HXDLIN(3529)						 ::openfl::geom::Point destPt =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)1,(int)1);
HXDLIN(3529)						newImg->copyPixels(img,srcRect,destPt,null(),null(),null());
HXDLIN(3529)						g->graphics->beginBitmapFill(newImg,g->mtx,false,::com::stencyl::Config_obj::antialias);
HXDLIN(3529)						Float rectX = ((Float)(imgSize - img->width) / (Float)(int)2);
HXDLIN(3529)						Float rectY = ((Float)(imgSize - img->height) / (Float)(int)2);
HXDLIN(3529)						 ::openfl::display::Graphics g1 = g->graphics;
HXDLIN(3529)						Float _hx_tmp5 = (g->x - rectX);
HXDLIN(3529)						g1->drawRect(_hx_tmp5,(g->y - rectY),imgSize,imgSize);
            					}
HXDLIN(3529)					g->graphics->endFill();
            				}
            			}
HXLINE(3530)			this->currAnimation->set_visible(visibleCache);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,drawImage,(void))

 ::openfl::display::BitmapData Actor_obj::getCurrentImage(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3536_getCurrentImage)
HXDLIN(3536)		return this->currAnimation->getCurrentImage();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getCurrentImage,return )

void Actor_obj::enableActorDrawing(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3540_enableActorDrawing)
HXLINE(3541)		this->drawActor = true;
HXLINE(3543)		if (hx::IsNotNull( this->currAnimation )) {
HXLINE(3545)			this->currAnimation->set_visible(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,enableActorDrawing,(void))

void Actor_obj::disableActorDrawing(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3550_disableActorDrawing)
HXLINE(3551)		this->drawActor = false;
HXLINE(3553)		if (hx::IsNotNull( this->currAnimation )) {
HXLINE(3555)			this->currAnimation->set_visible(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,disableActorDrawing,(void))

bool Actor_obj::drawsImage(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3561_drawsImage)
HXDLIN(3561)		return this->drawActor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,drawsImage,return )

void Actor_obj::setFilter(::Array< ::Dynamic> filter){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3569_setFilter)
HXLINE(3571)		if (hx::IsNull( this->bitmapFilters )) {
HXLINE(3572)			this->bitmapFilters = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(3573)		this->bitmapFilters = this->bitmapFilters->concat(filter);
HXLINE(3574)		this->currAnimation->set_filter(this->bitmapFilters);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setFilter,(void))

void Actor_obj::clearFilters(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3581_clearFilters)
HXLINE(3583)		this->bitmapFilters = null();
HXLINE(3584)		this->currAnimation->set_filter(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,clearFilters,(void))

void Actor_obj::setBlendMode( ::Dynamic blendMode){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3593_setBlendMode)
HXDLIN(3593)		this->set_blendMode(blendMode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,setBlendMode,(void))

void Actor_obj::resetBlendMode(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3600_resetBlendMode)
HXDLIN(3600)		this->set_blendMode((int)10);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,resetBlendMode,(void))

void Actor_obj::addBehavior( ::com::stencyl::behavior::Behavior b){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3610_addBehavior)
HXDLIN(3610)		if (hx::IsNotNull( this->behaviors )) {
HXLINE(3612)			this->behaviors->add(b);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,addBehavior,(void))

bool Actor_obj::hasBehavior(::String name){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3617_hasBehavior)
HXLINE(3618)		if (hx::IsNotNull( this->behaviors )) {
HXLINE(3620)			return this->behaviors->hasBehavior(name);
            		}
HXLINE(3623)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,hasBehavior,return )

void Actor_obj::enableBehavior(::String name){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3628_enableBehavior)
HXDLIN(3628)		if (hx::IsNotNull( this->behaviors )) {
HXLINE(3630)			this->behaviors->enableBehavior(name);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,enableBehavior,(void))

void Actor_obj::disableBehavior(::String name){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3636_disableBehavior)
HXDLIN(3636)		if (hx::IsNotNull( this->behaviors )) {
HXLINE(3638)			this->behaviors->disableBehavior(name);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,disableBehavior,(void))

bool Actor_obj::isBehaviorEnabled(::String name){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3643_isBehaviorEnabled)
HXLINE(3644)		if (hx::IsNotNull( this->behaviors )) {
HXLINE(3646)			return this->behaviors->isBehaviorEnabled(name);
            		}
HXLINE(3649)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,isBehaviorEnabled,return )

void Actor_obj::enableAllBehaviors(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3654_enableAllBehaviors)
HXDLIN(3654)		if (hx::IsNotNull( this->behaviors )) {
HXLINE(3656)			int _g = (int)0;
HXDLIN(3656)			::Array< ::Dynamic> _g1 = this->behaviors->behaviors;
HXDLIN(3656)			while((_g < _g1->length)){
HXLINE(3656)				 ::com::stencyl::behavior::Behavior b = _g1->__get(_g).StaticCast<  ::com::stencyl::behavior::Behavior >();
HXDLIN(3656)				_g = (_g + (int)1);
HXLINE(3658)				b->enabled = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,enableAllBehaviors,(void))

 ::Dynamic Actor_obj::getValue(::String behaviorName,::String attributeName){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3669_getValue)
HXDLIN(3669)		return this->behaviors->getAttribute(behaviorName,attributeName);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,getValue,return )

void Actor_obj::setValue(::String behaviorName,::String attributeName, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3674_setValue)
HXDLIN(3674)		this->behaviors->setAttribute(behaviorName,attributeName,value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,setValue,(void))

 ::Dynamic Actor_obj::shout(::String msg,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3679_shout)
HXDLIN(3679)		return this->behaviors->call(msg,args);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,shout,return )

 ::Dynamic Actor_obj::say(::String behaviorName,::String msg,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3684_say)
HXDLIN(3684)		return this->behaviors->call2(behaviorName,msg,args);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,say,return )

void Actor_obj::setActorValue(::String name, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3693_setActorValue)
HXDLIN(3693)		if (hx::IsNotNull( this->registry )) {
HXLINE(3695)			this->registry->set(name,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,setActorValue,(void))

 ::Dynamic Actor_obj::getActorValue(::String name){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3701_getActorValue)
HXDLIN(3701)		if (hx::IsNull( this->registry )) {
HXLINE(3703)			return null();
            		}
            		else {
HXLINE(3708)			return this->registry->get(name);
            		}
HXLINE(3701)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,getActorValue,return )

 ::Dynamic Actor_obj::hasActorValue(::String name){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3713_hasActorValue)
HXLINE(3714)		if (hx::IsNull( this->registry )) {
HXLINE(3716)			return null();
            		}
HXLINE(3719)		return hx::IsNotNull( this->registry->get(name) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,hasActorValue,return )

void Actor_obj::registerListener(::cpp::VirtualArray type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3727_registerListener)
HXLINE(3728)		int ePos = ::com::stencyl::utils::Utils_obj::indexOf(this->allListenerReferences,type);
HXLINE(3730)		::cpp::VirtualArray listenerList = null();
HXLINE(3732)		if ((ePos != (int)-1)) {
HXLINE(3734)			listenerList = ( (::cpp::VirtualArray)(this->allListeners->get(ePos)) );
            		}
            		else {
HXLINE(3739)			this->allListenerReferences->push(type);
HXLINE(3740)			ePos = (this->allListenerReferences->get_length() - (int)1);
HXLINE(3742)			listenerList = ::cpp::VirtualArray_obj::__new();
HXLINE(3743)			this->allListeners->set(ePos,listenerList);
            		}
HXLINE(3746)		listenerList->push(listener);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,registerListener,(void))

void Actor_obj::removeAllListeners(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3750_removeAllListeners)
HXLINE(3751)		{
HXLINE(3751)			int _g1 = (int)0;
HXDLIN(3751)			int _g = this->allListenerReferences->get_length();
HXDLIN(3751)			while((_g1 < _g)){
HXLINE(3751)				_g1 = (_g1 + (int)1);
HXDLIN(3751)				int k = (_g1 - (int)1);
HXLINE(3753)				::cpp::VirtualArray listener = ( (::cpp::VirtualArray)(this->allListenerReferences->__get(k)) );
HXLINE(3755)				if (hx::IsNotNull( listener )) {
HXLINE(3757)					::cpp::VirtualArray list = hx::TCast< ::cpp::VirtualArray >::cast(this->allListeners->get(k));
HXLINE(3759)					if (hx::IsNotNull( list )) {
HXLINE(3761)						int _g3 = (int)0;
HXDLIN(3761)						int _g2 = list->get_length();
HXDLIN(3761)						while((_g3 < _g2)){
HXLINE(3761)							_g3 = (_g3 + (int)1);
HXDLIN(3761)							int r = (_g3 - (int)1);
HXLINE(3763)							{
HXLINE(3763)								 ::Dynamic value = list->__get(r);
HXDLIN(3763)								int len = listener->get_length();
HXDLIN(3763)								int i = (len - (int)1);
HXDLIN(3763)								while((i > (int)-1)){
HXLINE(3763)									if (hx::IsEq( listener->__get(i),value )) {
HXLINE(3763)										listener->splice(i,(int)1);
            									}
HXDLIN(3763)									i = (i - (int)1);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(3769)		{
HXLINE(3769)			::cpp::VirtualArray arr = this->allListenerReferences;
HXDLIN(3769)			arr->splice((int)0,arr->get_length());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,removeAllListeners,(void))

void Actor_obj::anchorToScreen(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3777_anchorToScreen)
HXLINE(3778)		if (this->isHUD) {
HXLINE(3779)			return;
            		}
HXLINE(3781)		this->engine->moveActorToLayer(hx::ObjectPtr<OBJ_>(this),this->engine->hudLayer);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,anchorToScreen,(void))

void Actor_obj::unanchorFromScreen(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3785_unanchorFromScreen)
HXLINE(3786)		if (!(this->isHUD)) {
HXLINE(3787)			return;
            		}
HXLINE(3789)		this->engine->moveActorToLayer(hx::ObjectPtr<OBJ_>(this),this->cachedLayer);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,unanchorFromScreen,(void))

bool Actor_obj::isAnchoredToScreen(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3794_isAnchoredToScreen)
HXDLIN(3794)		return this->isHUD;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isAnchoredToScreen,return )

void Actor_obj::makeAlwaysSimulate(hx::Null< bool >  __o_alterBody){
bool alterBody = __o_alterBody.Default(true);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3799_makeAlwaysSimulate)
HXDLIN(3799)		if (!(this->alwaysSimulate)) {
HXLINE(3801)			bool _hx_tmp;
HXDLIN(3801)			if ((this->physicsMode == (int)0)) {
HXLINE(3801)				_hx_tmp = alterBody;
            			}
            			else {
HXLINE(3801)				_hx_tmp = false;
            			}
HXDLIN(3801)			if (_hx_tmp) {
HXLINE(3803)				this->body->setAlwaysActive(true);
HXLINE(3804)				this->body->setActive(true);
            			}
HXLINE(3807)			this->alwaysSimulate = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,makeAlwaysSimulate,(void))

void Actor_obj::makeSometimesSimulate(hx::Null< bool >  __o_alterBody){
bool alterBody = __o_alterBody.Default(true);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3813_makeSometimesSimulate)
HXDLIN(3813)		if (this->alwaysSimulate) {
HXLINE(3815)			bool _hx_tmp;
HXDLIN(3815)			if ((this->physicsMode == (int)0)) {
HXLINE(3815)				_hx_tmp = alterBody;
            			}
            			else {
HXLINE(3815)				_hx_tmp = false;
            			}
HXDLIN(3815)			if (_hx_tmp) {
HXLINE(3817)				this->body->setAlwaysActive(false);
HXLINE(3818)				this->body->setActive(false);
            			}
HXLINE(3821)			this->alwaysSimulate = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,makeSometimesSimulate,(void))

bool Actor_obj::alwaysSimulates(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3827_alwaysSimulates)
HXDLIN(3827)		return this->alwaysSimulate;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,alwaysSimulates,return )

void Actor_obj::die(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3831_die)
HXLINE(3832)		this->dying = true;
HXLINE(3834)		 ::haxe::ds::ObjectMap a = this->engine->whenTypeGroupDiesListeners;
HXDLIN(3834)		 ::Dynamic a1 = a->get(this->getType());
HXLINE(3835)		 ::haxe::ds::ObjectMap b = this->engine->whenTypeGroupDiesListeners;
HXDLIN(3835)		 ::Dynamic b1 = b->get(this->getGroup());
HXLINE(3837)		{
HXLINE(3837)			::cpp::VirtualArray listeners = this->whenKilledListeners;
HXDLIN(3837)			int r = (int)0;
HXDLIN(3837)			while((r < listeners->get_length())){
HXLINE(3837)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3837)					 ::Dynamic f = listeners->__get(r);
HXDLIN(3837)					f(listeners);
HXDLIN(3837)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(3837)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE(3837)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(3837)				r = (r + (int)1);
            			}
            		}
HXLINE(3839)		if (hx::IsNotNull( a1 )) {
HXLINE(3841)			::cpp::VirtualArray listeners1 = ( (::cpp::VirtualArray)(a1) );
HXDLIN(3841)			int r1 = (int)0;
HXDLIN(3841)			while((r1 < listeners1->get_length())){
HXLINE(3841)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3841)					 ::Dynamic f1 = listeners1->__get(r1);
HXDLIN(3841)					f1(hx::ObjectPtr<OBJ_>(this),listeners1);
HXDLIN(3841)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f1) == (int)-1)) {
HXLINE(3841)						r1 = (r1 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE(3841)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(3841)				r1 = (r1 + (int)1);
            			}
            		}
HXLINE(3844)		if (hx::IsNotNull( b1 )) {
HXLINE(3846)			::cpp::VirtualArray listeners2 = ( (::cpp::VirtualArray)(b1) );
HXDLIN(3846)			int r2 = (int)0;
HXDLIN(3846)			while((r2 < listeners2->get_length())){
HXLINE(3846)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3846)					 ::Dynamic f2 = listeners2->__get(r2);
HXDLIN(3846)					f2(hx::ObjectPtr<OBJ_>(this),listeners2);
HXDLIN(3846)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners2,f2) == (int)-1)) {
HXLINE(3846)						r2 = (r2 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e2 = _hx_e;
HXLINE(3846)						::haxe::Log_obj::trace(e2,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(3846)				r2 = (r2 + (int)1);
            			}
            		}
HXLINE(3849)		this->removeAllListeners();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,die,(void))

bool Actor_obj::isDying(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3854_isDying)
HXDLIN(3854)		return this->dying;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isDying,return )

bool Actor_obj::isAlive(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3859_isAlive)
HXDLIN(3859)		bool _hx_tmp;
HXDLIN(3859)		bool _hx_tmp1;
HXDLIN(3859)		if (!(this->dead)) {
HXDLIN(3859)			_hx_tmp1 = this->dying;
            		}
            		else {
HXDLIN(3859)			_hx_tmp1 = true;
            		}
HXDLIN(3859)		if (!(_hx_tmp1)) {
HXDLIN(3859)			_hx_tmp = this->recycled;
            		}
            		else {
HXDLIN(3859)			_hx_tmp = true;
            		}
HXDLIN(3859)		return !(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isAlive,return )

bool Actor_obj::isOnScreen(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3864_isOnScreen)
HXLINE(3865)		Float cameraX = ((Float)::com::stencyl::Engine_obj::cameraX / (Float)::com::stencyl::Engine_obj::SCALE);
HXLINE(3866)		Float cameraY = ((Float)::com::stencyl::Engine_obj::cameraY / (Float)::com::stencyl::Engine_obj::SCALE);
HXLINE(3868)		int left = ::com::stencyl::Engine_obj::paddingLeft;
HXLINE(3869)		int top = ::com::stencyl::Engine_obj::paddingTop;
HXLINE(3870)		int right = ::com::stencyl::Engine_obj::paddingRight;
HXLINE(3871)		int bottom = ::com::stencyl::Engine_obj::paddingBottom;
HXLINE(3873)		bool _hx_tmp;
HXDLIN(3873)		bool _hx_tmp1;
HXDLIN(3873)		bool _hx_tmp2;
HXDLIN(3873)		bool _hx_tmp3;
HXDLIN(3873)		if ((this->physicsMode == (int)0)) {
HXLINE(3873)			_hx_tmp3 = this->body->isActive();
            		}
            		else {
HXLINE(3873)			_hx_tmp3 = true;
            		}
HXDLIN(3873)		if (_hx_tmp3) {
HXLINE(3874)			Float _hx_tmp4 = this->getX(true);
HXDLIN(3874)			Float _hx_tmp5 = (_hx_tmp4 + this->cacheWidth);
HXLINE(3873)			_hx_tmp2 = (_hx_tmp5 >= (cameraX - left));
            		}
            		else {
HXLINE(3873)			_hx_tmp2 = false;
            		}
HXDLIN(3873)		if (_hx_tmp2) {
HXLINE(3875)			Float _hx_tmp6 = this->getY(true);
HXDLIN(3875)			Float _hx_tmp7 = (_hx_tmp6 + this->cacheHeight);
HXLINE(3873)			_hx_tmp1 = (_hx_tmp7 >= (cameraY - top));
            		}
            		else {
HXLINE(3873)			_hx_tmp1 = false;
            		}
HXDLIN(3873)		if (_hx_tmp1) {
HXLINE(3876)			Float _hx_tmp8 = this->getX(true);
HXLINE(3873)			_hx_tmp = (_hx_tmp8 < ((cameraX + ::com::stencyl::Engine_obj::screenWidth) + right));
            		}
            		else {
HXLINE(3873)			_hx_tmp = false;
            		}
HXDLIN(3873)		if (_hx_tmp) {
HXLINE(3877)			Float _hx_tmp9 = this->getY(true);
HXDLIN(3877)			return (_hx_tmp9 < ((cameraY + ::com::stencyl::Engine_obj::screenHeight) + bottom));
            		}
            		else {
HXLINE(3873)			return false;
            		}
HXDLIN(3873)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isOnScreen,return )

bool Actor_obj::isInScene(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3882_isInScene)
HXDLIN(3882)		bool _hx_tmp;
HXDLIN(3882)		bool _hx_tmp1;
HXDLIN(3882)		bool _hx_tmp2;
HXDLIN(3882)		bool _hx_tmp3;
HXDLIN(3882)		if ((this->physicsMode == (int)0)) {
HXDLIN(3882)			_hx_tmp3 = this->body->isActive();
            		}
            		else {
HXDLIN(3882)			_hx_tmp3 = true;
            		}
HXDLIN(3882)		if (_hx_tmp3) {
HXLINE(3883)			Float _hx_tmp4 = this->getX(true);
HXLINE(3882)			_hx_tmp2 = ((_hx_tmp4 + this->cacheWidth) >= (int)0);
            		}
            		else {
HXDLIN(3882)			_hx_tmp2 = false;
            		}
HXDLIN(3882)		if (_hx_tmp2) {
HXLINE(3884)			Float _hx_tmp5 = this->getY(true);
HXLINE(3882)			_hx_tmp1 = ((_hx_tmp5 + this->cacheHeight) >= (int)0);
            		}
            		else {
HXDLIN(3882)			_hx_tmp1 = false;
            		}
HXDLIN(3882)		if (_hx_tmp1) {
HXLINE(3885)			Float _hx_tmp6 = this->getX(true);
HXLINE(3882)			_hx_tmp = (_hx_tmp6 < ::com::stencyl::Engine_obj::sceneWidth);
            		}
            		else {
HXDLIN(3882)			_hx_tmp = false;
            		}
HXDLIN(3882)		if (_hx_tmp) {
HXLINE(3886)			Float _hx_tmp7 = this->getY(true);
HXDLIN(3886)			return (_hx_tmp7 < ::com::stencyl::Engine_obj::sceneHeight);
            		}
            		else {
HXDLIN(3882)			return false;
            		}
HXDLIN(3882)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,isInScene,return )

 ::com::stencyl::models::Actor Actor_obj::getLastCollidedActor(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3891_getLastCollidedActor)
HXDLIN(3891)		return ::com::stencyl::models::Actor_obj::lastCollided;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getLastCollidedActor,return )

void Actor_obj::killSelfAfterLeavingScreen(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3898_killSelfAfterLeavingScreen)
HXDLIN(3898)		this->killLeaveScreen = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,killSelfAfterLeavingScreen,(void))

::String Actor_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3902_toString)
HXLINE(3903)		if (hx::IsNull( this->get_name() )) {
HXLINE(3905)			return (HX_("Unknown Actor ",a1,6d,94,f6) + this->ID);
            		}
HXLINE(3908)		::String _hx_tmp = ((HX_("[Actor ",46,76,00,13) + this->ID) + HX_(",",2c,00,00,00));
HXDLIN(3908)		return ((_hx_tmp + this->get_name()) + HX_("]",5d,00,00,00));
            	}


void Actor_obj::addRectangularShape(Float x,Float y,Float w,Float h){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_3940_addRectangularShape)
HXDLIN(3940)		if ((this->physicsMode == (int)0)) {
HXLINE(3942)			 ::box2D::collision::shapes::B2PolygonShape polygon =  ::box2D::collision::shapes::B2PolygonShape_obj::__alloc( HX_CTX );
HXLINE(3943)			::Array< ::Dynamic> vertices = ::Array_obj< ::Dynamic>::__new();
HXLINE(3944)			x = ::com::stencyl::Engine_obj::toPhysicalUnits(((x - ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) - this->currOffset->x));
HXLINE(3945)			y = ::com::stencyl::Engine_obj::toPhysicalUnits(((y - ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) - this->currOffset->y));
HXLINE(3946)			w = ::com::stencyl::Engine_obj::toPhysicalUnits(w);
HXLINE(3947)			h = ::com::stencyl::Engine_obj::toPhysicalUnits(h);
HXLINE(3948)			vertices->push( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,x,y));
HXLINE(3949)			vertices->push( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,(x + w),y));
HXLINE(3950)			vertices->push( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,(x + w),(y + h)));
HXLINE(3951)			vertices->push( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,x,(y + h)));
HXLINE(3952)			polygon->setAsVector(vertices,null());
HXLINE(3953)			 ::box2D::dynamics::B2Fixture fixture = this->createFixture(polygon);
HXLINE(3954)			fixture->SetUserData(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Actor_obj,addRectangularShape,(void))

void Actor_obj::addCircularShape(Float x,Float y,Float r){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_3960_addCircularShape)
HXDLIN(3960)		if ((this->physicsMode == (int)0)) {
HXLINE(3962)			 ::box2D::collision::shapes::B2CircleShape circle =  ::box2D::collision::shapes::B2CircleShape_obj::__alloc( HX_CTX ,null());
HXLINE(3963)			circle->m_radius = ::com::stencyl::Engine_obj::toPhysicalUnits(r);
HXLINE(3964)			circle->m_p->x = ::com::stencyl::Engine_obj::toPhysicalUnits(x);
HXLINE(3965)			circle->m_p->y = ::com::stencyl::Engine_obj::toPhysicalUnits(y);
HXLINE(3966)			 ::box2D::dynamics::B2Fixture fixture = this->createFixture(circle);
HXLINE(3967)			fixture->SetUserData(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,addCircularShape,(void))

void Actor_obj::addVertex(::Array< ::Dynamic> vertices,Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_3972_addVertex)
HXLINE(3973)		x = ::com::stencyl::Engine_obj::toPhysicalUnits(((x - ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) - this->currOffset->x));
HXLINE(3974)		y = ::com::stencyl::Engine_obj::toPhysicalUnits(((y - ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) - this->currOffset->y));
HXLINE(3975)		vertices->push( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,x,y));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,addVertex,(void))

void Actor_obj::addPolygonalShape(::Array< ::Dynamic> vertices){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_3980_addPolygonalShape)
HXDLIN(3980)		if ((this->physicsMode == (int)0)) {
HXLINE(3982)			 ::box2D::collision::shapes::B2PolygonShape polygon =  ::box2D::collision::shapes::B2PolygonShape_obj::__alloc( HX_CTX );
HXLINE(3990)			polygon->setAsArray(vertices,null());
HXLINE(3991)			 ::box2D::dynamics::B2Fixture fixture = this->createFixture(polygon);
HXLINE(3992)			fixture->SetUserData(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,addPolygonalShape,(void))

 ::box2D::dynamics::B2Fixture Actor_obj::createFixture( ::box2D::collision::shapes::B2Shape newShape){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_3997_createFixture)
HXLINE(3998)		 ::box2D::dynamics::B2FixtureDef def =  ::box2D::dynamics::B2FixtureDef_obj::__alloc( HX_CTX );
HXLINE(3999)		def->shape = newShape;
HXLINE(4000)		def->density = (this->bodyDef->mass * ((Float)0.1));
HXLINE(4001)		def->friction = this->bodyDef->friction;
HXLINE(4002)		def->restitution = this->bodyDef->bounciness;
HXLINE(4003)		return this->body->createFixture(def);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,createFixture,return )

 ::box2D::dynamics::B2Fixture Actor_obj::getLastCreatedFixture(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4007_getLastCreatedFixture)
HXLINE(4008)		if ((this->physicsMode == (int)0)) {
HXLINE(4010)			return this->body->getFixtureList();
            		}
HXLINE(4012)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,getLastCreatedFixture,return )

void Actor_obj::setLocation(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4020_setLocation)
HXLINE(4021)		this->realX = x;
HXLINE(4022)		this->realY = y;
HXLINE(4024)		this->setXY(x,y,false,true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,setLocation,(void))

 ::com::stencyl::models::collision::Mask Actor_obj::get_shape(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4036_get_shape)
HXDLIN(4036)		return this->_mask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,get_shape,return )

 ::com::stencyl::models::collision::Mask Actor_obj::set_shape( ::com::stencyl::models::collision::Mask value){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4038_set_shape)
HXLINE(4039)		if (hx::IsEq( this->_mask,value )) {
HXLINE(4039)			return value;
            		}
HXLINE(4040)		if (hx::IsNotNull( this->_mask )) {
HXLINE(4040)			this->_mask->assignTo(null());
            		}
HXLINE(4041)		this->_mask = value;
HXLINE(4042)		if (hx::IsNotNull( value )) {
HXLINE(4042)			this->_mask->assignTo(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(4043)		return this->_mask;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,set_shape,return )

 ::com::stencyl::models::Actor Actor_obj::collide(int groupID,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4054_collide)
HXLINE(4056)		 ::com::stencyl::models::actor::Group actorList = this->engine->getGroup(groupID,null());
HXLINE(4058)		this->_x = this->realX;
HXDLIN(4058)		this->_y = this->realY;
HXLINE(4059)		this->resetReal(x,y);
HXLINE(4061)		if (hx::IsNull( this->_mask )) {
HXLINE(4063)			{
HXLINE(4063)				int _g = (int)0;
HXDLIN(4063)				::Array< ::Dynamic> _g1 = actorList->list;
HXDLIN(4063)				while((_g < _g1->length)){
HXLINE(4063)					 ::com::stencyl::models::Actor actor = _g1->__get(_g).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN(4063)					_g = (_g + (int)1);
HXLINE(4065)					 ::com::stencyl::models::Actor e = actor;
HXLINE(4067)					if (e->recycled) {
HXLINE(4069)						continue;
            					}
HXLINE(4072)					bool _hx_tmp;
HXDLIN(4072)					bool _hx_tmp1;
HXDLIN(4072)					bool _hx_tmp2;
HXDLIN(4072)					bool _hx_tmp3;
HXDLIN(4072)					bool _hx_tmp4;
HXDLIN(4072)					if (((this->colX + this->cacheWidth) >= e->colX)) {
HXLINE(4072)						_hx_tmp4 = ((this->colY + this->cacheHeight) >= e->colY);
            					}
            					else {
HXLINE(4072)						_hx_tmp4 = false;
            					}
HXDLIN(4072)					if (_hx_tmp4) {
HXLINE(4074)						Float _hx_tmp5 = this->colX;
HXLINE(4072)						_hx_tmp3 = (_hx_tmp5 <= (e->colX + e->cacheWidth));
            					}
            					else {
HXLINE(4072)						_hx_tmp3 = false;
            					}
HXDLIN(4072)					if (_hx_tmp3) {
HXLINE(4075)						Float _hx_tmp6 = this->colY;
HXLINE(4072)						_hx_tmp2 = (_hx_tmp6 <= (e->colY + e->cacheHeight));
            					}
            					else {
HXLINE(4072)						_hx_tmp2 = false;
            					}
HXDLIN(4072)					if (_hx_tmp2) {
HXLINE(4072)						_hx_tmp1 = e->collidable;
            					}
            					else {
HXLINE(4072)						_hx_tmp1 = false;
            					}
HXDLIN(4072)					if (_hx_tmp1) {
HXLINE(4072)						_hx_tmp = hx::IsNotEq( e,hx::ObjectPtr<OBJ_>(this) );
            					}
            					else {
HXLINE(4072)						_hx_tmp = false;
            					}
HXDLIN(4072)					if (_hx_tmp) {
HXLINE(4078)						bool _hx_tmp7;
HXDLIN(4078)						if (hx::IsNotNull( e->_mask )) {
HXLINE(4078)							_hx_tmp7 = e->_mask->collide(this->HITBOX);
            						}
            						else {
HXLINE(4078)							_hx_tmp7 = true;
            						}
HXDLIN(4078)						if (_hx_tmp7) {
HXLINE(4080)							this->colMask = e->_mask;
HXLINE(4081)							this->resetReal(this->_x,this->_y);
HXLINE(4083)							return e;
            						}
            					}
            				}
            			}
HXLINE(4088)			this->resetReal(this->_x,this->_y);
HXLINE(4089)			return null();
            		}
HXLINE(4092)		{
HXLINE(4092)			int _g2 = (int)0;
HXDLIN(4092)			::Array< ::Dynamic> _g11 = actorList->list;
HXDLIN(4092)			while((_g2 < _g11->length)){
HXLINE(4092)				 ::com::stencyl::models::Actor actor1 = _g11->__get(_g2).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN(4092)				_g2 = (_g2 + (int)1);
HXLINE(4094)				 ::com::stencyl::models::Actor e1 = actor1;
HXLINE(4096)				if (e1->recycled) {
HXLINE(4098)					continue;
            				}
HXLINE(4101)				bool _hx_tmp8;
HXDLIN(4101)				bool _hx_tmp9;
HXDLIN(4101)				bool _hx_tmp10;
HXDLIN(4101)				bool _hx_tmp11;
HXDLIN(4101)				bool _hx_tmp12;
HXDLIN(4101)				if (((this->colX + this->cacheWidth) >= e1->colX)) {
HXLINE(4101)					_hx_tmp12 = ((this->colY + this->cacheHeight) >= e1->colY);
            				}
            				else {
HXLINE(4101)					_hx_tmp12 = false;
            				}
HXDLIN(4101)				if (_hx_tmp12) {
HXLINE(4103)					Float _hx_tmp13 = this->colX;
HXLINE(4101)					_hx_tmp11 = (_hx_tmp13 <= (e1->colX + e1->cacheWidth));
            				}
            				else {
HXLINE(4101)					_hx_tmp11 = false;
            				}
HXDLIN(4101)				if (_hx_tmp11) {
HXLINE(4104)					Float _hx_tmp14 = this->colY;
HXLINE(4101)					_hx_tmp10 = (_hx_tmp14 <= (e1->colY + e1->cacheHeight));
            				}
            				else {
HXLINE(4101)					_hx_tmp10 = false;
            				}
HXDLIN(4101)				if (_hx_tmp10) {
HXLINE(4101)					_hx_tmp9 = e1->collidable;
            				}
            				else {
HXLINE(4101)					_hx_tmp9 = false;
            				}
HXDLIN(4101)				if (_hx_tmp9) {
HXLINE(4101)					_hx_tmp8 = hx::IsNotEq( e1,hx::ObjectPtr<OBJ_>(this) );
            				}
            				else {
HXLINE(4101)					_hx_tmp8 = false;
            				}
HXDLIN(4101)				if (_hx_tmp8) {
HXLINE(4107)					 ::com::stencyl::models::collision::Mask _hx_tmp15;
HXDLIN(4107)					if (hx::IsNotNull( e1->_mask )) {
HXLINE(4107)						_hx_tmp15 = e1->_mask;
            					}
            					else {
HXLINE(4107)						_hx_tmp15 = e1->HITBOX;
            					}
HXDLIN(4107)					if (this->_mask->collide(_hx_tmp15)) {
HXLINE(4109)						 ::com::stencyl::models::collision::Mask _hx_tmp16;
HXDLIN(4109)						if (hx::IsNotNull( e1->_mask )) {
HXLINE(4109)							_hx_tmp16 = e1->_mask;
            						}
            						else {
HXLINE(4109)							_hx_tmp16 = e1->HITBOX;
            						}
HXDLIN(4109)						this->colMask = _hx_tmp16;
HXLINE(4110)						this->resetReal(this->_x,this->_y);
HXLINE(4112)						return e1;
            					}
            				}
            			}
            		}
HXLINE(4116)		this->resetReal(this->_x,this->_y);
HXLINE(4117)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,collide,return )

 ::com::stencyl::models::Actor Actor_obj::collideTypes(::Array< int > types,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4128_collideTypes)
HXLINE(4129)		int cc = this->collidedList->length;
HXLINE(4131)		 ::com::stencyl::models::Actor e;
HXLINE(4132)		int type;
HXLINE(4133)		{
HXLINE(4133)			int _g = (int)0;
HXDLIN(4133)			while((_g < types->length)){
HXLINE(4133)				int type1 = types->__get(_g);
HXDLIN(4133)				_g = (_g + (int)1);
HXLINE(4135)				if ((type1 == (int)-2)) {
HXLINE(4135)					continue;
            				}
HXLINE(4137)				this->collideInto(type1,x,y,this->collidedList);
            			}
            		}
HXLINE(4140)		if ((this->collidedList->length > cc)) {
HXLINE(4142)			::Array< ::Dynamic> _hx_tmp = this->collidedList;
HXDLIN(4142)			return _hx_tmp->__get((this->collidedList->length - (int)1)).StaticCast<  ::com::stencyl::models::Actor >();
            		}
HXLINE(4145)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,collideTypes,return )

 ::com::stencyl::models::Actor Actor_obj::collideWith( ::com::stencyl::models::Actor e,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4156_collideWith)
HXLINE(4157)		this->_x = this->realX;
HXDLIN(4157)		this->_y = this->realY;
HXLINE(4158)		this->resetReal(x,y);
HXLINE(4160)		bool _hx_tmp;
HXDLIN(4160)		bool _hx_tmp1;
HXDLIN(4160)		bool _hx_tmp2;
HXDLIN(4160)		bool _hx_tmp3;
HXDLIN(4160)		bool _hx_tmp4;
HXDLIN(4160)		if (((this->colX + this->cacheWidth) >= e->colX)) {
HXLINE(4160)			_hx_tmp4 = ((this->colY + this->cacheHeight) >= e->colY);
            		}
            		else {
HXLINE(4160)			_hx_tmp4 = false;
            		}
HXDLIN(4160)		if (_hx_tmp4) {
HXLINE(4162)			Float _hx_tmp5 = this->colX;
HXLINE(4160)			_hx_tmp3 = (_hx_tmp5 <= (e->colX + e->cacheWidth));
            		}
            		else {
HXLINE(4160)			_hx_tmp3 = false;
            		}
HXDLIN(4160)		if (_hx_tmp3) {
HXLINE(4163)			Float _hx_tmp6 = this->colY;
HXLINE(4160)			_hx_tmp2 = (_hx_tmp6 <= (e->colY + e->cacheHeight));
            		}
            		else {
HXLINE(4160)			_hx_tmp2 = false;
            		}
HXDLIN(4160)		if (_hx_tmp2) {
HXLINE(4160)			_hx_tmp1 = this->collidable;
            		}
            		else {
HXLINE(4160)			_hx_tmp1 = false;
            		}
HXDLIN(4160)		if (_hx_tmp1) {
HXLINE(4160)			_hx_tmp = e->collidable;
            		}
            		else {
HXLINE(4160)			_hx_tmp = false;
            		}
HXDLIN(4160)		if (_hx_tmp) {
HXLINE(4166)			if (hx::IsNull( this->_mask )) {
HXLINE(4168)				bool _hx_tmp7;
HXDLIN(4168)				if (hx::IsNotNull( e->_mask )) {
HXLINE(4168)					_hx_tmp7 = e->_mask->collide(this->HITBOX);
            				}
            				else {
HXLINE(4168)					_hx_tmp7 = true;
            				}
HXDLIN(4168)				if (_hx_tmp7) {
HXLINE(4170)					this->resetReal(this->_x,this->_y);
HXLINE(4171)					return e;
            				}
HXLINE(4173)				this->resetReal(this->_x,this->_y);
HXLINE(4174)				return null();
            			}
HXLINE(4176)			 ::com::stencyl::models::collision::Mask _hx_tmp8;
HXDLIN(4176)			if (hx::IsNotNull( e->_mask )) {
HXLINE(4176)				_hx_tmp8 = e->_mask;
            			}
            			else {
HXLINE(4176)				_hx_tmp8 = e->HITBOX;
            			}
HXDLIN(4176)			if (this->_mask->collide(_hx_tmp8)) {
HXLINE(4178)				this->resetReal(this->_x,this->_y);
HXLINE(4179)				return e;
            			}
            		}
HXLINE(4182)		this->resetReal(this->_x,this->_y);
HXLINE(4183)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,collideWith,return )

void Actor_obj::collideInto(int groupID,Float x,Float y,::Array< ::Dynamic> array){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4195_collideInto)
HXLINE(4197)		 ::com::stencyl::models::actor::Group actorList = this->engine->getGroup(groupID,null());
HXLINE(4199)		this->_x = this->realX;
HXDLIN(4199)		this->_y = this->realY;
HXLINE(4200)		this->resetReal(x,y);
HXLINE(4201)		int n = array->length;
HXLINE(4203)		if (hx::IsNull( this->_mask )) {
HXLINE(4205)			{
HXLINE(4205)				int _g = (int)0;
HXDLIN(4205)				::Array< ::Dynamic> _g1 = actorList->list;
HXDLIN(4205)				while((_g < _g1->length)){
HXLINE(4205)					 ::com::stencyl::models::Actor actor = _g1->__get(_g).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN(4205)					_g = (_g + (int)1);
HXLINE(4207)					 ::com::stencyl::models::Actor e = actor;
HXLINE(4209)					if (e->recycled) {
HXLINE(4211)						continue;
            					}
HXLINE(4214)					bool _hx_tmp;
HXDLIN(4214)					bool _hx_tmp1;
HXDLIN(4214)					bool _hx_tmp2;
HXDLIN(4214)					bool _hx_tmp3;
HXDLIN(4214)					bool _hx_tmp4;
HXDLIN(4214)					if (((this->colX + this->cacheWidth) >= e->colX)) {
HXLINE(4214)						_hx_tmp4 = ((this->colY + this->cacheHeight) >= e->colY);
            					}
            					else {
HXLINE(4214)						_hx_tmp4 = false;
            					}
HXDLIN(4214)					if (_hx_tmp4) {
HXLINE(4216)						Float _hx_tmp5 = this->colX;
HXLINE(4214)						_hx_tmp3 = (_hx_tmp5 <= (e->colX + e->cacheWidth));
            					}
            					else {
HXLINE(4214)						_hx_tmp3 = false;
            					}
HXDLIN(4214)					if (_hx_tmp3) {
HXLINE(4217)						Float _hx_tmp6 = this->colY;
HXLINE(4214)						_hx_tmp2 = (_hx_tmp6 <= (e->colY + e->cacheHeight));
            					}
            					else {
HXLINE(4214)						_hx_tmp2 = false;
            					}
HXDLIN(4214)					if (_hx_tmp2) {
HXLINE(4214)						_hx_tmp1 = e->collidable;
            					}
            					else {
HXLINE(4214)						_hx_tmp1 = false;
            					}
HXDLIN(4214)					if (_hx_tmp1) {
HXLINE(4214)						_hx_tmp = hx::IsNotEq( e,hx::ObjectPtr<OBJ_>(this) );
            					}
            					else {
HXLINE(4214)						_hx_tmp = false;
            					}
HXDLIN(4214)					if (_hx_tmp) {
HXLINE(4220)						bool _hx_tmp7;
HXDLIN(4220)						if (hx::IsNotNull( e->_mask )) {
HXLINE(4220)							_hx_tmp7 = e->_mask->collide(this->HITBOX);
            						}
            						else {
HXLINE(4220)							_hx_tmp7 = true;
            						}
HXDLIN(4220)						if (_hx_tmp7) {
HXLINE(4222)							if (!(::com::stencyl::utils::Utils_obj::contains(array,e))) {
HXLINE(4224)								n = (n + (int)1);
HXDLIN(4224)								array[(n - (int)1)] = e;
            							}
            						}
            					}
            				}
            			}
HXLINE(4229)			this->resetReal(this->_x,this->_y);
HXLINE(4230)			return;
            		}
HXLINE(4233)		{
HXLINE(4233)			int _g2 = (int)0;
HXDLIN(4233)			::Array< ::Dynamic> _g11 = actorList->list;
HXDLIN(4233)			while((_g2 < _g11->length)){
HXLINE(4233)				 ::com::stencyl::models::Actor actor1 = _g11->__get(_g2).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN(4233)				_g2 = (_g2 + (int)1);
HXLINE(4235)				 ::com::stencyl::models::Actor e1 = actor1;
HXLINE(4237)				bool _hx_tmp8;
HXDLIN(4237)				bool _hx_tmp9;
HXDLIN(4237)				bool _hx_tmp10;
HXDLIN(4237)				bool _hx_tmp11;
HXDLIN(4237)				bool _hx_tmp12;
HXDLIN(4237)				if (((this->colX + this->cacheWidth) >= e1->colX)) {
HXLINE(4237)					_hx_tmp12 = ((this->colY + this->cacheHeight) >= e1->colY);
            				}
            				else {
HXLINE(4237)					_hx_tmp12 = false;
            				}
HXDLIN(4237)				if (_hx_tmp12) {
HXLINE(4239)					Float _hx_tmp13 = this->colX;
HXLINE(4237)					_hx_tmp11 = (_hx_tmp13 <= (e1->colX + e1->cacheWidth));
            				}
            				else {
HXLINE(4237)					_hx_tmp11 = false;
            				}
HXDLIN(4237)				if (_hx_tmp11) {
HXLINE(4240)					Float _hx_tmp14 = this->colY;
HXLINE(4237)					_hx_tmp10 = (_hx_tmp14 <= (e1->colY + e1->cacheHeight));
            				}
            				else {
HXLINE(4237)					_hx_tmp10 = false;
            				}
HXDLIN(4237)				if (_hx_tmp10) {
HXLINE(4237)					_hx_tmp9 = e1->collidable;
            				}
            				else {
HXLINE(4237)					_hx_tmp9 = false;
            				}
HXDLIN(4237)				if (_hx_tmp9) {
HXLINE(4237)					_hx_tmp8 = hx::IsNotEq( e1,hx::ObjectPtr<OBJ_>(this) );
            				}
            				else {
HXLINE(4237)					_hx_tmp8 = false;
            				}
HXDLIN(4237)				if (_hx_tmp8) {
HXLINE(4243)					 ::com::stencyl::models::collision::Mask _hx_tmp15;
HXDLIN(4243)					if (hx::IsNotNull( e1->_mask )) {
HXLINE(4243)						_hx_tmp15 = e1->_mask;
            					}
            					else {
HXLINE(4243)						_hx_tmp15 = e1->HITBOX;
            					}
HXDLIN(4243)					if (this->_mask->collide(_hx_tmp15)) {
HXLINE(4245)						if (!(::com::stencyl::utils::Utils_obj::contains(array,e1))) {
HXLINE(4247)							n = (n + (int)1);
HXDLIN(4247)							array[(n - (int)1)] = e1;
            						}
            					}
            				}
            			}
            		}
HXLINE(4252)		this->resetReal(this->_x,this->_y);
HXLINE(4253)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Actor_obj,collideInto,(void))

void Actor_obj::clearCollisionInfoList(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4258_clearCollisionInfoList)
HXDLIN(4258)		if ((this->collisionsCount > (int)0)) {
HXLINE(4260)			::Dynamic info = this->simpleCollisions->iterator();
HXDLIN(4260)			while(::de::polygonal::ds::Itr_obj::hasNext(info)){
HXLINE(4260)				 ::com::stencyl::models::actor::Collision info1 = ( ( ::com::stencyl::models::actor::Collision)(::de::polygonal::ds::Itr_obj::next(info)) );
HXLINE(4262)				info1->remove = true;
HXLINE(4264)				if (hx::IsNotNull( info1->linkedCollision )) {
HXLINE(4266)					info1->linkedCollision->remove = true;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,clearCollisionInfoList,(void))

void Actor_obj::disposeRemovedCollisionInfo(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4274_disposeRemovedCollisionInfo)
HXDLIN(4274)		if ((this->collisionsCount > (int)0)) {
HXLINE(4276)			int maxKey = (int)-1;
HXLINE(4278)			{
HXLINE(4278)				::Dynamic key = this->simpleCollisions->keys();
HXDLIN(4278)				while(::de::polygonal::ds::Itr_obj::hasNext(key)){
HXLINE(4278)					int key1 = ( (int)(::de::polygonal::ds::Itr_obj::next(key)) );
HXLINE(4280)					 ::de::polygonal::ds::IntHashTable _this = this->simpleCollisions;
HXDLIN(4280)					 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(4280)					int i = _this1->mHash->__get(((int)(key1 * (int)73856093) & (int)_this1->mMask));
HXDLIN(4280)					int i1;
HXDLIN(4280)					if ((i == (int)-1)) {
HXLINE(4280)						i1 = (int)-2147483647;
            					}
            					else {
HXLINE(4280)						::Array< int > d = _this1->mData;
HXDLIN(4280)						if ((d->__get(i) == key1)) {
HXLINE(4280)							i1 = d->__get((i + (int)1));
            						}
            						else {
HXLINE(4280)							int v = (int)-2147483647;
HXDLIN(4280)							i = d->__get((i + (int)2));
HXDLIN(4280)							while((i != (int)-1)){
HXLINE(4280)								if ((d->__get(i) == key1)) {
HXLINE(4280)									v = d->__get((i + (int)1));
HXDLIN(4280)									goto _hx_goto_262;
            								}
HXDLIN(4280)								i = d->__get((i + (int)2));
            							}
            							_hx_goto_262:;
HXDLIN(4280)							i1 = v;
            						}
            					}
HXDLIN(4280)					 ::com::stencyl::models::actor::Collision info;
HXDLIN(4280)					if ((i1 == (int)-2147483647)) {
HXLINE(4280)						info = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            					}
            					else {
HXLINE(4280)						info = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            					}
HXLINE(4282)					if (info->remove) {
HXLINE(4284)						this->simpleCollisions->unset(key1);
            					}
            					else {
HXLINE(4286)						if ((key1 > maxKey)) {
HXLINE(4288)							maxKey = key1;
            						}
            					}
            				}
            			}
HXLINE(4292)			this->collisionsCount = (maxKey + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,disposeRemovedCollisionInfo,(void))

void Actor_obj::clearCollidedList(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4297_clearCollidedList)
HXLINE(4298)		while((this->collidedList->length > (int)0)){
HXLINE(4300)			this->collidedList->pop().StaticCast<  ::com::stencyl::models::Actor >();
            		}
HXLINE(4303)		this->listChecked = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,clearCollidedList,(void))

 ::com::stencyl::models::actor::Collision Actor_obj::addCollision( ::com::stencyl::models::actor::Collision info){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4307_addCollision)
HXLINE(4308)		int check = this->alreadyCollided(info);
HXLINE(4310)		if ((check != (int)-1)) {
HXLINE(4311)			 ::de::polygonal::ds::IntHashTable _this = this->simpleCollisions;
HXDLIN(4311)			 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(4311)			int i = _this1->mHash->__get(((int)(check * (int)73856093) & (int)_this1->mMask));
HXDLIN(4311)			int i1;
HXDLIN(4311)			if ((i == (int)-1)) {
HXLINE(4311)				i1 = (int)-2147483647;
            			}
            			else {
HXLINE(4311)				::Array< int > d = _this1->mData;
HXDLIN(4311)				if ((d->__get(i) == check)) {
HXLINE(4311)					i1 = d->__get((i + (int)1));
            				}
            				else {
HXLINE(4311)					int v = (int)-2147483647;
HXDLIN(4311)					i = d->__get((i + (int)2));
HXDLIN(4311)					while((i != (int)-1)){
HXLINE(4311)						if ((d->__get(i) == check)) {
HXLINE(4311)							v = d->__get((i + (int)1));
HXDLIN(4311)							goto _hx_goto_266;
            						}
HXDLIN(4311)						i = d->__get((i + (int)2));
            					}
            					_hx_goto_266:;
HXDLIN(4311)					i1 = v;
            				}
            			}
HXDLIN(4311)			 ::com::stencyl::models::actor::Collision oldInfo;
HXDLIN(4311)			if ((i1 == (int)-2147483647)) {
HXLINE(4311)				oldInfo = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            			}
            			else {
HXLINE(4311)				oldInfo = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            			}
HXLINE(4313)			info->switchData(oldInfo->linkedCollision);
HXLINE(4314)			info->linkedCollision->remove = false;
HXLINE(4315)			info->remove = false;
HXLINE(4317)			::com::stencyl::models::actor::Collision_obj::recycle(oldInfo);
HXLINE(4319)			this->simpleCollisions->unset(check);
HXLINE(4320)			this->simpleCollisions->set(check,info);
HXLINE(4322)			return info;
            		}
HXLINE(4325)		this->simpleCollisions->unset(this->collisionsCount);
HXLINE(4326)		this->simpleCollisions->set(this->collisionsCount,info);
HXLINE(4327)		this->collisionsCount++;
HXLINE(4329)		return info;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,addCollision,return )

int Actor_obj::alreadyCollided( ::com::stencyl::models::actor::Collision info2){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4333_alreadyCollided)
HXLINE(4334)		{
HXLINE(4334)			::Dynamic key = this->simpleCollisions->keys();
HXDLIN(4334)			while(::de::polygonal::ds::Itr_obj::hasNext(key)){
HXLINE(4334)				int key1 = ( (int)(::de::polygonal::ds::Itr_obj::next(key)) );
HXLINE(4336)				 ::de::polygonal::ds::IntHashTable _this = this->simpleCollisions;
HXDLIN(4336)				 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(4336)				int i = _this1->mHash->__get(((int)(key1 * (int)73856093) & (int)_this1->mMask));
HXDLIN(4336)				int i1;
HXDLIN(4336)				if ((i == (int)-1)) {
HXLINE(4336)					i1 = (int)-2147483647;
            				}
            				else {
HXLINE(4336)					::Array< int > d = _this1->mData;
HXDLIN(4336)					if ((d->__get(i) == key1)) {
HXLINE(4336)						i1 = d->__get((i + (int)1));
            					}
            					else {
HXLINE(4336)						int v = (int)-2147483647;
HXDLIN(4336)						i = d->__get((i + (int)2));
HXDLIN(4336)						while((i != (int)-1)){
HXLINE(4336)							if ((d->__get(i) == key1)) {
HXLINE(4336)								v = d->__get((i + (int)1));
HXDLIN(4336)								goto _hx_goto_269;
            							}
HXDLIN(4336)							i = d->__get((i + (int)2));
            						}
            						_hx_goto_269:;
HXDLIN(4336)						i1 = v;
            					}
            				}
HXDLIN(4336)				 ::com::stencyl::models::actor::Collision info;
HXDLIN(4336)				if ((i1 == (int)-2147483647)) {
HXLINE(4336)					info = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            				}
            				else {
HXLINE(4336)					info = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            				}
HXLINE(4338)				bool _hx_tmp;
HXDLIN(4338)				if (hx::IsNotNull( info )) {
HXLINE(4338)					bool _hx_tmp1;
HXDLIN(4338)					if (hx::IsEq( info->maskA,info2->maskA )) {
HXLINE(4338)						_hx_tmp1 = hx::IsEq( info->maskB,info2->maskB );
            					}
            					else {
HXLINE(4338)						_hx_tmp1 = false;
            					}
HXDLIN(4338)					if (!(_hx_tmp1)) {
HXLINE(4338)						if (hx::IsEq( info->maskA,info2->maskB )) {
HXLINE(4338)							_hx_tmp = hx::IsEq( info->maskB,info2->maskA );
            						}
            						else {
HXLINE(4338)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE(4338)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(4338)					_hx_tmp = false;
            				}
HXDLIN(4338)				if (_hx_tmp) {
HXLINE(4341)					if (info->solidCollision) {
HXLINE(4343)						bool _hx_tmp2;
HXDLIN(4343)						if ((info->maskA->groupID != (int)1)) {
HXLINE(4343)							_hx_tmp2 = (info->maskB->groupID == (int)1);
            						}
            						else {
HXLINE(4343)							_hx_tmp2 = true;
            						}
HXDLIN(4343)						if (_hx_tmp2) {
HXLINE(4345)							bool _hx_tmp3;
HXDLIN(4345)							if (!(info->thisFromLeft)) {
HXLINE(4345)								_hx_tmp3 = info->thisFromRight;
            							}
            							else {
HXLINE(4345)								_hx_tmp3 = true;
            							}
HXDLIN(4345)							if (_hx_tmp3) {
HXLINE(4347)								bool _hx_tmp4;
HXDLIN(4347)								if (!(info2->thisFromLeft)) {
HXLINE(4347)									_hx_tmp4 = info2->thisFromRight;
            								}
            								else {
HXLINE(4347)									_hx_tmp4 = true;
            								}
HXDLIN(4347)								if (_hx_tmp4) {
HXLINE(4349)									return key1;
            								}
            							}
HXLINE(4353)							bool _hx_tmp5;
HXDLIN(4353)							if (!(info->thisFromTop)) {
HXLINE(4353)								_hx_tmp5 = info->thisFromBottom;
            							}
            							else {
HXLINE(4353)								_hx_tmp5 = true;
            							}
HXDLIN(4353)							if (_hx_tmp5) {
HXLINE(4355)								bool _hx_tmp6;
HXDLIN(4355)								if (!(info2->thisFromTop)) {
HXLINE(4355)									_hx_tmp6 = info2->thisFromBottom;
            								}
            								else {
HXLINE(4355)									_hx_tmp6 = true;
            								}
HXDLIN(4355)								if (_hx_tmp6) {
HXLINE(4357)									return key1;
            								}
            							}
            						}
            						else {
HXLINE(4363)							return key1;
            						}
            					}
            					else {
HXLINE(4368)						return key1;
            					}
            				}
            			}
            		}
HXLINE(4373)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,alreadyCollided,return )

void Actor_obj::resetReal(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4377_resetReal)
HXLINE(4378)		this->realX = x;
HXDLIN(4378)		this->realY = y;
HXLINE(4379)		Float _hx_tmp = this->realX;
HXDLIN(4379)		this->colX = ((_hx_tmp - ::Math_obj::floor(((Float)this->cacheWidth / (Float)(int)2))) - this->currOffset->x);
HXLINE(4380)		Float _hx_tmp1 = this->realY;
HXDLIN(4380)		this->colY = ((_hx_tmp1 - ::Math_obj::floor(((Float)this->cacheHeight / (Float)(int)2))) - this->currOffset->y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,resetReal,(void))

Float Actor_obj::adjustByWidth(bool posDir){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4384_adjustByWidth)
HXLINE(4385)		bool _hx_tmp;
HXDLIN(4385)		if (hx::IsNotNull( this->_mask )) {
HXLINE(4385)			_hx_tmp = hx::IsNotNull( this->_mask->lastCheckedMask );
            		}
            		else {
HXLINE(4385)			_hx_tmp = false;
            		}
HXDLIN(4385)		if (_hx_tmp) {
HXLINE(4387)			if (::Std_obj::is(this->_mask->lastCheckedMask,hx::ClassOf< ::com::stencyl::models::collision::Hitbox >())) {
HXLINE(4389)				 ::com::stencyl::models::collision::Hitbox box = ( ( ::com::stencyl::models::collision::Hitbox)(this->_mask->lastCheckedMask) );
HXLINE(4391)				if (posDir) {
HXLINE(4393)					Float _hx_tmp1 = ((Float)this->cacheWidth / (Float)(int)2);
HXDLIN(4393)					Float _hx_tmp2 = this->cacheWidth;
HXDLIN(4393)					return (_hx_tmp1 - (_hx_tmp2 - (box->_x + box->_width)));
            				}
HXLINE(4396)				return (((Float)this->cacheWidth / (Float)(int)2) - box->_x);
            			}
            		}
HXLINE(4400)		return ((Float)this->cacheWidth / (Float)(int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,adjustByWidth,return )

Float Actor_obj::adjustByHeight(bool posDir){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4404_adjustByHeight)
HXLINE(4405)		bool _hx_tmp;
HXDLIN(4405)		if (hx::IsNotNull( this->_mask )) {
HXLINE(4405)			_hx_tmp = hx::IsNotNull( this->_mask->lastCheckedMask );
            		}
            		else {
HXLINE(4405)			_hx_tmp = false;
            		}
HXDLIN(4405)		if (_hx_tmp) {
HXLINE(4407)			if (::Std_obj::is(this->_mask->lastCheckedMask,hx::ClassOf< ::com::stencyl::models::collision::Hitbox >())) {
HXLINE(4409)				 ::com::stencyl::models::collision::Hitbox box = ( ( ::com::stencyl::models::collision::Hitbox)(this->_mask->lastCheckedMask) );
HXLINE(4411)				if (posDir) {
HXLINE(4413)					Float _hx_tmp1 = ((Float)this->cacheHeight / (Float)(int)2);
HXDLIN(4413)					Float _hx_tmp2 = this->cacheHeight;
HXDLIN(4413)					return (_hx_tmp1 - (_hx_tmp2 - (box->_y + box->_height)));
            				}
HXLINE(4416)				return (((Float)this->cacheHeight / (Float)(int)2) - box->_y);
            			}
            		}
HXLINE(4420)		return ((Float)this->cacheHeight / (Float)(int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Actor_obj,adjustByHeight,return )

 ::com::stencyl::models::actor::Collision Actor_obj::getAllCollisionInfo(Float xDir,Float yDir){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4424_getAllCollisionInfo)
HXLINE(4425)		 ::com::stencyl::models::actor::Collision solidCollision = null();
HXLINE(4427)		while((this->listChecked < this->collidedList->length)){
HXLINE(4429)			 ::com::stencyl::models::actor::Collision lastCollisionInfo = ::com::stencyl::models::actor::Collision_obj::get();
HXLINE(4431)			this->colMask = this->collidedList->__get(this->listChecked).StaticCast<  ::com::stencyl::models::Actor >()->_mask;
HXLINE(4433)			this->fillCollisionInfo(lastCollisionInfo,this->collidedList->__get(this->listChecked).StaticCast<  ::com::stencyl::models::Actor >(),xDir,yDir);
HXLINE(4434)			this->addCollision(lastCollisionInfo);
HXLINE(4436)			if (hx::IsNull( lastCollisionInfo->linkedCollision )) {
HXLINE(4438)				 ::com::stencyl::models::actor::Collision linked = ::com::stencyl::models::actor::Collision_obj::get();
HXLINE(4440)				lastCollisionInfo->switchData(linked);
HXLINE(4441)				this->collidedList->__get(this->listChecked).StaticCast<  ::com::stencyl::models::Actor >()->addCollision(linked);
            			}
HXLINE(4444)			if (lastCollisionInfo->solidCollision) {
HXLINE(4446)				solidCollision = lastCollisionInfo;
            			}
HXLINE(4449)			this->listChecked++;
            		}
HXLINE(4452)		return solidCollision;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,getAllCollisionInfo,return )

void Actor_obj::moveActorBy(Float x,Float y,hx::Null< bool >  __o_noCollision,hx::Null< bool >  __o_sweep){
bool noCollision = __o_noCollision.Default(true);
bool sweep = __o_sweep.Default(false);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4456_moveActorBy)
HXLINE(4457)		bool _hx_tmp;
HXDLIN(4457)		if ((x == (int)0)) {
HXLINE(4457)			_hx_tmp = (y == (int)0);
            		}
            		else {
HXLINE(4457)			_hx_tmp = false;
            		}
HXDLIN(4457)		if (_hx_tmp) {
HXLINE(4459)			return;
            		}
HXLINE(4462)		this->clearCollisionInfoList();
HXLINE(4464)		bool _hx_tmp1;
HXDLIN(4464)		bool _hx_tmp2;
HXDLIN(4464)		if (!(noCollision)) {
HXLINE(4464)			_hx_tmp2 = this->collidable;
            		}
            		else {
HXLINE(4464)			_hx_tmp2 = false;
            		}
HXDLIN(4464)		if (_hx_tmp2) {
HXLINE(4464)			_hx_tmp1 = hx::IsNotNull( this->HITBOX->collideTypes );
            		}
            		else {
HXLINE(4464)			_hx_tmp1 = false;
            		}
HXDLIN(4464)		if (_hx_tmp1) {
HXLINE(4466)			::Array< int > solidType = this->HITBOX->collideTypes;
HXLINE(4468)			Float sign;
HXDLIN(4468)			Float signIncr;
HXDLIN(4468)			Float next;
HXDLIN(4468)			 ::com::stencyl::models::Actor e;
HXLINE(4470)			if ((x != (int)0)) {
HXLINE(4472)				if ((x > (int)0)) {
HXLINE(4472)					next = ::Math_obj::ceil((this->realX + x));
            				}
            				else {
HXLINE(4472)					next = ::Math_obj::floor((this->realX + x));
            				}
HXLINE(4474)				this->clearCollidedList();
HXLINE(4476)				bool _hx_tmp3;
HXDLIN(4476)				if (!(sweep)) {
HXLINE(4476)					_hx_tmp3 = hx::IsNotNull( this->collideTypes(solidType,next,this->realY) );
            				}
            				else {
HXLINE(4476)					_hx_tmp3 = true;
            				}
HXDLIN(4476)				if (_hx_tmp3) {
HXLINE(4478)					this->clearCollidedList();
HXLINE(4480)					while((x != (int)0)){
HXLINE(4482)						bool signIncr1;
HXDLIN(4482)						if (!((x >= (int)1))) {
HXLINE(4482)							signIncr1 = (x <= (int)-1);
            						}
            						else {
HXLINE(4482)							signIncr1 = true;
            						}
HXDLIN(4482)						if (signIncr1) {
HXLINE(4482)							signIncr = (int)1;
            						}
            						else {
HXLINE(4482)							signIncr = ::Math_obj::abs(x);
            						}
HXLINE(4483)						if ((x > (int)0)) {
HXLINE(4483)							sign = signIncr;
            						}
            						else {
HXLINE(4483)							sign = -(signIncr);
            						}
HXLINE(4484)						if ((sign > (int)0)) {
HXLINE(4484)							next = ::Math_obj::ceil((this->realX + sign));
            						}
            						else {
HXLINE(4484)							next = ::Math_obj::floor((this->realX + sign));
            						}
HXLINE(4487)						e = this->collide((int)-2,next,this->realY);
HXDLIN(4487)						if (hx::IsNotNull( e )) {
HXLINE(4489)							hx::TCast<  ::com::stencyl::models::Region >::cast(e)->addActor(hx::ObjectPtr<OBJ_>(this));
            						}
HXLINE(4492)						e = this->collideTypes(solidType,next,this->realY);
HXDLIN(4492)						if (hx::IsNotNull( e )) {
HXLINE(4494)							 ::com::stencyl::models::actor::Collision solidCollision = this->getAllCollisionInfo(sign,(int)0);
HXLINE(4496)							if (hx::IsNotNull( solidCollision )) {
HXLINE(4498)								this->xSpeed = (int)0;
HXLINE(4500)								if (solidCollision->useBounds) {
HXLINE(4502)									if ((sign > (int)0)) {
HXLINE(4504)										Float solidCollision1 = solidCollision->bounds->x;
HXDLIN(4504)										this->realX = (solidCollision1 - ::Math_obj::ceil(this->adjustByWidth(true)));
            									}
            									else {
HXLINE(4509)										Float _hx_tmp4 = (solidCollision->bounds->x + solidCollision->bounds->width);
HXDLIN(4509)										this->realX = (_hx_tmp4 + ::Math_obj::floor(this->adjustByWidth(false)));
            									}
            								}
HXLINE(4513)								goto _hx_goto_276;
            							}
            						}
HXLINE(4517)						 ::com::stencyl::models::Actor _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(4517)						_hx_tmp5->realX = (_hx_tmp5->realX + sign);
HXLINE(4518)						x = (x - sign);
            					}
            					_hx_goto_276:;
            				}
            				else {
HXLINE(4521)					 ::com::stencyl::models::Actor _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(4521)					_hx_tmp6->realX = (_hx_tmp6->realX + x);
            				}
            			}
HXLINE(4523)			if ((y != (int)0)) {
HXLINE(4525)				if ((y > (int)0)) {
HXLINE(4525)					next = ::Math_obj::ceil((this->realY + y));
            				}
            				else {
HXLINE(4525)					next = ::Math_obj::floor((this->realY + y));
            				}
HXLINE(4527)				this->clearCollidedList();
HXLINE(4529)				bool _hx_tmp7;
HXDLIN(4529)				if (!(sweep)) {
HXLINE(4529)					_hx_tmp7 = hx::IsNotNull( this->collideTypes(solidType,this->realX,next) );
            				}
            				else {
HXLINE(4529)					_hx_tmp7 = true;
            				}
HXDLIN(4529)				if (_hx_tmp7) {
HXLINE(4531)					this->clearCollidedList();
HXLINE(4532)					while((y != (int)0)){
HXLINE(4534)						bool signIncr2;
HXDLIN(4534)						if (!((y >= (int)1))) {
HXLINE(4534)							signIncr2 = (y <= (int)-1);
            						}
            						else {
HXLINE(4534)							signIncr2 = true;
            						}
HXDLIN(4534)						if (signIncr2) {
HXLINE(4534)							signIncr = (int)1;
            						}
            						else {
HXLINE(4534)							signIncr = ::Math_obj::abs(y);
            						}
HXLINE(4535)						if ((y > (int)0)) {
HXLINE(4535)							sign = signIncr;
            						}
            						else {
HXLINE(4535)							sign = -(signIncr);
            						}
HXLINE(4536)						if ((sign > (int)0)) {
HXLINE(4536)							next = ::Math_obj::ceil((this->realY + sign));
            						}
            						else {
HXLINE(4536)							next = ::Math_obj::floor((this->realY + sign));
            						}
HXLINE(4539)						e = this->collide((int)-2,this->realX,next);
HXDLIN(4539)						if (hx::IsNotNull( e )) {
HXLINE(4541)							hx::TCast<  ::com::stencyl::models::Region >::cast(e)->addActor(hx::ObjectPtr<OBJ_>(this));
            						}
HXLINE(4544)						e = this->collideTypes(solidType,this->realX,next);
HXDLIN(4544)						if (hx::IsNotNull( e )) {
HXLINE(4546)							 ::com::stencyl::models::actor::Collision solidCollision2 = this->getAllCollisionInfo((int)0,sign);
HXLINE(4548)							if (hx::IsNotNull( solidCollision2 )) {
HXLINE(4550)								this->ySpeed = (int)0;
HXLINE(4553)								if (solidCollision2->useBounds) {
HXLINE(4555)									if ((sign > (int)0)) {
HXLINE(4557)										Float solidCollision3 = solidCollision2->bounds->y;
HXDLIN(4557)										this->realY = (solidCollision3 - ::Math_obj::ceil(this->adjustByHeight(true)));
            									}
            									else {
HXLINE(4562)										Float _hx_tmp8 = (solidCollision2->bounds->y + solidCollision2->bounds->height);
HXDLIN(4562)										this->realY = (_hx_tmp8 + ::Math_obj::floor(this->adjustByHeight(false)));
            									}
            								}
HXLINE(4566)								goto _hx_goto_277;
            							}
            						}
HXLINE(4570)						 ::com::stencyl::models::Actor _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(4570)						_hx_tmp9->realY = (_hx_tmp9->realY + sign);
HXLINE(4571)						y = (y - sign);
            					}
            					_hx_goto_277:;
            				}
            				else {
HXLINE(4575)					 ::com::stencyl::models::Actor _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(4575)					_hx_tmp10->realY = (_hx_tmp10->realY + y);
            				}
            			}
            		}
            		else {
HXLINE(4580)			 ::com::stencyl::models::Actor _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(4580)			_hx_tmp11->realX = (_hx_tmp11->realX + x);
HXLINE(4581)			 ::com::stencyl::models::Actor _hx_tmp12 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(4581)			_hx_tmp12->realY = (_hx_tmp12->realY + y);
            		}
HXLINE(4584)		this->resetReal(this->realX,this->realY);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Actor_obj,moveActorBy,(void))

void Actor_obj::moveActorTo(Float x,Float y,hx::Null< bool >  __o_noCollision,hx::Null< bool >  __o_sweep){
bool noCollision = __o_noCollision.Default(true);
bool sweep = __o_sweep.Default(false);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4596_moveActorTo)
HXDLIN(4596)		Float _hx_tmp = (x - this->realX);
HXDLIN(4596)		this->moveActorBy(_hx_tmp,(y - this->realY),noCollision,sweep);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Actor_obj,moveActorTo,(void))

void Actor_obj::moveActorTowards(Float x,Float y,Float amount,hx::Null< bool >  __o_noCollision,hx::Null< bool >  __o_sweep){
bool noCollision = __o_noCollision.Default(true);
bool sweep = __o_sweep.Default(false);
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4608_moveActorTowards)
HXLINE(4609)		this->_point->x = (x - this->realX);
HXLINE(4610)		this->_point->y = (y - this->realY);
HXLINE(4611)		this->_point->normalize(amount);
HXLINE(4612)		this->moveActorBy(this->_point->x,this->_point->y,noCollision,sweep);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Actor_obj,moveActorTowards,(void))

void Actor_obj::moveCollideX( ::com::stencyl::models::actor::Collision info,Float sign){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4620_moveCollideX)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,moveCollideX,(void))

void Actor_obj::moveCollideY( ::com::stencyl::models::actor::Collision info,Float sign){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4628_moveCollideY)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,moveCollideY,(void))

void Actor_obj::fillCollisionInfo( ::com::stencyl::models::actor::Collision info, ::com::stencyl::models::Actor a,Float xDir,Float yDir){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4632_fillCollisionInfo)
HXLINE(4633)		if (::Std_obj::is(a,hx::ClassOf< ::com::stencyl::models::Region >())) {
HXLINE(4635)			 ::com::stencyl::models::Region region = ( ( ::com::stencyl::models::Region)(a) );
HXLINE(4636)			region->addActor(hx::ObjectPtr<OBJ_>(this));
HXLINE(4637)			return;
            		}
HXLINE(4640)		info->thisActor = (info->actorA = hx::ObjectPtr<OBJ_>(this));
HXLINE(4641)		info->otherActor = (info->actorB = a);
HXLINE(4643)		info->maskA = this->_mask;
HXLINE(4644)		info->maskB = this->colMask;
HXLINE(4645)		bool _hx_tmp;
HXDLIN(4645)		if (this->_mask->solid) {
HXLINE(4645)			_hx_tmp = this->colMask->solid;
            		}
            		else {
HXLINE(4645)			_hx_tmp = false;
            		}
HXDLIN(4645)		info->solidCollision = _hx_tmp;
HXLINE(4647)		info->groupA = this->_mask->lastCheckedMask->groupID;
HXLINE(4648)		info->groupB = this->_mask->lastCheckedMask->lastColID;
HXLINE(4650)		::Dynamic this1 = ::com::stencyl::models::actor::Collision_obj::collisionResponses;
HXDLIN(4650)		 ::haxe::ds::IntMap responseMap = ( ( ::haxe::ds::IntMap)(this1) )->get(this->getGroupID()).StaticCast<  ::haxe::ds::IntMap >();
HXLINE(4651)		bool overrideSensor = false;
HXLINE(4652)		bool overridePhysical = false;
HXLINE(4654)		bool _hx_tmp1;
HXDLIN(4654)		if (hx::IsNotNull( responseMap )) {
HXLINE(4654)			_hx_tmp1 = hx::IsNotNull( ( (::String)(responseMap->get(a->getGroupID())) ) );
            		}
            		else {
HXLINE(4654)			_hx_tmp1 = false;
            		}
HXDLIN(4654)		if (_hx_tmp1) {
HXLINE(4656)			if ((( (::String)(responseMap->get(a->getGroupID())) ) == HX_("sensor",3a,32,90,6b))) {
HXLINE(4658)				info->solidCollision = false;
HXLINE(4659)				overrideSensor = true;
            			}
            			else {
HXLINE(4664)				info->solidCollision = true;
HXLINE(4665)				overridePhysical = true;
            			}
            		}
HXLINE(4669)		if (hx::IsNotNull( this->colMask )) {
HXLINE(4671)			info->useBounds = true;
HXLINE(4672)			info->bounds->x = this->colMask->lastBounds->x;
HXLINE(4673)			info->bounds->y = this->colMask->lastBounds->y;
HXLINE(4674)			info->bounds->width = this->colMask->lastBounds->width;
HXLINE(4675)			info->bounds->height = this->colMask->lastBounds->height;
            		}
HXLINE(4678)		if ((xDir != (int)0)) {
HXLINE(4681)			if ((a->ID == (int)100000000)) {
HXLINE(4683)				info->thisFromLeft = (xDir < (int)0);
HXLINE(4684)				info->thisFromRight = (xDir > (int)0);
            			}
            			else {
HXLINE(4688)				info->thisFromLeft = (a->colX < this->colX);
HXLINE(4689)				info->thisFromRight = (a->colX > this->colX);
            			}
HXLINE(4692)			info->otherFromLeft = !(info->thisFromLeft);
HXLINE(4693)			info->otherFromRight = !(info->thisFromRight);
HXLINE(4695)			info->thisFromTop = (info->otherFromTop = false);
HXLINE(4696)			info->thisFromBottom = (info->otherFromBottom = false);
            		}
HXLINE(4699)		if ((yDir != (int)0)) {
HXLINE(4702)			if ((a->ID == (int)100000000)) {
HXLINE(4704)				info->thisFromTop = (yDir < (int)0);
HXLINE(4705)				info->thisFromBottom = (yDir > (int)0);
            			}
            			else {
HXLINE(4709)				info->thisFromTop = (a->colY < this->colY);
HXLINE(4710)				info->thisFromBottom = (a->colY > this->colY);
            			}
HXLINE(4713)			info->otherFromTop = !(info->thisFromTop);
HXLINE(4714)			info->otherFromBottom = !(info->thisFromBottom);
HXLINE(4716)			info->thisFromLeft = (info->otherFromLeft = false);
HXLINE(4717)			info->thisFromRight = (info->otherFromRight = false);
            		}
HXLINE(4721)		info->thisCollidedWithActor = true;
HXLINE(4722)		info->thisCollidedWithTile = (a->ID == (int)100000000);
HXLINE(4724)		if (hx::IsNotNull( info )) {
HXLINE(4726)			bool _hx_tmp2;
HXDLIN(4726)			if (!(overrideSensor)) {
HXLINE(4726)				if (!(overridePhysical)) {
HXLINE(4726)					_hx_tmp2 = !(info->maskB->solid);
            				}
            				else {
HXLINE(4726)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE(4726)				_hx_tmp2 = true;
            			}
HXDLIN(4726)			info->thisCollidedWithSensor = _hx_tmp2;
            		}
            		else {
HXLINE(4731)			info->thisCollidedWithSensor = false;
            		}
HXLINE(4734)		info->thisCollidedWithTerrain = false;
HXLINE(4736)		info->otherCollidedWithActor = true;
HXLINE(4737)		info->otherCollidedWithTile = (a->ID == (int)100000000);
HXLINE(4739)		if (hx::IsNotNull( info )) {
HXLINE(4741)			info->otherCollidedWithSensor = !(info->maskA->solid);
            		}
            		else {
HXLINE(4746)			info->otherCollidedWithSensor = false;
            		}
HXLINE(4749)		info->otherCollidedWithTerrain = false;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Actor_obj,fillCollisionInfo,(void))

void Actor_obj::handleCollisionsSimple(){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_4754_handleCollisionsSimple)
HXDLIN(4754)		if ((this->collisionsCount > (int)0)) {
HXLINE(4756)			::Dynamic info = this->simpleCollisions->iterator();
HXDLIN(4756)			while(::de::polygonal::ds::Itr_obj::hasNext(info)){
HXLINE(4756)				 ::com::stencyl::models::actor::Collision info1 = ( ( ::com::stencyl::models::actor::Collision)(::de::polygonal::ds::Itr_obj::next(info)) );
HXLINE(4758)				bool _hx_tmp;
HXDLIN(4758)				if (hx::IsNotNull( info1 )) {
HXLINE(4758)					_hx_tmp = (info1->remove == true);
            				}
            				else {
HXLINE(4758)					_hx_tmp = true;
            				}
HXDLIN(4758)				if (_hx_tmp) {
HXLINE(4758)					continue;
            				}
HXLINE(4760)				::com::stencyl::models::Actor_obj::lastCollided = info1->otherActor;
HXLINE(4761)				{
HXLINE(4761)					::cpp::VirtualArray listeners = this->collisionListeners;
HXDLIN(4761)					int r = (int)0;
HXDLIN(4761)					while((r < listeners->get_length())){
HXLINE(4761)						try {
            							HX_STACK_CATCHABLE(::String, 0);
HXLINE(4761)							 ::Dynamic f = listeners->__get(r);
HXDLIN(4761)							f(info1,listeners);
HXDLIN(4761)							if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(4761)								r = (r - (int)1);
            							}
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass< ::String >() ){
            								HX_STACK_BEGIN_CATCH
            								::String e = _hx_e;
HXLINE(4761)								::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXDLIN(4761)						r = (r + (int)1);
            					}
            				}
HXLINE(4762)				this->engine->handleCollision(hx::ObjectPtr<OBJ_>(this),info1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,handleCollisionsSimple,(void))

void Actor_obj::resetStatics(){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_101_resetStatics)
HXLINE( 102)		::com::stencyl::models::Actor_obj::lastCollided = null();
HXLINE( 103)		::com::stencyl::models::Actor_obj::manifold =  ::box2D::collision::B2WorldManifold_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Actor_obj,resetStatics,(void))

int Actor_obj::GROUP_OFFSET;

 ::com::stencyl::models::actor::Animation Actor_obj::recycledAnimation;

 ::com::stencyl::models::Actor Actor_obj::lastCollided;

 ::box2D::collision::shapes::B2PolygonShape Actor_obj::createBox(Float width,Float height){
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_848_createBox)
HXLINE( 849)		 ::box2D::collision::shapes::B2PolygonShape boxShape =  ::box2D::collision::shapes::B2PolygonShape_obj::__alloc( HX_CTX );
HXLINE( 850)		Float _hx_tmp = ::com::stencyl::Engine_obj::toPhysicalUnits(((Float)width / (Float)(int)2));
HXDLIN( 850)		boxShape->setAsBox(_hx_tmp,::com::stencyl::Engine_obj::toPhysicalUnits(((Float)height / (Float)(int)2)));
HXLINE( 851)		return boxShape;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Actor_obj,createBox,return )

 ::box2D::collision::B2WorldManifold Actor_obj::manifold;

void Actor_obj::scaleShape( ::box2D::collision::shapes::B2Shape shape, ::box2D::common::math::B2Vec2 center,Float factor){
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_3913_scaleShape)
HXDLIN(3913)		if (::Std_obj::is(shape,hx::ClassOf< ::box2D::collision::shapes::B2CircleShape >())) {
HXLINE(3915)			 ::box2D::collision::shapes::B2CircleShape circle = ( ( ::box2D::collision::shapes::B2CircleShape)(shape) );
HXLINE(3917)			 ::box2D::collision::shapes::B2CircleShape circle1 = circle;
HXDLIN(3917)			circle1->m_radius = (circle1->m_radius * factor);
            		}
            		else {
HXLINE(3920)			if (::Std_obj::is(shape,hx::ClassOf< ::box2D::collision::shapes::B2PolygonShape >())) {
HXLINE(3922)				 ::box2D::collision::shapes::B2PolygonShape polygon = ( ( ::box2D::collision::shapes::B2PolygonShape)(shape) );
HXLINE(3923)				::Array< ::Dynamic> vertices = polygon->m_vertices;
HXLINE(3924)				::Array< ::Dynamic> newVertices = ::Array_obj< ::Dynamic>::__new();
HXLINE(3926)				{
HXLINE(3926)					int _g = (int)0;
HXDLIN(3926)					while((_g < vertices->length)){
HXLINE(3926)						 ::box2D::common::math::B2Vec2 v = vertices->__get(_g).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN(3926)						_g = (_g + (int)1);
HXLINE(3928)						v->subtract(center);
HXLINE(3929)						v->multiply(factor);
HXLINE(3930)						v->add(center);
HXLINE(3931)						newVertices->push(v);
            					}
            				}
HXLINE(3934)				polygon->setAsArray(newVertices,null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Actor_obj,scaleShape,(void))


hx::ObjectPtr< Actor_obj > Actor_obj::__new( ::com::stencyl::Engine engine,int ID,int groupID,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< int >  __o_layerID,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height, ::com::stencyl::models::actor::Sprite sprite, ::haxe::ds::StringMap behaviorValues, ::com::stencyl::models::actor::ActorType actorType, ::box2D::dynamics::B2BodyDef bodyDef,hx::Null< bool >  __o_isSensor,hx::Null< bool >  __o_isStationary,hx::Null< bool >  __o_isKinematic,hx::Null< bool >  __o_canRotate, ::Dynamic shape,hx::Null< bool >  __o_autoScale,hx::Null< bool >  __o_ignoreGravity,hx::Null< int >  __o_physicsMode) {
	hx::ObjectPtr< Actor_obj > __this = new Actor_obj();
	__this->__construct(engine,ID,groupID,__o_x,__o_y,__o_layerID,__o_width,__o_height,sprite,behaviorValues,actorType,bodyDef,__o_isSensor,__o_isStationary,__o_isKinematic,__o_canRotate,shape,__o_autoScale,__o_ignoreGravity,__o_physicsMode);
	return __this;
}

hx::ObjectPtr< Actor_obj > Actor_obj::__alloc(hx::Ctx *_hx_ctx, ::com::stencyl::Engine engine,int ID,int groupID,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< int >  __o_layerID,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height, ::com::stencyl::models::actor::Sprite sprite, ::haxe::ds::StringMap behaviorValues, ::com::stencyl::models::actor::ActorType actorType, ::box2D::dynamics::B2BodyDef bodyDef,hx::Null< bool >  __o_isSensor,hx::Null< bool >  __o_isStationary,hx::Null< bool >  __o_isKinematic,hx::Null< bool >  __o_canRotate, ::Dynamic shape,hx::Null< bool >  __o_autoScale,hx::Null< bool >  __o_ignoreGravity,hx::Null< int >  __o_physicsMode) {
	Actor_obj *__this = (Actor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Actor_obj), true, "com.stencyl.models.Actor"));
	*(void **)__this = Actor_obj::_hx_vtable;
	__this->__construct(engine,ID,groupID,__o_x,__o_y,__o_layerID,__o_width,__o_height,sprite,behaviorValues,actorType,bodyDef,__o_isSensor,__o_isStationary,__o_isKinematic,__o_canRotate,shape,__o_autoScale,__o_ignoreGravity,__o_physicsMode);
	return __this;
}

Actor_obj::Actor_obj()
{
}

void Actor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Actor);
	HX_MARK_MEMBER_NAME(engine,"engine");
	HX_MARK_MEMBER_NAME(createTime,"createTime");
	HX_MARK_MEMBER_NAME(ID,"ID");
	HX_MARK_MEMBER_NAME(groupID,"groupID");
	HX_MARK_MEMBER_NAME(cachedLayer,"cachedLayer");
	HX_MARK_MEMBER_NAME(layer,"layer");
	HX_MARK_MEMBER_NAME(typeID,"typeID");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(recycled,"recycled");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(isRegion,"isRegion");
	HX_MARK_MEMBER_NAME(isTerrainRegion,"isTerrainRegion");
	HX_MARK_MEMBER_NAME(isTerrain,"isTerrain");
	HX_MARK_MEMBER_NAME(destroyed,"destroyed");
	HX_MARK_MEMBER_NAME(drawActor,"drawActor");
	HX_MARK_MEMBER_NAME(isHUD,"isHUD");
	HX_MARK_MEMBER_NAME(alwaysSimulate,"alwaysSimulate");
	HX_MARK_MEMBER_NAME(isCamera,"isCamera");
	HX_MARK_MEMBER_NAME(killLeaveScreen,"killLeaveScreen");
	HX_MARK_MEMBER_NAME(physicsMode,"physicsMode");
	HX_MARK_MEMBER_NAME(autoScale,"autoScale");
	HX_MARK_MEMBER_NAME(dead,"dead");
	HX_MARK_MEMBER_NAME(dying,"dying");
	HX_MARK_MEMBER_NAME(fixedRotation,"fixedRotation");
	HX_MARK_MEMBER_NAME(ignoreGravity,"ignoreGravity");
	HX_MARK_MEMBER_NAME(defaultGravity,"defaultGravity");
	HX_MARK_MEMBER_NAME(collidable,"collidable");
	HX_MARK_MEMBER_NAME(solid,"solid");
	HX_MARK_MEMBER_NAME(resetOrigin,"resetOrigin");
	HX_MARK_MEMBER_NAME(realX,"realX");
	HX_MARK_MEMBER_NAME(realY,"realY");
	HX_MARK_MEMBER_NAME(realAngle,"realAngle");
	HX_MARK_MEMBER_NAME(realScaleX,"realScaleX");
	HX_MARK_MEMBER_NAME(realScaleY,"realScaleY");
	HX_MARK_MEMBER_NAME(lastX,"lastX");
	HX_MARK_MEMBER_NAME(lastY,"lastY");
	HX_MARK_MEMBER_NAME(lastAngle,"lastAngle");
	HX_MARK_MEMBER_NAME(lastScale,"lastScale");
	HX_MARK_MEMBER_NAME(colX,"colX");
	HX_MARK_MEMBER_NAME(colY,"colY");
	HX_MARK_MEMBER_NAME(xSpeed,"xSpeed");
	HX_MARK_MEMBER_NAME(ySpeed,"ySpeed");
	HX_MARK_MEMBER_NAME(rSpeed,"rSpeed");
	HX_MARK_MEMBER_NAME(continuousCollision,"continuousCollision");
	HX_MARK_MEMBER_NAME(tweenProps,"tweenProps");
	HX_MARK_MEMBER_NAME(cacheWidth,"cacheWidth");
	HX_MARK_MEMBER_NAME(cacheHeight,"cacheHeight");
	HX_MARK_MEMBER_NAME(currAnimation,"currAnimation");
	HX_MARK_MEMBER_NAME(currAnimationName,"currAnimationName");
	HX_MARK_MEMBER_NAME(animationMap,"animationMap");
	HX_MARK_MEMBER_NAME(bitmapFilters,"bitmapFilters");
	HX_MARK_MEMBER_NAME(sprite,"sprite");
	HX_MARK_MEMBER_NAME(shapeMap,"shapeMap");
	HX_MARK_MEMBER_NAME(originMap,"originMap");
	HX_MARK_MEMBER_NAME(defaultAnim,"defaultAnim");
	HX_MARK_MEMBER_NAME(currOrigin,"currOrigin");
	HX_MARK_MEMBER_NAME(currOffset,"currOffset");
	HX_MARK_MEMBER_NAME(cacheAnchor,"cacheAnchor");
	HX_MARK_MEMBER_NAME(transformObj,"transformObj");
	HX_MARK_MEMBER_NAME(transformPoint,"transformPoint");
	HX_MARK_MEMBER_NAME(transformMatrix,"transformMatrix");
	HX_MARK_MEMBER_NAME(updateMatrix,"updateMatrix");
	HX_MARK_MEMBER_NAME(drawMatrix,"drawMatrix");
	HX_MARK_MEMBER_NAME(label,"label");
	HX_MARK_MEMBER_NAME(attachedImages,"attachedImages");
	HX_MARK_MEMBER_NAME(smoothMove,"smoothMove");
	HX_MARK_MEMBER_NAME(firstMove,"firstMove");
	HX_MARK_MEMBER_NAME(snapOnSet,"snapOnSet");
	HX_MARK_MEMBER_NAME(drawX,"drawX");
	HX_MARK_MEMBER_NAME(drawY,"drawY");
	HX_MARK_MEMBER_NAME(moveMultiplier,"moveMultiplier");
	HX_MARK_MEMBER_NAME(moveXDistance,"moveXDistance");
	HX_MARK_MEMBER_NAME(moveYDistance,"moveYDistance");
	HX_MARK_MEMBER_NAME(minMove,"minMove");
	HX_MARK_MEMBER_NAME(maxMove,"maxMove");
	HX_MARK_MEMBER_NAME(behaviors,"behaviors");
	HX_MARK_MEMBER_NAME(registry,"registry");
	HX_MARK_MEMBER_NAME(allListeners,"allListeners");
	HX_MARK_MEMBER_NAME(allListenerReferences,"allListenerReferences");
	HX_MARK_MEMBER_NAME(whenCreatedListeners,"whenCreatedListeners");
	HX_MARK_MEMBER_NAME(whenUpdatedListeners,"whenUpdatedListeners");
	HX_MARK_MEMBER_NAME(whenDrawingListeners,"whenDrawingListeners");
	HX_MARK_MEMBER_NAME(whenKilledListeners,"whenKilledListeners");
	HX_MARK_MEMBER_NAME(mouseOverListeners,"mouseOverListeners");
	HX_MARK_MEMBER_NAME(positionListeners,"positionListeners");
	HX_MARK_MEMBER_NAME(collisionListeners,"collisionListeners");
	HX_MARK_MEMBER_NAME(positionListenerCount,"positionListenerCount");
	HX_MARK_MEMBER_NAME(collisionListenerCount,"collisionListenerCount");
	HX_MARK_MEMBER_NAME(mouseState,"mouseState");
	HX_MARK_MEMBER_NAME(lastScreenState,"lastScreenState");
	HX_MARK_MEMBER_NAME(lastSceneState,"lastSceneState");
	HX_MARK_MEMBER_NAME(isOnScreenCache,"isOnScreenCache");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_MEMBER_NAME(bodyDef,"bodyDef");
	HX_MARK_MEMBER_NAME(md,"md");
	HX_MARK_MEMBER_NAME(bodyScale,"bodyScale");
	HX_MARK_MEMBER_NAME(handlesCollisions,"handlesCollisions");
	HX_MARK_MEMBER_NAME(contacts,"contacts");
	HX_MARK_MEMBER_NAME(regionContacts,"regionContacts");
	HX_MARK_MEMBER_NAME(collisions,"collisions");
	HX_MARK_MEMBER_NAME(dummy,"dummy");
	HX_MARK_MEMBER_NAME(zero,"zero");
	HX_MARK_MEMBER_NAME(defaultHitbox,"defaultHitbox");
	HX_MARK_MEMBER_NAME(defaultMasklist,"defaultMasklist");
	HX_MARK_MEMBER_NAME(contactCount,"contactCount");
	HX_MARK_MEMBER_NAME(collisionsCount,"collisionsCount");
	HX_MARK_MEMBER_NAME(HITBOX,"HITBOX");
	HX_MARK_MEMBER_NAME(_mask,"_mask");
	HX_MARK_MEMBER_NAME(colMask,"colMask");
	HX_MARK_MEMBER_NAME(_x,"_x");
	HX_MARK_MEMBER_NAME(_y,"_y");
	HX_MARK_MEMBER_NAME(_moveX,"_moveX");
	HX_MARK_MEMBER_NAME(_moveY,"_moveY");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(simpleCollisions,"simpleCollisions");
	HX_MARK_MEMBER_NAME(collidedList,"collidedList");
	HX_MARK_MEMBER_NAME(listChecked,"listChecked");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Actor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(engine,"engine");
	HX_VISIT_MEMBER_NAME(createTime,"createTime");
	HX_VISIT_MEMBER_NAME(ID,"ID");
	HX_VISIT_MEMBER_NAME(groupID,"groupID");
	HX_VISIT_MEMBER_NAME(cachedLayer,"cachedLayer");
	HX_VISIT_MEMBER_NAME(layer,"layer");
	HX_VISIT_MEMBER_NAME(typeID,"typeID");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(recycled,"recycled");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(isRegion,"isRegion");
	HX_VISIT_MEMBER_NAME(isTerrainRegion,"isTerrainRegion");
	HX_VISIT_MEMBER_NAME(isTerrain,"isTerrain");
	HX_VISIT_MEMBER_NAME(destroyed,"destroyed");
	HX_VISIT_MEMBER_NAME(drawActor,"drawActor");
	HX_VISIT_MEMBER_NAME(isHUD,"isHUD");
	HX_VISIT_MEMBER_NAME(alwaysSimulate,"alwaysSimulate");
	HX_VISIT_MEMBER_NAME(isCamera,"isCamera");
	HX_VISIT_MEMBER_NAME(killLeaveScreen,"killLeaveScreen");
	HX_VISIT_MEMBER_NAME(physicsMode,"physicsMode");
	HX_VISIT_MEMBER_NAME(autoScale,"autoScale");
	HX_VISIT_MEMBER_NAME(dead,"dead");
	HX_VISIT_MEMBER_NAME(dying,"dying");
	HX_VISIT_MEMBER_NAME(fixedRotation,"fixedRotation");
	HX_VISIT_MEMBER_NAME(ignoreGravity,"ignoreGravity");
	HX_VISIT_MEMBER_NAME(defaultGravity,"defaultGravity");
	HX_VISIT_MEMBER_NAME(collidable,"collidable");
	HX_VISIT_MEMBER_NAME(solid,"solid");
	HX_VISIT_MEMBER_NAME(resetOrigin,"resetOrigin");
	HX_VISIT_MEMBER_NAME(realX,"realX");
	HX_VISIT_MEMBER_NAME(realY,"realY");
	HX_VISIT_MEMBER_NAME(realAngle,"realAngle");
	HX_VISIT_MEMBER_NAME(realScaleX,"realScaleX");
	HX_VISIT_MEMBER_NAME(realScaleY,"realScaleY");
	HX_VISIT_MEMBER_NAME(lastX,"lastX");
	HX_VISIT_MEMBER_NAME(lastY,"lastY");
	HX_VISIT_MEMBER_NAME(lastAngle,"lastAngle");
	HX_VISIT_MEMBER_NAME(lastScale,"lastScale");
	HX_VISIT_MEMBER_NAME(colX,"colX");
	HX_VISIT_MEMBER_NAME(colY,"colY");
	HX_VISIT_MEMBER_NAME(xSpeed,"xSpeed");
	HX_VISIT_MEMBER_NAME(ySpeed,"ySpeed");
	HX_VISIT_MEMBER_NAME(rSpeed,"rSpeed");
	HX_VISIT_MEMBER_NAME(continuousCollision,"continuousCollision");
	HX_VISIT_MEMBER_NAME(tweenProps,"tweenProps");
	HX_VISIT_MEMBER_NAME(cacheWidth,"cacheWidth");
	HX_VISIT_MEMBER_NAME(cacheHeight,"cacheHeight");
	HX_VISIT_MEMBER_NAME(currAnimation,"currAnimation");
	HX_VISIT_MEMBER_NAME(currAnimationName,"currAnimationName");
	HX_VISIT_MEMBER_NAME(animationMap,"animationMap");
	HX_VISIT_MEMBER_NAME(bitmapFilters,"bitmapFilters");
	HX_VISIT_MEMBER_NAME(sprite,"sprite");
	HX_VISIT_MEMBER_NAME(shapeMap,"shapeMap");
	HX_VISIT_MEMBER_NAME(originMap,"originMap");
	HX_VISIT_MEMBER_NAME(defaultAnim,"defaultAnim");
	HX_VISIT_MEMBER_NAME(currOrigin,"currOrigin");
	HX_VISIT_MEMBER_NAME(currOffset,"currOffset");
	HX_VISIT_MEMBER_NAME(cacheAnchor,"cacheAnchor");
	HX_VISIT_MEMBER_NAME(transformObj,"transformObj");
	HX_VISIT_MEMBER_NAME(transformPoint,"transformPoint");
	HX_VISIT_MEMBER_NAME(transformMatrix,"transformMatrix");
	HX_VISIT_MEMBER_NAME(updateMatrix,"updateMatrix");
	HX_VISIT_MEMBER_NAME(drawMatrix,"drawMatrix");
	HX_VISIT_MEMBER_NAME(label,"label");
	HX_VISIT_MEMBER_NAME(attachedImages,"attachedImages");
	HX_VISIT_MEMBER_NAME(smoothMove,"smoothMove");
	HX_VISIT_MEMBER_NAME(firstMove,"firstMove");
	HX_VISIT_MEMBER_NAME(snapOnSet,"snapOnSet");
	HX_VISIT_MEMBER_NAME(drawX,"drawX");
	HX_VISIT_MEMBER_NAME(drawY,"drawY");
	HX_VISIT_MEMBER_NAME(moveMultiplier,"moveMultiplier");
	HX_VISIT_MEMBER_NAME(moveXDistance,"moveXDistance");
	HX_VISIT_MEMBER_NAME(moveYDistance,"moveYDistance");
	HX_VISIT_MEMBER_NAME(minMove,"minMove");
	HX_VISIT_MEMBER_NAME(maxMove,"maxMove");
	HX_VISIT_MEMBER_NAME(behaviors,"behaviors");
	HX_VISIT_MEMBER_NAME(registry,"registry");
	HX_VISIT_MEMBER_NAME(allListeners,"allListeners");
	HX_VISIT_MEMBER_NAME(allListenerReferences,"allListenerReferences");
	HX_VISIT_MEMBER_NAME(whenCreatedListeners,"whenCreatedListeners");
	HX_VISIT_MEMBER_NAME(whenUpdatedListeners,"whenUpdatedListeners");
	HX_VISIT_MEMBER_NAME(whenDrawingListeners,"whenDrawingListeners");
	HX_VISIT_MEMBER_NAME(whenKilledListeners,"whenKilledListeners");
	HX_VISIT_MEMBER_NAME(mouseOverListeners,"mouseOverListeners");
	HX_VISIT_MEMBER_NAME(positionListeners,"positionListeners");
	HX_VISIT_MEMBER_NAME(collisionListeners,"collisionListeners");
	HX_VISIT_MEMBER_NAME(positionListenerCount,"positionListenerCount");
	HX_VISIT_MEMBER_NAME(collisionListenerCount,"collisionListenerCount");
	HX_VISIT_MEMBER_NAME(mouseState,"mouseState");
	HX_VISIT_MEMBER_NAME(lastScreenState,"lastScreenState");
	HX_VISIT_MEMBER_NAME(lastSceneState,"lastSceneState");
	HX_VISIT_MEMBER_NAME(isOnScreenCache,"isOnScreenCache");
	HX_VISIT_MEMBER_NAME(body,"body");
	HX_VISIT_MEMBER_NAME(bodyDef,"bodyDef");
	HX_VISIT_MEMBER_NAME(md,"md");
	HX_VISIT_MEMBER_NAME(bodyScale,"bodyScale");
	HX_VISIT_MEMBER_NAME(handlesCollisions,"handlesCollisions");
	HX_VISIT_MEMBER_NAME(contacts,"contacts");
	HX_VISIT_MEMBER_NAME(regionContacts,"regionContacts");
	HX_VISIT_MEMBER_NAME(collisions,"collisions");
	HX_VISIT_MEMBER_NAME(dummy,"dummy");
	HX_VISIT_MEMBER_NAME(zero,"zero");
	HX_VISIT_MEMBER_NAME(defaultHitbox,"defaultHitbox");
	HX_VISIT_MEMBER_NAME(defaultMasklist,"defaultMasklist");
	HX_VISIT_MEMBER_NAME(contactCount,"contactCount");
	HX_VISIT_MEMBER_NAME(collisionsCount,"collisionsCount");
	HX_VISIT_MEMBER_NAME(HITBOX,"HITBOX");
	HX_VISIT_MEMBER_NAME(_mask,"_mask");
	HX_VISIT_MEMBER_NAME(colMask,"colMask");
	HX_VISIT_MEMBER_NAME(_x,"_x");
	HX_VISIT_MEMBER_NAME(_y,"_y");
	HX_VISIT_MEMBER_NAME(_moveX,"_moveX");
	HX_VISIT_MEMBER_NAME(_moveY,"_moveY");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(simpleCollisions,"simpleCollisions");
	HX_VISIT_MEMBER_NAME(collidedList,"collidedList");
	HX_VISIT_MEMBER_NAME(listChecked,"listChecked");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Actor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { return hx::Val( ID ); }
		if (HX_FIELD_EQ(inName,"md") ) { return hx::Val( md ); }
		if (HX_FIELD_EQ(inName,"_x") ) { return hx::Val( _x ); }
		if (HX_FIELD_EQ(inName,"_y") ) { return hx::Val( _y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"say") ) { return hx::Val( say_dyn() ); }
		if (HX_FIELD_EQ(inName,"die") ) { return hx::Val( die_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"dead") ) { return hx::Val( dead ); }
		if (HX_FIELD_EQ(inName,"colX") ) { return hx::Val( colX ); }
		if (HX_FIELD_EQ(inName,"colY") ) { return hx::Val( colY ); }
		if (HX_FIELD_EQ(inName,"body") ) { return hx::Val( body ); }
		if (HX_FIELD_EQ(inName,"zero") ) { return hx::Val( zero ); }
		if (HX_FIELD_EQ(inName,"getX") ) { return hx::Val( getX_dyn() ); }
		if (HX_FIELD_EQ(inName,"getY") ) { return hx::Val( getY_dyn() ); }
		if (HX_FIELD_EQ(inName,"setX") ) { return hx::Val( setX_dyn() ); }
		if (HX_FIELD_EQ(inName,"setY") ) { return hx::Val( setY_dyn() ); }
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"layer") ) { return hx::Val( layer ); }
		if (HX_FIELD_EQ(inName,"isHUD") ) { return hx::Val( isHUD ); }
		if (HX_FIELD_EQ(inName,"dying") ) { return hx::Val( dying ); }
		if (HX_FIELD_EQ(inName,"solid") ) { return hx::Val( solid ); }
		if (HX_FIELD_EQ(inName,"realX") ) { return hx::Val( realX ); }
		if (HX_FIELD_EQ(inName,"realY") ) { return hx::Val( realY ); }
		if (HX_FIELD_EQ(inName,"lastX") ) { return hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return hx::Val( lastY ); }
		if (HX_FIELD_EQ(inName,"label") ) { return hx::Val( label ); }
		if (HX_FIELD_EQ(inName,"drawX") ) { return hx::Val( drawX ); }
		if (HX_FIELD_EQ(inName,"drawY") ) { return hx::Val( drawY ); }
		if (HX_FIELD_EQ(inName,"dummy") ) { return hx::Val( dummy ); }
		if (HX_FIELD_EQ(inName,"getID") ) { return hx::Val( getID_dyn() ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		if (HX_FIELD_EQ(inName,"setXY") ) { return hx::Val( setXY_dyn() ); }
		if (HX_FIELD_EQ(inName,"shout") ) { return hx::Val( shout_dyn() ); }
		if (HX_FIELD_EQ(inName,"shape") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shape() ); }
		if (HX_FIELD_EQ(inName,"_mask") ) { return hx::Val( _mask ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"engine") ) { return hx::Val( engine ); }
		if (HX_FIELD_EQ(inName,"typeID") ) { return hx::Val( typeID ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"xSpeed") ) { return hx::Val( xSpeed ); }
		if (HX_FIELD_EQ(inName,"ySpeed") ) { return hx::Val( ySpeed ); }
		if (HX_FIELD_EQ(inName,"rSpeed") ) { return hx::Val( rSpeed ); }
		if (HX_FIELD_EQ(inName,"sprite") ) { return hx::Val( sprite ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveUp") ) { return hx::Val( moveUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"follow") ) { return hx::Val( follow_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		if (HX_FIELD_EQ(inName,"fadeTo") ) { return hx::Val( fadeTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"growTo") ) { return hx::Val( growTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"spinTo") ) { return hx::Val( spinTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"spinBy") ) { return hx::Val( spinBy_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveBy") ) { return hx::Val( moveBy_dyn() ); }
		if (HX_FIELD_EQ(inName,"HITBOX") ) { return hx::Val( HITBOX ); }
		if (HX_FIELD_EQ(inName,"_moveX") ) { return hx::Val( _moveX ); }
		if (HX_FIELD_EQ(inName,"_moveY") ) { return hx::Val( _moveY ); }
		if (HX_FIELD_EQ(inName,"_point") ) { return hx::Val( _point ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"groupID") ) { return hx::Val( groupID ); }
		if (HX_FIELD_EQ(inName,"minMove") ) { return hx::Val( minMove ); }
		if (HX_FIELD_EQ(inName,"maxMove") ) { return hx::Val( maxMove ); }
		if (HX_FIELD_EQ(inName,"bodyDef") ) { return hx::Val( bodyDef ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAnim") ) { return hx::Val( addAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		if (HX_FIELD_EQ(inName,"getType") ) { return hx::Val( getType_dyn() ); }
		if (HX_FIELD_EQ(inName,"unpause") ) { return hx::Val( unpause_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBody") ) { return hx::Val( getBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMass") ) { return hx::Val( getMass_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMass") ) { return hx::Val( setMass_dyn() ); }
		if (HX_FIELD_EQ(inName,"isDying") ) { return hx::Val( isDying_dyn() ); }
		if (HX_FIELD_EQ(inName,"isAlive") ) { return hx::Val( isAlive_dyn() ); }
		if (HX_FIELD_EQ(inName,"collide") ) { return hx::Val( collide_dyn() ); }
		if (HX_FIELD_EQ(inName,"colMask") ) { return hx::Val( colMask ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"recycled") ) { return hx::Val( recycled ); }
		if (HX_FIELD_EQ(inName,"isRegion") ) { return hx::Val( isRegion ); }
		if (HX_FIELD_EQ(inName,"isCamera") ) { return hx::Val( isCamera ); }
		if (HX_FIELD_EQ(inName,"shapeMap") ) { return hx::Val( shapeMap ); }
		if (HX_FIELD_EQ(inName,"registry") ) { return hx::Val( registry ); }
		if (HX_FIELD_EQ(inName,"contacts") ) { return hx::Val( contacts ); }
		if (HX_FIELD_EQ(inName,"initBody") ) { return hx::Val( initBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLayer") ) { return hx::Val( getLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"isPaused") ) { return hx::Val( isPaused_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroup") ) { return hx::Val( getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveDown") ) { return hx::Val( moveDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAngle") ) { return hx::Val( getAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAngle") ) { return hx::Val( setAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"getWidth") ) { return hx::Val( getWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"getValue") ) { return hx::Val( getValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"setValue") ) { return hx::Val( setValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isTerrain") ) { return hx::Val( isTerrain ); }
		if (HX_FIELD_EQ(inName,"destroyed") ) { return hx::Val( destroyed ); }
		if (HX_FIELD_EQ(inName,"drawActor") ) { return hx::Val( drawActor ); }
		if (HX_FIELD_EQ(inName,"autoScale") ) { return hx::Val( autoScale ); }
		if (HX_FIELD_EQ(inName,"realAngle") ) { return hx::Val( realAngle ); }
		if (HX_FIELD_EQ(inName,"lastAngle") ) { return hx::Val( lastAngle ); }
		if (HX_FIELD_EQ(inName,"lastScale") ) { return hx::Val( lastScale ); }
		if (HX_FIELD_EQ(inName,"originMap") ) { return hx::Val( originMap ); }
		if (HX_FIELD_EQ(inName,"firstMove") ) { return hx::Val( firstMove ); }
		if (HX_FIELD_EQ(inName,"snapOnSet") ) { return hx::Val( snapOnSet ); }
		if (HX_FIELD_EQ(inName,"behaviors") ) { return hx::Val( behaviors ); }
		if (HX_FIELD_EQ(inName,"bodyScale") ) { return hx::Val( bodyScale ); }
		if (HX_FIELD_EQ(inName,"scaleBody") ) { return hx::Val( scaleBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveToTop") ) { return hx::Val( moveToTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"getZIndex") ) { return hx::Val( getZIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"setZIndex") ) { return hx::Val( setZIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"getHeight") ) { return hx::Val( getHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawImage") ) { return hx::Val( drawImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFilter") ) { return hx::Val( setFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"isInScene") ) { return hx::Val( isInScene_dyn() ); }
		if (HX_FIELD_EQ(inName,"addVertex") ) { return hx::Val( addVertex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_shape") ) { return hx::Val( get_shape_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shape") ) { return hx::Val( set_shape_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetReal") ) { return hx::Val( resetReal_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createTime") ) { return hx::Val( createTime ); }
		if (HX_FIELD_EQ(inName,"collidable") ) { return hx::Val( collidable ); }
		if (HX_FIELD_EQ(inName,"realScaleX") ) { return hx::Val( realScaleX ); }
		if (HX_FIELD_EQ(inName,"realScaleY") ) { return hx::Val( realScaleY ); }
		if (HX_FIELD_EQ(inName,"tweenProps") ) { return hx::Val( tweenProps ); }
		if (HX_FIELD_EQ(inName,"cacheWidth") ) { return hx::Val( cacheWidth ); }
		if (HX_FIELD_EQ(inName,"currOrigin") ) { return hx::Val( currOrigin ); }
		if (HX_FIELD_EQ(inName,"currOffset") ) { return hx::Val( currOffset ); }
		if (HX_FIELD_EQ(inName,"drawMatrix") ) { return hx::Val( drawMatrix ); }
		if (HX_FIELD_EQ(inName,"smoothMove") ) { return hx::Val( smoothMove ); }
		if (HX_FIELD_EQ(inName,"mouseState") ) { return hx::Val( mouseState ); }
		if (HX_FIELD_EQ(inName,"collisions") ) { return hx::Val( collisions ); }
		if (HX_FIELD_EQ(inName,"addContact") ) { return hx::Val( addContact_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroupID") ) { return hx::Val( getGroupID_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLayerID") ) { return hx::Val( getLayerID_dyn() ); }
		if (HX_FIELD_EQ(inName,"isPausable") ) { return hx::Val( isPausable_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendToBack") ) { return hx::Val( sendToBack_dyn() ); }
		if (HX_FIELD_EQ(inName,"getXCenter") ) { return hx::Val( getXCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYCenter") ) { return hx::Val( getYCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"getScreenX") ) { return hx::Val( getScreenX_dyn() ); }
		if (HX_FIELD_EQ(inName,"getScreenY") ) { return hx::Val( getScreenY_dyn() ); }
		if (HX_FIELD_EQ(inName,"setXCenter") ) { return hx::Val( setXCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"setYCenter") ) { return hx::Val( setYCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScreenX") ) { return hx::Val( setScreenX_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScreenY") ) { return hx::Val( setScreenY_dyn() ); }
		if (HX_FIELD_EQ(inName,"accelerate") ) { return hx::Val( accelerate_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawsImage") ) { return hx::Val( drawsImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return hx::Val( isOnScreen_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cachedLayer") ) { return hx::Val( cachedLayer ); }
		if (HX_FIELD_EQ(inName,"physicsMode") ) { return hx::Val( physicsMode ); }
		if (HX_FIELD_EQ(inName,"resetOrigin") ) { return hx::Val( resetOrigin ); }
		if (HX_FIELD_EQ(inName,"cacheHeight") ) { return hx::Val( cacheHeight ); }
		if (HX_FIELD_EQ(inName,"defaultAnim") ) { return hx::Val( defaultAnim ); }
		if (HX_FIELD_EQ(inName,"cacheAnchor") ) { return hx::Val( cacheAnchor ); }
		if (HX_FIELD_EQ(inName,"initScripts") ) { return hx::Val( initScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"innerUpdate") ) { return hx::Val( innerUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIsRegion") ) { return hx::Val( getIsRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveToLayer") ) { return hx::Val( moveToLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVelocity") ) { return hx::Val( setVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"accelerateX") ) { return hx::Val( accelerateX_dyn() ); }
		if (HX_FIELD_EQ(inName,"accelerateY") ) { return hx::Val( accelerateY_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyTorque") ) { return hx::Val( applyTorque_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFriction") ) { return hx::Val( getFriction_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFriction") ) { return hx::Val( setFriction_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMouseOver") ) { return hx::Val( isMouseOver_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMouseDown") ) { return hx::Val( isMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"addBehavior") ) { return hx::Val( addBehavior_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasBehavior") ) { return hx::Val( hasBehavior_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLocation") ) { return hx::Val( setLocation_dyn() ); }
		if (HX_FIELD_EQ(inName,"collideWith") ) { return hx::Val( collideWith_dyn() ); }
		if (HX_FIELD_EQ(inName,"collideInto") ) { return hx::Val( collideInto_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveActorBy") ) { return hx::Val( moveActorBy_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveActorTo") ) { return hx::Val( moveActorTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"listChecked") ) { return hx::Val( listChecked ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"animationMap") ) { return hx::Val( animationMap ); }
		if (HX_FIELD_EQ(inName,"transformObj") ) { return hx::Val( transformObj ); }
		if (HX_FIELD_EQ(inName,"updateMatrix") ) { return hx::Val( updateMatrix ); }
		if (HX_FIELD_EQ(inName,"allListeners") ) { return hx::Val( allListeners ); }
		if (HX_FIELD_EQ(inName,"initFromBody") ) { return hx::Val( initFromBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"addAnimation") ) { return hx::Val( addAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnimation") ) { return hx::Val( getAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAnimation") ) { return hx::Val( setAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNumFrames") ) { return hx::Val( getNumFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"contactCount") ) { return hx::Val( contactCount ); }
		if (HX_FIELD_EQ(inName,"getLayerName") ) { return hx::Val( getLayerName_dyn() ); }
		if (HX_FIELD_EQ(inName,"bringToFront") ) { return hx::Val( bringToFront_dyn() ); }
		if (HX_FIELD_EQ(inName,"bringForward") ) { return hx::Val( bringForward_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendBackward") ) { return hx::Val( sendBackward_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveToBottom") ) { return hx::Val( moveToBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"getXVelocity") ) { return hx::Val( getXVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYVelocity") ) { return hx::Val( getYVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"setXVelocity") ) { return hx::Val( setXVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"setYVelocity") ) { return hx::Val( setYVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyImpulse") ) { return hx::Val( applyImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMouseHover") ) { return hx::Val( isMouseHover_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancelTweens") ) { return hx::Val( cancelTweens_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearFilters") ) { return hx::Val( clearFilters_dyn() ); }
		if (HX_FIELD_EQ(inName,"setBlendMode") ) { return hx::Val( setBlendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"collideTypes") ) { return hx::Val( collideTypes_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCollision") ) { return hx::Val( addCollision_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCollideX") ) { return hx::Val( moveCollideX_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCollideY") ) { return hx::Val( moveCollideY_dyn() ); }
		if (HX_FIELD_EQ(inName,"collidedList") ) { return hx::Val( collidedList ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedRotation") ) { return hx::Val( fixedRotation ); }
		if (HX_FIELD_EQ(inName,"ignoreGravity") ) { return hx::Val( ignoreGravity ); }
		if (HX_FIELD_EQ(inName,"currAnimation") ) { return hx::Val( currAnimation ); }
		if (HX_FIELD_EQ(inName,"bitmapFilters") ) { return hx::Val( bitmapFilters ); }
		if (HX_FIELD_EQ(inName,"moveXDistance") ) { return hx::Val( moveXDistance ); }
		if (HX_FIELD_EQ(inName,"moveYDistance") ) { return hx::Val( moveYDistance ); }
		if (HX_FIELD_EQ(inName,"defaultHitbox") ) { return hx::Val( defaultHitbox ); }
		if (HX_FIELD_EQ(inName,"updateTweenXY") ) { return hx::Val( updateTweenXY_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeContact") ) { return hx::Val( removeContact_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLayerOrder") ) { return hx::Val( getLayerOrder_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBounciness") ) { return hx::Val( getBounciness_dyn() ); }
		if (HX_FIELD_EQ(inName,"setBounciness") ) { return hx::Val( setBounciness_dyn() ); }
		if (HX_FIELD_EQ(inName,"setActorValue") ) { return hx::Val( setActorValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"getActorValue") ) { return hx::Val( getActorValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasActorValue") ) { return hx::Val( hasActorValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"createFixture") ) { return hx::Val( createFixture_dyn() ); }
		if (HX_FIELD_EQ(inName,"adjustByWidth") ) { return hx::Val( adjustByWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"alwaysSimulate") ) { return hx::Val( alwaysSimulate ); }
		if (HX_FIELD_EQ(inName,"defaultGravity") ) { return hx::Val( defaultGravity ); }
		if (HX_FIELD_EQ(inName,"transformPoint") ) { return hx::Val( transformPoint ); }
		if (HX_FIELD_EQ(inName,"attachedImages") ) { return hx::Val( attachedImages ); }
		if (HX_FIELD_EQ(inName,"moveMultiplier") ) { return hx::Val( moveMultiplier ); }
		if (HX_FIELD_EQ(inName,"lastSceneState") ) { return hx::Val( lastSceneState ); }
		if (HX_FIELD_EQ(inName,"regionContacts") ) { return hx::Val( regionContacts ); }
		if (HX_FIELD_EQ(inName,"resetListeners") ) { return hx::Val( resetListeners_dyn() ); }
		if (HX_FIELD_EQ(inName,"internalUpdate") ) { return hx::Val( internalUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOriginPoint") ) { return hx::Val( setOriginPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"enableRotation") ) { return hx::Val( enableRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"ignoresGravity") ) { return hx::Val( ignoresGravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAngularMass") ) { return hx::Val( getAngularMass_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAngularMass") ) { return hx::Val( setAngularMass_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMousePressed") ) { return hx::Val( isMousePressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetBlendMode") ) { return hx::Val( resetBlendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"enableBehavior") ) { return hx::Val( enableBehavior_dyn() ); }
		if (HX_FIELD_EQ(inName,"anchorToScreen") ) { return hx::Val( anchorToScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"adjustByHeight") ) { return hx::Val( adjustByHeight_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isTerrainRegion") ) { return hx::Val( isTerrainRegion ); }
		if (HX_FIELD_EQ(inName,"killLeaveScreen") ) { return hx::Val( killLeaveScreen ); }
		if (HX_FIELD_EQ(inName,"transformMatrix") ) { return hx::Val( transformMatrix ); }
		if (HX_FIELD_EQ(inName,"lastScreenState") ) { return hx::Val( lastScreenState ); }
		if (HX_FIELD_EQ(inName,"isOnScreenCache") ) { return hx::Val( isOnScreenCache ); }
		if (HX_FIELD_EQ(inName,"defaultMasklist") ) { return hx::Val( defaultMasklist ); }
		if (HX_FIELD_EQ(inName,"getCurrentFrame") ) { return hx::Val( getCurrentFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCurrentFrame") ) { return hx::Val( setCurrentFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"switchAnimation") ) { return hx::Val( switchAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBodyScale") ) { return hx::Val( updateBodyScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"collisionsCount") ) { return hx::Val( collisionsCount ); }
		if (HX_FIELD_EQ(inName,"pushInDirection") ) { return hx::Val( pushInDirection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPhysicsWidth") ) { return hx::Val( getPhysicsWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"disableRotation") ) { return hx::Val( disableRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMouseReleased") ) { return hx::Val( isMouseReleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentImage") ) { return hx::Val( getCurrentImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"disableBehavior") ) { return hx::Val( disableBehavior_dyn() ); }
		if (HX_FIELD_EQ(inName,"alwaysSimulates") ) { return hx::Val( alwaysSimulates_dyn() ); }
		if (HX_FIELD_EQ(inName,"alreadyCollided") ) { return hx::Val( alreadyCollided_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateTweenAlpha") ) { return hx::Val( updateTweenAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTweenAngle") ) { return hx::Val( updateTweenAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkScreenState") ) { return hx::Val( checkScreenState_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleCollisions") ) { return hx::Val( handleCollisions_dyn() ); }
		if (HX_FIELD_EQ(inName,"addRegionContact") ) { return hx::Val( addRegionContact_dyn() ); }
		if (HX_FIELD_EQ(inName,"followWithOffset") ) { return hx::Val( followWithOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPhysicsHeight") ) { return hx::Val( getPhysicsHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"setIgnoreGravity") ) { return hx::Val( setIgnoreGravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLinearDamping") ) { return hx::Val( getLinearDamping_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLinearDamping") ) { return hx::Val( setLinearDamping_dyn() ); }
		if (HX_FIELD_EQ(inName,"registerListener") ) { return hx::Val( registerListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCircularShape") ) { return hx::Val( addCircularShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveActorTowards") ) { return hx::Val( moveActorTowards_dyn() ); }
		if (HX_FIELD_EQ(inName,"simpleCollisions") ) { return hx::Val( simpleCollisions ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currAnimationName") ) { return hx::Val( currAnimationName ); }
		if (HX_FIELD_EQ(inName,"positionListeners") ) { return hx::Val( positionListeners ); }
		if (HX_FIELD_EQ(inName,"handlesCollisions") ) { return hx::Val( handlesCollisions ); }
		if (HX_FIELD_EQ(inName,"getAngleInDegrees") ) { return hx::Val( getAngleInDegrees_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAngularDamping") ) { return hx::Val( getAngularDamping_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAngularDamping") ) { return hx::Val( setAngularDamping_dyn() ); }
		if (HX_FIELD_EQ(inName,"isBehaviorEnabled") ) { return hx::Val( isBehaviorEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"addPolygonalShape") ) { return hx::Val( addPolygonalShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearCollidedList") ) { return hx::Val( clearCollidedList_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillCollisionInfo") ) { return hx::Val( fillCollisionInfo_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mouseOverListeners") ) { return hx::Val( mouseOverListeners ); }
		if (HX_FIELD_EQ(inName,"collisionListeners") ) { return hx::Val( collisionListeners ); }
		if (HX_FIELD_EQ(inName,"isAnimationPlaying") ) { return hx::Val( isAnimationPlaying_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTweenScaleXY") ) { return hx::Val( updateTweenScaleXY_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIsTerrainRegion") ) { return hx::Val( getIsTerrainRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"enableSmoothMotion") ) { return hx::Val( enableSmoothMotion_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAngularVelocity") ) { return hx::Val( getAngularVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAngularVelocity") ) { return hx::Val( setAngularVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"enableActorDrawing") ) { return hx::Val( enableActorDrawing_dyn() ); }
		if (HX_FIELD_EQ(inName,"enableAllBehaviors") ) { return hx::Val( enableAllBehaviors_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeAllListeners") ) { return hx::Val( removeAllListeners_dyn() ); }
		if (HX_FIELD_EQ(inName,"unanchorFromScreen") ) { return hx::Val( unanchorFromScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"isAnchoredToScreen") ) { return hx::Val( isAnchoredToScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeAlwaysSimulate") ) { return hx::Val( makeAlwaysSimulate_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"continuousCollision") ) { return hx::Val( continuousCollision ); }
		if (HX_FIELD_EQ(inName,"whenKilledListeners") ) { return hx::Val( whenKilledListeners ); }
		if (HX_FIELD_EQ(inName,"defaultShapeChanged") ) { return hx::Val( defaultShapeChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateDrawingMatrix") ) { return hx::Val( updateDrawingMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeRegionContact") ) { return hx::Val( removeRegionContact_dyn() ); }
		if (HX_FIELD_EQ(inName,"disableActorDrawing") ) { return hx::Val( disableActorDrawing_dyn() ); }
		if (HX_FIELD_EQ(inName,"addRectangularShape") ) { return hx::Val( addRectangularShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAllCollisionInfo") ) { return hx::Val( getAllCollisionInfo_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"whenCreatedListeners") ) { return hx::Val( whenCreatedListeners ); }
		if (HX_FIELD_EQ(inName,"whenUpdatedListeners") ) { return hx::Val( whenUpdatedListeners ); }
		if (HX_FIELD_EQ(inName,"whenDrawingListeners") ) { return hx::Val( whenDrawingListeners ); }
		if (HX_FIELD_EQ(inName,"removeAttachedImages") ) { return hx::Val( removeAttachedImages_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLastCollidedActor") ) { return hx::Val( getLastCollidedActor_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"allListenerReferences") ) { return hx::Val( allListenerReferences ); }
		if (HX_FIELD_EQ(inName,"positionListenerCount") ) { return hx::Val( positionListenerCount ); }
		if (HX_FIELD_EQ(inName,"changeAngularVelocity") ) { return hx::Val( changeAngularVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeSometimesSimulate") ) { return hx::Val( makeSometimesSimulate_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLastCreatedFixture") ) { return hx::Val( getLastCreatedFixture_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"collisionListenerCount") ) { return hx::Val( collisionListenerCount ); }
		if (HX_FIELD_EQ(inName,"clearCollisionInfoList") ) { return hx::Val( clearCollisionInfoList_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleCollisionsSimple") ) { return hx::Val( handleCollisionsSimple_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"reloadAnimationGraphics") ) { return hx::Val( reloadAnimationGraphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateChildrenPositions") ) { return hx::Val( updateChildrenPositions_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyImpulseInDirection") ) { return hx::Val( applyImpulseInDirection_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"switchToDefaultAnimation") ) { return hx::Val( switchToDefaultAnimation_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"killSelfAfterLeavingScreen") ) { return hx::Val( killSelfAfterLeavingScreen_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"disposeRemovedCollisionInfo") ) { return hx::Val( disposeRemovedCollisionInfo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Actor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"manifold") ) { outValue = ( manifold ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"createBox") ) { outValue = createBox_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scaleShape") ) { outValue = scaleShape_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lastCollided") ) { outValue = ( lastCollided ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"recycledAnimation") ) { outValue = ( recycledAnimation ); return true; }
	}
	return false;
}

hx::Val Actor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { ID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"md") ) { md=inValue.Cast<  ::box2D::collision::shapes::B2MassData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_x") ) { _x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_y") ) { _y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::com::stencyl::models::actor::ActorType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dead") ) { dead=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colX") ) { colX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colY") ) { colY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zero") ) { zero=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"layer") ) { layer=inValue.Cast<  ::com::stencyl::models::scene::Layer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isHUD") ) { isHUD=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dying") ) { dying=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"solid") ) { solid=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realX") ) { realX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realY") ) { realY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"label") ) { label=inValue.Cast<  ::com::stencyl::graphics::fonts::Label >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawX") ) { drawX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawY") ) { drawY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummy") ) { dummy=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shape") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shape(inValue.Cast<  ::com::stencyl::models::collision::Mask >()) ); }
		if (HX_FIELD_EQ(inName,"_mask") ) { _mask=inValue.Cast<  ::com::stencyl::models::collision::Mask >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"engine") ) { engine=inValue.Cast<  ::com::stencyl::Engine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typeID") ) { typeID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xSpeed") ) { xSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ySpeed") ) { ySpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rSpeed") ) { rSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprite") ) { sprite=inValue.Cast<  ::com::stencyl::models::actor::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"HITBOX") ) { HITBOX=inValue.Cast<  ::com::stencyl::models::collision::Mask >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_moveX") ) { _moveX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_moveY") ) { _moveY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"groupID") ) { groupID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minMove") ) { minMove=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxMove") ) { maxMove=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bodyDef") ) { bodyDef=inValue.Cast<  ::box2D::dynamics::B2BodyDef >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colMask") ) { colMask=inValue.Cast<  ::com::stencyl::models::collision::Mask >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"recycled") ) { recycled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isRegion") ) { isRegion=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isCamera") ) { isCamera=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shapeMap") ) { shapeMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"registry") ) { registry=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contacts") ) { contacts=inValue.Cast<  ::de::polygonal::ds::IntHashTable >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isTerrain") ) { isTerrain=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"destroyed") ) { destroyed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawActor") ) { drawActor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoScale") ) { autoScale=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realAngle") ) { realAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastAngle") ) { lastAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastScale") ) { lastScale=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"originMap") ) { originMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"firstMove") ) { firstMove=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snapOnSet") ) { snapOnSet=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"behaviors") ) { behaviors=inValue.Cast<  ::com::stencyl::behavior::BehaviorManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bodyScale") ) { bodyScale=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createTime") ) { createTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"collidable") ) { collidable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realScaleX") ) { realScaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realScaleY") ) { realScaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tweenProps") ) { tweenProps=inValue.Cast<  ::com::stencyl::models::actor::ActorTweenProperties >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheWidth") ) { cacheWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currOrigin") ) { currOrigin=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currOffset") ) { currOffset=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawMatrix") ) { drawMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"smoothMove") ) { smoothMove=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseState") ) { mouseState=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"collisions") ) { collisions=inValue.Cast<  ::de::polygonal::ds::IntHashTable >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cachedLayer") ) { cachedLayer=inValue.Cast<  ::com::stencyl::models::scene::Layer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"physicsMode") ) { physicsMode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resetOrigin") ) { resetOrigin=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheHeight") ) { cacheHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultAnim") ) { defaultAnim=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheAnchor") ) { cacheAnchor=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listChecked") ) { listChecked=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"animationMap") ) { animationMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transformObj") ) { transformObj=inValue.Cast<  ::openfl::geom::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateMatrix") ) { updateMatrix=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allListeners") ) { allListeners=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contactCount") ) { contactCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"collidedList") ) { collidedList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedRotation") ) { fixedRotation=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ignoreGravity") ) { ignoreGravity=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currAnimation") ) { currAnimation=inValue.Cast<  ::com::stencyl::graphics::BitmapAnimation >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bitmapFilters") ) { bitmapFilters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moveXDistance") ) { moveXDistance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moveYDistance") ) { moveYDistance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultHitbox") ) { defaultHitbox=inValue.Cast<  ::com::stencyl::models::collision::Hitbox >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"alwaysSimulate") ) { alwaysSimulate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultGravity") ) { defaultGravity=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transformPoint") ) { transformPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"attachedImages") ) { attachedImages=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moveMultiplier") ) { moveMultiplier=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastSceneState") ) { lastSceneState=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"regionContacts") ) { regionContacts=inValue.Cast<  ::de::polygonal::ds::IntHashTable >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"isTerrainRegion") ) { isTerrainRegion=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"killLeaveScreen") ) { killLeaveScreen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transformMatrix") ) { transformMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastScreenState") ) { lastScreenState=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isOnScreenCache") ) { isOnScreenCache=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultMasklist") ) { defaultMasklist=inValue.Cast<  ::com::stencyl::models::collision::Masklist >(); return inValue; }
		if (HX_FIELD_EQ(inName,"collisionsCount") ) { collisionsCount=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"simpleCollisions") ) { simpleCollisions=inValue.Cast<  ::de::polygonal::ds::IntHashTable >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currAnimationName") ) { currAnimationName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positionListeners") ) { positionListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handlesCollisions") ) { handlesCollisions=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mouseOverListeners") ) { mouseOverListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"collisionListeners") ) { collisionListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"continuousCollision") ) { continuousCollision=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenKilledListeners") ) { whenKilledListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"whenCreatedListeners") ) { whenCreatedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenUpdatedListeners") ) { whenUpdatedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenDrawingListeners") ) { whenDrawingListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"allListenerReferences") ) { allListenerReferences=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positionListenerCount") ) { positionListenerCount=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"collisionListenerCount") ) { collisionListenerCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Actor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"manifold") ) { manifold=ioValue.Cast<  ::box2D::collision::B2WorldManifold >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastCollided") ) { lastCollided=ioValue.Cast<  ::com::stencyl::models::Actor >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"recycledAnimation") ) { recycledAnimation=ioValue.Cast<  ::com::stencyl::models::actor::Animation >(); return true; }
	}
	return false;
}

void Actor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("engine","\xc2","\x47","\x84","\xfc"));
	outFields->push(HX_HCSTRING("createTime","\x29","\x8d","\x8a","\x5f"));
	outFields->push(HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"));
	outFields->push(HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"));
	outFields->push(HX_HCSTRING("cachedLayer","\x8f","\xbe","\xaa","\xe8"));
	outFields->push(HX_HCSTRING("layer","\xd1","\x81","\xc0","\x6f"));
	outFields->push(HX_HCSTRING("typeID","\x15","\xd5","\x36","\x57"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("recycled","\xf1","\x00","\x02","\x63"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("isRegion","\x7e","\x5c","\xf6","\x58"));
	outFields->push(HX_HCSTRING("isTerrainRegion","\x3f","\x60","\x79","\xdd"));
	outFields->push(HX_HCSTRING("isTerrain","\xeb","\x28","\x16","\x2d"));
	outFields->push(HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"));
	outFields->push(HX_HCSTRING("drawActor","\x51","\x00","\xb2","\xe3"));
	outFields->push(HX_HCSTRING("isHUD","\xed","\x5e","\x4d","\xc1"));
	outFields->push(HX_HCSTRING("alwaysSimulate","\x93","\xe9","\xe6","\x0e"));
	outFields->push(HX_HCSTRING("isCamera","\x2f","\xe2","\xf5","\x0f"));
	outFields->push(HX_HCSTRING("killLeaveScreen","\xc5","\x38","\x46","\x96"));
	outFields->push(HX_HCSTRING("physicsMode","\xca","\xa7","\x44","\xf3"));
	outFields->push(HX_HCSTRING("autoScale","\x9b","\x0c","\xda","\x56"));
	outFields->push(HX_HCSTRING("dead","\xa4","\x4e","\x66","\x42"));
	outFields->push(HX_HCSTRING("dying","\x6d","\xe0","\x5c","\xe4"));
	outFields->push(HX_HCSTRING("fixedRotation","\xd2","\x86","\x5e","\x50"));
	outFields->push(HX_HCSTRING("ignoreGravity","\x5c","\x03","\x8d","\x95"));
	outFields->push(HX_HCSTRING("defaultGravity","\x8d","\xc7","\x3f","\xa7"));
	outFields->push(HX_HCSTRING("collidable","\x21","\x74","\xc2","\x4f"));
	outFields->push(HX_HCSTRING("solid","\x2b","\xb4","\xc5","\x80"));
	outFields->push(HX_HCSTRING("resetOrigin","\x15","\x9d","\x15","\xeb"));
	outFields->push(HX_HCSTRING("realX","\x3a","\xa7","\xba","\xe6"));
	outFields->push(HX_HCSTRING("realY","\x3b","\xa7","\xba","\xe6"));
	outFields->push(HX_HCSTRING("realAngle","\x95","\x73","\xa4","\x26"));
	outFields->push(HX_HCSTRING("realScaleX","\x8c","\x84","\x4d","\x82"));
	outFields->push(HX_HCSTRING("realScaleY","\x8d","\x84","\x4d","\x82"));
	outFields->push(HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f"));
	outFields->push(HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f"));
	outFields->push(HX_HCSTRING("lastAngle","\x9d","\x71","\x8f","\x6f"));
	outFields->push(HX_HCSTRING("lastScale","\x54","\xfc","\x7b","\xc5"));
	outFields->push(HX_HCSTRING("colX","\x18","\xb8","\xc4","\x41"));
	outFields->push(HX_HCSTRING("colY","\x19","\xb8","\xc4","\x41"));
	outFields->push(HX_HCSTRING("xSpeed","\xef","\x53","\x6a","\x0f"));
	outFields->push(HX_HCSTRING("ySpeed","\x4e","\xb0","\xc5","\x75"));
	outFields->push(HX_HCSTRING("rSpeed","\xb5","\x29","\x46","\xa9"));
	outFields->push(HX_HCSTRING("continuousCollision","\x63","\xe9","\xca","\x5c"));
	outFields->push(HX_HCSTRING("tweenProps","\x05","\x09","\xd4","\x7f"));
	outFields->push(HX_HCSTRING("cacheWidth","\x64","\x1c","\x1b","\x0d"));
	outFields->push(HX_HCSTRING("cacheHeight","\xc9","\x33","\xed","\x20"));
	outFields->push(HX_HCSTRING("currAnimation","\xb2","\x95","\x2a","\xf7"));
	outFields->push(HX_HCSTRING("currAnimationName","\x1d","\xf5","\xc4","\x39"));
	outFields->push(HX_HCSTRING("animationMap","\xf8","\x0d","\x2a","\xaa"));
	outFields->push(HX_HCSTRING("bitmapFilters","\x8c","\x25","\xd4","\xb9"));
	outFields->push(HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"));
	outFields->push(HX_HCSTRING("shapeMap","\xfb","\xc9","\xdd","\x1e"));
	outFields->push(HX_HCSTRING("originMap","\x56","\x5c","\x36","\xea"));
	outFields->push(HX_HCSTRING("defaultAnim","\x72","\x7f","\x30","\x12"));
	outFields->push(HX_HCSTRING("currOrigin","\x78","\x9a","\xbc","\x41"));
	outFields->push(HX_HCSTRING("currOffset","\x25","\x18","\xfb","\x56"));
	outFields->push(HX_HCSTRING("cacheAnchor","\x57","\x66","\x12","\x7f"));
	outFields->push(HX_HCSTRING("transformObj","\xeb","\x45","\x86","\x3e"));
	outFields->push(HX_HCSTRING("transformPoint","\x44","\xcf","\x11","\x3d"));
	outFields->push(HX_HCSTRING("transformMatrix","\xcd","\xb0","\x1d","\xf7"));
	outFields->push(HX_HCSTRING("updateMatrix","\x2a","\xdd","\x8b","\xbb"));
	outFields->push(HX_HCSTRING("drawMatrix","\x65","\xb1","\x8b","\xfd"));
	outFields->push(HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"));
	outFields->push(HX_HCSTRING("attachedImages","\x3c","\xf7","\x38","\x0f"));
	outFields->push(HX_HCSTRING("smoothMove","\x5f","\xc6","\x37","\x7d"));
	outFields->push(HX_HCSTRING("firstMove","\x61","\x5f","\x2f","\xff"));
	outFields->push(HX_HCSTRING("snapOnSet","\x19","\x3d","\x56","\xa5"));
	outFields->push(HX_HCSTRING("drawX","\xd4","\x57","\xb6","\xdf"));
	outFields->push(HX_HCSTRING("drawY","\xd5","\x57","\xb6","\xdf"));
	outFields->push(HX_HCSTRING("moveMultiplier","\xf2","\xad","\x09","\x40"));
	outFields->push(HX_HCSTRING("moveXDistance","\x7c","\x1a","\x84","\x41"));
	outFields->push(HX_HCSTRING("moveYDistance","\x7d","\x83","\x75","\x14"));
	outFields->push(HX_HCSTRING("minMove","\xc3","\x51","\x6a","\x39"));
	outFields->push(HX_HCSTRING("maxMove","\xd5","\x3b","\x91","\xc8"));
	outFields->push(HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35"));
	outFields->push(HX_HCSTRING("registry","\xbd","\xb1","\x9f","\xd0"));
	outFields->push(HX_HCSTRING("allListeners","\x1e","\xa0","\x29","\xfc"));
	outFields->push(HX_HCSTRING("allListenerReferences","\x5d","\x61","\x3b","\x71"));
	outFields->push(HX_HCSTRING("whenCreatedListeners","\x51","\xa9","\x39","\x37"));
	outFields->push(HX_HCSTRING("whenUpdatedListeners","\x9e","\xfa","\xf7","\x4b"));
	outFields->push(HX_HCSTRING("whenDrawingListeners","\x1b","\xc5","\xb6","\xe7"));
	outFields->push(HX_HCSTRING("whenKilledListeners","\xa8","\x94","\x8f","\x45"));
	outFields->push(HX_HCSTRING("mouseOverListeners","\x26","\x70","\xa0","\x43"));
	outFields->push(HX_HCSTRING("positionListeners","\x96","\xc7","\x3b","\x17"));
	outFields->push(HX_HCSTRING("collisionListeners","\xad","\xfe","\xba","\x02"));
	outFields->push(HX_HCSTRING("positionListenerCount","\x52","\x49","\xc2","\x92"));
	outFields->push(HX_HCSTRING("collisionListenerCount","\xe9","\x57","\xe0","\xf1"));
	outFields->push(HX_HCSTRING("mouseState","\xac","\x69","\xd8","\xa1"));
	outFields->push(HX_HCSTRING("lastScreenState","\x4f","\x64","\xcd","\xdd"));
	outFields->push(HX_HCSTRING("lastSceneState","\x1b","\x6f","\xba","\x50"));
	outFields->push(HX_HCSTRING("isOnScreenCache","\x0d","\x4e","\x85","\x32"));
	outFields->push(HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"));
	outFields->push(HX_HCSTRING("bodyDef","\x43","\x48","\x15","\x31"));
	outFields->push(HX_HCSTRING("md","\x57","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("bodyScale","\x88","\xf8","\xd6","\x38"));
	outFields->push(HX_HCSTRING("handlesCollisions","\x6c","\x3b","\x8f","\xec"));
	outFields->push(HX_HCSTRING("contacts","\xd3","\xd1","\x76","\x2c"));
	outFields->push(HX_HCSTRING("regionContacts","\xe7","\x62","\x8d","\x8f"));
	outFields->push(HX_HCSTRING("collisions","\xc1","\xbb","\x18","\xf8"));
	outFields->push(HX_HCSTRING("dummy","\x28","\x0e","\xbb","\xe1"));
	outFields->push(HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"));
	outFields->push(HX_HCSTRING("defaultHitbox","\x39","\xc1","\xa0","\x51"));
	outFields->push(HX_HCSTRING("defaultMasklist","\x2b","\x01","\xc8","\x23"));
	outFields->push(HX_HCSTRING("contactCount","\x0f","\xb6","\xbb","\x82"));
	outFields->push(HX_HCSTRING("collisionsCount","\x4e","\xbd","\xd2","\x75"));
	outFields->push(HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"));
	outFields->push(HX_HCSTRING("HITBOX","\x98","\x99","\xaa","\x09"));
	outFields->push(HX_HCSTRING("_mask","\xcb","\x5c","\x67","\xfb"));
	outFields->push(HX_HCSTRING("colMask","\x4c","\x0d","\xe0","\xd8"));
	outFields->push(HX_HCSTRING("_x","\x39","\x53","\x00","\x00"));
	outFields->push(HX_HCSTRING("_y","\x3a","\x53","\x00","\x00"));
	outFields->push(HX_HCSTRING("_moveX","\x68","\x13","\x4d","\x08"));
	outFields->push(HX_HCSTRING("_moveY","\x69","\x13","\x4d","\x08"));
	outFields->push(HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"));
	outFields->push(HX_HCSTRING("simpleCollisions","\x93","\xb6","\x26","\x81"));
	outFields->push(HX_HCSTRING("collidedList","\xa4","\xb2","\x77","\x47"));
	outFields->push(HX_HCSTRING("listChecked","\x69","\x26","\x24","\xca"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Actor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::Engine*/ ,(int)offsetof(Actor_obj,engine),HX_HCSTRING("engine","\xc2","\x47","\x84","\xfc")},
	{hx::fsFloat,(int)offsetof(Actor_obj,createTime),HX_HCSTRING("createTime","\x29","\x8d","\x8a","\x5f")},
	{hx::fsInt,(int)offsetof(Actor_obj,ID),HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Actor_obj,groupID),HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86")},
	{hx::fsObject /*::com::stencyl::models::scene::Layer*/ ,(int)offsetof(Actor_obj,cachedLayer),HX_HCSTRING("cachedLayer","\x8f","\xbe","\xaa","\xe8")},
	{hx::fsObject /*::com::stencyl::models::scene::Layer*/ ,(int)offsetof(Actor_obj,layer),HX_HCSTRING("layer","\xd1","\x81","\xc0","\x6f")},
	{hx::fsInt,(int)offsetof(Actor_obj,typeID),HX_HCSTRING("typeID","\x15","\xd5","\x36","\x57")},
	{hx::fsObject /*::com::stencyl::models::actor::ActorType*/ ,(int)offsetof(Actor_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsBool,(int)offsetof(Actor_obj,recycled),HX_HCSTRING("recycled","\xf1","\x00","\x02","\x63")},
	{hx::fsBool,(int)offsetof(Actor_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsBool,(int)offsetof(Actor_obj,isRegion),HX_HCSTRING("isRegion","\x7e","\x5c","\xf6","\x58")},
	{hx::fsBool,(int)offsetof(Actor_obj,isTerrainRegion),HX_HCSTRING("isTerrainRegion","\x3f","\x60","\x79","\xdd")},
	{hx::fsBool,(int)offsetof(Actor_obj,isTerrain),HX_HCSTRING("isTerrain","\xeb","\x28","\x16","\x2d")},
	{hx::fsBool,(int)offsetof(Actor_obj,destroyed),HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4")},
	{hx::fsBool,(int)offsetof(Actor_obj,drawActor),HX_HCSTRING("drawActor","\x51","\x00","\xb2","\xe3")},
	{hx::fsBool,(int)offsetof(Actor_obj,isHUD),HX_HCSTRING("isHUD","\xed","\x5e","\x4d","\xc1")},
	{hx::fsBool,(int)offsetof(Actor_obj,alwaysSimulate),HX_HCSTRING("alwaysSimulate","\x93","\xe9","\xe6","\x0e")},
	{hx::fsBool,(int)offsetof(Actor_obj,isCamera),HX_HCSTRING("isCamera","\x2f","\xe2","\xf5","\x0f")},
	{hx::fsBool,(int)offsetof(Actor_obj,killLeaveScreen),HX_HCSTRING("killLeaveScreen","\xc5","\x38","\x46","\x96")},
	{hx::fsInt,(int)offsetof(Actor_obj,physicsMode),HX_HCSTRING("physicsMode","\xca","\xa7","\x44","\xf3")},
	{hx::fsBool,(int)offsetof(Actor_obj,autoScale),HX_HCSTRING("autoScale","\x9b","\x0c","\xda","\x56")},
	{hx::fsBool,(int)offsetof(Actor_obj,dead),HX_HCSTRING("dead","\xa4","\x4e","\x66","\x42")},
	{hx::fsBool,(int)offsetof(Actor_obj,dying),HX_HCSTRING("dying","\x6d","\xe0","\x5c","\xe4")},
	{hx::fsBool,(int)offsetof(Actor_obj,fixedRotation),HX_HCSTRING("fixedRotation","\xd2","\x86","\x5e","\x50")},
	{hx::fsBool,(int)offsetof(Actor_obj,ignoreGravity),HX_HCSTRING("ignoreGravity","\x5c","\x03","\x8d","\x95")},
	{hx::fsBool,(int)offsetof(Actor_obj,defaultGravity),HX_HCSTRING("defaultGravity","\x8d","\xc7","\x3f","\xa7")},
	{hx::fsBool,(int)offsetof(Actor_obj,collidable),HX_HCSTRING("collidable","\x21","\x74","\xc2","\x4f")},
	{hx::fsBool,(int)offsetof(Actor_obj,solid),HX_HCSTRING("solid","\x2b","\xb4","\xc5","\x80")},
	{hx::fsBool,(int)offsetof(Actor_obj,resetOrigin),HX_HCSTRING("resetOrigin","\x15","\x9d","\x15","\xeb")},
	{hx::fsFloat,(int)offsetof(Actor_obj,realX),HX_HCSTRING("realX","\x3a","\xa7","\xba","\xe6")},
	{hx::fsFloat,(int)offsetof(Actor_obj,realY),HX_HCSTRING("realY","\x3b","\xa7","\xba","\xe6")},
	{hx::fsFloat,(int)offsetof(Actor_obj,realAngle),HX_HCSTRING("realAngle","\x95","\x73","\xa4","\x26")},
	{hx::fsFloat,(int)offsetof(Actor_obj,realScaleX),HX_HCSTRING("realScaleX","\x8c","\x84","\x4d","\x82")},
	{hx::fsFloat,(int)offsetof(Actor_obj,realScaleY),HX_HCSTRING("realScaleY","\x8d","\x84","\x4d","\x82")},
	{hx::fsFloat,(int)offsetof(Actor_obj,lastX),HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f")},
	{hx::fsFloat,(int)offsetof(Actor_obj,lastY),HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f")},
	{hx::fsFloat,(int)offsetof(Actor_obj,lastAngle),HX_HCSTRING("lastAngle","\x9d","\x71","\x8f","\x6f")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Actor_obj,lastScale),HX_HCSTRING("lastScale","\x54","\xfc","\x7b","\xc5")},
	{hx::fsFloat,(int)offsetof(Actor_obj,colX),HX_HCSTRING("colX","\x18","\xb8","\xc4","\x41")},
	{hx::fsFloat,(int)offsetof(Actor_obj,colY),HX_HCSTRING("colY","\x19","\xb8","\xc4","\x41")},
	{hx::fsFloat,(int)offsetof(Actor_obj,xSpeed),HX_HCSTRING("xSpeed","\xef","\x53","\x6a","\x0f")},
	{hx::fsFloat,(int)offsetof(Actor_obj,ySpeed),HX_HCSTRING("ySpeed","\x4e","\xb0","\xc5","\x75")},
	{hx::fsFloat,(int)offsetof(Actor_obj,rSpeed),HX_HCSTRING("rSpeed","\xb5","\x29","\x46","\xa9")},
	{hx::fsBool,(int)offsetof(Actor_obj,continuousCollision),HX_HCSTRING("continuousCollision","\x63","\xe9","\xca","\x5c")},
	{hx::fsObject /*::com::stencyl::models::actor::ActorTweenProperties*/ ,(int)offsetof(Actor_obj,tweenProps),HX_HCSTRING("tweenProps","\x05","\x09","\xd4","\x7f")},
	{hx::fsFloat,(int)offsetof(Actor_obj,cacheWidth),HX_HCSTRING("cacheWidth","\x64","\x1c","\x1b","\x0d")},
	{hx::fsFloat,(int)offsetof(Actor_obj,cacheHeight),HX_HCSTRING("cacheHeight","\xc9","\x33","\xed","\x20")},
	{hx::fsObject /*::com::stencyl::graphics::BitmapAnimation*/ ,(int)offsetof(Actor_obj,currAnimation),HX_HCSTRING("currAnimation","\xb2","\x95","\x2a","\xf7")},
	{hx::fsString,(int)offsetof(Actor_obj,currAnimationName),HX_HCSTRING("currAnimationName","\x1d","\xf5","\xc4","\x39")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Actor_obj,animationMap),HX_HCSTRING("animationMap","\xf8","\x0d","\x2a","\xaa")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Actor_obj,bitmapFilters),HX_HCSTRING("bitmapFilters","\x8c","\x25","\xd4","\xb9")},
	{hx::fsObject /*::com::stencyl::models::actor::Sprite*/ ,(int)offsetof(Actor_obj,sprite),HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Actor_obj,shapeMap),HX_HCSTRING("shapeMap","\xfb","\xc9","\xdd","\x1e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Actor_obj,originMap),HX_HCSTRING("originMap","\x56","\x5c","\x36","\xea")},
	{hx::fsString,(int)offsetof(Actor_obj,defaultAnim),HX_HCSTRING("defaultAnim","\x72","\x7f","\x30","\x12")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Actor_obj,currOrigin),HX_HCSTRING("currOrigin","\x78","\x9a","\xbc","\x41")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Actor_obj,currOffset),HX_HCSTRING("currOffset","\x25","\x18","\xfb","\x56")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Actor_obj,cacheAnchor),HX_HCSTRING("cacheAnchor","\x57","\x66","\x12","\x7f")},
	{hx::fsObject /*::openfl::geom::Transform*/ ,(int)offsetof(Actor_obj,transformObj),HX_HCSTRING("transformObj","\xeb","\x45","\x86","\x3e")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Actor_obj,transformPoint),HX_HCSTRING("transformPoint","\x44","\xcf","\x11","\x3d")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Actor_obj,transformMatrix),HX_HCSTRING("transformMatrix","\xcd","\xb0","\x1d","\xf7")},
	{hx::fsBool,(int)offsetof(Actor_obj,updateMatrix),HX_HCSTRING("updateMatrix","\x2a","\xdd","\x8b","\xbb")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Actor_obj,drawMatrix),HX_HCSTRING("drawMatrix","\x65","\xb1","\x8b","\xfd")},
	{hx::fsObject /*::com::stencyl::graphics::fonts::Label*/ ,(int)offsetof(Actor_obj,label),HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Actor_obj,attachedImages),HX_HCSTRING("attachedImages","\x3c","\xf7","\x38","\x0f")},
	{hx::fsBool,(int)offsetof(Actor_obj,smoothMove),HX_HCSTRING("smoothMove","\x5f","\xc6","\x37","\x7d")},
	{hx::fsBool,(int)offsetof(Actor_obj,firstMove),HX_HCSTRING("firstMove","\x61","\x5f","\x2f","\xff")},
	{hx::fsBool,(int)offsetof(Actor_obj,snapOnSet),HX_HCSTRING("snapOnSet","\x19","\x3d","\x56","\xa5")},
	{hx::fsFloat,(int)offsetof(Actor_obj,drawX),HX_HCSTRING("drawX","\xd4","\x57","\xb6","\xdf")},
	{hx::fsFloat,(int)offsetof(Actor_obj,drawY),HX_HCSTRING("drawY","\xd5","\x57","\xb6","\xdf")},
	{hx::fsFloat,(int)offsetof(Actor_obj,moveMultiplier),HX_HCSTRING("moveMultiplier","\xf2","\xad","\x09","\x40")},
	{hx::fsFloat,(int)offsetof(Actor_obj,moveXDistance),HX_HCSTRING("moveXDistance","\x7c","\x1a","\x84","\x41")},
	{hx::fsFloat,(int)offsetof(Actor_obj,moveYDistance),HX_HCSTRING("moveYDistance","\x7d","\x83","\x75","\x14")},
	{hx::fsFloat,(int)offsetof(Actor_obj,minMove),HX_HCSTRING("minMove","\xc3","\x51","\x6a","\x39")},
	{hx::fsFloat,(int)offsetof(Actor_obj,maxMove),HX_HCSTRING("maxMove","\xd5","\x3b","\x91","\xc8")},
	{hx::fsObject /*::com::stencyl::behavior::BehaviorManager*/ ,(int)offsetof(Actor_obj,behaviors),HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Actor_obj,registry),HX_HCSTRING("registry","\xbd","\xb1","\x9f","\xd0")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Actor_obj,allListeners),HX_HCSTRING("allListeners","\x1e","\xa0","\x29","\xfc")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Actor_obj,allListenerReferences),HX_HCSTRING("allListenerReferences","\x5d","\x61","\x3b","\x71")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Actor_obj,whenCreatedListeners),HX_HCSTRING("whenCreatedListeners","\x51","\xa9","\x39","\x37")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Actor_obj,whenUpdatedListeners),HX_HCSTRING("whenUpdatedListeners","\x9e","\xfa","\xf7","\x4b")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Actor_obj,whenDrawingListeners),HX_HCSTRING("whenDrawingListeners","\x1b","\xc5","\xb6","\xe7")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Actor_obj,whenKilledListeners),HX_HCSTRING("whenKilledListeners","\xa8","\x94","\x8f","\x45")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Actor_obj,mouseOverListeners),HX_HCSTRING("mouseOverListeners","\x26","\x70","\xa0","\x43")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Actor_obj,positionListeners),HX_HCSTRING("positionListeners","\x96","\xc7","\x3b","\x17")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Actor_obj,collisionListeners),HX_HCSTRING("collisionListeners","\xad","\xfe","\xba","\x02")},
	{hx::fsInt,(int)offsetof(Actor_obj,positionListenerCount),HX_HCSTRING("positionListenerCount","\x52","\x49","\xc2","\x92")},
	{hx::fsInt,(int)offsetof(Actor_obj,collisionListenerCount),HX_HCSTRING("collisionListenerCount","\xe9","\x57","\xe0","\xf1")},
	{hx::fsInt,(int)offsetof(Actor_obj,mouseState),HX_HCSTRING("mouseState","\xac","\x69","\xd8","\xa1")},
	{hx::fsBool,(int)offsetof(Actor_obj,lastScreenState),HX_HCSTRING("lastScreenState","\x4f","\x64","\xcd","\xdd")},
	{hx::fsBool,(int)offsetof(Actor_obj,lastSceneState),HX_HCSTRING("lastSceneState","\x1b","\x6f","\xba","\x50")},
	{hx::fsBool,(int)offsetof(Actor_obj,isOnScreenCache),HX_HCSTRING("isOnScreenCache","\x0d","\x4e","\x85","\x32")},
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(Actor_obj,body),HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41")},
	{hx::fsObject /*::box2D::dynamics::B2BodyDef*/ ,(int)offsetof(Actor_obj,bodyDef),HX_HCSTRING("bodyDef","\x43","\x48","\x15","\x31")},
	{hx::fsObject /*::box2D::collision::shapes::B2MassData*/ ,(int)offsetof(Actor_obj,md),HX_HCSTRING("md","\x57","\x5f","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Actor_obj,bodyScale),HX_HCSTRING("bodyScale","\x88","\xf8","\xd6","\x38")},
	{hx::fsBool,(int)offsetof(Actor_obj,handlesCollisions),HX_HCSTRING("handlesCollisions","\x6c","\x3b","\x8f","\xec")},
	{hx::fsObject /*::de::polygonal::ds::IntHashTable*/ ,(int)offsetof(Actor_obj,contacts),HX_HCSTRING("contacts","\xd3","\xd1","\x76","\x2c")},
	{hx::fsObject /*::de::polygonal::ds::IntHashTable*/ ,(int)offsetof(Actor_obj,regionContacts),HX_HCSTRING("regionContacts","\xe7","\x62","\x8d","\x8f")},
	{hx::fsObject /*::de::polygonal::ds::IntHashTable*/ ,(int)offsetof(Actor_obj,collisions),HX_HCSTRING("collisions","\xc1","\xbb","\x18","\xf8")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(Actor_obj,dummy),HX_HCSTRING("dummy","\x28","\x0e","\xbb","\xe1")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(Actor_obj,zero),HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50")},
	{hx::fsObject /*::com::stencyl::models::collision::Hitbox*/ ,(int)offsetof(Actor_obj,defaultHitbox),HX_HCSTRING("defaultHitbox","\x39","\xc1","\xa0","\x51")},
	{hx::fsObject /*::com::stencyl::models::collision::Masklist*/ ,(int)offsetof(Actor_obj,defaultMasklist),HX_HCSTRING("defaultMasklist","\x2b","\x01","\xc8","\x23")},
	{hx::fsInt,(int)offsetof(Actor_obj,contactCount),HX_HCSTRING("contactCount","\x0f","\xb6","\xbb","\x82")},
	{hx::fsInt,(int)offsetof(Actor_obj,collisionsCount),HX_HCSTRING("collisionsCount","\x4e","\xbd","\xd2","\x75")},
	{hx::fsObject /*::com::stencyl::models::collision::Mask*/ ,(int)offsetof(Actor_obj,HITBOX),HX_HCSTRING("HITBOX","\x98","\x99","\xaa","\x09")},
	{hx::fsObject /*::com::stencyl::models::collision::Mask*/ ,(int)offsetof(Actor_obj,_mask),HX_HCSTRING("_mask","\xcb","\x5c","\x67","\xfb")},
	{hx::fsObject /*::com::stencyl::models::collision::Mask*/ ,(int)offsetof(Actor_obj,colMask),HX_HCSTRING("colMask","\x4c","\x0d","\xe0","\xd8")},
	{hx::fsFloat,(int)offsetof(Actor_obj,_x),HX_HCSTRING("_x","\x39","\x53","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Actor_obj,_y),HX_HCSTRING("_y","\x3a","\x53","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Actor_obj,_moveX),HX_HCSTRING("_moveX","\x68","\x13","\x4d","\x08")},
	{hx::fsFloat,(int)offsetof(Actor_obj,_moveY),HX_HCSTRING("_moveY","\x69","\x13","\x4d","\x08")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Actor_obj,_point),HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2")},
	{hx::fsObject /*::de::polygonal::ds::IntHashTable*/ ,(int)offsetof(Actor_obj,simpleCollisions),HX_HCSTRING("simpleCollisions","\x93","\xb6","\x26","\x81")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Actor_obj,collidedList),HX_HCSTRING("collidedList","\xa4","\xb2","\x77","\x47")},
	{hx::fsInt,(int)offsetof(Actor_obj,listChecked),HX_HCSTRING("listChecked","\x69","\x26","\x24","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Actor_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Actor_obj::GROUP_OFFSET,HX_HCSTRING("GROUP_OFFSET","\xf3","\x9b","\x75","\x45")},
	{hx::fsObject /*::com::stencyl::models::actor::Animation*/ ,(void *) &Actor_obj::recycledAnimation,HX_HCSTRING("recycledAnimation","\xd3","\xa7","\xe0","\x1f")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(void *) &Actor_obj::lastCollided,HX_HCSTRING("lastCollided","\x9c","\xeb","\x67","\x2b")},
	{hx::fsObject /*::box2D::collision::B2WorldManifold*/ ,(void *) &Actor_obj::manifold,HX_HCSTRING("manifold","\x10","\x8c","\x31","\xd0")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Actor_obj_sMemberFields[] = {
	HX_HCSTRING("engine","\xc2","\x47","\x84","\xfc"),
	HX_HCSTRING("createTime","\x29","\x8d","\x8a","\x5f"),
	HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"),
	HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"),
	HX_HCSTRING("cachedLayer","\x8f","\xbe","\xaa","\xe8"),
	HX_HCSTRING("layer","\xd1","\x81","\xc0","\x6f"),
	HX_HCSTRING("typeID","\x15","\xd5","\x36","\x57"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("recycled","\xf1","\x00","\x02","\x63"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("isRegion","\x7e","\x5c","\xf6","\x58"),
	HX_HCSTRING("isTerrainRegion","\x3f","\x60","\x79","\xdd"),
	HX_HCSTRING("isTerrain","\xeb","\x28","\x16","\x2d"),
	HX_HCSTRING("destroyed","\xd9","\x37","\x27","\xf4"),
	HX_HCSTRING("drawActor","\x51","\x00","\xb2","\xe3"),
	HX_HCSTRING("isHUD","\xed","\x5e","\x4d","\xc1"),
	HX_HCSTRING("alwaysSimulate","\x93","\xe9","\xe6","\x0e"),
	HX_HCSTRING("isCamera","\x2f","\xe2","\xf5","\x0f"),
	HX_HCSTRING("killLeaveScreen","\xc5","\x38","\x46","\x96"),
	HX_HCSTRING("physicsMode","\xca","\xa7","\x44","\xf3"),
	HX_HCSTRING("autoScale","\x9b","\x0c","\xda","\x56"),
	HX_HCSTRING("dead","\xa4","\x4e","\x66","\x42"),
	HX_HCSTRING("dying","\x6d","\xe0","\x5c","\xe4"),
	HX_HCSTRING("fixedRotation","\xd2","\x86","\x5e","\x50"),
	HX_HCSTRING("ignoreGravity","\x5c","\x03","\x8d","\x95"),
	HX_HCSTRING("defaultGravity","\x8d","\xc7","\x3f","\xa7"),
	HX_HCSTRING("collidable","\x21","\x74","\xc2","\x4f"),
	HX_HCSTRING("solid","\x2b","\xb4","\xc5","\x80"),
	HX_HCSTRING("resetOrigin","\x15","\x9d","\x15","\xeb"),
	HX_HCSTRING("realX","\x3a","\xa7","\xba","\xe6"),
	HX_HCSTRING("realY","\x3b","\xa7","\xba","\xe6"),
	HX_HCSTRING("realAngle","\x95","\x73","\xa4","\x26"),
	HX_HCSTRING("realScaleX","\x8c","\x84","\x4d","\x82"),
	HX_HCSTRING("realScaleY","\x8d","\x84","\x4d","\x82"),
	HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f"),
	HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f"),
	HX_HCSTRING("lastAngle","\x9d","\x71","\x8f","\x6f"),
	HX_HCSTRING("lastScale","\x54","\xfc","\x7b","\xc5"),
	HX_HCSTRING("colX","\x18","\xb8","\xc4","\x41"),
	HX_HCSTRING("colY","\x19","\xb8","\xc4","\x41"),
	HX_HCSTRING("xSpeed","\xef","\x53","\x6a","\x0f"),
	HX_HCSTRING("ySpeed","\x4e","\xb0","\xc5","\x75"),
	HX_HCSTRING("rSpeed","\xb5","\x29","\x46","\xa9"),
	HX_HCSTRING("continuousCollision","\x63","\xe9","\xca","\x5c"),
	HX_HCSTRING("tweenProps","\x05","\x09","\xd4","\x7f"),
	HX_HCSTRING("cacheWidth","\x64","\x1c","\x1b","\x0d"),
	HX_HCSTRING("cacheHeight","\xc9","\x33","\xed","\x20"),
	HX_HCSTRING("currAnimation","\xb2","\x95","\x2a","\xf7"),
	HX_HCSTRING("currAnimationName","\x1d","\xf5","\xc4","\x39"),
	HX_HCSTRING("animationMap","\xf8","\x0d","\x2a","\xaa"),
	HX_HCSTRING("bitmapFilters","\x8c","\x25","\xd4","\xb9"),
	HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"),
	HX_HCSTRING("shapeMap","\xfb","\xc9","\xdd","\x1e"),
	HX_HCSTRING("originMap","\x56","\x5c","\x36","\xea"),
	HX_HCSTRING("defaultAnim","\x72","\x7f","\x30","\x12"),
	HX_HCSTRING("currOrigin","\x78","\x9a","\xbc","\x41"),
	HX_HCSTRING("currOffset","\x25","\x18","\xfb","\x56"),
	HX_HCSTRING("cacheAnchor","\x57","\x66","\x12","\x7f"),
	HX_HCSTRING("transformObj","\xeb","\x45","\x86","\x3e"),
	HX_HCSTRING("transformPoint","\x44","\xcf","\x11","\x3d"),
	HX_HCSTRING("transformMatrix","\xcd","\xb0","\x1d","\xf7"),
	HX_HCSTRING("updateMatrix","\x2a","\xdd","\x8b","\xbb"),
	HX_HCSTRING("drawMatrix","\x65","\xb1","\x8b","\xfd"),
	HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"),
	HX_HCSTRING("attachedImages","\x3c","\xf7","\x38","\x0f"),
	HX_HCSTRING("smoothMove","\x5f","\xc6","\x37","\x7d"),
	HX_HCSTRING("firstMove","\x61","\x5f","\x2f","\xff"),
	HX_HCSTRING("snapOnSet","\x19","\x3d","\x56","\xa5"),
	HX_HCSTRING("drawX","\xd4","\x57","\xb6","\xdf"),
	HX_HCSTRING("drawY","\xd5","\x57","\xb6","\xdf"),
	HX_HCSTRING("moveMultiplier","\xf2","\xad","\x09","\x40"),
	HX_HCSTRING("moveXDistance","\x7c","\x1a","\x84","\x41"),
	HX_HCSTRING("moveYDistance","\x7d","\x83","\x75","\x14"),
	HX_HCSTRING("minMove","\xc3","\x51","\x6a","\x39"),
	HX_HCSTRING("maxMove","\xd5","\x3b","\x91","\xc8"),
	HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35"),
	HX_HCSTRING("registry","\xbd","\xb1","\x9f","\xd0"),
	HX_HCSTRING("allListeners","\x1e","\xa0","\x29","\xfc"),
	HX_HCSTRING("allListenerReferences","\x5d","\x61","\x3b","\x71"),
	HX_HCSTRING("whenCreatedListeners","\x51","\xa9","\x39","\x37"),
	HX_HCSTRING("whenUpdatedListeners","\x9e","\xfa","\xf7","\x4b"),
	HX_HCSTRING("whenDrawingListeners","\x1b","\xc5","\xb6","\xe7"),
	HX_HCSTRING("whenKilledListeners","\xa8","\x94","\x8f","\x45"),
	HX_HCSTRING("mouseOverListeners","\x26","\x70","\xa0","\x43"),
	HX_HCSTRING("positionListeners","\x96","\xc7","\x3b","\x17"),
	HX_HCSTRING("collisionListeners","\xad","\xfe","\xba","\x02"),
	HX_HCSTRING("positionListenerCount","\x52","\x49","\xc2","\x92"),
	HX_HCSTRING("collisionListenerCount","\xe9","\x57","\xe0","\xf1"),
	HX_HCSTRING("mouseState","\xac","\x69","\xd8","\xa1"),
	HX_HCSTRING("lastScreenState","\x4f","\x64","\xcd","\xdd"),
	HX_HCSTRING("lastSceneState","\x1b","\x6f","\xba","\x50"),
	HX_HCSTRING("isOnScreenCache","\x0d","\x4e","\x85","\x32"),
	HX_HCSTRING("body","\xa2","\x7a","\x1b","\x41"),
	HX_HCSTRING("bodyDef","\x43","\x48","\x15","\x31"),
	HX_HCSTRING("md","\x57","\x5f","\x00","\x00"),
	HX_HCSTRING("bodyScale","\x88","\xf8","\xd6","\x38"),
	HX_HCSTRING("handlesCollisions","\x6c","\x3b","\x8f","\xec"),
	HX_HCSTRING("contacts","\xd3","\xd1","\x76","\x2c"),
	HX_HCSTRING("regionContacts","\xe7","\x62","\x8d","\x8f"),
	HX_HCSTRING("collisions","\xc1","\xbb","\x18","\xf8"),
	HX_HCSTRING("dummy","\x28","\x0e","\xbb","\xe1"),
	HX_HCSTRING("zero","\x28","\x0f","\xf1","\x50"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("resetListeners","\xb0","\xc9","\xfe","\x4d"),
	HX_HCSTRING("defaultHitbox","\x39","\xc1","\xa0","\x51"),
	HX_HCSTRING("defaultMasklist","\x2b","\x01","\xc8","\x23"),
	HX_HCSTRING("addAnim","\xd2","\xc8","\xae","\x7c"),
	HX_HCSTRING("reloadAnimationGraphics","\x56","\x60","\x12","\x56"),
	HX_HCSTRING("initScripts","\xd8","\x6a","\x4e","\xe5"),
	HX_HCSTRING("initFromBody","\x5c","\xd0","\x9d","\x43"),
	HX_HCSTRING("initBody","\xd2","\xa9","\xd2","\x45"),
	HX_HCSTRING("addAnimation","\xa3","\x10","\x89","\x4a"),
	HX_HCSTRING("getAnimation","\x8e","\x8b","\x8b","\x5a"),
	HX_HCSTRING("setAnimation","\x02","\xaf","\x84","\x6f"),
	HX_HCSTRING("switchToDefaultAnimation","\xb2","\x78","\xa1","\x1b"),
	HX_HCSTRING("isAnimationPlaying","\xd4","\x1c","\x89","\x10"),
	HX_HCSTRING("getCurrentFrame","\xea","\xb2","\x79","\x70"),
	HX_HCSTRING("setCurrentFrame","\xf6","\x2f","\x45","\x6c"),
	HX_HCSTRING("getNumFrames","\x16","\x97","\xdd","\x6c"),
	HX_HCSTRING("defaultShapeChanged","\x34","\xce","\x8c","\xb0"),
	HX_HCSTRING("switchAnimation","\x70","\xa6","\x97","\xb3"),
	HX_HCSTRING("updateChildrenPositions","\x22","\xfa","\xef","\x15"),
	HX_HCSTRING("removeAttachedImages","\xa0","\x96","\x46","\x84"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("innerUpdate","\x3f","\x80","\x04","\xf0"),
	HX_HCSTRING("internalUpdate","\x26","\xed","\xf4","\xab"),
	HX_HCSTRING("updateDrawingMatrix","\x76","\xb8","\x0b","\x15"),
	HX_HCSTRING("updateTweenAlpha","\x5c","\x98","\xc6","\x22"),
	HX_HCSTRING("updateTweenScaleXY","\x89","\xfe","\xd3","\x06"),
	HX_HCSTRING("updateTweenAngle","\xd1","\x34","\x12","\x24"),
	HX_HCSTRING("updateTweenXY","\x23","\x0d","\x2f","\xa2"),
	HX_HCSTRING("updateBodyScale","\x3f","\xc9","\x61","\x88"),
	HX_HCSTRING("scaleBody","\x4c","\x82","\x8e","\x24"),
	HX_HCSTRING("checkScreenState","\x1d","\x67","\x71","\xf0"),
	HX_HCSTRING("contactCount","\x0f","\xb6","\xbb","\x82"),
	HX_HCSTRING("collisionsCount","\x4e","\xbd","\xd2","\x75"),
	HX_HCSTRING("handleCollisions","\x89","\x65","\xdf","\xc7"),
	HX_HCSTRING("addContact","\x7f","\xa6","\xfe","\x80"),
	HX_HCSTRING("removeContact","\xbc","\xd6","\x2e","\xf2"),
	HX_HCSTRING("addRegionContact","\x2b","\x85","\x94","\xa8"),
	HX_HCSTRING("removeRegionContact","\x28","\x01","\xa6","\x0c"),
	HX_HCSTRING("getID","\xf1","\x91","\x60","\x91"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("getGroupID","\xe4","\x06","\x59","\xd6"),
	HX_HCSTRING("getLayerID","\xf6","\x1d","\xa3","\x91"),
	HX_HCSTRING("getLayer","\x5b","\x91","\x97","\xcf"),
	HX_HCSTRING("getLayerName","\x46","\x79","\x83","\x9a"),
	HX_HCSTRING("getLayerOrder","\x33","\x05","\x23","\x37"),
	HX_HCSTRING("getType","\x70","\xa2","\x8b","\x1f"),
	HX_HCSTRING("isPausable","\xb3","\x59","\xa1","\x81"),
	HX_HCSTRING("isPaused","\x38","\xdc","\xed","\x47"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("unpause","\xfd","\xcd","\xe8","\xb9"),
	HX_HCSTRING("getGroup","\xc9","\xc2","\xcb","\xf9"),
	HX_HCSTRING("getIsRegion","\x34","\x1f","\xea","\x7e"),
	HX_HCSTRING("getIsTerrainRegion","\x49","\x00","\x3f","\x90"),
	HX_HCSTRING("moveToLayer","\x45","\x07","\xc1","\x14"),
	HX_HCSTRING("bringToFront","\x3c","\x7a","\x49","\xb4"),
	HX_HCSTRING("bringForward","\xd3","\xf6","\x01","\xc7"),
	HX_HCSTRING("sendToBack","\xaa","\x6c","\x20","\x18"),
	HX_HCSTRING("sendBackward","\x4b","\xad","\xd5","\x67"),
	HX_HCSTRING("moveToBottom","\xf7","\x26","\xed","\x20"),
	HX_HCSTRING("moveToTop","\x09","\xe7","\xe0","\xd1"),
	HX_HCSTRING("moveDown","\x13","\x64","\x25","\xe5"),
	HX_HCSTRING("moveUp","\xcc","\xd3","\xac","\xcc"),
	HX_HCSTRING("getZIndex","\x6e","\x99","\x22","\x95"),
	HX_HCSTRING("setZIndex","\x7a","\x85","\x73","\x78"),
	HX_HCSTRING("enableSmoothMotion","\x27","\x8c","\x15","\x84"),
	HX_HCSTRING("getX","\x02","\x03","\x62","\x44"),
	HX_HCSTRING("getY","\x03","\x03","\x62","\x44"),
	HX_HCSTRING("getXCenter","\x77","\xca","\xe0","\x07"),
	HX_HCSTRING("getYCenter","\x38","\x41","\x76","\x31"),
	HX_HCSTRING("getScreenX","\x76","\x49","\x98","\x79"),
	HX_HCSTRING("getScreenY","\x77","\x49","\x98","\x79"),
	HX_HCSTRING("setX","\x76","\x92","\x50","\x4c"),
	HX_HCSTRING("setY","\x77","\x92","\x50","\x4c"),
	HX_HCSTRING("setXY","\x23","\x95","\x2f","\x7a"),
	HX_HCSTRING("setXCenter","\xeb","\x68","\x5e","\x0b"),
	HX_HCSTRING("setYCenter","\xac","\xdf","\xf3","\x34"),
	HX_HCSTRING("setScreenX","\xea","\xe7","\x15","\x7d"),
	HX_HCSTRING("setScreenY","\xeb","\xe7","\x15","\x7d"),
	HX_HCSTRING("follow","\x71","\x91","\x96","\xf9"),
	HX_HCSTRING("followWithOffset","\x0a","\xf7","\xbd","\x30"),
	HX_HCSTRING("setOriginPoint","\x08","\xa4","\xf4","\x14"),
	HX_HCSTRING("getXVelocity","\x3f","\x93","\x2f","\xe9"),
	HX_HCSTRING("getYVelocity","\x40","\xfc","\x20","\xbc"),
	HX_HCSTRING("setXVelocity","\xb3","\xb6","\x28","\xfe"),
	HX_HCSTRING("setYVelocity","\xb4","\x1f","\x1a","\xd1"),
	HX_HCSTRING("setVelocity","\xdf","\xcb","\x5e","\x4f"),
	HX_HCSTRING("accelerateX","\xdb","\x5c","\x93","\x26"),
	HX_HCSTRING("accelerateY","\xdc","\x5c","\x93","\x26"),
	HX_HCSTRING("accelerate","\xdd","\xe4","\xb4","\x97"),
	HX_HCSTRING("getAngle","\x5d","\x53","\xb9","\x82"),
	HX_HCSTRING("getAngleInDegrees","\x25","\xdf","\x41","\xa0"),
	HX_HCSTRING("setAngle","\xd1","\xac","\x16","\x31"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("getAngularVelocity","\x29","\xbf","\xc3","\x0b"),
	HX_HCSTRING("setAngularVelocity","\x9d","\xf1","\x72","\xe8"),
	HX_HCSTRING("changeAngularVelocity","\x8f","\xb3","\xb4","\x9e"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("pushInDirection","\xe0","\x41","\x09","\x44"),
	HX_HCSTRING("applyImpulse","\xe7","\x9c","\x2a","\xad"),
	HX_HCSTRING("applyImpulseInDirection","\xf3","\x27","\x1e","\x7b"),
	HX_HCSTRING("applyTorque","\xd8","\x76","\x8b","\xd2"),
	HX_HCSTRING("getWidth","\x90","\xc5","\x39","\x2a"),
	HX_HCSTRING("getHeight","\x1d","\x91","\xa2","\x7e"),
	HX_HCSTRING("getPhysicsWidth","\x75","\x11","\xc3","\xc9"),
	HX_HCSTRING("getPhysicsHeight","\x98","\xad","\x3b","\x77"),
	HX_HCSTRING("getBody","\x58","\x2a","\x9e","\x13"),
	HX_HCSTRING("enableRotation","\xe1","\x62","\xa6","\x40"),
	HX_HCSTRING("disableRotation","\x46","\x8b","\x68","\xda"),
	HX_HCSTRING("setIgnoreGravity","\x5a","\x9a","\xef","\x55"),
	HX_HCSTRING("ignoresGravity","\x2d","\xf5","\x9c","\xdb"),
	HX_HCSTRING("getFriction","\xb0","\x3b","\xbd","\xbd"),
	HX_HCSTRING("getBounciness","\x59","\x18","\x52","\xc5"),
	HX_HCSTRING("getMass","\xaa","\xf0","\xd8","\x1a"),
	HX_HCSTRING("getAngularMass","\x00","\x88","\x9d","\x29"),
	HX_HCSTRING("getLinearDamping","\xe7","\x46","\x13","\x53"),
	HX_HCSTRING("getAngularDamping","\x36","\x39","\x33","\xef"),
	HX_HCSTRING("setFriction","\xbc","\x42","\x2a","\xc8"),
	HX_HCSTRING("setBounciness","\x65","\xfa","\x57","\x0a"),
	HX_HCSTRING("setMass","\xb6","\x81","\xda","\x0d"),
	HX_HCSTRING("setAngularMass","\x74","\x70","\xbd","\x49"),
	HX_HCSTRING("setLinearDamping","\x5b","\x34","\x55","\xa9"),
	HX_HCSTRING("setAngularDamping","\x42","\x11","\xa1","\x12"),
	HX_HCSTRING("isMouseOver","\xcf","\x00","\x8e","\xd4"),
	HX_HCSTRING("isMouseHover","\xe1","\x01","\x51","\x1b"),
	HX_HCSTRING("isMouseDown","\xdd","\x67","\x43","\xcd"),
	HX_HCSTRING("isMousePressed","\x07","\x02","\x2e","\x12"),
	HX_HCSTRING("isMouseReleased","\xb8","\xd1","\xe9","\xdc"),
	HX_HCSTRING("cancelTweens","\xc2","\x2c","\x57","\xee"),
	HX_HCSTRING("fadeTo","\x17","\x56","\xab","\xe4"),
	HX_HCSTRING("growTo","\x6e","\x90","\x29","\x1c"),
	HX_HCSTRING("spinTo","\xdd","\x9f","\xa6","\xbd"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("spinBy","\x39","\x90","\xa6","\xbd"),
	HX_HCSTRING("moveBy","\x48","\xc3","\xac","\xcc"),
	HX_HCSTRING("drawImage","\xb7","\x54","\x74","\x85"),
	HX_HCSTRING("getCurrentImage","\x18","\x5a","\x5f","\x27"),
	HX_HCSTRING("enableActorDrawing","\x0c","\x44","\x8e","\x0f"),
	HX_HCSTRING("disableActorDrawing","\xf1","\x02","\xfd","\xe0"),
	HX_HCSTRING("drawsImage","\xec","\x14","\xd0","\x58"),
	HX_HCSTRING("setFilter","\xfa","\x94","\xdc","\xe4"),
	HX_HCSTRING("clearFilters","\xae","\x53","\xc5","\xe4"),
	HX_HCSTRING("setBlendMode","\x52","\xa4","\x87","\x30"),
	HX_HCSTRING("resetBlendMode","\x85","\x48","\xa8","\x66"),
	HX_HCSTRING("addBehavior","\xd3","\xc7","\xee","\x3b"),
	HX_HCSTRING("hasBehavior","\x0c","\x76","\x49","\xdd"),
	HX_HCSTRING("enableBehavior","\x35","\xb6","\xb2","\x42"),
	HX_HCSTRING("disableBehavior","\x9a","\xde","\x74","\xdc"),
	HX_HCSTRING("isBehaviorEnabled","\x45","\x55","\x56","\x27"),
	HX_HCSTRING("enableAllBehaviors","\x63","\x5d","\x2e","\xb4"),
	HX_HCSTRING("getValue","\xfb","\x8e","\x8f","\x91"),
	HX_HCSTRING("setValue","\x6f","\xe8","\xec","\x3f"),
	HX_HCSTRING("shout","\x19","\x87","\x27","\x7c"),
	HX_HCSTRING("say","\x2b","\x98","\x57","\x00"),
	HX_HCSTRING("setActorValue","\x7e","\x8a","\x4a","\x5d"),
	HX_HCSTRING("getActorValue","\x72","\xa8","\x44","\x18"),
	HX_HCSTRING("hasActorValue","\x36","\x04","\x29","\xd6"),
	HX_HCSTRING("registerListener","\xf7","\xfd","\xf4","\x36"),
	HX_HCSTRING("removeAllListeners","\x82","\xde","\x5f","\x48"),
	HX_HCSTRING("anchorToScreen","\xdc","\xd6","\xdd","\x1b"),
	HX_HCSTRING("unanchorFromScreen","\xa4","\x6b","\x67","\x2f"),
	HX_HCSTRING("isAnchoredToScreen","\x85","\xd9","\x1f","\x06"),
	HX_HCSTRING("makeAlwaysSimulate","\x21","\xfc","\x92","\x34"),
	HX_HCSTRING("makeSometimesSimulate","\x48","\x78","\xd7","\x45"),
	HX_HCSTRING("alwaysSimulates","\x80","\x77","\x25","\xfb"),
	HX_HCSTRING("die","\x40","\x3d","\x4c","\x00"),
	HX_HCSTRING("isDying","\x23","\x84","\xe2","\x80"),
	HX_HCSTRING("isAlive","\x83","\x07","\x17","\xbe"),
	HX_HCSTRING("isOnScreen","\xf5","\x43","\xb9","\xa1"),
	HX_HCSTRING("isInScene","\x5d","\x2c","\x8d","\x19"),
	HX_HCSTRING("getLastCollidedActor","\x43","\xf0","\xf9","\x32"),
	HX_HCSTRING("killSelfAfterLeavingScreen","\xae","\x2d","\x86","\xe4"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("addRectangularShape","\x44","\xc4","\x78","\x4f"),
	HX_HCSTRING("addCircularShape","\x61","\x11","\x34","\x9f"),
	HX_HCSTRING("addVertex","\x65","\x10","\x6c","\x59"),
	HX_HCSTRING("addPolygonalShape","\xfd","\x88","\xc7","\xc1"),
	HX_HCSTRING("createFixture","\x2d","\x94","\x64","\xda"),
	HX_HCSTRING("getLastCreatedFixture","\xed","\x85","\x52","\xf6"),
	HX_HCSTRING("setLocation","\xf7","\x37","\xa7","\x15"),
	HX_HCSTRING("get_shape","\x78","\x3f","\xc6","\xbf"),
	HX_HCSTRING("set_shape","\x84","\x2b","\x17","\xa3"),
	HX_HCSTRING("collide","\x7e","\xaf","\x63","\xed"),
	HX_HCSTRING("collideTypes","\x1b","\x48","\xd2","\x2e"),
	HX_HCSTRING("collideWith","\xa4","\xe8","\xb5","\xc0"),
	HX_HCSTRING("collideInto","\x3e","\xb7","\x78","\xb7"),
	HX_HCSTRING("clearCollisionInfoList","\x31","\x36","\xf2","\x93"),
	HX_HCSTRING("disposeRemovedCollisionInfo","\x7f","\xb0","\xba","\xad"),
	HX_HCSTRING("clearCollidedList","\xd1","\x0f","\xd0","\x56"),
	HX_HCSTRING("addCollision","\x11","\xca","\x8e","\xda"),
	HX_HCSTRING("alreadyCollided","\xde","\x8a","\xb4","\xdd"),
	HX_HCSTRING("resetReal","\xcd","\x54","\x93","\x91"),
	HX_HCSTRING("adjustByWidth","\xe0","\xdf","\x6c","\x7f"),
	HX_HCSTRING("adjustByHeight","\xcd","\x7c","\x26","\xb6"),
	HX_HCSTRING("getAllCollisionInfo","\xd5","\x0c","\x8e","\x9c"),
	HX_HCSTRING("moveActorBy","\x1b","\xa5","\xa3","\x43"),
	HX_HCSTRING("moveActorTo","\xbf","\xb4","\xa3","\x43"),
	HX_HCSTRING("moveActorTowards","\x98","\x49","\xbd","\x0d"),
	HX_HCSTRING("moveCollideX","\x4b","\x77","\x0b","\x5e"),
	HX_HCSTRING("moveCollideY","\x4c","\x77","\x0b","\x5e"),
	HX_HCSTRING("fillCollisionInfo","\x7d","\x99","\x0e","\x49"),
	HX_HCSTRING("handleCollisionsSimple","\x9b","\x2a","\x09","\x9f"),
	HX_HCSTRING("HITBOX","\x98","\x99","\xaa","\x09"),
	HX_HCSTRING("_mask","\xcb","\x5c","\x67","\xfb"),
	HX_HCSTRING("colMask","\x4c","\x0d","\xe0","\xd8"),
	HX_HCSTRING("_x","\x39","\x53","\x00","\x00"),
	HX_HCSTRING("_y","\x3a","\x53","\x00","\x00"),
	HX_HCSTRING("_moveX","\x68","\x13","\x4d","\x08"),
	HX_HCSTRING("_moveY","\x69","\x13","\x4d","\x08"),
	HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"),
	HX_HCSTRING("simpleCollisions","\x93","\xb6","\x26","\x81"),
	HX_HCSTRING("collidedList","\xa4","\xb2","\x77","\x47"),
	HX_HCSTRING("listChecked","\x69","\x26","\x24","\xca"),
	::String(null()) };

static void Actor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Actor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Actor_obj::GROUP_OFFSET,"GROUP_OFFSET");
	HX_MARK_MEMBER_NAME(Actor_obj::recycledAnimation,"recycledAnimation");
	HX_MARK_MEMBER_NAME(Actor_obj::lastCollided,"lastCollided");
	HX_MARK_MEMBER_NAME(Actor_obj::manifold,"manifold");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Actor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Actor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Actor_obj::GROUP_OFFSET,"GROUP_OFFSET");
	HX_VISIT_MEMBER_NAME(Actor_obj::recycledAnimation,"recycledAnimation");
	HX_VISIT_MEMBER_NAME(Actor_obj::lastCollided,"lastCollided");
	HX_VISIT_MEMBER_NAME(Actor_obj::manifold,"manifold");
};

#endif

hx::Class Actor_obj::__mClass;

static ::String Actor_obj_sStaticFields[] = {
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	HX_HCSTRING("GROUP_OFFSET","\xf3","\x9b","\x75","\x45"),
	HX_HCSTRING("recycledAnimation","\xd3","\xa7","\xe0","\x1f"),
	HX_HCSTRING("lastCollided","\x9c","\xeb","\x67","\x2b"),
	HX_HCSTRING("createBox","\x6f","\x94","\xd8","\x49"),
	HX_HCSTRING("manifold","\x10","\x8c","\x31","\xd0"),
	HX_HCSTRING("scaleShape","\x37","\x90","\x50","\x9d"),
	::String(null())
};

void Actor_obj::__register()
{
	hx::Object *dummy = new Actor_obj;
	Actor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.Actor","\x20","\x4b","\x3d","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Actor_obj::__GetStatic;
	__mClass->mSetStaticField = &Actor_obj::__SetStatic;
	__mClass->mMarkFunc = Actor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Actor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Actor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Actor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Actor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Actor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Actor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Actor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_03717d9f6aea6544_124_boot)
HXDLIN( 124)		GROUP_OFFSET = (int)1000000;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_03717d9f6aea6544_1966_boot)
HXDLIN(1966)		manifold =  ::box2D::collision::B2WorldManifold_obj::__alloc( HX_CTX );
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
