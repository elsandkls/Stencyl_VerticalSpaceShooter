// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Data
#include <com/stencyl/Data.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Behavior
#include <com/stencyl/behavior/Behavior.h>
#endif
#ifndef INCLUDED_com_stencyl_io_AbstractReader
#include <com/stencyl/io/AbstractReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_ActorTypeReader
#include <com/stencyl/io/ActorTypeReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_BackgroundReader
#include <com/stencyl/io/BackgroundReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_BehaviorReader
#include <com/stencyl/io/BehaviorReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_FontReader
#include <com/stencyl/io/FontReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_SoundReader
#include <com/stencyl/io/SoundReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_SpriteReader
#include <com/stencyl/io/SpriteReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_TilesetReader
#include <com/stencyl/io/TilesetReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_MbsResource
#include <com/stencyl/io/mbs/MbsResource.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_Typedefs
#include <com/stencyl/io/mbs/Typedefs.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_actortype_MbsActorType
#include <com/stencyl/io/mbs/actortype/MbsActorType.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_actortype_MbsSprite
#include <com/stencyl/io/mbs/actortype/MbsSprite.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_snippet_MbsSnippetDef
#include <com/stencyl/io/mbs/snippet/MbsSnippetDef.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Atlas
#include <com/stencyl/models/Atlas.h>
#endif
#ifndef INCLUDED_com_stencyl_models_GameModel
#include <com/stencyl/models/GameModel.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Sound
#include <com/stencyl/models/Sound.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_ActorType
#include <com/stencyl/models/actor/ActorType.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Sprite
#include <com/stencyl/models/actor/Sprite.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Assets
#include <com/stencyl/utils/Assets.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_LazyIntMap
#include <com/stencyl/utils/LazyIntMap.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_LazyStringMap
#include <com/stencyl/utils/LazyStringMap.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_mbs_core_ComposedType
#include <mbs/core/ComposedType.h>
#endif
#ifndef INCLUDED_mbs_core_MbsObject
#include <mbs/core/MbsObject.h>
#endif
#ifndef INCLUDED_mbs_core_MbsType
#include <mbs/core/MbsType.h>
#endif
#ifndef INCLUDED_mbs_core_MbsTypedefSet
#include <mbs/core/MbsTypedefSet.h>
#endif
#ifndef INCLUDED_mbs_core_MbsTypes
#include <mbs/core/MbsTypes.h>
#endif
#ifndef INCLUDED_mbs_io_MbsDynamicHelper
#include <mbs/io/MbsDynamicHelper.h>
#endif
#ifndef INCLUDED_mbs_io_MbsDynamicList
#include <mbs/io/MbsDynamicList.h>
#endif
#ifndef INCLUDED_mbs_io_MbsIO
#include <mbs/io/MbsIO.h>
#endif
#ifndef INCLUDED_mbs_io_MbsList
#include <mbs/io/MbsList.h>
#endif
#ifndef INCLUDED_mbs_io_MbsListBase
#include <mbs/io/MbsListBase.h>
#endif
#ifndef INCLUDED_mbs_io_MbsReader
#include <mbs/io/MbsReader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c0a56ee665cf891_38_new,"com.stencyl.Data","new",0x93ae27cb,"com.stencyl.Data.new","com/stencyl/Data.hx",38,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_114_loadAll,"com.stencyl.Data","loadAll",0xc9865b86,"com.stencyl.Data.loadAll","com/stencyl/Data.hx",114,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_138_loadReaders,"com.stencyl.Data","loadReaders",0x866ceeb5,"com.stencyl.Data.loadReaders","com/stencyl/Data.hx",138,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_150_scanBehaviorMbs,"com.stencyl.Data","scanBehaviorMbs",0x790be77a,"com.stencyl.Data.scanBehaviorMbs","com/stencyl/Data.hx",150,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_167_scanResourceMbs,"com.stencyl.Data","scanResourceMbs",0x364e68be,"com.stencyl.Data.scanResourceMbs","com/stencyl/Data.hx",167,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_195_loadResourceFromMbsByName,"com.stencyl.Data","loadResourceFromMbsByName",0xe5ef050d,"com.stencyl.Data.loadResourceFromMbsByName","com/stencyl/Data.hx",195,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_207_loadResourceFromMbs,"com.stencyl.Data","loadResourceFromMbs",0xb682e2eb,"com.stencyl.Data.loadResourceFromMbs","com/stencyl/Data.hx",207,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_233_loadAllResourcesOfType,"com.stencyl.Data","loadAllResourcesOfType",0x7fabb050,"com.stencyl.Data.loadAllResourcesOfType","com/stencyl/Data.hx",233,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_257_loadBehaviorFromMbs,"com.stencyl.Data","loadBehaviorFromMbs",0x582c6fa7,"com.stencyl.Data.loadBehaviorFromMbs","com/stencyl/Data.hx",257,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_267_readResource,"com.stencyl.Data","readResource",0x2d188d79,"com.stencyl.Data.readResource","com/stencyl/Data.hx",267,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_282_getAllActorTypes,"com.stencyl.Data","getAllActorTypes",0xb06b1904,"com.stencyl.Data.getAllActorTypes","com/stencyl/Data.hx",282,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_303_loadAtlas,"com.stencyl.Data","loadAtlas",0x01c2d2f0,"com.stencyl.Data.loadAtlas","com/stencyl/Data.hx",303,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_325_unloadAtlas,"com.stencyl.Data","unloadAtlas",0x7aab5a37,"com.stencyl.Data.unloadAtlas","com/stencyl/Data.hx",325,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_350_reloadScaledResources,"com.stencyl.Data","reloadScaledResources",0x9df098bd,"com.stencyl.Data.reloadScaledResources","com/stencyl/Data.hx",350,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_47_get,"com.stencyl.Data","get",0x93a8d801,"com.stencyl.Data.get","com/stencyl/Data.hx",47,0x402fb543)
HX_LOCAL_STACK_FRAME(_hx_pos_1c0a56ee665cf891_59_resetStatics,"com.stencyl.Data","resetStatics",0x8786652b,"com.stencyl.Data.resetStatics","com/stencyl/Data.hx",59,0x402fb543)
namespace com{
namespace stencyl{

void Data_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_38_new)
HXLINE( 279)		this->actorTypesLoaded = false;
HXLINE(  99)		this->resourceReaderPool = null();
HXLINE(  98)		this->behaviorReader = null();
HXLINE(  96)		this->behaviorLookup = null();
HXLINE(  95)		this->resourceNameLookup = null();
HXLINE(  94)		this->resourceLookup = null();
HXLINE( 107)		if (hx::IsNull( ::com::stencyl::utils::Assets_obj::getBytes(HX_("assets/data/game.mbs",fb,e2,d9,ae)) )) {
HXLINE( 109)			HX_STACK_DO_THROW(HX_("Data.hx - Could not load game. Check your logs for a possible cause.",6f,90,50,1f));
            		}
            	}

Dynamic Data_obj::__CreateEmpty() { return new Data_obj; }

void *Data_obj::_hx_vtable = 0;

Dynamic Data_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Data_obj > _hx_result = new Data_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Data_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x128aa015;
}

void Data_obj::loadAll(){
            	HX_GC_STACKFRAME(&_hx_pos_1c0a56ee665cf891_114_loadAll)
HXLINE( 115)		this->gameMbs =  ::mbs::io::MbsReader_obj::__alloc( HX_CTX ,::com::stencyl::io::mbs::Typedefs_obj::get(),false,true);
HXLINE( 116)		 ::mbs::io::MbsReader _hx_tmp = this->gameMbs;
HXDLIN( 116)		_hx_tmp->readData(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(::com::stencyl::utils::Assets_obj::getBytes(HX_("assets/data/game.mbs",fb,e2,d9,ae))));
HXLINE( 118)		this->sceneListMbs =  ::mbs::io::MbsReader_obj::__alloc( HX_CTX ,::com::stencyl::io::mbs::Typedefs_obj::get(),false,true);
HXLINE( 119)		 ::mbs::io::MbsReader _hx_tmp1 = this->sceneListMbs;
HXDLIN( 119)		_hx_tmp1->readData(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(::com::stencyl::utils::Assets_obj::getBytes(HX_("assets/data/scenes.mbs",70,e7,07,29))));
HXLINE( 121)		this->resourceListMbs =  ::mbs::io::MbsReader_obj::__alloc( HX_CTX ,::com::stencyl::io::mbs::Typedefs_obj::get(),false,false);
HXLINE( 122)		 ::mbs::io::MbsReader _hx_tmp2 = this->resourceListMbs;
HXDLIN( 122)		_hx_tmp2->readData(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(::com::stencyl::utils::Assets_obj::getBytes(HX_("assets/data/resources.mbs",dc,11,5f,f5))));
HXLINE( 124)		this->behaviorListMbs =  ::mbs::io::MbsReader_obj::__alloc( HX_CTX ,::com::stencyl::io::mbs::Typedefs_obj::get(),false,false);
HXLINE( 125)		 ::mbs::io::MbsReader _hx_tmp3 = this->behaviorListMbs;
HXDLIN( 125)		_hx_tmp3->readData(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(::com::stencyl::utils::Assets_obj::getBytes(HX_("assets/data/behaviors.mbs",98,b7,86,81))));
HXLINE( 127)		this->behaviors =  ::com::stencyl::utils::LazyIntMap_obj::__alloc( HX_CTX , ::haxe::ds::IntMap_obj::__alloc( HX_CTX ),this->loadBehaviorFromMbs_dyn());
HXLINE( 128)		this->resources =  ::com::stencyl::utils::LazyIntMap_obj::__alloc( HX_CTX , ::haxe::ds::IntMap_obj::__alloc( HX_CTX ),this->loadResourceFromMbs_dyn());
HXLINE( 129)		this->resourceMap =  ::com::stencyl::utils::LazyStringMap_obj::__alloc( HX_CTX , ::haxe::ds::StringMap_obj::__alloc( HX_CTX ),this->loadResourceFromMbsByName_dyn());
HXLINE( 131)		this->loadReaders();
HXLINE( 133)		this->scanBehaviorMbs();
HXLINE( 134)		this->scanResourceMbs();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Data_obj,loadAll,(void))

void Data_obj::loadReaders(){
            	HX_GC_STACKFRAME(&_hx_pos_1c0a56ee665cf891_138_loadReaders)
HXLINE( 139)		this->readers = ::Array_obj< ::Dynamic>::__new();
HXLINE( 140)		::Array< ::Dynamic> _hx_tmp = this->readers;
HXDLIN( 140)		_hx_tmp->push( ::com::stencyl::io::BackgroundReader_obj::__alloc( HX_CTX ));
HXLINE( 141)		::Array< ::Dynamic> _hx_tmp1 = this->readers;
HXDLIN( 141)		_hx_tmp1->push( ::com::stencyl::io::SoundReader_obj::__alloc( HX_CTX ));
HXLINE( 142)		::Array< ::Dynamic> _hx_tmp2 = this->readers;
HXDLIN( 142)		_hx_tmp2->push( ::com::stencyl::io::TilesetReader_obj::__alloc( HX_CTX ));
HXLINE( 143)		::Array< ::Dynamic> _hx_tmp3 = this->readers;
HXDLIN( 143)		_hx_tmp3->push( ::com::stencyl::io::ActorTypeReader_obj::__alloc( HX_CTX ));
HXLINE( 144)		::Array< ::Dynamic> _hx_tmp4 = this->readers;
HXDLIN( 144)		_hx_tmp4->push( ::com::stencyl::io::SpriteReader_obj::__alloc( HX_CTX ));
HXLINE( 145)		::Array< ::Dynamic> _hx_tmp5 = this->readers;
HXDLIN( 145)		_hx_tmp5->push( ::com::stencyl::io::FontReader_obj::__alloc( HX_CTX ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Data_obj,loadReaders,(void))

void Data_obj::scanBehaviorMbs(){
            	HX_GC_STACKFRAME(&_hx_pos_1c0a56ee665cf891_150_scanBehaviorMbs)
HXLINE( 151)		this->behaviorLookup =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 153)		 ::mbs::io::MbsReader reader = this->behaviorListMbs;
HXLINE( 154)		 ::mbs::io::MbsList listReader = ( ( ::mbs::io::MbsList)(reader->getRoot()) );
HXLINE( 156)		{
HXLINE( 156)			int _g1 = (int)0;
HXDLIN( 156)			int _g = listReader->length();
HXDLIN( 156)			while((_g1 < _g)){
HXLINE( 156)				_g1 = (_g1 + (int)1);
HXDLIN( 156)				int i = (_g1 - (int)1);
HXLINE( 158)				int address = listReader->elementAddress;
HXLINE( 159)				this->behaviorReader = listReader->getNextObject().StaticCast<  ::com::stencyl::io::mbs::snippet::MbsSnippetDef >();
HXLINE( 161)				{
HXLINE( 161)					::Dynamic this1 = this->behaviorLookup;
HXDLIN( 161)					( ( ::haxe::ds::IntMap)(this1) )->set(this->behaviorReader->getId(),address);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Data_obj,scanBehaviorMbs,(void))

void Data_obj::scanResourceMbs(){
            	HX_GC_STACKFRAME(&_hx_pos_1c0a56ee665cf891_167_scanResourceMbs)
HXLINE( 168)		this->resourceLookup =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 169)		this->resourceNameLookup =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 171)		 ::mbs::io::MbsDynamicList listReader = ( ( ::mbs::io::MbsDynamicList)(this->resourceListMbs->getRoot()) );
HXLINE( 172)		this->resourceReaderPool = ::mbs::io::MbsDynamicHelper_obj::createObjectPool(this->resourceListMbs);
HXLINE( 174)		 ::com::stencyl::io::mbs::MbsResource obj =  ::com::stencyl::io::mbs::MbsResource_obj::__alloc( HX_CTX ,this->resourceListMbs);
HXLINE( 175)		int intSize = ::mbs::core::MbsTypes_obj::INTEGER->getSize();
HXLINE( 177)		{
HXLINE( 177)			int _g1 = (int)0;
HXDLIN( 177)			int _g = listReader->length();
HXDLIN( 177)			while((_g1 < _g)){
HXLINE( 177)				_g1 = (_g1 + (int)1);
HXDLIN( 177)				int i = (_g1 - (int)1);
HXLINE( 179)				int dynAddress = listReader->elementAddress;
HXLINE( 180)				 ::mbs::io::MbsReader objAddress = this->resourceListMbs;
HXDLIN( 180)				int objAddress1 = objAddress->readInt((dynAddress + intSize));
HXLINE( 181)				 ::mbs::io::MbsDynamicList listReader1 = listReader;
HXDLIN( 181)				listReader1->elementAddress = (listReader1->elementAddress + listReader->elementSize);
HXLINE( 183)				obj->setAddress(objAddress1);
HXLINE( 184)				{
HXLINE( 184)					::Dynamic this1 = this->resourceLookup;
HXDLIN( 184)					( ( ::haxe::ds::IntMap)(this1) )->set(obj->getId(),dynAddress);
            				}
HXLINE( 186)				 ::mbs::core::MbsType type = this->resourceListMbs->readTypecode(dynAddress);
HXLINE( 187)				if (hx::IsEq( type,::com::stencyl::io::mbs::actortype::MbsSprite_obj::MBS_SPRITE )) {
HXLINE( 188)					::Dynamic this2 = this->resourceNameLookup;
HXDLIN( 188)					::String key = (HX_("Sprite_",9a,d0,db,2c) + obj->getName());
HXDLIN( 188)					( ( ::haxe::ds::StringMap)(this2) )->set(key,obj->getId());
            				}
            				else {
HXLINE( 190)					::Dynamic this3 = this->resourceNameLookup;
HXDLIN( 190)					::String key1 = obj->getName();
HXDLIN( 190)					( ( ::haxe::ds::StringMap)(this3) )->set(key1,obj->getId());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Data_obj,scanResourceMbs,(void))

 ::com::stencyl::models::Resource Data_obj::loadResourceFromMbsByName(::String name){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_195_loadResourceFromMbsByName)
HXLINE( 196)		 ::Dynamic id = this->resourceNameLookup->get(name);
HXLINE( 197)		if (hx::IsNull( id )) {
HXLINE( 199)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 199)			_hx_tmp(((HX_("Resource with name ",cd,13,20,f8) + name) + HX_(" doesn't exist.",d5,8e,40,5e)),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),199,HX_("com.stencyl.Data",59,e6,5d,1a),HX_("loadResourceFromMbsByName",62,85,a1,a7)));
HXLINE( 200)			return null();
            		}
HXLINE( 203)		return this->loadResourceFromMbs(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Data_obj,loadResourceFromMbsByName,return )

 ::com::stencyl::models::Resource Data_obj::loadResourceFromMbs(int id){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_207_loadResourceFromMbs)
HXLINE( 208)		 ::Dynamic address = this->resourceLookup->get(id);
HXLINE( 209)		if (hx::IsNull( address )) {
HXLINE( 211)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 211)			_hx_tmp(((HX_("Error: resource with id ",4f,a2,51,f5) + id) + HX_(" doesn't exist.",d5,8e,40,5e)),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),211,HX_("com.stencyl.Data",59,e6,5d,1a),HX_("loadResourceFromMbs",80,c5,e1,b6)));
HXLINE( 212)			return null();
            		}
HXLINE( 214)		 ::mbs::core::MbsObject obj = ( ( ::mbs::core::MbsObject)(::mbs::io::MbsDynamicHelper_obj::readDynamicUsingPool(this->resourceListMbs,address,this->resourceReaderPool)) );
HXLINE( 216)		 ::com::stencyl::models::Resource newResource = this->readResource(obj->getMbsType()->getName(),obj);
HXLINE( 218)		if (hx::IsNotNull( newResource )) {
HXLINE( 220)			::haxe::IMap_obj::set(this->resources->map,newResource->ID,newResource);
HXLINE( 222)			if (::Std_obj::is(newResource,hx::ClassOf< ::com::stencyl::models::actor::Sprite >())) {
HXLINE( 223)				::haxe::IMap_obj::set(this->resourceMap->map,(HX_("Sprite_",9a,d0,db,2c) + newResource->name),newResource);
            			}
            			else {
HXLINE( 225)				::haxe::IMap_obj::set(this->resourceMap->map,newResource->name,newResource);
            			}
            		}
HXLINE( 228)		return newResource;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Data_obj,loadResourceFromMbs,return )

void Data_obj::loadAllResourcesOfType( ::mbs::core::MbsType type){
            	HX_GC_STACKFRAME(&_hx_pos_1c0a56ee665cf891_233_loadAllResourcesOfType)
HXLINE( 234)		 ::mbs::io::MbsDynamicList listReader = ( ( ::mbs::io::MbsDynamicList)(this->resourceListMbs->getRoot()) );
HXLINE( 236)		 ::com::stencyl::io::mbs::MbsResource obj =  ::com::stencyl::io::mbs::MbsResource_obj::__alloc( HX_CTX ,this->resourceListMbs);
HXLINE( 237)		int intSize = ::mbs::core::MbsTypes_obj::INTEGER->getSize();
HXLINE( 239)		int _hx_tmp = listReader->getAddress();
HXDLIN( 239)		listReader->elementAddress = (_hx_tmp + (intSize * (int)2));
HXLINE( 240)		{
HXLINE( 240)			int _g1 = (int)0;
HXDLIN( 240)			int _g = listReader->length();
HXDLIN( 240)			while((_g1 < _g)){
HXLINE( 240)				_g1 = (_g1 + (int)1);
HXDLIN( 240)				int i = (_g1 - (int)1);
HXLINE( 242)				int dynAddress = listReader->elementAddress;
HXLINE( 243)				 ::mbs::core::MbsType objType = this->resourceListMbs->readTypecode(dynAddress);
HXLINE( 245)				if (hx::IsEq( objType,type )) {
HXLINE( 247)					 ::mbs::io::MbsReader objAddress = this->resourceListMbs;
HXDLIN( 247)					int objAddress1 = objAddress->readInt((dynAddress + intSize));
HXLINE( 248)					obj->setAddress(objAddress1);
HXLINE( 249)					this->loadResourceFromMbs(obj->getId());
            				}
HXLINE( 252)				 ::mbs::io::MbsDynamicList listReader1 = listReader;
HXDLIN( 252)				listReader1->elementAddress = (listReader1->elementAddress + listReader->elementSize);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Data_obj,loadAllResourcesOfType,(void))

 ::com::stencyl::behavior::Behavior Data_obj::loadBehaviorFromMbs(int id){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_257_loadBehaviorFromMbs)
HXLINE( 258)		 ::Dynamic address = this->behaviorLookup->get(id);
HXLINE( 259)		if (hx::IsNull( address )) {
HXLINE( 260)			return null();
            		}
HXLINE( 262)		this->behaviorReader->setAddress(address);
HXLINE( 263)		return ::com::stencyl::io::BehaviorReader_obj::readBehavior(this->behaviorReader);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Data_obj,loadBehaviorFromMbs,return )

 ::com::stencyl::models::Resource Data_obj::readResource(::String type, ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_267_readResource)
HXLINE( 268)		{
HXLINE( 268)			int _g = (int)0;
HXDLIN( 268)			::Array< ::Dynamic> _g1 = this->readers;
HXDLIN( 268)			while((_g < _g1->length)){
HXLINE( 268)				::Dynamic reader = _g1->__get(_g);
HXDLIN( 268)				_g = (_g + (int)1);
HXLINE( 270)				if (::com::stencyl::io::AbstractReader_obj::accepts(reader,type)) {
HXLINE( 272)					return ::com::stencyl::io::AbstractReader_obj::read(reader,object);
            				}
            			}
            		}
HXLINE( 276)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Data_obj,readResource,return )

::Array< ::Dynamic> Data_obj::getAllActorTypes(){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_282_getAllActorTypes)
HXLINE( 283)		if (!(this->actorTypesLoaded)) {
HXLINE( 285)			this->loadAllResourcesOfType(::com::stencyl::io::mbs::actortype::MbsActorType_obj::MBS_ACTOR_TYPE);
HXLINE( 286)			this->actorTypesLoaded = true;
            		}
HXLINE( 289)		::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE( 291)		{
HXLINE( 291)			 ::Dynamic r = ::haxe::IMap_obj::iterator(this->resources->map);
HXDLIN( 291)			while(( (bool)(r->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 291)				 ::com::stencyl::models::Resource r1 = ( ( ::com::stencyl::models::Resource)(r->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 293)				if (::Std_obj::is(r1,hx::ClassOf< ::com::stencyl::models::actor::ActorType >())) {
HXLINE( 295)					a->push(r1);
            				}
            			}
            		}
HXLINE( 299)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Data_obj,getAllActorTypes,return )

void Data_obj::loadAtlas(int atlasID){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_303_loadAtlas)
HXLINE( 304)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 304)		_hx_tmp((HX_("Load Atlas: ",b7,90,2c,2e) + atlasID),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),304,HX_("com.stencyl.Data",59,e6,5d,1a),HX_("loadAtlas",45,99,14,42)));
HXLINE( 306)		 ::com::stencyl::models::Atlas atlas = ::com::stencyl::models::GameModel_obj::get()->atlases->get(atlasID).StaticCast<  ::com::stencyl::models::Atlas >();
HXLINE( 308)		bool _hx_tmp1;
HXDLIN( 308)		if (hx::IsNotNull( atlas )) {
HXLINE( 308)			_hx_tmp1 = !(atlas->active);
            		}
            		else {
HXLINE( 308)			_hx_tmp1 = false;
            		}
HXDLIN( 308)		if (_hx_tmp1) {
HXLINE( 310)			atlas->active = true;
HXLINE( 312)			{
HXLINE( 312)				int _g = (int)0;
HXDLIN( 312)				::Array< int > _g1 = atlas->members;
HXDLIN( 312)				while((_g < _g1->length)){
HXLINE( 312)					int resourceID = _g1->__get(_g);
HXDLIN( 312)					_g = (_g + (int)1);
HXLINE( 314)					 ::com::stencyl::models::Resource resource = this->resources->get(resourceID).StaticCast<  ::com::stencyl::models::Resource >();
HXLINE( 316)					if (hx::IsNotNull( resource )) {
HXLINE( 318)						resource->loadGraphics();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Data_obj,loadAtlas,(void))

void Data_obj::unloadAtlas(int atlasID){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_325_unloadAtlas)
HXLINE( 327)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 327)		_hx_tmp((HX_("Unload Atlas: ",90,e0,5c,02) + atlasID),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),327,HX_("com.stencyl.Data",59,e6,5d,1a),HX_("unloadAtlas",cc,1f,bb,c7)));
HXLINE( 329)		 ::com::stencyl::models::Atlas atlas = ::com::stencyl::models::GameModel_obj::get()->atlases->get(atlasID).StaticCast<  ::com::stencyl::models::Atlas >();
HXLINE( 331)		bool _hx_tmp1;
HXDLIN( 331)		if (hx::IsNotNull( atlas )) {
HXLINE( 331)			_hx_tmp1 = atlas->active;
            		}
            		else {
HXLINE( 331)			_hx_tmp1 = false;
            		}
HXDLIN( 331)		if (_hx_tmp1) {
HXLINE( 333)			atlas->active = false;
HXLINE( 335)			{
HXLINE( 335)				int _g = (int)0;
HXDLIN( 335)				::Array< int > _g1 = atlas->members;
HXDLIN( 335)				while((_g < _g1->length)){
HXLINE( 335)					int resourceID = _g1->__get(_g);
HXDLIN( 335)					_g = (_g + (int)1);
HXLINE( 337)					 ::com::stencyl::models::Resource resource = this->resources->get(resourceID).StaticCast<  ::com::stencyl::models::Resource >();
HXLINE( 339)					if (hx::IsNotNull( resource )) {
HXLINE( 341)						resource->unloadGraphics();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Data_obj,unloadAtlas,(void))

void Data_obj::reloadScaledResources(){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_350_reloadScaledResources)
HXDLIN( 350)		 ::Dynamic r = ::haxe::IMap_obj::iterator(this->resources->map);
HXDLIN( 350)		while(( (bool)(r->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 350)			 ::com::stencyl::models::Resource r1 = ( ( ::com::stencyl::models::Resource)(r->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 352)			if (hx::IsNull( r1 )) {
HXLINE( 353)				continue;
            			}
HXLINE( 354)			bool _hx_tmp;
HXDLIN( 354)			if (!(::Std_obj::is(r1,hx::ClassOf< ::com::stencyl::models::Sound >()))) {
HXLINE( 354)				_hx_tmp = ::Std_obj::is(r1,hx::ClassOf< ::com::stencyl::models::actor::ActorType >());
            			}
            			else {
HXLINE( 354)				_hx_tmp = true;
            			}
HXDLIN( 354)			if (_hx_tmp) {
HXLINE( 355)				continue;
            			}
HXLINE( 356)			if (!(r1->isAtlasActive())) {
HXLINE( 357)				continue;
            			}
HXLINE( 358)			r1->reloadGraphics((int)-1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Data_obj,reloadScaledResources,(void))

 ::com::stencyl::Data Data_obj::instance;

 ::com::stencyl::Data Data_obj::get(){
            	HX_GC_STACKFRAME(&_hx_pos_1c0a56ee665cf891_47_get)
HXLINE(  48)		if (hx::IsNull( ::com::stencyl::Data_obj::instance )) {
HXLINE(  50)			::com::stencyl::Data_obj::instance =  ::com::stencyl::Data_obj::__alloc( HX_CTX );
HXLINE(  51)			::com::stencyl::Data_obj::instance->loadAll();
            		}
HXLINE(  54)		return ::com::stencyl::Data_obj::instance;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Data_obj,get,return )

void Data_obj::resetStatics(){
            	HX_STACKFRAME(&_hx_pos_1c0a56ee665cf891_59_resetStatics)
HXDLIN(  59)		::com::stencyl::Data_obj::instance = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Data_obj,resetStatics,(void))


hx::ObjectPtr< Data_obj > Data_obj::__new() {
	hx::ObjectPtr< Data_obj > __this = new Data_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Data_obj > Data_obj::__alloc(hx::Ctx *_hx_ctx) {
	Data_obj *__this = (Data_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Data_obj), true, "com.stencyl.Data"));
	*(void **)__this = Data_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Data_obj::Data_obj()
{
}

void Data_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Data);
	HX_MARK_MEMBER_NAME(readers,"readers");
	HX_MARK_MEMBER_NAME(gameMbs,"gameMbs");
	HX_MARK_MEMBER_NAME(resourceListMbs,"resourceListMbs");
	HX_MARK_MEMBER_NAME(sceneListMbs,"sceneListMbs");
	HX_MARK_MEMBER_NAME(behaviorListMbs,"behaviorListMbs");
	HX_MARK_MEMBER_NAME(resources,"resources");
	HX_MARK_MEMBER_NAME(resourceMap,"resourceMap");
	HX_MARK_MEMBER_NAME(behaviors,"behaviors");
	HX_MARK_MEMBER_NAME(resourceLookup,"resourceLookup");
	HX_MARK_MEMBER_NAME(resourceNameLookup,"resourceNameLookup");
	HX_MARK_MEMBER_NAME(behaviorLookup,"behaviorLookup");
	HX_MARK_MEMBER_NAME(behaviorReader,"behaviorReader");
	HX_MARK_MEMBER_NAME(resourceReaderPool,"resourceReaderPool");
	HX_MARK_MEMBER_NAME(actorTypesLoaded,"actorTypesLoaded");
	HX_MARK_END_CLASS();
}

void Data_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(readers,"readers");
	HX_VISIT_MEMBER_NAME(gameMbs,"gameMbs");
	HX_VISIT_MEMBER_NAME(resourceListMbs,"resourceListMbs");
	HX_VISIT_MEMBER_NAME(sceneListMbs,"sceneListMbs");
	HX_VISIT_MEMBER_NAME(behaviorListMbs,"behaviorListMbs");
	HX_VISIT_MEMBER_NAME(resources,"resources");
	HX_VISIT_MEMBER_NAME(resourceMap,"resourceMap");
	HX_VISIT_MEMBER_NAME(behaviors,"behaviors");
	HX_VISIT_MEMBER_NAME(resourceLookup,"resourceLookup");
	HX_VISIT_MEMBER_NAME(resourceNameLookup,"resourceNameLookup");
	HX_VISIT_MEMBER_NAME(behaviorLookup,"behaviorLookup");
	HX_VISIT_MEMBER_NAME(behaviorReader,"behaviorReader");
	HX_VISIT_MEMBER_NAME(resourceReaderPool,"resourceReaderPool");
	HX_VISIT_MEMBER_NAME(actorTypesLoaded,"actorTypesLoaded");
}

hx::Val Data_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"readers") ) { return hx::Val( readers ); }
		if (HX_FIELD_EQ(inName,"gameMbs") ) { return hx::Val( gameMbs ); }
		if (HX_FIELD_EQ(inName,"loadAll") ) { return hx::Val( loadAll_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"resources") ) { return hx::Val( resources ); }
		if (HX_FIELD_EQ(inName,"behaviors") ) { return hx::Val( behaviors ); }
		if (HX_FIELD_EQ(inName,"loadAtlas") ) { return hx::Val( loadAtlas_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"resourceMap") ) { return hx::Val( resourceMap ); }
		if (HX_FIELD_EQ(inName,"loadReaders") ) { return hx::Val( loadReaders_dyn() ); }
		if (HX_FIELD_EQ(inName,"unloadAtlas") ) { return hx::Val( unloadAtlas_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sceneListMbs") ) { return hx::Val( sceneListMbs ); }
		if (HX_FIELD_EQ(inName,"readResource") ) { return hx::Val( readResource_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"resourceLookup") ) { return hx::Val( resourceLookup ); }
		if (HX_FIELD_EQ(inName,"behaviorLookup") ) { return hx::Val( behaviorLookup ); }
		if (HX_FIELD_EQ(inName,"behaviorReader") ) { return hx::Val( behaviorReader ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resourceListMbs") ) { return hx::Val( resourceListMbs ); }
		if (HX_FIELD_EQ(inName,"behaviorListMbs") ) { return hx::Val( behaviorListMbs ); }
		if (HX_FIELD_EQ(inName,"scanBehaviorMbs") ) { return hx::Val( scanBehaviorMbs_dyn() ); }
		if (HX_FIELD_EQ(inName,"scanResourceMbs") ) { return hx::Val( scanResourceMbs_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"actorTypesLoaded") ) { return hx::Val( actorTypesLoaded ); }
		if (HX_FIELD_EQ(inName,"getAllActorTypes") ) { return hx::Val( getAllActorTypes_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"resourceNameLookup") ) { return hx::Val( resourceNameLookup ); }
		if (HX_FIELD_EQ(inName,"resourceReaderPool") ) { return hx::Val( resourceReaderPool ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"loadResourceFromMbs") ) { return hx::Val( loadResourceFromMbs_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadBehaviorFromMbs") ) { return hx::Val( loadBehaviorFromMbs_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"reloadScaledResources") ) { return hx::Val( reloadScaledResources_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"loadAllResourcesOfType") ) { return hx::Val( loadAllResourcesOfType_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"loadResourceFromMbsByName") ) { return hx::Val( loadResourceFromMbsByName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Data_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
	}
	return false;
}

hx::Val Data_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"readers") ) { readers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameMbs") ) { gameMbs=inValue.Cast<  ::mbs::io::MbsReader >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"resources") ) { resources=inValue.Cast<  ::com::stencyl::utils::LazyIntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"behaviors") ) { behaviors=inValue.Cast<  ::com::stencyl::utils::LazyIntMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"resourceMap") ) { resourceMap=inValue.Cast<  ::com::stencyl::utils::LazyStringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sceneListMbs") ) { sceneListMbs=inValue.Cast<  ::mbs::io::MbsReader >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"resourceLookup") ) { resourceLookup=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"behaviorLookup") ) { behaviorLookup=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"behaviorReader") ) { behaviorReader=inValue.Cast<  ::com::stencyl::io::mbs::snippet::MbsSnippetDef >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resourceListMbs") ) { resourceListMbs=inValue.Cast<  ::mbs::io::MbsReader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"behaviorListMbs") ) { behaviorListMbs=inValue.Cast<  ::mbs::io::MbsReader >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"actorTypesLoaded") ) { actorTypesLoaded=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"resourceNameLookup") ) { resourceNameLookup=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resourceReaderPool") ) { resourceReaderPool=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Data_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::com::stencyl::Data >(); return true; }
	}
	return false;
}

void Data_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02"));
	outFields->push(HX_HCSTRING("gameMbs","\xac","\x52","\x6b","\x89"));
	outFields->push(HX_HCSTRING("resourceListMbs","\x92","\x56","\xcf","\x80"));
	outFields->push(HX_HCSTRING("sceneListMbs","\xd4","\x85","\xd9","\x48"));
	outFields->push(HX_HCSTRING("behaviorListMbs","\x4e","\xe3","\x78","\x22"));
	outFields->push(HX_HCSTRING("resources","\xe5","\xd7","\xb0","\x39"));
	outFields->push(HX_HCSTRING("resourceMap","\x6e","\xda","\x65","\xa9"));
	outFields->push(HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35"));
	outFields->push(HX_HCSTRING("resourceLookup","\xe8","\x01","\xdd","\x8d"));
	outFields->push(HX_HCSTRING("resourceNameLookup","\x93","\x81","\x0b","\x19"));
	outFields->push(HX_HCSTRING("behaviorLookup","\xac","\x60","\x66","\xa4"));
	outFields->push(HX_HCSTRING("behaviorReader","\x75","\x63","\x42","\x3f"));
	outFields->push(HX_HCSTRING("resourceReaderPool","\x2d","\x5e","\xad","\x32"));
	outFields->push(HX_HCSTRING("actorTypesLoaded","\x69","\x44","\xa8","\x14"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Data_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::com::stencyl::io::AbstractReader >*/ ,(int)offsetof(Data_obj,readers),HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02")},
	{hx::fsObject /*::mbs::io::MbsReader*/ ,(int)offsetof(Data_obj,gameMbs),HX_HCSTRING("gameMbs","\xac","\x52","\x6b","\x89")},
	{hx::fsObject /*::mbs::io::MbsReader*/ ,(int)offsetof(Data_obj,resourceListMbs),HX_HCSTRING("resourceListMbs","\x92","\x56","\xcf","\x80")},
	{hx::fsObject /*::mbs::io::MbsReader*/ ,(int)offsetof(Data_obj,sceneListMbs),HX_HCSTRING("sceneListMbs","\xd4","\x85","\xd9","\x48")},
	{hx::fsObject /*::mbs::io::MbsReader*/ ,(int)offsetof(Data_obj,behaviorListMbs),HX_HCSTRING("behaviorListMbs","\x4e","\xe3","\x78","\x22")},
	{hx::fsObject /*::com::stencyl::utils::LazyIntMap*/ ,(int)offsetof(Data_obj,resources),HX_HCSTRING("resources","\xe5","\xd7","\xb0","\x39")},
	{hx::fsObject /*::com::stencyl::utils::LazyStringMap*/ ,(int)offsetof(Data_obj,resourceMap),HX_HCSTRING("resourceMap","\x6e","\xda","\x65","\xa9")},
	{hx::fsObject /*::com::stencyl::utils::LazyIntMap*/ ,(int)offsetof(Data_obj,behaviors),HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Data_obj,resourceLookup),HX_HCSTRING("resourceLookup","\xe8","\x01","\xdd","\x8d")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Data_obj,resourceNameLookup),HX_HCSTRING("resourceNameLookup","\x93","\x81","\x0b","\x19")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Data_obj,behaviorLookup),HX_HCSTRING("behaviorLookup","\xac","\x60","\x66","\xa4")},
	{hx::fsObject /*::com::stencyl::io::mbs::snippet::MbsSnippetDef*/ ,(int)offsetof(Data_obj,behaviorReader),HX_HCSTRING("behaviorReader","\x75","\x63","\x42","\x3f")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(Data_obj,resourceReaderPool),HX_HCSTRING("resourceReaderPool","\x2d","\x5e","\xad","\x32")},
	{hx::fsBool,(int)offsetof(Data_obj,actorTypesLoaded),HX_HCSTRING("actorTypesLoaded","\x69","\x44","\xa8","\x14")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Data_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::Data*/ ,(void *) &Data_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Data_obj_sMemberFields[] = {
	HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02"),
	HX_HCSTRING("gameMbs","\xac","\x52","\x6b","\x89"),
	HX_HCSTRING("resourceListMbs","\x92","\x56","\xcf","\x80"),
	HX_HCSTRING("sceneListMbs","\xd4","\x85","\xd9","\x48"),
	HX_HCSTRING("behaviorListMbs","\x4e","\xe3","\x78","\x22"),
	HX_HCSTRING("resources","\xe5","\xd7","\xb0","\x39"),
	HX_HCSTRING("resourceMap","\x6e","\xda","\x65","\xa9"),
	HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35"),
	HX_HCSTRING("resourceLookup","\xe8","\x01","\xdd","\x8d"),
	HX_HCSTRING("resourceNameLookup","\x93","\x81","\x0b","\x19"),
	HX_HCSTRING("behaviorLookup","\xac","\x60","\x66","\xa4"),
	HX_HCSTRING("behaviorReader","\x75","\x63","\x42","\x3f"),
	HX_HCSTRING("resourceReaderPool","\x2d","\x5e","\xad","\x32"),
	HX_HCSTRING("loadAll","\x9b","\x72","\xd4","\x08"),
	HX_HCSTRING("loadReaders","\x4a","\xb4","\x7c","\xd3"),
	HX_HCSTRING("scanBehaviorMbs","\x8f","\x9b","\x96","\xb4"),
	HX_HCSTRING("scanResourceMbs","\xd3","\x1c","\xd9","\x71"),
	HX_HCSTRING("loadResourceFromMbsByName","\x62","\x85","\xa1","\xa7"),
	HX_HCSTRING("loadResourceFromMbs","\x80","\xc5","\xe1","\xb6"),
	HX_HCSTRING("loadAllResourcesOfType","\xdb","\xd8","\xc2","\x52"),
	HX_HCSTRING("loadBehaviorFromMbs","\x3c","\x52","\x8b","\x58"),
	HX_HCSTRING("readResource","\x44","\xaa","\xd5","\x4d"),
	HX_HCSTRING("actorTypesLoaded","\x69","\x44","\xa8","\x14"),
	HX_HCSTRING("getAllActorTypes","\x4f","\xf7","\x3d","\x8e"),
	HX_HCSTRING("loadAtlas","\x45","\x99","\x14","\x42"),
	HX_HCSTRING("unloadAtlas","\xcc","\x1f","\xbb","\xc7"),
	HX_HCSTRING("reloadScaledResources","\x92","\x0a","\xbd","\x9d"),
	::String(null()) };

static void Data_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Data_obj::instance,"instance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Data_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Data_obj::instance,"instance");
};

#endif

hx::Class Data_obj::__mClass;

static ::String Data_obj_sStaticFields[] = {
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	::String(null())
};

void Data_obj::__register()
{
	hx::Object *dummy = new Data_obj;
	Data_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.Data","\x59","\xe6","\x5d","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Data_obj::__GetStatic;
	__mClass->mSetStaticField = &Data_obj::__SetStatic;
	__mClass->mMarkFunc = Data_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Data_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Data_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Data_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Data_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Data_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Data_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
