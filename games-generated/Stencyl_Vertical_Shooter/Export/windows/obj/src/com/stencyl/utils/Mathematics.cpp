// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Mathematics
#include <com/stencyl/utils/Mathematics.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_13e03a9e2284be08_40_round,"com.stencyl.utils.Mathematics","round",0xfcf0fbaa,"com.stencyl.utils.Mathematics.round","com/stencyl/utils/Mathematics.hx",40,0x3b583bf7)
HX_LOCAL_STACK_FRAME(_hx_pos_13e03a9e2284be08_46_clamp,"com.stencyl.utils.Mathematics","clamp",0x57e37657,"com.stencyl.utils.Mathematics.clamp","com/stencyl/utils/Mathematics.hx",46,0x3b583bf7)
HX_LOCAL_STACK_FRAME(_hx_pos_13e03a9e2284be08_52_fclamp,"com.stencyl.utils.Mathematics","fclamp",0x9ad72df9,"com.stencyl.utils.Mathematics.fclamp","com/stencyl/utils/Mathematics.hx",52,0x3b583bf7)
namespace com{
namespace stencyl{
namespace utils{

void Mathematics_obj::__construct() { }

Dynamic Mathematics_obj::__CreateEmpty() { return new Mathematics_obj; }

void *Mathematics_obj::_hx_vtable = 0;

Dynamic Mathematics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mathematics_obj > _hx_result = new Mathematics_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mathematics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5832e29c;
}

int Mathematics_obj::round(Float x){
            	HX_STACKFRAME(&_hx_pos_13e03a9e2284be08_40_round)
HXDLIN(  40)		Float _hx_tmp;
HXDLIN(  40)		if ((x > (int)0)) {
HXDLIN(  40)			_hx_tmp = (x + ((Float).5));
            		}
            		else {
HXDLIN(  40)			if ((x < (int)0)) {
HXDLIN(  40)				_hx_tmp = (x - ((Float).5));
            			}
            			else {
HXDLIN(  40)				_hx_tmp = (int)0;
            			}
            		}
HXDLIN(  40)		return ::Std_obj::_hx_int(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mathematics_obj,round,return )

int Mathematics_obj::clamp(int x,int min,int max){
            	HX_STACKFRAME(&_hx_pos_13e03a9e2284be08_46_clamp)
HXDLIN(  46)		if ((x < min)) {
HXDLIN(  46)			return min;
            		}
            		else {
HXDLIN(  46)			if ((x > max)) {
HXDLIN(  46)				return max;
            			}
            			else {
HXDLIN(  46)				return x;
            			}
            		}
HXDLIN(  46)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Mathematics_obj,clamp,return )

Float Mathematics_obj::fclamp(Float x,Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_13e03a9e2284be08_52_fclamp)
HXDLIN(  52)		if ((x < min)) {
HXDLIN(  52)			return min;
            		}
            		else {
HXDLIN(  52)			if ((x > max)) {
HXDLIN(  52)				return max;
            			}
            			else {
HXDLIN(  52)				return x;
            			}
            		}
HXDLIN(  52)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Mathematics_obj,fclamp,return )


Mathematics_obj::Mathematics_obj()
{
}

bool Mathematics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fclamp") ) { outValue = fclamp_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Mathematics_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Mathematics_obj_sStaticStorageInfo = 0;
#endif

static void Mathematics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mathematics_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mathematics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mathematics_obj::__mClass,"__mClass");
};

#endif

hx::Class Mathematics_obj::__mClass;

static ::String Mathematics_obj_sStaticFields[] = {
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	HX_HCSTRING("fclamp","\xd5","\x40","\xbf","\x10"),
	::String(null())
};

void Mathematics_obj::__register()
{
	hx::Object *dummy = new Mathematics_obj;
	Mathematics_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.Mathematics","\xca","\x36","\x24","\xe1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mathematics_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Mathematics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mathematics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Mathematics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mathematics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mathematics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mathematics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
