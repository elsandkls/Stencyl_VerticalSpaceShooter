// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Config
#include <com/stencyl/Config.h>
#endif
#ifndef INCLUDED_com_stencyl_Data
#include <com/stencyl/Data.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Background
#include <com/stencyl/models/Background.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_background_ImageBackground
#include <com/stencyl/models/background/ImageBackground.h>
#endif
#ifndef INCLUDED_com_stencyl_models_background_ScrollingBackground
#include <com/stencyl/models/background/ScrollingBackground.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_ScrollingBitmap
#include <com/stencyl/models/scene/ScrollingBitmap.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_layers_BackgroundLayer
#include <com/stencyl/models/scene/layers/BackgroundLayer.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_layers_RegularLayer
#include <com/stencyl/models/scene/layers/RegularLayer.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_LazyIntMap
#include <com/stencyl/utils/LazyIntMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_36_new,"com.stencyl.models.scene.layers.BackgroundLayer","new",0x4faa2fe0,"com.stencyl.models.scene.layers.BackgroundLayer.new","com/stencyl/models/scene/layers/BackgroundLayer.hx",36,0x583cdb51)
HX_LOCAL_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_45_load,"com.stencyl.models.scene.layers.BackgroundLayer","load",0x63f4caa6,"com.stencyl.models.scene.layers.BackgroundLayer.load","com/stencyl/models/scene/layers/BackgroundLayer.hx",45,0x583cdb51)
HX_LOCAL_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_118_loadFromImg,"com.stencyl.models.scene.layers.BackgroundLayer","loadFromImg",0xcc9a7ab3,"com.stencyl.models.scene.layers.BackgroundLayer.loadFromImg","com/stencyl/models/scene/layers/BackgroundLayer.hx",118,0x583cdb51)
static const int _hx_array_data_57a4ffee_3[] = {
	(int)100,
};
HX_LOCAL_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_127_setScrollFactor,"com.stencyl.models.scene.layers.BackgroundLayer","setScrollFactor",0xa1ad5efe,"com.stencyl.models.scene.layers.BackgroundLayer.setScrollFactor","com/stencyl/models/scene/layers/BackgroundLayer.hx",127,0x583cdb51)
HX_LOCAL_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_142_setScrollSpeed,"com.stencyl.models.scene.layers.BackgroundLayer","setScrollSpeed",0x40d3ec38,"com.stencyl.models.scene.layers.BackgroundLayer.setScrollSpeed","com/stencyl/models/scene/layers/BackgroundLayer.hx",142,0x583cdb51)
HX_LOCAL_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_158_reload,"com.stencyl.models.scene.layers.BackgroundLayer","reload",0x8e29a3d9,"com.stencyl.models.scene.layers.BackgroundLayer.reload","com/stencyl/models/scene/layers/BackgroundLayer.hx",158,0x583cdb51)
HX_LOCAL_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_173_setImage,"com.stencyl.models.scene.layers.BackgroundLayer","setImage",0x397cf8d9,"com.stencyl.models.scene.layers.BackgroundLayer.setImage","com/stencyl/models/scene/layers/BackgroundLayer.hx",173,0x583cdb51)
HX_LOCAL_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_184_updateAnimation,"com.stencyl.models.scene.layers.BackgroundLayer","updateAnimation",0xe1e75f3b,"com.stencyl.models.scene.layers.BackgroundLayer.updateAnimation","com/stencyl/models/scene/layers/BackgroundLayer.hx",184,0x583cdb51)
HX_LOCAL_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_248_updatePosition,"com.stencyl.models.scene.layers.BackgroundLayer","updatePosition",0xcdf36452,"com.stencyl.models.scene.layers.BackgroundLayer.updatePosition","com/stencyl/models/scene/layers/BackgroundLayer.hx",248,0x583cdb51)
HX_LOCAL_STACK_FRAME(_hx_pos_91dfbe0fbc5116c4_269_getBitmap,"com.stencyl.models.scene.layers.BackgroundLayer","getBitmap",0x230598a5,"com.stencyl.models.scene.layers.BackgroundLayer.getBitmap","com/stencyl/models/scene/layers/BackgroundLayer.hx",269,0x583cdb51)
namespace com{
namespace stencyl{
namespace models{
namespace scene{
namespace layers{

void BackgroundLayer_obj::__construct(int ID,::String name,int order,Float scrollFactorX,Float scrollFactorY,Float opacity, ::Dynamic blendMode,int resourceID,bool customScroll){
            	HX_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_36_new)
HXLINE(  37)		super::__construct(ID,name,order,scrollFactorX,scrollFactorY,opacity,blendMode);
HXLINE(  38)		this->resourceID = resourceID;
HXLINE(  39)		this->customScroll = customScroll;
HXLINE(  41)		this->model = hx::TCast<  ::com::stencyl::models::background::ImageBackground >::cast(::com::stencyl::Data_obj::get()->resources->get(resourceID).StaticCast<  ::com::stencyl::models::Resource >());
            	}

Dynamic BackgroundLayer_obj::__CreateEmpty() { return new BackgroundLayer_obj; }

void *BackgroundLayer_obj::_hx_vtable = 0;

Dynamic BackgroundLayer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BackgroundLayer_obj > _hx_result = new BackgroundLayer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool BackgroundLayer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x564cbcca) {
			return inClassId==(int)0x3f2b00af || inClassId==(int)0x564cbcca;
		} else {
			return inClassId==(int)0x65f15fe6;
		}
	}
}

void BackgroundLayer_obj::load(){
            	HX_GC_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_45_load)
HXLINE(  46)		bool _hx_tmp;
HXDLIN(  46)		if (hx::IsNotNull( this->model )) {
HXLINE(  46)			_hx_tmp = hx::IsNull( this->model->img );
            		}
            		else {
HXLINE(  46)			_hx_tmp = true;
            		}
HXDLIN(  46)		if (_hx_tmp) {
HXLINE(  48)			::haxe::Log_obj::trace(HX_("Warning: Could not load a background. Ignoring...",b4,c5,84,7f),hx::SourceInfo(HX_("BackgroundLayer.hx",bb,0b,1b,0b),48,HX_("com.stencyl.models.scene.layers.BackgroundLayer",ee,ff,a4,57),HX_("load",26,9a,b7,47)));
HXLINE(  49)			return;
            		}
HXLINE(  52)		this->bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,this->model->img,(int)1,true);
HXLINE(  53)		this->bitmap->smoothing = ::com::stencyl::Config_obj::antialias;
HXLINE(  55)		this->currIndex = (int)0;
HXLINE(  56)		this->currTime = (int)0;
HXLINE(  58)		this->isAnimated = (this->model->frames->get_length() > (int)1);
HXLINE(  59)		this->frameCount = this->model->frames->get_length();
HXLINE(  61)		bool _hx_tmp1;
HXDLIN(  61)		if (this->model->repeats) {
HXLINE(  61)			_hx_tmp1 = !(this->model->repeated);
            		}
            		else {
HXLINE(  61)			_hx_tmp1 = false;
            		}
HXDLIN(  61)		if (_hx_tmp1) {
HXLINE(  63)			 ::com::stencyl::models::background::ImageBackground _hx_tmp2 = this->model;
HXDLIN(  63)			int _hx_tmp3 = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(  63)			_hx_tmp2->drawRepeated(hx::ObjectPtr<OBJ_>(this),_hx_tmp3,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)));
            		}
HXLINE(  66)		Float parallaxX = (int)0;
HXLINE(  67)		Float parallaxY = (int)0;
HXLINE(  68)		if (this->customScroll) {
HXLINE(  70)			parallaxX = this->scrollFactorX;
HXLINE(  71)			parallaxY = this->scrollFactorY;
            		}
            		else {
HXLINE(  73)			if (this->model->repeats) {
HXLINE(  75)				parallaxX = this->model->parallaxX;
HXLINE(  76)				parallaxY = this->model->parallaxY;
            			}
            			else {
HXLINE(  80)				int bgWidth = this->model->img->width;
HXLINE(  81)				int bgHeight = this->model->img->height;
HXLINE(  82)				int screenWidth = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  83)				int screenHeight = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  84)				int sceneWidth = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::sceneWidth * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  85)				int sceneHeight = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::sceneHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  87)				bool _hx_tmp4;
HXDLIN(  87)				if ((bgWidth > screenWidth)) {
HXLINE(  87)					_hx_tmp4 = (bgWidth < sceneWidth);
            				}
            				else {
HXLINE(  87)					_hx_tmp4 = false;
            				}
HXDLIN(  87)				if (_hx_tmp4) {
HXLINE(  88)					parallaxX = ((int)1 - ((Float)(sceneWidth - bgWidth) / (Float)(sceneWidth - screenWidth)));
            				}
HXLINE(  90)				bool _hx_tmp5;
HXDLIN(  90)				if ((bgHeight > screenHeight)) {
HXLINE(  90)					_hx_tmp5 = (bgHeight < sceneHeight);
            				}
            				else {
HXLINE(  90)					_hx_tmp5 = false;
            				}
HXDLIN(  90)				if (_hx_tmp5) {
HXLINE(  91)					parallaxY = ((int)1 - ((Float)(sceneHeight - bgHeight) / (Float)(sceneHeight - screenHeight)));
            				}
            			}
            		}
HXLINE(  94)		if (::Std_obj::is(this->model,hx::ClassOf< ::com::stencyl::models::background::ScrollingBackground >())) {
HXLINE(  96)			 ::com::stencyl::models::background::ScrollingBackground scroller = hx::TCast<  ::com::stencyl::models::background::ScrollingBackground >::cast(this->model);
HXLINE(  98)			 ::com::stencyl::models::scene::ScrollingBitmap img =  ::com::stencyl::models::scene::ScrollingBitmap_obj::__alloc( HX_CTX ,this->model->img,scroller->xVelocity,scroller->yVelocity,parallaxX,parallaxY,this->resourceID,this->model->repeats);
HXLINE(  99)			this->addChild(( ( ::openfl::display::DisplayObject)((this->bgChild = img)) ));
            		}
            		else {
HXLINE( 101)			if (this->model->repeats) {
HXLINE( 103)				 ::com::stencyl::models::scene::ScrollingBitmap img1 =  ::com::stencyl::models::scene::ScrollingBitmap_obj::__alloc( HX_CTX ,this->model->img,(int)0,(int)0,parallaxX,parallaxY,this->resourceID,null());
HXLINE( 104)				this->addChild(( ( ::openfl::display::DisplayObject)((this->bgChild = img1)) ));
            			}
            			else {
HXLINE( 108)				this->cacheWidth = this->model->img->width;
HXLINE( 109)				this->cacheHeight = this->model->img->height;
HXLINE( 110)				this->scrollFactorX = parallaxX;
HXLINE( 111)				this->scrollFactorY = parallaxY;
HXLINE( 113)				this->addChild(( ( ::openfl::display::DisplayObject)((this->bgChild = this->bitmap)) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BackgroundLayer_obj,load,(void))

void BackgroundLayer_obj::loadFromImg( ::openfl::display::BitmapData img,bool tiled){
            	HX_GC_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_118_loadFromImg)
HXLINE( 119)		this->model =  ::com::stencyl::models::background::ScrollingBackground_obj::__alloc( HX_CTX ,(int)-1,(int)-1,HX_("",00,00,00,00),::Array_obj< int >::fromData( _hx_array_data_57a4ffee_3,1),(int)0,(int)0,tiled,(int)0,(int)0);
HXLINE( 120)		this->model->img = img;
HXLINE( 121)		this->model->frames = ::cpp::VirtualArray_obj::__new(1)->init(0,img);
HXLINE( 123)		this->load();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BackgroundLayer_obj,loadFromImg,(void))

void BackgroundLayer_obj::setScrollFactor(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_127_setScrollFactor)
HXLINE( 128)		this->scrollFactorX = x;
HXLINE( 129)		this->scrollFactorY = y;
HXLINE( 131)		if (::Std_obj::is(this->bgChild,hx::ClassOf< ::com::stencyl::models::scene::ScrollingBitmap >())) {
HXLINE( 133)			 ::com::stencyl::models::scene::ScrollingBitmap bmp = hx::TCast<  ::com::stencyl::models::scene::ScrollingBitmap >::cast(this->bgChild);
HXLINE( 134)			bmp->parallaxX = x;
HXLINE( 135)			bmp->parallaxY = y;
HXLINE( 136)			bool _hx_tmp;
HXDLIN( 136)			if ((x == (int)0)) {
HXLINE( 136)				_hx_tmp = (y != (int)0);
            			}
            			else {
HXLINE( 136)				_hx_tmp = true;
            			}
HXDLIN( 136)			bmp->parallax = _hx_tmp;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BackgroundLayer_obj,setScrollFactor,(void))

void BackgroundLayer_obj::setScrollSpeed(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_142_setScrollSpeed)
HXDLIN( 142)		if (::Std_obj::is(this->bgChild,hx::ClassOf< ::com::stencyl::models::scene::ScrollingBitmap >())) {
HXLINE( 144)			 ::com::stencyl::models::scene::ScrollingBitmap bg = hx::TCast<  ::com::stencyl::models::scene::ScrollingBitmap >::cast(this->bgChild);
HXLINE( 146)			bg->xVelocity = x;
HXLINE( 147)			bg->yVelocity = y;
HXLINE( 148)			bool _hx_tmp;
HXDLIN( 148)			if ((x == (int)0)) {
HXLINE( 148)				_hx_tmp = (y != (int)0);
            			}
            			else {
HXLINE( 148)				_hx_tmp = true;
            			}
HXDLIN( 148)			bg->scrolling = _hx_tmp;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BackgroundLayer_obj,setScrollSpeed,(void))

void BackgroundLayer_obj::reload(int bgID){
            	HX_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_158_reload)
HXLINE( 159)		if (hx::IsNotNull( this->bgChild )) {
HXLINE( 161)			this->removeChild(( ( ::openfl::display::DisplayObject)(this->bgChild) ));
HXLINE( 162)			this->bgChild = null();
            		}
HXLINE( 165)		this->resourceID = bgID;
HXLINE( 167)		this->model = hx::TCast<  ::com::stencyl::models::background::ImageBackground >::cast(::com::stencyl::Data_obj::get()->resources->get(this->resourceID).StaticCast<  ::com::stencyl::models::Resource >());
HXLINE( 169)		this->load();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundLayer_obj,reload,(void))

void BackgroundLayer_obj::setImage( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_173_setImage)
HXLINE( 174)		this->bitmap->set_bitmapData(bitmapData);
HXLINE( 176)		this->currIndex = (int)0;
HXLINE( 177)		this->currTime = (int)0;
HXLINE( 179)		this->isAnimated = (this->model->frames->get_length() > (int)1);
HXLINE( 180)		this->frameCount = this->model->frames->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundLayer_obj,setImage,(void))

void BackgroundLayer_obj::updateAnimation(Float elapsedTime){
            	HX_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_184_updateAnimation)
HXLINE( 185)		 ::com::stencyl::models::scene::layers::BackgroundLayer _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 185)		_hx_tmp->currTime = (_hx_tmp->currTime + elapsedTime);
HXLINE( 187)		bool _hx_tmp1;
HXDLIN( 187)		if (hx::IsNotNull( this->model )) {
HXLINE( 187)			Float _hx_tmp2 = this->currTime;
HXDLIN( 187)			_hx_tmp1 = (_hx_tmp2 >= this->model->durations->__get(this->currIndex));
            		}
            		else {
HXLINE( 187)			_hx_tmp1 = false;
            		}
HXDLIN( 187)		if (_hx_tmp1) {
HXLINE( 189)			this->currTime = (int)0;
HXLINE( 190)			this->currIndex++;
HXLINE( 192)			if ((this->currIndex >= this->frameCount)) {
HXLINE( 194)				this->currIndex = (int)0;
            			}
HXLINE( 197)			if (::Std_obj::is(this->bgChild,hx::ClassOf< ::com::stencyl::models::scene::ScrollingBitmap >())) {
HXLINE( 199)				this->cacheIndex = this->currIndex;
HXLINE( 201)				if (this->model->repeats) {
HXLINE( 203)					 ::com::stencyl::models::background::ImageBackground _hx_tmp3 = this->model;
HXDLIN( 203)					int _hx_tmp4 = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN( 203)					_hx_tmp3->drawRepeated(hx::ObjectPtr<OBJ_>(this),_hx_tmp4,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)));
            				}
HXLINE( 206)				this->currIndex = this->cacheIndex;
HXLINE( 208)				 ::openfl::display::Bitmap b = ( ( ::openfl::display::Bitmap)(this->bgChild->__Field(HX_("image1",76,50,92,fe),hx::paccDynamic)) );
HXLINE( 210)				b->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
HXLINE( 212)				if (this->model->repeats) {
HXLINE( 214)					b = ( ( ::openfl::display::Bitmap)(this->bgChild->__Field(HX_("image2",77,50,92,fe),hx::paccDynamic)) );
HXLINE( 215)					b->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
HXLINE( 217)					b = ( ( ::openfl::display::Bitmap)(this->bgChild->__Field(HX_("image3",78,50,92,fe),hx::paccDynamic)) );
HXLINE( 218)					b->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
HXLINE( 220)					b = ( ( ::openfl::display::Bitmap)(this->bgChild->__Field(HX_("image4",79,50,92,fe),hx::paccDynamic)) );
HXLINE( 221)					b->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
HXLINE( 223)					b = ( ( ::openfl::display::Bitmap)(this->bgChild->__Field(HX_("image5",7a,50,92,fe),hx::paccDynamic)) );
HXLINE( 224)					b->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
HXLINE( 226)					b = ( ( ::openfl::display::Bitmap)(this->bgChild->__Field(HX_("image6",7b,50,92,fe),hx::paccDynamic)) );
HXLINE( 227)					b->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
HXLINE( 229)					b = ( ( ::openfl::display::Bitmap)(this->bgChild->__Field(HX_("image7",7c,50,92,fe),hx::paccDynamic)) );
HXLINE( 230)					b->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
HXLINE( 232)					b = ( ( ::openfl::display::Bitmap)(this->bgChild->__Field(HX_("image8",7d,50,92,fe),hx::paccDynamic)) );
HXLINE( 233)					b->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
HXLINE( 235)					b = ( ( ::openfl::display::Bitmap)(this->bgChild->__Field(HX_("image9",7e,50,92,fe),hx::paccDynamic)) );
HXLINE( 236)					b->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
            				}
            			}
            			else {
HXLINE( 242)				 ::openfl::display::Bitmap _hx_tmp5 = this->bitmap;
HXDLIN( 242)				_hx_tmp5->set_bitmapData(( ( ::openfl::display::BitmapData)(this->model->frames->__get(this->currIndex)) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundLayer_obj,updateAnimation,(void))

void BackgroundLayer_obj::updatePosition(Float x,Float y,Float elapsedTime){
            	HX_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_248_updatePosition)
HXLINE( 249)		if (::Std_obj::is(this->bgChild,hx::ClassOf< ::com::stencyl::models::scene::ScrollingBitmap >())) {
HXLINE( 251)			 ::com::stencyl::models::scene::ScrollingBitmap bg = hx::TCast<  ::com::stencyl::models::scene::ScrollingBitmap >::cast(this->bgChild);
HXLINE( 252)			bg->update(x,y,elapsedTime);
            		}
            		else {
HXLINE( 257)			this->set_x(-(::Std_obj::_hx_int((x * this->scrollFactorX))));
HXLINE( 258)			this->set_y(-(::Std_obj::_hx_int((y * this->scrollFactorY))));
            		}
HXLINE( 261)		if (this->isAnimated) {
HXLINE( 263)			this->updateAnimation(elapsedTime);
            		}
            	}


 ::Dynamic BackgroundLayer_obj::getBitmap(){
            	HX_STACKFRAME(&_hx_pos_91dfbe0fbc5116c4_269_getBitmap)
HXDLIN( 269)		return this->bgChild;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BackgroundLayer_obj,getBitmap,return )


hx::ObjectPtr< BackgroundLayer_obj > BackgroundLayer_obj::__new(int ID,::String name,int order,Float scrollFactorX,Float scrollFactorY,Float opacity, ::Dynamic blendMode,int resourceID,bool customScroll) {
	hx::ObjectPtr< BackgroundLayer_obj > __this = new BackgroundLayer_obj();
	__this->__construct(ID,name,order,scrollFactorX,scrollFactorY,opacity,blendMode,resourceID,customScroll);
	return __this;
}

hx::ObjectPtr< BackgroundLayer_obj > BackgroundLayer_obj::__alloc(hx::Ctx *_hx_ctx,int ID,::String name,int order,Float scrollFactorX,Float scrollFactorY,Float opacity, ::Dynamic blendMode,int resourceID,bool customScroll) {
	BackgroundLayer_obj *__this = (BackgroundLayer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BackgroundLayer_obj), true, "com.stencyl.models.scene.layers.BackgroundLayer"));
	*(void **)__this = BackgroundLayer_obj::_hx_vtable;
	__this->__construct(ID,name,order,scrollFactorX,scrollFactorY,opacity,blendMode,resourceID,customScroll);
	return __this;
}

BackgroundLayer_obj::BackgroundLayer_obj()
{
}

void BackgroundLayer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BackgroundLayer);
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(resourceID,"resourceID");
	HX_MARK_MEMBER_NAME(customScroll,"customScroll");
	HX_MARK_MEMBER_NAME(isAnimated,"isAnimated");
	HX_MARK_MEMBER_NAME(frameCount,"frameCount");
	HX_MARK_MEMBER_NAME(currIndex,"currIndex");
	HX_MARK_MEMBER_NAME(currTime,"currTime");
	HX_MARK_MEMBER_NAME(cacheIndex,"cacheIndex");
	HX_MARK_MEMBER_NAME(cacheWidth,"cacheWidth");
	HX_MARK_MEMBER_NAME(cacheHeight,"cacheHeight");
	HX_MARK_MEMBER_NAME(bgChild,"bgChild");
	 ::com::stencyl::models::scene::layers::RegularLayer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BackgroundLayer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(resourceID,"resourceID");
	HX_VISIT_MEMBER_NAME(customScroll,"customScroll");
	HX_VISIT_MEMBER_NAME(isAnimated,"isAnimated");
	HX_VISIT_MEMBER_NAME(frameCount,"frameCount");
	HX_VISIT_MEMBER_NAME(currIndex,"currIndex");
	HX_VISIT_MEMBER_NAME(currTime,"currTime");
	HX_VISIT_MEMBER_NAME(cacheIndex,"cacheIndex");
	HX_VISIT_MEMBER_NAME(cacheWidth,"cacheWidth");
	HX_VISIT_MEMBER_NAME(cacheHeight,"cacheHeight");
	HX_VISIT_MEMBER_NAME(bgChild,"bgChild");
	 ::com::stencyl::models::scene::layers::RegularLayer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BackgroundLayer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return hx::Val( model ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return hx::Val( bitmap ); }
		if (HX_FIELD_EQ(inName,"reload") ) { return hx::Val( reload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgChild") ) { return hx::Val( bgChild ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currTime") ) { return hx::Val( currTime ); }
		if (HX_FIELD_EQ(inName,"setImage") ) { return hx::Val( setImage_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"currIndex") ) { return hx::Val( currIndex ); }
		if (HX_FIELD_EQ(inName,"getBitmap") ) { return hx::Val( getBitmap_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"resourceID") ) { return hx::Val( resourceID ); }
		if (HX_FIELD_EQ(inName,"isAnimated") ) { return hx::Val( isAnimated ); }
		if (HX_FIELD_EQ(inName,"frameCount") ) { return hx::Val( frameCount ); }
		if (HX_FIELD_EQ(inName,"cacheIndex") ) { return hx::Val( cacheIndex ); }
		if (HX_FIELD_EQ(inName,"cacheWidth") ) { return hx::Val( cacheWidth ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cacheHeight") ) { return hx::Val( cacheHeight ); }
		if (HX_FIELD_EQ(inName,"loadFromImg") ) { return hx::Val( loadFromImg_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"customScroll") ) { return hx::Val( customScroll ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setScrollSpeed") ) { return hx::Val( setScrollSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePosition") ) { return hx::Val( updatePosition_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setScrollFactor") ) { return hx::Val( setScrollFactor_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateAnimation") ) { return hx::Val( updateAnimation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BackgroundLayer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast<  ::com::stencyl::models::background::ImageBackground >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgChild") ) { bgChild=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currTime") ) { currTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"currIndex") ) { currIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"resourceID") ) { resourceID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isAnimated") ) { isAnimated=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameCount") ) { frameCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheIndex") ) { cacheIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheWidth") ) { cacheWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cacheHeight") ) { cacheHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"customScroll") ) { customScroll=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BackgroundLayer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"));
	outFields->push(HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"));
	outFields->push(HX_HCSTRING("resourceID","\x29","\xec","\x0b","\x41"));
	outFields->push(HX_HCSTRING("customScroll","\x9e","\x2e","\x02","\x47"));
	outFields->push(HX_HCSTRING("isAnimated","\xad","\x84","\xa1","\x03"));
	outFields->push(HX_HCSTRING("frameCount","\x62","\x79","\x89","\x2d"));
	outFields->push(HX_HCSTRING("currIndex","\xc0","\xd2","\xe9","\x21"));
	outFields->push(HX_HCSTRING("currTime","\x1f","\xa4","\x04","\x90"));
	outFields->push(HX_HCSTRING("cacheIndex","\x70","\x01","\xcd","\x00"));
	outFields->push(HX_HCSTRING("cacheWidth","\x64","\x1c","\x1b","\x0d"));
	outFields->push(HX_HCSTRING("cacheHeight","\xc9","\x33","\xed","\x20"));
	outFields->push(HX_HCSTRING("bgChild","\x97","\xb9","\xe0","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BackgroundLayer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::models::background::ImageBackground*/ ,(int)offsetof(BackgroundLayer_obj,model),HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(BackgroundLayer_obj,bitmap),HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsInt,(int)offsetof(BackgroundLayer_obj,resourceID),HX_HCSTRING("resourceID","\x29","\xec","\x0b","\x41")},
	{hx::fsBool,(int)offsetof(BackgroundLayer_obj,customScroll),HX_HCSTRING("customScroll","\x9e","\x2e","\x02","\x47")},
	{hx::fsBool,(int)offsetof(BackgroundLayer_obj,isAnimated),HX_HCSTRING("isAnimated","\xad","\x84","\xa1","\x03")},
	{hx::fsInt,(int)offsetof(BackgroundLayer_obj,frameCount),HX_HCSTRING("frameCount","\x62","\x79","\x89","\x2d")},
	{hx::fsInt,(int)offsetof(BackgroundLayer_obj,currIndex),HX_HCSTRING("currIndex","\xc0","\xd2","\xe9","\x21")},
	{hx::fsFloat,(int)offsetof(BackgroundLayer_obj,currTime),HX_HCSTRING("currTime","\x1f","\xa4","\x04","\x90")},
	{hx::fsInt,(int)offsetof(BackgroundLayer_obj,cacheIndex),HX_HCSTRING("cacheIndex","\x70","\x01","\xcd","\x00")},
	{hx::fsFloat,(int)offsetof(BackgroundLayer_obj,cacheWidth),HX_HCSTRING("cacheWidth","\x64","\x1c","\x1b","\x0d")},
	{hx::fsFloat,(int)offsetof(BackgroundLayer_obj,cacheHeight),HX_HCSTRING("cacheHeight","\xc9","\x33","\xed","\x20")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BackgroundLayer_obj,bgChild),HX_HCSTRING("bgChild","\x97","\xb9","\xe0","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BackgroundLayer_obj_sStaticStorageInfo = 0;
#endif

static ::String BackgroundLayer_obj_sMemberFields[] = {
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("resourceID","\x29","\xec","\x0b","\x41"),
	HX_HCSTRING("customScroll","\x9e","\x2e","\x02","\x47"),
	HX_HCSTRING("isAnimated","\xad","\x84","\xa1","\x03"),
	HX_HCSTRING("frameCount","\x62","\x79","\x89","\x2d"),
	HX_HCSTRING("currIndex","\xc0","\xd2","\xe9","\x21"),
	HX_HCSTRING("currTime","\x1f","\xa4","\x04","\x90"),
	HX_HCSTRING("cacheIndex","\x70","\x01","\xcd","\x00"),
	HX_HCSTRING("cacheWidth","\x64","\x1c","\x1b","\x0d"),
	HX_HCSTRING("cacheHeight","\xc9","\x33","\xed","\x20"),
	HX_HCSTRING("bgChild","\x97","\xb9","\xe0","\xf2"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("loadFromImg","\x33","\x9b","\x98","\x28"),
	HX_HCSTRING("setScrollFactor","\x7e","\xbf","\x85","\x5a"),
	HX_HCSTRING("setScrollSpeed","\xb8","\x1b","\x05","\x73"),
	HX_HCSTRING("reload","\x59","\x53","\xdf","\x03"),
	HX_HCSTRING("setImage","\x59","\x88","\x9d","\xcb"),
	HX_HCSTRING("updateAnimation","\xbb","\xbf","\xbf","\x9a"),
	HX_HCSTRING("updatePosition","\xd2","\x93","\x24","\x00"),
	HX_HCSTRING("getBitmap","\x25","\x99","\x62","\x6d"),
	::String(null()) };

static void BackgroundLayer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BackgroundLayer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BackgroundLayer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BackgroundLayer_obj::__mClass,"__mClass");
};

#endif

hx::Class BackgroundLayer_obj::__mClass;

void BackgroundLayer_obj::__register()
{
	hx::Object *dummy = new BackgroundLayer_obj;
	BackgroundLayer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.scene.layers.BackgroundLayer","\xee","\xff","\xa4","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BackgroundLayer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BackgroundLayer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BackgroundLayer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BackgroundLayer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BackgroundLayer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BackgroundLayer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace scene
} // end namespace layers
