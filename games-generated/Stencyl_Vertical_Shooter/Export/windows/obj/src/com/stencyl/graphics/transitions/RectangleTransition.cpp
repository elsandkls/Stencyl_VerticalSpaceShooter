// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_RectangleTransition
#include <com/stencyl/graphics/transitions/RectangleTransition.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat2
#include <com/stencyl/utils/motion/TweenFloat2.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3d3bc7e2db5385b4_29_new,"com.stencyl.graphics.transitions.RectangleTransition","new",0xbb11ec32,"com.stencyl.graphics.transitions.RectangleTransition.new","com/stencyl/graphics/transitions/RectangleTransition.hx",29,0x7d1c18be)
HX_LOCAL_STACK_FRAME(_hx_pos_3d3bc7e2db5385b4_57_start,"com.stencyl.graphics.transitions.RectangleTransition","start",0xff65a8b4,"com.stencyl.graphics.transitions.RectangleTransition.start","com/stencyl/graphics/transitions/RectangleTransition.hx",57,0x7d1c18be)
HX_LOCAL_STACK_FRAME(_hx_pos_3d3bc7e2db5385b4_80_draw,"com.stencyl.graphics.transitions.RectangleTransition","draw",0xee0a67f2,"com.stencyl.graphics.transitions.RectangleTransition.draw","com/stencyl/graphics/transitions/RectangleTransition.hx",80,0x7d1c18be)
HX_LOCAL_STACK_FRAME(_hx_pos_3d3bc7e2db5385b4_96_cleanup,"com.stencyl.graphics.transitions.RectangleTransition","cleanup",0x58cf78f6,"com.stencyl.graphics.transitions.RectangleTransition.cleanup","com/stencyl/graphics/transitions/RectangleTransition.hx",96,0x7d1c18be)
namespace com{
namespace stencyl{
namespace graphics{
namespace transitions{

void RectangleTransition_obj::__construct(::String direction,Float duration,int color){
            	HX_STACKFRAME(&_hx_pos_3d3bc7e2db5385b4_29_new)
HXLINE(  30)		super::__construct(duration);
HXLINE(  32)		this->color = color;
HXLINE(  33)		this->direction = direction;
HXLINE(  35)		if ((direction == ::com::stencyl::graphics::transitions::Transition_obj::IN)) {
HXLINE(  37)			this->beginWidth = (int)0;
HXLINE(  38)			this->beginHeight = (int)0;
HXLINE(  39)			this->endWidth = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  40)			this->endHeight = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
            		}
            		else {
HXLINE(  42)			if ((direction == ::com::stencyl::graphics::transitions::Transition_obj::OUT)) {
HXLINE(  44)				this->beginWidth = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  45)				this->beginHeight = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  46)				this->endWidth = (int)0;
HXLINE(  47)				this->endHeight = (int)0;
            			}
            			else {
HXLINE(  51)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  51)				_hx_tmp((HX_("Invalid transition direction: ",c3,3f,d3,f5) + direction),hx::SourceInfo(HX_("RectangleTransition.hx",ba,9e,6e,42),51,HX_("com.stencyl.graphics.transitions.RectangleTransition",40,ab,ff,d1),HX_("new",60,d0,53,00)));
HXLINE(  52)				this->complete = true;
            			}
            		}
            	}

Dynamic RectangleTransition_obj::__CreateEmpty() { return new RectangleTransition_obj; }

void *RectangleTransition_obj::_hx_vtable = 0;

Dynamic RectangleTransition_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RectangleTransition_obj > _hx_result = new RectangleTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool RectangleTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x10817dc5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x10817dc5;
	} else {
		return inClassId==(int)0x6c8ff61c;
	}
}

void RectangleTransition_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_3d3bc7e2db5385b4_57_start)
HXLINE(  58)		this->active = true;
HXLINE(  59)		this->size =  ::com::stencyl::utils::motion::TweenFloat2_obj::__alloc( HX_CTX );
HXLINE(  61)		int _hx_tmp = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(  61)		this->rectangleImg =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)),null(),null());
HXLINE(  63)		this->rect =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  64)		this->graphics = this->rect->get_graphics();
HXLINE(  66)		if ((this->direction == ::com::stencyl::graphics::transitions::Transition_obj::IN)) {
HXLINE(  68)			this->graphics->beginFill(this->color,null());
HXLINE(  69)			 ::openfl::display::Graphics _hx_tmp1 = this->graphics;
HXDLIN(  69)			Float _hx_tmp2 = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  69)			_hx_tmp1->drawRect((int)0,(int)0,_hx_tmp2,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  70)			this->graphics->endFill();
            		}
HXLINE(  73)		::com::stencyl::Engine_obj::engine->transitionLayer->addChild(this->rect);
HXLINE(  75)		this->size->onComplete = this->stop_dyn();
HXLINE(  76)		 ::com::stencyl::utils::motion::TweenFloat2 _hx_tmp3 = this->size;
HXDLIN(  76)		int _hx_tmp4 = this->beginWidth;
HXDLIN(  76)		int _hx_tmp5 = this->endWidth;
HXDLIN(  76)		int _hx_tmp6 = this->beginHeight;
HXDLIN(  76)		int _hx_tmp7 = this->endHeight;
HXDLIN(  76)		 ::com::stencyl::utils::motion::Linear _hx_tmp8 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN(  76)		_hx_tmp3->tween(_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,::Std_obj::_hx_int((this->duration * (int)1000)));
            	}


void RectangleTransition_obj::draw( ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_3d3bc7e2db5385b4_80_draw)
HXLINE(  81)		this->graphics->clear();
HXLINE(  83)		this->graphics->beginFill(this->color,null());
HXLINE(  84)		 ::openfl::display::Graphics _hx_tmp = this->graphics;
HXDLIN(  84)		Float _hx_tmp1 = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  84)		_hx_tmp->drawRect((int)0,(int)0,_hx_tmp1,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  85)		this->graphics->endFill();
HXLINE(  87)		this->rectangleImg->draw(::com::stencyl::Engine_obj::engine->colorLayer,null(),null(),null(),null(),null());
HXLINE(  88)		this->rectangleImg->draw(::com::stencyl::Engine_obj::engine->master,null(),null(),null(),null(),null());
HXLINE(  89)		this->graphics->beginBitmapFill(this->rectangleImg,null(),null(),null());
HXLINE(  90)		 ::openfl::display::Graphics _hx_tmp2 = this->graphics;
HXDLIN(  90)		Float _hx_tmp3 = ((Float)((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE) - this->size->value1) / (Float)(int)2);
HXDLIN(  90)		_hx_tmp2->drawRect(_hx_tmp3,((Float)((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE) - this->size->value2) / (Float)(int)2),this->size->value1,this->size->value2);
HXLINE(  91)		this->graphics->endFill();
            	}


void RectangleTransition_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_3d3bc7e2db5385b4_96_cleanup)
HXDLIN(  96)		if (hx::IsNotNull( this->rect )) {
HXLINE(  98)			::com::stencyl::Engine_obj::engine->transitionLayer->removeChild(this->rect);
HXLINE(  99)			this->rect = null();
            		}
            	}



hx::ObjectPtr< RectangleTransition_obj > RectangleTransition_obj::__new(::String direction,Float duration,int color) {
	hx::ObjectPtr< RectangleTransition_obj > __this = new RectangleTransition_obj();
	__this->__construct(direction,duration,color);
	return __this;
}

hx::ObjectPtr< RectangleTransition_obj > RectangleTransition_obj::__alloc(hx::Ctx *_hx_ctx,::String direction,Float duration,int color) {
	RectangleTransition_obj *__this = (RectangleTransition_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RectangleTransition_obj), true, "com.stencyl.graphics.transitions.RectangleTransition"));
	*(void **)__this = RectangleTransition_obj::_hx_vtable;
	__this->__construct(direction,duration,color);
	return __this;
}

RectangleTransition_obj::RectangleTransition_obj()
{
}

void RectangleTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RectangleTransition);
	HX_MARK_MEMBER_NAME(rectangleImg,"rectangleImg");
	HX_MARK_MEMBER_NAME(graphics,"graphics");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(beginWidth,"beginWidth");
	HX_MARK_MEMBER_NAME(endWidth,"endWidth");
	HX_MARK_MEMBER_NAME(beginHeight,"beginHeight");
	HX_MARK_MEMBER_NAME(endHeight,"endHeight");
	HX_MARK_MEMBER_NAME(rect,"rect");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RectangleTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rectangleImg,"rectangleImg");
	HX_VISIT_MEMBER_NAME(graphics,"graphics");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(beginWidth,"beginWidth");
	HX_VISIT_MEMBER_NAME(endWidth,"endWidth");
	HX_VISIT_MEMBER_NAME(beginHeight,"beginHeight");
	HX_VISIT_MEMBER_NAME(endHeight,"endHeight");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Visit(HX_VISIT_ARG);
}

hx::Val RectangleTransition_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { return hx::Val( graphics ); }
		if (HX_FIELD_EQ(inName,"endWidth") ) { return hx::Val( endWidth ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"endHeight") ) { return hx::Val( endHeight ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"beginWidth") ) { return hx::Val( beginWidth ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beginHeight") ) { return hx::Val( beginHeight ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectangleImg") ) { return hx::Val( rectangleImg ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RectangleTransition_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endWidth") ) { endWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"endHeight") ) { endHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"beginWidth") ) { beginWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beginHeight") ) { beginHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectangleImg") ) { rectangleImg=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RectangleTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("rectangleImg","\x14","\x77","\x88","\x3c"));
	outFields->push(HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("beginWidth","\x1d","\xc7","\x2b","\x40"));
	outFields->push(HX_HCSTRING("endWidth","\x2b","\x48","\x60","\xc8"));
	outFields->push(HX_HCSTRING("beginHeight","\xf0","\xea","\x71","\x9c"));
	outFields->push(HX_HCSTRING("endHeight","\x22","\x56","\x2e","\x42"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RectangleTransition_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(RectangleTransition_obj,rectangleImg),HX_HCSTRING("rectangleImg","\x14","\x77","\x88","\x3c")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(RectangleTransition_obj,graphics),HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12")},
	{hx::fsInt,(int)offsetof(RectangleTransition_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat2*/ ,(int)offsetof(RectangleTransition_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsInt,(int)offsetof(RectangleTransition_obj,beginWidth),HX_HCSTRING("beginWidth","\x1d","\xc7","\x2b","\x40")},
	{hx::fsInt,(int)offsetof(RectangleTransition_obj,endWidth),HX_HCSTRING("endWidth","\x2b","\x48","\x60","\xc8")},
	{hx::fsInt,(int)offsetof(RectangleTransition_obj,beginHeight),HX_HCSTRING("beginHeight","\xf0","\xea","\x71","\x9c")},
	{hx::fsInt,(int)offsetof(RectangleTransition_obj,endHeight),HX_HCSTRING("endHeight","\x22","\x56","\x2e","\x42")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(RectangleTransition_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RectangleTransition_obj_sStaticStorageInfo = 0;
#endif

static ::String RectangleTransition_obj_sMemberFields[] = {
	HX_HCSTRING("rectangleImg","\x14","\x77","\x88","\x3c"),
	HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("beginWidth","\x1d","\xc7","\x2b","\x40"),
	HX_HCSTRING("endWidth","\x2b","\x48","\x60","\xc8"),
	HX_HCSTRING("beginHeight","\xf0","\xea","\x71","\x9c"),
	HX_HCSTRING("endHeight","\x22","\x56","\x2e","\x42"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	::String(null()) };

static void RectangleTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RectangleTransition_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RectangleTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RectangleTransition_obj::__mClass,"__mClass");
};

#endif

hx::Class RectangleTransition_obj::__mClass;

void RectangleTransition_obj::__register()
{
	hx::Object *dummy = new RectangleTransition_obj;
	RectangleTransition_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.transitions.RectangleTransition","\x40","\xab","\xff","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RectangleTransition_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RectangleTransition_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RectangleTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RectangleTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RectangleTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RectangleTransition_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace transitions
