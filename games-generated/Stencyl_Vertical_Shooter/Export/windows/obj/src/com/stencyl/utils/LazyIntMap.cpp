// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_utils_LazyIntMap
#include <com/stencyl/utils/LazyIntMap.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ea18e266e18e615e_40_new,"com.stencyl.utils.LazyIntMap","new",0xcad36dbf,"com.stencyl.utils.LazyIntMap.new","com/stencyl/utils/LazyIntMap.hx",40,0x70f0a22e)
HX_LOCAL_STACK_FRAME(_hx_pos_ea18e266e18e615e_46_get,"com.stencyl.utils.LazyIntMap","get",0xcace1df5,"com.stencyl.utils.LazyIntMap.get","com/stencyl/utils/LazyIntMap.hx",46,0x70f0a22e)
HX_LOCAL_STACK_FRAME(_hx_pos_ea18e266e18e615e_58_set,"com.stencyl.utils.LazyIntMap","set",0xcad73901,"com.stencyl.utils.LazyIntMap.set","com/stencyl/utils/LazyIntMap.hx",58,0x70f0a22e)
HX_LOCAL_STACK_FRAME(_hx_pos_ea18e266e18e615e_59_exists,"com.stencyl.utils.LazyIntMap","exists",0x540be5dd,"com.stencyl.utils.LazyIntMap.exists","com/stencyl/utils/LazyIntMap.hx",59,0x70f0a22e)
HX_LOCAL_STACK_FRAME(_hx_pos_ea18e266e18e615e_60_remove,"com.stencyl.utils.LazyIntMap","remove",0x98b46445,"com.stencyl.utils.LazyIntMap.remove","com/stencyl/utils/LazyIntMap.hx",60,0x70f0a22e)
HX_LOCAL_STACK_FRAME(_hx_pos_ea18e266e18e615e_61_keys,"com.stencyl.utils.LazyIntMap","keys",0xac30f7b5,"com.stencyl.utils.LazyIntMap.keys","com/stencyl/utils/LazyIntMap.hx",61,0x70f0a22e)
HX_LOCAL_STACK_FRAME(_hx_pos_ea18e266e18e615e_62_iterator,"com.stencyl.utils.LazyIntMap","iterator",0x6048d42f,"com.stencyl.utils.LazyIntMap.iterator","com/stencyl/utils/LazyIntMap.hx",62,0x70f0a22e)
namespace com{
namespace stencyl{
namespace utils{

void LazyIntMap_obj::__construct( ::haxe::ds::IntMap map, ::Dynamic initializer){
            	HX_STACKFRAME(&_hx_pos_ea18e266e18e615e_40_new)
HXLINE(  41)		this->map = map;
HXLINE(  42)		this->initializer = initializer;
            	}

Dynamic LazyIntMap_obj::__CreateEmpty() { return new LazyIntMap_obj; }

void *LazyIntMap_obj::_hx_vtable = 0;

Dynamic LazyIntMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LazyIntMap_obj > _hx_result = new LazyIntMap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LazyIntMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ef8a6b7;
}

 ::Dynamic LazyIntMap_obj::get(int key){
            	HX_STACKFRAME(&_hx_pos_ea18e266e18e615e_46_get)
HXLINE(  47)		 ::Dynamic obj = this->map->get(key);
HXLINE(  49)		if (hx::IsNull( obj )) {
HXLINE(  51)			obj = this->initializer(key);
HXLINE(  52)			this->map->set(key,obj);
            		}
HXLINE(  55)		return obj;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazyIntMap_obj,get,return )

void LazyIntMap_obj::set(int key, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ea18e266e18e615e_58_set)
HXDLIN(  58)		this->map->set(key,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(LazyIntMap_obj,set,(void))

bool LazyIntMap_obj::exists(int key){
            	HX_STACKFRAME(&_hx_pos_ea18e266e18e615e_59_exists)
HXDLIN(  59)		return this->map->exists(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazyIntMap_obj,exists,return )

bool LazyIntMap_obj::remove(int key){
            	HX_STACKFRAME(&_hx_pos_ea18e266e18e615e_60_remove)
HXDLIN(  60)		return this->map->remove(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazyIntMap_obj,remove,return )

 ::Dynamic LazyIntMap_obj::keys(){
            	HX_STACKFRAME(&_hx_pos_ea18e266e18e615e_61_keys)
HXDLIN(  61)		return this->map->keys();
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyIntMap_obj,keys,return )

 ::Dynamic LazyIntMap_obj::iterator(){
            	HX_STACKFRAME(&_hx_pos_ea18e266e18e615e_62_iterator)
HXDLIN(  62)		return this->map->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyIntMap_obj,iterator,return )


hx::ObjectPtr< LazyIntMap_obj > LazyIntMap_obj::__new( ::haxe::ds::IntMap map, ::Dynamic initializer) {
	hx::ObjectPtr< LazyIntMap_obj > __this = new LazyIntMap_obj();
	__this->__construct(map,initializer);
	return __this;
}

hx::ObjectPtr< LazyIntMap_obj > LazyIntMap_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::ds::IntMap map, ::Dynamic initializer) {
	LazyIntMap_obj *__this = (LazyIntMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LazyIntMap_obj), true, "com.stencyl.utils.LazyIntMap"));
	*(void **)__this = LazyIntMap_obj::_hx_vtable;
	__this->__construct(map,initializer);
	return __this;
}

LazyIntMap_obj::LazyIntMap_obj()
{
}

void LazyIntMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LazyIntMap);
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(initializer,"initializer");
	HX_MARK_END_CLASS();
}

void LazyIntMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(initializer,"initializer");
}

hx::Val LazyIntMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initializer") ) { return hx::Val( initializer ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LazyIntMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initializer") ) { initializer=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LazyIntMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LazyIntMap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(LazyIntMap_obj,map),HX_HCSTRING("map","\x9c","\x0a","\x53","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(LazyIntMap_obj,initializer),HX_HCSTRING("initializer","\x22","\xf5","\x0f","\x37")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LazyIntMap_obj_sStaticStorageInfo = 0;
#endif

static ::String LazyIntMap_obj_sMemberFields[] = {
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("initializer","\x22","\xf5","\x0f","\x37"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	::String(null()) };

static void LazyIntMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LazyIntMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LazyIntMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LazyIntMap_obj::__mClass,"__mClass");
};

#endif

hx::Class LazyIntMap_obj::__mClass;

void LazyIntMap_obj::__register()
{
	hx::Object *dummy = new LazyIntMap_obj;
	LazyIntMap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.LazyIntMap","\x4d","\x22","\x84","\x24");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LazyIntMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LazyIntMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LazyIntMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LazyIntMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LazyIntMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LazyIntMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
