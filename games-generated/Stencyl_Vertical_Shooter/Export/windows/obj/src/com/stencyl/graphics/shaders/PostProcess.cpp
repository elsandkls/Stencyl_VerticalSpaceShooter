// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Universal
#include <Universal.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_Shader
#include <com/stencyl/graphics/shaders/Shader.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Assets
#include <com/stencyl/utils/Assets.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat
#include <com/stencyl/utils/motion/TweenFloat.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasNodeAccess
#include <haxe/xml/_Fast/HasNodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_SamplerState
#include <openfl/_internal/renderer/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DState
#include <openfl/_internal/renderer/context3D/Context3DState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5aa54408f48af0c3_74_new,"com.stencyl.graphics.shaders.PostProcess","new",0x679d136d,"com.stencyl.graphics.shaders.PostProcess.new","com/stencyl/graphics/shaders/PostProcess.hx",74,0xed4b4663)
static const Float _hx_array_data_e181d8fb_1[] = {
	-1.0,-1.0,(Float)0,(Float)0,1.0,-1.0,(Float)1,(Float)0,-1.0,1.0,(Float)0,(Float)1,1.0,-1.0,(Float)1,(Float)0,1.0,1.0,(Float)1,(Float)1,-1.0,1.0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_210___enterFrame,"com.stencyl.graphics.shaders.PostProcess","__enterFrame",0x63a1f268,"com.stencyl.graphics.shaders.PostProcess.__enterFrame","com/stencyl/graphics/shaders/PostProcess.hx",210,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_217___renderGL,"com.stencyl.graphics.shaders.PostProcess","__renderGL",0x755906ae,"com.stencyl.graphics.shaders.PostProcess.__renderGL","com/stencyl/graphics/shaders/PostProcess.hx",217,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_297___renderGLMask,"com.stencyl.graphics.shaders.PostProcess","__renderGLMask",0x603c62ba,"com.stencyl.graphics.shaders.PostProcess.__renderGLMask","com/stencyl/graphics/shaders/PostProcess.hx",297,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_307_setUniform,"com.stencyl.graphics.shaders.PostProcess","setUniform",0x27884e45,"com.stencyl.graphics.shaders.PostProcess.setUniform","com/stencyl/graphics/shaders/PostProcess.hx",307,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_330_getUniform,"com.stencyl.graphics.shaders.PostProcess","getUniform",0x240aafd1,"com.stencyl.graphics.shaders.PostProcess.getUniform","com/stencyl/graphics/shaders/PostProcess.hx",330,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_341_tweenUniform,"com.stencyl.graphics.shaders.PostProcess","tweenUniform",0x07e2255c,"com.stencyl.graphics.shaders.PostProcess.tweenUniform","com/stencyl/graphics/shaders/PostProcess.hx",341,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_349_tweenUniform,"com.stencyl.graphics.shaders.PostProcess","tweenUniform",0x07e2255c,"com.stencyl.graphics.shaders.PostProcess.tweenUniform","com/stencyl/graphics/shaders/PostProcess.hx",349,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_363_rebuild,"com.stencyl.graphics.shaders.PostProcess","rebuild",0x36617c28,"com.stencyl.graphics.shaders.PostProcess.rebuild","com/stencyl/graphics/shaders/PostProcess.hx",363,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_373_createTexture,"com.stencyl.graphics.shaders.PostProcess","createTexture",0x050a168c,"com.stencyl.graphics.shaders.PostProcess.createTexture","com/stencyl/graphics/shaders/PostProcess.hx",373,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_387_capture,"com.stencyl.graphics.shaders.PostProcess","capture",0x3c2e1e13,"com.stencyl.graphics.shaders.PostProcess.capture","com/stencyl/graphics/shaders/PostProcess.hx",387,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_202_get_isSupported,"com.stencyl.graphics.shaders.PostProcess","get_isSupported",0x50d45708,"com.stencyl.graphics.shaders.PostProcess.get_isSupported","com/stencyl/graphics/shaders/PostProcess.hx",202,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_434_get_vertices,"com.stencyl.graphics.shaders.PostProcess","get_vertices",0x47ede755,"com.stencyl.graphics.shaders.PostProcess.get_vertices","com/stencyl/graphics/shaders/PostProcess.hx",434,0xed4b4663)
static const Float _hx_array_data_e181d8fb_15[] = {
	-1.0,-1.0,(Float)0,(Float)0,1.0,-1.0,(Float)1,(Float)0,-1.0,1.0,(Float)0,(Float)1,1.0,-1.0,(Float)1,(Float)0,1.0,1.0,(Float)1,(Float)1,-1.0,1.0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_76_boot,"com.stencyl.graphics.shaders.PostProcess","boot",0x39ecec85,"com.stencyl.graphics.shaders.PostProcess.boot","com/stencyl/graphics/shaders/PostProcess.hx",76,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_77_boot,"com.stencyl.graphics.shaders.PostProcess","boot",0x39ecec85,"com.stencyl.graphics.shaders.PostProcess.boot","com/stencyl/graphics/shaders/PostProcess.hx",77,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_78_boot,"com.stencyl.graphics.shaders.PostProcess","boot",0x39ecec85,"com.stencyl.graphics.shaders.PostProcess.boot","com/stencyl/graphics/shaders/PostProcess.hx",78,0xed4b4663)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa54408f48af0c3_416_boot,"com.stencyl.graphics.shaders.PostProcess","boot",0x39ecec85,"com.stencyl.graphics.shaders.PostProcess.boot","com/stencyl/graphics/shaders/PostProcess.hx",416,0xed4b4663)
namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{

void PostProcess_obj::__construct( ::com::stencyl::graphics::shaders::BasicShader shader,::String fragmentShader,hx::Null< bool >  __o_literalText){
bool literalText = __o_literalText.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_5aa54408f48af0c3_74_new)
HXLINE( 403)		this->timeScale = ((Float)1);
HXLINE( 402)		this->time = ((Float)0);
HXLINE(  92)		super::__construct();
HXLINE(  94)		this->basicShader = shader;
HXLINE(  96)		 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(::com::stencyl::Engine_obj::stage->_hx___renderer) );
HXLINE(  97)		this->gl = renderer->gl;
HXLINE(  99)		this->uniforms =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 100)		this->changedUniforms = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 101)		this->uniformTweens =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 104)		this->rebuild();
HXLINE( 107)		int status = this->gl->checkFramebufferStatus((int)36160);
HXLINE( 108)		switch((int)(status)){
            			case (int)36053: {
            			}
            			break;
            			case (int)36054: {
HXLINE( 111)				::haxe::Log_obj::trace(HX_("FRAMEBUFFER_INCOMPLETE_ATTACHMENT",f2,cf,b7,1d),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),111,HX_("com.stencyl.graphics.shaders.PostProcess",fb,d8,81,e1),HX_("new",60,d0,53,00)));
            			}
            			break;
            			case (int)36061: {
HXLINE( 113)				::haxe::Log_obj::trace(HX_("GL_FRAMEBUFFER_UNSUPPORTED",89,97,3b,c1),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),113,HX_("com.stencyl.graphics.shaders.PostProcess",fb,d8,81,e1),HX_("new",60,d0,53,00)));
            			}
            			break;
            			default:{
HXLINE( 116)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 116)				_hx_tmp((HX_("Check frame buffer: ",71,d6,83,f1) + status),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),116,HX_("com.stencyl.graphics.shaders.PostProcess",fb,d8,81,e1),HX_("new",60,d0,53,00)));
            			}
            		}
HXLINE( 120)		this->buffer = this->gl->createBuffer();
HXLINE( 121)		this->gl->bindBuffer((int)34962,this->buffer);
HXLINE( 122)		::cpp::VirtualArray array = ::Array_obj< Float >::fromData( _hx_array_data_e181d8fb_1,24);
HXDLIN( 122)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 122)		if (hx::IsNotNull( array )) {
HXLINE( 122)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 122)			_this->byteOffset = (int)0;
HXDLIN( 122)			_this->length = array->get_length();
HXDLIN( 122)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 122)			 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 122)			_this->buffer = this2;
HXDLIN( 122)			_this->copyFromArray(array,null());
HXDLIN( 122)			this1 = _this;
            		}
            		else {
HXLINE( 122)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 122)		 ::lime::utils::ArrayBufferView data = this1;
HXLINE( 123)		::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(this->gl,(int)34962,data,(int)35044);
HXLINE( 124)		this->gl->bindBuffer((int)34962,null());
HXLINE( 126)		if (literalText) {
HXLINE( 128)			this->fullScreenShader =  ::com::stencyl::graphics::shaders::Shader_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("fragment",d0,5f,e5,ad),false)
            				->setFixed(1,HX_("src",e4,a6,57,00),HX_("\n#ifdef GL_ES\n\tprecision mediump float;\n#endif\n\nattribute vec4 aVertex;\n\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = vec4(aVertex.x, aVertex.y, 0.0, 1.0);\n}",2b,e7,c8,12))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("fragment",d0,5f,e5,ad),true)
            				->setFixed(1,HX_("src",e4,a6,57,00),fragmentShader))));
            		}
            		else {
HXLINE( 136)			bool _hx_tmp1;
HXDLIN( 136)			if ((fragmentShader.length > (int)6)) {
HXLINE( 136)				_hx_tmp1 = (fragmentShader.substr((int)-6,null()) == HX_(".glslx",cc,05,6b,fa));
            			}
            			else {
HXLINE( 136)				_hx_tmp1 = false;
            			}
HXDLIN( 136)			if (_hx_tmp1) {
HXLINE( 138)				 ::haxe::xml::Fast fullScreenShaderXml =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,::Xml_obj::parse(::com::stencyl::utils::Assets_obj::getText(fragmentShader))->firstElement());
HXLINE( 139)				::String vertexData;
HXDLIN( 139)				if (fullScreenShaderXml->hasNode->resolve(HX_("vertex",64,db,47,a1))) {
HXLINE( 139)					vertexData = fullScreenShaderXml->node->resolve(HX_("vertex",64,db,47,a1))->get_innerData();
            				}
            				else {
HXLINE( 139)					vertexData = HX_("\n#ifdef GL_ES\n\tprecision mediump float;\n#endif\n\nattribute vec4 aVertex;\n\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = vec4(aVertex.x, aVertex.y, 0.0, 1.0);\n}",2b,e7,c8,12);
            				}
HXLINE( 140)				::String fragmentData = fullScreenShaderXml->node->resolve(HX_("fragment",d0,5f,e5,ad))->get_innerData();
HXLINE( 142)				this->fullScreenShader =  ::com::stencyl::graphics::shaders::Shader_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("fragment",d0,5f,e5,ad),false)
            					->setFixed(1,HX_("src",e4,a6,57,00),vertexData)))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("fragment",d0,5f,e5,ad),true)
            					->setFixed(1,HX_("src",e4,a6,57,00),fragmentData))));
            			}
            			else {
HXLINE( 151)				::String _hx_tmp2 = ::com::stencyl::utils::Assets_obj::getText(fragmentShader);
HXLINE( 149)				this->fullScreenShader =  ::com::stencyl::graphics::shaders::Shader_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("fragment",d0,5f,e5,ad),false)
            					->setFixed(1,HX_("src",e4,a6,57,00),HX_("\n#ifdef GL_ES\n\tprecision mediump float;\n#endif\n\nattribute vec4 aVertex;\n\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = vec4(aVertex.x, aVertex.y, 0.0, 1.0);\n}",2b,e7,c8,12))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("fragment",d0,5f,e5,ad),true)
            					->setFixed(1,HX_("src",e4,a6,57,00),_hx_tmp2))));
            			}
            		}
HXLINE( 157)		this->imageUniform = ::lime::graphics::opengl::GL_obj::context->getUniformLocation(this->fullScreenShader->program,HX_("uImage0",ca,0a,76,34));
HXLINE( 158)		this->timeUniform = ::lime::graphics::opengl::GL_obj::context->getUniformLocation(this->fullScreenShader->program,HX_("uTime",22,d7,b7,95));
HXLINE( 159)		this->resolutionUniform = ::lime::graphics::opengl::GL_obj::context->getUniformLocation(this->fullScreenShader->program,HX_("uResolution",01,3e,a1,49));
HXLINE( 160)		this->resolutionUsUniform = ::lime::graphics::opengl::GL_obj::context->getUniformLocation(this->fullScreenShader->program,HX_("uResolutionUs",bf,ca,ed,e2));
HXLINE( 162)		this->vertexSlot = ::lime::graphics::opengl::GL_obj::context->getAttribLocation(this->fullScreenShader->program,HX_("aVertex",a5,4e,7e,97));
HXLINE( 163)		this->texCoordSlot = ::lime::graphics::opengl::GL_obj::context->getAttribLocation(this->fullScreenShader->program,HX_("aTexCoord",cf,8c,5d,f2));
            	}

Dynamic PostProcess_obj::__CreateEmpty() { return new PostProcess_obj; }

void *PostProcess_obj::_hx_vtable = 0;

Dynamic PostProcess_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PostProcess_obj > _hx_result = new PostProcess_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool PostProcess_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x1822ba5b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1822ba5b;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

void PostProcess_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_210___enterFrame)
HXDLIN( 210)		if (!(this->_hx___renderDirty)) {
HXDLIN( 210)			this->_hx___renderDirty = true;
HXDLIN( 210)			this->_hx___setParentRenderDirty();
            		}
            	}


void PostProcess_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_5aa54408f48af0c3_217___renderGL)
HXDLIN( 217)		bool _hx_tmp;
HXDLIN( 217)		if (hx::IsNotNull( this->stage )) {
HXDLIN( 217)			_hx_tmp = this->_hx___renderable;
            		}
            		else {
HXDLIN( 217)			_hx_tmp = false;
            		}
HXDLIN( 217)		if (_hx_tmp) {
HXLINE( 219)			 ::openfl::display::Stage stage = ::com::stencyl::Engine_obj::stage;
HXLINE( 220)			 ::openfl::display3D::Context3D context3D = stage->context3D;
HXLINE( 223)			renderer->_hx___setBlendMode(null());
HXLINE( 225)			if (hx::IsNull( this->basicShader->multipassTarget )) {
HXLINE( 226)				context3D->setRenderToBackBuffer();
            			}
            			else {
HXLINE( 228)				context3D->setRenderToTexture(this->basicShader->multipassTarget->model->texture,null(),null(),null());
            			}
HXLINE( 229)			context3D->clear(null(),null(),null(),null(),null(),null(),null());
HXLINE( 231)			 ::com::stencyl::graphics::shaders::PostProcess _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 231)			_hx_tmp1->time = (_hx_tmp1->time + (::com::stencyl::Engine_obj::elapsedTime * this->timeScale));
HXLINE( 233)			::lime::graphics::opengl::GL_obj::context->useProgram(this->fullScreenShader->program);
HXLINE( 235)			this->gl->enableVertexAttribArray(this->vertexSlot);
HXLINE( 236)			this->gl->enableVertexAttribArray(this->texCoordSlot);
HXLINE( 238)			this->gl->activeTexture((int)33984);
HXLINE( 239)			{
HXLINE( 239)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN( 239)				this1->bindTexture((int)3553,this->texture->_hx___getTexture());
            			}
HXLINE( 240)			if ((stage->window->context->type == HX_("opengl",6f,64,94,21))) {
HXLINE( 241)				this->gl->enable((int)3553);
            			}
HXLINE( 243)			this->gl->bindBuffer((int)34962,this->buffer);
HXLINE( 244)			{
HXLINE( 244)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this2 = this->gl;
HXDLIN( 244)				int indx = this->vertexSlot;
HXDLIN( 244)				this2->vertexAttribPointer(indx,(int)2,(int)5126,false,(int)16,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)0));
            			}
HXLINE( 245)			{
HXLINE( 245)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this3 = this->gl;
HXDLIN( 245)				int indx1 = this->texCoordSlot;
HXDLIN( 245)				this3->vertexAttribPointer(indx1,(int)2,(int)5126,false,(int)16,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)8));
            			}
HXLINE( 247)			this->gl->uniform1i(this->imageUniform,(int)0);
HXLINE( 248)			this->gl->uniform1f(this->timeUniform,this->time);
HXLINE( 249)			{
HXLINE( 249)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this4 = this->gl;
HXDLIN( 249)				int location = this->resolutionUniform;
HXDLIN( 249)				Float v0 = ::Std_obj::_hx_int(stage->stageWidth);
HXDLIN( 249)				this4->uniform2f(location,v0,::Std_obj::_hx_int(stage->stageHeight));
            			}
HXLINE( 250)			{
HXLINE( 250)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this5 = this->gl;
HXDLIN( 250)				int location1 = this->resolutionUsUniform;
HXDLIN( 250)				int stage1 = stage->stageWidth;
HXDLIN( 250)				Float v01 = ::Std_obj::_hx_int(((Float)stage1 / (Float)(::com::stencyl::Engine_obj::SCALE * ::com::stencyl::Engine_obj::screenScaleX)));
HXDLIN( 250)				int stage2 = stage->stageHeight;
HXDLIN( 250)				this5->uniform2f(location1,v01,::Std_obj::_hx_int(((Float)stage2 / (Float)(::com::stencyl::Engine_obj::SCALE * ::com::stencyl::Engine_obj::screenScaleY))));
            			}
HXLINE( 252)			int i = this->changedUniforms->length;
HXLINE( 253)			while(true){
HXLINE( 253)				i = (i - (int)1);
HXDLIN( 253)				if (!(((i + (int)1) > (int)0))) {
HXLINE( 253)					goto _hx_goto_3;
            				}
HXLINE( 255)				 ::Dynamic u = this->changedUniforms->pop();
HXLINE( 256)				if (::Std_obj::is( ::Dynamic(u->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)),hx::ArrayBase::__mClass)) {
HXLINE( 258)					if (hx::IsEq(  ::Dynamic( ::Dynamic(u->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)),(int)0 )) {
HXLINE( 260)						continue;
            					}
HXLINE( 265)					{
HXLINE( 265)						 ::lime::_internal::backend::native::NativeOpenGLRenderContext this6 = this->gl;
HXDLIN( 265)						int location2 = ( (int)(u->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXDLIN( 265)						::cpp::VirtualArray array = ( (::cpp::VirtualArray)(u->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXDLIN( 265)						 ::lime::utils::ArrayBufferView this7;
HXDLIN( 265)						if (hx::IsNotNull( array )) {
HXLINE( 265)							 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 265)							_this->byteOffset = (int)0;
HXDLIN( 265)							_this->length = array->get_length();
HXDLIN( 265)							_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 265)							 ::haxe::io::Bytes this8 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 265)							_this->buffer = this8;
HXDLIN( 265)							_this->copyFromArray(array,null());
HXDLIN( 265)							this7 = _this;
            						}
            						else {
HXLINE( 265)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            						}
HXDLIN( 265)						 ::lime::utils::ArrayBufferView v = this7;
HXDLIN( 265)						int _hx_tmp2;
HXDLIN( 265)						if (hx::IsNotNull( v )) {
HXLINE( 265)							_hx_tmp2 = v->length;
            						}
            						else {
HXLINE( 265)							_hx_tmp2 = (int)0;
            						}
HXDLIN( 265)						this6->uniform1fv(location2,_hx_tmp2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(v));
            					}
            				}
            				else {
HXLINE( 270)					this->gl->uniform1f(( (int)(u->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) ),( (Float)(u->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ));
            				}
            			}
            			_hx_goto_3:;
HXLINE( 274)			this->gl->drawArrays((int)4,(int)0,(int)6);
HXLINE( 276)			this->gl->bindBuffer((int)34962,null());
HXLINE( 277)			if ((stage->window->context->type == HX_("opengl",6f,64,94,21))) {
HXLINE( 278)				this->gl->disable((int)3553);
            			}
HXLINE( 279)			this->gl->bindTexture((int)3553,null());
HXLINE( 281)			this->gl->disableVertexAttribArray(this->vertexSlot);
HXLINE( 282)			this->gl->disableVertexAttribArray(this->texCoordSlot);
HXLINE( 286)			context3D->_hx___contextState->program = null();
HXLINE( 287)			context3D->_hx___flushGLProgram();
HXLINE( 289)			context3D->_hx___contextState->_hx___currentGLElementArrayBuffer = null();
            		}
            	}


void PostProcess_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_297___renderGLMask)
            	}


void PostProcess_obj::setUniform(::String uniform, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_307_setUniform)
HXDLIN( 307)		if (this->uniforms->exists(uniform)) {
HXLINE( 309)			 ::Dynamic uniform1 = this->uniforms->get(uniform);
HXLINE( 310)			uniform1->__SetField(HX_("value",71,7f,b8,31),value,hx::paccDynamic);
HXLINE( 311)			this->changedUniforms->push(uniform1);
            		}
            		else {
HXLINE( 315)			int id = ::lime::graphics::opengl::GL_obj::context->getUniformLocation(this->fullScreenShader->program,uniform);
HXLINE( 316)			if ((id != ::com::stencyl::graphics::shaders::PostProcess_obj::UNIFORM_NOT_FOUND)) {
HXLINE( 318)				 ::Dynamic newUniform =  ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("id",db,5b,00,00),id)
            					->setFixed(1,HX_("value",71,7f,b8,31),value));
HXLINE( 319)				this->uniforms->set(uniform,newUniform);
HXLINE( 320)				this->changedUniforms->push(newUniform);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PostProcess_obj,setUniform,(void))

Float PostProcess_obj::getUniform(::String uniform){
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_330_getUniform)
HXLINE( 331)		if (this->uniforms->exists(uniform)) {
HXLINE( 333)			 ::Dynamic uniform1 = this->uniforms->get(uniform);
HXLINE( 334)			return ( (Float)(uniform1->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
            		}
HXLINE( 337)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PostProcess_obj,getUniform,return )

void PostProcess_obj::tweenUniform(::String name,Float targetValue,hx::Null< Float >  __o_duration, ::com::stencyl::utils::motion::EasingFunction easing){
Float duration = __o_duration.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_5aa54408f48af0c3_341_tweenUniform)
HXLINE( 340)		 ::com::stencyl::graphics::shaders::PostProcess _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 342)		if (this->uniforms->exists(name)) {
HXLINE( 344)			 ::Dynamic uniform = this->uniforms->get(name);
HXLINE( 345)			 ::com::stencyl::utils::motion::TweenFloat uniformTween = this->uniformTweens->get(name).StaticCast<  ::com::stencyl::utils::motion::TweenFloat >();
HXLINE( 346)			if (hx::IsNull( uniformTween )) {
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::Dynamic,uniform, ::com::stencyl::graphics::shaders::PostProcess,_gthis, ::com::stencyl::utils::motion::TweenFloat,uniformTween) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_5aa54408f48af0c3_349_tweenUniform)
HXLINE( 350)					uniform->__SetField(HX_("value",71,7f,b8,31),uniformTween->value,hx::paccDynamic);
HXLINE( 351)					_gthis->changedUniforms->push(uniform);
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 348)				uniformTween =  ::com::stencyl::utils::motion::TweenFloat_obj::__alloc( HX_CTX );
HXLINE( 349)				uniformTween->doOnUpdate( ::Dynamic(new _hx_Closure_0(uniform,_gthis,uniformTween)));
HXLINE( 353)				this->uniformTweens->set(name,uniformTween);
            			}
HXLINE( 355)			 ::Dynamic uniform1 =  ::Dynamic(uniform->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXDLIN( 355)			int _hx_tmp = ::Std_obj::_hx_int((duration * (int)1000));
HXDLIN( 355)			uniformTween->tween(( (Float)(uniform1) ),targetValue,easing,_hx_tmp);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(PostProcess_obj,tweenUniform,(void))

void PostProcess_obj::rebuild(){
            	HX_GC_STACKFRAME(&_hx_pos_5aa54408f48af0c3_363_rebuild)
HXLINE( 364)		if (hx::IsNotNull( this->texture )) {
HXLINE( 364)			this->texture->dispose();
            		}
HXLINE( 366)		{
HXLINE( 366)			int width = ::Std_obj::_hx_int(::Universal_obj::windowWidth);
HXDLIN( 366)			int height = ::Std_obj::_hx_int(::Universal_obj::windowHeight);
HXDLIN( 366)			this->texture = ::com::stencyl::Engine_obj::stage->context3D->createRectangleTexture(width,height,(int)1,true);
HXDLIN( 366)			this->texture->_hx___context->_hx___bindGLTexture2D(this->texture->_hx___textureID);
HXDLIN( 366)			 ::openfl::display3D::textures::RectangleTexture _hx_tmp = this->texture;
HXDLIN( 366)			_hx_tmp->_hx___setSamplerState( ::openfl::_internal::renderer::SamplerState_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null()));
HXDLIN( 366)			{
HXLINE( 366)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN( 366)				int target = this->texture->_hx___textureTarget;
HXDLIN( 366)				int internalformat = this->texture->_hx___internalFormat;
HXDLIN( 366)				int width1 = this->texture->_hx___width;
HXDLIN( 366)				int height1 = this->texture->_hx___height;
HXDLIN( 366)				int format = this->gl->RGB;
HXDLIN( 366)				int type = this->gl->UNSIGNED_BYTE;
HXDLIN( 366)				{
HXLINE( 366)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),null(),null(),(int)0);
HXDLIN( 366)					this1->texImage2D(target,(int)0,internalformat,width1,height1,(int)0,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            				}
            			}
HXDLIN( 366)			this->texture->_hx___context->_hx___bindGLTexture2D(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,rebuild,(void))

void PostProcess_obj::createTexture(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_5aa54408f48af0c3_373_createTexture)
HXLINE( 374)		this->texture = ::com::stencyl::Engine_obj::stage->context3D->createRectangleTexture(width,height,(int)1,true);
HXLINE( 377)		this->texture->_hx___context->_hx___bindGLTexture2D(this->texture->_hx___textureID);
HXLINE( 378)		 ::openfl::display3D::textures::RectangleTexture _hx_tmp = this->texture;
HXDLIN( 378)		_hx_tmp->_hx___setSamplerState( ::openfl::_internal::renderer::SamplerState_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null()));
HXLINE( 379)		{
HXLINE( 379)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN( 379)			int target = this->texture->_hx___textureTarget;
HXDLIN( 379)			int internalformat = this->texture->_hx___internalFormat;
HXDLIN( 379)			int width1 = this->texture->_hx___width;
HXDLIN( 379)			int height1 = this->texture->_hx___height;
HXDLIN( 379)			int format = this->gl->RGB;
HXDLIN( 379)			int type = this->gl->UNSIGNED_BYTE;
HXDLIN( 379)			{
HXLINE( 379)				::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),null(),null(),(int)0);
HXDLIN( 379)				this1->texImage2D(target,(int)0,internalformat,width1,height1,(int)0,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            			}
            		}
HXLINE( 380)		this->texture->_hx___context->_hx___bindGLTexture2D(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(PostProcess_obj,createTexture,(void))

void PostProcess_obj::capture(){
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_387_capture)
HXLINE( 388)		::com::stencyl::Engine_obj::stage->context3D->setRenderToTexture(this->texture,null(),null(),null());
HXLINE( 389)		 ::lime::graphics::opengl::GLObject framebuffer = this->texture->_hx___getGLFramebuffer(false,(int)0,(int)0);
HXLINE( 390)		this->gl->bindFramebuffer((int)36160,framebuffer);
HXLINE( 391)		this->gl->clear((int)16640);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,capture,(void))

int PostProcess_obj::UNIFORM_NOT_FOUND;

::String PostProcess_obj::CONTEXT_LOST;

::String PostProcess_obj::CONTEXT_RESTORED;

bool PostProcess_obj::get_isSupported(){
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_202_get_isSupported)
HXDLIN( 202)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,get_isSupported,return )

::String PostProcess_obj::vertexShader;

::Array< Float > PostProcess_obj::get_vertices(){
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_434_get_vertices)
HXDLIN( 434)		return ::Array_obj< Float >::fromData( _hx_array_data_e181d8fb_15,24);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,get_vertices,return )


hx::ObjectPtr< PostProcess_obj > PostProcess_obj::__new( ::com::stencyl::graphics::shaders::BasicShader shader,::String fragmentShader,hx::Null< bool >  __o_literalText) {
	hx::ObjectPtr< PostProcess_obj > __this = new PostProcess_obj();
	__this->__construct(shader,fragmentShader,__o_literalText);
	return __this;
}

hx::ObjectPtr< PostProcess_obj > PostProcess_obj::__alloc(hx::Ctx *_hx_ctx, ::com::stencyl::graphics::shaders::BasicShader shader,::String fragmentShader,hx::Null< bool >  __o_literalText) {
	PostProcess_obj *__this = (PostProcess_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PostProcess_obj), true, "com.stencyl.graphics.shaders.PostProcess"));
	*(void **)__this = PostProcess_obj::_hx_vtable;
	__this->__construct(shader,fragmentShader,__o_literalText);
	return __this;
}

PostProcess_obj::PostProcess_obj()
{
}

void PostProcess_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PostProcess);
	HX_MARK_MEMBER_NAME(_hx___added,"__added");
	HX_MARK_MEMBER_NAME(_hx___initialized,"__initialized");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(fullScreenShader,"fullScreenShader");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(basicShader,"basicShader");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(timeScale,"timeScale");
	HX_MARK_MEMBER_NAME(vertexSlot,"vertexSlot");
	HX_MARK_MEMBER_NAME(texCoordSlot,"texCoordSlot");
	HX_MARK_MEMBER_NAME(imageUniform,"imageUniform");
	HX_MARK_MEMBER_NAME(resolutionUniform,"resolutionUniform");
	HX_MARK_MEMBER_NAME(resolutionUsUniform,"resolutionUsUniform");
	HX_MARK_MEMBER_NAME(timeUniform,"timeUniform");
	HX_MARK_MEMBER_NAME(uniforms,"uniforms");
	HX_MARK_MEMBER_NAME(changedUniforms,"changedUniforms");
	HX_MARK_MEMBER_NAME(uniformTweens,"uniformTweens");
	 ::openfl::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PostProcess_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___added,"__added");
	HX_VISIT_MEMBER_NAME(_hx___initialized,"__initialized");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(fullScreenShader,"fullScreenShader");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(basicShader,"basicShader");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(timeScale,"timeScale");
	HX_VISIT_MEMBER_NAME(vertexSlot,"vertexSlot");
	HX_VISIT_MEMBER_NAME(texCoordSlot,"texCoordSlot");
	HX_VISIT_MEMBER_NAME(imageUniform,"imageUniform");
	HX_VISIT_MEMBER_NAME(resolutionUniform,"resolutionUniform");
	HX_VISIT_MEMBER_NAME(resolutionUsUniform,"resolutionUsUniform");
	HX_VISIT_MEMBER_NAME(timeUniform,"timeUniform");
	HX_VISIT_MEMBER_NAME(uniforms,"uniforms");
	HX_VISIT_MEMBER_NAME(changedUniforms,"changedUniforms");
	HX_VISIT_MEMBER_NAME(uniformTweens,"uniformTweens");
	 ::openfl::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PostProcess_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__added") ) { return hx::Val( _hx___added ); }
		if (HX_FIELD_EQ(inName,"rebuild") ) { return hx::Val( rebuild_dyn() ); }
		if (HX_FIELD_EQ(inName,"capture") ) { return hx::Val( capture_dyn() ); }
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uniforms") ) { return hx::Val( uniforms ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timeScale") ) { return hx::Val( timeScale ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"setUniform") ) { return hx::Val( setUniform_dyn() ); }
		if (HX_FIELD_EQ(inName,"getUniform") ) { return hx::Val( getUniform_dyn() ); }
		if (HX_FIELD_EQ(inName,"vertexSlot") ) { return hx::Val( vertexSlot ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"basicShader") ) { return hx::Val( basicShader ); }
		if (HX_FIELD_EQ(inName,"timeUniform") ) { return hx::Val( timeUniform ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenUniform") ) { return hx::Val( tweenUniform_dyn() ); }
		if (HX_FIELD_EQ(inName,"texCoordSlot") ) { return hx::Val( texCoordSlot ); }
		if (HX_FIELD_EQ(inName,"imageUniform") ) { return hx::Val( imageUniform ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__initialized") ) { return hx::Val( _hx___initialized ); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"uniformTweens") ) { return hx::Val( uniformTweens ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changedUniforms") ) { return hx::Val( changedUniforms ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fullScreenShader") ) { return hx::Val( fullScreenShader ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"resolutionUniform") ) { return hx::Val( resolutionUniform ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"resolutionUsUniform") ) { return hx::Val( resolutionUsUniform ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PostProcess_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_vertices() ); return true; } }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isSupported") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_isSupported() ); return true; } }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_vertices") ) { outValue = get_vertices_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_isSupported") ) { outValue = get_isSupported_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"UNIFORM_NOT_FOUND") ) { outValue = ( UNIFORM_NOT_FOUND ); return true; }
	}
	return false;
}

hx::Val PostProcess_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__added") ) { _hx___added=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uniforms") ) { uniforms=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"timeScale") ) { timeScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vertexSlot") ) { vertexSlot=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"basicShader") ) { basicShader=inValue.Cast<  ::com::stencyl::graphics::shaders::BasicShader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeUniform") ) { timeUniform=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"texCoordSlot") ) { texCoordSlot=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imageUniform") ) { imageUniform=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__initialized") ) { _hx___initialized=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uniformTweens") ) { uniformTweens=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changedUniforms") ) { changedUniforms=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fullScreenShader") ) { fullScreenShader=inValue.Cast<  ::com::stencyl::graphics::shaders::Shader >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"resolutionUniform") ) { resolutionUniform=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"resolutionUsUniform") ) { resolutionUsUniform=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PostProcess_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"UNIFORM_NOT_FOUND") ) { UNIFORM_NOT_FOUND=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PostProcess_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__added","\xa0","\x2d","\xa2","\x86"));
	outFields->push(HX_HCSTRING("__initialized","\xf4","\x35","\x88","\x7f"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("fullScreenShader","\xe0","\x97","\xd5","\xc4"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("basicShader","\x73","\x94","\x01","\xd0"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d"));
	outFields->push(HX_HCSTRING("vertexSlot","\x82","\x67","\x12","\xdd"));
	outFields->push(HX_HCSTRING("texCoordSlot","\x6c","\xd0","\x32","\x2f"));
	outFields->push(HX_HCSTRING("imageUniform","\x19","\xbb","\x2c","\xa5"));
	outFields->push(HX_HCSTRING("resolutionUniform","\x68","\x71","\xd8","\x86"));
	outFields->push(HX_HCSTRING("resolutionUsUniform","\xaa","\x4f","\xbb","\xd7"));
	outFields->push(HX_HCSTRING("timeUniform","\xa7","\xe8","\xb9","\x27"));
	outFields->push(HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"));
	outFields->push(HX_HCSTRING("changedUniforms","\xd3","\x4d","\x1b","\x5b"));
	outFields->push(HX_HCSTRING("uniformTweens","\xfc","\x07","\xa0","\x9b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PostProcess_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(PostProcess_obj,_hx___added),HX_HCSTRING("__added","\xa0","\x2d","\xa2","\x86")},
	{hx::fsBool,(int)offsetof(PostProcess_obj,_hx___initialized),HX_HCSTRING("__initialized","\xf4","\x35","\x88","\x7f")},
	{hx::fsObject /*::lime::_internal::backend::native::NativeOpenGLRenderContext*/ ,(int)offsetof(PostProcess_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*::openfl::display3D::textures::RectangleTexture*/ ,(int)offsetof(PostProcess_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsObject /*::com::stencyl::graphics::shaders::Shader*/ ,(int)offsetof(PostProcess_obj,fullScreenShader),HX_HCSTRING("fullScreenShader","\xe0","\x97","\xd5","\xc4")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(PostProcess_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsObject /*::com::stencyl::graphics::shaders::BasicShader*/ ,(int)offsetof(PostProcess_obj,basicShader),HX_HCSTRING("basicShader","\x73","\x94","\x01","\xd0")},
	{hx::fsFloat,(int)offsetof(PostProcess_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsFloat,(int)offsetof(PostProcess_obj,timeScale),HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,vertexSlot),HX_HCSTRING("vertexSlot","\x82","\x67","\x12","\xdd")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,texCoordSlot),HX_HCSTRING("texCoordSlot","\x6c","\xd0","\x32","\x2f")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,imageUniform),HX_HCSTRING("imageUniform","\x19","\xbb","\x2c","\xa5")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,resolutionUniform),HX_HCSTRING("resolutionUniform","\x68","\x71","\xd8","\x86")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,resolutionUsUniform),HX_HCSTRING("resolutionUsUniform","\xaa","\x4f","\xbb","\xd7")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,timeUniform),HX_HCSTRING("timeUniform","\xa7","\xe8","\xb9","\x27")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(PostProcess_obj,uniforms),HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(PostProcess_obj,changedUniforms),HX_HCSTRING("changedUniforms","\xd3","\x4d","\x1b","\x5b")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(PostProcess_obj,uniformTweens),HX_HCSTRING("uniformTweens","\xfc","\x07","\xa0","\x9b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PostProcess_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &PostProcess_obj::UNIFORM_NOT_FOUND,HX_HCSTRING("UNIFORM_NOT_FOUND","\x6b","\xe0","\x9d","\xa6")},
	{hx::fsString,(void *) &PostProcess_obj::CONTEXT_LOST,HX_HCSTRING("CONTEXT_LOST","\x94","\x35","\x21","\xf9")},
	{hx::fsString,(void *) &PostProcess_obj::CONTEXT_RESTORED,HX_HCSTRING("CONTEXT_RESTORED","\x06","\xe9","\x7b","\xfd")},
	{hx::fsString,(void *) &PostProcess_obj::vertexShader,HX_HCSTRING("vertexShader","\xa9","\xb1","\x35","\xbd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PostProcess_obj_sMemberFields[] = {
	HX_HCSTRING("__added","\xa0","\x2d","\xa2","\x86"),
	HX_HCSTRING("__initialized","\xf4","\x35","\x88","\x7f"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("setUniform","\xb2","\x65","\x43","\x08"),
	HX_HCSTRING("getUniform","\x3e","\xc7","\xc5","\x04"),
	HX_HCSTRING("tweenUniform","\x09","\xb2","\x23","\xdf"),
	HX_HCSTRING("rebuild","\x9b","\x2e","\x85","\xa1"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("capture","\x86","\xd0","\x51","\xa7"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("fullScreenShader","\xe0","\x97","\xd5","\xc4"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("basicShader","\x73","\x94","\x01","\xd0"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d"),
	HX_HCSTRING("vertexSlot","\x82","\x67","\x12","\xdd"),
	HX_HCSTRING("texCoordSlot","\x6c","\xd0","\x32","\x2f"),
	HX_HCSTRING("imageUniform","\x19","\xbb","\x2c","\xa5"),
	HX_HCSTRING("resolutionUniform","\x68","\x71","\xd8","\x86"),
	HX_HCSTRING("resolutionUsUniform","\xaa","\x4f","\xbb","\xd7"),
	HX_HCSTRING("timeUniform","\xa7","\xe8","\xb9","\x27"),
	HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"),
	HX_HCSTRING("changedUniforms","\xd3","\x4d","\x1b","\x5b"),
	HX_HCSTRING("uniformTweens","\xfc","\x07","\xa0","\x9b"),
	::String(null()) };

static void PostProcess_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PostProcess_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PostProcess_obj::UNIFORM_NOT_FOUND,"UNIFORM_NOT_FOUND");
	HX_MARK_MEMBER_NAME(PostProcess_obj::CONTEXT_LOST,"CONTEXT_LOST");
	HX_MARK_MEMBER_NAME(PostProcess_obj::CONTEXT_RESTORED,"CONTEXT_RESTORED");
	HX_MARK_MEMBER_NAME(PostProcess_obj::vertexShader,"vertexShader");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PostProcess_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PostProcess_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PostProcess_obj::UNIFORM_NOT_FOUND,"UNIFORM_NOT_FOUND");
	HX_VISIT_MEMBER_NAME(PostProcess_obj::CONTEXT_LOST,"CONTEXT_LOST");
	HX_VISIT_MEMBER_NAME(PostProcess_obj::CONTEXT_RESTORED,"CONTEXT_RESTORED");
	HX_VISIT_MEMBER_NAME(PostProcess_obj::vertexShader,"vertexShader");
};

#endif

hx::Class PostProcess_obj::__mClass;

static ::String PostProcess_obj_sStaticFields[] = {
	HX_HCSTRING("UNIFORM_NOT_FOUND","\x6b","\xe0","\x9d","\xa6"),
	HX_HCSTRING("CONTEXT_LOST","\x94","\x35","\x21","\xf9"),
	HX_HCSTRING("CONTEXT_RESTORED","\x06","\xe9","\x7b","\xfd"),
	HX_HCSTRING("get_isSupported","\x7b","\x34","\x6c","\xb4"),
	HX_HCSTRING("vertexShader","\xa9","\xb1","\x35","\xbd"),
	HX_HCSTRING("get_vertices","\x02","\x74","\x2f","\x1f"),
	::String(null())
};

void PostProcess_obj::__register()
{
	hx::Object *dummy = new PostProcess_obj;
	PostProcess_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.shaders.PostProcess","\xfb","\xd8","\x81","\xe1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PostProcess_obj::__GetStatic;
	__mClass->mSetStaticField = &PostProcess_obj::__SetStatic;
	__mClass->mMarkFunc = PostProcess_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PostProcess_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PostProcess_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PostProcess_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PostProcess_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PostProcess_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PostProcess_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PostProcess_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_76_boot)
HXDLIN(  76)		UNIFORM_NOT_FOUND = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_77_boot)
HXDLIN(  77)		CONTEXT_LOST = HX_("glcontextlost",4e,21,17,07);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_78_boot)
HXDLIN(  78)		CONTEXT_RESTORED = HX_("glcontextrestored",c0,71,0a,02);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5aa54408f48af0c3_416_boot)
HXDLIN( 416)		vertexShader = HX_("\n#ifdef GL_ES\n\tprecision mediump float;\n#endif\n\nattribute vec4 aVertex;\n\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = vec4(aVertex.x, aVertex.y, 0.0, 1.0);\n}",2b,e7,c8,12);
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders
