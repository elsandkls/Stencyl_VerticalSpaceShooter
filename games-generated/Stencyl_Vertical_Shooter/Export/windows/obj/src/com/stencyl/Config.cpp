// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Universal
#include <Universal.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2DebugDraw
#include <box2D/dynamics/B2DebugDraw.h>
#endif
#ifndef INCLUDED_com_stencyl_Config
#include <com/stencyl/Config.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_Input
#include <com/stencyl/Input.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_Scale
#include <com/stencyl/graphics/Scale.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics__ScaleMode_ScaleMode_Impl_
#include <com/stencyl/graphics/_ScaleMode/ScaleMode_Impl_.h>
#endif
#ifndef INCLUDED_com_stencyl_models__PhysicsMode_PhysicsMode_Impl_
#include <com/stencyl/models/_PhysicsMode/PhysicsMode_Impl_.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Utils
#include <com/stencyl/utils/Utils.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_64046571eca2207d_53_load,"com.stencyl.Config","load",0x01129703,"com.stencyl.Config.load","com/stencyl/Config.hx",53,0xbf55dd6b)
HX_LOCAL_STACK_FRAME(_hx_pos_64046571eca2207d_59_loadMap,"com.stencyl.Config","loadMap",0x479c2f59,"com.stencyl.Config.loadMap","com/stencyl/Config.hx",59,0xbf55dd6b)
HX_LOCAL_STACK_FRAME(_hx_pos_64046571eca2207d_80_loadFromString,"com.stencyl.Config","loadFromString",0xca95cabe,"com.stencyl.Config.loadFromString","com/stencyl/Config.hx",80,0xbf55dd6b)
HX_LOCAL_STACK_FRAME(_hx_pos_64046571eca2207d_144_setStaticFields,"com.stencyl.Config","setStaticFields",0x60c88ecc,"com.stencyl.Config.setStaticFields","com/stencyl/Config.hx",144,0xbf55dd6b)
HX_LOCAL_STACK_FRAME(_hx_pos_64046571eca2207d_173_asMap,"com.stencyl.Config","asMap",0x9c5ed54d,"com.stencyl.Config.asMap","com/stencyl/Config.hx",173,0xbf55dd6b)
HX_LOCAL_STACK_FRAME(_hx_pos_1f7bfd2c38dfea5e_14_boot,"com.stencyl.Config","boot",0xfa76810f,"com.stencyl.Config.boot","com/stencyl/utils/HaxeDefines.hx",14,0x0c596b3b)
namespace com{
namespace stencyl{

void Config_obj::__construct() { }

Dynamic Config_obj::__CreateEmpty() { return new Config_obj; }

void *Config_obj::_hx_vtable = 0;

Dynamic Config_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Config_obj > _hx_result = new Config_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Config_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x67d0316d;
}

bool Config_obj::landscape;

bool Config_obj::autorotate;

int Config_obj::scaleMode;

int Config_obj::stageWidth;

int Config_obj::stageHeight;

int Config_obj::initSceneID;

int Config_obj::physicsMode;

Float Config_obj::gameScale;

bool Config_obj::forceHiResAssets;

bool Config_obj::antialias;

bool Config_obj::pixelsnap;

bool Config_obj::startInFullScreen;

bool Config_obj::disposeImages;

 ::haxe::ds::StringMap Config_obj::keys;

::Array< ::Dynamic> Config_obj::scales;

::String Config_obj::toolsetInterfaceHost;

 ::Dynamic Config_obj::toolsetInterfacePort;

 ::Dynamic Config_obj::buildConfig;

bool Config_obj::adPositionBottom;

bool Config_obj::testAds;

bool Config_obj::releaseMode;

bool Config_obj::useGciLogging;

bool Config_obj::showConsole;

bool Config_obj::debugDraw;

bool Config_obj::disableBackButton;

 ::Dynamic Config_obj::data;

 ::haxe::ds::StringMap Config_obj::defines;

void Config_obj::load(){
            	HX_STACKFRAME(&_hx_pos_64046571eca2207d_53_load)
HXLINE(  54)		::String text = ::com::stencyl::utils::Utils_obj::getConfigText(HX_("config/game-config.json",66,b4,d0,0b));
HXLINE(  55)		::com::stencyl::Config_obj::loadFromString(text,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Config_obj,load,(void))

 ::Dynamic Config_obj::loadMap( ::Dynamic jsonData, ::Dynamic mapData){
            	HX_STACKFRAME(&_hx_pos_64046571eca2207d_59_loadMap)
HXLINE(  60)		{
HXLINE(  60)			int _g = (int)0;
HXDLIN(  60)			::Array< ::String > _g1 = ::Reflect_obj::fields(jsonData);
HXDLIN(  60)			while((_g < _g1->length)){
HXLINE(  60)				::String field = _g1->__get(_g);
HXDLIN(  60)				_g = (_g + (int)1);
HXLINE(  62)				if (::StringTools_obj::startsWith(field,HX_("config-",2b,93,39,10))) {
HXLINE(  64)					::Dynamic this1 = ::com::stencyl::Config_obj::defines;
HXDLIN(  64)					if (( ( ::haxe::ds::StringMap)(this1) )->exists(field.substr(HX_("config-",2b,93,39,10).length,null()))) {
HXLINE(  66)						::com::stencyl::Config_obj::loadMap(::Reflect_obj::field(jsonData,field),mapData);
            					}
            				}
            				else {
HXLINE(  71)					::Reflect_obj::setField(mapData,field,::Reflect_obj::field(jsonData,field));
            				}
            			}
            		}
HXLINE(  75)		return mapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Config_obj,loadMap,return )

void Config_obj::loadFromString(::String text,hx::Null< bool >  __o_handleReload){
bool handleReload = __o_handleReload.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_64046571eca2207d_80_loadFromString)
HXDLIN(  80)		bool _hx_tmp;
HXDLIN(  80)		if (hx::IsNotNull( ::com::stencyl::Config_obj::data )) {
HXDLIN(  80)			_hx_tmp = !(handleReload);
            		}
            		else {
HXDLIN(  80)			_hx_tmp = true;
            		}
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  82)			 ::Dynamic _hx_tmp1 =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,text)->parseRec();
HXDLIN(  82)			::com::stencyl::Config_obj::data = ::com::stencyl::Config_obj::loadMap(_hx_tmp1, ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE(  83)			::com::stencyl::Config_obj::setStaticFields();
            		}
            		else {
HXLINE(  87)			 ::Dynamic oldData = ::com::stencyl::Config_obj::data;
HXLINE(  88)			 ::Dynamic _hx_tmp2 =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,text)->parseRec();
HXDLIN(  88)			::com::stencyl::Config_obj::data = ::com::stencyl::Config_obj::loadMap(_hx_tmp2, ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE(  89)			::com::stencyl::Config_obj::setStaticFields();
HXLINE(  91)			bool needsScreenReload = false;
HXLINE(  92)			bool needsGameReload = false;
HXLINE(  93)			bool fullScreenChanged = false;
HXLINE(  95)			{
HXLINE(  95)				int _g = (int)0;
HXDLIN(  95)				::Array< ::String > _g1 = ::Reflect_obj::fields(oldData);
HXDLIN(  95)				while((_g < _g1->length)){
HXLINE(  95)					::String key = _g1->__get(_g);
HXDLIN(  95)					_g = (_g + (int)1);
HXLINE(  97)					::String oldValue = ( (::String)(::Reflect_obj::field(oldData,key)) );
HXLINE(  98)					::String newValue = ( (::String)(::Reflect_obj::field(::com::stencyl::Config_obj::data,key)) );
HXLINE( 100)					if ((oldValue != newValue)) {
HXLINE( 102)						 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 102)						_hx_tmp3((((((HX_("value of ",fa,f2,26,77) + key) + HX_(" changed: ",7a,04,61,27)) + oldValue) + HX_(" -> ",6f,2f,49,15)) + newValue),hx::SourceInfo(HX_("Config.hx",1c,f1,f8,61),102,HX_("com.stencyl.Config",b1,90,b4,7f),HX_("loadFromString",a1,37,25,eb)));
HXLINE( 104)						::String _hx_switch_0 = key;
            						if (  (_hx_switch_0==HX_("debugDraw",f7,cf,bb,25)) ){
HXLINE( 112)							::com::stencyl::Engine_obj::DEBUG_DRAW = ::com::stencyl::Config_obj::debugDraw;
HXLINE( 113)							if (!(::com::stencyl::Config_obj::debugDraw)) {
HXLINE( 114)								bool _hx_tmp4;
HXDLIN( 114)								if (hx::IsNotNull( ::com::stencyl::Engine_obj::debugDrawer )) {
HXLINE( 114)									_hx_tmp4 = hx::IsNotNull( ::com::stencyl::Engine_obj::debugDrawer->m_sprite );
            								}
            								else {
HXLINE( 114)									_hx_tmp4 = false;
            								}
HXDLIN( 114)								if (_hx_tmp4) {
HXLINE( 115)									::com::stencyl::Engine_obj::debugDrawer->m_sprite->get_graphics()->clear();
            								}
            							}
HXLINE( 111)							goto _hx_goto_4;
            						}
            						if (  (_hx_switch_0==HX_("disposeImages",b7,06,a8,fe)) ||  (_hx_switch_0==HX_("physicsMode",ca,a7,44,f3)) ){
HXLINE( 121)							needsGameReload = true;
HXDLIN( 121)							goto _hx_goto_4;
            						}
            						if (  (_hx_switch_0==HX_("antialias",ae,d6,e9,75)) ||  (_hx_switch_0==HX_("forceHiResAssets",97,a2,80,ff)) ||  (_hx_switch_0==HX_("gameScale",38,bd,e9,ad)) ||  (_hx_switch_0==HX_("scaleMode",0d,db,d3,2b)) ||  (_hx_switch_0==HX_("scales",a9,ea,25,3c)) ||  (_hx_switch_0==HX_("stageHeight",45,89,45,95)) ||  (_hx_switch_0==HX_("stageWidth",68,0a,b3,1d)) ){
HXLINE( 109)							needsScreenReload = true;
HXDLIN( 109)							goto _hx_goto_4;
            						}
            						if (  (_hx_switch_0==HX_("keys",f4,e1,06,47)) ){
HXLINE( 118)							::com::stencyl::Input_obj::loadInputConfig();
HXDLIN( 118)							goto _hx_goto_4;
            						}
            						if (  (_hx_switch_0==HX_("releaseMode",ca,74,8b,e6)) ||  (_hx_switch_0==HX_("useGciLogging",39,a9,12,ec)) ){
HXLINE( 124)							::Universal_obj::setupTracing(!(::com::stencyl::Config_obj::releaseMode));
HXDLIN( 124)							goto _hx_goto_4;
            						}
            						if (  (_hx_switch_0==HX_("showConsole",da,87,71,f5)) ){
HXLINE( 127)							::com::stencyl::Engine_obj::engine->setStatsVisible(::com::stencyl::Config_obj::showConsole);
HXDLIN( 127)							goto _hx_goto_4;
            						}
            						_hx_goto_4:;
            					}
            				}
            			}
HXLINE( 132)			if (needsGameReload) {
HXLINE( 134)				::Universal_obj::reloadGame();
            			}
            			else {
HXLINE( 136)				if (needsScreenReload) {
HXLINE( 138)					::com::stencyl::Engine_obj::engine->reloadScreen();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Config_obj,loadFromString,(void))

void Config_obj::setStaticFields(){
            	HX_STACKFRAME(&_hx_pos_64046571eca2207d_144_setStaticFields)
HXLINE( 145)		::com::stencyl::Config_obj::landscape = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("landscape",3b,78,ad,fc),hx::paccDynamic)) );
HXLINE( 146)		::com::stencyl::Config_obj::autorotate = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("autorotate",0a,e3,56,02),hx::paccDynamic)) );
HXLINE( 147)		::com::stencyl::Config_obj::scaleMode = ::com::stencyl::graphics::_ScaleMode::ScaleMode_Impl__obj::fromString(( (::String)(::com::stencyl::Config_obj::data->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic)) ));
HXLINE( 148)		::com::stencyl::Config_obj::stageWidth = ( (int)(::com::stencyl::Config_obj::data->__Field(HX_("stageWidth",68,0a,b3,1d),hx::paccDynamic)) );
HXLINE( 149)		::com::stencyl::Config_obj::stageHeight = ( (int)(::com::stencyl::Config_obj::data->__Field(HX_("stageHeight",45,89,45,95),hx::paccDynamic)) );
HXLINE( 150)		::com::stencyl::Config_obj::initSceneID = ( (int)(::com::stencyl::Config_obj::data->__Field(HX_("initSceneID",f7,72,5e,6c),hx::paccDynamic)) );
HXLINE( 151)		::com::stencyl::Config_obj::physicsMode = ::com::stencyl::models::_PhysicsMode::PhysicsMode_Impl__obj::fromString(( (::String)(::com::stencyl::Config_obj::data->__Field(HX_("physicsMode",ca,a7,44,f3),hx::paccDynamic)) ));
HXLINE( 152)		::com::stencyl::Config_obj::gameScale = ( (Float)(::com::stencyl::Config_obj::data->__Field(HX_("gameScale",38,bd,e9,ad),hx::paccDynamic)) );
HXLINE( 153)		::com::stencyl::Config_obj::forceHiResAssets = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("forceHiResAssets",97,a2,80,ff),hx::paccDynamic)) );
HXLINE( 154)		::com::stencyl::Config_obj::antialias = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("antialias",ae,d6,e9,75),hx::paccDynamic)) );
HXLINE( 155)		::com::stencyl::Config_obj::pixelsnap = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("pixelsnap",d0,d7,07,1b),hx::paccDynamic)) );
HXLINE( 156)		::com::stencyl::Config_obj::startInFullScreen = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("startInFullScreen",22,8a,3b,19),hx::paccDynamic)) );
HXLINE( 157)		::com::stencyl::Config_obj::disposeImages = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("disposeImages",b7,06,a8,fe),hx::paccDynamic)) );
HXLINE( 158)		::com::stencyl::Config_obj::adPositionBottom = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("adPositionBottom",b7,f0,4a,10),hx::paccDynamic)) );
HXLINE( 159)		::com::stencyl::Config_obj::testAds = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("testAds",fe,60,b8,bd),hx::paccDynamic)) );
HXLINE( 160)		::com::stencyl::Config_obj::releaseMode = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("releaseMode",ca,74,8b,e6),hx::paccDynamic)) );
HXLINE( 161)		::com::stencyl::Config_obj::showConsole = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("showConsole",da,87,71,f5),hx::paccDynamic)) );
HXLINE( 162)		::com::stencyl::Config_obj::debugDraw = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("debugDraw",f7,cf,bb,25),hx::paccDynamic)) );
HXLINE( 163)		::com::stencyl::Config_obj::disableBackButton = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("disableBackButton",81,27,02,e2),hx::paccDynamic)) );
HXLINE( 164)		::com::stencyl::Config_obj::useGciLogging = ( (bool)(::com::stencyl::Config_obj::data->__Field(HX_("useGciLogging",39,a9,12,ec),hx::paccDynamic)) );
HXLINE( 165)		::com::stencyl::Config_obj::keys = ::com::stencyl::Config_obj::asMap( ::Dynamic(::com::stencyl::Config_obj::data->__Field(HX_("keys",f4,e1,06,47),hx::paccDynamic)));
HXLINE( 166)		::com::stencyl::Config_obj::scales = ::Lambda_obj::array(( (::Array< ::String >)(::com::stencyl::Config_obj::data->__Field(HX_("scales",a9,ea,25,3c),hx::paccDynamic)) )->map(::com::stencyl::graphics::Scale_obj::fromString_dyn()));
HXLINE( 167)		::com::stencyl::Config_obj::toolsetInterfaceHost = ( (::String)(::com::stencyl::Config_obj::data->__Field(HX_("toolsetInterfaceHost",17,20,2e,15),hx::paccDynamic)) );
HXLINE( 168)		::com::stencyl::Config_obj::toolsetInterfacePort = ::com::stencyl::Config_obj::data->__Field(HX_("toolsetInterfacePort",30,d4,77,1a),hx::paccDynamic);
HXLINE( 169)		::com::stencyl::Config_obj::buildConfig =  ::Dynamic(::com::stencyl::Config_obj::data->__Field(HX_("buildConfig",90,3c,43,18),hx::paccDynamic));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Config_obj,setStaticFields,(void))

 ::haxe::ds::StringMap Config_obj::asMap( ::Dynamic anon){
            	HX_GC_STACKFRAME(&_hx_pos_64046571eca2207d_173_asMap)
HXLINE( 174)		 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 175)		{
HXLINE( 175)			int _g = (int)0;
HXDLIN( 175)			::Array< ::String > _g1 = ::Reflect_obj::fields(anon);
HXDLIN( 175)			while((_g < _g1->length)){
HXLINE( 175)				::String field = _g1->__get(_g);
HXDLIN( 175)				_g = (_g + (int)1);
HXLINE( 177)				map->set(field,::Reflect_obj::field(anon,field));
            			}
            		}
HXLINE( 179)		return map;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Config_obj,asMap,return )


Config_obj::Config_obj()
{
}

bool Config_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { outValue = ( keys ); return true; }
		if (HX_FIELD_EQ(inName,"data") ) { outValue = ( data ); return true; }
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"asMap") ) { outValue = asMap_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scales") ) { outValue = ( scales ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testAds") ) { outValue = ( testAds ); return true; }
		if (HX_FIELD_EQ(inName,"defines") ) { outValue = ( defines ); return true; }
		if (HX_FIELD_EQ(inName,"loadMap") ) { outValue = loadMap_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"landscape") ) { outValue = ( landscape ); return true; }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { outValue = ( scaleMode ); return true; }
		if (HX_FIELD_EQ(inName,"gameScale") ) { outValue = ( gameScale ); return true; }
		if (HX_FIELD_EQ(inName,"antialias") ) { outValue = ( antialias ); return true; }
		if (HX_FIELD_EQ(inName,"pixelsnap") ) { outValue = ( pixelsnap ); return true; }
		if (HX_FIELD_EQ(inName,"debugDraw") ) { outValue = ( debugDraw ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autorotate") ) { outValue = ( autorotate ); return true; }
		if (HX_FIELD_EQ(inName,"stageWidth") ) { outValue = ( stageWidth ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stageHeight") ) { outValue = ( stageHeight ); return true; }
		if (HX_FIELD_EQ(inName,"initSceneID") ) { outValue = ( initSceneID ); return true; }
		if (HX_FIELD_EQ(inName,"physicsMode") ) { outValue = ( physicsMode ); return true; }
		if (HX_FIELD_EQ(inName,"buildConfig") ) { outValue = ( buildConfig ); return true; }
		if (HX_FIELD_EQ(inName,"releaseMode") ) { outValue = ( releaseMode ); return true; }
		if (HX_FIELD_EQ(inName,"showConsole") ) { outValue = ( showConsole ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"disposeImages") ) { outValue = ( disposeImages ); return true; }
		if (HX_FIELD_EQ(inName,"useGciLogging") ) { outValue = ( useGciLogging ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadFromString") ) { outValue = loadFromString_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setStaticFields") ) { outValue = setStaticFields_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"forceHiResAssets") ) { outValue = ( forceHiResAssets ); return true; }
		if (HX_FIELD_EQ(inName,"adPositionBottom") ) { outValue = ( adPositionBottom ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"startInFullScreen") ) { outValue = ( startInFullScreen ); return true; }
		if (HX_FIELD_EQ(inName,"disableBackButton") ) { outValue = ( disableBackButton ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"toolsetInterfaceHost") ) { outValue = ( toolsetInterfaceHost ); return true; }
		if (HX_FIELD_EQ(inName,"toolsetInterfacePort") ) { outValue = ( toolsetInterfacePort ); return true; }
	}
	return false;
}

bool Config_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"data") ) { data=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scales") ) { scales=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"testAds") ) { testAds=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"defines") ) { defines=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"landscape") ) { landscape=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { scaleMode=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"gameScale") ) { gameScale=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"antialias") ) { antialias=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"pixelsnap") ) { pixelsnap=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"debugDraw") ) { debugDraw=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autorotate") ) { autorotate=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"stageWidth") ) { stageWidth=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stageHeight") ) { stageHeight=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"initSceneID") ) { initSceneID=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"physicsMode") ) { physicsMode=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"buildConfig") ) { buildConfig=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"releaseMode") ) { releaseMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"showConsole") ) { showConsole=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"disposeImages") ) { disposeImages=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"useGciLogging") ) { useGciLogging=ioValue.Cast< bool >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"forceHiResAssets") ) { forceHiResAssets=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"adPositionBottom") ) { adPositionBottom=ioValue.Cast< bool >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"startInFullScreen") ) { startInFullScreen=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"disableBackButton") ) { disableBackButton=ioValue.Cast< bool >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"toolsetInterfaceHost") ) { toolsetInterfaceHost=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"toolsetInterfacePort") ) { toolsetInterfacePort=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Config_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Config_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Config_obj::landscape,HX_HCSTRING("landscape","\x3b","\x78","\xad","\xfc")},
	{hx::fsBool,(void *) &Config_obj::autorotate,HX_HCSTRING("autorotate","\x0a","\xe3","\x56","\x02")},
	{hx::fsInt,(void *) &Config_obj::scaleMode,HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b")},
	{hx::fsInt,(void *) &Config_obj::stageWidth,HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d")},
	{hx::fsInt,(void *) &Config_obj::stageHeight,HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95")},
	{hx::fsInt,(void *) &Config_obj::initSceneID,HX_HCSTRING("initSceneID","\xf7","\x72","\x5e","\x6c")},
	{hx::fsInt,(void *) &Config_obj::physicsMode,HX_HCSTRING("physicsMode","\xca","\xa7","\x44","\xf3")},
	{hx::fsFloat,(void *) &Config_obj::gameScale,HX_HCSTRING("gameScale","\x38","\xbd","\xe9","\xad")},
	{hx::fsBool,(void *) &Config_obj::forceHiResAssets,HX_HCSTRING("forceHiResAssets","\x97","\xa2","\x80","\xff")},
	{hx::fsBool,(void *) &Config_obj::antialias,HX_HCSTRING("antialias","\xae","\xd6","\xe9","\x75")},
	{hx::fsBool,(void *) &Config_obj::pixelsnap,HX_HCSTRING("pixelsnap","\xd0","\xd7","\x07","\x1b")},
	{hx::fsBool,(void *) &Config_obj::startInFullScreen,HX_HCSTRING("startInFullScreen","\x22","\x8a","\x3b","\x19")},
	{hx::fsBool,(void *) &Config_obj::disposeImages,HX_HCSTRING("disposeImages","\xb7","\x06","\xa8","\xfe")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Config_obj::keys,HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Config_obj::scales,HX_HCSTRING("scales","\xa9","\xea","\x25","\x3c")},
	{hx::fsString,(void *) &Config_obj::toolsetInterfaceHost,HX_HCSTRING("toolsetInterfaceHost","\x17","\x20","\x2e","\x15")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Config_obj::toolsetInterfacePort,HX_HCSTRING("toolsetInterfacePort","\x30","\xd4","\x77","\x1a")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Config_obj::buildConfig,HX_HCSTRING("buildConfig","\x90","\x3c","\x43","\x18")},
	{hx::fsBool,(void *) &Config_obj::adPositionBottom,HX_HCSTRING("adPositionBottom","\xb7","\xf0","\x4a","\x10")},
	{hx::fsBool,(void *) &Config_obj::testAds,HX_HCSTRING("testAds","\xfe","\x60","\xb8","\xbd")},
	{hx::fsBool,(void *) &Config_obj::releaseMode,HX_HCSTRING("releaseMode","\xca","\x74","\x8b","\xe6")},
	{hx::fsBool,(void *) &Config_obj::useGciLogging,HX_HCSTRING("useGciLogging","\x39","\xa9","\x12","\xec")},
	{hx::fsBool,(void *) &Config_obj::showConsole,HX_HCSTRING("showConsole","\xda","\x87","\x71","\xf5")},
	{hx::fsBool,(void *) &Config_obj::debugDraw,HX_HCSTRING("debugDraw","\xf7","\xcf","\xbb","\x25")},
	{hx::fsBool,(void *) &Config_obj::disableBackButton,HX_HCSTRING("disableBackButton","\x81","\x27","\x02","\xe2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Config_obj::data,HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Config_obj::defines,HX_HCSTRING("defines","\xd8","\x37","\x08","\xa1")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Config_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Config_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Config_obj::landscape,"landscape");
	HX_MARK_MEMBER_NAME(Config_obj::autorotate,"autorotate");
	HX_MARK_MEMBER_NAME(Config_obj::scaleMode,"scaleMode");
	HX_MARK_MEMBER_NAME(Config_obj::stageWidth,"stageWidth");
	HX_MARK_MEMBER_NAME(Config_obj::stageHeight,"stageHeight");
	HX_MARK_MEMBER_NAME(Config_obj::initSceneID,"initSceneID");
	HX_MARK_MEMBER_NAME(Config_obj::physicsMode,"physicsMode");
	HX_MARK_MEMBER_NAME(Config_obj::gameScale,"gameScale");
	HX_MARK_MEMBER_NAME(Config_obj::forceHiResAssets,"forceHiResAssets");
	HX_MARK_MEMBER_NAME(Config_obj::antialias,"antialias");
	HX_MARK_MEMBER_NAME(Config_obj::pixelsnap,"pixelsnap");
	HX_MARK_MEMBER_NAME(Config_obj::startInFullScreen,"startInFullScreen");
	HX_MARK_MEMBER_NAME(Config_obj::disposeImages,"disposeImages");
	HX_MARK_MEMBER_NAME(Config_obj::keys,"keys");
	HX_MARK_MEMBER_NAME(Config_obj::scales,"scales");
	HX_MARK_MEMBER_NAME(Config_obj::toolsetInterfaceHost,"toolsetInterfaceHost");
	HX_MARK_MEMBER_NAME(Config_obj::toolsetInterfacePort,"toolsetInterfacePort");
	HX_MARK_MEMBER_NAME(Config_obj::buildConfig,"buildConfig");
	HX_MARK_MEMBER_NAME(Config_obj::adPositionBottom,"adPositionBottom");
	HX_MARK_MEMBER_NAME(Config_obj::testAds,"testAds");
	HX_MARK_MEMBER_NAME(Config_obj::releaseMode,"releaseMode");
	HX_MARK_MEMBER_NAME(Config_obj::useGciLogging,"useGciLogging");
	HX_MARK_MEMBER_NAME(Config_obj::showConsole,"showConsole");
	HX_MARK_MEMBER_NAME(Config_obj::debugDraw,"debugDraw");
	HX_MARK_MEMBER_NAME(Config_obj::disableBackButton,"disableBackButton");
	HX_MARK_MEMBER_NAME(Config_obj::data,"data");
	HX_MARK_MEMBER_NAME(Config_obj::defines,"defines");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Config_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Config_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Config_obj::landscape,"landscape");
	HX_VISIT_MEMBER_NAME(Config_obj::autorotate,"autorotate");
	HX_VISIT_MEMBER_NAME(Config_obj::scaleMode,"scaleMode");
	HX_VISIT_MEMBER_NAME(Config_obj::stageWidth,"stageWidth");
	HX_VISIT_MEMBER_NAME(Config_obj::stageHeight,"stageHeight");
	HX_VISIT_MEMBER_NAME(Config_obj::initSceneID,"initSceneID");
	HX_VISIT_MEMBER_NAME(Config_obj::physicsMode,"physicsMode");
	HX_VISIT_MEMBER_NAME(Config_obj::gameScale,"gameScale");
	HX_VISIT_MEMBER_NAME(Config_obj::forceHiResAssets,"forceHiResAssets");
	HX_VISIT_MEMBER_NAME(Config_obj::antialias,"antialias");
	HX_VISIT_MEMBER_NAME(Config_obj::pixelsnap,"pixelsnap");
	HX_VISIT_MEMBER_NAME(Config_obj::startInFullScreen,"startInFullScreen");
	HX_VISIT_MEMBER_NAME(Config_obj::disposeImages,"disposeImages");
	HX_VISIT_MEMBER_NAME(Config_obj::keys,"keys");
	HX_VISIT_MEMBER_NAME(Config_obj::scales,"scales");
	HX_VISIT_MEMBER_NAME(Config_obj::toolsetInterfaceHost,"toolsetInterfaceHost");
	HX_VISIT_MEMBER_NAME(Config_obj::toolsetInterfacePort,"toolsetInterfacePort");
	HX_VISIT_MEMBER_NAME(Config_obj::buildConfig,"buildConfig");
	HX_VISIT_MEMBER_NAME(Config_obj::adPositionBottom,"adPositionBottom");
	HX_VISIT_MEMBER_NAME(Config_obj::testAds,"testAds");
	HX_VISIT_MEMBER_NAME(Config_obj::releaseMode,"releaseMode");
	HX_VISIT_MEMBER_NAME(Config_obj::useGciLogging,"useGciLogging");
	HX_VISIT_MEMBER_NAME(Config_obj::showConsole,"showConsole");
	HX_VISIT_MEMBER_NAME(Config_obj::debugDraw,"debugDraw");
	HX_VISIT_MEMBER_NAME(Config_obj::disableBackButton,"disableBackButton");
	HX_VISIT_MEMBER_NAME(Config_obj::data,"data");
	HX_VISIT_MEMBER_NAME(Config_obj::defines,"defines");
};

#endif

hx::Class Config_obj::__mClass;

static ::String Config_obj_sStaticFields[] = {
	HX_HCSTRING("landscape","\x3b","\x78","\xad","\xfc"),
	HX_HCSTRING("autorotate","\x0a","\xe3","\x56","\x02"),
	HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b"),
	HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"),
	HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"),
	HX_HCSTRING("initSceneID","\xf7","\x72","\x5e","\x6c"),
	HX_HCSTRING("physicsMode","\xca","\xa7","\x44","\xf3"),
	HX_HCSTRING("gameScale","\x38","\xbd","\xe9","\xad"),
	HX_HCSTRING("forceHiResAssets","\x97","\xa2","\x80","\xff"),
	HX_HCSTRING("antialias","\xae","\xd6","\xe9","\x75"),
	HX_HCSTRING("pixelsnap","\xd0","\xd7","\x07","\x1b"),
	HX_HCSTRING("startInFullScreen","\x22","\x8a","\x3b","\x19"),
	HX_HCSTRING("disposeImages","\xb7","\x06","\xa8","\xfe"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("scales","\xa9","\xea","\x25","\x3c"),
	HX_HCSTRING("toolsetInterfaceHost","\x17","\x20","\x2e","\x15"),
	HX_HCSTRING("toolsetInterfacePort","\x30","\xd4","\x77","\x1a"),
	HX_HCSTRING("buildConfig","\x90","\x3c","\x43","\x18"),
	HX_HCSTRING("adPositionBottom","\xb7","\xf0","\x4a","\x10"),
	HX_HCSTRING("testAds","\xfe","\x60","\xb8","\xbd"),
	HX_HCSTRING("releaseMode","\xca","\x74","\x8b","\xe6"),
	HX_HCSTRING("useGciLogging","\x39","\xa9","\x12","\xec"),
	HX_HCSTRING("showConsole","\xda","\x87","\x71","\xf5"),
	HX_HCSTRING("debugDraw","\xf7","\xcf","\xbb","\x25"),
	HX_HCSTRING("disableBackButton","\x81","\x27","\x02","\xe2"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("defines","\xd8","\x37","\x08","\xa1"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("loadMap","\x16","\x84","\xdd","\x08"),
	HX_HCSTRING("loadFromString","\xa1","\x37","\x25","\xeb"),
	HX_HCSTRING("setStaticFields","\x89","\x68","\xb8","\xbd"),
	HX_HCSTRING("asMap","\xca","\x90","\x1c","\x26"),
	::String(null())
};

void Config_obj::__register()
{
	hx::Object *dummy = new Config_obj;
	Config_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.Config","\xb1","\x90","\xb4","\x7f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Config_obj::__GetStatic;
	__mClass->mSetStaticField = &Config_obj::__SetStatic;
	__mClass->mMarkFunc = Config_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Config_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Config_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Config_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Config_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Config_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Config_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1f7bfd2c38dfea5e_14_boot)
HXDLIN(  14)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  14)			_g->set(HX_("hscript",73,8c,18,2c),HX_("2.1.1",78,28,96,e8));
HXDLIN(  14)			_g->set(HX_("source-header",ff,d9,d1,ce),HX_("Generated by Haxe 3.4.7",a0,6b,df,4e));
HXDLIN(  14)			_g->set(HX_("lime_openal",5f,96,1c,2e),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("polygonal_printf",f3,ad,55,fa),HX_("1.0.0-beta",c8,ea,2f,43));
HXDLIN(  14)			_g->set(HX_("lime-cffi",1e,16,fe,b4),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("cloner",75,de,4d,0e),HX_("1.0.0",b5,d1,2e,55));
HXDLIN(  14)			_g->set(HX_("openfl",90,63,94,21),HX_("8.7.0",03,31,02,5d));
HXDLIN(  14)			_g->set(HX_("openfl-native",f4,d7,d0,18),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("stencyl",ec,cb,03,80),HX_("4.0.1",39,8f,62,0f));
HXDLIN(  14)			_g->set(HX_("stencyltools",af,0e,c4,77),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("tweenxcore",8c,0b,f1,7d),HX_("1.0.4",b9,d1,2e,55));
HXDLIN(  14)			_g->set(HX_("polygonal-printf",41,7c,24,db),HX_("1.0.0-beta",c8,ea,2f,43));
HXDLIN(  14)			_g->set(HX_("hxcpp_api_level",73,aa,bc,b1),HX_("331",91,df,26,00));
HXDLIN(  14)			_g->set(HX_("lime_native",c1,00,a5,2e),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("actuate_manual_update",b2,63,9a,e4),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("mbs",7e,0b,53,00),HX_("1.0.0",b5,d1,2e,55));
HXDLIN(  14)			_g->set(HX_("no-compilation",77,59,73,e4),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("openfl_native",a6,09,02,38),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("testing",d0,c3,d6,bd),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("native",97,c9,1c,22),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime-cairo",10,82,09,a6),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime-vorbis",cb,08,93,50),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime_vorbis",7d,3a,c4,6f),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("no_console",19,4e,3a,69),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("windows",83,de,74,e8),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("debug_console",2b,a2,94,98),HX_("0.0.0",34,3d,c8,c1));
HXDLIN(  14)			_g->set(HX_("lime_opengl",99,9b,1c,2e),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("haxe_ver",8a,66,91,5f),HX_("3.407",80,05,ff,7b));
HXDLIN(  14)			_g->set(HX_("box2d",bd,c2,fe,b6),HX_("0.0.0",34,3d,c8,c1));
HXDLIN(  14)			_g->set(HX_("lime_curl",96,83,12,7f),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("sys",0d,ad,57,00),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("HXCPP_M64",3f,ff,fb,2a),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime-native",0f,cf,73,0f),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("cpp",23,81,4b,00),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("dce",06,38,4c,00),HX_("std",a3,a8,57,00));
HXDLIN(  14)			_g->set(HX_("debug-console",1d,58,ba,6c),HX_("0.0.0",34,3d,c8,c1));
HXDLIN(  14)			_g->set(HX_("lime-harfbuzz",38,18,0c,c4),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime-curl",64,82,09,b5),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime-openal",ad,64,eb,0e),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime_cffi",50,17,07,7f),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("true",4e,a7,03,4d),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime",15,17,b3,47),HX_("7.2.0",3d,d1,97,c9));
HXDLIN(  14)			_g->set(HX_("no_compilation",85,c2,d6,bb),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime_cairo",9e,8c,e1,a3),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("lime_harfbuzz",6a,9a,32,f7),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("polygonal-ds",37,90,75,9f),HX_("2.0.0",36,66,95,e8));
HXDLIN(  14)			_g->set(HX_("lime-opengl",e7,69,eb,0e),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("tools",1b,92,2e,14),HX_("7.2.0",3d,d1,97,c9));
HXDLIN(  14)			_g->set(HX_("actuate_manual_time",76,bd,e3,6d),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("desktop",dc,c5,94,1e),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("haxe3",4d,6d,25,22),HX_("1",31,00,00,00));
HXDLIN(  14)			_g->set(HX_("polygonal_ds",e9,80,9b,9f),HX_("2.0.0",36,66,95,e8));
HXDLIN(  14)			_g->set(HX_("use_tilemap",f6,94,a0,ff),HX_("1",31,00,00,00));
HXDLIN(  14)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_1f7bfd2c38dfea5e_14_boot)
HXDLIN(  14)		defines =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace com
} // end namespace stencyl
