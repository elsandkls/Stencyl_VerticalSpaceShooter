// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Key
#include <com/stencyl/Key.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_138_nameOfKey,"com.stencyl.Key","nameOfKey",0x3f3098df,"com.stencyl.Key.nameOfKey","com/stencyl/Key.hx",138,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_285_keyFromName,"com.stencyl.Key","keyFromName",0x20f2fc76,"com.stencyl.Key.keyFromName","com/stencyl/Key.hx",285,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_7_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",7,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_9_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",9,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_10_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",10,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_11_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",11,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_12_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",12,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_14_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",14,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_15_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",15,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_16_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",16,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_17_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",17,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_18_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",18,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_19_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",19,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_20_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",20,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_21_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",21,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_22_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",22,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_23_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",23,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_24_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",24,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_25_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",25,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_26_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",26,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_27_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",27,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_28_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",28,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_29_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",29,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_60_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",60,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_61_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",61,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_62_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",62,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_63_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",63,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_64_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",64,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_65_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",65,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_66_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",66,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_67_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",67,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_68_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",68,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_69_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",69,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_70_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",70,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_71_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",71,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_72_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",72,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_73_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",73,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_74_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",74,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_75_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",75,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_76_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",76,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_77_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",77,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_78_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",78,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_79_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",79,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_80_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",80,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_81_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",81,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_82_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",82,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_83_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",83,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_84_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",84,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_85_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",85,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_88_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",88,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_89_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",89,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_90_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",90,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_91_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",91,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_92_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",92,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_93_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",93,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_94_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",94,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_95_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",95,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_96_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",96,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_97_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",97,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_98_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",98,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_99_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",99,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_100_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",100,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_101_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",101,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_102_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",102,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_104_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",104,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_105_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",105,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_106_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",106,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_107_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",107,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_108_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",108,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_109_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",109,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_110_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",110,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_111_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",111,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_112_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",112,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_113_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",113,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_115_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",115,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_116_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",116,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_117_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",117,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_118_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",118,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_119_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",119,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_120_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",120,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_121_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",121,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_122_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",122,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_123_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",123,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_124_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",124,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_125_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",125,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_126_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",126,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_127_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",127,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_128_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",128,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_129_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",129,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_130_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",130,0xb63996f0)
HX_LOCAL_STACK_FRAME(_hx_pos_912daf19c2ad432d_177_boot,"com.stencyl.Key","boot",0x8f1e3d10,"com.stencyl.Key.boot","com/stencyl/Key.hx",177,0xb63996f0)
namespace com{
namespace stencyl{

void Key_obj::__construct() { }

Dynamic Key_obj::__CreateEmpty() { return new Key_obj; }

void *Key_obj::_hx_vtable = 0;

Dynamic Key_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Key_obj > _hx_result = new Key_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Key_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x49932614;
}

int Key_obj::ANY;

int Key_obj::LEFT;

int Key_obj::UP;

int Key_obj::RIGHT;

int Key_obj::DOWN;

int Key_obj::ENTER;

int Key_obj::CONTROL;

int Key_obj::SPACE;

int Key_obj::SHIFT;

int Key_obj::BACKSPACE;

int Key_obj::CAPS_LOCK;

int Key_obj::DELETE;

int Key_obj::END;

int Key_obj::ESCAPE;

int Key_obj::HOME;

int Key_obj::INSERT;

int Key_obj::TAB;

int Key_obj::PAGE_DOWN;

int Key_obj::PAGE_UP;

int Key_obj::LEFT_SQUARE_BRACKET;

int Key_obj::RIGHT_SQUARE_BRACKET;

int Key_obj::A;

int Key_obj::B;

int Key_obj::C;

int Key_obj::D;

int Key_obj::E;

int Key_obj::F;

int Key_obj::G;

int Key_obj::H;

int Key_obj::I;

int Key_obj::J;

int Key_obj::K;

int Key_obj::L;

int Key_obj::M;

int Key_obj::N;

int Key_obj::O;

int Key_obj::P;

int Key_obj::Q;

int Key_obj::R;

int Key_obj::S;

int Key_obj::T;

int Key_obj::U;

int Key_obj::V;

int Key_obj::W;

int Key_obj::X;

int Key_obj::Y;

int Key_obj::Z;

int Key_obj::F1;

int Key_obj::F2;

int Key_obj::F3;

int Key_obj::F4;

int Key_obj::F5;

int Key_obj::F6;

int Key_obj::F7;

int Key_obj::F8;

int Key_obj::F9;

int Key_obj::F10;

int Key_obj::F11;

int Key_obj::F12;

int Key_obj::F13;

int Key_obj::F14;

int Key_obj::F15;

int Key_obj::DIGIT_0;

int Key_obj::DIGIT_1;

int Key_obj::DIGIT_2;

int Key_obj::DIGIT_3;

int Key_obj::DIGIT_4;

int Key_obj::DIGIT_5;

int Key_obj::DIGIT_6;

int Key_obj::DIGIT_7;

int Key_obj::DIGIT_8;

int Key_obj::DIGIT_9;

int Key_obj::NUMPAD_0;

int Key_obj::NUMPAD_1;

int Key_obj::NUMPAD_2;

int Key_obj::NUMPAD_3;

int Key_obj::NUMPAD_4;

int Key_obj::NUMPAD_5;

int Key_obj::NUMPAD_6;

int Key_obj::NUMPAD_7;

int Key_obj::NUMPAD_8;

int Key_obj::NUMPAD_9;

int Key_obj::NUMPAD_ADD;

int Key_obj::NUMPAD_DECIMAL;

int Key_obj::NUMPAD_DIVIDE;

int Key_obj::NUMPAD_ENTER;

int Key_obj::NUMPAD_MULTIPLY;

int Key_obj::NUMPAD_SUBTRACT;

::String Key_obj::nameOfKey(int _hx_char){
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_138_nameOfKey)
HXLINE( 139)		bool _hx_tmp;
HXDLIN( 139)		if ((_hx_char >= (int)97)) {
HXLINE( 139)			_hx_tmp = (_hx_char <= (int)122);
            		}
            		else {
HXLINE( 139)			_hx_tmp = false;
            		}
HXDLIN( 139)		if (_hx_tmp) {
HXLINE( 139)			return ::String::fromCharCode(_hx_char);
            		}
HXLINE( 140)		bool _hx_tmp1;
HXDLIN( 140)		if ((_hx_char >= (int)112)) {
HXLINE( 140)			_hx_tmp1 = (_hx_char <= (int)126);
            		}
            		else {
HXLINE( 140)			_hx_tmp1 = false;
            		}
HXDLIN( 140)		if (_hx_tmp1) {
HXLINE( 140)			return (HX_("F",46,00,00,00) + ::Std_obj::string((_hx_char - (int)111)));
            		}
HXLINE( 141)		bool _hx_tmp2;
HXDLIN( 141)		if ((_hx_char >= (int)96)) {
HXLINE( 141)			_hx_tmp2 = (_hx_char <= (int)105);
            		}
            		else {
HXLINE( 141)			_hx_tmp2 = false;
            		}
HXDLIN( 141)		if (_hx_tmp2) {
HXLINE( 141)			return (HX_("NUMPAD ",b3,24,cd,32) + ::Std_obj::string((_hx_char - (int)96)));
            		}
HXLINE( 142)		switch((int)(_hx_char)){
            			case (int)8: {
HXLINE( 153)				return HX_("BACKSPACE",1f,f5,42,c6);
            			}
            			break;
            			case (int)9: {
HXLINE( 160)				return HX_("TAB",35,f6,3f,00);
            			}
            			break;
            			case (int)13: {
HXLINE( 149)				return HX_("ENTER",f8,a4,74,ee);
            			}
            			break;
            			case (int)16: {
HXLINE( 152)				return HX_("SHIFT",62,24,11,fa);
            			}
            			break;
            			case (int)17: {
HXLINE( 150)				return HX_("CONTROL",3d,3f,55,99);
            			}
            			break;
            			case (int)20: {
HXLINE( 154)				return HX_("CAPS LOCK",4a,78,9c,88);
            			}
            			break;
            			case (int)27: {
HXLINE( 157)				return HX_("ESCAPE",81,ef,5c,8d);
            			}
            			break;
            			case (int)32: {
HXLINE( 151)				return HX_("SPACE",a6,c4,54,ff);
            			}
            			break;
            			case (int)33: {
HXLINE( 162)				return HX_("PAGE UP",8c,0b,0f,0b);
            			}
            			break;
            			case (int)34: {
HXLINE( 161)				return HX_("PAGE DOWN",d3,ef,54,2a);
            			}
            			break;
            			case (int)35: {
HXLINE( 156)				return HX_("END",bb,9f,34,00);
            			}
            			break;
            			case (int)36: {
HXLINE( 158)				return HX_("HOME",1f,92,d3,2f);
            			}
            			break;
            			case (int)37: {
HXLINE( 144)				return HX_("LEFT",07,d0,70,32);
            			}
            			break;
            			case (int)38: {
HXLINE( 145)				return HX_("UP",5b,4a,00,00);
            			}
            			break;
            			case (int)39: {
HXLINE( 146)				return HX_("RIGHT",bc,43,52,67);
            			}
            			break;
            			case (int)40: {
HXLINE( 147)				return HX_("DOWN",62,c0,2e,2d);
            			}
            			break;
            			case (int)45: {
HXLINE( 159)				return HX_("INSERT",39,ef,5f,50);
            			}
            			break;
            			case (int)46: {
HXLINE( 155)				return HX_("DELETE",2b,6c,5b,1d);
            			}
            			break;
            			case (int)106: {
HXLINE( 168)				return HX_("NUMPAD MULTIPLY",d7,01,70,ad);
            			}
            			break;
            			case (int)107: {
HXLINE( 164)				return HX_("NUMPAD ADD",2e,1b,84,0d);
            			}
            			break;
            			case (int)108: {
HXLINE( 167)				return HX_("NUMPAD ENTER",65,97,66,df);
            			}
            			break;
            			case (int)109: {
HXLINE( 169)				return HX_("NUMPAD SUBTRACT",c7,94,f4,0a);
            			}
            			break;
            			case (int)110: {
HXLINE( 165)				return HX_("NUMPAD DECIMAL",1e,b0,cc,ed);
            			}
            			break;
            			case (int)111: {
HXLINE( 166)				return HX_("NUMPAD DIVIDE",6c,08,57,54);
            			}
            			break;
            			default:{
HXLINE( 172)				return ::String::fromCharCode(_hx_char);
            			}
            		}
HXLINE( 142)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Key_obj,nameOfKey,return )

 ::haxe::ds::StringMap Key_obj::keyboardNameMap;

int Key_obj::keyFromName(::String k){
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_285_keyFromName)
HXDLIN( 285)		return ( (int)(::com::stencyl::Key_obj::keyboardNameMap->get(k)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Key_obj,keyFromName,return )


Key_obj::Key_obj()
{
}

bool Key_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"nameOfKey") ) { outValue = nameOfKey_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyFromName") ) { outValue = keyFromName_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"keyboardNameMap") ) { outValue = ( keyboardNameMap ); return true; }
	}
	return false;
}

bool Key_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"keyboardNameMap") ) { keyboardNameMap=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Key_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Key_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Key_obj::ANY,HX_HCSTRING("ANY","\xcc","\x96","\x31","\x00")},
	{hx::fsInt,(void *) &Key_obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsInt,(void *) &Key_obj::UP,HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsInt,(void *) &Key_obj::DOWN,HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d")},
	{hx::fsInt,(void *) &Key_obj::ENTER,HX_HCSTRING("ENTER","\xf8","\xa4","\x74","\xee")},
	{hx::fsInt,(void *) &Key_obj::CONTROL,HX_HCSTRING("CONTROL","\x3d","\x3f","\x55","\x99")},
	{hx::fsInt,(void *) &Key_obj::SPACE,HX_HCSTRING("SPACE","\xa6","\xc4","\x54","\xff")},
	{hx::fsInt,(void *) &Key_obj::SHIFT,HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa")},
	{hx::fsInt,(void *) &Key_obj::BACKSPACE,HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6")},
	{hx::fsInt,(void *) &Key_obj::CAPS_LOCK,HX_HCSTRING("CAPS_LOCK","\x09","\x04","\xdb","\xce")},
	{hx::fsInt,(void *) &Key_obj::DELETE,HX_HCSTRING("DELETE","\x2b","\x6c","\x5b","\x1d")},
	{hx::fsInt,(void *) &Key_obj::END,HX_HCSTRING("END","\xbb","\x9f","\x34","\x00")},
	{hx::fsInt,(void *) &Key_obj::ESCAPE,HX_HCSTRING("ESCAPE","\x81","\xef","\x5c","\x8d")},
	{hx::fsInt,(void *) &Key_obj::HOME,HX_HCSTRING("HOME","\x1f","\x92","\xd3","\x2f")},
	{hx::fsInt,(void *) &Key_obj::INSERT,HX_HCSTRING("INSERT","\x39","\xef","\x5f","\x50")},
	{hx::fsInt,(void *) &Key_obj::TAB,HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00")},
	{hx::fsInt,(void *) &Key_obj::PAGE_DOWN,HX_HCSTRING("PAGE_DOWN","\x92","\x7b","\x93","\x70")},
	{hx::fsInt,(void *) &Key_obj::PAGE_UP,HX_HCSTRING("PAGE_UP","\x8b","\xd9","\x3e","\x0b")},
	{hx::fsInt,(void *) &Key_obj::LEFT_SQUARE_BRACKET,HX_HCSTRING("LEFT_SQUARE_BRACKET","\x9e","\x5d","\xcb","\x6d")},
	{hx::fsInt,(void *) &Key_obj::RIGHT_SQUARE_BRACKET,HX_HCSTRING("RIGHT_SQUARE_BRACKET","\x89","\x5d","\x90","\x55")},
	{hx::fsInt,(void *) &Key_obj::A,HX_HCSTRING("A","\x41","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::B,HX_HCSTRING("B","\x42","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::C,HX_HCSTRING("C","\x43","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::D,HX_HCSTRING("D","\x44","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::E,HX_HCSTRING("E","\x45","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F,HX_HCSTRING("F","\x46","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::G,HX_HCSTRING("G","\x47","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::H,HX_HCSTRING("H","\x48","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::I,HX_HCSTRING("I","\x49","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::J,HX_HCSTRING("J","\x4a","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::K,HX_HCSTRING("K","\x4b","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::L,HX_HCSTRING("L","\x4c","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::M,HX_HCSTRING("M","\x4d","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::N,HX_HCSTRING("N","\x4e","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::O,HX_HCSTRING("O","\x4f","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::P,HX_HCSTRING("P","\x50","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::Q,HX_HCSTRING("Q","\x51","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::R,HX_HCSTRING("R","\x52","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::S,HX_HCSTRING("S","\x53","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::T,HX_HCSTRING("T","\x54","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::U,HX_HCSTRING("U","\x55","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::V,HX_HCSTRING("V","\x56","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::W,HX_HCSTRING("W","\x57","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::X,HX_HCSTRING("X","\x58","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::Y,HX_HCSTRING("Y","\x59","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::Z,HX_HCSTRING("Z","\x5a","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F1,HX_HCSTRING("F1","\x2b","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F2,HX_HCSTRING("F2","\x2c","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F3,HX_HCSTRING("F3","\x2d","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F4,HX_HCSTRING("F4","\x2e","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F5,HX_HCSTRING("F5","\x2f","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F6,HX_HCSTRING("F6","\x30","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F7,HX_HCSTRING("F7","\x31","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F8,HX_HCSTRING("F8","\x32","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F9,HX_HCSTRING("F9","\x33","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Key_obj::F10,HX_HCSTRING("F10","\xa5","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Key_obj::F11,HX_HCSTRING("F11","\xa6","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Key_obj::F12,HX_HCSTRING("F12","\xa7","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Key_obj::F13,HX_HCSTRING("F13","\xa8","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Key_obj::F14,HX_HCSTRING("F14","\xa9","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Key_obj::F15,HX_HCSTRING("F15","\xaa","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_0,HX_HCSTRING("DIGIT_0","\xbe","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_1,HX_HCSTRING("DIGIT_1","\xbf","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_2,HX_HCSTRING("DIGIT_2","\xc0","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_3,HX_HCSTRING("DIGIT_3","\xc1","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_4,HX_HCSTRING("DIGIT_4","\xc2","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_5,HX_HCSTRING("DIGIT_5","\xc3","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_6,HX_HCSTRING("DIGIT_6","\xc4","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_7,HX_HCSTRING("DIGIT_7","\xc5","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_8,HX_HCSTRING("DIGIT_8","\xc6","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::DIGIT_9,HX_HCSTRING("DIGIT_9","\xc7","\xb5","\xb4","\x4d")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_0,HX_HCSTRING("NUMPAD_0","\xfe","\x2e","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_1,HX_HCSTRING("NUMPAD_1","\xff","\x2e","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_2,HX_HCSTRING("NUMPAD_2","\x00","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_3,HX_HCSTRING("NUMPAD_3","\x01","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_4,HX_HCSTRING("NUMPAD_4","\x02","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_5,HX_HCSTRING("NUMPAD_5","\x03","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_6,HX_HCSTRING("NUMPAD_6","\x04","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_7,HX_HCSTRING("NUMPAD_7","\x05","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_8,HX_HCSTRING("NUMPAD_8","\x06","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_9,HX_HCSTRING("NUMPAD_9","\x07","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_ADD,HX_HCSTRING("NUMPAD_ADD","\x4f","\x8c","\x28","\x37")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_DECIMAL,HX_HCSTRING("NUMPAD_DECIMAL","\xbf","\xc5","\x36","\x01")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_DIVIDE,HX_HCSTRING("NUMPAD_DIVIDE","\xeb","\x41","\x1f","\x90")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_ENTER,HX_HCSTRING("NUMPAD_ENTER","\xc6","\x52","\xe2","\x0f")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_MULTIPLY,HX_HCSTRING("NUMPAD_MULTIPLY","\x16","\xd9","\xd8","\x96")},
	{hx::fsInt,(void *) &Key_obj::NUMPAD_SUBTRACT,HX_HCSTRING("NUMPAD_SUBTRACT","\x06","\x6c","\x5d","\xf4")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Key_obj::keyboardNameMap,HX_HCSTRING("keyboardNameMap","\x2a","\xef","\x80","\xb4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Key_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Key_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Key_obj::ANY,"ANY");
	HX_MARK_MEMBER_NAME(Key_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Key_obj::UP,"UP");
	HX_MARK_MEMBER_NAME(Key_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Key_obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(Key_obj::ENTER,"ENTER");
	HX_MARK_MEMBER_NAME(Key_obj::CONTROL,"CONTROL");
	HX_MARK_MEMBER_NAME(Key_obj::SPACE,"SPACE");
	HX_MARK_MEMBER_NAME(Key_obj::SHIFT,"SHIFT");
	HX_MARK_MEMBER_NAME(Key_obj::BACKSPACE,"BACKSPACE");
	HX_MARK_MEMBER_NAME(Key_obj::CAPS_LOCK,"CAPS_LOCK");
	HX_MARK_MEMBER_NAME(Key_obj::DELETE,"DELETE");
	HX_MARK_MEMBER_NAME(Key_obj::END,"END");
	HX_MARK_MEMBER_NAME(Key_obj::ESCAPE,"ESCAPE");
	HX_MARK_MEMBER_NAME(Key_obj::HOME,"HOME");
	HX_MARK_MEMBER_NAME(Key_obj::INSERT,"INSERT");
	HX_MARK_MEMBER_NAME(Key_obj::TAB,"TAB");
	HX_MARK_MEMBER_NAME(Key_obj::PAGE_DOWN,"PAGE_DOWN");
	HX_MARK_MEMBER_NAME(Key_obj::PAGE_UP,"PAGE_UP");
	HX_MARK_MEMBER_NAME(Key_obj::LEFT_SQUARE_BRACKET,"LEFT_SQUARE_BRACKET");
	HX_MARK_MEMBER_NAME(Key_obj::RIGHT_SQUARE_BRACKET,"RIGHT_SQUARE_BRACKET");
	HX_MARK_MEMBER_NAME(Key_obj::A,"A");
	HX_MARK_MEMBER_NAME(Key_obj::B,"B");
	HX_MARK_MEMBER_NAME(Key_obj::C,"C");
	HX_MARK_MEMBER_NAME(Key_obj::D,"D");
	HX_MARK_MEMBER_NAME(Key_obj::E,"E");
	HX_MARK_MEMBER_NAME(Key_obj::F,"F");
	HX_MARK_MEMBER_NAME(Key_obj::G,"G");
	HX_MARK_MEMBER_NAME(Key_obj::H,"H");
	HX_MARK_MEMBER_NAME(Key_obj::I,"I");
	HX_MARK_MEMBER_NAME(Key_obj::J,"J");
	HX_MARK_MEMBER_NAME(Key_obj::K,"K");
	HX_MARK_MEMBER_NAME(Key_obj::L,"L");
	HX_MARK_MEMBER_NAME(Key_obj::M,"M");
	HX_MARK_MEMBER_NAME(Key_obj::N,"N");
	HX_MARK_MEMBER_NAME(Key_obj::O,"O");
	HX_MARK_MEMBER_NAME(Key_obj::P,"P");
	HX_MARK_MEMBER_NAME(Key_obj::Q,"Q");
	HX_MARK_MEMBER_NAME(Key_obj::R,"R");
	HX_MARK_MEMBER_NAME(Key_obj::S,"S");
	HX_MARK_MEMBER_NAME(Key_obj::T,"T");
	HX_MARK_MEMBER_NAME(Key_obj::U,"U");
	HX_MARK_MEMBER_NAME(Key_obj::V,"V");
	HX_MARK_MEMBER_NAME(Key_obj::W,"W");
	HX_MARK_MEMBER_NAME(Key_obj::X,"X");
	HX_MARK_MEMBER_NAME(Key_obj::Y,"Y");
	HX_MARK_MEMBER_NAME(Key_obj::Z,"Z");
	HX_MARK_MEMBER_NAME(Key_obj::F1,"F1");
	HX_MARK_MEMBER_NAME(Key_obj::F2,"F2");
	HX_MARK_MEMBER_NAME(Key_obj::F3,"F3");
	HX_MARK_MEMBER_NAME(Key_obj::F4,"F4");
	HX_MARK_MEMBER_NAME(Key_obj::F5,"F5");
	HX_MARK_MEMBER_NAME(Key_obj::F6,"F6");
	HX_MARK_MEMBER_NAME(Key_obj::F7,"F7");
	HX_MARK_MEMBER_NAME(Key_obj::F8,"F8");
	HX_MARK_MEMBER_NAME(Key_obj::F9,"F9");
	HX_MARK_MEMBER_NAME(Key_obj::F10,"F10");
	HX_MARK_MEMBER_NAME(Key_obj::F11,"F11");
	HX_MARK_MEMBER_NAME(Key_obj::F12,"F12");
	HX_MARK_MEMBER_NAME(Key_obj::F13,"F13");
	HX_MARK_MEMBER_NAME(Key_obj::F14,"F14");
	HX_MARK_MEMBER_NAME(Key_obj::F15,"F15");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_0,"DIGIT_0");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_1,"DIGIT_1");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_2,"DIGIT_2");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_3,"DIGIT_3");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_4,"DIGIT_4");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_5,"DIGIT_5");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_6,"DIGIT_6");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_7,"DIGIT_7");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_8,"DIGIT_8");
	HX_MARK_MEMBER_NAME(Key_obj::DIGIT_9,"DIGIT_9");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_0,"NUMPAD_0");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_1,"NUMPAD_1");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_2,"NUMPAD_2");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_3,"NUMPAD_3");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_4,"NUMPAD_4");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_5,"NUMPAD_5");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_6,"NUMPAD_6");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_7,"NUMPAD_7");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_8,"NUMPAD_8");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_9,"NUMPAD_9");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_ADD,"NUMPAD_ADD");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_DECIMAL,"NUMPAD_DECIMAL");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_DIVIDE,"NUMPAD_DIVIDE");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_ENTER,"NUMPAD_ENTER");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_MULTIPLY,"NUMPAD_MULTIPLY");
	HX_MARK_MEMBER_NAME(Key_obj::NUMPAD_SUBTRACT,"NUMPAD_SUBTRACT");
	HX_MARK_MEMBER_NAME(Key_obj::keyboardNameMap,"keyboardNameMap");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Key_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Key_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Key_obj::ANY,"ANY");
	HX_VISIT_MEMBER_NAME(Key_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Key_obj::UP,"UP");
	HX_VISIT_MEMBER_NAME(Key_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Key_obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(Key_obj::ENTER,"ENTER");
	HX_VISIT_MEMBER_NAME(Key_obj::CONTROL,"CONTROL");
	HX_VISIT_MEMBER_NAME(Key_obj::SPACE,"SPACE");
	HX_VISIT_MEMBER_NAME(Key_obj::SHIFT,"SHIFT");
	HX_VISIT_MEMBER_NAME(Key_obj::BACKSPACE,"BACKSPACE");
	HX_VISIT_MEMBER_NAME(Key_obj::CAPS_LOCK,"CAPS_LOCK");
	HX_VISIT_MEMBER_NAME(Key_obj::DELETE,"DELETE");
	HX_VISIT_MEMBER_NAME(Key_obj::END,"END");
	HX_VISIT_MEMBER_NAME(Key_obj::ESCAPE,"ESCAPE");
	HX_VISIT_MEMBER_NAME(Key_obj::HOME,"HOME");
	HX_VISIT_MEMBER_NAME(Key_obj::INSERT,"INSERT");
	HX_VISIT_MEMBER_NAME(Key_obj::TAB,"TAB");
	HX_VISIT_MEMBER_NAME(Key_obj::PAGE_DOWN,"PAGE_DOWN");
	HX_VISIT_MEMBER_NAME(Key_obj::PAGE_UP,"PAGE_UP");
	HX_VISIT_MEMBER_NAME(Key_obj::LEFT_SQUARE_BRACKET,"LEFT_SQUARE_BRACKET");
	HX_VISIT_MEMBER_NAME(Key_obj::RIGHT_SQUARE_BRACKET,"RIGHT_SQUARE_BRACKET");
	HX_VISIT_MEMBER_NAME(Key_obj::A,"A");
	HX_VISIT_MEMBER_NAME(Key_obj::B,"B");
	HX_VISIT_MEMBER_NAME(Key_obj::C,"C");
	HX_VISIT_MEMBER_NAME(Key_obj::D,"D");
	HX_VISIT_MEMBER_NAME(Key_obj::E,"E");
	HX_VISIT_MEMBER_NAME(Key_obj::F,"F");
	HX_VISIT_MEMBER_NAME(Key_obj::G,"G");
	HX_VISIT_MEMBER_NAME(Key_obj::H,"H");
	HX_VISIT_MEMBER_NAME(Key_obj::I,"I");
	HX_VISIT_MEMBER_NAME(Key_obj::J,"J");
	HX_VISIT_MEMBER_NAME(Key_obj::K,"K");
	HX_VISIT_MEMBER_NAME(Key_obj::L,"L");
	HX_VISIT_MEMBER_NAME(Key_obj::M,"M");
	HX_VISIT_MEMBER_NAME(Key_obj::N,"N");
	HX_VISIT_MEMBER_NAME(Key_obj::O,"O");
	HX_VISIT_MEMBER_NAME(Key_obj::P,"P");
	HX_VISIT_MEMBER_NAME(Key_obj::Q,"Q");
	HX_VISIT_MEMBER_NAME(Key_obj::R,"R");
	HX_VISIT_MEMBER_NAME(Key_obj::S,"S");
	HX_VISIT_MEMBER_NAME(Key_obj::T,"T");
	HX_VISIT_MEMBER_NAME(Key_obj::U,"U");
	HX_VISIT_MEMBER_NAME(Key_obj::V,"V");
	HX_VISIT_MEMBER_NAME(Key_obj::W,"W");
	HX_VISIT_MEMBER_NAME(Key_obj::X,"X");
	HX_VISIT_MEMBER_NAME(Key_obj::Y,"Y");
	HX_VISIT_MEMBER_NAME(Key_obj::Z,"Z");
	HX_VISIT_MEMBER_NAME(Key_obj::F1,"F1");
	HX_VISIT_MEMBER_NAME(Key_obj::F2,"F2");
	HX_VISIT_MEMBER_NAME(Key_obj::F3,"F3");
	HX_VISIT_MEMBER_NAME(Key_obj::F4,"F4");
	HX_VISIT_MEMBER_NAME(Key_obj::F5,"F5");
	HX_VISIT_MEMBER_NAME(Key_obj::F6,"F6");
	HX_VISIT_MEMBER_NAME(Key_obj::F7,"F7");
	HX_VISIT_MEMBER_NAME(Key_obj::F8,"F8");
	HX_VISIT_MEMBER_NAME(Key_obj::F9,"F9");
	HX_VISIT_MEMBER_NAME(Key_obj::F10,"F10");
	HX_VISIT_MEMBER_NAME(Key_obj::F11,"F11");
	HX_VISIT_MEMBER_NAME(Key_obj::F12,"F12");
	HX_VISIT_MEMBER_NAME(Key_obj::F13,"F13");
	HX_VISIT_MEMBER_NAME(Key_obj::F14,"F14");
	HX_VISIT_MEMBER_NAME(Key_obj::F15,"F15");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_0,"DIGIT_0");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_1,"DIGIT_1");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_2,"DIGIT_2");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_3,"DIGIT_3");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_4,"DIGIT_4");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_5,"DIGIT_5");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_6,"DIGIT_6");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_7,"DIGIT_7");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_8,"DIGIT_8");
	HX_VISIT_MEMBER_NAME(Key_obj::DIGIT_9,"DIGIT_9");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_0,"NUMPAD_0");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_1,"NUMPAD_1");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_2,"NUMPAD_2");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_3,"NUMPAD_3");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_4,"NUMPAD_4");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_5,"NUMPAD_5");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_6,"NUMPAD_6");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_7,"NUMPAD_7");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_8,"NUMPAD_8");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_9,"NUMPAD_9");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_ADD,"NUMPAD_ADD");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_DECIMAL,"NUMPAD_DECIMAL");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_DIVIDE,"NUMPAD_DIVIDE");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_ENTER,"NUMPAD_ENTER");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_MULTIPLY,"NUMPAD_MULTIPLY");
	HX_VISIT_MEMBER_NAME(Key_obj::NUMPAD_SUBTRACT,"NUMPAD_SUBTRACT");
	HX_VISIT_MEMBER_NAME(Key_obj::keyboardNameMap,"keyboardNameMap");
};

#endif

hx::Class Key_obj::__mClass;

static ::String Key_obj_sStaticFields[] = {
	HX_HCSTRING("ANY","\xcc","\x96","\x31","\x00"),
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d"),
	HX_HCSTRING("ENTER","\xf8","\xa4","\x74","\xee"),
	HX_HCSTRING("CONTROL","\x3d","\x3f","\x55","\x99"),
	HX_HCSTRING("SPACE","\xa6","\xc4","\x54","\xff"),
	HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa"),
	HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6"),
	HX_HCSTRING("CAPS_LOCK","\x09","\x04","\xdb","\xce"),
	HX_HCSTRING("DELETE","\x2b","\x6c","\x5b","\x1d"),
	HX_HCSTRING("END","\xbb","\x9f","\x34","\x00"),
	HX_HCSTRING("ESCAPE","\x81","\xef","\x5c","\x8d"),
	HX_HCSTRING("HOME","\x1f","\x92","\xd3","\x2f"),
	HX_HCSTRING("INSERT","\x39","\xef","\x5f","\x50"),
	HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00"),
	HX_HCSTRING("PAGE_DOWN","\x92","\x7b","\x93","\x70"),
	HX_HCSTRING("PAGE_UP","\x8b","\xd9","\x3e","\x0b"),
	HX_HCSTRING("LEFT_SQUARE_BRACKET","\x9e","\x5d","\xcb","\x6d"),
	HX_HCSTRING("RIGHT_SQUARE_BRACKET","\x89","\x5d","\x90","\x55"),
	HX_HCSTRING("A","\x41","\x00","\x00","\x00"),
	HX_HCSTRING("B","\x42","\x00","\x00","\x00"),
	HX_HCSTRING("C","\x43","\x00","\x00","\x00"),
	HX_HCSTRING("D","\x44","\x00","\x00","\x00"),
	HX_HCSTRING("E","\x45","\x00","\x00","\x00"),
	HX_HCSTRING("F","\x46","\x00","\x00","\x00"),
	HX_HCSTRING("G","\x47","\x00","\x00","\x00"),
	HX_HCSTRING("H","\x48","\x00","\x00","\x00"),
	HX_HCSTRING("I","\x49","\x00","\x00","\x00"),
	HX_HCSTRING("J","\x4a","\x00","\x00","\x00"),
	HX_HCSTRING("K","\x4b","\x00","\x00","\x00"),
	HX_HCSTRING("L","\x4c","\x00","\x00","\x00"),
	HX_HCSTRING("M","\x4d","\x00","\x00","\x00"),
	HX_HCSTRING("N","\x4e","\x00","\x00","\x00"),
	HX_HCSTRING("O","\x4f","\x00","\x00","\x00"),
	HX_HCSTRING("P","\x50","\x00","\x00","\x00"),
	HX_HCSTRING("Q","\x51","\x00","\x00","\x00"),
	HX_HCSTRING("R","\x52","\x00","\x00","\x00"),
	HX_HCSTRING("S","\x53","\x00","\x00","\x00"),
	HX_HCSTRING("T","\x54","\x00","\x00","\x00"),
	HX_HCSTRING("U","\x55","\x00","\x00","\x00"),
	HX_HCSTRING("V","\x56","\x00","\x00","\x00"),
	HX_HCSTRING("W","\x57","\x00","\x00","\x00"),
	HX_HCSTRING("X","\x58","\x00","\x00","\x00"),
	HX_HCSTRING("Y","\x59","\x00","\x00","\x00"),
	HX_HCSTRING("Z","\x5a","\x00","\x00","\x00"),
	HX_HCSTRING("F1","\x2b","\x3d","\x00","\x00"),
	HX_HCSTRING("F2","\x2c","\x3d","\x00","\x00"),
	HX_HCSTRING("F3","\x2d","\x3d","\x00","\x00"),
	HX_HCSTRING("F4","\x2e","\x3d","\x00","\x00"),
	HX_HCSTRING("F5","\x2f","\x3d","\x00","\x00"),
	HX_HCSTRING("F6","\x30","\x3d","\x00","\x00"),
	HX_HCSTRING("F7","\x31","\x3d","\x00","\x00"),
	HX_HCSTRING("F8","\x32","\x3d","\x00","\x00"),
	HX_HCSTRING("F9","\x33","\x3d","\x00","\x00"),
	HX_HCSTRING("F10","\xa5","\x48","\x35","\x00"),
	HX_HCSTRING("F11","\xa6","\x48","\x35","\x00"),
	HX_HCSTRING("F12","\xa7","\x48","\x35","\x00"),
	HX_HCSTRING("F13","\xa8","\x48","\x35","\x00"),
	HX_HCSTRING("F14","\xa9","\x48","\x35","\x00"),
	HX_HCSTRING("F15","\xaa","\x48","\x35","\x00"),
	HX_HCSTRING("DIGIT_0","\xbe","\xb5","\xb4","\x4d"),
	HX_HCSTRING("DIGIT_1","\xbf","\xb5","\xb4","\x4d"),
	HX_HCSTRING("DIGIT_2","\xc0","\xb5","\xb4","\x4d"),
	HX_HCSTRING("DIGIT_3","\xc1","\xb5","\xb4","\x4d"),
	HX_HCSTRING("DIGIT_4","\xc2","\xb5","\xb4","\x4d"),
	HX_HCSTRING("DIGIT_5","\xc3","\xb5","\xb4","\x4d"),
	HX_HCSTRING("DIGIT_6","\xc4","\xb5","\xb4","\x4d"),
	HX_HCSTRING("DIGIT_7","\xc5","\xb5","\xb4","\x4d"),
	HX_HCSTRING("DIGIT_8","\xc6","\xb5","\xb4","\x4d"),
	HX_HCSTRING("DIGIT_9","\xc7","\xb5","\xb4","\x4d"),
	HX_HCSTRING("NUMPAD_0","\xfe","\x2e","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_1","\xff","\x2e","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_2","\x00","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_3","\x01","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_4","\x02","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_5","\x03","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_6","\x04","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_7","\x05","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_8","\x06","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_9","\x07","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_ADD","\x4f","\x8c","\x28","\x37"),
	HX_HCSTRING("NUMPAD_DECIMAL","\xbf","\xc5","\x36","\x01"),
	HX_HCSTRING("NUMPAD_DIVIDE","\xeb","\x41","\x1f","\x90"),
	HX_HCSTRING("NUMPAD_ENTER","\xc6","\x52","\xe2","\x0f"),
	HX_HCSTRING("NUMPAD_MULTIPLY","\x16","\xd9","\xd8","\x96"),
	HX_HCSTRING("NUMPAD_SUBTRACT","\x06","\x6c","\x5d","\xf4"),
	HX_HCSTRING("nameOfKey","\x7d","\x36","\xd4","\x26"),
	HX_HCSTRING("keyboardNameMap","\x2a","\xef","\x80","\xb4"),
	HX_HCSTRING("keyFromName","\x94","\xbd","\xef","\xee"),
	::String(null())
};

void Key_obj::__register()
{
	hx::Object *dummy = new Key_obj;
	Key_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.Key","\x50","\x54","\x48","\x20");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Key_obj::__GetStatic;
	__mClass->mSetStaticField = &Key_obj::__SetStatic;
	__mClass->mMarkFunc = Key_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Key_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Key_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Key_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Key_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Key_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Key_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_7_boot)
HXDLIN(   7)		ANY = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_9_boot)
HXDLIN(   9)		LEFT = (int)37;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_10_boot)
HXDLIN(  10)		UP = (int)38;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_11_boot)
HXDLIN(  11)		RIGHT = (int)39;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_12_boot)
HXDLIN(  12)		DOWN = (int)40;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_14_boot)
HXDLIN(  14)		ENTER = (int)13;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_15_boot)
HXDLIN(  15)		CONTROL = (int)17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_16_boot)
HXDLIN(  16)		SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_17_boot)
HXDLIN(  17)		SHIFT = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_18_boot)
HXDLIN(  18)		BACKSPACE = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_19_boot)
HXDLIN(  19)		CAPS_LOCK = (int)20;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_20_boot)
HXDLIN(  20)		DELETE = (int)46;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_21_boot)
HXDLIN(  21)		END = (int)35;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_22_boot)
HXDLIN(  22)		ESCAPE = (int)27;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_23_boot)
HXDLIN(  23)		HOME = (int)36;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_24_boot)
HXDLIN(  24)		INSERT = (int)45;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_25_boot)
HXDLIN(  25)		TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_26_boot)
HXDLIN(  26)		PAGE_DOWN = (int)34;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_27_boot)
HXDLIN(  27)		PAGE_UP = (int)33;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_28_boot)
HXDLIN(  28)		LEFT_SQUARE_BRACKET = (int)219;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_29_boot)
HXDLIN(  29)		RIGHT_SQUARE_BRACKET = (int)221;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_60_boot)
HXDLIN(  60)		A = (int)97;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_61_boot)
HXDLIN(  61)		B = (int)98;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_62_boot)
HXDLIN(  62)		C = (int)99;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_63_boot)
HXDLIN(  63)		D = (int)100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_64_boot)
HXDLIN(  64)		E = (int)101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_65_boot)
HXDLIN(  65)		F = (int)102;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_66_boot)
HXDLIN(  66)		G = (int)103;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_67_boot)
HXDLIN(  67)		H = (int)104;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_68_boot)
HXDLIN(  68)		I = (int)105;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_69_boot)
HXDLIN(  69)		J = (int)106;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_70_boot)
HXDLIN(  70)		K = (int)107;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_71_boot)
HXDLIN(  71)		L = (int)108;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_72_boot)
HXDLIN(  72)		M = (int)109;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_73_boot)
HXDLIN(  73)		N = (int)110;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_74_boot)
HXDLIN(  74)		O = (int)111;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_75_boot)
HXDLIN(  75)		P = (int)112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_76_boot)
HXDLIN(  76)		Q = (int)113;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_77_boot)
HXDLIN(  77)		R = (int)114;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_78_boot)
HXDLIN(  78)		S = (int)115;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_79_boot)
HXDLIN(  79)		T = (int)116;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_80_boot)
HXDLIN(  80)		U = (int)117;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_81_boot)
HXDLIN(  81)		V = (int)118;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_82_boot)
HXDLIN(  82)		W = (int)119;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_83_boot)
HXDLIN(  83)		X = (int)120;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_84_boot)
HXDLIN(  84)		Y = (int)121;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_85_boot)
HXDLIN(  85)		Z = (int)122;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_88_boot)
HXDLIN(  88)		F1 = (int)112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_89_boot)
HXDLIN(  89)		F2 = (int)113;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_90_boot)
HXDLIN(  90)		F3 = (int)114;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_91_boot)
HXDLIN(  91)		F4 = (int)115;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_92_boot)
HXDLIN(  92)		F5 = (int)116;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_93_boot)
HXDLIN(  93)		F6 = (int)117;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_94_boot)
HXDLIN(  94)		F7 = (int)118;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_95_boot)
HXDLIN(  95)		F8 = (int)119;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_96_boot)
HXDLIN(  96)		F9 = (int)120;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_97_boot)
HXDLIN(  97)		F10 = (int)121;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_98_boot)
HXDLIN(  98)		F11 = (int)122;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_99_boot)
HXDLIN(  99)		F12 = (int)123;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_100_boot)
HXDLIN( 100)		F13 = (int)124;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_101_boot)
HXDLIN( 101)		F14 = (int)125;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_102_boot)
HXDLIN( 102)		F15 = (int)126;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_104_boot)
HXDLIN( 104)		DIGIT_0 = (int)48;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_105_boot)
HXDLIN( 105)		DIGIT_1 = (int)49;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_106_boot)
HXDLIN( 106)		DIGIT_2 = (int)50;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_107_boot)
HXDLIN( 107)		DIGIT_3 = (int)51;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_108_boot)
HXDLIN( 108)		DIGIT_4 = (int)52;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_109_boot)
HXDLIN( 109)		DIGIT_5 = (int)53;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_110_boot)
HXDLIN( 110)		DIGIT_6 = (int)54;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_111_boot)
HXDLIN( 111)		DIGIT_7 = (int)55;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_112_boot)
HXDLIN( 112)		DIGIT_8 = (int)56;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_113_boot)
HXDLIN( 113)		DIGIT_9 = (int)57;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_115_boot)
HXDLIN( 115)		NUMPAD_0 = (int)96;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_116_boot)
HXDLIN( 116)		NUMPAD_1 = (int)97;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_117_boot)
HXDLIN( 117)		NUMPAD_2 = (int)98;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_118_boot)
HXDLIN( 118)		NUMPAD_3 = (int)99;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_119_boot)
HXDLIN( 119)		NUMPAD_4 = (int)100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_120_boot)
HXDLIN( 120)		NUMPAD_5 = (int)101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_121_boot)
HXDLIN( 121)		NUMPAD_6 = (int)102;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_122_boot)
HXDLIN( 122)		NUMPAD_7 = (int)103;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_123_boot)
HXDLIN( 123)		NUMPAD_8 = (int)104;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_124_boot)
HXDLIN( 124)		NUMPAD_9 = (int)105;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_125_boot)
HXDLIN( 125)		NUMPAD_ADD = (int)107;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_126_boot)
HXDLIN( 126)		NUMPAD_DECIMAL = (int)110;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_127_boot)
HXDLIN( 127)		NUMPAD_DIVIDE = (int)111;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_128_boot)
HXDLIN( 128)		NUMPAD_ENTER = (int)108;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_129_boot)
HXDLIN( 129)		NUMPAD_MULTIPLY = (int)106;
            	}
{
            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_130_boot)
HXDLIN( 130)		NUMPAD_SUBTRACT = (int)109;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_912daf19c2ad432d_177_boot)
HXLINE( 178)			 ::haxe::ds::StringMap m =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 179)			m->set(HX_("NUMBER_0",fa,89,c6,33),(int)48);
HXLINE( 180)			m->set(HX_("NUMBER_1",fb,89,c6,33),(int)49);
HXLINE( 181)			m->set(HX_("NUMBER_2",fc,89,c6,33),(int)50);
HXLINE( 182)			m->set(HX_("NUMBER_3",fd,89,c6,33),(int)51);
HXLINE( 183)			m->set(HX_("NUMBER_4",fe,89,c6,33),(int)52);
HXLINE( 184)			m->set(HX_("NUMBER_5",ff,89,c6,33),(int)53);
HXLINE( 185)			m->set(HX_("NUMBER_6",00,8a,c6,33),(int)54);
HXLINE( 186)			m->set(HX_("NUMBER_7",01,8a,c6,33),(int)55);
HXLINE( 187)			m->set(HX_("NUMBER_8",02,8a,c6,33),(int)56);
HXLINE( 188)			m->set(HX_("NUMBER_9",03,8a,c6,33),(int)57);
HXLINE( 189)			m->set(HX_("A",41,00,00,00),(int)65);
HXLINE( 190)			m->set(HX_("B",42,00,00,00),(int)66);
HXLINE( 191)			m->set(HX_("C",43,00,00,00),(int)67);
HXLINE( 192)			m->set(HX_("D",44,00,00,00),(int)68);
HXLINE( 193)			m->set(HX_("E",45,00,00,00),(int)69);
HXLINE( 194)			m->set(HX_("F",46,00,00,00),(int)70);
HXLINE( 195)			m->set(HX_("G",47,00,00,00),(int)71);
HXLINE( 196)			m->set(HX_("H",48,00,00,00),(int)72);
HXLINE( 197)			m->set(HX_("I",49,00,00,00),(int)73);
HXLINE( 198)			m->set(HX_("J",4a,00,00,00),(int)74);
HXLINE( 199)			m->set(HX_("K",4b,00,00,00),(int)75);
HXLINE( 200)			m->set(HX_("L",4c,00,00,00),(int)76);
HXLINE( 201)			m->set(HX_("M",4d,00,00,00),(int)77);
HXLINE( 202)			m->set(HX_("N",4e,00,00,00),(int)78);
HXLINE( 203)			m->set(HX_("O",4f,00,00,00),(int)79);
HXLINE( 204)			m->set(HX_("P",50,00,00,00),(int)80);
HXLINE( 205)			m->set(HX_("Q",51,00,00,00),(int)81);
HXLINE( 206)			m->set(HX_("R",52,00,00,00),(int)82);
HXLINE( 207)			m->set(HX_("S",53,00,00,00),(int)83);
HXLINE( 208)			m->set(HX_("T",54,00,00,00),(int)84);
HXLINE( 209)			m->set(HX_("U",55,00,00,00),(int)85);
HXLINE( 210)			m->set(HX_("V",56,00,00,00),(int)86);
HXLINE( 211)			m->set(HX_("W",57,00,00,00),(int)87);
HXLINE( 212)			m->set(HX_("X",58,00,00,00),(int)88);
HXLINE( 213)			m->set(HX_("Y",59,00,00,00),(int)89);
HXLINE( 214)			m->set(HX_("Z",5a,00,00,00),(int)90);
HXLINE( 215)			m->set(HX_("NUMPAD_0",fe,2e,b3,40),(int)96);
HXLINE( 216)			m->set(HX_("NUMPAD_1",ff,2e,b3,40),(int)97);
HXLINE( 217)			m->set(HX_("NUMPAD_2",00,2f,b3,40),(int)98);
HXLINE( 218)			m->set(HX_("NUMPAD_3",01,2f,b3,40),(int)99);
HXLINE( 219)			m->set(HX_("NUMPAD_4",02,2f,b3,40),(int)100);
HXLINE( 220)			m->set(HX_("NUMPAD_5",03,2f,b3,40),(int)101);
HXLINE( 221)			m->set(HX_("NUMPAD_6",04,2f,b3,40),(int)102);
HXLINE( 222)			m->set(HX_("NUMPAD_7",05,2f,b3,40),(int)103);
HXLINE( 223)			m->set(HX_("NUMPAD_8",06,2f,b3,40),(int)104);
HXLINE( 224)			m->set(HX_("NUMPAD_9",07,2f,b3,40),(int)105);
HXLINE( 225)			m->set(HX_("NUMPAD_MULTIPLY",16,d9,d8,96),(int)106);
HXLINE( 226)			m->set(HX_("NUMPAD_ADD",4f,8c,28,37),(int)107);
HXLINE( 227)			m->set(HX_("NUMPAD_ENTER",c6,52,e2,0f),(int)108);
HXLINE( 228)			m->set(HX_("NUMPAD_SUBTRACT",06,6c,5d,f4),(int)109);
HXLINE( 229)			m->set(HX_("NUMPAD_DECIMAL",bf,c5,36,01),(int)110);
HXLINE( 230)			m->set(HX_("NUMPAD_DIVIDE",eb,41,1f,90),(int)111);
HXLINE( 231)			m->set(HX_("F1",2b,3d,00,00),(int)112);
HXLINE( 232)			m->set(HX_("F2",2c,3d,00,00),(int)113);
HXLINE( 233)			m->set(HX_("F3",2d,3d,00,00),(int)114);
HXLINE( 234)			m->set(HX_("F4",2e,3d,00,00),(int)115);
HXLINE( 235)			m->set(HX_("F5",2f,3d,00,00),(int)116);
HXLINE( 236)			m->set(HX_("F6",30,3d,00,00),(int)117);
HXLINE( 237)			m->set(HX_("F7",31,3d,00,00),(int)118);
HXLINE( 238)			m->set(HX_("F8",32,3d,00,00),(int)119);
HXLINE( 239)			m->set(HX_("F9",33,3d,00,00),(int)120);
HXLINE( 240)			m->set(HX_("F10",a5,48,35,00),(int)121);
HXLINE( 241)			m->set(HX_("F11",a6,48,35,00),(int)122);
HXLINE( 242)			m->set(HX_("F12",a7,48,35,00),(int)123);
HXLINE( 243)			m->set(HX_("F13",a8,48,35,00),(int)124);
HXLINE( 244)			m->set(HX_("F14",a9,48,35,00),(int)125);
HXLINE( 245)			m->set(HX_("F15",aa,48,35,00),(int)126);
HXLINE( 246)			m->set(HX_("BACKSPACE",1f,f5,42,c6),(int)8);
HXLINE( 247)			m->set(HX_("TAB",35,f6,3f,00),(int)9);
HXLINE( 248)			m->set(HX_("ALTERNATE",1a,39,8c,30),(int)18);
HXLINE( 249)			m->set(HX_("ENTER",f8,a4,74,ee),(int)13);
HXLINE( 250)			m->set(HX_("COMMAND",2b,45,41,01),(int)15);
HXLINE( 251)			m->set(HX_("SHIFT",62,24,11,fa),(int)16);
HXLINE( 252)			m->set(HX_("CONTROL",3d,3f,55,99),(int)17);
HXLINE( 253)			m->set(HX_("BREAK",9f,5c,da,36),(int)19);
HXLINE( 254)			m->set(HX_("CAPS_LOCK",09,04,db,ce),(int)20);
HXLINE( 255)			m->set(HX_("NUMPAD",cd,ce,07,54),(int)21);
HXLINE( 256)			m->set(HX_("ESCAPE",81,ef,5c,8d),(int)27);
HXLINE( 257)			m->set(HX_("SPACE",a6,c4,54,ff),(int)32);
HXLINE( 258)			m->set(HX_("PAGE_UP",8b,d9,3e,0b),(int)33);
HXLINE( 259)			m->set(HX_("PAGE_DOWN",92,7b,93,70),(int)34);
HXLINE( 260)			m->set(HX_("END",bb,9f,34,00),(int)35);
HXLINE( 261)			m->set(HX_("HOME",1f,92,d3,2f),(int)36);
HXLINE( 262)			m->set(HX_("LEFT",07,d0,70,32),(int)37);
HXLINE( 263)			m->set(HX_("RIGHT",bc,43,52,67),(int)39);
HXLINE( 264)			m->set(HX_("UP",5b,4a,00,00),(int)38);
HXLINE( 265)			m->set(HX_("DOWN",62,c0,2e,2d),(int)40);
HXLINE( 266)			m->set(HX_("INSERT",39,ef,5f,50),(int)45);
HXLINE( 267)			m->set(HX_("DELETE",2b,6c,5b,1d),(int)46);
HXLINE( 268)			m->set(HX_("NUMLOCK",11,e9,32,30),(int)144);
HXLINE( 269)			m->set(HX_("SEMICOLON",11,86,2a,49),(int)186);
HXLINE( 270)			m->set(HX_("EQUAL",94,07,71,f0),(int)187);
HXLINE( 271)			m->set(HX_("COMMA",b5,69,4b,c8),(int)188);
HXLINE( 272)			m->set(HX_("MINUS",50,b8,56,86),(int)189);
HXLINE( 273)			m->set(HX_("PERIOD",01,0d,9e,ed),(int)190);
HXLINE( 274)			m->set(HX_("SLASH",1d,f8,af,fc),(int)191);
HXLINE( 275)			m->set(HX_("BACKQUOTE",95,8b,ce,a2),(int)192);
HXLINE( 276)			m->set(HX_("LEFTBRACKET",e1,a8,04,a4),(int)219);
HXLINE( 277)			m->set(HX_("BACKSLASH",96,28,9e,c3),(int)220);
HXLINE( 278)			m->set(HX_("RIGHTBRACKET",cc,45,32,57),(int)221);
HXLINE( 279)			m->set(HX_("QUOTE",1c,5b,e0,db),(int)222);
HXLINE( 280)			return m;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_912daf19c2ad432d_177_boot)
HXDLIN( 177)		keyboardNameMap =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace com
} // end namespace stencyl
