// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_InlineShader
#include <com/stencyl/graphics/shaders/InlineShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51ca55f479e9c840_6_new,"com.stencyl.graphics.shaders.InlineShader","new",0x37a79bc4,"com.stencyl.graphics.shaders.InlineShader.new","com/stencyl/graphics/shaders/InlineShader.hx",6,0xfcddc26c)
namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{

void InlineShader_obj::__construct(::String script){
            	HX_GC_STACKFRAME(&_hx_pos_51ca55f479e9c840_6_new)
HXLINE(   7)		super::__construct();
HXLINE(   8)		this->model =  ::com::stencyl::graphics::shaders::PostProcess_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),script,true);
            	}

Dynamic InlineShader_obj::__CreateEmpty() { return new InlineShader_obj; }

void *InlineShader_obj::_hx_vtable = 0;

Dynamic InlineShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InlineShader_obj > _hx_result = new InlineShader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InlineShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x488ca67b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x488ca67b;
	} else {
		return inClassId==(int)0x4a037b56;
	}
}


hx::ObjectPtr< InlineShader_obj > InlineShader_obj::__new(::String script) {
	hx::ObjectPtr< InlineShader_obj > __this = new InlineShader_obj();
	__this->__construct(script);
	return __this;
}

hx::ObjectPtr< InlineShader_obj > InlineShader_obj::__alloc(hx::Ctx *_hx_ctx,::String script) {
	InlineShader_obj *__this = (InlineShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InlineShader_obj), true, "com.stencyl.graphics.shaders.InlineShader"));
	*(void **)__this = InlineShader_obj::_hx_vtable;
	__this->__construct(script);
	return __this;
}

InlineShader_obj::InlineShader_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *InlineShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *InlineShader_obj_sStaticStorageInfo = 0;
#endif

static void InlineShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InlineShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InlineShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InlineShader_obj::__mClass,"__mClass");
};

#endif

hx::Class InlineShader_obj::__mClass;

void InlineShader_obj::__register()
{
	hx::Object *dummy = new InlineShader_obj;
	InlineShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.shaders.InlineShader","\xd2","\xa9","\x3d","\x14");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = InlineShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< InlineShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InlineShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InlineShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InlineShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders
