// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Data
#include <com/stencyl/Data.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Attribute
#include <com/stencyl/behavior/Attribute.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Font
#include <com/stencyl/models/Font.h>
#endif
#ifndef INCLUDED_com_stencyl_models_GameModel
#include <com/stencyl/models/GameModel.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Scene
#include <com/stencyl/models/Scene.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Sound
#include <com/stencyl/models/Sound.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_ActorType
#include <com/stencyl/models/actor/ActorType.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_LazyIntMap
#include <com/stencyl/utils/LazyIntMap.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e6f8465d34882897_21_new,"com.stencyl.behavior.Attribute","new",0xed6fd9e1,"com.stencyl.behavior.Attribute.new","com/stencyl/behavior/Attribute.hx",21,0xe566c5ee)
HX_LOCAL_STACK_FRAME(_hx_pos_e6f8465d34882897_34_getRealValue,"com.stencyl.behavior.Attribute","getRealValue",0x57f28a1c,"com.stencyl.behavior.Attribute.getRealValue","com/stencyl/behavior/Attribute.hx",34,0xe566c5ee)
namespace com{
namespace stencyl{
namespace behavior{

void Attribute_obj::__construct(int ID,::String fieldName,::String fullName, ::Dynamic value,::String type, ::Dynamic parent,bool hidden){
            	HX_STACKFRAME(&_hx_pos_e6f8465d34882897_21_new)
HXLINE(  22)		this->ID = ID;
HXLINE(  23)		this->fieldName = fieldName;
HXLINE(  24)		this->fullName = fullName;
HXLINE(  25)		this->type = type;
HXLINE(  27)		this->value = value;
HXLINE(  28)		this->realValue = null();
HXLINE(  30)		this->hidden = hidden;
            	}

Dynamic Attribute_obj::__CreateEmpty() { return new Attribute_obj; }

void *Attribute_obj::_hx_vtable = 0;

Dynamic Attribute_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Attribute_obj > _hx_result = new Attribute_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Attribute_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x13581f9b;
}

 ::Dynamic Attribute_obj::getRealValue(){
            	HX_GC_STACKFRAME(&_hx_pos_e6f8465d34882897_34_getRealValue)
HXLINE(  35)		if (hx::IsNull( this->realValue )) {
HXLINE(  37)			if ((this->type == HX_("int",ef,0c,50,00))) {
HXLINE(  39)				this->realValue = this->value;
            			}
            			else {
HXLINE(  42)				bool _hx_tmp;
HXDLIN(  42)				if ((this->type != HX_("float",9c,c5,96,02))) {
HXLINE(  42)					_hx_tmp = (this->type == HX_("number",c9,86,7a,a1));
            				}
            				else {
HXLINE(  42)					_hx_tmp = true;
            				}
HXDLIN(  42)				if (_hx_tmp) {
HXLINE(  44)					this->realValue = this->value;
            				}
            				else {
HXLINE(  47)					bool _hx_tmp1;
HXDLIN(  47)					if ((this->type != HX_("bool",2a,84,1b,41))) {
HXLINE(  47)						_hx_tmp1 = (this->type == HX_("boolean",a8,ea,fe,7d));
            					}
            					else {
HXLINE(  47)						_hx_tmp1 = true;
            					}
HXDLIN(  47)					if (_hx_tmp1) {
HXLINE(  49)						this->realValue = this->value;
            					}
            					else {
HXLINE(  52)						if ((this->type == HX_("color",63,71,5c,4a))) {
HXLINE(  54)							this->realValue = this->value;
            						}
            						else {
HXLINE(  57)							bool _hx_tmp2;
HXDLIN(  57)							bool _hx_tmp3;
HXDLIN(  57)							if ((this->type != HX_("sound",cf,8c,cc,80))) {
HXLINE(  57)								_hx_tmp3 = (this->type == HX_("actortype",2f,dc,08,36));
            							}
            							else {
HXLINE(  57)								_hx_tmp3 = true;
            							}
HXDLIN(  57)							if (!(_hx_tmp3)) {
HXLINE(  57)								_hx_tmp2 = (this->type == HX_("font",cf,5d,c0,43));
            							}
            							else {
HXLINE(  57)								_hx_tmp2 = true;
            							}
HXDLIN(  57)							if (_hx_tmp2) {
HXLINE(  59)								if (hx::IsNotNull( this->value )) {
HXLINE(  61)									if (hx::IsEq( this->value,(int)-1 )) {
HXLINE(  63)										this->realValue = null();
            									}
            									else {
HXLINE(  68)										this->realValue = ::com::stencyl::Data_obj::get()->resources->get(this->value).StaticCast<  ::com::stencyl::models::Resource >();
            									}
HXLINE(  71)									bool _hx_tmp4;
HXDLIN(  71)									if ((this->type == HX_("font",cf,5d,c0,43))) {
HXLINE(  71)										_hx_tmp4 = !(::Std_obj::is(this->realValue,hx::ClassOf< ::com::stencyl::models::Font >()));
            									}
            									else {
HXLINE(  71)										_hx_tmp4 = false;
            									}
HXDLIN(  71)									if (_hx_tmp4) {
HXLINE(  73)										this->realValue = null();
            									}
HXLINE(  76)									bool _hx_tmp5;
HXDLIN(  76)									if ((this->type == HX_("sound",cf,8c,cc,80))) {
HXLINE(  76)										_hx_tmp5 = !(::Std_obj::is(this->realValue,hx::ClassOf< ::com::stencyl::models::Sound >()));
            									}
            									else {
HXLINE(  76)										_hx_tmp5 = false;
            									}
HXDLIN(  76)									if (_hx_tmp5) {
HXLINE(  78)										this->realValue = null();
            									}
HXLINE(  81)									bool _hx_tmp6;
HXDLIN(  81)									if ((this->type == HX_("actortype",2f,dc,08,36))) {
HXLINE(  81)										_hx_tmp6 = !(::Std_obj::is(this->realValue,hx::ClassOf< ::com::stencyl::models::actor::ActorType >()));
            									}
            									else {
HXLINE(  81)										_hx_tmp6 = false;
            									}
HXDLIN(  81)									if (_hx_tmp6) {
HXLINE(  83)										this->realValue = null();
            									}
            								}
            							}
            							else {
HXLINE(  88)								if ((this->type == HX_("actorgroup",2a,10,e1,90))) {
HXLINE(  91)									this->realValue = this->value;
            								}
            								else {
HXLINE(  94)									if ((this->type == HX_("control",5d,6b,81,19))) {
HXLINE(  96)										this->realValue = this->value;
            									}
            									else {
HXLINE(  99)										if ((this->type == HX_("effect",91,5a,a3,60))) {
HXLINE( 101)											this->realValue = this->value;
            										}
            										else {
HXLINE( 104)											if ((this->type == HX_("animation",04,ef,34,4b))) {
HXLINE( 106)												this->realValue = this->value;
            											}
            											else {
HXLINE( 109)												if ((this->type == HX_("game-attribute",c1,98,f5,5f))) {
HXLINE( 111)													this->realValue = this->value;
            												}
            												else {
HXLINE( 114)													if ((this->type == HX_("scene",4c,d9,d1,78))) {
HXLINE( 116)														::Dynamic this1 = ::com::stencyl::models::GameModel_obj::get()->scenes;
HXDLIN( 116)														this->realValue = ( ( ::haxe::ds::IntMap)(this1) )->get(( (int)(this->value) )).StaticCast<  ::com::stencyl::models::Scene >();
            													}
            													else {
HXLINE( 119)														if ((this->type == HX_("text",ad,cc,f9,4c))) {
HXLINE( 121)															this->realValue = this->value;
            														}
            														else {
HXLINE( 124)															if ((this->type == HX_("list",5e,1c,b3,47))) {
HXLINE( 126)																this->realValue = this->value;
HXLINE( 128)																bool _hx_tmp7;
HXDLIN( 128)																if (hx::IsNotNull( this->value )) {
HXLINE( 128)																	_hx_tmp7 = hx::IsEq( this->value,HX_("",00,00,00,00) );
            																}
            																else {
HXLINE( 128)																	_hx_tmp7 = true;
            																}
HXDLIN( 128)																if (_hx_tmp7) {
HXLINE( 130)																	this->realValue = ::cpp::VirtualArray_obj::__new();
            																}
            															}
            															else {
HXLINE( 134)																if ((this->type == HX_("map",9c,0a,53,00))) {
HXLINE( 136)																	this->realValue = this->value;
HXLINE( 138)																	bool _hx_tmp8;
HXDLIN( 138)																	if (hx::IsNotNull( this->value )) {
HXLINE( 138)																		_hx_tmp8 = hx::IsEq( this->value,HX_("",00,00,00,00) );
            																	}
            																	else {
HXLINE( 138)																		_hx_tmp8 = true;
            																	}
HXDLIN( 138)																	if (_hx_tmp8) {
HXLINE( 140)																		this->realValue =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            																	}
            																}
            																else {
HXLINE( 144)																	bool _hx_tmp9;
HXDLIN( 144)																	if (hx::IsNotNull( this->value )) {
HXLINE( 144)																		_hx_tmp9 = (this->type == HX_("actor",f5,ca,a6,1b));
            																	}
            																	else {
HXLINE( 144)																		_hx_tmp9 = false;
            																	}
HXDLIN( 144)																	if (_hx_tmp9) {
HXLINE( 146)																		if (hx::IsEq( this->value,HX_("thisactor",d7,ef,e0,f6) )) {
HXLINE( 148)																			this->realValue = this->parent;
            																		}
            																		else {
HXLINE( 153)																			this->realValue = ::Std_obj::parseInt(( (::String)(this->value) ));
            																		}
            																	}
            																	else {
HXLINE( 157)																		bool _hx_tmp10;
HXDLIN( 157)																		if (hx::IsNotNull( this->value )) {
HXLINE( 157)																			_hx_tmp10 = (this->type == HX_("joint",4a,39,28,52));
            																		}
            																		else {
HXLINE( 157)																			_hx_tmp10 = false;
            																		}
HXDLIN( 157)																		if (_hx_tmp10) {
HXLINE( 159)																			this->realValue = this->value;
            																		}
            																		else {
HXLINE( 162)																			bool _hx_tmp11;
HXDLIN( 162)																			if (hx::IsNotNull( this->value )) {
HXLINE( 162)																				_hx_tmp11 = (this->type == HX_("region",f4,c0,8c,00));
            																			}
            																			else {
HXLINE( 162)																				_hx_tmp11 = false;
            																			}
HXDLIN( 162)																			if (_hx_tmp11) {
HXLINE( 164)																				this->realValue = this->value;
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 168)		return this->realValue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Attribute_obj,getRealValue,return )


hx::ObjectPtr< Attribute_obj > Attribute_obj::__new(int ID,::String fieldName,::String fullName, ::Dynamic value,::String type, ::Dynamic parent,bool hidden) {
	hx::ObjectPtr< Attribute_obj > __this = new Attribute_obj();
	__this->__construct(ID,fieldName,fullName,value,type,parent,hidden);
	return __this;
}

hx::ObjectPtr< Attribute_obj > Attribute_obj::__alloc(hx::Ctx *_hx_ctx,int ID,::String fieldName,::String fullName, ::Dynamic value,::String type, ::Dynamic parent,bool hidden) {
	Attribute_obj *__this = (Attribute_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Attribute_obj), true, "com.stencyl.behavior.Attribute"));
	*(void **)__this = Attribute_obj::_hx_vtable;
	__this->__construct(ID,fieldName,fullName,value,type,parent,hidden);
	return __this;
}

Attribute_obj::Attribute_obj()
{
}

void Attribute_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Attribute);
	HX_MARK_MEMBER_NAME(ID,"ID");
	HX_MARK_MEMBER_NAME(fieldName,"fieldName");
	HX_MARK_MEMBER_NAME(fullName,"fullName");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(defaultValue,"defaultValue");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(realValue,"realValue");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(hidden,"hidden");
	HX_MARK_END_CLASS();
}

void Attribute_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ID,"ID");
	HX_VISIT_MEMBER_NAME(fieldName,"fieldName");
	HX_VISIT_MEMBER_NAME(fullName,"fullName");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(defaultValue,"defaultValue");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(realValue,"realValue");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(hidden,"hidden");
}

hx::Val Attribute_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { return hx::Val( ID ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"hidden") ) { return hx::Val( hidden ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fullName") ) { return hx::Val( fullName ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fieldName") ) { return hx::Val( fieldName ); }
		if (HX_FIELD_EQ(inName,"realValue") ) { return hx::Val( realValue ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { return hx::Val( defaultValue ); }
		if (HX_FIELD_EQ(inName,"getRealValue") ) { return hx::Val( getRealValue_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Attribute_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { ID=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hidden") ) { hidden=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fullName") ) { fullName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fieldName") ) { fieldName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realValue") ) { realValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { defaultValue=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Attribute_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"));
	outFields->push(HX_HCSTRING("fieldName","\x25","\x18","\x4e","\xe0"));
	outFields->push(HX_HCSTRING("fullName","\x7a","\xfb","\x12","\x5d"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("defaultValue","\xf0","\xba","\x13","\xe7"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("realValue","\x33","\xaf","\x7a","\x35"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("hidden","\x6a","\xff","\x95","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Attribute_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Attribute_obj,ID),HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00")},
	{hx::fsString,(int)offsetof(Attribute_obj,fieldName),HX_HCSTRING("fieldName","\x25","\x18","\x4e","\xe0")},
	{hx::fsString,(int)offsetof(Attribute_obj,fullName),HX_HCSTRING("fullName","\x7a","\xfb","\x12","\x5d")},
	{hx::fsString,(int)offsetof(Attribute_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsString,(int)offsetof(Attribute_obj,defaultValue),HX_HCSTRING("defaultValue","\xf0","\xba","\x13","\xe7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Attribute_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Attribute_obj,realValue),HX_HCSTRING("realValue","\x33","\xaf","\x7a","\x35")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Attribute_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsBool,(int)offsetof(Attribute_obj,hidden),HX_HCSTRING("hidden","\x6a","\xff","\x95","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Attribute_obj_sStaticStorageInfo = 0;
#endif

static ::String Attribute_obj_sMemberFields[] = {
	HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"),
	HX_HCSTRING("fieldName","\x25","\x18","\x4e","\xe0"),
	HX_HCSTRING("fullName","\x7a","\xfb","\x12","\x5d"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("defaultValue","\xf0","\xba","\x13","\xe7"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("realValue","\x33","\xaf","\x7a","\x35"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("hidden","\x6a","\xff","\x95","\x4c"),
	HX_HCSTRING("getRealValue","\xbd","\x4b","\xd1","\x44"),
	::String(null()) };

static void Attribute_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Attribute_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Attribute_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Attribute_obj::__mClass,"__mClass");
};

#endif

hx::Class Attribute_obj::__mClass;

void Attribute_obj::__register()
{
	hx::Object *dummy = new Attribute_obj;
	Attribute_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.behavior.Attribute","\x6f","\x55","\x6b","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Attribute_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Attribute_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Attribute_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Attribute_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Attribute_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Attribute_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace behavior
