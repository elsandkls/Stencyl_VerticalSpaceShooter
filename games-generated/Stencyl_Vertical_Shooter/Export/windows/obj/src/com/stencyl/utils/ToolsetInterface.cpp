// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Universal
#include <Universal.h>
#endif
#ifndef INCLUDED_com_stencyl_Config
#include <com/stencyl/Config.h>
#endif
#ifndef INCLUDED_com_stencyl_Data
#include <com/stencyl/Data.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Scene
#include <com/stencyl/models/Scene.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Assets
#include <com/stencyl/utils/Assets.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_HscriptRunner
#include <com/stencyl/utils/HscriptRunner.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_LazyIntMap
#include <com/stencyl/utils/LazyIntMap.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_ToolsetInterface
#include <com/stencyl/utils/ToolsetInterface.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_ProgressEvent
#include <openfl/events/ProgressEvent.h>
#endif
#ifndef INCLUDED_openfl_events_SecurityErrorEvent
#include <openfl/events/SecurityErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_Socket
#include <openfl/net/Socket.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d729eec6c01450e4_15_new,"com.stencyl.utils.ToolsetInterface","new",0xb03d164d,"com.stencyl.utils.ToolsetInterface.new","com/stencyl/utils/ToolsetInterface.hx",15,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_66_configureListeners,"com.stencyl.utils.ToolsetInterface","configureListeners",0xa4084b6c,"com.stencyl.utils.ToolsetInterface.configureListeners","com/stencyl/utils/ToolsetInterface.hx",66,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_75_unconfigureListeners,"com.stencyl.utils.ToolsetInterface","unconfigureListeners",0x6aa10ec5,"com.stencyl.utils.ToolsetInterface.unconfigureListeners","com/stencyl/utils/ToolsetInterface.hx",75,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_93_closeHandler,"com.stencyl.utils.ToolsetInterface","closeHandler",0x33ddbb65,"com.stencyl.utils.ToolsetInterface.closeHandler","com/stencyl/utils/ToolsetInterface.hx",93,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_97_connectHandler,"com.stencyl.utils.ToolsetInterface","connectHandler",0x838ba433,"com.stencyl.utils.ToolsetInterface.connectHandler","com/stencyl/utils/ToolsetInterface.hx",97,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_106_ioErrorHandler,"com.stencyl.utils.ToolsetInterface","ioErrorHandler",0xc420d51b,"com.stencyl.utils.ToolsetInterface.ioErrorHandler","com/stencyl/utils/ToolsetInterface.hx",106,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_114_securityErrorHandler,"com.stencyl.utils.ToolsetInterface","securityErrorHandler",0x7f945b35,"com.stencyl.utils.ToolsetInterface.securityErrorHandler","com/stencyl/utils/ToolsetInterface.hx",114,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_127_socketDataHandler,"com.stencyl.utils.ToolsetInterface","socketDataHandler",0xfd77787a,"com.stencyl.utils.ToolsetInterface.socketDataHandler","com/stencyl/utils/ToolsetInterface.hx",127,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_190_parseHeader,"com.stencyl.utils.ToolsetInterface","parseHeader",0x13f1310d,"com.stencyl.utils.ToolsetInterface.parseHeader","com/stencyl/utils/ToolsetInterface.hx",190,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_205_packetReady,"com.stencyl.utils.ToolsetInterface","packetReady",0x97f1e6a8,"com.stencyl.utils.ToolsetInterface.packetReady","com/stencyl/utils/ToolsetInterface.hx",205,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_296_packetReady,"com.stencyl.utils.ToolsetInterface","packetReady",0x97f1e6a8,"com.stencyl.utils.ToolsetInterface.packetReady","com/stencyl/utils/ToolsetInterface.hx",296,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_379_sendData,"com.stencyl.utils.ToolsetInterface","sendData",0x3c227285,"com.stencyl.utils.ToolsetInterface.sendData","com/stencyl/utils/ToolsetInterface.hx",379,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_390_sendBinaryData,"com.stencyl.utils.ToolsetInterface","sendBinaryData",0x585a2566,"com.stencyl.utils.ToolsetInterface.sendBinaryData","com/stencyl/utils/ToolsetInterface.hx",390,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_400_createPacket,"com.stencyl.utils.ToolsetInterface","createPacket",0xa824ac17,"com.stencyl.utils.ToolsetInterface.createPacket","com/stencyl/utils/ToolsetInterface.hx",400,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_410_generateHTTPHeader,"com.stencyl.utils.ToolsetInterface","generateHTTPHeader",0x71dcf75d,"com.stencyl.utils.ToolsetInterface.generateHTTPHeader","com/stencyl/utils/ToolsetInterface.hx",410,0x0b0fd920)
static const ::String _hx_array_data_ff6eebdb_23[] = {
	HX_(": ",a6,32,00,00),
};
static const ::String _hx_array_data_ff6eebdb_24[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_ff6eebdb_25[] = {
	HX_("Content-Length: ",20,de,22,7c),
};
static const ::String _hx_array_data_ff6eebdb_26[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_ff6eebdb_27[] = {
	HX_("\r\n",5d,0b,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_33_resetStatics,"com.stencyl.utils.ToolsetInterface","resetStatics",0x4a7a9669,"com.stencyl.utils.ToolsetInterface.resetStatics","com/stencyl/utils/ToolsetInterface.hx",33,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_59_cancelConnection,"com.stencyl.utils.ToolsetInterface","cancelConnection",0x1966b82b,"com.stencyl.utils.ToolsetInterface.cancelConnection","com/stencyl/utils/ToolsetInterface.hx",59,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_87_preloadedUpdate,"com.stencyl.utils.ToolsetInterface","preloadedUpdate",0xad4211fe,"com.stencyl.utils.ToolsetInterface.preloadedUpdate","com/stencyl/utils/ToolsetInterface.hx",87,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_344_gciTrace,"com.stencyl.utils.ToolsetInterface","gciTrace",0x22cfd76b,"com.stencyl.utils.ToolsetInterface.gciTrace","com/stencyl/utils/ToolsetInterface.hx",344,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_365_imageTrace,"com.stencyl.utils.ToolsetInterface","imageTrace",0xbd9a56dd,"com.stencyl.utils.ToolsetInterface.imageTrace","com/stencyl/utils/ToolsetInterface.hx",365,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_427_addAssetUpdatedListener,"com.stencyl.utils.ToolsetInterface","addAssetUpdatedListener",0x4b4a3ced,"com.stencyl.utils.ToolsetInterface.addAssetUpdatedListener","com/stencyl/utils/ToolsetInterface.hx",427,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_434_removeAssetUpdatedListener,"com.stencyl.utils.ToolsetInterface","removeAssetUpdatedListener",0x204c17d6,"com.stencyl.utils.ToolsetInterface.removeAssetUpdatedListener","com/stencyl/utils/ToolsetInterface.hx",434,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_442_clearAssetUpdatedListeners,"com.stencyl.utils.ToolsetInterface","clearAssetUpdatedListeners",0xf7e3f6ba,"com.stencyl.utils.ToolsetInterface.clearAssetUpdatedListeners","com/stencyl/utils/ToolsetInterface.hx",442,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_450_pause,"com.stencyl.utils.ToolsetInterface","pause",0x2e903223,"com.stencyl.utils.ToolsetInterface.pause","com/stencyl/utils/ToolsetInterface.hx",450,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_22_boot,"com.stencyl.utils.ToolsetInterface","boot",0x7d4f6da5,"com.stencyl.utils.ToolsetInterface.boot","com/stencyl/utils/ToolsetInterface.hx",22,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_23_boot,"com.stencyl.utils.ToolsetInterface","boot",0x7d4f6da5,"com.stencyl.utils.ToolsetInterface.boot","com/stencyl/utils/ToolsetInterface.hx",23,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_25_boot,"com.stencyl.utils.ToolsetInterface","boot",0x7d4f6da5,"com.stencyl.utils.ToolsetInterface.boot","com/stencyl/utils/ToolsetInterface.hx",25,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_122_boot,"com.stencyl.utils.ToolsetInterface","boot",0x7d4f6da5,"com.stencyl.utils.ToolsetInterface.boot","com/stencyl/utils/ToolsetInterface.hx",122,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_340_boot,"com.stencyl.utils.ToolsetInterface","boot",0x7d4f6da5,"com.stencyl.utils.ToolsetInterface.boot","com/stencyl/utils/ToolsetInterface.hx",340,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_446_boot,"com.stencyl.utils.ToolsetInterface","boot",0x7d4f6da5,"com.stencyl.utils.ToolsetInterface.boot","com/stencyl/utils/ToolsetInterface.hx",446,0x0b0fd920)
HX_LOCAL_STACK_FRAME(_hx_pos_d729eec6c01450e4_447_boot,"com.stencyl.utils.ToolsetInterface","boot",0x7d4f6da5,"com.stencyl.utils.ToolsetInterface.boot","com/stencyl/utils/ToolsetInterface.hx",447,0x0b0fd920)
namespace com{
namespace stencyl{
namespace utils{

void ToolsetInterface_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_15_new)
HXLINE( 121)		this->bytesExpected = (int)0;
HXLINE( 117)		this->waiting = true;
HXLINE(  20)		this->response = HX_("",00,00,00,00);
HXLINE(  38)		this->socket =  ::openfl::net::Socket_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  39)		::String host = ::com::stencyl::Config_obj::toolsetInterfaceHost;
HXLINE(  40)		 ::Dynamic port = ::com::stencyl::Config_obj::toolsetInterfacePort;
HXLINE(  42)		if (hx::IsNull( host )) {
HXLINE(  43)			host = HX_("localhost",53,2a,7c,1c);
            		}
HXLINE(  44)		if (hx::IsNotEq( port,(int)-1 )) {
HXLINE(  46)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  46)			_hx_tmp((((HX_("GCI attempting to connect to toolset @",28,8c,e0,92) + host) + HX_(":",3a,00,00,00)) + port),hx::SourceInfo(HX_("ToolsetInterface.hx",ef,9c,a4,58),46,HX_("com.stencyl.utils.ToolsetInterface",db,eb,6e,ff),HX_("new",60,d0,53,00)));
HXLINE(  47)			this->configureListeners();
HXLINE(  48)			this->socket->connect(host,port);
            		}
            		else {
HXLINE(  52)			::com::stencyl::utils::ToolsetInterface_obj::ready = true;
            		}
HXLINE(  55)		::com::stencyl::utils::ToolsetInterface_obj::instance = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic ToolsetInterface_obj::__CreateEmpty() { return new ToolsetInterface_obj; }

void *ToolsetInterface_obj::_hx_vtable = 0;

Dynamic ToolsetInterface_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ToolsetInterface_obj > _hx_result = new ToolsetInterface_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ToolsetInterface_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5c881775;
}

void ToolsetInterface_obj::configureListeners(){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_66_configureListeners)
HXLINE(  67)		this->socket->addEventListener(HX_("close",b8,17,63,48),this->closeHandler_dyn(),null(),null(),null());
HXLINE(  68)		this->socket->addEventListener(HX_("connect",ea,3b,80,15),this->connectHandler_dyn(),null(),null(),null());
HXLINE(  69)		this->socket->addEventListener(HX_("ioError",02,fe,41,76),this->ioErrorHandler_dyn(),null(),null(),null());
HXLINE(  70)		this->socket->addEventListener(HX_("securityError",e8,28,7c,a2),this->securityErrorHandler_dyn(),null(),null(),null());
HXLINE(  71)		this->socket->addEventListener(HX_("socketData",7d,63,de,b1),this->socketDataHandler_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToolsetInterface_obj,configureListeners,(void))

void ToolsetInterface_obj::unconfigureListeners(){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_75_unconfigureListeners)
HXLINE(  76)		this->socket->removeEventListener(HX_("close",b8,17,63,48),this->closeHandler_dyn(),null());
HXLINE(  77)		this->socket->removeEventListener(HX_("connect",ea,3b,80,15),this->connectHandler_dyn(),null());
HXLINE(  78)		this->socket->removeEventListener(HX_("ioError",02,fe,41,76),this->ioErrorHandler_dyn(),null());
HXLINE(  79)		this->socket->removeEventListener(HX_("securityError",e8,28,7c,a2),this->securityErrorHandler_dyn(),null());
HXLINE(  80)		this->socket->removeEventListener(HX_("socketData",7d,63,de,b1),this->socketDataHandler_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ToolsetInterface_obj,unconfigureListeners,(void))

void ToolsetInterface_obj::closeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_93_closeHandler)
HXDLIN(  93)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  93)		::String _hx_tmp1 = (HX_("closeHandler: ",18,fa,d3,45) + ::Std_obj::string(event));
HXDLIN(  93)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("ToolsetInterface.hx",ef,9c,a4,58),93,HX_("com.stencyl.utils.ToolsetInterface",db,eb,6e,ff),HX_("closeHandler",f2,a6,a6,91)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToolsetInterface_obj,closeHandler,(void))

void ToolsetInterface_obj::connectHandler( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_97_connectHandler)
HXLINE(  98)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  98)		::String _hx_tmp1 = (HX_("connectHandler: ",a6,bf,7d,74) + ::Std_obj::string(event));
HXDLIN(  98)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("ToolsetInterface.hx",ef,9c,a4,58),98,HX_("com.stencyl.utils.ToolsetInterface",db,eb,6e,ff),HX_("connectHandler",00,4d,10,96)));
HXLINE(  99)		if (hx::IsNotNull( ::com::stencyl::Config_obj::buildConfig )) {
HXLINE( 101)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 101)			_g->set(HX_("Content-Type",ce,69,5d,3c),HX_("Client-Registration",7b,ec,0d,ed));
HXDLIN( 101)			 ::haxe::ds::StringMap _hx_tmp2 = _g;
HXDLIN( 101)			this->sendData(_hx_tmp2,::haxe::format::JsonPrinter_obj::print(::com::stencyl::Config_obj::buildConfig,null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToolsetInterface_obj,connectHandler,(void))

void ToolsetInterface_obj::ioErrorHandler( ::openfl::events::IOErrorEvent event){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_106_ioErrorHandler)
HXLINE( 107)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 107)		::String _hx_tmp1 = (HX_("ioErrorHandler: ",8e,fa,6e,e9) + ::Std_obj::string(event));
HXDLIN( 107)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("ToolsetInterface.hx",ef,9c,a4,58),107,HX_("com.stencyl.utils.ToolsetInterface",db,eb,6e,ff),HX_("ioErrorHandler",e8,7d,a5,d6)));
HXLINE( 108)		if (!(::com::stencyl::utils::ToolsetInterface_obj::ready)) {
HXLINE( 109)			::com::stencyl::utils::ToolsetInterface_obj::cancelConnection();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToolsetInterface_obj,ioErrorHandler,(void))

void ToolsetInterface_obj::securityErrorHandler( ::openfl::events::SecurityErrorEvent event){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_114_securityErrorHandler)
HXDLIN( 114)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 114)		::String _hx_tmp1 = (HX_("securityErrorHandler: ",e8,42,87,60) + ::Std_obj::string(event));
HXDLIN( 114)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("ToolsetInterface.hx",ef,9c,a4,58),114,HX_("com.stencyl.utils.ToolsetInterface",db,eb,6e,ff),HX_("securityErrorHandler",c2,1b,b7,af)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToolsetInterface_obj,securityErrorHandler,(void))

void ToolsetInterface_obj::socketDataHandler( ::openfl::events::ProgressEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_127_socketDataHandler)
HXDLIN( 127)		while((this->socket->get_bytesAvailable() > (int)0)){
HXLINE( 130)			if (this->waiting) {
HXLINE( 133)				this->bytesExpected = this->socket->readInt();
HXLINE( 134)				if ((this->bytesExpected == (int)0)) {
HXLINE( 135)					continue;
            				}
HXLINE( 137)				this->waiting = false;
HXLINE( 138)				this->readingHeader = true;
HXLINE( 141)				 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,this->bytesExpected);
HXDLIN( 141)				this->bytes = this1;
            			}
HXLINE( 144)			if (this->readingHeader) {
HXLINE( 146)				int a = this->bytes->position;
HXDLIN( 146)				int a1 = (a + this->socket->get_bytesAvailable());
HXDLIN( 146)				int b = this->bytesExpected;
HXDLIN( 146)				bool aNeg = (a1 < (int)0);
HXDLIN( 146)				bool bNeg = (b < (int)0);
HXDLIN( 146)				bool _hx_tmp;
HXDLIN( 146)				if ((aNeg != bNeg)) {
HXLINE( 146)					_hx_tmp = aNeg;
            				}
            				else {
HXLINE( 146)					_hx_tmp = (a1 >= b);
            				}
HXDLIN( 146)				if (_hx_tmp) {
HXLINE( 148)					this->socket->readBytes(this->bytes,this->bytes->position,(this->bytesExpected - this->bytes->position));
HXLINE( 150)					this->readingHeader = false;
HXLINE( 151)					this->currentHeader = this->parseHeader(this->bytes);
HXLINE( 152)					this->bytesExpected = ::Std_obj::parseInt(( (::String)(this->currentHeader->get(HX_("Content-Length",fa,f8,b6,65))) ));
HXLINE( 153)					 ::openfl::utils::ByteArrayData this2 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,this->bytesExpected);
HXDLIN( 153)					this->bytes = this2;
            				}
            				else {
HXLINE( 159)					int newBytes = this->socket->get_bytesAvailable();
HXLINE( 160)					this->socket->readBytes(this->bytes,this->bytes->position,newBytes);
HXLINE( 161)					 ::openfl::utils::ByteArrayData _hx_tmp1 = this->bytes;
HXDLIN( 161)					_hx_tmp1->position = (_hx_tmp1->position + newBytes);
            				}
            			}
HXLINE( 164)			if (!(this->readingHeader)) {
HXLINE( 166)				int a2 = this->bytes->position;
HXDLIN( 166)				int a3 = (a2 + this->socket->get_bytesAvailable());
HXDLIN( 166)				int b1 = this->bytesExpected;
HXDLIN( 166)				bool aNeg1 = (a3 < (int)0);
HXDLIN( 166)				bool bNeg1 = (b1 < (int)0);
HXDLIN( 166)				bool _hx_tmp2;
HXDLIN( 166)				if ((aNeg1 != bNeg1)) {
HXLINE( 166)					_hx_tmp2 = aNeg1;
            				}
            				else {
HXLINE( 166)					_hx_tmp2 = (a3 >= b1);
            				}
HXDLIN( 166)				if (_hx_tmp2) {
HXLINE( 168)					int a4 = (this->bytesExpected - this->bytes->position);
HXDLIN( 168)					bool aNeg2 = (a4 < (int)0);
HXDLIN( 168)					bool bNeg2 = ((int)0 < (int)0);
HXDLIN( 168)					bool _hx_tmp3;
HXDLIN( 168)					if ((aNeg2 != bNeg2)) {
HXLINE( 168)						_hx_tmp3 = aNeg2;
            					}
            					else {
HXLINE( 168)						_hx_tmp3 = (a4 > (int)0);
            					}
HXDLIN( 168)					if (_hx_tmp3) {
HXLINE( 170)						this->socket->readBytes(this->bytes,this->bytes->position,(this->bytesExpected - this->bytes->position));
            					}
HXLINE( 173)					this->packetReady(this->currentHeader,this->bytes);
HXLINE( 174)					this->bytesExpected = (int)0;
HXLINE( 175)					this->currentHeader = null();
HXLINE( 176)					this->bytes = null();
HXLINE( 177)					this->waiting = true;
            				}
            				else {
HXLINE( 181)					int newBytes1 = this->socket->get_bytesAvailable();
HXLINE( 182)					this->socket->readBytes(this->bytes,this->bytes->position,newBytes1);
HXLINE( 183)					 ::openfl::utils::ByteArrayData _hx_tmp4 = this->bytes;
HXDLIN( 183)					_hx_tmp4->position = (_hx_tmp4->position + newBytes1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToolsetInterface_obj,socketDataHandler,(void))

 ::haxe::ds::StringMap ToolsetInterface_obj::parseHeader( ::openfl::utils::ByteArrayData bytes){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_190_parseHeader)
HXLINE( 191)		 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 193)		bytes->position = (int)0;
HXLINE( 194)		::String headerString = bytes->readUTFBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes));
HXLINE( 195)		{
HXLINE( 195)			int _g = (int)0;
HXDLIN( 195)			::Array< ::String > _g1 = headerString.split(HX_("\r\n",5d,0b,00,00));
HXDLIN( 195)			while((_g < _g1->length)){
HXLINE( 195)				::String line = _g1->__get(_g);
HXDLIN( 195)				_g = (_g + (int)1);
HXLINE( 197)				int i = line.indexOf(HX_(":",3a,00,00,00),null());
HXLINE( 198)				{
HXLINE( 198)					::String key = line.substring((int)0,i);
HXDLIN( 198)					map->set(key,line.substring((i + (int)2),null()));
            				}
            			}
            		}
HXLINE( 201)		return map;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ToolsetInterface_obj,parseHeader,return )

void ToolsetInterface_obj::packetReady( ::haxe::ds::StringMap header, ::openfl::utils::ByteArrayData content){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_205_packetReady)
HXLINE( 206)		content->position = (int)0;
HXLINE( 208)		::String contentType = ( (::String)(header->get(HX_("Content-Type",ce,69,5d,3c))) );
HXLINE( 209)		::String _hx_switch_0 = contentType;
            		if (  (_hx_switch_0==HX_("Command",2b,99,be,4e)) ){
HXLINE( 231)			::String action = ( (::String)(header->get(HX_("Command-Action",f8,41,d0,80))) );
HXLINE( 233)			if ((action == HX_("Reset",af,b9,f5,79))) {
HXLINE( 235)				::Universal_obj::reloadGame();
            			}
            			else {
HXLINE( 237)				if ((action == HX_("Load Scene",d2,93,b2,4e))) {
HXLINE( 239)					 ::Dynamic sceneID = ::Std_obj::parseInt(( (::String)(header->get(HX_("Scene-ID",9c,1f,2c,9b))) ));
HXLINE( 241)					if (::com::stencyl::utils::ToolsetInterface_obj::ready) {
HXLINE( 242)						::com::stencyl::Engine_obj::engine->switchScene(sceneID,null(),null());
            					}
            					else {
HXLINE( 244)						::com::stencyl::Config_obj::initSceneID = sceneID;
            					}
            				}
            			}
HXLINE( 230)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("Hscript",53,b4,69,f9)) ){
HXLINE( 250)			if (hx::IsNull( this->hscript )) {
HXLINE( 250)				this->hscript =  ::com::stencyl::utils::HscriptRunner_obj::__alloc( HX_CTX );
            			}
HXLINE( 252)			::String hsType = ( (::String)(header->get(HX_("Hscript-Type",54,f8,72,d7))) );
HXLINE( 254)			::String _hx_switch_1 = hsType;
            			if (  (_hx_switch_1==HX_("Resolve Types",05,c8,d7,c8)) ){
HXLINE( 257)				::Array< ::String > typesToRegister = content->readUTFBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(content)).split(HX_("\n",0a,00,00,00));
HXLINE( 258)				{
HXLINE( 258)					int _g = (int)0;
HXDLIN( 258)					while((_g < typesToRegister->length)){
HXLINE( 258)						::String type = typesToRegister->__get(_g);
HXDLIN( 258)						_g = (_g + (int)1);
HXLINE( 260)						type = ::StringTools_obj::trim(type);
HXLINE( 261)						if ((type == HX_("",00,00,00,00))) {
HXLINE( 261)							continue;
            						}
HXLINE( 263)						hx::Class resolvedType = ::Type_obj::resolveClass(type);
HXLINE( 264)						if (hx::IsNotNull( resolvedType )) {
HXLINE( 266)							 ::com::stencyl::utils::HscriptRunner _hx_tmp = this->hscript;
HXDLIN( 266)							_hx_tmp->registerVar(( (::String)(type.split(HX_(".",2e,00,00,00))->pop()) ),resolvedType);
            						}
            						else {
HXLINE( 270)							 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 270)							_hx_tmp1((HX_("Couldn't resolve class: ",a4,ed,e1,d1) + type),hx::SourceInfo(HX_("ToolsetInterface.hx",ef,9c,a4,58),270,HX_("com.stencyl.utils.ToolsetInterface",db,eb,6e,ff),HX_("packetReady",bb,6b,3d,fc)));
            						}
            					}
            				}
HXLINE( 256)				goto _hx_goto_12;
            			}
            			if (  (_hx_switch_1==HX_("Run Script",80,06,80,42)) ){
HXLINE( 275)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 277)					 ::com::stencyl::utils::HscriptRunner _hx_tmp2 = this->hscript;
HXDLIN( 277)					_hx_tmp2->execute(content->readUTFBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(content)));
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic ex = _hx_e;
HXLINE( 281)						::haxe::Log_obj::trace(ex,hx::SourceInfo(HX_("ToolsetInterface.hx",ef,9c,a4,58),281,HX_("com.stencyl.utils.ToolsetInterface",db,eb,6e,ff),HX_("packetReady",bb,6b,3d,fc)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 275)				goto _hx_goto_12;
            			}
            			_hx_goto_12:;
HXLINE( 249)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("Modified Asset",d9,f1,64,cd)) ){
HXLINE( 287)			::Array< ::String > assetID = ::Array_obj< ::String >::__new(1)->init(0,( (::String)(header->get(HX_("Asset-ID",78,8d,45,a3))) ));
HXLINE( 289)			if ((assetID->__get((int)0) == HX_("config/game-config.json",66,b4,d0,0b))) {
HXLINE( 291)				::String receivedText = content->readUTFBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(content));
HXLINE( 292)				::com::stencyl::Config_obj::loadFromString(receivedText,::com::stencyl::utils::ToolsetInterface_obj::ready);
            			}
            			else {
HXLINE( 294)				if (::StringTools_obj::startsWith(assetID->__get((int)0),HX_("assets/",4c,2a,dc,36))) {
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,assetID) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_296_packetReady)
HXLINE( 298)						if (::StringTools_obj::startsWith(assetID->__get((int)0),(HX_("assets/graphics/",38,e5,fb,63) + ::com::stencyl::Engine_obj::IMG_BASE))) {
HXLINE( 300)							::String _hx_tmp3 = assetID->__get((int)0).split(HX_("/",2f,00,00,00))->__get((int)3).split(HX_(".",2e,00,00,00))->__get((int)0);
HXDLIN( 300)							assetID[(int)0] = _hx_tmp3;
HXLINE( 301)							::Array< ::String > parts = assetID->__get((int)0).split(HX_("-",2d,00,00,00));
HXLINE( 302)							::String resourceType = parts->__get((int)0);
HXLINE( 303)							 ::Dynamic resourceID = ::Std_obj::parseInt(parts->__get((int)1));
HXLINE( 304)							int subID = (int)-1;
HXLINE( 305)							if ((parts->length == (int)2)) {
HXLINE( 306)								subID = ::Std_obj::parseInt(parts->__get((int)2));
            							}
HXLINE( 308)							 ::com::stencyl::models::Resource resource = ::com::stencyl::Data_obj::get()->resources->get(resourceID).StaticCast<  ::com::stencyl::models::Resource >();
HXLINE( 309)							bool _hx_tmp4;
HXDLIN( 309)							if (hx::IsNotNull( resource )) {
HXLINE( 309)								_hx_tmp4 = resource->isAtlasActive();
            							}
            							else {
HXLINE( 309)								_hx_tmp4 = false;
            							}
HXDLIN( 309)							if (_hx_tmp4) {
HXLINE( 311)								resource->reloadGraphics(subID);
            							}
            						}
HXLINE( 315)						bool _hx_tmp5;
HXDLIN( 315)						if (::StringTools_obj::startsWith(assetID->__get((int)0),HX_("assets/data/scene-",1a,db,4b,01))) {
HXLINE( 315)							_hx_tmp5 = ::StringTools_obj::endsWith(assetID->__get((int)0),HX_(".mbs",10,dc,ba,1e));
            						}
            						else {
HXLINE( 315)							_hx_tmp5 = false;
            						}
HXDLIN( 315)						if (_hx_tmp5) {
HXLINE( 317)							int sceneID1 = HX_("assets/data/scene-",1a,db,4b,01).length;
HXDLIN( 317)							 ::Dynamic sceneID2 = ::Std_obj::parseInt(assetID->__get((int)0).substring(sceneID1,(assetID->__get((int)0).length - HX_(".mbs",10,dc,ba,1e).length)));
HXLINE( 319)							if (hx::IsEq( ::com::stencyl::Engine_obj::engine->scene->ID,sceneID2 )) {
HXLINE( 321)								::com::stencyl::Engine_obj::engine->switchScene(sceneID2,null(),null());
            							}
            						}
HXLINE( 325)						if (::haxe::IMap_obj::exists(::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners,assetID->__get((int)0))) {
HXLINE( 327)							int _g1 = (int)0;
HXDLIN( 327)							::Array< ::Dynamic> _g11 = ( (::Array< ::Dynamic>)(::haxe::IMap_obj::get(::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners,assetID->__get((int)0))) );
HXDLIN( 327)							while((_g1 < _g11->length)){
HXLINE( 327)								 ::Dynamic listener = _g11->__get(_g1);
HXDLIN( 327)								_g1 = (_g1 + (int)1);
HXLINE( 329)								listener(assetID->__get((int)0));
            							}
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 296)					::String assetID1 = assetID->__get((int)0);
HXDLIN( 296)					::com::stencyl::utils::Assets_obj::updateAsset(assetID1,( (::String)(header->get(HX_("Asset-Type",b7,cd,4b,31))) ),content, ::Dynamic(new _hx_Closure_0(assetID)));
            				}
            			}
HXLINE( 286)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("Status",52,5b,90,3a)) ){
HXLINE( 212)			if ((( (::String)(header->get(HX_("Status",52,5b,90,3a))) ) == HX_("Connected",a9,c2,c9,44))) {
HXLINE( 214)				::com::stencyl::utils::ToolsetInterface_obj::connected = true;
HXLINE( 215)				if (hx::IsNotNull( ::com::stencyl::utils::ToolsetInterface_obj::traceQueue )) {
HXLINE( 217)					{
HXLINE( 217)						int _g2 = (int)0;
HXDLIN( 217)						::Array< ::Dynamic> _g12 = ::com::stencyl::utils::ToolsetInterface_obj::traceQueue;
HXDLIN( 217)						while((_g2 < _g12->length)){
HXLINE( 217)							 ::Dynamic msg = _g12->__get(_g2);
HXDLIN( 217)							_g2 = (_g2 + (int)1);
HXLINE( 219)							::com::stencyl::utils::ToolsetInterface_obj::gciTrace( ::Dynamic(msg->__Field(HX_("v",76,00,00,00),hx::paccDynamic)),msg->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic));
            						}
            					}
HXLINE( 221)					::com::stencyl::utils::ToolsetInterface_obj::traceQueue = null();
            				}
HXLINE( 223)				::haxe::Log_obj::trace(HX_("GCI connected. Waiting for updated assets.",d4,b1,6e,a0),hx::SourceInfo(HX_("ToolsetInterface.hx",ef,9c,a4,58),223,HX_("com.stencyl.utils.ToolsetInterface",db,eb,6e,ff),HX_("packetReady",bb,6b,3d,fc)));
            			}
HXLINE( 225)			if ((( (::String)(header->get(HX_("Status",52,5b,90,3a))) ) == HX_("Assets Ready",06,f5,8a,0e))) {
HXLINE( 227)				::com::stencyl::utils::ToolsetInterface_obj::ready = true;
            			}
HXLINE( 211)			goto _hx_goto_11;
            		}
            		/* default */{
            		}
            		_hx_goto_11:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ToolsetInterface_obj,packetReady,(void))

void ToolsetInterface_obj::sendData( ::haxe::ds::StringMap header,::String data){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_379_sendData)
HXLINE( 380)		::String dataBytes;
HXDLIN( 380)		if (hx::IsNull( data )) {
HXLINE( 380)			dataBytes = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 380)			dataBytes = data;
            		}
HXDLIN( 380)		 ::haxe::io::Bytes dataBytes1 = ::haxe::io::Bytes_obj::ofString(dataBytes,null());
HXLINE( 381)		 ::openfl::utils::ByteArrayData headerBytes = this->generateHTTPHeader(header,::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(dataBytes1));
HXLINE( 382)		 ::openfl::utils::ByteArrayData packet = this->createPacket(headerBytes,::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(dataBytes1));
HXLINE( 383)		 ::openfl::net::Socket _hx_tmp = this->socket;
HXDLIN( 383)		_hx_tmp->writeBytes(packet,(int)0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(packet));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ToolsetInterface_obj,sendData,(void))

void ToolsetInterface_obj::sendBinaryData( ::haxe::ds::StringMap header, ::haxe::io::Bytes dataBytes){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_390_sendBinaryData)
HXLINE( 391)		 ::openfl::utils::ByteArrayData headerBytes = this->generateHTTPHeader(header,::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(dataBytes));
HXLINE( 392)		 ::openfl::utils::ByteArrayData packet = this->createPacket(headerBytes,::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(dataBytes));
HXLINE( 393)		 ::openfl::net::Socket _hx_tmp = this->socket;
HXDLIN( 393)		_hx_tmp->writeBytes(packet,(int)0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(packet));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ToolsetInterface_obj,sendBinaryData,(void))

 ::openfl::utils::ByteArrayData ToolsetInterface_obj::createPacket( ::openfl::utils::ByteArrayData header, ::openfl::utils::ByteArrayData data){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_400_createPacket)
HXLINE( 401)		int length = ((int)4 + ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(header));
HXDLIN( 401)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(length + ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data)));
HXDLIN( 401)		 ::openfl::utils::ByteArrayData message = this1;
HXLINE( 402)		message->_hx___endian = (int)0;
HXLINE( 403)		message->writeInt(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(header));
HXLINE( 404)		message->writeBytes(header,(int)0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(header));
HXLINE( 405)		message->writeBytes(data,(int)0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data));
HXLINE( 406)		return message;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ToolsetInterface_obj,createPacket,return )

 ::openfl::utils::ByteArrayData ToolsetInterface_obj::generateHTTPHeader( ::haxe::ds::StringMap keyValues, ::openfl::utils::ByteArrayData data){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_410_generateHTTPHeader)
HXLINE( 411)		 ::StringBuf sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 413)		{
HXLINE( 413)			 ::Dynamic key = keyValues->keys();
HXDLIN( 413)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 413)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 415)				{
HXLINE( 415)					if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 415)						sb->flush();
            					}
HXDLIN( 415)					if (hx::IsNull( sb->b )) {
HXLINE( 415)						sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(key1));
            					}
            					else {
HXLINE( 415)						::Array< ::String > sb1 = sb->b;
HXDLIN( 415)						sb1->push(::Std_obj::string(key1));
            					}
            				}
HXLINE( 416)				{
HXLINE( 416)					if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 416)						sb->flush();
            					}
HXDLIN( 416)					if (hx::IsNull( sb->b )) {
HXLINE( 416)						sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_ff6eebdb_23,1);
            					}
            					else {
HXLINE( 416)						sb->b->push(HX_(": ",a6,32,00,00));
            					}
            				}
HXLINE( 417)				{
HXLINE( 417)					::String x = ( (::String)(keyValues->get(key1)) );
HXDLIN( 417)					if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 417)						sb->flush();
            					}
HXDLIN( 417)					if (hx::IsNull( sb->b )) {
HXLINE( 417)						sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            					}
            					else {
HXLINE( 417)						::Array< ::String > sb2 = sb->b;
HXDLIN( 417)						sb2->push(::Std_obj::string(x));
            					}
            				}
HXLINE( 418)				{
HXLINE( 418)					if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 418)						sb->flush();
            					}
HXDLIN( 418)					if (hx::IsNull( sb->b )) {
HXLINE( 418)						sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_ff6eebdb_24,1);
            					}
            					else {
HXLINE( 418)						sb->b->push(HX_("\r\n",5d,0b,00,00));
            					}
            				}
            			}
            		}
HXLINE( 420)		{
HXLINE( 420)			if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 420)				sb->flush();
            			}
HXDLIN( 420)			if (hx::IsNull( sb->b )) {
HXLINE( 420)				sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_ff6eebdb_25,1);
            			}
            			else {
HXLINE( 420)				sb->b->push(HX_("Content-Length: ",20,de,22,7c));
            			}
            		}
HXDLIN( 420)		{
HXLINE( 420)			::String x1 = (HX_("",00,00,00,00) + ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data));
HXDLIN( 420)			if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 420)				sb->flush();
            			}
HXDLIN( 420)			if (hx::IsNull( sb->b )) {
HXLINE( 420)				sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 420)				::Array< ::String > sb3 = sb->b;
HXDLIN( 420)				sb3->push(::Std_obj::string(x1));
            			}
            		}
HXDLIN( 420)		{
HXLINE( 420)			if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 420)				sb->flush();
            			}
HXDLIN( 420)			if (hx::IsNull( sb->b )) {
HXLINE( 420)				sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_ff6eebdb_26,1);
            			}
            			else {
HXLINE( 420)				sb->b->push(HX_("\r\n",5d,0b,00,00));
            			}
            		}
HXLINE( 421)		{
HXLINE( 421)			if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 421)				sb->flush();
            			}
HXDLIN( 421)			if (hx::IsNull( sb->b )) {
HXLINE( 421)				sb->b = ::Array_obj< ::String >::fromData( _hx_array_data_ff6eebdb_27,1);
            			}
            			else {
HXLINE( 421)				sb->b->push(HX_("\r\n",5d,0b,00,00));
            			}
            		}
HXLINE( 423)		return ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(::haxe::io::Bytes_obj::ofString(sb->toString(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ToolsetInterface_obj,generateHTTPHeader,return )

 ::com::stencyl::utils::ToolsetInterface ToolsetInterface_obj::instance;

bool ToolsetInterface_obj::connected;

bool ToolsetInterface_obj::ready;

 ::haxe::ds::StringMap ToolsetInterface_obj::assetUpdatedListeners;

void ToolsetInterface_obj::resetStatics(){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_33_resetStatics)
HXDLIN(  33)		::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ToolsetInterface_obj,resetStatics,(void))

void ToolsetInterface_obj::cancelConnection(){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_59_cancelConnection)
HXLINE(  60)		::haxe::Log_obj::trace(HX_("Couldn't establish gci connection.",50,a7,c1,58),hx::SourceInfo(HX_("ToolsetInterface.hx",ef,9c,a4,58),60,HX_("com.stencyl.utils.ToolsetInterface",db,eb,6e,ff),HX_("cancelConnection",38,ee,00,55)));
HXLINE(  61)		::com::stencyl::utils::ToolsetInterface_obj::instance->unconfigureListeners();
HXLINE(  62)		::com::stencyl::utils::ToolsetInterface_obj::ready = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ToolsetInterface_obj,cancelConnection,(void))

void ToolsetInterface_obj::preloadedUpdate(){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_87_preloadedUpdate)
HXDLIN(  87)		 ::openfl::net::Socket _hx_tmp = ::com::stencyl::utils::ToolsetInterface_obj::instance->socket;
HXDLIN(  87)		_hx_tmp->this_onEnterFrame( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("enterFrame",f5,03,50,02),null(),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ToolsetInterface_obj,preloadedUpdate,(void))

int ToolsetInterface_obj::INT_LENGTH;

::Array< ::Dynamic> ToolsetInterface_obj::traceQueue;

void ToolsetInterface_obj::gciTrace( ::Dynamic v, ::Dynamic pos){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_344_gciTrace)
HXDLIN( 344)		if (::com::stencyl::utils::ToolsetInterface_obj::connected) {
HXLINE( 346)			 ::com::stencyl::utils::ToolsetInterface _hx_tmp = ::com::stencyl::utils::ToolsetInterface_obj::instance;
HXLINE( 348)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 348)			_g->set(HX_("Content-Type",ce,69,5d,3c),HX_("Log",64,0c,3a,00));
HXDLIN( 348)			_g->set(HX_("Class",18,e8,85,db), ::Dynamic(pos->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)));
HXDLIN( 348)			_g->set(HX_("Method",01,6b,ef,3d), ::Dynamic(pos->__Field(HX_("methodName",cc,19,0f,12),hx::paccDynamic)));
HXDLIN( 348)			_g->set(HX_("Line",14,44,8c,32),(HX_("",00,00,00,00) + ( (int)(pos->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic)) )));
HXDLIN( 348)			 ::haxe::ds::StringMap _hx_tmp1 = _g;
HXLINE( 346)			_hx_tmp->sendData(_hx_tmp1,(HX_("",00,00,00,00) + ::Std_obj::string(v)));
            		}
            		else {
HXLINE( 357)			if (hx::IsNull( ::com::stencyl::utils::ToolsetInterface_obj::traceQueue )) {
HXLINE( 358)				::com::stencyl::utils::ToolsetInterface_obj::traceQueue = ::Array_obj< ::Dynamic>::__new(0);
            			}
HXLINE( 359)			::com::stencyl::utils::ToolsetInterface_obj::traceQueue->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("v",76,00,00,00),v)
            				->setFixed(1,HX_("pos",94,5d,55,00),pos)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ToolsetInterface_obj,gciTrace,(void))

void ToolsetInterface_obj::imageTrace( ::openfl::display::BitmapData img, ::Dynamic pos){
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_365_imageTrace)
HXDLIN( 365)		if (::com::stencyl::utils::ToolsetInterface_obj::connected) {
HXLINE( 367)			 ::com::stencyl::utils::ToolsetInterface _hx_tmp = ::com::stencyl::utils::ToolsetInterface_obj::instance;
HXLINE( 369)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 369)			_g->set(HX_("Content-Type",ce,69,5d,3c),HX_("ImageLog",09,74,e6,5d));
HXDLIN( 369)			_g->set(HX_("Class",18,e8,85,db), ::Dynamic(pos->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)));
HXDLIN( 369)			_g->set(HX_("Method",01,6b,ef,3d), ::Dynamic(pos->__Field(HX_("methodName",cc,19,0f,12),hx::paccDynamic)));
HXDLIN( 369)			_g->set(HX_("Line",14,44,8c,32),(HX_("",00,00,00,00) + ( (int)(pos->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic)) )));
HXDLIN( 369)			 ::haxe::ds::StringMap _hx_tmp1 = _g;
HXLINE( 373)			 ::openfl::geom::Rectangle img1 = img->rect;
HXLINE( 367)			_hx_tmp->sendBinaryData(_hx_tmp1,::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(img->encode(img1, ::openfl::display::PNGEncoderOptions_obj::__alloc( HX_CTX ,null()),null())));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ToolsetInterface_obj,imageTrace,(void))

void ToolsetInterface_obj::addAssetUpdatedListener(::String assetID, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_427_addAssetUpdatedListener)
HXLINE( 428)		if (!(::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners->exists(assetID))) {
HXLINE( 429)			::Dynamic this1 = ::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners;
HXDLIN( 429)			( ( ::haxe::ds::StringMap)(this1) )->set(assetID,::Array_obj< ::Dynamic>::__new());
            		}
HXLINE( 430)		( (::Array< ::Dynamic>)(::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners->get(assetID)) )->push(listener);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ToolsetInterface_obj,addAssetUpdatedListener,(void))

void ToolsetInterface_obj::removeAssetUpdatedListener(::String assetID, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_434_removeAssetUpdatedListener)
HXLINE( 435)		if (!(::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners->exists(assetID))) {
HXLINE( 436)			return;
            		}
HXLINE( 437)		( (::Array< ::Dynamic>)(::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners->get(assetID)) )->remove(listener);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ToolsetInterface_obj,removeAssetUpdatedListener,(void))

void ToolsetInterface_obj::clearAssetUpdatedListeners(){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_442_clearAssetUpdatedListeners)
HXDLIN( 442)		 ::Dynamic key = ::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners->keys();
HXDLIN( 442)		while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 442)			::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 443)			::com::stencyl::utils::ToolsetInterface_obj::assetUpdatedListeners->remove(key1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ToolsetInterface_obj,clearAssetUpdatedListeners,(void))

bool ToolsetInterface_obj::paused;

bool ToolsetInterface_obj::wasPaused;

void ToolsetInterface_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_450_pause)
HXLINE( 451)		::com::stencyl::utils::ToolsetInterface_obj::paused = true;
HXLINE( 452)		::com::stencyl::utils::ToolsetInterface_obj::wasPaused = true;
HXLINE( 453)		while(::com::stencyl::utils::ToolsetInterface_obj::paused){
HXLINE( 455)			::com::stencyl::utils::ToolsetInterface_obj::preloadedUpdate();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ToolsetInterface_obj,pause,(void))


hx::ObjectPtr< ToolsetInterface_obj > ToolsetInterface_obj::__new() {
	hx::ObjectPtr< ToolsetInterface_obj > __this = new ToolsetInterface_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ToolsetInterface_obj > ToolsetInterface_obj::__alloc(hx::Ctx *_hx_ctx) {
	ToolsetInterface_obj *__this = (ToolsetInterface_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ToolsetInterface_obj), true, "com.stencyl.utils.ToolsetInterface"));
	*(void **)__this = ToolsetInterface_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ToolsetInterface_obj::ToolsetInterface_obj()
{
}

void ToolsetInterface_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ToolsetInterface);
	HX_MARK_MEMBER_NAME(socket,"socket");
	HX_MARK_MEMBER_NAME(response,"response");
	HX_MARK_MEMBER_NAME(hscript,"hscript");
	HX_MARK_MEMBER_NAME(waiting,"waiting");
	HX_MARK_MEMBER_NAME(readingHeader,"readingHeader");
	HX_MARK_MEMBER_NAME(currentHeader,"currentHeader");
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	HX_MARK_MEMBER_NAME(bytesExpected,"bytesExpected");
	HX_MARK_END_CLASS();
}

void ToolsetInterface_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(socket,"socket");
	HX_VISIT_MEMBER_NAME(response,"response");
	HX_VISIT_MEMBER_NAME(hscript,"hscript");
	HX_VISIT_MEMBER_NAME(waiting,"waiting");
	HX_VISIT_MEMBER_NAME(readingHeader,"readingHeader");
	HX_VISIT_MEMBER_NAME(currentHeader,"currentHeader");
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
	HX_VISIT_MEMBER_NAME(bytesExpected,"bytesExpected");
}

hx::Val ToolsetInterface_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { return hx::Val( bytes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"socket") ) { return hx::Val( socket ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hscript") ) { return hx::Val( hscript ); }
		if (HX_FIELD_EQ(inName,"waiting") ) { return hx::Val( waiting ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"response") ) { return hx::Val( response ); }
		if (HX_FIELD_EQ(inName,"sendData") ) { return hx::Val( sendData_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseHeader") ) { return hx::Val( parseHeader_dyn() ); }
		if (HX_FIELD_EQ(inName,"packetReady") ) { return hx::Val( packetReady_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"closeHandler") ) { return hx::Val( closeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"createPacket") ) { return hx::Val( createPacket_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"readingHeader") ) { return hx::Val( readingHeader ); }
		if (HX_FIELD_EQ(inName,"currentHeader") ) { return hx::Val( currentHeader ); }
		if (HX_FIELD_EQ(inName,"bytesExpected") ) { return hx::Val( bytesExpected ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"connectHandler") ) { return hx::Val( connectHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"ioErrorHandler") ) { return hx::Val( ioErrorHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendBinaryData") ) { return hx::Val( sendBinaryData_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"socketDataHandler") ) { return hx::Val( socketDataHandler_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"configureListeners") ) { return hx::Val( configureListeners_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateHTTPHeader") ) { return hx::Val( generateHTTPHeader_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"unconfigureListeners") ) { return hx::Val( unconfigureListeners_dyn() ); }
		if (HX_FIELD_EQ(inName,"securityErrorHandler") ) { return hx::Val( securityErrorHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ToolsetInterface_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ready") ) { outValue = ( ready ); return true; }
		if (HX_FIELD_EQ(inName,"pause") ) { outValue = pause_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { outValue = ( paused ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"gciTrace") ) { outValue = gciTrace_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { outValue = ( connected ); return true; }
		if (HX_FIELD_EQ(inName,"wasPaused") ) { outValue = ( wasPaused ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"traceQueue") ) { outValue = ( traceQueue ); return true; }
		if (HX_FIELD_EQ(inName,"imageTrace") ) { outValue = imageTrace_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"preloadedUpdate") ) { outValue = preloadedUpdate_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cancelConnection") ) { outValue = cancelConnection_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"assetUpdatedListeners") ) { outValue = ( assetUpdatedListeners ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"addAssetUpdatedListener") ) { outValue = addAssetUpdatedListener_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"removeAssetUpdatedListener") ) { outValue = removeAssetUpdatedListener_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearAssetUpdatedListeners") ) { outValue = clearAssetUpdatedListeners_dyn(); return true; }
	}
	return false;
}

hx::Val ToolsetInterface_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { bytes=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"socket") ) { socket=inValue.Cast<  ::openfl::net::Socket >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hscript") ) { hscript=inValue.Cast<  ::com::stencyl::utils::HscriptRunner >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waiting") ) { waiting=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"response") ) { response=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"readingHeader") ) { readingHeader=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentHeader") ) { currentHeader=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bytesExpected") ) { bytesExpected=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ToolsetInterface_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ready") ) { ready=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::com::stencyl::utils::ToolsetInterface >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { connected=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"wasPaused") ) { wasPaused=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"traceQueue") ) { traceQueue=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"assetUpdatedListeners") ) { assetUpdatedListeners=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void ToolsetInterface_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("socket","\xb3","\x8b","\x46","\x26"));
	outFields->push(HX_HCSTRING("response","\x81","\xae","\x0c","\xa2"));
	outFields->push(HX_HCSTRING("hscript","\x73","\x8c","\x18","\x2c"));
	outFields->push(HX_HCSTRING("waiting","\x8d","\xe9","\x27","\xdf"));
	outFields->push(HX_HCSTRING("readingHeader","\xf9","\xf9","\x03","\xf7"));
	outFields->push(HX_HCSTRING("currentHeader","\xa6","\x8a","\x5c","\xe0"));
	outFields->push(HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"));
	outFields->push(HX_HCSTRING("bytesExpected","\x03","\xd6","\xa8","\xe5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ToolsetInterface_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::net::Socket*/ ,(int)offsetof(ToolsetInterface_obj,socket),HX_HCSTRING("socket","\xb3","\x8b","\x46","\x26")},
	{hx::fsString,(int)offsetof(ToolsetInterface_obj,response),HX_HCSTRING("response","\x81","\xae","\x0c","\xa2")},
	{hx::fsObject /*::com::stencyl::utils::HscriptRunner*/ ,(int)offsetof(ToolsetInterface_obj,hscript),HX_HCSTRING("hscript","\x73","\x8c","\x18","\x2c")},
	{hx::fsBool,(int)offsetof(ToolsetInterface_obj,waiting),HX_HCSTRING("waiting","\x8d","\xe9","\x27","\xdf")},
	{hx::fsBool,(int)offsetof(ToolsetInterface_obj,readingHeader),HX_HCSTRING("readingHeader","\xf9","\xf9","\x03","\xf7")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(ToolsetInterface_obj,currentHeader),HX_HCSTRING("currentHeader","\xa6","\x8a","\x5c","\xe0")},
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(ToolsetInterface_obj,bytes),HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd")},
	{hx::fsInt,(int)offsetof(ToolsetInterface_obj,bytesExpected),HX_HCSTRING("bytesExpected","\x03","\xd6","\xa8","\xe5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ToolsetInterface_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::utils::ToolsetInterface*/ ,(void *) &ToolsetInterface_obj::instance,HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59")},
	{hx::fsBool,(void *) &ToolsetInterface_obj::connected,HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2")},
	{hx::fsBool,(void *) &ToolsetInterface_obj::ready,HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &ToolsetInterface_obj::assetUpdatedListeners,HX_HCSTRING("assetUpdatedListeners","\xd4","\x09","\x9e","\xcd")},
	{hx::fsInt,(void *) &ToolsetInterface_obj::INT_LENGTH,HX_HCSTRING("INT_LENGTH","\x96","\xf1","\x58","\x9f")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &ToolsetInterface_obj::traceQueue,HX_HCSTRING("traceQueue","\xcc","\xac","\x4c","\x25")},
	{hx::fsBool,(void *) &ToolsetInterface_obj::paused,HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsBool,(void *) &ToolsetInterface_obj::wasPaused,HX_HCSTRING("wasPaused","\xb7","\x1a","\x92","\x8c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ToolsetInterface_obj_sMemberFields[] = {
	HX_HCSTRING("socket","\xb3","\x8b","\x46","\x26"),
	HX_HCSTRING("response","\x81","\xae","\x0c","\xa2"),
	HX_HCSTRING("hscript","\x73","\x8c","\x18","\x2c"),
	HX_HCSTRING("configureListeners","\xb9","\xde","\x25","\xa3"),
	HX_HCSTRING("unconfigureListeners","\x52","\xcf","\xc3","\x9a"),
	HX_HCSTRING("closeHandler","\xf2","\xa6","\xa6","\x91"),
	HX_HCSTRING("connectHandler","\x00","\x4d","\x10","\x96"),
	HX_HCSTRING("ioErrorHandler","\xe8","\x7d","\xa5","\xd6"),
	HX_HCSTRING("securityErrorHandler","\xc2","\x1b","\xb7","\xaf"),
	HX_HCSTRING("waiting","\x8d","\xe9","\x27","\xdf"),
	HX_HCSTRING("readingHeader","\xf9","\xf9","\x03","\xf7"),
	HX_HCSTRING("currentHeader","\xa6","\x8a","\x5c","\xe0"),
	HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"),
	HX_HCSTRING("bytesExpected","\x03","\xd6","\xa8","\xe5"),
	HX_HCSTRING("socketDataHandler","\xcd","\x8d","\xcc","\xe8"),
	HX_HCSTRING("parseHeader","\x20","\xb6","\x3c","\x78"),
	HX_HCSTRING("packetReady","\xbb","\x6b","\x3d","\xfc"),
	HX_HCSTRING("sendData","\x92","\x53","\x31","\xd6"),
	HX_HCSTRING("sendBinaryData","\x33","\xce","\xde","\x6a"),
	HX_HCSTRING("createPacket","\xa4","\x97","\xed","\x05"),
	HX_HCSTRING("generateHTTPHeader","\xaa","\x8a","\xfa","\x70"),
	::String(null()) };

static void ToolsetInterface_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ToolsetInterface_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ToolsetInterface_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(ToolsetInterface_obj::connected,"connected");
	HX_MARK_MEMBER_NAME(ToolsetInterface_obj::ready,"ready");
	HX_MARK_MEMBER_NAME(ToolsetInterface_obj::assetUpdatedListeners,"assetUpdatedListeners");
	HX_MARK_MEMBER_NAME(ToolsetInterface_obj::INT_LENGTH,"INT_LENGTH");
	HX_MARK_MEMBER_NAME(ToolsetInterface_obj::traceQueue,"traceQueue");
	HX_MARK_MEMBER_NAME(ToolsetInterface_obj::paused,"paused");
	HX_MARK_MEMBER_NAME(ToolsetInterface_obj::wasPaused,"wasPaused");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ToolsetInterface_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ToolsetInterface_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ToolsetInterface_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(ToolsetInterface_obj::connected,"connected");
	HX_VISIT_MEMBER_NAME(ToolsetInterface_obj::ready,"ready");
	HX_VISIT_MEMBER_NAME(ToolsetInterface_obj::assetUpdatedListeners,"assetUpdatedListeners");
	HX_VISIT_MEMBER_NAME(ToolsetInterface_obj::INT_LENGTH,"INT_LENGTH");
	HX_VISIT_MEMBER_NAME(ToolsetInterface_obj::traceQueue,"traceQueue");
	HX_VISIT_MEMBER_NAME(ToolsetInterface_obj::paused,"paused");
	HX_VISIT_MEMBER_NAME(ToolsetInterface_obj::wasPaused,"wasPaused");
};

#endif

hx::Class ToolsetInterface_obj::__mClass;

static ::String ToolsetInterface_obj_sStaticFields[] = {
	HX_HCSTRING("instance","\x95","\x1f","\xe1","\x59"),
	HX_HCSTRING("connected","\xc9","\xe2","\xf6","\xa2"),
	HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"),
	HX_HCSTRING("assetUpdatedListeners","\xd4","\x09","\x9e","\xcd"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	HX_HCSTRING("cancelConnection","\x38","\xee","\x00","\x55"),
	HX_HCSTRING("preloadedUpdate","\x91","\x1c","\xd1","\xce"),
	HX_HCSTRING("INT_LENGTH","\x96","\xf1","\x58","\x9f"),
	HX_HCSTRING("traceQueue","\xcc","\xac","\x4c","\x25"),
	HX_HCSTRING("gciTrace","\x78","\xb8","\xde","\xbc"),
	HX_HCSTRING("imageTrace","\x2a","\x55","\xed","\x21"),
	HX_HCSTRING("addAssetUpdatedListener","\x80","\x92","\x92","\xa2"),
	HX_HCSTRING("removeAssetUpdatedListener","\x23","\x40","\x51","\x16"),
	HX_HCSTRING("clearAssetUpdatedListeners","\x07","\x1f","\xe9","\xed"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("wasPaused","\xb7","\x1a","\x92","\x8c"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	::String(null())
};

void ToolsetInterface_obj::__register()
{
	hx::Object *dummy = new ToolsetInterface_obj;
	ToolsetInterface_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.ToolsetInterface","\xdb","\xeb","\x6e","\xff");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ToolsetInterface_obj::__GetStatic;
	__mClass->mSetStaticField = &ToolsetInterface_obj::__SetStatic;
	__mClass->mMarkFunc = ToolsetInterface_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ToolsetInterface_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ToolsetInterface_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ToolsetInterface_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ToolsetInterface_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ToolsetInterface_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ToolsetInterface_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ToolsetInterface_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_22_boot)
HXDLIN(  22)		connected = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_23_boot)
HXDLIN(  23)		ready = false;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d729eec6c01450e4_25_boot)
HXDLIN(  25)		assetUpdatedListeners =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_122_boot)
HXDLIN( 122)		INT_LENGTH = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_340_boot)
HXDLIN( 340)		traceQueue = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_446_boot)
HXDLIN( 446)		paused = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_d729eec6c01450e4_447_boot)
HXDLIN( 447)		wasPaused = false;
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
