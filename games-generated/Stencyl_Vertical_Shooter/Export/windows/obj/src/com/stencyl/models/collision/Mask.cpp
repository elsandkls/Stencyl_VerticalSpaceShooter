// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_CollisionInfo
#include <com/stencyl/models/collision/CollisionInfo.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Hitbox
#include <com/stencyl/models/collision/Hitbox.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Mask
#include <com/stencyl/models/collision/Mask.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Masklist
#include <com/stencyl/models/collision/Masklist.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4876e572f342a4d8_36_new,"com.stencyl.models.collision.Mask","new",0x8823784f,"com.stencyl.models.collision.Mask.new","com/stencyl/models/collision/Mask.hx",36,0x3d278601)
HX_LOCAL_STACK_FRAME(_hx_pos_4876e572f342a4d8_54_collide,"com.stencyl.models.collision.Mask","collide",0x90577aed,"com.stencyl.models.collision.Mask.collide","com/stencyl/models/collision/Mask.hx",54,0x3d278601)
HX_LOCAL_STACK_FRAME(_hx_pos_4876e572f342a4d8_71_collideMask,"com.stencyl.models.collision.Mask","collideMask",0x93c36279,"com.stencyl.models.collision.Mask.collideMask","com/stencyl/models/collision/Mask.hx",71,0x3d278601)
HX_LOCAL_STACK_FRAME(_hx_pos_4876e572f342a4d8_92_collideMasklist,"com.stencyl.models.collision.Mask","collideMasklist",0x694baf57,"com.stencyl.models.collision.Mask.collideMasklist","com/stencyl/models/collision/Mask.hx",92,0x3d278601)
HX_LOCAL_STACK_FRAME(_hx_pos_4876e572f342a4d8_97_assignTo,"com.stencyl.models.collision.Mask","assignTo",0x0125ef3b,"com.stencyl.models.collision.Mask.assignTo","com/stencyl/models/collision/Mask.hx",97,0x3d278601)
HX_LOCAL_STACK_FRAME(_hx_pos_4876e572f342a4d8_106_debugDraw,"com.stencyl.models.collision.Mask","debugDraw",0x45cc9526,"com.stencyl.models.collision.Mask.debugDraw","com/stencyl/models/collision/Mask.hx",106,0x3d278601)
HX_LOCAL_STACK_FRAME(_hx_pos_4876e572f342a4d8_112_update,"com.stencyl.models.collision.Mask","update",0x8b323d7a,"com.stencyl.models.collision.Mask.update","com/stencyl/models/collision/Mask.hx",112,0x3d278601)
HX_LOCAL_STACK_FRAME(_hx_pos_4876e572f342a4d8_117_projectMask,"com.stencyl.models.collision.Mask","projectMask",0xfcaf0f54,"com.stencyl.models.collision.Mask.projectMask","com/stencyl/models/collision/Mask.hx",117,0x3d278601)
namespace com{
namespace stencyl{
namespace models{
namespace collision{

void Mask_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_4876e572f342a4d8_36_new)
HXLINE(  37)		this->collideTypes = ::Array_obj< int >::__new();
HXLINE(  38)		this->solid = true;
HXLINE(  39)		this->_class = ::Type_obj::getClassName(::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this)));
HXLINE(  40)		this->_check =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  41)		{
HXLINE(  41)			::Dynamic this1 = this->_check;
HXDLIN(  41)			( ( ::haxe::ds::StringMap)(this1) )->set(::Type_obj::getClassName(hx::ClassOf< ::com::stencyl::models::collision::Mask >()),this->collideMask_dyn());
            		}
HXLINE(  42)		{
HXLINE(  42)			::Dynamic this2 = this->_check;
HXDLIN(  42)			( ( ::haxe::ds::StringMap)(this2) )->set(::Type_obj::getClassName(hx::ClassOf< ::com::stencyl::models::collision::Masklist >()),this->collideMasklist_dyn());
            		}
HXLINE(  44)		this->lastBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  45)		this->lastColID = (int)-1;
            	}

Dynamic Mask_obj::__CreateEmpty() { return new Mask_obj; }

void *Mask_obj::_hx_vtable = 0;

Dynamic Mask_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mask_obj > _hx_result = new Mask_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mask_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2ff29145;
}

bool Mask_obj::collide( ::com::stencyl::models::collision::Mask mask){
            	HX_STACKFRAME(&_hx_pos_4876e572f342a4d8_54_collide)
HXLINE(  55)		if (hx::IsNull( this->parent )) {
HXLINE(  57)			HX_STACK_DO_THROW(HX_("Mask must be attached to a parent Entity",57,57,43,9a));
            		}
HXLINE(  60)		 ::Dynamic cbFunc = this->_check->get(mask->_class);
HXLINE(  61)		if (hx::IsNotNull( cbFunc )) {
HXLINE(  61)			return ( (bool)(cbFunc(mask)) );
            		}
HXLINE(  63)		cbFunc = mask->_check->get(this->_class);
HXLINE(  64)		if (hx::IsNotNull( cbFunc )) {
HXLINE(  64)			return ( (bool)(cbFunc(hx::ObjectPtr<OBJ_>(this))) );
            		}
HXLINE(  66)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mask_obj,collide,return )

bool Mask_obj::collideMask( ::com::stencyl::models::collision::Mask other){
            	HX_STACKFRAME(&_hx_pos_4876e572f342a4d8_71_collideMask)
HXLINE(  72)		bool _hx_tmp;
HXDLIN(  72)		bool _hx_tmp1;
HXDLIN(  72)		bool _hx_tmp2;
HXDLIN(  72)		if (((this->parent->colX + this->parent->cacheWidth) > other->parent->colX)) {
HXLINE(  72)			_hx_tmp2 = ((this->parent->colY + this->parent->cacheHeight) > other->parent->colY);
            		}
            		else {
HXLINE(  72)			_hx_tmp2 = false;
            		}
HXDLIN(  72)		if (_hx_tmp2) {
HXLINE(  74)			Float _hx_tmp3 = this->parent->colX;
HXLINE(  72)			_hx_tmp1 = (_hx_tmp3 < (other->parent->colX + other->parent->cacheWidth));
            		}
            		else {
HXLINE(  72)			_hx_tmp1 = false;
            		}
HXDLIN(  72)		if (_hx_tmp1) {
HXLINE(  75)			Float _hx_tmp4 = this->parent->colY;
HXLINE(  72)			_hx_tmp = (_hx_tmp4 < (other->parent->colY + other->parent->cacheHeight));
            		}
            		else {
HXLINE(  72)			_hx_tmp = false;
            		}
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  77)			this->lastBounds->x = this->parent->colX;
HXLINE(  78)			this->lastBounds->y = this->parent->colY;
HXLINE(  79)			this->lastBounds->width = this->parent->cacheWidth;
HXLINE(  80)			this->lastBounds->height = this->parent->cacheHeight;
HXLINE(  82)			this->lastCheckedMask = hx::ObjectPtr<OBJ_>(this);
HXLINE(  84)			return true;
            		}
HXLINE(  87)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mask_obj,collideMask,return )

bool Mask_obj::collideMasklist( ::com::stencyl::models::collision::Masklist other){
            	HX_STACKFRAME(&_hx_pos_4876e572f342a4d8_92_collideMasklist)
HXDLIN(  92)		return other->collide(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mask_obj,collideMasklist,return )

void Mask_obj::assignTo( ::com::stencyl::models::Actor parent){
            	HX_STACKFRAME(&_hx_pos_4876e572f342a4d8_97_assignTo)
HXLINE(  98)		this->parent = parent;
HXLINE(  99)		if (hx::IsNotNull( parent )) {
HXLINE(  99)			this->update();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mask_obj,assignTo,(void))

void Mask_obj::debugDraw( ::openfl::display::Graphics graphics,Float scaleX,Float scaleY){
            	HX_STACKFRAME(&_hx_pos_4876e572f342a4d8_106_debugDraw)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Mask_obj,debugDraw,(void))

void Mask_obj::update(){
            	HX_STACKFRAME(&_hx_pos_4876e572f342a4d8_112_update)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mask_obj,update,(void))

void Mask_obj::projectMask( ::openfl::geom::Point axis, ::com::stencyl::models::collision::CollisionInfo collisionInfo){
            	HX_STACKFRAME(&_hx_pos_4876e572f342a4d8_117_projectMask)
HXLINE( 118)		Float cur;
HXDLIN( 118)		Float max = ((Float)-9999999999.);
HXDLIN( 118)		Float min = ((Float)9999999999.);
HXLINE( 122)		Float cur1 = (-(this->parent->currOffset->x) * axis->x);
HXDLIN( 122)		cur = (cur1 - (this->parent->currOffset->y * axis->y));
HXLINE( 123)		if ((cur < min)) {
HXLINE( 124)			min = cur;
            		}
HXLINE( 125)		if ((cur > max)) {
HXLINE( 126)			max = cur;
            		}
HXLINE( 128)		Float cur2 = ((-(this->parent->currOffset->x) + this->parent->cacheWidth) * axis->x);
HXDLIN( 128)		cur = (cur2 - (this->parent->currOffset->y * axis->y));
HXLINE( 129)		if ((cur < min)) {
HXLINE( 130)			min = cur;
            		}
HXLINE( 131)		if ((cur > max)) {
HXLINE( 132)			max = cur;
            		}
HXLINE( 134)		Float cur3 = (-(this->parent->currOffset->x) * axis->x);
HXDLIN( 134)		cur = (cur3 + ((-(this->parent->currOffset->y) + this->parent->cacheHeight) * axis->y));
HXLINE( 135)		if ((cur < min)) {
HXLINE( 136)			min = cur;
            		}
HXLINE( 137)		if ((cur > max)) {
HXLINE( 138)			max = cur;
            		}
HXLINE( 140)		Float cur4 = ((-(this->parent->currOffset->x) + this->parent->cacheWidth) * axis->x);
HXDLIN( 140)		cur = (cur4 + ((-(this->parent->currOffset->y) + this->parent->cacheHeight) * axis->y));
HXLINE( 141)		if ((cur < min)) {
HXLINE( 142)			min = cur;
            		}
HXLINE( 143)		if ((cur > max)) {
HXLINE( 144)			max = cur;
            		}
HXLINE( 146)		collisionInfo->min = min;
HXLINE( 147)		collisionInfo->max = max;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Mask_obj,projectMask,(void))


hx::ObjectPtr< Mask_obj > Mask_obj::__new() {
	hx::ObjectPtr< Mask_obj > __this = new Mask_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Mask_obj > Mask_obj::__alloc(hx::Ctx *_hx_ctx) {
	Mask_obj *__this = (Mask_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mask_obj), true, "com.stencyl.models.collision.Mask"));
	*(void **)__this = Mask_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Mask_obj::Mask_obj()
{
}

void Mask_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mask);
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(groupID,"groupID");
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(lastBounds,"lastBounds");
	HX_MARK_MEMBER_NAME(lastCheckedMask,"lastCheckedMask");
	HX_MARK_MEMBER_NAME(lastColID,"lastColID");
	HX_MARK_MEMBER_NAME(solid,"solid");
	HX_MARK_MEMBER_NAME(collideTypes,"collideTypes");
	HX_MARK_MEMBER_NAME(_class,"_class");
	HX_MARK_MEMBER_NAME(_check,"_check");
	HX_MARK_END_CLASS();
}

void Mask_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(groupID,"groupID");
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(lastBounds,"lastBounds");
	HX_VISIT_MEMBER_NAME(lastCheckedMask,"lastCheckedMask");
	HX_VISIT_MEMBER_NAME(lastColID,"lastColID");
	HX_VISIT_MEMBER_NAME(solid,"solid");
	HX_VISIT_MEMBER_NAME(collideTypes,"collideTypes");
	HX_VISIT_MEMBER_NAME(_class,"_class");
	HX_VISIT_MEMBER_NAME(_check,"_check");
}

hx::Val Mask_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"solid") ) { return hx::Val( solid ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"_class") ) { return hx::Val( _class ); }
		if (HX_FIELD_EQ(inName,"_check") ) { return hx::Val( _check ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"groupID") ) { return hx::Val( groupID ); }
		if (HX_FIELD_EQ(inName,"collide") ) { return hx::Val( collide_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"assignTo") ) { return hx::Val( assignTo_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastColID") ) { return hx::Val( lastColID ); }
		if (HX_FIELD_EQ(inName,"debugDraw") ) { return hx::Val( debugDraw_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastBounds") ) { return hx::Val( lastBounds ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"collideMask") ) { return hx::Val( collideMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"projectMask") ) { return hx::Val( projectMask_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"collideTypes") ) { return hx::Val( collideTypes ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastCheckedMask") ) { return hx::Val( lastCheckedMask ); }
		if (HX_FIELD_EQ(inName,"collideMasklist") ) { return hx::Val( collideMasklist_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Mask_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast<  ::com::stencyl::models::collision::Masklist >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"solid") ) { solid=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_class") ) { _class=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_check") ) { _check=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"groupID") ) { groupID=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastColID") ) { lastColID=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastBounds") ) { lastBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"collideTypes") ) { collideTypes=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastCheckedMask") ) { lastCheckedMask=inValue.Cast<  ::com::stencyl::models::collision::Mask >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mask_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"));
	outFields->push(HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"));
	outFields->push(HX_HCSTRING("lastBounds","\x6b","\x69","\xf8","\x30"));
	outFields->push(HX_HCSTRING("lastCheckedMask","\xfd","\xe0","\x06","\x79"));
	outFields->push(HX_HCSTRING("lastColID","\xe5","\x7d","\x09","\x97"));
	outFields->push(HX_HCSTRING("solid","\x2b","\xb4","\xc5","\x80"));
	outFields->push(HX_HCSTRING("collideTypes","\x1b","\x48","\xd2","\x2e"));
	outFields->push(HX_HCSTRING("_class","\x79","\xbf","\x3f","\x44"));
	outFields->push(HX_HCSTRING("_check","\x09","\xe0","\x9d","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Mask_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(Mask_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsInt,(int)offsetof(Mask_obj,groupID),HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86")},
	{hx::fsObject /*::com::stencyl::models::collision::Masklist*/ ,(int)offsetof(Mask_obj,list),HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Mask_obj,lastBounds),HX_HCSTRING("lastBounds","\x6b","\x69","\xf8","\x30")},
	{hx::fsObject /*::com::stencyl::models::collision::Mask*/ ,(int)offsetof(Mask_obj,lastCheckedMask),HX_HCSTRING("lastCheckedMask","\xfd","\xe0","\x06","\x79")},
	{hx::fsInt,(int)offsetof(Mask_obj,lastColID),HX_HCSTRING("lastColID","\xe5","\x7d","\x09","\x97")},
	{hx::fsBool,(int)offsetof(Mask_obj,solid),HX_HCSTRING("solid","\x2b","\xb4","\xc5","\x80")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Mask_obj,collideTypes),HX_HCSTRING("collideTypes","\x1b","\x48","\xd2","\x2e")},
	{hx::fsString,(int)offsetof(Mask_obj,_class),HX_HCSTRING("_class","\x79","\xbf","\x3f","\x44")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Mask_obj,_check),HX_HCSTRING("_check","\x09","\xe0","\x9d","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Mask_obj_sStaticStorageInfo = 0;
#endif

static ::String Mask_obj_sMemberFields[] = {
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("lastBounds","\x6b","\x69","\xf8","\x30"),
	HX_HCSTRING("lastCheckedMask","\xfd","\xe0","\x06","\x79"),
	HX_HCSTRING("lastColID","\xe5","\x7d","\x09","\x97"),
	HX_HCSTRING("solid","\x2b","\xb4","\xc5","\x80"),
	HX_HCSTRING("collideTypes","\x1b","\x48","\xd2","\x2e"),
	HX_HCSTRING("collide","\x7e","\xaf","\x63","\xed"),
	HX_HCSTRING("collideMask","\x8a","\xb3","\x13","\xba"),
	HX_HCSTRING("collideMasklist","\xe8","\x5c","\x68","\x36"),
	HX_HCSTRING("assignTo","\x8a","\xb9","\xc7","\x0e"),
	HX_HCSTRING("debugDraw","\xf7","\xcf","\xbb","\x25"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("projectMask","\x65","\x60","\xff","\x22"),
	HX_HCSTRING("_class","\x79","\xbf","\x3f","\x44"),
	HX_HCSTRING("_check","\x09","\xe0","\x9d","\x41"),
	::String(null()) };

static void Mask_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mask_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mask_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mask_obj::__mClass,"__mClass");
};

#endif

hx::Class Mask_obj::__mClass;

void Mask_obj::__register()
{
	hx::Object *dummy = new Mask_obj;
	Mask_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.collision.Mask","\xdd","\xa4","\x37","\x0b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Mask_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mask_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mask_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mask_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mask_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mask_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace collision
