// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Universal
#include <Universal.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Joystick
#include <com/stencyl/models/Joystick.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Assets
#include <com/stencyl/utils/Assets.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_ui_Multitouch
#include <openfl/ui/Multitouch.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b786868a12cfda0f_18_new,"com.stencyl.models.Joystick","new",0x00253ae3,"com.stencyl.models.Joystick.new","com/stencyl/models/Joystick.hx",18,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_63_start,"com.stencyl.models.Joystick","start",0x2aeec5a5,"com.stencyl.models.Joystick.start","com/stencyl/models/Joystick.hx",63,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_92_stop,"com.stencyl.models.Joystick","stop",0x23c7b81f,"com.stencyl.models.Joystick.stop","com/stencyl/models/Joystick.hx",92,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_112_onTouchBegin,"com.stencyl.models.Joystick","onTouchBegin",0xbbf71d06,"com.stencyl.models.Joystick.onTouchBegin","com/stencyl/models/Joystick.hx",112,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_117_onTouchMove,"com.stencyl.models.Joystick","onTouchMove",0xcfe47ad4,"com.stencyl.models.Joystick.onTouchMove","com/stencyl/models/Joystick.hx",117,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_122_onTouchEnd,"com.stencyl.models.Joystick","onTouchEnd",0x1220d578,"com.stencyl.models.Joystick.onTouchEnd","com/stencyl/models/Joystick.hx",122,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_127_onMouseDown,"com.stencyl.models.Joystick","onMouseDown",0xb0d9b98b,"com.stencyl.models.Joystick.onMouseDown","com/stencyl/models/Joystick.hx",127,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_132_onMouseMove,"com.stencyl.models.Joystick","onMouseMove",0xb6cca43a,"com.stencyl.models.Joystick.onMouseMove","com/stencyl/models/Joystick.hx",132,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_137_onMouseUp,"com.stencyl.models.Joystick","onMouseUp",0xf5565b44,"com.stencyl.models.Joystick.onMouseUp","com/stencyl/models/Joystick.hx",137,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_141_onBegin,"com.stencyl.models.Joystick","onBegin",0xe9dff08d,"com.stencyl.models.Joystick.onBegin","com/stencyl/models/Joystick.hx",141,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_211_onMove,"com.stencyl.models.Joystick","onMove",0x4aeeb52d,"com.stencyl.models.Joystick.onMove","com/stencyl/models/Joystick.hx",211,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_241_onEnd,"com.stencyl.models.Joystick","onEnd",0xd947e93f,"com.stencyl.models.Joystick.onEnd","com/stencyl/models/Joystick.hx",241,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_23_resetStatics,"com.stencyl.models.Joystick","resetStatics",0xe2102f13,"com.stencyl.models.Joystick.resetStatics","com/stencyl/models/Joystick.hx",23,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_274_addJoystick,"com.stencyl.models.Joystick","addJoystick",0x6d223d80,"com.stencyl.models.Joystick.addJoystick","com/stencyl/models/Joystick.hx",274,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_318_removeJoystick,"com.stencyl.models.Joystick","removeJoystick",0x2e700b7d,"com.stencyl.models.Joystick.removeJoystick","com/stencyl/models/Joystick.hx",318,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_335_getJoystickDisDir,"com.stencyl.models.Joystick","getJoystickDisDir",0x74d95f74,"com.stencyl.models.Joystick.getJoystickDisDir","com/stencyl/models/Joystick.hx",335,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_352_setJoystickCenter,"com.stencyl.models.Joystick","setJoystickCenter",0xe127e0b6,"com.stencyl.models.Joystick.setJoystickCenter","com/stencyl/models/Joystick.hx",352,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_366_getJoystickCenter,"com.stencyl.models.Joystick","getJoystickCenter",0xbdba08aa,"com.stencyl.models.Joystick.getJoystickCenter","com/stencyl/models/Joystick.hx",366,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_383_setJoystickRadius,"com.stencyl.models.Joystick","setJoystickRadius",0x8c438b33,"com.stencyl.models.Joystick.setJoystickRadius","com/stencyl/models/Joystick.hx",383,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_400_getJoystickRadius,"com.stencyl.models.Joystick","getJoystickRadius",0x68d5b327,"com.stencyl.models.Joystick.getJoystickRadius","com/stencyl/models/Joystick.hx",400,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_417_alwaysHideRJ,"com.stencyl.models.Joystick","alwaysHideRJ",0x09686646,"com.stencyl.models.Joystick.alwaysHideRJ","com/stencyl/models/Joystick.hx",417,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_429_setDefaultDirection,"com.stencyl.models.Joystick","setDefaultDirection",0x33860583,"com.stencyl.models.Joystick.setDefaultDirection","com/stencyl/models/Joystick.hx",429,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_439_isJoystickPressed,"com.stencyl.models.Joystick","isJoystickPressed",0x09f7363f,"com.stencyl.models.Joystick.isJoystickPressed","com/stencyl/models/Joystick.hx",439,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_454_setTouchRegionForRJ,"com.stencyl.models.Joystick","setTouchRegionForRJ",0xf7ea4433,"com.stencyl.models.Joystick.setTouchRegionForRJ","com/stencyl/models/Joystick.hx",454,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_466_getTouchRegionPropertyForRJ,"com.stencyl.models.Joystick","getTouchRegionPropertyForRJ",0xe2c6ba92,"com.stencyl.models.Joystick.getTouchRegionPropertyForRJ","com/stencyl/models/Joystick.hx",466,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_499_setJoystickImage,"com.stencyl.models.Joystick","setJoystickImage",0xbc191b9a,"com.stencyl.models.Joystick.setJoystickImage","com/stencyl/models/Joystick.hx",499,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_558_setJoystickAlpha,"com.stencyl.models.Joystick","setJoystickAlpha",0x2046a39d,"com.stencyl.models.Joystick.setJoystickAlpha","com/stencyl/models/Joystick.hx",558,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_44_boot,"com.stencyl.models.Joystick","boot",0x18874c4f,"com.stencyl.models.Joystick.boot","com/stencyl/models/Joystick.hx",44,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_45_boot,"com.stencyl.models.Joystick","boot",0x18874c4f,"com.stencyl.models.Joystick.boot","com/stencyl/models/Joystick.hx",45,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_58_boot,"com.stencyl.models.Joystick","boot",0x18874c4f,"com.stencyl.models.Joystick.boot","com/stencyl/models/Joystick.hx",58,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_59_boot,"com.stencyl.models.Joystick","boot",0x18874c4f,"com.stencyl.models.Joystick.boot","com/stencyl/models/Joystick.hx",59,0xf0cc310e)
HX_LOCAL_STACK_FRAME(_hx_pos_b786868a12cfda0f_60_boot,"com.stencyl.models.Joystick","boot",0x18874c4f,"com.stencyl.models.Joystick.boot","com/stencyl/models/Joystick.hx",60,0xf0cc310e)
namespace com{
namespace stencyl{
namespace models{

void Joystick_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_18_new)
HXLINE(  56)		this->isPressed = false;
HXLINE(  54)		this->innerAlphaWhenPressed = ((Float)1);
HXLINE(  53)		this->innerAlphaWhenReleased = ((Float)1);
HXLINE(  52)		this->outerAlphaWhenPressed = ((Float)1);
HXLINE(  51)		this->outerAlphaWhenReleased = ((Float)1);
HXLINE(  49)		this->innerImage = null();
HXLINE(  48)		this->outerImage = null();
HXLINE(  46)		this->hideWhenReleased = false;
HXLINE(  43)		this->joystickType = (int)0;
HXLINE(  41)		this->joystickDefaultDirection = ((Float)0);
HXLINE(  40)		this->joystickDirection = ((Float)0);
HXLINE(  39)		this->joystickDistance = ((Float)0);
HXLINE(  18)		super::__construct();
            	}

Dynamic Joystick_obj::__CreateEmpty() { return new Joystick_obj; }

void *Joystick_obj::_hx_vtable = 0;

Dynamic Joystick_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Joystick_obj > _hx_result = new Joystick_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Joystick_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x2b4bfb11) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x2b4bfb11;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Joystick_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_b786868a12cfda0f_63_start)
HXLINE(  64)		if (!(::com::stencyl::models::Joystick_obj::initialized)) {
HXLINE(  66)			::com::stencyl::models::Joystick_obj::initialized = true;
HXLINE(  68)			::com::stencyl::models::Joystick_obj::joystickMap =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  70)			::com::stencyl::models::Joystick_obj::viewOffsetX = ::com::stencyl::Engine_obj::screenOffsetX;
HXLINE(  71)			::com::stencyl::models::Joystick_obj::viewOffsetY = ::com::stencyl::Engine_obj::screenOffsetY;
            		}
HXLINE(  74)		if (::openfl::ui::Multitouch_obj::get_supportsTouchEvents()) {
HXLINE(  76)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("touchBegin",ea,cd,e6,a9),this->onTouchBegin_dyn(),null(),null(),null());
HXLINE(  77)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("touchMove",70,72,cd,0d),this->onTouchMove_dyn(),null(),null(),null());
HXLINE(  78)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("touchEnd",5c,c5,09,00),this->onTouchEnd_dyn(),null(),null(),null());
HXLINE(  80)			::openfl::ui::Multitouch_obj::inputMode = (int)2;
            		}
            		else {
HXLINE(  85)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null(),null(),null());
HXLINE(  86)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMove_dyn(),null(),null(),null());
HXLINE(  87)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Joystick_obj,start,(void))

void Joystick_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_92_stop)
HXLINE(  93)		if (::openfl::ui::Multitouch_obj::get_supportsTouchEvents()) {
HXLINE(  95)			::com::stencyl::Engine_obj::stage->removeEventListener(HX_("touchBegin",ea,cd,e6,a9),this->onTouchBegin_dyn(),null());
HXLINE(  96)			::com::stencyl::Engine_obj::stage->removeEventListener(HX_("touchMove",70,72,cd,0d),this->onTouchMove_dyn(),null());
HXLINE(  97)			::com::stencyl::Engine_obj::stage->removeEventListener(HX_("touchEnd",5c,c5,09,00),this->onTouchEnd_dyn(),null());
            		}
            		else {
HXLINE( 102)			::com::stencyl::Engine_obj::stage->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->onMouseDown_dyn(),null());
HXLINE( 103)			::com::stencyl::Engine_obj::stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->onMouseMove_dyn(),null());
HXLINE( 104)			::com::stencyl::Engine_obj::stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->onMouseUp_dyn(),null());
            		}
HXLINE( 107)		::com::stencyl::models::Joystick_obj::joystickMap = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Joystick_obj,stop,(void))

void Joystick_obj::onTouchBegin( ::openfl::events::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_112_onTouchBegin)
HXDLIN( 112)		this->onBegin(e->stageX,e->stageY,e->touchPointID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Joystick_obj,onTouchBegin,(void))

void Joystick_obj::onTouchMove( ::openfl::events::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_117_onTouchMove)
HXDLIN( 117)		this->onMove(e->stageX,e->stageY,e->touchPointID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Joystick_obj,onTouchMove,(void))

void Joystick_obj::onTouchEnd( ::openfl::events::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_122_onTouchEnd)
HXDLIN( 122)		this->onEnd(e->stageX,e->stageY,e->touchPointID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Joystick_obj,onTouchEnd,(void))

void Joystick_obj::onMouseDown( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_127_onMouseDown)
HXDLIN( 127)		this->onBegin(e->stageX,e->stageY,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Joystick_obj,onMouseDown,(void))

void Joystick_obj::onMouseMove( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_132_onMouseMove)
HXDLIN( 132)		this->onMove(e->stageX,e->stageY,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Joystick_obj,onMouseMove,(void))

void Joystick_obj::onMouseUp( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_137_onMouseUp)
HXDLIN( 137)		this->onEnd(e->stageX,e->stageY,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Joystick_obj,onMouseUp,(void))

void Joystick_obj::onBegin(Float x,Float y,int currentTouch){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_141_onBegin)
HXLINE( 142)		if ((this->joystickTouchID != (int)-1)) {
HXLINE( 144)			return;
            		}
HXLINE( 147)		x = ((Float)x / (Float)::com::stencyl::Engine_obj::screenScaleX);
HXLINE( 148)		y = ((Float)y / (Float)::com::stencyl::Engine_obj::screenScaleY);
HXLINE( 150)		this->outerImage->set_alpha(this->outerAlphaWhenPressed);
HXLINE( 151)		this->innerImage->set_alpha(this->innerAlphaWhenPressed);
HXLINE( 153)		if ((this->joystickType == ::com::stencyl::models::Joystick_obj::fixedCenter)) {
HXLINE( 155)			Float distance = ::Math_obj::pow(((this->center->x + ::com::stencyl::models::Joystick_obj::viewOffsetX) - x),(int)2);
HXDLIN( 155)			Float distance1 = ::Math_obj::sqrt((distance + ::Math_obj::pow(((this->center->y + ::com::stencyl::models::Joystick_obj::viewOffsetY) - y),(int)2)));
HXLINE( 156)			Float radians = ((this->center->y + ::com::stencyl::models::Joystick_obj::viewOffsetY) - y);
HXDLIN( 156)			Float radians1 = ::Math_obj::atan2(radians,((this->center->x + ::com::stencyl::models::Joystick_obj::viewOffsetX) - x));
HXLINE( 158)			if ((distance1 > this->outerRadius)) {
HXLINE( 160)				return;
            			}
            			else {
HXLINE( 163)				if ((distance1 > (this->outerRadius - this->innerRadius))) {
HXLINE( 165)					distance1 = (this->outerRadius - this->innerRadius);
HXLINE( 166)					 ::openfl::display::Bitmap _hx_tmp = this->innerImage;
HXDLIN( 166)					Float _hx_tmp1 = this->center->x;
HXDLIN( 166)					Float _hx_tmp2 = ::Math_obj::cos(radians1);
HXDLIN( 166)					Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * (this->outerRadius - this->innerRadius)));
HXDLIN( 166)					_hx_tmp->set_x((_hx_tmp3 - (this->innerImage->get_width() * ((Float)0.5))));
HXLINE( 167)					 ::openfl::display::Bitmap _hx_tmp4 = this->innerImage;
HXDLIN( 167)					Float _hx_tmp5 = this->center->y;
HXDLIN( 167)					Float _hx_tmp6 = ::Math_obj::sin(radians1);
HXDLIN( 167)					Float _hx_tmp7 = (_hx_tmp5 - (_hx_tmp6 * (this->outerRadius - this->innerRadius)));
HXDLIN( 167)					_hx_tmp4->set_y((_hx_tmp7 - (this->innerImage->get_height() * ((Float)0.5))));
            				}
            				else {
HXLINE( 172)					 ::openfl::display::Bitmap _hx_tmp8 = this->innerImage;
HXDLIN( 172)					Float _hx_tmp9 = (x - ::com::stencyl::models::Joystick_obj::viewOffsetX);
HXDLIN( 172)					_hx_tmp8->set_x((_hx_tmp9 - (this->innerImage->get_width() * ((Float)0.5))));
HXLINE( 173)					 ::openfl::display::Bitmap _hx_tmp10 = this->innerImage;
HXDLIN( 173)					Float _hx_tmp11 = (y - ::com::stencyl::models::Joystick_obj::viewOffsetY);
HXDLIN( 173)					_hx_tmp10->set_y((_hx_tmp11 - (this->innerImage->get_height() * ((Float)0.5))));
            				}
            			}
HXLINE( 176)			this->isPressed = true;
HXLINE( 178)			this->joystickTouchID = currentTouch;
HXLINE( 179)			this->joystickDistance = ((Float)distance1 / (Float)(this->outerRadius - this->innerRadius));
HXLINE( 180)			this->joystickDirection = (((Float)(radians1 * (int)180) / (Float)((Float)3.1415926535)) + (int)180);
            		}
            		else {
HXLINE( 183)			if ((this->joystickType == ::com::stencyl::models::Joystick_obj::showWherePressed)) {
HXLINE( 185)				bool _hx_tmp12;
HXDLIN( 185)				bool _hx_tmp13;
HXDLIN( 185)				bool _hx_tmp14;
HXDLIN( 185)				if (!((x < this->joystickBounds->x))) {
HXLINE( 185)					_hx_tmp14 = (x > (this->joystickBounds->x + this->joystickBounds->width));
            				}
            				else {
HXLINE( 185)					_hx_tmp14 = true;
            				}
HXDLIN( 185)				if (!(_hx_tmp14)) {
HXLINE( 185)					_hx_tmp13 = (y < this->joystickBounds->y);
            				}
            				else {
HXLINE( 185)					_hx_tmp13 = true;
            				}
HXDLIN( 185)				if (!(_hx_tmp13)) {
HXLINE( 185)					_hx_tmp12 = (y > (this->joystickBounds->y + this->joystickBounds->height));
            				}
            				else {
HXLINE( 185)					_hx_tmp12 = true;
            				}
HXDLIN( 185)				if (_hx_tmp12) {
HXLINE( 187)					return;
            				}
HXLINE( 190)				this->isPressed = true;
HXLINE( 192)				this->center->x = (x - ::com::stencyl::models::Joystick_obj::viewOffsetX);
HXLINE( 193)				this->center->y = (y - ::com::stencyl::models::Joystick_obj::viewOffsetY);
HXLINE( 195)				 ::openfl::display::Bitmap _hx_tmp15 = this->outerImage;
HXDLIN( 195)				Float _hx_tmp16 = this->center->x;
HXDLIN( 195)				_hx_tmp15->set_x((_hx_tmp16 - (this->outerImage->get_width() * ((Float)0.5))));
HXLINE( 196)				 ::openfl::display::Bitmap _hx_tmp17 = this->outerImage;
HXDLIN( 196)				Float _hx_tmp18 = this->center->y;
HXDLIN( 196)				_hx_tmp17->set_y((_hx_tmp18 - (this->outerImage->get_height() * ((Float)0.5))));
HXLINE( 197)				 ::openfl::display::Bitmap _hx_tmp19 = this->innerImage;
HXDLIN( 197)				Float _hx_tmp20 = this->center->x;
HXDLIN( 197)				_hx_tmp19->set_x((_hx_tmp20 - (this->innerImage->get_width() * ((Float)0.5))));
HXLINE( 198)				 ::openfl::display::Bitmap _hx_tmp21 = this->innerImage;
HXDLIN( 198)				Float _hx_tmp22 = this->center->y;
HXDLIN( 198)				_hx_tmp21->set_y((_hx_tmp22 - (this->innerImage->get_height() * ((Float)0.5))));
HXLINE( 200)				if (this->hideWhenReleased) {
HXLINE( 202)					this->outerImage->set_visible(true);
HXLINE( 203)					this->innerImage->set_visible(true);
            				}
HXLINE( 206)				this->joystickTouchID = currentTouch;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Joystick_obj,onBegin,(void))

void Joystick_obj::onMove(Float x,Float y,int currentTouch){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_211_onMove)
HXLINE( 212)		if ((currentTouch != this->joystickTouchID)) {
HXLINE( 214)			return;
            		}
HXLINE( 217)		x = ((Float)x / (Float)::com::stencyl::Engine_obj::screenScaleX);
HXLINE( 218)		y = ((Float)y / (Float)::com::stencyl::Engine_obj::screenScaleY);
HXLINE( 220)		Float distance = ::Math_obj::pow(((this->center->x + ::com::stencyl::models::Joystick_obj::viewOffsetX) - x),(int)2);
HXDLIN( 220)		Float distance1 = ::Math_obj::sqrt((distance + ::Math_obj::pow(((this->center->y + ::com::stencyl::models::Joystick_obj::viewOffsetY) - y),(int)2)));
HXLINE( 221)		Float radians = ((this->center->y + ::com::stencyl::models::Joystick_obj::viewOffsetY) - y);
HXDLIN( 221)		Float radians1 = ::Math_obj::atan2(radians,((this->center->x + ::com::stencyl::models::Joystick_obj::viewOffsetX) - x));
HXLINE( 223)		if ((distance1 > (this->outerRadius - this->innerRadius))) {
HXLINE( 225)			distance1 = (this->outerRadius - this->innerRadius);
HXLINE( 226)			 ::openfl::display::Bitmap _hx_tmp = this->innerImage;
HXDLIN( 226)			Float _hx_tmp1 = this->center->x;
HXDLIN( 226)			Float _hx_tmp2 = ::Math_obj::cos(radians1);
HXDLIN( 226)			Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * (this->outerRadius - this->innerRadius)));
HXDLIN( 226)			_hx_tmp->set_x((_hx_tmp3 - (this->innerImage->get_width() * ((Float)0.5))));
HXLINE( 227)			 ::openfl::display::Bitmap _hx_tmp4 = this->innerImage;
HXDLIN( 227)			Float _hx_tmp5 = this->center->y;
HXDLIN( 227)			Float _hx_tmp6 = ::Math_obj::sin(radians1);
HXDLIN( 227)			Float _hx_tmp7 = (_hx_tmp5 - (_hx_tmp6 * (this->outerRadius - this->innerRadius)));
HXDLIN( 227)			_hx_tmp4->set_y((_hx_tmp7 - (this->innerImage->get_height() * ((Float)0.5))));
            		}
            		else {
HXLINE( 232)			 ::openfl::display::Bitmap _hx_tmp8 = this->innerImage;
HXDLIN( 232)			Float _hx_tmp9 = (x - ::com::stencyl::models::Joystick_obj::viewOffsetX);
HXDLIN( 232)			_hx_tmp8->set_x((_hx_tmp9 - (this->innerImage->get_width() * ((Float)0.5))));
HXLINE( 233)			 ::openfl::display::Bitmap _hx_tmp10 = this->innerImage;
HXDLIN( 233)			Float _hx_tmp11 = (y - ::com::stencyl::models::Joystick_obj::viewOffsetY);
HXDLIN( 233)			_hx_tmp10->set_y((_hx_tmp11 - (this->innerImage->get_height() * ((Float)0.5))));
            		}
HXLINE( 236)		this->joystickDistance = ((Float)distance1 / (Float)(this->outerRadius - this->innerRadius));
HXLINE( 237)		this->joystickDirection = (((Float)(radians1 * (int)180) / (Float)((Float)3.1415926535)) + (int)180);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Joystick_obj,onMove,(void))

void Joystick_obj::onEnd(Float x,Float y,int currentTouch){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_241_onEnd)
HXLINE( 242)		if ((currentTouch != this->joystickTouchID)) {
HXLINE( 244)			return;
            		}
HXLINE( 247)		this->joystickTouchID = (int)-1;
HXLINE( 249)		this->isPressed = false;
HXLINE( 251)		this->outerImage->set_alpha(this->outerAlphaWhenReleased);
HXLINE( 252)		this->innerImage->set_alpha(this->innerAlphaWhenReleased);
HXLINE( 254)		Float _hx_tmp = this->outerImage->get_x();
HXDLIN( 254)		this->center->x = (_hx_tmp + this->outerRadius);
HXLINE( 255)		Float _hx_tmp1 = this->outerImage->get_y();
HXDLIN( 255)		this->center->y = (_hx_tmp1 + this->outerRadius);
HXLINE( 257)		 ::openfl::display::Bitmap _hx_tmp2 = this->innerImage;
HXDLIN( 257)		Float _hx_tmp3 = this->center->x;
HXDLIN( 257)		_hx_tmp2->set_x((_hx_tmp3 - (this->innerImage->get_width() * ((Float)0.5))));
HXLINE( 258)		 ::openfl::display::Bitmap _hx_tmp4 = this->innerImage;
HXDLIN( 258)		Float _hx_tmp5 = this->center->y;
HXDLIN( 258)		_hx_tmp4->set_y((_hx_tmp5 - (this->innerImage->get_height() * ((Float)0.5))));
HXLINE( 260)		if (this->hideWhenReleased) {
HXLINE( 262)			this->outerImage->set_visible(false);
HXLINE( 263)			this->innerImage->set_visible(false);
            		}
HXLINE( 266)		this->joystickDistance = (int)0;
HXLINE( 267)		this->joystickDirection = this->joystickDefaultDirection;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Joystick_obj,onEnd,(void))

 ::haxe::ds::IntMap Joystick_obj::joystickMap;

void Joystick_obj::resetStatics(){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_23_resetStatics)
HXLINE(  24)		::com::stencyl::models::Joystick_obj::joystickMap = null();
HXLINE(  25)		::com::stencyl::models::Joystick_obj::fixedCenter = (int)0;
HXLINE(  26)		::com::stencyl::models::Joystick_obj::showWherePressed = (int)1;
HXLINE(  27)		::com::stencyl::models::Joystick_obj::viewOffsetX = (::com::stencyl::models::Joystick_obj::viewOffsetY = (int)0);
HXLINE(  28)		::com::stencyl::models::Joystick_obj::initialized = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Joystick_obj,resetStatics,(void))

int Joystick_obj::fixedCenter;

int Joystick_obj::showWherePressed;

int Joystick_obj::viewOffsetX;

int Joystick_obj::viewOffsetY;

bool Joystick_obj::initialized;

void Joystick_obj::addJoystick(int id,Float x,Float y,hx::Null< int >  __o_type,hx::Null< Float >  __o_boundsX,hx::Null< Float >  __o_boundsY,hx::Null< Float >  __o_boundsWidth,hx::Null< Float >  __o_boundsHeight,hx::Null< bool >  __o_hide){
int type = __o_type.Default(0);
Float boundsX = __o_boundsX.Default(0);
Float boundsY = __o_boundsY.Default(0);
Float boundsWidth = __o_boundsWidth.Default(0);
Float boundsHeight = __o_boundsHeight.Default(0);
bool hide = __o_hide.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_b786868a12cfda0f_274_addJoystick)
HXLINE( 275)		bool _hx_tmp;
HXDLIN( 275)		if (hx::IsNotNull( ::com::stencyl::models::Joystick_obj::joystickMap )) {
HXLINE( 275)			_hx_tmp = ::com::stencyl::models::Joystick_obj::joystickMap->exists(id);
            		}
            		else {
HXLINE( 275)			_hx_tmp = false;
            		}
HXDLIN( 275)		if (_hx_tmp) {
HXLINE( 277)			::com::stencyl::models::Joystick_obj::removeJoystick(id);
            		}
HXLINE( 280)		 ::com::stencyl::models::Joystick joystick = ( ( ::com::stencyl::models::Joystick)(::Type_obj::createEmptyInstance(hx::ClassOf< ::com::stencyl::models::Joystick >())) );
HXLINE( 282)		joystick->start();
HXLINE( 284)		joystick->id = id;
HXLINE( 285)		joystick->joystickTouchID = (int)-1;
HXLINE( 286)		joystick->joystickDistance = (int)0;
HXLINE( 287)		joystick->joystickDirection = (int)0;
HXLINE( 288)		joystick->joystickDefaultDirection = (int)0;
HXLINE( 289)		joystick->joystickType = type;
HXLINE( 291)		Float _hx_tmp1 = (x * ::com::stencyl::Engine_obj::SCALE);
HXDLIN( 291)		joystick->center =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp1,(y * ::com::stencyl::Engine_obj::SCALE));
HXLINE( 293)		::com::stencyl::models::Joystick_obj::joystickMap->set(id,joystick);
HXLINE( 295)		::com::stencyl::models::Joystick_obj::setJoystickImage(id,true,HX_("outer-joystick",0e,36,29,3e));
HXLINE( 296)		::com::stencyl::models::Joystick_obj::setJoystickImage(id,false,HX_("inner-joystick",93,41,59,3b));
HXLINE( 298)		joystick->outerAlphaWhenPressed = (int)1;
HXLINE( 299)		joystick->outerAlphaWhenReleased = (int)1;
HXLINE( 300)		joystick->innerAlphaWhenPressed = (int)1;
HXLINE( 301)		joystick->innerAlphaWhenReleased = (int)1;
HXLINE( 303)		if ((joystick->joystickType == ::com::stencyl::models::Joystick_obj::showWherePressed)) {
HXLINE( 305)			Float _hx_tmp2 = ((boundsX * ::com::stencyl::Engine_obj::SCALE) + ::com::stencyl::models::Joystick_obj::viewOffsetX);
HXDLIN( 305)			Float _hx_tmp3 = ((boundsY * ::com::stencyl::Engine_obj::SCALE) + ::com::stencyl::models::Joystick_obj::viewOffsetY);
HXDLIN( 305)			Float _hx_tmp4 = (boundsWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN( 305)			joystick->joystickBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,_hx_tmp2,_hx_tmp3,_hx_tmp4,(boundsHeight * ::com::stencyl::Engine_obj::SCALE));
            		}
HXLINE( 308)		if (hide) {
HXLINE( 310)			joystick->hideWhenReleased = true;
HXLINE( 311)			joystick->outerImage->set_visible(false);
HXLINE( 312)			joystick->innerImage->set_visible(false);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(Joystick_obj,addJoystick,(void))

void Joystick_obj::removeJoystick(int id){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_318_removeJoystick)
HXDLIN( 318)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 320)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 321)			 ::Universal target = ::com::stencyl::Engine_obj::engine->root;
HXLINE( 323)			::com::stencyl::models::Joystick_obj::joystickMap->remove(id);
HXLINE( 325)			target->removeChild(joystick->outerImage);
HXLINE( 326)			target->removeChild(joystick->innerImage);
HXLINE( 328)			joystick = null();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Joystick_obj,removeJoystick,(void))

Float Joystick_obj::getJoystickDisDir(int id,hx::Null< bool >  __o_distance){
bool distance = __o_distance.Default(true);
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_335_getJoystickDisDir)
HXLINE( 336)		Float disdir = (int)0;
HXLINE( 338)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 340)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 342)			if (distance) {
HXLINE( 342)				disdir = joystick->joystickDistance;
            			}
            			else {
HXLINE( 342)				disdir = joystick->joystickDirection;
            			}
            		}
HXLINE( 345)		return disdir;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Joystick_obj,getJoystickDisDir,return )

void Joystick_obj::setJoystickCenter(int id,Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_b786868a12cfda0f_352_setJoystickCenter)
HXDLIN( 352)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 354)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 356)			Float _hx_tmp = (x * ::com::stencyl::Engine_obj::SCALE);
HXDLIN( 356)			joystick->center =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp,(y * ::com::stencyl::Engine_obj::SCALE));
HXLINE( 358)			 ::openfl::display::Bitmap joystick1 = joystick->outerImage;
HXDLIN( 358)			Float joystick2 = joystick->center->x;
HXDLIN( 358)			joystick1->set_x((joystick2 - (joystick->outerImage->get_width() * ((Float)0.5))));
HXLINE( 359)			 ::openfl::display::Bitmap joystick3 = joystick->outerImage;
HXDLIN( 359)			Float joystick4 = joystick->center->y;
HXDLIN( 359)			joystick3->set_y((joystick4 - (joystick->outerImage->get_height() * ((Float)0.5))));
HXLINE( 360)			 ::openfl::display::Bitmap joystick5 = joystick->innerImage;
HXDLIN( 360)			Float joystick6 = joystick->center->x;
HXDLIN( 360)			joystick5->set_x((joystick6 - (joystick->innerImage->get_width() * ((Float)0.5))));
HXLINE( 361)			 ::openfl::display::Bitmap joystick7 = joystick->innerImage;
HXDLIN( 361)			Float joystick8 = joystick->center->y;
HXDLIN( 361)			joystick7->set_y((joystick8 - (joystick->innerImage->get_height() * ((Float)0.5))));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Joystick_obj,setJoystickCenter,(void))

Float Joystick_obj::getJoystickCenter(int id,hx::Null< bool >  __o_x){
bool x = __o_x.Default(true);
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_366_getJoystickCenter)
HXLINE( 367)		Float centerXY = (int)0;
HXLINE( 369)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 371)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 373)			Float centerXY1;
HXDLIN( 373)			if (x) {
HXLINE( 373)				centerXY1 = joystick->center->x;
            			}
            			else {
HXLINE( 373)				centerXY1 = joystick->center->y;
            			}
HXDLIN( 373)			centerXY = ((Float)centerXY1 / (Float)::com::stencyl::Engine_obj::SCALE);
            		}
HXLINE( 376)		return centerXY;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Joystick_obj,getJoystickCenter,return )

void Joystick_obj::setJoystickRadius(int id,hx::Null< bool >  __o_outer,Float radius){
bool outer = __o_outer.Default(true);
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_383_setJoystickRadius)
HXDLIN( 383)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 385)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 387)			bool _hx_tmp;
HXDLIN( 387)			if (outer) {
HXLINE( 387)				Float joystick1 = joystick->outerRadius;
HXDLIN( 387)				_hx_tmp = (joystick1 != (radius * ::com::stencyl::Engine_obj::SCALE));
            			}
            			else {
HXLINE( 387)				_hx_tmp = false;
            			}
HXDLIN( 387)			if (_hx_tmp) {
HXLINE( 389)				joystick->outerRadius = (radius * ::com::stencyl::Engine_obj::SCALE);
            			}
            			else {
HXLINE( 392)				Float joystick2 = joystick->innerRadius;
HXDLIN( 392)				if ((joystick2 != (radius * ::com::stencyl::Engine_obj::SCALE))) {
HXLINE( 394)					joystick->innerRadius = (radius * ::com::stencyl::Engine_obj::SCALE);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Joystick_obj,setJoystickRadius,(void))

Float Joystick_obj::getJoystickRadius(int id,hx::Null< bool >  __o_outer){
bool outer = __o_outer.Default(true);
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_400_getJoystickRadius)
HXLINE( 401)		Float radius = (int)0;
HXLINE( 403)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 405)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 407)			Float radius1;
HXDLIN( 407)			if (outer) {
HXLINE( 407)				radius1 = joystick->innerRadius;
            			}
            			else {
HXLINE( 407)				radius1 = joystick->outerRadius;
            			}
HXDLIN( 407)			radius = ((Float)radius1 / (Float)::com::stencyl::Engine_obj::SCALE);
            		}
HXLINE( 410)		return radius;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Joystick_obj,getJoystickRadius,return )

void Joystick_obj::alwaysHideRJ(int id){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_417_alwaysHideRJ)
HXDLIN( 417)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 419)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 421)			joystick->hideWhenReleased = true;
HXLINE( 422)			joystick->outerImage->set_visible(false);
HXLINE( 423)			joystick->innerImage->set_visible(false);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Joystick_obj,alwaysHideRJ,(void))

void Joystick_obj::setDefaultDirection(int id,Float direction){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_429_setDefaultDirection)
HXDLIN( 429)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 431)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 433)			joystick->joystickDefaultDirection = direction;
HXLINE( 434)			joystick->joystickDirection = direction;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Joystick_obj,setDefaultDirection,(void))

bool Joystick_obj::isJoystickPressed(int id){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_439_isJoystickPressed)
HXLINE( 440)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 442)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 444)			return joystick->isPressed;
            		}
HXLINE( 447)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Joystick_obj,isJoystickPressed,return )

void Joystick_obj::setTouchRegionForRJ(int id,hx::Null< Float >  __o_boundsX,hx::Null< Float >  __o_boundsY,hx::Null< Float >  __o_boundsWidth,hx::Null< Float >  __o_boundsHeight){
Float boundsX = __o_boundsX.Default(0);
Float boundsY = __o_boundsY.Default(0);
Float boundsWidth = __o_boundsWidth.Default(0);
Float boundsHeight = __o_boundsHeight.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_b786868a12cfda0f_454_setTouchRegionForRJ)
HXDLIN( 454)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 456)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 458)			if ((joystick->joystickType == ::com::stencyl::models::Joystick_obj::showWherePressed)) {
HXLINE( 460)				Float _hx_tmp = ((boundsX * ::com::stencyl::Engine_obj::SCALE) + ::com::stencyl::models::Joystick_obj::viewOffsetX);
HXDLIN( 460)				Float _hx_tmp1 = ((boundsY * ::com::stencyl::Engine_obj::SCALE) + ::com::stencyl::models::Joystick_obj::viewOffsetY);
HXDLIN( 460)				Float _hx_tmp2 = (boundsWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN( 460)				joystick->joystickBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,(boundsHeight * ::com::stencyl::Engine_obj::SCALE));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Joystick_obj,setTouchRegionForRJ,(void))

Float Joystick_obj::getTouchRegionPropertyForRJ(int id,int property){
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_466_getTouchRegionPropertyForRJ)
HXLINE( 467)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 469)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 471)			if ((joystick->joystickType == ::com::stencyl::models::Joystick_obj::showWherePressed)) {
HXLINE( 473)				if ((property == (int)1)) {
HXLINE( 475)					return (joystick->joystickBounds->x - ::com::stencyl::models::Joystick_obj::viewOffsetX);
            				}
            				else {
HXLINE( 477)					if ((property == (int)2)) {
HXLINE( 479)						return (joystick->joystickBounds->y - ::com::stencyl::models::Joystick_obj::viewOffsetY);
            					}
            					else {
HXLINE( 481)						if ((property == (int)3)) {
HXLINE( 483)							return ((Float)joystick->joystickBounds->width / (Float)::com::stencyl::Engine_obj::SCALE);
            						}
            						else {
HXLINE( 487)							return ((Float)joystick->joystickBounds->height / (Float)::com::stencyl::Engine_obj::SCALE);
            						}
            					}
            				}
            			}
            		}
HXLINE( 492)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Joystick_obj,getTouchRegionPropertyForRJ,return )

void Joystick_obj::setJoystickImage(int id,bool outerImage,::String imageName){
            	HX_GC_STACKFRAME(&_hx_pos_b786868a12cfda0f_499_setJoystickImage)
HXDLIN( 499)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 501)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 502)			 ::Universal target = ::com::stencyl::Engine_obj::engine->root;
HXLINE( 503)			 ::openfl::display::BitmapData image = null();
HXLINE( 505)			if ((::com::stencyl::Engine_obj::SCALE == (int)1)) {
HXLINE( 507)				image = ::com::stencyl::utils::Assets_obj::getBitmapData(((HX_("assets/data/",f9,10,73,a0) + imageName) + HX_(".png",3b,2d,bd,1e)),null());
            			}
            			else {
HXLINE( 510)				if ((::com::stencyl::Engine_obj::SCALE == ((Float)1.5))) {
HXLINE( 512)					image = ::com::stencyl::utils::Assets_obj::getBitmapData(((HX_("assets/data/",f9,10,73,a0) + imageName) + HX_("@1.5x.png",3b,58,9a,8f)),null());
            				}
            				else {
HXLINE( 515)					if ((::com::stencyl::Engine_obj::SCALE == (int)2)) {
HXLINE( 517)						image = ::com::stencyl::utils::Assets_obj::getBitmapData(((HX_("assets/data/",f9,10,73,a0) + imageName) + HX_("@2x.png",81,84,08,9a)),null());
            					}
            					else {
HXLINE( 522)						image = ::com::stencyl::utils::Assets_obj::getBitmapData(((HX_("assets/data/",f9,10,73,a0) + imageName) + HX_("@4x.png",3f,3d,bf,66)),null());
            					}
            				}
            			}
HXLINE( 525)			if (outerImage) {
HXLINE( 527)				if (hx::IsNotNull( joystick->outerImage )) {
HXLINE( 529)					target->removeChild(joystick->outerImage);
            				}
HXLINE( 532)				joystick->outerImage =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,image,null(),null());
HXLINE( 533)				 ::openfl::display::Bitmap joystick1 = joystick->outerImage;
HXDLIN( 533)				Float joystick2 = joystick->center->x;
HXDLIN( 533)				joystick1->set_x((joystick2 - (joystick->outerImage->get_width() * ((Float)0.5))));
HXLINE( 534)				 ::openfl::display::Bitmap joystick3 = joystick->outerImage;
HXDLIN( 534)				Float joystick4 = joystick->center->y;
HXDLIN( 534)				joystick3->set_y((joystick4 - (joystick->outerImage->get_height() * ((Float)0.5))));
HXLINE( 535)				target->addChild(joystick->outerImage);
HXLINE( 537)				joystick->outerRadius = (joystick->outerImage->get_width() * ((Float)0.5));
            			}
            			else {
HXLINE( 541)				if (hx::IsNotNull( joystick->innerImage )) {
HXLINE( 543)					target->removeChild(joystick->innerImage);
            				}
HXLINE( 546)				joystick->innerImage =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,image,null(),null());
HXLINE( 547)				 ::openfl::display::Bitmap joystick5 = joystick->innerImage;
HXDLIN( 547)				Float joystick6 = joystick->center->x;
HXDLIN( 547)				joystick5->set_x((joystick6 - (joystick->innerImage->get_width() * ((Float)0.5))));
HXLINE( 548)				 ::openfl::display::Bitmap joystick7 = joystick->innerImage;
HXDLIN( 548)				Float joystick8 = joystick->center->y;
HXDLIN( 548)				joystick7->set_y((joystick8 - (joystick->innerImage->get_height() * ((Float)0.5))));
HXLINE( 549)				target->addChild(joystick->innerImage);
HXLINE( 551)				Float joystick9 = joystick->outerRadius;
HXDLIN( 551)				joystick->innerRadius = (joystick9 - (joystick->innerImage->get_width() * ((Float)0.5)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Joystick_obj,setJoystickImage,(void))

void Joystick_obj::setJoystickAlpha(int id,hx::Null< bool >  __o_outer,hx::Null< Float >  __o_imageAlpha,hx::Null< bool >  __o_whenReleased){
bool outer = __o_outer.Default(true);
Float imageAlpha = __o_imageAlpha.Default(1);
bool whenReleased = __o_whenReleased.Default(true);
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_558_setJoystickAlpha)
HXDLIN( 558)		if (::com::stencyl::models::Joystick_obj::joystickMap->exists(id)) {
HXLINE( 560)			 ::com::stencyl::models::Joystick joystick = ::com::stencyl::models::Joystick_obj::joystickMap->get(id).StaticCast<  ::com::stencyl::models::Joystick >();
HXLINE( 562)			if (outer) {
HXLINE( 564)				if (whenReleased) {
HXLINE( 566)					joystick->outerAlphaWhenReleased = imageAlpha;
HXLINE( 567)					joystick->outerImage->set_alpha(imageAlpha);
            				}
            				else {
HXLINE( 571)					joystick->outerAlphaWhenPressed = imageAlpha;
            				}
            			}
            			else {
HXLINE( 576)				if (whenReleased) {
HXLINE( 578)					joystick->innerAlphaWhenReleased = imageAlpha;
HXLINE( 579)					joystick->innerImage->set_alpha(imageAlpha);
            				}
            				else {
HXLINE( 583)					joystick->innerAlphaWhenPressed = imageAlpha;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Joystick_obj,setJoystickAlpha,(void))


hx::ObjectPtr< Joystick_obj > Joystick_obj::__new() {
	hx::ObjectPtr< Joystick_obj > __this = new Joystick_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Joystick_obj > Joystick_obj::__alloc(hx::Ctx *_hx_ctx) {
	Joystick_obj *__this = (Joystick_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Joystick_obj), true, "com.stencyl.models.Joystick"));
	*(void **)__this = Joystick_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Joystick_obj::Joystick_obj()
{
}

void Joystick_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Joystick);
	HX_MARK_MEMBER_NAME(center,"center");
	HX_MARK_MEMBER_NAME(outerRadius,"outerRadius");
	HX_MARK_MEMBER_NAME(innerRadius,"innerRadius");
	HX_MARK_MEMBER_NAME(joystickBounds,"joystickBounds");
	HX_MARK_MEMBER_NAME(joystickTouchID,"joystickTouchID");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(joystickDistance,"joystickDistance");
	HX_MARK_MEMBER_NAME(joystickDirection,"joystickDirection");
	HX_MARK_MEMBER_NAME(joystickDefaultDirection,"joystickDefaultDirection");
	HX_MARK_MEMBER_NAME(joystickType,"joystickType");
	HX_MARK_MEMBER_NAME(hideWhenReleased,"hideWhenReleased");
	HX_MARK_MEMBER_NAME(outerImage,"outerImage");
	HX_MARK_MEMBER_NAME(innerImage,"innerImage");
	HX_MARK_MEMBER_NAME(outerAlphaWhenReleased,"outerAlphaWhenReleased");
	HX_MARK_MEMBER_NAME(outerAlphaWhenPressed,"outerAlphaWhenPressed");
	HX_MARK_MEMBER_NAME(innerAlphaWhenReleased,"innerAlphaWhenReleased");
	HX_MARK_MEMBER_NAME(innerAlphaWhenPressed,"innerAlphaWhenPressed");
	HX_MARK_MEMBER_NAME(isPressed,"isPressed");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Joystick_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(center,"center");
	HX_VISIT_MEMBER_NAME(outerRadius,"outerRadius");
	HX_VISIT_MEMBER_NAME(innerRadius,"innerRadius");
	HX_VISIT_MEMBER_NAME(joystickBounds,"joystickBounds");
	HX_VISIT_MEMBER_NAME(joystickTouchID,"joystickTouchID");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(joystickDistance,"joystickDistance");
	HX_VISIT_MEMBER_NAME(joystickDirection,"joystickDirection");
	HX_VISIT_MEMBER_NAME(joystickDefaultDirection,"joystickDefaultDirection");
	HX_VISIT_MEMBER_NAME(joystickType,"joystickType");
	HX_VISIT_MEMBER_NAME(hideWhenReleased,"hideWhenReleased");
	HX_VISIT_MEMBER_NAME(outerImage,"outerImage");
	HX_VISIT_MEMBER_NAME(innerImage,"innerImage");
	HX_VISIT_MEMBER_NAME(outerAlphaWhenReleased,"outerAlphaWhenReleased");
	HX_VISIT_MEMBER_NAME(outerAlphaWhenPressed,"outerAlphaWhenPressed");
	HX_VISIT_MEMBER_NAME(innerAlphaWhenReleased,"innerAlphaWhenReleased");
	HX_VISIT_MEMBER_NAME(innerAlphaWhenPressed,"innerAlphaWhenPressed");
	HX_VISIT_MEMBER_NAME(isPressed,"isPressed");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Joystick_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnd") ) { return hx::Val( onEnd_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"center") ) { return hx::Val( center ); }
		if (HX_FIELD_EQ(inName,"onMove") ) { return hx::Val( onMove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onBegin") ) { return hx::Val( onBegin_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPressed") ) { return hx::Val( isPressed ); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return hx::Val( onMouseUp_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"outerImage") ) { return hx::Val( outerImage ); }
		if (HX_FIELD_EQ(inName,"innerImage") ) { return hx::Val( innerImage ); }
		if (HX_FIELD_EQ(inName,"onTouchEnd") ) { return hx::Val( onTouchEnd_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"outerRadius") ) { return hx::Val( outerRadius ); }
		if (HX_FIELD_EQ(inName,"innerRadius") ) { return hx::Val( innerRadius ); }
		if (HX_FIELD_EQ(inName,"onTouchMove") ) { return hx::Val( onTouchMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return hx::Val( onMouseMove_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"joystickType") ) { return hx::Val( joystickType ); }
		if (HX_FIELD_EQ(inName,"onTouchBegin") ) { return hx::Val( onTouchBegin_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"joystickBounds") ) { return hx::Val( joystickBounds ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"joystickTouchID") ) { return hx::Val( joystickTouchID ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"joystickDistance") ) { return hx::Val( joystickDistance ); }
		if (HX_FIELD_EQ(inName,"hideWhenReleased") ) { return hx::Val( hideWhenReleased ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"joystickDirection") ) { return hx::Val( joystickDirection ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"outerAlphaWhenPressed") ) { return hx::Val( outerAlphaWhenPressed ); }
		if (HX_FIELD_EQ(inName,"innerAlphaWhenPressed") ) { return hx::Val( innerAlphaWhenPressed ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"outerAlphaWhenReleased") ) { return hx::Val( outerAlphaWhenReleased ); }
		if (HX_FIELD_EQ(inName,"innerAlphaWhenReleased") ) { return hx::Val( innerAlphaWhenReleased ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"joystickDefaultDirection") ) { return hx::Val( joystickDefaultDirection ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Joystick_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"joystickMap") ) { outValue = ( joystickMap ); return true; }
		if (HX_FIELD_EQ(inName,"fixedCenter") ) { outValue = ( fixedCenter ); return true; }
		if (HX_FIELD_EQ(inName,"viewOffsetX") ) { outValue = ( viewOffsetX ); return true; }
		if (HX_FIELD_EQ(inName,"viewOffsetY") ) { outValue = ( viewOffsetY ); return true; }
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
		if (HX_FIELD_EQ(inName,"addJoystick") ) { outValue = addJoystick_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"alwaysHideRJ") ) { outValue = alwaysHideRJ_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"removeJoystick") ) { outValue = removeJoystick_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"showWherePressed") ) { outValue = ( showWherePressed ); return true; }
		if (HX_FIELD_EQ(inName,"setJoystickImage") ) { outValue = setJoystickImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setJoystickAlpha") ) { outValue = setJoystickAlpha_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getJoystickDisDir") ) { outValue = getJoystickDisDir_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setJoystickCenter") ) { outValue = setJoystickCenter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getJoystickCenter") ) { outValue = getJoystickCenter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setJoystickRadius") ) { outValue = setJoystickRadius_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getJoystickRadius") ) { outValue = getJoystickRadius_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isJoystickPressed") ) { outValue = isJoystickPressed_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setDefaultDirection") ) { outValue = setDefaultDirection_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setTouchRegionForRJ") ) { outValue = setTouchRegionForRJ_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"getTouchRegionPropertyForRJ") ) { outValue = getTouchRegionPropertyForRJ_dyn(); return true; }
	}
	return false;
}

hx::Val Joystick_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"center") ) { center=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPressed") ) { isPressed=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"outerImage") ) { outerImage=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"innerImage") ) { innerImage=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"outerRadius") ) { outerRadius=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"innerRadius") ) { innerRadius=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"joystickType") ) { joystickType=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"joystickBounds") ) { joystickBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"joystickTouchID") ) { joystickTouchID=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"joystickDistance") ) { joystickDistance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hideWhenReleased") ) { hideWhenReleased=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"joystickDirection") ) { joystickDirection=inValue.Cast< Float >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"outerAlphaWhenPressed") ) { outerAlphaWhenPressed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"innerAlphaWhenPressed") ) { innerAlphaWhenPressed=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"outerAlphaWhenReleased") ) { outerAlphaWhenReleased=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"innerAlphaWhenReleased") ) { innerAlphaWhenReleased=inValue.Cast< Float >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"joystickDefaultDirection") ) { joystickDefaultDirection=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Joystick_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"joystickMap") ) { joystickMap=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		if (HX_FIELD_EQ(inName,"fixedCenter") ) { fixedCenter=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"viewOffsetX") ) { viewOffsetX=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"viewOffsetY") ) { viewOffsetY=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"showWherePressed") ) { showWherePressed=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Joystick_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"));
	outFields->push(HX_HCSTRING("outerRadius","\x2d","\x0b","\xde","\x52"));
	outFields->push(HX_HCSTRING("innerRadius","\x88","\xca","\xf5","\x19"));
	outFields->push(HX_HCSTRING("joystickBounds","\x51","\x10","\x0f","\x93"));
	outFields->push(HX_HCSTRING("joystickTouchID","\xfe","\x1b","\x5f","\xff"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("joystickDistance","\x11","\x4c","\xc6","\xdf"));
	outFields->push(HX_HCSTRING("joystickDirection","\xe3","\x69","\x95","\xef"));
	outFields->push(HX_HCSTRING("joystickDefaultDirection","\x1a","\xbe","\xf3","\xbd"));
	outFields->push(HX_HCSTRING("joystickType","\x96","\x0d","\x99","\x21"));
	outFields->push(HX_HCSTRING("hideWhenReleased","\x79","\xd1","\x8a","\x1b"));
	outFields->push(HX_HCSTRING("outerImage","\xe0","\x38","\xb8","\x00"));
	outFields->push(HX_HCSTRING("innerImage","\xe5","\xdd","\x30","\x63"));
	outFields->push(HX_HCSTRING("outerAlphaWhenReleased","\x1a","\x8b","\x54","\x64"));
	outFields->push(HX_HCSTRING("outerAlphaWhenPressed","\xe5","\x0a","\x2b","\xc8"));
	outFields->push(HX_HCSTRING("innerAlphaWhenReleased","\x9f","\x23","\x73","\x08"));
	outFields->push(HX_HCSTRING("innerAlphaWhenPressed","\x00","\xaa","\x17","\xb3"));
	outFields->push(HX_HCSTRING("isPressed","\xd8","\x4f","\xe5","\x3d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Joystick_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Joystick_obj,center),HX_HCSTRING("center","\xd5","\x25","\xdb","\x05")},
	{hx::fsFloat,(int)offsetof(Joystick_obj,outerRadius),HX_HCSTRING("outerRadius","\x2d","\x0b","\xde","\x52")},
	{hx::fsFloat,(int)offsetof(Joystick_obj,innerRadius),HX_HCSTRING("innerRadius","\x88","\xca","\xf5","\x19")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Joystick_obj,joystickBounds),HX_HCSTRING("joystickBounds","\x51","\x10","\x0f","\x93")},
	{hx::fsInt,(int)offsetof(Joystick_obj,joystickTouchID),HX_HCSTRING("joystickTouchID","\xfe","\x1b","\x5f","\xff")},
	{hx::fsInt,(int)offsetof(Joystick_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Joystick_obj,joystickDistance),HX_HCSTRING("joystickDistance","\x11","\x4c","\xc6","\xdf")},
	{hx::fsFloat,(int)offsetof(Joystick_obj,joystickDirection),HX_HCSTRING("joystickDirection","\xe3","\x69","\x95","\xef")},
	{hx::fsFloat,(int)offsetof(Joystick_obj,joystickDefaultDirection),HX_HCSTRING("joystickDefaultDirection","\x1a","\xbe","\xf3","\xbd")},
	{hx::fsInt,(int)offsetof(Joystick_obj,joystickType),HX_HCSTRING("joystickType","\x96","\x0d","\x99","\x21")},
	{hx::fsBool,(int)offsetof(Joystick_obj,hideWhenReleased),HX_HCSTRING("hideWhenReleased","\x79","\xd1","\x8a","\x1b")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(Joystick_obj,outerImage),HX_HCSTRING("outerImage","\xe0","\x38","\xb8","\x00")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(Joystick_obj,innerImage),HX_HCSTRING("innerImage","\xe5","\xdd","\x30","\x63")},
	{hx::fsFloat,(int)offsetof(Joystick_obj,outerAlphaWhenReleased),HX_HCSTRING("outerAlphaWhenReleased","\x1a","\x8b","\x54","\x64")},
	{hx::fsFloat,(int)offsetof(Joystick_obj,outerAlphaWhenPressed),HX_HCSTRING("outerAlphaWhenPressed","\xe5","\x0a","\x2b","\xc8")},
	{hx::fsFloat,(int)offsetof(Joystick_obj,innerAlphaWhenReleased),HX_HCSTRING("innerAlphaWhenReleased","\x9f","\x23","\x73","\x08")},
	{hx::fsFloat,(int)offsetof(Joystick_obj,innerAlphaWhenPressed),HX_HCSTRING("innerAlphaWhenPressed","\x00","\xaa","\x17","\xb3")},
	{hx::fsBool,(int)offsetof(Joystick_obj,isPressed),HX_HCSTRING("isPressed","\xd8","\x4f","\xe5","\x3d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Joystick_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Joystick_obj::joystickMap,HX_HCSTRING("joystickMap","\x40","\xff","\xf8","\x3c")},
	{hx::fsInt,(void *) &Joystick_obj::fixedCenter,HX_HCSTRING("fixedCenter","\x69","\x22","\x0c","\x22")},
	{hx::fsInt,(void *) &Joystick_obj::showWherePressed,HX_HCSTRING("showWherePressed","\x18","\xbe","\xe7","\xed")},
	{hx::fsInt,(void *) &Joystick_obj::viewOffsetX,HX_HCSTRING("viewOffsetX","\x80","\x45","\x78","\xb9")},
	{hx::fsInt,(void *) &Joystick_obj::viewOffsetY,HX_HCSTRING("viewOffsetY","\x81","\x45","\x78","\xb9")},
	{hx::fsBool,(void *) &Joystick_obj::initialized,HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Joystick_obj_sMemberFields[] = {
	HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"),
	HX_HCSTRING("outerRadius","\x2d","\x0b","\xde","\x52"),
	HX_HCSTRING("innerRadius","\x88","\xca","\xf5","\x19"),
	HX_HCSTRING("joystickBounds","\x51","\x10","\x0f","\x93"),
	HX_HCSTRING("joystickTouchID","\xfe","\x1b","\x5f","\xff"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("joystickDistance","\x11","\x4c","\xc6","\xdf"),
	HX_HCSTRING("joystickDirection","\xe3","\x69","\x95","\xef"),
	HX_HCSTRING("joystickDefaultDirection","\x1a","\xbe","\xf3","\xbd"),
	HX_HCSTRING("joystickType","\x96","\x0d","\x99","\x21"),
	HX_HCSTRING("hideWhenReleased","\x79","\xd1","\x8a","\x1b"),
	HX_HCSTRING("outerImage","\xe0","\x38","\xb8","\x00"),
	HX_HCSTRING("innerImage","\xe5","\xdd","\x30","\x63"),
	HX_HCSTRING("outerAlphaWhenReleased","\x1a","\x8b","\x54","\x64"),
	HX_HCSTRING("outerAlphaWhenPressed","\xe5","\x0a","\x2b","\xc8"),
	HX_HCSTRING("innerAlphaWhenReleased","\x9f","\x23","\x73","\x08"),
	HX_HCSTRING("innerAlphaWhenPressed","\x00","\xaa","\x17","\xb3"),
	HX_HCSTRING("isPressed","\xd8","\x4f","\xe5","\x3d"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("onTouchBegin","\xe9","\x6f","\x2a","\x82"),
	HX_HCSTRING("onTouchMove","\x51","\x55","\x10","\x30"),
	HX_HCSTRING("onTouchEnd","\x9b","\x99","\xc0","\xdd"),
	HX_HCSTRING("onMouseDown","\x08","\x94","\x05","\x11"),
	HX_HCSTRING("onMouseMove","\xb7","\x7e","\xf8","\x16"),
	HX_HCSTRING("onMouseUp","\x81","\xac","\x1d","\x98"),
	HX_HCSTRING("onBegin","\x8a","\x88","\x93","\x46"),
	HX_HCSTRING("onMove","\xd0","\xeb","\xea","\xea"),
	HX_HCSTRING("onEnd","\xfc","\x97","\x64","\x32"),
	::String(null()) };

static void Joystick_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Joystick_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Joystick_obj::joystickMap,"joystickMap");
	HX_MARK_MEMBER_NAME(Joystick_obj::fixedCenter,"fixedCenter");
	HX_MARK_MEMBER_NAME(Joystick_obj::showWherePressed,"showWherePressed");
	HX_MARK_MEMBER_NAME(Joystick_obj::viewOffsetX,"viewOffsetX");
	HX_MARK_MEMBER_NAME(Joystick_obj::viewOffsetY,"viewOffsetY");
	HX_MARK_MEMBER_NAME(Joystick_obj::initialized,"initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Joystick_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Joystick_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Joystick_obj::joystickMap,"joystickMap");
	HX_VISIT_MEMBER_NAME(Joystick_obj::fixedCenter,"fixedCenter");
	HX_VISIT_MEMBER_NAME(Joystick_obj::showWherePressed,"showWherePressed");
	HX_VISIT_MEMBER_NAME(Joystick_obj::viewOffsetX,"viewOffsetX");
	HX_VISIT_MEMBER_NAME(Joystick_obj::viewOffsetY,"viewOffsetY");
	HX_VISIT_MEMBER_NAME(Joystick_obj::initialized,"initialized");
};

#endif

hx::Class Joystick_obj::__mClass;

static ::String Joystick_obj_sStaticFields[] = {
	HX_HCSTRING("joystickMap","\x40","\xff","\xf8","\x3c"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	HX_HCSTRING("fixedCenter","\x69","\x22","\x0c","\x22"),
	HX_HCSTRING("showWherePressed","\x18","\xbe","\xe7","\xed"),
	HX_HCSTRING("viewOffsetX","\x80","\x45","\x78","\xb9"),
	HX_HCSTRING("viewOffsetY","\x81","\x45","\x78","\xb9"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("addJoystick","\xfd","\x17","\x4e","\xcd"),
	HX_HCSTRING("removeJoystick","\x20","\x1d","\x48","\x66"),
	HX_HCSTRING("getJoystickDisDir","\xb1","\xb5","\x5f","\x5c"),
	HX_HCSTRING("setJoystickCenter","\xf3","\x36","\xae","\xc8"),
	HX_HCSTRING("getJoystickCenter","\xe7","\x5e","\x40","\xa5"),
	HX_HCSTRING("setJoystickRadius","\x70","\xe1","\xc9","\x73"),
	HX_HCSTRING("getJoystickRadius","\x64","\x09","\x5c","\x50"),
	HX_HCSTRING("alwaysHideRJ","\x29","\xb9","\x9b","\xcf"),
	HX_HCSTRING("setDefaultDirection","\x00","\x25","\xfc","\xc9"),
	HX_HCSTRING("isJoystickPressed","\x7c","\x8c","\x7d","\xf1"),
	HX_HCSTRING("setTouchRegionForRJ","\xb0","\x63","\x60","\x8e"),
	HX_HCSTRING("getTouchRegionPropertyForRJ","\x0f","\x1f","\xd4","\x1a"),
	HX_HCSTRING("setJoystickImage","\xfd","\x1b","\x53","\xa7"),
	HX_HCSTRING("setJoystickAlpha","\x00","\xa4","\x80","\x0b"),
	::String(null())
};

void Joystick_obj::__register()
{
	hx::Object *dummy = new Joystick_obj;
	Joystick_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.Joystick","\x71","\x8d","\xd7","\x19");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Joystick_obj::__GetStatic;
	__mClass->mSetStaticField = &Joystick_obj::__SetStatic;
	__mClass->mMarkFunc = Joystick_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Joystick_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Joystick_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Joystick_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Joystick_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Joystick_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Joystick_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Joystick_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_44_boot)
HXDLIN(  44)		fixedCenter = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_45_boot)
HXDLIN(  45)		showWherePressed = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_58_boot)
HXDLIN(  58)		viewOffsetX = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_59_boot)
HXDLIN(  59)		viewOffsetY = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b786868a12cfda0f_60_boot)
HXDLIN(  60)		initialized = false;
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
