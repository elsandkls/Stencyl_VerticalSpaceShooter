// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_ScanlineShader
#include <com/stencyl/graphics/shaders/ScanlineShader.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2932ede35810d49c_6_new,"com.stencyl.graphics.shaders.ScanlineShader","new",0x58b21c5c,"com.stencyl.graphics.shaders.ScanlineShader.new","com/stencyl/graphics/shaders/ScanlineShader.hx",6,0xd66d6cd4)
HX_LOCAL_STACK_FRAME(_hx_pos_2932ede35810d49c_36_setScale,"com.stencyl.graphics.shaders.ScanlineShader","setScale",0x9fe3fa0c,"com.stencyl.graphics.shaders.ScanlineShader.setScale","com/stencyl/graphics/shaders/ScanlineShader.hx",36,0xd66d6cd4)
namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{

void ScanlineShader_obj::__construct(hx::Null< Float >  __o_scale){
Float scale = __o_scale.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_2932ede35810d49c_6_new)
HXLINE(   7)		super::__construct();
HXLINE(   9)		::String script = HX_("\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform vec2 uResolution;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tuniform float scale;\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tif (mod(floor(vTexCoord.y * uResolution.y / scale), 2.0) == 0.0)\n\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\telse\n\t\t\t\t\tgl_FragColor = texture2D(uImage0, vTexCoord);\n\t\t\t}\n\t\t",0c,e9,c8,10);
HXLINE(  29)		this->model =  ::com::stencyl::graphics::shaders::PostProcess_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),script,true);
HXLINE(  31)		this->setScale(scale);
            	}

Dynamic ScanlineShader_obj::__CreateEmpty() { return new ScanlineShader_obj; }

void *ScanlineShader_obj::_hx_vtable = 0;

Dynamic ScanlineShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ScanlineShader_obj > _hx_result = new ScanlineShader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ScanlineShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x05283942) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x05283942;
	} else {
		return inClassId==(int)0x488ca67b;
	}
}

void ScanlineShader_obj::setScale(Float amount){
            	HX_STACKFRAME(&_hx_pos_2932ede35810d49c_36_setScale)
HXDLIN(  36)		this->setProperty(HX_("scale",8a,ce,ce,78),amount);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScanlineShader_obj,setScale,(void))


hx::ObjectPtr< ScanlineShader_obj > ScanlineShader_obj::__new(hx::Null< Float >  __o_scale) {
	hx::ObjectPtr< ScanlineShader_obj > __this = new ScanlineShader_obj();
	__this->__construct(__o_scale);
	return __this;
}

hx::ObjectPtr< ScanlineShader_obj > ScanlineShader_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_scale) {
	ScanlineShader_obj *__this = (ScanlineShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ScanlineShader_obj), true, "com.stencyl.graphics.shaders.ScanlineShader"));
	*(void **)__this = ScanlineShader_obj::_hx_vtable;
	__this->__construct(__o_scale);
	return __this;
}

ScanlineShader_obj::ScanlineShader_obj()
{
}

hx::Val ScanlineShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"setScale") ) { return hx::Val( setScale_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ScanlineShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ScanlineShader_obj_sStaticStorageInfo = 0;
#endif

static ::String ScanlineShader_obj_sMemberFields[] = {
	HX_HCSTRING("setScale","\x88","\x37","\x03","\x87"),
	::String(null()) };

static void ScanlineShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ScanlineShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ScanlineShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ScanlineShader_obj::__mClass,"__mClass");
};

#endif

hx::Class ScanlineShader_obj::__mClass;

void ScanlineShader_obj::__register()
{
	hx::Object *dummy = new ScanlineShader_obj;
	ScanlineShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.shaders.ScanlineShader","\x6a","\xfe","\xa5","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ScanlineShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ScanlineShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ScanlineShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ScanlineShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScanlineShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScanlineShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders
