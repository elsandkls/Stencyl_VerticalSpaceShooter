// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_behavior_BehaviorInstance
#include <com/stencyl/behavior/BehaviorInstance.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ec6bc603f8069704_10_new,"com.stencyl.behavior.BehaviorInstance","new",0xcab6e446,"com.stencyl.behavior.BehaviorInstance.new","com/stencyl/behavior/BehaviorInstance.hx",10,0xa97af28b)
namespace com{
namespace stencyl{
namespace behavior{

void BehaviorInstance_obj::__construct(int behaviorID, ::haxe::ds::StringMap values){
            	HX_STACKFRAME(&_hx_pos_ec6bc603f8069704_10_new)
HXLINE(  11)		this->behaviorID = behaviorID;
HXLINE(  12)		this->values = values;
HXLINE(  13)		this->enabled = true;
            	}

Dynamic BehaviorInstance_obj::__CreateEmpty() { return new BehaviorInstance_obj; }

void *BehaviorInstance_obj::_hx_vtable = 0;

Dynamic BehaviorInstance_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BehaviorInstance_obj > _hx_result = new BehaviorInstance_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool BehaviorInstance_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x194f310c;
}


hx::ObjectPtr< BehaviorInstance_obj > BehaviorInstance_obj::__new(int behaviorID, ::haxe::ds::StringMap values) {
	hx::ObjectPtr< BehaviorInstance_obj > __this = new BehaviorInstance_obj();
	__this->__construct(behaviorID,values);
	return __this;
}

hx::ObjectPtr< BehaviorInstance_obj > BehaviorInstance_obj::__alloc(hx::Ctx *_hx_ctx,int behaviorID, ::haxe::ds::StringMap values) {
	BehaviorInstance_obj *__this = (BehaviorInstance_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BehaviorInstance_obj), true, "com.stencyl.behavior.BehaviorInstance"));
	*(void **)__this = BehaviorInstance_obj::_hx_vtable;
	__this->__construct(behaviorID,values);
	return __this;
}

BehaviorInstance_obj::BehaviorInstance_obj()
{
}

void BehaviorInstance_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BehaviorInstance);
	HX_MARK_MEMBER_NAME(behaviorID,"behaviorID");
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_END_CLASS();
}

void BehaviorInstance_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(behaviorID,"behaviorID");
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
}

hx::Val BehaviorInstance_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"behaviorID") ) { return hx::Val( behaviorID ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BehaviorInstance_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"behaviorID") ) { behaviorID=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BehaviorInstance_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("behaviorID","\xed","\x98","\xc5","\xc0"));
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BehaviorInstance_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BehaviorInstance_obj,behaviorID),HX_HCSTRING("behaviorID","\xed","\x98","\xc5","\xc0")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(BehaviorInstance_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{hx::fsBool,(int)offsetof(BehaviorInstance_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BehaviorInstance_obj_sStaticStorageInfo = 0;
#endif

static ::String BehaviorInstance_obj_sMemberFields[] = {
	HX_HCSTRING("behaviorID","\xed","\x98","\xc5","\xc0"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	::String(null()) };

static void BehaviorInstance_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BehaviorInstance_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BehaviorInstance_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BehaviorInstance_obj::__mClass,"__mClass");
};

#endif

hx::Class BehaviorInstance_obj::__mClass;

void BehaviorInstance_obj::__register()
{
	hx::Object *dummy = new BehaviorInstance_obj;
	BehaviorInstance_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.behavior.BehaviorInstance","\x54","\x09","\x1a","\x9e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BehaviorInstance_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BehaviorInstance_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BehaviorInstance_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BehaviorInstance_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BehaviorInstance_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BehaviorInstance_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace behavior
