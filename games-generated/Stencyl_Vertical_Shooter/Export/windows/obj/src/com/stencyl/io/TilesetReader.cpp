// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_com_stencyl_io_AbstractReader
#include <com/stencyl/io/AbstractReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_TilesetReader
#include <com/stencyl/io/TilesetReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_MbsResource
#include <com/stencyl/io/mbs/MbsResource.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_scene_MbsTile
#include <com/stencyl/io/mbs/scene/MbsTile.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_scene_MbsTileset
#include <com/stencyl/io/mbs/scene/MbsTileset.h>
#endif
#ifndef INCLUDED_com_stencyl_models_GameModel
#include <com/stencyl/models/GameModel.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_AutotileFormat
#include <com/stencyl/models/scene/AutotileFormat.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_Tile
#include <com/stencyl/models/scene/Tile.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_Tileset
#include <com/stencyl/models/scene/Tileset.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_mbs_core_ComposedType
#include <mbs/core/ComposedType.h>
#endif
#ifndef INCLUDED_mbs_core_MbsObject
#include <mbs/core/MbsObject.h>
#endif
#ifndef INCLUDED_mbs_core_MbsType
#include <mbs/core/MbsType.h>
#endif
#ifndef INCLUDED_mbs_io_MbsIntList
#include <mbs/io/MbsIntList.h>
#endif
#ifndef INCLUDED_mbs_io_MbsList
#include <mbs/io/MbsList.h>
#endif
#ifndef INCLUDED_mbs_io_MbsListBase
#include <mbs/io/MbsListBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a243dcbf9325b972_16_new,"com.stencyl.io.TilesetReader","new",0x457add70,"com.stencyl.io.TilesetReader.new","com/stencyl/io/TilesetReader.hx",16,0x0066f23f)
HX_LOCAL_STACK_FRAME(_hx_pos_a243dcbf9325b972_21_accepts,"com.stencyl.io.TilesetReader","accepts",0x6b54e97b,"com.stencyl.io.TilesetReader.accepts","com/stencyl/io/TilesetReader.hx",21,0x0066f23f)
HX_LOCAL_STACK_FRAME(_hx_pos_a243dcbf9325b972_25_read,"com.stencyl.io.TilesetReader","read",0x88abac46,"com.stencyl.io.TilesetReader.read","com/stencyl/io/TilesetReader.hx",25,0x0066f23f)
HX_LOCAL_STACK_FRAME(_hx_pos_a243dcbf9325b972_56_readTile,"com.stencyl.io.TilesetReader","readTile",0x2bd43e94,"com.stencyl.io.TilesetReader.readTile","com/stencyl/io/TilesetReader.hx",56,0x0066f23f)
namespace com{
namespace stencyl{
namespace io{

void TilesetReader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a243dcbf9325b972_16_new)
            	}

Dynamic TilesetReader_obj::__CreateEmpty() { return new TilesetReader_obj; }

void *TilesetReader_obj::_hx_vtable = 0;

Dynamic TilesetReader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TilesetReader_obj > _hx_result = new TilesetReader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TilesetReader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7efe527a;
}

static ::com::stencyl::io::AbstractReader_obj _hx_com_stencyl_io_TilesetReader__hx_com_stencyl_io_AbstractReader= {
	( bool (hx::Object::*)(::String))&::com::stencyl::io::TilesetReader_obj::accepts,
	(  ::com::stencyl::models::Resource (hx::Object::*)( ::Dynamic))&::com::stencyl::io::TilesetReader_obj::read,
};

void *TilesetReader_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf08c5996: return &_hx_com_stencyl_io_TilesetReader__hx_com_stencyl_io_AbstractReader;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

bool TilesetReader_obj::accepts(::String type){
            	HX_STACKFRAME(&_hx_pos_a243dcbf9325b972_21_accepts)
HXDLIN(  21)		return (type == ::com::stencyl::io::mbs::scene::MbsTileset_obj::MBS_TILESET->getName());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TilesetReader_obj,accepts,return )

 ::com::stencyl::models::Resource TilesetReader_obj::read( ::Dynamic obj){
            	HX_GC_STACKFRAME(&_hx_pos_a243dcbf9325b972_25_read)
HXLINE(  28)		 ::com::stencyl::io::mbs::scene::MbsTileset r = ( ( ::com::stencyl::io::mbs::scene::MbsTileset)(obj) );
HXLINE(  30)		int framesAcross = r->getAcross();
HXLINE(  31)		int framesDown = r->getDown();
HXLINE(  32)		int tileWidth = r->getTileWidth();
HXLINE(  33)		int tileHeight = r->getTileHeight();
HXLINE(  34)		bool readable = r->getReadableImages();
HXLINE(  35)		::Array< ::Dynamic> tiles = ::Array_obj< ::Dynamic>::__new();
HXLINE(  37)		int tset = r->getId();
HXDLIN(  37)		int tset1 = r->getAtlasID();
HXDLIN(  37)		 ::com::stencyl::models::scene::Tileset tset2 =  ::com::stencyl::models::scene::Tileset_obj::__alloc( HX_CTX ,tset,tset1,r->getName(),framesAcross,framesDown,tileWidth,tileHeight,readable,tiles);
HXLINE(  39)		 ::mbs::io::MbsList tileList = r->getTiles();
HXLINE(  41)		{
HXLINE(  41)			int _g1 = (int)0;
HXDLIN(  41)			int _g = tileList->length();
HXDLIN(  41)			while((_g1 < _g)){
HXLINE(  41)				_g1 = (_g1 + (int)1);
HXDLIN(  41)				int i = (_g1 - (int)1);
HXLINE(  43)				 ::com::stencyl::io::mbs::scene::MbsTile tileReader = tileList->getNextObject().StaticCast<  ::com::stencyl::io::mbs::scene::MbsTile >();
HXLINE(  44)				int _hx_tmp = tileReader->getId();
HXDLIN(  44)				tiles[_hx_tmp] = this->readTile(tileReader,tset2);
            			}
            		}
HXLINE(  47)		if (tset2->isAtlasActive()) {
HXLINE(  49)			tset2->loadGraphics();
            		}
HXLINE(  52)		return tset2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TilesetReader_obj,read,return )

 ::com::stencyl::models::scene::Tile TilesetReader_obj::readTile( ::com::stencyl::io::mbs::scene::MbsTile r, ::com::stencyl::models::scene::Tileset parent){
            	HX_GC_STACKFRAME(&_hx_pos_a243dcbf9325b972_56_readTile)
HXLINE(  57)		int tileID = r->getId();
HXLINE(  58)		int collisionID = r->getCollision();
HXLINE(  59)		::String metadata = r->getMetadata();
HXLINE(  61)		int frameID = r->getFrames();
HXLINE(  64)		 ::Dynamic imgData = null();
HXLINE(  65)		::Array< int > durations = ::Array_obj< int >::__new();
HXLINE(  66)		int counter = (int)0;
HXLINE(  68)		 ::mbs::io::MbsIntList durList = r->getDurations();
HXLINE(  69)		{
HXLINE(  69)			int _g1 = (int)0;
HXDLIN(  69)			int _g = durList->length();
HXDLIN(  69)			while((_g1 < _g)){
HXLINE(  69)				_g1 = (_g1 + (int)1);
HXDLIN(  69)				int i = (_g1 - (int)1);
HXLINE(  72)				durations[counter] = durList->readInt();
HXLINE(  74)				durations[counter] = ::Math_obj::floor(((Float)durations->__get(counter) / (Float)(int)10));
HXLINE(  75)				::Array< int > durations1 = durations;
HXDLIN(  75)				int counter1 = counter;
HXDLIN(  75)				durations1[counter1] = (durations1->__get(counter1) * (int)10);
HXLINE(  77)				counter = (counter + (int)1);
            			}
            		}
HXLINE(  80)		 ::com::stencyl::models::scene::AutotileFormat autotileFormat = null();
HXLINE(  81)		if ((r->getAutotile() != (int)-1)) {
HXLINE(  82)			::Dynamic this1 = ::com::stencyl::models::GameModel_obj::get()->autotileFormats;
HXDLIN(  82)			autotileFormat = ( ( ::haxe::ds::IntMap)(this1) )->get(r->getAutotile()).StaticCast<  ::com::stencyl::models::scene::AutotileFormat >();
            		}
HXLINE(  84)		 ::haxe::ds::IntMap autotileMergeSet = null();
HXLINE(  85)		if ((r->getAutotileMerge()->length() != (int)0)) {
HXLINE(  87)			autotileMergeSet =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  88)			 ::mbs::io::MbsIntList mergeList = r->getAutotileMerge();
HXLINE(  89)			{
HXLINE(  89)				int _g11 = (int)0;
HXDLIN(  89)				int _g2 = mergeList->length();
HXDLIN(  89)				while((_g11 < _g2)){
HXLINE(  89)					_g11 = (_g11 + (int)1);
HXDLIN(  89)					int i1 = (_g11 - (int)1);
HXLINE(  91)					int mergeID = mergeList->readInt();
HXLINE(  92)					autotileMergeSet->set(mergeID,mergeID);
            				}
            			}
            		}
HXLINE(  96)		return  ::com::stencyl::models::scene::Tile_obj::__alloc( HX_CTX ,tileID,collisionID,metadata,frameID,durations,autotileFormat,autotileMergeSet,parent);
            	}


HX_DEFINE_DYNAMIC_FUNC2(TilesetReader_obj,readTile,return )


hx::ObjectPtr< TilesetReader_obj > TilesetReader_obj::__new() {
	hx::ObjectPtr< TilesetReader_obj > __this = new TilesetReader_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TilesetReader_obj > TilesetReader_obj::__alloc(hx::Ctx *_hx_ctx) {
	TilesetReader_obj *__this = (TilesetReader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TilesetReader_obj), false, "com.stencyl.io.TilesetReader"));
	*(void **)__this = TilesetReader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TilesetReader_obj::TilesetReader_obj()
{
}

hx::Val TilesetReader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"accepts") ) { return hx::Val( accepts_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readTile") ) { return hx::Val( readTile_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TilesetReader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TilesetReader_obj_sStaticStorageInfo = 0;
#endif

static ::String TilesetReader_obj_sMemberFields[] = {
	HX_HCSTRING("accepts","\x6b","\x14","\xba","\x9a"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("readTile","\xa4","\xa5","\xf4","\x74"),
	::String(null()) };

static void TilesetReader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TilesetReader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TilesetReader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TilesetReader_obj::__mClass,"__mClass");
};

#endif

hx::Class TilesetReader_obj::__mClass;

void TilesetReader_obj::__register()
{
	hx::Object *dummy = new TilesetReader_obj;
	TilesetReader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.io.TilesetReader","\x7e","\xa5","\x0b","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TilesetReader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TilesetReader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TilesetReader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TilesetReader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TilesetReader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TilesetReader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace io
