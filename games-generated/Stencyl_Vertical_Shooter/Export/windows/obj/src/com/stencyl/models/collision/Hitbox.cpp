// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Hitbox
#include <com/stencyl/models/collision/Hitbox.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Mask
#include <com/stencyl/models/collision/Mask.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Masklist
#include <com/stencyl/models/collision/Masklist.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_919099251323545f_24_new,"com.stencyl.models.collision.Hitbox","new",0xa608a93b,"com.stencyl.models.collision.Hitbox.new","com/stencyl/models/collision/Hitbox.hx",24,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_37_clone,"com.stencyl.models.collision.Hitbox","clone",0x67a418f8,"com.stencyl.models.collision.Hitbox.clone","com/stencyl/models/collision/Hitbox.hx",37,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_42_collideMask,"com.stencyl.models.collision.Hitbox","collideMask",0x58e55f65,"com.stencyl.models.collision.Hitbox.collideMask","com/stencyl/models/collision/Hitbox.hx",42,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_62_collideHitbox,"com.stencyl.models.collision.Hitbox","collideHitbox",0x00965c51,"com.stencyl.models.collision.Hitbox.collideHitbox","com/stencyl/models/collision/Hitbox.hx",62,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_84_get_x,"com.stencyl.models.collision.Hitbox","get_x",0xb0a1aaea,"com.stencyl.models.collision.Hitbox.get_x","com/stencyl/models/collision/Hitbox.hx",84,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_86_set_x,"com.stencyl.models.collision.Hitbox","set_x",0x9970a0f6,"com.stencyl.models.collision.Hitbox.set_x","com/stencyl/models/collision/Hitbox.hx",86,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_98_get_y,"com.stencyl.models.collision.Hitbox","get_y",0xb0a1aaeb,"com.stencyl.models.collision.Hitbox.get_y","com/stencyl/models/collision/Hitbox.hx",98,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_100_set_y,"com.stencyl.models.collision.Hitbox","set_y",0x9970a0f7,"com.stencyl.models.collision.Hitbox.set_y","com/stencyl/models/collision/Hitbox.hx",100,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_112_get_width,"com.stencyl.models.collision.Hitbox","get_width",0xa1cf8178,"com.stencyl.models.collision.Hitbox.get_width","com/stencyl/models/collision/Hitbox.hx",112,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_114_set_width,"com.stencyl.models.collision.Hitbox","set_width",0x85206d84,"com.stencyl.models.collision.Hitbox.set_width","com/stencyl/models/collision/Hitbox.hx",114,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_126_get_height,"com.stencyl.models.collision.Hitbox","get_height",0xaa114035,"com.stencyl.models.collision.Hitbox.get_height","com/stencyl/models/collision/Hitbox.hx",126,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_128_set_height,"com.stencyl.models.collision.Hitbox","set_height",0xad8edea9,"com.stencyl.models.collision.Hitbox.set_height","com/stencyl/models/collision/Hitbox.hx",128,0x2d38d695)
HX_LOCAL_STACK_FRAME(_hx_pos_919099251323545f_139_update,"com.stencyl.models.collision.Hitbox","update",0xc0a9680e,"com.stencyl.models.collision.Hitbox.update","com/stencyl/models/collision/Hitbox.hx",139,0x2d38d695)
namespace com{
namespace stencyl{
namespace models{
namespace collision{

void Hitbox_obj::__construct(hx::Null< int >  __o_width,hx::Null< int >  __o_height,hx::Null< int >  __o_x,hx::Null< int >  __o_y,hx::Null< bool >  __o_solid,hx::Null< int >  __o_groupID){
int width = __o_width.Default(1);
int height = __o_height.Default(1);
int x = __o_x.Default(0);
int y = __o_y.Default(0);
bool solid = __o_solid.Default(true);
int groupID = __o_groupID.Default(0);
            	HX_STACKFRAME(&_hx_pos_919099251323545f_24_new)
HXLINE(  25)		super::__construct();
HXLINE(  26)		this->lastBounds->width = (this->_width = width);
HXLINE(  27)		this->lastBounds->height = (this->_height = height);
HXLINE(  28)		this->_x = x;
HXLINE(  29)		this->_y = y;
HXLINE(  30)		this->solid = solid;
HXLINE(  31)		this->groupID = groupID;
HXLINE(  32)		{
HXLINE(  32)			::Dynamic this1 = this->_check;
HXDLIN(  32)			( ( ::haxe::ds::StringMap)(this1) )->set(::Type_obj::getClassName(hx::ClassOf< ::com::stencyl::models::collision::Hitbox >()),this->collideHitbox_dyn());
            		}
            	}

Dynamic Hitbox_obj::__CreateEmpty() { return new Hitbox_obj; }

void *Hitbox_obj::_hx_vtable = 0;

Dynamic Hitbox_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Hitbox_obj > _hx_result = new Hitbox_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Hitbox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2ff29145) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2ff29145;
	} else {
		return inClassId==(int)0x6b714215;
	}
}

 ::com::stencyl::models::collision::Hitbox Hitbox_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_919099251323545f_37_clone)
HXDLIN(  37)		return  ::com::stencyl::models::collision::Hitbox_obj::__alloc( HX_CTX ,this->_width,this->_height,this->_x,this->_y,this->solid,this->groupID);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Hitbox_obj,clone,return )

bool Hitbox_obj::collideMask( ::com::stencyl::models::collision::Mask other){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_42_collideMask)
HXLINE(  43)		bool _hx_tmp;
HXDLIN(  43)		bool _hx_tmp1;
HXDLIN(  43)		bool _hx_tmp2;
HXDLIN(  43)		if ((((this->parent->colX + this->_x) + this->_width) > other->parent->colX)) {
HXLINE(  43)			_hx_tmp2 = (((this->parent->colY + this->_y) + this->_height) > other->parent->colY);
            		}
            		else {
HXLINE(  43)			_hx_tmp2 = false;
            		}
HXDLIN(  43)		if (_hx_tmp2) {
HXLINE(  45)			Float _hx_tmp3 = (this->parent->colX + this->_x);
HXLINE(  43)			_hx_tmp1 = (_hx_tmp3 < (other->parent->colX + other->parent->cacheWidth));
            		}
            		else {
HXLINE(  43)			_hx_tmp1 = false;
            		}
HXDLIN(  43)		if (_hx_tmp1) {
HXLINE(  46)			Float _hx_tmp4 = (this->parent->colY + this->_y);
HXLINE(  43)			_hx_tmp = (_hx_tmp4 < (other->parent->colY + other->parent->cacheHeight));
            		}
            		else {
HXLINE(  43)			_hx_tmp = false;
            		}
HXDLIN(  43)		if (_hx_tmp) {
HXLINE(  48)			this->lastBounds->x = (this->parent->colX + this->parent->cacheWidth);
HXLINE(  49)			this->lastBounds->y = (this->parent->colY + this->parent->cacheHeight);
HXLINE(  50)			this->lastBounds->width = this->parent->cacheWidth;
HXLINE(  51)			this->lastBounds->height = this->parent->cacheHeight;
HXLINE(  52)			this->lastCheckedMask = hx::ObjectPtr<OBJ_>(this);
HXLINE(  54)			return true;
            		}
HXLINE(  57)		return false;
            	}


bool Hitbox_obj::collideHitbox( ::com::stencyl::models::collision::Hitbox other){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_62_collideHitbox)
HXLINE(  63)		bool _hx_tmp;
HXDLIN(  63)		bool _hx_tmp1;
HXDLIN(  63)		bool _hx_tmp2;
HXDLIN(  63)		Float _hx_tmp3 = ((this->parent->colX + this->_x) + this->_width);
HXDLIN(  63)		if ((_hx_tmp3 > (other->parent->colX + other->_x))) {
HXLINE(  64)			Float _hx_tmp4 = ((this->parent->colY + this->_y) + this->_height);
HXLINE(  63)			_hx_tmp2 = (_hx_tmp4 > (other->parent->colY + other->_y));
            		}
            		else {
HXLINE(  63)			_hx_tmp2 = false;
            		}
HXDLIN(  63)		if (_hx_tmp2) {
HXLINE(  65)			Float _hx_tmp5 = (this->parent->colX + this->_x);
HXLINE(  63)			_hx_tmp1 = (_hx_tmp5 < ((other->parent->colX + other->_x) + other->_width));
            		}
            		else {
HXLINE(  63)			_hx_tmp1 = false;
            		}
HXDLIN(  63)		if (_hx_tmp1) {
HXLINE(  66)			Float _hx_tmp6 = (this->parent->colY + this->_y);
HXLINE(  63)			_hx_tmp = (_hx_tmp6 < ((other->parent->colY + other->_y) + other->_height));
            		}
            		else {
HXLINE(  63)			_hx_tmp = false;
            		}
HXDLIN(  63)		if (_hx_tmp) {
HXLINE(  68)			this->lastBounds->x = (this->parent->colX + this->_x);
HXLINE(  69)			this->lastBounds->y = (this->parent->colY + this->_y);
HXLINE(  70)			this->lastBounds->width = this->_width;
HXLINE(  71)			this->lastBounds->height = this->_height;
HXLINE(  72)			this->lastCheckedMask = hx::ObjectPtr<OBJ_>(this);
HXLINE(  74)			return true;
            		}
HXLINE(  77)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Hitbox_obj,collideHitbox,return )

int Hitbox_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_84_get_x)
HXDLIN(  84)		return this->_x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Hitbox_obj,get_x,return )

int Hitbox_obj::set_x(int value){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_86_set_x)
HXLINE(  87)		if ((this->_x == value)) {
HXLINE(  87)			return value;
            		}
HXLINE(  88)		this->_x = value;
HXLINE(  89)		if (hx::IsNotNull( this->list )) {
HXLINE(  89)			this->list->update();
            		}
            		else {
HXLINE(  90)			if (hx::IsNotNull( this->parent )) {
HXLINE(  90)				this->update();
            			}
            		}
HXLINE(  91)		return this->_x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Hitbox_obj,set_x,return )

int Hitbox_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_98_get_y)
HXDLIN(  98)		return this->_y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Hitbox_obj,get_y,return )

int Hitbox_obj::set_y(int value){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_100_set_y)
HXLINE( 101)		if ((this->_y == value)) {
HXLINE( 101)			return value;
            		}
HXLINE( 102)		this->_y = value;
HXLINE( 103)		if (hx::IsNotNull( this->list )) {
HXLINE( 103)			this->list->update();
            		}
            		else {
HXLINE( 104)			if (hx::IsNotNull( this->parent )) {
HXLINE( 104)				this->update();
            			}
            		}
HXLINE( 105)		return this->_y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Hitbox_obj,set_y,return )

int Hitbox_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_112_get_width)
HXDLIN( 112)		return this->_width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Hitbox_obj,get_width,return )

int Hitbox_obj::set_width(int value){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_114_set_width)
HXLINE( 115)		if ((this->_width == value)) {
HXLINE( 115)			return value;
            		}
HXLINE( 116)		this->_width = value;
HXLINE( 117)		if (hx::IsNotNull( this->list )) {
HXLINE( 117)			this->list->update();
            		}
            		else {
HXLINE( 118)			if (hx::IsNotNull( this->parent )) {
HXLINE( 118)				this->update();
            			}
            		}
HXLINE( 119)		return this->_width;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Hitbox_obj,set_width,return )

int Hitbox_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_126_get_height)
HXDLIN( 126)		return this->_height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Hitbox_obj,get_height,return )

int Hitbox_obj::set_height(int value){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_128_set_height)
HXLINE( 129)		if ((this->_height == value)) {
HXLINE( 129)			return value;
            		}
HXLINE( 130)		this->_height = value;
HXLINE( 131)		if (hx::IsNotNull( this->list )) {
HXLINE( 131)			this->list->update();
            		}
            		else {
HXLINE( 132)			if (hx::IsNotNull( this->parent )) {
HXLINE( 132)				this->update();
            			}
            		}
HXLINE( 133)		return this->_height;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Hitbox_obj,set_height,return )

void Hitbox_obj::update(){
            	HX_STACKFRAME(&_hx_pos_919099251323545f_139_update)
HXDLIN( 139)		if (hx::IsNotNull( this->parent )) {
HXLINE( 141)			if (hx::IsNotNull( this->list )) {
HXLINE( 142)				this->list->update();
            			}
            		}
            	}



hx::ObjectPtr< Hitbox_obj > Hitbox_obj::__new(hx::Null< int >  __o_width,hx::Null< int >  __o_height,hx::Null< int >  __o_x,hx::Null< int >  __o_y,hx::Null< bool >  __o_solid,hx::Null< int >  __o_groupID) {
	hx::ObjectPtr< Hitbox_obj > __this = new Hitbox_obj();
	__this->__construct(__o_width,__o_height,__o_x,__o_y,__o_solid,__o_groupID);
	return __this;
}

hx::ObjectPtr< Hitbox_obj > Hitbox_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_width,hx::Null< int >  __o_height,hx::Null< int >  __o_x,hx::Null< int >  __o_y,hx::Null< bool >  __o_solid,hx::Null< int >  __o_groupID) {
	Hitbox_obj *__this = (Hitbox_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Hitbox_obj), true, "com.stencyl.models.collision.Hitbox"));
	*(void **)__this = Hitbox_obj::_hx_vtable;
	__this->__construct(__o_width,__o_height,__o_x,__o_y,__o_solid,__o_groupID);
	return __this;
}

Hitbox_obj::Hitbox_obj()
{
}

hx::Val Hitbox_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { return hx::Val( _x ); }
		if (HX_FIELD_EQ(inName,"_y") ) { return hx::Val( _y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"collideMask") ) { return hx::Val( collideMask_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"collideHitbox") ) { return hx::Val( collideHitbox_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Hitbox_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< int >()) ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { _x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_y") ) { _y=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue.Cast< int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Hitbox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"));
	outFields->push(HX_HCSTRING("_x","\x39","\x53","\x00","\x00"));
	outFields->push(HX_HCSTRING("_y","\x3a","\x53","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Hitbox_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Hitbox_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsInt,(int)offsetof(Hitbox_obj,_height),HX_HCSTRING("_height","\x86","\x19","\xc3","\x70")},
	{hx::fsInt,(int)offsetof(Hitbox_obj,_x),HX_HCSTRING("_x","\x39","\x53","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Hitbox_obj,_y),HX_HCSTRING("_y","\x3a","\x53","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Hitbox_obj_sStaticStorageInfo = 0;
#endif

static ::String Hitbox_obj_sMemberFields[] = {
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("collideMask","\x8a","\xb3","\x13","\xba"),
	HX_HCSTRING("collideHitbox","\xb6","\xc3","\x1d","\xc9"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"),
	HX_HCSTRING("_x","\x39","\x53","\x00","\x00"),
	HX_HCSTRING("_y","\x3a","\x53","\x00","\x00"),
	::String(null()) };

static void Hitbox_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Hitbox_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Hitbox_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Hitbox_obj::__mClass,"__mClass");
};

#endif

hx::Class Hitbox_obj::__mClass;

void Hitbox_obj::__register()
{
	hx::Object *dummy = new Hitbox_obj;
	Hitbox_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.collision.Hitbox","\xc9","\xef","\x1e","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Hitbox_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Hitbox_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Hitbox_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Hitbox_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Hitbox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Hitbox_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace collision
