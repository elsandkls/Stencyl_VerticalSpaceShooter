// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_com_stencyl_utils_PolyDecompBayazit
#include <com/stencyl/utils/PolyDecompBayazit.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_84_new,"com.stencyl.utils.PolyDecompBayazit","new",0x0628ba88,"com.stencyl.utils.PolyDecompBayazit.new","com/stencyl/utils/PolyDecompBayazit.hx",84,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_67_combineColinearPoints,"com.stencyl.utils.PolyDecompBayazit","combineColinearPoints",0xa8968d9b,"com.stencyl.utils.PolyDecompBayazit.combineColinearPoints","com/stencyl/utils/PolyDecompBayazit.hx",67,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_92_combineClosePoints,"com.stencyl.utils.PolyDecompBayazit","combineClosePoints",0xe1ff0a94,"com.stencyl.utils.PolyDecompBayazit.combineClosePoints","com/stencyl/utils/PolyDecompBayazit.hx",92,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_106_at,"com.stencyl.utils.PolyDecompBayazit","at",0xbc4be7cb,"com.stencyl.utils.PolyDecompBayazit.at","com/stencyl/utils/PolyDecompBayazit.hx",106,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_112_isReflex,"com.stencyl.utils.PolyDecompBayazit","isReflex",0x32b0a8ce,"com.stencyl.utils.PolyDecompBayazit.isReflex","com/stencyl/utils/PolyDecompBayazit.hx",112,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_116_polyFromRange,"com.stencyl.utils.PolyDecompBayazit","polyFromRange",0x0958f42f,"com.stencyl.utils.PolyDecompBayazit.polyFromRange","com/stencyl/utils/PolyDecompBayazit.hx",116,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_122_decompose,"com.stencyl.utils.PolyDecompBayazit","decompose",0xb562bbd9,"com.stencyl.utils.PolyDecompBayazit.decompose","com/stencyl/utils/PolyDecompBayazit.hx",122,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_223_makeCCW,"com.stencyl.utils.PolyDecompBayazit","makeCCW",0xa7b05eb1,"com.stencyl.utils.PolyDecompBayazit.makeCCW","com/stencyl/utils/PolyDecompBayazit.hx",223,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_27_area,"com.stencyl.utils.PolyDecompBayazit","area",0x54ec8465,"com.stencyl.utils.PolyDecompBayazit.area","com/stencyl/utils/PolyDecompBayazit.hx",27,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_31_right,"com.stencyl.utils.PolyDecompBayazit","right",0xbde5d004,"com.stencyl.utils.PolyDecompBayazit.right","com/stencyl/utils/PolyDecompBayazit.hx",31,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_35_rightOn,"com.stencyl.utils.PolyDecompBayazit","rightOn",0x5efd1e43,"com.stencyl.utils.PolyDecompBayazit.rightOn","com/stencyl/utils/PolyDecompBayazit.hx",35,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_39_left,"com.stencyl.utils.PolyDecompBayazit","left",0x5c2800df,"com.stencyl.utils.PolyDecompBayazit.left","com/stencyl/utils/PolyDecompBayazit.hx",39,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_43_leftOn,"com.stencyl.utils.PolyDecompBayazit","leftOn",0xb6d17bde,"com.stencyl.utils.PolyDecompBayazit.leftOn","com/stencyl/utils/PolyDecompBayazit.hx",43,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_46_sqdist,"com.stencyl.utils.PolyDecompBayazit","sqdist",0x6ac551dc,"com.stencyl.utils.PolyDecompBayazit.sqdist","com/stencyl/utils/PolyDecompBayazit.hx",46,0xaee177eb)
HX_LOCAL_STACK_FRAME(_hx_pos_97b2dfda68b1e3da_52_getIntersection,"com.stencyl.utils.PolyDecompBayazit","getIntersection",0xf7eb7e27,"com.stencyl.utils.PolyDecompBayazit.getIntersection","com/stencyl/utils/PolyDecompBayazit.hx",52,0xaee177eb)
namespace com{
namespace stencyl{
namespace utils{

void PolyDecompBayazit_obj::__construct(::Array< ::Dynamic> points){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_84_new)
HXLINE(  85)		this->points = points;
HXLINE(  87)		this->combineClosePoints();
HXLINE(  88)		this->combineColinearPoints();
HXLINE(  89)		this->makeCCW();
            	}

Dynamic PolyDecompBayazit_obj::__CreateEmpty() { return new PolyDecompBayazit_obj; }

void *PolyDecompBayazit_obj::_hx_vtable = 0;

Dynamic PolyDecompBayazit_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PolyDecompBayazit_obj > _hx_result = new PolyDecompBayazit_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PolyDecompBayazit_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4dd68520;
}

void PolyDecompBayazit_obj::combineColinearPoints(){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_67_combineColinearPoints)
HXLINE(  69)		::Array< ::Dynamic> combinedPoints = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  71)		{
HXLINE(  71)			int _g1 = (int)0;
HXDLIN(  71)			int _g = this->points->length;
HXDLIN(  71)			while((_g1 < _g)){
HXLINE(  71)				_g1 = (_g1 + (int)1);
HXDLIN(  71)				int i = (_g1 - (int)1);
HXLINE(  72)				 ::openfl::geom::Point a = this->at((i - (int)1));
HXDLIN(  72)				 ::openfl::geom::Point b = this->at(i);
HXDLIN(  72)				 ::openfl::geom::Point c = this->at((i + (int)1));
HXLINE(  74)				if (hx::IsNotNull( ::com::stencyl::utils::PolyDecompBayazit_obj::getIntersection(a,b,b,c) )) {
HXLINE(  75)					combinedPoints->push(b);
            				}
            			}
            		}
HXLINE(  78)		this->points = combinedPoints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PolyDecompBayazit_obj,combineColinearPoints,(void))

void PolyDecompBayazit_obj::combineClosePoints(){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_92_combineClosePoints)
HXLINE(  93)		::Array< ::Dynamic> combinedPoints = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  95)		{
HXLINE(  95)			int _g1 = (int)0;
HXDLIN(  95)			int _g = this->points->length;
HXDLIN(  95)			while((_g1 < _g)){
HXLINE(  95)				_g1 = (_g1 + (int)1);
HXDLIN(  95)				int i = (_g1 - (int)1);
HXLINE(  96)				 ::openfl::geom::Point a = this->at(i);
HXLINE(  97)				 ::openfl::geom::Point b = this->at((i + (int)1));
HXLINE(  99)				if ((::com::stencyl::utils::PolyDecompBayazit_obj::sqdist(a,b) > ((Float)2.2250738585072014e-308))) {
HXLINE( 100)					combinedPoints->push(a);
            				}
            			}
            		}
HXLINE( 103)		this->points = combinedPoints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PolyDecompBayazit_obj,combineClosePoints,(void))

 ::openfl::geom::Point PolyDecompBayazit_obj::at(int i){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_106_at)
HXLINE( 107)		int s = this->points->length;
HXLINE( 108)		::Array< ::Dynamic> _hx_tmp = this->points;
HXDLIN( 108)		return _hx_tmp->__get(hx::Mod((i + s),s)).StaticCast<  ::openfl::geom::Point >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PolyDecompBayazit_obj,at,return )

bool PolyDecompBayazit_obj::isReflex(int i){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_112_isReflex)
HXDLIN( 112)		 ::openfl::geom::Point _hx_tmp = this->at((i - (int)1));
HXDLIN( 112)		 ::openfl::geom::Point _hx_tmp1 = this->at(i);
HXDLIN( 112)		return ::com::stencyl::utils::PolyDecompBayazit_obj::right(_hx_tmp,_hx_tmp1,this->at((i + (int)1)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PolyDecompBayazit_obj,isReflex,return )

 ::com::stencyl::utils::PolyDecompBayazit PolyDecompBayazit_obj::polyFromRange(int lower,int upper){
            	HX_GC_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_116_polyFromRange)
HXDLIN( 116)		if ((lower < upper)) {
HXLINE( 117)			::Array< ::Dynamic> _hx_tmp = this->points;
HXDLIN( 117)			return  ::com::stencyl::utils::PolyDecompBayazit_obj::__alloc( HX_CTX ,_hx_tmp->slice(lower,(upper + (int)1)));
            		}
            		else {
HXLINE( 119)			::Array< ::Dynamic> _hx_tmp1 = this->points->slice(lower,null());
HXDLIN( 119)			::Array< ::Dynamic> _hx_tmp2 = this->points;
HXDLIN( 119)			return  ::com::stencyl::utils::PolyDecompBayazit_obj::__alloc( HX_CTX ,_hx_tmp1->concat(_hx_tmp2->slice((int)0,(upper + (int)1))));
            		}
HXLINE( 116)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PolyDecompBayazit_obj,polyFromRange,return )

void PolyDecompBayazit_obj::decompose( ::Dynamic cb){
            	HX_GC_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_122_decompose)
HXLINE( 123)		if ((this->points->length < (int)3)) {
HXLINE( 123)			return;
            		}
HXLINE( 125)		{
HXLINE( 125)			int _g1 = (int)0;
HXDLIN( 125)			int _g = this->points->length;
HXDLIN( 125)			while((_g1 < _g)){
HXLINE( 125)				_g1 = (_g1 + (int)1);
HXDLIN( 125)				int i = (_g1 - (int)1);
HXLINE( 126)				if (this->isReflex(i)) {
HXLINE( 129)					Float upperDist = ((Float)1.7976931348623158e+308);
HXLINE( 130)					 ::openfl::geom::Point upperIntersection = null();
HXLINE( 131)					int upperIndex = (int)0;
HXLINE( 132)					Float lowerDist = ((Float)1.7976931348623158e+308);
HXLINE( 133)					 ::openfl::geom::Point lowerIntersection = null();
HXLINE( 134)					int lowerIndex = (int)0;
HXLINE( 136)					{
HXLINE( 136)						int _g3 = (int)0;
HXDLIN( 136)						int _g2 = this->points->length;
HXDLIN( 136)						while((_g3 < _g2)){
HXLINE( 136)							_g3 = (_g3 + (int)1);
HXDLIN( 136)							int j = (_g3 - (int)1);
HXLINE( 137)							bool _hx_tmp;
HXDLIN( 137)							 ::openfl::geom::Point _hx_tmp1 = this->at((i - (int)1));
HXDLIN( 137)							 ::openfl::geom::Point _hx_tmp2 = this->at(i);
HXDLIN( 137)							if (::com::stencyl::utils::PolyDecompBayazit_obj::left(_hx_tmp1,_hx_tmp2,this->at(j))) {
HXLINE( 137)								 ::openfl::geom::Point _hx_tmp3 = this->at((i - (int)1));
HXDLIN( 137)								 ::openfl::geom::Point _hx_tmp4 = this->at(i);
HXDLIN( 137)								_hx_tmp = ::com::stencyl::utils::PolyDecompBayazit_obj::rightOn(_hx_tmp3,_hx_tmp4,this->at((j - (int)1)));
            							}
            							else {
HXLINE( 137)								_hx_tmp = false;
            							}
HXDLIN( 137)							if (_hx_tmp) {
HXLINE( 138)								 ::openfl::geom::Point intersectionPoint = this->at((i - (int)1));
HXDLIN( 138)								 ::openfl::geom::Point intersectionPoint1 = this->at(i);
HXDLIN( 138)								 ::openfl::geom::Point intersectionPoint2 = this->at(j);
HXDLIN( 138)								 ::openfl::geom::Point intersectionPoint3 = ::com::stencyl::utils::PolyDecompBayazit_obj::getIntersection(intersectionPoint,intersectionPoint1,intersectionPoint2,this->at((j - (int)1)));
HXLINE( 139)								 ::openfl::geom::Point _hx_tmp5 = this->at((i + (int)1));
HXDLIN( 139)								if (::com::stencyl::utils::PolyDecompBayazit_obj::right(_hx_tmp5,this->at(i),intersectionPoint3)) {
HXLINE( 140)									Float distance = ::com::stencyl::utils::PolyDecompBayazit_obj::sqdist(this->at(i),intersectionPoint3);
HXLINE( 141)									if ((distance < lowerDist)) {
HXLINE( 142)										lowerDist = distance;
HXLINE( 143)										lowerIntersection = intersectionPoint3;
HXLINE( 144)										lowerIndex = j;
            									}
            								}
            							}
HXLINE( 148)							bool _hx_tmp6;
HXDLIN( 148)							 ::openfl::geom::Point _hx_tmp7 = this->at((i + (int)1));
HXDLIN( 148)							 ::openfl::geom::Point _hx_tmp8 = this->at(i);
HXDLIN( 148)							if (::com::stencyl::utils::PolyDecompBayazit_obj::left(_hx_tmp7,_hx_tmp8,this->at((j + (int)1)))) {
HXLINE( 148)								 ::openfl::geom::Point _hx_tmp9 = this->at((i + (int)1));
HXDLIN( 148)								 ::openfl::geom::Point _hx_tmp10 = this->at(i);
HXDLIN( 148)								_hx_tmp6 = ::com::stencyl::utils::PolyDecompBayazit_obj::rightOn(_hx_tmp9,_hx_tmp10,this->at(j));
            							}
            							else {
HXLINE( 148)								_hx_tmp6 = false;
            							}
HXDLIN( 148)							if (_hx_tmp6) {
HXLINE( 149)								 ::openfl::geom::Point intersectionPoint4 = this->at((i + (int)1));
HXDLIN( 149)								 ::openfl::geom::Point intersectionPoint5 = this->at(i);
HXDLIN( 149)								 ::openfl::geom::Point intersectionPoint6 = this->at(j);
HXDLIN( 149)								 ::openfl::geom::Point intersectionPoint7 = ::com::stencyl::utils::PolyDecompBayazit_obj::getIntersection(intersectionPoint4,intersectionPoint5,intersectionPoint6,this->at((j + (int)1)));
HXLINE( 150)								 ::openfl::geom::Point _hx_tmp11 = this->at((i - (int)1));
HXDLIN( 150)								if (::com::stencyl::utils::PolyDecompBayazit_obj::left(_hx_tmp11,this->at(i),intersectionPoint7)) {
HXLINE( 151)									Float distance1 = ::com::stencyl::utils::PolyDecompBayazit_obj::sqdist(this->at(i),intersectionPoint7);
HXLINE( 152)									if ((distance1 < upperDist)) {
HXLINE( 153)										upperDist = distance1;
HXLINE( 154)										upperIntersection = intersectionPoint7;
HXLINE( 155)										upperIndex = j;
            									}
            								}
            							}
            						}
            					}
HXLINE( 161)					 ::com::stencyl::utils::PolyDecompBayazit lowerPoly;
HXLINE( 162)					 ::com::stencyl::utils::PolyDecompBayazit upperPoly;
HXLINE( 165)					if ((lowerIndex == hx::Mod((upperIndex + (int)1),this->points->length))) {
HXLINE( 167)						Float steinerPoint = ((lowerIntersection->x + upperIntersection->x) * ((Float)0.5));
HXLINE( 166)						 ::openfl::geom::Point steinerPoint1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,steinerPoint,((lowerIntersection->y + upperIntersection->y) * ((Float)0.5)));
HXLINE( 170)						lowerPoly = this->polyFromRange(i,upperIndex);
HXLINE( 171)						lowerPoly->points->push(steinerPoint1);
HXLINE( 173)						if ((i < upperIndex)) {
HXLINE( 174)							upperPoly = this->polyFromRange(lowerIndex,i);
            						}
            						else {
HXLINE( 176)							upperPoly = this->polyFromRange((int)0,i);
            						}
HXLINE( 177)						upperPoly->points->push(steinerPoint1);
            					}
            					else {
HXLINE( 182)						if ((lowerIndex > upperIndex)) {
HXLINE( 182)							upperIndex = (upperIndex + this->points->length);
            						}
HXLINE( 185)						int closestIndex = (int)0;
HXLINE( 186)						Float closestDist = ((Float)1.7976931348623158e+308);
HXLINE( 187)						 ::openfl::geom::Point closestVert = null();
HXLINE( 189)						int j1 = lowerIndex;
HXLINE( 191)						while((j1 <= upperIndex)){
HXLINE( 192)							bool _hx_tmp12;
HXDLIN( 192)							 ::openfl::geom::Point _hx_tmp13 = this->at((i - (int)1));
HXDLIN( 192)							 ::openfl::geom::Point _hx_tmp14 = this->at(i);
HXDLIN( 192)							if (::com::stencyl::utils::PolyDecompBayazit_obj::leftOn(_hx_tmp13,_hx_tmp14,this->at(j1))) {
HXLINE( 192)								 ::openfl::geom::Point _hx_tmp15 = this->at((i + (int)1));
HXDLIN( 192)								 ::openfl::geom::Point _hx_tmp16 = this->at(i);
HXDLIN( 192)								_hx_tmp12 = ::com::stencyl::utils::PolyDecompBayazit_obj::rightOn(_hx_tmp15,_hx_tmp16,this->at(j1));
            							}
            							else {
HXLINE( 192)								_hx_tmp12 = false;
            							}
HXDLIN( 192)							if (_hx_tmp12) {
HXLINE( 193)								 ::openfl::geom::Point distance2 = this->at(i);
HXDLIN( 193)								Float distance3 = ::com::stencyl::utils::PolyDecompBayazit_obj::sqdist(distance2,this->at(j1));
HXLINE( 194)								if ((distance3 < closestDist)) {
HXLINE( 195)									closestDist = distance3;
HXLINE( 196)									closestVert = this->at(j1);
HXLINE( 197)									closestIndex = hx::Mod(j1,this->points->length);
            								}
            							}
HXLINE( 201)							j1 = (j1 + (int)1);
            						}
HXLINE( 204)						lowerPoly = this->polyFromRange(i,closestIndex);
HXLINE( 205)						upperPoly = this->polyFromRange(closestIndex,i);
            					}
HXLINE( 209)					if ((lowerPoly->points->length < upperPoly->points->length)) {
HXLINE( 210)						lowerPoly->decompose(cb);
HXLINE( 211)						upperPoly->decompose(cb);
            					}
            					else {
HXLINE( 213)						upperPoly->decompose(cb);
HXLINE( 214)						lowerPoly->decompose(cb);
            					}
HXLINE( 216)					return;
            				}
            			}
            		}
HXLINE( 220)		if ((this->points->length >= (int)3)) {
HXLINE( 220)			cb(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PolyDecompBayazit_obj,decompose,(void))

void PolyDecompBayazit_obj::makeCCW(){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_223_makeCCW)
HXLINE( 224)		int br = (int)0;
HXLINE( 227)		{
HXLINE( 227)			int _g1 = (int)1;
HXDLIN( 227)			int _g = this->points->length;
HXDLIN( 227)			while((_g1 < _g)){
HXLINE( 227)				_g1 = (_g1 + (int)1);
HXDLIN( 227)				int i = (_g1 - (int)1);
HXLINE( 228)				bool _hx_tmp;
HXDLIN( 228)				Float _hx_tmp1 = this->at(i)->y;
HXDLIN( 228)				if (!((_hx_tmp1 < this->at(br)->y))) {
HXLINE( 228)					Float _hx_tmp2 = this->at(i)->y;
HXDLIN( 228)					if ((_hx_tmp2 == this->at(br)->y)) {
HXLINE( 228)						Float _hx_tmp3 = this->at(i)->x;
HXDLIN( 228)						_hx_tmp = (_hx_tmp3 > this->at(br)->x);
            					}
            					else {
HXLINE( 228)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 228)					_hx_tmp = true;
            				}
HXDLIN( 228)				if (_hx_tmp) {
HXLINE( 229)					br = i;
            				}
            			}
            		}
HXLINE( 234)		 ::openfl::geom::Point _hx_tmp4 = this->at((br - (int)1));
HXDLIN( 234)		 ::openfl::geom::Point _hx_tmp5 = this->at(br);
HXDLIN( 234)		if (!(::com::stencyl::utils::PolyDecompBayazit_obj::left(_hx_tmp4,_hx_tmp5,this->at((br + (int)1))))) {
HXLINE( 235)			this->points->reverse();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PolyDecompBayazit_obj,makeCCW,(void))

Float PolyDecompBayazit_obj::area( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_27_area)
HXDLIN(  27)		Float _hx_tmp = (b->x - a->x);
HXDLIN(  27)		Float _hx_tmp1 = (_hx_tmp * (c->y - a->y));
HXDLIN(  27)		Float _hx_tmp2 = (c->x - a->x);
HXDLIN(  27)		return (_hx_tmp1 - (_hx_tmp2 * (b->y - a->y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyDecompBayazit_obj,area,return )

bool PolyDecompBayazit_obj::right( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_31_right)
HXDLIN(  31)		return (::com::stencyl::utils::PolyDecompBayazit_obj::area(a,b,c) < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyDecompBayazit_obj,right,return )

bool PolyDecompBayazit_obj::rightOn( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_35_rightOn)
HXDLIN(  35)		return (::com::stencyl::utils::PolyDecompBayazit_obj::area(a,b,c) <= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyDecompBayazit_obj,rightOn,return )

bool PolyDecompBayazit_obj::left( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_39_left)
HXDLIN(  39)		return (::com::stencyl::utils::PolyDecompBayazit_obj::area(a,b,c) > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyDecompBayazit_obj,left,return )

bool PolyDecompBayazit_obj::leftOn( ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_43_leftOn)
HXDLIN(  43)		return (::com::stencyl::utils::PolyDecompBayazit_obj::area(a,b,c) >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PolyDecompBayazit_obj,leftOn,return )

Float PolyDecompBayazit_obj::sqdist( ::openfl::geom::Point a, ::openfl::geom::Point b){
            	HX_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_46_sqdist)
HXLINE(  47)		Float dx = (b->x - a->x);
HXLINE(  48)		Float dy = (b->y - a->y);
HXLINE(  49)		return ((dx * dx) + (dy * dy));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyDecompBayazit_obj,sqdist,return )

 ::openfl::geom::Point PolyDecompBayazit_obj::getIntersection( ::openfl::geom::Point start1, ::openfl::geom::Point end1, ::openfl::geom::Point start2, ::openfl::geom::Point end2){
            	HX_GC_STACKFRAME(&_hx_pos_97b2dfda68b1e3da_52_getIntersection)
HXLINE(  53)		Float a1 = (end1->y - start1->y);
HXLINE(  54)		Float b1 = (start1->x - end1->x);
HXLINE(  55)		Float c1 = (a1 * start1->x);
HXDLIN(  55)		Float c11 = (c1 + (b1 * start1->y));
HXLINE(  56)		Float a2 = (end2->y - start2->y);
HXLINE(  57)		Float b2 = (start2->x - end2->x);
HXLINE(  58)		Float c2 = (a2 * start2->x);
HXDLIN(  58)		Float c21 = (c2 + (b2 * start2->y));
HXLINE(  59)		Float det = ((a1 * b2) - (a2 * b1));
HXLINE(  61)		if ((::Math_obj::abs(det) > ((Float)2.2250738585072014e-308))) {
HXLINE(  62)			return  ::openfl::geom::Point_obj::__alloc( HX_CTX ,((Float)((b2 * c11) - (b1 * c21)) / (Float)det),((Float)((a1 * c21) - (a2 * c11)) / (Float)det));
            		}
HXLINE(  64)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(PolyDecompBayazit_obj,getIntersection,return )


hx::ObjectPtr< PolyDecompBayazit_obj > PolyDecompBayazit_obj::__new(::Array< ::Dynamic> points) {
	hx::ObjectPtr< PolyDecompBayazit_obj > __this = new PolyDecompBayazit_obj();
	__this->__construct(points);
	return __this;
}

hx::ObjectPtr< PolyDecompBayazit_obj > PolyDecompBayazit_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> points) {
	PolyDecompBayazit_obj *__this = (PolyDecompBayazit_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PolyDecompBayazit_obj), true, "com.stencyl.utils.PolyDecompBayazit"));
	*(void **)__this = PolyDecompBayazit_obj::_hx_vtable;
	__this->__construct(points);
	return __this;
}

PolyDecompBayazit_obj::PolyDecompBayazit_obj()
{
}

void PolyDecompBayazit_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PolyDecompBayazit);
	HX_MARK_MEMBER_NAME(points,"points");
	HX_MARK_END_CLASS();
}

void PolyDecompBayazit_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(points,"points");
}

hx::Val PolyDecompBayazit_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { return hx::Val( points ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"makeCCW") ) { return hx::Val( makeCCW_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isReflex") ) { return hx::Val( isReflex_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"polyFromRange") ) { return hx::Val( polyFromRange_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"combineClosePoints") ) { return hx::Val( combineClosePoints_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"combineColinearPoints") ) { return hx::Val( combineColinearPoints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PolyDecompBayazit_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"area") ) { outValue = area_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"left") ) { outValue = left_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { outValue = right_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"leftOn") ) { outValue = leftOn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sqdist") ) { outValue = sqdist_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rightOn") ) { outValue = rightOn_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getIntersection") ) { outValue = getIntersection_dyn(); return true; }
	}
	return false;
}

hx::Val PolyDecompBayazit_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { points=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PolyDecompBayazit_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PolyDecompBayazit_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(PolyDecompBayazit_obj,points),HX_HCSTRING("points","\x23","\x12","\x2e","\xf7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PolyDecompBayazit_obj_sStaticStorageInfo = 0;
#endif

static ::String PolyDecompBayazit_obj_sMemberFields[] = {
	HX_HCSTRING("combineColinearPoints","\x73","\xf9","\x33","\xdf"),
	HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"),
	HX_HCSTRING("combineClosePoints","\xbc","\x47","\x36","\x14"),
	HX_HCSTRING("at","\xf3","\x54","\x00","\x00"),
	HX_HCSTRING("isReflex","\xf6","\x63","\x4f","\x58"),
	HX_HCSTRING("polyFromRange","\x07","\xc8","\xba","\x81"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("makeCCW","\x89","\x40","\x17","\x5c"),
	::String(null()) };

static void PolyDecompBayazit_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PolyDecompBayazit_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PolyDecompBayazit_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PolyDecompBayazit_obj::__mClass,"__mClass");
};

#endif

hx::Class PolyDecompBayazit_obj::__mClass;

static ::String PolyDecompBayazit_obj_sStaticFields[] = {
	HX_HCSTRING("area","\x8d","\x8b","\x74","\x40"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("rightOn","\x1b","\x00","\x64","\x13"),
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("leftOn","\x06","\x9d","\xc7","\x99"),
	HX_HCSTRING("sqdist","\x04","\x73","\xbb","\x4d"),
	HX_HCSTRING("getIntersection","\xff","\xf7","\x4b","\xab"),
	::String(null())
};

void PolyDecompBayazit_obj::__register()
{
	hx::Object *dummy = new PolyDecompBayazit_obj;
	PolyDecompBayazit_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.PolyDecompBayazit","\x96","\x16","\x0f","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PolyDecompBayazit_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PolyDecompBayazit_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PolyDecompBayazit_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PolyDecompBayazit_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PolyDecompBayazit_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PolyDecompBayazit_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PolyDecompBayazit_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PolyDecompBayazit_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
