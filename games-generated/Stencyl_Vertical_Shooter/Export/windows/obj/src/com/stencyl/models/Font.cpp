// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_fonts_BitmapFont
#include <com/stencyl/graphics/fonts/BitmapFont.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Font
#include <com/stencyl/models/Font.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Assets
#include <com/stencyl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_46c304d360315723_26_new,"com.stencyl.models.Font","new",0x34463ef6,"com.stencyl.models.Font.new","com/stencyl/models/Font.hx",26,0xf2c62bdb)
HX_LOCAL_STACK_FRAME(_hx_pos_46c304d360315723_39_getHeight,"com.stencyl.models.Font","getHeight",0xcaaf1433,"com.stencyl.models.Font.getHeight","com/stencyl/models/Font.hx",39,0xf2c62bdb)
HX_LOCAL_STACK_FRAME(_hx_pos_46c304d360315723_53_loadGraphics,"com.stencyl.models.Font","loadGraphics",0x34c2f3bb,"com.stencyl.models.Font.loadGraphics","com/stencyl/models/Font.hx",53,0xf2c62bdb)
HX_LOCAL_STACK_FRAME(_hx_pos_46c304d360315723_86_unloadGraphics,"com.stencyl.models.Font","unloadGraphics",0xd2507a14,"com.stencyl.models.Font.unloadGraphics","com/stencyl/models/Font.hx",86,0xf2c62bdb)
HX_LOCAL_STACK_FRAME(_hx_pos_46c304d360315723_101_reloadGraphics,"com.stencyl.models.Font","reloadGraphics",0x1684166e,"com.stencyl.models.Font.reloadGraphics","com/stencyl/models/Font.hx",101,0xf2c62bdb)
HX_LOCAL_STACK_FRAME(_hx_pos_46c304d360315723_118_setLetterSpacing,"com.stencyl.models.Font","setLetterSpacing",0xfd95f9e5,"com.stencyl.models.Font.setLetterSpacing","com/stencyl/models/Font.hx",118,0xf2c62bdb)
HX_LOCAL_STACK_FRAME(_hx_pos_46c304d360315723_122_isBitmapFont,"com.stencyl.models.Font","isBitmapFont",0x702ef492,"com.stencyl.models.Font.isBitmapFont","com/stencyl/models/Font.hx",122,0xf2c62bdb)
HX_LOCAL_STACK_FRAME(_hx_pos_46c304d360315723_15_resetStatics,"com.stencyl.models.Font","resetStatics",0x113590a0,"com.stencyl.models.Font.resetStatics","com/stencyl/models/Font.hx",15,0xf2c62bdb)
HX_LOCAL_STACK_FRAME(_hx_pos_46c304d360315723_11_boot,"com.stencyl.models.Font","boot",0x8149d8dc,"com.stencyl.models.Font.boot","com/stencyl/models/Font.hx",11,0xf2c62bdb)
namespace com{
namespace stencyl{
namespace models{

void Font_obj::__construct(int ID,int atlasID,::String name,bool isDefault){
            	HX_STACKFRAME(&_hx_pos_46c304d360315723_26_new)
HXLINE(  27)		super::__construct(ID,name,atlasID);
HXLINE(  29)		this->isDefault = isDefault;
HXLINE(  31)		if (this->isAtlasActive()) {
HXLINE(  33)			this->loadGraphics();
            		}
            	}

Dynamic Font_obj::__CreateEmpty() { return new Font_obj; }

void *Font_obj::_hx_vtable = 0;

Dynamic Font_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Font_obj > _hx_result = new Font_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Font_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x170dc54f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x170dc54f;
	} else {
		return inClassId==(int)0x4adf69a4;
	}
}

int Font_obj::getHeight(){
            	HX_STACKFRAME(&_hx_pos_46c304d360315723_39_getHeight)
HXDLIN(  39)		if (hx::IsNotNull( this->font )) {
HXLINE(  41)			return this->font->getFontHeight();
            		}
            		else {
HXLINE(  46)			return (int)0;
            		}
HXLINE(  39)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,getHeight,return )

void Font_obj::loadGraphics(){
            	HX_GC_STACKFRAME(&_hx_pos_46c304d360315723_53_loadGraphics)
HXLINE(  54)		if (this->graphicsLoaded) {
HXLINE(  55)			return;
            		}
HXLINE(  57)		if (this->isDefault) {
HXLINE(  59)			::String textBytes = ::com::stencyl::utils::Assets_obj::getText(HX_("assets/graphics/default-font.fnt",91,59,1b,f6));
HXLINE(  60)			 ::Xml xml = ::Xml_obj::parse(textBytes);
HXLINE(  61)			 ::com::stencyl::graphics::fonts::BitmapFont _hx_tmp =  ::com::stencyl::graphics::fonts::BitmapFont_obj::__alloc( HX_CTX );
HXDLIN(  61)			::com::stencyl::models::Font_obj::defaultFont = (this->font = _hx_tmp->loadAngelCode(::com::stencyl::utils::Assets_obj::getBitmapData(HX_("assets/graphics/default-font.png",0e,f0,22,f6),null()),xml));
HXLINE(  62)			this->fontScale = ::com::stencyl::Engine_obj::SCALE;
HXLINE(  63)			this->letterSpacing = (int)0;
HXLINE(  64)			::com::stencyl::models::Font_obj::defaultFont->isDefault = true;
            		}
            		else {
HXLINE(  69)			::String textBytes1 = ::com::stencyl::utils::Assets_obj::getText(((((HX_("assets/graphics/",38,e5,fb,63) + ::com::stencyl::Engine_obj::IMG_BASE) + HX_("/font-",ef,ac,57,cf)) + this->ID) + HX_(".fnt",be,96,b5,1e)));
HXLINE(  70)			 ::Xml xml1 = ::Xml_obj::parse(textBytes1);
HXLINE(  71)			 ::openfl::display::BitmapData img = ::com::stencyl::utils::Assets_obj::getBitmapData(((((HX_("assets/graphics/",38,e5,fb,63) + ::com::stencyl::Engine_obj::IMG_BASE) + HX_("/font-",ef,ac,57,cf)) + this->ID) + HX_(".png",3b,2d,bd,1e)),false);
HXLINE(  77)			this->font =  ::com::stencyl::graphics::fonts::BitmapFont_obj::__alloc( HX_CTX )->loadAngelCode(img,xml1);
HXLINE(  78)			this->fontScale = (int)1;
HXLINE(  79)			this->letterSpacing = (int)0;
            		}
HXLINE(  82)		this->graphicsLoaded = true;
            	}


void Font_obj::unloadGraphics(){
            	HX_STACKFRAME(&_hx_pos_46c304d360315723_86_unloadGraphics)
HXLINE(  87)		if (!(this->graphicsLoaded)) {
HXLINE(  88)			return;
            		}
HXLINE(  91)		this->font = ::com::stencyl::models::Font_obj::defaultFont;
HXLINE(  92)		this->fontScale = (int)1;
HXLINE(  93)		this->letterSpacing = (int)0;
HXLINE(  95)		this->graphicsLoaded = false;
            	}


void Font_obj::reloadGraphics(int subID){
            	HX_STACKFRAME(&_hx_pos_46c304d360315723_101_reloadGraphics)
HXDLIN( 101)		this->super::reloadGraphics(subID);
            	}


void Font_obj::setLetterSpacing(Float spacing){
            	HX_STACKFRAME(&_hx_pos_46c304d360315723_118_setLetterSpacing)
HXDLIN( 118)		this->letterSpacing = ::Std_obj::_hx_int(spacing);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,setLetterSpacing,(void))

bool Font_obj::isBitmapFont( ::Xml xml){
            	HX_STACKFRAME(&_hx_pos_46c304d360315723_122_isBitmapFont)
HXLINE( 123)		if (hx::IsNull( xml )) {
HXLINE( 125)			::String textBytes = ::com::stencyl::utils::Assets_obj::getText(((((HX_("assets/graphics/",38,e5,fb,63) + ::com::stencyl::Engine_obj::IMG_BASE) + HX_("/font-",ef,ac,57,cf)) + this->ID) + HX_(".fnt",be,96,b5,1e)));
HXLINE( 126)			xml = ::Xml_obj::parse(textBytes);
            		}
HXLINE( 129)		{
HXLINE( 129)			 ::Dynamic node = xml->elements();
HXDLIN( 129)			while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 129)				 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 131)				if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE( 131)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node1->nodeType));
            				}
HXDLIN( 131)				if ((node1->nodeName == HX_("font",cf,5d,c0,43))) {
HXLINE( 133)					 ::Dynamic nodeChild = node1->elements();
HXDLIN( 133)					while(( (bool)(nodeChild->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 133)						 ::Xml nodeChild1 = ( ( ::Xml)(nodeChild->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 135)						if ((nodeChild1->nodeType != ::Xml_obj::Element)) {
HXLINE( 135)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + nodeChild1->nodeType));
            						}
HXDLIN( 135)						if ((nodeChild1->nodeName == HX_("info",6e,38,bb,45))) {
HXLINE( 137)							 ::Dynamic att = nodeChild1->attributes();
HXDLIN( 137)							while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 137)								::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 139)								if ((att1 == HX_("lspace",da,84,f1,af))) {
HXLINE( 142)									return true;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 149)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,isBitmapFont,return )

 ::com::stencyl::graphics::fonts::BitmapFont Font_obj::defaultFont;

void Font_obj::resetStatics(){
            	HX_STACKFRAME(&_hx_pos_46c304d360315723_15_resetStatics)
HXDLIN(  15)		::com::stencyl::models::Font_obj::defaultFont = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Font_obj,resetStatics,(void))


hx::ObjectPtr< Font_obj > Font_obj::__new(int ID,int atlasID,::String name,bool isDefault) {
	hx::ObjectPtr< Font_obj > __this = new Font_obj();
	__this->__construct(ID,atlasID,name,isDefault);
	return __this;
}

hx::ObjectPtr< Font_obj > Font_obj::__alloc(hx::Ctx *_hx_ctx,int ID,int atlasID,::String name,bool isDefault) {
	Font_obj *__this = (Font_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Font_obj), true, "com.stencyl.models.Font"));
	*(void **)__this = Font_obj::_hx_vtable;
	__this->__construct(ID,atlasID,name,isDefault);
	return __this;
}

Font_obj::Font_obj()
{
}

void Font_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Font);
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(fontScale,"fontScale");
	HX_MARK_MEMBER_NAME(letterSpacing,"letterSpacing");
	HX_MARK_MEMBER_NAME(isDefault,"isDefault");
	HX_MARK_MEMBER_NAME(graphicsLoaded,"graphicsLoaded");
	 ::com::stencyl::models::Resource_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Font_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(fontScale,"fontScale");
	HX_VISIT_MEMBER_NAME(letterSpacing,"letterSpacing");
	HX_VISIT_MEMBER_NAME(isDefault,"isDefault");
	HX_VISIT_MEMBER_NAME(graphicsLoaded,"graphicsLoaded");
	 ::com::stencyl::models::Resource_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Font_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fontScale") ) { return hx::Val( fontScale ); }
		if (HX_FIELD_EQ(inName,"isDefault") ) { return hx::Val( isDefault ); }
		if (HX_FIELD_EQ(inName,"getHeight") ) { return hx::Val( getHeight_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadGraphics") ) { return hx::Val( loadGraphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"isBitmapFont") ) { return hx::Val( isBitmapFont_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { return hx::Val( letterSpacing ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"graphicsLoaded") ) { return hx::Val( graphicsLoaded ); }
		if (HX_FIELD_EQ(inName,"unloadGraphics") ) { return hx::Val( unloadGraphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadGraphics") ) { return hx::Val( reloadGraphics_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setLetterSpacing") ) { return hx::Val( setLetterSpacing_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Font_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"defaultFont") ) { outValue = ( defaultFont ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
	}
	return false;
}

hx::Val Font_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast<  ::com::stencyl::graphics::fonts::BitmapFont >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fontScale") ) { fontScale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDefault") ) { isDefault=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"letterSpacing") ) { letterSpacing=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"graphicsLoaded") ) { graphicsLoaded=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Font_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"defaultFont") ) { defaultFont=ioValue.Cast<  ::com::stencyl::graphics::fonts::BitmapFont >(); return true; }
	}
	return false;
}

void Font_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("fontScale","\x3b","\x72","\xaa","\x24"));
	outFields->push(HX_HCSTRING("letterSpacing","\x3d","\xb7","\x03","\xf5"));
	outFields->push(HX_HCSTRING("isDefault","\xf7","\x55","\xc2","\x9f"));
	outFields->push(HX_HCSTRING("graphicsLoaded","\x30","\xdf","\x3a","\xab"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Font_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::graphics::fonts::BitmapFont*/ ,(int)offsetof(Font_obj,font),HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43")},
	{hx::fsFloat,(int)offsetof(Font_obj,fontScale),HX_HCSTRING("fontScale","\x3b","\x72","\xaa","\x24")},
	{hx::fsInt,(int)offsetof(Font_obj,letterSpacing),HX_HCSTRING("letterSpacing","\x3d","\xb7","\x03","\xf5")},
	{hx::fsBool,(int)offsetof(Font_obj,isDefault),HX_HCSTRING("isDefault","\xf7","\x55","\xc2","\x9f")},
	{hx::fsBool,(int)offsetof(Font_obj,graphicsLoaded),HX_HCSTRING("graphicsLoaded","\x30","\xdf","\x3a","\xab")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Font_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::graphics::fonts::BitmapFont*/ ,(void *) &Font_obj::defaultFont,HX_HCSTRING("defaultFont","\x30","\x57","\x7f","\x15")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Font_obj_sMemberFields[] = {
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("fontScale","\x3b","\x72","\xaa","\x24"),
	HX_HCSTRING("letterSpacing","\x3d","\xb7","\x03","\xf5"),
	HX_HCSTRING("isDefault","\xf7","\x55","\xc2","\x9f"),
	HX_HCSTRING("graphicsLoaded","\x30","\xdf","\x3a","\xab"),
	HX_HCSTRING("getHeight","\x1d","\x91","\xa2","\x7e"),
	HX_HCSTRING("loadGraphics","\x11","\xe5","\xd0","\xcb"),
	HX_HCSTRING("unloadGraphics","\xea","\xec","\xbd","\xbd"),
	HX_HCSTRING("reloadGraphics","\x44","\x89","\xf1","\x01"),
	HX_HCSTRING("setLetterSpacing","\x3b","\x4e","\x66","\xb5"),
	HX_HCSTRING("isBitmapFont","\xe8","\xe5","\x3c","\x07"),
	::String(null()) };

static void Font_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Font_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Font_obj::defaultFont,"defaultFont");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Font_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Font_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Font_obj::defaultFont,"defaultFont");
};

#endif

hx::Class Font_obj::__mClass;

static ::String Font_obj_sStaticFields[] = {
	HX_HCSTRING("defaultFont","\x30","\x57","\x7f","\x15"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	::String(null())
};

void Font_obj::__register()
{
	hx::Object *dummy = new Font_obj;
	Font_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.Font","\x04","\x4c","\xda","\xde");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Font_obj::__GetStatic;
	__mClass->mSetStaticField = &Font_obj::__SetStatic;
	__mClass->mMarkFunc = Font_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Font_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Font_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Font_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Font_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Font_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Font_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Font_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_46c304d360315723_11_boot)
HXDLIN(  11)		defaultFont = null();
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
