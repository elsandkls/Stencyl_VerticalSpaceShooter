// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_models_actor_CollisionPoint
#include <com/stencyl/models/actor/CollisionPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2affaea92302fa95_16_new,"com.stencyl.models.actor.CollisionPoint","new",0xe79a4afe,"com.stencyl.models.actor.CollisionPoint.new","com/stencyl/models/actor/CollisionPoint.hx",16,0xdb6479b2)
HX_LOCAL_STACK_FRAME(_hx_pos_2affaea92302fa95_27_resetStatics,"com.stencyl.models.actor.CollisionPoint","resetStatics",0xd353c398,"com.stencyl.models.actor.CollisionPoint.resetStatics","com/stencyl/models/actor/CollisionPoint.hx",27,0xdb6479b2)
HX_LOCAL_STACK_FRAME(_hx_pos_2affaea92302fa95_32_get,"com.stencyl.models.actor.CollisionPoint","get",0xe794fb34,"com.stencyl.models.actor.CollisionPoint.get","com/stencyl/models/actor/CollisionPoint.hx",32,0xdb6479b2)
HX_LOCAL_STACK_FRAME(_hx_pos_2affaea92302fa95_49_free,"com.stencyl.models.actor.CollisionPoint","free",0xba276c4e,"com.stencyl.models.actor.CollisionPoint.free","com/stencyl/models/actor/CollisionPoint.hx",49,0xdb6479b2)
HX_LOCAL_STACK_FRAME(_hx_pos_2affaea92302fa95_23_boot,"com.stencyl.models.actor.CollisionPoint","boot",0xb78053d4,"com.stencyl.models.actor.CollisionPoint.boot","com/stencyl/models/actor/CollisionPoint.hx",23,0xdb6479b2)
namespace com{
namespace stencyl{
namespace models{
namespace actor{

void CollisionPoint_obj::__construct(Float x,Float y,Float normalX,Float normalY){
            	HX_STACKFRAME(&_hx_pos_2affaea92302fa95_16_new)
HXLINE(  17)		this->x = x;
HXLINE(  18)		this->y = y;
HXLINE(  19)		this->normalX = normalX;
HXLINE(  20)		this->normalY = normalY;
            	}

Dynamic CollisionPoint_obj::__CreateEmpty() { return new CollisionPoint_obj; }

void *CollisionPoint_obj::_hx_vtable = 0;

Dynamic CollisionPoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CollisionPoint_obj > _hx_result = new CollisionPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool CollisionPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x745b9efe;
}

::Array< ::Dynamic> CollisionPoint_obj::freedCollisionPoints;

void CollisionPoint_obj::resetStatics(){
            	HX_STACKFRAME(&_hx_pos_2affaea92302fa95_27_resetStatics)
HXDLIN(  27)		::com::stencyl::models::actor::CollisionPoint_obj::freedCollisionPoints = ::Array_obj< ::Dynamic>::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CollisionPoint_obj,resetStatics,(void))

 ::com::stencyl::models::actor::CollisionPoint CollisionPoint_obj::get(Float x,Float y,Float normalX,Float normalY){
            	HX_GC_STACKFRAME(&_hx_pos_2affaea92302fa95_32_get)
HXDLIN(  32)		if ((::com::stencyl::models::actor::CollisionPoint_obj::freedCollisionPoints->length > (int)0)) {
HXLINE(  34)			 ::com::stencyl::models::actor::CollisionPoint cp = ::com::stencyl::models::actor::CollisionPoint_obj::freedCollisionPoints->pop().StaticCast<  ::com::stencyl::models::actor::CollisionPoint >();
HXLINE(  35)			cp->x = x;
HXLINE(  36)			cp->y = y;
HXLINE(  37)			cp->normalX = normalX;
HXLINE(  38)			cp->normalY = normalY;
HXLINE(  39)			return cp;
            		}
            		else {
HXLINE(  43)			return  ::com::stencyl::models::actor::CollisionPoint_obj::__alloc( HX_CTX ,x,y,normalX,normalY);
            		}
HXLINE(  32)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CollisionPoint_obj,get,return )

void CollisionPoint_obj::free( ::com::stencyl::models::actor::CollisionPoint cp){
            	HX_STACKFRAME(&_hx_pos_2affaea92302fa95_49_free)
HXDLIN(  49)		::com::stencyl::models::actor::CollisionPoint_obj::freedCollisionPoints->push(cp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CollisionPoint_obj,free,(void))


CollisionPoint_obj::CollisionPoint_obj()
{
}

hx::Val CollisionPoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"normalX") ) { return hx::Val( normalX ); }
		if (HX_FIELD_EQ(inName,"normalY") ) { return hx::Val( normalY ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CollisionPoint_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"free") ) { outValue = free_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"freedCollisionPoints") ) { outValue = ( freedCollisionPoints ); return true; }
	}
	return false;
}

hx::Val CollisionPoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"normalX") ) { normalX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"normalY") ) { normalY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CollisionPoint_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"freedCollisionPoints") ) { freedCollisionPoints=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void CollisionPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("normalX","\x51","\x70","\xda","\x2b"));
	outFields->push(HX_HCSTRING("normalY","\x52","\x70","\xda","\x2b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CollisionPoint_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(CollisionPoint_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(CollisionPoint_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(CollisionPoint_obj,normalX),HX_HCSTRING("normalX","\x51","\x70","\xda","\x2b")},
	{hx::fsFloat,(int)offsetof(CollisionPoint_obj,normalY),HX_HCSTRING("normalY","\x52","\x70","\xda","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo CollisionPoint_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &CollisionPoint_obj::freedCollisionPoints,HX_HCSTRING("freedCollisionPoints","\xdd","\xdc","\xe1","\xef")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String CollisionPoint_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("normalX","\x51","\x70","\xda","\x2b"),
	HX_HCSTRING("normalY","\x52","\x70","\xda","\x2b"),
	::String(null()) };

static void CollisionPoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CollisionPoint_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CollisionPoint_obj::freedCollisionPoints,"freedCollisionPoints");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CollisionPoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CollisionPoint_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CollisionPoint_obj::freedCollisionPoints,"freedCollisionPoints");
};

#endif

hx::Class CollisionPoint_obj::__mClass;

static ::String CollisionPoint_obj_sStaticFields[] = {
	HX_HCSTRING("freedCollisionPoints","\xdd","\xdc","\xe1","\xef"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("free","\xac","\x9c","\xc2","\x43"),
	::String(null())
};

void CollisionPoint_obj::__register()
{
	hx::Object *dummy = new CollisionPoint_obj;
	CollisionPoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.actor.CollisionPoint","\x0c","\xb4","\x25","\xc9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CollisionPoint_obj::__GetStatic;
	__mClass->mSetStaticField = &CollisionPoint_obj::__SetStatic;
	__mClass->mMarkFunc = CollisionPoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CollisionPoint_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CollisionPoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CollisionPoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CollisionPoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CollisionPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CollisionPoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CollisionPoint_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2affaea92302fa95_23_boot)
HXDLIN(  23)		freedCollisionPoints = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace actor
