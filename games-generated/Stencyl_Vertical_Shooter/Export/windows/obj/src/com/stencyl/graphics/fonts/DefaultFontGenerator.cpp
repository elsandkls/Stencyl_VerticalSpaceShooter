// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_fonts_BitmapFont
#include <com/stencyl/graphics/fonts/BitmapFont.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_fonts_DefaultFontGenerator
#include <com/stencyl/graphics/fonts/DefaultFontGenerator.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_63dd6b01854020d7_10_generateAndStoreDefaultFont,"com.stencyl.graphics.fonts.DefaultFontGenerator","generateAndStoreDefaultFont",0xd798c144,"com.stencyl.graphics.fonts.DefaultFontGenerator.generateAndStoreDefaultFont","com/stencyl/graphics/fonts/DefaultFontGenerator.hx",10,0x3d0909bd)
HX_LOCAL_STACK_FRAME(_hx_pos_63dd6b01854020d7_7_boot,"com.stencyl.graphics.fonts.DefaultFontGenerator","boot",0x9301781f,"com.stencyl.graphics.fonts.DefaultFontGenerator.boot","com/stencyl/graphics/fonts/DefaultFontGenerator.hx",7,0x3d0909bd)
namespace com{
namespace stencyl{
namespace graphics{
namespace fonts{

void DefaultFontGenerator_obj::__construct() { }

Dynamic DefaultFontGenerator_obj::__CreateEmpty() { return new DefaultFontGenerator_obj; }

void *DefaultFontGenerator_obj::_hx_vtable = 0;

Dynamic DefaultFontGenerator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DefaultFontGenerator_obj > _hx_result = new DefaultFontGenerator_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DefaultFontGenerator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6ad48e2d;
}

::String DefaultFontGenerator_obj::fontData;

void DefaultFontGenerator_obj::generateAndStoreDefaultFont(){
            	HX_GC_STACKFRAME(&_hx_pos_63dd6b01854020d7_10_generateAndStoreDefaultFont)
HXLINE(  11)		::String letters = HX_("",00,00,00,00);
HXLINE(  12)		 ::openfl::display::BitmapData bd =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(int)700,(int)9,true,(int)-7829368);
HXLINE(  14)		int letterPos = (int)0;
HXLINE(  15)		int i = (int)0;
HXLINE(  17)		while((i < ::com::stencyl::graphics::fonts::DefaultFontGenerator_obj::fontData.length)){
HXLINE(  19)			letters = (letters + ::com::stencyl::graphics::fonts::DefaultFontGenerator_obj::fontData.substr(i,(int)1));
HXLINE(  21)			::String gw = ::com::stencyl::graphics::fonts::DefaultFontGenerator_obj::fontData;
HXDLIN(  21)			i = (i + (int)1);
HXDLIN(  21)			int gw1 = ::Std_obj::parseInt(gw.substr(i,(int)1));
HXLINE(  22)			::String gh = ::com::stencyl::graphics::fonts::DefaultFontGenerator_obj::fontData;
HXDLIN(  22)			i = (i + (int)1);
HXDLIN(  22)			int gh1 = ::Std_obj::parseInt(gh.substr(i,(int)1));
HXLINE(  24)			{
HXLINE(  24)				int _g1 = (int)0;
HXDLIN(  24)				int _g = gh1;
HXDLIN(  24)				while((_g1 < _g)){
HXLINE(  24)					_g1 = (_g1 + (int)1);
HXDLIN(  24)					int py = (_g1 - (int)1);
HXLINE(  26)					{
HXLINE(  26)						int _g3 = (int)0;
HXDLIN(  26)						int _g2 = gw1;
HXDLIN(  26)						while((_g3 < _g2)){
HXLINE(  26)							_g3 = (_g3 + (int)1);
HXDLIN(  26)							int px = (_g3 - (int)1);
HXLINE(  28)							i = (i + (int)1);
HXLINE(  30)							if ((::com::stencyl::graphics::fonts::DefaultFontGenerator_obj::fontData.substr(i,(int)1) == HX_("1",31,00,00,00))) {
HXLINE(  32)								bd->setPixel32((((int)1 + (letterPos * (int)7)) + px),((int)1 + py),(int)-1);
            							}
            							else {
HXLINE(  37)								bd->setPixel32((((int)1 + (letterPos * (int)7)) + px),((int)1 + py),(int)0);
            							}
            						}
            					}
            				}
            			}
HXLINE(  42)			i = (i + (int)1);
HXLINE(  43)			letterPos = (letterPos + (int)1);
            		}
HXLINE(  46)		::com::stencyl::graphics::fonts::BitmapFont_obj::store(HX_("default",c1,d8,c3,9b), ::com::stencyl::graphics::fonts::BitmapFont_obj::__alloc( HX_CTX )->loadPixelizer(bd,letters));
HXLINE(  47)		bd->dispose();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DefaultFontGenerator_obj,generateAndStoreDefaultFont,(void))


DefaultFontGenerator_obj::DefaultFontGenerator_obj()
{
}

bool DefaultFontGenerator_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fontData") ) { outValue = ( fontData ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"generateAndStoreDefaultFont") ) { outValue = generateAndStoreDefaultFont_dyn(); return true; }
	}
	return false;
}

bool DefaultFontGenerator_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fontData") ) { fontData=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DefaultFontGenerator_obj_sMemberStorageInfo = 0;
static hx::StaticInfo DefaultFontGenerator_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &DefaultFontGenerator_obj::fontData,HX_HCSTRING("fontData","\x99","\x73","\xe1","\xc4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void DefaultFontGenerator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DefaultFontGenerator_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DefaultFontGenerator_obj::fontData,"fontData");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DefaultFontGenerator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DefaultFontGenerator_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DefaultFontGenerator_obj::fontData,"fontData");
};

#endif

hx::Class DefaultFontGenerator_obj::__mClass;

static ::String DefaultFontGenerator_obj_sStaticFields[] = {
	HX_HCSTRING("fontData","\x99","\x73","\xe1","\xc4"),
	HX_HCSTRING("generateAndStoreDefaultFont","\x91","\xd7","\xc4","\x4f"),
	::String(null())
};

void DefaultFontGenerator_obj::__register()
{
	hx::Object *dummy = new DefaultFontGenerator_obj;
	DefaultFontGenerator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.fonts.DefaultFontGenerator","\xa1","\xf3","\x2c","\x43");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DefaultFontGenerator_obj::__GetStatic;
	__mClass->mSetStaticField = &DefaultFontGenerator_obj::__SetStatic;
	__mClass->mMarkFunc = DefaultFontGenerator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DefaultFontGenerator_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< DefaultFontGenerator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DefaultFontGenerator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DefaultFontGenerator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DefaultFontGenerator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DefaultFontGenerator_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_63dd6b01854020d7_7_boot)
HXDLIN(   7)		fontData = HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a);
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace fonts
