// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_TimedTask
#include <com/stencyl/behavior/TimedTask.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bccf150e32c9c0f6_20_new,"com.stencyl.behavior.TimedTask","new",0x8c87fc61,"com.stencyl.behavior.TimedTask.new","com/stencyl/behavior/TimedTask.hx",20,0x5206736e)
HX_LOCAL_STACK_FRAME(_hx_pos_bccf150e32c9c0f6_32_update,"com.stencyl.behavior.TimedTask","update",0xa95e10a8,"com.stencyl.behavior.TimedTask.update","com/stencyl/behavior/TimedTask.hx",32,0x5206736e)
namespace com{
namespace stencyl{
namespace behavior{

void TimedTask_obj::__construct( ::Dynamic toExecute,int interval,bool repeats, ::com::stencyl::models::Actor actor){
            	HX_STACKFRAME(&_hx_pos_bccf150e32c9c0f6_20_new)
HXLINE(  21)		this->toExecute = toExecute;
HXLINE(  22)		this->interval = interval;
HXLINE(  23)		this->repeats = repeats;
HXLINE(  24)		this->actor = actor;
HXLINE(  26)		this->done = false;
HXLINE(  28)		this->timer = interval;
            	}

Dynamic TimedTask_obj::__CreateEmpty() { return new TimedTask_obj; }

void *TimedTask_obj::_hx_vtable = 0;

Dynamic TimedTask_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TimedTask_obj > _hx_result = new TimedTask_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TimedTask_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x060d021b;
}

void TimedTask_obj::update(int timeElapsed){
            	HX_STACKFRAME(&_hx_pos_bccf150e32c9c0f6_32_update)
HXLINE(  33)		bool _hx_tmp;
HXDLIN(  33)		if (hx::IsNotNull( this->actor )) {
HXLINE(  33)			_hx_tmp = !(this->actor->isAlive());
            		}
            		else {
HXLINE(  33)			_hx_tmp = false;
            		}
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  35)			this->done = true;
HXLINE(  36)			return;
            		}
HXLINE(  39)		bool _hx_tmp1;
HXDLIN(  39)		bool _hx_tmp2;
HXDLIN(  39)		if (hx::IsNull( this->actor )) {
HXLINE(  39)			_hx_tmp2 = ::com::stencyl::Engine_obj::engine->isPaused();
            		}
            		else {
HXLINE(  39)			_hx_tmp2 = false;
            		}
HXDLIN(  39)		if (!(_hx_tmp2)) {
HXLINE(  39)			if (hx::IsNotNull( this->actor )) {
HXLINE(  39)				_hx_tmp1 = this->actor->isPaused();
            			}
            			else {
HXLINE(  39)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(  39)			_hx_tmp1 = true;
            		}
HXDLIN(  39)		if (_hx_tmp1) {
HXLINE(  41)			return;
            		}
HXLINE(  44)		 ::com::stencyl::behavior::TimedTask _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  44)		_hx_tmp3->timer = (_hx_tmp3->timer - timeElapsed);
HXLINE(  46)		if ((this->timer <= (int)0)) {
HXLINE(  48)			this->toExecute(hx::ObjectPtr<OBJ_>(this));
HXLINE(  49)			this->done = !(this->repeats);
HXLINE(  51)			if (this->repeats) {
HXLINE(  53)				 ::com::stencyl::behavior::TimedTask _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  53)				_hx_tmp4->timer = (_hx_tmp4->timer + this->interval);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TimedTask_obj,update,(void))


hx::ObjectPtr< TimedTask_obj > TimedTask_obj::__new( ::Dynamic toExecute,int interval,bool repeats, ::com::stencyl::models::Actor actor) {
	hx::ObjectPtr< TimedTask_obj > __this = new TimedTask_obj();
	__this->__construct(toExecute,interval,repeats,actor);
	return __this;
}

hx::ObjectPtr< TimedTask_obj > TimedTask_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic toExecute,int interval,bool repeats, ::com::stencyl::models::Actor actor) {
	TimedTask_obj *__this = (TimedTask_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TimedTask_obj), true, "com.stencyl.behavior.TimedTask"));
	*(void **)__this = TimedTask_obj::_hx_vtable;
	__this->__construct(toExecute,interval,repeats,actor);
	return __this;
}

TimedTask_obj::TimedTask_obj()
{
}

void TimedTask_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TimedTask);
	HX_MARK_MEMBER_NAME(toExecute,"toExecute");
	HX_MARK_MEMBER_NAME(interval,"interval");
	HX_MARK_MEMBER_NAME(repeats,"repeats");
	HX_MARK_MEMBER_NAME(actor,"actor");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(done,"done");
	HX_MARK_MEMBER_NAME(actorCreateTime,"actorCreateTime");
	HX_MARK_END_CLASS();
}

void TimedTask_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(toExecute,"toExecute");
	HX_VISIT_MEMBER_NAME(interval,"interval");
	HX_VISIT_MEMBER_NAME(repeats,"repeats");
	HX_VISIT_MEMBER_NAME(actor,"actor");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(done,"done");
	HX_VISIT_MEMBER_NAME(actorCreateTime,"actorCreateTime");
}

hx::Val TimedTask_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"done") ) { return hx::Val( done ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"actor") ) { return hx::Val( actor ); }
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"repeats") ) { return hx::Val( repeats ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"interval") ) { return hx::Val( interval ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"toExecute") ) { return hx::Val( toExecute ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"actorCreateTime") ) { return hx::Val( actorCreateTime ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TimedTask_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"done") ) { done=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"actor") ) { actor=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"repeats") ) { repeats=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"interval") ) { interval=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"toExecute") ) { toExecute=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"actorCreateTime") ) { actorCreateTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TimedTask_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("interval","\x45","\x79","\x7c","\x28"));
	outFields->push(HX_HCSTRING("repeats","\xb8","\xd8","\x87","\xa6"));
	outFields->push(HX_HCSTRING("actor","\xf5","\xca","\xa6","\x1b"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	outFields->push(HX_HCSTRING("done","\x82","\xf0","\x6d","\x42"));
	outFields->push(HX_HCSTRING("actorCreateTime","\x7e","\x80","\xdf","\x92"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TimedTask_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TimedTask_obj,toExecute),HX_HCSTRING("toExecute","\xfa","\x41","\xa1","\xfb")},
	{hx::fsInt,(int)offsetof(TimedTask_obj,interval),HX_HCSTRING("interval","\x45","\x79","\x7c","\x28")},
	{hx::fsBool,(int)offsetof(TimedTask_obj,repeats),HX_HCSTRING("repeats","\xb8","\xd8","\x87","\xa6")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(TimedTask_obj,actor),HX_HCSTRING("actor","\xf5","\xca","\xa6","\x1b")},
	{hx::fsInt,(int)offsetof(TimedTask_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{hx::fsBool,(int)offsetof(TimedTask_obj,done),HX_HCSTRING("done","\x82","\xf0","\x6d","\x42")},
	{hx::fsFloat,(int)offsetof(TimedTask_obj,actorCreateTime),HX_HCSTRING("actorCreateTime","\x7e","\x80","\xdf","\x92")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TimedTask_obj_sStaticStorageInfo = 0;
#endif

static ::String TimedTask_obj_sMemberFields[] = {
	HX_HCSTRING("toExecute","\xfa","\x41","\xa1","\xfb"),
	HX_HCSTRING("interval","\x45","\x79","\x7c","\x28"),
	HX_HCSTRING("repeats","\xb8","\xd8","\x87","\xa6"),
	HX_HCSTRING("actor","\xf5","\xca","\xa6","\x1b"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("done","\x82","\xf0","\x6d","\x42"),
	HX_HCSTRING("actorCreateTime","\x7e","\x80","\xdf","\x92"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void TimedTask_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TimedTask_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TimedTask_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TimedTask_obj::__mClass,"__mClass");
};

#endif

hx::Class TimedTask_obj::__mClass;

void TimedTask_obj::__register()
{
	hx::Object *dummy = new TimedTask_obj;
	TimedTask_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.behavior.TimedTask","\xef","\x37","\x20","\xb7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TimedTask_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TimedTask_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TimedTask_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TimedTask_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TimedTask_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TimedTask_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace behavior
