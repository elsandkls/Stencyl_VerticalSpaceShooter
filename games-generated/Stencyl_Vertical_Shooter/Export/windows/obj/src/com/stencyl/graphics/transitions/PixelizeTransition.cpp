// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_PixelizeTransition
#include <com/stencyl/graphics/transitions/PixelizeTransition.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat
#include <com/stencyl/utils/motion/TweenFloat.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e9fe34c08872293a_35_new,"com.stencyl.graphics.transitions.PixelizeTransition","new",0xf81d2b19,"com.stencyl.graphics.transitions.PixelizeTransition.new","com/stencyl/graphics/transitions/PixelizeTransition.hx",35,0xeed56937)
HX_LOCAL_STACK_FRAME(_hx_pos_e9fe34c08872293a_43_start,"com.stencyl.graphics.transitions.PixelizeTransition","start",0x04ebaf5b,"com.stencyl.graphics.transitions.PixelizeTransition.start","com/stencyl/graphics/transitions/PixelizeTransition.hx",43,0xeed56937)
HX_LOCAL_STACK_FRAME(_hx_pos_e9fe34c08872293a_57_draw,"com.stencyl.graphics.transitions.PixelizeTransition","draw",0x1ad6332b,"com.stencyl.graphics.transitions.PixelizeTransition.draw","com/stencyl/graphics/transitions/PixelizeTransition.hx",57,0xeed56937)
HX_LOCAL_STACK_FRAME(_hx_pos_e9fe34c08872293a_112_cleanup,"com.stencyl.graphics.transitions.PixelizeTransition","cleanup",0x50e1b75d,"com.stencyl.graphics.transitions.PixelizeTransition.cleanup","com/stencyl/graphics/transitions/PixelizeTransition.hx",112,0xeed56937)
namespace com{
namespace stencyl{
namespace graphics{
namespace transitions{

void PixelizeTransition_obj::__construct(Float duration,int beginPixelSize,int endPixelSize){
            	HX_STACKFRAME(&_hx_pos_e9fe34c08872293a_35_new)
HXLINE(  36)		super::__construct(duration);
HXLINE(  38)		this->beginPixelSize = beginPixelSize;
HXLINE(  39)		this->endPixelSize = endPixelSize;
            	}

Dynamic PixelizeTransition_obj::__CreateEmpty() { return new PixelizeTransition_obj; }

void *PixelizeTransition_obj::_hx_vtable = 0;

Dynamic PixelizeTransition_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PixelizeTransition_obj > _hx_result = new PixelizeTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool PixelizeTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x10817dc5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x10817dc5;
	} else {
		return inClassId==(int)0x718657f3;
	}
}

void PixelizeTransition_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_e9fe34c08872293a_43_start)
HXLINE(  44)		this->active = true;
HXLINE(  46)		int _hx_tmp = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(  46)		this->srcImg =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)),null(),null());
HXLINE(  47)		int _hx_tmp1 = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(  47)		this->displayImg =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp1,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)),null(),null());
HXLINE(  48)		this->pixelRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE(  50)		 ::openfl::display::Sprite _hx_tmp2 = ::com::stencyl::Engine_obj::engine->transitionLayer;
HXDLIN(  50)		_hx_tmp2->addChild((this->displayBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,this->displayImg,null(),null())));
HXLINE(  52)		this->pixelSizeTween =  ::com::stencyl::utils::motion::TweenFloat_obj::__alloc( HX_CTX );
HXLINE(  53)		 ::com::stencyl::utils::motion::TweenFloat _hx_tmp3 = this->pixelSizeTween;
HXDLIN(  53)		int _hx_tmp4 = this->beginPixelSize;
HXDLIN(  53)		int _hx_tmp5 = this->endPixelSize;
HXDLIN(  53)		 ::com::stencyl::utils::motion::Linear _hx_tmp6 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN(  53)		_hx_tmp3->tween(_hx_tmp4,_hx_tmp5,_hx_tmp6,::Std_obj::_hx_int((this->duration * (int)1000)))->doOnComplete(this->stop_dyn());
            	}


void PixelizeTransition_obj::draw( ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_e9fe34c08872293a_57_draw)
HXLINE(  58)		int pixelSize = ::Std_obj::_hx_int(this->pixelSizeTween->value);
HXLINE(  60)		if ((pixelSize == (int)1)) {
HXLINE(  62)			this->displayImg->draw(::com::stencyl::Engine_obj::engine->colorLayer,null(),null(),null(),null(),null());
HXLINE(  63)			this->displayImg->draw(::com::stencyl::Engine_obj::engine->master,null(),null(),null(),null(),null());
HXLINE(  65)			return;
            		}
HXLINE(  68)		this->srcImg->draw(::com::stencyl::Engine_obj::engine->colorLayer,null(),null(),null(),null(),null());
HXLINE(  69)		this->srcImg->draw(::com::stencyl::Engine_obj::engine->master,null(),null(),null(),null(),null());
HXLINE(  71)		this->c = ::Math_obj::ceil(((Float)(::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE) / (Float)pixelSize));
HXLINE(  72)		this->r = ::Math_obj::ceil(((Float)(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE) / (Float)pixelSize));
HXLINE(  74)		int _hx_tmp = (this->c * pixelSize);
HXDLIN(  74)		this->xOverflow = ::Std_obj::_hx_int((_hx_tmp - (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE)));
HXLINE(  75)		int _hx_tmp1 = (this->r * pixelSize);
HXDLIN(  75)		this->yOverflow = ::Std_obj::_hx_int((_hx_tmp1 - (::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)));
HXLINE(  77)		this->pixelRect->x = ((Float)-(this->xOverflow) / (Float)(int)2);
HXLINE(  78)		this->pixelRect->y = ((Float)-(this->yOverflow) / (Float)(int)2);
HXLINE(  79)		this->pixelRect->height = (this->pixelRect->width = pixelSize);
HXLINE(  81)		this->halfSize = ::Std_obj::_hx_int(((Float)pixelSize / (Float)(int)2));
HXLINE(  83)		int color = (int)0;
HXLINE(  85)		this->displayImg->lock();
HXLINE(  87)		{
HXLINE(  87)			int _g1 = (int)0;
HXDLIN(  87)			int _g = this->r;
HXDLIN(  87)			while((_g1 < _g)){
HXLINE(  87)				_g1 = (_g1 + (int)1);
HXDLIN(  87)				int i = (_g1 - (int)1);
HXLINE(  89)				{
HXLINE(  89)					int _g3 = (int)0;
HXDLIN(  89)					int _g2 = this->c;
HXDLIN(  89)					while((_g3 < _g2)){
HXLINE(  89)						_g3 = (_g3 + (int)1);
HXDLIN(  89)						int j = (_g3 - (int)1);
HXLINE(  91)						 ::openfl::display::BitmapData color1 = this->srcImg;
HXDLIN(  91)						int color2 = ::Std_obj::_hx_int((this->pixelRect->x + this->halfSize));
HXDLIN(  91)						color = color1->getPixel32(color2,::Std_obj::_hx_int((this->pixelRect->y + this->halfSize)));
HXLINE(  92)						{
HXLINE(  92)							int _g5 = ::Std_obj::_hx_int(this->pixelRect->x);
HXDLIN(  92)							int _g4 = ::Std_obj::_hx_int((this->pixelRect->x + this->pixelRect->width));
HXDLIN(  92)							while((_g5 < _g4)){
HXLINE(  92)								_g5 = (_g5 + (int)1);
HXDLIN(  92)								int k = (_g5 - (int)1);
HXLINE(  94)								{
HXLINE(  94)									int _g7 = ::Std_obj::_hx_int(this->pixelRect->y);
HXDLIN(  94)									int _g6 = ::Std_obj::_hx_int((this->pixelRect->y + this->pixelRect->height));
HXDLIN(  94)									while((_g7 < _g6)){
HXLINE(  94)										_g7 = (_g7 + (int)1);
HXDLIN(  94)										int l = (_g7 - (int)1);
HXLINE(  96)										this->displayImg->setPixel32(k,l,color);
            									}
            								}
            							}
            						}
HXLINE( 100)						 ::openfl::geom::Rectangle _hx_tmp2 = this->pixelRect;
HXDLIN( 100)						_hx_tmp2->x = (_hx_tmp2->x + pixelSize);
            					}
            				}
HXLINE( 103)				this->pixelRect->x = ((Float)-(this->xOverflow) / (Float)(int)2);
HXLINE( 104)				 ::openfl::geom::Rectangle _hx_tmp3 = this->pixelRect;
HXDLIN( 104)				_hx_tmp3->y = (_hx_tmp3->y + pixelSize);
            			}
            		}
HXLINE( 107)		this->displayImg->unlock(null());
            	}


void PixelizeTransition_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_e9fe34c08872293a_112_cleanup)
HXDLIN( 112)		if (hx::IsNotNull( this->displayBitmap )) {
HXLINE( 114)			::com::stencyl::Engine_obj::engine->transitionLayer->removeChild(this->displayBitmap);
            		}
            	}



hx::ObjectPtr< PixelizeTransition_obj > PixelizeTransition_obj::__new(Float duration,int beginPixelSize,int endPixelSize) {
	hx::ObjectPtr< PixelizeTransition_obj > __this = new PixelizeTransition_obj();
	__this->__construct(duration,beginPixelSize,endPixelSize);
	return __this;
}

hx::ObjectPtr< PixelizeTransition_obj > PixelizeTransition_obj::__alloc(hx::Ctx *_hx_ctx,Float duration,int beginPixelSize,int endPixelSize) {
	PixelizeTransition_obj *__this = (PixelizeTransition_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PixelizeTransition_obj), true, "com.stencyl.graphics.transitions.PixelizeTransition"));
	*(void **)__this = PixelizeTransition_obj::_hx_vtable;
	__this->__construct(duration,beginPixelSize,endPixelSize);
	return __this;
}

PixelizeTransition_obj::PixelizeTransition_obj()
{
}

void PixelizeTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PixelizeTransition);
	HX_MARK_MEMBER_NAME(pixelSizeTween,"pixelSizeTween");
	HX_MARK_MEMBER_NAME(beginPixelSize,"beginPixelSize");
	HX_MARK_MEMBER_NAME(endPixelSize,"endPixelSize");
	HX_MARK_MEMBER_NAME(srcImg,"srcImg");
	HX_MARK_MEMBER_NAME(displayImg,"displayImg");
	HX_MARK_MEMBER_NAME(displayBitmap,"displayBitmap");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(xOverflow,"xOverflow");
	HX_MARK_MEMBER_NAME(yOverflow,"yOverflow");
	HX_MARK_MEMBER_NAME(pixelRect,"pixelRect");
	HX_MARK_MEMBER_NAME(halfSize,"halfSize");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PixelizeTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pixelSizeTween,"pixelSizeTween");
	HX_VISIT_MEMBER_NAME(beginPixelSize,"beginPixelSize");
	HX_VISIT_MEMBER_NAME(endPixelSize,"endPixelSize");
	HX_VISIT_MEMBER_NAME(srcImg,"srcImg");
	HX_VISIT_MEMBER_NAME(displayImg,"displayImg");
	HX_VISIT_MEMBER_NAME(displayBitmap,"displayBitmap");
	HX_VISIT_MEMBER_NAME(c,"c");
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(xOverflow,"xOverflow");
	HX_VISIT_MEMBER_NAME(yOverflow,"yOverflow");
	HX_VISIT_MEMBER_NAME(pixelRect,"pixelRect");
	HX_VISIT_MEMBER_NAME(halfSize,"halfSize");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PixelizeTransition_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { return hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"srcImg") ) { return hx::Val( srcImg ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"halfSize") ) { return hx::Val( halfSize ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"xOverflow") ) { return hx::Val( xOverflow ); }
		if (HX_FIELD_EQ(inName,"yOverflow") ) { return hx::Val( yOverflow ); }
		if (HX_FIELD_EQ(inName,"pixelRect") ) { return hx::Val( pixelRect ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"displayImg") ) { return hx::Val( displayImg ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endPixelSize") ) { return hx::Val( endPixelSize ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"displayBitmap") ) { return hx::Val( displayBitmap ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pixelSizeTween") ) { return hx::Val( pixelSizeTween ); }
		if (HX_FIELD_EQ(inName,"beginPixelSize") ) { return hx::Val( beginPixelSize ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PixelizeTransition_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"srcImg") ) { srcImg=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"halfSize") ) { halfSize=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"xOverflow") ) { xOverflow=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yOverflow") ) { yOverflow=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixelRect") ) { pixelRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"displayImg") ) { displayImg=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endPixelSize") ) { endPixelSize=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"displayBitmap") ) { displayBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pixelSizeTween") ) { pixelSizeTween=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beginPixelSize") ) { beginPixelSize=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PixelizeTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pixelSizeTween","\x84","\x36","\x88","\x4a"));
	outFields->push(HX_HCSTRING("beginPixelSize","\xfe","\x36","\x3a","\xa2"));
	outFields->push(HX_HCSTRING("endPixelSize","\x0c","\x57","\xdf","\x14"));
	outFields->push(HX_HCSTRING("srcImg","\x7f","\x83","\x60","\xe0"));
	outFields->push(HX_HCSTRING("displayImg","\xe1","\xee","\xc3","\xdd"));
	outFields->push(HX_HCSTRING("displayBitmap","\xd1","\xcb","\x6e","\xb2"));
	outFields->push(HX_HCSTRING("c","\x63","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("r","\x72","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("xOverflow","\xda","\xd7","\x16","\xfc"));
	outFields->push(HX_HCSTRING("yOverflow","\xdb","\x40","\x08","\xcf"));
	outFields->push(HX_HCSTRING("pixelRect","\xca","\xfa","\x30","\x05"));
	outFields->push(HX_HCSTRING("halfSize","\x14","\x4c","\xb7","\x1e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PixelizeTransition_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat*/ ,(int)offsetof(PixelizeTransition_obj,pixelSizeTween),HX_HCSTRING("pixelSizeTween","\x84","\x36","\x88","\x4a")},
	{hx::fsInt,(int)offsetof(PixelizeTransition_obj,beginPixelSize),HX_HCSTRING("beginPixelSize","\xfe","\x36","\x3a","\xa2")},
	{hx::fsInt,(int)offsetof(PixelizeTransition_obj,endPixelSize),HX_HCSTRING("endPixelSize","\x0c","\x57","\xdf","\x14")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(PixelizeTransition_obj,srcImg),HX_HCSTRING("srcImg","\x7f","\x83","\x60","\xe0")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(PixelizeTransition_obj,displayImg),HX_HCSTRING("displayImg","\xe1","\xee","\xc3","\xdd")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(PixelizeTransition_obj,displayBitmap),HX_HCSTRING("displayBitmap","\xd1","\xcb","\x6e","\xb2")},
	{hx::fsInt,(int)offsetof(PixelizeTransition_obj,c),HX_HCSTRING("c","\x63","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(PixelizeTransition_obj,r),HX_HCSTRING("r","\x72","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(PixelizeTransition_obj,xOverflow),HX_HCSTRING("xOverflow","\xda","\xd7","\x16","\xfc")},
	{hx::fsInt,(int)offsetof(PixelizeTransition_obj,yOverflow),HX_HCSTRING("yOverflow","\xdb","\x40","\x08","\xcf")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(PixelizeTransition_obj,pixelRect),HX_HCSTRING("pixelRect","\xca","\xfa","\x30","\x05")},
	{hx::fsInt,(int)offsetof(PixelizeTransition_obj,halfSize),HX_HCSTRING("halfSize","\x14","\x4c","\xb7","\x1e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PixelizeTransition_obj_sStaticStorageInfo = 0;
#endif

static ::String PixelizeTransition_obj_sMemberFields[] = {
	HX_HCSTRING("pixelSizeTween","\x84","\x36","\x88","\x4a"),
	HX_HCSTRING("beginPixelSize","\xfe","\x36","\x3a","\xa2"),
	HX_HCSTRING("endPixelSize","\x0c","\x57","\xdf","\x14"),
	HX_HCSTRING("srcImg","\x7f","\x83","\x60","\xe0"),
	HX_HCSTRING("displayImg","\xe1","\xee","\xc3","\xdd"),
	HX_HCSTRING("displayBitmap","\xd1","\xcb","\x6e","\xb2"),
	HX_HCSTRING("c","\x63","\x00","\x00","\x00"),
	HX_HCSTRING("r","\x72","\x00","\x00","\x00"),
	HX_HCSTRING("xOverflow","\xda","\xd7","\x16","\xfc"),
	HX_HCSTRING("yOverflow","\xdb","\x40","\x08","\xcf"),
	HX_HCSTRING("pixelRect","\xca","\xfa","\x30","\x05"),
	HX_HCSTRING("halfSize","\x14","\x4c","\xb7","\x1e"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	::String(null()) };

static void PixelizeTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PixelizeTransition_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PixelizeTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PixelizeTransition_obj::__mClass,"__mClass");
};

#endif

hx::Class PixelizeTransition_obj::__mClass;

void PixelizeTransition_obj::__register()
{
	hx::Object *dummy = new PixelizeTransition_obj;
	PixelizeTransition_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.transitions.PixelizeTransition","\xa7","\xaa","\x59","\xf2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PixelizeTransition_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PixelizeTransition_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PixelizeTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PixelizeTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PixelizeTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PixelizeTransition_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace transitions
