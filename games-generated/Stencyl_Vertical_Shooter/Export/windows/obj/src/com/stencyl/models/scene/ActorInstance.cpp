// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_Data
#include <com/stencyl/Data.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_ActorType
#include <com/stencyl/models/actor/ActorType.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_ActorInstance
#include <com/stencyl/models/scene/ActorInstance.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_LazyIntMap
#include <com/stencyl/utils/LazyIntMap.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_674fa304e3f9f4e5_39_new,"com.stencyl.models.scene.ActorInstance","new",0xc61fa8e5,"com.stencyl.models.scene.ActorInstance.new","com/stencyl/models/scene/ActorInstance.hx",39,0xf589ceab)
namespace com{
namespace stencyl{
namespace models{
namespace scene{

void ActorInstance_obj::__construct(int elementID,int x,int y,Float scaleX,Float scaleY,int layerID,int orderInLayer,int angle,int groupID,int actorID, ::haxe::ds::StringMap behaviors,bool isCustomized){
            	HX_STACKFRAME(&_hx_pos_674fa304e3f9f4e5_39_new)
HXLINE(  40)		this->elementID = elementID;
HXLINE(  41)		this->x = x;
HXLINE(  42)		this->y = y;
HXLINE(  43)		this->scaleX = scaleX;
HXLINE(  44)		this->scaleY = scaleY;
HXLINE(  45)		this->layerID = layerID;
HXLINE(  46)		this->orderInLayer = orderInLayer;
HXLINE(  47)		this->angle = angle;
HXLINE(  48)		this->groupID = groupID;
HXLINE(  50)		this->actorID = actorID;
HXLINE(  51)		this->behaviorValues = behaviors;
HXLINE(  52)		this->isCustomized = isCustomized;
HXLINE(  54)		this->actorType = hx::TCast<  ::com::stencyl::models::actor::ActorType >::cast(::com::stencyl::Data_obj::get()->resources->get(actorID).StaticCast<  ::com::stencyl::models::Resource >());
            	}

Dynamic ActorInstance_obj::__CreateEmpty() { return new ActorInstance_obj; }

void *ActorInstance_obj::_hx_vtable = 0;

Dynamic ActorInstance_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ActorInstance_obj > _hx_result = new ActorInstance_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11]);
	return _hx_result;
}

bool ActorInstance_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x42a6497b;
}


hx::ObjectPtr< ActorInstance_obj > ActorInstance_obj::__new(int elementID,int x,int y,Float scaleX,Float scaleY,int layerID,int orderInLayer,int angle,int groupID,int actorID, ::haxe::ds::StringMap behaviors,bool isCustomized) {
	hx::ObjectPtr< ActorInstance_obj > __this = new ActorInstance_obj();
	__this->__construct(elementID,x,y,scaleX,scaleY,layerID,orderInLayer,angle,groupID,actorID,behaviors,isCustomized);
	return __this;
}

hx::ObjectPtr< ActorInstance_obj > ActorInstance_obj::__alloc(hx::Ctx *_hx_ctx,int elementID,int x,int y,Float scaleX,Float scaleY,int layerID,int orderInLayer,int angle,int groupID,int actorID, ::haxe::ds::StringMap behaviors,bool isCustomized) {
	ActorInstance_obj *__this = (ActorInstance_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ActorInstance_obj), true, "com.stencyl.models.scene.ActorInstance"));
	*(void **)__this = ActorInstance_obj::_hx_vtable;
	__this->__construct(elementID,x,y,scaleX,scaleY,layerID,orderInLayer,angle,groupID,actorID,behaviors,isCustomized);
	return __this;
}

ActorInstance_obj::ActorInstance_obj()
{
}

void ActorInstance_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ActorInstance);
	HX_MARK_MEMBER_NAME(elementID,"elementID");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(scaleX,"scaleX");
	HX_MARK_MEMBER_NAME(scaleY,"scaleY");
	HX_MARK_MEMBER_NAME(layerID,"layerID");
	HX_MARK_MEMBER_NAME(orderInLayer,"orderInLayer");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(groupID,"groupID");
	HX_MARK_MEMBER_NAME(actorID,"actorID");
	HX_MARK_MEMBER_NAME(isCustomized,"isCustomized");
	HX_MARK_MEMBER_NAME(behaviorValues,"behaviorValues");
	HX_MARK_MEMBER_NAME(actorType,"actorType");
	HX_MARK_END_CLASS();
}

void ActorInstance_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(elementID,"elementID");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(scaleX,"scaleX");
	HX_VISIT_MEMBER_NAME(scaleY,"scaleY");
	HX_VISIT_MEMBER_NAME(layerID,"layerID");
	HX_VISIT_MEMBER_NAME(orderInLayer,"orderInLayer");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(groupID,"groupID");
	HX_VISIT_MEMBER_NAME(actorID,"actorID");
	HX_VISIT_MEMBER_NAME(isCustomized,"isCustomized");
	HX_VISIT_MEMBER_NAME(behaviorValues,"behaviorValues");
	HX_VISIT_MEMBER_NAME(actorType,"actorType");
}

hx::Val ActorInstance_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { return hx::Val( scaleX ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { return hx::Val( scaleY ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"layerID") ) { return hx::Val( layerID ); }
		if (HX_FIELD_EQ(inName,"groupID") ) { return hx::Val( groupID ); }
		if (HX_FIELD_EQ(inName,"actorID") ) { return hx::Val( actorID ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"elementID") ) { return hx::Val( elementID ); }
		if (HX_FIELD_EQ(inName,"actorType") ) { return hx::Val( actorType ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"orderInLayer") ) { return hx::Val( orderInLayer ); }
		if (HX_FIELD_EQ(inName,"isCustomized") ) { return hx::Val( isCustomized ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"behaviorValues") ) { return hx::Val( behaviorValues ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ActorInstance_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleY") ) { scaleY=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"layerID") ) { layerID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groupID") ) { groupID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"actorID") ) { actorID=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"elementID") ) { elementID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"actorType") ) { actorType=inValue.Cast<  ::com::stencyl::models::actor::ActorType >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"orderInLayer") ) { orderInLayer=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isCustomized") ) { isCustomized=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"behaviorValues") ) { behaviorValues=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ActorInstance_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("elementID","\x97","\x15","\xeb","\xc7"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("layerID","\xec","\x97","\x41","\x42"));
	outFields->push(HX_HCSTRING("orderInLayer","\xbe","\xdc","\xa6","\x8d"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"));
	outFields->push(HX_HCSTRING("actorID","\x10","\x72","\x27","\x6b"));
	outFields->push(HX_HCSTRING("isCustomized","\x4b","\x2f","\xb2","\x8a"));
	outFields->push(HX_HCSTRING("behaviorValues","\x14","\xc2","\x67","\x92"));
	outFields->push(HX_HCSTRING("actorType","\x4f","\x08","\xe2","\x20"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ActorInstance_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ActorInstance_obj,elementID),HX_HCSTRING("elementID","\x97","\x15","\xeb","\xc7")},
	{hx::fsInt,(int)offsetof(ActorInstance_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ActorInstance_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ActorInstance_obj,scaleX),HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c")},
	{hx::fsFloat,(int)offsetof(ActorInstance_obj,scaleY),HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c")},
	{hx::fsInt,(int)offsetof(ActorInstance_obj,layerID),HX_HCSTRING("layerID","\xec","\x97","\x41","\x42")},
	{hx::fsInt,(int)offsetof(ActorInstance_obj,orderInLayer),HX_HCSTRING("orderInLayer","\xbe","\xdc","\xa6","\x8d")},
	{hx::fsInt,(int)offsetof(ActorInstance_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsInt,(int)offsetof(ActorInstance_obj,groupID),HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86")},
	{hx::fsInt,(int)offsetof(ActorInstance_obj,actorID),HX_HCSTRING("actorID","\x10","\x72","\x27","\x6b")},
	{hx::fsBool,(int)offsetof(ActorInstance_obj,isCustomized),HX_HCSTRING("isCustomized","\x4b","\x2f","\xb2","\x8a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(ActorInstance_obj,behaviorValues),HX_HCSTRING("behaviorValues","\x14","\xc2","\x67","\x92")},
	{hx::fsObject /*::com::stencyl::models::actor::ActorType*/ ,(int)offsetof(ActorInstance_obj,actorType),HX_HCSTRING("actorType","\x4f","\x08","\xe2","\x20")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ActorInstance_obj_sStaticStorageInfo = 0;
#endif

static ::String ActorInstance_obj_sMemberFields[] = {
	HX_HCSTRING("elementID","\x97","\x15","\xeb","\xc7"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"),
	HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"),
	HX_HCSTRING("layerID","\xec","\x97","\x41","\x42"),
	HX_HCSTRING("orderInLayer","\xbe","\xdc","\xa6","\x8d"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"),
	HX_HCSTRING("actorID","\x10","\x72","\x27","\x6b"),
	HX_HCSTRING("isCustomized","\x4b","\x2f","\xb2","\x8a"),
	HX_HCSTRING("behaviorValues","\x14","\xc2","\x67","\x92"),
	HX_HCSTRING("actorType","\x4f","\x08","\xe2","\x20"),
	::String(null()) };

static void ActorInstance_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ActorInstance_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ActorInstance_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ActorInstance_obj::__mClass,"__mClass");
};

#endif

hx::Class ActorInstance_obj::__mClass;

void ActorInstance_obj::__register()
{
	hx::Object *dummy = new ActorInstance_obj;
	ActorInstance_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.scene.ActorInstance","\x73","\x52","\xbe","\xdd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ActorInstance_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ActorInstance_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ActorInstance_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ActorInstance_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ActorInstance_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ActorInstance_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace scene
