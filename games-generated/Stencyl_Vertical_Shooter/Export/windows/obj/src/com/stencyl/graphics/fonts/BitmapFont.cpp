// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_fonts_BitmapFont
#include <com/stencyl/graphics/fonts/BitmapFont.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_fonts_FontSymbol
#include <com/stencyl/graphics/fonts/FontSymbol.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_42830e3915985f5e_23_new,"com.stencyl.graphics.fonts.BitmapFont","new",0x9330d36e,"com.stencyl.graphics.fonts.BitmapFont.new","com/stencyl/graphics/fonts/BitmapFont.hx",23,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_75_loadPixelizer,"com.stencyl.graphics.fonts.BitmapFont","loadPixelizer",0xe76345ac,"com.stencyl.graphics.fonts.BitmapFont.loadPixelizer","com/stencyl/graphics/fonts/BitmapFont.hx",75,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_116_loadAngelCode,"com.stencyl.graphics.fonts.BitmapFont","loadAngelCode",0xcd270116,"com.stencyl.graphics.fonts.BitmapFont.loadAngelCode","com/stencyl/graphics/fonts/BitmapFont.hx",116,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_220_reset,"com.stencyl.graphics.fonts.BitmapFont","reset",0xad36ac5d,"com.stencyl.graphics.fonts.BitmapFont.reset","com/stencyl/graphics/fonts/BitmapFont.hx",220,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_232_prepareBitmapData,"com.stencyl.graphics.fonts.BitmapFont","prepareBitmapData",0xbcd819ae,"com.stencyl.graphics.fonts.BitmapFont.prepareBitmapData","com/stencyl/graphics/fonts/BitmapFont.hx",232,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_351_dispose,"com.stencyl.graphics.fonts.BitmapFont","dispose",0xc40322ad,"com.stencyl.graphics.fonts.BitmapFont.dispose","com/stencyl/graphics/fonts/BitmapFont.hx",351,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_413_setGlyph,"com.stencyl.graphics.fonts.BitmapFont","setGlyph",0x3b5090dc,"com.stencyl.graphics.fonts.BitmapFont.setGlyph","com/stencyl/graphics/fonts/BitmapFont.hx",413,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_449_render,"com.stencyl.graphics.fonts.BitmapFont","render",0xdf514508,"com.stencyl.graphics.fonts.BitmapFont.render","com/stencyl/graphics/fonts/BitmapFont.hx",449,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_539_renderToImg,"com.stencyl.graphics.fonts.BitmapFont","renderToImg",0x750eab20,"com.stencyl.graphics.fonts.BitmapFont.renderToImg","com/stencyl/graphics/fonts/BitmapFont.hx",539,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_562_toARGB,"com.stencyl.graphics.fonts.BitmapFont","toARGB",0x503d6df9,"com.stencyl.graphics.fonts.BitmapFont.toARGB","com/stencyl/graphics/fonts/BitmapFont.hx",562,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_578_getTextWidth,"com.stencyl.graphics.fonts.BitmapFont","getTextWidth",0x7fa40dd5,"com.stencyl.graphics.fonts.BitmapFont.getTextWidth","com/stencyl/graphics/fonts/BitmapFont.hx",578,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_635_getFontHeight,"com.stencyl.graphics.fonts.BitmapFont","getFontHeight",0x639a9bda,"com.stencyl.graphics.fonts.BitmapFont.getFontHeight","com/stencyl/graphics/fonts/BitmapFont.hx",635,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_649_get_numLetters,"com.stencyl.graphics.fonts.BitmapFont","get_numLetters",0xd1a83f22,"com.stencyl.graphics.fonts.BitmapFont.get_numLetters","com/stencyl/graphics/fonts/BitmapFont.hx",649,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_676_containsCharacter,"com.stencyl.graphics.fonts.BitmapFont","containsCharacter",0x5b31a518,"com.stencyl.graphics.fonts.BitmapFont.containsCharacter","com/stencyl/graphics/fonts/BitmapFont.hx",676,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_682_getTileset,"com.stencyl.graphics.fonts.BitmapFont","getTileset",0x7fd0a1f0,"com.stencyl.graphics.fonts.BitmapFont.getTileset","com/stencyl/graphics/fonts/BitmapFont.hx",682,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_660_store,"com.stencyl.graphics.fonts.BitmapFont","store",0x4a84766f,"com.stencyl.graphics.fonts.BitmapFont.store","com/stencyl/graphics/fonts/BitmapFont.hx",660,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_669_fetch,"com.stencyl.graphics.fonts.BitmapFont","fetch",0xc46876c8,"com.stencyl.graphics.fonts.BitmapFont.fetch","com/stencyl/graphics/fonts/BitmapFont.hx",669,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_25_boot,"com.stencyl.graphics.fonts.BitmapFont","boot",0x2fa12d64,"com.stencyl.graphics.fonts.BitmapFont.boot","com/stencyl/graphics/fonts/BitmapFont.hx",25,0x941673c2)
HX_LOCAL_STACK_FRAME(_hx_pos_42830e3915985f5e_27_boot,"com.stencyl.graphics.fonts.BitmapFont","boot",0x2fa12d64,"com.stencyl.graphics.fonts.BitmapFont.boot","com/stencyl/graphics/fonts/BitmapFont.hx",27,0x941673c2)
namespace com{
namespace stencyl{
namespace graphics{
namespace fonts{

void BitmapFont_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_23_new)
HXLINE(  47)		this->lineSpacing = (int)0;
HXLINE(  46)		this->isDefault = false;
HXLINE(  56)		this->_maxHeight = (int)0;
HXLINE(  57)		this->_point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  63)		this->_glyphs =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  64)		this->_num_letters = (int)0;
            	}

Dynamic BitmapFont_obj::__CreateEmpty() { return new BitmapFont_obj; }

void *BitmapFont_obj::_hx_vtable = 0;

Dynamic BitmapFont_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapFont_obj > _hx_result = new BitmapFont_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BitmapFont_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x47b1b4ec;
}

 ::com::stencyl::graphics::fonts::BitmapFont BitmapFont_obj::loadPixelizer( ::openfl::display::BitmapData pBitmapData,::String pLetters){
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_75_loadPixelizer)
HXLINE(  76)		this->reset();
HXLINE(  77)		this->_glyphString = pLetters;
HXLINE(  79)		if (hx::IsNotNull( pBitmapData )) {
HXLINE(  81)			::Array< ::Dynamic> tileRects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  82)			 ::openfl::display::BitmapData result = this->prepareBitmapData(pBitmapData,tileRects);
HXLINE(  83)			 ::openfl::geom::Rectangle currRect;
HXLINE(  86)			this->_tileset =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,result,null());
HXLINE(  89)			{
HXLINE(  89)				int _g1 = (int)0;
HXDLIN(  89)				int _g = tileRects->length;
HXDLIN(  89)				while((_g1 < _g)){
HXLINE(  89)					_g1 = (_g1 + (int)1);
HXDLIN(  89)					int letterID = (_g1 - (int)1);
HXLINE(  91)					currRect = tileRects->__get(letterID).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 101)					 ::Dynamic _hx_tmp = this->_glyphString.charCodeAt(letterID);
HXDLIN( 101)					this->setGlyph(_hx_tmp,currRect,letterID,(int)0,(int)0,::Math_obj::floor(currRect->width));
            				}
            			}
            		}
HXLINE( 106)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,loadPixelizer,return )

 ::com::stencyl::graphics::fonts::BitmapFont BitmapFont_obj::loadAngelCode( ::openfl::display::BitmapData pBitmapData, ::Xml pXMLData){
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_116_loadAngelCode)
HXLINE( 117)		this->reset();
HXLINE( 119)		if (hx::IsNotNull( pBitmapData )) {
HXLINE( 121)			this->_glyphString = HX_("",00,00,00,00);
HXLINE( 122)			 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 123)			 ::openfl::geom::Point point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 124)			 ::openfl::display::BitmapData bd;
HXLINE( 125)			int letterID = (int)0;
HXLINE( 126)			int charCode;
HXLINE( 127)			::String charString;
HXLINE( 130)			this->_tileset =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,pBitmapData,null());
HXLINE( 133)			 ::Xml chars = null();
HXLINE( 134)			{
HXLINE( 134)				 ::Dynamic node = pXMLData->elements();
HXDLIN( 134)				while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 134)					 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 136)					if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE( 136)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node1->nodeType));
            					}
HXDLIN( 136)					if ((node1->nodeName == HX_("font",cf,5d,c0,43))) {
HXLINE( 138)						 ::Dynamic nodeChild = node1->elements();
HXDLIN( 138)						while(( (bool)(nodeChild->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 138)							 ::Xml nodeChild1 = ( ( ::Xml)(nodeChild->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 140)							if ((nodeChild1->nodeType != ::Xml_obj::Element)) {
HXLINE( 140)								HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + nodeChild1->nodeType));
            							}
HXDLIN( 140)							if ((nodeChild1->nodeName == HX_("common",2b,75,2e,c7))) {
HXLINE( 142)								this->lineSpacing = ::Std_obj::parseInt(nodeChild1->get(HX_("lineHeight",fb,02,f4,d6)));
            							}
            							else {
HXLINE( 144)								if ((nodeChild1->nodeType != ::Xml_obj::Element)) {
HXLINE( 144)									HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + nodeChild1->nodeType));
            								}
HXDLIN( 144)								if ((nodeChild1->nodeName == HX_("chars",dd,9c,b3,45))) {
HXLINE( 146)									chars = nodeChild1;
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 152)			if (hx::IsNotNull( chars )) {
HXLINE( 154)				 ::Dynamic node2 = chars->elements();
HXDLIN( 154)				while(( (bool)(node2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 154)					 ::Xml node3 = ( ( ::Xml)(node2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 156)					if ((node3->nodeType != ::Xml_obj::Element)) {
HXLINE( 156)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node3->nodeType));
            					}
HXDLIN( 156)					if ((node3->nodeName == HX_("char",d6,5e,bf,41))) {
HXLINE( 158)						rect->x = ::Std_obj::parseInt(node3->get(HX_("x",78,00,00,00)));
HXLINE( 159)						rect->y = ::Std_obj::parseInt(node3->get(HX_("y",79,00,00,00)));
HXLINE( 160)						rect->width = ::Std_obj::parseInt(node3->get(HX_("width",06,b6,62,ca)));
HXLINE( 161)						rect->height = ::Std_obj::parseInt(node3->get(HX_("height",e7,07,4c,02)));
HXLINE( 163)						point->x = ::Std_obj::parseInt(node3->get(HX_("xoffset",0b,42,4f,de)));
HXLINE( 164)						point->y = ::Std_obj::parseInt(node3->get(HX_("yoffset",cc,b8,e4,07)));
HXLINE( 166)						charCode = ::Std_obj::parseInt(node3->get(HX_("id",db,5b,00,00)));
HXLINE( 167)						charString = ::String::fromCharCode(charCode);
HXLINE( 168)						 ::com::stencyl::graphics::fonts::BitmapFont _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 168)						_hx_tmp->_glyphString = (_hx_tmp->_glyphString + charString);
HXLINE( 170)						int xadvance = ::Std_obj::parseInt(node3->get(HX_("xadvance",0a,87,b1,be)));
HXLINE( 173)						int charWidth = xadvance;
HXLINE( 175)						if ((rect->width > xadvance)) {
HXLINE( 177)							charWidth = ::Std_obj::_hx_int(rect->width);
HXLINE( 178)							point->x = (int)0;
            						}
HXLINE( 197)						bool _hx_tmp1;
HXDLIN( 197)						if ((charString != HX_(" ",20,00,00,00))) {
HXLINE( 197)							_hx_tmp1 = (charString != HX_("",00,00,00,00));
            						}
            						else {
HXLINE( 197)							_hx_tmp1 = false;
            						}
HXDLIN( 197)						if (_hx_tmp1) {
HXLINE( 199)							int _hx_tmp2 = ::Math_obj::floor(point->x);
HXDLIN( 199)							this->setGlyph(charCode,rect,letterID,_hx_tmp2,::Math_obj::floor(point->y),charWidth);
            						}
            						else {
HXLINE( 203)							this->setGlyph(charCode,rect,letterID,::Math_obj::floor(point->x),(int)1,charWidth);
            						}
HXLINE( 207)						letterID = (letterID + (int)1);
            					}
            				}
            			}
            		}
HXLINE( 213)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,loadAngelCode,return )

void BitmapFont_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_220_reset)
HXLINE( 221)		this->dispose();
HXLINE( 222)		this->_maxHeight = (int)0;
HXLINE( 226)		this->_glyphs =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 228)		this->_glyphString = HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,reset,(void))

 ::openfl::display::BitmapData BitmapFont_obj::prepareBitmapData( ::openfl::display::BitmapData pBitmapData,::Array< ::Dynamic> pRects){
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_232_prepareBitmapData)
HXLINE( 233)		int bgColor = pBitmapData->getPixel((int)0,(int)0);
HXLINE( 234)		int cy = (int)0;
HXLINE( 235)		int cx;
HXLINE( 237)		while((cy < pBitmapData->height)){
HXLINE( 239)			int rowHeight = (int)0;
HXLINE( 240)			cx = (int)0;
HXLINE( 242)			while((cx < pBitmapData->width)){
HXLINE( 244)				if ((::Std_obj::_hx_int(pBitmapData->getPixel(cx,cy)) != bgColor)) {
HXLINE( 247)					int gx = cx;
HXLINE( 248)					int gy = cy;
HXLINE( 250)					while((::Std_obj::_hx_int(pBitmapData->getPixel(gx,cy)) != bgColor)){
HXLINE( 252)						gx = (gx + (int)1);
            					}
HXLINE( 254)					while((::Std_obj::_hx_int(pBitmapData->getPixel(cx,gy)) != bgColor)){
HXLINE( 256)						gy = (gy + (int)1);
            					}
HXLINE( 258)					int gw = (gx - cx);
HXLINE( 259)					int gh = (gy - cy);
HXLINE( 261)					pRects->push( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,cx,cy,gw,gh));
HXLINE( 264)					if ((gh > rowHeight)) {
HXLINE( 266)						rowHeight = gh;
            					}
HXLINE( 268)					if ((gh > this->_maxHeight)) {
HXLINE( 270)						this->_maxHeight = gh;
            					}
HXLINE( 274)					cx = (cx + gw);
            				}
HXLINE( 277)				cx = (cx + (int)1);
            			}
HXLINE( 280)			cy = (cy + (rowHeight + (int)1));
            		}
HXLINE( 283)		 ::openfl::display::BitmapData resultBitmapData = pBitmapData->clone();
HXLINE( 285)		int pixelColor;
HXLINE( 286)		int bgColor32 = pBitmapData->getPixel32((int)0,(int)0);
HXLINE( 288)		cy = (int)0;
HXLINE( 289)		while((cy < pBitmapData->height)){
HXLINE( 291)			cx = (int)0;
HXLINE( 292)			while((cx < pBitmapData->width)){
HXLINE( 294)				pixelColor = pBitmapData->getPixel32(cx,cy);
HXLINE( 295)				if ((pixelColor == bgColor32)) {
HXLINE( 297)					resultBitmapData->setPixel32(cx,cy,(int)0);
            				}
HXLINE( 299)				cx = (cx + (int)1);
            			}
HXLINE( 301)			cy = (cy + (int)1);
            		}
HXLINE( 304)		return resultBitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,prepareBitmapData,return )

void BitmapFont_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_42830e3915985f5e_351_dispose)
HXLINE( 363)		this->_tileset = null();
HXLINE( 364)		this->_num_letters = (int)0;
HXLINE( 366)		this->_glyphs = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,dispose,(void))

void BitmapFont_obj::setGlyph(int pCharID, ::openfl::geom::Rectangle pRect,int pGlyphID, ::Dynamic __o_pOffsetX, ::Dynamic __o_pOffsetY, ::Dynamic __o_pAdvanceX){
 ::Dynamic pOffsetX = __o_pOffsetX.Default(0);
 ::Dynamic pOffsetY = __o_pOffsetY.Default(0);
 ::Dynamic pAdvanceX = __o_pAdvanceX.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_413_setGlyph)
HXLINE( 414)		if ((pRect->width == (int)0)) {
HXLINE( 415)			pRect->width = (int)1;
            		}
HXLINE( 416)		if ((pRect->height == (int)0)) {
HXLINE( 417)			pRect->height = (int)1;
            		}
HXLINE( 418)		this->_tileset->addRect(pRect);
HXLINE( 420)		 ::com::stencyl::graphics::fonts::FontSymbol symbol =  ::com::stencyl::graphics::fonts::FontSymbol_obj::__alloc( HX_CTX );
HXLINE( 421)		symbol->tileID = pGlyphID;
HXLINE( 422)		symbol->xoffset = pOffsetX;
HXLINE( 423)		symbol->yoffset = pOffsetY;
HXLINE( 424)		symbol->xadvance = pAdvanceX;
HXLINE( 426)		this->_glyphs->set(pCharID,symbol);
HXLINE( 427)		this->_num_letters++;
HXLINE( 429)		if (((::Math_obj::floor(pRect->height) + pOffsetY) > this->_maxHeight)) {
HXLINE( 431)			this->_maxHeight = (::Math_obj::floor(pRect->height) + pOffsetY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapFont_obj,setGlyph,(void))

void BitmapFont_obj::render( ::openfl::display::Tilemap tilemap,::String pText,Float pAlpha,int pOffsetX,int pOffsetY,int pLetterSpacing,Float pScale, ::Dynamic __o_pAngle){
 ::Dynamic pAngle = __o_pAngle.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_449_render)
HXLINE( 450)		this->_point->x = pOffsetX;
HXLINE( 451)		this->_point->y = pOffsetY;
HXLINE( 455)		 ::com::stencyl::graphics::fonts::FontSymbol glyph;
HXLINE( 456)		int glyphWidth;
HXLINE( 459)		int realCount = (int)0;
HXLINE( 461)		{
HXLINE( 461)			int _g1 = (int)0;
HXDLIN( 461)			int _g = pText.length;
HXDLIN( 461)			while((_g1 < _g)){
HXLINE( 461)				_g1 = (_g1 + (int)1);
HXDLIN( 461)				int i = (_g1 - (int)1);
HXLINE( 463)				if ((i < realCount)) {
HXLINE( 465)					continue;
            				}
HXLINE( 468)				int charCode = pText.charCodeAt(i);
HXLINE( 471)				if ((charCode == (int)126)) {
HXLINE( 473)					if ((pText.charAt((i + (int)1)) == HX_("x",78,00,00,00))) {
HXLINE( 475)						::String unicodeChar = pText.substring((i + (int)2),(i + (int)6));
HXLINE( 476)						charCode = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + unicodeChar));
HXLINE( 477)						realCount = (realCount + (int)5);
            					}
            				}
HXLINE( 485)				glyph = this->_glyphs->get(charCode).StaticCast<  ::com::stencyl::graphics::fonts::FontSymbol >();
HXLINE( 486)				if (this->_glyphs->exists(charCode)) {
HXLINE( 516)					glyphWidth = glyph->xadvance;
HXLINE( 518)					if ((charCode != (int)32)) {
HXLINE( 520)						int glyph1 = glyph->tileID;
HXDLIN( 520)						Float tile = this->_point->x;
HXDLIN( 520)						Float tile1 = (tile + (glyph->xoffset * pScale));
HXDLIN( 520)						Float tile2 = this->_point->y;
HXDLIN( 520)						 ::openfl::display::Tile tile3 =  ::openfl::display::Tile_obj::__alloc( HX_CTX ,glyph1,tile1,(tile2 + (glyph->yoffset * pScale)),null(),null(),null(),null(),null());
HXLINE( 522)						tile3->set_scaleX(pScale);
HXLINE( 523)						tile3->set_scaleY(pScale);
HXLINE( 524)						tile3->set_alpha(pAlpha);
HXLINE( 526)						tilemap->addTile(tile3);
            					}
HXLINE( 529)					 ::openfl::geom::Point _hx_tmp = this->_point;
HXDLIN( 529)					_hx_tmp->x = (_hx_tmp->x + ((glyphWidth * pScale) + pLetterSpacing));
            				}
HXLINE( 533)				realCount = (realCount + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapFont_obj,render,(void))

void BitmapFont_obj::renderToImg( ::openfl::display::BitmapData pBitmapData,::String pText,int pColor,Float pAlpha,int pOffsetX,int pOffsetY,int pLetterSpacing,Float pScale, ::Dynamic __o_pAngle, ::Dynamic __o_pUseColorTransform){
 ::Dynamic pAngle = __o_pAngle.Default(0);
 ::Dynamic pUseColorTransform = __o_pUseColorTransform.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_539_renderToImg)
HXLINE( 540)		 ::openfl::display::Tilemap tilemap =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,pBitmapData->width,pBitmapData->height,this->_tileset,null());
HXLINE( 542)		this->render(tilemap,pText,pAlpha,pOffsetX,pOffsetY,pLetterSpacing,pScale,pAngle);
HXLINE( 544)		if (pUseColorTransform) {
HXLINE( 546)			Float red = ((Float)((int)((int)pColor >> (int)(int)16) & (int)(int)255) / (Float)(int)255);
HXLINE( 547)			Float green = ((Float)((int)((int)pColor >> (int)(int)8) & (int)(int)255) / (Float)(int)255);
HXLINE( 548)			Float blue = ((Float)((int)pColor & (int)(int)255) / (Float)(int)255);
HXLINE( 550)			pBitmapData->draw(tilemap,null(), ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,red,green,blue,null(),null(),null(),null(),null()),null(),null(),null());
            		}
            		else {
HXLINE( 554)			pBitmapData->draw(tilemap,null(),null(),null(),null(),null());
            		}
HXLINE( 557)		tilemap->removeTiles(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC10(BitmapFont_obj,renderToImg,(void))

int BitmapFont_obj::toARGB(int rgb,int newAlpha){
            	HX_STACKFRAME(&_hx_pos_42830e3915985f5e_562_toARGB)
HXLINE( 563)		int argb = (int)0;
HXLINE( 564)		argb = rgb;
HXLINE( 565)		argb = (argb + ((int)newAlpha << (int)(int)24));
HXLINE( 567)		return argb;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,toARGB,return )

int BitmapFont_obj::getTextWidth(::String pText, ::Dynamic __o_pLetterSpacing, ::Dynamic __o_pFontScale){
 ::Dynamic pLetterSpacing = __o_pLetterSpacing.Default(0);
 ::Dynamic pFontScale = __o_pFontScale.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_42830e3915985f5e_578_getTextWidth)
HXLINE( 579)		int w = (int)0;
HXLINE( 580)		int realCount = (int)0;
HXLINE( 581)		int textLength = pText.length;
HXLINE( 582)		{
HXLINE( 582)			int _g1 = (int)0;
HXDLIN( 582)			int _g = textLength;
HXDLIN( 582)			while((_g1 < _g)){
HXLINE( 582)				_g1 = (_g1 + (int)1);
HXDLIN( 582)				int i = (_g1 - (int)1);
HXLINE( 584)				if ((i < realCount)) {
HXLINE( 586)					continue;
            				}
HXLINE( 589)				int charCode = pText.charCodeAt(i);
HXLINE( 592)				if ((charCode == (int)126)) {
HXLINE( 594)					if ((pText.charAt((i + (int)1)) == HX_("x",78,00,00,00))) {
HXLINE( 596)						::String unicodeChar = pText.substring((i + (int)2),(i + (int)6));
HXLINE( 597)						charCode = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + unicodeChar));
HXLINE( 598)						realCount = (realCount + (int)5);
            					}
            				}
HXLINE( 609)				if (this->_glyphs->exists(charCode)) {
HXLINE( 612)					w = (w + this->_glyphs->get(charCode).StaticCast<  ::com::stencyl::graphics::fonts::FontSymbol >()->xadvance);
            				}
HXLINE( 616)				realCount = (realCount + (int)1);
            			}
            		}
HXLINE( 619)		w = ::Math_obj::round((w * pFontScale));
HXLINE( 621)		if ((textLength > (int)1)) {
HXLINE( 623)			w = (w + ((textLength - (int)1) * pLetterSpacing));
            		}
HXLINE( 626)		return w;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapFont_obj,getTextWidth,return )

int BitmapFont_obj::getFontHeight(){
            	HX_STACKFRAME(&_hx_pos_42830e3915985f5e_635_getFontHeight)
HXDLIN( 635)		return this->_maxHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,getFontHeight,return )

int BitmapFont_obj::get_numLetters(){
            	HX_STACKFRAME(&_hx_pos_42830e3915985f5e_649_get_numLetters)
HXDLIN( 649)		return this->_num_letters;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,get_numLetters,return )

bool BitmapFont_obj::containsCharacter(::String _hx_char){
            	HX_STACKFRAME(&_hx_pos_42830e3915985f5e_676_containsCharacter)
HXDLIN( 676)		return (this->_glyphString.indexOf(_hx_char,null()) >= (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,containsCharacter,return )

 ::openfl::display::Tileset BitmapFont_obj::getTileset(){
            	HX_STACKFRAME(&_hx_pos_42830e3915985f5e_682_getTileset)
HXDLIN( 682)		return this->_tileset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapFont_obj,getTileset,return )

 ::haxe::ds::StringMap BitmapFont_obj::_storedFonts;

 ::openfl::geom::Point BitmapFont_obj::ZERO_POINT;

void BitmapFont_obj::store(::String pHandle, ::com::stencyl::graphics::fonts::BitmapFont pFont){
            	HX_STACKFRAME(&_hx_pos_42830e3915985f5e_660_store)
HXDLIN( 660)		::com::stencyl::graphics::fonts::BitmapFont_obj::_storedFonts->set(pHandle,pFont);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapFont_obj,store,(void))

 ::com::stencyl::graphics::fonts::BitmapFont BitmapFont_obj::fetch(::String pHandle){
            	HX_STACKFRAME(&_hx_pos_42830e3915985f5e_669_fetch)
HXLINE( 670)		 ::com::stencyl::graphics::fonts::BitmapFont f = ::com::stencyl::graphics::fonts::BitmapFont_obj::_storedFonts->get(pHandle).StaticCast<  ::com::stencyl::graphics::fonts::BitmapFont >();
HXLINE( 671)		return f;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFont_obj,fetch,return )


hx::ObjectPtr< BitmapFont_obj > BitmapFont_obj::__new() {
	hx::ObjectPtr< BitmapFont_obj > __this = new BitmapFont_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BitmapFont_obj > BitmapFont_obj::__alloc(hx::Ctx *_hx_ctx) {
	BitmapFont_obj *__this = (BitmapFont_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapFont_obj), true, "com.stencyl.graphics.fonts.BitmapFont"));
	*(void **)__this = BitmapFont_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BitmapFont_obj::BitmapFont_obj()
{
}

void BitmapFont_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapFont);
	HX_MARK_MEMBER_NAME(_glyphs,"_glyphs");
	HX_MARK_MEMBER_NAME(_num_letters,"_num_letters");
	HX_MARK_MEMBER_NAME(_tileset,"_tileset");
	HX_MARK_MEMBER_NAME(_glyphString,"_glyphString");
	HX_MARK_MEMBER_NAME(_maxHeight,"_maxHeight");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(isDefault,"isDefault");
	HX_MARK_MEMBER_NAME(lineSpacing,"lineSpacing");
	HX_MARK_MEMBER_NAME(numLetters,"numLetters");
	HX_MARK_END_CLASS();
}

void BitmapFont_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_glyphs,"_glyphs");
	HX_VISIT_MEMBER_NAME(_num_letters,"_num_letters");
	HX_VISIT_MEMBER_NAME(_tileset,"_tileset");
	HX_VISIT_MEMBER_NAME(_glyphString,"_glyphString");
	HX_VISIT_MEMBER_NAME(_maxHeight,"_maxHeight");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(isDefault,"isDefault");
	HX_VISIT_MEMBER_NAME(lineSpacing,"lineSpacing");
	HX_VISIT_MEMBER_NAME(numLetters,"numLetters");
}

hx::Val BitmapFont_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { return hx::Val( _point ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"toARGB") ) { return hx::Val( toARGB_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_glyphs") ) { return hx::Val( _glyphs ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_tileset") ) { return hx::Val( _tileset ); }
		if (HX_FIELD_EQ(inName,"setGlyph") ) { return hx::Val( setGlyph_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isDefault") ) { return hx::Val( isDefault ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_maxHeight") ) { return hx::Val( _maxHeight ); }
		if (HX_FIELD_EQ(inName,"numLetters") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numLetters() : numLetters ); }
		if (HX_FIELD_EQ(inName,"getTileset") ) { return hx::Val( getTileset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lineSpacing") ) { return hx::Val( lineSpacing ); }
		if (HX_FIELD_EQ(inName,"renderToImg") ) { return hx::Val( renderToImg_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_num_letters") ) { return hx::Val( _num_letters ); }
		if (HX_FIELD_EQ(inName,"_glyphString") ) { return hx::Val( _glyphString ); }
		if (HX_FIELD_EQ(inName,"getTextWidth") ) { return hx::Val( getTextWidth_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadPixelizer") ) { return hx::Val( loadPixelizer_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadAngelCode") ) { return hx::Val( loadAngelCode_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFontHeight") ) { return hx::Val( getFontHeight_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_numLetters") ) { return hx::Val( get_numLetters_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"prepareBitmapData") ) { return hx::Val( prepareBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"containsCharacter") ) { return hx::Val( containsCharacter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapFont_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"store") ) { outValue = store_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fetch") ) { outValue = fetch_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"ZERO_POINT") ) { outValue = ( ZERO_POINT ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_storedFonts") ) { outValue = ( _storedFonts ); return true; }
	}
	return false;
}

hx::Val BitmapFont_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_glyphs") ) { _glyphs=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_tileset") ) { _tileset=inValue.Cast<  ::openfl::display::Tileset >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isDefault") ) { isDefault=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_maxHeight") ) { _maxHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLetters") ) { numLetters=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lineSpacing") ) { lineSpacing=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_num_letters") ) { _num_letters=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_glyphString") ) { _glyphString=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapFont_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"ZERO_POINT") ) { ZERO_POINT=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_storedFonts") ) { _storedFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void BitmapFont_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_glyphs","\xe6","\x0a","\xd0","\x1c"));
	outFields->push(HX_HCSTRING("_num_letters","\x95","\x38","\xb5","\xb6"));
	outFields->push(HX_HCSTRING("_tileset","\xb5","\xda","\x4b","\x7f"));
	outFields->push(HX_HCSTRING("_glyphString","\x9e","\xd1","\x9a","\x43"));
	outFields->push(HX_HCSTRING("_maxHeight","\x6c","\x95","\x79","\x8d"));
	outFields->push(HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"));
	outFields->push(HX_HCSTRING("isDefault","\xf7","\x55","\xc2","\x9f"));
	outFields->push(HX_HCSTRING("lineSpacing","\xef","\xe9","\x0e","\xd0"));
	outFields->push(HX_HCSTRING("numLetters","\x27","\xdb","\xae","\x34"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapFont_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(BitmapFont_obj,_glyphs),HX_HCSTRING("_glyphs","\xe6","\x0a","\xd0","\x1c")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,_num_letters),HX_HCSTRING("_num_letters","\x95","\x38","\xb5","\xb6")},
	{hx::fsObject /*::openfl::display::Tileset*/ ,(int)offsetof(BitmapFont_obj,_tileset),HX_HCSTRING("_tileset","\xb5","\xda","\x4b","\x7f")},
	{hx::fsString,(int)offsetof(BitmapFont_obj,_glyphString),HX_HCSTRING("_glyphString","\x9e","\xd1","\x9a","\x43")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,_maxHeight),HX_HCSTRING("_maxHeight","\x6c","\x95","\x79","\x8d")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(BitmapFont_obj,_point),HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2")},
	{hx::fsBool,(int)offsetof(BitmapFont_obj,isDefault),HX_HCSTRING("isDefault","\xf7","\x55","\xc2","\x9f")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,lineSpacing),HX_HCSTRING("lineSpacing","\xef","\xe9","\x0e","\xd0")},
	{hx::fsInt,(int)offsetof(BitmapFont_obj,numLetters),HX_HCSTRING("numLetters","\x27","\xdb","\xae","\x34")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapFont_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &BitmapFont_obj::_storedFonts,HX_HCSTRING("_storedFonts","\x62","\x9d","\x3c","\x56")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &BitmapFont_obj::ZERO_POINT,HX_HCSTRING("ZERO_POINT","\x99","\xd8","\xec","\xdc")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapFont_obj_sMemberFields[] = {
	HX_HCSTRING("_glyphs","\xe6","\x0a","\xd0","\x1c"),
	HX_HCSTRING("_num_letters","\x95","\x38","\xb5","\xb6"),
	HX_HCSTRING("_tileset","\xb5","\xda","\x4b","\x7f"),
	HX_HCSTRING("_glyphString","\x9e","\xd1","\x9a","\x43"),
	HX_HCSTRING("_maxHeight","\x6c","\x95","\x79","\x8d"),
	HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"),
	HX_HCSTRING("isDefault","\xf7","\x55","\xc2","\x9f"),
	HX_HCSTRING("lineSpacing","\xef","\xe9","\x0e","\xd0"),
	HX_HCSTRING("loadPixelizer","\x1e","\xa5","\xda","\x96"),
	HX_HCSTRING("loadAngelCode","\x88","\x60","\x9e","\x7c"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("prepareBitmapData","\x20","\x1a","\x99","\xa8"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("setGlyph","\xaa","\x66","\x39","\xa4"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderToImg","\x12","\xea","\xc2","\xdf"),
	HX_HCSTRING("toARGB","\x47","\x94","\x15","\x76"),
	HX_HCSTRING("getTextWidth","\xa3","\xe2","\xa6","\x72"),
	HX_HCSTRING("getFontHeight","\x4c","\xfb","\x11","\x13"),
	HX_HCSTRING("numLetters","\x27","\xdb","\xae","\x34"),
	HX_HCSTRING("get_numLetters","\x70","\x63","\xa4","\xaa"),
	HX_HCSTRING("containsCharacter","\x8a","\xa5","\xf2","\x46"),
	HX_HCSTRING("getTileset","\x3e","\x07","\xf5","\x94"),
	::String(null()) };

static void BitmapFont_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::_storedFonts,"_storedFonts");
	HX_MARK_MEMBER_NAME(BitmapFont_obj::ZERO_POINT,"ZERO_POINT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapFont_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::_storedFonts,"_storedFonts");
	HX_VISIT_MEMBER_NAME(BitmapFont_obj::ZERO_POINT,"ZERO_POINT");
};

#endif

hx::Class BitmapFont_obj::__mClass;

static ::String BitmapFont_obj_sStaticFields[] = {
	HX_HCSTRING("_storedFonts","\x62","\x9d","\x3c","\x56"),
	HX_HCSTRING("ZERO_POINT","\x99","\xd8","\xec","\xdc"),
	HX_HCSTRING("store","\xe1","\x13","\x16","\x84"),
	HX_HCSTRING("fetch","\x3a","\x14","\xfa","\xfd"),
	::String(null())
};

void BitmapFont_obj::__register()
{
	hx::Object *dummy = new BitmapFont_obj;
	BitmapFont_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.fonts.BitmapFont","\x7c","\x44","\xd3","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapFont_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapFont_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapFont_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapFont_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapFont_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapFont_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapFont_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapFont_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapFont_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapFont_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_25_boot)
HXDLIN(  25)		_storedFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_42830e3915985f5e_27_boot)
HXDLIN(  27)		ZERO_POINT =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace fonts
