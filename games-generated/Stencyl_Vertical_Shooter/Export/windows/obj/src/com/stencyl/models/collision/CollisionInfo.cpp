// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_models_collision_CollisionInfo
#include <com/stencyl/models/collision/CollisionInfo.h>
#endif
#ifndef INCLUDED_com_stencyl_models_collision_Mask
#include <com/stencyl/models/collision/Mask.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_16df711956d61ec3_22_new,"com.stencyl.models.collision.CollisionInfo","new",0x90c40861,"com.stencyl.models.collision.CollisionInfo.new","com/stencyl/models/collision/CollisionInfo.hx",22,0xc3d19e2f)
HX_LOCAL_STACK_FRAME(_hx_pos_16df711956d61ec3_26_reset,"com.stencyl.models.collision.CollisionInfo","reset",0x9db74410,"com.stencyl.models.collision.CollisionInfo.reset","com/stencyl/models/collision/CollisionInfo.hx",26,0xc3d19e2f)
HX_LOCAL_STACK_FRAME(_hx_pos_16df711956d61ec3_9_resetStatics,"com.stencyl.models.collision.CollisionInfo","resetStatics",0x9456c1d5,"com.stencyl.models.collision.CollisionInfo.resetStatics","com/stencyl/models/collision/CollisionInfo.hx",9,0xc3d19e2f)
HX_LOCAL_STACK_FRAME(_hx_pos_16df711956d61ec3_33_getCollisionInfo,"com.stencyl.models.collision.CollisionInfo","getCollisionInfo",0x268bf2e9,"com.stencyl.models.collision.CollisionInfo.getCollisionInfo","com/stencyl/models/collision/CollisionInfo.hx",33,0xc3d19e2f)
HX_LOCAL_STACK_FRAME(_hx_pos_16df711956d61ec3_44_recycle,"com.stencyl.models.collision.CollisionInfo","recycle",0xc3dedc94,"com.stencyl.models.collision.CollisionInfo.recycle","com/stencyl/models/collision/CollisionInfo.hx",44,0xc3d19e2f)
HX_LOCAL_STACK_FRAME(_hx_pos_16df711956d61ec3_5_boot,"com.stencyl.models.collision.CollisionInfo","boot",0x12dc4d11,"com.stencyl.models.collision.CollisionInfo.boot","com/stencyl/models/collision/CollisionInfo.hx",5,0xc3d19e2f)
namespace com{
namespace stencyl{
namespace models{
namespace collision{

void CollisionInfo_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_16df711956d61ec3_22_new)
HXDLIN(  22)		this->reset();
            	}

Dynamic CollisionInfo_obj::__CreateEmpty() { return new CollisionInfo_obj; }

void *CollisionInfo_obj::_hx_vtable = 0;

Dynamic CollisionInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CollisionInfo_obj > _hx_result = new CollisionInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CollisionInfo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7c8101eb;
}

void CollisionInfo_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_16df711956d61ec3_26_reset)
HXLINE(  27)		this->max = (this->min = (int)0);
HXLINE(  28)		this->maskA = (this->maskB = null());
HXLINE(  29)		this->solidCollision = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CollisionInfo_obj,reset,(void))

::Array< ::Dynamic> CollisionInfo_obj::infoArray;

void CollisionInfo_obj::resetStatics(){
            	HX_STACKFRAME(&_hx_pos_16df711956d61ec3_9_resetStatics)
HXDLIN(   9)		::com::stencyl::models::collision::CollisionInfo_obj::infoArray = ::Array_obj< ::Dynamic>::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CollisionInfo_obj,resetStatics,(void))

 ::com::stencyl::models::collision::CollisionInfo CollisionInfo_obj::getCollisionInfo(){
            	HX_GC_STACKFRAME(&_hx_pos_16df711956d61ec3_33_getCollisionInfo)
HXLINE(  34)		if ((::com::stencyl::models::collision::CollisionInfo_obj::infoArray->length > (int)0)) {
HXLINE(  36)			return ::com::stencyl::models::collision::CollisionInfo_obj::infoArray->pop().StaticCast<  ::com::stencyl::models::collision::CollisionInfo >();
            		}
HXLINE(  39)		return  ::com::stencyl::models::collision::CollisionInfo_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CollisionInfo_obj,getCollisionInfo,return )

void CollisionInfo_obj::recycle( ::com::stencyl::models::collision::CollisionInfo info){
            	HX_STACKFRAME(&_hx_pos_16df711956d61ec3_44_recycle)
HXDLIN(  44)		::com::stencyl::models::collision::CollisionInfo_obj::infoArray->push(info);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CollisionInfo_obj,recycle,(void))


hx::ObjectPtr< CollisionInfo_obj > CollisionInfo_obj::__new() {
	hx::ObjectPtr< CollisionInfo_obj > __this = new CollisionInfo_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< CollisionInfo_obj > CollisionInfo_obj::__alloc(hx::Ctx *_hx_ctx) {
	CollisionInfo_obj *__this = (CollisionInfo_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CollisionInfo_obj), true, "com.stencyl.models.collision.CollisionInfo"));
	*(void **)__this = CollisionInfo_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CollisionInfo_obj::CollisionInfo_obj()
{
}

void CollisionInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CollisionInfo);
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(maskA,"maskA");
	HX_MARK_MEMBER_NAME(maskB,"maskB");
	HX_MARK_MEMBER_NAME(solidCollision,"solidCollision");
	HX_MARK_END_CLASS();
}

void CollisionInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(maskA,"maskA");
	HX_VISIT_MEMBER_NAME(maskB,"maskB");
	HX_VISIT_MEMBER_NAME(solidCollision,"solidCollision");
}

hx::Val CollisionInfo_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { return hx::Val( max ); }
		if (HX_FIELD_EQ(inName,"min") ) { return hx::Val( min ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"maskA") ) { return hx::Val( maskA ); }
		if (HX_FIELD_EQ(inName,"maskB") ) { return hx::Val( maskB ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"solidCollision") ) { return hx::Val( solidCollision ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CollisionInfo_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"recycle") ) { outValue = recycle_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"infoArray") ) { outValue = ( infoArray ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getCollisionInfo") ) { outValue = getCollisionInfo_dyn(); return true; }
	}
	return false;
}

hx::Val CollisionInfo_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"min") ) { min=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"maskA") ) { maskA=inValue.Cast<  ::com::stencyl::models::collision::Mask >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maskB") ) { maskB=inValue.Cast<  ::com::stencyl::models::collision::Mask >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"solidCollision") ) { solidCollision=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CollisionInfo_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"infoArray") ) { infoArray=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void CollisionInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("min","\x92","\x11","\x53","\x00"));
	outFields->push(HX_HCSTRING("maskA","\xd5","\x8d","\x22","\x03"));
	outFields->push(HX_HCSTRING("maskB","\xd6","\x8d","\x22","\x03"));
	outFields->push(HX_HCSTRING("solidCollision","\xc7","\x76","\x73","\xe4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CollisionInfo_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(CollisionInfo_obj,max),HX_HCSTRING("max","\xa4","\x0a","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(CollisionInfo_obj,min),HX_HCSTRING("min","\x92","\x11","\x53","\x00")},
	{hx::fsObject /*::com::stencyl::models::collision::Mask*/ ,(int)offsetof(CollisionInfo_obj,maskA),HX_HCSTRING("maskA","\xd5","\x8d","\x22","\x03")},
	{hx::fsObject /*::com::stencyl::models::collision::Mask*/ ,(int)offsetof(CollisionInfo_obj,maskB),HX_HCSTRING("maskB","\xd6","\x8d","\x22","\x03")},
	{hx::fsBool,(int)offsetof(CollisionInfo_obj,solidCollision),HX_HCSTRING("solidCollision","\xc7","\x76","\x73","\xe4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo CollisionInfo_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &CollisionInfo_obj::infoArray,HX_HCSTRING("infoArray","\x4b","\x56","\x98","\xc4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String CollisionInfo_obj_sMemberFields[] = {
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("maskA","\xd5","\x8d","\x22","\x03"),
	HX_HCSTRING("maskB","\xd6","\x8d","\x22","\x03"),
	HX_HCSTRING("solidCollision","\xc7","\x76","\x73","\xe4"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	::String(null()) };

static void CollisionInfo_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CollisionInfo_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CollisionInfo_obj::infoArray,"infoArray");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CollisionInfo_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CollisionInfo_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CollisionInfo_obj::infoArray,"infoArray");
};

#endif

hx::Class CollisionInfo_obj::__mClass;

static ::String CollisionInfo_obj_sStaticFields[] = {
	HX_HCSTRING("infoArray","\x4b","\x56","\x98","\xc4"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	HX_HCSTRING("getCollisionInfo","\x8a","\xd7","\x11","\x90"),
	HX_HCSTRING("recycle","\x13","\x10","\x8c","\x37"),
	::String(null())
};

void CollisionInfo_obj::__register()
{
	hx::Object *dummy = new CollisionInfo_obj;
	CollisionInfo_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.collision.CollisionInfo","\xef","\x43","\x66","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CollisionInfo_obj::__GetStatic;
	__mClass->mSetStaticField = &CollisionInfo_obj::__SetStatic;
	__mClass->mMarkFunc = CollisionInfo_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CollisionInfo_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CollisionInfo_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CollisionInfo_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CollisionInfo_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CollisionInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CollisionInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CollisionInfo_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_16df711956d61ec3_5_boot)
HXDLIN(   5)		infoArray = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace collision
