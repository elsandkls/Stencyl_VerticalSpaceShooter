// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_SlideTransition
#include <com/stencyl/graphics/transitions/SlideTransition.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat2
#include <com/stencyl/utils/motion/TweenFloat2.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c28fa74a459e81bd_37_new,"com.stencyl.graphics.transitions.SlideTransition","new",0x9f5b5eb4,"com.stencyl.graphics.transitions.SlideTransition.new","com/stencyl/graphics/transitions/SlideTransition.hx",37,0x8f664c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_c28fa74a459e81bd_76_start,"com.stencyl.graphics.transitions.SlideTransition","start",0x9ed23fb6,"com.stencyl.graphics.transitions.SlideTransition.start","com/stencyl/graphics/transitions/SlideTransition.hx",76,0x8f664c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_c28fa74a459e81bd_102_update,"com.stencyl.graphics.transitions.SlideTransition","update",0xda30a435,"com.stencyl.graphics.transitions.SlideTransition.update","com/stencyl/graphics/transitions/SlideTransition.hx",102,0x8f664c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_c28fa74a459e81bd_110_draw,"com.stencyl.graphics.transitions.SlideTransition","draw",0xca052730,"com.stencyl.graphics.transitions.SlideTransition.draw","com/stencyl/graphics/transitions/SlideTransition.hx",110,0x8f664c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_c28fa74a459e81bd_124_cleanup,"com.stencyl.graphics.transitions.SlideTransition","cleanup",0x1dd15478,"com.stencyl.graphics.transitions.SlideTransition.cleanup","com/stencyl/graphics/transitions/SlideTransition.hx",124,0x8f664c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_c28fa74a459e81bd_29_boot,"com.stencyl.graphics.transitions.SlideTransition","boot",0xc8b07f5e,"com.stencyl.graphics.transitions.SlideTransition.boot","com/stencyl/graphics/transitions/SlideTransition.hx",29,0x8f664c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_c28fa74a459e81bd_30_boot,"com.stencyl.graphics.transitions.SlideTransition","boot",0xc8b07f5e,"com.stencyl.graphics.transitions.SlideTransition.boot","com/stencyl/graphics/transitions/SlideTransition.hx",30,0x8f664c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_c28fa74a459e81bd_31_boot,"com.stencyl.graphics.transitions.SlideTransition","boot",0xc8b07f5e,"com.stencyl.graphics.transitions.SlideTransition.boot","com/stencyl/graphics/transitions/SlideTransition.hx",31,0x8f664c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_c28fa74a459e81bd_32_boot,"com.stencyl.graphics.transitions.SlideTransition","boot",0xc8b07f5e,"com.stencyl.graphics.transitions.SlideTransition.boot","com/stencyl/graphics/transitions/SlideTransition.hx",32,0x8f664c7c)
namespace com{
namespace stencyl{
namespace graphics{
namespace transitions{

void SlideTransition_obj::__construct( ::openfl::display::Sprite sceneSpr, ::openfl::display::Shape sceneCol,Float duration,::String slideDirection){
            	HX_GC_STACKFRAME(&_hx_pos_c28fa74a459e81bd_37_new)
HXLINE(  38)		super::__construct(duration);
HXLINE(  40)		this->sceneSpr = sceneSpr;
HXLINE(  41)		this->sceneCol = sceneCol;
HXLINE(  43)		this->oldSceneMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  44)		this->newSceneMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  45)		this->tx = (int)0;
HXLINE(  46)		this->ty = (int)0;
HXLINE(  48)		if ((slideDirection == ::com::stencyl::graphics::transitions::SlideTransition_obj::SLIDE_UP)) {
HXLINE(  50)			this->newSceneMatrix->ty = (-(::com::stencyl::Engine_obj::screenHeight) * ::com::stencyl::Engine_obj::SCALE);
HXLINE(  51)			this->ty = (::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE);
            		}
            		else {
HXLINE(  53)			if ((slideDirection == ::com::stencyl::graphics::transitions::SlideTransition_obj::SLIDE_DOWN)) {
HXLINE(  55)				this->newSceneMatrix->ty = (::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE);
HXLINE(  56)				this->ty = (-(::com::stencyl::Engine_obj::screenHeight) * ::com::stencyl::Engine_obj::SCALE);
            			}
            			else {
HXLINE(  58)				if ((slideDirection == ::com::stencyl::graphics::transitions::SlideTransition_obj::SLIDE_LEFT)) {
HXLINE(  60)					this->newSceneMatrix->tx = (-(::com::stencyl::Engine_obj::screenWidth) * ::com::stencyl::Engine_obj::SCALE);
HXLINE(  61)					this->tx = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
            				}
            				else {
HXLINE(  63)					if ((slideDirection == ::com::stencyl::graphics::transitions::SlideTransition_obj::SLIDE_RIGHT)) {
HXLINE(  65)						this->newSceneMatrix->tx = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXLINE(  66)						this->tx = (-(::com::stencyl::Engine_obj::screenWidth) * ::com::stencyl::Engine_obj::SCALE);
            					}
            					else {
HXLINE(  70)						 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  70)						_hx_tmp((HX_("Invalid slide direction: ",ad,41,e9,71) + slideDirection),hx::SourceInfo(HX_("SlideTransition.hx",78,24,07,c5),70,HX_("com.stencyl.graphics.transitions.SlideTransition",c2,34,39,e6),HX_("new",60,d0,53,00)));
HXLINE(  71)						this->complete = true;
            					}
            				}
            			}
            		}
            	}

Dynamic SlideTransition_obj::__CreateEmpty() { return new SlideTransition_obj; }

void *SlideTransition_obj::_hx_vtable = 0;

Dynamic SlideTransition_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SlideTransition_obj > _hx_result = new SlideTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SlideTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x10817dc5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x10817dc5;
	} else {
		return inClassId==(int)0x6fdbe19e;
	}
}

void SlideTransition_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_c28fa74a459e81bd_76_start)
HXLINE(  77)		this->active = true;
HXLINE(  79)		int _hx_tmp = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(  79)		this->oldBitmap =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)),null(),null());
HXLINE(  80)		this->oldBitmap->draw(this->sceneCol,null(),null(),null(),null(),null());
HXLINE(  81)		this->oldBitmap->draw(this->sceneSpr,null(),null(),null(),null(),null());
HXLINE(  83)		int _hx_tmp1 = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(  83)		this->newBitmap =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp1,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)),null(),null());
HXLINE(  84)		int _hx_tmp2 = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(  84)		this->drawBitmap =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp2,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)),null(),null());
HXLINE(  86)		this->rect =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  87)		this->graphics = this->rect->get_graphics();
HXLINE(  88)		this->graphics->beginBitmapFill(this->oldBitmap,null(),null(),null());
HXLINE(  89)		 ::openfl::display::Graphics _hx_tmp3 = this->graphics;
HXDLIN(  89)		Float _hx_tmp4 = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  89)		_hx_tmp3->drawRect((int)0,(int)0,_hx_tmp4,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  90)		this->graphics->endFill();
HXLINE(  92)		::com::stencyl::Engine_obj::engine->transitionLayer->addChild(this->rect);
HXLINE(  94)		this->osm_xy =  ::com::stencyl::utils::motion::TweenFloat2_obj::__alloc( HX_CTX );
HXLINE(  95)		this->nsm_xy =  ::com::stencyl::utils::motion::TweenFloat2_obj::__alloc( HX_CTX );
HXLINE(  96)		 ::com::stencyl::utils::motion::TweenFloat2 _hx_tmp5 = this->osm_xy;
HXDLIN(  96)		Float _hx_tmp6 = this->oldSceneMatrix->tx;
HXDLIN(  96)		Float _hx_tmp7 = this->tx;
HXDLIN(  96)		Float _hx_tmp8 = this->oldSceneMatrix->ty;
HXDLIN(  96)		Float _hx_tmp9 = this->ty;
HXDLIN(  96)		 ::com::stencyl::utils::motion::Linear _hx_tmp10 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN(  96)		_hx_tmp5->tween(_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,::Std_obj::_hx_int((this->duration * (int)1000)));
HXLINE(  97)		 ::com::stencyl::utils::motion::TweenFloat2 _hx_tmp11 = this->nsm_xy;
HXDLIN(  97)		Float _hx_tmp12 = this->newSceneMatrix->tx;
HXDLIN(  97)		Float _hx_tmp13 = this->newSceneMatrix->ty;
HXDLIN(  97)		 ::com::stencyl::utils::motion::Linear _hx_tmp14 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN(  97)		_hx_tmp11->tween(_hx_tmp12,(int)0,_hx_tmp13,(int)0,_hx_tmp14,::Std_obj::_hx_int((this->duration * (int)1000)));
HXLINE(  98)		this->nsm_xy->doOnComplete(this->stop_dyn());
            	}


void SlideTransition_obj::update(Float elapsedTime){
            	HX_STACKFRAME(&_hx_pos_c28fa74a459e81bd_102_update)
HXLINE( 103)		this->oldSceneMatrix->tx = this->osm_xy->value1;
HXLINE( 104)		this->oldSceneMatrix->ty = this->osm_xy->value2;
HXLINE( 105)		this->newSceneMatrix->tx = this->nsm_xy->value1;
HXLINE( 106)		this->newSceneMatrix->ty = this->nsm_xy->value2;
            	}


void SlideTransition_obj::draw( ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_c28fa74a459e81bd_110_draw)
HXLINE( 111)		this->graphics->clear();
HXLINE( 113)		this->newBitmap->draw(this->sceneCol,null(),null(),null(),null(),null());
HXLINE( 114)		this->newBitmap->draw(this->sceneSpr,null(),null(),null(),null(),null());
HXLINE( 115)		this->drawBitmap->draw(this->newBitmap,this->newSceneMatrix,null(),null(),null(),null());
HXLINE( 116)		this->drawBitmap->draw(this->oldBitmap,this->oldSceneMatrix,null(),null(),null(),null());
HXLINE( 118)		this->graphics->beginBitmapFill(this->drawBitmap,null(),null(),null());
HXLINE( 119)		 ::openfl::display::Graphics _hx_tmp = this->graphics;
HXDLIN( 119)		Float _hx_tmp1 = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN( 119)		_hx_tmp->drawRect((int)0,(int)0,_hx_tmp1,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE( 120)		this->graphics->endFill();
            	}


void SlideTransition_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_c28fa74a459e81bd_124_cleanup)
HXLINE( 125)		this->sceneSpr = null();
HXLINE( 127)		if (hx::IsNotNull( this->rect )) {
HXLINE( 129)			::com::stencyl::Engine_obj::engine->transitionLayer->removeChild(this->rect);
HXLINE( 130)			this->rect = null();
            		}
            	}


::String SlideTransition_obj::SLIDE_UP;

::String SlideTransition_obj::SLIDE_DOWN;

::String SlideTransition_obj::SLIDE_LEFT;

::String SlideTransition_obj::SLIDE_RIGHT;


hx::ObjectPtr< SlideTransition_obj > SlideTransition_obj::__new( ::openfl::display::Sprite sceneSpr, ::openfl::display::Shape sceneCol,Float duration,::String slideDirection) {
	hx::ObjectPtr< SlideTransition_obj > __this = new SlideTransition_obj();
	__this->__construct(sceneSpr,sceneCol,duration,slideDirection);
	return __this;
}

hx::ObjectPtr< SlideTransition_obj > SlideTransition_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Sprite sceneSpr, ::openfl::display::Shape sceneCol,Float duration,::String slideDirection) {
	SlideTransition_obj *__this = (SlideTransition_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SlideTransition_obj), true, "com.stencyl.graphics.transitions.SlideTransition"));
	*(void **)__this = SlideTransition_obj::_hx_vtable;
	__this->__construct(sceneSpr,sceneCol,duration,slideDirection);
	return __this;
}

SlideTransition_obj::SlideTransition_obj()
{
}

void SlideTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SlideTransition);
	HX_MARK_MEMBER_NAME(sceneSpr,"sceneSpr");
	HX_MARK_MEMBER_NAME(sceneCol,"sceneCol");
	HX_MARK_MEMBER_NAME(oldBitmap,"oldBitmap");
	HX_MARK_MEMBER_NAME(newBitmap,"newBitmap");
	HX_MARK_MEMBER_NAME(drawBitmap,"drawBitmap");
	HX_MARK_MEMBER_NAME(graphics,"graphics");
	HX_MARK_MEMBER_NAME(oldSceneMatrix,"oldSceneMatrix");
	HX_MARK_MEMBER_NAME(newSceneMatrix,"newSceneMatrix");
	HX_MARK_MEMBER_NAME(osm_xy,"osm_xy");
	HX_MARK_MEMBER_NAME(nsm_xy,"nsm_xy");
	HX_MARK_MEMBER_NAME(tx,"tx");
	HX_MARK_MEMBER_NAME(ty,"ty");
	HX_MARK_MEMBER_NAME(rect,"rect");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SlideTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sceneSpr,"sceneSpr");
	HX_VISIT_MEMBER_NAME(sceneCol,"sceneCol");
	HX_VISIT_MEMBER_NAME(oldBitmap,"oldBitmap");
	HX_VISIT_MEMBER_NAME(newBitmap,"newBitmap");
	HX_VISIT_MEMBER_NAME(drawBitmap,"drawBitmap");
	HX_VISIT_MEMBER_NAME(graphics,"graphics");
	HX_VISIT_MEMBER_NAME(oldSceneMatrix,"oldSceneMatrix");
	HX_VISIT_MEMBER_NAME(newSceneMatrix,"newSceneMatrix");
	HX_VISIT_MEMBER_NAME(osm_xy,"osm_xy");
	HX_VISIT_MEMBER_NAME(nsm_xy,"nsm_xy");
	HX_VISIT_MEMBER_NAME(tx,"tx");
	HX_VISIT_MEMBER_NAME(ty,"ty");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SlideTransition_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { return hx::Val( tx ); }
		if (HX_FIELD_EQ(inName,"ty") ) { return hx::Val( ty ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"osm_xy") ) { return hx::Val( osm_xy ); }
		if (HX_FIELD_EQ(inName,"nsm_xy") ) { return hx::Val( nsm_xy ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sceneSpr") ) { return hx::Val( sceneSpr ); }
		if (HX_FIELD_EQ(inName,"sceneCol") ) { return hx::Val( sceneCol ); }
		if (HX_FIELD_EQ(inName,"graphics") ) { return hx::Val( graphics ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"oldBitmap") ) { return hx::Val( oldBitmap ); }
		if (HX_FIELD_EQ(inName,"newBitmap") ) { return hx::Val( newBitmap ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawBitmap") ) { return hx::Val( drawBitmap ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"oldSceneMatrix") ) { return hx::Val( oldSceneMatrix ); }
		if (HX_FIELD_EQ(inName,"newSceneMatrix") ) { return hx::Val( newSceneMatrix ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SlideTransition_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"SLIDE_UP") ) { outValue = ( SLIDE_UP ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"SLIDE_DOWN") ) { outValue = ( SLIDE_DOWN ); return true; }
		if (HX_FIELD_EQ(inName,"SLIDE_LEFT") ) { outValue = ( SLIDE_LEFT ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"SLIDE_RIGHT") ) { outValue = ( SLIDE_RIGHT ); return true; }
	}
	return false;
}

hx::Val SlideTransition_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { tx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ty") ) { ty=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"osm_xy") ) { osm_xy=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nsm_xy") ) { nsm_xy=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat2 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sceneSpr") ) { sceneSpr=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sceneCol") ) { sceneCol=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"oldBitmap") ) { oldBitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newBitmap") ) { newBitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawBitmap") ) { drawBitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"oldSceneMatrix") ) { oldSceneMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newSceneMatrix") ) { newSceneMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SlideTransition_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"SLIDE_UP") ) { SLIDE_UP=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"SLIDE_DOWN") ) { SLIDE_DOWN=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"SLIDE_LEFT") ) { SLIDE_LEFT=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"SLIDE_RIGHT") ) { SLIDE_RIGHT=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void SlideTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("sceneSpr","\x49","\x5b","\x97","\xc1"));
	outFields->push(HX_HCSTRING("sceneCol","\x54","\x36","\x8b","\xc1"));
	outFields->push(HX_HCSTRING("oldBitmap","\xf6","\x93","\xf7","\xfb"));
	outFields->push(HX_HCSTRING("newBitmap","\x6f","\xdc","\xbc","\xae"));
	outFields->push(HX_HCSTRING("drawBitmap","\x13","\x8b","\xcf","\x32"));
	outFields->push(HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"));
	outFields->push(HX_HCSTRING("oldSceneMatrix","\x46","\x07","\x4c","\xcf"));
	outFields->push(HX_HCSTRING("newSceneMatrix","\x2d","\x68","\x90","\x05"));
	outFields->push(HX_HCSTRING("osm_xy","\xf7","\x83","\x06","\xe1"));
	outFields->push(HX_HCSTRING("nsm_xy","\x98","\x27","\xab","\x7a"));
	outFields->push(HX_HCSTRING("tx","\x84","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("ty","\x85","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SlideTransition_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(SlideTransition_obj,sceneSpr),HX_HCSTRING("sceneSpr","\x49","\x5b","\x97","\xc1")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(SlideTransition_obj,sceneCol),HX_HCSTRING("sceneCol","\x54","\x36","\x8b","\xc1")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(SlideTransition_obj,oldBitmap),HX_HCSTRING("oldBitmap","\xf6","\x93","\xf7","\xfb")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(SlideTransition_obj,newBitmap),HX_HCSTRING("newBitmap","\x6f","\xdc","\xbc","\xae")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(SlideTransition_obj,drawBitmap),HX_HCSTRING("drawBitmap","\x13","\x8b","\xcf","\x32")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(SlideTransition_obj,graphics),HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(SlideTransition_obj,oldSceneMatrix),HX_HCSTRING("oldSceneMatrix","\x46","\x07","\x4c","\xcf")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(SlideTransition_obj,newSceneMatrix),HX_HCSTRING("newSceneMatrix","\x2d","\x68","\x90","\x05")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat2*/ ,(int)offsetof(SlideTransition_obj,osm_xy),HX_HCSTRING("osm_xy","\xf7","\x83","\x06","\xe1")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat2*/ ,(int)offsetof(SlideTransition_obj,nsm_xy),HX_HCSTRING("nsm_xy","\x98","\x27","\xab","\x7a")},
	{hx::fsFloat,(int)offsetof(SlideTransition_obj,tx),HX_HCSTRING("tx","\x84","\x65","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(SlideTransition_obj,ty),HX_HCSTRING("ty","\x85","\x65","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(SlideTransition_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SlideTransition_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &SlideTransition_obj::SLIDE_UP,HX_HCSTRING("SLIDE_UP","\x09","\x24","\xeb","\x68")},
	{hx::fsString,(void *) &SlideTransition_obj::SLIDE_DOWN,HX_HCSTRING("SLIDE_DOWN","\x90","\xe1","\xc5","\xc9")},
	{hx::fsString,(void *) &SlideTransition_obj::SLIDE_LEFT,HX_HCSTRING("SLIDE_LEFT","\x35","\xf1","\x07","\xcf")},
	{hx::fsString,(void *) &SlideTransition_obj::SLIDE_RIGHT,HX_HCSTRING("SLIDE_RIGHT","\xce","\x2a","\xf8","\xce")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SlideTransition_obj_sMemberFields[] = {
	HX_HCSTRING("sceneSpr","\x49","\x5b","\x97","\xc1"),
	HX_HCSTRING("sceneCol","\x54","\x36","\x8b","\xc1"),
	HX_HCSTRING("oldBitmap","\xf6","\x93","\xf7","\xfb"),
	HX_HCSTRING("newBitmap","\x6f","\xdc","\xbc","\xae"),
	HX_HCSTRING("drawBitmap","\x13","\x8b","\xcf","\x32"),
	HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"),
	HX_HCSTRING("oldSceneMatrix","\x46","\x07","\x4c","\xcf"),
	HX_HCSTRING("newSceneMatrix","\x2d","\x68","\x90","\x05"),
	HX_HCSTRING("osm_xy","\xf7","\x83","\x06","\xe1"),
	HX_HCSTRING("nsm_xy","\x98","\x27","\xab","\x7a"),
	HX_HCSTRING("tx","\x84","\x65","\x00","\x00"),
	HX_HCSTRING("ty","\x85","\x65","\x00","\x00"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	::String(null()) };

static void SlideTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SlideTransition_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SlideTransition_obj::SLIDE_UP,"SLIDE_UP");
	HX_MARK_MEMBER_NAME(SlideTransition_obj::SLIDE_DOWN,"SLIDE_DOWN");
	HX_MARK_MEMBER_NAME(SlideTransition_obj::SLIDE_LEFT,"SLIDE_LEFT");
	HX_MARK_MEMBER_NAME(SlideTransition_obj::SLIDE_RIGHT,"SLIDE_RIGHT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SlideTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SlideTransition_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SlideTransition_obj::SLIDE_UP,"SLIDE_UP");
	HX_VISIT_MEMBER_NAME(SlideTransition_obj::SLIDE_DOWN,"SLIDE_DOWN");
	HX_VISIT_MEMBER_NAME(SlideTransition_obj::SLIDE_LEFT,"SLIDE_LEFT");
	HX_VISIT_MEMBER_NAME(SlideTransition_obj::SLIDE_RIGHT,"SLIDE_RIGHT");
};

#endif

hx::Class SlideTransition_obj::__mClass;

static ::String SlideTransition_obj_sStaticFields[] = {
	HX_HCSTRING("SLIDE_UP","\x09","\x24","\xeb","\x68"),
	HX_HCSTRING("SLIDE_DOWN","\x90","\xe1","\xc5","\xc9"),
	HX_HCSTRING("SLIDE_LEFT","\x35","\xf1","\x07","\xcf"),
	HX_HCSTRING("SLIDE_RIGHT","\xce","\x2a","\xf8","\xce"),
	::String(null())
};

void SlideTransition_obj::__register()
{
	hx::Object *dummy = new SlideTransition_obj;
	SlideTransition_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.transitions.SlideTransition","\xc2","\x34","\x39","\xe6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SlideTransition_obj::__GetStatic;
	__mClass->mSetStaticField = &SlideTransition_obj::__SetStatic;
	__mClass->mMarkFunc = SlideTransition_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SlideTransition_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SlideTransition_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SlideTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SlideTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SlideTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SlideTransition_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SlideTransition_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c28fa74a459e81bd_29_boot)
HXDLIN(  29)		SLIDE_UP = HX_("up",5b,66,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c28fa74a459e81bd_30_boot)
HXDLIN(  30)		SLIDE_DOWN = HX_("down",62,f8,6d,42);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c28fa74a459e81bd_31_boot)
HXDLIN(  31)		SLIDE_LEFT = HX_("left",07,08,b0,47);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c28fa74a459e81bd_32_boot)
HXDLIN(  32)		SLIDE_RIGHT = HX_("right",dc,0b,64,e9);
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace transitions
