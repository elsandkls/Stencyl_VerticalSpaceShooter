// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_FadeInTransition
#include <com/stencyl/graphics/transitions/FadeInTransition.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat
#include <com/stencyl/utils/motion/TweenFloat.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bed800f0368f06a8_17_new,"com.stencyl.graphics.transitions.FadeInTransition","new",0xdf89f14c,"com.stencyl.graphics.transitions.FadeInTransition.new","com/stencyl/graphics/transitions/FadeInTransition.hx",17,0x5e247a64)
HX_LOCAL_STACK_FRAME(_hx_pos_bed800f0368f06a8_25_start,"com.stencyl.graphics.transitions.FadeInTransition","start",0x35bca84e,"com.stencyl.graphics.transitions.FadeInTransition.start","com/stencyl/graphics/transitions/FadeInTransition.hx",25,0x5e247a64)
HX_LOCAL_STACK_FRAME(_hx_pos_bed800f0368f06a8_45_update,"com.stencyl.graphics.transitions.FadeInTransition","update",0x5061c09d,"com.stencyl.graphics.transitions.FadeInTransition.update","com/stencyl/graphics/transitions/FadeInTransition.hx",45,0x5e247a64)
HX_LOCAL_STACK_FRAME(_hx_pos_bed800f0368f06a8_50_cleanup,"com.stencyl.graphics.transitions.FadeInTransition","cleanup",0x12991310,"com.stencyl.graphics.transitions.FadeInTransition.cleanup","com/stencyl/graphics/transitions/FadeInTransition.hx",50,0x5e247a64)
namespace com{
namespace stencyl{
namespace graphics{
namespace transitions{

void FadeInTransition_obj::__construct(Float duration,hx::Null< int >  __o_color){
int color = __o_color.Default(-16777216);
            	HX_STACKFRAME(&_hx_pos_bed800f0368f06a8_17_new)
HXLINE(  18)		super::__construct(duration);
HXLINE(  20)		this->color = color;
HXLINE(  21)		this->direction = ::com::stencyl::graphics::transitions::Transition_obj::IN;
            	}

Dynamic FadeInTransition_obj::__CreateEmpty() { return new FadeInTransition_obj; }

void *FadeInTransition_obj::_hx_vtable = 0;

Dynamic FadeInTransition_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FadeInTransition_obj > _hx_result = new FadeInTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FadeInTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x10817dc5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x10817dc5;
	} else {
		return inClassId==(int)0x64382c1a;
	}
}

void FadeInTransition_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_bed800f0368f06a8_25_start)
HXLINE(  26)		this->active = true;
HXLINE(  28)		this->rect =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  29)		 ::openfl::display::Graphics g = this->rect->get_graphics();
HXLINE(  31)		g->beginFill(this->color,null());
HXLINE(  32)		Float _hx_tmp = ((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE) + (int)4);
HXDLIN(  32)		g->drawRect((int)0,(int)0,_hx_tmp,((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE) + (int)4));
HXLINE(  33)		g->endFill();
HXLINE(  35)		g->drawCircle((int)1,(int)1,(int)1);
HXLINE(  37)		::com::stencyl::Engine_obj::engine->transitionLayer->addChild(this->rect);
HXLINE(  39)		this->rectAlpha =  ::com::stencyl::utils::motion::TweenFloat_obj::__alloc( HX_CTX );
HXLINE(  40)		 ::com::stencyl::utils::motion::TweenFloat _hx_tmp1 = this->rectAlpha;
HXDLIN(  40)		 ::com::stencyl::utils::motion::Linear _hx_tmp2 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN(  40)		_hx_tmp1->tween((int)1,(int)0,_hx_tmp2,::Std_obj::_hx_int((this->duration * (int)1000)))->doOnComplete(this->stop_dyn());
            	}


void FadeInTransition_obj::update(Float elapsedTime){
            	HX_STACKFRAME(&_hx_pos_bed800f0368f06a8_45_update)
HXDLIN(  45)		this->rect->set_alpha(this->rectAlpha->value);
            	}


void FadeInTransition_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_bed800f0368f06a8_50_cleanup)
HXDLIN(  50)		if (hx::IsNotNull( this->rect )) {
HXLINE(  52)			::com::stencyl::Engine_obj::engine->transitionLayer->removeChild(this->rect);
HXLINE(  53)			this->rect = null();
            		}
            	}



hx::ObjectPtr< FadeInTransition_obj > FadeInTransition_obj::__new(Float duration,hx::Null< int >  __o_color) {
	hx::ObjectPtr< FadeInTransition_obj > __this = new FadeInTransition_obj();
	__this->__construct(duration,__o_color);
	return __this;
}

hx::ObjectPtr< FadeInTransition_obj > FadeInTransition_obj::__alloc(hx::Ctx *_hx_ctx,Float duration,hx::Null< int >  __o_color) {
	FadeInTransition_obj *__this = (FadeInTransition_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FadeInTransition_obj), true, "com.stencyl.graphics.transitions.FadeInTransition"));
	*(void **)__this = FadeInTransition_obj::_hx_vtable;
	__this->__construct(duration,__o_color);
	return __this;
}

FadeInTransition_obj::FadeInTransition_obj()
{
}

void FadeInTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FadeInTransition);
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(rectAlpha,"rectAlpha");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FadeInTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(rectAlpha,"rectAlpha");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FadeInTransition_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rectAlpha") ) { return hx::Val( rectAlpha ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FadeInTransition_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rectAlpha") ) { rectAlpha=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FadeInTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("rectAlpha","\x9a","\xa7","\x5e","\xab"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FadeInTransition_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FadeInTransition_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(FadeInTransition_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat*/ ,(int)offsetof(FadeInTransition_obj,rectAlpha),HX_HCSTRING("rectAlpha","\x9a","\xa7","\x5e","\xab")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FadeInTransition_obj_sStaticStorageInfo = 0;
#endif

static ::String FadeInTransition_obj_sMemberFields[] = {
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("rectAlpha","\x9a","\xa7","\x5e","\xab"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	::String(null()) };

static void FadeInTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FadeInTransition_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FadeInTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FadeInTransition_obj::__mClass,"__mClass");
};

#endif

hx::Class FadeInTransition_obj::__mClass;

void FadeInTransition_obj::__register()
{
	hx::Object *dummy = new FadeInTransition_obj;
	FadeInTransition_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.transitions.FadeInTransition","\x5a","\x9b","\xd4","\xd8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FadeInTransition_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FadeInTransition_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FadeInTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FadeInTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FadeInTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FadeInTransition_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace transitions
