// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Config
#include <com/stencyl/Config.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_Tile
#include <com/stencyl/models/scene/Tile.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_Tileset
#include <com/stencyl/models/scene/Tileset.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Assets
#include <com/stencyl/utils/Assets.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_53c70ce0871d2c87_34_new,"com.stencyl.models.scene.Tileset","new",0xc71086af,"com.stencyl.models.scene.Tileset.new","com/stencyl/models/scene/Tileset.hx",34,0xf51ad821)
HX_LOCAL_STACK_FRAME(_hx_pos_53c70ce0871d2c87_47_setupFLTileset,"com.stencyl.models.scene.Tileset","setupFLTileset",0x626e3882,"com.stencyl.models.scene.Tileset.setupFLTileset","com/stencyl/models/scene/Tileset.hx",47,0xf51ad821)
HX_LOCAL_STACK_FRAME(_hx_pos_53c70ce0871d2c87_86_getImageSourceForTile,"com.stencyl.models.scene.Tileset","getImageSourceForTile",0x4c6dfb26,"com.stencyl.models.scene.Tileset.getImageSourceForTile","com/stencyl/models/scene/Tileset.hx",86,0xf51ad821)
HX_LOCAL_STACK_FRAME(_hx_pos_53c70ce0871d2c87_131_loadGraphics,"com.stencyl.models.scene.Tileset","loadGraphics",0x95c86ce2,"com.stencyl.models.scene.Tileset.loadGraphics","com/stencyl/models/scene/Tileset.hx",131,0xf51ad821)
HX_LOCAL_STACK_FRAME(_hx_pos_53c70ce0871d2c87_162_unloadGraphics,"com.stencyl.models.scene.Tileset","unloadGraphics",0x9a83cafb,"com.stencyl.models.scene.Tileset.unloadGraphics","com/stencyl/models/scene/Tileset.hx",162,0xf51ad821)
HX_LOCAL_STACK_FRAME(_hx_pos_53c70ce0871d2c87_186_reloadGraphics,"com.stencyl.models.scene.Tileset","reloadGraphics",0xdeb76755,"com.stencyl.models.scene.Tileset.reloadGraphics","com/stencyl/models/scene/Tileset.hx",186,0xf51ad821)
HX_LOCAL_STACK_FRAME(_hx_pos_53c70ce0871d2c87_208_convertPixels,"com.stencyl.models.scene.Tileset","convertPixels",0xb6a3288f,"com.stencyl.models.scene.Tileset.convertPixels","com/stencyl/models/scene/Tileset.hx",208,0xf51ad821)
HX_LOCAL_STACK_FRAME(_hx_pos_53c70ce0871d2c87_22_boot,"com.stencyl.models.scene.Tileset","boot",0x5f7e5303,"com.stencyl.models.scene.Tileset.boot","com/stencyl/models/scene/Tileset.hx",22,0xf51ad821)
namespace com{
namespace stencyl{
namespace models{
namespace scene{

void Tileset_obj::__construct(int ID,int atlasID,::String name,int framesAcross,int framesDown,int tileWidth,int tileHeight,bool readable,::Array< ::Dynamic> tiles){
            	HX_STACKFRAME(&_hx_pos_53c70ce0871d2c87_34_new)
HXLINE(  35)		super::__construct(ID,name,atlasID);
HXLINE(  37)		this->framesAcross = framesAcross;
HXLINE(  38)		this->framesDown = framesDown;
HXLINE(  39)		this->tileWidth = tileWidth;
HXLINE(  40)		this->tileHeight = tileHeight;
HXLINE(  41)		this->readableImages = readable;
HXLINE(  42)		this->tiles = tiles;
            	}

Dynamic Tileset_obj::__CreateEmpty() { return new Tileset_obj; }

void *Tileset_obj::_hx_vtable = 0;

Dynamic Tileset_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tileset_obj > _hx_result = new Tileset_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool Tileset_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x170dc54f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x170dc54f;
	} else {
		return inClassId==(int)0x4eff5f7d;
	}
}

void Tileset_obj::setupFLTileset(){
            	HX_GC_STACKFRAME(&_hx_pos_53c70ce0871d2c87_47_setupFLTileset)
HXLINE(  48)		this->sheetMap =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  50)		if (hx::IsNotNull( this->pixels )) {
HXLINE(  53)			bool tileLineFix = true;
HXLINE(  55)			if (tileLineFix) {
HXLINE(  58)				this->flTileset =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,this->convertPixels(this->pixels),null());
            			}
            			else {
HXLINE(  62)				this->flTileset =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,this->pixels,null());
            			}
HXLINE(  65)			{
HXLINE(  65)				int _g = (int)0;
HXDLIN(  65)				::Array< ::Dynamic> _g1 = this->tiles;
HXDLIN(  65)				while((_g < _g1->length)){
HXLINE(  65)					 ::com::stencyl::models::scene::Tile tile = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::Tile >();
HXDLIN(  65)					_g = (_g + (int)1);
HXLINE(  67)					if (hx::IsNull( tile )) {
HXLINE(  69)						continue;
            					}
HXLINE(  72)					int tile1 = tile->tileID;
HXDLIN(  72)					int r = ::Std_obj::_hx_int(this->tileWidth);
HXDLIN(  72)					 ::openfl::geom::Rectangle r1 = this->getImageSourceForTile(tile1,r,::Std_obj::_hx_int(this->tileHeight));
HXLINE(  74)					{
HXLINE(  74)						::Dynamic this1 = this->sheetMap;
HXDLIN(  74)						int key = tile->tileID;
HXDLIN(  74)						( ( ::haxe::ds::IntMap)(this1) )->set(key,this->flTileset->addRect(r1));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tileset_obj,setupFLTileset,(void))

 ::openfl::geom::Rectangle Tileset_obj::getImageSourceForTile(int tileID,int tileWidth,int tileHeight){
            	HX_STACKFRAME(&_hx_pos_53c70ce0871d2c87_86_getImageSourceForTile)
HXLINE(  87)		 ::com::stencyl::models::scene::Tile tile = this->tiles->__get(tileID).StaticCast<  ::com::stencyl::models::scene::Tile >();
HXLINE(  89)		if (hx::IsNull( tile )) {
HXLINE(  91)			::com::stencyl::models::scene::Tileset_obj::temp->x = (int)0;
HXLINE(  92)			::com::stencyl::models::scene::Tileset_obj::temp->y = (int)0;
HXLINE(  93)			::com::stencyl::models::scene::Tileset_obj::temp->width = (tileWidth * ::com::stencyl::Engine_obj::SCALE);
HXLINE(  94)			::com::stencyl::models::scene::Tileset_obj::temp->height = (tileHeight * ::com::stencyl::Engine_obj::SCALE);
HXLINE(  96)			return ::com::stencyl::models::scene::Tileset_obj::temp->clone();
            		}
            		else {
HXLINE( 101)			int row = ::Math_obj::floor(((Float)tile->frameIndex / (Float)this->framesAcross));
HXLINE( 102)			int col = ::Math_obj::floor(hx::Mod(tile->frameIndex,this->framesAcross));
HXLINE( 107)			{
HXLINE( 108)				Float _hx_tmp = ((col * tileWidth) * ::com::stencyl::Engine_obj::SCALE);
HXDLIN( 108)				::com::stencyl::models::scene::Tileset_obj::temp->x = ((_hx_tmp + (col * (int)2)) + (int)1);
HXLINE( 109)				Float _hx_tmp1 = ((row * tileHeight) * ::com::stencyl::Engine_obj::SCALE);
HXDLIN( 109)				::com::stencyl::models::scene::Tileset_obj::temp->y = ((_hx_tmp1 + (row * (int)2)) + (int)1);
            			}
HXLINE( 121)			::com::stencyl::models::scene::Tileset_obj::temp->width = (tileWidth * ::com::stencyl::Engine_obj::SCALE);
HXLINE( 122)			::com::stencyl::models::scene::Tileset_obj::temp->height = (tileHeight * ::com::stencyl::Engine_obj::SCALE);
HXLINE( 124)			return ::com::stencyl::models::scene::Tileset_obj::temp->clone();
            		}
HXLINE(  89)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Tileset_obj,getImageSourceForTile,return )

void Tileset_obj::loadGraphics(){
            	HX_STACKFRAME(&_hx_pos_53c70ce0871d2c87_131_loadGraphics)
HXLINE( 132)		if (this->graphicsLoaded) {
HXLINE( 133)			return;
            		}
HXLINE( 135)		this->pixels = ::com::stencyl::utils::Assets_obj::getBitmapData(((((HX_("assets/graphics/",38,e5,fb,63) + ::com::stencyl::Engine_obj::IMG_BASE) + HX_("/tileset-",a8,d3,cf,55)) + this->ID) + HX_(".png",3b,2d,bd,1e)),false);
HXLINE( 141)		{
HXLINE( 141)			int _g = (int)0;
HXDLIN( 141)			::Array< ::Dynamic> _g1 = this->tiles;
HXDLIN( 141)			while((_g < _g1->length)){
HXLINE( 141)				 ::com::stencyl::models::scene::Tile tile = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::Tile >();
HXDLIN( 141)				_g = (_g + (int)1);
HXLINE( 143)				if (hx::IsNotNull( tile )) {
HXLINE( 145)					tile->loadGraphics();
            				}
            			}
            		}
HXLINE( 150)		this->setupFLTileset();
HXLINE( 152)		bool _hx_tmp;
HXDLIN( 152)		if (::com::stencyl::Config_obj::disposeImages) {
HXLINE( 152)			_hx_tmp = !(this->readableImages);
            		}
            		else {
HXLINE( 152)			_hx_tmp = false;
            		}
HXDLIN( 152)		if (_hx_tmp) {
HXLINE( 154)			this->pixels->dispose();
            		}
HXLINE( 158)		this->graphicsLoaded = true;
            	}


void Tileset_obj::unloadGraphics(){
            	HX_STACKFRAME(&_hx_pos_53c70ce0871d2c87_162_unloadGraphics)
HXLINE( 163)		if (!(this->graphicsLoaded)) {
HXLINE( 164)			return;
            		}
HXLINE( 166)		if (this->pixels->readable) {
HXLINE( 167)			this->pixels->dispose();
            		}
HXLINE( 168)		this->pixels = null();
HXLINE( 171)		this->flTileset = null();
HXLINE( 174)		{
HXLINE( 174)			int _g = (int)0;
HXDLIN( 174)			::Array< ::Dynamic> _g1 = this->tiles;
HXDLIN( 174)			while((_g < _g1->length)){
HXLINE( 174)				 ::com::stencyl::models::scene::Tile tile = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::Tile >();
HXDLIN( 174)				_g = (_g + (int)1);
HXLINE( 176)				if (hx::IsNotNull( tile )) {
HXLINE( 178)					tile->unloadGraphics();
            				}
            			}
            		}
HXLINE( 182)		this->graphicsLoaded = false;
            	}


void Tileset_obj::reloadGraphics(int subID){
            	HX_STACKFRAME(&_hx_pos_53c70ce0871d2c87_186_reloadGraphics)
HXLINE( 187)		if ((subID == (int)-1)) {
HXLINE( 189)			this->unloadGraphics();
HXLINE( 190)			this->loadGraphics();
HXLINE( 192)			{
HXLINE( 192)				int _g = (int)0;
HXDLIN( 192)				::Array< ::Dynamic> _g1 = this->tiles;
HXDLIN( 192)				while((_g < _g1->length)){
HXLINE( 192)					 ::com::stencyl::models::scene::Tile t = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::Tile >();
HXDLIN( 192)					_g = (_g + (int)1);
HXDLIN( 192)					if (hx::IsNotNull( t )) {
HXLINE( 192)						t->updateSource = true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 196)			 ::com::stencyl::models::scene::Tile tile = this->tiles->__get(subID).StaticCast<  ::com::stencyl::models::scene::Tile >();
HXLINE( 197)			if (hx::IsNotNull( tile )) {
HXLINE( 199)				tile->unloadGraphics();
HXLINE( 200)				tile->loadGraphics();
            			}
            		}
HXLINE( 204)		::com::stencyl::Engine_obj::engine->tileUpdated = true;
            	}


 ::openfl::display::BitmapData Tileset_obj::convertPixels( ::openfl::display::BitmapData oldPixels){
            	HX_GC_STACKFRAME(&_hx_pos_53c70ce0871d2c87_208_convertPixels)
HXLINE( 209)		int scaledTileWidth = ::Std_obj::_hx_int((this->tileWidth * ::com::stencyl::Engine_obj::SCALE));
HXLINE( 210)		int scaledTileHeight = ::Std_obj::_hx_int((this->tileHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE( 211)		int widthInTiles = ::Std_obj::_hx_int(((Float)oldPixels->width / (Float)scaledTileWidth));
HXLINE( 212)		int heightInTiles = ::Std_obj::_hx_int(((Float)oldPixels->height / (Float)scaledTileHeight));
HXLINE( 213)		int oldPixels1 = oldPixels->width;
HXDLIN( 213)		int newWidth = ::Std_obj::_hx_int((oldPixels1 + (widthInTiles * (int)2)));
HXLINE( 214)		int oldPixels2 = oldPixels->height;
HXDLIN( 214)		int newHeight = ::Std_obj::_hx_int((oldPixels2 + (heightInTiles * (int)2)));
HXLINE( 215)		 ::openfl::display::BitmapData tempPixels =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,newWidth,newHeight,true,(int)0);
HXLINE( 216)		int heightIndex;
HXLINE( 217)		int widthIndex;
HXLINE( 218)		int pointX;
HXLINE( 219)		int pointY;
HXLINE( 220)		 ::openfl::geom::Rectangle rect;
HXLINE( 221)		 ::openfl::geom::Point point;
HXLINE( 224)		heightIndex = (int)0;
HXLINE( 225)		while((heightIndex < heightInTiles)){
HXLINE( 227)			widthIndex = (int)0;
HXLINE( 228)			while((widthIndex < widthInTiles)){
HXLINE( 230)				pointX = ::Std_obj::_hx_int((((widthIndex * scaledTileWidth) + (widthIndex * (int)2)) + (int)1));
HXLINE( 231)				pointY = ::Std_obj::_hx_int((((heightIndex * scaledTileHeight) + (heightIndex * (int)2)) + (int)1));
HXLINE( 232)				rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(widthIndex * scaledTileWidth),(heightIndex * scaledTileHeight),scaledTileWidth,scaledTileHeight);
HXLINE( 233)				point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,pointX,pointY);
HXLINE( 234)				tempPixels->copyPixels(oldPixels,rect,point,null(),null(),null());
HXLINE( 235)				widthIndex = (widthIndex + (int)1);
            			}
HXLINE( 237)			heightIndex = (heightIndex + (int)1);
            		}
HXLINE( 240)		int index0;
HXLINE( 241)		int tilePixel;
HXLINE( 244)		heightIndex = (int)0;
HXLINE( 245)		while((heightIndex < heightInTiles)){
HXLINE( 247)			widthIndex = (int)0;
HXLINE( 248)			while((widthIndex < widthInTiles)){
HXLINE( 250)				pointX = ::Std_obj::_hx_int((((widthIndex * scaledTileWidth) + (widthIndex * (int)2)) + (int)1));
HXLINE( 251)				pointY = ::Std_obj::_hx_int((((heightIndex * scaledTileHeight) + (heightIndex * (int)2)) + (int)1));
HXLINE( 253)				index0 = (int)0;
HXLINE( 254)				while((index0 < scaledTileWidth)){
HXLINE( 257)					tilePixel = tempPixels->getPixel32((pointX + index0),pointY);
HXLINE( 258)					tempPixels->setPixel32((pointX + index0),(pointY - (int)1),tilePixel);
HXLINE( 261)					tilePixel = tempPixels->getPixel32((pointX + index0),((pointY + scaledTileHeight) - (int)1));
HXLINE( 262)					tempPixels->setPixel32((pointX + index0),(pointY + scaledTileHeight),tilePixel);
HXLINE( 264)					index0 = (index0 + (int)1);
            				}
HXLINE( 267)				index0 = (int)0;
HXLINE( 268)				while((index0 < scaledTileHeight)){
HXLINE( 271)					tilePixel = tempPixels->getPixel32(pointX,(pointY + index0));
HXLINE( 272)					tempPixels->setPixel32((pointX - (int)1),(pointY + index0),tilePixel);
HXLINE( 275)					tilePixel = tempPixels->getPixel32(((pointX + scaledTileWidth) - (int)1),(pointY + index0));
HXLINE( 276)					tempPixels->setPixel32((pointX + scaledTileWidth),(pointY + index0),tilePixel);
HXLINE( 278)					index0 = (index0 + (int)1);
            				}
HXLINE( 280)				widthIndex = (widthIndex + (int)1);
            			}
HXLINE( 282)			heightIndex = (heightIndex + (int)1);
            		}
HXLINE( 285)		return tempPixels;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tileset_obj,convertPixels,return )

 ::openfl::geom::Rectangle Tileset_obj::temp;


hx::ObjectPtr< Tileset_obj > Tileset_obj::__new(int ID,int atlasID,::String name,int framesAcross,int framesDown,int tileWidth,int tileHeight,bool readable,::Array< ::Dynamic> tiles) {
	hx::ObjectPtr< Tileset_obj > __this = new Tileset_obj();
	__this->__construct(ID,atlasID,name,framesAcross,framesDown,tileWidth,tileHeight,readable,tiles);
	return __this;
}

hx::ObjectPtr< Tileset_obj > Tileset_obj::__alloc(hx::Ctx *_hx_ctx,int ID,int atlasID,::String name,int framesAcross,int framesDown,int tileWidth,int tileHeight,bool readable,::Array< ::Dynamic> tiles) {
	Tileset_obj *__this = (Tileset_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tileset_obj), true, "com.stencyl.models.scene.Tileset"));
	*(void **)__this = Tileset_obj::_hx_vtable;
	__this->__construct(ID,atlasID,name,framesAcross,framesDown,tileWidth,tileHeight,readable,tiles);
	return __this;
}

Tileset_obj::Tileset_obj()
{
}

void Tileset_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tileset);
	HX_MARK_MEMBER_NAME(framesAcross,"framesAcross");
	HX_MARK_MEMBER_NAME(framesDown,"framesDown");
	HX_MARK_MEMBER_NAME(tileWidth,"tileWidth");
	HX_MARK_MEMBER_NAME(tileHeight,"tileHeight");
	HX_MARK_MEMBER_NAME(tiles,"tiles");
	HX_MARK_MEMBER_NAME(readableImages,"readableImages");
	HX_MARK_MEMBER_NAME(pixels,"pixels");
	HX_MARK_MEMBER_NAME(graphicsLoaded,"graphicsLoaded");
	HX_MARK_MEMBER_NAME(flTileset,"flTileset");
	HX_MARK_MEMBER_NAME(sheetMap,"sheetMap");
	 ::com::stencyl::models::Resource_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Tileset_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(framesAcross,"framesAcross");
	HX_VISIT_MEMBER_NAME(framesDown,"framesDown");
	HX_VISIT_MEMBER_NAME(tileWidth,"tileWidth");
	HX_VISIT_MEMBER_NAME(tileHeight,"tileHeight");
	HX_VISIT_MEMBER_NAME(tiles,"tiles");
	HX_VISIT_MEMBER_NAME(readableImages,"readableImages");
	HX_VISIT_MEMBER_NAME(pixels,"pixels");
	HX_VISIT_MEMBER_NAME(graphicsLoaded,"graphicsLoaded");
	HX_VISIT_MEMBER_NAME(flTileset,"flTileset");
	HX_VISIT_MEMBER_NAME(sheetMap,"sheetMap");
	 ::com::stencyl::models::Resource_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Tileset_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tiles") ) { return hx::Val( tiles ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pixels") ) { return hx::Val( pixels ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sheetMap") ) { return hx::Val( sheetMap ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileWidth") ) { return hx::Val( tileWidth ); }
		if (HX_FIELD_EQ(inName,"flTileset") ) { return hx::Val( flTileset ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"framesDown") ) { return hx::Val( framesDown ); }
		if (HX_FIELD_EQ(inName,"tileHeight") ) { return hx::Val( tileHeight ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"framesAcross") ) { return hx::Val( framesAcross ); }
		if (HX_FIELD_EQ(inName,"loadGraphics") ) { return hx::Val( loadGraphics_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convertPixels") ) { return hx::Val( convertPixels_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"readableImages") ) { return hx::Val( readableImages ); }
		if (HX_FIELD_EQ(inName,"graphicsLoaded") ) { return hx::Val( graphicsLoaded ); }
		if (HX_FIELD_EQ(inName,"setupFLTileset") ) { return hx::Val( setupFLTileset_dyn() ); }
		if (HX_FIELD_EQ(inName,"unloadGraphics") ) { return hx::Val( unloadGraphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadGraphics") ) { return hx::Val( reloadGraphics_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getImageSourceForTile") ) { return hx::Val( getImageSourceForTile_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Tileset_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { outValue = ( temp ); return true; }
	}
	return false;
}

hx::Val Tileset_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tiles") ) { tiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pixels") ) { pixels=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sheetMap") ) { sheetMap=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileWidth") ) { tileWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flTileset") ) { flTileset=inValue.Cast<  ::openfl::display::Tileset >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"framesDown") ) { framesDown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileHeight") ) { tileHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"framesAcross") ) { framesAcross=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"readableImages") ) { readableImages=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"graphicsLoaded") ) { graphicsLoaded=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Tileset_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { temp=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
	}
	return false;
}

void Tileset_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("framesAcross","\xc5","\xc3","\xea","\xca"));
	outFields->push(HX_HCSTRING("framesDown","\x28","\x9f","\x54","\xb4"));
	outFields->push(HX_HCSTRING("tileWidth","\xf8","\x13","\xbe","\x55"));
	outFields->push(HX_HCSTRING("tileHeight","\xb5","\xdd","\xe2","\x66"));
	outFields->push(HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10"));
	outFields->push(HX_HCSTRING("readableImages","\xc8","\x74","\x93","\xcf"));
	outFields->push(HX_HCSTRING("pixels","\x2d","\xef","\xa9","\x8c"));
	outFields->push(HX_HCSTRING("graphicsLoaded","\x30","\xdf","\x3a","\xab"));
	outFields->push(HX_HCSTRING("flTileset","\x8e","\xa4","\x5c","\x40"));
	outFields->push(HX_HCSTRING("sheetMap","\x3d","\x0d","\xcd","\x6c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Tileset_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Tileset_obj,framesAcross),HX_HCSTRING("framesAcross","\xc5","\xc3","\xea","\xca")},
	{hx::fsInt,(int)offsetof(Tileset_obj,framesDown),HX_HCSTRING("framesDown","\x28","\x9f","\x54","\xb4")},
	{hx::fsInt,(int)offsetof(Tileset_obj,tileWidth),HX_HCSTRING("tileWidth","\xf8","\x13","\xbe","\x55")},
	{hx::fsInt,(int)offsetof(Tileset_obj,tileHeight),HX_HCSTRING("tileHeight","\xb5","\xdd","\xe2","\x66")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Tileset_obj,tiles),HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10")},
	{hx::fsBool,(int)offsetof(Tileset_obj,readableImages),HX_HCSTRING("readableImages","\xc8","\x74","\x93","\xcf")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(Tileset_obj,pixels),HX_HCSTRING("pixels","\x2d","\xef","\xa9","\x8c")},
	{hx::fsBool,(int)offsetof(Tileset_obj,graphicsLoaded),HX_HCSTRING("graphicsLoaded","\x30","\xdf","\x3a","\xab")},
	{hx::fsObject /*::openfl::display::Tileset*/ ,(int)offsetof(Tileset_obj,flTileset),HX_HCSTRING("flTileset","\x8e","\xa4","\x5c","\x40")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Tileset_obj,sheetMap),HX_HCSTRING("sheetMap","\x3d","\x0d","\xcd","\x6c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Tileset_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Tileset_obj::temp,HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Tileset_obj_sMemberFields[] = {
	HX_HCSTRING("framesAcross","\xc5","\xc3","\xea","\xca"),
	HX_HCSTRING("framesDown","\x28","\x9f","\x54","\xb4"),
	HX_HCSTRING("tileWidth","\xf8","\x13","\xbe","\x55"),
	HX_HCSTRING("tileHeight","\xb5","\xdd","\xe2","\x66"),
	HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10"),
	HX_HCSTRING("readableImages","\xc8","\x74","\x93","\xcf"),
	HX_HCSTRING("pixels","\x2d","\xef","\xa9","\x8c"),
	HX_HCSTRING("graphicsLoaded","\x30","\xdf","\x3a","\xab"),
	HX_HCSTRING("flTileset","\x8e","\xa4","\x5c","\x40"),
	HX_HCSTRING("sheetMap","\x3d","\x0d","\xcd","\x6c"),
	HX_HCSTRING("setupFLTileset","\x71","\x5a","\xa8","\x85"),
	HX_HCSTRING("getImageSourceForTile","\x17","\x85","\x42","\x4b"),
	HX_HCSTRING("loadGraphics","\x11","\xe5","\xd0","\xcb"),
	HX_HCSTRING("unloadGraphics","\xea","\xec","\xbd","\xbd"),
	HX_HCSTRING("reloadGraphics","\x44","\x89","\xf1","\x01"),
	HX_HCSTRING("convertPixels","\x80","\xd9","\x03","\xc8"),
	::String(null()) };

static void Tileset_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tileset_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Tileset_obj::temp,"temp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tileset_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tileset_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Tileset_obj::temp,"temp");
};

#endif

hx::Class Tileset_obj::__mClass;

static ::String Tileset_obj_sStaticFields[] = {
	HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c"),
	::String(null())
};

void Tileset_obj::__register()
{
	hx::Object *dummy = new Tileset_obj;
	Tileset_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.scene.Tileset","\x3d","\x03","\x26","\x4a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tileset_obj::__GetStatic;
	__mClass->mSetStaticField = &Tileset_obj::__SetStatic;
	__mClass->mMarkFunc = Tileset_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Tileset_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tileset_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tileset_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tileset_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tileset_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tileset_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Tileset_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_53c70ce0871d2c87_22_boot)
HXDLIN(  22)		temp =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace scene
