// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_84ae6b10989f8fd6_12_new,"com.stencyl.graphics.shaders.BasicShader","new",0x83a9a7f1,"com.stencyl.graphics.shaders.BasicShader.new","com/stencyl/graphics/shaders/BasicShader.hx",12,0x4dd9ae5f)
HX_LOCAL_STACK_FRAME(_hx_pos_84ae6b10989f8fd6_17_setProperty,"com.stencyl.graphics.shaders.BasicShader","setProperty",0x76da62a8,"com.stencyl.graphics.shaders.BasicShader.setProperty","com/stencyl/graphics/shaders/BasicShader.hx",17,0x4dd9ae5f)
HX_LOCAL_STACK_FRAME(_hx_pos_84ae6b10989f8fd6_22_getProperty,"com.stencyl.graphics.shaders.BasicShader","getProperty",0x6c6d5b9c,"com.stencyl.graphics.shaders.BasicShader.getProperty","com/stencyl/graphics/shaders/BasicShader.hx",22,0x4dd9ae5f)
HX_LOCAL_STACK_FRAME(_hx_pos_84ae6b10989f8fd6_27_tweenProperty,"com.stencyl.graphics.shaders.BasicShader","tweenProperty",0xb39ee8b1,"com.stencyl.graphics.shaders.BasicShader.tweenProperty","com/stencyl/graphics/shaders/BasicShader.hx",27,0x4dd9ae5f)
HX_LOCAL_STACK_FRAME(_hx_pos_84ae6b10989f8fd6_32_enable,"com.stencyl.graphics.shaders.BasicShader","enable",0xf50a2792,"com.stencyl.graphics.shaders.BasicShader.enable","com/stencyl/graphics/shaders/BasicShader.hx",32,0x4dd9ae5f)
HX_LOCAL_STACK_FRAME(_hx_pos_84ae6b10989f8fd6_46_disable,"com.stencyl.graphics.shaders.BasicShader","disable",0xa6ffddf9,"com.stencyl.graphics.shaders.BasicShader.disable","com/stencyl/graphics/shaders/BasicShader.hx",46,0x4dd9ae5f)
HX_LOCAL_STACK_FRAME(_hx_pos_84ae6b10989f8fd6_52_setTimeScale,"com.stencyl.graphics.shaders.BasicShader","setTimeScale",0xb0f4918a,"com.stencyl.graphics.shaders.BasicShader.setTimeScale","com/stencyl/graphics/shaders/BasicShader.hx",52,0x4dd9ae5f)
HX_LOCAL_STACK_FRAME(_hx_pos_84ae6b10989f8fd6_57_combine,"com.stencyl.graphics.shaders.BasicShader","combine",0x6fd59e90,"com.stencyl.graphics.shaders.BasicShader.combine","com/stencyl/graphics/shaders/BasicShader.hx",57,0x4dd9ae5f)
namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{

void BasicShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_84ae6b10989f8fd6_12_new)
            	}

Dynamic BasicShader_obj::__CreateEmpty() { return new BasicShader_obj; }

void *BasicShader_obj::_hx_vtable = 0;

Dynamic BasicShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BasicShader_obj > _hx_result = new BasicShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BasicShader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x488ca67b;
}

void BasicShader_obj::setProperty(::String name, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_84ae6b10989f8fd6_17_setProperty)
HXDLIN(  17)		this->model->setUniform(name,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BasicShader_obj,setProperty,(void))

 ::Dynamic BasicShader_obj::getProperty(::String name){
            	HX_STACKFRAME(&_hx_pos_84ae6b10989f8fd6_22_getProperty)
HXDLIN(  22)		return this->model->getUniform(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicShader_obj,getProperty,return )

void BasicShader_obj::tweenProperty(::String name,Float targetValue,hx::Null< Float >  __o_duration, ::Dynamic easing){
Float duration = __o_duration.Default(1);
            	HX_STACKFRAME(&_hx_pos_84ae6b10989f8fd6_27_tweenProperty)
HXDLIN(  27)		this->model->tweenUniform(name,targetValue,duration,( ( ::com::stencyl::utils::motion::EasingFunction)(easing) ));
            	}


HX_DEFINE_DYNAMIC_FUNC4(BasicShader_obj,tweenProperty,(void))

void BasicShader_obj::enable(){
            	HX_STACKFRAME(&_hx_pos_84ae6b10989f8fd6_32_enable)
HXDLIN(  32)		::com::stencyl::Engine_obj::engine->addShader(this->model);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicShader_obj,enable,(void))

void BasicShader_obj::disable(){
            	HX_STACKFRAME(&_hx_pos_84ae6b10989f8fd6_46_disable)
HXDLIN(  46)		::com::stencyl::Engine_obj::engine->clearShaders();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BasicShader_obj,disable,(void))

void BasicShader_obj::setTimeScale(Float amount){
            	HX_STACKFRAME(&_hx_pos_84ae6b10989f8fd6_52_setTimeScale)
HXDLIN(  52)		this->model->timeScale = amount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicShader_obj,setTimeScale,(void))

 ::com::stencyl::graphics::shaders::BasicShader BasicShader_obj::combine( ::com::stencyl::graphics::shaders::BasicShader shader){
            	HX_STACKFRAME(&_hx_pos_84ae6b10989f8fd6_57_combine)
HXLINE(  58)		this->multipassTarget = shader;
HXLINE(  59)		shader->multipassParent = hx::ObjectPtr<OBJ_>(this);
HXLINE(  60)		return shader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BasicShader_obj,combine,return )


hx::ObjectPtr< BasicShader_obj > BasicShader_obj::__new() {
	hx::ObjectPtr< BasicShader_obj > __this = new BasicShader_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BasicShader_obj > BasicShader_obj::__alloc(hx::Ctx *_hx_ctx) {
	BasicShader_obj *__this = (BasicShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BasicShader_obj), true, "com.stencyl.graphics.shaders.BasicShader"));
	*(void **)__this = BasicShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BasicShader_obj::BasicShader_obj()
{
}

void BasicShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BasicShader);
	HX_MARK_MEMBER_NAME(multipassParent,"multipassParent");
	HX_MARK_MEMBER_NAME(multipassTarget,"multipassTarget");
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_END_CLASS();
}

void BasicShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(multipassParent,"multipassParent");
	HX_VISIT_MEMBER_NAME(multipassTarget,"multipassTarget");
	HX_VISIT_MEMBER_NAME(model,"model");
}

hx::Val BasicShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return hx::Val( model ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"enable") ) { return hx::Val( enable_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"disable") ) { return hx::Val( disable_dyn() ); }
		if (HX_FIELD_EQ(inName,"combine") ) { return hx::Val( combine_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setProperty") ) { return hx::Val( setProperty_dyn() ); }
		if (HX_FIELD_EQ(inName,"getProperty") ) { return hx::Val( getProperty_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setTimeScale") ) { return hx::Val( setTimeScale_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tweenProperty") ) { return hx::Val( tweenProperty_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"multipassParent") ) { return hx::Val( multipassParent ); }
		if (HX_FIELD_EQ(inName,"multipassTarget") ) { return hx::Val( multipassTarget ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BasicShader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast<  ::com::stencyl::graphics::shaders::PostProcess >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"multipassParent") ) { multipassParent=inValue.Cast<  ::com::stencyl::graphics::shaders::BasicShader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"multipassTarget") ) { multipassTarget=inValue.Cast<  ::com::stencyl::graphics::shaders::BasicShader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BasicShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("multipassParent","\x94","\x0c","\x74","\x0b"));
	outFields->push(HX_HCSTRING("multipassTarget","\xbb","\xfa","\xe2","\xa4"));
	outFields->push(HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BasicShader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::com::stencyl::graphics::shaders::BasicShader*/ ,(int)offsetof(BasicShader_obj,multipassParent),HX_HCSTRING("multipassParent","\x94","\x0c","\x74","\x0b")},
	{hx::fsObject /*::com::stencyl::graphics::shaders::BasicShader*/ ,(int)offsetof(BasicShader_obj,multipassTarget),HX_HCSTRING("multipassTarget","\xbb","\xfa","\xe2","\xa4")},
	{hx::fsObject /*::com::stencyl::graphics::shaders::PostProcess*/ ,(int)offsetof(BasicShader_obj,model),HX_HCSTRING("model","\xa9","\x23","\x58","\x0c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BasicShader_obj_sStaticStorageInfo = 0;
#endif

static ::String BasicShader_obj_sMemberFields[] = {
	HX_HCSTRING("multipassParent","\x94","\x0c","\x74","\x0b"),
	HX_HCSTRING("multipassTarget","\xbb","\xfa","\xe2","\xa4"),
	HX_HCSTRING("model","\xa9","\x23","\x58","\x0c"),
	HX_HCSTRING("setProperty","\x17","\x12","\x99","\xdc"),
	HX_HCSTRING("getProperty","\x0b","\x0b","\x2c","\xd2"),
	HX_HCSTRING("tweenProperty","\xe0","\x91","\xfb","\x09"),
	HX_HCSTRING("enable","\x83","\xae","\x87","\xf8"),
	HX_HCSTRING("disable","\xe8","\x69","\x58","\xb1"),
	HX_HCSTRING("setTimeScale","\x3b","\x63","\x0f","\x52"),
	HX_HCSTRING("combine","\x7f","\x2a","\x2e","\x7a"),
	::String(null()) };

static void BasicShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BasicShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BasicShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BasicShader_obj::__mClass,"__mClass");
};

#endif

hx::Class BasicShader_obj::__mClass;

void BasicShader_obj::__register()
{
	hx::Object *dummy = new BasicShader_obj;
	BasicShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.shaders.BasicShader","\x7f","\xdb","\x00","\x84");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BasicShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BasicShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BasicShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BasicShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BasicShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BasicShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders
