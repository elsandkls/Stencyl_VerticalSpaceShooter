// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_io_mbs_game_MbsCollisionShape
#include <com/stencyl/io/mbs/game/MbsCollisionShape.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_shape_MbsPoint
#include <com/stencyl/io/mbs/shape/MbsPoint.h>
#endif
#ifndef INCLUDED_mbs_core_ComposedType
#include <mbs/core/ComposedType.h>
#endif
#ifndef INCLUDED_mbs_core_MbsField
#include <mbs/core/MbsField.h>
#endif
#ifndef INCLUDED_mbs_core_MbsObject
#include <mbs/core/MbsObject.h>
#endif
#ifndef INCLUDED_mbs_core_MbsType
#include <mbs/core/MbsType.h>
#endif
#ifndef INCLUDED_mbs_core_MbsTypes
#include <mbs/core/MbsTypes.h>
#endif
#ifndef INCLUDED_mbs_io_MbsIO
#include <mbs/io/MbsIO.h>
#endif
#ifndef INCLUDED_mbs_io_MbsList
#include <mbs/io/MbsList.h>
#endif
#ifndef INCLUDED_mbs_io_MbsListBase
#include <mbs/io/MbsListBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c9893438b42399e4_42_new,"com.stencyl.io.mbs.game.MbsCollisionShape","new",0xd2bb4a4c,"com.stencyl.io.mbs.game.MbsCollisionShape.new","com/stencyl/io/mbs/game/MbsCollisionShape.hx",42,0x181e4165)
HX_LOCAL_STACK_FRAME(_hx_pos_c9893438b42399e4_36_getMbsType,"com.stencyl.io.mbs.game.MbsCollisionShape","getMbsType",0x8ce022f6,"com.stencyl.io.mbs.game.MbsCollisionShape.getMbsType","com/stencyl/io/mbs/game/MbsCollisionShape.hx",36,0x181e4165)
HX_LOCAL_STACK_FRAME(_hx_pos_c9893438b42399e4_49_allocateNew,"com.stencyl.io.mbs.game.MbsCollisionShape","allocateNew",0x4be28f8f,"com.stencyl.io.mbs.game.MbsCollisionShape.allocateNew","com/stencyl/io/mbs/game/MbsCollisionShape.hx",49,0x181e4165)
HX_LOCAL_STACK_FRAME(_hx_pos_c9893438b42399e4_54_getId,"com.stencyl.io.mbs.game.MbsCollisionShape","getId",0x680b5efd,"com.stencyl.io.mbs.game.MbsCollisionShape.getId","com/stencyl/io/mbs/game/MbsCollisionShape.hx",54,0x181e4165)
HX_LOCAL_STACK_FRAME(_hx_pos_c9893438b42399e4_59_setId,"com.stencyl.io.mbs.game.MbsCollisionShape","setId",0x50da5509,"com.stencyl.io.mbs.game.MbsCollisionShape.setId","com/stencyl/io/mbs/game/MbsCollisionShape.hx",59,0x181e4165)
HX_LOCAL_STACK_FRAME(_hx_pos_c9893438b42399e4_63_getPoints,"com.stencyl.io.mbs.game.MbsCollisionShape","getPoints",0x88164e45,"com.stencyl.io.mbs.game.MbsCollisionShape.getPoints","com/stencyl/io/mbs/game/MbsCollisionShape.hx",63,0x181e4165)
HX_LOCAL_STACK_FRAME(_hx_pos_c9893438b42399e4_69_createPoints,"com.stencyl.io.mbs.game.MbsCollisionShape","createPoints",0xb98b3ad3,"com.stencyl.io.mbs.game.MbsCollisionShape.createPoints","com/stencyl/io/mbs/game/MbsCollisionShape.hx",69,0x181e4165)
HX_LOCAL_STACK_FRAME(_hx_pos_c9893438b42399e4_22_initializeType,"com.stencyl.io.mbs.game.MbsCollisionShape","initializeType",0xf0da6dbe,"com.stencyl.io.mbs.game.MbsCollisionShape.initializeType","com/stencyl/io/mbs/game/MbsCollisionShape.hx",22,0x181e4165)
HX_LOCAL_STACK_FRAME(_hx_pos_c9893438b42399e4_19_initializeType,"com.stencyl.io.mbs.game.MbsCollisionShape","initializeType",0xf0da6dbe,"com.stencyl.io.mbs.game.MbsCollisionShape.initializeType","com/stencyl/io/mbs/game/MbsCollisionShape.hx",19,0x181e4165)
HX_LOCAL_STACK_FRAME(_hx_pos_c9893438b42399e4_31_new_MbsCollisionShape_list,"com.stencyl.io.mbs.game.MbsCollisionShape","new_MbsCollisionShape_list",0xe4c6d2a3,"com.stencyl.io.mbs.game.MbsCollisionShape.new_MbsCollisionShape_list","com/stencyl/io/mbs/game/MbsCollisionShape.hx",31,0x181e4165)
namespace com{
namespace stencyl{
namespace io{
namespace mbs{
namespace game{

void MbsCollisionShape_obj::__construct(::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_c9893438b42399e4_42_new)
HXLINE(  43)		super::__construct(data);
HXLINE(  44)		 ::mbs::core::ComposedType _hx_tmp = ::com::stencyl::io::mbs::shape::MbsPoint_obj::MBS_POINT;
HXDLIN(  44)		this->_points =  ::mbs::io::MbsList_obj::__alloc( HX_CTX ,data,_hx_tmp, ::com::stencyl::io::mbs::shape::MbsPoint_obj::__alloc( HX_CTX ,data));
            	}

Dynamic MbsCollisionShape_obj::__CreateEmpty() { return new MbsCollisionShape_obj; }

void *MbsCollisionShape_obj::_hx_vtable = 0;

Dynamic MbsCollisionShape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MbsCollisionShape_obj > _hx_result = new MbsCollisionShape_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MbsCollisionShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x11be754e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x11be754e;
	} else {
		return inClassId==(int)0x17b72d64;
	}
}

 ::mbs::core::MbsType MbsCollisionShape_obj::getMbsType(){
            	HX_STACKFRAME(&_hx_pos_c9893438b42399e4_36_getMbsType)
HXDLIN(  36)		return ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::MBS_COLLISION_SHAPE;
            	}


void MbsCollisionShape_obj::allocateNew(){
            	HX_STACKFRAME(&_hx_pos_c9893438b42399e4_49_allocateNew)
HXDLIN(  49)		::Dynamic _hx_tmp = this->data;
HXDLIN(  49)		this->setAddress(::mbs::io::MbsIO_obj::allocate(_hx_tmp,::com::stencyl::io::mbs::game::MbsCollisionShape_obj::MBS_COLLISION_SHAPE->getSize()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MbsCollisionShape_obj,allocateNew,(void))

int MbsCollisionShape_obj::getId(){
            	HX_STACKFRAME(&_hx_pos_c9893438b42399e4_54_getId)
HXDLIN(  54)		::Dynamic _hx_tmp = this->data;
HXDLIN(  54)		return ::mbs::io::MbsIO_obj::readInt(_hx_tmp,(this->address + ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::id->address));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MbsCollisionShape_obj,getId,return )

void MbsCollisionShape_obj::setId(int _val){
            	HX_STACKFRAME(&_hx_pos_c9893438b42399e4_59_setId)
HXDLIN(  59)		::Dynamic _hx_tmp = this->data;
HXDLIN(  59)		::mbs::io::MbsIO_obj::writeInt(_hx_tmp,(this->address + ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::id->address),_val);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MbsCollisionShape_obj,setId,(void))

 ::mbs::io::MbsList MbsCollisionShape_obj::getPoints(){
            	HX_STACKFRAME(&_hx_pos_c9893438b42399e4_63_getPoints)
HXLINE(  64)		 ::mbs::io::MbsList _hx_tmp = this->_points;
HXDLIN(  64)		::Dynamic _hx_tmp1 = this->data;
HXDLIN(  64)		_hx_tmp->setAddress(::mbs::io::MbsIO_obj::readInt(_hx_tmp1,(this->address + ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::points->address)));
HXLINE(  65)		return this->_points;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MbsCollisionShape_obj,getPoints,return )

 ::mbs::io::MbsList MbsCollisionShape_obj::createPoints(int _length){
            	HX_STACKFRAME(&_hx_pos_c9893438b42399e4_69_createPoints)
HXLINE(  70)		this->_points->allocateNew(_length);
HXLINE(  71)		::Dynamic _hx_tmp = this->data;
HXDLIN(  71)		int _hx_tmp1 = (this->address + ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::points->address);
HXDLIN(  71)		::mbs::io::MbsIO_obj::writeInt(_hx_tmp,_hx_tmp1,this->_points->getAddress());
HXLINE(  72)		return this->_points;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MbsCollisionShape_obj,createPoints,return )

 ::mbs::core::MbsField MbsCollisionShape_obj::id;

 ::mbs::core::MbsField MbsCollisionShape_obj::points;

 ::mbs::core::ComposedType MbsCollisionShape_obj::MBS_COLLISION_SHAPE;

void MbsCollisionShape_obj::initializeType(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::mbs::core::MbsObject _hx_run(::Dynamic data){
            			HX_GC_STACKFRAME(&_hx_pos_c9893438b42399e4_22_initializeType)
HXLINE(  22)			return  ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::__alloc( HX_CTX ,data);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_c9893438b42399e4_19_initializeType)
HXLINE(  20)		if (hx::IsNotNull( ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::MBS_COLLISION_SHAPE )) {
HXLINE(  20)			return;
            		}
HXLINE(  21)		::com::stencyl::io::mbs::game::MbsCollisionShape_obj::MBS_COLLISION_SHAPE =  ::mbs::core::ComposedType_obj::__alloc( HX_CTX ,HX_("MbsCollisionShape",4d,0d,42,06));
HXLINE(  22)		::com::stencyl::io::mbs::game::MbsCollisionShape_obj::MBS_COLLISION_SHAPE->setInstantiator( ::Dynamic(new _hx_Closure_0()));
HXLINE(  24)		::com::stencyl::io::mbs::game::MbsCollisionShape_obj::id = ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::MBS_COLLISION_SHAPE->createField(HX_("id",db,5b,00,00),::mbs::core::MbsTypes_obj::INTEGER);
HXLINE(  25)		::com::stencyl::io::mbs::game::MbsCollisionShape_obj::points = ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::MBS_COLLISION_SHAPE->createField(HX_("points",23,12,2e,f7),::mbs::core::MbsTypes_obj::LIST);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MbsCollisionShape_obj,initializeType,(void))

 ::mbs::io::MbsList MbsCollisionShape_obj::new_MbsCollisionShape_list(::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_c9893438b42399e4_31_new_MbsCollisionShape_list)
HXDLIN(  31)		 ::mbs::core::ComposedType _hx_tmp = ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::MBS_COLLISION_SHAPE;
HXDLIN(  31)		return  ::mbs::io::MbsList_obj::__alloc( HX_CTX ,data,_hx_tmp, ::com::stencyl::io::mbs::game::MbsCollisionShape_obj::__alloc( HX_CTX ,data));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MbsCollisionShape_obj,new_MbsCollisionShape_list,return )


hx::ObjectPtr< MbsCollisionShape_obj > MbsCollisionShape_obj::__new(::Dynamic data) {
	hx::ObjectPtr< MbsCollisionShape_obj > __this = new MbsCollisionShape_obj();
	__this->__construct(data);
	return __this;
}

hx::ObjectPtr< MbsCollisionShape_obj > MbsCollisionShape_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic data) {
	MbsCollisionShape_obj *__this = (MbsCollisionShape_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MbsCollisionShape_obj), true, "com.stencyl.io.mbs.game.MbsCollisionShape"));
	*(void **)__this = MbsCollisionShape_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

MbsCollisionShape_obj::MbsCollisionShape_obj()
{
}

void MbsCollisionShape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MbsCollisionShape);
	HX_MARK_MEMBER_NAME(_points,"_points");
	 ::mbs::core::MbsObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MbsCollisionShape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_points,"_points");
	 ::mbs::core::MbsObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MbsCollisionShape_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"getId") ) { return hx::Val( getId_dyn() ); }
		if (HX_FIELD_EQ(inName,"setId") ) { return hx::Val( setId_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_points") ) { return hx::Val( _points ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getPoints") ) { return hx::Val( getPoints_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getMbsType") ) { return hx::Val( getMbsType_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"allocateNew") ) { return hx::Val( allocateNew_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createPoints") ) { return hx::Val( createPoints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MbsCollisionShape_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { outValue = ( id ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { outValue = ( points ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"initializeType") ) { outValue = initializeType_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"MBS_COLLISION_SHAPE") ) { outValue = ( MBS_COLLISION_SHAPE ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"new_MbsCollisionShape_list") ) { outValue = new_MbsCollisionShape_list_dyn(); return true; }
	}
	return false;
}

hx::Val MbsCollisionShape_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_points") ) { _points=inValue.Cast<  ::mbs::io::MbsList >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MbsCollisionShape_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=ioValue.Cast<  ::mbs::core::MbsField >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { points=ioValue.Cast<  ::mbs::core::MbsField >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"MBS_COLLISION_SHAPE") ) { MBS_COLLISION_SHAPE=ioValue.Cast<  ::mbs::core::ComposedType >(); return true; }
	}
	return false;
}

void MbsCollisionShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_points","\xc2","\x23","\xa5","\x65"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MbsCollisionShape_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::mbs::io::MbsList*/ ,(int)offsetof(MbsCollisionShape_obj,_points),HX_HCSTRING("_points","\xc2","\x23","\xa5","\x65")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MbsCollisionShape_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::mbs::core::MbsField*/ ,(void *) &MbsCollisionShape_obj::id,HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*::mbs::core::MbsField*/ ,(void *) &MbsCollisionShape_obj::points,HX_HCSTRING("points","\x23","\x12","\x2e","\xf7")},
	{hx::fsObject /*::mbs::core::ComposedType*/ ,(void *) &MbsCollisionShape_obj::MBS_COLLISION_SHAPE,HX_HCSTRING("MBS_COLLISION_SHAPE","\xf3","\x89","\x66","\x74")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MbsCollisionShape_obj_sMemberFields[] = {
	HX_HCSTRING("getMbsType","\x62","\x47","\xf5","\xa1"),
	HX_HCSTRING("_points","\xc2","\x23","\xa5","\x65"),
	HX_HCSTRING("allocateNew","\xa3","\x49","\x4d","\xa9"),
	HX_HCSTRING("getId","\x11","\x92","\x60","\x91"),
	HX_HCSTRING("setId","\x1d","\x88","\x2f","\x7a"),
	HX_HCSTRING("getPoints","\x59","\x9b","\x84","\x73"),
	HX_HCSTRING("createPoints","\x3f","\x52","\x83","\x19"),
	::String(null()) };

static void MbsCollisionShape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MbsCollisionShape_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MbsCollisionShape_obj::id,"id");
	HX_MARK_MEMBER_NAME(MbsCollisionShape_obj::points,"points");
	HX_MARK_MEMBER_NAME(MbsCollisionShape_obj::MBS_COLLISION_SHAPE,"MBS_COLLISION_SHAPE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MbsCollisionShape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MbsCollisionShape_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MbsCollisionShape_obj::id,"id");
	HX_VISIT_MEMBER_NAME(MbsCollisionShape_obj::points,"points");
	HX_VISIT_MEMBER_NAME(MbsCollisionShape_obj::MBS_COLLISION_SHAPE,"MBS_COLLISION_SHAPE");
};

#endif

hx::Class MbsCollisionShape_obj::__mClass;

static ::String MbsCollisionShape_obj_sStaticFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"),
	HX_HCSTRING("MBS_COLLISION_SHAPE","\xf3","\x89","\x66","\x74"),
	HX_HCSTRING("initializeType","\x2a","\x38","\x98","\x50"),
	HX_HCSTRING("new_MbsCollisionShape_list","\x0f","\x8f","\x40","\xbc"),
	::String(null())
};

void MbsCollisionShape_obj::__register()
{
	hx::Object *dummy = new MbsCollisionShape_obj;
	MbsCollisionShape_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.io.mbs.game.MbsCollisionShape","\x5a","\x74","\x25","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MbsCollisionShape_obj::__GetStatic;
	__mClass->mSetStaticField = &MbsCollisionShape_obj::__SetStatic;
	__mClass->mMarkFunc = MbsCollisionShape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MbsCollisionShape_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MbsCollisionShape_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MbsCollisionShape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MbsCollisionShape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MbsCollisionShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MbsCollisionShape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace io
} // end namespace mbs
} // end namespace game
