// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Group
#include <com/stencyl/models/actor/Group.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ab21becf30129106_11_new,"com.stencyl.models.actor.Group","new",0x5c2334e3,"com.stencyl.models.actor.Group.new","com/stencyl/models/actor/Group.hx",11,0xfa4bcc6d)
HX_LOCAL_STACK_FRAME(_hx_pos_ab21becf30129106_22_addChild,"com.stencyl.models.actor.Group","addChild",0x45bd3058,"com.stencyl.models.actor.Group.addChild","com/stencyl/models/actor/Group.hx",22,0xfa4bcc6d)
HX_LOCAL_STACK_FRAME(_hx_pos_ab21becf30129106_26_removeChild,"com.stencyl.models.actor.Group","removeChild",0xc549a63b,"com.stencyl.models.actor.Group.removeChild","com/stencyl/models/actor/Group.hx",26,0xfa4bcc6d)
HX_LOCAL_STACK_FRAME(_hx_pos_ab21becf30129106_32_toString,"com.stencyl.models.actor.Group","toString",0xbf153149,"com.stencyl.models.actor.Group.toString","com/stencyl/models/actor/Group.hx",32,0xfa4bcc6d)
namespace com{
namespace stencyl{
namespace models{
namespace actor{

void Group_obj::__construct(int ID,::String name){
            	HX_STACKFRAME(&_hx_pos_ab21becf30129106_11_new)
HXLINE(  12)		this->name = name;
HXLINE(  13)		this->ID = ID;
HXLINE(  15)		this->sID = ((((HX_("[Group ",bc,ce,dd,18) + ID) + HX_(",",2c,00,00,00)) + name) + HX_("]",5d,00,00,00));
HXLINE(  17)		this->list = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic Group_obj::__CreateEmpty() { return new Group_obj; }

void *Group_obj::_hx_vtable = 0;

Dynamic Group_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Group_obj > _hx_result = new Group_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Group_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x728bc2bf;
}

void Group_obj::addChild( ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_ab21becf30129106_22_addChild)
HXDLIN(  22)		this->list->push(a);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Group_obj,addChild,(void))

void Group_obj::removeChild( ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_ab21becf30129106_26_removeChild)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Group_obj,removeChild,(void))

::String Group_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ab21becf30129106_32_toString)
HXDLIN(  32)		return this->sID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Group_obj,toString,return )


hx::ObjectPtr< Group_obj > Group_obj::__new(int ID,::String name) {
	hx::ObjectPtr< Group_obj > __this = new Group_obj();
	__this->__construct(ID,name);
	return __this;
}

hx::ObjectPtr< Group_obj > Group_obj::__alloc(hx::Ctx *_hx_ctx,int ID,::String name) {
	Group_obj *__this = (Group_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Group_obj), true, "com.stencyl.models.actor.Group"));
	*(void **)__this = Group_obj::_hx_vtable;
	__this->__construct(ID,name);
	return __this;
}

Group_obj::Group_obj()
{
}

void Group_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Group);
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(ID,"ID");
	HX_MARK_MEMBER_NAME(sID,"sID");
	HX_MARK_END_CLASS();
}

void Group_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(ID,"ID");
	HX_VISIT_MEMBER_NAME(sID,"sID");
}

hx::Val Group_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { return hx::Val( ID ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"sID") ) { return hx::Val( sID ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list ); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Group_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { ID=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"sID") ) { sID=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Group_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"));
	outFields->push(HX_HCSTRING("sID","\x0e","\x83","\x57","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Group_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Group_obj,list),HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47")},
	{hx::fsString,(int)offsetof(Group_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(Group_obj,ID),HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00")},
	{hx::fsString,(int)offsetof(Group_obj,sID),HX_HCSTRING("sID","\x0e","\x83","\x57","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Group_obj_sStaticStorageInfo = 0;
#endif

static ::String Group_obj_sMemberFields[] = {
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"),
	HX_HCSTRING("sID","\x0e","\x83","\x57","\x00"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void Group_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Group_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Group_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Group_obj::__mClass,"__mClass");
};

#endif

hx::Class Group_obj::__mClass;

void Group_obj::__register()
{
	hx::Object *dummy = new Group_obj;
	Group_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.actor.Group","\x71","\x87","\xd0","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Group_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Group_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Group_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Group_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Group_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Group_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace actor
