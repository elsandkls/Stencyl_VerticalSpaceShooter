// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_TintShader
#include <com/stencyl/graphics/shaders/TintShader.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2acc29cee60699df_8_new,"com.stencyl.graphics.shaders.TintShader","new",0x1c28f7e6,"com.stencyl.graphics.shaders.TintShader.new","com/stencyl/graphics/shaders/TintShader.hx",8,0x720bb08a)
HX_LOCAL_STACK_FRAME(_hx_pos_2acc29cee60699df_44_setAmount,"com.stencyl.graphics.shaders.TintShader","setAmount",0xe7931720,"com.stencyl.graphics.shaders.TintShader.setAmount","com/stencyl/graphics/shaders/TintShader.hx",44,0x720bb08a)
HX_LOCAL_STACK_FRAME(_hx_pos_2acc29cee60699df_48_setColor,"com.stencyl.graphics.shaders.TintShader","setColor",0xb780ad1b,"com.stencyl.graphics.shaders.TintShader.setColor","com/stencyl/graphics/shaders/TintShader.hx",48,0x720bb08a)
namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{

void TintShader_obj::__construct(int color,hx::Null< Float >  __o_amount){
Float amount = __o_amount.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_2acc29cee60699df_8_new)
HXLINE(   9)		super::__construct();
HXLINE(  11)		::String script = HX_("\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\tuniform float amount;\n\t\t\tuniform float red;\n\t\t\tuniform float green;\n\t\t\tuniform float blue;\n\n\t\t\tvec3 _mix(vec3 a, vec3 b, float amount) \n\t\t\t{ \n\t\t\t\treturn vec3(a.x * (1.0 - amount) + b.x * amount, a.y * (1.0 - amount) + b.y * amount, a.z * (1.0 - amount) + b.z * amount); \n\t\t\t}\n\n\t\t\tvoid main() \n\t\t\t{\n\t\t\t\tvec3 color = texture2D(uImage0, vTexCoord).rgb;\n\t\t\t\tvec3 endColor = _mix(color, vec3(red, green, blue), amount);\n\t\t\t\tgl_FragColor = vec4(endColor.x, endColor.y, endColor.z, 1);\n\t\t\t}\n\t\t",e7,4b,cf,bf);
HXLINE(  36)		this->model =  ::com::stencyl::graphics::shaders::PostProcess_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),script,true);
HXLINE(  38)		this->setColor(color);
HXLINE(  39)		this->setAmount(amount);
            	}

Dynamic TintShader_obj::__CreateEmpty() { return new TintShader_obj; }

void *TintShader_obj::_hx_vtable = 0;

Dynamic TintShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TintShader_obj > _hx_result = new TintShader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TintShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x22f97578) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x22f97578;
	} else {
		return inClassId==(int)0x488ca67b;
	}
}

void TintShader_obj::setAmount(Float amount){
            	HX_STACKFRAME(&_hx_pos_2acc29cee60699df_44_setAmount)
HXDLIN(  44)		this->setProperty(HX_("amount",d8,11,03,d5),amount);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TintShader_obj,setAmount,(void))

void TintShader_obj::setColor(int color){
            	HX_STACKFRAME(&_hx_pos_2acc29cee60699df_48_setColor)
HXLINE(  49)		this->setProperty(HX_("red",51,d9,56,00),((Float)((int)((int)color >> (int)(int)16) & (int)(int)255) / (Float)((Float)255.0)));
HXLINE(  50)		this->setProperty(HX_("green",c3,0e,ed,99),((Float)((int)((int)color >> (int)(int)8) & (int)(int)255) / (Float)((Float)255.0)));
HXLINE(  51)		this->setProperty(HX_("blue",9a,42,19,41),((Float)((int)color & (int)(int)255) / (Float)((Float)255.0)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TintShader_obj,setColor,(void))


hx::ObjectPtr< TintShader_obj > TintShader_obj::__new(int color,hx::Null< Float >  __o_amount) {
	hx::ObjectPtr< TintShader_obj > __this = new TintShader_obj();
	__this->__construct(color,__o_amount);
	return __this;
}

hx::ObjectPtr< TintShader_obj > TintShader_obj::__alloc(hx::Ctx *_hx_ctx,int color,hx::Null< Float >  __o_amount) {
	TintShader_obj *__this = (TintShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TintShader_obj), true, "com.stencyl.graphics.shaders.TintShader"));
	*(void **)__this = TintShader_obj::_hx_vtable;
	__this->__construct(color,__o_amount);
	return __this;
}

TintShader_obj::TintShader_obj()
{
}

hx::Val TintShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"setColor") ) { return hx::Val( setColor_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setAmount") ) { return hx::Val( setAmount_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TintShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TintShader_obj_sStaticStorageInfo = 0;
#endif

static ::String TintShader_obj_sMemberFields[] = {
	HX_HCSTRING("setAmount","\x1a","\x87","\xaa","\x34"),
	HX_HCSTRING("setColor","\x61","\xda","\x90","\x58"),
	::String(null()) };

static void TintShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TintShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TintShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TintShader_obj::__mClass,"__mClass");
};

#endif

hx::Class TintShader_obj::__mClass;

void TintShader_obj::__register()
{
	hx::Object *dummy = new TintShader_obj;
	TintShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.shaders.TintShader","\xf4","\xcc","\xd1","\x84");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TintShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TintShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TintShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TintShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TintShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TintShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders
