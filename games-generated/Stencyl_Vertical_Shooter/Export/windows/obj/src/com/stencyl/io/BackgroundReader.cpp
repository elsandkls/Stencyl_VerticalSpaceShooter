// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_io_AbstractReader
#include <com/stencyl/io/AbstractReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_BackgroundReader
#include <com/stencyl/io/BackgroundReader.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_MbsBackground
#include <com/stencyl/io/mbs/MbsBackground.h>
#endif
#ifndef INCLUDED_com_stencyl_io_mbs_MbsResource
#include <com/stencyl/io/mbs/MbsResource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Background
#include <com/stencyl/models/Background.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_background_ImageBackground
#include <com/stencyl/models/background/ImageBackground.h>
#endif
#ifndef INCLUDED_com_stencyl_models_background_ScrollingBackground
#include <com/stencyl/models/background/ScrollingBackground.h>
#endif
#ifndef INCLUDED_mbs_core_ComposedType
#include <mbs/core/ComposedType.h>
#endif
#ifndef INCLUDED_mbs_core_MbsObject
#include <mbs/core/MbsObject.h>
#endif
#ifndef INCLUDED_mbs_core_MbsType
#include <mbs/core/MbsType.h>
#endif
#ifndef INCLUDED_mbs_io_MbsIntList
#include <mbs/io/MbsIntList.h>
#endif
#ifndef INCLUDED_mbs_io_MbsListBase
#include <mbs/io/MbsListBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_03c87b1fd69589d2_16_new,"com.stencyl.io.BackgroundReader","new",0x4179e03c,"com.stencyl.io.BackgroundReader.new","com/stencyl/io/BackgroundReader.hx",16,0x969859d5)
HX_LOCAL_STACK_FRAME(_hx_pos_03c87b1fd69589d2_21_accepts,"com.stencyl.io.BackgroundReader","accepts",0x15bb4247,"com.stencyl.io.BackgroundReader.accepts","com/stencyl/io/BackgroundReader.hx",21,0x969859d5)
HX_LOCAL_STACK_FRAME(_hx_pos_03c87b1fd69589d2_25_read,"com.stencyl.io.BackgroundReader","read",0x0bcf1bfa,"com.stencyl.io.BackgroundReader.read","com/stencyl/io/BackgroundReader.hx",25,0x969859d5)
namespace com{
namespace stencyl{
namespace io{

void BackgroundReader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_03c87b1fd69589d2_16_new)
            	}

Dynamic BackgroundReader_obj::__CreateEmpty() { return new BackgroundReader_obj; }

void *BackgroundReader_obj::_hx_vtable = 0;

Dynamic BackgroundReader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BackgroundReader_obj > _hx_result = new BackgroundReader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BackgroundReader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3e67d3e2;
}

static ::com::stencyl::io::AbstractReader_obj _hx_com_stencyl_io_BackgroundReader__hx_com_stencyl_io_AbstractReader= {
	( bool (hx::Object::*)(::String))&::com::stencyl::io::BackgroundReader_obj::accepts,
	(  ::com::stencyl::models::Resource (hx::Object::*)( ::Dynamic))&::com::stencyl::io::BackgroundReader_obj::read,
};

void *BackgroundReader_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf08c5996: return &_hx_com_stencyl_io_BackgroundReader__hx_com_stencyl_io_AbstractReader;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

bool BackgroundReader_obj::accepts(::String type){
            	HX_STACKFRAME(&_hx_pos_03c87b1fd69589d2_21_accepts)
HXDLIN(  21)		return (type == ::com::stencyl::io::mbs::MbsBackground_obj::MBS_BACKGROUND->getName());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundReader_obj,accepts,return )

 ::com::stencyl::models::Resource BackgroundReader_obj::read( ::Dynamic obj){
            	HX_GC_STACKFRAME(&_hx_pos_03c87b1fd69589d2_25_read)
HXLINE(  28)		 ::com::stencyl::io::mbs::MbsBackground r = ( ( ::com::stencyl::io::mbs::MbsBackground)(obj) );
HXLINE(  30)		int id = r->getId();
HXLINE(  31)		int atlasID = r->getAtlasID();
HXLINE(  32)		::String name = r->getName();
HXLINE(  34)		Float scrollX = r->getXVelocity();
HXLINE(  35)		Float scrollY = r->getYVelocity();
HXLINE(  36)		Float parallaxX = r->getXParallaxFactor();
HXLINE(  37)		Float parallaxY = r->getYParallaxFactor();
HXLINE(  38)		int numFrames = r->getNumFrames();
HXLINE(  39)		::Array< int > durations = ::Array_obj< int >::__new();
HXLINE(  40)		::cpp::VirtualArray frameData = ::cpp::VirtualArray_obj::__new();
HXLINE(  42)		if ((numFrames > (int)0)) {
HXLINE(  44)			 ::mbs::io::MbsIntList intList = r->getDurations();
HXLINE(  45)			{
HXLINE(  45)				int _g1 = (int)0;
HXDLIN(  45)				int _g = intList->length();
HXDLIN(  45)				while((_g1 < _g)){
HXLINE(  45)					_g1 = (_g1 + (int)1);
HXDLIN(  45)					int i = (_g1 - (int)1);
HXLINE(  46)					durations->push(intList->readInt());
            				}
            			}
            		}
HXLINE(  49)		bool repeats = r->getRepeats();
HXLINE(  51)		bool _hx_tmp;
HXDLIN(  51)		if ((scrollX == (int)0)) {
HXLINE(  51)			_hx_tmp = (scrollY != (int)0);
            		}
            		else {
HXLINE(  51)			_hx_tmp = true;
            		}
HXDLIN(  51)		if (_hx_tmp) {
HXLINE(  53)			return  ::com::stencyl::models::background::ScrollingBackground_obj::__alloc( HX_CTX ,id,atlasID,name,durations,parallaxX,parallaxY,repeats,scrollX,scrollY);
            		}
            		else {
HXLINE(  58)			return  ::com::stencyl::models::background::ImageBackground_obj::__alloc( HX_CTX ,id,atlasID,name,durations,parallaxX,parallaxY,repeats);
            		}
HXLINE(  51)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundReader_obj,read,return )


hx::ObjectPtr< BackgroundReader_obj > BackgroundReader_obj::__new() {
	hx::ObjectPtr< BackgroundReader_obj > __this = new BackgroundReader_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BackgroundReader_obj > BackgroundReader_obj::__alloc(hx::Ctx *_hx_ctx) {
	BackgroundReader_obj *__this = (BackgroundReader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BackgroundReader_obj), false, "com.stencyl.io.BackgroundReader"));
	*(void **)__this = BackgroundReader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BackgroundReader_obj::BackgroundReader_obj()
{
}

hx::Val BackgroundReader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"accepts") ) { return hx::Val( accepts_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BackgroundReader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BackgroundReader_obj_sStaticStorageInfo = 0;
#endif

static ::String BackgroundReader_obj_sMemberFields[] = {
	HX_HCSTRING("accepts","\x6b","\x14","\xba","\x9a"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	::String(null()) };

static void BackgroundReader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BackgroundReader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BackgroundReader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BackgroundReader_obj::__mClass,"__mClass");
};

#endif

hx::Class BackgroundReader_obj::__mClass;

void BackgroundReader_obj::__register()
{
	hx::Object *dummy = new BackgroundReader_obj;
	BackgroundReader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.io.BackgroundReader","\x4a","\x52","\x86","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BackgroundReader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BackgroundReader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BackgroundReader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BackgroundReader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BackgroundReader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BackgroundReader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace io
