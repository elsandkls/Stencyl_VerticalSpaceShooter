// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_RegionDef
#include <com/stencyl/models/scene/RegionDef.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d54f8c0cffcb592e_19_new,"com.stencyl.models.scene.RegionDef","new",0x249afd6c,"com.stencyl.models.scene.RegionDef.new","com/stencyl/models/scene/RegionDef.hx",19,0xa0c86804)
namespace com{
namespace stencyl{
namespace models{
namespace scene{

void RegionDef_obj::__construct(::Array< ::Dynamic> shapes,int ID,::String name,Float x,Float y,hx::Null< int >  __o_shapeID, ::openfl::geom::Rectangle simpleBounds){
int shapeID = __o_shapeID.Default(0);
            	HX_STACKFRAME(&_hx_pos_d54f8c0cffcb592e_19_new)
HXLINE(  20)		this->x = x;
HXLINE(  21)		this->y = y;
HXLINE(  23)		this->shapes = shapes;
HXLINE(  24)		this->shape = this->shapes->__get((int)0).StaticCast<  ::box2D::collision::shapes::B2Shape >();
HXLINE(  25)		this->ID = ID;
HXLINE(  26)		this->name = name;
HXLINE(  27)		this->shapeID = shapeID;
HXLINE(  28)		this->simpleBounds = simpleBounds;
            	}

Dynamic RegionDef_obj::__CreateEmpty() { return new RegionDef_obj; }

void *RegionDef_obj::_hx_vtable = 0;

Dynamic RegionDef_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RegionDef_obj > _hx_result = new RegionDef_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool RegionDef_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3c18771e;
}


hx::ObjectPtr< RegionDef_obj > RegionDef_obj::__new(::Array< ::Dynamic> shapes,int ID,::String name,Float x,Float y,hx::Null< int >  __o_shapeID, ::openfl::geom::Rectangle simpleBounds) {
	hx::ObjectPtr< RegionDef_obj > __this = new RegionDef_obj();
	__this->__construct(shapes,ID,name,x,y,__o_shapeID,simpleBounds);
	return __this;
}

hx::ObjectPtr< RegionDef_obj > RegionDef_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> shapes,int ID,::String name,Float x,Float y,hx::Null< int >  __o_shapeID, ::openfl::geom::Rectangle simpleBounds) {
	RegionDef_obj *__this = (RegionDef_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RegionDef_obj), true, "com.stencyl.models.scene.RegionDef"));
	*(void **)__this = RegionDef_obj::_hx_vtable;
	__this->__construct(shapes,ID,name,x,y,__o_shapeID,simpleBounds);
	return __this;
}

RegionDef_obj::RegionDef_obj()
{
}

void RegionDef_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RegionDef);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(shape,"shape");
	HX_MARK_MEMBER_NAME(shapes,"shapes");
	HX_MARK_MEMBER_NAME(ID,"ID");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(shapeID,"shapeID");
	HX_MARK_MEMBER_NAME(simpleBounds,"simpleBounds");
	HX_MARK_END_CLASS();
}

void RegionDef_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(shape,"shape");
	HX_VISIT_MEMBER_NAME(shapes,"shapes");
	HX_VISIT_MEMBER_NAME(ID,"ID");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(shapeID,"shapeID");
	HX_VISIT_MEMBER_NAME(simpleBounds,"simpleBounds");
}

hx::Val RegionDef_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { return hx::Val( ID ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { return hx::Val( shape ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { return hx::Val( shapes ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shapeID") ) { return hx::Val( shapeID ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"simpleBounds") ) { return hx::Val( simpleBounds ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RegionDef_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ID") ) { ID=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { shape=inValue.Cast<  ::box2D::collision::shapes::B2Shape >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { shapes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shapeID") ) { shapeID=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"simpleBounds") ) { simpleBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RegionDef_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"));
	outFields->push(HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"));
	outFields->push(HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("shapeID","\x3c","\xed","\x74","\x67"));
	outFields->push(HX_HCSTRING("simpleBounds","\x47","\x30","\x7d","\xb1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RegionDef_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(RegionDef_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(RegionDef_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsObject /*::box2D::collision::shapes::B2Shape*/ ,(int)offsetof(RegionDef_obj,shape),HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(RegionDef_obj,shapes),HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d")},
	{hx::fsInt,(int)offsetof(RegionDef_obj,ID),HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00")},
	{hx::fsString,(int)offsetof(RegionDef_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(RegionDef_obj,shapeID),HX_HCSTRING("shapeID","\x3c","\xed","\x74","\x67")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(RegionDef_obj,simpleBounds),HX_HCSTRING("simpleBounds","\x47","\x30","\x7d","\xb1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RegionDef_obj_sStaticStorageInfo = 0;
#endif

static ::String RegionDef_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"),
	HX_HCSTRING("shapes","\x32","\xda","\x29","\x1d"),
	HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("shapeID","\x3c","\xed","\x74","\x67"),
	HX_HCSTRING("simpleBounds","\x47","\x30","\x7d","\xb1"),
	::String(null()) };

static void RegionDef_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RegionDef_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RegionDef_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RegionDef_obj::__mClass,"__mClass");
};

#endif

hx::Class RegionDef_obj::__mClass;

void RegionDef_obj::__register()
{
	hx::Object *dummy = new RegionDef_obj;
	RegionDef_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.scene.RegionDef","\x7a","\x17","\x25","\x99");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RegionDef_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RegionDef_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RegionDef_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RegionDef_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RegionDef_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RegionDef_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace scene
