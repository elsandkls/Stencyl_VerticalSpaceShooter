// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_event_EventMaster
#include <com/stencyl/event/EventMaster.h>
#endif
#ifndef INCLUDED_com_stencyl_event_NativeListener
#include <com/stencyl/event/NativeListener.h>
#endif
#ifndef INCLUDED_com_stencyl_event_StencylEvent
#include <com/stencyl/event/StencylEvent.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e942f37a47502b9a_10_new,"com.stencyl.event.NativeListener","new",0xe5cea520,"com.stencyl.event.NativeListener.new","com/stencyl/event/NativeListener.hx",10,0x3f81c46d)
HX_LOCAL_STACK_FRAME(_hx_pos_e942f37a47502b9a_17_checkEvents,"com.stencyl.event.NativeListener","checkEvents",0x87f9b6c1,"com.stencyl.event.NativeListener.checkEvents","com/stencyl/event/NativeListener.hx",17,0x3f81c46d)
namespace com{
namespace stencyl{
namespace event{

void NativeListener_obj::__construct(int metaType,int type, ::Dynamic fn){
            	HX_STACKFRAME(&_hx_pos_e942f37a47502b9a_10_new)
HXLINE(  11)		this->metaType = metaType;
HXLINE(  12)		this->type = type;
HXLINE(  13)		this->fn = fn;
            	}

Dynamic NativeListener_obj::__CreateEmpty() { return new NativeListener_obj; }

void *NativeListener_obj::_hx_vtable = 0;

Dynamic NativeListener_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeListener_obj > _hx_result = new NativeListener_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool NativeListener_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x64ef55fa;
}

void NativeListener_obj::checkEvents( ::com::stencyl::event::EventMaster q){
            	HX_STACKFRAME(&_hx_pos_e942f37a47502b9a_17_checkEvents)
HXLINE(  19)		::Array< ::Dynamic> list = ( (::Array< ::Dynamic>)(q->eventTable->get(this->metaType)) );
HXLINE(  21)		if (hx::IsNotNull( list )) {
HXLINE(  23)			int _g = (int)0;
HXDLIN(  23)			while((_g < list->length)){
HXLINE(  23)				 ::com::stencyl::event::StencylEvent event = list->__get(_g).StaticCast<  ::com::stencyl::event::StencylEvent >();
HXDLIN(  23)				_g = (_g + (int)1);
HXLINE(  25)				if ((event->type == this->type)) {
HXLINE(  27)					if ((this->metaType == ::com::stencyl::event::EventMaster_obj::TYPE_ADS)) {
HXLINE(  29)						this->fn();
            					}
            					else {
HXLINE(  32)						if ((this->metaType == ::com::stencyl::event::EventMaster_obj::TYPE_PURCHASES)) {
HXLINE(  34)							this->fn(event->data1);
            						}
            						else {
HXLINE(  37)							if ((this->metaType == ::com::stencyl::event::EventMaster_obj::TYPE_GAMECENTER)) {
HXLINE(  39)								this->fn(event->data1);
            							}
            							else {
HXLINE(  42)								if ((this->metaType == ::com::stencyl::event::EventMaster_obj::TYPE_KEYBOARD)) {
HXLINE(  44)									this->fn(event->data1);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeListener_obj,checkEvents,(void))


hx::ObjectPtr< NativeListener_obj > NativeListener_obj::__new(int metaType,int type, ::Dynamic fn) {
	hx::ObjectPtr< NativeListener_obj > __this = new NativeListener_obj();
	__this->__construct(metaType,type,fn);
	return __this;
}

hx::ObjectPtr< NativeListener_obj > NativeListener_obj::__alloc(hx::Ctx *_hx_ctx,int metaType,int type, ::Dynamic fn) {
	NativeListener_obj *__this = (NativeListener_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NativeListener_obj), true, "com.stencyl.event.NativeListener"));
	*(void **)__this = NativeListener_obj::_hx_vtable;
	__this->__construct(metaType,type,fn);
	return __this;
}

NativeListener_obj::NativeListener_obj()
{
}

void NativeListener_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeListener);
	HX_MARK_MEMBER_NAME(metaType,"metaType");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(fn,"fn");
	HX_MARK_END_CLASS();
}

void NativeListener_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(metaType,"metaType");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(fn,"fn");
}

hx::Val NativeListener_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"fn") ) { return hx::Val( fn ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"metaType") ) { return hx::Val( metaType ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"checkEvents") ) { return hx::Val( checkEvents_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NativeListener_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"fn") ) { fn=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"metaType") ) { metaType=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NativeListener_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("metaType","\x1f","\xb0","\x98","\x35"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("fn","\x48","\x59","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeListener_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(NativeListener_obj,metaType),HX_HCSTRING("metaType","\x1f","\xb0","\x98","\x35")},
	{hx::fsInt,(int)offsetof(NativeListener_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeListener_obj,fn),HX_HCSTRING("fn","\x48","\x59","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NativeListener_obj_sStaticStorageInfo = 0;
#endif

static ::String NativeListener_obj_sMemberFields[] = {
	HX_HCSTRING("metaType","\x1f","\xb0","\x98","\x35"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("fn","\x48","\x59","\x00","\x00"),
	HX_HCSTRING("checkEvents","\x01","\x22","\x7c","\x78"),
	::String(null()) };

static void NativeListener_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeListener_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeListener_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeListener_obj::__mClass,"__mClass");
};

#endif

hx::Class NativeListener_obj::__mClass;

void NativeListener_obj::__register()
{
	hx::Object *dummy = new NativeListener_obj;
	NativeListener_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.event.NativeListener","\x2e","\xd5","\x95","\x82");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeListener_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeListener_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeListener_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeListener_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeListener_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeListener_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace event
