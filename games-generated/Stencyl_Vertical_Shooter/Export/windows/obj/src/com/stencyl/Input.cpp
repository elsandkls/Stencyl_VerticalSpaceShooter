// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_RoxGestureAgent
#include <RoxGestureAgent.h>
#endif
#ifndef INCLUDED_RoxGestureEvent
#include <RoxGestureEvent.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Universal
#include <Universal.h>
#endif
#ifndef INCLUDED_com_stencyl_Config
#include <com/stencyl/Config.h>
#endif
#ifndef INCLUDED_com_stencyl_Control
#include <com/stencyl/Control.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_Input
#include <com/stencyl/Input.h>
#endif
#ifndef INCLUDED_com_stencyl_JoystickButton
#include <com/stencyl/JoystickButton.h>
#endif
#ifndef INCLUDED_com_stencyl_Key
#include <com/stencyl/Key.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Utils
#include <com/stencyl/utils/Utils.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Float_Float_Void
#include <lime/app/_Event_Int_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Float_Void
#include <lime/app/_Event_Int_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_lime_ui_JoystickHatPosition_Void
#include <lime/app/_Event_Int_lime_ui_JoystickHatPosition_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Joystick_Void
#include <lime/app/_Event_lime_ui_Joystick_Void.h>
#endif
#ifndef INCLUDED_lime_ui_Joystick
#include <lime/ui/Joystick.h>
#endif
#ifndef INCLUDED_lime_ui__JoystickHatPosition_JoystickHatPosition_Impl_
#include <lime/ui/_JoystickHatPosition/JoystickHatPosition_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_sensors_Accelerometer
#include <openfl/sensors/Accelerometer.h>
#endif
#ifndef INCLUDED_openfl_ui_Multitouch
#include <openfl/ui/Multitouch.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_88_resetStatics,"com.stencyl.Input","resetStatics",0x70bff149,"com.stencyl.Input.resetStatics","com/stencyl/Input.hx",88,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_165_define,"com.stencyl.Input","define",0x91f7db4e,"com.stencyl.Input.define","com/stencyl/Input.hx",165,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_176_mapKey,"com.stencyl.Input","mapKey",0xe4191f76,"com.stencyl.Input.mapKey","com/stencyl/Input.hx",176,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_192_unmapKey,"com.stencyl.Input","unmapKey",0x5944794f,"com.stencyl.Input.unmapKey","com/stencyl/Input.hx",192,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_204_getKeys,"com.stencyl.Input","getKeys",0x9f696337,"com.stencyl.Input.getKeys","com/stencyl/Input.hx",204,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_213_mapJoystickButton,"com.stencyl.Input","mapJoystickButton",0xdcfd8757,"com.stencyl.Input.mapJoystickButton","com/stencyl/Input.hx",213,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_232_unmapJoystickButton,"com.stencyl.Input","unmapJoystickButton",0x3a12ba1e,"com.stencyl.Input.unmapJoystickButton","com/stencyl/Input.hx",232,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_247_unmapControl,"com.stencyl.Input","unmapControl",0xee9df30d,"com.stencyl.Input.unmapControl","com/stencyl/Input.hx",247,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_262_unmapKeyboardFromControl,"com.stencyl.Input","unmapKeyboardFromControl",0xba6dfd5c,"com.stencyl.Input.unmapKeyboardFromControl","com/stencyl/Input.hx",262,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_272_unmapJoystickFromControl,"com.stencyl.Input","unmapJoystickFromControl",0x5bc45767,"com.stencyl.Input.unmapJoystickFromControl","com/stencyl/Input.hx",272,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_286_setJoySensitivity,"com.stencyl.Input","setJoySensitivity",0x743f977a,"com.stencyl.Input.setJoySensitivity","com/stencyl/Input.hx",286,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_291_saveJoystickConfig,"com.stencyl.Input","saveJoystickConfig",0xaf48804e,"com.stencyl.Input.saveJoystickConfig","com/stencyl/Input.hx",291,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_307_loadJoystickConfig,"com.stencyl.Input","loadJoystickConfig",0x6bf374f7,"com.stencyl.Input.loadJoystickConfig","com/stencyl/Input.hx",307,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_301_loadJoystickConfig,"com.stencyl.Input","loadJoystickConfig",0x6bf374f7,"com.stencyl.Input.loadJoystickConfig","com/stencyl/Input.hx",301,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_327_clearJoystickConfig,"com.stencyl.Input","clearJoystickConfig",0xbaaa1418,"com.stencyl.Input.clearJoystickConfig","com/stencyl/Input.hx",327,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_340_loadInputConfig,"com.stencyl.Input","loadInputConfig",0x43cd5c73,"com.stencyl.Input.loadInputConfig","com/stencyl/Input.hx",340,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_361_check,"com.stencyl.Input","check",0xc67afd15,"com.stencyl.Input.check","com/stencyl/Input.hx",361,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_373_pressed,"com.stencyl.Input","pressed",0xbfc6a42f,"com.stencyl.Input.pressed","com/stencyl/Input.hx",373,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_385_released,"com.stencyl.Input","released",0x14df1290,"com.stencyl.Input.released","com/stencyl/Input.hx",385,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_392_getButtonPressure,"com.stencyl.Input","getButtonPressure",0x19d1deda,"com.stencyl.Input.getButtonPressure","com/stencyl/Input.hx",392,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_405_simulateKeyPress,"com.stencyl.Input","simulateKeyPress",0x286845fb,"com.stencyl.Input.simulateKeyPress","com/stencyl/Input.hx",405,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_410_simulateKeyRelease,"com.stencyl.Input","simulateKeyRelease",0x6689063f,"com.stencyl.Input.simulateKeyRelease","com/stencyl/Input.hx",410,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_413_enableJoystick,"com.stencyl.Input","enableJoystick",0x08073072,"com.stencyl.Input.enableJoystick","com/stencyl/Input.hx",413,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_417_enable,"com.stencyl.Input","enable",0x239b0d96,"com.stencyl.Input.enable","com/stencyl/Input.hx",417,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_487_update,"com.stencyl.Input","update",0xb218e51c,"com.stencyl.Input.update","com/stencyl/Input.hx",487,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_568_onSwipe,"com.stencyl.Input","onSwipe",0xa22a9868,"com.stencyl.Input.onSwipe","com/stencyl/Input.hx",568,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_603_controlPressed,"com.stencyl.Input","controlPressed",0xa0d28ed8,"com.stencyl.Input.controlPressed","com/stencyl/Input.hx",603,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_631_controlReleased,"com.stencyl.Input","controlReleased",0x1e407bc7,"com.stencyl.Input.controlReleased","com/stencyl/Input.hx",631,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_659_controlStateUpdated,"com.stencyl.Input","controlStateUpdated",0xafba0834,"com.stencyl.Input.controlStateUpdated","com/stencyl/Input.hx",659,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_700_onKeyDown,"com.stencyl.Input","onKeyDown",0x0e93310f,"com.stencyl.Input.onKeyDown","com/stencyl/Input.hx",700,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_718_onKeyUp,"com.stencyl.Input","onKeyUp",0xfb1c29c8,"com.stencyl.Input.onKeyUp","com/stencyl/Input.hx",718,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_744_onMouseDown,"com.stencyl.Input","onMouseDown",0x6121b015,"com.stencyl.Input.onMouseDown","com/stencyl/Input.hx",744,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_752_onMouseUp,"com.stencyl.Input","onMouseUp",0x32bebb4e,"com.stencyl.Input.onMouseUp","com/stencyl/Input.hx",752,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_766_onRightMouseDown,"com.stencyl.Input","onRightMouseDown",0xd54f4bfd,"com.stencyl.Input.onRightMouseDown","com/stencyl/Input.hx",766,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_774_onRightMouseUp,"com.stencyl.Input","onRightMouseUp",0x09060d36,"com.stencyl.Input.onRightMouseUp","com/stencyl/Input.hx",774,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_781_onMiddleMouseDown,"com.stencyl.Input","onMiddleMouseDown",0x83a41080,"com.stencyl.Input.onMiddleMouseDown","com/stencyl/Input.hx",781,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_789_onMiddleMouseUp,"com.stencyl.Input","onMiddleMouseUp",0x05099af9,"com.stencyl.Input.onMiddleMouseUp","com/stencyl/Input.hx",789,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_795_onMouseWheel,"com.stencyl.Input","onMouseWheel",0x88473988,"com.stencyl.Input.onMouseWheel","com/stencyl/Input.hx",795,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_812_onJoystickConnected,"com.stencyl.Input","onJoystickConnected",0x2548875b,"com.stencyl.Input.onJoystickConnected","com/stencyl/Input.hx",812,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_816_onJoystickConnected,"com.stencyl.Input","onJoystickConnected",0x2548875b,"com.stencyl.Input.onJoystickConnected","com/stencyl/Input.hx",816,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_820_onJoystickConnected,"com.stencyl.Input","onJoystickConnected",0x2548875b,"com.stencyl.Input.onJoystickConnected","com/stencyl/Input.hx",820,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_824_onJoystickConnected,"com.stencyl.Input","onJoystickConnected",0x2548875b,"com.stencyl.Input.onJoystickConnected","com/stencyl/Input.hx",824,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_828_onJoystickConnected,"com.stencyl.Input","onJoystickConnected",0x2548875b,"com.stencyl.Input.onJoystickConnected","com/stencyl/Input.hx",828,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_832_onJoystickConnected,"com.stencyl.Input","onJoystickConnected",0x2548875b,"com.stencyl.Input.onJoystickConnected","com/stencyl/Input.hx",832,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_803_onJoystickConnected,"com.stencyl.Input","onJoystickConnected",0x2548875b,"com.stencyl.Input.onJoystickConnected","com/stencyl/Input.hx",803,0x3cd12fa5)
static const int _hx_array_data_e1615cfb_67[] = {
	(int)0,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_837_onJoyAxisMove,"com.stencyl.Input","onJoyAxisMove",0xe17266f4,"com.stencyl.Input.onJoyAxisMove","com/stencyl/Input.hx",837,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_881_onJoyBallMove,"com.stencyl.Input","onJoyBallMove",0x897b3352,"com.stencyl.Input.onJoyBallMove","com/stencyl/Input.hx",881,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_886_onJoyHatMove,"com.stencyl.Input","onJoyHatMove",0x3776ebaa,"com.stencyl.Input.onJoyHatMove","com/stencyl/Input.hx",886,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_920_onJoyButtonDown,"com.stencyl.Input","onJoyButtonDown",0xb9feaa96,"com.stencyl.Input.onJoyButtonDown","com/stencyl/Input.hx",920,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_926_onJoyButtonUp,"com.stencyl.Input","onJoyButtonUp",0xadb0638f,"com.stencyl.Input.onJoyButtonUp","com/stencyl/Input.hx",926,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_932_joyPress,"com.stencyl.Input","joyPress",0x118db4a2,"com.stencyl.Input.joyPress","com/stencyl/Input.hx",932,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_940_joyRelease,"com.stencyl.Input","joyRelease",0xf6e4aca6,"com.stencyl.Input.joyRelease","com/stencyl/Input.hx",940,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_949_onTouchBegin,"com.stencyl.Input","onTouchBegin",0x4aa6df3c,"com.stencyl.Input.onTouchBegin","com/stencyl/Input.hx",949,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_957_onTouchMove,"com.stencyl.Input","onTouchMove",0x802c715e,"com.stencyl.Input.onTouchMove","com/stencyl/Input.hx",957,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_964_onTouchEnd,"com.stencyl.Input","onTouchEnd",0x900c7e2e,"com.stencyl.Input.onTouchEnd","com/stencyl/Input.hx",964,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_29_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",29,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_30_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",30,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_32_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",32,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_63_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",63,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_70_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",70,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_71_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",71,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_72_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",72,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_73_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",73,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_74_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",74,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_77_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",77,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_80_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",80,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_81_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",81,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_82_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",82,0x3cd12fa5)
HX_LOCAL_STACK_FRAME(_hx_pos_5cf0242cf7caa88f_84_boot,"com.stencyl.Input","boot",0x6d4ee885,"com.stencyl.Input.boot","com/stencyl/Input.hx",84,0x3cd12fa5)
namespace com{
namespace stencyl{

void Input_obj::__construct() { }

Dynamic Input_obj::__CreateEmpty() { return new Input_obj; }

void *Input_obj::_hx_vtable = 0;

Dynamic Input_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Input_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x105727bf;
}

Float Input_obj::mouseX;

Float Input_obj::mouseY;

bool Input_obj::mouseWheel;

int Input_obj::mouseWheelDelta;

bool Input_obj::mouseDown;

bool Input_obj::mousePressed;

bool Input_obj::mouseReleased;

bool Input_obj::rightMouseDown;

bool Input_obj::rightMousePressed;

bool Input_obj::rightMouseReleased;

bool Input_obj::middleMouseDown;

bool Input_obj::middleMousePressed;

bool Input_obj::middleMouseReleased;

Float Input_obj::accelX;

Float Input_obj::accelY;

Float Input_obj::accelZ;

 ::haxe::ds::StringMap Input_obj::multiTouchPoints;

int Input_obj::numTouches;

bool Input_obj::swipedUp;

bool Input_obj::swipedDown;

bool Input_obj::swipedLeft;

bool Input_obj::swipedRight;

bool Input_obj::_enabled;

 ::RoxGestureAgent Input_obj::_roxAgent;

int Input_obj::_swipeDirection;

Float Input_obj::_joySensitivity;

 ::haxe::ds::IntMap Input_obj::_joyHatState;

 ::haxe::ds::IntMap Input_obj::_joyAxisState;

 ::haxe::ds::IntMap Input_obj::_joyAxisPressure;

 ::haxe::ds::IntMap Input_obj::_joyButtonState;

::Array< bool > Input_obj::_key;

::Array< ::Dynamic> Input_obj::_controlsToReset;

 ::haxe::ds::StringMap Input_obj::_controlMap;

 ::haxe::ds::IntMap Input_obj::_keyControlMap;

 ::haxe::ds::StringMap Input_obj::_joyControlMap;

void Input_obj::resetStatics(){
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_88_resetStatics)
HXLINE(  91)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("keyDown",a1,69,47,9c),::com::stencyl::Input_obj::onKeyDown_dyn(),null());
HXLINE(  92)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("keyUp",da,b9,fe,de),::com::stencyl::Input_obj::onKeyUp_dyn(),null());
HXLINE(  93)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("mouseDown",27,b1,c2,ee),::com::stencyl::Input_obj::onMouseDown_dyn(),null());
HXLINE(  94)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),::com::stencyl::Input_obj::onMouseUp_dyn(),null());
HXLINE(  95)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("mouseWheel",36,28,87,e7),::com::stencyl::Input_obj::onMouseWheel_dyn(),null());
HXLINE( 101)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("rightMouseDown",ab,29,d7,cd),::com::stencyl::Input_obj::onRightMouseDown_dyn(),null());
HXLINE( 102)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("rightMouseUp",64,83,21,ab),::com::stencyl::Input_obj::onRightMouseUp_dyn(),null());
HXLINE( 103)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("middleMouseDown",12,2b,fe,01),::com::stencyl::Input_obj::onMiddleMouseDown_dyn(),null());
HXLINE( 104)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("middleMouseUp",0b,8d,f5,3a),::com::stencyl::Input_obj::onMiddleMouseUp_dyn(),null());
HXLINE( 113)		if (::openfl::ui::Multitouch_obj::get_supportsTouchEvents()) {
HXLINE( 115)			::com::stencyl::Engine_obj::stage->removeEventListener(HX_("touchBegin",ea,cd,e6,a9),::com::stencyl::Input_obj::onTouchBegin_dyn(),null());
HXLINE( 116)			::com::stencyl::Engine_obj::stage->removeEventListener(HX_("touchMove",70,72,cd,0d),::com::stencyl::Input_obj::onTouchMove_dyn(),null());
HXLINE( 117)			::com::stencyl::Engine_obj::stage->removeEventListener(HX_("touchEnd",5c,c5,09,00),::com::stencyl::Input_obj::onTouchEnd_dyn(),null());
            		}
HXLINE( 121)		::com::stencyl::Input_obj::_roxAgent->detach();
HXLINE( 122)		::com::stencyl::Engine_obj::engine->root->removeEventListener(HX_("rox_gesture_swipe",a0,82,13,94),::com::stencyl::Input_obj::onSwipe_dyn(),null());
HXLINE( 126)		::com::stencyl::Input_obj::mouseX = (int)0;
HXDLIN( 126)		::com::stencyl::Input_obj::mouseY = (int)0;
HXLINE( 127)		::com::stencyl::Input_obj::mouseDown = (::com::stencyl::Input_obj::mousePressed = (::com::stencyl::Input_obj::mouseReleased = (::com::stencyl::Input_obj::mouseWheel = false)));
HXLINE( 128)		::com::stencyl::Input_obj::rightMouseDown = (::com::stencyl::Input_obj::rightMousePressed = (::com::stencyl::Input_obj::rightMouseReleased = false));
HXLINE( 129)		::com::stencyl::Input_obj::middleMouseDown = (::com::stencyl::Input_obj::middleMousePressed = (::com::stencyl::Input_obj::middleMouseReleased = false));
HXLINE( 130)		::com::stencyl::Input_obj::mouseWheelDelta = (int)0;
HXLINE( 131)		::com::stencyl::Input_obj::accelX = (::com::stencyl::Input_obj::accelY = (::com::stencyl::Input_obj::accelZ = (int)0));
HXLINE( 134)		::com::stencyl::Input_obj::multiTouchPoints = null();
HXLINE( 137)		::com::stencyl::Input_obj::numTouches = (int)0;
HXLINE( 138)		::com::stencyl::Input_obj::_swipeDirection = (int)0;
HXLINE( 139)		::com::stencyl::Input_obj::swipedUp = (::com::stencyl::Input_obj::swipedDown = (::com::stencyl::Input_obj::swipedRight = (::com::stencyl::Input_obj::swipedLeft = false)));
HXLINE( 140)		::com::stencyl::Input_obj::_roxAgent = null();
HXLINE( 142)		::com::stencyl::Input_obj::_enabled = false;
HXLINE( 143)		::com::stencyl::Input_obj::_key = ::Array_obj< bool >::__new();
HXLINE( 145)		::com::stencyl::Input_obj::_joySensitivity = ((Float).12);
HXLINE( 146)		::com::stencyl::Input_obj::_joyHatState =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 147)		::com::stencyl::Input_obj::_joyAxisState =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 148)		::com::stencyl::Input_obj::_joyAxisPressure =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 149)		::com::stencyl::Input_obj::_joyButtonState =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 152)		::com::stencyl::Input_obj::_joyControlMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 154)		::com::stencyl::Input_obj::_keyControlMap =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 156)		::com::stencyl::Input_obj::_controlMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 157)		::com::stencyl::Input_obj::_controlsToReset = ::Array_obj< ::Dynamic>::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,resetStatics,(void))

void Input_obj::define(::String controlName,::Array< int > keyCodes){
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_165_define)
HXLINE( 166)		if (hx::IsNull( ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >() )) {
HXLINE( 167)			::Dynamic this1 = ::com::stencyl::Input_obj::_controlMap;
HXDLIN( 167)			( ( ::haxe::ds::StringMap)(this1) )->set(controlName, ::com::stencyl::Control_obj::__alloc( HX_CTX ,controlName));
            		}
            		else {
HXLINE( 169)			::com::stencyl::Input_obj::unmapControl(controlName);
            		}
HXLINE( 171)		{
HXLINE( 171)			int _g = (int)0;
HXDLIN( 171)			while((_g < keyCodes->length)){
HXLINE( 171)				int keyCode = keyCodes->__get(_g);
HXDLIN( 171)				_g = (_g + (int)1);
HXLINE( 172)				::com::stencyl::Input_obj::mapKey(keyCode,controlName);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Input_obj,define,(void))

void Input_obj::mapKey(int keyCode,::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_176_mapKey)
HXLINE( 177)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_keyControlMap->get(keyCode).StaticCast<  ::com::stencyl::Control >();
HXLINE( 178)		if (hx::IsNotNull( control )) {
HXLINE( 180)			control->keys->remove(keyCode);
HXLINE( 181)			::com::stencyl::Input_obj::controlStateUpdated(control);
            		}
HXLINE( 184)		 ::com::stencyl::Control newControl = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 185)		newControl->keys->push(keyCode);
HXLINE( 186)		::com::stencyl::Input_obj::controlStateUpdated(newControl);
HXLINE( 188)		::com::stencyl::Input_obj::_keyControlMap->set(keyCode,newControl);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Input_obj,mapKey,(void))

void Input_obj::unmapKey(int keyCode){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_192_unmapKey)
HXLINE( 193)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_keyControlMap->get(keyCode).StaticCast<  ::com::stencyl::Control >();
HXLINE( 194)		if (hx::IsNotNull( control )) {
HXLINE( 196)			control->keys->remove(keyCode);
HXLINE( 197)			::com::stencyl::Input_obj::controlStateUpdated(control);
            		}
HXLINE( 200)		::com::stencyl::Input_obj::_keyControlMap->remove(keyCode);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,unmapKey,(void))

::Array< int > Input_obj::getKeys(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_204_getKeys)
HXLINE( 205)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 206)		if (hx::IsNotNull( control )) {
HXLINE( 207)			return control->keys;
            		}
HXLINE( 209)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,getKeys,return )

void Input_obj::mapJoystickButton(::String id,::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_213_mapJoystickButton)
HXLINE( 215)		 ::com::stencyl::JoystickButton button = ::com::stencyl::JoystickButton_obj::fromID(id);
HXLINE( 216)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_joyControlMap->get(id).StaticCast<  ::com::stencyl::Control >();
HXLINE( 217)		if (hx::IsNotNull( control )) {
HXLINE( 219)			control->buttons->remove(button);
HXLINE( 220)			::com::stencyl::Input_obj::controlStateUpdated(control);
            		}
HXLINE( 223)		 ::com::stencyl::Control newControl = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 224)		newControl->buttons->push(button);
HXLINE( 225)		::com::stencyl::Input_obj::controlStateUpdated(newControl);
HXLINE( 227)		::com::stencyl::Input_obj::_joyControlMap->set(id,newControl);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Input_obj,mapJoystickButton,(void))

void Input_obj::unmapJoystickButton(::String id){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_232_unmapJoystickButton)
HXLINE( 234)		 ::com::stencyl::JoystickButton button = ::com::stencyl::JoystickButton_obj::fromID(id);
HXLINE( 235)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_joyControlMap->get(id).StaticCast<  ::com::stencyl::Control >();
HXLINE( 236)		if (hx::IsNotNull( control )) {
HXLINE( 238)			control->buttons->remove(button);
HXLINE( 239)			::com::stencyl::Input_obj::controlStateUpdated(control);
            		}
HXLINE( 242)		::com::stencyl::Input_obj::_joyControlMap->remove(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,unmapJoystickButton,(void))

void Input_obj::unmapControl(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_247_unmapControl)
HXLINE( 248)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 250)		while((control->keys->length > (int)0)){
HXLINE( 251)			::Dynamic this1 = ::com::stencyl::Input_obj::_keyControlMap;
HXDLIN( 251)			( ( ::haxe::ds::IntMap)(this1) )->remove(( (int)(control->keys->pop()) ));
            		}
HXLINE( 254)		while((control->buttons->length > (int)0)){
HXLINE( 255)			::Dynamic this2 = ::com::stencyl::Input_obj::_joyControlMap;
HXDLIN( 255)			( ( ::haxe::ds::StringMap)(this2) )->remove(control->buttons->pop().StaticCast<  ::com::stencyl::JoystickButton >()->id);
            		}
HXLINE( 258)		if (control->down) {
HXLINE( 258)			::com::stencyl::Input_obj::controlReleased(control);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,unmapControl,(void))

void Input_obj::unmapKeyboardFromControl(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_262_unmapKeyboardFromControl)
HXLINE( 263)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 265)		while((control->keys->length > (int)0)){
HXLINE( 266)			::Dynamic this1 = ::com::stencyl::Input_obj::_keyControlMap;
HXDLIN( 266)			( ( ::haxe::ds::IntMap)(this1) )->remove(( (int)(control->keys->pop()) ));
            		}
HXLINE( 268)		::com::stencyl::Input_obj::controlStateUpdated(control);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,unmapKeyboardFromControl,(void))

void Input_obj::unmapJoystickFromControl(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_272_unmapJoystickFromControl)
HXLINE( 273)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 276)		while((control->buttons->length > (int)0)){
HXLINE( 277)			::Dynamic this1 = ::com::stencyl::Input_obj::_joyControlMap;
HXDLIN( 277)			( ( ::haxe::ds::StringMap)(this1) )->remove(control->buttons->pop().StaticCast<  ::com::stencyl::JoystickButton >()->id);
            		}
HXLINE( 280)		::com::stencyl::Input_obj::controlStateUpdated(control);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,unmapJoystickFromControl,(void))

void Input_obj::setJoySensitivity(Float val){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_286_setJoySensitivity)
HXDLIN( 286)		::com::stencyl::Input_obj::_joySensitivity = val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,setJoySensitivity,(void))

void Input_obj::saveJoystickConfig(::String filename){
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_291_saveJoystickConfig)
HXLINE( 293)		 ::haxe::ds::StringMap joyData =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 294)		{
HXLINE( 294)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 294)			{
HXLINE( 294)				 ::Dynamic key = ::com::stencyl::Input_obj::_joyControlMap->keys();
HXDLIN( 294)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 294)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 294)					_g->set(key1,::com::stencyl::Input_obj::_joyControlMap->get(key1).StaticCast<  ::com::stencyl::Control >()->name);
            				}
            			}
HXDLIN( 294)			joyData->set(HX_("_joyControlMap",b4,34,7f,86),_g);
            		}
HXLINE( 295)		joyData->set(HX_("_joySensitivity",0a,35,0e,65),::com::stencyl::Input_obj::_joySensitivity);
HXLINE( 296)		::com::stencyl::utils::Utils_obj::saveMap(joyData,(HX_("_jc-",55,0a,1c,3f) + filename),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,saveJoystickConfig,(void))

void Input_obj::loadJoystickConfig(::String filename){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::ds::StringMap,joyData) HXARGC(1)
            		void _hx_run(bool success){
            			HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_307_loadJoystickConfig)
HXLINE( 307)			if ((::com::stencyl::utils::Utils_obj::mapCount(joyData) > (int)0)) {
HXLINE( 309)				 ::haxe::ds::StringMap joyStringMap = ( ( ::haxe::ds::StringMap)(joyData->get(HX_("_joyControlMap",b4,34,7f,86))) );
HXLINE( 310)				{
HXLINE( 310)					 ::Dynamic k = joyStringMap->keys();
HXDLIN( 310)					while(( (bool)(k->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 310)						::String k1 = ( (::String)(k->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 312)						::String controlName = ( (::String)(joyStringMap->get(k1)) );
HXLINE( 313)						 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 314)						::com::stencyl::Input_obj::_joyControlMap->set(k1,control);
HXLINE( 316)						 ::com::stencyl::JoystickButton button = ::com::stencyl::JoystickButton_obj::fromID(k1);
HXLINE( 318)						control->buttons->push(button);
            					}
            				}
HXLINE( 320)				::com::stencyl::Input_obj::_joySensitivity = ( (Float)(joyData->get(HX_("_joySensitivity",0a,35,0e,65))) );
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_301_loadJoystickConfig)
HXLINE( 303)		::com::stencyl::Input_obj::clearJoystickConfig();
HXLINE( 304)		 ::haxe::ds::StringMap joyData =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 305)		::com::stencyl::utils::Utils_obj::loadMap(joyData,(HX_("_jc-",55,0a,1c,3f) + filename), ::Dynamic(new _hx_Closure_0(joyData)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,loadJoystickConfig,(void))

void Input_obj::clearJoystickConfig(){
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_327_clearJoystickConfig)
HXLINE( 329)		{
HXLINE( 329)			 ::Dynamic control = ::com::stencyl::Input_obj::_controlMap->iterator();
HXDLIN( 329)			while(( (bool)(control->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 329)				 ::com::stencyl::Control control1 = ( ( ::com::stencyl::Control)(control->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 331)				control1->buttons = ::Array_obj< ::Dynamic>::__new(0);
            			}
            		}
HXLINE( 333)		::com::stencyl::Input_obj::_joyControlMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 334)		::com::stencyl::Input_obj::_joySensitivity = ((Float).12);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,clearJoystickConfig,(void))

void Input_obj::loadInputConfig(){
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_340_loadInputConfig)
HXDLIN( 340)		 ::Dynamic stencylControl = ::com::stencyl::Config_obj::keys->keys();
HXDLIN( 340)		while(( (bool)(stencylControl->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 340)			::String stencylControl1 = ( (::String)(stencylControl->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 342)			::Array< ::String > value = ( (::Array< ::String >)(::com::stencyl::Config_obj::keys->get(stencylControl1)) );
HXLINE( 343)			::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 343)			{
HXLINE( 343)				int _g1 = (int)0;
HXDLIN( 343)				while((_g1 < value->length)){
HXLINE( 343)					::String keyname = value->__get(_g1);
HXDLIN( 343)					_g1 = (_g1 + (int)1);
HXDLIN( 343)					_g->push(::com::stencyl::Key_obj::keyFromName(keyname));
            				}
            			}
HXDLIN( 343)			::Array< int > keyboardConstList = _g;
HXLINE( 345)			 ::com::stencyl::Control control =  ::com::stencyl::Control_obj::__alloc( HX_CTX ,stencylControl1);
HXLINE( 346)			::com::stencyl::Input_obj::_controlMap->set(stencylControl1,control);
HXLINE( 347)			control->keys = keyboardConstList;
HXLINE( 348)			{
HXLINE( 348)				int _g11 = (int)0;
HXDLIN( 348)				::Array< int > _g2 = control->keys;
HXDLIN( 348)				while((_g11 < _g2->length)){
HXLINE( 348)					int key = _g2->__get(_g11);
HXDLIN( 348)					_g11 = (_g11 + (int)1);
HXLINE( 350)					::com::stencyl::Input_obj::_keyControlMap->set(key,control);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,loadInputConfig,(void))

bool Input_obj::check(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_361_check)
HXLINE( 362)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 364)		if (hx::IsNotNull( control )) {
HXLINE( 364)			return control->down;
            		}
            		else {
HXLINE( 364)			return false;
            		}
HXDLIN( 364)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,check,return )

bool Input_obj::pressed(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_373_pressed)
HXLINE( 374)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 376)		if (hx::IsNotNull( control )) {
HXLINE( 376)			return control->pressed;
            		}
            		else {
HXLINE( 376)			return false;
            		}
HXDLIN( 376)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,pressed,return )

bool Input_obj::released(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_385_released)
HXLINE( 386)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 388)		if (hx::IsNotNull( control )) {
HXLINE( 388)			return control->released;
            		}
            		else {
HXLINE( 388)			return false;
            		}
HXDLIN( 388)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,released,return )

Float Input_obj::getButtonPressure(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_392_getButtonPressure)
HXLINE( 393)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >();
HXLINE( 395)		if (hx::IsNotNull( control )) {
HXLINE( 397)			return control->pressure;
            		}
HXLINE( 400)		return ((Float)0.0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,getButtonPressure,return )

void Input_obj::simulateKeyPress(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_405_simulateKeyPress)
HXDLIN( 405)		::com::stencyl::Input_obj::controlPressed(::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >(),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,simulateKeyPress,(void))

void Input_obj::simulateKeyRelease(::String controlName){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_410_simulateKeyRelease)
HXDLIN( 410)		::com::stencyl::Input_obj::controlReleased(::com::stencyl::Input_obj::_controlMap->get(controlName).StaticCast<  ::com::stencyl::Control >());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,simulateKeyRelease,(void))

void Input_obj::enableJoystick(){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_413_enableJoystick)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,enableJoystick,(void))

void Input_obj::enable(){
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_417_enable)
HXDLIN( 417)		bool _hx_tmp;
HXDLIN( 417)		if (!(::com::stencyl::Input_obj::_enabled)) {
HXDLIN( 417)			_hx_tmp = hx::IsNotNull( ::com::stencyl::Engine_obj::stage );
            		}
            		else {
HXDLIN( 417)			_hx_tmp = false;
            		}
HXDLIN( 417)		if (_hx_tmp) {
HXLINE( 419)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("keyDown",a1,69,47,9c),::com::stencyl::Input_obj::onKeyDown_dyn(),false,(int)2,null());
HXLINE( 420)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("keyUp",da,b9,fe,de),::com::stencyl::Input_obj::onKeyUp_dyn(),false,(int)2,null());
HXLINE( 421)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),::com::stencyl::Input_obj::onMouseDown_dyn(),false,(int)2,null());
HXLINE( 422)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),::com::stencyl::Input_obj::onMouseUp_dyn(),false,(int)2,null());
HXLINE( 423)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("mouseWheel",36,28,87,e7),::com::stencyl::Input_obj::onMouseWheel_dyn(),false,(int)2,null());
HXLINE( 429)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("rightMouseDown",ab,29,d7,cd),::com::stencyl::Input_obj::onRightMouseDown_dyn(),false,(int)2,null());
HXLINE( 430)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("rightMouseUp",64,83,21,ab),::com::stencyl::Input_obj::onRightMouseUp_dyn(),false,(int)2,null());
HXLINE( 431)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("middleMouseDown",12,2b,fe,01),::com::stencyl::Input_obj::onMiddleMouseDown_dyn(),false,(int)2,null());
HXLINE( 432)			::com::stencyl::Engine_obj::stage->addEventListener(HX_("middleMouseUp",0b,8d,f5,3a),::com::stencyl::Input_obj::onMiddleMouseUp_dyn(),false,(int)2,null());
HXLINE( 445)			if (::openfl::ui::Multitouch_obj::get_supportsTouchEvents()) {
HXLINE( 447)				::com::stencyl::Input_obj::multiTouchPoints =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 448)				::openfl::ui::Multitouch_obj::inputMode = (int)2;
HXLINE( 449)				::com::stencyl::Engine_obj::stage->addEventListener(HX_("touchBegin",ea,cd,e6,a9),::com::stencyl::Input_obj::onTouchBegin_dyn(),null(),null(),null());
HXLINE( 450)				::com::stencyl::Engine_obj::stage->addEventListener(HX_("touchMove",70,72,cd,0d),::com::stencyl::Input_obj::onTouchMove_dyn(),null(),null(),null());
HXLINE( 451)				::com::stencyl::Engine_obj::stage->addEventListener(HX_("touchEnd",5c,c5,09,00),::com::stencyl::Input_obj::onTouchEnd_dyn(),null(),null(),null());
            			}
HXLINE( 457)			::lime::ui::Joystick_obj::onConnect->add(::com::stencyl::Input_obj::onJoystickConnected_dyn(),null(),null());
HXLINE( 459)			{
HXLINE( 459)				 ::Dynamic joystick = ::lime::ui::Joystick_obj::devices->iterator();
HXDLIN( 459)				while(( (bool)(joystick->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 459)					 ::lime::ui::Joystick joystick1 = ( ( ::lime::ui::Joystick)(joystick->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 461)					::com::stencyl::Input_obj::onJoystickConnected(joystick1);
            				}
            			}
HXLINE( 466)			::com::stencyl::Input_obj::_roxAgent =  ::RoxGestureAgent_obj::__alloc( HX_CTX ,::com::stencyl::Engine_obj::engine->root,(int)2);
HXLINE( 467)			::com::stencyl::Engine_obj::engine->root->addEventListener(HX_("rox_gesture_swipe",a0,82,13,94),::com::stencyl::Input_obj::onSwipe_dyn(),null(),null(),null());
HXLINE( 469)			::com::stencyl::Input_obj::_swipeDirection = (int)-1;
HXLINE( 470)			::com::stencyl::Input_obj::swipedLeft = false;
HXLINE( 471)			::com::stencyl::Input_obj::swipedRight = false;
HXLINE( 472)			::com::stencyl::Input_obj::swipedUp = false;
HXLINE( 473)			::com::stencyl::Input_obj::swipedDown = false;
HXLINE( 475)			::com::stencyl::Input_obj::mouseX = (int)0;
HXLINE( 476)			::com::stencyl::Input_obj::mouseY = (int)0;
HXLINE( 477)			::com::stencyl::Input_obj::accelX = (int)0;
HXLINE( 478)			::com::stencyl::Input_obj::accelY = (int)0;
HXLINE( 479)			::com::stencyl::Input_obj::accelZ = (int)0;
HXLINE( 480)			::com::stencyl::Input_obj::numTouches = (int)0;
HXLINE( 481)			::com::stencyl::Input_obj::_enabled = true;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,enable,(void))

void Input_obj::update(){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_487_update)
HXLINE( 488)		::com::stencyl::Input_obj::swipedLeft = false;
HXLINE( 489)		::com::stencyl::Input_obj::swipedRight = false;
HXLINE( 490)		::com::stencyl::Input_obj::swipedUp = false;
HXLINE( 491)		::com::stencyl::Input_obj::swipedDown = false;
HXLINE( 493)		if ((::com::stencyl::Input_obj::_swipeDirection > (int)-1)) {
HXLINE( 495)			{
HXLINE( 495)				int _g = ::com::stencyl::Input_obj::_swipeDirection;
HXDLIN( 495)				switch((int)(_g)){
            					case (int)0: {
HXLINE( 498)						::com::stencyl::Input_obj::swipedLeft = true;
            					}
            					break;
            					case (int)1: {
HXLINE( 500)						::com::stencyl::Input_obj::swipedRight = true;
            					}
            					break;
            					case (int)2: {
HXLINE( 502)						::com::stencyl::Input_obj::swipedUp = true;
            					}
            					break;
            					case (int)3: {
HXLINE( 504)						::com::stencyl::Input_obj::swipedDown = true;
            					}
            					break;
            				}
            			}
HXLINE( 507)			if (hx::IsNotNull( ::com::stencyl::Engine_obj::engine->whenSwipedListeners )) {
HXLINE( 509)				::cpp::VirtualArray listeners = ::com::stencyl::Engine_obj::engine->whenSwipedListeners;
HXDLIN( 509)				int r = (int)0;
HXDLIN( 509)				while((r < listeners->get_length())){
HXLINE( 509)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE( 509)						 ::Dynamic f = listeners->__get(r);
HXDLIN( 509)						f(listeners);
HXDLIN( 509)						if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 509)							r = (r - (int)1);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String e = _hx_e;
HXLINE( 509)							::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXDLIN( 509)					r = (r + (int)1);
            				}
            			}
HXLINE( 512)			::com::stencyl::Input_obj::_swipeDirection = (int)-1;
            		}
HXLINE( 516)		if (::openfl::sensors::Accelerometer_obj::get_isSupported()) {
HXLINE( 518)			::com::stencyl::Input_obj::accelX = ::openfl::sensors::Accelerometer_obj::currentX;
HXLINE( 519)			::com::stencyl::Input_obj::accelY = ::openfl::sensors::Accelerometer_obj::currentY;
HXLINE( 520)			::com::stencyl::Input_obj::accelZ = ::openfl::sensors::Accelerometer_obj::currentZ;
            		}
HXLINE( 525)		Float _hx_tmp = ::com::stencyl::Engine_obj::stage->get_mouseX();
HXDLIN( 525)		::com::stencyl::Input_obj::mouseX = ((Float)(_hx_tmp - ::com::stencyl::Engine_obj::screenOffsetX) / (Float)::com::stencyl::Engine_obj::screenScaleX);
HXLINE( 526)		Float _hx_tmp1 = ::com::stencyl::Engine_obj::stage->get_mouseY();
HXDLIN( 526)		::com::stencyl::Input_obj::mouseY = ((Float)(_hx_tmp1 - ::com::stencyl::Engine_obj::screenOffsetY) / (Float)::com::stencyl::Engine_obj::screenScaleY);
HXLINE( 528)		int i = ::com::stencyl::Input_obj::_controlsToReset->length;
HXLINE( 529)		while(true){
HXLINE( 529)			i = (i - (int)1);
HXDLIN( 529)			if (!((i >= (int)0))) {
HXLINE( 529)				goto _hx_goto_37;
            			}
HXLINE( 531)			 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_controlsToReset->pop().StaticCast<  ::com::stencyl::Control >();
HXLINE( 532)			control->pressed = false;
HXLINE( 533)			control->released = false;
            		}
            		_hx_goto_37:;
HXLINE( 536)		if (::com::stencyl::Input_obj::mousePressed) {
HXLINE( 536)			::com::stencyl::Input_obj::mousePressed = false;
            		}
HXLINE( 537)		if (::com::stencyl::Input_obj::mouseReleased) {
HXLINE( 537)			::com::stencyl::Input_obj::mouseReleased = false;
            		}
HXLINE( 538)		if (::com::stencyl::Input_obj::rightMousePressed) {
HXLINE( 538)			::com::stencyl::Input_obj::rightMousePressed = false;
            		}
HXLINE( 539)		if (::com::stencyl::Input_obj::rightMouseReleased) {
HXLINE( 539)			::com::stencyl::Input_obj::rightMouseReleased = false;
            		}
HXLINE( 540)		if (::com::stencyl::Input_obj::middleMousePressed) {
HXLINE( 540)			::com::stencyl::Input_obj::middleMousePressed = false;
            		}
HXLINE( 541)		if (::com::stencyl::Input_obj::middleMouseReleased) {
HXLINE( 541)			::com::stencyl::Input_obj::middleMouseReleased = false;
            		}
HXLINE( 543)		::com::stencyl::Input_obj::mouseWheelDelta = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Input_obj,update,(void))

void Input_obj::onSwipe( ::RoxGestureEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_568_onSwipe)
HXLINE( 569)		 ::openfl::geom::Point pt = hx::TCast<  ::openfl::geom::Point >::cast(e->extra);
HXLINE( 571)		Float _hx_tmp = ::Math_obj::abs(pt->x);
HXDLIN( 571)		if ((_hx_tmp <= ::Math_obj::abs(pt->y))) {
HXLINE( 574)			if ((pt->y <= (int)0)) {
HXLINE( 576)				::com::stencyl::Input_obj::_swipeDirection = (int)2;
            			}
            			else {
HXLINE( 582)				::com::stencyl::Input_obj::_swipeDirection = (int)3;
            			}
            		}
            		else {
HXLINE( 586)			Float _hx_tmp1 = ::Math_obj::abs(pt->x);
HXDLIN( 586)			if ((_hx_tmp1 > ::Math_obj::abs(pt->y))) {
HXLINE( 589)				if ((pt->x <= (int)0)) {
HXLINE( 591)					::com::stencyl::Input_obj::_swipeDirection = (int)0;
            				}
            				else {
HXLINE( 597)					::com::stencyl::Input_obj::_swipeDirection = (int)1;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onSwipe,(void))

void Input_obj::controlPressed( ::com::stencyl::Control control,Float pressure){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_603_controlPressed)
HXLINE( 604)		if (hx::IsNull( control )) {
HXLINE( 604)			return;
            		}
HXLINE( 606)		if (!(control->down)) {
HXLINE( 608)			control->down = true;
HXLINE( 609)			control->pressed = true;
HXLINE( 610)			control->pressure = pressure;
HXLINE( 611)			::com::stencyl::Input_obj::_controlsToReset->push(control);
HXLINE( 613)			if (::com::stencyl::Engine_obj::engine->keyPollOccurred) {
HXLINE( 618)				 ::Dynamic listeners = ::com::stencyl::Engine_obj::engine->whenKeyPressedListeners->get(control->name);
HXLINE( 620)				if (hx::IsNotNull( listeners )) {
HXLINE( 622)					::cpp::VirtualArray listeners1 = ( (::cpp::VirtualArray)(listeners) );
HXDLIN( 622)					int r = (int)0;
HXDLIN( 622)					while((r < listeners1->get_length())){
HXLINE( 622)						try {
            							HX_STACK_CATCHABLE(::String, 0);
HXLINE( 622)							 ::Dynamic f = listeners1->__get(r);
HXDLIN( 622)							f(true,false,listeners1);
HXDLIN( 622)							if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f) == (int)-1)) {
HXLINE( 622)								r = (r - (int)1);
            							}
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass< ::String >() ){
            								HX_STACK_BEGIN_CATCH
            								::String e = _hx_e;
HXLINE( 622)								::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4255,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners3",6c,eb,b8,23)));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXDLIN( 622)						r = (r + (int)1);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 627)			control->pressure = pressure;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Input_obj,controlPressed,(void))

void Input_obj::controlReleased( ::com::stencyl::Control control){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_631_controlReleased)
HXLINE( 632)		if (hx::IsNull( control )) {
HXLINE( 632)			return;
            		}
HXLINE( 634)		if (control->down) {
HXLINE( 636)			control->down = false;
HXLINE( 637)			control->released = true;
HXLINE( 638)			control->pressure = ((Float)0.0);
HXLINE( 639)			::com::stencyl::Input_obj::_controlsToReset->push(control);
HXLINE( 641)			if (::com::stencyl::Engine_obj::engine->keyPollOccurred) {
HXLINE( 646)				 ::Dynamic listeners = ::com::stencyl::Engine_obj::engine->whenKeyPressedListeners->get(control->name);
HXLINE( 648)				if (hx::IsNotNull( listeners )) {
HXLINE( 650)					::cpp::VirtualArray listeners1 = ( (::cpp::VirtualArray)(listeners) );
HXDLIN( 650)					int r = (int)0;
HXDLIN( 650)					while((r < listeners1->get_length())){
HXLINE( 650)						try {
            							HX_STACK_CATCHABLE(::String, 0);
HXLINE( 650)							 ::Dynamic f = listeners1->__get(r);
HXDLIN( 650)							f(false,true,listeners1);
HXDLIN( 650)							if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f) == (int)-1)) {
HXLINE( 650)								r = (r - (int)1);
            							}
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass< ::String >() ){
            								HX_STACK_BEGIN_CATCH
            								::String e = _hx_e;
HXLINE( 650)								::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4255,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners3",6c,eb,b8,23)));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXDLIN( 650)						r = (r + (int)1);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,controlReleased,(void))

void Input_obj::controlStateUpdated( ::com::stencyl::Control control){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_659_controlStateUpdated)
HXLINE( 660)		Float pressure = ((Float)0.0);
HXLINE( 662)		{
HXLINE( 662)			int _g = (int)0;
HXDLIN( 662)			::Array< int > _g1 = control->keys;
HXDLIN( 662)			while((_g < _g1->length)){
HXLINE( 662)				int keyCode = _g1->__get(_g);
HXDLIN( 662)				_g = (_g + (int)1);
HXLINE( 664)				if (::com::stencyl::Input_obj::_key->__get(keyCode)) {
HXLINE( 664)					pressure = ((Float)1.0);
            				}
            			}
            		}
HXLINE( 667)		{
HXLINE( 667)			int _g2 = (int)0;
HXDLIN( 667)			::Array< ::Dynamic> _g11 = control->buttons;
HXDLIN( 667)			while((_g2 < _g11->length)){
HXLINE( 667)				 ::com::stencyl::JoystickButton button = _g11->__get(_g2).StaticCast<  ::com::stencyl::JoystickButton >();
HXDLIN( 667)				_g2 = (_g2 + (int)1);
HXLINE( 669)				int device = button->a->__get((int)0);
HXLINE( 670)				int controlType = button->a->__get((int)1);
HXLINE( 671)				int buttonID = button->a->__get((int)2);
HXLINE( 673)				if (!(::com::stencyl::Input_obj::_joyButtonState->exists(device))) {
HXLINE( 674)					continue;
            				}
HXLINE( 676)				switch((int)(controlType)){
            					case (int)0: {
HXLINE( 679)						int _hx_tmp = ( (int)(::haxe::IMap_obj::get(::com::stencyl::Input_obj::_joyAxisState,device)->__GetItem(buttonID)) );
HXDLIN( 679)						if ((_hx_tmp == button->a->__get((int)3))) {
HXLINE( 680)							pressure = ::Math_obj::max(pressure,::Math_obj::abs(( (Float)(::haxe::IMap_obj::get(::com::stencyl::Input_obj::_joyAxisPressure,device)->__GetItem(buttonID)) )));
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 682)						int _hx_tmp1 = ( (int)(::haxe::IMap_obj::get(::com::stencyl::Input_obj::_joyHatState,device)->__GetItem(buttonID)) );
HXDLIN( 682)						if ((_hx_tmp1 == button->a->__get((int)3))) {
HXLINE( 683)							pressure = ((Float)1.0);
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 685)						if (( (bool)(::haxe::IMap_obj::get(::com::stencyl::Input_obj::_joyButtonState,device)->__GetItem(buttonID)) )) {
HXLINE( 686)							pressure = ((Float)1.0);
            						}
            					}
            					break;
            				}
            			}
            		}
HXLINE( 691)		control->pressure = pressure;
HXLINE( 693)		bool _hx_tmp2;
HXDLIN( 693)		if ((pressure > (int)0)) {
HXLINE( 693)			_hx_tmp2 = !(control->down);
            		}
            		else {
HXLINE( 693)			_hx_tmp2 = false;
            		}
HXDLIN( 693)		if (_hx_tmp2) {
HXLINE( 694)			::com::stencyl::Input_obj::controlPressed(control,pressure);
            		}
            		else {
HXLINE( 695)			bool _hx_tmp3;
HXDLIN( 695)			if ((pressure == (int)0)) {
HXLINE( 695)				_hx_tmp3 = control->down;
            			}
            			else {
HXLINE( 695)				_hx_tmp3 = false;
            			}
HXDLIN( 695)			if (_hx_tmp3) {
HXLINE( 696)				::com::stencyl::Input_obj::controlReleased(control);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,controlStateUpdated,(void))

void Input_obj::onKeyDown( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_700_onKeyDown)
HXLINE( 701)		int code = e->keyCode;
HXLINE( 703)		if ((code > (int)7000)) {
HXLINE( 705)			return;
            		}
HXLINE( 708)		if (!(::com::stencyl::Input_obj::_key->__get(code))) {
HXLINE( 710)			::com::stencyl::Input_obj::_key[code] = true;
HXLINE( 711)			::com::stencyl::Input_obj::controlPressed(::com::stencyl::Input_obj::_keyControlMap->get(code).StaticCast<  ::com::stencyl::Control >(),((Float)1.0));
            		}
HXLINE( 714)		{
HXLINE( 714)			::cpp::VirtualArray listeners = ::com::stencyl::Engine_obj::engine->whenAnyKeyPressedListeners;
HXDLIN( 714)			int r = (int)0;
HXDLIN( 714)			while((r < listeners->get_length())){
HXLINE( 714)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 714)					 ::Dynamic f = listeners->__get(r);
HXDLIN( 714)					f(e,listeners);
HXDLIN( 714)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 714)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE( 714)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 714)				r = (r + (int)1);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onKeyDown,(void))

void Input_obj::onKeyUp( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_718_onKeyUp)
HXLINE( 719)		int code = e->keyCode;
HXLINE( 721)		if ((code > (int)7000)) {
HXLINE( 723)			return;
            		}
HXLINE( 726)		if (::com::stencyl::Input_obj::_key->__get(code)) {
HXLINE( 728)			::com::stencyl::Input_obj::_key[code] = false;
HXLINE( 729)			::com::stencyl::Input_obj::controlReleased(::com::stencyl::Input_obj::_keyControlMap->get(code).StaticCast<  ::com::stencyl::Control >());
            		}
HXLINE( 732)		{
HXLINE( 732)			::cpp::VirtualArray listeners = ::com::stencyl::Engine_obj::engine->whenAnyKeyReleasedListeners;
HXDLIN( 732)			int r = (int)0;
HXDLIN( 732)			while((r < listeners->get_length())){
HXLINE( 732)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 732)					 ::Dynamic f = listeners->__get(r);
HXDLIN( 732)					f(e,listeners);
HXDLIN( 732)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 732)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE( 732)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 732)				r = (r + (int)1);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onKeyUp,(void))

void Input_obj::onMouseDown( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_744_onMouseDown)
HXDLIN( 744)		if (!(::com::stencyl::Input_obj::mouseDown)) {
HXLINE( 746)			::com::stencyl::Input_obj::mouseDown = true;
HXLINE( 747)			::com::stencyl::Input_obj::mousePressed = true;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onMouseDown,(void))

void Input_obj::onMouseUp( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_752_onMouseUp)
HXLINE( 760)		::com::stencyl::Input_obj::mouseDown = false;
HXLINE( 761)		::com::stencyl::Input_obj::mouseReleased = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onMouseUp,(void))

void Input_obj::onRightMouseDown( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_766_onRightMouseDown)
HXDLIN( 766)		if (!(::com::stencyl::Input_obj::rightMouseDown)) {
HXLINE( 768)			::com::stencyl::Input_obj::rightMouseDown = true;
HXLINE( 769)			::com::stencyl::Input_obj::rightMousePressed = true;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onRightMouseDown,(void))

void Input_obj::onRightMouseUp( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_774_onRightMouseUp)
HXLINE( 775)		::com::stencyl::Input_obj::rightMouseDown = false;
HXLINE( 776)		::com::stencyl::Input_obj::rightMouseReleased = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onRightMouseUp,(void))

void Input_obj::onMiddleMouseDown( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_781_onMiddleMouseDown)
HXDLIN( 781)		if (!(::com::stencyl::Input_obj::middleMouseDown)) {
HXLINE( 783)			::com::stencyl::Input_obj::middleMouseDown = true;
HXLINE( 784)			::com::stencyl::Input_obj::middleMousePressed = true;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onMiddleMouseDown,(void))

void Input_obj::onMiddleMouseUp( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_789_onMiddleMouseUp)
HXLINE( 790)		::com::stencyl::Input_obj::middleMouseDown = false;
HXLINE( 791)		::com::stencyl::Input_obj::middleMouseReleased = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onMiddleMouseUp,(void))

void Input_obj::onMouseWheel( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_795_onMouseWheel)
HXLINE( 796)		::com::stencyl::Input_obj::mouseWheel = true;
HXLINE( 797)		::com::stencyl::Input_obj::mouseWheelDelta = e->delta;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onMouseWheel,(void))

void Input_obj::onJoystickConnected( ::lime::ui::Joystick joystick){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::lime::ui::Joystick,joystick) HXARGC(2)
            		void _hx_run(int axis,Float value){
            			HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_812_onJoystickConnected)
HXLINE( 812)			::com::stencyl::Input_obj::onJoyAxisMove(joystick,axis,value);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::lime::ui::Joystick,joystick) HXARGC(1)
            		void _hx_run(int button){
            			HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_816_onJoystickConnected)
HXLINE( 816)			::com::stencyl::Input_obj::onJoyButtonDown(joystick,button);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::lime::ui::Joystick,joystick) HXARGC(1)
            		void _hx_run(int button1){
            			HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_820_onJoystickConnected)
HXLINE( 820)			::com::stencyl::Input_obj::onJoyButtonUp(joystick,button1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::lime::ui::Joystick,joystick) HXARGC(2)
            		void _hx_run(int hat,int position){
            			HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_824_onJoystickConnected)
HXLINE( 824)			::com::stencyl::Input_obj::onJoyHatMove(joystick,hat,position);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_4, ::lime::ui::Joystick,joystick) HXARGC(3)
            		void _hx_run(int trackball,Float x,Float y){
            			HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_828_onJoystickConnected)
HXLINE( 828)			::com::stencyl::Input_obj::onJoyBallMove(joystick,trackball,x,y);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_5, ::lime::ui::Joystick,joystick) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_832_onJoystickConnected)
HXLINE( 832)			 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 832)			::String _hx_tmp3 = (HX_("Disconnected Joystick: ",a7,76,ad,eb) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_joystick_get_device_name(joystick->id)) )) ));
HXDLIN( 832)			_hx_tmp2(_hx_tmp3,hx::SourceInfo(HX_("Input.hx",14,dd,45,a0),832,HX_("com.stencyl.Input",fb,5c,61,e1),HX_("onJoystickConnected",4e,16,6e,3b)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_803_onJoystickConnected)
HXLINE( 804)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 804)		::String _hx_tmp1 = (HX_("Connected Joystick: ",99,02,80,bd) + ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_joystick_get_device_name(joystick->id)) )) ));
HXDLIN( 804)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Input.hx",14,dd,45,a0),804,HX_("com.stencyl.Input",fb,5c,61,e1),HX_("onJoystickConnected",4e,16,6e,3b)));
HXLINE( 806)		{
HXLINE( 806)			::Dynamic this1 = ::com::stencyl::Input_obj::_joyAxisState;
HXDLIN( 806)			int key = joystick->id;
HXDLIN( 806)			::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 806)			{
HXLINE( 806)				int _g2 = (int)0;
HXDLIN( 806)				int _g1 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_joystick_get_num_axes(joystick->id);
HXDLIN( 806)				while((_g2 < _g1)){
HXLINE( 806)					_g2 = (_g2 + (int)1);
HXDLIN( 806)					int i = (_g2 - (int)1);
HXDLIN( 806)					_g->push((int)0);
            				}
            			}
HXDLIN( 806)			( ( ::haxe::ds::IntMap)(this1) )->set(key,_g);
            		}
HXLINE( 807)		{
HXLINE( 807)			::Dynamic this2 = ::com::stencyl::Input_obj::_joyAxisPressure;
HXDLIN( 807)			int key1 = joystick->id;
HXDLIN( 807)			::Array< Float > _g11 = ::Array_obj< Float >::__new(0);
HXDLIN( 807)			{
HXLINE( 807)				int _g3 = (int)0;
HXDLIN( 807)				int _g21 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_joystick_get_num_axes(joystick->id);
HXDLIN( 807)				while((_g3 < _g21)){
HXLINE( 807)					_g3 = (_g3 + (int)1);
HXDLIN( 807)					int i1 = (_g3 - (int)1);
HXDLIN( 807)					_g11->push(((Float)0.0));
            				}
            			}
HXDLIN( 807)			( ( ::haxe::ds::IntMap)(this2) )->set(key1,_g11);
            		}
HXLINE( 808)		::com::stencyl::Input_obj::_joyHatState->set(joystick->id,::Array_obj< int >::fromData( _hx_array_data_e1615cfb_67,2));
HXLINE( 809)		::com::stencyl::Input_obj::_joyButtonState->set(joystick->id,::Array_obj< bool >::__new(0));
HXLINE( 811)		joystick->onAxisMove->add( ::Dynamic(new _hx_Closure_0(joystick)),null(),null());
HXLINE( 815)		joystick->onButtonDown->add( ::Dynamic(new _hx_Closure_1(joystick)),null(),null());
HXLINE( 819)		joystick->onButtonUp->add( ::Dynamic(new _hx_Closure_2(joystick)),null(),null());
HXLINE( 823)		joystick->onHatMove->add( ::Dynamic(new _hx_Closure_3(joystick)),null(),null());
HXLINE( 827)		joystick->onTrackballMove->add( ::Dynamic(new _hx_Closure_4(joystick)),null(),null());
HXLINE( 831)		joystick->onDisconnect->add( ::Dynamic(new _hx_Closure_5(joystick)),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onJoystickConnected,(void))

void Input_obj::onJoyAxisMove( ::lime::ui::Joystick joystick,int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_837_onJoyAxisMove)
HXLINE( 838)		::Array< int > oldState = ( (::Array< int >)(::com::stencyl::Input_obj::_joyAxisState->get(joystick->id)) );
HXLINE( 840)		int cur;
HXLINE( 841)		int old;
HXLINE( 843)		if ((value < -(::com::stencyl::Input_obj::_joySensitivity))) {
HXLINE( 844)			cur = (int)-1;
            		}
            		else {
HXLINE( 845)			if ((value > ::com::stencyl::Input_obj::_joySensitivity)) {
HXLINE( 846)				cur = (int)1;
            			}
            			else {
HXLINE( 848)				cur = (int)0;
            			}
            		}
HXLINE( 850)		old = oldState->__get(axis);
HXLINE( 852)		if ((cur != old)) {
HXLINE( 854)			if ((old == (int)-1)) {
HXLINE( 855)				::com::stencyl::Input_obj::joyRelease(((joystick->id + HX_(", -axis ",86,a2,e9,2e)) + axis));
            			}
            			else {
HXLINE( 856)				if ((old == (int)1)) {
HXLINE( 857)					::com::stencyl::Input_obj::joyRelease(((joystick->id + HX_(", +axis ",c8,e9,32,62)) + axis));
            				}
            			}
HXLINE( 858)			if ((cur == (int)-1)) {
HXLINE( 859)				::String _hx_tmp = ((joystick->id + HX_(", -axis ",86,a2,e9,2e)) + axis);
HXDLIN( 859)				::com::stencyl::Input_obj::joyPress(_hx_tmp,::Math_obj::abs(value));
            			}
            			else {
HXLINE( 860)				if ((cur == (int)1)) {
HXLINE( 861)					::String _hx_tmp1 = ((joystick->id + HX_(", +axis ",c8,e9,32,62)) + axis);
HXDLIN( 861)					::com::stencyl::Input_obj::joyPress(_hx_tmp1,::Math_obj::abs(value));
            				}
            			}
            		}
            		else {
HXLINE( 863)			if ((cur != (int)0)) {
HXLINE( 865)				 ::com::stencyl::Control control = null();
HXLINE( 867)				if ((cur == (int)-1)) {
HXLINE( 868)					control = ::com::stencyl::Input_obj::_joyControlMap->get(((joystick->id + HX_(", -axis ",86,a2,e9,2e)) + axis)).StaticCast<  ::com::stencyl::Control >();
            				}
            				else {
HXLINE( 869)					if ((cur == (int)1)) {
HXLINE( 870)						control = ::com::stencyl::Input_obj::_joyControlMap->get(((joystick->id + HX_(", +axis ",c8,e9,32,62)) + axis)).StaticCast<  ::com::stencyl::Control >();
            					}
            				}
HXLINE( 872)				if (hx::IsNotNull( control )) {
HXLINE( 872)					control->pressure = ::Math_obj::abs(value);
            				}
            			}
            		}
HXLINE( 875)		oldState[axis] = cur;
HXLINE( 877)		::com::stencyl::Input_obj::_joyAxisPressure->get(joystick->id)->__SetItem(axis,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Input_obj,onJoyAxisMove,(void))

void Input_obj::onJoyBallMove( ::lime::ui::Joystick joystick,int trackball,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_881_onJoyBallMove)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Input_obj,onJoyBallMove,(void))

void Input_obj::onJoyHatMove( ::lime::ui::Joystick joystick,int hat,int position){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_886_onJoyHatMove)
HXLINE( 887)		int oldX = ( (int)(::com::stencyl::Input_obj::_joyHatState->get(joystick->id)->__GetItem((int)0)) );
HXLINE( 888)		int oldY = ( (int)(::com::stencyl::Input_obj::_joyHatState->get(joystick->id)->__GetItem((int)1)) );
HXLINE( 890)		int newX;
HXDLIN( 890)		if (::lime::ui::_JoystickHatPosition::JoystickHatPosition_Impl__obj::get_left(position)) {
HXLINE( 890)			newX = (int)-1;
            		}
            		else {
HXLINE( 890)			if (::lime::ui::_JoystickHatPosition::JoystickHatPosition_Impl__obj::get_right(position)) {
HXLINE( 890)				newX = (int)1;
            			}
            			else {
HXLINE( 890)				newX = (int)0;
            			}
            		}
HXLINE( 891)		int newY;
HXDLIN( 891)		if (::lime::ui::_JoystickHatPosition::JoystickHatPosition_Impl__obj::get_up(position)) {
HXLINE( 891)			newY = (int)-1;
            		}
            		else {
HXLINE( 891)			if (::lime::ui::_JoystickHatPosition::JoystickHatPosition_Impl__obj::get_down(position)) {
HXLINE( 891)				newY = (int)1;
            			}
            			else {
HXLINE( 891)				newY = (int)0;
            			}
            		}
HXLINE( 893)		if ((newX != oldX)) {
HXLINE( 895)			if ((oldX == (int)-1)) {
HXLINE( 896)				::com::stencyl::Input_obj::joyRelease((joystick->id + HX_(", left hat",36,e5,91,9c)));
            			}
            			else {
HXLINE( 897)				if ((oldX == (int)1)) {
HXLINE( 898)					::com::stencyl::Input_obj::joyRelease((joystick->id + HX_(", right hat",23,a8,ec,c4)));
            				}
            			}
HXLINE( 899)			if ((newX == (int)-1)) {
HXLINE( 900)				::com::stencyl::Input_obj::joyPress((joystick->id + HX_(", left hat",36,e5,91,9c)),((Float)1.0));
            			}
            			else {
HXLINE( 901)				if ((newX == (int)1)) {
HXLINE( 902)					::com::stencyl::Input_obj::joyPress((joystick->id + HX_(", right hat",23,a8,ec,c4)),((Float)1.0));
            				}
            			}
            		}
HXLINE( 904)		if ((newY != oldY)) {
HXLINE( 906)			if ((oldY == (int)-1)) {
HXLINE( 907)				::com::stencyl::Input_obj::joyRelease((joystick->id + HX_(", up hat",8a,b8,72,61)));
            			}
            			else {
HXLINE( 908)				if ((oldY == (int)1)) {
HXLINE( 909)					::com::stencyl::Input_obj::joyRelease((joystick->id + HX_(", down hat",11,9f,7e,ca)));
            				}
            			}
HXLINE( 910)			if ((newY == (int)-1)) {
HXLINE( 911)				::com::stencyl::Input_obj::joyPress((joystick->id + HX_(", up hat",8a,b8,72,61)),((Float)1.0));
            			}
            			else {
HXLINE( 912)				if ((newY == (int)1)) {
HXLINE( 913)					::com::stencyl::Input_obj::joyPress((joystick->id + HX_(", down hat",11,9f,7e,ca)),((Float)1.0));
            				}
            			}
            		}
HXLINE( 916)		::com::stencyl::Input_obj::_joyHatState->set(joystick->id,::Array_obj< int >::__new(2)->init(0,newX)->init(1,newY));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Input_obj,onJoyHatMove,(void))

void Input_obj::onJoyButtonDown( ::lime::ui::Joystick joystick,int button){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_920_onJoyButtonDown)
HXLINE( 921)		::com::stencyl::Input_obj::_joyButtonState->get(joystick->id)->__SetItem(button,true);
HXLINE( 922)		::com::stencyl::Input_obj::joyPress(((joystick->id + HX_(", ",74,26,00,00)) + button),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Input_obj,onJoyButtonDown,(void))

void Input_obj::onJoyButtonUp( ::lime::ui::Joystick joystick,int button){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_926_onJoyButtonUp)
HXLINE( 927)		::com::stencyl::Input_obj::_joyButtonState->get(joystick->id)->__SetItem(button,false);
HXLINE( 928)		::com::stencyl::Input_obj::joyRelease(((joystick->id + HX_(", ",74,26,00,00)) + button));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Input_obj,onJoyButtonUp,(void))

void Input_obj::joyPress(::String id,Float pressure){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_932_joyPress)
HXLINE( 933)		 ::com::stencyl::Control control = ::com::stencyl::Input_obj::_joyControlMap->get(id).StaticCast<  ::com::stencyl::Control >();
HXLINE( 934)		::com::stencyl::Input_obj::controlPressed(control,pressure);
HXLINE( 936)		{
HXLINE( 936)			::cpp::VirtualArray listeners = ::com::stencyl::Engine_obj::engine->whenAnyGamepadPressedListeners;
HXDLIN( 936)			int r = (int)0;
HXDLIN( 936)			while((r < listeners->get_length())){
HXLINE( 936)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 936)					 ::Dynamic f = listeners->__get(r);
HXDLIN( 936)					f(id,listeners);
HXDLIN( 936)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 936)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE( 936)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 936)				r = (r + (int)1);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Input_obj,joyPress,(void))

void Input_obj::joyRelease(::String id){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_940_joyRelease)
HXLINE( 941)		::com::stencyl::Input_obj::controlReleased(::com::stencyl::Input_obj::_joyControlMap->get(id).StaticCast<  ::com::stencyl::Control >());
HXLINE( 943)		{
HXLINE( 943)			::cpp::VirtualArray listeners = ::com::stencyl::Engine_obj::engine->whenAnyGamepadReleasedListeners;
HXDLIN( 943)			int r = (int)0;
HXDLIN( 943)			while((r < listeners->get_length())){
HXLINE( 943)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 943)					 ::Dynamic f = listeners->__get(r);
HXDLIN( 943)					f(id,listeners);
HXDLIN( 943)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 943)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE( 943)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 943)				r = (r + (int)1);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,joyRelease,(void))

void Input_obj::onTouchBegin( ::openfl::events::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_949_onTouchBegin)
HXLINE( 950)		{
HXLINE( 950)			::cpp::VirtualArray listeners = ::com::stencyl::Engine_obj::engine->whenMTStartListeners;
HXDLIN( 950)			int r = (int)0;
HXDLIN( 950)			while((r < listeners->get_length())){
HXLINE( 950)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 950)					 ::Dynamic f = listeners->__get(r);
HXDLIN( 950)					f(e,listeners);
HXDLIN( 950)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 950)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE( 950)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 950)				r = (r + (int)1);
            			}
            		}
HXLINE( 952)		{
HXLINE( 952)			::Dynamic this1 = ::com::stencyl::Input_obj::multiTouchPoints;
HXDLIN( 952)			( ( ::haxe::ds::StringMap)(this1) )->set(::Std_obj::string(e->touchPointID),e);
            		}
HXLINE( 953)		::com::stencyl::Input_obj::numTouches++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onTouchBegin,(void))

void Input_obj::onTouchMove( ::openfl::events::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_957_onTouchMove)
HXLINE( 958)		{
HXLINE( 958)			::cpp::VirtualArray listeners = ::com::stencyl::Engine_obj::engine->whenMTDragListeners;
HXDLIN( 958)			int r = (int)0;
HXDLIN( 958)			while((r < listeners->get_length())){
HXLINE( 958)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 958)					 ::Dynamic f = listeners->__get(r);
HXDLIN( 958)					f(e,listeners);
HXDLIN( 958)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 958)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE( 958)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 958)				r = (r + (int)1);
            			}
            		}
HXLINE( 960)		{
HXLINE( 960)			::Dynamic this1 = ::com::stencyl::Input_obj::multiTouchPoints;
HXDLIN( 960)			( ( ::haxe::ds::StringMap)(this1) )->set(::Std_obj::string(e->touchPointID),e);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onTouchMove,(void))

void Input_obj::onTouchEnd( ::openfl::events::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_964_onTouchEnd)
HXLINE( 965)		{
HXLINE( 965)			::cpp::VirtualArray listeners = ::com::stencyl::Engine_obj::engine->whenMTEndListeners;
HXDLIN( 965)			int r = (int)0;
HXDLIN( 965)			while((r < listeners->get_length())){
HXLINE( 965)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 965)					 ::Dynamic f = listeners->__get(r);
HXDLIN( 965)					f(e,listeners);
HXDLIN( 965)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 965)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE( 965)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 965)				r = (r + (int)1);
            			}
            		}
HXLINE( 967)		{
HXLINE( 967)			::Dynamic this1 = ::com::stencyl::Input_obj::multiTouchPoints;
HXDLIN( 967)			( ( ::haxe::ds::StringMap)(this1) )->remove(::Std_obj::string(e->touchPointID));
            		}
HXLINE( 968)		::com::stencyl::Input_obj::numTouches--;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Input_obj,onTouchEnd,(void))


Input_obj::Input_obj()
{
}

bool Input_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_key") ) { outValue = ( _key ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"check") ) { outValue = check_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mouseX") ) { outValue = ( mouseX ); return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { outValue = ( mouseY ); return true; }
		if (HX_FIELD_EQ(inName,"accelX") ) { outValue = ( accelX ); return true; }
		if (HX_FIELD_EQ(inName,"accelY") ) { outValue = ( accelY ); return true; }
		if (HX_FIELD_EQ(inName,"accelZ") ) { outValue = ( accelZ ); return true; }
		if (HX_FIELD_EQ(inName,"define") ) { outValue = define_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mapKey") ) { outValue = mapKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"enable") ) { outValue = enable_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getKeys") ) { outValue = getKeys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pressed") ) { outValue = pressed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onSwipe") ) { outValue = onSwipe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { outValue = onKeyUp_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"swipedUp") ) { outValue = ( swipedUp ); return true; }
		if (HX_FIELD_EQ(inName,"_enabled") ) { outValue = ( _enabled ); return true; }
		if (HX_FIELD_EQ(inName,"unmapKey") ) { outValue = unmapKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"released") ) { outValue = released_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"joyPress") ) { outValue = joyPress_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mouseDown") ) { outValue = ( mouseDown ); return true; }
		if (HX_FIELD_EQ(inName,"_roxAgent") ) { outValue = ( _roxAgent ); return true; }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { outValue = onKeyDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { outValue = onMouseUp_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mouseWheel") ) { outValue = ( mouseWheel ); return true; }
		if (HX_FIELD_EQ(inName,"numTouches") ) { outValue = ( numTouches ); return true; }
		if (HX_FIELD_EQ(inName,"swipedDown") ) { outValue = ( swipedDown ); return true; }
		if (HX_FIELD_EQ(inName,"swipedLeft") ) { outValue = ( swipedLeft ); return true; }
		if (HX_FIELD_EQ(inName,"joyRelease") ) { outValue = joyRelease_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onTouchEnd") ) { outValue = onTouchEnd_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"swipedRight") ) { outValue = ( swipedRight ); return true; }
		if (HX_FIELD_EQ(inName,"_controlMap") ) { outValue = ( _controlMap ); return true; }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { outValue = onMouseDown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onTouchMove") ) { outValue = onTouchMove_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mousePressed") ) { outValue = ( mousePressed ); return true; }
		if (HX_FIELD_EQ(inName,"_joyHatState") ) { outValue = ( _joyHatState ); return true; }
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unmapControl") ) { outValue = unmapControl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { outValue = onMouseWheel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onJoyHatMove") ) { outValue = onJoyHatMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onTouchBegin") ) { outValue = onTouchBegin_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseReleased") ) { outValue = ( mouseReleased ); return true; }
		if (HX_FIELD_EQ(inName,"_joyAxisState") ) { outValue = ( _joyAxisState ); return true; }
		if (HX_FIELD_EQ(inName,"onJoyAxisMove") ) { outValue = onJoyAxisMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onJoyBallMove") ) { outValue = onJoyBallMove_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onJoyButtonUp") ) { outValue = onJoyButtonUp_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"rightMouseDown") ) { outValue = ( rightMouseDown ); return true; }
		if (HX_FIELD_EQ(inName,"_keyControlMap") ) { outValue = ( _keyControlMap ); return true; }
		if (HX_FIELD_EQ(inName,"_joyControlMap") ) { outValue = ( _joyControlMap ); return true; }
		if (HX_FIELD_EQ(inName,"enableJoystick") ) { outValue = enableJoystick_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"controlPressed") ) { outValue = controlPressed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onRightMouseUp") ) { outValue = onRightMouseUp_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mouseWheelDelta") ) { outValue = ( mouseWheelDelta ); return true; }
		if (HX_FIELD_EQ(inName,"middleMouseDown") ) { outValue = ( middleMouseDown ); return true; }
		if (HX_FIELD_EQ(inName,"_swipeDirection") ) { outValue = ( _swipeDirection ); return true; }
		if (HX_FIELD_EQ(inName,"_joySensitivity") ) { outValue = ( _joySensitivity ); return true; }
		if (HX_FIELD_EQ(inName,"_joyButtonState") ) { outValue = ( _joyButtonState ); return true; }
		if (HX_FIELD_EQ(inName,"loadInputConfig") ) { outValue = loadInputConfig_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"controlReleased") ) { outValue = controlReleased_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onMiddleMouseUp") ) { outValue = onMiddleMouseUp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onJoyButtonDown") ) { outValue = onJoyButtonDown_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"multiTouchPoints") ) { outValue = ( multiTouchPoints ); return true; }
		if (HX_FIELD_EQ(inName,"_joyAxisPressure") ) { outValue = ( _joyAxisPressure ); return true; }
		if (HX_FIELD_EQ(inName,"_controlsToReset") ) { outValue = ( _controlsToReset ); return true; }
		if (HX_FIELD_EQ(inName,"simulateKeyPress") ) { outValue = simulateKeyPress_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onRightMouseDown") ) { outValue = onRightMouseDown_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"rightMousePressed") ) { outValue = ( rightMousePressed ); return true; }
		if (HX_FIELD_EQ(inName,"mapJoystickButton") ) { outValue = mapJoystickButton_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setJoySensitivity") ) { outValue = setJoySensitivity_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getButtonPressure") ) { outValue = getButtonPressure_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onMiddleMouseDown") ) { outValue = onMiddleMouseDown_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"rightMouseReleased") ) { outValue = ( rightMouseReleased ); return true; }
		if (HX_FIELD_EQ(inName,"middleMousePressed") ) { outValue = ( middleMousePressed ); return true; }
		if (HX_FIELD_EQ(inName,"saveJoystickConfig") ) { outValue = saveJoystickConfig_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadJoystickConfig") ) { outValue = loadJoystickConfig_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"simulateKeyRelease") ) { outValue = simulateKeyRelease_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"middleMouseReleased") ) { outValue = ( middleMouseReleased ); return true; }
		if (HX_FIELD_EQ(inName,"unmapJoystickButton") ) { outValue = unmapJoystickButton_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearJoystickConfig") ) { outValue = clearJoystickConfig_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"controlStateUpdated") ) { outValue = controlStateUpdated_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onJoystickConnected") ) { outValue = onJoystickConnected_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"unmapKeyboardFromControl") ) { outValue = unmapKeyboardFromControl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unmapJoystickFromControl") ) { outValue = unmapJoystickFromControl_dyn(); return true; }
	}
	return false;
}

bool Input_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_key") ) { _key=ioValue.Cast< ::Array< bool > >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mouseX") ) { mouseX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { mouseY=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"accelX") ) { accelX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"accelY") ) { accelY=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"accelZ") ) { accelZ=ioValue.Cast< Float >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"swipedUp") ) { swipedUp=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"_enabled") ) { _enabled=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mouseDown") ) { mouseDown=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"_roxAgent") ) { _roxAgent=ioValue.Cast<  ::RoxGestureAgent >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mouseWheel") ) { mouseWheel=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"numTouches") ) { numTouches=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"swipedDown") ) { swipedDown=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"swipedLeft") ) { swipedLeft=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"swipedRight") ) { swipedRight=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"_controlMap") ) { _controlMap=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mousePressed") ) { mousePressed=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"_joyHatState") ) { _joyHatState=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseReleased") ) { mouseReleased=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"_joyAxisState") ) { _joyAxisState=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"rightMouseDown") ) { rightMouseDown=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"_keyControlMap") ) { _keyControlMap=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		if (HX_FIELD_EQ(inName,"_joyControlMap") ) { _joyControlMap=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mouseWheelDelta") ) { mouseWheelDelta=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"middleMouseDown") ) { middleMouseDown=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"_swipeDirection") ) { _swipeDirection=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_joySensitivity") ) { _joySensitivity=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"_joyButtonState") ) { _joyButtonState=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"multiTouchPoints") ) { multiTouchPoints=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"_joyAxisPressure") ) { _joyAxisPressure=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		if (HX_FIELD_EQ(inName,"_controlsToReset") ) { _controlsToReset=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"rightMousePressed") ) { rightMousePressed=ioValue.Cast< bool >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"rightMouseReleased") ) { rightMouseReleased=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"middleMousePressed") ) { middleMousePressed=ioValue.Cast< bool >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"middleMouseReleased") ) { middleMouseReleased=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Input_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Input_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Input_obj::mouseX,HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc")},
	{hx::fsFloat,(void *) &Input_obj::mouseY,HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc")},
	{hx::fsBool,(void *) &Input_obj::mouseWheel,HX_HCSTRING("mouseWheel","\x36","\x28","\x87","\xe7")},
	{hx::fsInt,(void *) &Input_obj::mouseWheelDelta,HX_HCSTRING("mouseWheelDelta","\xe2","\xab","\x21","\xb7")},
	{hx::fsBool,(void *) &Input_obj::mouseDown,HX_HCSTRING("mouseDown","\x27","\xb1","\xc2","\xee")},
	{hx::fsBool,(void *) &Input_obj::mousePressed,HX_HCSTRING("mousePressed","\xfd","\x22","\x8c","\x1b")},
	{hx::fsBool,(void *) &Input_obj::mouseReleased,HX_HCSTRING("mouseReleased","\x02","\x88","\xe8","\x05")},
	{hx::fsBool,(void *) &Input_obj::rightMouseDown,HX_HCSTRING("rightMouseDown","\xab","\x29","\xd7","\xcd")},
	{hx::fsBool,(void *) &Input_obj::rightMousePressed,HX_HCSTRING("rightMousePressed","\xf9","\xd4","\xd2","\x89")},
	{hx::fsBool,(void *) &Input_obj::rightMouseReleased,HX_HCSTRING("rightMouseReleased","\x86","\x92","\x7d","\x15")},
	{hx::fsBool,(void *) &Input_obj::middleMouseDown,HX_HCSTRING("middleMouseDown","\x12","\x2b","\xfe","\x01")},
	{hx::fsBool,(void *) &Input_obj::middleMousePressed,HX_HCSTRING("middleMousePressed","\xf2","\x6d","\x57","\x15")},
	{hx::fsBool,(void *) &Input_obj::middleMouseReleased,HX_HCSTRING("middleMouseReleased","\x6d","\xd3","\xfe","\x9d")},
	{hx::fsFloat,(void *) &Input_obj::accelX,HX_HCSTRING("accelX","\x70","\x8f","\x06","\x0b")},
	{hx::fsFloat,(void *) &Input_obj::accelY,HX_HCSTRING("accelY","\x71","\x8f","\x06","\x0b")},
	{hx::fsFloat,(void *) &Input_obj::accelZ,HX_HCSTRING("accelZ","\x72","\x8f","\x06","\x0b")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Input_obj::multiTouchPoints,HX_HCSTRING("multiTouchPoints","\x49","\x95","\xf4","\xda")},
	{hx::fsInt,(void *) &Input_obj::numTouches,HX_HCSTRING("numTouches","\x47","\x5c","\x18","\x09")},
	{hx::fsBool,(void *) &Input_obj::swipedUp,HX_HCSTRING("swipedUp","\xa5","\x0b","\x8c","\xc1")},
	{hx::fsBool,(void *) &Input_obj::swipedDown,HX_HCSTRING("swipedDown","\x2c","\x04","\x25","\x3a")},
	{hx::fsBool,(void *) &Input_obj::swipedLeft,HX_HCSTRING("swipedLeft","\xd1","\x13","\x67","\x3f")},
	{hx::fsBool,(void *) &Input_obj::swipedRight,HX_HCSTRING("swipedRight","\xd2","\x50","\xd7","\xb1")},
	{hx::fsBool,(void *) &Input_obj::_enabled,HX_HCSTRING("_enabled","\x02","\x5e","\xe9","\xb7")},
	{hx::fsObject /*::RoxGestureAgent*/ ,(void *) &Input_obj::_roxAgent,HX_HCSTRING("_roxAgent","\x09","\x46","\x1c","\x74")},
	{hx::fsInt,(void *) &Input_obj::_swipeDirection,HX_HCSTRING("_swipeDirection","\x04","\x83","\xfe","\x11")},
	{hx::fsFloat,(void *) &Input_obj::_joySensitivity,HX_HCSTRING("_joySensitivity","\x0a","\x35","\x0e","\x65")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Input_obj::_joyHatState,HX_HCSTRING("_joyHatState","\xeb","\x8a","\xf7","\x26")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Input_obj::_joyAxisState,HX_HCSTRING("_joyAxisState","\xdb","\x61","\xd7","\x5e")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Input_obj::_joyAxisPressure,HX_HCSTRING("_joyAxisPressure","\x3b","\xba","\xdb","\x00")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Input_obj::_joyButtonState,HX_HCSTRING("_joyButtonState","\xaa","\xd7","\xfe","\xec")},
	{hx::fsObject /*Array< bool >*/ ,(void *) &Input_obj::_key,HX_HCSTRING("_key","\xa0","\xce","\x1c","\x3f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Input_obj::_controlsToReset,HX_HCSTRING("_controlsToReset","\xff","\xd4","\x3d","\xa8")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Input_obj::_controlMap,HX_HCSTRING("_controlMap","\x5e","\xdc","\x30","\xd7")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Input_obj::_keyControlMap,HX_HCSTRING("_keyControlMap","\xff","\x69","\xc5","\x3a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Input_obj::_joyControlMap,HX_HCSTRING("_joyControlMap","\xb4","\x34","\x7f","\x86")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Input_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Input_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Input_obj::mouseX,"mouseX");
	HX_MARK_MEMBER_NAME(Input_obj::mouseY,"mouseY");
	HX_MARK_MEMBER_NAME(Input_obj::mouseWheel,"mouseWheel");
	HX_MARK_MEMBER_NAME(Input_obj::mouseWheelDelta,"mouseWheelDelta");
	HX_MARK_MEMBER_NAME(Input_obj::mouseDown,"mouseDown");
	HX_MARK_MEMBER_NAME(Input_obj::mousePressed,"mousePressed");
	HX_MARK_MEMBER_NAME(Input_obj::mouseReleased,"mouseReleased");
	HX_MARK_MEMBER_NAME(Input_obj::rightMouseDown,"rightMouseDown");
	HX_MARK_MEMBER_NAME(Input_obj::rightMousePressed,"rightMousePressed");
	HX_MARK_MEMBER_NAME(Input_obj::rightMouseReleased,"rightMouseReleased");
	HX_MARK_MEMBER_NAME(Input_obj::middleMouseDown,"middleMouseDown");
	HX_MARK_MEMBER_NAME(Input_obj::middleMousePressed,"middleMousePressed");
	HX_MARK_MEMBER_NAME(Input_obj::middleMouseReleased,"middleMouseReleased");
	HX_MARK_MEMBER_NAME(Input_obj::accelX,"accelX");
	HX_MARK_MEMBER_NAME(Input_obj::accelY,"accelY");
	HX_MARK_MEMBER_NAME(Input_obj::accelZ,"accelZ");
	HX_MARK_MEMBER_NAME(Input_obj::multiTouchPoints,"multiTouchPoints");
	HX_MARK_MEMBER_NAME(Input_obj::numTouches,"numTouches");
	HX_MARK_MEMBER_NAME(Input_obj::swipedUp,"swipedUp");
	HX_MARK_MEMBER_NAME(Input_obj::swipedDown,"swipedDown");
	HX_MARK_MEMBER_NAME(Input_obj::swipedLeft,"swipedLeft");
	HX_MARK_MEMBER_NAME(Input_obj::swipedRight,"swipedRight");
	HX_MARK_MEMBER_NAME(Input_obj::_enabled,"_enabled");
	HX_MARK_MEMBER_NAME(Input_obj::_roxAgent,"_roxAgent");
	HX_MARK_MEMBER_NAME(Input_obj::_swipeDirection,"_swipeDirection");
	HX_MARK_MEMBER_NAME(Input_obj::_joySensitivity,"_joySensitivity");
	HX_MARK_MEMBER_NAME(Input_obj::_joyHatState,"_joyHatState");
	HX_MARK_MEMBER_NAME(Input_obj::_joyAxisState,"_joyAxisState");
	HX_MARK_MEMBER_NAME(Input_obj::_joyAxisPressure,"_joyAxisPressure");
	HX_MARK_MEMBER_NAME(Input_obj::_joyButtonState,"_joyButtonState");
	HX_MARK_MEMBER_NAME(Input_obj::_key,"_key");
	HX_MARK_MEMBER_NAME(Input_obj::_controlsToReset,"_controlsToReset");
	HX_MARK_MEMBER_NAME(Input_obj::_controlMap,"_controlMap");
	HX_MARK_MEMBER_NAME(Input_obj::_keyControlMap,"_keyControlMap");
	HX_MARK_MEMBER_NAME(Input_obj::_joyControlMap,"_joyControlMap");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Input_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Input_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Input_obj::mouseX,"mouseX");
	HX_VISIT_MEMBER_NAME(Input_obj::mouseY,"mouseY");
	HX_VISIT_MEMBER_NAME(Input_obj::mouseWheel,"mouseWheel");
	HX_VISIT_MEMBER_NAME(Input_obj::mouseWheelDelta,"mouseWheelDelta");
	HX_VISIT_MEMBER_NAME(Input_obj::mouseDown,"mouseDown");
	HX_VISIT_MEMBER_NAME(Input_obj::mousePressed,"mousePressed");
	HX_VISIT_MEMBER_NAME(Input_obj::mouseReleased,"mouseReleased");
	HX_VISIT_MEMBER_NAME(Input_obj::rightMouseDown,"rightMouseDown");
	HX_VISIT_MEMBER_NAME(Input_obj::rightMousePressed,"rightMousePressed");
	HX_VISIT_MEMBER_NAME(Input_obj::rightMouseReleased,"rightMouseReleased");
	HX_VISIT_MEMBER_NAME(Input_obj::middleMouseDown,"middleMouseDown");
	HX_VISIT_MEMBER_NAME(Input_obj::middleMousePressed,"middleMousePressed");
	HX_VISIT_MEMBER_NAME(Input_obj::middleMouseReleased,"middleMouseReleased");
	HX_VISIT_MEMBER_NAME(Input_obj::accelX,"accelX");
	HX_VISIT_MEMBER_NAME(Input_obj::accelY,"accelY");
	HX_VISIT_MEMBER_NAME(Input_obj::accelZ,"accelZ");
	HX_VISIT_MEMBER_NAME(Input_obj::multiTouchPoints,"multiTouchPoints");
	HX_VISIT_MEMBER_NAME(Input_obj::numTouches,"numTouches");
	HX_VISIT_MEMBER_NAME(Input_obj::swipedUp,"swipedUp");
	HX_VISIT_MEMBER_NAME(Input_obj::swipedDown,"swipedDown");
	HX_VISIT_MEMBER_NAME(Input_obj::swipedLeft,"swipedLeft");
	HX_VISIT_MEMBER_NAME(Input_obj::swipedRight,"swipedRight");
	HX_VISIT_MEMBER_NAME(Input_obj::_enabled,"_enabled");
	HX_VISIT_MEMBER_NAME(Input_obj::_roxAgent,"_roxAgent");
	HX_VISIT_MEMBER_NAME(Input_obj::_swipeDirection,"_swipeDirection");
	HX_VISIT_MEMBER_NAME(Input_obj::_joySensitivity,"_joySensitivity");
	HX_VISIT_MEMBER_NAME(Input_obj::_joyHatState,"_joyHatState");
	HX_VISIT_MEMBER_NAME(Input_obj::_joyAxisState,"_joyAxisState");
	HX_VISIT_MEMBER_NAME(Input_obj::_joyAxisPressure,"_joyAxisPressure");
	HX_VISIT_MEMBER_NAME(Input_obj::_joyButtonState,"_joyButtonState");
	HX_VISIT_MEMBER_NAME(Input_obj::_key,"_key");
	HX_VISIT_MEMBER_NAME(Input_obj::_controlsToReset,"_controlsToReset");
	HX_VISIT_MEMBER_NAME(Input_obj::_controlMap,"_controlMap");
	HX_VISIT_MEMBER_NAME(Input_obj::_keyControlMap,"_keyControlMap");
	HX_VISIT_MEMBER_NAME(Input_obj::_joyControlMap,"_joyControlMap");
};

#endif

hx::Class Input_obj::__mClass;

static ::String Input_obj_sStaticFields[] = {
	HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"),
	HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"),
	HX_HCSTRING("mouseWheel","\x36","\x28","\x87","\xe7"),
	HX_HCSTRING("mouseWheelDelta","\xe2","\xab","\x21","\xb7"),
	HX_HCSTRING("mouseDown","\x27","\xb1","\xc2","\xee"),
	HX_HCSTRING("mousePressed","\xfd","\x22","\x8c","\x1b"),
	HX_HCSTRING("mouseReleased","\x02","\x88","\xe8","\x05"),
	HX_HCSTRING("rightMouseDown","\xab","\x29","\xd7","\xcd"),
	HX_HCSTRING("rightMousePressed","\xf9","\xd4","\xd2","\x89"),
	HX_HCSTRING("rightMouseReleased","\x86","\x92","\x7d","\x15"),
	HX_HCSTRING("middleMouseDown","\x12","\x2b","\xfe","\x01"),
	HX_HCSTRING("middleMousePressed","\xf2","\x6d","\x57","\x15"),
	HX_HCSTRING("middleMouseReleased","\x6d","\xd3","\xfe","\x9d"),
	HX_HCSTRING("accelX","\x70","\x8f","\x06","\x0b"),
	HX_HCSTRING("accelY","\x71","\x8f","\x06","\x0b"),
	HX_HCSTRING("accelZ","\x72","\x8f","\x06","\x0b"),
	HX_HCSTRING("multiTouchPoints","\x49","\x95","\xf4","\xda"),
	HX_HCSTRING("numTouches","\x47","\x5c","\x18","\x09"),
	HX_HCSTRING("swipedUp","\xa5","\x0b","\x8c","\xc1"),
	HX_HCSTRING("swipedDown","\x2c","\x04","\x25","\x3a"),
	HX_HCSTRING("swipedLeft","\xd1","\x13","\x67","\x3f"),
	HX_HCSTRING("swipedRight","\xd2","\x50","\xd7","\xb1"),
	HX_HCSTRING("_enabled","\x02","\x5e","\xe9","\xb7"),
	HX_HCSTRING("_roxAgent","\x09","\x46","\x1c","\x74"),
	HX_HCSTRING("_swipeDirection","\x04","\x83","\xfe","\x11"),
	HX_HCSTRING("_joySensitivity","\x0a","\x35","\x0e","\x65"),
	HX_HCSTRING("_joyHatState","\xeb","\x8a","\xf7","\x26"),
	HX_HCSTRING("_joyAxisState","\xdb","\x61","\xd7","\x5e"),
	HX_HCSTRING("_joyAxisPressure","\x3b","\xba","\xdb","\x00"),
	HX_HCSTRING("_joyButtonState","\xaa","\xd7","\xfe","\xec"),
	HX_HCSTRING("_key","\xa0","\xce","\x1c","\x3f"),
	HX_HCSTRING("_controlsToReset","\xff","\xd4","\x3d","\xa8"),
	HX_HCSTRING("_controlMap","\x5e","\xdc","\x30","\xd7"),
	HX_HCSTRING("_keyControlMap","\xff","\x69","\xc5","\x3a"),
	HX_HCSTRING("_joyControlMap","\xb4","\x34","\x7f","\x86"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	HX_HCSTRING("define","\x3b","\x7c","\xe4","\x66"),
	HX_HCSTRING("mapKey","\x63","\xc0","\x05","\xb9"),
	HX_HCSTRING("unmapKey","\x7c","\xef","\x4c","\xbb"),
	HX_HCSTRING("getKeys","\xaa","\x91","\x89","\x19"),
	HX_HCSTRING("mapJoystickButton","\x8a","\x63","\x4d","\x1a"),
	HX_HCSTRING("unmapJoystickButton","\x11","\x49","\x38","\x50"),
	HX_HCSTRING("unmapControl","\xba","\x83","\x21","\x26"),
	HX_HCSTRING("unmapKeyboardFromControl","\x89","\x5d","\x1e","\x14"),
	HX_HCSTRING("unmapJoystickFromControl","\x94","\xb7","\x74","\xb5"),
	HX_HCSTRING("setJoySensitivity","\xad","\x73","\x8f","\xb1"),
	HX_HCSTRING("saveJoystickConfig","\xbb","\x50","\xd9","\x17"),
	HX_HCSTRING("loadJoystickConfig","\x64","\x45","\x84","\xd4"),
	HX_HCSTRING("clearJoystickConfig","\x0b","\xa3","\xcf","\xd0"),
	HX_HCSTRING("loadInputConfig","\xe6","\xb5","\x3d","\x01"),
	HX_HCSTRING("check","\xc8","\x98","\xb6","\x45"),
	HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"),
	HX_HCSTRING("released","\xbd","\x88","\xe7","\x76"),
	HX_HCSTRING("getButtonPressure","\x0d","\xbb","\x21","\x57"),
	HX_HCSTRING("simulateKeyPress","\x28","\x31","\x46","\x2d"),
	HX_HCSTRING("simulateKeyRelease","\xac","\xd6","\x19","\xcf"),
	HX_HCSTRING("enableJoystick","\x5f","\x06","\x12","\xd4"),
	HX_HCSTRING("enable","\x83","\xae","\x87","\xf8"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onSwipe","\xdb","\xc6","\x4a","\x1c"),
	HX_HCSTRING("controlPressed","\xc5","\x64","\xdd","\x6c"),
	HX_HCSTRING("controlReleased","\x3a","\xd5","\xb0","\xdb"),
	HX_HCSTRING("controlStateUpdated","\x27","\x97","\xdf","\xc5"),
	HX_HCSTRING("onKeyDown","\x42","\x22","\xf2","\x73"),
	HX_HCSTRING("onKeyUp","\x3b","\x58","\x3c","\x75"),
	HX_HCSTRING("onMouseDown","\x08","\x94","\x05","\x11"),
	HX_HCSTRING("onMouseUp","\x81","\xac","\x1d","\x98"),
	HX_HCSTRING("onRightMouseDown","\x2a","\x37","\x2d","\xda"),
	HX_HCSTRING("onRightMouseUp","\x23","\xe3","\x10","\xd5"),
	HX_HCSTRING("onMiddleMouseDown","\xb3","\xec","\xf3","\xc0"),
	HX_HCSTRING("onMiddleMouseUp","\x6c","\xf4","\x79","\xc2"),
	HX_HCSTRING("onMouseWheel","\x35","\xca","\xca","\xbf"),
	HX_HCSTRING("onJoystickConnected","\x4e","\x16","\x6e","\x3b"),
	HX_HCSTRING("onJoyAxisMove","\xa7","\x6d","\x0d","\x3d"),
	HX_HCSTRING("onJoyBallMove","\x05","\x3a","\x16","\xe5"),
	HX_HCSTRING("onJoyHatMove","\x57","\x7c","\xfa","\x6e"),
	HX_HCSTRING("onJoyButtonDown","\x09","\x04","\x6f","\x77"),
	HX_HCSTRING("onJoyButtonUp","\x42","\x6a","\x4b","\x09"),
	HX_HCSTRING("joyPress","\xcf","\x2a","\x96","\x73"),
	HX_HCSTRING("joyRelease","\x13","\xc8","\x98","\x44"),
	HX_HCSTRING("onTouchBegin","\xe9","\x6f","\x2a","\x82"),
	HX_HCSTRING("onTouchMove","\x51","\x55","\x10","\x30"),
	HX_HCSTRING("onTouchEnd","\x9b","\x99","\xc0","\xdd"),
	::String(null())
};

void Input_obj::__register()
{
	hx::Object *dummy = new Input_obj;
	Input_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.Input","\xfb","\x5c","\x61","\xe1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Input_obj::__GetStatic;
	__mClass->mSetStaticField = &Input_obj::__SetStatic;
	__mClass->mMarkFunc = Input_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Input_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Input_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Input_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Input_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Input_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Input_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_29_boot)
HXDLIN(  29)		mouseX = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_30_boot)
HXDLIN(  30)		mouseY = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_32_boot)
HXDLIN(  32)		mouseWheelDelta = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_63_boot)
HXDLIN(  63)		_enabled = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_70_boot)
HXDLIN(  70)		_joySensitivity = ((Float).12);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_71_boot)
HXDLIN(  71)		_joyHatState =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_72_boot)
HXDLIN(  72)		_joyAxisState =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_73_boot)
HXDLIN(  73)		_joyAxisPressure =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_74_boot)
HXDLIN(  74)		_joyButtonState =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_77_boot)
HXDLIN(  77)		_key = ::Array_obj< bool >::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_80_boot)
HXDLIN(  80)		_controlsToReset = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_81_boot)
HXDLIN(  81)		_controlMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_82_boot)
HXDLIN(  82)		_keyControlMap =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_5cf0242cf7caa88f_84_boot)
HXDLIN(  84)		_joyControlMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace com
} // end namespace stencyl
