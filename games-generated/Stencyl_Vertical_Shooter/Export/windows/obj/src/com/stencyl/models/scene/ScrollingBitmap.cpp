// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_ScrollingBitmap
#include <com/stencyl/models/scene/ScrollingBitmap.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_07d03ba3bc7a0e9d_42_new,"com.stencyl.models.scene.ScrollingBitmap","new",0xa7f5e33f,"com.stencyl.models.scene.ScrollingBitmap.new","com/stencyl/models/scene/ScrollingBitmap.hx",42,0x9ab6bd91)
HX_LOCAL_STACK_FRAME(_hx_pos_07d03ba3bc7a0e9d_118_update,"com.stencyl.models.scene.ScrollingBitmap","update",0x49e1488a,"com.stencyl.models.scene.ScrollingBitmap.update","com/stencyl/models/scene/ScrollingBitmap.hx",118,0x9ab6bd91)
HX_LOCAL_STACK_FRAME(_hx_pos_07d03ba3bc7a0e9d_181_resetPositions,"com.stencyl.models.scene.ScrollingBitmap","resetPositions",0xfdd6035c,"com.stencyl.models.scene.ScrollingBitmap.resetPositions","com/stencyl/models/scene/ScrollingBitmap.hx",181,0x9ab6bd91)
HX_LOCAL_STACK_FRAME(_hx_pos_07d03ba3bc7a0e9d_231_start,"com.stencyl.models.scene.ScrollingBitmap","start",0xe67f3d01,"com.stencyl.models.scene.ScrollingBitmap.start","com/stencyl/models/scene/ScrollingBitmap.hx",231,0x9ab6bd91)
HX_LOCAL_STACK_FRAME(_hx_pos_07d03ba3bc7a0e9d_236_stop,"com.stencyl.models.scene.ScrollingBitmap","stop",0x528a6043,"com.stencyl.models.scene.ScrollingBitmap.stop","com/stencyl/models/scene/ScrollingBitmap.hx",236,0x9ab6bd91)
namespace com{
namespace stencyl{
namespace models{
namespace scene{

void ScrollingBitmap_obj::__construct( ::Dynamic img,Float dx,Float dy,hx::Null< Float >  __o_px,hx::Null< Float >  __o_py,hx::Null< int >  __o_ID,hx::Null< bool >  __o_repeats){
Float px = __o_px.Default(0);
Float py = __o_py.Default(0);
int ID = __o_ID.Default(0);
bool repeats = __o_repeats.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_07d03ba3bc7a0e9d_42_new)
HXLINE(  43)		super::__construct();
HXLINE(  45)		this->curStep = (int)0;
HXLINE(  47)		this->running = true;
HXLINE(  48)		this->repeats = repeats;
HXLINE(  50)		this->image1 =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,img,null(),null());
HXLINE(  51)		this->addChild(this->image1);
HXLINE(  53)		this->cacheWidth = this->image1->get_width();
HXLINE(  54)		this->cacheHeight = this->image1->get_height();
HXLINE(  56)		if (repeats) {
HXLINE(  58)			this->image2 =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,img,null(),null());
HXLINE(  59)			 ::openfl::display::Bitmap _hx_tmp = this->image2;
HXDLIN(  59)			Float _hx_tmp1 = this->image1->get_x();
HXDLIN(  59)			_hx_tmp->set_x((_hx_tmp1 - this->cacheWidth));
HXLINE(  60)			this->addChild(this->image2);
HXLINE(  62)			this->image3 =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,img,null(),null());
HXLINE(  63)			 ::openfl::display::Bitmap _hx_tmp2 = this->image3;
HXDLIN(  63)			Float _hx_tmp3 = this->image1->get_x();
HXDLIN(  63)			_hx_tmp2->set_x((_hx_tmp3 + this->cacheWidth));
HXLINE(  64)			this->addChild(this->image3);
HXLINE(  68)			this->image4 =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,img,null(),null());
HXLINE(  69)			 ::openfl::display::Bitmap _hx_tmp4 = this->image4;
HXDLIN(  69)			Float _hx_tmp5 = this->image1->get_x();
HXDLIN(  69)			_hx_tmp4->set_x((_hx_tmp5 - this->cacheWidth));
HXLINE(  70)			 ::openfl::display::Bitmap _hx_tmp6 = this->image4;
HXDLIN(  70)			Float _hx_tmp7 = this->image1->get_y();
HXDLIN(  70)			_hx_tmp6->set_y((_hx_tmp7 - this->cacheHeight));
HXLINE(  71)			this->addChild(this->image4);
HXLINE(  73)			this->image5 =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,img,null(),null());
HXLINE(  74)			 ::openfl::display::Bitmap _hx_tmp8 = this->image5;
HXDLIN(  74)			Float _hx_tmp9 = this->image1->get_y();
HXDLIN(  74)			_hx_tmp8->set_y((_hx_tmp9 - this->cacheHeight));
HXLINE(  75)			this->addChild(this->image5);
HXLINE(  77)			this->image6 =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,img,null(),null());
HXLINE(  78)			 ::openfl::display::Bitmap _hx_tmp10 = this->image6;
HXDLIN(  78)			Float _hx_tmp11 = this->image1->get_x();
HXDLIN(  78)			_hx_tmp10->set_x((_hx_tmp11 + this->cacheWidth));
HXLINE(  79)			 ::openfl::display::Bitmap _hx_tmp12 = this->image6;
HXDLIN(  79)			Float _hx_tmp13 = this->image1->get_y();
HXDLIN(  79)			_hx_tmp12->set_y((_hx_tmp13 - this->cacheHeight));
HXLINE(  80)			this->addChild(this->image6);
HXLINE(  84)			this->image7 =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,img,null(),null());
HXLINE(  85)			 ::openfl::display::Bitmap _hx_tmp14 = this->image7;
HXDLIN(  85)			Float _hx_tmp15 = this->image1->get_x();
HXDLIN(  85)			_hx_tmp14->set_x((_hx_tmp15 - this->cacheWidth));
HXLINE(  86)			 ::openfl::display::Bitmap _hx_tmp16 = this->image7;
HXDLIN(  86)			Float _hx_tmp17 = this->image1->get_y();
HXDLIN(  86)			_hx_tmp16->set_y((_hx_tmp17 + this->cacheHeight));
HXLINE(  87)			this->addChild(this->image7);
HXLINE(  89)			this->image8 =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,img,null(),null());
HXLINE(  90)			 ::openfl::display::Bitmap _hx_tmp18 = this->image8;
HXDLIN(  90)			Float _hx_tmp19 = this->image1->get_y();
HXDLIN(  90)			_hx_tmp18->set_y((_hx_tmp19 + this->cacheHeight));
HXLINE(  91)			this->addChild(this->image8);
HXLINE(  93)			this->image9 =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,img,null(),null());
HXLINE(  94)			 ::openfl::display::Bitmap _hx_tmp20 = this->image9;
HXDLIN(  94)			Float _hx_tmp21 = this->image1->get_x();
HXDLIN(  94)			_hx_tmp20->set_x((_hx_tmp21 + this->cacheWidth));
HXLINE(  95)			 ::openfl::display::Bitmap _hx_tmp22 = this->image9;
HXDLIN(  95)			Float _hx_tmp23 = this->image1->get_y();
HXDLIN(  95)			_hx_tmp22->set_y((_hx_tmp23 + this->cacheHeight));
HXLINE(  96)			this->addChild(this->image9);
            		}
HXLINE(  99)		this->xP = (int)0;
HXLINE( 100)		this->yP = (int)0;
HXLINE( 102)		this->xPos = (int)0;
HXLINE( 103)		this->yPos = (int)0;
HXLINE( 105)		this->xVelocity = dx;
HXLINE( 106)		this->yVelocity = dy;
HXLINE( 108)		this->parallaxX = px;
HXLINE( 109)		this->parallaxY = py;
HXLINE( 111)		bool _hx_tmp24;
HXDLIN( 111)		if ((dx == (int)0)) {
HXLINE( 111)			_hx_tmp24 = (dy != (int)0);
            		}
            		else {
HXLINE( 111)			_hx_tmp24 = true;
            		}
HXDLIN( 111)		this->scrolling = _hx_tmp24;
HXLINE( 112)		bool _hx_tmp25;
HXDLIN( 112)		if ((px == (int)0)) {
HXLINE( 112)			_hx_tmp25 = (py != (int)0);
            		}
            		else {
HXLINE( 112)			_hx_tmp25 = true;
            		}
HXDLIN( 112)		this->parallax = _hx_tmp25;
HXLINE( 114)		this->backgroundID = ID;
            	}

Dynamic ScrollingBitmap_obj::__CreateEmpty() { return new ScrollingBitmap_obj; }

void *ScrollingBitmap_obj::_hx_vtable = 0;

Dynamic ScrollingBitmap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ScrollingBitmap_obj > _hx_result = new ScrollingBitmap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool ScrollingBitmap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x1ce28a71) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x1ce28a71;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void ScrollingBitmap_obj::update(Float x,Float y,Float elapsedTime){
            	HX_STACKFRAME(&_hx_pos_07d03ba3bc7a0e9d_118_update)
HXLINE( 119)		bool needsReset = false;
HXLINE( 121)		if (this->parallax) {
HXLINE( 123)			this->xPos = -(::Std_obj::_hx_int((x * this->parallaxX)));
HXLINE( 124)			this->yPos = -(::Std_obj::_hx_int((y * this->parallaxY)));
HXLINE( 126)			needsReset = true;
            		}
            		else {
HXLINE( 128)			if (this->running) {
HXLINE( 130)				this->xPos = (int)0;
HXLINE( 131)				this->yPos = (int)0;
            			}
            			else {
HXLINE( 135)				this->xPos = this->xP;
HXLINE( 136)				this->yPos = this->yP;
            			}
            		}
HXLINE( 139)		bool _hx_tmp;
HXDLIN( 139)		if (this->scrolling) {
HXLINE( 139)			_hx_tmp = this->running;
            		}
            		else {
HXLINE( 139)			_hx_tmp = false;
            		}
HXDLIN( 139)		if (_hx_tmp) {
HXLINE( 141)			Float width = this->cacheWidth;
HXLINE( 142)			Float height = this->cacheHeight;
HXLINE( 144)			 ::com::stencyl::models::scene::ScrollingBitmap _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 144)			_hx_tmp1->xP = (_hx_tmp1->xP + (((Float)this->xVelocity / (Float)((Float)10.0)) * ::com::stencyl::Engine_obj::SCALE));
HXLINE( 145)			 ::com::stencyl::models::scene::ScrollingBitmap _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 145)			_hx_tmp2->yP = (_hx_tmp2->yP + (((Float)this->yVelocity / (Float)((Float)10.0)) * ::com::stencyl::Engine_obj::SCALE));
HXLINE( 147)			if (this->repeats) {
HXLINE( 149)				bool _hx_tmp3;
HXDLIN( 149)				if (!((this->xP < -(width)))) {
HXLINE( 149)					_hx_tmp3 = (this->xP > width);
            				}
            				else {
HXLINE( 149)					_hx_tmp3 = true;
            				}
HXDLIN( 149)				if (_hx_tmp3) {
HXLINE( 151)					this->xP = (int)0;
            				}
HXLINE( 154)				bool _hx_tmp4;
HXDLIN( 154)				if (!((this->yP < -(height)))) {
HXLINE( 154)					_hx_tmp4 = (this->yP > height);
            				}
            				else {
HXLINE( 154)					_hx_tmp4 = true;
            				}
HXDLIN( 154)				if (_hx_tmp4) {
HXLINE( 156)					this->yP = (int)0;
            				}
            			}
HXLINE( 160)			 ::com::stencyl::models::scene::ScrollingBitmap _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 160)			_hx_tmp5->xPos = (_hx_tmp5->xPos + ::Math_obj::floor(this->xP));
HXLINE( 161)			 ::com::stencyl::models::scene::ScrollingBitmap _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 161)			_hx_tmp6->yPos = (_hx_tmp6->yPos + ::Math_obj::floor(this->yP));
HXLINE( 163)			 ::com::stencyl::models::scene::ScrollingBitmap _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 163)			_hx_tmp7->curStep = (_hx_tmp7->curStep + (int)1);
HXLINE( 165)			if ((this->curStep >= (int)1)) {
HXLINE( 167)				needsReset = true;
HXLINE( 169)				 ::com::stencyl::models::scene::ScrollingBitmap _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 169)				_hx_tmp8->curStep = (_hx_tmp8->curStep - ::Math_obj::floor(this->curStep));
            			}
            		}
HXLINE( 173)		if (needsReset) {
HXLINE( 176)			this->resetPositions();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ScrollingBitmap_obj,update,(void))

void ScrollingBitmap_obj::resetPositions(){
            	HX_STACKFRAME(&_hx_pos_07d03ba3bc7a0e9d_181_resetPositions)
HXLINE( 182)		this->cacheWidth = this->image1->get_width();
HXLINE( 183)		this->cacheHeight = this->image1->get_height();
HXLINE( 185)		if (this->repeats) {
HXLINE( 187)			if ((this->xPos < -(this->cacheWidth))) {
HXLINE( 189)				this->xPos = hx::Mod(this->xPos,this->cacheWidth);
            			}
HXLINE( 192)			if ((this->yPos < -(this->cacheHeight))) {
HXLINE( 194)				this->yPos = hx::Mod(this->yPos,this->cacheHeight);
            			}
            		}
HXLINE( 198)		this->image1->set_x(this->xPos);
HXLINE( 199)		this->image1->set_y(this->yPos);
HXLINE( 201)		if (this->repeats) {
HXLINE( 203)			 ::openfl::display::Bitmap _hx_tmp = this->image2;
HXDLIN( 203)			_hx_tmp->set_x((this->xPos - this->cacheWidth));
HXLINE( 204)			this->image2->set_y(this->yPos);
HXLINE( 206)			 ::openfl::display::Bitmap _hx_tmp1 = this->image3;
HXDLIN( 206)			_hx_tmp1->set_x((this->xPos + this->cacheWidth));
HXLINE( 207)			this->image3->set_y(this->yPos);
HXLINE( 209)			 ::openfl::display::Bitmap _hx_tmp2 = this->image4;
HXDLIN( 209)			_hx_tmp2->set_x((this->xPos - this->cacheWidth));
HXLINE( 210)			 ::openfl::display::Bitmap _hx_tmp3 = this->image4;
HXDLIN( 210)			_hx_tmp3->set_y((this->yPos - this->cacheHeight));
HXLINE( 212)			this->image5->set_x(this->xPos);
HXLINE( 213)			 ::openfl::display::Bitmap _hx_tmp4 = this->image5;
HXDLIN( 213)			_hx_tmp4->set_y((this->yPos - this->cacheHeight));
HXLINE( 215)			 ::openfl::display::Bitmap _hx_tmp5 = this->image6;
HXDLIN( 215)			_hx_tmp5->set_x((this->xPos + this->cacheWidth));
HXLINE( 216)			 ::openfl::display::Bitmap _hx_tmp6 = this->image6;
HXDLIN( 216)			_hx_tmp6->set_y((this->yPos - this->cacheHeight));
HXLINE( 218)			 ::openfl::display::Bitmap _hx_tmp7 = this->image7;
HXDLIN( 218)			_hx_tmp7->set_x((this->xPos - this->cacheWidth));
HXLINE( 219)			 ::openfl::display::Bitmap _hx_tmp8 = this->image7;
HXDLIN( 219)			_hx_tmp8->set_y((this->yPos + this->cacheHeight));
HXLINE( 221)			this->image8->set_x(this->xPos);
HXLINE( 222)			 ::openfl::display::Bitmap _hx_tmp9 = this->image8;
HXDLIN( 222)			_hx_tmp9->set_y((this->yPos + this->cacheHeight));
HXLINE( 224)			 ::openfl::display::Bitmap _hx_tmp10 = this->image9;
HXDLIN( 224)			_hx_tmp10->set_x((this->xPos + this->cacheWidth));
HXLINE( 225)			 ::openfl::display::Bitmap _hx_tmp11 = this->image9;
HXDLIN( 225)			_hx_tmp11->set_y((this->yPos + this->cacheHeight));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollingBitmap_obj,resetPositions,(void))

void ScrollingBitmap_obj::start(){
            	HX_STACKFRAME(&_hx_pos_07d03ba3bc7a0e9d_231_start)
HXDLIN( 231)		this->running = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollingBitmap_obj,start,(void))

void ScrollingBitmap_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_07d03ba3bc7a0e9d_236_stop)
HXDLIN( 236)		this->running = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollingBitmap_obj,stop,(void))


hx::ObjectPtr< ScrollingBitmap_obj > ScrollingBitmap_obj::__new( ::Dynamic img,Float dx,Float dy,hx::Null< Float >  __o_px,hx::Null< Float >  __o_py,hx::Null< int >  __o_ID,hx::Null< bool >  __o_repeats) {
	hx::ObjectPtr< ScrollingBitmap_obj > __this = new ScrollingBitmap_obj();
	__this->__construct(img,dx,dy,__o_px,__o_py,__o_ID,__o_repeats);
	return __this;
}

hx::ObjectPtr< ScrollingBitmap_obj > ScrollingBitmap_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic img,Float dx,Float dy,hx::Null< Float >  __o_px,hx::Null< Float >  __o_py,hx::Null< int >  __o_ID,hx::Null< bool >  __o_repeats) {
	ScrollingBitmap_obj *__this = (ScrollingBitmap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ScrollingBitmap_obj), true, "com.stencyl.models.scene.ScrollingBitmap"));
	*(void **)__this = ScrollingBitmap_obj::_hx_vtable;
	__this->__construct(img,dx,dy,__o_px,__o_py,__o_ID,__o_repeats);
	return __this;
}

ScrollingBitmap_obj::ScrollingBitmap_obj()
{
}

void ScrollingBitmap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScrollingBitmap);
	HX_MARK_MEMBER_NAME(image1,"image1");
	HX_MARK_MEMBER_NAME(image2,"image2");
	HX_MARK_MEMBER_NAME(image3,"image3");
	HX_MARK_MEMBER_NAME(image4,"image4");
	HX_MARK_MEMBER_NAME(image5,"image5");
	HX_MARK_MEMBER_NAME(image6,"image6");
	HX_MARK_MEMBER_NAME(image7,"image7");
	HX_MARK_MEMBER_NAME(image8,"image8");
	HX_MARK_MEMBER_NAME(image9,"image9");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(curStep,"curStep");
	HX_MARK_MEMBER_NAME(running,"running");
	HX_MARK_MEMBER_NAME(parallax,"parallax");
	HX_MARK_MEMBER_NAME(scrolling,"scrolling");
	HX_MARK_MEMBER_NAME(cacheWidth,"cacheWidth");
	HX_MARK_MEMBER_NAME(cacheHeight,"cacheHeight");
	HX_MARK_MEMBER_NAME(xP,"xP");
	HX_MARK_MEMBER_NAME(yP,"yP");
	HX_MARK_MEMBER_NAME(xPos,"xPos");
	HX_MARK_MEMBER_NAME(yPos,"yPos");
	HX_MARK_MEMBER_NAME(xVelocity,"xVelocity");
	HX_MARK_MEMBER_NAME(yVelocity,"yVelocity");
	HX_MARK_MEMBER_NAME(parallaxX,"parallaxX");
	HX_MARK_MEMBER_NAME(parallaxY,"parallaxY");
	HX_MARK_MEMBER_NAME(backgroundID,"backgroundID");
	HX_MARK_MEMBER_NAME(repeats,"repeats");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ScrollingBitmap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(image1,"image1");
	HX_VISIT_MEMBER_NAME(image2,"image2");
	HX_VISIT_MEMBER_NAME(image3,"image3");
	HX_VISIT_MEMBER_NAME(image4,"image4");
	HX_VISIT_MEMBER_NAME(image5,"image5");
	HX_VISIT_MEMBER_NAME(image6,"image6");
	HX_VISIT_MEMBER_NAME(image7,"image7");
	HX_VISIT_MEMBER_NAME(image8,"image8");
	HX_VISIT_MEMBER_NAME(image9,"image9");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(curStep,"curStep");
	HX_VISIT_MEMBER_NAME(running,"running");
	HX_VISIT_MEMBER_NAME(parallax,"parallax");
	HX_VISIT_MEMBER_NAME(scrolling,"scrolling");
	HX_VISIT_MEMBER_NAME(cacheWidth,"cacheWidth");
	HX_VISIT_MEMBER_NAME(cacheHeight,"cacheHeight");
	HX_VISIT_MEMBER_NAME(xP,"xP");
	HX_VISIT_MEMBER_NAME(yP,"yP");
	HX_VISIT_MEMBER_NAME(xPos,"xPos");
	HX_VISIT_MEMBER_NAME(yPos,"yPos");
	HX_VISIT_MEMBER_NAME(xVelocity,"xVelocity");
	HX_VISIT_MEMBER_NAME(yVelocity,"yVelocity");
	HX_VISIT_MEMBER_NAME(parallaxX,"parallaxX");
	HX_VISIT_MEMBER_NAME(parallaxY,"parallaxY");
	HX_VISIT_MEMBER_NAME(backgroundID,"backgroundID");
	HX_VISIT_MEMBER_NAME(repeats,"repeats");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ScrollingBitmap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"xP") ) { return hx::Val( xP ); }
		if (HX_FIELD_EQ(inName,"yP") ) { return hx::Val( yP ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"xPos") ) { return hx::Val( xPos ); }
		if (HX_FIELD_EQ(inName,"yPos") ) { return hx::Val( yPos ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"image1") ) { return hx::Val( image1 ); }
		if (HX_FIELD_EQ(inName,"image2") ) { return hx::Val( image2 ); }
		if (HX_FIELD_EQ(inName,"image3") ) { return hx::Val( image3 ); }
		if (HX_FIELD_EQ(inName,"image4") ) { return hx::Val( image4 ); }
		if (HX_FIELD_EQ(inName,"image5") ) { return hx::Val( image5 ); }
		if (HX_FIELD_EQ(inName,"image6") ) { return hx::Val( image6 ); }
		if (HX_FIELD_EQ(inName,"image7") ) { return hx::Val( image7 ); }
		if (HX_FIELD_EQ(inName,"image8") ) { return hx::Val( image8 ); }
		if (HX_FIELD_EQ(inName,"image9") ) { return hx::Val( image9 ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curStep") ) { return hx::Val( curStep ); }
		if (HX_FIELD_EQ(inName,"running") ) { return hx::Val( running ); }
		if (HX_FIELD_EQ(inName,"repeats") ) { return hx::Val( repeats ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"parallax") ) { return hx::Val( parallax ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrolling") ) { return hx::Val( scrolling ); }
		if (HX_FIELD_EQ(inName,"xVelocity") ) { return hx::Val( xVelocity ); }
		if (HX_FIELD_EQ(inName,"yVelocity") ) { return hx::Val( yVelocity ); }
		if (HX_FIELD_EQ(inName,"parallaxX") ) { return hx::Val( parallaxX ); }
		if (HX_FIELD_EQ(inName,"parallaxY") ) { return hx::Val( parallaxY ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cacheWidth") ) { return hx::Val( cacheWidth ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cacheHeight") ) { return hx::Val( cacheHeight ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"backgroundID") ) { return hx::Val( backgroundID ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"resetPositions") ) { return hx::Val( resetPositions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ScrollingBitmap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"xP") ) { xP=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yP") ) { yP=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"xPos") ) { xPos=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yPos") ) { yPos=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"image1") ) { image1=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image2") ) { image2=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image3") ) { image3=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image4") ) { image4=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image5") ) { image5=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image6") ) { image6=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image7") ) { image7=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image8") ) { image8=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image9") ) { image9=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curStep") ) { curStep=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"running") ) { running=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"repeats") ) { repeats=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"parallax") ) { parallax=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scrolling") ) { scrolling=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xVelocity") ) { xVelocity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yVelocity") ) { yVelocity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parallaxX") ) { parallaxX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parallaxY") ) { parallaxY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cacheWidth") ) { cacheWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cacheHeight") ) { cacheHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"backgroundID") ) { backgroundID=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScrollingBitmap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("image1","\x76","\x50","\x92","\xfe"));
	outFields->push(HX_HCSTRING("image2","\x77","\x50","\x92","\xfe"));
	outFields->push(HX_HCSTRING("image3","\x78","\x50","\x92","\xfe"));
	outFields->push(HX_HCSTRING("image4","\x79","\x50","\x92","\xfe"));
	outFields->push(HX_HCSTRING("image5","\x7a","\x50","\x92","\xfe"));
	outFields->push(HX_HCSTRING("image6","\x7b","\x50","\x92","\xfe"));
	outFields->push(HX_HCSTRING("image7","\x7c","\x50","\x92","\xfe"));
	outFields->push(HX_HCSTRING("image8","\x7d","\x50","\x92","\xfe"));
	outFields->push(HX_HCSTRING("image9","\x7e","\x50","\x92","\xfe"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("curStep","\xec","\x58","\x71","\xb7"));
	outFields->push(HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"));
	outFields->push(HX_HCSTRING("parallax","\x57","\xa7","\xf6","\x7d"));
	outFields->push(HX_HCSTRING("scrolling","\xf5","\xfa","\x19","\x3e"));
	outFields->push(HX_HCSTRING("cacheWidth","\x64","\x1c","\x1b","\x0d"));
	outFields->push(HX_HCSTRING("cacheHeight","\xc9","\x33","\xed","\x20"));
	outFields->push(HX_HCSTRING("xP","\xd8","\x68","\x00","\x00"));
	outFields->push(HX_HCSTRING("yP","\xb7","\x69","\x00","\x00"));
	outFields->push(HX_HCSTRING("xPos","\xfc","\xaf","\x8e","\x4f"));
	outFields->push(HX_HCSTRING("yPos","\x9b","\xe6","\x37","\x50"));
	outFields->push(HX_HCSTRING("xVelocity","\xb5","\xf6","\xd8","\xd9"));
	outFields->push(HX_HCSTRING("yVelocity","\xb6","\x5f","\xca","\xac"));
	outFields->push(HX_HCSTRING("parallaxX","\x21","\xc5","\xdb","\xb9"));
	outFields->push(HX_HCSTRING("parallaxY","\x22","\xc5","\xdb","\xb9"));
	outFields->push(HX_HCSTRING("backgroundID","\x49","\x2b","\x9d","\x17"));
	outFields->push(HX_HCSTRING("repeats","\xb8","\xd8","\x87","\xa6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ScrollingBitmap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(ScrollingBitmap_obj,image1),HX_HCSTRING("image1","\x76","\x50","\x92","\xfe")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(ScrollingBitmap_obj,image2),HX_HCSTRING("image2","\x77","\x50","\x92","\xfe")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(ScrollingBitmap_obj,image3),HX_HCSTRING("image3","\x78","\x50","\x92","\xfe")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(ScrollingBitmap_obj,image4),HX_HCSTRING("image4","\x79","\x50","\x92","\xfe")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(ScrollingBitmap_obj,image5),HX_HCSTRING("image5","\x7a","\x50","\x92","\xfe")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(ScrollingBitmap_obj,image6),HX_HCSTRING("image6","\x7b","\x50","\x92","\xfe")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(ScrollingBitmap_obj,image7),HX_HCSTRING("image7","\x7c","\x50","\x92","\xfe")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(ScrollingBitmap_obj,image8),HX_HCSTRING("image8","\x7d","\x50","\x92","\xfe")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(ScrollingBitmap_obj,image9),HX_HCSTRING("image9","\x7e","\x50","\x92","\xfe")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,curStep),HX_HCSTRING("curStep","\xec","\x58","\x71","\xb7")},
	{hx::fsBool,(int)offsetof(ScrollingBitmap_obj,running),HX_HCSTRING("running","\xff","\x6d","\x69","\xeb")},
	{hx::fsBool,(int)offsetof(ScrollingBitmap_obj,parallax),HX_HCSTRING("parallax","\x57","\xa7","\xf6","\x7d")},
	{hx::fsBool,(int)offsetof(ScrollingBitmap_obj,scrolling),HX_HCSTRING("scrolling","\xf5","\xfa","\x19","\x3e")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,cacheWidth),HX_HCSTRING("cacheWidth","\x64","\x1c","\x1b","\x0d")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,cacheHeight),HX_HCSTRING("cacheHeight","\xc9","\x33","\xed","\x20")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,xP),HX_HCSTRING("xP","\xd8","\x68","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,yP),HX_HCSTRING("yP","\xb7","\x69","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,xPos),HX_HCSTRING("xPos","\xfc","\xaf","\x8e","\x4f")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,yPos),HX_HCSTRING("yPos","\x9b","\xe6","\x37","\x50")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,xVelocity),HX_HCSTRING("xVelocity","\xb5","\xf6","\xd8","\xd9")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,yVelocity),HX_HCSTRING("yVelocity","\xb6","\x5f","\xca","\xac")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,parallaxX),HX_HCSTRING("parallaxX","\x21","\xc5","\xdb","\xb9")},
	{hx::fsFloat,(int)offsetof(ScrollingBitmap_obj,parallaxY),HX_HCSTRING("parallaxY","\x22","\xc5","\xdb","\xb9")},
	{hx::fsInt,(int)offsetof(ScrollingBitmap_obj,backgroundID),HX_HCSTRING("backgroundID","\x49","\x2b","\x9d","\x17")},
	{hx::fsBool,(int)offsetof(ScrollingBitmap_obj,repeats),HX_HCSTRING("repeats","\xb8","\xd8","\x87","\xa6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ScrollingBitmap_obj_sStaticStorageInfo = 0;
#endif

static ::String ScrollingBitmap_obj_sMemberFields[] = {
	HX_HCSTRING("image1","\x76","\x50","\x92","\xfe"),
	HX_HCSTRING("image2","\x77","\x50","\x92","\xfe"),
	HX_HCSTRING("image3","\x78","\x50","\x92","\xfe"),
	HX_HCSTRING("image4","\x79","\x50","\x92","\xfe"),
	HX_HCSTRING("image5","\x7a","\x50","\x92","\xfe"),
	HX_HCSTRING("image6","\x7b","\x50","\x92","\xfe"),
	HX_HCSTRING("image7","\x7c","\x50","\x92","\xfe"),
	HX_HCSTRING("image8","\x7d","\x50","\x92","\xfe"),
	HX_HCSTRING("image9","\x7e","\x50","\x92","\xfe"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("curStep","\xec","\x58","\x71","\xb7"),
	HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"),
	HX_HCSTRING("parallax","\x57","\xa7","\xf6","\x7d"),
	HX_HCSTRING("scrolling","\xf5","\xfa","\x19","\x3e"),
	HX_HCSTRING("cacheWidth","\x64","\x1c","\x1b","\x0d"),
	HX_HCSTRING("cacheHeight","\xc9","\x33","\xed","\x20"),
	HX_HCSTRING("xP","\xd8","\x68","\x00","\x00"),
	HX_HCSTRING("yP","\xb7","\x69","\x00","\x00"),
	HX_HCSTRING("xPos","\xfc","\xaf","\x8e","\x4f"),
	HX_HCSTRING("yPos","\x9b","\xe6","\x37","\x50"),
	HX_HCSTRING("xVelocity","\xb5","\xf6","\xd8","\xd9"),
	HX_HCSTRING("yVelocity","\xb6","\x5f","\xca","\xac"),
	HX_HCSTRING("parallaxX","\x21","\xc5","\xdb","\xb9"),
	HX_HCSTRING("parallaxY","\x22","\xc5","\xdb","\xb9"),
	HX_HCSTRING("backgroundID","\x49","\x2b","\x9d","\x17"),
	HX_HCSTRING("repeats","\xb8","\xd8","\x87","\xa6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("resetPositions","\xdb","\x57","\xc2","\x2a"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	::String(null()) };

static void ScrollingBitmap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ScrollingBitmap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ScrollingBitmap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ScrollingBitmap_obj::__mClass,"__mClass");
};

#endif

hx::Class ScrollingBitmap_obj::__mClass;

void ScrollingBitmap_obj::__register()
{
	hx::Object *dummy = new ScrollingBitmap_obj;
	ScrollingBitmap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.scene.ScrollingBitmap","\xcd","\xd7","\xdd","\x26");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ScrollingBitmap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ScrollingBitmap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ScrollingBitmap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ScrollingBitmap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScrollingBitmap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScrollingBitmap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
} // end namespace scene
