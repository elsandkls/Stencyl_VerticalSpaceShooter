// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_HueShader
#include <com/stencyl/graphics/shaders/HueShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e69afd9b2b076636_6_new,"com.stencyl.graphics.shaders.HueShader","new",0x7b44e37b,"com.stencyl.graphics.shaders.HueShader.new","com/stencyl/graphics/shaders/HueShader.hx",6,0x325ec215)
HX_LOCAL_STACK_FRAME(_hx_pos_e69afd9b2b076636_47_setHue,"com.stencyl.graphics.shaders.HueShader","setHue",0x41fc6dfb,"com.stencyl.graphics.shaders.HueShader.setHue","com/stencyl/graphics/shaders/HueShader.hx",47,0x325ec215)
namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{

void HueShader_obj::__construct(hx::Null< Float >  __o_hue,hx::Null< bool >  __o_asDegrees){
Float hue = __o_hue.Default(0);
bool asDegrees = __o_asDegrees.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e69afd9b2b076636_6_new)
HXLINE(   7)		super::__construct();
HXLINE(   9)		if (asDegrees) {
HXLINE(  11)			hue = (((Float)::Math_obj::PI / (Float)(int)180) * hue);
            		}
HXLINE(  14)		::String script = HX_("\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tuniform float hue;\n\t\t\tconst mat3 rgb2yiq = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);\n\t\t\tconst mat3 yiq2rgb = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.1070, 1.7046);\n\n\t\t\tvoid main() \n\t\t\t{\n\t\t\t\tvec3 color = texture2D(uImage0, vTexCoord).rgb;\n\t\t\t\tvec3 yColor = rgb2yiq * color; \n\n\t\t\t\tfloat originalHue = atan(yColor.b, yColor.g);\n\t\t\t\tfloat finalHue = originalHue + hue;\n\t\t\t\tfloat chroma = sqrt(yColor.b * yColor.b + yColor.g * yColor.g);\n\t\t\t\t\n\t\t\t\tvec3 yFinalColor = vec3(yColor.r, chroma * cos(finalHue), chroma * sin(finalHue));\n\t\t\t\tgl_FragColor = vec4(yiq2rgb * yFinalColor, 1.0);\n\t\t\t}\n\t\t",4f,c3,fb,f0);
HXLINE(  40)		this->model =  ::com::stencyl::graphics::shaders::PostProcess_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),script,true);
HXLINE(  42)		this->setHue(hue,false);
            	}

Dynamic HueShader_obj::__CreateEmpty() { return new HueShader_obj; }

void *HueShader_obj::_hx_vtable = 0;

Dynamic HueShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HueShader_obj > _hx_result = new HueShader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool HueShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x488ca67b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x488ca67b;
	} else {
		return inClassId==(int)0x6d12de05;
	}
}

void HueShader_obj::setHue(Float amount,hx::Null< bool >  __o_asDegrees){
bool asDegrees = __o_asDegrees.Default(true);
            	HX_STACKFRAME(&_hx_pos_e69afd9b2b076636_47_setHue)
HXLINE(  48)		if (asDegrees) {
HXLINE(  50)			amount = (((Float)::Math_obj::PI / (Float)(int)180) * amount);
            		}
HXLINE(  53)		this->setProperty(HX_("hue",b8,50,4f,00),amount);
            	}


HX_DEFINE_DYNAMIC_FUNC2(HueShader_obj,setHue,(void))


hx::ObjectPtr< HueShader_obj > HueShader_obj::__new(hx::Null< Float >  __o_hue,hx::Null< bool >  __o_asDegrees) {
	hx::ObjectPtr< HueShader_obj > __this = new HueShader_obj();
	__this->__construct(__o_hue,__o_asDegrees);
	return __this;
}

hx::ObjectPtr< HueShader_obj > HueShader_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_hue,hx::Null< bool >  __o_asDegrees) {
	HueShader_obj *__this = (HueShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HueShader_obj), true, "com.stencyl.graphics.shaders.HueShader"));
	*(void **)__this = HueShader_obj::_hx_vtable;
	__this->__construct(__o_hue,__o_asDegrees);
	return __this;
}

HueShader_obj::HueShader_obj()
{
}

hx::Val HueShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"setHue") ) { return hx::Val( setHue_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *HueShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *HueShader_obj_sStaticStorageInfo = 0;
#endif

static ::String HueShader_obj_sMemberFields[] = {
	HX_HCSTRING("setHue","\x36","\xde","\x66","\x6f"),
	::String(null()) };

static void HueShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HueShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HueShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HueShader_obj::__mClass,"__mClass");
};

#endif

hx::Class HueShader_obj::__mClass;

void HueShader_obj::__register()
{
	hx::Object *dummy = new HueShader_obj;
	HueShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.shaders.HueShader","\x09","\x0a","\xa1","\x47");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HueShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HueShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HueShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HueShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HueShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HueShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders
