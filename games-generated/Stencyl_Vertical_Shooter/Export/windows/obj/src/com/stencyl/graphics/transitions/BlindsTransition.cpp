// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_BlindsTransition
#include <com/stencyl/graphics/transitions/BlindsTransition.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat
#include <com/stencyl/utils/motion/TweenFloat.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f644e06b70fbef9e_27_new,"com.stencyl.graphics.transitions.BlindsTransition","new",0x5f0bbf09,"com.stencyl.graphics.transitions.BlindsTransition.new","com/stencyl/graphics/transitions/BlindsTransition.hx",27,0x279c7347)
HX_LOCAL_STACK_FRAME(_hx_pos_f644e06b70fbef9e_52_start,"com.stencyl.graphics.transitions.BlindsTransition","start",0xf39b1f4b,"com.stencyl.graphics.transitions.BlindsTransition.start","com/stencyl/graphics/transitions/BlindsTransition.hx",52,0x279c7347)
HX_LOCAL_STACK_FRAME(_hx_pos_f644e06b70fbef9e_74_draw,"com.stencyl.graphics.transitions.BlindsTransition","draw",0xc4a9113b,"com.stencyl.graphics.transitions.BlindsTransition.draw","com/stencyl/graphics/transitions/BlindsTransition.hx",74,0x279c7347)
HX_LOCAL_STACK_FRAME(_hx_pos_f644e06b70fbef9e_97_cleanup,"com.stencyl.graphics.transitions.BlindsTransition","cleanup",0xde41034d,"com.stencyl.graphics.transitions.BlindsTransition.cleanup","com/stencyl/graphics/transitions/BlindsTransition.hx",97,0x279c7347)
namespace com{
namespace stencyl{
namespace graphics{
namespace transitions{

void BlindsTransition_obj::__construct(::String direction,Float duration,hx::Null< int >  __o_numBlinds,int color){
int numBlinds = __o_numBlinds.Default(10);
            	HX_STACKFRAME(&_hx_pos_f644e06b70fbef9e_27_new)
HXLINE(  28)		super::__construct(duration);
HXLINE(  30)		this->color = color;
HXLINE(  31)		this->direction = direction;
HXLINE(  32)		this->numBlinds = numBlinds;
HXLINE(  34)		if ((direction == ::com::stencyl::graphics::transitions::Transition_obj::IN)) {
HXLINE(  36)			this->beginBlindWidth = ((Float)(::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE) / (Float)numBlinds);
HXLINE(  37)			this->endBlindWidth = (int)0;
            		}
            		else {
HXLINE(  39)			if ((direction == ::com::stencyl::graphics::transitions::Transition_obj::OUT)) {
HXLINE(  41)				this->beginBlindWidth = (int)0;
HXLINE(  42)				this->endBlindWidth = ((Float)(::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE) / (Float)numBlinds);
            			}
            			else {
HXLINE(  46)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  46)				_hx_tmp((HX_("Invalid transition direction: ",c3,3f,d3,f5) + direction),hx::SourceInfo(HX_("BlindsTransition.hx",cb,97,b8,de),46,HX_("com.stencyl.graphics.transitions.BlindsTransition",97,86,93,d7),HX_("new",60,d0,53,00)));
HXLINE(  47)				this->complete = true;
            			}
            		}
            	}

Dynamic BlindsTransition_obj::__CreateEmpty() { return new BlindsTransition_obj; }

void *BlindsTransition_obj::_hx_vtable = 0;

Dynamic BlindsTransition_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BlindsTransition_obj > _hx_result = new BlindsTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BlindsTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x10817dc5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x10817dc5;
	} else {
		return inClassId==(int)0x62f71757;
	}
}

void BlindsTransition_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_f644e06b70fbef9e_52_start)
HXLINE(  53)		this->active = true;
HXLINE(  55)		Float _hx_tmp = this->beginBlindWidth;
HXDLIN(  55)		this->blindRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,_hx_tmp,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  56)		this->blindWidth =  ::com::stencyl::utils::motion::TweenFloat_obj::__alloc( HX_CTX );
HXLINE(  58)		this->rect =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  59)		this->graphics = this->rect->get_graphics();
HXLINE(  61)		if ((this->direction == ::com::stencyl::graphics::transitions::Transition_obj::IN)) {
HXLINE(  63)			this->graphics->beginFill(this->color,null());
HXLINE(  64)			 ::openfl::display::Graphics _hx_tmp1 = this->graphics;
HXDLIN(  64)			Float _hx_tmp2 = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  64)			_hx_tmp1->drawRect((int)0,(int)0,_hx_tmp2,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  65)			this->graphics->endFill();
            		}
HXLINE(  68)		::com::stencyl::Engine_obj::engine->transitionLayer->addChild(this->rect);
HXLINE(  70)		 ::com::stencyl::utils::motion::TweenFloat _hx_tmp3 = this->blindWidth;
HXDLIN(  70)		Float _hx_tmp4 = this->beginBlindWidth;
HXDLIN(  70)		Float _hx_tmp5 = this->endBlindWidth;
HXDLIN(  70)		 ::com::stencyl::utils::motion::Linear _hx_tmp6 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN(  70)		_hx_tmp3->tween(_hx_tmp4,_hx_tmp5,_hx_tmp6,::Std_obj::_hx_int((this->duration * (int)1000)))->doOnComplete(this->stop_dyn());
            	}


void BlindsTransition_obj::draw( ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_f644e06b70fbef9e_74_draw)
HXLINE(  75)		this->graphics->clear();
HXLINE(  76)		this->graphics->beginFill(this->color,null());
HXLINE(  78)		this->blindRect->x = (int)0;
HXLINE(  79)		this->blindRect->width = this->blindWidth->value;
HXLINE(  81)		if ((this->direction == ::com::stencyl::graphics::transitions::Transition_obj::IN)) {
HXLINE(  83)			 ::openfl::geom::Rectangle _hx_tmp = this->blindRect;
HXDLIN(  83)			_hx_tmp->x = (_hx_tmp->x + (((Float)(::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE) / (Float)this->numBlinds) - this->blindWidth->value));
            		}
HXLINE(  86)		{
HXLINE(  86)			int _g1 = (int)0;
HXDLIN(  86)			int _g = this->numBlinds;
HXDLIN(  86)			while((_g1 < _g)){
HXLINE(  86)				_g1 = (_g1 + (int)1);
HXDLIN(  86)				int i = (_g1 - (int)1);
HXLINE(  88)				this->graphics->drawRect(this->blindRect->x,this->blindRect->y,this->blindRect->width,this->blindRect->height);
HXLINE(  89)				 ::openfl::geom::Rectangle _hx_tmp1 = this->blindRect;
HXDLIN(  89)				_hx_tmp1->x = (_hx_tmp1->x + ((Float)(::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE) / (Float)this->numBlinds));
            			}
            		}
HXLINE(  92)		this->graphics->endFill();
            	}


void BlindsTransition_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_f644e06b70fbef9e_97_cleanup)
HXDLIN(  97)		if (hx::IsNotNull( this->rect )) {
HXLINE(  99)			::com::stencyl::Engine_obj::engine->transitionLayer->removeChild(this->rect);
HXLINE( 100)			this->rect = null();
            		}
            	}



hx::ObjectPtr< BlindsTransition_obj > BlindsTransition_obj::__new(::String direction,Float duration,hx::Null< int >  __o_numBlinds,int color) {
	hx::ObjectPtr< BlindsTransition_obj > __this = new BlindsTransition_obj();
	__this->__construct(direction,duration,__o_numBlinds,color);
	return __this;
}

hx::ObjectPtr< BlindsTransition_obj > BlindsTransition_obj::__alloc(hx::Ctx *_hx_ctx,::String direction,Float duration,hx::Null< int >  __o_numBlinds,int color) {
	BlindsTransition_obj *__this = (BlindsTransition_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BlindsTransition_obj), true, "com.stencyl.graphics.transitions.BlindsTransition"));
	*(void **)__this = BlindsTransition_obj::_hx_vtable;
	__this->__construct(direction,duration,__o_numBlinds,color);
	return __this;
}

BlindsTransition_obj::BlindsTransition_obj()
{
}

void BlindsTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BlindsTransition);
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(numBlinds,"numBlinds");
	HX_MARK_MEMBER_NAME(blindWidth,"blindWidth");
	HX_MARK_MEMBER_NAME(beginBlindWidth,"beginBlindWidth");
	HX_MARK_MEMBER_NAME(endBlindWidth,"endBlindWidth");
	HX_MARK_MEMBER_NAME(blindRect,"blindRect");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(graphics,"graphics");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BlindsTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(numBlinds,"numBlinds");
	HX_VISIT_MEMBER_NAME(blindWidth,"blindWidth");
	HX_VISIT_MEMBER_NAME(beginBlindWidth,"beginBlindWidth");
	HX_VISIT_MEMBER_NAME(endBlindWidth,"endBlindWidth");
	HX_VISIT_MEMBER_NAME(blindRect,"blindRect");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(graphics,"graphics");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BlindsTransition_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { return hx::Val( graphics ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"numBlinds") ) { return hx::Val( numBlinds ); }
		if (HX_FIELD_EQ(inName,"blindRect") ) { return hx::Val( blindRect ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"blindWidth") ) { return hx::Val( blindWidth ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"endBlindWidth") ) { return hx::Val( endBlindWidth ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"beginBlindWidth") ) { return hx::Val( beginBlindWidth ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BlindsTransition_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"numBlinds") ) { numBlinds=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blindRect") ) { blindRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"blindWidth") ) { blindWidth=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"endBlindWidth") ) { endBlindWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"beginBlindWidth") ) { beginBlindWidth=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BlindsTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("numBlinds","\x64","\x84","\xfc","\x54"));
	outFields->push(HX_HCSTRING("blindWidth","\x71","\x40","\x84","\x47"));
	outFields->push(HX_HCSTRING("beginBlindWidth","\xfa","\xdb","\x72","\x7c"));
	outFields->push(HX_HCSTRING("endBlindWidth","\x2c","\xc8","\x49","\x5a"));
	outFields->push(HX_HCSTRING("blindRect","\x19","\x39","\xd4","\xb5"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BlindsTransition_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BlindsTransition_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsInt,(int)offsetof(BlindsTransition_obj,numBlinds),HX_HCSTRING("numBlinds","\x64","\x84","\xfc","\x54")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat*/ ,(int)offsetof(BlindsTransition_obj,blindWidth),HX_HCSTRING("blindWidth","\x71","\x40","\x84","\x47")},
	{hx::fsFloat,(int)offsetof(BlindsTransition_obj,beginBlindWidth),HX_HCSTRING("beginBlindWidth","\xfa","\xdb","\x72","\x7c")},
	{hx::fsFloat,(int)offsetof(BlindsTransition_obj,endBlindWidth),HX_HCSTRING("endBlindWidth","\x2c","\xc8","\x49","\x5a")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BlindsTransition_obj,blindRect),HX_HCSTRING("blindRect","\x19","\x39","\xd4","\xb5")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(BlindsTransition_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(BlindsTransition_obj,graphics),HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BlindsTransition_obj_sStaticStorageInfo = 0;
#endif

static ::String BlindsTransition_obj_sMemberFields[] = {
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("numBlinds","\x64","\x84","\xfc","\x54"),
	HX_HCSTRING("blindWidth","\x71","\x40","\x84","\x47"),
	HX_HCSTRING("beginBlindWidth","\xfa","\xdb","\x72","\x7c"),
	HX_HCSTRING("endBlindWidth","\x2c","\xc8","\x49","\x5a"),
	HX_HCSTRING("blindRect","\x19","\x39","\xd4","\xb5"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	::String(null()) };

static void BlindsTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BlindsTransition_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BlindsTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BlindsTransition_obj::__mClass,"__mClass");
};

#endif

hx::Class BlindsTransition_obj::__mClass;

void BlindsTransition_obj::__register()
{
	hx::Object *dummy = new BlindsTransition_obj;
	BlindsTransition_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.transitions.BlindsTransition","\x97","\x86","\x93","\xd7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BlindsTransition_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BlindsTransition_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BlindsTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BlindsTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlindsTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlindsTransition_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace transitions
