// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_utils_motion_BounceInOut
#include <com/stencyl/utils/motion/BounceInOut.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_424c8b797d4b14a6_317_new,"com.stencyl.utils.motion.BounceInOut","new",0x47b7f1c7,"com.stencyl.utils.motion.BounceInOut.new","com/stencyl/utils/motion/EasingFunctions.hx",317,0xda1c1718)
HX_LOCAL_STACK_FRAME(_hx_pos_424c8b797d4b14a6_319_apply,"com.stencyl.utils.motion.BounceInOut","apply",0x25f80e95,"com.stencyl.utils.motion.BounceInOut.apply","com/stencyl/utils/motion/EasingFunctions.hx",319,0xda1c1718)
namespace com{
namespace stencyl{
namespace utils{
namespace motion{

void BounceInOut_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_424c8b797d4b14a6_317_new)
HXDLIN( 317)		super::__construct();
            	}

Dynamic BounceInOut_obj::__CreateEmpty() { return new BounceInOut_obj; }

void *BounceInOut_obj::_hx_vtable = 0;

Dynamic BounceInOut_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BounceInOut_obj > _hx_result = new BounceInOut_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BounceInOut_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x047402bf) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x047402bf;
	} else {
		return inClassId==(int)0x2e66d26d;
	}
}

Float BounceInOut_obj::apply(Float t){
            	HX_STACKFRAME(&_hx_pos_424c8b797d4b14a6_319_apply)
HXDLIN( 319)		if ((t < ((Float)0.5))) {
HXLINE( 320)			t = ((int)1 - (t * (int)2));
HXDLIN( 320)			if ((t < ((Float)0.36363636363636365))) {
HXLINE( 321)				return (((int)1 - ((((Float)7.5625) * t) * t)) * ((Float)0.5));
            			}
            			else {
HXLINE( 322)				if ((t < ((Float)0.72727272727272729))) {
HXLINE( 323)					t = (t - ((Float)0.54545454545454541));
HXDLIN( 323)					return (((int)1 - (((((Float)7.5625) * t) * t) + ((Float)0.75))) * ((Float)0.5));
            				}
            				else {
HXLINE( 324)					if ((t < ((Float)0.90909090909090906))) {
HXLINE( 325)						t = (t - ((Float)0.81818181818181823));
HXDLIN( 325)						return (((int)1 - (((((Float)7.5625) * t) * t) + ((Float)0.9375))) * ((Float)0.5));
            					}
            					else {
HXLINE( 327)						t = (t - ((Float)0.95454545454545459));
HXDLIN( 327)						return (((int)1 - (((((Float)7.5625) * t) * t) + ((Float)0.984375))) * ((Float)0.5));
            					}
            				}
            			}
            		}
            		else {
HXLINE( 330)			t = ((t * (int)2) - (int)1);
HXDLIN( 330)			if ((t < ((Float)0.36363636363636365))) {
HXLINE( 331)				return ((((((Float)7.5625) * t) * t) * ((Float)0.5)) + ((Float)0.5));
            			}
            			else {
HXLINE( 332)				if ((t < ((Float)0.72727272727272729))) {
HXLINE( 333)					t = (t - ((Float)0.54545454545454541));
HXDLIN( 333)					return (((((((Float)7.5625) * t) * t) + ((Float)0.75)) * ((Float)0.5)) + ((Float)0.5));
            				}
            				else {
HXLINE( 334)					if ((t < ((Float)0.90909090909090906))) {
HXLINE( 335)						t = (t - ((Float)0.81818181818181823));
HXDLIN( 335)						return (((((((Float)7.5625) * t) * t) + ((Float)0.9375)) * ((Float)0.5)) + ((Float)0.5));
            					}
            					else {
HXLINE( 337)						t = (t - ((Float)0.95454545454545459));
HXDLIN( 337)						return (((((((Float)7.5625) * t) * t) + ((Float)0.984375)) * ((Float)0.5)) + ((Float)0.5));
            					}
            				}
            			}
            		}
HXLINE( 319)		return ((Float)0.);
            	}



BounceInOut_obj::BounceInOut_obj()
{
}

hx::Val BounceInOut_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"apply") ) { return hx::Val( apply_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BounceInOut_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BounceInOut_obj_sStaticStorageInfo = 0;
#endif

static ::String BounceInOut_obj_sMemberFields[] = {
	HX_HCSTRING("apply","\x6e","\x85","\x3b","\x24"),
	::String(null()) };

static void BounceInOut_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BounceInOut_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BounceInOut_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BounceInOut_obj::__mClass,"__mClass");
};

#endif

hx::Class BounceInOut_obj::__mClass;

void BounceInOut_obj::__register()
{
	hx::Object *dummy = new BounceInOut_obj;
	BounceInOut_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.motion.BounceInOut","\x55","\x02","\xc4","\xb8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BounceInOut_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BounceInOut_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BounceInOut_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BounceInOut_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BounceInOut_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BounceInOut_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
} // end namespace motion
