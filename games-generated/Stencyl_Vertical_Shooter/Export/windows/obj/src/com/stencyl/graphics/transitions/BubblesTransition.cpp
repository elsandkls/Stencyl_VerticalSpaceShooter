// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_BubblesTransition
#include <com/stencyl/graphics/transitions/BubblesTransition.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat
#include <com/stencyl/utils/motion/TweenFloat.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_644e54dbd9d5c0d6_34_new,"com.stencyl.graphics.transitions.BubblesTransition","new",0x9c83e66a,"com.stencyl.graphics.transitions.BubblesTransition.new","com/stencyl/graphics/transitions/BubblesTransition.hx",34,0x7ecb7d86)
HX_LOCAL_STACK_FRAME(_hx_pos_644e54dbd9d5c0d6_43_start,"com.stencyl.graphics.transitions.BubblesTransition","start",0x9cf4a0ec,"com.stencyl.graphics.transitions.BubblesTransition.start","com/stencyl/graphics/transitions/BubblesTransition.hx",43,0x7ecb7d86)
HX_LOCAL_STACK_FRAME(_hx_pos_644e54dbd9d5c0d6_100_draw,"com.stencyl.graphics.transitions.BubblesTransition","draw",0x50535eba,"com.stencyl.graphics.transitions.BubblesTransition.draw","com/stencyl/graphics/transitions/BubblesTransition.hx",100,0x7ecb7d86)
HX_LOCAL_STACK_FRAME(_hx_pos_644e54dbd9d5c0d6_133_cleanup,"com.stencyl.graphics.transitions.BubblesTransition","cleanup",0xb236ef2e,"com.stencyl.graphics.transitions.BubblesTransition.cleanup","com/stencyl/graphics/transitions/BubblesTransition.hx",133,0x7ecb7d86)
namespace com{
namespace stencyl{
namespace graphics{
namespace transitions{

void BubblesTransition_obj::__construct(::String direction,Float duration,hx::Null< int >  __o_numBubbles,hx::Null< int >  __o_color){
int numBubbles = __o_numBubbles.Default(50);
int color = __o_color.Default(-16777216);
            	HX_STACKFRAME(&_hx_pos_644e54dbd9d5c0d6_34_new)
HXLINE(  35)		super::__construct(duration);
HXLINE(  37)		this->color = color;
HXLINE(  38)		this->direction = direction;
HXLINE(  39)		this->numBubbles = numBubbles;
            	}

Dynamic BubblesTransition_obj::__CreateEmpty() { return new BubblesTransition_obj; }

void *BubblesTransition_obj::_hx_vtable = 0;

Dynamic BubblesTransition_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BubblesTransition_obj > _hx_result = new BubblesTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BubblesTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x10817dc5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x10817dc5;
	} else {
		return inClassId==(int)0x7436c554;
	}
}

void BubblesTransition_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_644e54dbd9d5c0d6_43_start)
HXLINE(  44)		this->active = true;
HXLINE(  46)		this->rect =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  47)		this->graphics = this->rect->get_graphics();
HXLINE(  49)		this->screenWidth = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  50)		this->screenHeight = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  52)		if ((this->direction == ::com::stencyl::graphics::transitions::Transition_obj::IN)) {
HXLINE(  54)			this->graphics->beginFill(this->color,null());
HXLINE(  55)			this->graphics->drawRect((int)0,(int)0,this->screenWidth,this->screenHeight);
HXLINE(  56)			this->graphics->endFill();
            		}
HXLINE(  59)		this->drawBitmap =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->screenWidth,this->screenHeight,null(),null());
HXLINE(  61)		Float screenRatio = ((Float)this->screenWidth / (Float)this->screenHeight);
HXLINE(  62)		int vertBubbles = ::Std_obj::_hx_int(::Math_obj::sqrt(((Float)this->numBubbles / (Float)screenRatio)));
HXLINE(  63)		int horzBubbles = ::Std_obj::_hx_int((vertBubbles * screenRatio));
HXLINE(  64)		Float bubbleSize = ((Float)this->screenHeight / (Float)vertBubbles);
HXLINE(  66)		int c = ::Math_obj::ceil(horzBubbles);
HXLINE(  67)		int r = ::Math_obj::ceil(vertBubbles);
HXLINE(  69)		int xOverflow = ::Std_obj::_hx_int(((c * bubbleSize) - this->screenWidth));
HXLINE(  70)		int yOverflow = ::Std_obj::_hx_int(((r * bubbleSize) - this->screenHeight));
HXLINE(  72)		 ::openfl::geom::Rectangle bubbleRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,((Float)-(xOverflow) / (Float)(int)2),((Float)-(yOverflow) / (Float)(int)2),bubbleSize,bubbleSize);
HXLINE(  74)		this->bubblePositions = ::Array_obj< ::Dynamic>::__new();
HXLINE(  76)		{
HXLINE(  76)			int _g1 = (int)0;
HXDLIN(  76)			int _g = r;
HXDLIN(  76)			while((_g1 < _g)){
HXLINE(  76)				_g1 = (_g1 + (int)1);
HXDLIN(  76)				int i = (_g1 - (int)1);
HXLINE(  78)				{
HXLINE(  78)					int _g3 = (int)0;
HXDLIN(  78)					int _g2 = c;
HXDLIN(  78)					while((_g3 < _g2)){
HXLINE(  78)						_g3 = (_g3 + (int)1);
HXDLIN(  78)						int j = (_g3 - (int)1);
HXLINE(  81)						::Array< ::Dynamic> _hx_tmp = this->bubblePositions;
HXDLIN(  81)						Float bubbleRect1 = bubbleRect->x;
HXDLIN(  81)						Float _hx_tmp1 = ::Math_obj::random();
HXDLIN(  81)						Float _hx_tmp2 = (bubbleRect1 + ::Math_obj::floor((_hx_tmp1 * (bubbleSize + (int)1))));
HXDLIN(  81)						Float bubbleRect2 = bubbleRect->y;
HXDLIN(  81)						Float _hx_tmp3 = ::Math_obj::random();
HXDLIN(  81)						_hx_tmp->push( ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp2,(bubbleRect2 + ::Math_obj::floor((_hx_tmp3 * (bubbleSize + (int)1))))));
HXLINE(  82)						 ::openfl::geom::Rectangle bubbleRect3 = bubbleRect;
HXDLIN(  82)						bubbleRect3->x = (bubbleRect3->x + bubbleSize);
            					}
            				}
HXLINE(  85)				bubbleRect->x = ((Float)-(xOverflow) / (Float)(int)2);
HXLINE(  86)				 ::openfl::geom::Rectangle bubbleRect4 = bubbleRect;
HXDLIN(  86)				bubbleRect4->y = (bubbleRect4->y + bubbleSize);
            			}
            		}
HXLINE(  89)		this->beginRadius = (int)0;
HXLINE(  90)		 ::openfl::geom::Point _hx_tmp4 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXDLIN(  90)		this->endRadius = ::Math_obj::ceil(::openfl::geom::Point_obj::distance(_hx_tmp4, ::openfl::geom::Point_obj::__alloc( HX_CTX ,bubbleSize,bubbleSize)));
HXLINE(  92)		this->radius =  ::com::stencyl::utils::motion::TweenFloat_obj::__alloc( HX_CTX );
HXLINE(  94)		::com::stencyl::Engine_obj::engine->transitionLayer->addChild(this->rect);
HXLINE(  96)		 ::com::stencyl::utils::motion::TweenFloat _hx_tmp5 = this->radius;
HXDLIN(  96)		Float _hx_tmp6 = this->beginRadius;
HXDLIN(  96)		Float _hx_tmp7 = this->endRadius;
HXDLIN(  96)		 ::com::stencyl::utils::motion::Linear _hx_tmp8 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN(  96)		_hx_tmp5->tween(_hx_tmp6,_hx_tmp7,_hx_tmp8,::Std_obj::_hx_int((this->duration * (int)1000)))->doOnComplete(this->stop_dyn());
            	}


void BubblesTransition_obj::draw( ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_644e54dbd9d5c0d6_100_draw)
HXLINE( 101)		this->graphics->clear();
HXLINE( 103)		if ((this->direction == ::com::stencyl::graphics::transitions::Transition_obj::IN)) {
HXLINE( 105)			this->drawBitmap->draw(::com::stencyl::Engine_obj::engine->colorLayer,null(),null(),null(),null(),null());
HXLINE( 106)			this->drawBitmap->draw(::com::stencyl::Engine_obj::engine->master,null(),null(),null(),null(),null());
HXLINE( 108)			this->graphics->beginFill(this->color,null());
HXLINE( 109)			this->graphics->drawRect((int)0,(int)0,this->screenWidth,this->screenHeight);
HXLINE( 110)			this->graphics->endFill();
HXLINE( 112)			{
HXLINE( 112)				int _g = (int)0;
HXDLIN( 112)				::Array< ::Dynamic> _g1 = this->bubblePositions;
HXDLIN( 112)				while((_g < _g1->length)){
HXLINE( 112)					 ::openfl::geom::Point p = _g1->__get(_g).StaticCast<  ::openfl::geom::Point >();
HXDLIN( 112)					_g = (_g + (int)1);
HXLINE( 114)					this->graphics->beginBitmapFill(this->drawBitmap,null(),null(),null());
HXLINE( 115)					this->graphics->drawCircle(p->x,p->y,this->radius->value);
HXLINE( 116)					this->graphics->endFill();
            				}
            			}
            		}
            		else {
HXLINE( 119)			if ((this->direction == ::com::stencyl::graphics::transitions::Transition_obj::OUT)) {
HXLINE( 122)				int _g2 = (int)0;
HXDLIN( 122)				::Array< ::Dynamic> _g11 = this->bubblePositions;
HXDLIN( 122)				while((_g2 < _g11->length)){
HXLINE( 122)					 ::openfl::geom::Point p1 = _g11->__get(_g2).StaticCast<  ::openfl::geom::Point >();
HXDLIN( 122)					_g2 = (_g2 + (int)1);
HXLINE( 124)					this->graphics->beginFill(this->color,null());
HXLINE( 125)					this->graphics->drawCircle(p1->x,p1->y,this->radius->value);
HXLINE( 126)					this->graphics->endFill();
            				}
            			}
            		}
            	}


void BubblesTransition_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_644e54dbd9d5c0d6_133_cleanup)
HXDLIN( 133)		if (hx::IsNotNull( this->rect )) {
HXLINE( 135)			::com::stencyl::Engine_obj::engine->transitionLayer->removeChild(this->rect);
HXLINE( 136)			this->rect = null();
            		}
            	}



hx::ObjectPtr< BubblesTransition_obj > BubblesTransition_obj::__new(::String direction,Float duration,hx::Null< int >  __o_numBubbles,hx::Null< int >  __o_color) {
	hx::ObjectPtr< BubblesTransition_obj > __this = new BubblesTransition_obj();
	__this->__construct(direction,duration,__o_numBubbles,__o_color);
	return __this;
}

hx::ObjectPtr< BubblesTransition_obj > BubblesTransition_obj::__alloc(hx::Ctx *_hx_ctx,::String direction,Float duration,hx::Null< int >  __o_numBubbles,hx::Null< int >  __o_color) {
	BubblesTransition_obj *__this = (BubblesTransition_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BubblesTransition_obj), true, "com.stencyl.graphics.transitions.BubblesTransition"));
	*(void **)__this = BubblesTransition_obj::_hx_vtable;
	__this->__construct(direction,duration,__o_numBubbles,__o_color);
	return __this;
}

BubblesTransition_obj::BubblesTransition_obj()
{
}

void BubblesTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BubblesTransition);
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(numBubbles,"numBubbles");
	HX_MARK_MEMBER_NAME(radius,"radius");
	HX_MARK_MEMBER_NAME(beginRadius,"beginRadius");
	HX_MARK_MEMBER_NAME(endRadius,"endRadius");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(graphics,"graphics");
	HX_MARK_MEMBER_NAME(drawBitmap,"drawBitmap");
	HX_MARK_MEMBER_NAME(bubblePositions,"bubblePositions");
	HX_MARK_MEMBER_NAME(bubbleRect,"bubbleRect");
	HX_MARK_MEMBER_NAME(screenWidth,"screenWidth");
	HX_MARK_MEMBER_NAME(screenHeight,"screenHeight");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BubblesTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(numBubbles,"numBubbles");
	HX_VISIT_MEMBER_NAME(radius,"radius");
	HX_VISIT_MEMBER_NAME(beginRadius,"beginRadius");
	HX_VISIT_MEMBER_NAME(endRadius,"endRadius");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(graphics,"graphics");
	HX_VISIT_MEMBER_NAME(drawBitmap,"drawBitmap");
	HX_VISIT_MEMBER_NAME(bubblePositions,"bubblePositions");
	HX_VISIT_MEMBER_NAME(bubbleRect,"bubbleRect");
	HX_VISIT_MEMBER_NAME(screenWidth,"screenWidth");
	HX_VISIT_MEMBER_NAME(screenHeight,"screenHeight");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BubblesTransition_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { return hx::Val( radius ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { return hx::Val( graphics ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"endRadius") ) { return hx::Val( endRadius ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numBubbles") ) { return hx::Val( numBubbles ); }
		if (HX_FIELD_EQ(inName,"drawBitmap") ) { return hx::Val( drawBitmap ); }
		if (HX_FIELD_EQ(inName,"bubbleRect") ) { return hx::Val( bubbleRect ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beginRadius") ) { return hx::Val( beginRadius ); }
		if (HX_FIELD_EQ(inName,"screenWidth") ) { return hx::Val( screenWidth ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenHeight") ) { return hx::Val( screenHeight ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bubblePositions") ) { return hx::Val( bubblePositions ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BubblesTransition_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"endRadius") ) { endRadius=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numBubbles") ) { numBubbles=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawBitmap") ) { drawBitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bubbleRect") ) { bubbleRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beginRadius") ) { beginRadius=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"screenWidth") ) { screenWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenHeight") ) { screenHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bubblePositions") ) { bubblePositions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BubblesTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("numBubbles","\xc1","\xf9","\x76","\x91"));
	outFields->push(HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"));
	outFields->push(HX_HCSTRING("beginRadius","\x5b","\xb3","\x1c","\x4b"));
	outFields->push(HX_HCSTRING("endRadius","\x8d","\x1e","\xd9","\xf0"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"));
	outFields->push(HX_HCSTRING("drawBitmap","\x13","\x8b","\xcf","\x32"));
	outFields->push(HX_HCSTRING("bubblePositions","\x7e","\xa2","\xdd","\x8d"));
	outFields->push(HX_HCSTRING("bubbleRect","\xd0","\x0e","\xe2","\x61"));
	outFields->push(HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81"));
	outFields->push(HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BubblesTransition_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BubblesTransition_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsInt,(int)offsetof(BubblesTransition_obj,numBubbles),HX_HCSTRING("numBubbles","\xc1","\xf9","\x76","\x91")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat*/ ,(int)offsetof(BubblesTransition_obj,radius),HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0")},
	{hx::fsFloat,(int)offsetof(BubblesTransition_obj,beginRadius),HX_HCSTRING("beginRadius","\x5b","\xb3","\x1c","\x4b")},
	{hx::fsFloat,(int)offsetof(BubblesTransition_obj,endRadius),HX_HCSTRING("endRadius","\x8d","\x1e","\xd9","\xf0")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(BubblesTransition_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(BubblesTransition_obj,graphics),HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(BubblesTransition_obj,drawBitmap),HX_HCSTRING("drawBitmap","\x13","\x8b","\xcf","\x32")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BubblesTransition_obj,bubblePositions),HX_HCSTRING("bubblePositions","\x7e","\xa2","\xdd","\x8d")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BubblesTransition_obj,bubbleRect),HX_HCSTRING("bubbleRect","\xd0","\x0e","\xe2","\x61")},
	{hx::fsInt,(int)offsetof(BubblesTransition_obj,screenWidth),HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81")},
	{hx::fsInt,(int)offsetof(BubblesTransition_obj,screenHeight),HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BubblesTransition_obj_sStaticStorageInfo = 0;
#endif

static ::String BubblesTransition_obj_sMemberFields[] = {
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("numBubbles","\xc1","\xf9","\x76","\x91"),
	HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"),
	HX_HCSTRING("beginRadius","\x5b","\xb3","\x1c","\x4b"),
	HX_HCSTRING("endRadius","\x8d","\x1e","\xd9","\xf0"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"),
	HX_HCSTRING("drawBitmap","\x13","\x8b","\xcf","\x32"),
	HX_HCSTRING("bubblePositions","\x7e","\xa2","\xdd","\x8d"),
	HX_HCSTRING("bubbleRect","\xd0","\x0e","\xe2","\x61"),
	HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81"),
	HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	::String(null()) };

static void BubblesTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BubblesTransition_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BubblesTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BubblesTransition_obj::__mClass,"__mClass");
};

#endif

hx::Class BubblesTransition_obj::__mClass;

void BubblesTransition_obj::__register()
{
	hx::Object *dummy = new BubblesTransition_obj;
	BubblesTransition_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.transitions.BubblesTransition","\x78","\x29","\xea","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BubblesTransition_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BubblesTransition_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BubblesTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BubblesTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BubblesTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BubblesTransition_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace transitions
