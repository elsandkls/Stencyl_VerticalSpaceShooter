// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_CrossfadeTransition
#include <com/stencyl/graphics/transitions/CrossfadeTransition.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat
#include <com/stencyl/utils/motion/TweenFloat.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cbd9430620facf00_22_new,"com.stencyl.graphics.transitions.CrossfadeTransition","new",0x1a49d9bf,"com.stencyl.graphics.transitions.CrossfadeTransition.new","com/stencyl/graphics/transitions/CrossfadeTransition.hx",22,0xaa4edbd1)
HX_LOCAL_STACK_FRAME(_hx_pos_cbd9430620facf00_29_start,"com.stencyl.graphics.transitions.CrossfadeTransition","start",0x8e9dd381,"com.stencyl.graphics.transitions.CrossfadeTransition.start","com/stencyl/graphics/transitions/CrossfadeTransition.hx",29,0xaa4edbd1)
HX_LOCAL_STACK_FRAME(_hx_pos_cbd9430620facf00_49_update,"com.stencyl.graphics.transitions.CrossfadeTransition","update",0xbc86620a,"com.stencyl.graphics.transitions.CrossfadeTransition.update","com/stencyl/graphics/transitions/CrossfadeTransition.hx",49,0xaa4edbd1)
HX_LOCAL_STACK_FRAME(_hx_pos_cbd9430620facf00_53_draw,"com.stencyl.graphics.transitions.CrossfadeTransition","draw",0xdfc255c5,"com.stencyl.graphics.transitions.CrossfadeTransition.draw","com/stencyl/graphics/transitions/CrossfadeTransition.hx",53,0xaa4edbd1)
HX_LOCAL_STACK_FRAME(_hx_pos_cbd9430620facf00_57_cleanup,"com.stencyl.graphics.transitions.CrossfadeTransition","cleanup",0x4681b103,"com.stencyl.graphics.transitions.CrossfadeTransition.cleanup","com/stencyl/graphics/transitions/CrossfadeTransition.hx",57,0xaa4edbd1)
namespace com{
namespace stencyl{
namespace graphics{
namespace transitions{

void CrossfadeTransition_obj::__construct( ::openfl::display::Sprite oldImg,Float duration){
            	HX_STACKFRAME(&_hx_pos_cbd9430620facf00_22_new)
HXLINE(  23)		super::__construct(duration);
HXLINE(  25)		this->oldImg = oldImg;
            	}

Dynamic CrossfadeTransition_obj::__CreateEmpty() { return new CrossfadeTransition_obj; }

void *CrossfadeTransition_obj::_hx_vtable = 0;

Dynamic CrossfadeTransition_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CrossfadeTransition_obj > _hx_result = new CrossfadeTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CrossfadeTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x10817dc5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x10817dc5;
	} else {
		return inClassId==(int)0x1fe4d929;
	}
}

void CrossfadeTransition_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_cbd9430620facf00_29_start)
HXLINE(  30)		this->active = true;
HXLINE(  32)		int _hx_tmp = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(  32)		this->bitmap =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)),null(),null());
HXLINE(  33)		this->bitmap->draw(this->oldImg,null(),null(),null(),null(),null());
HXLINE(  35)		this->rect =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  36)		 ::openfl::display::Graphics g = this->rect->get_graphics();
HXLINE(  37)		g->beginBitmapFill(this->bitmap,null(),null(),null());
HXLINE(  38)		Float _hx_tmp1 = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  38)		g->drawRect((int)0,(int)0,_hx_tmp1,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  39)		g->endFill();
HXLINE(  41)		::com::stencyl::Engine_obj::engine->transitionLayer->addChild(this->rect);
HXLINE(  43)		this->rectAlpha =  ::com::stencyl::utils::motion::TweenFloat_obj::__alloc( HX_CTX );
HXLINE(  44)		 ::com::stencyl::utils::motion::TweenFloat _hx_tmp2 = this->rectAlpha;
HXDLIN(  44)		 ::com::stencyl::utils::motion::Linear _hx_tmp3 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN(  44)		_hx_tmp2->tween((int)1,(int)0,_hx_tmp3,::Std_obj::_hx_int((this->duration * (int)1000)))->doOnComplete(this->stop_dyn());
            	}


void CrossfadeTransition_obj::update(Float elapsedTime){
            	HX_STACKFRAME(&_hx_pos_cbd9430620facf00_49_update)
HXDLIN(  49)		this->rect->set_alpha(this->rectAlpha->value);
            	}


void CrossfadeTransition_obj::draw( ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_cbd9430620facf00_53_draw)
            	}


void CrossfadeTransition_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_cbd9430620facf00_57_cleanup)
HXLINE(  58)		this->oldImg = null();
HXLINE(  59)		this->bitmap = null();
HXLINE(  61)		if (hx::IsNotNull( this->rect )) {
HXLINE(  63)			::com::stencyl::Engine_obj::engine->transitionLayer->removeChild(this->rect);
HXLINE(  64)			this->rect = null();
            		}
            	}



hx::ObjectPtr< CrossfadeTransition_obj > CrossfadeTransition_obj::__new( ::openfl::display::Sprite oldImg,Float duration) {
	hx::ObjectPtr< CrossfadeTransition_obj > __this = new CrossfadeTransition_obj();
	__this->__construct(oldImg,duration);
	return __this;
}

hx::ObjectPtr< CrossfadeTransition_obj > CrossfadeTransition_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Sprite oldImg,Float duration) {
	CrossfadeTransition_obj *__this = (CrossfadeTransition_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CrossfadeTransition_obj), true, "com.stencyl.graphics.transitions.CrossfadeTransition"));
	*(void **)__this = CrossfadeTransition_obj::_hx_vtable;
	__this->__construct(oldImg,duration);
	return __this;
}

CrossfadeTransition_obj::CrossfadeTransition_obj()
{
}

void CrossfadeTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CrossfadeTransition);
	HX_MARK_MEMBER_NAME(oldImg,"oldImg");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(rectAlpha,"rectAlpha");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CrossfadeTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(oldImg,"oldImg");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(rectAlpha,"rectAlpha");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CrossfadeTransition_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"oldImg") ) { return hx::Val( oldImg ); }
		if (HX_FIELD_EQ(inName,"bitmap") ) { return hx::Val( bitmap ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rectAlpha") ) { return hx::Val( rectAlpha ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CrossfadeTransition_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"oldImg") ) { oldImg=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rectAlpha") ) { rectAlpha=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CrossfadeTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("oldImg","\x9c","\xcd","\x34","\xd3"));
	outFields->push(HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("rectAlpha","\x9a","\xa7","\x5e","\xab"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CrossfadeTransition_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(CrossfadeTransition_obj,oldImg),HX_HCSTRING("oldImg","\x9c","\xcd","\x34","\xd3")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(CrossfadeTransition_obj,bitmap),HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(CrossfadeTransition_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat*/ ,(int)offsetof(CrossfadeTransition_obj,rectAlpha),HX_HCSTRING("rectAlpha","\x9a","\xa7","\x5e","\xab")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CrossfadeTransition_obj_sStaticStorageInfo = 0;
#endif

static ::String CrossfadeTransition_obj_sMemberFields[] = {
	HX_HCSTRING("oldImg","\x9c","\xcd","\x34","\xd3"),
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("rectAlpha","\x9a","\xa7","\x5e","\xab"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	::String(null()) };

static void CrossfadeTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CrossfadeTransition_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CrossfadeTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CrossfadeTransition_obj::__mClass,"__mClass");
};

#endif

hx::Class CrossfadeTransition_obj::__mClass;

void CrossfadeTransition_obj::__register()
{
	hx::Object *dummy = new CrossfadeTransition_obj;
	CrossfadeTransition_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.transitions.CrossfadeTransition","\x4d","\x8e","\x54","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CrossfadeTransition_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CrossfadeTransition_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CrossfadeTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CrossfadeTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CrossfadeTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CrossfadeTransition_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace transitions
