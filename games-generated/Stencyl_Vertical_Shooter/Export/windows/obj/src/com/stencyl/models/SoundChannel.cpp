// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Sound
#include <com/stencyl/models/Sound.h>
#endif
#ifndef INCLUDED_com_stencyl_models_SoundChannel
#include <com/stencyl/models/SoundChannel.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat
#include <com/stencyl/utils/motion/TweenFloat.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9c06b59cbdf10218_10_new,"com.stencyl.models.SoundChannel","new",0x5e74d85b,"com.stencyl.models.SoundChannel.new","com/stencyl/models/SoundChannel.hx",10,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_55_playSound,"com.stencyl.models.SoundChannel","playSound",0xaa5c7076,"com.stencyl.models.SoundChannel.playSound","com/stencyl/models/SoundChannel.hx",55,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_93_loopSound,"com.stencyl.models.SoundChannel","loopSound",0xb7246206,"com.stencyl.models.SoundChannel.loopSound","com/stencyl/models/SoundChannel.hx",93,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_131_setPause,"com.stencyl.models.SoundChannel","setPause",0x70e56a19,"com.stencyl.models.SoundChannel.setPause","com/stencyl/models/SoundChannel.hx",131,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_161_looped,"com.stencyl.models.SoundChannel","looped",0x149f46a8,"com.stencyl.models.SoundChannel.looped","com/stencyl/models/SoundChannel.hx",161,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_171_stopped,"com.stencyl.models.SoundChannel","stopped",0x19a5f388,"com.stencyl.models.SoundChannel.stopped","com/stencyl/models/SoundChannel.hx",171,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_186_stopSound,"com.stencyl.models.SoundChannel","stopSound",0x99ba7ba8,"com.stencyl.models.SoundChannel.stopSound","com/stencyl/models/SoundChannel.hx",186,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_201_tweenUpdated,"com.stencyl.models.SoundChannel","tweenUpdated",0xaf98d3b5,"com.stencyl.models.SoundChannel.tweenUpdated","com/stencyl/models/SoundChannel.hx",201,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_206_fadeInSound,"com.stencyl.models.SoundChannel","fadeInSound",0x6a96b789,"com.stencyl.models.SoundChannel.fadeInSound","com/stencyl/models/SoundChannel.hx",206,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_214_fadeOutSound,"com.stencyl.models.SoundChannel","fadeOutSound",0x622b87a2,"com.stencyl.models.SoundChannel.fadeOutSound","com/stencyl/models/SoundChannel.hx",214,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_222_fadeSound,"com.stencyl.models.SoundChannel","fadeSound",0x75609bee,"com.stencyl.models.SoundChannel.fadeSound","com/stencyl/models/SoundChannel.hx",222,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_229_setVolume,"com.stencyl.models.SoundChannel","setVolume",0xc7a65557,"com.stencyl.models.SoundChannel.setVolume","com/stencyl/models/SoundChannel.hx",229,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_240_setPanning,"com.stencyl.models.SoundChannel","setPanning",0x798e2af4,"com.stencyl.models.SoundChannel.setPanning","com/stencyl/models/SoundChannel.hx",240,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_16_resetStatics,"com.stencyl.models.SoundChannel","resetStatics",0x904d229b,"com.stencyl.models.SoundChannel.resetStatics","com/stencyl/models/SoundChannel.hx",16,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_12_boot,"com.stencyl.models.SoundChannel","boot",0x3fe177d7,"com.stencyl.models.SoundChannel.boot","com/stencyl/models/SoundChannel.hx",12,0x42238f16)
HX_LOCAL_STACK_FRAME(_hx_pos_9c06b59cbdf10218_13_boot,"com.stencyl.models.SoundChannel","boot",0x3fe177d7,"com.stencyl.models.SoundChannel.boot","com/stencyl/models/SoundChannel.hx",13,0x42238f16)
namespace com{
namespace stencyl{
namespace models{

void SoundChannel_obj::__construct( ::com::stencyl::Engine engine,int channelNum){
            	HX_GC_STACKFRAME(&_hx_pos_9c06b59cbdf10218_10_new)
HXLINE(  28)		this->paused = false;
HXLINE(  38)		this->currentSound = null();
HXLINE(  39)		this->currentClip = null();
HXLINE(  41)		this->looping = false;
HXLINE(  42)		this->volume = (int)1;
HXLINE(  43)		this->panning = (int)0;
HXLINE(  44)		this->position = (int)0;
HXLINE(  46)		this->channelNum = channelNum;
HXLINE(  47)		this->engine = engine;
HXLINE(  49)		this->transform =  ::openfl::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  50)		this->tweenVolume =  ::com::stencyl::utils::motion::TweenFloat_obj::__alloc( HX_CTX );
HXLINE(  51)		this->tweenVolume->doOnUpdate(this->tweenUpdated_dyn());
            	}

Dynamic SoundChannel_obj::__CreateEmpty() { return new SoundChannel_obj; }

void *SoundChannel_obj::_hx_vtable = 0;

Dynamic SoundChannel_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SoundChannel_obj > _hx_result = new SoundChannel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SoundChannel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12fca0b5;
}

 ::openfl::media::SoundChannel SoundChannel_obj::playSound( ::com::stencyl::models::Sound clip,hx::Null< Float >  __o_position){
Float position = __o_position.Default(0);
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_55_playSound)
HXLINE(  56)		if (hx::IsNotNull( this->currentSound )) {
HXLINE(  58)			this->currentSound->stop();
HXLINE(  59)			this->paused = false;
            		}
HXLINE(  62)		if (hx::IsNotNull( clip )) {
HXLINE(  64)			clip->volume = (this->volume * ::com::stencyl::models::SoundChannel_obj::masterVolume);
HXLINE(  65)			this->currentClip = clip;
HXLINE(  66)			this->currentSound = clip->play(this->channelNum,position);
HXLINE(  68)			if (hx::IsNull( this->currentSound )) {
HXLINE(  70)				this->currentClip = null();
HXLINE(  71)				return null();
            			}
HXLINE(  74)			this->setVolume(this->volume);
HXLINE(  75)			this->setPanning(this->panning);
HXLINE(  77)			this->currentSound->addEventListener(HX_("soundComplete",a8,30,e6,1c),this->stopped_dyn(),null(),null(),null());
            		}
HXLINE(  80)		position = (int)0;
HXLINE(  82)		if (hx::IsNotNull( clip )) {
HXLINE(  84)			this->currentSource = clip->src;
            		}
HXLINE(  87)		this->looping = false;
HXLINE(  89)		return this->currentSound;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SoundChannel_obj,playSound,return )

 ::openfl::media::SoundChannel SoundChannel_obj::loopSound( ::com::stencyl::models::Sound clip,hx::Null< Float >  __o_position){
Float position = __o_position.Default(0);
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_93_loopSound)
HXLINE(  94)		if (hx::IsNotNull( this->currentSound )) {
HXLINE(  96)			this->currentSound->stop();
            		}
HXLINE(  99)		if (hx::IsNotNull( clip )) {
HXLINE( 101)			clip->volume = (this->volume * ::com::stencyl::models::SoundChannel_obj::masterVolume);
HXLINE( 102)			this->currentClip = clip;
HXLINE( 103)			this->currentSound = clip->play(this->channelNum,position);
HXLINE( 105)			if (hx::IsNull( this->currentSound )) {
HXLINE( 107)				this->currentClip = null();
HXLINE( 108)				return null();
            			}
HXLINE( 111)			this->setVolume(this->volume);
HXLINE( 112)			this->setPanning(this->panning);
HXLINE( 114)			this->currentSound->addEventListener(HX_("soundComplete",a8,30,e6,1c),this->looped_dyn(),null(),null(),null());
            		}
HXLINE( 117)		position = (int)0;
HXLINE( 119)		if (hx::IsNotNull( clip )) {
HXLINE( 121)			this->currentSource = clip->src;
            		}
HXLINE( 124)		this->looping = true;
HXLINE( 126)		return this->currentSound;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SoundChannel_obj,loopSound,return )

void SoundChannel_obj::setPause(bool pause){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_131_setPause)
HXDLIN( 131)		if (hx::IsNotNull( this->currentSound )) {
HXLINE( 133)			if (pause) {
HXLINE( 135)				this->currentSound->removeEventListener(HX_("soundComplete",a8,30,e6,1c),this->looped_dyn(),null());
HXLINE( 137)				this->position = this->currentSound->get_position();
HXLINE( 138)				this->currentSound->stop();
HXLINE( 139)				this->paused = true;
            			}
            			else {
HXLINE( 144)				bool _hx_tmp;
HXDLIN( 144)				if (hx::IsNotNull( this->currentSource )) {
HXLINE( 144)					_hx_tmp = this->paused;
            				}
            				else {
HXLINE( 144)					_hx_tmp = false;
            				}
HXDLIN( 144)				if (_hx_tmp) {
HXLINE( 146)					this->currentSound = this->currentClip->play(this->channelNum,this->position);
HXLINE( 147)					this->currentSound->set_soundTransform(this->transform);
HXLINE( 149)					if (this->looping) {
HXLINE( 151)						this->currentSound->addEventListener(HX_("soundComplete",a8,30,e6,1c),this->looped_dyn(),null(),null(),null());
            					}
HXLINE( 154)					this->paused = false;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,setPause,(void))

void SoundChannel_obj::looped( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_161_looped)
HXLINE( 162)		if (hx::IsNotNull( this->currentSound )) {
HXLINE( 164)			this->currentSound->removeEventListener(HX_("soundComplete",a8,30,e6,1c),this->looped_dyn(),null());
            		}
HXLINE( 167)		this->loopSound(this->currentClip,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,looped,(void))

void SoundChannel_obj::stopped( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_171_stopped)
HXLINE( 174)		if (hx::IsNotNull( this->currentSound )) {
HXLINE( 176)			this->currentSound->removeEventListener(HX_("soundComplete",a8,30,e6,1c),this->stopped_dyn(),null());
            		}
HXLINE( 179)		::com::stencyl::Engine_obj::engine->soundFinished(this->channelNum);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,stopped,(void))

void SoundChannel_obj::stopSound(){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_186_stopSound)
HXDLIN( 186)		if (hx::IsNotNull( this->currentSound )) {
HXLINE( 188)			this->currentSound->stop();
HXLINE( 192)			this->position = (int)0;
HXLINE( 193)			this->currentSource = null();
HXLINE( 194)			this->currentSound = null();
HXLINE( 195)			this->paused = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,stopSound,(void))

void SoundChannel_obj::tweenUpdated(){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_201_tweenUpdated)
HXDLIN( 201)		this->setVolume(this->tweenVolume->value);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,tweenUpdated,(void))

void SoundChannel_obj::fadeInSound(Float time){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_206_fadeInSound)
HXDLIN( 206)		if (hx::IsNotNull( this->currentSound )) {
HXLINE( 208)			 ::com::stencyl::utils::motion::TweenFloat _hx_tmp = this->tweenVolume;
HXDLIN( 208)			Float _hx_tmp1 = this->transform->volume;
HXDLIN( 208)			 ::com::stencyl::utils::motion::Linear _hx_tmp2 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN( 208)			_hx_tmp->tween(_hx_tmp1,(int)1,_hx_tmp2,::Std_obj::_hx_int((time * (int)1000)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,fadeInSound,(void))

void SoundChannel_obj::fadeOutSound(Float time){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_214_fadeOutSound)
HXDLIN( 214)		if (hx::IsNotNull( this->currentSound )) {
HXLINE( 216)			 ::com::stencyl::utils::motion::TweenFloat _hx_tmp = this->tweenVolume;
HXDLIN( 216)			Float _hx_tmp1 = this->transform->volume;
HXDLIN( 216)			 ::com::stencyl::utils::motion::Linear _hx_tmp2 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN( 216)			_hx_tmp->tween(_hx_tmp1,(int)0,_hx_tmp2,::Std_obj::_hx_int((time * (int)1000)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,fadeOutSound,(void))

void SoundChannel_obj::fadeSound(Float time,Float amount){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_222_fadeSound)
HXDLIN( 222)		if (hx::IsNotNull( this->currentSound )) {
HXLINE( 224)			 ::com::stencyl::utils::motion::TweenFloat _hx_tmp = this->tweenVolume;
HXDLIN( 224)			Float _hx_tmp1 = this->transform->volume;
HXDLIN( 224)			 ::com::stencyl::utils::motion::Linear _hx_tmp2 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN( 224)			_hx_tmp->tween(_hx_tmp1,amount,_hx_tmp2,::Std_obj::_hx_int((time * (int)1000)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SoundChannel_obj,fadeSound,(void))

void SoundChannel_obj::setVolume(Float volume){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_229_setVolume)
HXLINE( 230)		this->volume = volume;
HXLINE( 232)		if (hx::IsNotNull( this->currentSound )) {
HXLINE( 234)			this->transform->volume = (volume * ::com::stencyl::models::SoundChannel_obj::masterVolume);
HXLINE( 235)			this->currentSound->set_soundTransform(this->transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,setVolume,(void))

void SoundChannel_obj::setPanning(Float pan){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_240_setPanning)
HXLINE( 241)		this->panning = pan;
HXLINE( 243)		if (hx::IsNotNull( this->currentSound )) {
HXLINE( 245)			this->transform->pan = pan;
HXLINE( 246)			this->currentSound->set_soundTransform(this->transform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,setPanning,(void))

bool SoundChannel_obj::muted;

Float SoundChannel_obj::masterVolume;

void SoundChannel_obj::resetStatics(){
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_16_resetStatics)
HXLINE(  17)		::com::stencyl::models::SoundChannel_obj::muted = false;
HXLINE(  18)		::com::stencyl::models::SoundChannel_obj::masterVolume = (int)1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,resetStatics,(void))


hx::ObjectPtr< SoundChannel_obj > SoundChannel_obj::__new( ::com::stencyl::Engine engine,int channelNum) {
	hx::ObjectPtr< SoundChannel_obj > __this = new SoundChannel_obj();
	__this->__construct(engine,channelNum);
	return __this;
}

hx::ObjectPtr< SoundChannel_obj > SoundChannel_obj::__alloc(hx::Ctx *_hx_ctx, ::com::stencyl::Engine engine,int channelNum) {
	SoundChannel_obj *__this = (SoundChannel_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SoundChannel_obj), true, "com.stencyl.models.SoundChannel"));
	*(void **)__this = SoundChannel_obj::_hx_vtable;
	__this->__construct(engine,channelNum);
	return __this;
}

SoundChannel_obj::SoundChannel_obj()
{
}

void SoundChannel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SoundChannel);
	HX_MARK_MEMBER_NAME(currentSource,"currentSource");
	HX_MARK_MEMBER_NAME(currentSound,"currentSound");
	HX_MARK_MEMBER_NAME(currentClip,"currentClip");
	HX_MARK_MEMBER_NAME(volume,"volume");
	HX_MARK_MEMBER_NAME(panning,"panning");
	HX_MARK_MEMBER_NAME(channelNum,"channelNum");
	HX_MARK_MEMBER_NAME(looping,"looping");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(engine,"engine");
	HX_MARK_MEMBER_NAME(transform,"transform");
	HX_MARK_MEMBER_NAME(tweenVolume,"tweenVolume");
	HX_MARK_END_CLASS();
}

void SoundChannel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentSource,"currentSource");
	HX_VISIT_MEMBER_NAME(currentSound,"currentSound");
	HX_VISIT_MEMBER_NAME(currentClip,"currentClip");
	HX_VISIT_MEMBER_NAME(volume,"volume");
	HX_VISIT_MEMBER_NAME(panning,"panning");
	HX_VISIT_MEMBER_NAME(channelNum,"channelNum");
	HX_VISIT_MEMBER_NAME(looping,"looping");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(engine,"engine");
	HX_VISIT_MEMBER_NAME(transform,"transform");
	HX_VISIT_MEMBER_NAME(tweenVolume,"tweenVolume");
}

hx::Val SoundChannel_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"volume") ) { return hx::Val( volume ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"engine") ) { return hx::Val( engine ); }
		if (HX_FIELD_EQ(inName,"looped") ) { return hx::Val( looped_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"panning") ) { return hx::Val( panning ); }
		if (HX_FIELD_EQ(inName,"looping") ) { return hx::Val( looping ); }
		if (HX_FIELD_EQ(inName,"stopped") ) { return hx::Val( stopped_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"setPause") ) { return hx::Val( setPause_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform ); }
		if (HX_FIELD_EQ(inName,"playSound") ) { return hx::Val( playSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"loopSound") ) { return hx::Val( loopSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopSound") ) { return hx::Val( stopSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"fadeSound") ) { return hx::Val( fadeSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVolume") ) { return hx::Val( setVolume_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"channelNum") ) { return hx::Val( channelNum ); }
		if (HX_FIELD_EQ(inName,"setPanning") ) { return hx::Val( setPanning_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentClip") ) { return hx::Val( currentClip ); }
		if (HX_FIELD_EQ(inName,"tweenVolume") ) { return hx::Val( tweenVolume ); }
		if (HX_FIELD_EQ(inName,"fadeInSound") ) { return hx::Val( fadeInSound_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentSound") ) { return hx::Val( currentSound ); }
		if (HX_FIELD_EQ(inName,"tweenUpdated") ) { return hx::Val( tweenUpdated_dyn() ); }
		if (HX_FIELD_EQ(inName,"fadeOutSound") ) { return hx::Val( fadeOutSound_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentSource") ) { return hx::Val( currentSource ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SoundChannel_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"muted") ) { outValue = ( muted ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"masterVolume") ) { outValue = ( masterVolume ); return true; }
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
	}
	return false;
}

hx::Val SoundChannel_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"volume") ) { volume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"engine") ) { engine=inValue.Cast<  ::com::stencyl::Engine >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"panning") ) { panning=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"looping") ) { looping=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { transform=inValue.Cast<  ::openfl::media::SoundTransform >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"channelNum") ) { channelNum=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentClip") ) { currentClip=inValue.Cast<  ::com::stencyl::models::Sound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tweenVolume") ) { tweenVolume=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentSound") ) { currentSound=inValue.Cast<  ::openfl::media::SoundChannel >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentSource") ) { currentSource=inValue.Cast<  ::openfl::media::Sound >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SoundChannel_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"muted") ) { muted=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"masterVolume") ) { masterVolume=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void SoundChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentSource","\xf4","\x31","\x8e","\x15"));
	outFields->push(HX_HCSTRING("currentSound","\xd6","\x71","\xd8","\xc7"));
	outFields->push(HX_HCSTRING("currentClip","\xa9","\x47","\x54","\x7a"));
	outFields->push(HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"));
	outFields->push(HX_HCSTRING("panning","\x11","\x49","\x1b","\x99"));
	outFields->push(HX_HCSTRING("channelNum","\x43","\x31","\x8e","\x03"));
	outFields->push(HX_HCSTRING("looping","\xfe","\x7c","\x7d","\x20"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("engine","\xc2","\x47","\x84","\xfc"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("tweenVolume","\xa5","\x6a","\xac","\x03"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SoundChannel_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::media::Sound*/ ,(int)offsetof(SoundChannel_obj,currentSource),HX_HCSTRING("currentSource","\xf4","\x31","\x8e","\x15")},
	{hx::fsObject /*::openfl::media::SoundChannel*/ ,(int)offsetof(SoundChannel_obj,currentSound),HX_HCSTRING("currentSound","\xd6","\x71","\xd8","\xc7")},
	{hx::fsObject /*::com::stencyl::models::Sound*/ ,(int)offsetof(SoundChannel_obj,currentClip),HX_HCSTRING("currentClip","\xa9","\x47","\x54","\x7a")},
	{hx::fsFloat,(int)offsetof(SoundChannel_obj,volume),HX_HCSTRING("volume","\xda","\x29","\x53","\x5f")},
	{hx::fsFloat,(int)offsetof(SoundChannel_obj,panning),HX_HCSTRING("panning","\x11","\x49","\x1b","\x99")},
	{hx::fsInt,(int)offsetof(SoundChannel_obj,channelNum),HX_HCSTRING("channelNum","\x43","\x31","\x8e","\x03")},
	{hx::fsBool,(int)offsetof(SoundChannel_obj,looping),HX_HCSTRING("looping","\xfe","\x7c","\x7d","\x20")},
	{hx::fsBool,(int)offsetof(SoundChannel_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsFloat,(int)offsetof(SoundChannel_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsObject /*::com::stencyl::Engine*/ ,(int)offsetof(SoundChannel_obj,engine),HX_HCSTRING("engine","\xc2","\x47","\x84","\xfc")},
	{hx::fsObject /*::openfl::media::SoundTransform*/ ,(int)offsetof(SoundChannel_obj,transform),HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat*/ ,(int)offsetof(SoundChannel_obj,tweenVolume),HX_HCSTRING("tweenVolume","\xa5","\x6a","\xac","\x03")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SoundChannel_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &SoundChannel_obj::muted,HX_HCSTRING("muted","\x6b","\x8f","\x5b","\x10")},
	{hx::fsFloat,(void *) &SoundChannel_obj::masterVolume,HX_HCSTRING("masterVolume","\x1c","\x44","\xfd","\x72")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SoundChannel_obj_sMemberFields[] = {
	HX_HCSTRING("currentSource","\xf4","\x31","\x8e","\x15"),
	HX_HCSTRING("currentSound","\xd6","\x71","\xd8","\xc7"),
	HX_HCSTRING("currentClip","\xa9","\x47","\x54","\x7a"),
	HX_HCSTRING("volume","\xda","\x29","\x53","\x5f"),
	HX_HCSTRING("panning","\x11","\x49","\x1b","\x99"),
	HX_HCSTRING("channelNum","\x43","\x31","\x8e","\x03"),
	HX_HCSTRING("looping","\xfe","\x7c","\x7d","\x20"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("engine","\xc2","\x47","\x84","\xfc"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("tweenVolume","\xa5","\x6a","\xac","\x03"),
	HX_HCSTRING("playSound","\x3b","\xba","\xb0","\xa1"),
	HX_HCSTRING("loopSound","\xcb","\xab","\x78","\xae"),
	HX_HCSTRING("setPause","\xf4","\x3f","\x8c","\xcb"),
	HX_HCSTRING("looped","\xc3","\x5f","\xb9","\x61"),
	HX_HCSTRING("stopped","\x0d","\xd2","\x61","\x43"),
	HX_HCSTRING("stopSound","\x6d","\xc5","\x0e","\x91"),
	HX_HCSTRING("tweenUpdated","\x10","\x33","\x8f","\xc7"),
	HX_HCSTRING("fadeInSound","\x8e","\xbc","\xe4","\x16"),
	HX_HCSTRING("fadeOutSound","\xfd","\xe6","\x21","\x7a"),
	HX_HCSTRING("fadeSound","\xb3","\xe5","\xb4","\x6c"),
	HX_HCSTRING("setVolume","\x1c","\x9f","\xfa","\xbe"),
	HX_HCSTRING("setPanning","\x8f","\x6d","\xfa","\xeb"),
	::String(null()) };

static void SoundChannel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SoundChannel_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::muted,"muted");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::masterVolume,"masterVolume");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SoundChannel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::muted,"muted");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::masterVolume,"masterVolume");
};

#endif

hx::Class SoundChannel_obj::__mClass;

static ::String SoundChannel_obj_sStaticFields[] = {
	HX_HCSTRING("muted","\x6b","\x8f","\x5b","\x10"),
	HX_HCSTRING("masterVolume","\x1c","\x44","\xfd","\x72"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	::String(null())
};

void SoundChannel_obj::__register()
{
	hx::Object *dummy = new SoundChannel_obj;
	SoundChannel_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.models.SoundChannel","\xe9","\x0e","\xbd","\xd8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SoundChannel_obj::__GetStatic;
	__mClass->mSetStaticField = &SoundChannel_obj::__SetStatic;
	__mClass->mMarkFunc = SoundChannel_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SoundChannel_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SoundChannel_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SoundChannel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SoundChannel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundChannel_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SoundChannel_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_12_boot)
HXDLIN(  12)		muted = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9c06b59cbdf10218_13_boot)
HXDLIN(  13)		masterVolume = ((Float)1);
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace models
