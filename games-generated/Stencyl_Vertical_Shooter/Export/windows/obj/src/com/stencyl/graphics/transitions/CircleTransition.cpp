// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_CircleTransition
#include <com/stencyl/graphics/transitions/CircleTransition.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Easing
#include <com/stencyl/utils/motion/Easing.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_Linear
#include <com/stencyl/utils/motion/Linear.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenFloat
#include <com/stencyl/utils/motion/TweenFloat.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenObject
#include <com/stencyl/utils/motion/TweenObject.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_24505db4a0124700_28_new,"com.stencyl.graphics.transitions.CircleTransition","new",0xcf11131b,"com.stencyl.graphics.transitions.CircleTransition.new","com/stencyl/graphics/transitions/CircleTransition.hx",28,0x0360c775)
HX_LOCAL_STACK_FRAME(_hx_pos_24505db4a0124700_48_start,"com.stencyl.graphics.transitions.CircleTransition","start",0x6eab1bdd,"com.stencyl.graphics.transitions.CircleTransition.start","com/stencyl/graphics/transitions/CircleTransition.hx",48,0x0360c775)
HX_LOCAL_STACK_FRAME(_hx_pos_24505db4a0124700_71_draw,"com.stencyl.graphics.transitions.CircleTransition","draw",0x594d4ce9,"com.stencyl.graphics.transitions.CircleTransition.draw","com/stencyl/graphics/transitions/CircleTransition.hx",71,0x0360c775)
HX_LOCAL_STACK_FRAME(_hx_pos_24505db4a0124700_87_cleanup,"com.stencyl.graphics.transitions.CircleTransition","cleanup",0x3ab6c85f,"com.stencyl.graphics.transitions.CircleTransition.cleanup","com/stencyl/graphics/transitions/CircleTransition.hx",87,0x0360c775)
namespace com{
namespace stencyl{
namespace graphics{
namespace transitions{

void CircleTransition_obj::__construct(::String direction,Float duration,hx::Null< int >  __o_color){
int color = __o_color.Default(-16777216);
            	HX_GC_STACKFRAME(&_hx_pos_24505db4a0124700_28_new)
HXLINE(  29)		super::__construct(duration);
HXLINE(  31)		this->color = color;
HXLINE(  32)		this->direction = direction;
HXLINE(  34)		if ((direction == ::com::stencyl::graphics::transitions::Transition_obj::IN)) {
HXLINE(  36)			this->beginRadius = (int)0;
HXLINE(  37)			 ::openfl::geom::Point _hx_tmp =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXDLIN(  37)			Float _hx_tmp1 = (::com::stencyl::Engine_obj::screenWidthHalf * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  37)			this->endRadius = ::Std_obj::_hx_int(::Math_obj::ceil(::openfl::geom::Point_obj::distance(_hx_tmp, ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp1,(::com::stencyl::Engine_obj::screenHeightHalf * ::com::stencyl::Engine_obj::SCALE)))));
            		}
            		else {
HXLINE(  40)			if ((direction == ::com::stencyl::graphics::transitions::Transition_obj::OUT)) {
HXLINE(  42)				 ::openfl::geom::Point _hx_tmp2 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXDLIN(  42)				Float _hx_tmp3 = (::com::stencyl::Engine_obj::screenWidthHalf * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  42)				this->beginRadius = ::Std_obj::_hx_int(::Math_obj::ceil(::openfl::geom::Point_obj::distance(_hx_tmp2, ::openfl::geom::Point_obj::__alloc( HX_CTX ,_hx_tmp3,(::com::stencyl::Engine_obj::screenHeightHalf * ::com::stencyl::Engine_obj::SCALE)))));
HXLINE(  43)				this->endRadius = (int)0;
            			}
            		}
            	}

Dynamic CircleTransition_obj::__CreateEmpty() { return new CircleTransition_obj; }

void *CircleTransition_obj::_hx_vtable = 0;

Dynamic CircleTransition_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CircleTransition_obj > _hx_result = new CircleTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool CircleTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x10817dc5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x10817dc5;
	} else {
		return inClassId==(int)0x45d87a69;
	}
}

void CircleTransition_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_24505db4a0124700_48_start)
HXLINE(  49)		this->active = true;
HXLINE(  51)		this->s =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  52)		int _hx_tmp = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(  52)		this->circleImg =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)),null(),null());
HXLINE(  53)		this->radius =  ::com::stencyl::utils::motion::TweenFloat_obj::__alloc( HX_CTX );
HXLINE(  55)		if ((this->direction == ::com::stencyl::graphics::transitions::Transition_obj::IN)) {
HXLINE(  57)			 ::openfl::display::Graphics graphics = this->s->get_graphics();
HXLINE(  58)			graphics->beginFill(this->color,null());
HXLINE(  59)			Float _hx_tmp1 = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  59)			graphics->drawRect((int)0,(int)0,_hx_tmp1,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  60)			graphics->endFill();
            		}
HXLINE(  63)		::com::stencyl::Engine_obj::engine->transitionLayer->addChild(this->s);
HXLINE(  67)		 ::com::stencyl::utils::motion::TweenFloat _hx_tmp2 = this->radius;
HXDLIN(  67)		int _hx_tmp3 = this->beginRadius;
HXDLIN(  67)		int _hx_tmp4 = this->endRadius;
HXDLIN(  67)		 ::com::stencyl::utils::motion::Linear _hx_tmp5 = ::com::stencyl::utils::motion::Easing_obj::linear;
HXDLIN(  67)		_hx_tmp2->tween(_hx_tmp3,_hx_tmp4,_hx_tmp5,::Std_obj::_hx_int((this->duration * (int)1000)))->doOnComplete(this->stop_dyn());
            	}


void CircleTransition_obj::draw( ::openfl::display::Graphics g){
            	HX_STACKFRAME(&_hx_pos_24505db4a0124700_71_draw)
HXLINE(  72)		this->s->get_graphics()->clear();
HXLINE(  74)		this->s->get_graphics()->beginFill(this->color,null());
HXLINE(  75)		 ::openfl::display::Graphics _hx_tmp = this->s->get_graphics();
HXDLIN(  75)		Float _hx_tmp1 = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  75)		_hx_tmp->drawRect((int)0,(int)0,_hx_tmp1,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE));
HXLINE(  76)		this->s->get_graphics()->endFill();
HXLINE(  78)		this->circleImg->draw(::com::stencyl::Engine_obj::engine->colorLayer,null(),null(),null(),null(),null());
HXLINE(  79)		this->circleImg->draw(::com::stencyl::Engine_obj::engine->master,null(),null(),null(),null(),null());
HXLINE(  80)		this->s->get_graphics()->beginBitmapFill(this->circleImg,null(),null(),null());
HXLINE(  81)		 ::openfl::display::Graphics _hx_tmp2 = this->s->get_graphics();
HXDLIN(  81)		Float _hx_tmp3 = (::com::stencyl::Engine_obj::screenWidthHalf * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(  81)		_hx_tmp2->drawCircle(_hx_tmp3,(::com::stencyl::Engine_obj::screenHeightHalf * ::com::stencyl::Engine_obj::SCALE),this->radius->value);
HXLINE(  82)		this->s->get_graphics()->endFill();
            	}


void CircleTransition_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_24505db4a0124700_87_cleanup)
HXDLIN(  87)		if (hx::IsNotNull( this->s )) {
HXLINE(  89)			::com::stencyl::Engine_obj::engine->transitionLayer->removeChild(this->s);
HXLINE(  90)			this->s = null();
            		}
            	}



hx::ObjectPtr< CircleTransition_obj > CircleTransition_obj::__new(::String direction,Float duration,hx::Null< int >  __o_color) {
	hx::ObjectPtr< CircleTransition_obj > __this = new CircleTransition_obj();
	__this->__construct(direction,duration,__o_color);
	return __this;
}

hx::ObjectPtr< CircleTransition_obj > CircleTransition_obj::__alloc(hx::Ctx *_hx_ctx,::String direction,Float duration,hx::Null< int >  __o_color) {
	CircleTransition_obj *__this = (CircleTransition_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CircleTransition_obj), true, "com.stencyl.graphics.transitions.CircleTransition"));
	*(void **)__this = CircleTransition_obj::_hx_vtable;
	__this->__construct(direction,duration,__o_color);
	return __this;
}

CircleTransition_obj::CircleTransition_obj()
{
}

void CircleTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CircleTransition);
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(radius,"radius");
	HX_MARK_MEMBER_NAME(beginRadius,"beginRadius");
	HX_MARK_MEMBER_NAME(endRadius,"endRadius");
	HX_MARK_MEMBER_NAME(circleImg,"circleImg");
	HX_MARK_MEMBER_NAME(s,"s");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CircleTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(radius,"radius");
	HX_VISIT_MEMBER_NAME(beginRadius,"beginRadius");
	HX_VISIT_MEMBER_NAME(endRadius,"endRadius");
	HX_VISIT_MEMBER_NAME(circleImg,"circleImg");
	HX_VISIT_MEMBER_NAME(s,"s");
	 ::com::stencyl::graphics::transitions::Transition_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CircleTransition_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { return hx::Val( radius ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"endRadius") ) { return hx::Val( endRadius ); }
		if (HX_FIELD_EQ(inName,"circleImg") ) { return hx::Val( circleImg ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beginRadius") ) { return hx::Val( beginRadius ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CircleTransition_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast<  ::com::stencyl::utils::motion::TweenFloat >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"endRadius") ) { endRadius=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"circleImg") ) { circleImg=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beginRadius") ) { beginRadius=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CircleTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"));
	outFields->push(HX_HCSTRING("beginRadius","\x5b","\xb3","\x1c","\x4b"));
	outFields->push(HX_HCSTRING("endRadius","\x8d","\x1e","\xd9","\xf0"));
	outFields->push(HX_HCSTRING("circleImg","\xd3","\xfb","\x30","\x95"));
	outFields->push(HX_HCSTRING("s","\x73","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CircleTransition_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(CircleTransition_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsObject /*::com::stencyl::utils::motion::TweenFloat*/ ,(int)offsetof(CircleTransition_obj,radius),HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0")},
	{hx::fsInt,(int)offsetof(CircleTransition_obj,beginRadius),HX_HCSTRING("beginRadius","\x5b","\xb3","\x1c","\x4b")},
	{hx::fsInt,(int)offsetof(CircleTransition_obj,endRadius),HX_HCSTRING("endRadius","\x8d","\x1e","\xd9","\xf0")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(CircleTransition_obj,circleImg),HX_HCSTRING("circleImg","\xd3","\xfb","\x30","\x95")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(CircleTransition_obj,s),HX_HCSTRING("s","\x73","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CircleTransition_obj_sStaticStorageInfo = 0;
#endif

static ::String CircleTransition_obj_sMemberFields[] = {
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"),
	HX_HCSTRING("beginRadius","\x5b","\xb3","\x1c","\x4b"),
	HX_HCSTRING("endRadius","\x8d","\x1e","\xd9","\xf0"),
	HX_HCSTRING("circleImg","\xd3","\xfb","\x30","\x95"),
	HX_HCSTRING("s","\x73","\x00","\x00","\x00"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	::String(null()) };

static void CircleTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CircleTransition_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CircleTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CircleTransition_obj::__mClass,"__mClass");
};

#endif

hx::Class CircleTransition_obj::__mClass;

void CircleTransition_obj::__register()
{
	hx::Object *dummy = new CircleTransition_obj;
	CircleTransition_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.transitions.CircleTransition","\xa9","\xe9","\x74","\xba");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CircleTransition_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CircleTransition_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CircleTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CircleTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CircleTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CircleTransition_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace transitions
