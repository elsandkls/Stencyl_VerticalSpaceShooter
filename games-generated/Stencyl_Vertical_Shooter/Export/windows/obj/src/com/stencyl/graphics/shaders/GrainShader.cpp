// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_GrainShader
#include <com/stencyl/graphics/shaders/GrainShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4d6330760751bcf2_6_new,"com.stencyl.graphics.shaders.GrainShader","new",0xfc1c18be,"com.stencyl.graphics.shaders.GrainShader.new","com/stencyl/graphics/shaders/GrainShader.hx",6,0x60c21632)
HX_LOCAL_STACK_FRAME(_hx_pos_4d6330760751bcf2_164_enableColor,"com.stencyl.graphics.shaders.GrainShader","enableColor",0x73208e3e,"com.stencyl.graphics.shaders.GrainShader.enableColor","com/stencyl/graphics/shaders/GrainShader.hx",164,0x60c21632)
HX_LOCAL_STACK_FRAME(_hx_pos_4d6330760751bcf2_169_disableColor,"com.stencyl.graphics.shaders.GrainShader","disableColor",0x61274a3d,"com.stencyl.graphics.shaders.GrainShader.disableColor","com/stencyl/graphics/shaders/GrainShader.hx",169,0x60c21632)
HX_LOCAL_STACK_FRAME(_hx_pos_4d6330760751bcf2_174_setGrainAmount,"com.stencyl.graphics.shaders.GrainShader","setGrainAmount",0xf1b5e153,"com.stencyl.graphics.shaders.GrainShader.setGrainAmount","com/stencyl/graphics/shaders/GrainShader.hx",174,0x60c21632)
HX_LOCAL_STACK_FRAME(_hx_pos_4d6330760751bcf2_179_setColorAmount,"com.stencyl.graphics.shaders.GrainShader","setColorAmount",0xbb40d77b,"com.stencyl.graphics.shaders.GrainShader.setColorAmount","com/stencyl/graphics/shaders/GrainShader.hx",179,0x60c21632)
HX_LOCAL_STACK_FRAME(_hx_pos_4d6330760751bcf2_184_setGrainSize,"com.stencyl.graphics.shaders.GrainShader","setGrainSize",0x9e8a0b7c,"com.stencyl.graphics.shaders.GrainShader.setGrainSize","com/stencyl/graphics/shaders/GrainShader.hx",184,0x60c21632)
HX_LOCAL_STACK_FRAME(_hx_pos_4d6330760751bcf2_189_setLuminance,"com.stencyl.graphics.shaders.GrainShader","setLuminance",0x651eb3d8,"com.stencyl.graphics.shaders.GrainShader.setLuminance","com/stencyl/graphics/shaders/GrainShader.hx",189,0x60c21632)
namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{

void GrainShader_obj::__construct(hx::Null< Float >  __o_grainAmount,hx::Null< bool >  __o_enableColors,hx::Null< Float >  __o_colorAmount,hx::Null< Float >  __o_grainSize,hx::Null< Float >  __o_luminance){
Float grainAmount = __o_grainAmount.Default(((Float)0.05));
bool enableColors = __o_enableColors.Default(false);
Float colorAmount = __o_colorAmount.Default(((Float)0.6));
Float grainSize = __o_grainSize.Default(((Float)1.6));
Float luminance = __o_luminance.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_4d6330760751bcf2_6_new)
HXLINE(   7)		super::__construct();
HXLINE(   9)		::String script = HX_("\n\t\t\t/*\n\t\t\t\tFilm Grain post-process shader v1.1\n\t\t\t\tMartins Upitis (martinsh) devlog-martinsh.blogspot.com\n\t\t\t*/\n\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tuniform sampler2D uImage0; //rendered scene sampler\n\t\t\tuniform vec2 uResolution; //scene sampler resolution\n\t\t\tuniform float uTime;\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\t\n\t\t\tconst float permTexUnit = 1.0/256.0;        // Perm texture texel-size\n\t\t\tconst float permTexUnitHalf = 0.5/256.0;    // Half perm texture texel-size\n\t\t\t\n\t\t\tfloat width = uResolution.x;\n\t\t\tfloat height = uResolution.y;\n\t\t\t\n\t\t\tuniform float grainamount; //grain amount\n\t\t\tuniform float colored; //colored noise?\n\t\t\tuniform float coloramount;\n\t\t\tuniform float grainsize; //grain particle size (1.5 - 2.5)\n\t\t\tuniform float lumamount; //\n\t\t\t\n\t\t\t//a random texture generator, but you can also use a pre-computed perturbation texture\n\t\t\tvec4 rnm(in vec2 tc)\n\t\t\t{\n\t\t\t\tfloat noise =  sin(dot(tc + vec2(uTime,uTime),vec2(12.9898,78.233))) * 43758.5453;\n\t\t\t\n\t\t\t\tfloat noiseR =  fract(noise)*2.0-1.0;\n\t\t\t\tfloat noiseG =  fract(noise*1.2154)*2.0-1.0;\n\t\t\t\tfloat noiseB =  fract(noise*1.3453)*2.0-1.0;\n\t\t\t\tfloat noiseA =  fract(noise*1.3647)*2.0-1.0;\n\t\t\t\n\t\t\t\treturn vec4(noiseR,noiseG,noiseB,noiseA);\n\t\t\t}\n\t\t\t\n\t\t\tfloat fade(in float t) {\n\t\t\t\treturn t*t*t*(t*(t*6.0-15.0)+10.0);\n\t\t\t}\n\t\t\t\n\t\t\tfloat pnoise3D(in vec3 p)\n\t\t\t{\n\t\t\t\tvec3 pi = permTexUnit*floor(p)+permTexUnitHalf; // Integer part, scaled so +1 moves permTexUnit texel\n\t\t\t\t// and offset 1/2 texel to sample texel centers\n\t\t\t\tvec3 pf = fract(p);     // Fractional part for interpolation\n\t\t\t\n\t\t\t\t// Noise contributions from (x=0, y=0), z=0 and z=1\n\t\t\t\tfloat perm00 = rnm(pi.xy).a ;\n\t\t\t\tvec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n000 = dot(grad000, pf);\n\t\t\t\tvec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));\n\t\t\t\n\t\t\t\t// Noise contributions from (x=0, y=1), z=0 and z=1\n\t\t\t\tfloat perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a ;\n\t\t\t\tvec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));\n\t\t\t\tvec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));\n\t\t\t\n\t\t\t\t// Noise contributions from (x=1, y=0), z=0 and z=1\n\t\t\t\tfloat perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a ;\n\t\t\t\tvec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));\n\t\t\t\tvec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));\n\t\t\t\n\t\t\t\t// Noise contributions from (x=1, y=1), z=0 and z=1\n\t\t\t\tfloat perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a ;\n\t\t\t\tvec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));\n\t\t\t\tvec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));\n\t\t\t\n\t\t\t\t// Blend contributions along x\n\t\t\t\tvec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));\n\t\t\t\n\t\t\t\t// Blend contributions along y\n\t\t\t\tvec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));\n\t\t\t\n\t\t\t\t// Blend contributions along z\n\t\t\t\tfloat n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));\n\t\t\t\n\t\t\t\t// We're done, return the final noise value.\n\t\t\t\treturn n_xyz;\n\t\t\t}\n\t\t\t\n\t\t\t//2d coordinate orientation thing\n\t\t\tvec2 coordRot(in vec2 tc, in float angle)\n\t\t\t{\n\t\t\t\tfloat aspect = width/height;\n\t\t\t\tfloat rotX = ((tc.x*2.0-1.0)*aspect*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));\n\t\t\t\tfloat rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*aspect*sin(angle));\n\t\t\t\trotX = ((rotX/aspect)*0.5+0.5);\n\t\t\t\trotY = rotY*0.5+0.5;\n\t\t\t\treturn vec2(rotX,rotY);\n\t\t\t}\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tvec2 texCoord = vTexCoord.st;\n\t\t\t\n\t\t\t\tvec3 rotOffset = vec3(1.425,3.892,5.835); //rotation offset values\n\t\t\t\tvec2 rotCoordsR = coordRot(texCoord, uTime + rotOffset.x);\n\t\t\t\tvec3 noise = vec3(pnoise3D(vec3(rotCoordsR*vec2(width/grainsize,height/grainsize),0.0)));\n\t\t\t\n\t\t\t\tif (colored == 1.0)\n\t\t\t\t{\n\t\t\t\t\tvec2 rotCoordsG = coordRot(texCoord, uTime + rotOffset.y);\n\t\t\t\t\tvec2 rotCoordsB = coordRot(texCoord, uTime + rotOffset.z);\n\t\t\t\t\tnoise.g = mix(noise.r,pnoise3D(vec3(rotCoordsG*vec2(width/grainsize,height/grainsize),1.0)),coloramount);\n\t\t\t\t\tnoise.b = mix(noise.r,pnoise3D(vec3(rotCoordsB*vec2(width/grainsize,height/grainsize),2.0)),coloramount);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvec3 col = texture2D(uImage0, texCoord).rgb;\n\t\t\t\n\t\t\t\t//noisiness response curve based on scene luminance\n\t\t\t\tvec3 lumcoeff = vec3(0.299,0.587,0.114);\n\t\t\t\tfloat luminance = mix(0.0,dot(col, lumcoeff),lumamount);\n\t\t\t\tfloat lum = smoothstep(0.2,0.0,luminance);\n\t\t\t\tlum += luminance;\n\t\t\t\n\t\t\t\n\t\t\t\tnoise = mix(noise,vec3(0.0),pow(lum,4.0));\n\t\t\t\tcol = col+noise*grainamount;\n\t\t\t\n\t\t\t\tgl_FragColor =  vec4(col,1.0);\n\t\t\t}\n\t\t",42,c2,48,6b);
HXLINE( 144)		this->model =  ::com::stencyl::graphics::shaders::PostProcess_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),script,true);
HXLINE( 146)		this->setGrainAmount(grainAmount);
HXLINE( 147)		this->setColorAmount(colorAmount);
HXLINE( 148)		this->setGrainSize(grainSize);
HXLINE( 149)		this->setLuminance(luminance);
HXLINE( 151)		if (enableColors) {
HXLINE( 153)			this->enableColor();
            		}
            		else {
HXLINE( 158)			this->disableColor();
            		}
            	}

Dynamic GrainShader_obj::__CreateEmpty() { return new GrainShader_obj; }

void *GrainShader_obj::_hx_vtable = 0;

Dynamic GrainShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GrainShader_obj > _hx_result = new GrainShader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool GrainShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x488ca67b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x488ca67b;
	} else {
		return inClassId==(int)0x6a739990;
	}
}

void GrainShader_obj::enableColor(){
            	HX_STACKFRAME(&_hx_pos_4d6330760751bcf2_164_enableColor)
HXDLIN( 164)		this->setProperty(HX_("colored",82,28,66,ef),((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(GrainShader_obj,enableColor,(void))

void GrainShader_obj::disableColor(){
            	HX_STACKFRAME(&_hx_pos_4d6330760751bcf2_169_disableColor)
HXDLIN( 169)		this->setProperty(HX_("colored",82,28,66,ef),(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GrainShader_obj,disableColor,(void))

void GrainShader_obj::setGrainAmount(Float amount){
            	HX_STACKFRAME(&_hx_pos_4d6330760751bcf2_174_setGrainAmount)
HXDLIN( 174)		this->setProperty(HX_("grainamount",53,39,0c,91),amount);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GrainShader_obj,setGrainAmount,(void))

void GrainShader_obj::setColorAmount(Float amount){
            	HX_STACKFRAME(&_hx_pos_4d6330760751bcf2_179_setColorAmount)
HXDLIN( 179)		this->setProperty(HX_("coloramount",7b,2f,97,5a),amount);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GrainShader_obj,setColorAmount,(void))

void GrainShader_obj::setGrainSize(Float amount){
            	HX_STACKFRAME(&_hx_pos_4d6330760751bcf2_184_setGrainSize)
HXDLIN( 184)		this->setProperty(HX_("grainsize",7c,63,1a,b7),amount);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GrainShader_obj,setGrainSize,(void))

void GrainShader_obj::setLuminance(Float amount){
            	HX_STACKFRAME(&_hx_pos_4d6330760751bcf2_189_setLuminance)
HXDLIN( 189)		this->setProperty(HX_("lumamount",9c,16,8d,ab),amount);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GrainShader_obj,setLuminance,(void))


hx::ObjectPtr< GrainShader_obj > GrainShader_obj::__new(hx::Null< Float >  __o_grainAmount,hx::Null< bool >  __o_enableColors,hx::Null< Float >  __o_colorAmount,hx::Null< Float >  __o_grainSize,hx::Null< Float >  __o_luminance) {
	hx::ObjectPtr< GrainShader_obj > __this = new GrainShader_obj();
	__this->__construct(__o_grainAmount,__o_enableColors,__o_colorAmount,__o_grainSize,__o_luminance);
	return __this;
}

hx::ObjectPtr< GrainShader_obj > GrainShader_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_grainAmount,hx::Null< bool >  __o_enableColors,hx::Null< Float >  __o_colorAmount,hx::Null< Float >  __o_grainSize,hx::Null< Float >  __o_luminance) {
	GrainShader_obj *__this = (GrainShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GrainShader_obj), true, "com.stencyl.graphics.shaders.GrainShader"));
	*(void **)__this = GrainShader_obj::_hx_vtable;
	__this->__construct(__o_grainAmount,__o_enableColors,__o_colorAmount,__o_grainSize,__o_luminance);
	return __this;
}

GrainShader_obj::GrainShader_obj()
{
}

hx::Val GrainShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"enableColor") ) { return hx::Val( enableColor_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"disableColor") ) { return hx::Val( disableColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGrainSize") ) { return hx::Val( setGrainSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLuminance") ) { return hx::Val( setLuminance_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setGrainAmount") ) { return hx::Val( setGrainAmount_dyn() ); }
		if (HX_FIELD_EQ(inName,"setColorAmount") ) { return hx::Val( setColorAmount_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GrainShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GrainShader_obj_sStaticStorageInfo = 0;
#endif

static ::String GrainShader_obj_sMemberFields[] = {
	HX_HCSTRING("enableColor","\xe0","\xb7","\x2b","\x15"),
	HX_HCSTRING("disableColor","\x5b","\x8e","\xe0","\x88"),
	HX_HCSTRING("setGrainAmount","\xf1","\xe8","\x5e","\x6d"),
	HX_HCSTRING("setColorAmount","\x19","\xdf","\xe9","\x36"),
	HX_HCSTRING("setGrainSize","\x9a","\x4f","\x43","\xc6"),
	HX_HCSTRING("setLuminance","\xf6","\xf7","\xd7","\x8c"),
	::String(null()) };

static void GrainShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GrainShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GrainShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GrainShader_obj::__mClass,"__mClass");
};

#endif

hx::Class GrainShader_obj::__mClass;

void GrainShader_obj::__register()
{
	hx::Object *dummy = new GrainShader_obj;
	GrainShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.shaders.GrainShader","\xcc","\xa1","\xbd","\xc1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GrainShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GrainShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GrainShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GrainShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GrainShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GrainShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders
