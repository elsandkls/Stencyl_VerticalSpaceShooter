// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_SepiaShader
#include <com/stencyl/graphics/shaders/SepiaShader.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0de4abd349c96293_6_new,"com.stencyl.graphics.shaders.SepiaShader","new",0xa0164239,"com.stencyl.graphics.shaders.SepiaShader.new","com/stencyl/graphics/shaders/SepiaShader.hx",6,0x0c8af517)
namespace com{
namespace stencyl{
namespace graphics{
namespace shaders{

void SepiaShader_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_0de4abd349c96293_6_new)
HXLINE(   7)		super::__construct();
HXLINE(   9)		::String script = HX_("\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tvec4 color = texture2D(uImage0, vTexCoord);\n\t\t\t\tgl_FragColor.r = dot(color, vec4(0.393,0.769,0.189,0));\n\t\t\t\tgl_FragColor.g = dot(color, vec4(0.349,0.686,0.168,0));\n\t\t\t\tgl_FragColor.b = dot(color, vec4(0.272,0.534,0.131,0));\n\t\t\t\tgl_FragColor.a = color.a;\n\t\t\t}\n\t\t",5c,90,6b,08);
HXLINE(  27)		this->model =  ::com::stencyl::graphics::shaders::PostProcess_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),script,true);
            	}

Dynamic SepiaShader_obj::__CreateEmpty() { return new SepiaShader_obj; }

void *SepiaShader_obj::_hx_vtable = 0;

Dynamic SepiaShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SepiaShader_obj > _hx_result = new SepiaShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SepiaShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c7c7cc3) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c7c7cc3;
	} else {
		return inClassId==(int)0x488ca67b;
	}
}


hx::ObjectPtr< SepiaShader_obj > SepiaShader_obj::__new() {
	hx::ObjectPtr< SepiaShader_obj > __this = new SepiaShader_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SepiaShader_obj > SepiaShader_obj::__alloc(hx::Ctx *_hx_ctx) {
	SepiaShader_obj *__this = (SepiaShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SepiaShader_obj), true, "com.stencyl.graphics.shaders.SepiaShader"));
	*(void **)__this = SepiaShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SepiaShader_obj::SepiaShader_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SepiaShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SepiaShader_obj_sStaticStorageInfo = 0;
#endif

static void SepiaShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SepiaShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SepiaShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SepiaShader_obj::__mClass,"__mClass");
};

#endif

hx::Class SepiaShader_obj::__mClass;

void SepiaShader_obj::__register()
{
	hx::Object *dummy = new SepiaShader_obj;
	SepiaShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.graphics.shaders.SepiaShader","\xc7","\xb1","\xf0","\x47");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SepiaShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SepiaShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SepiaShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SepiaShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SepiaShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace com
} // end namespace stencyl
} // end namespace graphics
} // end namespace shaders
