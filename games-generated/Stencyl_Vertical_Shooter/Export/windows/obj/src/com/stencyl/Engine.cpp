// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Universal
#include <Universal.h>
#endif
#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2CircleShape
#include <box2D/collision/shapes/B2CircleShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2PolygonShape
#include <box2D/collision/shapes/B2PolygonShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2BodyDef
#include <box2D/dynamics/B2BodyDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactListener
#include <box2D/dynamics/B2ContactListener.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactManager
#include <box2D/dynamics/B2ContactManager.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2DebugDraw
#include <box2D/dynamics/B2DebugDraw.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2World
#include <box2D/dynamics/B2World.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactEdge
#include <box2D/dynamics/contacts/B2ContactEdge.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2DistanceJoint
#include <box2D/dynamics/joints/B2DistanceJoint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2DistanceJointDef
#include <box2D/dynamics/joints/B2DistanceJointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointDef
#include <box2D/dynamics/joints/B2JointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2LineJoint
#include <box2D/dynamics/joints/B2LineJoint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2LineJointDef
#include <box2D/dynamics/joints/B2LineJointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2RevoluteJoint
#include <box2D/dynamics/joints/B2RevoluteJoint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2RevoluteJointDef
#include <box2D/dynamics/joints/B2RevoluteJointDef.h>
#endif
#ifndef INCLUDED_com_nmefermmmtools_debug_Stats
#include <com/nmefermmmtools/debug/Stats.h>
#endif
#ifndef INCLUDED_com_stencyl_Config
#include <com/stencyl/Config.h>
#endif
#ifndef INCLUDED_com_stencyl_Data
#include <com/stencyl/Data.h>
#endif
#ifndef INCLUDED_com_stencyl_Engine
#include <com/stencyl/Engine.h>
#endif
#ifndef INCLUDED_com_stencyl_Input
#include <com/stencyl/Input.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Attribute
#include <com/stencyl/behavior/Attribute.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Behavior
#include <com/stencyl/behavior/Behavior.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_BehaviorInstance
#include <com/stencyl/behavior/BehaviorInstance.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_BehaviorManager
#include <com/stencyl/behavior/BehaviorManager.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_Script
#include <com/stencyl/behavior/Script.h>
#endif
#ifndef INCLUDED_com_stencyl_behavior_TimedTask
#include <com/stencyl/behavior/TimedTask.h>
#endif
#ifndef INCLUDED_com_stencyl_event_EventMaster
#include <com/stencyl/event/EventMaster.h>
#endif
#ifndef INCLUDED_com_stencyl_event_NativeListener
#include <com/stencyl/event/NativeListener.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_AbstractAnimation
#include <com/stencyl/graphics/AbstractAnimation.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_BitmapAnimation
#include <com/stencyl/graphics/BitmapAnimation.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_EngineScaleUpdateListener
#include <com/stencyl/graphics/EngineScaleUpdateListener.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_G
#include <com/stencyl/graphics/G.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_GLUtil
#include <com/stencyl/graphics/GLUtil.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_BasicShader
#include <com/stencyl/graphics/shaders/BasicShader.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_shaders_PostProcess
#include <com/stencyl/graphics/shaders/PostProcess.h>
#endif
#ifndef INCLUDED_com_stencyl_graphics_transitions_Transition
#include <com/stencyl/graphics/transitions/Transition.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Atlas
#include <com/stencyl/models/Atlas.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Background
#include <com/stencyl/models/Background.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Font
#include <com/stencyl/models/Font.h>
#endif
#ifndef INCLUDED_com_stencyl_models_GameModel
#include <com/stencyl/models/GameModel.h>
#endif
#ifndef INCLUDED_com_stencyl_models_GroupDef
#include <com/stencyl/models/GroupDef.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Region
#include <com/stencyl/models/Region.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Resource
#include <com/stencyl/models/Resource.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Scene
#include <com/stencyl/models/Scene.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Sound
#include <com/stencyl/models/Sound.h>
#endif
#ifndef INCLUDED_com_stencyl_models_SoundChannel
#include <com/stencyl/models/SoundChannel.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Terrain
#include <com/stencyl/models/Terrain.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_ActorType
#include <com/stencyl/models/actor/ActorType.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Animation
#include <com/stencyl/models/actor/Animation.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Collision
#include <com/stencyl/models/actor/Collision.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Group
#include <com/stencyl/models/actor/Group.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Sprite
#include <com/stencyl/models/actor/Sprite.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_ActorInstance
#include <com/stencyl/models/scene/ActorInstance.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_DeferredActor
#include <com/stencyl/models/scene/DeferredActor.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_Layer
#include <com/stencyl/models/scene/Layer.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_RegionDef
#include <com/stencyl/models/scene/RegionDef.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_TerrainDef
#include <com/stencyl/models/scene/TerrainDef.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_Tile
#include <com/stencyl/models/scene/Tile.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_TileLayer
#include <com/stencyl/models/scene/TileLayer.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_Wireframe
#include <com/stencyl/models/scene/Wireframe.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_layers_BackgroundLayer
#include <com/stencyl/models/scene/layers/BackgroundLayer.h>
#endif
#ifndef INCLUDED_com_stencyl_models_scene_layers_RegularLayer
#include <com/stencyl/models/scene/layers/RegularLayer.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_LazyIntMap
#include <com/stencyl/utils/LazyIntMap.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_ToolsetInterface
#include <com/stencyl/utils/ToolsetInterface.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_Utils
#include <com/stencyl/utils/Utils.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_EasingFunction
#include <com/stencyl/utils/motion/EasingFunction.h>
#endif
#ifndef INCLUDED_com_stencyl_utils_motion_TweenManager
#include <com/stencyl/utils/motion/TweenManager.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Collection
#include <de/polygonal/ds/Collection.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Hashable
#include <de/polygonal/ds/Hashable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntHashTable
#include <de/polygonal/ds/IntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntIntHashTable
#include <de/polygonal/ds/IntIntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Itr
#include <de/polygonal/ds/Itr.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Map
#include <de/polygonal/ds/Map.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_106_new,"com.stencyl.Engine","new",0x98e34f23,"com.stencyl.Engine.new","com/stencyl/Engine.hx",106,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_518_onKeyDown,"com.stencyl.Engine","onKeyDown",0x9f0d9545,"com.stencyl.Engine.onKeyDown","com/stencyl/Engine.hx",518,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_527_onWindowResize,"com.stencyl.Engine","onWindowResize",0xea7117e0,"com.stencyl.Engine.onWindowResize","com/stencyl/Engine.hx",527,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_537_onWindowRestore,"com.stencyl.Engine","onWindowRestore",0x3fc0d7e2,"com.stencyl.Engine.onWindowRestore","com/stencyl/Engine.hx",537,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_546_onWindowMaximize,"com.stencyl.Engine","onWindowMaximize",0x6db135b8,"com.stencyl.Engine.onWindowMaximize","com/stencyl/Engine.hx",546,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_554_onWindowFullScreen,"com.stencyl.Engine","onWindowFullScreen",0x4cf1d247,"com.stencyl.Engine.onWindowFullScreen","com/stencyl/Engine.hx",554,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_563_isInFullScreen,"com.stencyl.Engine","isInFullScreen",0x63475fc7,"com.stencyl.Engine.isInFullScreen","com/stencyl/Engine.hx",563,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_567_setFullScreen,"com.stencyl.Engine","setFullScreen",0xf3459d20,"com.stencyl.Engine.setFullScreen","com/stencyl/Engine.hx",567,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_581_toggleFullScreen,"com.stencyl.Engine","toggleFullScreen",0x8bb8766c,"com.stencyl.Engine.toggleFullScreen","com/stencyl/Engine.hx",581,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_585_reloadScreen,"com.stencyl.Engine","reloadScreen",0x98d19c82,"com.stencyl.Engine.reloadScreen","com/stencyl/Engine.hx",585,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_615_reloadScreen,"com.stencyl.Engine","reloadScreen",0x98d19c82,"com.stencyl.Engine.reloadScreen","com/stencyl/Engine.hx",615,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_748_addShader,"com.stencyl.Engine","addShader",0x00606729,"com.stencyl.Engine.addShader","com/stencyl/Engine.hx",748,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_779_clearShaders,"com.stencyl.Engine","clearShaders",0xb84f447e,"com.stencyl.Engine.clearShaders","com/stencyl/Engine.hx",779,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_787_toggleShadersForHUD,"com.stencyl.Engine","toggleShadersForHUD",0x3e54b60b,"com.stencyl.Engine.toggleShadersForHUD","com/stencyl/Engine.hx",787,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_795_resetShaders,"com.stencyl.Engine","resetShaders",0x4eaed87c,"com.stencyl.Engine.resetShaders","com/stencyl/Engine.hx",795,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_806_begin,"com.stencyl.Engine","begin",0x2ad4dfac,"com.stencyl.Engine.begin","com/stencyl/Engine.hx",806,0x1bb08c6b)
static const int _hx_array_data_b46681b1_28[] = {
	(int)16,
};
static const int _hx_array_data_b46681b1_29[] = {
	(int)17,
};
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_949_setStatsVisible,"com.stencyl.Engine","setStatsVisible",0x32aaa618,"com.stencyl.Engine.setStatsVisible","com/stencyl/Engine.hx",949,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_968_loadScene,"com.stencyl.Engine","loadScene",0xbf249849,"com.stencyl.Engine.loadScene","com/stencyl/Engine.hx",968,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1260_initPhysics,"com.stencyl.Engine","initPhysics",0x35dc215a,"com.stencyl.Engine.initPhysics","com/stencyl/Engine.hx",1260,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1317_loadActors,"com.stencyl.Engine","loadActors",0x585f2a41,"com.stencyl.Engine.loadActors","com/stencyl/Engine.hx",1317,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1336_loadDeferredActors,"com.stencyl.Engine","loadDeferredActors",0xf37cd9c0,"com.stencyl.Engine.loadDeferredActors","com/stencyl/Engine.hx",1336,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1346_initActorScripts,"com.stencyl.Engine","initActorScripts",0x5104f420,"com.stencyl.Engine.initActorScripts","com/stencyl/Engine.hx",1346,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1356_loadCamera,"com.stencyl.Engine","loadCamera",0xf9a0a508,"com.stencyl.Engine.loadCamera","com/stencyl/Engine.hx",1356,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1365_loadRegions,"com.stencyl.Engine","loadRegions",0x0a5a4d3c,"com.stencyl.Engine.loadRegions","com/stencyl/Engine.hx",1365,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1386_loadTerrainRegions,"com.stencyl.Engine","loadTerrainRegions",0x50999b2d,"com.stencyl.Engine.loadTerrainRegions","com/stencyl/Engine.hx",1386,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1409_loadJoints,"com.stencyl.Engine","loadJoints",0xd31e464c,"com.stencyl.Engine.loadJoints","com/stencyl/Engine.hx",1409,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1513_loadTerrain,"com.stencyl.Engine","loadTerrain",0xb8d5e3f2,"com.stencyl.Engine.loadTerrain","com/stencyl/Engine.hx",1513,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1583_initLayers,"com.stencyl.Engine","initLayers",0xe9dfa04f,"com.stencyl.Engine.initLayers","com/stencyl/Engine.hx",1583,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1680_setColorBackground,"com.stencyl.Engine","setColorBackground",0xd3382a4c,"com.stencyl.Engine.setColorBackground","com/stencyl/Engine.hx",1680,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1693_optimizePool,"com.stencyl.Engine","optimizePool",0x945c7d36,"com.stencyl.Engine.optimizePool","com/stencyl/Engine.hx",1693,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1714_cleanup,"com.stencyl.Engine","cleanup",0xfb8ba867,"com.stencyl.Engine.cleanup","com/stencyl/Engine.hx",1714,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1863_switchScene,"com.stencyl.Engine","switchScene",0x2b71e47b,"com.stencyl.Engine.switchScene","com/stencyl/Engine.hx",1863,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1901_enterScene,"com.stencyl.Engine","enterScene",0x018794b1,"com.stencyl.Engine.enterScene","com/stencyl/Engine.hx",1901,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1923_isTransitioning,"com.stencyl.Engine","isTransitioning",0xfe08cb66,"com.stencyl.Engine.isTransitioning","com/stencyl/Engine.hx",1923,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1938_isTransitioningOut,"com.stencyl.Engine","isTransitioningOut",0xe8f030c8,"com.stencyl.Engine.isTransitioningOut","com/stencyl/Engine.hx",1938,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1953_createActorInNextScene,"com.stencyl.Engine","createActorInNextScene",0xca5cebf8,"com.stencyl.Engine.createActorInNextScene","com/stencyl/Engine.hx",1953,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1957_createActor,"com.stencyl.Engine","createActor",0x04427c1c,"com.stencyl.Engine.createActor","com/stencyl/Engine.hx",1957,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2090_removeActor,"com.stencyl.Engine","removeActor",0xd8fb21d4,"com.stencyl.Engine.removeActor","com/stencyl/Engine.hx",2090,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2115_removeActorFromLayer,"com.stencyl.Engine","removeActorFromLayer",0x4ce04f93,"com.stencyl.Engine.removeActorFromLayer","com/stencyl/Engine.hx",2115,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2144_moveActorToLayer,"com.stencyl.Engine","moveActorToLayer",0xdea7ebef,"com.stencyl.Engine.moveActorToLayer","com/stencyl/Engine.hx",2144,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2180_recycleActor,"com.stencyl.Engine","recycleActor",0x67a016bf,"com.stencyl.Engine.recycleActor","com/stencyl/Engine.hx",2180,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2298_getRecycledActorOfType,"com.stencyl.Engine","getRecycledActorOfType",0x7f169afc,"com.stencyl.Engine.getRecycledActorOfType","com/stencyl/Engine.hx",2298,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2311_getRecycledActorOfTypeOnLayer,"com.stencyl.Engine","getRecycledActorOfTypeOnLayer",0xa9484496,"com.stencyl.Engine.getRecycledActorOfTypeOnLayer","com/stencyl/Engine.hx",2311,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2413_createActorOfType,"com.stencyl.Engine","createActorOfType",0x1c9344ad,"com.stencyl.Engine.createActorOfType","com/stencyl/Engine.hx",2413,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2461_getTopLayer,"com.stencyl.Engine","getTopLayer",0xa2a4cb75,"com.stencyl.Engine.getTopLayer","com/stencyl/Engine.hx",2461,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2466_getBottomLayer,"com.stencyl.Engine","getBottomLayer",0x4d852c0d,"com.stencyl.Engine.getBottomLayer","com/stencyl/Engine.hx",2466,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2471_getMiddleLayer,"com.stencyl.Engine","getMiddleLayer",0xe37bff63,"com.stencyl.Engine.getMiddleLayer","com/stencyl/Engine.hx",2471,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2480_update,"com.stencyl.Engine","update",0x3b9d6326,"com.stencyl.Engine.update","com/stencyl/Engine.hx",2480,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2735_onUpdate,"com.stencyl.Engine","onUpdate",0x56d19ae5,"com.stencyl.Engine.onUpdate","com/stencyl/Engine.hx",2735,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2800_postUpdate,"com.stencyl.Engine","postUpdate",0x69273626,"com.stencyl.Engine.postUpdate","com/stencyl/Engine.hx",2800,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2858_onFocus,"com.stencyl.Engine","onFocus",0xeb109a7c,"com.stencyl.Engine.onFocus","com/stencyl/Engine.hx",2858,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2867_onFocusLost,"com.stencyl.Engine","onFocusLost",0x00a65e80,"com.stencyl.Engine.onFocusLost","com/stencyl/Engine.hx",2867,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2875_focusChanged,"com.stencyl.Engine","focusChanged",0xa0e8b4d9,"com.stencyl.Engine.focusChanged","com/stencyl/Engine.hx",2875,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_2886_handleCollision,"com.stencyl.Engine","handleCollision",0x3c1a66ed,"com.stencyl.Engine.handleCollision","com/stencyl/Engine.hx",2886,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3028_soundFinished,"com.stencyl.Engine","soundFinished",0x55b173e4,"com.stencyl.Engine.soundFinished","com/stencyl/Engine.hx",3028,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3064_addTask,"com.stencyl.Engine","addTask",0xd97d9e49,"com.stencyl.Engine.addTask","com/stencyl/Engine.hx",3064,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3069_removeTask,"com.stencyl.Engine","removeTask",0x56ff2946,"com.stencyl.Engine.removeTask","com/stencyl/Engine.hx",3069,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3077_shakeScreen,"com.stencyl.Engine","shakeScreen",0x7ac36095,"com.stencyl.Engine.shakeScreen","com/stencyl/Engine.hx",3077,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3084_stopShakingScreen,"com.stencyl.Engine","stopShakingScreen",0xd9bcedf0,"com.stencyl.Engine.stopShakingScreen","com/stencyl/Engine.hx",3084,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3098_cameraFollow,"com.stencyl.Engine","cameraFollow",0x3fcf66d3,"com.stencyl.Engine.cameraFollow","com/stencyl/Engine.hx",3098,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3106_moveCamera,"com.stencyl.Engine","moveCamera",0x94a3f033,"com.stencyl.Engine.moveCamera","com/stencyl/Engine.hx",3106,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3131_setZoom,"com.stencyl.Engine","setZoom",0x66c68018,"com.stencyl.Engine.setZoom","com/stencyl/Engine.hx",3131,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3167_pause,"com.stencyl.Engine","pause",0x37d6cc79,"com.stencyl.Engine.pause","com/stencyl/Engine.hx",3167,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3192_unpause,"com.stencyl.Engine","unpause",0x0a326a40,"com.stencyl.Engine.unpause","com/stencyl/Engine.hx",3192,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3213_isPaused,"com.stencyl.Engine","isPaused",0x380cfa95,"com.stencyl.Engine.isPaused","com/stencyl/Engine.hx",3213,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3248_draw,"com.stencyl.Engine","draw",0x276f97e1,"com.stencyl.Engine.draw","com/stencyl/Engine.hx",3248,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3329_getValue,"com.stencyl.Engine","getValue",0x81aead58,"com.stencyl.Engine.getValue","com/stencyl/Engine.hx",3329,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3334_setValue,"com.stencyl.Engine","setValue",0x300c06cc,"com.stencyl.Engine.setValue","com/stencyl/Engine.hx",3334,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3339_say,"com.stencyl.Engine","say",0x98e716ee,"com.stencyl.Engine.say","com/stencyl/Engine.hx",3339,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3344_shout,"com.stencyl.Engine","shout",0xf6a67c9c,"com.stencyl.Engine.shout","com/stencyl/Engine.hx",3344,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3353_getActor,"com.stencyl.Engine","getActor",0x6b9cf8dc,"com.stencyl.Engine.getActor","com/stencyl/Engine.hx",3353,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3357_getActorsOfType,"com.stencyl.Engine","getActorsOfType",0xbce33ee8,"com.stencyl.Engine.getActorsOfType","com/stencyl/Engine.hx",3357,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3379_getRecycledActorsOfType,"com.stencyl.Engine","getRecycledActorsOfType",0xa048d279,"com.stencyl.Engine.getRecycledActorsOfType","com/stencyl/Engine.hx",3379,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3390_getLayer,"com.stencyl.Engine","getLayer",0xbfb6afb8,"com.stencyl.Engine.getLayer","com/stencyl/Engine.hx",3390,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3397_getLayerById,"com.stencyl.Engine","getLayerById",0x0ff1116a,"com.stencyl.Engine.getLayerById","com/stencyl/Engine.hx",3397,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3416_getLayerByName,"com.stencyl.Engine","getLayerByName",0xbeb3e99a,"com.stencyl.Engine.getLayerByName","com/stencyl/Engine.hx",3416,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3431_getLayerByOrder,"com.stencyl.Engine","getLayerByOrder",0xbd54de5f,"com.stencyl.Engine.getLayerByOrder","com/stencyl/Engine.hx",3431,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3445_sendToBack,"com.stencyl.Engine","sendToBack",0xa5099c47,"com.stencyl.Engine.sendToBack","com/stencyl/Engine.hx",3445,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3452_sendBackward,"com.stencyl.Engine","sendBackward",0xe51fbe28,"com.stencyl.Engine.sendBackward","com/stencyl/Engine.hx",3452,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3467_bringToFront,"com.stencyl.Engine","bringToFront",0x31938b19,"com.stencyl.Engine.bringToFront","com/stencyl/Engine.hx",3467,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3474_bringForward,"com.stencyl.Engine","bringForward",0x444c07b0,"com.stencyl.Engine.bringForward","com/stencyl/Engine.hx",3474,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3490_getNumberOfActorsWithinLayer,"com.stencyl.Engine","getNumberOfActorsWithinLayer",0xfe5fde2f,"com.stencyl.Engine.getNumberOfActorsWithinLayer","com/stencyl/Engine.hx",3490,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3502_getNumberOfLayers,"com.stencyl.Engine","getNumberOfLayers",0x08ee671b,"com.stencyl.Engine.getNumberOfLayers","com/stencyl/Engine.hx",3502,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3507_getOrderOfLayer,"com.stencyl.Engine","getOrderOfLayer",0x09ab2f45,"com.stencyl.Engine.getOrderOfLayer","com/stencyl/Engine.hx",3507,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3511_moveLayerToOrder,"com.stencyl.Engine","moveLayerToOrder",0xf98b7750,"com.stencyl.Engine.moveLayerToOrder","com/stencyl/Engine.hx",3511,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3526_getNextLayerID,"com.stencyl.Engine","getNextLayerID",0x90bf2460,"com.stencyl.Engine.getNextLayerID","com/stencyl/Engine.hx",3526,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3536_insertLayer,"com.stencyl.Engine","insertLayer",0x7695d99b,"com.stencyl.Engine.insertLayer","com/stencyl/Engine.hx",3536,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3550_removeLayer,"com.stencyl.Engine","removeLayer",0x2d14d8b0,"com.stencyl.Engine.removeLayer","com/stencyl/Engine.hx",3550,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3564_refreshLayers,"com.stencyl.Engine","refreshLayers",0x7a706a40,"com.stencyl.Engine.refreshLayers","com/stencyl/Engine.hx",3564,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3601_getPhysicalWidth,"com.stencyl.Engine","getPhysicalWidth",0x73143956,"com.stencyl.Engine.getPhysicalWidth","com/stencyl/Engine.hx",3601,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3606_getPhysicalHeight,"com.stencyl.Engine","getPhysicalHeight",0xf4ed6a97,"com.stencyl.Engine.getPhysicalHeight","com/stencyl/Engine.hx",3606,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3641_enableGlobalSleeping,"com.stencyl.Engine","enableGlobalSleeping",0x8922186e,"com.stencyl.Engine.enableGlobalSleeping","com/stencyl/Engine.hx",3641,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3646_disableGlobalSleeping,"com.stencyl.Engine","disableGlobalSleeping",0xcbe5d039,"com.stencyl.Engine.disableGlobalSleeping","com/stencyl/Engine.hx",3646,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3654_getGroup,"com.stencyl.Engine","getGroup",0xe9eae126,"com.stencyl.Engine.getGroup","com/stencyl/Engine.hx",3654,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3664_getGroupByName,"com.stencyl.Engine","getGroupByName",0x01dbe188,"com.stencyl.Engine.getGroupByName","com/stencyl/Engine.hx",3664,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3680_nextJointID,"com.stencyl.Engine","nextJointID",0xed0ad0b5,"com.stencyl.Engine.nextJointID","com/stencyl/Engine.hx",3680,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3697_addJoint,"com.stencyl.Engine","addJoint",0xbba47dc6,"com.stencyl.Engine.addJoint","com/stencyl/Engine.hx",3697,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3705_getJoint,"com.stencyl.Engine","getJoint",0xa21e6731,"com.stencyl.Engine.getJoint","com/stencyl/Engine.hx",3705,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3709_destroyJoint,"com.stencyl.Engine","destroyJoint",0xc17242cd,"com.stencyl.Engine.destroyJoint","com/stencyl/Engine.hx",3709,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3725_createStickJoint,"com.stencyl.Engine","createStickJoint",0xf7282f53,"com.stencyl.Engine.createStickJoint","com/stencyl/Engine.hx",3725,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3775_createCustomStickJoint,"com.stencyl.Engine","createCustomStickJoint",0x8a2e8324,"com.stencyl.Engine.createCustomStickJoint","com/stencyl/Engine.hx",3775,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3812_createHingeJoint,"com.stencyl.Engine","createHingeJoint",0x01c37118,"com.stencyl.Engine.createHingeJoint","com/stencyl/Engine.hx",3812,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3873_createSlidingJoint,"com.stencyl.Engine","createSlidingJoint",0x5c092775,"com.stencyl.Engine.createSlidingJoint","com/stencyl/Engine.hx",3873,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3942_createRegion,"com.stencyl.Engine","createRegion",0xa02c11ed,"com.stencyl.Engine.createRegion","com/stencyl/Engine.hx",3942,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3958_createBoxRegion,"com.stencyl.Engine","createBoxRegion",0x73e35e06,"com.stencyl.Engine.createBoxRegion","com/stencyl/Engine.hx",3958,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3978_createCircularRegion,"com.stencyl.Engine","createCircularRegion",0xbc29deac,"com.stencyl.Engine.createCircularRegion","com/stencyl/Engine.hx",3978,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3996_addRegion,"com.stencyl.Engine","addRegion",0xe3cc68f8,"com.stencyl.Engine.addRegion","com/stencyl/Engine.hx",3996,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4008_removeRegion,"com.stencyl.Engine","removeRegion",0xed046d35,"com.stencyl.Engine.removeRegion","com/stencyl/Engine.hx",4008,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4021_getRegion,"com.stencyl.Engine","getRegion",0xa7febd2d,"com.stencyl.Engine.getRegion","com/stencyl/Engine.hx",4021,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4026_getRegions,"com.stencyl.Engine","getRegions",0x56e6caa6,"com.stencyl.Engine.getRegions","com/stencyl/Engine.hx",4026,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4030_nextRegionID,"com.stencyl.Engine","nextRegionID",0xf53f22bf,"com.stencyl.Engine.nextRegionID","com/stencyl/Engine.hx",4030,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4048_isInRegion,"com.stencyl.Engine","isInRegion",0x90a34c60,"com.stencyl.Engine.isInRegion","com/stencyl/Engine.hx",4048,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4065_createTerrainRegion,"com.stencyl.Engine","createTerrainRegion",0x8e73c6b0,"com.stencyl.Engine.createTerrainRegion","com/stencyl/Engine.hx",4065,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4080_createBoxTerrainRegion,"com.stencyl.Engine","createBoxTerrainRegion",0x3f6b1fb7,"com.stencyl.Engine.createBoxTerrainRegion","com/stencyl/Engine.hx",4080,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4091_createCircularTerrainRegion,"com.stencyl.Engine","createCircularTerrainRegion",0x7baa9fd1,"com.stencyl.Engine.createCircularTerrainRegion","com/stencyl/Engine.hx",4091,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4101_addTerrainRegion,"com.stencyl.Engine","addTerrainRegion",0x98c73705,"com.stencyl.Engine.addTerrainRegion","com/stencyl/Engine.hx",4101,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4108_removeTerrainRegion,"com.stencyl.Engine","removeTerrainRegion",0x115ce468,"com.stencyl.Engine.removeTerrainRegion","com/stencyl/Engine.hx",4108,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4116_getTerrainRegion,"com.stencyl.Engine","getTerrainRegion",0x03b90370,"com.stencyl.Engine.getTerrainRegion","com/stencyl/Engine.hx",4116,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4121_getTerrainRegions,"com.stencyl.Engine","getTerrainRegions",0x3e29ff03,"com.stencyl.Engine.getTerrainRegions","com/stencyl/Engine.hx",4121,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4125_nextTerrainRegionID,"com.stencyl.Engine","nextTerrainRegionID",0xbeeb4bb4,"com.stencyl.Engine.nextTerrainRegionID","com/stencyl/Engine.hx",4125,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4143_setGameAttribute,"com.stencyl.Engine","setGameAttribute",0xa6562825,"com.stencyl.Engine.setGameAttribute","com/stencyl/Engine.hx",4143,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4148_getGameAttribute,"com.stencyl.Engine","getGameAttribute",0x50143ab1,"com.stencyl.Engine.getGameAttribute","com/stencyl/Engine.hx",4148,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4156_setOffscreenTolerance,"com.stencyl.Engine","setOffscreenTolerance",0xeb687137,"com.stencyl.Engine.setOffscreenTolerance","com/stencyl/Engine.hx",4156,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4170_setScrollFactor,"com.stencyl.Engine","setScrollFactor",0xecf9d6c1,"com.stencyl.Engine.setScrollFactor","com/stencyl/Engine.hx",4170,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4174_setLayerScrollFactor,"com.stencyl.Engine","setLayerScrollFactor",0x01755408,"com.stencyl.Engine.setLayerScrollFactor","com/stencyl/Engine.hx",4174,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_401_resetStatics,"com.stencyl.Engine","resetStatics",0x258d92d3,"com.stencyl.Engine.resetStatics","com/stencyl/Engine.hx",401,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_1166_initBehaviors,"com.stencyl.Engine","initBehaviors",0xd43062f4,"com.stencyl.Engine.initBehaviors","com/stencyl/Engine.hx",1166,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3610_toPhysicalUnits,"com.stencyl.Engine","toPhysicalUnits",0x17e7f0a0,"com.stencyl.Engine.toPhysicalUnits","com/stencyl/Engine.hx",3610,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3617_toPixelUnits,"com.stencyl.Engine","toPixelUnits",0x64feef41,"com.stencyl.Engine.toPixelUnits","com/stencyl/Engine.hx",3617,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3624_vToPhysicalUnits,"com.stencyl.Engine","vToPhysicalUnits",0x495318e4,"com.stencyl.Engine.vToPhysicalUnits","com/stencyl/Engine.hx",3624,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_3632_vToPixelUnits,"com.stencyl.Engine","vToPixelUnits",0xfa05b47d,"com.stencyl.Engine.vToPixelUnits","com/stencyl/Engine.hx",3632,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4183_invokeListeners,"com.stencyl.Engine","invokeListeners",0x4c96362a,"com.stencyl.Engine.invokeListeners","com/stencyl/Engine.hx",4183,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4210_invokeListeners2,"com.stencyl.Engine","invokeListeners2",0xb6d92ec8,"com.stencyl.Engine.invokeListeners2","com/stencyl/Engine.hx",4210,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4237_invokeListeners3,"com.stencyl.Engine","invokeListeners3",0xb6d92ec9,"com.stencyl.Engine.invokeListeners3","com/stencyl/Engine.hx",4237,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4264_invokeListeners4,"com.stencyl.Engine","invokeListeners4",0xb6d92eca,"com.stencyl.Engine.invokeListeners4","com/stencyl/Engine.hx",4264,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4291_invokeListeners5,"com.stencyl.Engine","invokeListeners5",0xb6d92ecb,"com.stencyl.Engine.invokeListeners5","com/stencyl/Engine.hx",4291,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_4318_invokeListeners6,"com.stencyl.Engine","invokeListeners6",0xb6d92ecc,"com.stencyl.Engine.invokeListeners6","com/stencyl/Engine.hx",4318,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_106_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",106,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_112_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",112,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_114_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",114,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_115_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",115,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_121_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",121,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_122_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",122,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_124_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",124,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_125_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",125,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_127_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",127,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_128_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",128,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_129_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",129,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_130_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",130,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_131_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",131,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_132_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",132,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_133_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",133,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_134_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",134,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_135_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",135,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_137_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",137,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_139_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",139,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_141_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",141,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_163_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",163,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_164_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",164,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_165_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",165,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_167_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",167,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_187_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",187,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_188_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",188,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_190_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",190,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_191_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",191,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_192_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",192,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_193_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",193,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_332_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",332,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_333_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",333,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_335_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",335,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_336_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",336,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_337_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",337,0x1bb08c6b)
HX_LOCAL_STACK_FRAME(_hx_pos_911bbe4b8b0f4db8_347_boot,"com.stencyl.Engine","boot",0x261af00f,"com.stencyl.Engine.boot","com/stencyl/Engine.hx",347,0x1bb08c6b)
namespace com{
namespace stencyl{

void Engine_obj::__construct( ::Universal root){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_106_new)
HXLINE( 513)		this->ignoreResize = false;
HXLINE( 512)		this->isFullScreen = false;
HXLINE( 361)		this->keyPollOccurred = false;
HXLINE( 229)		this->sceneInitialized = false;
HXLINE( 174)		this->isHUDZoomable = false;
HXLINE( 173)		this->zoomMultiplier = ((Float)1);
HXLINE( 689)		::com::stencyl::graphics::GLUtil_obj::initialize();
HXLINE( 691)		if (::com::stencyl::graphics::shaders::PostProcess_obj::get_isSupported()) {
HXLINE( 693)			this->shaderLayer =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
            		}
HXLINE( 697)		root->mouseChildren = false;
HXLINE( 698)		root->mouseEnabled = false;
HXLINE( 701)		if (::com::stencyl::Config_obj::debugDraw) {
HXLINE( 703)			::com::stencyl::Engine_obj::DEBUG_DRAW = true;
            		}
HXLINE( 706)		::com::stencyl::Engine_obj::engine = hx::ObjectPtr<OBJ_>(this);
HXLINE( 707)		::com::stencyl::behavior::Script_obj::engine = hx::ObjectPtr<OBJ_>(this);
HXLINE( 708)		this->root = root;
HXLINE( 710)		this->isFullScreen = ::com::stencyl::Config_obj::startInFullScreen;
HXLINE( 711)		::com::stencyl::Engine_obj::screenScaleX = (::com::stencyl::Engine_obj::unzoomedScaleX = root->get_scaleX());
HXLINE( 712)		::com::stencyl::Engine_obj::screenScaleY = (::com::stencyl::Engine_obj::unzoomedScaleY = root->get_scaleY());
HXLINE( 713)		::com::stencyl::Engine_obj::screenOffsetX = ::Std_obj::_hx_int(root->get_x());
HXLINE( 714)		::com::stencyl::Engine_obj::screenOffsetY = ::Std_obj::_hx_int(root->get_y());
HXLINE( 716)		::com::stencyl::Engine_obj::NO_PHYSICS = (::com::stencyl::Config_obj::physicsMode == (int)1);
HXLINE( 718)		::com::stencyl::Engine_obj::stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->onUpdate_dyn(),null(),null(),null());
HXLINE( 719)		::com::stencyl::Engine_obj::stage->addEventListener(HX_("deactivate",34,5c,01,3c),this->onFocusLost_dyn(),null(),null(),null());
HXLINE( 720)		::com::stencyl::Engine_obj::stage->addEventListener(HX_("activate",b3,1b,ac,e5),this->onFocus_dyn(),null(),null(),null());
HXLINE( 722)		::com::stencyl::Engine_obj::stage->addEventListener(HX_("resize",f4,59,7b,08),this->onWindowResize_dyn(),null(),null(),null());
HXLINE( 723)		::com::stencyl::Engine_obj::stage->window->onRestore->add(this->onWindowRestore_dyn(),null(),null());
HXLINE( 724)		::com::stencyl::Engine_obj::stage->window->onMaximize->add(this->onWindowMaximize_dyn(),null(),null());
HXLINE( 725)		::com::stencyl::Engine_obj::stage->window->onFullscreen->add(this->onWindowFullScreen_dyn(),null(),null());
HXLINE( 733)		this->begin(::com::stencyl::Config_obj::initSceneID);
            	}

Dynamic Engine_obj::__CreateEmpty() { return new Engine_obj; }

void *Engine_obj::_hx_vtable = 0;

Dynamic Engine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Engine_obj > _hx_result = new Engine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Engine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03762cd1;
}

void Engine_obj::onKeyDown( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_518_onKeyDown)
HXDLIN( 518)		bool _hx_tmp;
HXDLIN( 518)		if (this->isFullScreen) {
HXDLIN( 518)			_hx_tmp = (e->keyCode == (int)27);
            		}
            		else {
HXDLIN( 518)			_hx_tmp = false;
            		}
HXDLIN( 518)		if (_hx_tmp) {
HXLINE( 520)			this->setFullScreen(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,onKeyDown,(void))

void Engine_obj::onWindowResize( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_527_onWindowResize)
HXDLIN( 527)		bool _hx_tmp;
HXDLIN( 527)		bool _hx_tmp1;
HXDLIN( 527)		bool _hx_tmp2;
HXDLIN( 527)		if (this->isFullScreen) {
HXDLIN( 527)			_hx_tmp2 = !(::com::stencyl::Engine_obj::stage->window->_hx___fullscreen);
            		}
            		else {
HXDLIN( 527)			_hx_tmp2 = false;
            		}
HXDLIN( 527)		if (_hx_tmp2) {
HXDLIN( 527)			_hx_tmp1 = !(::com::stencyl::Engine_obj::stage->window->_hx___minimized);
            		}
            		else {
HXDLIN( 527)			_hx_tmp1 = false;
            		}
HXDLIN( 527)		if (_hx_tmp1) {
HXDLIN( 527)			_hx_tmp = !(this->ignoreResize);
            		}
            		else {
HXDLIN( 527)			_hx_tmp = false;
            		}
HXDLIN( 527)		if (_hx_tmp) {
HXLINE( 529)			this->setFullScreen(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,onWindowResize,(void))

void Engine_obj::onWindowRestore(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_537_onWindowRestore)
HXDLIN( 537)		bool _hx_tmp;
HXDLIN( 537)		if (this->isFullScreen) {
HXDLIN( 537)			_hx_tmp = !(::com::stencyl::Engine_obj::stage->window->_hx___fullscreen);
            		}
            		else {
HXDLIN( 537)			_hx_tmp = false;
            		}
HXDLIN( 537)		if (_hx_tmp) {
HXLINE( 539)			::com::stencyl::Engine_obj::stage->window->_hx___fullscreen = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,onWindowRestore,(void))

void Engine_obj::onWindowMaximize(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_546_onWindowMaximize)
HXDLIN( 546)		bool _hx_tmp;
HXDLIN( 546)		if (this->isFullScreen) {
HXDLIN( 546)			_hx_tmp = !(::com::stencyl::Engine_obj::stage->window->_hx___fullscreen);
            		}
            		else {
HXDLIN( 546)			_hx_tmp = false;
            		}
HXDLIN( 546)		if (_hx_tmp) {
HXLINE( 548)			::com::stencyl::Engine_obj::stage->window->_hx___fullscreen = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,onWindowMaximize,(void))

void Engine_obj::onWindowFullScreen(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_554_onWindowFullScreen)
HXDLIN( 554)		if (!(this->isFullScreen)) {
HXLINE( 556)			this->setFullScreen(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,onWindowFullScreen,(void))

bool Engine_obj::isInFullScreen(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_563_isInFullScreen)
HXDLIN( 563)		return hx::IsEq( ::openfl::Lib_obj::get_current()->stage->get_displayState(),(int)1 );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,isInFullScreen,return )

void Engine_obj::setFullScreen(bool value){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_567_setFullScreen)
HXLINE( 568)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 568)		::String _hx_tmp1 = (HX_("Set fullScreen: ",1f,41,12,1f) + ::Std_obj::string(value));
HXDLIN( 568)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),568,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("setFullScreen",9d,ec,c0,cf)));
HXLINE( 569)		if ((this->isFullScreen != value)) {
HXLINE( 571)			this->ignoreResize = true;
HXLINE( 572)			this->isFullScreen = value;
HXLINE( 573)			this->reloadScreen();
HXLINE( 574)			{
HXLINE( 574)				::cpp::VirtualArray listeners = this->fullscreenListeners;
HXDLIN( 574)				int r = (int)0;
HXDLIN( 574)				while((r < listeners->get_length())){
HXLINE( 574)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE( 574)						 ::Dynamic f = listeners->__get(r);
HXDLIN( 574)						f(listeners);
HXDLIN( 574)						if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 574)							r = (r - (int)1);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String e = _hx_e;
HXLINE( 574)							::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXDLIN( 574)					r = (r + (int)1);
            				}
            			}
HXLINE( 575)			this->ignoreResize = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,setFullScreen,(void))

void Engine_obj::toggleFullScreen(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_581_toggleFullScreen)
HXDLIN( 581)		this->setFullScreen(!(this->isFullScreen));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,toggleFullScreen,(void))

void Engine_obj::reloadScreen(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_585_reloadScreen)
HXLINE( 586)		::String oldImgBase = ::com::stencyl::Engine_obj::IMG_BASE;
HXLINE( 587)		Float oldScale = ::com::stencyl::Engine_obj::SCALE;
HXLINE( 588)		int oldScreenWidth = ::com::stencyl::Engine_obj::screenWidth;
HXLINE( 589)		int oldScreenHeight = ::com::stencyl::Engine_obj::screenHeight;
HXLINE( 591)		this->root->initScreen(this->isFullScreen);
HXLINE( 593)		::com::stencyl::Engine_obj::screenWidth = ::Std_obj::_hx_int(::Universal_obj::logicalWidth);
HXLINE( 594)		::com::stencyl::Engine_obj::screenWidthHalf = ::Std_obj::_hx_int(((Float)::com::stencyl::Engine_obj::screenWidth / (Float)(int)2));
HXLINE( 595)		::com::stencyl::Engine_obj::screenHeight = ::Std_obj::_hx_int(::Universal_obj::logicalHeight);
HXLINE( 596)		::com::stencyl::Engine_obj::screenHeightHalf = ::Std_obj::_hx_int(((Float)::com::stencyl::Engine_obj::screenHeight / (Float)(int)2));
HXLINE( 597)		this->setColorBackground(this->scene->colorBackground);
HXLINE( 599)		bool screensizeUpdated;
HXDLIN( 599)		if ((::com::stencyl::Engine_obj::screenWidth == oldScreenWidth)) {
HXLINE( 599)			screensizeUpdated = (::com::stencyl::Engine_obj::screenHeight != oldScreenHeight);
            		}
            		else {
HXLINE( 599)			screensizeUpdated = true;
            		}
HXLINE( 600)		bool gameScaleUpdated = (oldScale != ::com::stencyl::Engine_obj::SCALE);
HXLINE( 602)		if ((oldImgBase != ::com::stencyl::Engine_obj::IMG_BASE)) {
HXLINE( 604)			::com::stencyl::Data_obj::get()->reloadScaledResources();
            		}
HXLINE( 606)		if ((oldScale != ::com::stencyl::Engine_obj::SCALE)) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::openfl::display::DisplayObject obj){
            				HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_615_reloadScreen)
HXLINE( 615)				if (::Std_obj::is(obj,hx::ClassOf< ::com::stencyl::graphics::EngineScaleUpdateListener >())) {
HXLINE( 617)					::com::stencyl::graphics::EngineScaleUpdateListener_obj::updateScale(obj);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 608)			if (hx::IsNotNull( ::com::stencyl::Engine_obj::debugDrawer )) {
HXLINE( 609)				 ::box2D::dynamics::B2DebugDraw _hx_tmp = ::com::stencyl::Engine_obj::debugDrawer;
HXDLIN( 609)				_hx_tmp->setDrawScale(((int)10 * ::com::stencyl::Engine_obj::SCALE));
            			}
HXLINE( 611)			this->g->scaleX = (this->g->scaleY = ::com::stencyl::Engine_obj::SCALE);
HXLINE( 613)			::com::stencyl::utils::Utils_obj::applyToAllChildren(this->root, ::Dynamic(new _hx_Closure_0()));
HXLINE( 622)			{
HXLINE( 622)				::Dynamic a = this->allActors->iterator();
HXDLIN( 622)				while(::de::polygonal::ds::Itr_obj::hasNext(a)){
HXLINE( 622)					 ::com::stencyl::models::Actor a1 = ( ( ::com::stencyl::models::Actor)(::de::polygonal::ds::Itr_obj::next(a)) );
HXLINE( 624)					bool _hx_tmp1;
HXDLIN( 624)					bool _hx_tmp2;
HXDLIN( 624)					if (hx::IsNotNull( a1 )) {
HXLINE( 624)						_hx_tmp2 = !(a1->dead);
            					}
            					else {
HXLINE( 624)						_hx_tmp2 = false;
            					}
HXDLIN( 624)					if (_hx_tmp2) {
HXLINE( 624)						_hx_tmp1 = !(a1->recycled);
            					}
            					else {
HXLINE( 624)						_hx_tmp1 = false;
            					}
HXDLIN( 624)					if (_hx_tmp1) {
HXLINE( 626)						a1->updateMatrix = true;
            					}
            				}
            			}
HXLINE( 630)			{
HXLINE( 630)				 ::Dynamic actors = this->recycledActorsOfType->iterator();
HXDLIN( 630)				while(( (bool)(actors->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 630)					::Array< ::Dynamic> actors1 = ( (::Array< ::Dynamic>)(actors->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 632)					int _g = (int)0;
HXDLIN( 632)					while((_g < actors1->length)){
HXLINE( 632)						 ::com::stencyl::models::Actor a2 = actors1->__get(_g).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN( 632)						_g = (_g + (int)1);
HXLINE( 634)						a2->currAnimation->framesUpdated();
HXLINE( 635)						a2->updateMatrix = true;
            					}
            				}
            			}
HXLINE( 639)			{
HXLINE( 639)				 ::com::stencyl::graphics::G _this = this->g;
HXDLIN( 639)				_this->font = _this->defaultFont;
HXDLIN( 639)				if ((_this->font->fontScale != ::com::stencyl::Engine_obj::SCALE)) {
HXLINE( 639)					_this->font->fontScale = ::com::stencyl::Engine_obj::SCALE;
            				}
            			}
HXLINE( 641)			this->moveCamera(this->camera->realX,this->camera->realY);
            		}
HXLINE( 644)		::com::stencyl::Engine_obj::unzoomedScaleX = (::com::stencyl::Engine_obj::screenScaleX = this->root->get_scaleX());
HXLINE( 645)		::com::stencyl::Engine_obj::unzoomedScaleY = (::com::stencyl::Engine_obj::screenScaleY = this->root->get_scaleY());
HXLINE( 646)		::com::stencyl::Engine_obj::screenOffsetX = ::Std_obj::_hx_int(this->root->get_x());
HXLINE( 647)		::com::stencyl::Engine_obj::screenOffsetY = ::Std_obj::_hx_int(this->root->get_y());
HXLINE( 649)		if (hx::IsNotNull( this->stats )) {
HXLINE( 651)			 ::com::nmefermmmtools::debug::Stats _hx_tmp3 = this->stats;
HXDLIN( 651)			int _hx_tmp4 = ::com::stencyl::Engine_obj::stage->stageWidth;
HXDLIN( 651)			_hx_tmp3->set_x((_hx_tmp4 - this->stats->get_width()));
HXLINE( 652)			this->stats->set_y((int)0);
            		}
HXLINE( 656)		this->resetShaders();
HXLINE( 659)		if (gameScaleUpdated) {
HXLINE( 660)			::cpp::VirtualArray listeners = this->gameScaleListeners;
HXDLIN( 660)			int r = (int)0;
HXDLIN( 660)			while((r < listeners->get_length())){
HXLINE( 660)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 660)					 ::Dynamic f = listeners->__get(r);
HXDLIN( 660)					f(listeners);
HXDLIN( 660)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE( 660)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE( 660)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 660)				r = (r + (int)1);
            			}
            		}
HXLINE( 661)		if (screensizeUpdated) {
HXLINE( 662)			::cpp::VirtualArray listeners1 = this->screenSizeListeners;
HXDLIN( 662)			int r1 = (int)0;
HXDLIN( 662)			while((r1 < listeners1->get_length())){
HXLINE( 662)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE( 662)					 ::Dynamic f1 = listeners1->__get(r1);
HXDLIN( 662)					f1(listeners1);
HXDLIN( 662)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f1) == (int)-1)) {
HXLINE( 662)						r1 = (r1 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE( 662)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN( 662)				r1 = (r1 + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,reloadScreen,(void))

void Engine_obj::addShader( ::com::stencyl::graphics::shaders::PostProcess pp){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_748_addShader)
HXDLIN( 748)		if (::com::stencyl::graphics::shaders::PostProcess_obj::get_isSupported()) {
HXLINE( 750)			 ::com::stencyl::graphics::shaders::BasicShader s = pp->basicShader;
HXLINE( 753)			if (hx::IsNotNull( this->shaders )) {
HXLINE( 755)				::haxe::Log_obj::trace(HX_("Enabling a shader over an existing shader. Clearing existing shader first.",06,1e,2a,fa),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),755,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("addShader",26,f4,44,d5)));
HXLINE( 756)				this->clearShaders();
            			}
HXLINE( 759)			this->shaders = ::Array_obj< ::Dynamic>::__new(1)->init(0,s->model);
HXLINE( 761)			s = s->multipassParent;
HXLINE( 762)			while(hx::IsNotNull( s )){
HXLINE( 764)				this->shaders->insert((int)0,s->model);
HXLINE( 765)				s = s->multipassParent;
            			}
HXLINE( 768)			{
HXLINE( 768)				int _g = (int)0;
HXDLIN( 768)				::Array< ::Dynamic> _g1 = this->shaders;
HXDLIN( 768)				while((_g < _g1->length)){
HXLINE( 768)					 ::com::stencyl::graphics::shaders::PostProcess postProcess = _g1->__get(_g).StaticCast<  ::com::stencyl::graphics::shaders::PostProcess >();
HXDLIN( 768)					_g = (_g + (int)1);
HXLINE( 769)					this->shaderLayer->addChild(postProcess);
            				}
            			}
            		}
            		else {
HXLINE( 774)			::haxe::Log_obj::trace(HX_("Shaders are not supported on this platform.",5d,3f,67,ef),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),774,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("addShader",26,f4,44,d5)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,addShader,(void))

void Engine_obj::clearShaders(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_779_clearShaders)
HXLINE( 780)		::com::stencyl::utils::Utils_obj::removeAllChildren(this->shaderLayer);
HXLINE( 781)		::com::stencyl::Engine_obj::stage->context3D->setRenderToBackBuffer();
HXLINE( 782)		this->shaders = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,clearShaders,(void))

void Engine_obj::toggleShadersForHUD(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_787_toggleShadersForHUD)
HXDLIN( 787)		bool _hx_tmp;
HXDLIN( 787)		bool _hx_tmp1;
HXDLIN( 787)		if (hx::IsNotNull( this->shaderLayer )) {
HXDLIN( 787)			_hx_tmp1 = hx::IsNotNull( this->hudLayer );
            		}
            		else {
HXDLIN( 787)			_hx_tmp1 = false;
            		}
HXDLIN( 787)		if (_hx_tmp1) {
HXDLIN( 787)			_hx_tmp = hx::IsNotNull( this->root );
            		}
            		else {
HXDLIN( 787)			_hx_tmp = false;
            		}
HXDLIN( 787)		if (_hx_tmp) {
HXLINE( 789)			this->root->swapChildren(this->shaderLayer,this->hudLayer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,toggleShadersForHUD,(void))

void Engine_obj::resetShaders(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_795_resetShaders)
HXDLIN( 795)		if (hx::IsNotNull( this->shaders )) {
HXLINE( 797)			int _g = (int)0;
HXDLIN( 797)			::Array< ::Dynamic> _g1 = this->shaders;
HXDLIN( 797)			while((_g < _g1->length)){
HXLINE( 797)				 ::com::stencyl::graphics::shaders::PostProcess shader = _g1->__get(_g).StaticCast<  ::com::stencyl::graphics::shaders::PostProcess >();
HXDLIN( 797)				_g = (_g + (int)1);
HXLINE( 799)				shader->rebuild();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,resetShaders,(void))

void Engine_obj::begin(int initSceneID){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_806_begin)
HXLINE( 807)		this->loadedAtlases =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 808)		this->atlasesToLoad =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 809)		this->atlasesToUnload =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 811)		::com::stencyl::Input_obj::enable();
HXLINE( 812)		::com::stencyl::Input_obj::define(HX_("iSHIFT",59,07,8a,f5),::Array_obj< int >::fromData( _hx_array_data_b46681b1_28,1));
HXLINE( 813)		::com::stencyl::Input_obj::define(HX_("iCTRL",94,39,9c,a1),::Array_obj< int >::fromData( _hx_array_data_b46681b1_29,1));
HXLINE( 815)		::com::stencyl::Engine_obj::landscape = ::com::stencyl::Config_obj::landscape;
HXLINE( 816)		Float stageWidth = ::Universal_obj::logicalWidth;
HXLINE( 817)		Float stageHeight = ::Universal_obj::logicalHeight;
HXLINE( 819)		::com::stencyl::Engine_obj::screenWidth = ::Std_obj::_hx_int(stageWidth);
HXLINE( 820)		::com::stencyl::Engine_obj::screenHeight = ::Std_obj::_hx_int(stageHeight);
HXLINE( 821)		::com::stencyl::Engine_obj::screenWidthHalf = ::Std_obj::_hx_int(((Float)stageWidth / (Float)(int)2));
HXLINE( 822)		::com::stencyl::Engine_obj::screenHeightHalf = ::Std_obj::_hx_int(((Float)stageHeight / (Float)(int)2));
HXLINE( 840)		::com::stencyl::Data_obj::get();
HXLINE( 841)		::com::stencyl::models::GameModel_obj::get()->loadScenes();
HXLINE( 845)		{
HXLINE( 845)			 ::Dynamic atlas = ::com::stencyl::models::GameModel_obj::get()->atlases->iterator();
HXDLIN( 845)			while(( (bool)(atlas->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 845)				 ::com::stencyl::models::Atlas atlas1 = ( ( ::com::stencyl::models::Atlas)(atlas->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 847)				if (atlas1->active) {
HXLINE( 848)					this->atlasesToLoad->set(atlas1->ID,atlas1->ID);
            				}
            			}
            		}
HXLINE( 853)		this->g =  ::com::stencyl::graphics::G_obj::__alloc( HX_CTX );
HXLINE( 857)		::com::stencyl::Engine_obj::started = true;
HXLINE( 858)		this->tileUpdated = false;
HXLINE( 862)		this->shakeTimer = (int)0;
HXLINE( 863)		this->shakeIntensity = ((Float)0.01);
HXLINE( 864)		this->isShaking = false;
HXLINE( 868)		this->leave = null();
HXLINE( 869)		this->enter = null();
HXLINE( 871)		::com::stencyl::Engine_obj::cameraX = (int)0;
HXLINE( 872)		::com::stencyl::Engine_obj::cameraY = (int)0;
HXLINE( 874)		this->acc = (int)0;
HXLINE( 875)		this->lastTime = ::openfl::Lib_obj::getTimer();
HXLINE( 878)		::com::stencyl::Engine_obj::sceneWidth = ::Std_obj::_hx_int(stageWidth);
HXLINE( 879)		::com::stencyl::Engine_obj::sceneHeight = ::Std_obj::_hx_int(stageHeight);
HXLINE( 882)		this->colorLayer =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE( 883)		this->root->addChild(this->colorLayer);
HXLINE( 885)		this->master =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 886)		this->root->addChild(this->master);
HXLINE( 888)		this->hudLayer =  ::com::stencyl::models::scene::Layer_obj::__alloc( HX_CTX ,(int)-1,HX_("__hud__",77,d8,ac,99),(int)-1,((Float)0.0),((Float)0.0),((Float)1.0),(int)10,null());
HXLINE( 889)		this->root->addChild(this->hudLayer);
HXLINE( 891)		this->transitionLayer =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 892)		this->root->addChild(this->transitionLayer);
HXLINE( 894)		this->debugLayer =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 895)		this->root->addChild(this->debugLayer);
HXLINE( 898)		if (::com::stencyl::graphics::shaders::PostProcess_obj::get_isSupported()) {
HXLINE( 900)			this->root->addChild(this->shaderLayer);
            		}
HXLINE( 904)		this->root->addChild(this->root->maskLayer);
HXLINE( 907)		this->actorsToCreateInNextScene = ::Array_obj< ::Dynamic>::__new();
HXLINE( 908)		this->gameAttributes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 911)		this->setStatsVisible(::com::stencyl::Config_obj::showConsole);
HXLINE( 921)		{
HXLINE( 921)			 ::Dynamic key = ::com::stencyl::models::GameModel_obj::get()->gameAttributes->keys();
HXDLIN( 921)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 921)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 923)				 ::Dynamic value = ::com::stencyl::models::GameModel_obj::get()->gameAttributes->get(key1);
HXDLIN( 923)				::haxe::IMap_obj::set(this->gameAttributes,key1,value);
            			}
            		}
HXLINE( 927)		this->channels = ::Array_obj< ::Dynamic>::__new();
HXLINE( 929)		{
HXLINE( 929)			int _g = (int)0;
HXDLIN( 929)			while((_g < (int)32)){
HXLINE( 929)				_g = (_g + (int)1);
HXDLIN( 929)				int index = (_g - (int)1);
HXLINE( 931)				::Array< ::Dynamic> _hx_tmp = this->channels;
HXDLIN( 931)				_hx_tmp->push( ::com::stencyl::models::SoundChannel_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),index));
            			}
            		}
HXLINE( 942)		this->sceneToEnter = initSceneID;
HXLINE( 944)		this->loadScene(initSceneID);
HXLINE( 945)		this->sceneInitialized = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,begin,(void))

void Engine_obj::setStatsVisible(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_949_setStatsVisible)
HXLINE( 950)		if ((value == hx::IsNotNull( this->stats ))) {
HXLINE( 951)			return;
            		}
HXLINE( 953)		if (value) {
HXLINE( 955)			this->stats =  ::com::nmefermmmtools::debug::Stats_obj::__alloc( HX_CTX ,null());
HXLINE( 956)			::com::stencyl::Engine_obj::stage->addChild(this->stats);
HXLINE( 957)			 ::com::nmefermmmtools::debug::Stats _hx_tmp = this->stats;
HXDLIN( 957)			int _hx_tmp1 = ::com::stencyl::Engine_obj::stage->stageWidth;
HXDLIN( 957)			_hx_tmp->set_x((_hx_tmp1 - this->stats->get_width()));
HXLINE( 958)			this->stats->set_y((int)0);
            		}
            		else {
HXLINE( 962)			::com::stencyl::Engine_obj::stage->removeChild(this->stats);
HXLINE( 963)			this->stats = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,setStatsVisible,(void))

void Engine_obj::loadScene(int sceneID){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_968_loadScene)
HXLINE( 969)		this->collisionPairs =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)32,null());
HXLINE( 973)		{
HXLINE( 973)			::com::stencyl::Engine_obj::paddingTop = (int)0;
HXDLIN( 973)			::com::stencyl::Engine_obj::paddingLeft = (int)0;
HXDLIN( 973)			::com::stencyl::Engine_obj::paddingBottom = (int)0;
HXDLIN( 973)			::com::stencyl::Engine_obj::paddingRight = (int)0;
            		}
HXLINE( 975)		this->tasks = ::Array_obj< ::Dynamic>::__new();
HXLINE( 977)		this->scene = ::com::stencyl::models::GameModel_obj::get()->scenes->get(sceneID).StaticCast<  ::com::stencyl::models::Scene >();
HXLINE( 979)		bool _hx_tmp;
HXDLIN( 979)		if ((sceneID != (int)-1)) {
HXLINE( 979)			_hx_tmp = hx::IsNull( this->scene );
            		}
            		else {
HXLINE( 979)			_hx_tmp = true;
            		}
HXDLIN( 979)		if (_hx_tmp) {
HXLINE( 981)			::Dynamic this1 = ::com::stencyl::models::GameModel_obj::get()->scenes;
HXDLIN( 981)			this->scene = ( ( ::haxe::ds::IntMap)(this1) )->get(::com::stencyl::Config_obj::initSceneID).StaticCast<  ::com::stencyl::models::Scene >();
HXLINE( 984)			if (hx::IsNull( this->scene )) {
HXLINE( 986)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 986)				_hx_tmp1((HX_("Could not load scene: ",44,12,35,bd) + sceneID),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),986,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("loadScene",46,25,09,94)));
HXLINE( 987)				::com::stencyl::Engine_obj::stage->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onUpdate_dyn(),null());
HXLINE( 988)				return;
            			}
            		}
HXLINE( 996)		this->scene->load();
HXLINE( 999)		{
HXLINE(1001)			 ::haxe::ds::IntMap desiredAtlasList =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1003)			if (this->scene->retainsAtlases) {
HXLINE(1007)				 ::Dynamic i = this->loadedAtlases->iterator();
HXDLIN(1007)				while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1007)					int i1 = ( (int)(i->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1008)					desiredAtlasList->set(i1,i1);
            				}
            			}
            			else {
HXLINE(1015)				{
HXLINE(1015)					 ::Dynamic i2 = this->loadedAtlases->iterator();
HXDLIN(1015)					while(( (bool)(i2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1015)						int i3 = ( (int)(i2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1017)						if (::com::stencyl::models::GameModel_obj::get()->atlases->get(i3).StaticCast<  ::com::stencyl::models::Atlas >()->allScenes) {
HXLINE(1018)							desiredAtlasList->set(i3,i3);
            						}
            					}
            				}
HXLINE(1020)				{
HXLINE(1020)					int _g = (int)0;
HXDLIN(1020)					::Array< int > _g1 = this->scene->atlases;
HXDLIN(1020)					while((_g < _g1->length)){
HXLINE(1020)						int i4 = _g1->__get(_g);
HXDLIN(1020)						_g = (_g + (int)1);
HXLINE(1021)						desiredAtlasList->set(i4,i4);
            					}
            				}
            			}
HXLINE(1025)			{
HXLINE(1025)				 ::Dynamic atlas = this->atlasesToLoad->iterator();
HXDLIN(1025)				while(( (bool)(atlas->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1025)					int atlas1 = ( (int)(atlas->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1026)					desiredAtlasList->set(atlas1,atlas1);
            				}
            			}
HXLINE(1027)			{
HXLINE(1027)				 ::Dynamic atlas2 = this->atlasesToUnload->iterator();
HXDLIN(1027)				while(( (bool)(atlas2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1027)					int atlas3 = ( (int)(atlas2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1028)					desiredAtlasList->remove(atlas3);
            				}
            			}
HXLINE(1030)			{
HXLINE(1030)				 ::Dynamic atlas4 = this->loadedAtlases->iterator();
HXDLIN(1030)				while(( (bool)(atlas4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1030)					int atlas5 = ( (int)(atlas4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1032)					if (!(desiredAtlasList->exists(atlas5))) {
HXLINE(1034)						::com::stencyl::Data_obj::get()->unloadAtlas(atlas5);
HXLINE(1035)						this->loadedAtlases->remove(atlas5);
            					}
            				}
            			}
HXLINE(1040)			__hxcpp_collect(true);
HXLINE(1043)			{
HXLINE(1043)				 ::Dynamic atlas6 = desiredAtlasList->iterator();
HXDLIN(1043)				while(( (bool)(atlas6->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1043)					int atlas7 = ( (int)(atlas6->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1045)					if (!(this->loadedAtlases->exists(atlas7))) {
HXLINE(1047)						::com::stencyl::Data_obj::get()->loadAtlas(atlas7);
HXLINE(1048)						this->loadedAtlases->set(atlas7,atlas7);
            					}
            				}
            			}
HXLINE(1052)			this->atlasesToLoad =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1053)			this->atlasesToUnload =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            		}
HXLINE(1057)		::com::stencyl::Engine_obj::sceneWidth = this->scene->sceneWidth;
HXLINE(1058)		::com::stencyl::Engine_obj::sceneHeight = this->scene->sceneHeight;
HXLINE(1060)		this->behaviors =  ::com::stencyl::behavior::BehaviorManager_obj::__alloc( HX_CTX );
HXLINE(1062)		this->groups =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1063)		this->reverseGroups =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1065)		{
HXLINE(1065)			int _g2 = (int)0;
HXDLIN(1065)			::Array< ::Dynamic> _g11 = ::com::stencyl::models::GameModel_obj::get()->groups;
HXDLIN(1065)			while((_g2 < _g11->length)){
HXLINE(1065)				 ::com::stencyl::models::GroupDef grp = _g11->__get(_g2).StaticCast<  ::com::stencyl::models::GroupDef >();
HXDLIN(1065)				_g2 = (_g2 + (int)1);
HXLINE(1067)				 ::com::stencyl::models::actor::Group g =  ::com::stencyl::models::actor::Group_obj::__alloc( HX_CTX ,grp->ID,grp->name);
HXLINE(1068)				this->groups->set(grp->ID,g);
HXLINE(1069)				this->reverseGroups->set(grp->name,g);
HXLINE(1070)				g->name = grp->name;
            			}
            		}
HXLINE(1074)		 ::com::stencyl::models::actor::Group regionGroup =  ::com::stencyl::models::actor::Group_obj::__alloc( HX_CTX ,(int)-2,HX_("Regions",df,3c,ed,47));
HXLINE(1075)		this->groups->set((int)-2,regionGroup);
HXLINE(1076)		this->reverseGroups->set(HX_("Regions",df,3c,ed,47),regionGroup);
HXLINE(1078)		this->disableCollisionList = ::Array_obj< ::Dynamic>::__new();
HXLINE(1079)		this->actorsOfType =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1080)		this->recycledActorsOfType =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1082)		this->regions =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)32,null());
HXLINE(1083)		this->regions->reuseIterator = true;
HXLINE(1085)		this->terrainRegions =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1086)		this->joints =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1088)		this->dynamicTiles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1089)		this->animatedTiles = ::Array_obj< ::Dynamic>::__new();
HXLINE(1090)		this->allActors =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)256,null());
HXLINE(1091)		this->allActors->reuseIterator = true;
HXLINE(1092)		this->nextID = (int)0;
HXLINE(1095)		this->whenKeyPressedListeners =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1096)		this->hasKeyPressedListeners = false;
HXLINE(1097)		this->whenAnyKeyPressedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1098)		this->whenAnyKeyReleasedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1099)		this->whenAnyGamepadPressedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1100)		this->whenAnyGamepadReleasedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1102)		this->whenTypeGroupCreatedListeners =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(1103)		this->whenTypeGroupDiesListeners =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(1104)		this->typeGroupPositionListeners =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1105)		this->collisionListeners =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1106)		this->soundListeners =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(1107)		this->channelListeners =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1108)		this->nativeListeners = ::Array_obj< ::Dynamic>::__new();
HXLINE(1110)		this->whenUpdatedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1111)		this->whenDrawingListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1112)		this->whenMousePressedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1113)		this->whenMouseReleasedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1114)		this->whenMouseMovedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1115)		this->whenMouseDraggedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1116)		this->whenPausedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1117)		this->whenSwipedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1118)		this->whenMTStartListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1119)		this->whenMTDragListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1120)		this->whenMTEndListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1121)		this->whenFocusChangedListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1123)		this->fullscreenListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1124)		this->screenSizeListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1125)		this->gameScaleListeners = ::cpp::VirtualArray_obj::__new();
HXLINE(1128)		if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(1130)			this->initPhysics();
HXLINE(1132)			this->gravityX = this->scene->gravityX;
HXLINE(1133)			this->gravityY = this->scene->gravityY;
            		}
            		else {
HXLINE(1138)			this->gravityX = this->scene->gravityX;
HXLINE(1139)			this->gravityY = this->scene->gravityY;
            		}
HXLINE(1142)		this->loadTerrain();
HXLINE(1143)		this->loadRegions();
HXLINE(1144)		this->loadTerrainRegions();
HXLINE(1145)		this->loadActors();
HXLINE(1146)		this->loadCamera();
HXLINE(1147)		this->loadJoints();
HXLINE(1149)		this->loadDeferredActors();
HXLINE(1150)		::com::stencyl::Engine_obj::initBehaviors(this->behaviors,this->scene->behaviorValues,hx::ObjectPtr<OBJ_>(this),hx::ObjectPtr<OBJ_>(this),true);
HXLINE(1151)		this->initActorScripts();
HXLINE(1154)		__hxcpp_collect(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,loadScene,(void))

void Engine_obj::initPhysics(){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1260_initPhysics)
HXLINE(1261)		 ::box2D::common::math::B2Vec2 gravity =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,this->scene->gravityX,this->scene->gravityY);
HXLINE(1262)		this->world =  ::box2D::dynamics::B2World_obj::__alloc( HX_CTX ,gravity,false);
HXLINE(1264)		::box2D::dynamics::B2World_obj::m_continuousPhysics = false;
HXLINE(1265)		::box2D::dynamics::B2World_obj::m_warmStarting = true;
HXLINE(1267)		 ::box2D::collision::B2AABB aabb =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
HXLINE(1268)		aabb->lowerBound->x = (int)0;
HXLINE(1269)		aabb->lowerBound->y = (int)0;
HXLINE(1270)		aabb->upperBound->x = ((Float)::com::stencyl::Engine_obj::screenWidth / (Float)::com::stencyl::Engine_obj::physicsScale);
HXLINE(1271)		aabb->upperBound->y = ((Float)::com::stencyl::Engine_obj::screenHeight / (Float)::com::stencyl::Engine_obj::physicsScale);
HXLINE(1272)		this->world->setScreenBounds(aabb);
HXLINE(1274)		::com::stencyl::Engine_obj::debugDrawer =  ::box2D::dynamics::B2DebugDraw_obj::__alloc( HX_CTX );
HXLINE(1275)		::com::stencyl::Engine_obj::debugDrawer->setSprite(this->debugLayer);
HXLINE(1276)		::com::stencyl::Engine_obj::debugDrawer->setLineThickness((int)3);
HXLINE(1277)		 ::box2D::dynamics::B2DebugDraw _hx_tmp = ::com::stencyl::Engine_obj::debugDrawer;
HXDLIN(1277)		_hx_tmp->setDrawScale(((int)10 * ::com::stencyl::Engine_obj::SCALE));
HXLINE(1278)		::com::stencyl::Engine_obj::debugDrawer->setFillAlpha((int)0);
HXLINE(1279)		 ::box2D::dynamics::B2DebugDraw _hx_tmp1 = ::com::stencyl::Engine_obj::debugDrawer;
HXDLIN(1279)		_hx_tmp1->setFlags(((int)::box2D::dynamics::B2DebugDraw_obj::e_shapeBit | (int)::box2D::dynamics::B2DebugDraw_obj::e_jointBit));
HXLINE(1280)		this->world->setDebugDraw(::com::stencyl::Engine_obj::debugDrawer);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,initPhysics,(void))

void Engine_obj::loadActors(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1317_loadActors)
HXLINE(1318)		this->actorsToCreate = ::Array_obj< ::Dynamic>::__new();
HXLINE(1320)		{
HXLINE(1320)			 ::Dynamic instance = this->scene->actors->iterator();
HXDLIN(1320)			while(( (bool)(instance->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1320)				 ::com::stencyl::models::scene::ActorInstance instance1 = ( ( ::com::stencyl::models::scene::ActorInstance)(instance->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1322)				::Array< ::Dynamic> _hx_tmp = this->actorsToCreate;
HXDLIN(1322)				_hx_tmp->push(this->createActor(instance1,true));
            			}
            		}
HXLINE(1324)		{
HXLINE(1324)			int _g = (int)0;
HXDLIN(1324)			::Array< ::Dynamic> _g1 = this->interactiveLayers;
HXDLIN(1324)			while((_g < _g1->length)){
HXLINE(1324)				 ::com::stencyl::models::scene::Layer layer = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::Layer >();
HXDLIN(1324)				_g = (_g + (int)1);
HXLINE(1326)				{
HXLINE(1326)					int _g3 = (int)0;
HXDLIN(1326)					int _g2 = layer->actorContainer->get_numChildren();
HXDLIN(1326)					while((_g3 < _g2)){
HXLINE(1326)						_g3 = (_g3 + (int)1);
HXDLIN(1326)						int i = (_g3 - (int)1);
HXLINE(1328)						 ::com::stencyl::models::Actor actor = ( ( ::com::stencyl::models::Actor)(layer->actorContainer->getChildAt(i)) );
HXLINE(1329)						 ::com::stencyl::models::scene::ActorInstance actorInstance = this->scene->actors->get(actor->ID).StaticCast<  ::com::stencyl::models::scene::ActorInstance >();
HXLINE(1330)						layer->actorContainer->swapChildrenAt(i,actorInstance->orderInLayer);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,loadActors,(void))

void Engine_obj::loadDeferredActors(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1336_loadDeferredActors)
HXLINE(1337)		{
HXLINE(1337)			int _g = (int)0;
HXDLIN(1337)			::Array< ::Dynamic> _g1 = this->actorsToCreateInNextScene;
HXDLIN(1337)			while((_g < _g1->length)){
HXLINE(1337)				 ::com::stencyl::models::scene::DeferredActor a = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::DeferredActor >();
HXDLIN(1337)				_g = (_g + (int)1);
HXLINE(1339)				::com::stencyl::behavior::Script_obj::lastCreatedActor = this->createActorOfType(a->type,a->x,a->y,a->layer);
            			}
            		}
HXLINE(1342)		this->actorsToCreateInNextScene = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,loadDeferredActors,(void))

void Engine_obj::initActorScripts(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1346_initActorScripts)
HXLINE(1347)		{
HXLINE(1347)			int _g = (int)0;
HXDLIN(1347)			::Array< ::Dynamic> _g1 = this->actorsToCreate;
HXDLIN(1347)			while((_g < _g1->length)){
HXLINE(1347)				 ::com::stencyl::models::Actor a = _g1->__get(_g).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN(1347)				_g = (_g + (int)1);
HXLINE(1349)				a->initScripts();
            			}
            		}
HXLINE(1352)		this->actorsToCreate = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,initActorScripts,(void))

void Engine_obj::loadCamera(){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1356_loadCamera)
HXLINE(1357)		this->camera =  ::com::stencyl::models::Actor_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),(int)-1,(int)2,(int)0,(int)0,(int)-1,(int)2,(int)2,null(),null(),null(),null(),true,false,true,false,null(),true,false,null());
HXLINE(1358)		this->camera->set_name(HX_("Camera",c5,ba,20,ec));
HXLINE(1359)		this->camera->isCamera = true;
HXLINE(1360)		::com::stencyl::Engine_obj::cameraX = (int)0;
HXLINE(1361)		::com::stencyl::Engine_obj::cameraY = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,loadCamera,(void))

void Engine_obj::loadRegions(){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1365_loadRegions)
HXLINE(1366)		this->regions =  ::de::polygonal::ds::IntHashTable_obj::__alloc( HX_CTX ,(int)32,null());
HXLINE(1367)		this->regions->reuseIterator = true;
HXLINE(1369)		{
HXLINE(1369)			 ::Dynamic r = this->scene->regions->iterator();
HXDLIN(1369)			while(( (bool)(r->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1369)				 ::com::stencyl::models::scene::RegionDef r1 = ( ( ::com::stencyl::models::scene::RegionDef)(r->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1371)				 ::com::stencyl::models::Region region =  ::com::stencyl::models::Region_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),r1->x,r1->y,r1->shapes,r1->simpleBounds);
HXLINE(1372)				region->set_name(r1->name);
HXLINE(1374)				if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(1376)					Float r2 = r1->x;
HXDLIN(1376)					Float _hx_tmp = (r2 + ((Float)region->regionWidth / (Float)(int)2));
HXDLIN(1376)					Float r3 = r1->y;
HXDLIN(1376)					region->setXY(_hx_tmp,(r3 + ((Float)region->regionHeight / (Float)(int)2)),null(),null());
            				}
HXLINE(1379)				region->ID = r1->ID;
HXLINE(1381)				this->addRegion(region);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,loadRegions,(void))

void Engine_obj::loadTerrainRegions(){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1386_loadTerrainRegions)
HXLINE(1387)		this->terrainRegions =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1389)		if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(1391)			return;
            		}
HXLINE(1394)		{
HXLINE(1394)			 ::Dynamic r = this->scene->terrainRegions->iterator();
HXDLIN(1394)			while(( (bool)(r->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1394)				 ::com::stencyl::models::scene::TerrainDef r1 = ( ( ::com::stencyl::models::scene::TerrainDef)(r->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1396)				 ::com::stencyl::models::Terrain region =  ::com::stencyl::models::Terrain_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),r1->x,r1->y,r1->shapes,r1->groupID,r1->fillColor);
HXLINE(1397)				region->set_name(r1->name);
HXLINE(1399)				Float _hx_tmp = ::com::stencyl::Engine_obj::toPixelUnits(r1->x);
HXDLIN(1399)				region->setX((_hx_tmp + ((Float)region->regionWidth / (Float)(int)2)),null(),null());
HXLINE(1400)				Float _hx_tmp1 = ::com::stencyl::Engine_obj::toPixelUnits(r1->y);
HXDLIN(1400)				region->setY((_hx_tmp1 + ((Float)region->regionHeight / (Float)(int)2)),null(),null());
HXLINE(1402)				region->ID = r1->ID;
HXLINE(1404)				this->addTerrainRegion(region);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,loadTerrainRegions,(void))

void Engine_obj::loadJoints(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1409_loadJoints)
HXLINE(1410)		if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(1412)			return;
            		}
HXLINE(1415)		{
HXLINE(1415)			 ::Dynamic jd = this->scene->joints->iterator();
HXDLIN(1415)			while(( (bool)(jd->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1415)				 ::box2D::dynamics::joints::B2JointDef jd1 = ( ( ::box2D::dynamics::joints::B2JointDef)(jd->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1417)				int a1 = jd1->actor1;
HXLINE(1418)				int a2 = jd1->actor2;
HXLINE(1419)				bool collide = jd1->collideConnected;
HXLINE(1421)				 ::box2D::dynamics::B2Body one = null();
HXLINE(1422)				 ::box2D::dynamics::B2Body two = null();
HXLINE(1424)				 ::box2D::common::math::B2Vec2 pt = null();
HXLINE(1429)				if ((jd1->type == (int)3)) {
HXLINE(1431)					::Dynamic this1 = this->joints;
HXDLIN(1431)					int key = jd1->ID;
HXDLIN(1431)					 ::box2D::dynamics::B2Body value = this->getActor(a1)->body;
HXDLIN(1431)					( ( ::haxe::ds::IntMap)(this1) )->set(key,( ( ::box2D::dynamics::joints::B2Joint)(this->createStickJoint(value,this->getActor(a2)->body,jd1->ID,collide,null(),null())) ));
            				}
            				else {
HXLINE(1435)					if ((jd1->type == (int)1)) {
HXLINE(1437)						 ::box2D::dynamics::joints::B2RevoluteJointDef r = hx::TCast<  ::box2D::dynamics::joints::B2RevoluteJointDef >::cast(jd1);
HXLINE(1438)						pt = this->getActor(a1)->body->getLocalCenter()->copy(null());
HXLINE(1440)						pt->x = ::com::stencyl::Engine_obj::toPixelUnits(pt->x);
HXLINE(1441)						pt->y = ::com::stencyl::Engine_obj::toPixelUnits(pt->y);
HXLINE(1443)						one = this->getActor(a1)->body;
HXLINE(1444)						two = null();
HXLINE(1446)						if ((a2 == (int)-1)) {
HXLINE(1448)							two = this->world->m_groundBody;
            						}
            						else {
HXLINE(1453)							two = this->getActor(a2)->body;
            						}
HXLINE(1456)						{
HXLINE(1456)							::Dynamic this2 = this->joints;
HXDLIN(1456)							int key1 = jd1->ID;
HXDLIN(1456)							( ( ::haxe::ds::IntMap)(this2) )->set(key1,( ( ::box2D::dynamics::joints::B2Joint)(this->createHingeJoint(one,two,pt,jd1->ID,collide,r->enableLimit,r->enableMotor,r->lowerAngle,r->upperAngle,r->maxMotorTorque,-(r->motorSpeed))) ));
            						}
            					}
            					else {
HXLINE(1473)						bool _hx_tmp;
HXDLIN(1473)						if ((jd1->type != (int)2)) {
HXLINE(1473)							_hx_tmp = (jd1->type == (int)7);
            						}
            						else {
HXLINE(1473)							_hx_tmp = true;
            						}
HXDLIN(1473)						if (_hx_tmp) {
HXLINE(1475)							 ::box2D::dynamics::joints::B2LineJointDef s = hx::TCast<  ::box2D::dynamics::joints::B2LineJointDef >::cast(jd1);
HXLINE(1476)							pt = this->getActor(a1)->body->getLocalCenter()->copy(null());
HXLINE(1478)							pt->x = ::com::stencyl::Engine_obj::toPixelUnits(pt->x);
HXLINE(1479)							pt->y = ::com::stencyl::Engine_obj::toPixelUnits(pt->y);
HXLINE(1481)							one = this->getActor(a1)->body;
HXLINE(1482)							two = null();
HXLINE(1484)							if ((a2 == (int)-1)) {
HXLINE(1486)								two = this->world->m_groundBody;
            							}
            							else {
HXLINE(1491)								two = this->getActor(a2)->body;
            							}
HXLINE(1494)							{
HXLINE(1494)								::Dynamic this3 = this->joints;
HXDLIN(1494)								int key2 = jd1->ID;
HXDLIN(1494)								( ( ::haxe::ds::IntMap)(this3) )->set(key2,( ( ::box2D::dynamics::joints::B2Joint)(this->createSlidingJoint(one,two,s->localAxisA,jd1->ID,collide,s->enableLimit,s->enableMotor,s->lowerTranslation,s->upperTranslation,s->maxMotorForce,s->motorSpeed)) ));
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,loadJoints,(void))

void Engine_obj::loadTerrain(){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1513_loadTerrain)
HXLINE(1514)		this->initLayers();
HXLINE(1516)		{
HXLINE(1516)			int _g = (int)0;
HXDLIN(1516)			::Array< ::Dynamic> _g1 = this->scene->wireframes;
HXDLIN(1516)			while((_g < _g1->length)){
HXLINE(1516)				 ::com::stencyl::models::scene::Wireframe wireframe = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::Wireframe >();
HXDLIN(1516)				_g = (_g + (int)1);
HXLINE(1518)				 ::com::stencyl::models::Actor a = null();
HXLINE(1520)				if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(1556)					Float wireframe1 = wireframe->x;
HXLINE(1557)					Float wireframe2 = wireframe->y;
HXLINE(1559)					int a1 = ::Std_obj::_hx_int(wireframe->width);
HXLINE(1560)					int a2 = ::Std_obj::_hx_int(wireframe->height);
HXLINE(1551)					a =  ::com::stencyl::models::Actor_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),(int)100000000,(int)1,wireframe1,wireframe2,(int)-1,a1,a2,null(), ::haxe::ds::StringMap_obj::__alloc( HX_CTX ),null(),null(),false,true,false,false,wireframe->shape,null(),null(),null());
            				}
HXLINE(1573)				a->set_name(HX_("Terrain",95,d3,68,f6));
HXLINE(1574)				a->typeID = (int)-1;
HXLINE(1575)				a->set_visible(false);
HXLINE(1577)				this->getGroup((int)1,null())->addChild(a);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,loadTerrain,(void))

void Engine_obj::initLayers(){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1583_initLayers)
HXLINE(1584)		this->setColorBackground(this->scene->colorBackground);
HXLINE(1586)		this->animatedTiles = this->scene->animatedTiles;
HXLINE(1588)		if (hx::IsNotNull( this->animatedTiles )) {
HXLINE(1590)			int _g = (int)0;
HXDLIN(1590)			::Array< ::Dynamic> _g1 = this->animatedTiles;
HXDLIN(1590)			while((_g < _g1->length)){
HXLINE(1590)				 ::com::stencyl::models::scene::Tile tile = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::Tile >();
HXDLIN(1590)				_g = (_g + (int)1);
HXLINE(1592)				tile->currFrame = (int)0;
HXLINE(1593)				tile->currTime = (int)0;
HXLINE(1594)				tile->updateSource = true;
            			}
            		}
HXLINE(1598)		this->layers = this->scene->layers;
HXLINE(1599)		this->layersToDraw =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1600)		this->layersByName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1601)		this->interactiveLayers = ::Array_obj< ::Dynamic>::__new();
HXLINE(1602)		this->backgroundLayers = ::Array_obj< ::Dynamic>::__new();
HXLINE(1604)		bool foundBottom = false;
HXLINE(1605)		bool foundMiddle = false;
HXLINE(1606)		int numLayersProcessed = (int)0;
HXLINE(1607)		int highestLayerOrder = (int)-1;
HXLINE(1609)		 ::haxe::ds::IntMap reverseOrders =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(1611)		if ((this->layers->mSize == (int)0)) {
HXLINE(1614)			 ::com::stencyl::models::Scene tileLayer = this->scene;
HXDLIN(1614)			int tileLayer1 = ::Std_obj::_hx_int(((Float)this->scene->sceneWidth / (Float)this->scene->tileWidth));
HXDLIN(1614)			 ::com::stencyl::models::scene::TileLayer tileLayer2 =  ::com::stencyl::models::scene::TileLayer_obj::__alloc( HX_CTX ,(int)0,tileLayer,tileLayer1,::Std_obj::_hx_int(((Float)this->scene->sceneHeight / (Float)this->scene->tileHeight)));
HXLINE(1615)			 ::com::stencyl::models::scene::Layer layer =  ::com::stencyl::models::scene::Layer_obj::__alloc( HX_CTX ,(int)0,HX_("default",c1,d8,c3,9b),(int)0,((Float)1.0),((Float)1.0),((Float)1.0),(int)10,tileLayer2);
HXLINE(1616)			this->layers->set(layer->ID,layer);
            		}
HXLINE(1619)		{
HXLINE(1619)			::Dynamic l = this->layers->iterator();
HXDLIN(1619)			while(::de::polygonal::ds::Itr_obj::hasNext(l)){
HXLINE(1619)				 ::com::stencyl::models::scene::layers::RegularLayer l1 = ( ( ::com::stencyl::models::scene::layers::RegularLayer)(::de::polygonal::ds::Itr_obj::next(l)) );
HXLINE(1621)				highestLayerOrder = ::Std_obj::_hx_int(::Math_obj::max(highestLayerOrder,l1->order));
HXLINE(1623)				reverseOrders->set(l1->order,l1);
HXLINE(1624)				this->layersByName->set(l1->layerName,l1);
HXLINE(1625)				if (::Std_obj::is(l1,hx::ClassOf< ::com::stencyl::models::scene::Layer >())) {
HXLINE(1626)					::Array< ::Dynamic> _hx_tmp = this->interactiveLayers;
HXDLIN(1626)					_hx_tmp->push(l1);
            				}
            				else {
HXLINE(1627)					if (::Std_obj::is(l1,hx::ClassOf< ::com::stencyl::models::scene::layers::BackgroundLayer >())) {
HXLINE(1628)						::Array< ::Dynamic> _hx_tmp1 = this->backgroundLayers;
HXDLIN(1628)						_hx_tmp1->push(l1);
            					}
            				}
            			}
            		}
HXLINE(1631)		{
HXLINE(1631)			int _g11 = (int)0;
HXDLIN(1631)			int _g2 = (highestLayerOrder + (int)1);
HXDLIN(1631)			while((_g11 < _g2)){
HXLINE(1631)				_g11 = (_g11 + (int)1);
HXDLIN(1631)				int i = (_g11 - (int)1);
HXLINE(1633)				int j = (highestLayerOrder - i);
HXLINE(1634)				 ::com::stencyl::models::scene::layers::RegularLayer l2 = reverseOrders->get(i).StaticCast<  ::com::stencyl::models::scene::layers::RegularLayer >();
HXLINE(1635)				l2->order = j;
HXLINE(1636)				this->layersToDraw->set(j,l2);
            			}
            		}
HXLINE(1639)		{
HXLINE(1639)			int _g12 = (int)0;
HXDLIN(1639)			int _g3 = (highestLayerOrder + (int)1);
HXDLIN(1639)			while((_g12 < _g3)){
HXLINE(1639)				_g12 = (_g12 + (int)1);
HXDLIN(1639)				int i1 = (_g12 - (int)1);
HXLINE(1641)				 ::com::stencyl::models::scene::layers::RegularLayer l3 = this->layersToDraw->get(i1).StaticCast<  ::com::stencyl::models::scene::layers::RegularLayer >();
HXLINE(1643)				if (::Std_obj::is(l3,hx::ClassOf< ::com::stencyl::models::scene::layers::BackgroundLayer >())) {
HXLINE(1645)					 ::com::stencyl::models::scene::layers::BackgroundLayer layer1 = hx::TCast<  ::com::stencyl::models::scene::layers::BackgroundLayer >::cast(l3);
HXLINE(1646)					layer1->load();
HXLINE(1647)					this->master->addChild(layer1);
            				}
            				else {
HXLINE(1649)					if (::Std_obj::is(l3,hx::ClassOf< ::com::stencyl::models::scene::Layer >())) {
HXLINE(1651)						 ::com::stencyl::models::scene::Layer layer2 = hx::TCast<  ::com::stencyl::models::scene::Layer >::cast(l3);
HXLINE(1653)						if (!(foundBottom)) {
HXLINE(1655)							foundBottom = true;
HXLINE(1656)							this->bottomLayer = layer2;
            						}
HXLINE(1659)						bool _hx_tmp2;
HXDLIN(1659)						if (!(foundMiddle)) {
HXLINE(1659)							_hx_tmp2 = (numLayersProcessed == ::Math_obj::floor(((Float)this->interactiveLayers->length / (Float)(int)2)));
            						}
            						else {
HXLINE(1659)							_hx_tmp2 = false;
            						}
HXDLIN(1659)						if (_hx_tmp2) {
HXLINE(1661)							foundMiddle = true;
HXLINE(1662)							this->middleLayer = layer2;
            						}
HXLINE(1665)						this->master->addChild(layer2);
HXLINE(1668)						this->topLayer = layer2;
HXLINE(1671)						layer2->tiles->mountGrid();
HXLINE(1673)						numLayersProcessed = (numLayersProcessed + (int)1);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,initLayers,(void))

void Engine_obj::setColorBackground(::Dynamic bg){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1680_setColorBackground)
HXDLIN(1680)		 ::openfl::display::Graphics _hx_tmp = this->colorLayer->get_graphics();
HXDLIN(1680)		int _hx_tmp1 = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE));
HXDLIN(1680)		::com::stencyl::models::Background_obj::draw(bg,_hx_tmp,(int)0,(int)0,_hx_tmp1,::Std_obj::_hx_int((::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,setColorBackground,(void))

void Engine_obj::optimizePool(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1693_optimizePool)
HXDLIN(1693)		 ::Dynamic cache = this->recycledActorsOfType->iterator();
HXDLIN(1693)		while(( (bool)(cache->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN(1693)			::Array< ::Dynamic> cache1 = ( (::Array< ::Dynamic>)(cache->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1695)			::Array< ::Dynamic> toRemove = ::Array_obj< ::Dynamic>::__new();
HXLINE(1697)			{
HXLINE(1697)				int _g = (int)0;
HXDLIN(1697)				while((_g < cache1->length)){
HXLINE(1697)					 ::com::stencyl::models::Actor actor = cache1->__get(_g).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN(1697)					_g = (_g + (int)1);
HXLINE(1699)					bool _hx_tmp;
HXDLIN(1699)					if (hx::IsNotNull( actor )) {
HXLINE(1699)						_hx_tmp = actor->recycled;
            					}
            					else {
HXLINE(1699)						_hx_tmp = false;
            					}
HXDLIN(1699)					if (_hx_tmp) {
HXLINE(1701)						toRemove->push(actor);
            					}
            				}
            			}
HXLINE(1705)			{
HXLINE(1705)				int _g1 = (int)0;
HXDLIN(1705)				while((_g1 < toRemove->length)){
HXLINE(1705)					 ::com::stencyl::models::Actor actor1 = toRemove->__get(_g1).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN(1705)					_g1 = (_g1 + (int)1);
HXLINE(1707)					cache1->remove(actor1);
HXLINE(1708)					this->removeActor(actor1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,optimizePool,(void))

void Engine_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1714_cleanup)
HXLINE(1715)		bool _hx_tmp;
HXDLIN(1715)		if (hx::IsNotNull( ::com::stencyl::Engine_obj::debugDrawer )) {
HXLINE(1715)			_hx_tmp = hx::IsNotNull( ::com::stencyl::Engine_obj::debugDrawer->m_sprite );
            		}
            		else {
HXLINE(1715)			_hx_tmp = false;
            		}
HXDLIN(1715)		if (_hx_tmp) {
HXLINE(1717)			::com::stencyl::Engine_obj::debugDrawer->m_sprite->get_graphics()->clear();
            		}
HXLINE(1720)		{
HXLINE(1720)			int _g = (int)0;
HXDLIN(1720)			::Array< ::Dynamic> _g1 = this->interactiveLayers;
HXDLIN(1720)			while((_g < _g1->length)){
HXLINE(1720)				 ::com::stencyl::models::scene::Layer layer = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::Layer >();
HXDLIN(1720)				_g = (_g + (int)1);
HXLINE(1722)				layer->clear();
            			}
            		}
HXLINE(1724)		this->hudLayer->clear();
HXLINE(1726)		::com::stencyl::utils::Utils_obj::removeAllChildren(this->master);
HXLINE(1728)		this->behaviors->destroy();
HXLINE(1732)		this->camera->destroy();
HXLINE(1733)		this->camera = null();
HXLINE(1738)		if (hx::IsNotNull( this->world )) {
HXLINE(1740)			 ::box2D::dynamics::B2Body worldbody = this->world->getBodyList();
HXLINE(1741)			 ::box2D::dynamics::joints::B2Joint j = this->world->getJointList();
HXLINE(1743)			while(hx::IsNotNull( j )){
HXLINE(1745)				this->world->destroyJoint(j);
HXLINE(1746)				j = j->getNext();
            			}
HXLINE(1749)			while(hx::IsNotNull( worldbody )){
HXLINE(1751)				this->world->destroyBody(worldbody);
HXLINE(1752)				worldbody = worldbody->getNext();
            			}
            		}
HXLINE(1756)		{
HXLINE(1756)			 ::Dynamic set = this->actorsOfType->iterator();
HXDLIN(1756)			while(( (bool)(set->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1756)				::Array< ::Dynamic> set1 = ( (::Array< ::Dynamic>)(set->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1758)				set1->removeRange((int)0,set1->length);
            			}
            		}
HXLINE(1761)		{
HXLINE(1761)			 ::Dynamic rList = this->recycledActorsOfType->iterator();
HXDLIN(1761)			while(( (bool)(rList->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1761)				::Array< ::Dynamic> rList1 = ( (::Array< ::Dynamic>)(rList->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1763)				int _g2 = (int)0;
HXDLIN(1763)				while((_g2 < rList1->length)){
HXLINE(1763)					 ::com::stencyl::models::Actor a = rList1->__get(_g2).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN(1763)					_g2 = (_g2 + (int)1);
HXLINE(1765)					if (!(a->destroyed)) {
HXLINE(1767)						a->destroy();
            					}
            				}
            			}
            		}
HXLINE(1772)		{
HXLINE(1772)			 ::Dynamic set2 = this->recycledActorsOfType->iterator();
HXDLIN(1772)			while(( (bool)(set2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1772)				::Array< ::Dynamic> set3 = ( (::Array< ::Dynamic>)(set2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1774)				set3->removeRange((int)0,set3->length);
            			}
            		}
HXLINE(1777)		{
HXLINE(1777)			::Dynamic a1 = this->allActors->iterator();
HXDLIN(1777)			while(::de::polygonal::ds::Itr_obj::hasNext(a1)){
HXLINE(1777)				 ::com::stencyl::models::Actor a2 = ( ( ::com::stencyl::models::Actor)(::de::polygonal::ds::Itr_obj::next(a1)) );
HXLINE(1779)				a2->destroy();
            			}
            		}
HXLINE(1783)		while((::Lambda_obj::count(this->allActors,null()) > (int)0)){
HXLINE(1785)			::Dynamic key = this->allActors->keys();
HXDLIN(1785)			while(::de::polygonal::ds::Itr_obj::hasNext(key)){
HXLINE(1785)				int key1 = ( (int)(::de::polygonal::ds::Itr_obj::next(key)) );
HXLINE(1787)				this->allActors->unset(key1);
            			}
            		}
HXLINE(1791)		this->scene->unload();
HXLINE(1793)		this->actorsOfType = null();
HXLINE(1794)		this->recycledActorsOfType = null();
HXLINE(1796)		this->layers = null();
HXLINE(1797)		this->layersByName = null();
HXLINE(1798)		this->interactiveLayers = null();
HXLINE(1799)		this->backgroundLayers = null();
HXLINE(1800)		this->layersToDraw = null();
HXLINE(1802)		this->dynamicTiles = null();
HXLINE(1803)		this->animatedTiles = null();
HXLINE(1805)		this->regions = null();
HXLINE(1806)		this->terrainRegions = null();
HXLINE(1807)		this->joints = null();
HXLINE(1808)		this->groups = null();
HXLINE(1809)		this->reverseGroups = null();
HXLINE(1810)		this->allActors = null();
HXLINE(1811)		this->scene = null();
HXLINE(1812)		this->tasks = null();
HXLINE(1814)		this->collisionPairs = null();
HXLINE(1815)		this->disableCollisionList = null();
HXLINE(1817)		this->whenKeyPressedListeners = null();
HXLINE(1818)		this->hasKeyPressedListeners = false;
HXLINE(1819)		this->whenAnyKeyPressedListeners = null();
HXLINE(1820)		this->whenAnyKeyReleasedListeners = null();
HXLINE(1821)		this->whenAnyGamepadPressedListeners = null();
HXLINE(1822)		this->whenAnyGamepadReleasedListeners = null();
HXLINE(1823)		this->whenTypeGroupCreatedListeners = null();
HXLINE(1824)		this->whenTypeGroupDiesListeners = null();
HXLINE(1825)		this->typeGroupPositionListeners = null();
HXLINE(1826)		this->collisionListeners = null();
HXLINE(1827)		this->soundListeners = null();
HXLINE(1828)		this->channelListeners = null();
HXLINE(1830)		this->whenUpdatedListeners = null();
HXLINE(1831)		this->whenDrawingListeners = null();
HXLINE(1832)		this->whenMousePressedListeners = null();
HXLINE(1833)		this->whenMouseReleasedListeners = null();
HXLINE(1834)		this->whenMouseMovedListeners = null();
HXLINE(1835)		this->whenMouseDraggedListeners = null();
HXLINE(1836)		this->whenPausedListeners = null();
HXLINE(1838)		this->fullscreenListeners = null();
HXLINE(1839)		this->screenSizeListeners = null();
HXLINE(1840)		this->gameScaleListeners = null();
HXLINE(1842)		this->whenSwipedListeners = null();
HXLINE(1843)		this->whenMTStartListeners = null();
HXLINE(1844)		this->whenMTDragListeners = null();
HXLINE(1845)		this->whenMTEndListeners = null();
HXLINE(1847)		this->whenFocusChangedListeners = null();
HXLINE(1848)		this->nativeListeners = null();
HXLINE(1850)		::com::stencyl::behavior::Script_obj::lastCreatedActor = null();
HXLINE(1851)		::com::stencyl::behavior::Script_obj::lastCreatedJoint = null();
HXLINE(1852)		::com::stencyl::behavior::Script_obj::lastCreatedRegion = null();
HXLINE(1853)		::com::stencyl::behavior::Script_obj::lastCreatedTerrainRegion = null();
HXLINE(1857)		::com::stencyl::Input_obj::update();
HXLINE(1859)		this->world = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,cleanup,(void))

void Engine_obj::switchScene(int sceneID, ::com::stencyl::graphics::transitions::Transition leave, ::com::stencyl::graphics::transitions::Transition enter){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1863_switchScene)
HXLINE(1866)		if (this->isTransitioning()) {
HXLINE(1869)			return;
            		}
HXLINE(1872)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(1872)		_hx_tmp((HX_("Switching to scene ",07,ee,fc,6d) + sceneID),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),1872,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("switchScene",b8,6a,51,6c)));
HXLINE(1874)		bool _hx_tmp1;
HXDLIN(1874)		if (hx::IsNotNull( leave )) {
HXLINE(1874)			_hx_tmp1 = leave->isComplete();
            		}
            		else {
HXLINE(1874)			_hx_tmp1 = false;
            		}
HXDLIN(1874)		if (_hx_tmp1) {
HXLINE(1876)			leave->reset();
            		}
HXLINE(1879)		bool _hx_tmp2;
HXDLIN(1879)		if (hx::IsNotNull( leave )) {
HXLINE(1879)			_hx_tmp2 = (leave->duration == (int)0);
            		}
            		else {
HXLINE(1879)			_hx_tmp2 = true;
            		}
HXDLIN(1879)		if (_hx_tmp2) {
HXLINE(1881)			leave =  ::com::stencyl::graphics::transitions::Transition_obj::__alloc( HX_CTX ,(int)0);
            		}
HXLINE(1884)		bool _hx_tmp3;
HXDLIN(1884)		if (hx::IsNotNull( enter )) {
HXLINE(1884)			_hx_tmp3 = (enter->duration == (int)0);
            		}
            		else {
HXLINE(1884)			_hx_tmp3 = true;
            		}
HXDLIN(1884)		if (_hx_tmp3) {
HXLINE(1886)			enter =  ::com::stencyl::graphics::transitions::Transition_obj::__alloc( HX_CTX ,(int)1);
            		}
HXLINE(1889)		this->leave = leave;
HXLINE(1890)		this->enter = enter;
HXLINE(1892)		if (!(this->leave->isComplete())) {
HXLINE(1894)			this->leave->start();
            		}
HXLINE(1897)		this->sceneToEnter = sceneID;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Engine_obj,switchScene,(void))

void Engine_obj::enterScene(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1901_enterScene)
HXLINE(1902)		if (!(this->enter->isComplete())) {
HXLINE(1904)			this->enter->start();
HXLINE(1906)			if (hx::IsNotNull( this->leave )) {
HXLINE(1908)				this->leave->cleanup();
            			}
            		}
HXLINE(1912)		this->leave = null();
HXLINE(1916)		this->sceneInitialized = false;
HXLINE(1917)		this->cleanup();
HXLINE(1918)		this->loadScene(this->sceneToEnter);
HXLINE(1919)		this->sceneInitialized = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,enterScene,(void))

bool Engine_obj::isTransitioning(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1923_isTransitioning)
HXLINE(1924)		bool _hx_tmp;
HXDLIN(1924)		if (hx::IsNotNull( this->enter )) {
HXLINE(1924)			_hx_tmp = this->enter->isActive();
            		}
            		else {
HXLINE(1924)			_hx_tmp = false;
            		}
HXDLIN(1924)		if (_hx_tmp) {
HXLINE(1926)			return true;
            		}
            		else {
HXLINE(1929)			bool _hx_tmp1;
HXDLIN(1929)			if (hx::IsNotNull( this->leave )) {
HXLINE(1929)				_hx_tmp1 = this->leave->isActive();
            			}
            			else {
HXLINE(1929)				_hx_tmp1 = false;
            			}
HXDLIN(1929)			if (_hx_tmp1) {
HXLINE(1931)				return true;
            			}
            		}
HXLINE(1934)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,isTransitioning,return )

bool Engine_obj::isTransitioningOut(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1938_isTransitioningOut)
HXLINE(1939)		bool _hx_tmp;
HXDLIN(1939)		if (hx::IsNotNull( this->leave )) {
HXLINE(1939)			_hx_tmp = this->leave->isActive();
            		}
            		else {
HXLINE(1939)			_hx_tmp = false;
            		}
HXDLIN(1939)		if (_hx_tmp) {
HXLINE(1941)			return true;
            		}
HXLINE(1944)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,isTransitioningOut,return )

void Engine_obj::createActorInNextScene( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layer){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1953_createActorInNextScene)
HXDLIN(1953)		::Array< ::Dynamic> _hx_tmp = this->actorsToCreateInNextScene;
HXDLIN(1953)		_hx_tmp->push( ::com::stencyl::models::scene::DeferredActor_obj::__alloc( HX_CTX ,type,x,y,layer));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Engine_obj,createActorInNextScene,(void))

 ::com::stencyl::models::Actor Engine_obj::createActor( ::com::stencyl::models::scene::ActorInstance ai,hx::Null< bool >  __o_offset){
bool offset = __o_offset.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1957_createActor)
HXLINE(1958)		 ::com::stencyl::models::actor::Sprite s = hx::TCast<  ::com::stencyl::models::actor::Sprite >::cast(::com::stencyl::Data_obj::get()->resources->get(ai->actorType->spriteID).StaticCast<  ::com::stencyl::models::Resource >());
HXLINE(1973)		 ::box2D::dynamics::B2BodyDef a;
HXDLIN(1973)		if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(1973)			a = null();
            		}
            		else {
HXLINE(1973)			a = ai->actorType->bodyDef;
            		}
HXLINE(1960)		 ::com::stencyl::models::Actor a1 =  ::com::stencyl::models::Actor_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),ai->elementID,ai->groupID,ai->x,ai->y,ai->layerID,(int)-1,(int)-1,s,ai->behaviorValues,ai->actorType,a,false,false,false,false,null(),ai->actorType->autoScale,ai->actorType->ignoreGravity,ai->actorType->physicsMode);
HXLINE(1984)		if ((ai->angle != (int)0)) {
HXLINE(1986)			bool _hx_tmp;
HXDLIN(1986)			if ((a1->currOffset->x == (int)0)) {
HXLINE(1986)				_hx_tmp = (a1->currOffset->y != (int)0);
            			}
            			else {
HXLINE(1986)				_hx_tmp = true;
            			}
HXDLIN(1986)			if (_hx_tmp) {
HXLINE(1988)				int resetOrigX = ::Std_obj::_hx_int(a1->currOrigin->x);
HXLINE(1989)				int resetOrigY = ::Std_obj::_hx_int(a1->currOrigin->y);
HXLINE(1991)				int _hx_tmp1 = ::Std_obj::_hx_int(((Float)a1->cacheWidth / (Float)(int)2));
HXDLIN(1991)				a1->setOriginPoint(_hx_tmp1,::Std_obj::_hx_int(((Float)a1->cacheHeight / (Float)(int)2)));
HXLINE(1992)				a1->setAngle(ai->angle,false);
HXLINE(1993)				a1->setOriginPoint(resetOrigX,resetOrigY);
            			}
            			else {
HXLINE(1998)				a1->setAngle(ai->angle,false);
            			}
            		}
HXLINE(2002)		bool _hx_tmp2;
HXDLIN(2002)		if ((ai->scaleX == (int)1)) {
HXLINE(2002)			_hx_tmp2 = (ai->scaleY != (int)1);
            		}
            		else {
HXLINE(2002)			_hx_tmp2 = true;
            		}
HXDLIN(2002)		if (_hx_tmp2) {
HXLINE(2004)			int centerOriginX = ::Std_obj::_hx_int(((Float)a1->cacheWidth / (Float)(int)2));
HXLINE(2005)			int centerOriginY = ::Std_obj::_hx_int(((Float)a1->cacheHeight / (Float)(int)2));
HXLINE(2006)			bool _hx_tmp3;
HXDLIN(2006)			if ((a1->currOrigin->x == centerOriginX)) {
HXLINE(2006)				_hx_tmp3 = (a1->currOrigin->y != centerOriginY);
            			}
            			else {
HXLINE(2006)				_hx_tmp3 = true;
            			}
HXDLIN(2006)			if (_hx_tmp3) {
HXLINE(2008)				Float sin = ::Math_obj::sin((((Float)0.017453292519942779) * ai->angle));
HXLINE(2009)				Float cos = ::Math_obj::cos((((Float)0.017453292519942779) * ai->angle));
HXLINE(2010)				Float xDiff = (((a1->currOrigin->x - centerOriginX) * ai->scaleX) - a1->currOffset->x);
HXLINE(2011)				Float yDiff = (((a1->currOrigin->y - centerOriginY) * ai->scaleY) - a1->currOffset->y);
HXLINE(2012)				Float _hx_tmp4 = a1->getX(false);
HXDLIN(2012)				Float _hx_tmp5 = (_hx_tmp4 + (xDiff * cos));
HXDLIN(2012)				a1->setX((_hx_tmp5 - (yDiff * sin)),null(),null());
HXLINE(2013)				Float _hx_tmp6 = a1->getY(false);
HXDLIN(2013)				Float _hx_tmp7 = (_hx_tmp6 + (xDiff * sin));
HXDLIN(2013)				a1->setY((_hx_tmp7 + (yDiff * cos)),null(),null());
            			}
HXLINE(2016)			a1->growTo(ai->scaleX,ai->scaleY,(int)0,null());
            		}
HXLINE(2019)		a1->set_name(ai->actorType->name);
HXLINE(2025)		if (hx::IsNull( ( (::Array< ::Dynamic>)(this->recycledActorsOfType->get(ai->actorType->ID)) ) )) {
HXLINE(2028)			::Dynamic this1 = this->recycledActorsOfType;
HXDLIN(2028)			int key = ai->actorType->ID;
HXDLIN(2028)			( ( ::haxe::ds::IntMap)(this1) )->set(key,::Array_obj< ::Dynamic>::__new());
            		}
HXLINE(2031)		::Array< ::Dynamic> cache = ( (::Array< ::Dynamic>)(this->recycledActorsOfType->get(ai->actorType->ID)) );
HXLINE(2032)		cache->push(a1);
HXLINE(2036)		if ((ai->actorType->physicsMode != (int)2)) {
HXLINE(2038)			 ::com::stencyl::models::actor::Group group = this->groups->get(ai->groupID).StaticCast<  ::com::stencyl::models::actor::Group >();
HXLINE(2040)			if (hx::IsNotNull( group )) {
HXLINE(2042)				group->addChild(a1);
            			}
            		}
HXLINE(2049)		if ((ai->elementID == (int)100000000)) {
HXLINE(2051)			this->nextID++;
HXLINE(2052)			a1->ID = this->nextID;
HXLINE(2053)			this->allActors->set(a1->ID,a1);
            		}
            		else {
HXLINE(2058)			this->allActors->set(a1->ID,a1);
HXLINE(2059)			this->nextID = ::Std_obj::_hx_int(::Math_obj::max(a1->ID,this->nextID));
            		}
HXLINE(2062)		a1->internalUpdate((int)0,false);
HXLINE(2063)		a1->updateDrawingMatrix(null());
HXLINE(2068)		bool _hx_tmp8;
HXDLIN(2068)		if (hx::IsNotNull( ai->actorType )) {
HXLINE(2068)			_hx_tmp8 = (ai->actorType->ID != (int)-1);
            		}
            		else {
HXLINE(2068)			_hx_tmp8 = false;
            		}
HXDLIN(2068)		if (_hx_tmp8) {
HXLINE(2070)			::Array< ::Dynamic> cache1 = ( (::Array< ::Dynamic>)(this->actorsOfType->get(ai->actorType->ID)) );
HXLINE(2072)			if (hx::IsNull( cache1 )) {
HXLINE(2074)				cache1 = ::Array_obj< ::Dynamic>::__new();
HXLINE(2075)				this->actorsOfType->set(ai->actorType->ID,cache1);
            			}
HXLINE(2078)			if (hx::IsNotNull( cache1 )) {
HXLINE(2080)				cache1->push(a1);
            			}
            		}
HXLINE(2084)		::com::stencyl::behavior::Script_obj::lastCreatedActor = a1;
HXLINE(2086)		return a1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,createActor,return )

void Engine_obj::removeActor( ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2090_removeActor)
HXLINE(2091)		this->allActors->unset(a->ID);
HXLINE(2094)		this->removeActorFromLayer(a,a->layer);
HXLINE(2097)		::Dynamic this1 = this->groups;
HXDLIN(2097)		( ( ::haxe::ds::IntMap)(this1) )->get(a->getGroupID()).StaticCast<  ::com::stencyl::models::actor::Group >()->removeChild(a);
HXLINE(2099)		a->destroy();
HXLINE(2103)		bool _hx_tmp;
HXDLIN(2103)		if (hx::IsNotNull( a->type )) {
HXLINE(2103)			_hx_tmp = (a->typeID != (int)-1);
            		}
            		else {
HXLINE(2103)			_hx_tmp = false;
            		}
HXDLIN(2103)		if (_hx_tmp) {
HXLINE(2105)			::Array< ::Dynamic> cache = ( (::Array< ::Dynamic>)(this->actorsOfType->get(a->typeID)) );
HXLINE(2107)			if (hx::IsNotNull( cache )) {
HXLINE(2109)				cache->remove(a);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,removeActor,(void))

void Engine_obj::removeActorFromLayer( ::com::stencyl::models::Actor a, ::com::stencyl::models::scene::Layer layer){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2115_removeActorFromLayer)
HXLINE(2116)		bool _hx_tmp;
HXDLIN(2116)		if (hx::IsNotNull( layer )) {
HXLINE(2116)			_hx_tmp = hx::IsNotEq( a->layer,layer );
            		}
            		else {
HXLINE(2116)			_hx_tmp = true;
            		}
HXDLIN(2116)		if (_hx_tmp) {
HXLINE(2118)			return;
            		}
HXLINE(2120)		if (hx::IsEq( layer,this->hudLayer )) {
HXLINE(2122)			if ((a->physicsMode == (int)0)) {
HXLINE(2124)				a->body->setAlwaysActive(a->alwaysSimulate);
            			}
HXLINE(2127)			a->isHUD = false;
HXLINE(2128)			a->cachedLayer = null();
            		}
HXLINE(2132)		if (layer->actorContainer->contains(a)) {
HXLINE(2137)			layer->actorContainer->removeChild(a);
HXLINE(2139)			a->layer = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,removeActorFromLayer,(void))

void Engine_obj::moveActorToLayer( ::com::stencyl::models::Actor a, ::com::stencyl::models::scene::Layer layer){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2144_moveActorToLayer)
HXLINE(2145)		bool _hx_tmp;
HXDLIN(2145)		if (hx::IsNotEq( a->layer,layer )) {
HXLINE(2145)			_hx_tmp = hx::IsNull( layer );
            		}
            		else {
HXLINE(2145)			_hx_tmp = true;
            		}
HXDLIN(2145)		if (_hx_tmp) {
HXLINE(2147)			return;
            		}
HXLINE(2150)		bool _hx_tmp1;
HXDLIN(2150)		bool _hx_tmp2;
HXDLIN(2150)		if (hx::IsNotNull( a->layer )) {
HXLINE(2150)			_hx_tmp2 = (a->layer->scrollFactorX != layer->scrollFactorX);
            		}
            		else {
HXLINE(2150)			_hx_tmp2 = true;
            		}
HXDLIN(2150)		if (!(_hx_tmp2)) {
HXLINE(2150)			_hx_tmp1 = (a->layer->scrollFactorY != layer->scrollFactorY);
            		}
            		else {
HXLINE(2150)			_hx_tmp1 = true;
            		}
HXDLIN(2150)		if (_hx_tmp1) {
HXLINE(2152)			a->updateMatrix = true;
            		}
HXLINE(2155)		if (hx::IsEq( layer,this->hudLayer )) {
HXLINE(2157)			if ((a->physicsMode == (int)0)) {
HXLINE(2159)				a->body->setAlwaysActive(true);
            			}
HXLINE(2162)			a->isHUD = true;
HXLINE(2163)			a->cachedLayer = a->layer;
            		}
HXLINE(2166)		if (hx::IsNotNull( a->layer )) {
HXLINE(2168)			this->removeActorFromLayer(a,a->layer);
            		}
HXLINE(2174)		layer->actorContainer->addChild(a);
HXLINE(2176)		a->layer = layer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,moveActorToLayer,(void))

void Engine_obj::recycleActor( ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2180_recycleActor)
HXLINE(2183)		bool _hx_tmp;
HXDLIN(2183)		if (hx::IsNotNull( a )) {
HXLINE(2183)			_hx_tmp = a->recycled;
            		}
            		else {
HXLINE(2183)			_hx_tmp = true;
            		}
HXDLIN(2183)		if (_hx_tmp) {
HXLINE(2185)			return;
            		}
HXLINE(2188)		 ::haxe::ds::ObjectMap l1 = ::com::stencyl::Engine_obj::engine->whenTypeGroupDiesListeners;
HXDLIN(2188)		 ::Dynamic l11 = l1->get(a->getType());
HXLINE(2189)		 ::haxe::ds::ObjectMap l2 = ::com::stencyl::Engine_obj::engine->whenTypeGroupDiesListeners;
HXDLIN(2189)		 ::Dynamic l21 = l2->get(a->getGroup());
HXLINE(2191)		{
HXLINE(2191)			::cpp::VirtualArray listeners = a->whenKilledListeners;
HXDLIN(2191)			int r = (int)0;
HXDLIN(2191)			while((r < listeners->get_length())){
HXLINE(2191)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(2191)					 ::Dynamic f = listeners->__get(r);
HXDLIN(2191)					f(listeners);
HXDLIN(2191)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(2191)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE(2191)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(2191)				r = (r + (int)1);
            			}
            		}
HXLINE(2193)		if (hx::IsNotNull( l11 )) {
HXLINE(2195)			::cpp::VirtualArray listeners1 = ( (::cpp::VirtualArray)(l11) );
HXDLIN(2195)			int r1 = (int)0;
HXDLIN(2195)			while((r1 < listeners1->get_length())){
HXLINE(2195)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(2195)					 ::Dynamic f1 = listeners1->__get(r1);
HXDLIN(2195)					f1(a,listeners1);
HXDLIN(2195)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f1) == (int)-1)) {
HXLINE(2195)						r1 = (r1 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE(2195)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(2195)				r1 = (r1 + (int)1);
            			}
            		}
HXLINE(2198)		if (hx::IsNotNull( l21 )) {
HXLINE(2200)			::cpp::VirtualArray listeners2 = ( (::cpp::VirtualArray)(l21) );
HXDLIN(2200)			int r2 = (int)0;
HXDLIN(2200)			while((r2 < listeners2->get_length())){
HXLINE(2200)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(2200)					 ::Dynamic f2 = listeners2->__get(r2);
HXDLIN(2200)					f2(a,listeners2);
HXDLIN(2200)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners2,f2) == (int)-1)) {
HXLINE(2200)						r2 = (r2 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e2 = _hx_e;
HXLINE(2200)						::haxe::Log_obj::trace(e2,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(2200)				r2 = (r2 + (int)1);
            			}
            		}
HXLINE(2203)		if (a->isHUD) {
HXLINE(2205)			a->unanchorFromScreen();
            		}
HXLINE(2208)		if (a->alwaysSimulate) {
HXLINE(2210)			a->makeSometimesSimulate(false);
            		}
HXLINE(2213)		a->firstMove = false;
HXLINE(2214)		a->setXY((int)1000000,(int)1000000,false,true);
HXLINE(2215)		a->colX = (int)1000000;
HXLINE(2216)		a->colY = (int)1000000;
HXLINE(2217)		a->recycled = true;
HXLINE(2218)		a->killLeaveScreen = false;
HXLINE(2219)		a->lastScreenState = false;
HXLINE(2220)		a->lastSceneState = false;
HXLINE(2223)		a->cancelTweens();
HXLINE(2224)		a->clearFilters();
HXLINE(2225)		a->resetBlendMode();
HXLINE(2227)		a->set_alpha((int)1);
HXLINE(2228)		a->realScaleX = (int)1;
HXLINE(2229)		a->realScaleY = (int)1;
HXLINE(2231)		a->switchToDefaultAnimation();
HXLINE(2232)		a->disableActorDrawing();
HXLINE(2233)		a->removeAttachedImages();
HXLINE(2236)		bool _hx_tmp1;
HXDLIN(2236)		if ((a->physicsMode == (int)0)) {
HXLINE(2236)			_hx_tmp1 = hx::IsNotNull( a->body );
            		}
            		else {
HXLINE(2236)			_hx_tmp1 = false;
            		}
HXDLIN(2236)		if (_hx_tmp1) {
HXLINE(2238)			 ::box2D::dynamics::contacts::B2ContactEdge contact = a->body->getContactList();
HXLINE(2240)			while(hx::IsNotNull( contact )){
HXLINE(2242)				::com::stencyl::Engine_obj::engine->world->m_contactManager->m_contactListener->endContact(contact->contact);
HXLINE(2243)				contact = contact->next;
            			}
            		}
HXLINE(2247)		a->removeAllListeners();
HXLINE(2248)		a->resetListeners();
HXLINE(2250)		this->removeActorFromLayer(a,a->layer);
HXLINE(2252)		if ((a->physicsMode == (int)0)) {
HXLINE(2254)			a->body->setActive(false);
HXLINE(2255)			a->body->setAwake(false);
HXLINE(2256)			a->body->setBullet(a->type->bodyDef->bullet);
HXLINE(2259)			if (hx::IsNotNull( a->body->m_prev )) {
HXLINE(2261)				a->body->m_prev->m_next = a->body->m_next;
            			}
HXLINE(2264)			if (hx::IsNotNull( a->body->m_next )) {
HXLINE(2266)				a->body->m_next->m_prev = a->body->m_prev;
            			}
HXLINE(2269)			if (hx::IsEq( a->body,this->world->m_bodyList )) {
HXLINE(2271)				this->world->m_bodyList = a->body->m_next;
            			}
HXLINE(2274)			a->body->m_prev = null();
HXLINE(2275)			a->body->m_next = null();
HXLINE(2277)			--this->world->m_bodyCount;
            		}
HXLINE(2280)		a->xSpeed = (int)0;
HXLINE(2281)		a->ySpeed = (int)0;
HXLINE(2282)		a->rSpeed = (int)0;
HXLINE(2283)		a->continuousCollision = false;
HXLINE(2285)		{
HXLINE(2285)			int _g = (int)0;
HXDLIN(2285)			::Array< ::Dynamic> _g1 = this->tasks;
HXDLIN(2285)			while((_g < _g1->length)){
HXLINE(2285)				 ::com::stencyl::behavior::TimedTask item = _g1->__get(_g).StaticCast<  ::com::stencyl::behavior::TimedTask >();
HXDLIN(2285)				_g = (_g + (int)1);
HXLINE(2287)				if (hx::IsEq( item->actor,a )) {
HXLINE(2289)					this->removeTask(item);
HXLINE(2290)					item = null();
            				}
            			}
            		}
HXLINE(2294)		this->allActors->unset(a->ID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,recycleActor,(void))

 ::com::stencyl::models::Actor Engine_obj::getRecycledActorOfType( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layerConst){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2298_getRecycledActorOfType)
HXLINE(2299)		 ::com::stencyl::models::Actor a = this->getRecycledActorOfTypeOnLayer(type,x,y,this->getLayerByOrder(layerConst)->ID);
HXLINE(2301)		if (::com::stencyl::Engine_obj::paused) {
HXLINE(2303)			a->updateDrawingMatrix(null());
HXLINE(2304)			a->pause();
            		}
HXLINE(2307)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Engine_obj,getRecycledActorOfType,return )

 ::com::stencyl::models::Actor Engine_obj::getRecycledActorOfTypeOnLayer( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layerID){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2311_getRecycledActorOfTypeOnLayer)
HXLINE(2312)		 ::com::stencyl::models::Actor a = null();
HXLINE(2314)		if (hx::IsNull( ( (::Array< ::Dynamic>)(this->recycledActorsOfType->get(type->ID)) ) )) {
HXLINE(2317)			::Dynamic this1 = this->recycledActorsOfType;
HXDLIN(2317)			int key = type->ID;
HXDLIN(2317)			( ( ::haxe::ds::IntMap)(this1) )->set(key,::Array_obj< ::Dynamic>::__new());
            		}
HXLINE(2320)		::Array< ::Dynamic> cache = ( (::Array< ::Dynamic>)(this->recycledActorsOfType->get(type->ID)) );
HXLINE(2322)		if (hx::IsNotNull( cache )) {
HXLINE(2326)			{
HXLINE(2326)				int _g = (int)0;
HXDLIN(2326)				while((_g < cache->length)){
HXLINE(2326)					 ::com::stencyl::models::Actor actor = cache->__get(_g).StaticCast<  ::com::stencyl::models::Actor >();
HXDLIN(2326)					_g = (_g + (int)1);
HXLINE(2328)					bool _hx_tmp;
HXDLIN(2328)					if (hx::IsNotNull( actor )) {
HXLINE(2328)						_hx_tmp = actor->recycled;
            					}
            					else {
HXLINE(2328)						_hx_tmp = false;
            					}
HXDLIN(2328)					if (_hx_tmp) {
HXLINE(2330)						actor->createTime = ::openfl::Lib_obj::getTimer();
HXLINE(2331)						this->allActors->set(actor->ID,actor);
HXLINE(2333)						actor->dead = false;
HXLINE(2334)						actor->dying = false;
HXLINE(2335)						actor->recycled = false;
HXLINE(2336)						actor->killLeaveScreen = false;
HXLINE(2337)						actor->switchToDefaultAnimation();
HXLINE(2338)						actor->enableAllBehaviors();
HXLINE(2340)						if ((actor->physicsMode == (int)0)) {
HXLINE(2342)							actor->body->setActive(true);
HXLINE(2343)							actor->body->setAwake(true);
HXLINE(2345)							actor->body->m_prev = null();
HXLINE(2346)							actor->body->m_next = this->world->m_bodyList;
HXLINE(2348)							if (hx::IsNotNull( this->world->m_bodyList )) {
HXLINE(2350)								this->world->m_bodyList->m_prev = actor->body;
            							}
HXLINE(2353)							this->world->m_bodyList = actor->body;
HXLINE(2354)							++this->world->m_bodyCount;
            						}
HXLINE(2357)						actor->registry =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(2358)						actor->enableActorDrawing();
HXLINE(2359)						actor->setXY(x,y,false,true);
HXLINE(2361)						if ((actor->physicsMode == (int)0)) {
HXLINE(2363)							actor->colX = x;
HXLINE(2364)							actor->colY = y;
            						}
HXLINE(2367)						actor->setAngle((int)0,false);
HXLINE(2368)						actor->setIgnoreGravity(actor->defaultGravity);
HXLINE(2369)						actor->set_alpha((int)1);
HXLINE(2370)						actor->realScaleX = (int)1;
HXLINE(2371)						actor->realScaleY = (int)1;
HXLINE(2373)						if (hx::IsNotNull( actor->bodyDef )) {
HXLINE(2375)							actor->continuousCollision = actor->bodyDef->bullet;
            						}
HXLINE(2378)						actor->updateDrawingMatrix(true);
HXLINE(2383)						this->moveActorToLayer(actor,( ( ::com::stencyl::models::scene::Layer)(this->getLayerById(layerID,null())) ));
HXLINE(2385)						actor->initScripts();
HXLINE(2387)						 ::Dynamic f1 = this->whenTypeGroupCreatedListeners->get(type);
HXLINE(2388)						 ::haxe::ds::ObjectMap f2 = this->whenTypeGroupCreatedListeners;
HXDLIN(2388)						 ::Dynamic f21 = f2->get(actor->getGroup());
HXLINE(2390)						if (hx::IsNotNull( f1 )) {
HXLINE(2392)							::cpp::VirtualArray listeners = ( (::cpp::VirtualArray)(f1) );
HXDLIN(2392)							int r = (int)0;
HXDLIN(2392)							while((r < listeners->get_length())){
HXLINE(2392)								try {
            									HX_STACK_CATCHABLE(::String, 0);
HXLINE(2392)									 ::Dynamic f = listeners->__get(r);
HXDLIN(2392)									f(actor,listeners);
HXDLIN(2392)									if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(2392)										r = (r - (int)1);
            									}
            								}
            								catch( ::Dynamic _hx_e){
            									if (_hx_e.IsClass< ::String >() ){
            										HX_STACK_BEGIN_CATCH
            										::String e = _hx_e;
HXLINE(2392)										::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            									}
            									else {
            										HX_STACK_DO_THROW(_hx_e);
            									}
            								}
HXDLIN(2392)								r = (r + (int)1);
            							}
            						}
HXLINE(2395)						if (hx::IsNotNull( f21 )) {
HXLINE(2397)							::cpp::VirtualArray listeners1 = ( (::cpp::VirtualArray)(f21) );
HXDLIN(2397)							int r1 = (int)0;
HXDLIN(2397)							while((r1 < listeners1->get_length())){
HXLINE(2397)								try {
            									HX_STACK_CATCHABLE(::String, 0);
HXLINE(2397)									 ::Dynamic f3 = listeners1->__get(r1);
HXDLIN(2397)									f3(actor,listeners1);
HXDLIN(2397)									if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f3) == (int)-1)) {
HXLINE(2397)										r1 = (r1 - (int)1);
            									}
            								}
            								catch( ::Dynamic _hx_e){
            									if (_hx_e.IsClass< ::String >() ){
            										HX_STACK_BEGIN_CATCH
            										::String e1 = _hx_e;
HXLINE(2397)										::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            									}
            									else {
            										HX_STACK_DO_THROW(_hx_e);
            									}
            								}
HXDLIN(2397)								r1 = (r1 + (int)1);
            							}
            						}
HXLINE(2400)						return actor;
            					}
            				}
            			}
HXLINE(2405)			a = this->createActorOfType(type,x,y,layerID);
            		}
HXLINE(2409)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Engine_obj,getRecycledActorOfTypeOnLayer,return )

 ::com::stencyl::models::Actor Engine_obj::createActorOfType( ::com::stencyl::models::actor::ActorType type,Float x,Float y,int layerID){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2413_createActorOfType)
HXLINE(2414)		if (hx::IsNull( type )) {
HXLINE(2416)			::haxe::Log_obj::trace(HX_("Tried to create actor with null or invalid type.",2d,c4,f0,10),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),2416,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("createActorOfType",aa,96,78,f3)));
HXLINE(2417)			return null();
            		}
HXLINE(2423)		int ai = ::Std_obj::_hx_int(x);
HXLINE(2424)		int ai1 = ::Std_obj::_hx_int(y);
HXLINE(2420)		 ::com::stencyl::models::scene::ActorInstance ai2 =  ::com::stencyl::models::scene::ActorInstance_obj::__alloc( HX_CTX ,(int)100000000,ai,ai1,(int)1,(int)1,layerID,(int)-1,(int)0,type->groupID,type->ID,null(),false);
HXLINE(2436)		 ::com::stencyl::models::Actor a = this->createActor(ai2,true);
HXLINE(2437)		a->initScripts();
HXLINE(2439)		 ::Dynamic f1 = this->whenTypeGroupCreatedListeners->get(type);
HXLINE(2440)		 ::haxe::ds::ObjectMap f2 = this->whenTypeGroupCreatedListeners;
HXDLIN(2440)		 ::Dynamic f21 = f2->get(a->getGroup());
HXLINE(2442)		if (hx::IsNotNull( f1 )) {
HXLINE(2444)			::cpp::VirtualArray listeners = ( (::cpp::VirtualArray)(f1) );
HXDLIN(2444)			int r = (int)0;
HXDLIN(2444)			while((r < listeners->get_length())){
HXLINE(2444)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(2444)					 ::Dynamic f = listeners->__get(r);
HXDLIN(2444)					f(a,listeners);
HXDLIN(2444)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(2444)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE(2444)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(2444)				r = (r + (int)1);
            			}
            		}
HXLINE(2447)		if (hx::IsNotNull( f21 )) {
HXLINE(2449)			::cpp::VirtualArray listeners1 = ( (::cpp::VirtualArray)(f21) );
HXDLIN(2449)			int r1 = (int)0;
HXDLIN(2449)			while((r1 < listeners1->get_length())){
HXLINE(2449)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(2449)					 ::Dynamic f3 = listeners1->__get(r1);
HXDLIN(2449)					f3(a,listeners1);
HXDLIN(2449)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f3) == (int)-1)) {
HXLINE(2449)						r1 = (r1 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE(2449)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(2449)				r1 = (r1 + (int)1);
            			}
            		}
HXLINE(2452)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Engine_obj,createActorOfType,return )

int Engine_obj::getTopLayer(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2461_getTopLayer)
HXDLIN(2461)		return this->topLayer->ID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,getTopLayer,return )

int Engine_obj::getBottomLayer(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2466_getBottomLayer)
HXDLIN(2466)		return this->bottomLayer->ID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,getBottomLayer,return )

int Engine_obj::getMiddleLayer(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2471_getMiddleLayer)
HXDLIN(2471)		return this->middleLayer->ID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,getMiddleLayer,return )

void Engine_obj::update(Float elapsedTime){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2480_update)
HXLINE(2481)		if (hx::IsNull( this->scene )) {
HXLINE(2484)			return;
            		}
HXLINE(2488)		::com::stencyl::utils::motion::TweenManager_obj::update(::Std_obj::_hx_int(elapsedTime));
HXLINE(2493)		if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(2495)			 ::box2D::collision::B2AABB aabb = this->world->getScreenBounds();
HXLINE(2496)			aabb->lowerBound->x = ((Float)(((Float)::com::stencyl::Engine_obj::cameraX / (Float)::com::stencyl::Engine_obj::SCALE) - ::com::stencyl::Engine_obj::paddingLeft) / (Float)::com::stencyl::Engine_obj::physicsScale);
HXLINE(2497)			aabb->lowerBound->y = ((Float)(((Float)::com::stencyl::Engine_obj::cameraY / (Float)::com::stencyl::Engine_obj::SCALE) - ::com::stencyl::Engine_obj::paddingTop) / (Float)::com::stencyl::Engine_obj::physicsScale);
HXLINE(2498)			Float aabb1 = aabb->lowerBound->x;
HXDLIN(2498)			aabb->upperBound->x = (aabb1 + ((Float)((::com::stencyl::Engine_obj::screenWidth + ::com::stencyl::Engine_obj::paddingRight) + ::com::stencyl::Engine_obj::paddingLeft) / (Float)::com::stencyl::Engine_obj::physicsScale));
HXLINE(2499)			Float aabb2 = aabb->lowerBound->y;
HXDLIN(2499)			aabb->upperBound->y = (aabb2 + ((Float)((::com::stencyl::Engine_obj::screenHeight + ::com::stencyl::Engine_obj::paddingBottom) + ::com::stencyl::Engine_obj::paddingTop) / (Float)::com::stencyl::Engine_obj::physicsScale));
            		}
HXLINE(2502)		int inputx = ::Std_obj::_hx_int(((Float)::com::stencyl::Input_obj::mouseX / (Float)::com::stencyl::Engine_obj::SCALE));
HXLINE(2503)		int inputy = ::Std_obj::_hx_int(((Float)::com::stencyl::Input_obj::mouseY / (Float)::com::stencyl::Engine_obj::SCALE));
HXLINE(2505)		if (::com::stencyl::Input_obj::mousePressed) {
HXLINE(2507)			::com::stencyl::behavior::Script_obj::mpx = inputx;
HXLINE(2508)			::com::stencyl::behavior::Script_obj::mpy = inputy;
HXLINE(2509)			{
HXLINE(2509)				::cpp::VirtualArray listeners = this->whenMousePressedListeners;
HXDLIN(2509)				int r = (int)0;
HXDLIN(2509)				while((r < listeners->get_length())){
HXLINE(2509)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE(2509)						 ::Dynamic f = listeners->__get(r);
HXDLIN(2509)						f(listeners);
HXDLIN(2509)						if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(2509)							r = (r - (int)1);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String e = _hx_e;
HXLINE(2509)							::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXDLIN(2509)					r = (r + (int)1);
            				}
            			}
            		}
HXLINE(2512)		if (::com::stencyl::Input_obj::mouseReleased) {
HXLINE(2514)			::com::stencyl::behavior::Script_obj::mrx = inputx;
HXLINE(2515)			::com::stencyl::behavior::Script_obj::mry = inputy;
HXLINE(2516)			{
HXLINE(2516)				::cpp::VirtualArray listeners1 = this->whenMouseReleasedListeners;
HXDLIN(2516)				int r1 = (int)0;
HXDLIN(2516)				while((r1 < listeners1->get_length())){
HXLINE(2516)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE(2516)						 ::Dynamic f1 = listeners1->__get(r1);
HXDLIN(2516)						f1(listeners1);
HXDLIN(2516)						if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f1) == (int)-1)) {
HXLINE(2516)							r1 = (r1 - (int)1);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String e1 = _hx_e;
HXLINE(2516)							::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXDLIN(2516)					r1 = (r1 + (int)1);
            				}
            			}
            		}
HXLINE(2519)		bool _hx_tmp;
HXDLIN(2519)		if ((this->mx == inputx)) {
HXLINE(2519)			_hx_tmp = (this->my != inputy);
            		}
            		else {
HXLINE(2519)			_hx_tmp = true;
            		}
HXDLIN(2519)		if (_hx_tmp) {
HXLINE(2521)			this->mx = inputx;
HXLINE(2522)			this->my = inputy;
HXLINE(2524)			{
HXLINE(2524)				::cpp::VirtualArray listeners2 = this->whenMouseMovedListeners;
HXDLIN(2524)				int r2 = (int)0;
HXDLIN(2524)				while((r2 < listeners2->get_length())){
HXLINE(2524)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE(2524)						 ::Dynamic f2 = listeners2->__get(r2);
HXDLIN(2524)						f2(listeners2);
HXDLIN(2524)						if ((::com::stencyl::utils::Utils_obj::indexOf(listeners2,f2) == (int)-1)) {
HXLINE(2524)							r2 = (r2 - (int)1);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String e2 = _hx_e;
HXLINE(2524)							::haxe::Log_obj::trace(e2,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXDLIN(2524)					r2 = (r2 + (int)1);
            				}
            			}
HXLINE(2526)			bool _hx_tmp1;
HXDLIN(2526)			if (::com::stencyl::Input_obj::mouseDown) {
HXLINE(2526)				_hx_tmp1 = !(::com::stencyl::Input_obj::mousePressed);
            			}
            			else {
HXLINE(2526)				_hx_tmp1 = false;
            			}
HXDLIN(2526)			if (_hx_tmp1) {
HXLINE(2528)				::cpp::VirtualArray listeners3 = this->whenMouseDraggedListeners;
HXDLIN(2528)				int r3 = (int)0;
HXDLIN(2528)				while((r3 < listeners3->get_length())){
HXLINE(2528)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE(2528)						 ::Dynamic f3 = listeners3->__get(r3);
HXDLIN(2528)						f3(listeners3);
HXDLIN(2528)						if ((::com::stencyl::utils::Utils_obj::indexOf(listeners3,f3) == (int)-1)) {
HXLINE(2528)							r3 = (r3 - (int)1);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String e3 = _hx_e;
HXLINE(2528)							::haxe::Log_obj::trace(e3,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXDLIN(2528)					r3 = (r3 + (int)1);
            				}
            			}
            		}
HXLINE(2533)		int i = (int)0;
HXLINE(2535)		while((i < this->tasks->length)){
HXLINE(2537)			 ::com::stencyl::behavior::TimedTask t = this->tasks->__get(i).StaticCast<  ::com::stencyl::behavior::TimedTask >();
HXLINE(2539)			if (!(t->done)) {
HXLINE(2541)				t->update(::com::stencyl::Engine_obj::STEP_SIZE);
            			}
HXLINE(2544)			if (t->done) {
HXLINE(2546)				this->tasks->remove(t);
HXLINE(2547)				i = (i - (int)1);
            			}
HXLINE(2550)			i = (i + (int)1);
            		}
HXLINE(2554)		if (this->hasKeyPressedListeners) {
HXLINE(2557)			{
HXLINE(2557)				 ::Dynamic key = this->whenKeyPressedListeners->keys();
HXDLIN(2557)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2557)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2559)					bool pressed = ::com::stencyl::Input_obj::pressed(key1);
HXLINE(2560)					bool released = ::com::stencyl::Input_obj::released(key1);
HXLINE(2562)					bool _hx_tmp2;
HXDLIN(2562)					if (!(pressed)) {
HXLINE(2562)						_hx_tmp2 = released;
            					}
            					else {
HXLINE(2562)						_hx_tmp2 = true;
            					}
HXDLIN(2562)					if (_hx_tmp2) {
HXLINE(2564)						 ::Dynamic listeners4 = this->whenKeyPressedListeners->get(key1);
HXLINE(2565)						{
HXLINE(2565)							::cpp::VirtualArray listeners5 = ( (::cpp::VirtualArray)(listeners4) );
HXDLIN(2565)							int r4 = (int)0;
HXDLIN(2565)							while((r4 < listeners5->get_length())){
HXLINE(2565)								try {
            									HX_STACK_CATCHABLE(::String, 0);
HXLINE(2565)									 ::Dynamic f4 = listeners5->__get(r4);
HXDLIN(2565)									f4(pressed,released,listeners5);
HXDLIN(2565)									if ((::com::stencyl::utils::Utils_obj::indexOf(listeners5,f4) == (int)-1)) {
HXLINE(2565)										r4 = (r4 - (int)1);
            									}
            								}
            								catch( ::Dynamic _hx_e){
            									if (_hx_e.IsClass< ::String >() ){
            										HX_STACK_BEGIN_CATCH
            										::String e4 = _hx_e;
HXLINE(2565)										::haxe::Log_obj::trace(e4,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4255,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners3",6c,eb,b8,23)));
            									}
            									else {
            										HX_STACK_DO_THROW(_hx_e);
            									}
            								}
HXDLIN(2565)								r4 = (r4 + (int)1);
            							}
            						}
            					}
            				}
            			}
HXLINE(2569)			this->keyPollOccurred = true;
            		}
HXLINE(2583)		{
HXLINE(2583)			::cpp::VirtualArray listeners6 = this->whenUpdatedListeners;
HXDLIN(2583)			int r5 = (int)0;
HXDLIN(2583)			while((r5 < listeners6->get_length())){
HXLINE(2583)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(2583)					 ::Dynamic f5 = listeners6->__get(r5);
HXDLIN(2583)					f5(elapsedTime,listeners6);
HXDLIN(2583)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners6,f5) == (int)-1)) {
HXLINE(2583)						r5 = (r5 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e5 = _hx_e;
HXLINE(2583)						::haxe::Log_obj::trace(e5,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(2583)				r5 = (r5 + (int)1);
            			}
            		}
HXLINE(2585)		if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(2587)			this->world->step(((Float)0.01),(int)3,(int)3);
HXLINE(2588)			this->world->clearForces();
HXLINE(2590)			if (::com::stencyl::Engine_obj::DEBUG_DRAW) {
HXLINE(2592)				this->world->drawDebugData();
            			}
            		}
HXLINE(2596)		if ((this->regions->mSize != (int)0)) {
HXLINE(2598)			::Dynamic r6 = this->regions->iterator();
HXDLIN(2598)			while(::de::polygonal::ds::Itr_obj::hasNext(r6)){
HXLINE(2598)				 ::com::stencyl::models::Region r7 = ( ( ::com::stencyl::models::Region)(::de::polygonal::ds::Itr_obj::next(r6)) );
HXLINE(2600)				if (hx::IsNull( r7 )) {
HXLINE(2600)					continue;
            				}
HXLINE(2601)				r7->innerUpdate(elapsedTime,true);
            			}
            		}
HXLINE(2605)		while((this->disableCollisionList->length > (int)0)){
HXLINE(2607)			this->disableCollisionList->pop().StaticCast<  ::com::stencyl::models::Actor >();
            		}
HXLINE(2610)		if ((this->collisionPairs->mSize != (int)0)) {
HXLINE(2612)			::Dynamic pair = this->collisionPairs->keys();
HXDLIN(2612)			while(::de::polygonal::ds::Itr_obj::hasNext(pair)){
HXLINE(2612)				int pair1 = ( (int)(::de::polygonal::ds::Itr_obj::next(pair)) );
HXLINE(2614)				this->collisionPairs->unset(pair1);
            			}
            		}
HXLINE(2618)		::com::stencyl::models::actor::Animation_obj::updateAll(elapsedTime);
HXLINE(2620)		if ((this->allActors->mSize != (int)0)) {
HXLINE(2622)			::Dynamic a = this->allActors->iterator();
HXDLIN(2622)			while(::de::polygonal::ds::Itr_obj::hasNext(a)){
HXLINE(2622)				 ::com::stencyl::models::Actor a1 = ( ( ::com::stencyl::models::Actor)(::de::polygonal::ds::Itr_obj::next(a)) );
HXLINE(2624)				bool _hx_tmp3;
HXDLIN(2624)				bool _hx_tmp4;
HXDLIN(2624)				if (hx::IsNotNull( a1 )) {
HXLINE(2624)					_hx_tmp4 = !(a1->dead);
            				}
            				else {
HXLINE(2624)					_hx_tmp4 = false;
            				}
HXDLIN(2624)				if (_hx_tmp4) {
HXLINE(2624)					_hx_tmp3 = !(a1->recycled);
            				}
            				else {
HXLINE(2624)					_hx_tmp3 = false;
            				}
HXDLIN(2624)				if (_hx_tmp3) {
HXLINE(2627)					bool isOnScreen;
HXLINE(2628)					bool isOnScreen1;
HXDLIN(2628)					bool isOnScreen2;
HXDLIN(2628)					bool isOnScreen3;
HXDLIN(2628)					bool isOnScreen4;
HXDLIN(2628)					if ((a1->physicsMode == (int)0)) {
HXLINE(2628)						isOnScreen4 = a1->body->isActive();
            					}
            					else {
HXLINE(2628)						isOnScreen4 = true;
            					}
HXDLIN(2628)					if (isOnScreen4) {
HXLINE(2629)						Float isOnScreen5 = (a1->colX + a1->cacheWidth);
HXLINE(2628)						isOnScreen3 = (isOnScreen5 >= (((Float)::com::stencyl::Engine_obj::cameraX / (Float)::com::stencyl::Engine_obj::SCALE) - ::com::stencyl::Engine_obj::paddingLeft));
            					}
            					else {
HXLINE(2628)						isOnScreen3 = false;
            					}
HXDLIN(2628)					if (isOnScreen3) {
HXLINE(2630)						Float isOnScreen6 = (a1->colY + a1->cacheHeight);
HXLINE(2628)						isOnScreen2 = (isOnScreen6 >= (((Float)::com::stencyl::Engine_obj::cameraY / (Float)::com::stencyl::Engine_obj::SCALE) - ::com::stencyl::Engine_obj::paddingTop));
            					}
            					else {
HXLINE(2628)						isOnScreen2 = false;
            					}
HXDLIN(2628)					if (isOnScreen2) {
HXLINE(2631)						Float a2 = a1->colX;
HXLINE(2628)						isOnScreen1 = (a2 < ((((Float)::com::stencyl::Engine_obj::cameraX / (Float)::com::stencyl::Engine_obj::SCALE) + ::com::stencyl::Engine_obj::screenWidth) + ::com::stencyl::Engine_obj::paddingRight));
            					}
            					else {
HXLINE(2628)						isOnScreen1 = false;
            					}
HXDLIN(2628)					if (isOnScreen1) {
HXLINE(2632)						Float a3 = a1->colY;
HXLINE(2627)						isOnScreen = (a3 < ((((Float)::com::stencyl::Engine_obj::cameraY / (Float)::com::stencyl::Engine_obj::SCALE) + ::com::stencyl::Engine_obj::screenHeight) + ::com::stencyl::Engine_obj::paddingBottom));
            					}
            					else {
HXLINE(2627)						isOnScreen = false;
            					}
HXLINE(2634)					bool _hx_tmp5;
HXDLIN(2634)					if (!(isOnScreen)) {
HXLINE(2634)						_hx_tmp5 = a1->isHUD;
            					}
            					else {
HXLINE(2634)						_hx_tmp5 = true;
            					}
HXDLIN(2634)					a1->isOnScreenCache = _hx_tmp5;
HXLINE(2638)					bool _hx_tmp6;
HXDLIN(2638)					if ((a1->physicsMode == (int)0)) {
HXLINE(2638)						_hx_tmp6 = hx::IsNotNull( a1->body );
            					}
            					else {
HXLINE(2638)						_hx_tmp6 = false;
            					}
HXDLIN(2638)					if (_hx_tmp6) {
HXLINE(2640)						bool _hx_tmp7;
HXDLIN(2640)						if (a1->killLeaveScreen) {
HXLINE(2640)							_hx_tmp7 = !(isOnScreen);
            						}
            						else {
HXLINE(2640)							_hx_tmp7 = false;
            						}
HXDLIN(2640)						if (_hx_tmp7) {
HXLINE(2642)							this->recycleActor(a1);
            						}
            						else {
HXLINE(2645)							bool _hx_tmp8;
HXDLIN(2645)							bool _hx_tmp9;
HXDLIN(2645)							if (!(a1->body->isActive())) {
HXLINE(2645)								_hx_tmp9 = a1->alwaysSimulate;
            							}
            							else {
HXLINE(2645)								_hx_tmp9 = true;
            							}
HXDLIN(2645)							if (!(_hx_tmp9)) {
HXLINE(2645)								_hx_tmp8 = a1->isHUD;
            							}
            							else {
HXLINE(2645)								_hx_tmp8 = true;
            							}
HXDLIN(2645)							if (_hx_tmp8) {
HXLINE(2647)								a1->innerUpdate(elapsedTime,false);
            							}
            						}
            					}
            					else {
HXLINE(2651)						if ((a1->physicsMode != (int)0)) {
HXLINE(2653)							bool _hx_tmp10;
HXDLIN(2653)							if (a1->killLeaveScreen) {
HXLINE(2653)								_hx_tmp10 = !(isOnScreen);
            							}
            							else {
HXLINE(2653)								_hx_tmp10 = false;
            							}
HXDLIN(2653)							if (_hx_tmp10) {
HXLINE(2655)								this->recycleActor(a1);
            							}
            							else {
HXLINE(2658)								bool _hx_tmp11;
HXDLIN(2658)								bool _hx_tmp12;
HXDLIN(2658)								if (!(isOnScreen)) {
HXLINE(2658)									_hx_tmp12 = a1->alwaysSimulate;
            								}
            								else {
HXLINE(2658)									_hx_tmp12 = true;
            								}
HXDLIN(2658)								if (!(_hx_tmp12)) {
HXLINE(2658)									_hx_tmp11 = a1->isHUD;
            								}
            								else {
HXLINE(2658)									_hx_tmp11 = true;
            								}
HXDLIN(2658)								if (_hx_tmp11) {
HXLINE(2660)									a1->innerUpdate(elapsedTime,false);
            								}
            							}
            						}
            					}
HXLINE(2664)					if (a1->dead) {
HXLINE(2666)						this->disableCollisionList->push(a1);
            					}
            				}
            			}
            		}
HXLINE(2672)		this->keyPollOccurred = false;
HXLINE(2674)		{
HXLINE(2674)			int _g1 = (int)0;
HXDLIN(2674)			int _g = this->disableCollisionList->length;
HXDLIN(2674)			while((_g1 < _g)){
HXLINE(2674)				_g1 = (_g1 + (int)1);
HXDLIN(2674)				int n = (_g1 - (int)1);
HXLINE(2676)				 ::com::stencyl::models::Actor a4 = this->disableCollisionList->__get(n).StaticCast<  ::com::stencyl::models::Actor >();
HXLINE(2678)				if (hx::IsNotNull( a4 )) {
HXLINE(2680)					a4->handlesCollisions = false;
            				}
            			}
            		}
HXLINE(2684)		{
HXLINE(2684)			int _g11 = (int)0;
HXDLIN(2684)			int _g2 = this->animatedTiles->length;
HXDLIN(2684)			while((_g11 < _g2)){
HXLINE(2684)				_g11 = (_g11 + (int)1);
HXDLIN(2684)				int n1 = (_g11 - (int)1);
HXLINE(2686)				 ::com::stencyl::models::scene::Tile tile = this->animatedTiles->__get(n1).StaticCast<  ::com::stencyl::models::scene::Tile >();
HXLINE(2687)				tile->update(elapsedTime);
HXLINE(2688)				bool _hx_tmp13;
HXDLIN(2688)				if (!(this->tileUpdated)) {
HXLINE(2688)					_hx_tmp13 = tile->updateSource;
            				}
            				else {
HXLINE(2688)					_hx_tmp13 = true;
            				}
HXDLIN(2688)				this->tileUpdated = _hx_tmp13;
            			}
            		}
HXLINE(2691)		bool _hx_tmp14;
HXDLIN(2691)		if (hx::IsNotNull( this->leave )) {
HXLINE(2691)			_hx_tmp14 = this->leave->isActive();
            		}
            		else {
HXLINE(2691)			_hx_tmp14 = false;
            		}
HXDLIN(2691)		if (_hx_tmp14) {
HXLINE(2693)			this->leave->update(elapsedTime);
            		}
            		else {
HXLINE(2696)			bool _hx_tmp15;
HXDLIN(2696)			if (hx::IsNotNull( this->enter )) {
HXLINE(2696)				_hx_tmp15 = this->enter->isActive();
            			}
            			else {
HXLINE(2696)				_hx_tmp15 = false;
            			}
HXDLIN(2696)			if (_hx_tmp15) {
HXLINE(2698)				this->enter->update(elapsedTime);
            			}
            		}
HXLINE(2703)		{
HXLINE(2703)			::Dynamic layer = this->layers->iterator();
HXDLIN(2703)			while(::de::polygonal::ds::Itr_obj::hasNext(layer)){
HXLINE(2703)				 ::com::stencyl::models::scene::layers::RegularLayer layer1 = ( ( ::com::stencyl::models::scene::layers::RegularLayer)(::de::polygonal::ds::Itr_obj::next(layer)) );
HXLINE(2705)				layer1->updatePosition(::com::stencyl::Engine_obj::cameraX,::com::stencyl::Engine_obj::cameraY,elapsedTime);
            			}
            		}
HXLINE(2708)		bool _hx_tmp16;
HXDLIN(2708)		if (!(::com::stencyl::Engine_obj::NO_PHYSICS)) {
HXLINE(2708)			_hx_tmp16 = ::com::stencyl::Engine_obj::DEBUG_DRAW;
            		}
            		else {
HXLINE(2708)			_hx_tmp16 = false;
            		}
HXDLIN(2708)		if (_hx_tmp16) {
HXLINE(2710)			this->debugLayer->set_x(-(::com::stencyl::Engine_obj::cameraX));
HXLINE(2711)			this->debugLayer->set_y(-(::com::stencyl::Engine_obj::cameraY));
            		}
HXLINE(2715)		if (this->isShaking) {
HXLINE(2717)			 ::com::stencyl::Engine _hx_tmp17 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2717)			_hx_tmp17->shakeTimer = (_hx_tmp17->shakeTimer - ::com::stencyl::Engine_obj::STEP_SIZE);
HXLINE(2719)			if ((this->shakeTimer <= (int)0)) {
HXLINE(2721)				this->stopShakingScreen();
HXLINE(2722)				return;
            			}
HXLINE(2725)			Float randX = (-(this->shakeIntensity) * ::com::stencyl::Engine_obj::screenWidth);
HXDLIN(2725)			Float randX1 = ::Math_obj::random();
HXDLIN(2725)			Float randX2 = (randX + (randX1 * (((int)2 * this->shakeIntensity) * ::com::stencyl::Engine_obj::screenWidth)));
HXLINE(2726)			Float randY = (-(this->shakeIntensity) * ::com::stencyl::Engine_obj::screenHeight);
HXDLIN(2726)			Float randY1 = ::Math_obj::random();
HXDLIN(2726)			Float randY2 = (randY + (randY1 * (((int)2 * this->shakeIntensity) * ::com::stencyl::Engine_obj::screenHeight)));
HXLINE(2728)			 ::openfl::display::Sprite _hx_tmp18 = this->master;
HXDLIN(2728)			_hx_tmp18->set_x((randX2 * ::com::stencyl::Engine_obj::SCALE));
HXLINE(2729)			 ::openfl::display::Sprite _hx_tmp19 = this->master;
HXDLIN(2729)			_hx_tmp19->set_y((randY2 * ::com::stencyl::Engine_obj::SCALE));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,update,(void))

void Engine_obj::onUpdate( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2735_onUpdate)
HXLINE(2736)		Float currTime = ::openfl::Lib_obj::getTimer();
HXLINE(2737)		Float elapsedTime = (currTime - this->lastTime);
HXLINE(2740)		if (::com::stencyl::utils::ToolsetInterface_obj::paused) {
HXLINE(2742)			::com::stencyl::utils::ToolsetInterface_obj::pause();
            		}
HXLINE(2744)		bool _hx_tmp;
HXDLIN(2744)		if ((elapsedTime > (int)10)) {
HXLINE(2744)			_hx_tmp = ::com::stencyl::utils::ToolsetInterface_obj::wasPaused;
            		}
            		else {
HXLINE(2744)			_hx_tmp = false;
            		}
HXDLIN(2744)		if (_hx_tmp) {
HXLINE(2746)			elapsedTime = (int)10;
HXLINE(2747)			::com::stencyl::utils::ToolsetInterface_obj::wasPaused = false;
            		}
HXLINE(2753)		if ((elapsedTime >= (int)200)) {
HXLINE(2755)			elapsedTime = (int)200;
            		}
HXLINE(2758)		 ::com::stencyl::Engine _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2758)		_hx_tmp1->acc = (_hx_tmp1->acc + elapsedTime);
HXLINE(2760)		::com::stencyl::Engine_obj::elapsedTime = elapsedTime;
HXLINE(2761)		 ::Dynamic _hx_tmp2 = hx::ClassOf< ::com::stencyl::Engine >();
HXDLIN(2761)		int _hx_tmp3 = ::com::stencyl::Engine_obj::totalElapsedTime;
HXDLIN(2761)		::com::stencyl::Engine_obj::totalElapsedTime = (_hx_tmp3 + ::Std_obj::_hx_int(elapsedTime));
HXLINE(2763)		if (hx::IsNotNull( this->leave )) {
HXLINE(2770)			if (this->leave->isComplete()) {
HXLINE(2772)				this->leave->deactivate();
HXLINE(2773)				this->enterScene();
            			}
HXLINE(2776)			this->postUpdate(currTime);
HXLINE(2778)			return;
            		}
HXLINE(2781)		if (hx::IsNotNull( this->enter )) {
HXLINE(2783)			if (this->enter->isComplete()) {
HXLINE(2785)				this->enter->deactivate();
HXLINE(2786)				this->enter->cleanup();
HXLINE(2787)				this->enter = null();
            			}
            		}
HXLINE(2793)		if (this->sceneInitialized) {
HXLINE(2795)			this->postUpdate(currTime);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,onUpdate,(void))

void Engine_obj::postUpdate(Float currTime){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2800_postUpdate)
HXLINE(2801)		while((this->acc > ::com::stencyl::Engine_obj::STEP_SIZE)){
HXLINE(2803)			this->update(::com::stencyl::Engine_obj::STEP_SIZE);
HXLINE(2804)			 ::com::stencyl::Engine _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2804)			_hx_tmp->acc = (_hx_tmp->acc - ::com::stencyl::Engine_obj::STEP_SIZE);
HXLINE(2805)			::com::stencyl::Input_obj::update();
            		}
HXLINE(2808)		this->lastTime = currTime;
HXLINE(2811)		if ((this->allActors->mSize != (int)0)) {
HXLINE(2813)			::Dynamic a = this->allActors->iterator();
HXDLIN(2813)			while(::de::polygonal::ds::Itr_obj::hasNext(a)){
HXLINE(2813)				 ::com::stencyl::models::Actor a1 = ( ( ::com::stencyl::models::Actor)(::de::polygonal::ds::Itr_obj::next(a)) );
HXLINE(2815)				bool _hx_tmp1;
HXDLIN(2815)				if (hx::IsNotNull( a1 )) {
HXLINE(2815)					if ((a1->physicsMode == (int)0)) {
HXLINE(2815)						_hx_tmp1 = hx::IsNull( a1->body );
            					}
            					else {
HXLINE(2815)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(2815)					_hx_tmp1 = true;
            				}
HXDLIN(2815)				if (_hx_tmp1) {
HXLINE(2817)					continue;
            				}
HXLINE(2820)				bool _hx_tmp2;
HXDLIN(2820)				if (!(a1->dead)) {
HXLINE(2820)					_hx_tmp2 = a1->dying;
            				}
            				else {
HXLINE(2820)					_hx_tmp2 = true;
            				}
HXDLIN(2820)				if (_hx_tmp2) {
HXLINE(2822)					this->removeActor(a1);
HXLINE(2823)					continue;
            				}
            				else {
HXLINE(2826)					bool _hx_tmp3;
HXDLIN(2826)					if (!(a1->updateMatrix)) {
HXLINE(2826)						_hx_tmp3 = a1->resetOrigin;
            					}
            					else {
HXLINE(2826)						_hx_tmp3 = true;
            					}
HXDLIN(2826)					if (_hx_tmp3) {
HXLINE(2828)						a1->updateDrawingMatrix(null());
HXLINE(2829)						a1->updateMatrix = false;
HXLINE(2830)						a1->resetOrigin = false;
            					}
            					else {
HXLINE(2832)						if (a1->smoothMove) {
HXLINE(2834)							bool _hx_tmp4;
HXDLIN(2834)							if ((a1->drawX == a1->realX)) {
HXLINE(2834)								_hx_tmp4 = (a1->drawY != a1->realY);
            							}
            							else {
HXLINE(2834)								_hx_tmp4 = true;
            							}
HXDLIN(2834)							if (_hx_tmp4) {
HXLINE(2836)								a1->updateDrawingMatrix(null());
            							}
            						}
            					}
            				}
HXLINE(2840)				if (hx::IsNull( a1->body )) {
HXLINE(2842)					continue;
            				}
            			}
            		}
HXLINE(2849)		this->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,postUpdate,(void))

void Engine_obj::onFocus( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2858_onFocus)
HXDLIN(2858)		if (!(::com::stencyl::Engine_obj::inFocus)) {
HXLINE(2860)			::com::stencyl::Engine_obj::inFocus = true;
HXLINE(2861)			this->focusChanged(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,onFocus,(void))

void Engine_obj::onFocusLost( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2867_onFocusLost)
HXDLIN(2867)		if (::com::stencyl::Engine_obj::inFocus) {
HXLINE(2869)			::com::stencyl::Engine_obj::inFocus = false;
HXLINE(2870)			this->focusChanged(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,onFocusLost,(void))

void Engine_obj::focusChanged(bool lost){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2875_focusChanged)
HXLINE(2876)		if (hx::IsNull( this->whenFocusChangedListeners )) {
HXLINE(2878)			return;
            		}
HXLINE(2881)		{
HXLINE(2881)			::cpp::VirtualArray listeners = this->whenFocusChangedListeners;
HXDLIN(2881)			int r = (int)0;
HXDLIN(2881)			while((r < listeners->get_length())){
HXLINE(2881)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(2881)					 ::Dynamic f = listeners->__get(r);
HXDLIN(2881)					f(lost,listeners);
HXDLIN(2881)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(2881)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE(2881)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(2881)				r = (r + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,focusChanged,(void))

void Engine_obj::handleCollision( ::com::stencyl::models::Actor a, ::com::stencyl::models::actor::Collision event){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_2886_handleCollision)
HXLINE(2887)		int type1 = a->typeID;
HXLINE(2888)		int type2 = event->otherActor->typeID;
HXLINE(2890)		int group1 = (int)0;
HXLINE(2891)		int group2 = (int)0;
HXLINE(2893)		if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(2895)			group1 = ((int)1000000 + event->thisActor->groupID);
HXLINE(2896)			group2 = ((int)1000000 + event->otherActor->groupID);
            		}
            		else {
HXLINE(2901)			if (hx::IsNotNull( event->thisShape )) {
HXLINE(2903)				int value = event->thisShape->groupID;
HXLINE(2905)				if ((value == (int)-1000)) {
HXLINE(2907)					 ::box2D::dynamics::B2Body body = event->thisShape->getBody();
HXLINE(2909)					if (hx::IsNotNull( body )) {
HXLINE(2911)						value = body->getUserData()->groupID;
            					}
            				}
HXLINE(2915)				group1 = ((int)1000000 + value);
            			}
            			else {
HXLINE(2920)				group1 = ((int)1000000 + event->thisActor->groupID);
            			}
HXLINE(2923)			if (hx::IsNotNull( event->otherShape )) {
HXLINE(2925)				int value1 = event->otherShape->groupID;
HXLINE(2927)				if ((value1 == (int)-1000)) {
HXLINE(2929)					 ::box2D::dynamics::B2Body body1 = event->otherShape->getBody();
HXLINE(2931)					if (hx::IsNotNull( body1 )) {
HXLINE(2933)						value1 = body1->getUserData()->groupID;
            					}
            				}
HXLINE(2937)				group2 = ((int)1000000 + value1);
            			}
            			else {
HXLINE(2942)				group2 = ((int)1000000 + event->otherActor->groupID);
            			}
            		}
HXLINE(2947)		if (hx::IsNotNull( this->collisionPairs )) {
HXLINE(2949)			int key = a->ID;
HXDLIN(2949)			 ::de::polygonal::ds::IntIntHashTable _this = this->collisionPairs->mH;
HXDLIN(2949)			int i = _this->mHash->__get(((int)(key * (int)73856093) & (int)_this->mMask));
HXDLIN(2949)			bool _hx_tmp;
HXDLIN(2949)			if ((i == (int)-1)) {
HXLINE(2949)				_hx_tmp = false;
            			}
            			else {
HXLINE(2949)				::Array< int > d = _this->mData;
HXDLIN(2949)				if ((d->__get(i) == key)) {
HXLINE(2949)					_hx_tmp = true;
            				}
            				else {
HXLINE(2949)					bool exists = false;
HXDLIN(2949)					i = d->__get((i + (int)2));
HXDLIN(2949)					while((i != (int)-1)){
HXLINE(2949)						if ((d->__get(i) == key)) {
HXLINE(2949)							exists = true;
HXDLIN(2949)							goto _hx_goto_129;
            						}
HXDLIN(2949)						i = d->__get((i + (int)2));
            					}
            					_hx_goto_129:;
HXDLIN(2949)					_hx_tmp = exists;
            				}
            			}
HXDLIN(2949)			if (!(_hx_tmp)) {
HXLINE(2951)				 ::de::polygonal::ds::IntHashTable _hx_tmp1 = this->collisionPairs;
HXDLIN(2951)				int a1 = a->ID;
HXDLIN(2951)				_hx_tmp1->set(a1, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            			}
HXLINE(2954)			int key1 = event->otherActor->ID;
HXDLIN(2954)			 ::de::polygonal::ds::IntIntHashTable _this1 = this->collisionPairs->mH;
HXDLIN(2954)			int i1 = _this1->mHash->__get(((int)(key1 * (int)73856093) & (int)_this1->mMask));
HXDLIN(2954)			bool _hx_tmp2;
HXDLIN(2954)			if ((i1 == (int)-1)) {
HXLINE(2954)				_hx_tmp2 = false;
            			}
            			else {
HXLINE(2954)				::Array< int > d1 = _this1->mData;
HXDLIN(2954)				if ((d1->__get(i1) == key1)) {
HXLINE(2954)					_hx_tmp2 = true;
            				}
            				else {
HXLINE(2954)					bool exists1 = false;
HXDLIN(2954)					i1 = d1->__get((i1 + (int)2));
HXDLIN(2954)					while((i1 != (int)-1)){
HXLINE(2954)						if ((d1->__get(i1) == key1)) {
HXLINE(2954)							exists1 = true;
HXDLIN(2954)							goto _hx_goto_130;
            						}
HXDLIN(2954)						i1 = d1->__get((i1 + (int)2));
            					}
            					_hx_goto_130:;
HXDLIN(2954)					_hx_tmp2 = exists1;
            				}
            			}
HXDLIN(2954)			if (!(_hx_tmp2)) {
HXLINE(2956)				 ::de::polygonal::ds::IntHashTable _hx_tmp3 = this->collisionPairs;
HXDLIN(2956)				int event1 = event->otherActor->ID;
HXDLIN(2956)				_hx_tmp3->set(event1, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            			}
HXLINE(2959)			bool _hx_tmp4;
HXDLIN(2959)			 ::de::polygonal::ds::IntHashTable _this2 = this->collisionPairs;
HXDLIN(2959)			int key2 = a->ID;
HXDLIN(2959)			 ::de::polygonal::ds::IntIntHashTable _this3 = _this2->mH;
HXDLIN(2959)			int i2 = _this3->mHash->__get(((int)(key2 * (int)73856093) & (int)_this3->mMask));
HXDLIN(2959)			int i3;
HXDLIN(2959)			if ((i2 == (int)-1)) {
HXLINE(2959)				i3 = (int)-2147483647;
            			}
            			else {
HXLINE(2959)				::Array< int > d2 = _this3->mData;
HXDLIN(2959)				if ((d2->__get(i2) == key2)) {
HXLINE(2959)					i3 = d2->__get((i2 + (int)1));
            				}
            				else {
HXLINE(2959)					int v = (int)-2147483647;
HXDLIN(2959)					i2 = d2->__get((i2 + (int)2));
HXDLIN(2959)					while((i2 != (int)-1)){
HXLINE(2959)						if ((d2->__get(i2) == key2)) {
HXLINE(2959)							v = d2->__get((i2 + (int)1));
HXDLIN(2959)							goto _hx_goto_131;
            						}
HXDLIN(2959)						i2 = d2->__get((i2 + (int)2));
            					}
            					_hx_goto_131:;
HXDLIN(2959)					i3 = v;
            				}
            			}
HXDLIN(2959)			::Dynamic this1;
HXDLIN(2959)			if ((i3 == (int)-2147483647)) {
HXLINE(2959)				this1 = ( ( ::haxe::ds::IntMap)(null()) );
            			}
            			else {
HXLINE(2959)				this1 = Dynamic( _this2->mVals->__get(i3)).StaticCast<  ::haxe::ds::IntMap >();
            			}
HXDLIN(2959)			if (!(( ( ::haxe::ds::IntMap)(this1) )->exists(event->otherActor->ID))) {
HXLINE(2959)				 ::de::polygonal::ds::IntHashTable _this4 = this->collisionPairs;
HXDLIN(2959)				int key3 = event->otherActor->ID;
HXDLIN(2959)				 ::de::polygonal::ds::IntIntHashTable _this5 = _this4->mH;
HXDLIN(2959)				int i4 = _this5->mHash->__get(((int)(key3 * (int)73856093) & (int)_this5->mMask));
HXDLIN(2959)				int i5;
HXDLIN(2959)				if ((i4 == (int)-1)) {
HXLINE(2959)					i5 = (int)-2147483647;
            				}
            				else {
HXLINE(2959)					::Array< int > d3 = _this5->mData;
HXDLIN(2959)					if ((d3->__get(i4) == key3)) {
HXLINE(2959)						i5 = d3->__get((i4 + (int)1));
            					}
            					else {
HXLINE(2959)						int v1 = (int)-2147483647;
HXDLIN(2959)						i4 = d3->__get((i4 + (int)2));
HXDLIN(2959)						while((i4 != (int)-1)){
HXLINE(2959)							if ((d3->__get(i4) == key3)) {
HXLINE(2959)								v1 = d3->__get((i4 + (int)1));
HXDLIN(2959)								goto _hx_goto_132;
            							}
HXDLIN(2959)							i4 = d3->__get((i4 + (int)2));
            						}
            						_hx_goto_132:;
HXDLIN(2959)						i5 = v1;
            					}
            				}
HXDLIN(2959)				::Dynamic this2;
HXDLIN(2959)				if ((i5 == (int)-2147483647)) {
HXLINE(2959)					this2 = ( ( ::haxe::ds::IntMap)(null()) );
            				}
            				else {
HXLINE(2959)					this2 = Dynamic( _this4->mVals->__get(i5)).StaticCast<  ::haxe::ds::IntMap >();
            				}
HXDLIN(2959)				_hx_tmp4 = ( ( ::haxe::ds::IntMap)(this2) )->exists(a->ID);
            			}
            			else {
HXLINE(2959)				_hx_tmp4 = true;
            			}
HXDLIN(2959)			if (_hx_tmp4) {
HXLINE(2961)				return;
            			}
            		}
HXLINE(2965)		bool _hx_tmp5;
HXDLIN(2965)		if ((type1 <= (int)-1)) {
HXLINE(2965)			_hx_tmp5 = (type2 > (int)-1);
            		}
            		else {
HXLINE(2965)			_hx_tmp5 = true;
            		}
HXDLIN(2965)		if (_hx_tmp5) {
HXLINE(2967)			bool _hx_tmp6;
HXDLIN(2967)			bool _hx_tmp7;
HXDLIN(2967)			if (!(event->otherCollidedWithTerrain)) {
HXLINE(2967)				_hx_tmp7 = this->collisionListeners->exists(type1);
            			}
            			else {
HXLINE(2967)				_hx_tmp7 = false;
            			}
HXDLIN(2967)			if (_hx_tmp7) {
HXLINE(2967)				_hx_tmp6 = ( (bool)(this->collisionListeners->get(type1)->__Field(HX_("exists",dc,1d,e0,bf),hx::paccDynamic)(type2)) );
            			}
            			else {
HXLINE(2967)				_hx_tmp6 = false;
            			}
HXDLIN(2967)			if (_hx_tmp6) {
HXLINE(2969)				::cpp::VirtualArray listeners = ( (::cpp::VirtualArray)(this->collisionListeners->get(type1)->__Field(HX_("get",96,80,4e,00),hx::paccDynamic)(type2)) );
HXLINE(2970)				{
HXLINE(2970)					int r = (int)0;
HXDLIN(2970)					while((r < listeners->get_length())){
HXLINE(2970)						try {
            							HX_STACK_CATCHABLE(::String, 0);
HXLINE(2970)							 ::Dynamic f = listeners->__get(r);
HXDLIN(2970)							f(event,listeners);
HXDLIN(2970)							if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(2970)								r = (r - (int)1);
            							}
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass< ::String >() ){
            								HX_STACK_BEGIN_CATCH
            								::String e = _hx_e;
HXLINE(2970)								::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXDLIN(2970)						r = (r + (int)1);
            					}
            				}
HXLINE(2972)				if ((listeners->get_length() == (int)0)) {
HXLINE(2974)					this->collisionListeners->get(type1)->__Field(HX_("remove",44,9c,88,04),hx::paccDynamic)(type2);
            				}
            			}
HXLINE(2978)			bool _hx_tmp8;
HXDLIN(2978)			bool _hx_tmp9;
HXDLIN(2978)			if ((type1 != type2)) {
HXLINE(2978)				_hx_tmp9 = this->collisionListeners->exists(type2);
            			}
            			else {
HXLINE(2978)				_hx_tmp9 = false;
            			}
HXDLIN(2978)			if (_hx_tmp9) {
HXLINE(2978)				_hx_tmp8 = ( (bool)(this->collisionListeners->get(type2)->__Field(HX_("exists",dc,1d,e0,bf),hx::paccDynamic)(type1)) );
            			}
            			else {
HXLINE(2978)				_hx_tmp8 = false;
            			}
HXDLIN(2978)			if (_hx_tmp8) {
HXLINE(2980)				::cpp::VirtualArray listeners1 = ( (::cpp::VirtualArray)(this->collisionListeners->get(type2)->__Field(HX_("get",96,80,4e,00),hx::paccDynamic)(type1)) );
HXLINE(2981)				 ::com::stencyl::models::actor::Collision reverseEvent = event->switchData(::com::stencyl::models::actor::Collision_obj::get());
HXLINE(2983)				{
HXLINE(2983)					int r1 = (int)0;
HXDLIN(2983)					while((r1 < listeners1->get_length())){
HXLINE(2983)						try {
            							HX_STACK_CATCHABLE(::String, 0);
HXLINE(2983)							 ::Dynamic f1 = listeners1->__get(r1);
HXDLIN(2983)							f1(reverseEvent,listeners1);
HXDLIN(2983)							if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f1) == (int)-1)) {
HXLINE(2983)								r1 = (r1 - (int)1);
            							}
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass< ::String >() ){
            								HX_STACK_BEGIN_CATCH
            								::String e1 = _hx_e;
HXLINE(2983)								::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXDLIN(2983)						r1 = (r1 + (int)1);
            					}
            				}
HXLINE(2985)				if ((listeners1->get_length() == (int)0)) {
HXLINE(2987)					this->collisionListeners->get(type2)->__Field(HX_("remove",44,9c,88,04),hx::paccDynamic)(type1);
            				}
            			}
            		}
HXLINE(2992)		bool _hx_tmp10;
HXDLIN(2992)		if ((group1 > (int)0)) {
HXLINE(2992)			_hx_tmp10 = (group2 > (int)0);
            		}
            		else {
HXLINE(2992)			_hx_tmp10 = false;
            		}
HXDLIN(2992)		if (_hx_tmp10) {
HXLINE(2994)			bool _hx_tmp11;
HXDLIN(2994)			if (this->collisionListeners->exists(group1)) {
HXLINE(2994)				_hx_tmp11 = ( (bool)(this->collisionListeners->get(group1)->__Field(HX_("exists",dc,1d,e0,bf),hx::paccDynamic)(group2)) );
            			}
            			else {
HXLINE(2994)				_hx_tmp11 = false;
            			}
HXDLIN(2994)			if (_hx_tmp11) {
HXLINE(2996)				::cpp::VirtualArray listeners2 = ( (::cpp::VirtualArray)(this->collisionListeners->get(group1)->__Field(HX_("get",96,80,4e,00),hx::paccDynamic)(group2)) );
HXLINE(2997)				{
HXLINE(2997)					int r2 = (int)0;
HXDLIN(2997)					while((r2 < listeners2->get_length())){
HXLINE(2997)						try {
            							HX_STACK_CATCHABLE(::String, 0);
HXLINE(2997)							 ::Dynamic f2 = listeners2->__get(r2);
HXDLIN(2997)							f2(event,listeners2);
HXDLIN(2997)							if ((::com::stencyl::utils::Utils_obj::indexOf(listeners2,f2) == (int)-1)) {
HXLINE(2997)								r2 = (r2 - (int)1);
            							}
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass< ::String >() ){
            								HX_STACK_BEGIN_CATCH
            								::String e2 = _hx_e;
HXLINE(2997)								::haxe::Log_obj::trace(e2,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXDLIN(2997)						r2 = (r2 + (int)1);
            					}
            				}
HXLINE(2999)				if ((listeners2->get_length() == (int)0)) {
HXLINE(3001)					this->collisionListeners->get(group1)->__Field(HX_("remove",44,9c,88,04),hx::paccDynamic)(group2);
            				}
            			}
HXLINE(3005)			bool _hx_tmp12;
HXDLIN(3005)			bool _hx_tmp13;
HXDLIN(3005)			if ((group1 != group2)) {
HXLINE(3005)				_hx_tmp13 = this->collisionListeners->exists(group2);
            			}
            			else {
HXLINE(3005)				_hx_tmp13 = false;
            			}
HXDLIN(3005)			if (_hx_tmp13) {
HXLINE(3005)				_hx_tmp12 = ( (bool)(this->collisionListeners->get(group2)->__Field(HX_("exists",dc,1d,e0,bf),hx::paccDynamic)(group1)) );
            			}
            			else {
HXLINE(3005)				_hx_tmp12 = false;
            			}
HXDLIN(3005)			if (_hx_tmp12) {
HXLINE(3007)				::cpp::VirtualArray listeners3 = ( (::cpp::VirtualArray)(this->collisionListeners->get(group2)->__Field(HX_("get",96,80,4e,00),hx::paccDynamic)(group1)) );
HXLINE(3008)				 ::com::stencyl::models::actor::Collision reverseEvent1 = event->switchData(::com::stencyl::models::actor::Collision_obj::get());
HXLINE(3010)				{
HXLINE(3010)					int r3 = (int)0;
HXDLIN(3010)					while((r3 < listeners3->get_length())){
HXLINE(3010)						try {
            							HX_STACK_CATCHABLE(::String, 0);
HXLINE(3010)							 ::Dynamic f3 = listeners3->__get(r3);
HXDLIN(3010)							f3(reverseEvent1,listeners3);
HXDLIN(3010)							if ((::com::stencyl::utils::Utils_obj::indexOf(listeners3,f3) == (int)-1)) {
HXLINE(3010)								r3 = (r3 - (int)1);
            							}
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass< ::String >() ){
            								HX_STACK_BEGIN_CATCH
            								::String e3 = _hx_e;
HXLINE(3010)								::haxe::Log_obj::trace(e3,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXDLIN(3010)						r3 = (r3 + (int)1);
            					}
            				}
HXLINE(3012)				if ((listeners3->get_length() == (int)0)) {
HXLINE(3014)					this->collisionListeners->get(group2)->__Field(HX_("remove",44,9c,88,04),hx::paccDynamic)(group1);
            				}
            			}
            		}
HXLINE(3020)		if (hx::IsNotNull( this->collisionPairs )) {
HXLINE(3022)			{
HXLINE(3022)				 ::de::polygonal::ds::IntHashTable _this6 = this->collisionPairs;
HXDLIN(3022)				int key4 = a->ID;
HXDLIN(3022)				 ::de::polygonal::ds::IntIntHashTable _this7 = _this6->mH;
HXDLIN(3022)				int i6 = _this7->mHash->__get(((int)(key4 * (int)73856093) & (int)_this7->mMask));
HXDLIN(3022)				int i7;
HXDLIN(3022)				if ((i6 == (int)-1)) {
HXLINE(3022)					i7 = (int)-2147483647;
            				}
            				else {
HXLINE(3022)					::Array< int > d4 = _this7->mData;
HXDLIN(3022)					if ((d4->__get(i6) == key4)) {
HXLINE(3022)						i7 = d4->__get((i6 + (int)1));
            					}
            					else {
HXLINE(3022)						int v2 = (int)-2147483647;
HXDLIN(3022)						i6 = d4->__get((i6 + (int)2));
HXDLIN(3022)						while((i6 != (int)-1)){
HXLINE(3022)							if ((d4->__get(i6) == key4)) {
HXLINE(3022)								v2 = d4->__get((i6 + (int)1));
HXDLIN(3022)								goto _hx_goto_137;
            							}
HXDLIN(3022)							i6 = d4->__get((i6 + (int)2));
            						}
            						_hx_goto_137:;
HXDLIN(3022)						i7 = v2;
            					}
            				}
HXDLIN(3022)				::Dynamic this3;
HXDLIN(3022)				if ((i7 == (int)-2147483647)) {
HXLINE(3022)					this3 = ( ( ::haxe::ds::IntMap)(null()) );
            				}
            				else {
HXLINE(3022)					this3 = Dynamic( _this6->mVals->__get(i7)).StaticCast<  ::haxe::ds::IntMap >();
            				}
HXDLIN(3022)				( ( ::haxe::ds::IntMap)(this3) )->set(event->otherActor->ID,false);
            			}
HXLINE(3023)			{
HXLINE(3023)				 ::de::polygonal::ds::IntHashTable _this8 = this->collisionPairs;
HXDLIN(3023)				int key5 = event->otherActor->ID;
HXDLIN(3023)				 ::de::polygonal::ds::IntIntHashTable _this9 = _this8->mH;
HXDLIN(3023)				int i8 = _this9->mHash->__get(((int)(key5 * (int)73856093) & (int)_this9->mMask));
HXDLIN(3023)				int i9;
HXDLIN(3023)				if ((i8 == (int)-1)) {
HXLINE(3023)					i9 = (int)-2147483647;
            				}
            				else {
HXLINE(3023)					::Array< int > d5 = _this9->mData;
HXDLIN(3023)					if ((d5->__get(i8) == key5)) {
HXLINE(3023)						i9 = d5->__get((i8 + (int)1));
            					}
            					else {
HXLINE(3023)						int v3 = (int)-2147483647;
HXDLIN(3023)						i8 = d5->__get((i8 + (int)2));
HXDLIN(3023)						while((i8 != (int)-1)){
HXLINE(3023)							if ((d5->__get(i8) == key5)) {
HXLINE(3023)								v3 = d5->__get((i8 + (int)1));
HXDLIN(3023)								goto _hx_goto_138;
            							}
HXDLIN(3023)							i8 = d5->__get((i8 + (int)2));
            						}
            						_hx_goto_138:;
HXDLIN(3023)						i9 = v3;
            					}
            				}
HXDLIN(3023)				::Dynamic this4;
HXDLIN(3023)				if ((i9 == (int)-2147483647)) {
HXLINE(3023)					this4 = ( ( ::haxe::ds::IntMap)(null()) );
            				}
            				else {
HXLINE(3023)					this4 = Dynamic( _this8->mVals->__get(i9)).StaticCast<  ::haxe::ds::IntMap >();
            				}
HXDLIN(3023)				( ( ::haxe::ds::IntMap)(this4) )->set(a->ID,false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,handleCollision,(void))

void Engine_obj::soundFinished(int channelNum){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3028_soundFinished)
HXLINE(3029)		 ::com::stencyl::models::SoundChannel sc = this->channels->__get(channelNum).StaticCast<  ::com::stencyl::models::SoundChannel >();
HXLINE(3031)		if (hx::IsNotNull( this->soundListeners )) {
HXLINE(3033)			 ::Dynamic clipListeners = this->soundListeners->get(sc->currentClip);
HXLINE(3035)			sc->currentSound = null();
HXLINE(3037)			if (hx::IsNotNull( clipListeners )) {
HXLINE(3039)				::cpp::VirtualArray listeners = ( (::cpp::VirtualArray)(clipListeners) );
HXDLIN(3039)				int r = (int)0;
HXDLIN(3039)				while((r < listeners->get_length())){
HXLINE(3039)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE(3039)						 ::Dynamic f = listeners->__get(r);
HXDLIN(3039)						f(listeners);
HXDLIN(3039)						if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(3039)							r = (r - (int)1);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String e = _hx_e;
HXLINE(3039)							::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXDLIN(3039)					r = (r + (int)1);
            				}
            			}
            		}
            		else {
HXLINE(3044)			sc->currentSound = null();
            		}
HXLINE(3047)		if (hx::IsNotNull( this->channelListeners )) {
HXLINE(3049)			 ::Dynamic chanListeners = this->channelListeners->get(channelNum);
HXLINE(3051)			if (hx::IsNotNull( chanListeners )) {
HXLINE(3053)				::cpp::VirtualArray listeners1 = ( (::cpp::VirtualArray)(chanListeners) );
HXDLIN(3053)				int r1 = (int)0;
HXDLIN(3053)				while((r1 < listeners1->get_length())){
HXLINE(3053)					try {
            						HX_STACK_CATCHABLE(::String, 0);
HXLINE(3053)						 ::Dynamic f1 = listeners1->__get(r1);
HXDLIN(3053)						f1(listeners1);
HXDLIN(3053)						if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f1) == (int)-1)) {
HXLINE(3053)							r1 = (r1 - (int)1);
            						}
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass< ::String >() ){
            							HX_STACK_BEGIN_CATCH
            							::String e1 = _hx_e;
HXLINE(3053)							::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXDLIN(3053)					r1 = (r1 + (int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,soundFinished,(void))

void Engine_obj::addTask( ::com::stencyl::behavior::TimedTask task){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3064_addTask)
HXDLIN(3064)		this->tasks->push(task);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,addTask,(void))

void Engine_obj::removeTask( ::com::stencyl::behavior::TimedTask taskToRemove){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3069_removeTask)
HXDLIN(3069)		this->tasks->remove(taskToRemove);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,removeTask,(void))

void Engine_obj::shakeScreen(Float intensity,Float duration){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3077_shakeScreen)
HXLINE(3078)		this->shakeTimer = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::MS_PER_SEC * duration));
HXLINE(3079)		this->isShaking = true;
HXLINE(3080)		this->shakeIntensity = intensity;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,shakeScreen,(void))

void Engine_obj::stopShakingScreen(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3084_stopShakingScreen)
HXLINE(3085)		this->shakeTimer = (int)0;
HXLINE(3086)		this->isShaking = false;
HXLINE(3088)		this->master->set_x((int)0);
HXLINE(3089)		this->master->set_y((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,stopShakingScreen,(void))

void Engine_obj::cameraFollow( ::com::stencyl::models::Actor actor,hx::Null< bool >  __o_lockX,hx::Null< bool >  __o_lockY){
bool lockX = __o_lockX.Default(true);
bool lockY = __o_lockY.Default(true);
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3098_cameraFollow)
HXLINE(3100)		Float actor1 = actor->colX;
HXDLIN(3100)		Float _hx_tmp = (actor1 + ((Float)actor->cacheWidth / (Float)(int)2));
HXLINE(3101)		Float actor2 = actor->colY;
HXLINE(3098)		this->moveCamera(_hx_tmp,(actor2 + ((Float)actor->cacheHeight / (Float)(int)2)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Engine_obj,cameraFollow,(void))

void Engine_obj::moveCamera(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3106_moveCamera)
HXLINE(3107)		this->camera->setLocation(x,y);
HXLINE(3109)		::com::stencyl::Engine_obj::cameraX = (this->camera->realX - ::com::stencyl::Engine_obj::screenWidthHalf);
HXLINE(3110)		::com::stencyl::Engine_obj::cameraY = (this->camera->realY - ::com::stencyl::Engine_obj::screenHeightHalf);
HXLINE(3113)		if (::com::stencyl::Engine_obj::limitCameraToScene) {
HXLINE(3115)			::com::stencyl::Engine_obj::cameraX = ::Math_obj::max((int)0,::Math_obj::min((::com::stencyl::Engine_obj::sceneWidth - ::com::stencyl::Engine_obj::screenWidth),::com::stencyl::Engine_obj::cameraX));
HXLINE(3116)			::com::stencyl::Engine_obj::cameraY = ::Math_obj::max((int)0,::Math_obj::min((::com::stencyl::Engine_obj::sceneHeight - ::com::stencyl::Engine_obj::screenHeight),::com::stencyl::Engine_obj::cameraY));
            		}
HXLINE(3119)		 ::Dynamic _hx_tmp = hx::ClassOf< ::com::stencyl::Engine >();
HXDLIN(3119)		::com::stencyl::Engine_obj::cameraX = (::com::stencyl::Engine_obj::cameraX * ::com::stencyl::Engine_obj::SCALE);
HXLINE(3120)		 ::Dynamic _hx_tmp1 = hx::ClassOf< ::com::stencyl::Engine >();
HXDLIN(3120)		::com::stencyl::Engine_obj::cameraY = (::com::stencyl::Engine_obj::cameraY * ::com::stencyl::Engine_obj::SCALE);
HXLINE(3123)		bool _hx_tmp2;
HXDLIN(3123)		if ((this->zoomMultiplier != ((Float)1.0))) {
HXLINE(3123)			_hx_tmp2 = this->isHUDZoomable;
            		}
            		else {
HXLINE(3123)			_hx_tmp2 = false;
            		}
HXDLIN(3123)		if (_hx_tmp2) {
HXLINE(3125)			 ::com::stencyl::models::scene::Layer _hx_tmp3 = this->hudLayer;
HXDLIN(3125)			_hx_tmp3->set_x(-(::com::stencyl::behavior::Script_obj::getScreenX()));
HXLINE(3126)			 ::com::stencyl::models::scene::Layer _hx_tmp4 = this->hudLayer;
HXDLIN(3126)			_hx_tmp4->set_y(-(::com::stencyl::behavior::Script_obj::getScreenY()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,moveCamera,(void))

void Engine_obj::setZoom(Float m,hx::Null< bool >  __o_changeSize){
bool changeSize = __o_changeSize.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3131_setZoom)
HXLINE(3132)		if ((m <= (int)0)) {
HXLINE(3134)			::haxe::Log_obj::trace(HX_("You cannot set Zoom less than or equal to 0",29,81,a0,1f),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),3134,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("setZoom",d5,e3,7c,16)));
HXLINE(3135)			return;
            		}
HXLINE(3138)		this->zoomMultiplier = m;
HXLINE(3140)		 ::Universal _hx_tmp = this->root;
HXDLIN(3140)		_hx_tmp->set_scaleX((::com::stencyl::Engine_obj::screenScaleX = (m * ::com::stencyl::Engine_obj::unzoomedScaleX)));
HXLINE(3141)		 ::Universal _hx_tmp1 = this->root;
HXDLIN(3141)		_hx_tmp1->set_scaleY((::com::stencyl::Engine_obj::screenScaleY = (m * ::com::stencyl::Engine_obj::unzoomedScaleY)));
HXLINE(3143)		if (changeSize) {
HXLINE(3145)			Float _hx_tmp2 = ::Universal_obj::logicalWidth;
HXDLIN(3145)			::com::stencyl::Engine_obj::screenWidth = ::Std_obj::_hx_int((_hx_tmp2 * ((Float)(int)1 / (Float)m)));
HXLINE(3146)			::com::stencyl::Engine_obj::screenWidthHalf = ::Std_obj::_hx_int(((Float)::com::stencyl::Engine_obj::screenWidth / (Float)(int)2));
HXLINE(3147)			Float _hx_tmp3 = ::Universal_obj::logicalHeight;
HXDLIN(3147)			::com::stencyl::Engine_obj::screenHeight = ::Std_obj::_hx_int((_hx_tmp3 * ((Float)(int)1 / (Float)m)));
HXLINE(3148)			::com::stencyl::Engine_obj::screenHeightHalf = ::Std_obj::_hx_int(((Float)::com::stencyl::Engine_obj::screenHeight / (Float)(int)2));
            		}
HXLINE(3151)		this->setColorBackground(this->scene->colorBackground);
HXLINE(3152)		 ::Universal _hx_tmp4 = this->root;
HXDLIN(3152)		Float _hx_tmp5 = (::com::stencyl::Engine_obj::screenWidth * ::com::stencyl::Engine_obj::SCALE);
HXDLIN(3152)		_hx_tmp4->set_scrollRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,_hx_tmp5,(::com::stencyl::Engine_obj::screenHeight * ::com::stencyl::Engine_obj::SCALE)));
HXLINE(3153)		this->moveCamera(this->camera->realX,this->camera->realY);
HXLINE(3155)		if (!(this->isHUDZoomable)) {
HXLINE(3157)			 ::com::stencyl::models::scene::Layer _hx_tmp6 = this->hudLayer;
HXDLIN(3157)			_hx_tmp6->set_scaleX(((Float)(int)1 / (Float)m));
HXLINE(3158)			 ::com::stencyl::models::scene::Layer _hx_tmp7 = this->hudLayer;
HXDLIN(3158)			_hx_tmp7->set_scaleY(((Float)(int)1 / (Float)m));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,setZoom,(void))

void Engine_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3167_pause)
HXLINE(3168)		if (this->isTransitioning()) {
HXLINE(3170)			return;
            		}
HXLINE(3173)		::com::stencyl::Engine_obj::paused = true;
HXLINE(3175)		if ((this->allActors->mSize != (int)0)) {
HXLINE(3177)			::Dynamic actorID = this->allActors->keys();
HXDLIN(3177)			while(::de::polygonal::ds::Itr_obj::hasNext(actorID)){
HXLINE(3177)				int actorID1 = ( (int)(::de::polygonal::ds::Itr_obj::next(actorID)) );
HXLINE(3179)				 ::de::polygonal::ds::IntHashTable _this = this->allActors;
HXDLIN(3179)				 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(3179)				int i = _this1->mHash->__get(((int)(actorID1 * (int)73856093) & (int)_this1->mMask));
HXDLIN(3179)				int i1;
HXDLIN(3179)				if ((i == (int)-1)) {
HXLINE(3179)					i1 = (int)-2147483647;
            				}
            				else {
HXLINE(3179)					::Array< int > d = _this1->mData;
HXDLIN(3179)					if ((d->__get(i) == actorID1)) {
HXLINE(3179)						i1 = d->__get((i + (int)1));
            					}
            					else {
HXLINE(3179)						int v = (int)-2147483647;
HXDLIN(3179)						i = d->__get((i + (int)2));
HXDLIN(3179)						while((i != (int)-1)){
HXLINE(3179)							if ((d->__get(i) == actorID1)) {
HXLINE(3179)								v = d->__get((i + (int)1));
HXDLIN(3179)								goto _hx_goto_151;
            							}
HXDLIN(3179)							i = d->__get((i + (int)2));
            						}
            						_hx_goto_151:;
HXDLIN(3179)						i1 = v;
            					}
            				}
HXDLIN(3179)				 ::com::stencyl::models::Actor a;
HXDLIN(3179)				if ((i1 == (int)-2147483647)) {
HXLINE(3179)					a = ( ( ::com::stencyl::models::Actor)(null()) );
            				}
            				else {
HXLINE(3179)					a = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::Actor >();
            				}
HXLINE(3181)				if (hx::IsNotNull( a )) {
HXLINE(3183)					a->pause();
            				}
            			}
            		}
HXLINE(3188)		{
HXLINE(3188)			::cpp::VirtualArray listeners = this->whenPausedListeners;
HXDLIN(3188)			int r = (int)0;
HXDLIN(3188)			while((r < listeners->get_length())){
HXLINE(3188)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3188)					 ::Dynamic f = listeners->__get(r);
HXDLIN(3188)					f(true,listeners);
HXDLIN(3188)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(3188)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE(3188)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(3188)				r = (r + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,pause,(void))

void Engine_obj::unpause(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3192_unpause)
HXLINE(3193)		::com::stencyl::Engine_obj::paused = false;
HXLINE(3195)		if ((this->allActors->mSize != (int)0)) {
HXLINE(3197)			::Dynamic actorID = this->allActors->keys();
HXDLIN(3197)			while(::de::polygonal::ds::Itr_obj::hasNext(actorID)){
HXLINE(3197)				int actorID1 = ( (int)(::de::polygonal::ds::Itr_obj::next(actorID)) );
HXLINE(3199)				 ::de::polygonal::ds::IntHashTable _this = this->allActors;
HXDLIN(3199)				 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(3199)				int i = _this1->mHash->__get(((int)(actorID1 * (int)73856093) & (int)_this1->mMask));
HXDLIN(3199)				int i1;
HXDLIN(3199)				if ((i == (int)-1)) {
HXLINE(3199)					i1 = (int)-2147483647;
            				}
            				else {
HXLINE(3199)					::Array< int > d = _this1->mData;
HXDLIN(3199)					if ((d->__get(i) == actorID1)) {
HXLINE(3199)						i1 = d->__get((i + (int)1));
            					}
            					else {
HXLINE(3199)						int v = (int)-2147483647;
HXDLIN(3199)						i = d->__get((i + (int)2));
HXDLIN(3199)						while((i != (int)-1)){
HXLINE(3199)							if ((d->__get(i) == actorID1)) {
HXLINE(3199)								v = d->__get((i + (int)1));
HXDLIN(3199)								goto _hx_goto_155;
            							}
HXDLIN(3199)							i = d->__get((i + (int)2));
            						}
            						_hx_goto_155:;
HXDLIN(3199)						i1 = v;
            					}
            				}
HXDLIN(3199)				 ::com::stencyl::models::Actor a;
HXDLIN(3199)				if ((i1 == (int)-2147483647)) {
HXLINE(3199)					a = ( ( ::com::stencyl::models::Actor)(null()) );
            				}
            				else {
HXLINE(3199)					a = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::Actor >();
            				}
HXLINE(3201)				if (hx::IsNotNull( a )) {
HXLINE(3203)					a->unpause();
            				}
            			}
            		}
HXLINE(3208)		{
HXLINE(3208)			::cpp::VirtualArray listeners = this->whenPausedListeners;
HXDLIN(3208)			int r = (int)0;
HXDLIN(3208)			while((r < listeners->get_length())){
HXLINE(3208)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3208)					 ::Dynamic f = listeners->__get(r);
HXDLIN(3208)					f(false,listeners);
HXDLIN(3208)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(3208)						r = (r - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e = _hx_e;
HXLINE(3208)						::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(3208)				r = (r + (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,unpause,(void))

bool Engine_obj::isPaused(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3213_isPaused)
HXDLIN(3213)		return ::com::stencyl::Engine_obj::paused;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,isPaused,return )

void Engine_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3248_draw)
HXLINE(3249)		{
HXLINE(3249)			int _g = (int)0;
HXDLIN(3249)			::Array< ::Dynamic> _g1 = this->interactiveLayers;
HXDLIN(3249)			while((_g < _g1->length)){
HXLINE(3249)				 ::com::stencyl::models::scene::Layer l = _g1->__get(_g).StaticCast<  ::com::stencyl::models::scene::Layer >();
HXDLIN(3249)				_g = (_g + (int)1);
HXLINE(3251)				l->overlay->get_graphics()->clear();
            			}
            		}
HXLINE(3253)		this->hudLayer->overlay->get_graphics()->clear();
HXLINE(3255)		this->g->graphics = this->transitionLayer->get_graphics();
HXLINE(3256)		this->g->graphics->clear();
HXLINE(3257)		{
HXLINE(3257)			 ::com::stencyl::graphics::G _this = this->g;
HXDLIN(3257)			_this->alpha = (int)1;
HXDLIN(3257)			_this->strokeSize = (int)0;
HXDLIN(3257)			_this->fillColor = (int)0;
HXDLIN(3257)			_this->strokeColor = (int)0;
HXDLIN(3257)			_this->font = _this->defaultFont;
            		}
HXLINE(3261)		if ((this->allActors->mSize != (int)0)) {
HXLINE(3263)			::Dynamic a = this->allActors->iterator();
HXDLIN(3263)			while(::de::polygonal::ds::Itr_obj::hasNext(a)){
HXLINE(3263)				 ::com::stencyl::models::Actor a1 = ( ( ::com::stencyl::models::Actor)(::de::polygonal::ds::Itr_obj::next(a)) );
HXLINE(3265)				if ((a1->whenDrawingListeners->get_length() > (int)0)) {
HXLINE(3267)					if (hx::IsNotNull( a1->layer )) {
HXLINE(3269)						this->g->graphics = a1->layer->overlay->get_graphics();
HXLINE(3270)						{
HXLINE(3270)							 ::com::stencyl::graphics::G _this1 = this->g;
HXDLIN(3270)							_this1->drawActor = true;
HXDLIN(3270)							_this1->actor = a1;
HXDLIN(3270)							if (a1->smoothMove) {
HXLINE(3270)								Float a2 = a1->drawX;
HXDLIN(3270)								Float drawX = ((a2 - ::Math_obj::floor(((Float)a1->cacheWidth / (Float)(int)2))) - a1->currOffset->x);
HXDLIN(3270)								Float a3 = a1->drawY;
HXDLIN(3270)								Float drawY = ((a3 - ::Math_obj::floor(((Float)a1->cacheHeight / (Float)(int)2))) - a1->currOffset->y);
HXDLIN(3270)								if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(3270)									_this1->x = (drawX * _this1->scaleX);
HXDLIN(3270)									_this1->y = (drawY * _this1->scaleY);
            								}
            								else {
HXLINE(3270)									_this1->x = (drawX * _this1->scaleX);
HXDLIN(3270)									_this1->y = (drawY * _this1->scaleY);
            								}
            							}
            							else {
HXLINE(3270)								if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(3270)									_this1->x = (a1->colX * _this1->scaleX);
HXDLIN(3270)									_this1->y = (a1->colY * _this1->scaleY);
            								}
            								else {
HXLINE(3270)									_this1->x = (a1->colX * _this1->scaleX);
HXDLIN(3270)									_this1->y = (a1->colY * _this1->scaleY);
            								}
            							}
            						}
HXLINE(3271)						{
HXLINE(3271)							 ::com::stencyl::graphics::G _this2 = this->g;
HXDLIN(3271)							_this2->alpha = (int)1;
HXDLIN(3271)							_this2->strokeSize = (int)0;
HXDLIN(3271)							_this2->fillColor = (int)0;
HXDLIN(3271)							_this2->strokeColor = (int)0;
HXDLIN(3271)							_this2->font = _this2->defaultFont;
            						}
HXLINE(3273)						{
HXLINE(3273)							::cpp::VirtualArray listeners = a1->whenDrawingListeners;
HXDLIN(3273)							 ::Dynamic value = this->g;
HXDLIN(3273)							int r = (int)0;
HXDLIN(3273)							while((r < listeners->get_length())){
HXLINE(3273)								try {
            									HX_STACK_CATCHABLE(::String, 0);
HXLINE(3273)									 ::Dynamic f = listeners->__get(r);
HXDLIN(3273)									f(value,(int)0,(int)0,listeners);
HXDLIN(3273)									if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(3273)										r = (r - (int)1);
            									}
            								}
            								catch( ::Dynamic _hx_e){
            									if (_hx_e.IsClass< ::String >() ){
            										HX_STACK_BEGIN_CATCH
            										::String e = _hx_e;
HXLINE(3273)										::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4282,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners4",6d,eb,b8,23)));
            									}
            									else {
            										HX_STACK_DO_THROW(_hx_e);
            									}
            								}
HXDLIN(3273)								r = (r + (int)1);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(3282)		{
HXLINE(3282)			int _g2 = (int)0;
HXDLIN(3282)			::Array< ::Dynamic> _g11 = this->interactiveLayers;
HXDLIN(3282)			while((_g2 < _g11->length)){
HXLINE(3282)				 ::com::stencyl::models::scene::Layer layer = _g11->__get(_g2).StaticCast<  ::com::stencyl::models::scene::Layer >();
HXDLIN(3282)				_g2 = (_g2 + (int)1);
HXLINE(3284)				bool _hx_tmp;
HXDLIN(3284)				if (!(layer->cameraMoved)) {
HXLINE(3284)					_hx_tmp = this->tileUpdated;
            				}
            				else {
HXLINE(3284)					_hx_tmp = true;
            				}
HXDLIN(3284)				if (_hx_tmp) {
HXLINE(3286)					 ::com::stencyl::models::scene::TileLayer layer1 = layer->tiles;
HXDLIN(3286)					int _hx_tmp1 = ::Std_obj::_hx_int((::com::stencyl::Engine_obj::cameraX * layer->scrollFactorX));
HXDLIN(3286)					layer1->draw(_hx_tmp1,::Std_obj::_hx_int((::com::stencyl::Engine_obj::cameraY * layer->scrollFactorY)));
HXLINE(3287)					layer->cameraMoved = false;
            				}
            			}
            		}
HXLINE(3291)		this->tileUpdated = false;
HXLINE(3295)		this->g->graphics = this->transitionLayer->get_graphics();
HXLINE(3296)		{
HXLINE(3296)			 ::com::stencyl::graphics::G _this3 = this->g;
HXDLIN(3296)			_this3->drawActor = false;
HXDLIN(3296)			_this3->actor = null();
HXDLIN(3296)			_this3->x = (int)0;
HXDLIN(3296)			_this3->y = (int)0;
            		}
HXLINE(3297)		{
HXLINE(3297)			 ::com::stencyl::graphics::G _this4 = this->g;
HXDLIN(3297)			_this4->alpha = (int)1;
HXDLIN(3297)			_this4->strokeSize = (int)0;
HXDLIN(3297)			_this4->fillColor = (int)0;
HXDLIN(3297)			_this4->strokeColor = (int)0;
HXDLIN(3297)			_this4->font = _this4->defaultFont;
            		}
HXLINE(3298)		{
HXLINE(3298)			::cpp::VirtualArray listeners1 = this->whenDrawingListeners;
HXDLIN(3298)			 ::Dynamic value1 = this->g;
HXDLIN(3298)			int r1 = (int)0;
HXDLIN(3298)			while((r1 < listeners1->get_length())){
HXLINE(3298)				try {
            					HX_STACK_CATCHABLE(::String, 0);
HXLINE(3298)					 ::Dynamic f1 = listeners1->__get(r1);
HXDLIN(3298)					f1(value1,(int)0,(int)0,listeners1);
HXDLIN(3298)					if ((::com::stencyl::utils::Utils_obj::indexOf(listeners1,f1) == (int)-1)) {
HXLINE(3298)						r1 = (r1 - (int)1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass< ::String >() ){
            						HX_STACK_BEGIN_CATCH
            						::String e1 = _hx_e;
HXLINE(3298)						::haxe::Log_obj::trace(e1,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4282,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners4",6d,eb,b8,23)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(3298)				r1 = (r1 + (int)1);
            			}
            		}
HXLINE(3300)		::com::stencyl::graphics::G_obj::visitStringCache();
HXLINE(3303)		bool _hx_tmp2;
HXDLIN(3303)		if (hx::IsNotNull( this->leave )) {
HXLINE(3303)			_hx_tmp2 = this->leave->isActive();
            		}
            		else {
HXLINE(3303)			_hx_tmp2 = false;
            		}
HXDLIN(3303)		if (_hx_tmp2) {
HXLINE(3306)			this->leave->draw(null());
            		}
            		else {
HXLINE(3309)			bool _hx_tmp3;
HXDLIN(3309)			if (hx::IsNotNull( this->enter )) {
HXLINE(3309)				_hx_tmp3 = this->enter->isActive();
            			}
            			else {
HXLINE(3309)				_hx_tmp3 = false;
            			}
HXDLIN(3309)			if (_hx_tmp3) {
HXLINE(3311)				this->enter->draw(null());
            			}
            		}
HXLINE(3315)		bool _hx_tmp4;
HXDLIN(3315)		if (hx::IsNotNull( this->shaders )) {
HXLINE(3315)			_hx_tmp4 = (this->shaders->length > (int)0);
            		}
            		else {
HXLINE(3315)			_hx_tmp4 = false;
            		}
HXDLIN(3315)		if (_hx_tmp4) {
HXLINE(3318)			this->shaders->__get((int)0).StaticCast<  ::com::stencyl::graphics::shaders::PostProcess >()->capture();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,draw,(void))

 ::Dynamic Engine_obj::getValue(::String behaviorName,::String attributeName){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3329_getValue)
HXDLIN(3329)		return this->behaviors->getAttribute(behaviorName,attributeName);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,getValue,return )

void Engine_obj::setValue(::String behaviorName,::String attributeName, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3334_setValue)
HXDLIN(3334)		this->behaviors->setAttribute(behaviorName,attributeName,value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Engine_obj,setValue,(void))

 ::Dynamic Engine_obj::say(::String behaviorName,::String msg,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3339_say)
HXDLIN(3339)		return this->behaviors->call2(behaviorName,msg,args);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Engine_obj,say,return )

 ::Dynamic Engine_obj::shout(::String msg,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3344_shout)
HXDLIN(3344)		return this->behaviors->call(msg,args);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,shout,return )

 ::com::stencyl::models::Actor Engine_obj::getActor(int ID){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3353_getActor)
HXDLIN(3353)		 ::de::polygonal::ds::IntHashTable _this = this->allActors;
HXDLIN(3353)		 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(3353)		int i = _this1->mHash->__get(((int)(ID * (int)73856093) & (int)_this1->mMask));
HXDLIN(3353)		int i1;
HXDLIN(3353)		if ((i == (int)-1)) {
HXDLIN(3353)			i1 = (int)-2147483647;
            		}
            		else {
HXDLIN(3353)			::Array< int > d = _this1->mData;
HXDLIN(3353)			if ((d->__get(i) == ID)) {
HXDLIN(3353)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXDLIN(3353)				int v = (int)-2147483647;
HXDLIN(3353)				i = d->__get((i + (int)2));
HXDLIN(3353)				while((i != (int)-1)){
HXDLIN(3353)					if ((d->__get(i) == ID)) {
HXDLIN(3353)						v = d->__get((i + (int)1));
HXDLIN(3353)						goto _hx_goto_169;
            					}
HXDLIN(3353)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_169:;
HXDLIN(3353)				i1 = v;
            			}
            		}
HXDLIN(3353)		if ((i1 == (int)-2147483647)) {
HXDLIN(3353)			return ( ( ::com::stencyl::models::Actor)(null()) );
            		}
            		else {
HXDLIN(3353)			return Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::Actor >();
            		}
HXDLIN(3353)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getActor,return )

::Array< ::Dynamic> Engine_obj::getActorsOfType( ::com::stencyl::models::actor::ActorType type){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3357_getActorsOfType)
HXLINE(3358)		if (hx::IsNull( type )) {
HXLINE(3360)			::haxe::Log_obj::trace(HX_("Error: getActorsOfType was passed a null type",44,62,be,93),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),3360,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("getActorsOfType",a5,27,6f,2a)));
HXLINE(3361)			return ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(3364)		::Array< ::Dynamic> result = ( (::Array< ::Dynamic>)(this->actorsOfType->get(type->ID)) );
HXLINE(3366)		if (hx::IsNotNull( result )) {
HXLINE(3368)			return ( (::Array< ::Dynamic>)(this->actorsOfType->get(type->ID)) );
            		}
            		else {
HXLINE(3373)			return ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(3366)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getActorsOfType,return )

::Array< ::Dynamic> Engine_obj::getRecycledActorsOfType( ::com::stencyl::models::actor::ActorType type){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3379_getRecycledActorsOfType)
HXDLIN(3379)		return ( (::Array< ::Dynamic>)(this->recycledActorsOfType->get(type->ID)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getRecycledActorsOfType,return )

 ::com::stencyl::models::scene::layers::RegularLayer Engine_obj::getLayer(int refType,::String ref){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3390_getLayer)
HXDLIN(3390)		if ((refType == (int)0)) {
HXLINE(3391)			return this->getLayerById(::Std_obj::parseInt(ref),null());
            		}
            		else {
HXLINE(3393)			return this->getLayerByName(ref,null());
            		}
HXLINE(3390)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,getLayer,return )

 ::com::stencyl::models::scene::layers::RegularLayer Engine_obj::getLayerById(int id,hx::Null< bool >  __o_withFallback){
bool withFallback = __o_withFallback.Default(true);
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3397_getLayerById)
HXLINE(3398)		if ((id == (int)-1)) {
HXLINE(3400)			return null();
            		}
HXLINE(3403)		 ::de::polygonal::ds::IntHashTable _this = ::com::stencyl::Engine_obj::engine->layers;
HXDLIN(3403)		 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(3403)		int i = _this1->mHash->__get(((int)(id * (int)73856093) & (int)_this1->mMask));
HXDLIN(3403)		int i1;
HXDLIN(3403)		if ((i == (int)-1)) {
HXLINE(3403)			i1 = (int)-2147483647;
            		}
            		else {
HXLINE(3403)			::Array< int > d = _this1->mData;
HXDLIN(3403)			if ((d->__get(i) == id)) {
HXLINE(3403)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXLINE(3403)				int v = (int)-2147483647;
HXDLIN(3403)				i = d->__get((i + (int)2));
HXDLIN(3403)				while((i != (int)-1)){
HXLINE(3403)					if ((d->__get(i) == id)) {
HXLINE(3403)						v = d->__get((i + (int)1));
HXDLIN(3403)						goto _hx_goto_174;
            					}
HXDLIN(3403)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_174:;
HXDLIN(3403)				i1 = v;
            			}
            		}
HXDLIN(3403)		 ::com::stencyl::models::scene::layers::RegularLayer layer;
HXDLIN(3403)		if ((i1 == (int)-2147483647)) {
HXLINE(3403)			layer = ( ( ::com::stencyl::models::scene::layers::RegularLayer)(null()) );
            		}
            		else {
HXLINE(3403)			layer = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::scene::layers::RegularLayer >();
            		}
HXLINE(3405)		bool _hx_tmp;
HXDLIN(3405)		if (hx::IsNull( layer )) {
HXLINE(3405)			_hx_tmp = withFallback;
            		}
            		else {
HXLINE(3405)			_hx_tmp = false;
            		}
HXDLIN(3405)		if (_hx_tmp) {
HXLINE(3407)			 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(3407)			_hx_tmp1(((HX_("Layer ID \"",6c,25,5a,a6) + id) + HX_("\" does not exist",01,0c,9e,c6)),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),3407,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("getLayerById",8d,00,a7,92)));
HXLINE(3408)			::haxe::Log_obj::trace(HX_("Assuming top layer",ef,c1,29,82),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),3408,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("getLayerById",8d,00,a7,92)));
HXLINE(3409)			layer = this->topLayer;
            		}
HXLINE(3412)		return layer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,getLayerById,return )

 ::com::stencyl::models::scene::layers::RegularLayer Engine_obj::getLayerByName(::String name,hx::Null< bool >  __o_withFallback){
bool withFallback = __o_withFallback.Default(true);
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3416_getLayerByName)
HXLINE(3417)		 ::com::stencyl::models::scene::layers::RegularLayer layer = ::com::stencyl::Engine_obj::engine->layersByName->get(name).StaticCast<  ::com::stencyl::models::scene::layers::RegularLayer >();
HXLINE(3419)		bool _hx_tmp;
HXDLIN(3419)		if (hx::IsNull( layer )) {
HXLINE(3419)			_hx_tmp = withFallback;
            		}
            		else {
HXLINE(3419)			_hx_tmp = false;
            		}
HXDLIN(3419)		if (_hx_tmp) {
HXLINE(3421)			 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(3421)			_hx_tmp1(((HX_("Layer name \"",9c,e5,2a,3e) + name) + HX_("\" does not exist",01,0c,9e,c6)),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),3421,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("getLayerByName",7d,27,1e,ce)));
HXLINE(3422)			::haxe::Log_obj::trace(HX_("Assuming top layer",ef,c1,29,82),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),3422,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("getLayerByName",7d,27,1e,ce)));
HXLINE(3423)			layer = this->topLayer;
            		}
HXLINE(3426)		return layer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,getLayerByName,return )

 ::com::stencyl::models::scene::Layer Engine_obj::getLayerByOrder(int layerConst){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3431_getLayerByOrder)
HXDLIN(3431)		 ::com::stencyl::models::scene::Layer _hx_tmp;
HXDLIN(3431)		switch((int)(layerConst)){
            			case (int)0: {
HXDLIN(3431)				_hx_tmp = this->topLayer;
            			}
            			break;
            			case (int)1: {
HXDLIN(3431)				_hx_tmp = this->middleLayer;
            			}
            			break;
            			case (int)2: {
HXDLIN(3431)				_hx_tmp = this->bottomLayer;
            			}
            			break;
            			default:{
HXLINE(3437)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(3437)				_hx_tmp1(((HX_("Layer order identifier \"",8c,98,e0,63) + layerConst) + HX_("\" is not FRONT, MIDDLE, or BACK.",ab,b7,02,33)),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),3437,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("getLayerByOrder",1c,c7,e0,2a)));
HXLINE(3438)				::haxe::Log_obj::trace(HX_("Assuming top layer",ef,c1,29,82),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),3438,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("getLayerByOrder",1c,c7,e0,2a)));
HXLINE(3431)				_hx_tmp = this->topLayer;
            			}
            		}
HXDLIN(3431)		return _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getLayerByOrder,return )

void Engine_obj::sendToBack( ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3445_sendToBack)
HXLINE(3446)		if (a->isHUD) {
HXLINE(3446)			return;
            		}
HXLINE(3448)		this->moveActorToLayer(a,this->bottomLayer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,sendToBack,(void))

void Engine_obj::sendBackward( ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3452_sendBackward)
HXLINE(3453)		if (a->isHUD) {
HXLINE(3453)			return;
            		}
HXLINE(3455)		int order = a->layer->order;
HXLINE(3456)		while(true){
HXLINE(3456)			order = (order - (int)1);
HXDLIN(3456)			if (!(this->layersToDraw->exists(order))) {
HXLINE(3456)				goto _hx_goto_179;
            			}
HXLINE(3458)			if (::Std_obj::is(this->layersToDraw->get(order).StaticCast<  ::com::stencyl::models::scene::layers::RegularLayer >(),hx::ClassOf< ::com::stencyl::models::scene::Layer >())) {
HXLINE(3460)				this->moveActorToLayer(a,( ( ::com::stencyl::models::scene::Layer)(this->layersToDraw->get(order).StaticCast<  ::com::stencyl::models::scene::layers::RegularLayer >()) ));
HXLINE(3461)				return;
            			}
            		}
            		_hx_goto_179:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,sendBackward,(void))

void Engine_obj::bringToFront( ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3467_bringToFront)
HXLINE(3468)		if (a->isHUD) {
HXLINE(3468)			return;
            		}
HXLINE(3470)		this->moveActorToLayer(a,this->topLayer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,bringToFront,(void))

void Engine_obj::bringForward( ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3474_bringForward)
HXLINE(3475)		if (a->isHUD) {
HXLINE(3475)			return;
            		}
HXLINE(3477)		int order = a->layer->order;
HXLINE(3478)		while(true){
HXLINE(3478)			order = (order + (int)1);
HXDLIN(3478)			if (!(this->layersToDraw->exists(order))) {
HXLINE(3478)				goto _hx_goto_182;
            			}
HXLINE(3480)			if (::Std_obj::is(this->layersToDraw->get(order).StaticCast<  ::com::stencyl::models::scene::layers::RegularLayer >(),hx::ClassOf< ::com::stencyl::models::scene::Layer >())) {
HXLINE(3482)				this->moveActorToLayer(a,( ( ::com::stencyl::models::scene::Layer)(this->layersToDraw->get(order).StaticCast<  ::com::stencyl::models::scene::layers::RegularLayer >()) ));
HXLINE(3483)				return;
            			}
            		}
            		_hx_goto_182:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,bringForward,(void))

int Engine_obj::getNumberOfActorsWithinLayer( ::com::stencyl::models::scene::layers::RegularLayer layer){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3490_getNumberOfActorsWithinLayer)
HXDLIN(3490)		if (::Std_obj::is(layer,hx::ClassOf< ::com::stencyl::models::scene::Layer >())) {
HXLINE(3494)			return hx::TCast<  ::com::stencyl::models::scene::Layer >::cast(layer)->actorContainer->get_numChildren();
            		}
            		else {
HXLINE(3497)			return (int)0;
            		}
HXLINE(3490)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getNumberOfActorsWithinLayer,return )

int Engine_obj::getNumberOfLayers(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3502_getNumberOfLayers)
HXDLIN(3502)		return this->master->get_numChildren();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,getNumberOfLayers,return )

int Engine_obj::getOrderOfLayer( ::com::stencyl::models::scene::layers::RegularLayer layer){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3507_getOrderOfLayer)
HXDLIN(3507)		return layer->order;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getOrderOfLayer,return )

void Engine_obj::moveLayerToOrder( ::com::stencyl::models::scene::layers::RegularLayer layer,int order){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3511_moveLayerToOrder)
HXLINE(3512)		if ((order < (int)0)) {
HXLINE(3513)			order = (int)0;
            		}
HXLINE(3514)		if ((order > (this->master->get_numChildren() - (int)1))) {
HXLINE(3515)			order = (this->master->get_numChildren() - (int)1);
            		}
HXLINE(3517)		if ((layer->order == order)) {
HXLINE(3518)			return;
            		}
HXLINE(3520)		this->master->setChildIndex(layer,order);
HXLINE(3522)		this->refreshLayers();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,moveLayerToOrder,(void))

int Engine_obj::getNextLayerID(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3526_getNextLayerID)
HXLINE(3527)		int highestID = (int)-1;
HXLINE(3528)		{
HXLINE(3528)			::Dynamic l = this->layers->iterator();
HXDLIN(3528)			while(::de::polygonal::ds::Itr_obj::hasNext(l)){
HXLINE(3528)				 ::com::stencyl::models::scene::layers::RegularLayer l1 = ( ( ::com::stencyl::models::scene::layers::RegularLayer)(::de::polygonal::ds::Itr_obj::next(l)) );
HXLINE(3530)				highestID = ::Std_obj::_hx_int(::Math_obj::max(highestID,l1->ID));
            			}
            		}
HXLINE(3532)		return (highestID + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,getNextLayerID,return )

void Engine_obj::insertLayer( ::com::stencyl::models::scene::layers::RegularLayer layer,int order){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3536_insertLayer)
HXLINE(3537)		this->master->addChildAt(layer,order);
HXLINE(3539)		if (::Std_obj::is(layer,hx::ClassOf< ::com::stencyl::models::scene::layers::BackgroundLayer >())) {
HXLINE(3540)			::Array< ::Dynamic> _hx_tmp = this->backgroundLayers;
HXDLIN(3540)			_hx_tmp->push(layer);
            		}
            		else {
HXLINE(3541)			if (::Std_obj::is(layer,hx::ClassOf< ::com::stencyl::models::scene::Layer >())) {
HXLINE(3542)				::Array< ::Dynamic> _hx_tmp1 = this->interactiveLayers;
HXDLIN(3542)				_hx_tmp1->push(layer);
            			}
            		}
HXLINE(3543)		this->layers->set(layer->ID,layer);
HXLINE(3544)		this->layersByName->set(layer->layerName,layer);
HXLINE(3546)		this->refreshLayers();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,insertLayer,(void))

void Engine_obj::removeLayer( ::com::stencyl::models::scene::layers::RegularLayer layer){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3550_removeLayer)
HXLINE(3551)		this->master->removeChild(layer);
HXLINE(3553)		if (::Std_obj::is(layer,hx::ClassOf< ::com::stencyl::models::scene::layers::BackgroundLayer >())) {
HXLINE(3554)			::Array< ::Dynamic> _hx_tmp = this->backgroundLayers;
HXDLIN(3554)			_hx_tmp->remove(layer);
            		}
            		else {
HXLINE(3555)			if (::Std_obj::is(layer,hx::ClassOf< ::com::stencyl::models::scene::Layer >())) {
HXLINE(3556)				::Array< ::Dynamic> _hx_tmp1 = this->interactiveLayers;
HXDLIN(3556)				_hx_tmp1->remove(layer);
            			}
            		}
HXLINE(3557)		this->layers->unset(layer->ID);
HXLINE(3558)		this->layersByName->remove(layer->layerName);
HXLINE(3560)		this->refreshLayers();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,removeLayer,(void))

void Engine_obj::refreshLayers(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3564_refreshLayers)
HXLINE(3565)		bool foundBottom = false;
HXLINE(3566)		bool foundMiddle = false;
HXLINE(3567)		int numLayersProcessed = (int)0;
HXLINE(3569)		{
HXLINE(3569)			int _g1 = (int)0;
HXDLIN(3569)			int _g = this->master->get_numChildren();
HXDLIN(3569)			while((_g1 < _g)){
HXLINE(3569)				_g1 = (_g1 + (int)1);
HXDLIN(3569)				int i = (_g1 - (int)1);
HXLINE(3571)				 ::com::stencyl::models::scene::layers::RegularLayer l = hx::TCast<  ::com::stencyl::models::scene::layers::RegularLayer >::cast(this->master->getChildAt(i));
HXLINE(3572)				this->layersToDraw->set(i,l);
HXLINE(3573)				l->order = i;
HXLINE(3575)				if (::Std_obj::is(l,hx::ClassOf< ::com::stencyl::models::scene::Layer >())) {
HXLINE(3577)					if (!(foundBottom)) {
HXLINE(3579)						foundBottom = true;
HXLINE(3580)						this->bottomLayer = ( ( ::com::stencyl::models::scene::Layer)(l) );
            					}
HXLINE(3583)					bool _hx_tmp;
HXDLIN(3583)					if (!(foundMiddle)) {
HXLINE(3583)						_hx_tmp = (numLayersProcessed == ::Math_obj::floor(((Float)this->interactiveLayers->length / (Float)(int)2)));
            					}
            					else {
HXLINE(3583)						_hx_tmp = false;
            					}
HXDLIN(3583)					if (_hx_tmp) {
HXLINE(3585)						foundMiddle = true;
HXLINE(3586)						this->middleLayer = ( ( ::com::stencyl::models::scene::Layer)(l) );
            					}
HXLINE(3589)					this->topLayer = ( ( ::com::stencyl::models::scene::Layer)(l) );
HXLINE(3590)					numLayersProcessed = (numLayersProcessed + (int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,refreshLayers,(void))

Float Engine_obj::getPhysicalWidth(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3601_getPhysicalWidth)
HXDLIN(3601)		return this->physicalWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,getPhysicalWidth,return )

Float Engine_obj::getPhysicalHeight(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3606_getPhysicalHeight)
HXDLIN(3606)		return this->physicalHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,getPhysicalHeight,return )

void Engine_obj::enableGlobalSleeping(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3641_enableGlobalSleeping)
HXDLIN(3641)		this->world->m_allowSleep = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,enableGlobalSleeping,(void))

void Engine_obj::disableGlobalSleeping(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3646_disableGlobalSleeping)
HXDLIN(3646)		this->world->m_allowSleep = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,disableGlobalSleeping,(void))

 ::com::stencyl::models::actor::Group Engine_obj::getGroup(int ID, ::com::stencyl::models::Actor a){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3654_getGroup)
HXLINE(3655)		bool _hx_tmp;
HXDLIN(3655)		if ((ID == (int)-1000)) {
HXLINE(3655)			_hx_tmp = hx::IsNotNull( a );
            		}
            		else {
HXLINE(3655)			_hx_tmp = false;
            		}
HXDLIN(3655)		if (_hx_tmp) {
HXLINE(3657)			::Dynamic this1 = this->groups;
HXDLIN(3657)			return ( ( ::haxe::ds::IntMap)(this1) )->get(a->getGroupID()).StaticCast<  ::com::stencyl::models::actor::Group >();
            		}
HXLINE(3660)		return this->groups->get(ID).StaticCast<  ::com::stencyl::models::actor::Group >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,getGroup,return )

 ::com::stencyl::models::actor::Group Engine_obj::getGroupByName(::String groupName){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3664_getGroupByName)
HXLINE(3665)		 ::com::stencyl::models::actor::Group group = this->reverseGroups->get(groupName).StaticCast<  ::com::stencyl::models::actor::Group >();
HXLINE(3667)		if (hx::IsNull( group )) {
HXLINE(3669)			return this->groups->get((int)3).StaticCast<  ::com::stencyl::models::actor::Group >();
            		}
HXLINE(3672)		return group;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getGroupByName,return )

int Engine_obj::nextJointID(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3680_nextJointID)
HXLINE(3681)		int ID = (int)-1;
HXLINE(3683)		{
HXLINE(3683)			 ::Dynamic j = this->joints->iterator();
HXDLIN(3683)			while(( (bool)(j->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(3683)				 ::box2D::dynamics::joints::B2Joint j1 = ( ( ::box2D::dynamics::joints::B2Joint)(j->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(3685)				if (hx::IsNull( j1 )) {
HXLINE(3687)					continue;
            				}
HXLINE(3690)				ID = ::Std_obj::_hx_int(::Math_obj::max(ID,j1->ID));
            			}
            		}
HXLINE(3693)		return (ID + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,nextJointID,return )

void Engine_obj::addJoint( ::box2D::dynamics::joints::B2Joint j){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3697_addJoint)
HXLINE(3698)		int nextID = this->nextJointID();
HXLINE(3699)		j->ID = nextID;
HXLINE(3700)		this->joints->set(nextID,j);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,addJoint,(void))

 ::box2D::dynamics::joints::B2Joint Engine_obj::getJoint(int ID){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3705_getJoint)
HXDLIN(3705)		return this->joints->get(ID).StaticCast<  ::box2D::dynamics::joints::B2Joint >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getJoint,return )

void Engine_obj::destroyJoint( ::box2D::dynamics::joints::B2Joint j){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3709_destroyJoint)
HXLINE(3710)		this->joints->remove(j->ID);
HXLINE(3711)		this->world->destroyJoint(j);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,destroyJoint,(void))

 ::box2D::dynamics::joints::B2DistanceJoint Engine_obj::createStickJoint( ::box2D::dynamics::B2Body one, ::box2D::dynamics::B2Body two,hx::Null< int >  __o_jointID,hx::Null< bool >  __o_collide,hx::Null< Float >  __o_damping,hx::Null< Float >  __o_frequencyHz){
int jointID = __o_jointID.Default(-1);
bool collide = __o_collide.Default(false);
Float damping = __o_damping.Default(0);
Float frequencyHz = __o_frequencyHz.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3725_createStickJoint)
HXLINE(3726)		 ::box2D::common::math::B2Vec2 v1 = one->getLocalCenter();
HXLINE(3727)		 ::box2D::common::math::B2Vec2 v2 = two->getLocalCenter();
HXLINE(3729)		if ((one->getType() == (int)0)) {
HXLINE(3731)			v1->x = ((Float)one->getUserData()->getPhysicsWidth() / (Float)(int)2);
HXLINE(3732)			v1->y = ((Float)one->getUserData()->getPhysicsHeight() / (Float)(int)2);
            		}
HXLINE(3735)		if ((two->getType() == (int)0)) {
HXLINE(3737)			v2->x = ((Float)two->getUserData()->getPhysicsWidth() / (Float)(int)2);
HXLINE(3738)			v2->y = ((Float)two->getUserData()->getPhysicsHeight() / (Float)(int)2);
            		}
HXLINE(3741)		v1 = one->getWorldPoint(v1);
HXLINE(3742)		v2 = two->getWorldPoint(v2);
HXLINE(3744)		 ::box2D::dynamics::joints::B2DistanceJointDef jd =  ::box2D::dynamics::joints::B2DistanceJointDef_obj::__alloc( HX_CTX );
HXLINE(3745)		jd->initialize(one,two,v1,v2);
HXLINE(3746)		jd->collideConnected = collide;
HXLINE(3747)		jd->dampingRatio = damping;
HXLINE(3748)		jd->frequencyHz = frequencyHz;
HXLINE(3750)		 ::box2D::dynamics::joints::B2Joint toReturn = this->world->createJoint(jd);
HXLINE(3752)		if ((jointID == (int)-1)) {
HXLINE(3754)			this->addJoint(toReturn);
            		}
            		else {
HXLINE(3759)			this->joints->set(jointID,toReturn);
HXLINE(3760)			toReturn->ID = jointID;
            		}
HXLINE(3763)		return hx::TCast<  ::box2D::dynamics::joints::B2DistanceJoint >::cast(toReturn);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Engine_obj,createStickJoint,return )

 ::box2D::dynamics::joints::B2DistanceJoint Engine_obj::createCustomStickJoint( ::box2D::dynamics::B2Body one,Float x1,Float y1, ::box2D::dynamics::B2Body two,Float x2,Float y2){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3775_createCustomStickJoint)
HXLINE(3776)		 ::box2D::common::math::B2Vec2 v1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,x1,y1);
HXLINE(3777)		 ::box2D::common::math::B2Vec2 v2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,x2,y2);
HXLINE(3779)		v1->x = ::com::stencyl::Engine_obj::toPhysicalUnits(v1->x);
HXLINE(3780)		v1->y = ::com::stencyl::Engine_obj::toPhysicalUnits(v1->y);
HXLINE(3781)		v2->x = ::com::stencyl::Engine_obj::toPhysicalUnits(v2->x);
HXLINE(3782)		v2->y = ::com::stencyl::Engine_obj::toPhysicalUnits(v2->y);
HXLINE(3784)		v1 = one->getWorldPoint(v1);
HXLINE(3785)		v2 = two->getWorldPoint(v2);
HXLINE(3787)		 ::box2D::dynamics::joints::B2DistanceJointDef jd =  ::box2D::dynamics::joints::B2DistanceJointDef_obj::__alloc( HX_CTX );
HXLINE(3788)		jd->initialize(one,two,v1,v2);
HXLINE(3790)		 ::box2D::dynamics::joints::B2Joint toReturn = this->world->createJoint(jd);
HXLINE(3791)		this->addJoint(toReturn);
HXLINE(3793)		return hx::TCast<  ::box2D::dynamics::joints::B2DistanceJoint >::cast(toReturn);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Engine_obj,createCustomStickJoint,return )

 ::box2D::dynamics::joints::B2RevoluteJoint Engine_obj::createHingeJoint( ::box2D::dynamics::B2Body one, ::box2D::dynamics::B2Body two, ::box2D::common::math::B2Vec2 pt,hx::Null< int >  __o_jointID,hx::Null< bool >  __o_collide,hx::Null< bool >  __o_limit,hx::Null< bool >  __o_motor,hx::Null< Float >  __o_lower,hx::Null< Float >  __o_upper,hx::Null< Float >  __o_torque,hx::Null< Float >  __o_speed){
int jointID = __o_jointID.Default(-1);
bool collide = __o_collide.Default(false);
bool limit = __o_limit.Default(false);
bool motor = __o_motor.Default(false);
Float lower = __o_lower.Default(0);
Float upper = __o_upper.Default(0);
Float torque = __o_torque.Default(0);
Float speed = __o_speed.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3812_createHingeJoint)
HXLINE(3813)		if (hx::IsNull( two )) {
HXLINE(3815)			two = this->world->m_groundBody;
            		}
HXLINE(3818)		if (hx::IsNull( pt )) {
HXLINE(3820)			pt = one->getLocalCenter();
            		}
HXLINE(3823)		 ::box2D::dynamics::joints::B2RevoluteJointDef jd =  ::box2D::dynamics::joints::B2RevoluteJointDef_obj::__alloc( HX_CTX );
HXLINE(3825)		jd->bodyA = one;
HXLINE(3826)		jd->bodyB = two;
HXLINE(3828)		pt->x = ::com::stencyl::Engine_obj::toPhysicalUnits(pt->x);
HXLINE(3829)		pt->y = ::com::stencyl::Engine_obj::toPhysicalUnits(pt->y);
HXLINE(3831)		jd->localAnchorA = pt;
HXLINE(3832)		jd->localAnchorB = two->getLocalPoint(one->getWorldPoint(pt));
HXLINE(3833)		jd->collideConnected = collide;
HXLINE(3834)		jd->enableLimit = limit;
HXLINE(3835)		jd->enableMotor = motor;
HXLINE(3836)		jd->lowerAngle = lower;
HXLINE(3837)		jd->upperAngle = upper;
HXLINE(3838)		jd->maxMotorTorque = torque;
HXLINE(3839)		jd->motorSpeed = speed;
HXLINE(3841)		 ::box2D::dynamics::joints::B2Joint toReturn = this->world->createJoint(jd);
HXLINE(3843)		if ((jointID == (int)-1)) {
HXLINE(3845)			this->addJoint(toReturn);
            		}
            		else {
HXLINE(3850)			this->joints->set(jointID,toReturn);
HXLINE(3851)			toReturn->ID = jointID;
            		}
HXLINE(3854)		return hx::TCast<  ::box2D::dynamics::joints::B2RevoluteJoint >::cast(toReturn);
            	}


HX_DEFINE_DYNAMIC_FUNC11(Engine_obj,createHingeJoint,return )

 ::box2D::dynamics::joints::B2LineJoint Engine_obj::createSlidingJoint( ::box2D::dynamics::B2Body one, ::box2D::dynamics::B2Body two, ::box2D::common::math::B2Vec2 dir,hx::Null< int >  __o_jointID,hx::Null< bool >  __o_collide,hx::Null< bool >  __o_limit,hx::Null< bool >  __o_motor,hx::Null< Float >  __o_lower,hx::Null< Float >  __o_upper,hx::Null< Float >  __o_force,hx::Null< Float >  __o_speed){
int jointID = __o_jointID.Default(-1);
bool collide = __o_collide.Default(false);
bool limit = __o_limit.Default(false);
bool motor = __o_motor.Default(false);
Float lower = __o_lower.Default(0);
Float upper = __o_upper.Default(0);
Float force = __o_force.Default(0);
Float speed = __o_speed.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3873_createSlidingJoint)
HXLINE(3874)		if (hx::IsNull( two )) {
HXLINE(3876)			two = this->world->m_groundBody;
            		}
HXLINE(3879)		if (hx::IsNull( dir )) {
HXLINE(3881)			dir =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,(int)1,(int)0);
            		}
HXLINE(3884)		dir->normalize();
HXLINE(3886)		 ::box2D::common::math::B2Vec2 pt1 = one->getWorldCenter();
HXLINE(3887)		 ::box2D::common::math::B2Vec2 pt2 = two->getWorldCenter();
HXLINE(3890)		if ((one->getType() == (int)0)) {
HXLINE(3892)			if (hx::IsNotNull( one->getUserData() )) {
HXLINE(3894)				pt1->x = ((Float)one->getUserData()->getPhysicsWidth() / (Float)(int)2);
HXLINE(3895)				pt1->y = ((Float)one->getUserData()->getPhysicsHeight() / (Float)(int)2);
HXLINE(3896)				pt1 = one->getWorldPoint(pt1);
            			}
            		}
HXLINE(3900)		if ((two->getType() == (int)0)) {
HXLINE(3902)			if (hx::IsNotNull( two->getUserData() )) {
HXLINE(3904)				pt2->x = ((Float)two->getUserData()->getPhysicsWidth() / (Float)(int)2);
HXLINE(3905)				pt2->y = ((Float)two->getUserData()->getPhysicsHeight() / (Float)(int)2);
HXLINE(3906)				pt2 = two->getWorldPoint(pt2);
            			}
            		}
HXLINE(3910)		 ::box2D::dynamics::joints::B2LineJointDef pjd =  ::box2D::dynamics::joints::B2LineJointDef_obj::__alloc( HX_CTX );
HXLINE(3911)		pjd->initialize(one,two,pt1,dir);
HXLINE(3913)		pjd->collideConnected = collide;
HXLINE(3914)		pjd->enableLimit = limit;
HXLINE(3915)		pjd->enableMotor = motor;
HXLINE(3916)		pjd->lowerTranslation = ::com::stencyl::Engine_obj::toPhysicalUnits(lower);
HXLINE(3917)		pjd->upperTranslation = ::com::stencyl::Engine_obj::toPhysicalUnits(upper);
HXLINE(3918)		pjd->maxMotorForce = force;
HXLINE(3919)		pjd->motorSpeed = ::com::stencyl::Engine_obj::toPhysicalUnits(speed);
HXLINE(3921)		 ::box2D::dynamics::joints::B2Joint toReturn = this->world->createJoint(pjd);
HXLINE(3923)		if ((jointID == (int)-1)) {
HXLINE(3925)			this->addJoint(toReturn);
            		}
            		else {
HXLINE(3930)			this->joints->set(jointID,toReturn);
HXLINE(3931)			toReturn->ID = jointID;
            		}
HXLINE(3934)		return hx::TCast<  ::box2D::dynamics::joints::B2LineJoint >::cast(toReturn);
            	}


HX_DEFINE_DYNAMIC_FUNC11(Engine_obj,createSlidingJoint,return )

 ::com::stencyl::models::Region Engine_obj::createRegion(Float x,Float y, ::box2D::collision::shapes::B2Shape shape,hx::Null< bool >  __o_offset){
bool offset = __o_offset.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3942_createRegion)
HXLINE(3943)		::Array< ::Dynamic> shapeList = ::Array_obj< ::Dynamic>::__new();
HXLINE(3944)		shapeList->push(shape);
HXLINE(3945)		 ::com::stencyl::models::Region region =  ::com::stencyl::models::Region_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),x,y,shapeList,null());
HXLINE(3947)		if (offset) {
HXLINE(3949)			Float _hx_tmp = (x + ((Float)region->regionWidth / (Float)(int)2));
HXDLIN(3949)			region->setXY(_hx_tmp,(y + ((Float)region->regionHeight / (Float)(int)2)),null(),null());
            		}
HXLINE(3952)		this->addRegion(region);
HXLINE(3953)		return region;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Engine_obj,createRegion,return )

 ::com::stencyl::models::Region Engine_obj::createBoxRegion(Float x,Float y,Float w,Float h){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3958_createBoxRegion)
HXDLIN(3958)		if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(3960)			 ::com::stencyl::models::Region region =  ::com::stencyl::models::Region_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),x,y,::Array_obj< ::Dynamic>::__new(0), ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,w,h));
HXLINE(3961)			this->addRegion(region);
HXLINE(3962)			return region;
            		}
            		else {
HXLINE(3967)			w = ::com::stencyl::Engine_obj::toPhysicalUnits(w);
HXLINE(3968)			h = ::com::stencyl::Engine_obj::toPhysicalUnits(h);
HXLINE(3970)			 ::box2D::collision::shapes::B2PolygonShape p =  ::box2D::collision::shapes::B2PolygonShape_obj::__alloc( HX_CTX );
HXLINE(3971)			p->setAsBox(((Float)w / (Float)(int)2),((Float)h / (Float)(int)2));
HXLINE(3972)			return this->createRegion(x,y,p,true);
            		}
HXLINE(3958)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Engine_obj,createBoxRegion,return )

 ::com::stencyl::models::Region Engine_obj::createCircularRegion(Float x,Float y,Float r){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3978_createCircularRegion)
HXDLIN(3978)		if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(3980)			 ::com::stencyl::models::Region region =  ::com::stencyl::models::Region_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),x,y,::Array_obj< ::Dynamic>::__new(0), ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(r * (int)2),(r * (int)2)));
HXLINE(3981)			this->addRegion(region);
HXLINE(3982)			return region;
            		}
            		else {
HXLINE(3987)			r = ::com::stencyl::Engine_obj::toPhysicalUnits(r);
HXLINE(3989)			 ::box2D::collision::shapes::B2CircleShape cShape =  ::box2D::collision::shapes::B2CircleShape_obj::__alloc( HX_CTX ,null());
HXLINE(3990)			cShape->m_radius = r;
HXLINE(3991)			return this->createRegion(x,y,cShape,true);
            		}
HXLINE(3978)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Engine_obj,createCircularRegion,return )

void Engine_obj::addRegion( ::com::stencyl::models::Region r){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3996_addRegion)
HXLINE(3997)		if ((r->ID == (int)-1)) {
HXLINE(3998)			r->ID = this->nextRegionID();
            		}
HXLINE(3999)		this->regions->set(r->ID,r);
HXLINE(4001)		if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(4003)			this->groups->get((int)-2).StaticCast<  ::com::stencyl::models::actor::Group >()->addChild(r);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,addRegion,(void))

void Engine_obj::removeRegion(int ID){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4008_removeRegion)
HXLINE(4009)		 ::com::stencyl::models::Region r = this->getRegion(ID);
HXLINE(4010)		this->regions->unset(r->ID);
HXLINE(4011)		r->destroy();
HXLINE(4013)		if (::com::stencyl::Engine_obj::NO_PHYSICS) {
HXLINE(4015)			this->groups->get((int)-2).StaticCast<  ::com::stencyl::models::actor::Group >()->removeChild(r);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,removeRegion,(void))

 ::com::stencyl::models::Region Engine_obj::getRegion(int ID){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4021_getRegion)
HXDLIN(4021)		 ::de::polygonal::ds::IntHashTable _this = this->regions;
HXDLIN(4021)		 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(4021)		int i = _this1->mHash->__get(((int)(ID * (int)73856093) & (int)_this1->mMask));
HXDLIN(4021)		int i1;
HXDLIN(4021)		if ((i == (int)-1)) {
HXDLIN(4021)			i1 = (int)-2147483647;
            		}
            		else {
HXDLIN(4021)			::Array< int > d = _this1->mData;
HXDLIN(4021)			if ((d->__get(i) == ID)) {
HXDLIN(4021)				i1 = d->__get((i + (int)1));
            			}
            			else {
HXDLIN(4021)				int v = (int)-2147483647;
HXDLIN(4021)				i = d->__get((i + (int)2));
HXDLIN(4021)				while((i != (int)-1)){
HXDLIN(4021)					if ((d->__get(i) == ID)) {
HXDLIN(4021)						v = d->__get((i + (int)1));
HXDLIN(4021)						goto _hx_goto_214;
            					}
HXDLIN(4021)					i = d->__get((i + (int)2));
            				}
            				_hx_goto_214:;
HXDLIN(4021)				i1 = v;
            			}
            		}
HXDLIN(4021)		if ((i1 == (int)-2147483647)) {
HXDLIN(4021)			return ( ( ::com::stencyl::models::Region)(null()) );
            		}
            		else {
HXDLIN(4021)			return Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::Region >();
            		}
HXDLIN(4021)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getRegion,return )

 ::de::polygonal::ds::IntHashTable Engine_obj::getRegions(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4026_getRegions)
HXDLIN(4026)		return this->regions;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,getRegions,return )

int Engine_obj::nextRegionID(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4030_nextRegionID)
HXLINE(4031)		int ID = (int)-1;
HXLINE(4033)		{
HXLINE(4033)			::Dynamic r = this->regions->iterator();
HXDLIN(4033)			while(::de::polygonal::ds::Itr_obj::hasNext(r)){
HXLINE(4033)				 ::com::stencyl::models::Region r1 = ( ( ::com::stencyl::models::Region)(::de::polygonal::ds::Itr_obj::next(r)) );
HXLINE(4035)				if (hx::IsNull( r1 )) {
HXLINE(4037)					continue;
            				}
HXLINE(4040)				ID = ::Std_obj::_hx_int(::Math_obj::max(ID,r1->ID));
            			}
            		}
HXLINE(4043)		return (ID + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,nextRegionID,return )

bool Engine_obj::isInRegion( ::com::stencyl::models::Actor a, ::com::stencyl::models::Region r){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4048_isInRegion)
HXDLIN(4048)		bool _hx_tmp;
HXDLIN(4048)		if (hx::IsNotNull( r )) {
HXDLIN(4048)			 ::de::polygonal::ds::IntHashTable _this = this->regions;
HXDLIN(4048)			int key = r->getID();
HXDLIN(4048)			 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN(4048)			int i = _this1->mHash->__get(((int)(key * (int)73856093) & (int)_this1->mMask));
HXDLIN(4048)			int i1;
HXDLIN(4048)			if ((i == (int)-1)) {
HXDLIN(4048)				i1 = (int)-2147483647;
            			}
            			else {
HXDLIN(4048)				::Array< int > d = _this1->mData;
HXDLIN(4048)				if ((d->__get(i) == key)) {
HXDLIN(4048)					i1 = d->__get((i + (int)1));
            				}
            				else {
HXDLIN(4048)					int v = (int)-2147483647;
HXDLIN(4048)					i = d->__get((i + (int)2));
HXDLIN(4048)					while((i != (int)-1)){
HXDLIN(4048)						if ((d->__get(i) == key)) {
HXDLIN(4048)							v = d->__get((i + (int)1));
HXDLIN(4048)							goto _hx_goto_219;
            						}
HXDLIN(4048)						i = d->__get((i + (int)2));
            					}
            					_hx_goto_219:;
HXDLIN(4048)					i1 = v;
            				}
            			}
HXDLIN(4048)			 ::com::stencyl::models::Region _hx_tmp1;
HXDLIN(4048)			if ((i1 == (int)-2147483647)) {
HXDLIN(4048)				_hx_tmp1 = ( ( ::com::stencyl::models::Region)(null()) );
            			}
            			else {
HXDLIN(4048)				_hx_tmp1 = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::Region >();
            			}
HXDLIN(4048)			_hx_tmp = hx::IsNotNull( _hx_tmp1 );
            		}
            		else {
HXDLIN(4048)			_hx_tmp = false;
            		}
HXDLIN(4048)		if (_hx_tmp) {
HXLINE(4050)			return r->containsActor(a);
            		}
            		else {
HXLINE(4055)			::haxe::Log_obj::trace(HX_("Region does not exist.",ff,2d,f2,9b),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4055,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("isInRegion",c3,1c,ba,03)));
HXLINE(4056)			return false;
            		}
HXLINE(4048)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,isInRegion,return )

 ::com::stencyl::models::Terrain Engine_obj::createTerrainRegion(Float x,Float y, ::box2D::collision::shapes::B2Shape shape,hx::Null< bool >  __o_offset,hx::Null< int >  __o_groupID){
bool offset = __o_offset.Default(false);
int groupID = __o_groupID.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4065_createTerrainRegion)
HXLINE(4066)		::Array< ::Dynamic> shapeList = ::Array_obj< ::Dynamic>::__new();
HXLINE(4067)		shapeList->push(shape);
HXLINE(4068)		 ::com::stencyl::models::Terrain region =  ::com::stencyl::models::Terrain_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),x,y,shapeList,groupID,null());
HXLINE(4070)		if (offset) {
HXLINE(4072)			Float _hx_tmp = (x + ((Float)region->regionWidth / (Float)(int)2));
HXDLIN(4072)			region->setXY(_hx_tmp,(y + ((Float)region->regionHeight / (Float)(int)2)),null(),null());
            		}
HXLINE(4075)		this->addTerrainRegion(region);
HXLINE(4076)		return region;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Engine_obj,createTerrainRegion,return )

 ::com::stencyl::models::Terrain Engine_obj::createBoxTerrainRegion(Float x,Float y,Float w,Float h,hx::Null< int >  __o_groupID){
int groupID = __o_groupID.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4080_createBoxTerrainRegion)
HXLINE(4081)		w = ::com::stencyl::Engine_obj::toPhysicalUnits(w);
HXLINE(4082)		h = ::com::stencyl::Engine_obj::toPhysicalUnits(h);
HXLINE(4084)		 ::box2D::collision::shapes::B2PolygonShape p =  ::box2D::collision::shapes::B2PolygonShape_obj::__alloc( HX_CTX );
HXLINE(4085)		p->setAsBox(((Float)w / (Float)(int)2),((Float)h / (Float)(int)2));
HXLINE(4087)		return this->createTerrainRegion(x,y,p,true,groupID);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Engine_obj,createBoxTerrainRegion,return )

 ::com::stencyl::models::Terrain Engine_obj::createCircularTerrainRegion(Float x,Float y,Float r,hx::Null< int >  __o_groupID){
int groupID = __o_groupID.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4091_createCircularTerrainRegion)
HXLINE(4092)		r = ::com::stencyl::Engine_obj::toPhysicalUnits(r);
HXLINE(4094)		 ::box2D::collision::shapes::B2CircleShape cShape =  ::box2D::collision::shapes::B2CircleShape_obj::__alloc( HX_CTX ,null());
HXLINE(4095)		cShape->m_radius = r;
HXLINE(4097)		return this->createTerrainRegion(x,y,cShape,true,groupID);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Engine_obj,createCircularTerrainRegion,return )

void Engine_obj::addTerrainRegion( ::com::stencyl::models::Terrain r){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4101_addTerrainRegion)
HXLINE(4102)		if ((r->ID == (int)-1)) {
HXLINE(4103)			r->ID = this->nextTerrainRegionID();
            		}
HXLINE(4104)		this->terrainRegions->set(r->ID,r);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,addTerrainRegion,(void))

void Engine_obj::removeTerrainRegion(int ID){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4108_removeTerrainRegion)
HXLINE(4109)		 ::com::stencyl::models::Terrain t = this->getTerrainRegion(ID);
HXLINE(4110)		this->terrainRegions->remove(ID);
HXLINE(4111)		t->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,removeTerrainRegion,(void))

 ::com::stencyl::models::Terrain Engine_obj::getTerrainRegion(int ID){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4116_getTerrainRegion)
HXDLIN(4116)		return this->terrainRegions->get(ID).StaticCast<  ::com::stencyl::models::Terrain >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getTerrainRegion,return )

 ::haxe::ds::IntMap Engine_obj::getTerrainRegions(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4121_getTerrainRegions)
HXDLIN(4121)		return this->terrainRegions;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,getTerrainRegions,return )

int Engine_obj::nextTerrainRegionID(){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4125_nextTerrainRegionID)
HXLINE(4126)		int ID = (int)-1;
HXLINE(4128)		{
HXLINE(4128)			 ::Dynamic r = this->terrainRegions->iterator();
HXDLIN(4128)			while(( (bool)(r->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(4128)				 ::com::stencyl::models::Terrain r1 = ( ( ::com::stencyl::models::Terrain)(r->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(4130)				if (hx::IsNull( r1 )) {
HXLINE(4130)					continue;
            				}
HXLINE(4131)				ID = ::Std_obj::_hx_int(::Math_obj::max(ID,r1->ID));
            			}
            		}
HXLINE(4134)		return (ID + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,nextTerrainRegionID,return )

void Engine_obj::setGameAttribute(::String name, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4143_setGameAttribute)
HXDLIN(4143)		this->gameAttributes->set(name,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,setGameAttribute,(void))

 ::Dynamic Engine_obj::getGameAttribute(::String name){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4148_getGameAttribute)
HXDLIN(4148)		return this->gameAttributes->get(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,getGameAttribute,return )

void Engine_obj::setOffscreenTolerance(int top,int left,int bottom,int right){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4156_setOffscreenTolerance)
HXLINE(4157)		::com::stencyl::Engine_obj::paddingTop = top;
HXLINE(4158)		::com::stencyl::Engine_obj::paddingLeft = left;
HXLINE(4159)		::com::stencyl::Engine_obj::paddingBottom = bottom;
HXLINE(4160)		::com::stencyl::Engine_obj::paddingRight = right;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Engine_obj,setOffscreenTolerance,(void))

void Engine_obj::setScrollFactor(int id,Float amountX, ::Dynamic amountY){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4170_setScrollFactor)
HXDLIN(4170)		this->setLayerScrollFactor(this->getLayerById(id,null()),amountX,amountY);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Engine_obj,setScrollFactor,(void))

void Engine_obj::setLayerScrollFactor( ::com::stencyl::models::scene::layers::RegularLayer layer,Float amountX, ::Dynamic amountY){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4174_setLayerScrollFactor)
HXLINE(4175)		if (hx::IsNull( amountY )) {
HXLINE(4176)			amountY = amountX;
            		}
HXLINE(4177)		layer->scrollFactorX = amountX;
HXLINE(4178)		layer->scrollFactorY = amountY;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Engine_obj,setLayerScrollFactor,(void))

::String Engine_obj::DOODAD;

::String Engine_obj::INTERNAL_SHIFT;

::String Engine_obj::INTERNAL_CTRL;

bool Engine_obj::NO_PHYSICS;

bool Engine_obj::DEBUG_DRAW;

::String Engine_obj::IMG_BASE;

Float Engine_obj::SCALE;

bool Engine_obj::checkedWideScreen;

bool Engine_obj::isStandardIOS;

bool Engine_obj::isExtendedIOS;

bool Engine_obj::isIPhone6;

bool Engine_obj::isIPhone6Plus;

bool Engine_obj::isIPhoneX;

bool Engine_obj::isIPhoneXMax;

bool Engine_obj::isIPhoneXR;

bool Engine_obj::isTabletIOS;

 ::com::stencyl::Engine Engine_obj::engine;

bool Engine_obj::landscape;

bool Engine_obj::limitCameraToScene;

Float Engine_obj::cameraX;

Float Engine_obj::cameraY;

Float Engine_obj::screenScaleX;

Float Engine_obj::screenScaleY;

Float Engine_obj::unzoomedScaleX;

Float Engine_obj::unzoomedScaleY;

int Engine_obj::screenOffsetX;

int Engine_obj::screenOffsetY;

int Engine_obj::screenWidth;

int Engine_obj::screenHeight;

int Engine_obj::sceneWidth;

int Engine_obj::sceneHeight;

int Engine_obj::screenWidthHalf;

int Engine_obj::screenHeightHalf;

bool Engine_obj::paused;

bool Engine_obj::started;

bool Engine_obj::inFocus;

 ::com::stencyl::event::EventMaster Engine_obj::events;

int Engine_obj::ITERATIONS;

Float Engine_obj::physicsScale;

int Engine_obj::paddingLeft;

int Engine_obj::paddingRight;

int Engine_obj::paddingTop;

int Engine_obj::paddingBottom;

::String Engine_obj::ngID;

::String Engine_obj::ngKey;

 ::openfl::display::MovieClip Engine_obj::movieClip;

 ::openfl::display::Stage Engine_obj::stage;

int Engine_obj::STEP_SIZE;

int Engine_obj::MS_PER_SEC;

Float Engine_obj::elapsedTime;

Float Engine_obj::timeScale;

int Engine_obj::totalElapsedTime;

bool Engine_obj::debug;

 ::box2D::dynamics::B2DebugDraw Engine_obj::debugDrawer;

void Engine_obj::resetStatics(){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_401_resetStatics)
HXLINE( 408)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("enterFrame",f5,03,50,02),::com::stencyl::Engine_obj::engine->onUpdate_dyn(),null());
HXLINE( 409)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("deactivate",34,5c,01,3c),::com::stencyl::Engine_obj::engine->onFocusLost_dyn(),null());
HXLINE( 410)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("activate",b3,1b,ac,e5),::com::stencyl::Engine_obj::engine->onFocus_dyn(),null());
HXLINE( 412)		::com::stencyl::Engine_obj::stage->removeEventListener(HX_("resize",f4,59,7b,08),::com::stencyl::Engine_obj::engine->onWindowResize_dyn(),null());
HXLINE( 413)		::com::stencyl::Engine_obj::stage->window->onRestore->remove(::com::stencyl::Engine_obj::engine->onWindowRestore_dyn());
HXLINE( 414)		::com::stencyl::Engine_obj::stage->window->onMaximize->remove(::com::stencyl::Engine_obj::engine->onWindowMaximize_dyn());
HXLINE( 415)		::com::stencyl::Engine_obj::stage->window->onFullscreen->remove(::com::stencyl::Engine_obj::engine->onWindowFullScreen_dyn());
HXLINE( 418)		if (hx::IsNotNull( ::com::stencyl::Engine_obj::engine->stats )) {
HXLINE( 420)			::com::stencyl::Engine_obj::stage->removeChild(::com::stencyl::Engine_obj::engine->stats);
            		}
HXLINE( 425)		::com::stencyl::Engine_obj::NO_PHYSICS = false;
HXLINE( 426)		::com::stencyl::Engine_obj::DEBUG_DRAW = false;
HXLINE( 428)		::com::stencyl::Engine_obj::IMG_BASE = HX_("",00,00,00,00);
HXLINE( 429)		::com::stencyl::Engine_obj::SCALE = (int)1;
HXLINE( 431)		::com::stencyl::Engine_obj::checkedWideScreen = false;
HXLINE( 432)		::com::stencyl::Engine_obj::isStandardIOS = false;
HXLINE( 433)		::com::stencyl::Engine_obj::isExtendedIOS = false;
HXLINE( 434)		::com::stencyl::Engine_obj::isIPhone6 = false;
HXLINE( 435)		::com::stencyl::Engine_obj::isIPhone6Plus = false;
HXLINE( 436)		::com::stencyl::Engine_obj::isTabletIOS = false;
HXLINE( 438)		::com::stencyl::Engine_obj::engine = null();
HXLINE( 440)		::com::stencyl::Engine_obj::landscape = false;
HXLINE( 442)		::com::stencyl::Engine_obj::cameraX = (int)0;
HXLINE( 443)		::com::stencyl::Engine_obj::cameraY = (int)0;
HXLINE( 445)		::com::stencyl::Engine_obj::screenScaleX = (int)0;
HXLINE( 446)		::com::stencyl::Engine_obj::screenScaleY = (int)0;
HXLINE( 448)		::com::stencyl::Engine_obj::unzoomedScaleX = (int)0;
HXLINE( 449)		::com::stencyl::Engine_obj::unzoomedScaleY = (int)0;
HXLINE( 451)		::com::stencyl::Engine_obj::screenOffsetX = (int)0;
HXLINE( 452)		::com::stencyl::Engine_obj::screenOffsetY = (int)0;
HXLINE( 454)		::com::stencyl::Engine_obj::screenWidth = (int)0;
HXLINE( 455)		::com::stencyl::Engine_obj::screenHeight = (int)0;
HXLINE( 457)		::com::stencyl::Engine_obj::sceneWidth = (int)0;
HXLINE( 458)		::com::stencyl::Engine_obj::sceneHeight = (int)0;
HXLINE( 460)		::com::stencyl::Engine_obj::screenWidthHalf = (int)0;
HXLINE( 461)		::com::stencyl::Engine_obj::screenHeightHalf = (int)0;
HXLINE( 463)		::com::stencyl::Engine_obj::paused = false;
HXLINE( 464)		::com::stencyl::Engine_obj::started = false;
HXLINE( 466)		::com::stencyl::Engine_obj::events =  ::com::stencyl::event::EventMaster_obj::__alloc( HX_CTX );
HXLINE( 468)		::com::stencyl::Engine_obj::ITERATIONS = (int)3;
HXLINE( 469)		::com::stencyl::Engine_obj::physicsScale = ((Float)10.0);
HXLINE( 471)		::com::stencyl::Engine_obj::paddingLeft = (int)0;
HXLINE( 472)		::com::stencyl::Engine_obj::paddingRight = (int)0;
HXLINE( 473)		::com::stencyl::Engine_obj::paddingTop = (int)0;
HXLINE( 474)		::com::stencyl::Engine_obj::paddingBottom = (int)0;
HXLINE( 476)		::com::stencyl::Engine_obj::ngID = HX_("",00,00,00,00);
HXLINE( 477)		::com::stencyl::Engine_obj::ngKey = HX_("",00,00,00,00);
HXLINE( 479)		::com::stencyl::Engine_obj::movieClip = null();
HXLINE( 480)		::com::stencyl::Engine_obj::stage = null();
HXLINE( 482)		::com::stencyl::Engine_obj::STEP_SIZE = (int)10;
HXLINE( 483)		::com::stencyl::Engine_obj::MS_PER_SEC = (int)1000;
HXLINE( 485)		::com::stencyl::Engine_obj::elapsedTime = (int)0;
HXLINE( 486)		::com::stencyl::Engine_obj::timeScale = (int)1;
HXLINE( 487)		::com::stencyl::Engine_obj::totalElapsedTime = (int)0;
HXLINE( 489)		::com::stencyl::Engine_obj::debug = false;
HXLINE( 490)		::com::stencyl::Engine_obj::debugDrawer = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Engine_obj,resetStatics,(void))

void Engine_obj::initBehaviors( ::com::stencyl::behavior::BehaviorManager manager, ::haxe::ds::StringMap behaviorValues, ::Dynamic parent, ::com::stencyl::Engine game,bool initialize){
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_1166_initBehaviors)
HXLINE(1167)		if (hx::IsNull( behaviorValues )) {
HXLINE(1169)			return;
            		}
HXLINE(1172)		{
HXLINE(1172)			 ::Dynamic bi = behaviorValues->iterator();
HXDLIN(1172)			while(( (bool)(bi->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1172)				 ::com::stencyl::behavior::BehaviorInstance bi1 = ( ( ::com::stencyl::behavior::BehaviorInstance)(bi->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1174)				bool _hx_tmp;
HXDLIN(1174)				if (hx::IsNotNull( bi1 )) {
HXLINE(1174)					_hx_tmp = !(bi1->enabled);
            				}
            				else {
HXLINE(1174)					_hx_tmp = true;
            				}
HXDLIN(1174)				if (_hx_tmp) {
HXLINE(1176)					continue;
            				}
HXLINE(1179)				 ::com::stencyl::behavior::Behavior _hx_template = ::com::stencyl::Data_obj::get()->behaviors->get(bi1->behaviorID).StaticCast<  ::com::stencyl::behavior::Behavior >();
HXLINE(1180)				 ::haxe::ds::StringMap attributes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1182)				if (hx::IsNull( _hx_template )) {
HXLINE(1184)					 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN(1184)					_hx_tmp1((HX_("Non-Existent Behavior ID (Init): ",7a,ba,97,24) + bi1->behaviorID),hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),1184,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("initBehaviors",71,b2,ab,b0)));
HXLINE(1185)					continue;
            				}
HXLINE(1189)				if (_hx_template->isEvent) {
HXLINE(1191)					 ::Dynamic key = _hx_template->attributes->keys();
HXDLIN(1191)					while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1191)						::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1193)						 ::com::stencyl::behavior::Attribute attribute = _hx_template->attributes->get(key1).StaticCast<  ::com::stencyl::behavior::Attribute >();
HXLINE(1195)						if (hx::IsNull( attribute )) {
HXLINE(1197)							continue;
            						}
HXLINE(1200)						::String type = attribute->type;
HXLINE(1201)						int ID = attribute->ID;
HXLINE(1203)						if ((type == HX_("list",5e,1c,b3,47))) {
HXLINE(1205)							attributes->set(key1, ::com::stencyl::behavior::Attribute_obj::__alloc( HX_CTX ,ID,attribute->fieldName,attribute->fullName,::cpp::VirtualArray_obj::__new(0),type,null(),attribute->hidden));
            						}
            						else {
HXLINE(1208)							if ((type == HX_("map",9c,0a,53,00))) {
HXLINE(1210)								::String attribute1 = attribute->fieldName;
HXDLIN(1210)								::String attribute2 = attribute->fullName;
HXDLIN(1210)								attributes->set(key1, ::com::stencyl::behavior::Attribute_obj::__alloc( HX_CTX ,ID,attribute1,attribute2, ::haxe::ds::StringMap_obj::__alloc( HX_CTX ),type,null(),attribute->hidden));
            							}
            						}
            					}
            				}
HXLINE(1215)				{
HXLINE(1215)					 ::Dynamic key2 = bi1->values->keys();
HXDLIN(1215)					while(( (bool)(key2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1215)						::String key3 = ( (::String)(key2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1217)						 ::Dynamic value = bi1->values->get(key3);
HXLINE(1219)						 ::com::stencyl::behavior::Attribute attribute3 = _hx_template->attributes->get(key3).StaticCast<  ::com::stencyl::behavior::Attribute >();
HXLINE(1221)						if (hx::IsNull( attribute3 )) {
HXLINE(1223)							continue;
            						}
HXLINE(1226)						::String type1 = attribute3->type;
HXLINE(1227)						int ID1 = attribute3->ID;
HXLINE(1229)						attributes->set(key3, ::com::stencyl::behavior::Attribute_obj::__alloc( HX_CTX ,ID1,attribute3->fieldName,attribute3->fullName,value,type1,null(),attribute3->hidden));
            					}
            				}
HXLINE(1232)				 ::com::stencyl::behavior::Behavior b =  ::com::stencyl::behavior::Behavior_obj::__alloc( HX_CTX ,parent,game,_hx_template->ID,_hx_template->name,_hx_template->classname,true,false,attributes,_hx_template->type,_hx_template->isEvent);
HXLINE(1246)				manager->add(b);
            			}
            		}
HXLINE(1249)		if (initialize) {
HXLINE(1251)			manager->initScripts();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Engine_obj,initBehaviors,(void))

Float Engine_obj::toPhysicalUnits(Float value){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3610_toPhysicalUnits)
HXLINE(3611)		value = ((Float)value / (Float)::com::stencyl::Engine_obj::physicsScale);
HXLINE(3613)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,toPhysicalUnits,return )

Float Engine_obj::toPixelUnits(Float value){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3617_toPixelUnits)
HXLINE(3618)		value = (value * ::com::stencyl::Engine_obj::physicsScale);
HXLINE(3620)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,toPixelUnits,return )

 ::box2D::common::math::B2Vec2 Engine_obj::vToPhysicalUnits( ::box2D::common::math::B2Vec2 v){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3624_vToPhysicalUnits)
HXLINE(3625)		v->x = ::com::stencyl::Engine_obj::toPhysicalUnits(v->x);
HXLINE(3626)		v->y = ::com::stencyl::Engine_obj::toPhysicalUnits(v->y);
HXLINE(3628)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,vToPhysicalUnits,return )

 ::box2D::common::math::B2Vec2 Engine_obj::vToPixelUnits( ::box2D::common::math::B2Vec2 v){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_3632_vToPixelUnits)
HXLINE(3633)		v->x = ::com::stencyl::Engine_obj::toPixelUnits(v->x);
HXLINE(3634)		v->y = ::com::stencyl::Engine_obj::toPixelUnits(v->y);
HXLINE(3636)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,vToPixelUnits,return )

void Engine_obj::invokeListeners(::cpp::VirtualArray listeners){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4183_invokeListeners)
HXLINE(4184)		int r = (int)0;
HXLINE(4186)		while((r < listeners->get_length())){
HXLINE(4188)			try {
            				HX_STACK_CATCHABLE(::String, 0);
HXLINE(4190)				 ::Dynamic f = listeners->__get(r);
HXLINE(4191)				f(listeners);
HXLINE(4193)				if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(4195)					r = (r - (int)1);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass< ::String >() ){
            					HX_STACK_BEGIN_CATCH
            					::String e = _hx_e;
HXLINE(4201)					::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4201,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners",e7,1e,22,ba)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(4204)			r = (r + (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Engine_obj,invokeListeners,(void))

void Engine_obj::invokeListeners2(::cpp::VirtualArray listeners, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4210_invokeListeners2)
HXLINE(4211)		int r = (int)0;
HXLINE(4213)		while((r < listeners->get_length())){
HXLINE(4215)			try {
            				HX_STACK_CATCHABLE(::String, 0);
HXLINE(4217)				 ::Dynamic f = listeners->__get(r);
HXLINE(4218)				f(value,listeners);
HXLINE(4220)				if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(4222)					r = (r - (int)1);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass< ::String >() ){
            					HX_STACK_BEGIN_CATCH
            					::String e = _hx_e;
HXLINE(4228)					::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4228,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners2",6b,eb,b8,23)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(4231)			r = (r + (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Engine_obj,invokeListeners2,(void))

void Engine_obj::invokeListeners3(::cpp::VirtualArray listeners, ::Dynamic value, ::Dynamic value2){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4237_invokeListeners3)
HXLINE(4238)		int r = (int)0;
HXLINE(4240)		while((r < listeners->get_length())){
HXLINE(4242)			try {
            				HX_STACK_CATCHABLE(::String, 0);
HXLINE(4244)				 ::Dynamic f = listeners->__get(r);
HXLINE(4245)				f(value,value2,listeners);
HXLINE(4247)				if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(4249)					r = (r - (int)1);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass< ::String >() ){
            					HX_STACK_BEGIN_CATCH
            					::String e = _hx_e;
HXLINE(4255)					::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4255,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners3",6c,eb,b8,23)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(4258)			r = (r + (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Engine_obj,invokeListeners3,(void))

void Engine_obj::invokeListeners4(::cpp::VirtualArray listeners, ::Dynamic value, ::Dynamic value2, ::Dynamic value3){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4264_invokeListeners4)
HXLINE(4265)		int r = (int)0;
HXLINE(4267)		while((r < listeners->get_length())){
HXLINE(4269)			try {
            				HX_STACK_CATCHABLE(::String, 0);
HXLINE(4271)				 ::Dynamic f = listeners->__get(r);
HXLINE(4272)				f(value,value2,value3,listeners);
HXLINE(4274)				if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(4276)					r = (r - (int)1);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass< ::String >() ){
            					HX_STACK_BEGIN_CATCH
            					::String e = _hx_e;
HXLINE(4282)					::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4282,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners4",6d,eb,b8,23)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(4285)			r = (r + (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Engine_obj,invokeListeners4,(void))

void Engine_obj::invokeListeners5(::cpp::VirtualArray listeners, ::Dynamic value, ::Dynamic value2, ::Dynamic value3, ::Dynamic value4){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4291_invokeListeners5)
HXLINE(4292)		int r = (int)0;
HXLINE(4294)		while((r < listeners->get_length())){
HXLINE(4296)			try {
            				HX_STACK_CATCHABLE(::String, 0);
HXLINE(4298)				 ::Dynamic f = listeners->__get(r);
HXLINE(4299)				f(value,value2,value3,value4,listeners);
HXLINE(4301)				if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(4303)					r = (r - (int)1);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass< ::String >() ){
            					HX_STACK_BEGIN_CATCH
            					::String e = _hx_e;
HXLINE(4309)					::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4309,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners5",6e,eb,b8,23)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(4312)			r = (r + (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Engine_obj,invokeListeners5,(void))

void Engine_obj::invokeListeners6(::cpp::VirtualArray listeners, ::Dynamic value, ::Dynamic value2, ::Dynamic value3, ::Dynamic value4, ::Dynamic value5){
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_4318_invokeListeners6)
HXLINE(4319)		int r = (int)0;
HXLINE(4321)		while((r < listeners->get_length())){
HXLINE(4323)			try {
            				HX_STACK_CATCHABLE(::String, 0);
HXLINE(4325)				 ::Dynamic f = listeners->__get(r);
HXLINE(4326)				f(value,value2,value3,value4,value5,listeners);
HXLINE(4328)				if ((::com::stencyl::utils::Utils_obj::indexOf(listeners,f) == (int)-1)) {
HXLINE(4330)					r = (r - (int)1);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass< ::String >() ){
            					HX_STACK_BEGIN_CATCH
            					::String e = _hx_e;
HXLINE(4336)					::haxe::Log_obj::trace(e,hx::SourceInfo(HX_("Engine.hx",1c,a0,53,be),4336,HX_("com.stencyl.Engine",b1,81,66,b4),HX_("invokeListeners6",6f,eb,b8,23)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(4339)			r = (r + (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Engine_obj,invokeListeners6,(void))


hx::ObjectPtr< Engine_obj > Engine_obj::__new( ::Universal root) {
	hx::ObjectPtr< Engine_obj > __this = new Engine_obj();
	__this->__construct(root);
	return __this;
}

hx::ObjectPtr< Engine_obj > Engine_obj::__alloc(hx::Ctx *_hx_ctx, ::Universal root) {
	Engine_obj *__this = (Engine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Engine_obj), true, "com.stencyl.Engine"));
	*(void **)__this = Engine_obj::_hx_vtable;
	__this->__construct(root);
	return __this;
}

Engine_obj::Engine_obj()
{
}

void Engine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Engine);
	HX_MARK_MEMBER_NAME(zoomMultiplier,"zoomMultiplier");
	HX_MARK_MEMBER_NAME(isHUDZoomable,"isHUDZoomable");
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_MEMBER_NAME(gravityX,"gravityX");
	HX_MARK_MEMBER_NAME(gravityY,"gravityY");
	HX_MARK_MEMBER_NAME(physicalWidth,"physicalWidth");
	HX_MARK_MEMBER_NAME(physicalHeight,"physicalHeight");
	HX_MARK_MEMBER_NAME(leave,"leave");
	HX_MARK_MEMBER_NAME(enter,"enter");
	HX_MARK_MEMBER_NAME(sceneToEnter,"sceneToEnter");
	HX_MARK_MEMBER_NAME(shakeTimer,"shakeTimer");
	HX_MARK_MEMBER_NAME(shakeIntensity,"shakeIntensity");
	HX_MARK_MEMBER_NAME(isShaking,"isShaking");
	HX_MARK_MEMBER_NAME(scene,"scene");
	HX_MARK_MEMBER_NAME(camera,"camera");
	HX_MARK_MEMBER_NAME(sceneInitialized,"sceneInitialized");
	HX_MARK_MEMBER_NAME(channels,"channels");
	HX_MARK_MEMBER_NAME(tasks,"tasks");
	HX_MARK_MEMBER_NAME(regions,"regions");
	HX_MARK_MEMBER_NAME(terrainRegions,"terrainRegions");
	HX_MARK_MEMBER_NAME(joints,"joints");
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(colorLayer,"colorLayer");
	HX_MARK_MEMBER_NAME(maskLayer,"maskLayer");
	HX_MARK_MEMBER_NAME(master,"master");
	HX_MARK_MEMBER_NAME(hudLayer,"hudLayer");
	HX_MARK_MEMBER_NAME(transitionLayer,"transitionLayer");
	HX_MARK_MEMBER_NAME(debugLayer,"debugLayer");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(groups,"groups");
	HX_MARK_MEMBER_NAME(reverseGroups,"reverseGroups");
	HX_MARK_MEMBER_NAME(allActors,"allActors");
	HX_MARK_MEMBER_NAME(nextID,"nextID");
	HX_MARK_MEMBER_NAME(actorsOfType,"actorsOfType");
	HX_MARK_MEMBER_NAME(recycledActorsOfType,"recycledActorsOfType");
	HX_MARK_MEMBER_NAME(actorsToCreateInNextScene,"actorsToCreateInNextScene");
	HX_MARK_MEMBER_NAME(layers,"layers");
	HX_MARK_MEMBER_NAME(layersByName,"layersByName");
	HX_MARK_MEMBER_NAME(interactiveLayers,"interactiveLayers");
	HX_MARK_MEMBER_NAME(backgroundLayers,"backgroundLayers");
	HX_MARK_MEMBER_NAME(dynamicTiles,"dynamicTiles");
	HX_MARK_MEMBER_NAME(animatedTiles,"animatedTiles");
	HX_MARK_MEMBER_NAME(topLayer,"topLayer");
	HX_MARK_MEMBER_NAME(bottomLayer,"bottomLayer");
	HX_MARK_MEMBER_NAME(middleLayer,"middleLayer");
	HX_MARK_MEMBER_NAME(layersToDraw,"layersToDraw");
	HX_MARK_MEMBER_NAME(tileUpdated,"tileUpdated");
	HX_MARK_MEMBER_NAME(loadedAtlases,"loadedAtlases");
	HX_MARK_MEMBER_NAME(atlasesToLoad,"atlasesToLoad");
	HX_MARK_MEMBER_NAME(atlasesToUnload,"atlasesToUnload");
	HX_MARK_MEMBER_NAME(actorsToCreate,"actorsToCreate");
	HX_MARK_MEMBER_NAME(gameAttributes,"gameAttributes");
	HX_MARK_MEMBER_NAME(behaviors,"behaviors");
	HX_MARK_MEMBER_NAME(lastTime,"lastTime");
	HX_MARK_MEMBER_NAME(acc,"acc");
	HX_MARK_MEMBER_NAME(mx,"mx");
	HX_MARK_MEMBER_NAME(my,"my");
	HX_MARK_MEMBER_NAME(collisionPairs,"collisionPairs");
	HX_MARK_MEMBER_NAME(disableCollisionList,"disableCollisionList");
	HX_MARK_MEMBER_NAME(keyPollOccurred,"keyPollOccurred");
	HX_MARK_MEMBER_NAME(whenKeyPressedListeners,"whenKeyPressedListeners");
	HX_MARK_MEMBER_NAME(hasKeyPressedListeners,"hasKeyPressedListeners");
	HX_MARK_MEMBER_NAME(whenAnyKeyPressedListeners,"whenAnyKeyPressedListeners");
	HX_MARK_MEMBER_NAME(whenAnyKeyReleasedListeners,"whenAnyKeyReleasedListeners");
	HX_MARK_MEMBER_NAME(whenAnyGamepadPressedListeners,"whenAnyGamepadPressedListeners");
	HX_MARK_MEMBER_NAME(whenAnyGamepadReleasedListeners,"whenAnyGamepadReleasedListeners");
	HX_MARK_MEMBER_NAME(whenTypeGroupCreatedListeners,"whenTypeGroupCreatedListeners");
	HX_MARK_MEMBER_NAME(whenTypeGroupDiesListeners,"whenTypeGroupDiesListeners");
	HX_MARK_MEMBER_NAME(typeGroupPositionListeners,"typeGroupPositionListeners");
	HX_MARK_MEMBER_NAME(collisionListeners,"collisionListeners");
	HX_MARK_MEMBER_NAME(soundListeners,"soundListeners");
	HX_MARK_MEMBER_NAME(channelListeners,"channelListeners");
	HX_MARK_MEMBER_NAME(whenUpdatedListeners,"whenUpdatedListeners");
	HX_MARK_MEMBER_NAME(whenDrawingListeners,"whenDrawingListeners");
	HX_MARK_MEMBER_NAME(whenMousePressedListeners,"whenMousePressedListeners");
	HX_MARK_MEMBER_NAME(whenMouseReleasedListeners,"whenMouseReleasedListeners");
	HX_MARK_MEMBER_NAME(whenMouseMovedListeners,"whenMouseMovedListeners");
	HX_MARK_MEMBER_NAME(whenMouseDraggedListeners,"whenMouseDraggedListeners");
	HX_MARK_MEMBER_NAME(whenPausedListeners,"whenPausedListeners");
	HX_MARK_MEMBER_NAME(fullscreenListeners,"fullscreenListeners");
	HX_MARK_MEMBER_NAME(screenSizeListeners,"screenSizeListeners");
	HX_MARK_MEMBER_NAME(gameScaleListeners,"gameScaleListeners");
	HX_MARK_MEMBER_NAME(whenSwipedListeners,"whenSwipedListeners");
	HX_MARK_MEMBER_NAME(whenMTStartListeners,"whenMTStartListeners");
	HX_MARK_MEMBER_NAME(whenMTDragListeners,"whenMTDragListeners");
	HX_MARK_MEMBER_NAME(whenMTEndListeners,"whenMTEndListeners");
	HX_MARK_MEMBER_NAME(whenFocusChangedListeners,"whenFocusChangedListeners");
	HX_MARK_MEMBER_NAME(nativeListeners,"nativeListeners");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(shaderLayer,"shaderLayer");
	HX_MARK_MEMBER_NAME(shaders,"shaders");
	HX_MARK_MEMBER_NAME(isFullScreen,"isFullScreen");
	HX_MARK_MEMBER_NAME(ignoreResize,"ignoreResize");
	HX_MARK_MEMBER_NAME(stats,"stats");
	HX_MARK_END_CLASS();
}

void Engine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zoomMultiplier,"zoomMultiplier");
	HX_VISIT_MEMBER_NAME(isHUDZoomable,"isHUDZoomable");
	HX_VISIT_MEMBER_NAME(world,"world");
	HX_VISIT_MEMBER_NAME(gravityX,"gravityX");
	HX_VISIT_MEMBER_NAME(gravityY,"gravityY");
	HX_VISIT_MEMBER_NAME(physicalWidth,"physicalWidth");
	HX_VISIT_MEMBER_NAME(physicalHeight,"physicalHeight");
	HX_VISIT_MEMBER_NAME(leave,"leave");
	HX_VISIT_MEMBER_NAME(enter,"enter");
	HX_VISIT_MEMBER_NAME(sceneToEnter,"sceneToEnter");
	HX_VISIT_MEMBER_NAME(shakeTimer,"shakeTimer");
	HX_VISIT_MEMBER_NAME(shakeIntensity,"shakeIntensity");
	HX_VISIT_MEMBER_NAME(isShaking,"isShaking");
	HX_VISIT_MEMBER_NAME(scene,"scene");
	HX_VISIT_MEMBER_NAME(camera,"camera");
	HX_VISIT_MEMBER_NAME(sceneInitialized,"sceneInitialized");
	HX_VISIT_MEMBER_NAME(channels,"channels");
	HX_VISIT_MEMBER_NAME(tasks,"tasks");
	HX_VISIT_MEMBER_NAME(regions,"regions");
	HX_VISIT_MEMBER_NAME(terrainRegions,"terrainRegions");
	HX_VISIT_MEMBER_NAME(joints,"joints");
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(colorLayer,"colorLayer");
	HX_VISIT_MEMBER_NAME(maskLayer,"maskLayer");
	HX_VISIT_MEMBER_NAME(master,"master");
	HX_VISIT_MEMBER_NAME(hudLayer,"hudLayer");
	HX_VISIT_MEMBER_NAME(transitionLayer,"transitionLayer");
	HX_VISIT_MEMBER_NAME(debugLayer,"debugLayer");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(groups,"groups");
	HX_VISIT_MEMBER_NAME(reverseGroups,"reverseGroups");
	HX_VISIT_MEMBER_NAME(allActors,"allActors");
	HX_VISIT_MEMBER_NAME(nextID,"nextID");
	HX_VISIT_MEMBER_NAME(actorsOfType,"actorsOfType");
	HX_VISIT_MEMBER_NAME(recycledActorsOfType,"recycledActorsOfType");
	HX_VISIT_MEMBER_NAME(actorsToCreateInNextScene,"actorsToCreateInNextScene");
	HX_VISIT_MEMBER_NAME(layers,"layers");
	HX_VISIT_MEMBER_NAME(layersByName,"layersByName");
	HX_VISIT_MEMBER_NAME(interactiveLayers,"interactiveLayers");
	HX_VISIT_MEMBER_NAME(backgroundLayers,"backgroundLayers");
	HX_VISIT_MEMBER_NAME(dynamicTiles,"dynamicTiles");
	HX_VISIT_MEMBER_NAME(animatedTiles,"animatedTiles");
	HX_VISIT_MEMBER_NAME(topLayer,"topLayer");
	HX_VISIT_MEMBER_NAME(bottomLayer,"bottomLayer");
	HX_VISIT_MEMBER_NAME(middleLayer,"middleLayer");
	HX_VISIT_MEMBER_NAME(layersToDraw,"layersToDraw");
	HX_VISIT_MEMBER_NAME(tileUpdated,"tileUpdated");
	HX_VISIT_MEMBER_NAME(loadedAtlases,"loadedAtlases");
	HX_VISIT_MEMBER_NAME(atlasesToLoad,"atlasesToLoad");
	HX_VISIT_MEMBER_NAME(atlasesToUnload,"atlasesToUnload");
	HX_VISIT_MEMBER_NAME(actorsToCreate,"actorsToCreate");
	HX_VISIT_MEMBER_NAME(gameAttributes,"gameAttributes");
	HX_VISIT_MEMBER_NAME(behaviors,"behaviors");
	HX_VISIT_MEMBER_NAME(lastTime,"lastTime");
	HX_VISIT_MEMBER_NAME(acc,"acc");
	HX_VISIT_MEMBER_NAME(mx,"mx");
	HX_VISIT_MEMBER_NAME(my,"my");
	HX_VISIT_MEMBER_NAME(collisionPairs,"collisionPairs");
	HX_VISIT_MEMBER_NAME(disableCollisionList,"disableCollisionList");
	HX_VISIT_MEMBER_NAME(keyPollOccurred,"keyPollOccurred");
	HX_VISIT_MEMBER_NAME(whenKeyPressedListeners,"whenKeyPressedListeners");
	HX_VISIT_MEMBER_NAME(hasKeyPressedListeners,"hasKeyPressedListeners");
	HX_VISIT_MEMBER_NAME(whenAnyKeyPressedListeners,"whenAnyKeyPressedListeners");
	HX_VISIT_MEMBER_NAME(whenAnyKeyReleasedListeners,"whenAnyKeyReleasedListeners");
	HX_VISIT_MEMBER_NAME(whenAnyGamepadPressedListeners,"whenAnyGamepadPressedListeners");
	HX_VISIT_MEMBER_NAME(whenAnyGamepadReleasedListeners,"whenAnyGamepadReleasedListeners");
	HX_VISIT_MEMBER_NAME(whenTypeGroupCreatedListeners,"whenTypeGroupCreatedListeners");
	HX_VISIT_MEMBER_NAME(whenTypeGroupDiesListeners,"whenTypeGroupDiesListeners");
	HX_VISIT_MEMBER_NAME(typeGroupPositionListeners,"typeGroupPositionListeners");
	HX_VISIT_MEMBER_NAME(collisionListeners,"collisionListeners");
	HX_VISIT_MEMBER_NAME(soundListeners,"soundListeners");
	HX_VISIT_MEMBER_NAME(channelListeners,"channelListeners");
	HX_VISIT_MEMBER_NAME(whenUpdatedListeners,"whenUpdatedListeners");
	HX_VISIT_MEMBER_NAME(whenDrawingListeners,"whenDrawingListeners");
	HX_VISIT_MEMBER_NAME(whenMousePressedListeners,"whenMousePressedListeners");
	HX_VISIT_MEMBER_NAME(whenMouseReleasedListeners,"whenMouseReleasedListeners");
	HX_VISIT_MEMBER_NAME(whenMouseMovedListeners,"whenMouseMovedListeners");
	HX_VISIT_MEMBER_NAME(whenMouseDraggedListeners,"whenMouseDraggedListeners");
	HX_VISIT_MEMBER_NAME(whenPausedListeners,"whenPausedListeners");
	HX_VISIT_MEMBER_NAME(fullscreenListeners,"fullscreenListeners");
	HX_VISIT_MEMBER_NAME(screenSizeListeners,"screenSizeListeners");
	HX_VISIT_MEMBER_NAME(gameScaleListeners,"gameScaleListeners");
	HX_VISIT_MEMBER_NAME(whenSwipedListeners,"whenSwipedListeners");
	HX_VISIT_MEMBER_NAME(whenMTStartListeners,"whenMTStartListeners");
	HX_VISIT_MEMBER_NAME(whenMTDragListeners,"whenMTDragListeners");
	HX_VISIT_MEMBER_NAME(whenMTEndListeners,"whenMTEndListeners");
	HX_VISIT_MEMBER_NAME(whenFocusChangedListeners,"whenFocusChangedListeners");
	HX_VISIT_MEMBER_NAME(nativeListeners,"nativeListeners");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(shaderLayer,"shaderLayer");
	HX_VISIT_MEMBER_NAME(shaders,"shaders");
	HX_VISIT_MEMBER_NAME(isFullScreen,"isFullScreen");
	HX_VISIT_MEMBER_NAME(ignoreResize,"ignoreResize");
	HX_VISIT_MEMBER_NAME(stats,"stats");
}

hx::Val Engine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"mx") ) { return hx::Val( mx ); }
		if (HX_FIELD_EQ(inName,"my") ) { return hx::Val( my ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"acc") ) { return hx::Val( acc ); }
		if (HX_FIELD_EQ(inName,"say") ) { return hx::Val( say_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( world ); }
		if (HX_FIELD_EQ(inName,"leave") ) { return hx::Val( leave ); }
		if (HX_FIELD_EQ(inName,"enter") ) { return hx::Val( enter ); }
		if (HX_FIELD_EQ(inName,"scene") ) { return hx::Val( scene ); }
		if (HX_FIELD_EQ(inName,"tasks") ) { return hx::Val( tasks ); }
		if (HX_FIELD_EQ(inName,"stats") ) { return hx::Val( stats ); }
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		if (HX_FIELD_EQ(inName,"shout") ) { return hx::Val( shout_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { return hx::Val( camera ); }
		if (HX_FIELD_EQ(inName,"joints") ) { return hx::Val( joints ); }
		if (HX_FIELD_EQ(inName,"master") ) { return hx::Val( master ); }
		if (HX_FIELD_EQ(inName,"groups") ) { return hx::Val( groups ); }
		if (HX_FIELD_EQ(inName,"nextID") ) { return hx::Val( nextID ); }
		if (HX_FIELD_EQ(inName,"layers") ) { return hx::Val( layers ); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"regions") ) { return hx::Val( regions ); }
		if (HX_FIELD_EQ(inName,"shaders") ) { return hx::Val( shaders ); }
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"addTask") ) { return hx::Val( addTask_dyn() ); }
		if (HX_FIELD_EQ(inName,"setZoom") ) { return hx::Val( setZoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"unpause") ) { return hx::Val( unpause_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gravityX") ) { return hx::Val( gravityX ); }
		if (HX_FIELD_EQ(inName,"gravityY") ) { return hx::Val( gravityY ); }
		if (HX_FIELD_EQ(inName,"channels") ) { return hx::Val( channels ); }
		if (HX_FIELD_EQ(inName,"hudLayer") ) { return hx::Val( hudLayer ); }
		if (HX_FIELD_EQ(inName,"topLayer") ) { return hx::Val( topLayer ); }
		if (HX_FIELD_EQ(inName,"lastTime") ) { return hx::Val( lastTime ); }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return hx::Val( onUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"isPaused") ) { return hx::Val( isPaused_dyn() ); }
		if (HX_FIELD_EQ(inName,"getValue") ) { return hx::Val( getValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"setValue") ) { return hx::Val( setValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"getActor") ) { return hx::Val( getActor_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLayer") ) { return hx::Val( getLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroup") ) { return hx::Val( getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"addJoint") ) { return hx::Val( addJoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getJoint") ) { return hx::Val( getJoint_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isShaking") ) { return hx::Val( isShaking ); }
		if (HX_FIELD_EQ(inName,"maskLayer") ) { return hx::Val( maskLayer ); }
		if (HX_FIELD_EQ(inName,"allActors") ) { return hx::Val( allActors ); }
		if (HX_FIELD_EQ(inName,"behaviors") ) { return hx::Val( behaviors ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return hx::Val( onKeyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"addShader") ) { return hx::Val( addShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadScene") ) { return hx::Val( loadScene_dyn() ); }
		if (HX_FIELD_EQ(inName,"addRegion") ) { return hx::Val( addRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRegion") ) { return hx::Val( getRegion_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shakeTimer") ) { return hx::Val( shakeTimer ); }
		if (HX_FIELD_EQ(inName,"colorLayer") ) { return hx::Val( colorLayer ); }
		if (HX_FIELD_EQ(inName,"debugLayer") ) { return hx::Val( debugLayer ); }
		if (HX_FIELD_EQ(inName,"loadActors") ) { return hx::Val( loadActors_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadCamera") ) { return hx::Val( loadCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJoints") ) { return hx::Val( loadJoints_dyn() ); }
		if (HX_FIELD_EQ(inName,"initLayers") ) { return hx::Val( initLayers_dyn() ); }
		if (HX_FIELD_EQ(inName,"enterScene") ) { return hx::Val( enterScene_dyn() ); }
		if (HX_FIELD_EQ(inName,"postUpdate") ) { return hx::Val( postUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeTask") ) { return hx::Val( removeTask_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCamera") ) { return hx::Val( moveCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendToBack") ) { return hx::Val( sendToBack_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRegions") ) { return hx::Val( getRegions_dyn() ); }
		if (HX_FIELD_EQ(inName,"isInRegion") ) { return hx::Val( isInRegion_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomLayer") ) { return hx::Val( bottomLayer ); }
		if (HX_FIELD_EQ(inName,"middleLayer") ) { return hx::Val( middleLayer ); }
		if (HX_FIELD_EQ(inName,"tileUpdated") ) { return hx::Val( tileUpdated ); }
		if (HX_FIELD_EQ(inName,"shaderLayer") ) { return hx::Val( shaderLayer ); }
		if (HX_FIELD_EQ(inName,"initPhysics") ) { return hx::Val( initPhysics_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadRegions") ) { return hx::Val( loadRegions_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadTerrain") ) { return hx::Val( loadTerrain_dyn() ); }
		if (HX_FIELD_EQ(inName,"switchScene") ) { return hx::Val( switchScene_dyn() ); }
		if (HX_FIELD_EQ(inName,"createActor") ) { return hx::Val( createActor_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeActor") ) { return hx::Val( removeActor_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTopLayer") ) { return hx::Val( getTopLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"shakeScreen") ) { return hx::Val( shakeScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"insertLayer") ) { return hx::Val( insertLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeLayer") ) { return hx::Val( removeLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"nextJointID") ) { return hx::Val( nextJointID_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sceneToEnter") ) { return hx::Val( sceneToEnter ); }
		if (HX_FIELD_EQ(inName,"actorsOfType") ) { return hx::Val( actorsOfType ); }
		if (HX_FIELD_EQ(inName,"layersByName") ) { return hx::Val( layersByName ); }
		if (HX_FIELD_EQ(inName,"dynamicTiles") ) { return hx::Val( dynamicTiles ); }
		if (HX_FIELD_EQ(inName,"layersToDraw") ) { return hx::Val( layersToDraw ); }
		if (HX_FIELD_EQ(inName,"isFullScreen") ) { return hx::Val( isFullScreen ); }
		if (HX_FIELD_EQ(inName,"ignoreResize") ) { return hx::Val( ignoreResize ); }
		if (HX_FIELD_EQ(inName,"reloadScreen") ) { return hx::Val( reloadScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearShaders") ) { return hx::Val( clearShaders_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetShaders") ) { return hx::Val( resetShaders_dyn() ); }
		if (HX_FIELD_EQ(inName,"optimizePool") ) { return hx::Val( optimizePool_dyn() ); }
		if (HX_FIELD_EQ(inName,"recycleActor") ) { return hx::Val( recycleActor_dyn() ); }
		if (HX_FIELD_EQ(inName,"focusChanged") ) { return hx::Val( focusChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"cameraFollow") ) { return hx::Val( cameraFollow_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLayerById") ) { return hx::Val( getLayerById_dyn() ); }
		if (HX_FIELD_EQ(inName,"sendBackward") ) { return hx::Val( sendBackward_dyn() ); }
		if (HX_FIELD_EQ(inName,"bringToFront") ) { return hx::Val( bringToFront_dyn() ); }
		if (HX_FIELD_EQ(inName,"bringForward") ) { return hx::Val( bringForward_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroyJoint") ) { return hx::Val( destroyJoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"createRegion") ) { return hx::Val( createRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeRegion") ) { return hx::Val( removeRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"nextRegionID") ) { return hx::Val( nextRegionID_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isHUDZoomable") ) { return hx::Val( isHUDZoomable ); }
		if (HX_FIELD_EQ(inName,"physicalWidth") ) { return hx::Val( physicalWidth ); }
		if (HX_FIELD_EQ(inName,"reverseGroups") ) { return hx::Val( reverseGroups ); }
		if (HX_FIELD_EQ(inName,"animatedTiles") ) { return hx::Val( animatedTiles ); }
		if (HX_FIELD_EQ(inName,"loadedAtlases") ) { return hx::Val( loadedAtlases ); }
		if (HX_FIELD_EQ(inName,"atlasesToLoad") ) { return hx::Val( atlasesToLoad ); }
		if (HX_FIELD_EQ(inName,"setFullScreen") ) { return hx::Val( setFullScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"soundFinished") ) { return hx::Val( soundFinished_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshLayers") ) { return hx::Val( refreshLayers_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"zoomMultiplier") ) { return hx::Val( zoomMultiplier ); }
		if (HX_FIELD_EQ(inName,"physicalHeight") ) { return hx::Val( physicalHeight ); }
		if (HX_FIELD_EQ(inName,"shakeIntensity") ) { return hx::Val( shakeIntensity ); }
		if (HX_FIELD_EQ(inName,"terrainRegions") ) { return hx::Val( terrainRegions ); }
		if (HX_FIELD_EQ(inName,"actorsToCreate") ) { return hx::Val( actorsToCreate ); }
		if (HX_FIELD_EQ(inName,"gameAttributes") ) { return hx::Val( gameAttributes ); }
		if (HX_FIELD_EQ(inName,"collisionPairs") ) { return hx::Val( collisionPairs ); }
		if (HX_FIELD_EQ(inName,"soundListeners") ) { return hx::Val( soundListeners ); }
		if (HX_FIELD_EQ(inName,"onWindowResize") ) { return hx::Val( onWindowResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"isInFullScreen") ) { return hx::Val( isInFullScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBottomLayer") ) { return hx::Val( getBottomLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMiddleLayer") ) { return hx::Val( getMiddleLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLayerByName") ) { return hx::Val( getLayerByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNextLayerID") ) { return hx::Val( getNextLayerID_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroupByName") ) { return hx::Val( getGroupByName_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"transitionLayer") ) { return hx::Val( transitionLayer ); }
		if (HX_FIELD_EQ(inName,"atlasesToUnload") ) { return hx::Val( atlasesToUnload ); }
		if (HX_FIELD_EQ(inName,"keyPollOccurred") ) { return hx::Val( keyPollOccurred ); }
		if (HX_FIELD_EQ(inName,"nativeListeners") ) { return hx::Val( nativeListeners ); }
		if (HX_FIELD_EQ(inName,"onWindowRestore") ) { return hx::Val( onWindowRestore_dyn() ); }
		if (HX_FIELD_EQ(inName,"setStatsVisible") ) { return hx::Val( setStatsVisible_dyn() ); }
		if (HX_FIELD_EQ(inName,"isTransitioning") ) { return hx::Val( isTransitioning_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleCollision") ) { return hx::Val( handleCollision_dyn() ); }
		if (HX_FIELD_EQ(inName,"getActorsOfType") ) { return hx::Val( getActorsOfType_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLayerByOrder") ) { return hx::Val( getLayerByOrder_dyn() ); }
		if (HX_FIELD_EQ(inName,"getOrderOfLayer") ) { return hx::Val( getOrderOfLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"createBoxRegion") ) { return hx::Val( createBoxRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScrollFactor") ) { return hx::Val( setScrollFactor_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sceneInitialized") ) { return hx::Val( sceneInitialized ); }
		if (HX_FIELD_EQ(inName,"backgroundLayers") ) { return hx::Val( backgroundLayers ); }
		if (HX_FIELD_EQ(inName,"channelListeners") ) { return hx::Val( channelListeners ); }
		if (HX_FIELD_EQ(inName,"onWindowMaximize") ) { return hx::Val( onWindowMaximize_dyn() ); }
		if (HX_FIELD_EQ(inName,"toggleFullScreen") ) { return hx::Val( toggleFullScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"initActorScripts") ) { return hx::Val( initActorScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveActorToLayer") ) { return hx::Val( moveActorToLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveLayerToOrder") ) { return hx::Val( moveLayerToOrder_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPhysicalWidth") ) { return hx::Val( getPhysicalWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"createStickJoint") ) { return hx::Val( createStickJoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"createHingeJoint") ) { return hx::Val( createHingeJoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"addTerrainRegion") ) { return hx::Val( addTerrainRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTerrainRegion") ) { return hx::Val( getTerrainRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGameAttribute") ) { return hx::Val( setGameAttribute_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGameAttribute") ) { return hx::Val( getGameAttribute_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"interactiveLayers") ) { return hx::Val( interactiveLayers ); }
		if (HX_FIELD_EQ(inName,"createActorOfType") ) { return hx::Val( createActorOfType_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopShakingScreen") ) { return hx::Val( stopShakingScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNumberOfLayers") ) { return hx::Val( getNumberOfLayers_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPhysicalHeight") ) { return hx::Val( getPhysicalHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTerrainRegions") ) { return hx::Val( getTerrainRegions_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"collisionListeners") ) { return hx::Val( collisionListeners ); }
		if (HX_FIELD_EQ(inName,"gameScaleListeners") ) { return hx::Val( gameScaleListeners ); }
		if (HX_FIELD_EQ(inName,"whenMTEndListeners") ) { return hx::Val( whenMTEndListeners ); }
		if (HX_FIELD_EQ(inName,"onWindowFullScreen") ) { return hx::Val( onWindowFullScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadDeferredActors") ) { return hx::Val( loadDeferredActors_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadTerrainRegions") ) { return hx::Val( loadTerrainRegions_dyn() ); }
		if (HX_FIELD_EQ(inName,"setColorBackground") ) { return hx::Val( setColorBackground_dyn() ); }
		if (HX_FIELD_EQ(inName,"isTransitioningOut") ) { return hx::Val( isTransitioningOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"createSlidingJoint") ) { return hx::Val( createSlidingJoint_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"whenPausedListeners") ) { return hx::Val( whenPausedListeners ); }
		if (HX_FIELD_EQ(inName,"fullscreenListeners") ) { return hx::Val( fullscreenListeners ); }
		if (HX_FIELD_EQ(inName,"screenSizeListeners") ) { return hx::Val( screenSizeListeners ); }
		if (HX_FIELD_EQ(inName,"whenSwipedListeners") ) { return hx::Val( whenSwipedListeners ); }
		if (HX_FIELD_EQ(inName,"whenMTDragListeners") ) { return hx::Val( whenMTDragListeners ); }
		if (HX_FIELD_EQ(inName,"toggleShadersForHUD") ) { return hx::Val( toggleShadersForHUD_dyn() ); }
		if (HX_FIELD_EQ(inName,"createTerrainRegion") ) { return hx::Val( createTerrainRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeTerrainRegion") ) { return hx::Val( removeTerrainRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"nextTerrainRegionID") ) { return hx::Val( nextTerrainRegionID_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"recycledActorsOfType") ) { return hx::Val( recycledActorsOfType ); }
		if (HX_FIELD_EQ(inName,"disableCollisionList") ) { return hx::Val( disableCollisionList ); }
		if (HX_FIELD_EQ(inName,"whenUpdatedListeners") ) { return hx::Val( whenUpdatedListeners ); }
		if (HX_FIELD_EQ(inName,"whenDrawingListeners") ) { return hx::Val( whenDrawingListeners ); }
		if (HX_FIELD_EQ(inName,"whenMTStartListeners") ) { return hx::Val( whenMTStartListeners ); }
		if (HX_FIELD_EQ(inName,"removeActorFromLayer") ) { return hx::Val( removeActorFromLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"enableGlobalSleeping") ) { return hx::Val( enableGlobalSleeping_dyn() ); }
		if (HX_FIELD_EQ(inName,"createCircularRegion") ) { return hx::Val( createCircularRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLayerScrollFactor") ) { return hx::Val( setLayerScrollFactor_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"disableGlobalSleeping") ) { return hx::Val( disableGlobalSleeping_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOffscreenTolerance") ) { return hx::Val( setOffscreenTolerance_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"hasKeyPressedListeners") ) { return hx::Val( hasKeyPressedListeners ); }
		if (HX_FIELD_EQ(inName,"createActorInNextScene") ) { return hx::Val( createActorInNextScene_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRecycledActorOfType") ) { return hx::Val( getRecycledActorOfType_dyn() ); }
		if (HX_FIELD_EQ(inName,"createCustomStickJoint") ) { return hx::Val( createCustomStickJoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"createBoxTerrainRegion") ) { return hx::Val( createBoxTerrainRegion_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"whenKeyPressedListeners") ) { return hx::Val( whenKeyPressedListeners ); }
		if (HX_FIELD_EQ(inName,"whenMouseMovedListeners") ) { return hx::Val( whenMouseMovedListeners ); }
		if (HX_FIELD_EQ(inName,"getRecycledActorsOfType") ) { return hx::Val( getRecycledActorsOfType_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"actorsToCreateInNextScene") ) { return hx::Val( actorsToCreateInNextScene ); }
		if (HX_FIELD_EQ(inName,"whenMousePressedListeners") ) { return hx::Val( whenMousePressedListeners ); }
		if (HX_FIELD_EQ(inName,"whenMouseDraggedListeners") ) { return hx::Val( whenMouseDraggedListeners ); }
		if (HX_FIELD_EQ(inName,"whenFocusChangedListeners") ) { return hx::Val( whenFocusChangedListeners ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"whenAnyKeyPressedListeners") ) { return hx::Val( whenAnyKeyPressedListeners ); }
		if (HX_FIELD_EQ(inName,"whenTypeGroupDiesListeners") ) { return hx::Val( whenTypeGroupDiesListeners ); }
		if (HX_FIELD_EQ(inName,"typeGroupPositionListeners") ) { return hx::Val( typeGroupPositionListeners ); }
		if (HX_FIELD_EQ(inName,"whenMouseReleasedListeners") ) { return hx::Val( whenMouseReleasedListeners ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"whenAnyKeyReleasedListeners") ) { return hx::Val( whenAnyKeyReleasedListeners ); }
		if (HX_FIELD_EQ(inName,"createCircularTerrainRegion") ) { return hx::Val( createCircularTerrainRegion_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"getNumberOfActorsWithinLayer") ) { return hx::Val( getNumberOfActorsWithinLayer_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"whenTypeGroupCreatedListeners") ) { return hx::Val( whenTypeGroupCreatedListeners ); }
		if (HX_FIELD_EQ(inName,"getRecycledActorOfTypeOnLayer") ) { return hx::Val( getRecycledActorOfTypeOnLayer_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"whenAnyGamepadPressedListeners") ) { return hx::Val( whenAnyGamepadPressedListeners ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"whenAnyGamepadReleasedListeners") ) { return hx::Val( whenAnyGamepadReleasedListeners ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Engine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ngID") ) { outValue = ( ngID ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"SCALE") ) { outValue = ( SCALE ); return true; }
		if (HX_FIELD_EQ(inName,"ngKey") ) { outValue = ( ngKey ); return true; }
		if (HX_FIELD_EQ(inName,"stage") ) { outValue = ( stage ); return true; }
		if (HX_FIELD_EQ(inName,"debug") ) { outValue = ( debug ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"engine") ) { outValue = ( engine ); return true; }
		if (HX_FIELD_EQ(inName,"paused") ) { outValue = ( paused ); return true; }
		if (HX_FIELD_EQ(inName,"events") ) { outValue = ( events ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cameraX") ) { outValue = ( cameraX ); return true; }
		if (HX_FIELD_EQ(inName,"cameraY") ) { outValue = ( cameraY ); return true; }
		if (HX_FIELD_EQ(inName,"started") ) { outValue = ( started ); return true; }
		if (HX_FIELD_EQ(inName,"inFocus") ) { outValue = ( inFocus ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"IMG_BASE") ) { outValue = ( IMG_BASE ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isIPhone6") ) { outValue = ( isIPhone6 ); return true; }
		if (HX_FIELD_EQ(inName,"isIPhoneX") ) { outValue = ( isIPhoneX ); return true; }
		if (HX_FIELD_EQ(inName,"landscape") ) { outValue = ( landscape ); return true; }
		if (HX_FIELD_EQ(inName,"movieClip") ) { outValue = ( movieClip ); return true; }
		if (HX_FIELD_EQ(inName,"STEP_SIZE") ) { outValue = ( STEP_SIZE ); return true; }
		if (HX_FIELD_EQ(inName,"timeScale") ) { outValue = ( timeScale ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"NO_PHYSICS") ) { outValue = ( NO_PHYSICS ); return true; }
		if (HX_FIELD_EQ(inName,"DEBUG_DRAW") ) { outValue = ( DEBUG_DRAW ); return true; }
		if (HX_FIELD_EQ(inName,"isIPhoneXR") ) { outValue = ( isIPhoneXR ); return true; }
		if (HX_FIELD_EQ(inName,"sceneWidth") ) { outValue = ( sceneWidth ); return true; }
		if (HX_FIELD_EQ(inName,"ITERATIONS") ) { outValue = ( ITERATIONS ); return true; }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { outValue = ( paddingTop ); return true; }
		if (HX_FIELD_EQ(inName,"MS_PER_SEC") ) { outValue = ( MS_PER_SEC ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isTabletIOS") ) { outValue = ( isTabletIOS ); return true; }
		if (HX_FIELD_EQ(inName,"screenWidth") ) { outValue = ( screenWidth ); return true; }
		if (HX_FIELD_EQ(inName,"sceneHeight") ) { outValue = ( sceneHeight ); return true; }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { outValue = ( paddingLeft ); return true; }
		if (HX_FIELD_EQ(inName,"elapsedTime") ) { outValue = ( elapsedTime ); return true; }
		if (HX_FIELD_EQ(inName,"debugDrawer") ) { outValue = ( debugDrawer ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isIPhoneXMax") ) { outValue = ( isIPhoneXMax ); return true; }
		if (HX_FIELD_EQ(inName,"screenScaleX") ) { outValue = ( screenScaleX ); return true; }
		if (HX_FIELD_EQ(inName,"screenScaleY") ) { outValue = ( screenScaleY ); return true; }
		if (HX_FIELD_EQ(inName,"screenHeight") ) { outValue = ( screenHeight ); return true; }
		if (HX_FIELD_EQ(inName,"physicsScale") ) { outValue = ( physicsScale ); return true; }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { outValue = ( paddingRight ); return true; }
		if (HX_FIELD_EQ(inName,"resetStatics") ) { outValue = resetStatics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toPixelUnits") ) { outValue = toPixelUnits_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isStandardIOS") ) { outValue = ( isStandardIOS ); return true; }
		if (HX_FIELD_EQ(inName,"isExtendedIOS") ) { outValue = ( isExtendedIOS ); return true; }
		if (HX_FIELD_EQ(inName,"isIPhone6Plus") ) { outValue = ( isIPhone6Plus ); return true; }
		if (HX_FIELD_EQ(inName,"screenOffsetX") ) { outValue = ( screenOffsetX ); return true; }
		if (HX_FIELD_EQ(inName,"screenOffsetY") ) { outValue = ( screenOffsetY ); return true; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { outValue = ( paddingBottom ); return true; }
		if (HX_FIELD_EQ(inName,"initBehaviors") ) { outValue = initBehaviors_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"vToPixelUnits") ) { outValue = vToPixelUnits_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"unzoomedScaleX") ) { outValue = ( unzoomedScaleX ); return true; }
		if (HX_FIELD_EQ(inName,"unzoomedScaleY") ) { outValue = ( unzoomedScaleY ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"screenWidthHalf") ) { outValue = ( screenWidthHalf ); return true; }
		if (HX_FIELD_EQ(inName,"toPhysicalUnits") ) { outValue = toPhysicalUnits_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invokeListeners") ) { outValue = invokeListeners_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"screenHeightHalf") ) { outValue = ( screenHeightHalf ); return true; }
		if (HX_FIELD_EQ(inName,"totalElapsedTime") ) { outValue = ( totalElapsedTime ); return true; }
		if (HX_FIELD_EQ(inName,"vToPhysicalUnits") ) { outValue = vToPhysicalUnits_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invokeListeners2") ) { outValue = invokeListeners2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invokeListeners3") ) { outValue = invokeListeners3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invokeListeners4") ) { outValue = invokeListeners4_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invokeListeners5") ) { outValue = invokeListeners5_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invokeListeners6") ) { outValue = invokeListeners6_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"checkedWideScreen") ) { outValue = ( checkedWideScreen ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"limitCameraToScene") ) { outValue = ( limitCameraToScene ); return true; }
	}
	return false;
}

hx::Val Engine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::com::stencyl::graphics::G >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"mx") ) { mx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"my") ) { my=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"acc") ) { acc=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::Universal >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { world=inValue.Cast<  ::box2D::dynamics::B2World >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leave") ) { leave=inValue.Cast<  ::com::stencyl::graphics::transitions::Transition >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enter") ) { enter=inValue.Cast<  ::com::stencyl::graphics::transitions::Transition >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scene") ) { scene=inValue.Cast<  ::com::stencyl::models::Scene >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tasks") ) { tasks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stats") ) { stats=inValue.Cast<  ::com::nmefermmmtools::debug::Stats >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { camera=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"joints") ) { joints=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"master") ) { master=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groups") ) { groups=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextID") ) { nextID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layers") ) { layers=inValue.Cast<  ::de::polygonal::ds::IntHashTable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::com::stencyl::graphics::shaders::PostProcess >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"regions") ) { regions=inValue.Cast<  ::de::polygonal::ds::IntHashTable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shaders") ) { shaders=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gravityX") ) { gravityX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityY") ) { gravityY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"channels") ) { channels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hudLayer") ) { hudLayer=inValue.Cast<  ::com::stencyl::models::scene::Layer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"topLayer") ) { topLayer=inValue.Cast<  ::com::stencyl::models::scene::Layer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastTime") ) { lastTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isShaking") ) { isShaking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maskLayer") ) { maskLayer=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allActors") ) { allActors=inValue.Cast<  ::de::polygonal::ds::IntHashTable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"behaviors") ) { behaviors=inValue.Cast<  ::com::stencyl::behavior::BehaviorManager >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shakeTimer") ) { shakeTimer=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorLayer") ) { colorLayer=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugLayer") ) { debugLayer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomLayer") ) { bottomLayer=inValue.Cast<  ::com::stencyl::models::scene::Layer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"middleLayer") ) { middleLayer=inValue.Cast<  ::com::stencyl::models::scene::Layer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileUpdated") ) { tileUpdated=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shaderLayer") ) { shaderLayer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sceneToEnter") ) { sceneToEnter=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"actorsOfType") ) { actorsOfType=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layersByName") ) { layersByName=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dynamicTiles") ) { dynamicTiles=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layersToDraw") ) { layersToDraw=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isFullScreen") ) { isFullScreen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ignoreResize") ) { ignoreResize=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isHUDZoomable") ) { isHUDZoomable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"physicalWidth") ) { physicalWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"reverseGroups") ) { reverseGroups=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animatedTiles") ) { animatedTiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loadedAtlases") ) { loadedAtlases=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"atlasesToLoad") ) { atlasesToLoad=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"zoomMultiplier") ) { zoomMultiplier=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"physicalHeight") ) { physicalHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shakeIntensity") ) { shakeIntensity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"terrainRegions") ) { terrainRegions=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"actorsToCreate") ) { actorsToCreate=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameAttributes") ) { gameAttributes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"collisionPairs") ) { collisionPairs=inValue.Cast<  ::de::polygonal::ds::IntHashTable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"soundListeners") ) { soundListeners=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"transitionLayer") ) { transitionLayer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"atlasesToUnload") ) { atlasesToUnload=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keyPollOccurred") ) { keyPollOccurred=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nativeListeners") ) { nativeListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sceneInitialized") ) { sceneInitialized=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backgroundLayers") ) { backgroundLayers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"channelListeners") ) { channelListeners=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"interactiveLayers") ) { interactiveLayers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"collisionListeners") ) { collisionListeners=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameScaleListeners") ) { gameScaleListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenMTEndListeners") ) { whenMTEndListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"whenPausedListeners") ) { whenPausedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fullscreenListeners") ) { fullscreenListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"screenSizeListeners") ) { screenSizeListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenSwipedListeners") ) { whenSwipedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenMTDragListeners") ) { whenMTDragListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"recycledActorsOfType") ) { recycledActorsOfType=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disableCollisionList") ) { disableCollisionList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenUpdatedListeners") ) { whenUpdatedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenDrawingListeners") ) { whenDrawingListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenMTStartListeners") ) { whenMTStartListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"hasKeyPressedListeners") ) { hasKeyPressedListeners=inValue.Cast< bool >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"whenKeyPressedListeners") ) { whenKeyPressedListeners=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenMouseMovedListeners") ) { whenMouseMovedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"actorsToCreateInNextScene") ) { actorsToCreateInNextScene=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenMousePressedListeners") ) { whenMousePressedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenMouseDraggedListeners") ) { whenMouseDraggedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenFocusChangedListeners") ) { whenFocusChangedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"whenAnyKeyPressedListeners") ) { whenAnyKeyPressedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenTypeGroupDiesListeners") ) { whenTypeGroupDiesListeners=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typeGroupPositionListeners") ) { typeGroupPositionListeners=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenMouseReleasedListeners") ) { whenMouseReleasedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"whenAnyKeyReleasedListeners") ) { whenAnyKeyReleasedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"whenTypeGroupCreatedListeners") ) { whenTypeGroupCreatedListeners=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"whenAnyGamepadPressedListeners") ) { whenAnyGamepadPressedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"whenAnyGamepadReleasedListeners") ) { whenAnyGamepadReleasedListeners=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Engine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ngID") ) { ngID=ioValue.Cast< ::String >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"SCALE") ) { SCALE=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"ngKey") ) { ngKey=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		if (HX_FIELD_EQ(inName,"debug") ) { debug=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"engine") ) { engine=ioValue.Cast<  ::com::stencyl::Engine >(); return true; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"events") ) { events=ioValue.Cast<  ::com::stencyl::event::EventMaster >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cameraX") ) { cameraX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"cameraY") ) { cameraY=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"started") ) { started=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"inFocus") ) { inFocus=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"IMG_BASE") ) { IMG_BASE=ioValue.Cast< ::String >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isIPhone6") ) { isIPhone6=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"isIPhoneX") ) { isIPhoneX=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"landscape") ) { landscape=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"movieClip") ) { movieClip=ioValue.Cast<  ::openfl::display::MovieClip >(); return true; }
		if (HX_FIELD_EQ(inName,"STEP_SIZE") ) { STEP_SIZE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeScale") ) { timeScale=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"NO_PHYSICS") ) { NO_PHYSICS=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"DEBUG_DRAW") ) { DEBUG_DRAW=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"isIPhoneXR") ) { isIPhoneXR=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"sceneWidth") ) { sceneWidth=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"ITERATIONS") ) { ITERATIONS=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { paddingTop=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"MS_PER_SEC") ) { MS_PER_SEC=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isTabletIOS") ) { isTabletIOS=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"screenWidth") ) { screenWidth=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sceneHeight") ) { sceneHeight=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { paddingLeft=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"elapsedTime") ) { elapsedTime=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"debugDrawer") ) { debugDrawer=ioValue.Cast<  ::box2D::dynamics::B2DebugDraw >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isIPhoneXMax") ) { isIPhoneXMax=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"screenScaleX") ) { screenScaleX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"screenScaleY") ) { screenScaleY=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"screenHeight") ) { screenHeight=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"physicsScale") ) { physicsScale=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { paddingRight=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isStandardIOS") ) { isStandardIOS=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"isExtendedIOS") ) { isExtendedIOS=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"isIPhone6Plus") ) { isIPhone6Plus=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"screenOffsetX") ) { screenOffsetX=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"screenOffsetY") ) { screenOffsetY=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { paddingBottom=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"unzoomedScaleX") ) { unzoomedScaleX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"unzoomedScaleY") ) { unzoomedScaleY=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"screenWidthHalf") ) { screenWidthHalf=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"screenHeightHalf") ) { screenHeightHalf=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"totalElapsedTime") ) { totalElapsedTime=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"checkedWideScreen") ) { checkedWideScreen=ioValue.Cast< bool >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"limitCameraToScene") ) { limitCameraToScene=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Engine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("zoomMultiplier","\x74","\x44","\x8e","\x5d"));
	outFields->push(HX_HCSTRING("isHUDZoomable","\x3a","\xe6","\x96","\xcc"));
	outFields->push(HX_HCSTRING("world","\x52","\x96","\x64","\xce"));
	outFields->push(HX_HCSTRING("gravityX","\x4a","\x16","\x81","\x87"));
	outFields->push(HX_HCSTRING("gravityY","\x4b","\x16","\x81","\x87"));
	outFields->push(HX_HCSTRING("physicalWidth","\x6f","\x4c","\xd3","\x75"));
	outFields->push(HX_HCSTRING("physicalHeight","\x5e","\x0d","\x5f","\x59"));
	outFields->push(HX_HCSTRING("leave","\xf7","\x34","\x53","\x72"));
	outFields->push(HX_HCSTRING("enter","\x18","\x6d","\x86","\x70"));
	outFields->push(HX_HCSTRING("sceneToEnter","\xb1","\x09","\x61","\x7b"));
	outFields->push(HX_HCSTRING("shakeTimer","\x1f","\x03","\x8b","\x26"));
	outFields->push(HX_HCSTRING("shakeIntensity","\x0d","\xbf","\xa0","\x04"));
	outFields->push(HX_HCSTRING("isShaking","\xb9","\x82","\x28","\x68"));
	outFields->push(HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78"));
	outFields->push(HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7"));
	outFields->push(HX_HCSTRING("sceneInitialized","\x28","\xdf","\xd1","\xea"));
	outFields->push(HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"));
	outFields->push(HX_HCSTRING("tasks","\x8e","\x9d","\xf0","\x0a"));
	outFields->push(HX_HCSTRING("regions","\xff","\x14","\x9c","\x7a"));
	outFields->push(HX_HCSTRING("terrainRegions","\xca","\xa1","\x9b","\xa2"));
	outFields->push(HX_HCSTRING("joints","\xe9","\xe7","\x09","\x91"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("colorLayer","\x6e","\x99","\x2c","\x94"));
	outFields->push(HX_HCSTRING("maskLayer","\x45","\xd9","\x28","\xf6"));
	outFields->push(HX_HCSTRING("master","\xa2","\x80","\x20","\xbb"));
	outFields->push(HX_HCSTRING("hudLayer","\x9a","\xa9","\x6b","\x3c"));
	outFields->push(HX_HCSTRING("transitionLayer","\xfc","\x07","\xec","\xb4"));
	outFields->push(HX_HCSTRING("debugLayer","\x7e","\x52","\xa4","\x6e"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("groups","\x54","\x24","\x28","\x1c"));
	outFields->push(HX_HCSTRING("reverseGroups","\x16","\x57","\x03","\x9e"));
	outFields->push(HX_HCSTRING("allActors","\xdf","\x47","\xae","\xe4"));
	outFields->push(HX_HCSTRING("nextID","\x8e","\x27","\x64","\x72"));
	outFields->push(HX_HCSTRING("actorsOfType","\xef","\xd1","\x84","\x07"));
	outFields->push(HX_HCSTRING("recycledActorsOfType","\x80","\x44","\xcf","\x57"));
	outFields->push(HX_HCSTRING("actorsToCreateInNextScene","\xdf","\xfb","\xaf","\xac"));
	outFields->push(HX_HCSTRING("layers","\x82","\x15","\xb1","\x58"));
	outFields->push(HX_HCSTRING("layersByName","\xe4","\xc2","\xf7","\x16"));
	outFields->push(HX_HCSTRING("interactiveLayers","\x04","\x5d","\x9d","\x65"));
	outFields->push(HX_HCSTRING("backgroundLayers","\x10","\xc4","\x47","\x23"));
	outFields->push(HX_HCSTRING("dynamicTiles","\x86","\x41","\xdf","\xc6"));
	outFields->push(HX_HCSTRING("animatedTiles","\xe2","\x8b","\x7e","\x48"));
	outFields->push(HX_HCSTRING("topLayer","\xfc","\x8e","\x90","\xbd"));
	outFields->push(HX_HCSTRING("bottomLayer","\xe6","\x16","\x51","\xd5"));
	outFields->push(HX_HCSTRING("middleLayer","\x3c","\xea","\x47","\x6b"));
	outFields->push(HX_HCSTRING("layersToDraw","\x41","\x2e","\xd3","\x80"));
	outFields->push(HX_HCSTRING("tileUpdated","\xad","\x00","\x34","\x3d"));
	outFields->push(HX_HCSTRING("loadedAtlases","\xf4","\xe8","\x9a","\xd1"));
	outFields->push(HX_HCSTRING("atlasesToLoad","\x9a","\xe8","\x3c","\x26"));
	outFields->push(HX_HCSTRING("atlasesToUnload","\x73","\x74","\xd9","\xea"));
	outFields->push(HX_HCSTRING("actorsToCreate","\xd5","\xa4","\xe6","\x48"));
	outFields->push(HX_HCSTRING("gameAttributes","\x69","\xc3","\x10","\x26"));
	outFields->push(HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35"));
	outFields->push(HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0"));
	outFields->push(HX_HCSTRING("acc","\x41","\xf1","\x49","\x00"));
	outFields->push(HX_HCSTRING("mx","\x6b","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("my","\x6c","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("collisionPairs","\x47","\xa5","\x4f","\x0c"));
	outFields->push(HX_HCSTRING("disableCollisionList","\xe8","\xe6","\xc6","\x4b"));
	outFields->push(HX_HCSTRING("keyPollOccurred","\x83","\x85","\x54","\x8f"));
	outFields->push(HX_HCSTRING("whenKeyPressedListeners","\xa2","\x0f","\xf3","\x5e"));
	outFields->push(HX_HCSTRING("hasKeyPressedListeners","\x02","\x5b","\xa1","\x00"));
	outFields->push(HX_HCSTRING("whenAnyKeyPressedListeners","\x0a","\x19","\x0e","\x18"));
	outFields->push(HX_HCSTRING("whenAnyKeyReleasedListeners","\xd5","\x6d","\xae","\x0e"));
	outFields->push(HX_HCSTRING("whenAnyGamepadPressedListeners","\x0c","\x93","\x66","\xcb"));
	outFields->push(HX_HCSTRING("whenAnyGamepadReleasedListeners","\x93","\xb5","\xc0","\x48"));
	outFields->push(HX_HCSTRING("whenTypeGroupCreatedListeners","\xa2","\x14","\x48","\x45"));
	outFields->push(HX_HCSTRING("whenTypeGroupDiesListeners","\xc1","\xb0","\x6a","\x99"));
	outFields->push(HX_HCSTRING("typeGroupPositionListeners","\xb1","\x3f","\xd6","\x02"));
	outFields->push(HX_HCSTRING("collisionListeners","\xad","\xfe","\xba","\x02"));
	outFields->push(HX_HCSTRING("soundListeners","\xb0","\x26","\xda","\xd0"));
	outFields->push(HX_HCSTRING("channelListeners","\x3c","\x94","\x08","\x17"));
	outFields->push(HX_HCSTRING("whenUpdatedListeners","\x9e","\xfa","\xf7","\x4b"));
	outFields->push(HX_HCSTRING("whenDrawingListeners","\x1b","\xc5","\xb6","\xe7"));
	outFields->push(HX_HCSTRING("whenMousePressedListeners","\xa8","\x2d","\x31","\x79"));
	outFields->push(HX_HCSTRING("whenMouseReleasedListeners","\x77","\x63","\x3d","\xac"));
	outFields->push(HX_HCSTRING("whenMouseMovedListeners","\x37","\x49","\xf0","\x2d"));
	outFields->push(HX_HCSTRING("whenMouseDraggedListeners","\x38","\xed","\x3a","\xbe"));
	outFields->push(HX_HCSTRING("whenPausedListeners","\x57","\x81","\x0f","\x59"));
	outFields->push(HX_HCSTRING("fullscreenListeners","\xc4","\x6b","\x7f","\xf5"));
	outFields->push(HX_HCSTRING("screenSizeListeners","\x72","\x65","\x87","\x27"));
	outFields->push(HX_HCSTRING("gameScaleListeners","\x27","\x21","\x22","\x6d"));
	outFields->push(HX_HCSTRING("whenSwipedListeners","\xdb","\x5f","\xa3","\xc8"));
	outFields->push(HX_HCSTRING("whenMTStartListeners","\x3e","\xcd","\x75","\xb5"));
	outFields->push(HX_HCSTRING("whenMTDragListeners","\x8a","\xad","\x1d","\x59"));
	outFields->push(HX_HCSTRING("whenMTEndListeners","\x65","\x34","\x8e","\x95"));
	outFields->push(HX_HCSTRING("whenFocusChangedListeners","\xc9","\x14","\xfc","\xa4"));
	outFields->push(HX_HCSTRING("nativeListeners","\xe8","\x10","\xd0","\x33"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("shaderLayer","\x6c","\x2c","\xed","\x46"));
	outFields->push(HX_HCSTRING("shaders","\xae","\x81","\x86","\x5f"));
	outFields->push(HX_HCSTRING("isFullScreen","\xe5","\xd6","\x67","\x00"));
	outFields->push(HX_HCSTRING("ignoreResize","\xa6","\xa0","\x2b","\x05"));
	outFields->push(HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Engine_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Engine_obj,zoomMultiplier),HX_HCSTRING("zoomMultiplier","\x74","\x44","\x8e","\x5d")},
	{hx::fsBool,(int)offsetof(Engine_obj,isHUDZoomable),HX_HCSTRING("isHUDZoomable","\x3a","\xe6","\x96","\xcc")},
	{hx::fsObject /*::box2D::dynamics::B2World*/ ,(int)offsetof(Engine_obj,world),HX_HCSTRING("world","\x52","\x96","\x64","\xce")},
	{hx::fsFloat,(int)offsetof(Engine_obj,gravityX),HX_HCSTRING("gravityX","\x4a","\x16","\x81","\x87")},
	{hx::fsFloat,(int)offsetof(Engine_obj,gravityY),HX_HCSTRING("gravityY","\x4b","\x16","\x81","\x87")},
	{hx::fsFloat,(int)offsetof(Engine_obj,physicalWidth),HX_HCSTRING("physicalWidth","\x6f","\x4c","\xd3","\x75")},
	{hx::fsFloat,(int)offsetof(Engine_obj,physicalHeight),HX_HCSTRING("physicalHeight","\x5e","\x0d","\x5f","\x59")},
	{hx::fsObject /*::com::stencyl::graphics::transitions::Transition*/ ,(int)offsetof(Engine_obj,leave),HX_HCSTRING("leave","\xf7","\x34","\x53","\x72")},
	{hx::fsObject /*::com::stencyl::graphics::transitions::Transition*/ ,(int)offsetof(Engine_obj,enter),HX_HCSTRING("enter","\x18","\x6d","\x86","\x70")},
	{hx::fsInt,(int)offsetof(Engine_obj,sceneToEnter),HX_HCSTRING("sceneToEnter","\xb1","\x09","\x61","\x7b")},
	{hx::fsInt,(int)offsetof(Engine_obj,shakeTimer),HX_HCSTRING("shakeTimer","\x1f","\x03","\x8b","\x26")},
	{hx::fsFloat,(int)offsetof(Engine_obj,shakeIntensity),HX_HCSTRING("shakeIntensity","\x0d","\xbf","\xa0","\x04")},
	{hx::fsBool,(int)offsetof(Engine_obj,isShaking),HX_HCSTRING("isShaking","\xb9","\x82","\x28","\x68")},
	{hx::fsObject /*::com::stencyl::models::Scene*/ ,(int)offsetof(Engine_obj,scene),HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(Engine_obj,camera),HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7")},
	{hx::fsBool,(int)offsetof(Engine_obj,sceneInitialized),HX_HCSTRING("sceneInitialized","\x28","\xdf","\xd1","\xea")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,channels),HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,tasks),HX_HCSTRING("tasks","\x8e","\x9d","\xf0","\x0a")},
	{hx::fsObject /*::de::polygonal::ds::IntHashTable*/ ,(int)offsetof(Engine_obj,regions),HX_HCSTRING("regions","\xff","\x14","\x9c","\x7a")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,terrainRegions),HX_HCSTRING("terrainRegions","\xca","\xa1","\x9b","\xa2")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,joints),HX_HCSTRING("joints","\xe9","\xe7","\x09","\x91")},
	{hx::fsObject /*::Universal*/ ,(int)offsetof(Engine_obj,root),HX_HCSTRING("root","\x22","\xee","\xae","\x4b")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(Engine_obj,colorLayer),HX_HCSTRING("colorLayer","\x6e","\x99","\x2c","\x94")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(Engine_obj,maskLayer),HX_HCSTRING("maskLayer","\x45","\xd9","\x28","\xf6")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Engine_obj,master),HX_HCSTRING("master","\xa2","\x80","\x20","\xbb")},
	{hx::fsObject /*::com::stencyl::models::scene::Layer*/ ,(int)offsetof(Engine_obj,hudLayer),HX_HCSTRING("hudLayer","\x9a","\xa9","\x6b","\x3c")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Engine_obj,transitionLayer),HX_HCSTRING("transitionLayer","\xfc","\x07","\xec","\xb4")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Engine_obj,debugLayer),HX_HCSTRING("debugLayer","\x7e","\x52","\xa4","\x6e")},
	{hx::fsObject /*::com::stencyl::graphics::G*/ ,(int)offsetof(Engine_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,groups),HX_HCSTRING("groups","\x54","\x24","\x28","\x1c")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Engine_obj,reverseGroups),HX_HCSTRING("reverseGroups","\x16","\x57","\x03","\x9e")},
	{hx::fsObject /*::de::polygonal::ds::IntHashTable*/ ,(int)offsetof(Engine_obj,allActors),HX_HCSTRING("allActors","\xdf","\x47","\xae","\xe4")},
	{hx::fsInt,(int)offsetof(Engine_obj,nextID),HX_HCSTRING("nextID","\x8e","\x27","\x64","\x72")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,actorsOfType),HX_HCSTRING("actorsOfType","\xef","\xd1","\x84","\x07")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,recycledActorsOfType),HX_HCSTRING("recycledActorsOfType","\x80","\x44","\xcf","\x57")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,actorsToCreateInNextScene),HX_HCSTRING("actorsToCreateInNextScene","\xdf","\xfb","\xaf","\xac")},
	{hx::fsObject /*::de::polygonal::ds::IntHashTable*/ ,(int)offsetof(Engine_obj,layers),HX_HCSTRING("layers","\x82","\x15","\xb1","\x58")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Engine_obj,layersByName),HX_HCSTRING("layersByName","\xe4","\xc2","\xf7","\x16")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,interactiveLayers),HX_HCSTRING("interactiveLayers","\x04","\x5d","\x9d","\x65")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,backgroundLayers),HX_HCSTRING("backgroundLayers","\x10","\xc4","\x47","\x23")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Engine_obj,dynamicTiles),HX_HCSTRING("dynamicTiles","\x86","\x41","\xdf","\xc6")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,animatedTiles),HX_HCSTRING("animatedTiles","\xe2","\x8b","\x7e","\x48")},
	{hx::fsObject /*::com::stencyl::models::scene::Layer*/ ,(int)offsetof(Engine_obj,topLayer),HX_HCSTRING("topLayer","\xfc","\x8e","\x90","\xbd")},
	{hx::fsObject /*::com::stencyl::models::scene::Layer*/ ,(int)offsetof(Engine_obj,bottomLayer),HX_HCSTRING("bottomLayer","\xe6","\x16","\x51","\xd5")},
	{hx::fsObject /*::com::stencyl::models::scene::Layer*/ ,(int)offsetof(Engine_obj,middleLayer),HX_HCSTRING("middleLayer","\x3c","\xea","\x47","\x6b")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,layersToDraw),HX_HCSTRING("layersToDraw","\x41","\x2e","\xd3","\x80")},
	{hx::fsBool,(int)offsetof(Engine_obj,tileUpdated),HX_HCSTRING("tileUpdated","\xad","\x00","\x34","\x3d")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,loadedAtlases),HX_HCSTRING("loadedAtlases","\xf4","\xe8","\x9a","\xd1")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,atlasesToLoad),HX_HCSTRING("atlasesToLoad","\x9a","\xe8","\x3c","\x26")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,atlasesToUnload),HX_HCSTRING("atlasesToUnload","\x73","\x74","\xd9","\xea")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,actorsToCreate),HX_HCSTRING("actorsToCreate","\xd5","\xa4","\xe6","\x48")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Engine_obj,gameAttributes),HX_HCSTRING("gameAttributes","\x69","\xc3","\x10","\x26")},
	{hx::fsObject /*::com::stencyl::behavior::BehaviorManager*/ ,(int)offsetof(Engine_obj,behaviors),HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35")},
	{hx::fsFloat,(int)offsetof(Engine_obj,lastTime),HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0")},
	{hx::fsFloat,(int)offsetof(Engine_obj,acc),HX_HCSTRING("acc","\x41","\xf1","\x49","\x00")},
	{hx::fsFloat,(int)offsetof(Engine_obj,mx),HX_HCSTRING("mx","\x6b","\x5f","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Engine_obj,my),HX_HCSTRING("my","\x6c","\x5f","\x00","\x00")},
	{hx::fsObject /*::de::polygonal::ds::IntHashTable*/ ,(int)offsetof(Engine_obj,collisionPairs),HX_HCSTRING("collisionPairs","\x47","\xa5","\x4f","\x0c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,disableCollisionList),HX_HCSTRING("disableCollisionList","\xe8","\xe6","\xc6","\x4b")},
	{hx::fsBool,(int)offsetof(Engine_obj,keyPollOccurred),HX_HCSTRING("keyPollOccurred","\x83","\x85","\x54","\x8f")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Engine_obj,whenKeyPressedListeners),HX_HCSTRING("whenKeyPressedListeners","\xa2","\x0f","\xf3","\x5e")},
	{hx::fsBool,(int)offsetof(Engine_obj,hasKeyPressedListeners),HX_HCSTRING("hasKeyPressedListeners","\x02","\x5b","\xa1","\x00")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenAnyKeyPressedListeners),HX_HCSTRING("whenAnyKeyPressedListeners","\x0a","\x19","\x0e","\x18")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenAnyKeyReleasedListeners),HX_HCSTRING("whenAnyKeyReleasedListeners","\xd5","\x6d","\xae","\x0e")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenAnyGamepadPressedListeners),HX_HCSTRING("whenAnyGamepadPressedListeners","\x0c","\x93","\x66","\xcb")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenAnyGamepadReleasedListeners),HX_HCSTRING("whenAnyGamepadReleasedListeners","\x93","\xb5","\xc0","\x48")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(Engine_obj,whenTypeGroupCreatedListeners),HX_HCSTRING("whenTypeGroupCreatedListeners","\xa2","\x14","\x48","\x45")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(Engine_obj,whenTypeGroupDiesListeners),HX_HCSTRING("whenTypeGroupDiesListeners","\xc1","\xb0","\x6a","\x99")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,typeGroupPositionListeners),HX_HCSTRING("typeGroupPositionListeners","\xb1","\x3f","\xd6","\x02")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,collisionListeners),HX_HCSTRING("collisionListeners","\xad","\xfe","\xba","\x02")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(Engine_obj,soundListeners),HX_HCSTRING("soundListeners","\xb0","\x26","\xda","\xd0")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Engine_obj,channelListeners),HX_HCSTRING("channelListeners","\x3c","\x94","\x08","\x17")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenUpdatedListeners),HX_HCSTRING("whenUpdatedListeners","\x9e","\xfa","\xf7","\x4b")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenDrawingListeners),HX_HCSTRING("whenDrawingListeners","\x1b","\xc5","\xb6","\xe7")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenMousePressedListeners),HX_HCSTRING("whenMousePressedListeners","\xa8","\x2d","\x31","\x79")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenMouseReleasedListeners),HX_HCSTRING("whenMouseReleasedListeners","\x77","\x63","\x3d","\xac")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenMouseMovedListeners),HX_HCSTRING("whenMouseMovedListeners","\x37","\x49","\xf0","\x2d")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenMouseDraggedListeners),HX_HCSTRING("whenMouseDraggedListeners","\x38","\xed","\x3a","\xbe")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenPausedListeners),HX_HCSTRING("whenPausedListeners","\x57","\x81","\x0f","\x59")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,fullscreenListeners),HX_HCSTRING("fullscreenListeners","\xc4","\x6b","\x7f","\xf5")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,screenSizeListeners),HX_HCSTRING("screenSizeListeners","\x72","\x65","\x87","\x27")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,gameScaleListeners),HX_HCSTRING("gameScaleListeners","\x27","\x21","\x22","\x6d")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenSwipedListeners),HX_HCSTRING("whenSwipedListeners","\xdb","\x5f","\xa3","\xc8")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenMTStartListeners),HX_HCSTRING("whenMTStartListeners","\x3e","\xcd","\x75","\xb5")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenMTDragListeners),HX_HCSTRING("whenMTDragListeners","\x8a","\xad","\x1d","\x59")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenMTEndListeners),HX_HCSTRING("whenMTEndListeners","\x65","\x34","\x8e","\x95")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Engine_obj,whenFocusChangedListeners),HX_HCSTRING("whenFocusChangedListeners","\xc9","\x14","\xfc","\xa4")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,nativeListeners),HX_HCSTRING("nativeListeners","\xe8","\x10","\xd0","\x33")},
	{hx::fsObject /*::com::stencyl::graphics::shaders::PostProcess*/ ,(int)offsetof(Engine_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Engine_obj,shaderLayer),HX_HCSTRING("shaderLayer","\x6c","\x2c","\xed","\x46")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Engine_obj,shaders),HX_HCSTRING("shaders","\xae","\x81","\x86","\x5f")},
	{hx::fsBool,(int)offsetof(Engine_obj,isFullScreen),HX_HCSTRING("isFullScreen","\xe5","\xd6","\x67","\x00")},
	{hx::fsBool,(int)offsetof(Engine_obj,ignoreResize),HX_HCSTRING("ignoreResize","\xa6","\xa0","\x2b","\x05")},
	{hx::fsObject /*::com::nmefermmmtools::debug::Stats*/ ,(int)offsetof(Engine_obj,stats),HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Engine_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Engine_obj::DOODAD,HX_HCSTRING("DOODAD","\x43","\x0a","\x58","\xe1")},
	{hx::fsString,(void *) &Engine_obj::INTERNAL_SHIFT,HX_HCSTRING("INTERNAL_SHIFT","\xa0","\xee","\x64","\xc4")},
	{hx::fsString,(void *) &Engine_obj::INTERNAL_CTRL,HX_HCSTRING("INTERNAL_CTRL","\x2d","\x18","\xa4","\xd9")},
	{hx::fsBool,(void *) &Engine_obj::NO_PHYSICS,HX_HCSTRING("NO_PHYSICS","\x69","\x53","\x0d","\x27")},
	{hx::fsBool,(void *) &Engine_obj::DEBUG_DRAW,HX_HCSTRING("DEBUG_DRAW","\xd0","\xac","\x13","\xc0")},
	{hx::fsString,(void *) &Engine_obj::IMG_BASE,HX_HCSTRING("IMG_BASE","\x2d","\xad","\x90","\x13")},
	{hx::fsFloat,(void *) &Engine_obj::SCALE,HX_HCSTRING("SCALE","\x6a","\x06","\xbd","\xf6")},
	{hx::fsBool,(void *) &Engine_obj::checkedWideScreen,HX_HCSTRING("checkedWideScreen","\xe6","\xb5","\xf5","\x28")},
	{hx::fsBool,(void *) &Engine_obj::isStandardIOS,HX_HCSTRING("isStandardIOS","\xc6","\x26","\xf2","\x7c")},
	{hx::fsBool,(void *) &Engine_obj::isExtendedIOS,HX_HCSTRING("isExtendedIOS","\xca","\x1e","\xca","\x6d")},
	{hx::fsBool,(void *) &Engine_obj::isIPhone6,HX_HCSTRING("isIPhone6","\x87","\xe3","\x37","\x3a")},
	{hx::fsBool,(void *) &Engine_obj::isIPhone6Plus,HX_HCSTRING("isIPhone6Plus","\x81","\x1e","\xb1","\x07")},
	{hx::fsBool,(void *) &Engine_obj::isIPhoneX,HX_HCSTRING("isIPhoneX","\xa9","\xe3","\x37","\x3a")},
	{hx::fsBool,(void *) &Engine_obj::isIPhoneXMax,HX_HCSTRING("isIPhoneXMax","\x7b","\xce","\x87","\x3d")},
	{hx::fsBool,(void *) &Engine_obj::isIPhoneXR,HX_HCSTRING("isIPhoneXR","\x89","\x50","\xaf","\xb6")},
	{hx::fsBool,(void *) &Engine_obj::isTabletIOS,HX_HCSTRING("isTabletIOS","\x7d","\xf7","\x20","\xae")},
	{hx::fsObject /*::com::stencyl::Engine*/ ,(void *) &Engine_obj::engine,HX_HCSTRING("engine","\xc2","\x47","\x84","\xfc")},
	{hx::fsBool,(void *) &Engine_obj::landscape,HX_HCSTRING("landscape","\x3b","\x78","\xad","\xfc")},
	{hx::fsBool,(void *) &Engine_obj::limitCameraToScene,HX_HCSTRING("limitCameraToScene","\x71","\x5d","\xad","\x2e")},
	{hx::fsFloat,(void *) &Engine_obj::cameraX,HX_HCSTRING("cameraX","\x13","\x8a","\x31","\xe3")},
	{hx::fsFloat,(void *) &Engine_obj::cameraY,HX_HCSTRING("cameraY","\x14","\x8a","\x31","\xe3")},
	{hx::fsFloat,(void *) &Engine_obj::screenScaleX,HX_HCSTRING("screenScaleX","\x1a","\xf3","\x43","\x19")},
	{hx::fsFloat,(void *) &Engine_obj::screenScaleY,HX_HCSTRING("screenScaleY","\x1b","\xf3","\x43","\x19")},
	{hx::fsFloat,(void *) &Engine_obj::unzoomedScaleX,HX_HCSTRING("unzoomedScaleX","\x39","\x3e","\xaf","\x98")},
	{hx::fsFloat,(void *) &Engine_obj::unzoomedScaleY,HX_HCSTRING("unzoomedScaleY","\x3a","\x3e","\xaf","\x98")},
	{hx::fsInt,(void *) &Engine_obj::screenOffsetX,HX_HCSTRING("screenOffsetX","\x59","\x7b","\x8e","\x74")},
	{hx::fsInt,(void *) &Engine_obj::screenOffsetY,HX_HCSTRING("screenOffsetY","\x5a","\x7b","\x8e","\x74")},
	{hx::fsInt,(void *) &Engine_obj::screenWidth,HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81")},
	{hx::fsInt,(void *) &Engine_obj::screenHeight,HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf")},
	{hx::fsInt,(void *) &Engine_obj::sceneWidth,HX_HCSTRING("sceneWidth","\x1a","\x19","\x8b","\x23")},
	{hx::fsInt,(void *) &Engine_obj::sceneHeight,HX_HCSTRING("sceneHeight","\x53","\x56","\x7a","\xac")},
	{hx::fsInt,(void *) &Engine_obj::screenWidthHalf,HX_HCSTRING("screenWidthHalf","\xcd","\x5d","\x1f","\x85")},
	{hx::fsInt,(void *) &Engine_obj::screenHeightHalf,HX_HCSTRING("screenHeightHalf","\xc6","\x1b","\xa8","\xac")},
	{hx::fsBool,(void *) &Engine_obj::paused,HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsBool,(void *) &Engine_obj::started,HX_HCSTRING("started","\x41","\x29","\x1b","\x35")},
	{hx::fsBool,(void *) &Engine_obj::inFocus,HX_HCSTRING("inFocus","\xb3","\x35","\x46","\xa1")},
	{hx::fsObject /*::com::stencyl::event::EventMaster*/ ,(void *) &Engine_obj::events,HX_HCSTRING("events","\x19","\x4f","\x6a","\x96")},
	{hx::fsInt,(void *) &Engine_obj::ITERATIONS,HX_HCSTRING("ITERATIONS","\x36","\x67","\x43","\x54")},
	{hx::fsFloat,(void *) &Engine_obj::physicsScale,HX_HCSTRING("physicsScale","\x43","\xd4","\x44","\x55")},
	{hx::fsInt,(void *) &Engine_obj::paddingLeft,HX_HCSTRING("paddingLeft","\x78","\x4a","\xe6","\x85")},
	{hx::fsInt,(void *) &Engine_obj::paddingRight,HX_HCSTRING("paddingRight","\x4b","\xec","\xa7","\x1a")},
	{hx::fsInt,(void *) &Engine_obj::paddingTop,HX_HCSTRING("paddingTop","\x44","\xfd","\x05","\x3a")},
	{hx::fsInt,(void *) &Engine_obj::paddingBottom,HX_HCSTRING("paddingBottom","\x9c","\x67","\x99","\x4f")},
	{hx::fsString,(void *) &Engine_obj::ngID,HX_HCSTRING("ngID","\x54","\xe0","\x03","\x49")},
	{hx::fsString,(void *) &Engine_obj::ngKey,HX_HCSTRING("ngKey","\xe6","\x0a","\x62","\x9a")},
	{hx::fsObject /*::openfl::display::MovieClip*/ ,(void *) &Engine_obj::movieClip,HX_HCSTRING("movieClip","\xa0","\x02","\x1b","\x18")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &Engine_obj::stage,HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84")},
	{hx::fsInt,(void *) &Engine_obj::STEP_SIZE,HX_HCSTRING("STEP_SIZE","\xd4","\xe1","\xcd","\x44")},
	{hx::fsInt,(void *) &Engine_obj::MS_PER_SEC,HX_HCSTRING("MS_PER_SEC","\x96","\x82","\x9e","\x7f")},
	{hx::fsFloat,(void *) &Engine_obj::elapsedTime,HX_HCSTRING("elapsedTime","\x69","\x5e","\xcd","\xc6")},
	{hx::fsFloat,(void *) &Engine_obj::timeScale,HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d")},
	{hx::fsInt,(void *) &Engine_obj::totalElapsedTime,HX_HCSTRING("totalElapsedTime","\x05","\x71","\x28","\xe7")},
	{hx::fsBool,(void *) &Engine_obj::debug,HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7")},
	{hx::fsObject /*::box2D::dynamics::B2DebugDraw*/ ,(void *) &Engine_obj::debugDrawer,HX_HCSTRING("debugDrawer","\x24","\x54","\x49","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Engine_obj_sMemberFields[] = {
	HX_HCSTRING("zoomMultiplier","\x74","\x44","\x8e","\x5d"),
	HX_HCSTRING("isHUDZoomable","\x3a","\xe6","\x96","\xcc"),
	HX_HCSTRING("world","\x52","\x96","\x64","\xce"),
	HX_HCSTRING("gravityX","\x4a","\x16","\x81","\x87"),
	HX_HCSTRING("gravityY","\x4b","\x16","\x81","\x87"),
	HX_HCSTRING("physicalWidth","\x6f","\x4c","\xd3","\x75"),
	HX_HCSTRING("physicalHeight","\x5e","\x0d","\x5f","\x59"),
	HX_HCSTRING("leave","\xf7","\x34","\x53","\x72"),
	HX_HCSTRING("enter","\x18","\x6d","\x86","\x70"),
	HX_HCSTRING("sceneToEnter","\xb1","\x09","\x61","\x7b"),
	HX_HCSTRING("shakeTimer","\x1f","\x03","\x8b","\x26"),
	HX_HCSTRING("shakeIntensity","\x0d","\xbf","\xa0","\x04"),
	HX_HCSTRING("isShaking","\xb9","\x82","\x28","\x68"),
	HX_HCSTRING("scene","\x4c","\xd9","\xd1","\x78"),
	HX_HCSTRING("camera","\xa5","\x46","\x8c","\xb7"),
	HX_HCSTRING("sceneInitialized","\x28","\xdf","\xd1","\xea"),
	HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"),
	HX_HCSTRING("tasks","\x8e","\x9d","\xf0","\x0a"),
	HX_HCSTRING("regions","\xff","\x14","\x9c","\x7a"),
	HX_HCSTRING("terrainRegions","\xca","\xa1","\x9b","\xa2"),
	HX_HCSTRING("joints","\xe9","\xe7","\x09","\x91"),
	HX_HCSTRING("root","\x22","\xee","\xae","\x4b"),
	HX_HCSTRING("colorLayer","\x6e","\x99","\x2c","\x94"),
	HX_HCSTRING("maskLayer","\x45","\xd9","\x28","\xf6"),
	HX_HCSTRING("master","\xa2","\x80","\x20","\xbb"),
	HX_HCSTRING("hudLayer","\x9a","\xa9","\x6b","\x3c"),
	HX_HCSTRING("transitionLayer","\xfc","\x07","\xec","\xb4"),
	HX_HCSTRING("debugLayer","\x7e","\x52","\xa4","\x6e"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("groups","\x54","\x24","\x28","\x1c"),
	HX_HCSTRING("reverseGroups","\x16","\x57","\x03","\x9e"),
	HX_HCSTRING("allActors","\xdf","\x47","\xae","\xe4"),
	HX_HCSTRING("nextID","\x8e","\x27","\x64","\x72"),
	HX_HCSTRING("actorsOfType","\xef","\xd1","\x84","\x07"),
	HX_HCSTRING("recycledActorsOfType","\x80","\x44","\xcf","\x57"),
	HX_HCSTRING("actorsToCreateInNextScene","\xdf","\xfb","\xaf","\xac"),
	HX_HCSTRING("layers","\x82","\x15","\xb1","\x58"),
	HX_HCSTRING("layersByName","\xe4","\xc2","\xf7","\x16"),
	HX_HCSTRING("interactiveLayers","\x04","\x5d","\x9d","\x65"),
	HX_HCSTRING("backgroundLayers","\x10","\xc4","\x47","\x23"),
	HX_HCSTRING("dynamicTiles","\x86","\x41","\xdf","\xc6"),
	HX_HCSTRING("animatedTiles","\xe2","\x8b","\x7e","\x48"),
	HX_HCSTRING("topLayer","\xfc","\x8e","\x90","\xbd"),
	HX_HCSTRING("bottomLayer","\xe6","\x16","\x51","\xd5"),
	HX_HCSTRING("middleLayer","\x3c","\xea","\x47","\x6b"),
	HX_HCSTRING("layersToDraw","\x41","\x2e","\xd3","\x80"),
	HX_HCSTRING("tileUpdated","\xad","\x00","\x34","\x3d"),
	HX_HCSTRING("loadedAtlases","\xf4","\xe8","\x9a","\xd1"),
	HX_HCSTRING("atlasesToLoad","\x9a","\xe8","\x3c","\x26"),
	HX_HCSTRING("atlasesToUnload","\x73","\x74","\xd9","\xea"),
	HX_HCSTRING("actorsToCreate","\xd5","\xa4","\xe6","\x48"),
	HX_HCSTRING("gameAttributes","\x69","\xc3","\x10","\x26"),
	HX_HCSTRING("behaviors","\xa1","\xef","\xab","\x35"),
	HX_HCSTRING("lastTime","\x83","\xe5","\x45","\xe0"),
	HX_HCSTRING("acc","\x41","\xf1","\x49","\x00"),
	HX_HCSTRING("mx","\x6b","\x5f","\x00","\x00"),
	HX_HCSTRING("my","\x6c","\x5f","\x00","\x00"),
	HX_HCSTRING("collisionPairs","\x47","\xa5","\x4f","\x0c"),
	HX_HCSTRING("disableCollisionList","\xe8","\xe6","\xc6","\x4b"),
	HX_HCSTRING("keyPollOccurred","\x83","\x85","\x54","\x8f"),
	HX_HCSTRING("whenKeyPressedListeners","\xa2","\x0f","\xf3","\x5e"),
	HX_HCSTRING("hasKeyPressedListeners","\x02","\x5b","\xa1","\x00"),
	HX_HCSTRING("whenAnyKeyPressedListeners","\x0a","\x19","\x0e","\x18"),
	HX_HCSTRING("whenAnyKeyReleasedListeners","\xd5","\x6d","\xae","\x0e"),
	HX_HCSTRING("whenAnyGamepadPressedListeners","\x0c","\x93","\x66","\xcb"),
	HX_HCSTRING("whenAnyGamepadReleasedListeners","\x93","\xb5","\xc0","\x48"),
	HX_HCSTRING("whenTypeGroupCreatedListeners","\xa2","\x14","\x48","\x45"),
	HX_HCSTRING("whenTypeGroupDiesListeners","\xc1","\xb0","\x6a","\x99"),
	HX_HCSTRING("typeGroupPositionListeners","\xb1","\x3f","\xd6","\x02"),
	HX_HCSTRING("collisionListeners","\xad","\xfe","\xba","\x02"),
	HX_HCSTRING("soundListeners","\xb0","\x26","\xda","\xd0"),
	HX_HCSTRING("channelListeners","\x3c","\x94","\x08","\x17"),
	HX_HCSTRING("whenUpdatedListeners","\x9e","\xfa","\xf7","\x4b"),
	HX_HCSTRING("whenDrawingListeners","\x1b","\xc5","\xb6","\xe7"),
	HX_HCSTRING("whenMousePressedListeners","\xa8","\x2d","\x31","\x79"),
	HX_HCSTRING("whenMouseReleasedListeners","\x77","\x63","\x3d","\xac"),
	HX_HCSTRING("whenMouseMovedListeners","\x37","\x49","\xf0","\x2d"),
	HX_HCSTRING("whenMouseDraggedListeners","\x38","\xed","\x3a","\xbe"),
	HX_HCSTRING("whenPausedListeners","\x57","\x81","\x0f","\x59"),
	HX_HCSTRING("fullscreenListeners","\xc4","\x6b","\x7f","\xf5"),
	HX_HCSTRING("screenSizeListeners","\x72","\x65","\x87","\x27"),
	HX_HCSTRING("gameScaleListeners","\x27","\x21","\x22","\x6d"),
	HX_HCSTRING("whenSwipedListeners","\xdb","\x5f","\xa3","\xc8"),
	HX_HCSTRING("whenMTStartListeners","\x3e","\xcd","\x75","\xb5"),
	HX_HCSTRING("whenMTDragListeners","\x8a","\xad","\x1d","\x59"),
	HX_HCSTRING("whenMTEndListeners","\x65","\x34","\x8e","\x95"),
	HX_HCSTRING("whenFocusChangedListeners","\xc9","\x14","\xfc","\xa4"),
	HX_HCSTRING("nativeListeners","\xe8","\x10","\xd0","\x33"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("shaderLayer","\x6c","\x2c","\xed","\x46"),
	HX_HCSTRING("shaders","\xae","\x81","\x86","\x5f"),
	HX_HCSTRING("isFullScreen","\xe5","\xd6","\x67","\x00"),
	HX_HCSTRING("ignoreResize","\xa6","\xa0","\x2b","\x05"),
	HX_HCSTRING("stats","\x1f","\x76","\x0b","\x84"),
	HX_HCSTRING("onKeyDown","\x42","\x22","\xf2","\x73"),
	HX_HCSTRING("onWindowResize","\xc3","\x55","\xdb","\xf9"),
	HX_HCSTRING("onWindowRestore","\x9f","\xc0","\x4c","\xad"),
	HX_HCSTRING("onWindowMaximize","\x5b","\xf2","\x90","\xda"),
	HX_HCSTRING("onWindowFullScreen","\xaa","\x3d","\xb4","\x7e"),
	HX_HCSTRING("isInFullScreen","\xaa","\x9d","\xb1","\x72"),
	HX_HCSTRING("setFullScreen","\x9d","\xec","\xc0","\xcf"),
	HX_HCSTRING("toggleFullScreen","\x0f","\x33","\x98","\xf8"),
	HX_HCSTRING("reloadScreen","\xa5","\x8b","\x87","\x1b"),
	HX_HCSTRING("addShader","\x26","\xf4","\x44","\xd5"),
	HX_HCSTRING("clearShaders","\xa1","\x33","\x05","\x3b"),
	HX_HCSTRING("toggleShadersForHUD","\x48","\x41","\xb0","\x96"),
	HX_HCSTRING("resetShaders","\x9f","\xc7","\x64","\xd1"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("setStatsVisible","\xd5","\x8e","\x36","\xa0"),
	HX_HCSTRING("loadScene","\x46","\x25","\x09","\x94"),
	HX_HCSTRING("initPhysics","\x97","\xa7","\xbb","\x76"),
	HX_HCSTRING("loadActors","\xa4","\xfa","\x75","\xcb"),
	HX_HCSTRING("loadDeferredActors","\x23","\x45","\x3f","\x25"),
	HX_HCSTRING("initActorScripts","\xc3","\xb0","\xe4","\xbd"),
	HX_HCSTRING("loadCamera","\x6b","\x75","\xb7","\x6c"),
	HX_HCSTRING("loadRegions","\x79","\xd3","\x39","\x4b"),
	HX_HCSTRING("loadTerrainRegions","\x90","\x06","\x5c","\x82"),
	HX_HCSTRING("loadJoints","\xaf","\x16","\x35","\x46"),
	HX_HCSTRING("loadTerrain","\x2f","\x6a","\xb5","\xf9"),
	HX_HCSTRING("initLayers","\xb2","\x70","\xf6","\x5c"),
	HX_HCSTRING("setColorBackground","\xaf","\x95","\xfa","\x04"),
	HX_HCSTRING("optimizePool","\x59","\x6c","\x12","\x17"),
	HX_HCSTRING("cleanup","\x24","\x0c","\x42","\xab"),
	HX_HCSTRING("switchScene","\xb8","\x6a","\x51","\x6c"),
	HX_HCSTRING("enterScene","\x14","\x65","\x9e","\x74"),
	HX_HCSTRING("isTransitioning","\x23","\xb4","\x94","\x6b"),
	HX_HCSTRING("isTransitioningOut","\x2b","\x9c","\xb2","\x1a"),
	HX_HCSTRING("createActorInNextScene","\xdb","\x44","\xdc","\xe5"),
	HX_HCSTRING("createActor","\x59","\x02","\x22","\x45"),
	HX_HCSTRING("removeActor","\x11","\xa8","\xda","\x19"),
	HX_HCSTRING("removeActorFromLayer","\xb6","\x99","\x9e","\x44"),
	HX_HCSTRING("moveActorToLayer","\x92","\xa8","\x87","\x4b"),
	HX_HCSTRING("recycleActor","\xe2","\x05","\x56","\xea"),
	HX_HCSTRING("getRecycledActorOfType","\xdf","\xf3","\x95","\x9a"),
	HX_HCSTRING("getRecycledActorOfTypeOnLayer","\x13","\x1e","\x9f","\x9a"),
	HX_HCSTRING("createActorOfType","\xaa","\x96","\x78","\xf3"),
	HX_HCSTRING("getTopLayer","\xb2","\x51","\x84","\xe3"),
	HX_HCSTRING("getBottomLayer","\xf0","\x69","\xef","\x5c"),
	HX_HCSTRING("getMiddleLayer","\x46","\x3d","\xe6","\xf2"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"),
	HX_HCSTRING("postUpdate","\x89","\x06","\x3e","\xdc"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("focusChanged","\xfc","\xa3","\x9e","\x23"),
	HX_HCSTRING("handleCollision","\xaa","\x4f","\xa6","\xa9"),
	HX_HCSTRING("soundFinished","\x61","\xc3","\x2c","\x32"),
	HX_HCSTRING("addTask","\x06","\x02","\x34","\x89"),
	HX_HCSTRING("removeTask","\xa9","\xf9","\x15","\xca"),
	HX_HCSTRING("shakeScreen","\xd2","\xe6","\xa2","\xbb"),
	HX_HCSTRING("stopShakingScreen","\xed","\x3f","\xa2","\xb0"),
	HX_HCSTRING("cameraFollow","\xf6","\x55","\x85","\xc2"),
	HX_HCSTRING("moveCamera","\x96","\xc0","\xba","\x07"),
	HX_HCSTRING("setZoom","\xd5","\xe3","\x7c","\x16"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("unpause","\xfd","\xcd","\xe8","\xb9"),
	HX_HCSTRING("isPaused","\x38","\xdc","\xed","\x47"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("getValue","\xfb","\x8e","\x8f","\x91"),
	HX_HCSTRING("setValue","\x6f","\xe8","\xec","\x3f"),
	HX_HCSTRING("say","\x2b","\x98","\x57","\x00"),
	HX_HCSTRING("shout","\x19","\x87","\x27","\x7c"),
	HX_HCSTRING("getActor","\x7f","\xda","\x7d","\x7b"),
	HX_HCSTRING("getActorsOfType","\xa5","\x27","\x6f","\x2a"),
	HX_HCSTRING("getRecycledActorsOfType","\x36","\x40","\x37","\x94"),
	HX_HCSTRING("getLayer","\x5b","\x91","\x97","\xcf"),
	HX_HCSTRING("getLayerById","\x8d","\x00","\xa7","\x92"),
	HX_HCSTRING("getLayerByName","\x7d","\x27","\x1e","\xce"),
	HX_HCSTRING("getLayerByOrder","\x1c","\xc7","\xe0","\x2a"),
	HX_HCSTRING("sendToBack","\xaa","\x6c","\x20","\x18"),
	HX_HCSTRING("sendBackward","\x4b","\xad","\xd5","\x67"),
	HX_HCSTRING("bringToFront","\x3c","\x7a","\x49","\xb4"),
	HX_HCSTRING("bringForward","\xd3","\xf6","\x01","\xc7"),
	HX_HCSTRING("getNumberOfActorsWithinLayer","\x52","\x83","\x79","\x83"),
	HX_HCSTRING("getNumberOfLayers","\x18","\xb9","\xd3","\xdf"),
	HX_HCSTRING("getOrderOfLayer","\x02","\x18","\x37","\x77"),
	HX_HCSTRING("moveLayerToOrder","\xf3","\x33","\x6b","\x66"),
	HX_HCSTRING("getNextLayerID","\x43","\x62","\x29","\xa0"),
	HX_HCSTRING("insertLayer","\xd8","\x5f","\x75","\xb7"),
	HX_HCSTRING("removeLayer","\xed","\x5e","\xf4","\x6d"),
	HX_HCSTRING("refreshLayers","\xbd","\xb9","\xeb","\x56"),
	HX_HCSTRING("getPhysicalWidth","\xf9","\xf5","\xf3","\xdf"),
	HX_HCSTRING("getPhysicalHeight","\x94","\xbc","\xd2","\xcb"),
	HX_HCSTRING("enableGlobalSleeping","\x91","\x62","\xe0","\x80"),
	HX_HCSTRING("disableGlobalSleeping","\xb6","\x64","\xa8","\x9a"),
	HX_HCSTRING("getGroup","\xc9","\xc2","\xcb","\xf9"),
	HX_HCSTRING("getGroupByName","\x6b","\x1f","\x46","\x11"),
	HX_HCSTRING("nextJointID","\xf2","\x56","\xea","\x2d"),
	HX_HCSTRING("addJoint","\x69","\x5f","\x85","\xcb"),
	HX_HCSTRING("getJoint","\xd4","\x48","\xff","\xb1"),
	HX_HCSTRING("destroyJoint","\xf0","\x31","\x28","\x44"),
	HX_HCSTRING("createStickJoint","\xf6","\xeb","\x07","\x64"),
	HX_HCSTRING("createCustomStickJoint","\x07","\xdc","\xad","\xa5"),
	HX_HCSTRING("createHingeJoint","\xbb","\x2d","\xa3","\x6e"),
	HX_HCSTRING("createSlidingJoint","\xd8","\x92","\xcb","\x8d"),
	HX_HCSTRING("createRegion","\x10","\x01","\xe2","\x22"),
	HX_HCSTRING("createBoxRegion","\xc3","\x46","\x6f","\xe1"),
	HX_HCSTRING("createCircularRegion","\xcf","\x28","\xe8","\xb3"),
	HX_HCSTRING("addRegion","\xf5","\xf5","\xb0","\xb8"),
	HX_HCSTRING("removeRegion","\x58","\x5c","\xba","\x6f"),
	HX_HCSTRING("getRegion","\x2a","\x4a","\xe3","\x7c"),
	HX_HCSTRING("getRegions","\x09","\x9b","\xfd","\xc9"),
	HX_HCSTRING("nextRegionID","\xe2","\x11","\xf5","\x77"),
	HX_HCSTRING("isInRegion","\xc3","\x1c","\xba","\x03"),
	HX_HCSTRING("createTerrainRegion","\xed","\x51","\xcf","\xe6"),
	HX_HCSTRING("createBoxTerrainRegion","\x9a","\x78","\xea","\x5a"),
	HX_HCSTRING("createCircularTerrainRegion","\x0e","\x30","\x8f","\x7e"),
	HX_HCSTRING("addTerrainRegion","\xa8","\xf3","\xa6","\x05"),
	HX_HCSTRING("removeTerrainRegion","\xa5","\x6f","\xb8","\x69"),
	HX_HCSTRING("getTerrainRegion","\x13","\xc0","\x98","\x70"),
	HX_HCSTRING("getTerrainRegions","\x00","\x51","\x0f","\x15"),
	HX_HCSTRING("nextTerrainRegionID","\xf1","\xd6","\x46","\x17"),
	HX_HCSTRING("setGameAttribute","\xc8","\xe4","\x35","\x13"),
	HX_HCSTRING("getGameAttribute","\x54","\xf7","\xf3","\xbc"),
	HX_HCSTRING("setOffscreenTolerance","\xb4","\x05","\x2b","\xba"),
	HX_HCSTRING("setScrollFactor","\x7e","\xbf","\x85","\x5a"),
	HX_HCSTRING("setLayerScrollFactor","\x2b","\x9e","\x33","\xf9"),
	::String(null()) };

static void Engine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Engine_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Engine_obj::DOODAD,"DOODAD");
	HX_MARK_MEMBER_NAME(Engine_obj::INTERNAL_SHIFT,"INTERNAL_SHIFT");
	HX_MARK_MEMBER_NAME(Engine_obj::INTERNAL_CTRL,"INTERNAL_CTRL");
	HX_MARK_MEMBER_NAME(Engine_obj::NO_PHYSICS,"NO_PHYSICS");
	HX_MARK_MEMBER_NAME(Engine_obj::DEBUG_DRAW,"DEBUG_DRAW");
	HX_MARK_MEMBER_NAME(Engine_obj::IMG_BASE,"IMG_BASE");
	HX_MARK_MEMBER_NAME(Engine_obj::SCALE,"SCALE");
	HX_MARK_MEMBER_NAME(Engine_obj::checkedWideScreen,"checkedWideScreen");
	HX_MARK_MEMBER_NAME(Engine_obj::isStandardIOS,"isStandardIOS");
	HX_MARK_MEMBER_NAME(Engine_obj::isExtendedIOS,"isExtendedIOS");
	HX_MARK_MEMBER_NAME(Engine_obj::isIPhone6,"isIPhone6");
	HX_MARK_MEMBER_NAME(Engine_obj::isIPhone6Plus,"isIPhone6Plus");
	HX_MARK_MEMBER_NAME(Engine_obj::isIPhoneX,"isIPhoneX");
	HX_MARK_MEMBER_NAME(Engine_obj::isIPhoneXMax,"isIPhoneXMax");
	HX_MARK_MEMBER_NAME(Engine_obj::isIPhoneXR,"isIPhoneXR");
	HX_MARK_MEMBER_NAME(Engine_obj::isTabletIOS,"isTabletIOS");
	HX_MARK_MEMBER_NAME(Engine_obj::engine,"engine");
	HX_MARK_MEMBER_NAME(Engine_obj::landscape,"landscape");
	HX_MARK_MEMBER_NAME(Engine_obj::limitCameraToScene,"limitCameraToScene");
	HX_MARK_MEMBER_NAME(Engine_obj::cameraX,"cameraX");
	HX_MARK_MEMBER_NAME(Engine_obj::cameraY,"cameraY");
	HX_MARK_MEMBER_NAME(Engine_obj::screenScaleX,"screenScaleX");
	HX_MARK_MEMBER_NAME(Engine_obj::screenScaleY,"screenScaleY");
	HX_MARK_MEMBER_NAME(Engine_obj::unzoomedScaleX,"unzoomedScaleX");
	HX_MARK_MEMBER_NAME(Engine_obj::unzoomedScaleY,"unzoomedScaleY");
	HX_MARK_MEMBER_NAME(Engine_obj::screenOffsetX,"screenOffsetX");
	HX_MARK_MEMBER_NAME(Engine_obj::screenOffsetY,"screenOffsetY");
	HX_MARK_MEMBER_NAME(Engine_obj::screenWidth,"screenWidth");
	HX_MARK_MEMBER_NAME(Engine_obj::screenHeight,"screenHeight");
	HX_MARK_MEMBER_NAME(Engine_obj::sceneWidth,"sceneWidth");
	HX_MARK_MEMBER_NAME(Engine_obj::sceneHeight,"sceneHeight");
	HX_MARK_MEMBER_NAME(Engine_obj::screenWidthHalf,"screenWidthHalf");
	HX_MARK_MEMBER_NAME(Engine_obj::screenHeightHalf,"screenHeightHalf");
	HX_MARK_MEMBER_NAME(Engine_obj::paused,"paused");
	HX_MARK_MEMBER_NAME(Engine_obj::started,"started");
	HX_MARK_MEMBER_NAME(Engine_obj::inFocus,"inFocus");
	HX_MARK_MEMBER_NAME(Engine_obj::events,"events");
	HX_MARK_MEMBER_NAME(Engine_obj::ITERATIONS,"ITERATIONS");
	HX_MARK_MEMBER_NAME(Engine_obj::physicsScale,"physicsScale");
	HX_MARK_MEMBER_NAME(Engine_obj::paddingLeft,"paddingLeft");
	HX_MARK_MEMBER_NAME(Engine_obj::paddingRight,"paddingRight");
	HX_MARK_MEMBER_NAME(Engine_obj::paddingTop,"paddingTop");
	HX_MARK_MEMBER_NAME(Engine_obj::paddingBottom,"paddingBottom");
	HX_MARK_MEMBER_NAME(Engine_obj::ngID,"ngID");
	HX_MARK_MEMBER_NAME(Engine_obj::ngKey,"ngKey");
	HX_MARK_MEMBER_NAME(Engine_obj::movieClip,"movieClip");
	HX_MARK_MEMBER_NAME(Engine_obj::stage,"stage");
	HX_MARK_MEMBER_NAME(Engine_obj::STEP_SIZE,"STEP_SIZE");
	HX_MARK_MEMBER_NAME(Engine_obj::MS_PER_SEC,"MS_PER_SEC");
	HX_MARK_MEMBER_NAME(Engine_obj::elapsedTime,"elapsedTime");
	HX_MARK_MEMBER_NAME(Engine_obj::timeScale,"timeScale");
	HX_MARK_MEMBER_NAME(Engine_obj::totalElapsedTime,"totalElapsedTime");
	HX_MARK_MEMBER_NAME(Engine_obj::debug,"debug");
	HX_MARK_MEMBER_NAME(Engine_obj::debugDrawer,"debugDrawer");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Engine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Engine_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Engine_obj::DOODAD,"DOODAD");
	HX_VISIT_MEMBER_NAME(Engine_obj::INTERNAL_SHIFT,"INTERNAL_SHIFT");
	HX_VISIT_MEMBER_NAME(Engine_obj::INTERNAL_CTRL,"INTERNAL_CTRL");
	HX_VISIT_MEMBER_NAME(Engine_obj::NO_PHYSICS,"NO_PHYSICS");
	HX_VISIT_MEMBER_NAME(Engine_obj::DEBUG_DRAW,"DEBUG_DRAW");
	HX_VISIT_MEMBER_NAME(Engine_obj::IMG_BASE,"IMG_BASE");
	HX_VISIT_MEMBER_NAME(Engine_obj::SCALE,"SCALE");
	HX_VISIT_MEMBER_NAME(Engine_obj::checkedWideScreen,"checkedWideScreen");
	HX_VISIT_MEMBER_NAME(Engine_obj::isStandardIOS,"isStandardIOS");
	HX_VISIT_MEMBER_NAME(Engine_obj::isExtendedIOS,"isExtendedIOS");
	HX_VISIT_MEMBER_NAME(Engine_obj::isIPhone6,"isIPhone6");
	HX_VISIT_MEMBER_NAME(Engine_obj::isIPhone6Plus,"isIPhone6Plus");
	HX_VISIT_MEMBER_NAME(Engine_obj::isIPhoneX,"isIPhoneX");
	HX_VISIT_MEMBER_NAME(Engine_obj::isIPhoneXMax,"isIPhoneXMax");
	HX_VISIT_MEMBER_NAME(Engine_obj::isIPhoneXR,"isIPhoneXR");
	HX_VISIT_MEMBER_NAME(Engine_obj::isTabletIOS,"isTabletIOS");
	HX_VISIT_MEMBER_NAME(Engine_obj::engine,"engine");
	HX_VISIT_MEMBER_NAME(Engine_obj::landscape,"landscape");
	HX_VISIT_MEMBER_NAME(Engine_obj::limitCameraToScene,"limitCameraToScene");
	HX_VISIT_MEMBER_NAME(Engine_obj::cameraX,"cameraX");
	HX_VISIT_MEMBER_NAME(Engine_obj::cameraY,"cameraY");
	HX_VISIT_MEMBER_NAME(Engine_obj::screenScaleX,"screenScaleX");
	HX_VISIT_MEMBER_NAME(Engine_obj::screenScaleY,"screenScaleY");
	HX_VISIT_MEMBER_NAME(Engine_obj::unzoomedScaleX,"unzoomedScaleX");
	HX_VISIT_MEMBER_NAME(Engine_obj::unzoomedScaleY,"unzoomedScaleY");
	HX_VISIT_MEMBER_NAME(Engine_obj::screenOffsetX,"screenOffsetX");
	HX_VISIT_MEMBER_NAME(Engine_obj::screenOffsetY,"screenOffsetY");
	HX_VISIT_MEMBER_NAME(Engine_obj::screenWidth,"screenWidth");
	HX_VISIT_MEMBER_NAME(Engine_obj::screenHeight,"screenHeight");
	HX_VISIT_MEMBER_NAME(Engine_obj::sceneWidth,"sceneWidth");
	HX_VISIT_MEMBER_NAME(Engine_obj::sceneHeight,"sceneHeight");
	HX_VISIT_MEMBER_NAME(Engine_obj::screenWidthHalf,"screenWidthHalf");
	HX_VISIT_MEMBER_NAME(Engine_obj::screenHeightHalf,"screenHeightHalf");
	HX_VISIT_MEMBER_NAME(Engine_obj::paused,"paused");
	HX_VISIT_MEMBER_NAME(Engine_obj::started,"started");
	HX_VISIT_MEMBER_NAME(Engine_obj::inFocus,"inFocus");
	HX_VISIT_MEMBER_NAME(Engine_obj::events,"events");
	HX_VISIT_MEMBER_NAME(Engine_obj::ITERATIONS,"ITERATIONS");
	HX_VISIT_MEMBER_NAME(Engine_obj::physicsScale,"physicsScale");
	HX_VISIT_MEMBER_NAME(Engine_obj::paddingLeft,"paddingLeft");
	HX_VISIT_MEMBER_NAME(Engine_obj::paddingRight,"paddingRight");
	HX_VISIT_MEMBER_NAME(Engine_obj::paddingTop,"paddingTop");
	HX_VISIT_MEMBER_NAME(Engine_obj::paddingBottom,"paddingBottom");
	HX_VISIT_MEMBER_NAME(Engine_obj::ngID,"ngID");
	HX_VISIT_MEMBER_NAME(Engine_obj::ngKey,"ngKey");
	HX_VISIT_MEMBER_NAME(Engine_obj::movieClip,"movieClip");
	HX_VISIT_MEMBER_NAME(Engine_obj::stage,"stage");
	HX_VISIT_MEMBER_NAME(Engine_obj::STEP_SIZE,"STEP_SIZE");
	HX_VISIT_MEMBER_NAME(Engine_obj::MS_PER_SEC,"MS_PER_SEC");
	HX_VISIT_MEMBER_NAME(Engine_obj::elapsedTime,"elapsedTime");
	HX_VISIT_MEMBER_NAME(Engine_obj::timeScale,"timeScale");
	HX_VISIT_MEMBER_NAME(Engine_obj::totalElapsedTime,"totalElapsedTime");
	HX_VISIT_MEMBER_NAME(Engine_obj::debug,"debug");
	HX_VISIT_MEMBER_NAME(Engine_obj::debugDrawer,"debugDrawer");
};

#endif

hx::Class Engine_obj::__mClass;

static ::String Engine_obj_sStaticFields[] = {
	HX_HCSTRING("DOODAD","\x43","\x0a","\x58","\xe1"),
	HX_HCSTRING("INTERNAL_SHIFT","\xa0","\xee","\x64","\xc4"),
	HX_HCSTRING("INTERNAL_CTRL","\x2d","\x18","\xa4","\xd9"),
	HX_HCSTRING("NO_PHYSICS","\x69","\x53","\x0d","\x27"),
	HX_HCSTRING("DEBUG_DRAW","\xd0","\xac","\x13","\xc0"),
	HX_HCSTRING("IMG_BASE","\x2d","\xad","\x90","\x13"),
	HX_HCSTRING("SCALE","\x6a","\x06","\xbd","\xf6"),
	HX_HCSTRING("checkedWideScreen","\xe6","\xb5","\xf5","\x28"),
	HX_HCSTRING("isStandardIOS","\xc6","\x26","\xf2","\x7c"),
	HX_HCSTRING("isExtendedIOS","\xca","\x1e","\xca","\x6d"),
	HX_HCSTRING("isIPhone6","\x87","\xe3","\x37","\x3a"),
	HX_HCSTRING("isIPhone6Plus","\x81","\x1e","\xb1","\x07"),
	HX_HCSTRING("isIPhoneX","\xa9","\xe3","\x37","\x3a"),
	HX_HCSTRING("isIPhoneXMax","\x7b","\xce","\x87","\x3d"),
	HX_HCSTRING("isIPhoneXR","\x89","\x50","\xaf","\xb6"),
	HX_HCSTRING("isTabletIOS","\x7d","\xf7","\x20","\xae"),
	HX_HCSTRING("engine","\xc2","\x47","\x84","\xfc"),
	HX_HCSTRING("landscape","\x3b","\x78","\xad","\xfc"),
	HX_HCSTRING("limitCameraToScene","\x71","\x5d","\xad","\x2e"),
	HX_HCSTRING("cameraX","\x13","\x8a","\x31","\xe3"),
	HX_HCSTRING("cameraY","\x14","\x8a","\x31","\xe3"),
	HX_HCSTRING("screenScaleX","\x1a","\xf3","\x43","\x19"),
	HX_HCSTRING("screenScaleY","\x1b","\xf3","\x43","\x19"),
	HX_HCSTRING("unzoomedScaleX","\x39","\x3e","\xaf","\x98"),
	HX_HCSTRING("unzoomedScaleY","\x3a","\x3e","\xaf","\x98"),
	HX_HCSTRING("screenOffsetX","\x59","\x7b","\x8e","\x74"),
	HX_HCSTRING("screenOffsetY","\x5a","\x7b","\x8e","\x74"),
	HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81"),
	HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf"),
	HX_HCSTRING("sceneWidth","\x1a","\x19","\x8b","\x23"),
	HX_HCSTRING("sceneHeight","\x53","\x56","\x7a","\xac"),
	HX_HCSTRING("screenWidthHalf","\xcd","\x5d","\x1f","\x85"),
	HX_HCSTRING("screenHeightHalf","\xc6","\x1b","\xa8","\xac"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("started","\x41","\x29","\x1b","\x35"),
	HX_HCSTRING("inFocus","\xb3","\x35","\x46","\xa1"),
	HX_HCSTRING("events","\x19","\x4f","\x6a","\x96"),
	HX_HCSTRING("ITERATIONS","\x36","\x67","\x43","\x54"),
	HX_HCSTRING("physicsScale","\x43","\xd4","\x44","\x55"),
	HX_HCSTRING("paddingLeft","\x78","\x4a","\xe6","\x85"),
	HX_HCSTRING("paddingRight","\x4b","\xec","\xa7","\x1a"),
	HX_HCSTRING("paddingTop","\x44","\xfd","\x05","\x3a"),
	HX_HCSTRING("paddingBottom","\x9c","\x67","\x99","\x4f"),
	HX_HCSTRING("ngID","\x54","\xe0","\x03","\x49"),
	HX_HCSTRING("ngKey","\xe6","\x0a","\x62","\x9a"),
	HX_HCSTRING("movieClip","\xa0","\x02","\x1b","\x18"),
	HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"),
	HX_HCSTRING("STEP_SIZE","\xd4","\xe1","\xcd","\x44"),
	HX_HCSTRING("MS_PER_SEC","\x96","\x82","\x9e","\x7f"),
	HX_HCSTRING("elapsedTime","\x69","\x5e","\xcd","\xc6"),
	HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d"),
	HX_HCSTRING("totalElapsedTime","\x05","\x71","\x28","\xe7"),
	HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"),
	HX_HCSTRING("debugDrawer","\x24","\x54","\x49","\xe8"),
	HX_HCSTRING("resetStatics","\xf6","\x81","\x43","\xa8"),
	HX_HCSTRING("initBehaviors","\x71","\xb2","\xab","\xb0"),
	HX_HCSTRING("toPhysicalUnits","\x5d","\xd9","\x73","\x85"),
	HX_HCSTRING("toPixelUnits","\x64","\xde","\xb4","\xe7"),
	HX_HCSTRING("vToPhysicalUnits","\x87","\xd5","\x32","\xb6"),
	HX_HCSTRING("vToPixelUnits","\xfa","\x03","\x81","\xd6"),
	HX_HCSTRING("invokeListeners","\xe7","\x1e","\x22","\xba"),
	HX_HCSTRING("invokeListeners2","\x6b","\xeb","\xb8","\x23"),
	HX_HCSTRING("invokeListeners3","\x6c","\xeb","\xb8","\x23"),
	HX_HCSTRING("invokeListeners4","\x6d","\xeb","\xb8","\x23"),
	HX_HCSTRING("invokeListeners5","\x6e","\xeb","\xb8","\x23"),
	HX_HCSTRING("invokeListeners6","\x6f","\xeb","\xb8","\x23"),
	::String(null())
};

void Engine_obj::__register()
{
	hx::Object *dummy = new Engine_obj;
	Engine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.Engine","\xb1","\x81","\x66","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Engine_obj::__GetStatic;
	__mClass->mSetStaticField = &Engine_obj::__SetStatic;
	__mClass->mMarkFunc = Engine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Engine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Engine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Engine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Engine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Engine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Engine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Engine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_106_boot)
HXDLIN( 106)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("getLayer",5b,91,97,cf), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("deprecated",73,ff,22,84),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Use getLayerById or getLayerByName",60,5b,0a,d2))))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_112_boot)
HXDLIN( 112)		DOODAD = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_114_boot)
HXDLIN( 114)		INTERNAL_SHIFT = HX_("iSHIFT",59,07,8a,f5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_115_boot)
HXDLIN( 115)		INTERNAL_CTRL = HX_("iCTRL",94,39,9c,a1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_121_boot)
HXDLIN( 121)		NO_PHYSICS = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_122_boot)
HXDLIN( 122)		DEBUG_DRAW = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_124_boot)
HXDLIN( 124)		IMG_BASE = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_125_boot)
HXDLIN( 125)		SCALE = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_127_boot)
HXDLIN( 127)		checkedWideScreen = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_128_boot)
HXDLIN( 128)		isStandardIOS = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_129_boot)
HXDLIN( 129)		isExtendedIOS = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_130_boot)
HXDLIN( 130)		isIPhone6 = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_131_boot)
HXDLIN( 131)		isIPhone6Plus = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_132_boot)
HXDLIN( 132)		isIPhoneX = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_133_boot)
HXDLIN( 133)		isIPhoneXMax = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_134_boot)
HXDLIN( 134)		isIPhoneXR = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_135_boot)
HXDLIN( 135)		isTabletIOS = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_137_boot)
HXDLIN( 137)		engine = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_139_boot)
HXDLIN( 139)		landscape = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_141_boot)
HXDLIN( 141)		limitCameraToScene = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_163_boot)
HXDLIN( 163)		paused = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_164_boot)
HXDLIN( 164)		started = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_165_boot)
HXDLIN( 165)		inFocus = true;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_167_boot)
HXDLIN( 167)		events =  ::com::stencyl::event::EventMaster_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_187_boot)
HXDLIN( 187)		ITERATIONS = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_188_boot)
HXDLIN( 188)		physicsScale = ((Float)10.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_190_boot)
HXDLIN( 190)		paddingLeft = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_191_boot)
HXDLIN( 191)		paddingRight = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_192_boot)
HXDLIN( 192)		paddingTop = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_193_boot)
HXDLIN( 193)		paddingBottom = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_332_boot)
HXDLIN( 332)		STEP_SIZE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_333_boot)
HXDLIN( 333)		MS_PER_SEC = (int)1000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_335_boot)
HXDLIN( 335)		elapsedTime = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_336_boot)
HXDLIN( 336)		timeScale = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_337_boot)
HXDLIN( 337)		totalElapsedTime = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_911bbe4b8b0f4db8_347_boot)
HXDLIN( 347)		debug = false;
            	}
}

} // end namespace com
} // end namespace stencyl
