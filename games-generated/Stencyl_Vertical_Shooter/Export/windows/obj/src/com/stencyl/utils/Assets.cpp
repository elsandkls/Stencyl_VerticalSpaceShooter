// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_com_stencyl_utils_Assets
#include <com/stencyl/utils/Assets.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5c93738ce07605eb_23_getBitmapData,"com.stencyl.utils.Assets","getBitmapData",0x648b6590,"com.stencyl.utils.Assets.getBitmapData","com/stencyl/utils/Assets.hx",23,0xa89212ec)
HX_LOCAL_STACK_FRAME(_hx_pos_5c93738ce07605eb_32_getBytes,"com.stencyl.utils.Assets","getBytes",0x3f5967f4,"com.stencyl.utils.Assets.getBytes","com/stencyl/utils/Assets.hx",32,0xa89212ec)
HX_LOCAL_STACK_FRAME(_hx_pos_5c93738ce07605eb_44_getPath,"com.stencyl.utils.Assets","getPath",0x75608a3c,"com.stencyl.utils.Assets.getPath","com/stencyl/utils/Assets.hx",44,0xa89212ec)
HX_LOCAL_STACK_FRAME(_hx_pos_5c93738ce07605eb_48_getSound,"com.stencyl.utils.Assets","getSound",0x028dec58,"com.stencyl.utils.Assets.getSound","com/stencyl/utils/Assets.hx",48,0xa89212ec)
HX_LOCAL_STACK_FRAME(_hx_pos_5c93738ce07605eb_57_getText,"com.stencyl.utils.Assets","getText",0x78087144,"com.stencyl.utils.Assets.getText","com/stencyl/utils/Assets.hx",57,0xa89212ec)
HX_LOCAL_STACK_FRAME(_hx_pos_5c93738ce07605eb_66_updateAsset,"com.stencyl.utils.Assets","updateAsset",0x58904c88,"com.stencyl.utils.Assets.updateAsset","com/stencyl/utils/Assets.hx",66,0xa89212ec)
HX_LOCAL_STACK_FRAME(_hx_pos_5c93738ce07605eb_72_updateAsset,"com.stencyl.utils.Assets","updateAsset",0x58904c88,"com.stencyl.utils.Assets.updateAsset","com/stencyl/utils/Assets.hx",72,0xa89212ec)
HX_LOCAL_STACK_FRAME(_hx_pos_5c93738ce07605eb_20_boot,"com.stencyl.utils.Assets","boot",0x4a0028b1,"com.stencyl.utils.Assets.boot","com/stencyl/utils/Assets.hx",20,0xa89212ec)
namespace com{
namespace stencyl{
namespace utils{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x36439369;
}

 ::haxe::ds::StringMap Assets_obj::modifiedAssetCache;

 ::openfl::display::BitmapData Assets_obj::getBitmapData(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_5c93738ce07605eb_23_getBitmapData)
HXLINE(  24)		if (::com::stencyl::utils::Assets_obj::modifiedAssetCache->exists(id)) {
HXLINE(  26)			return ( ( ::openfl::display::BitmapData)(::com::stencyl::utils::Assets_obj::modifiedAssetCache->get(id)) );
            		}
HXLINE(  28)		return ::openfl::utils::Assets_obj::getBitmapData(id,useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getBitmapData,return )

 ::openfl::utils::ByteArrayData Assets_obj::getBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_5c93738ce07605eb_32_getBytes)
HXLINE(  33)		if (::com::stencyl::utils::Assets_obj::modifiedAssetCache->exists(id)) {
HXLINE(  35)			 ::openfl::utils::ByteArrayData ba = ( ( ::openfl::utils::ByteArrayData)(::com::stencyl::utils::Assets_obj::modifiedAssetCache->get(id)) );
HXLINE(  36)			ba->position = (int)0;
HXLINE(  37)			return ba;
            		}
HXLINE(  39)		return ::openfl::utils::Assets_obj::getBytes(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBytes,return )

::String Assets_obj::getPath(::String id){
            	HX_STACKFRAME(&_hx_pos_5c93738ce07605eb_44_getPath)
HXDLIN(  44)		return ::openfl::utils::Assets_obj::getPath(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

 ::openfl::media::Sound Assets_obj::getSound(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_5c93738ce07605eb_48_getSound)
HXLINE(  49)		if (::com::stencyl::utils::Assets_obj::modifiedAssetCache->exists(id)) {
HXLINE(  51)			return ( ( ::openfl::media::Sound)(::com::stencyl::utils::Assets_obj::modifiedAssetCache->get(id)) );
            		}
HXLINE(  53)		return ::openfl::utils::Assets_obj::getSound(id,useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getSound,return )

::String Assets_obj::getText(::String id){
            	HX_STACKFRAME(&_hx_pos_5c93738ce07605eb_57_getText)
HXLINE(  58)		if (::com::stencyl::utils::Assets_obj::modifiedAssetCache->exists(id)) {
HXLINE(  60)			return ( (::String)(::com::stencyl::utils::Assets_obj::modifiedAssetCache->get(id)) );
            		}
HXLINE(  62)		return ::openfl::utils::Assets_obj::getText(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getText,return )

void Assets_obj::updateAsset(::String id,::String type, ::openfl::utils::ByteArrayData content, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_5c93738ce07605eb_66_updateAsset)
HXLINE(  67)		 ::Dynamic decoded = null();
HXLINE(  69)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ){
HXLINE(  78)			::haxe::IMap_obj::set(::com::stencyl::utils::Assets_obj::modifiedAssetCache,id,content);
HXLINE(  79)			callback();
HXLINE(  77)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::Dynamic,callback) HXARGC(1)
            			void _hx_run( ::openfl::display::BitmapData img){
            				HX_STACKFRAME(&_hx_pos_5c93738ce07605eb_72_updateAsset)
HXLINE(  73)				::haxe::IMap_obj::set(::com::stencyl::utils::Assets_obj::modifiedAssetCache,id,img);
HXLINE(  74)				callback();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  72)			::openfl::display::BitmapData_obj::loadFromBytes(content,null())->onComplete( ::Dynamic(new _hx_Closure_0(id,callback)));
HXDLIN(  72)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE(  82)			{
HXLINE(  82)				::Dynamic this1 = ::com::stencyl::utils::Assets_obj::modifiedAssetCache;
HXDLIN(  82)				 ::Dynamic value = ::openfl::media::Sound_obj::fromAudioBuffer(::lime::media::AudioBuffer_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(content)));
HXDLIN(  82)				::haxe::IMap_obj::set(this1,id,value);
            			}
HXLINE(  83)			callback();
HXLINE(  81)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE(  86)			{
HXLINE(  86)				::Dynamic this2 = ::com::stencyl::utils::Assets_obj::modifiedAssetCache;
HXDLIN(  86)				 ::Dynamic value1 = content->readUTFBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(content));
HXDLIN(  86)				::haxe::IMap_obj::set(this2,id,value1);
            			}
HXLINE(  87)			callback();
HXLINE(  85)			goto _hx_goto_5;
            		}
            		_hx_goto_5:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assets_obj,updateAsset,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSound") ) { outValue = getSound_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateAsset") ) { outValue = updateAsset_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { outValue = getBitmapData_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"modifiedAssetCache") ) { outValue = ( modifiedAssetCache ); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"modifiedAssetCache") ) { modifiedAssetCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Assets_obj::modifiedAssetCache,HX_HCSTRING("modifiedAssetCache","\xdb","\xce","\x57","\xdf")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assets_obj::modifiedAssetCache,"modifiedAssetCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assets_obj::modifiedAssetCache,"modifiedAssetCache");
};

#endif

hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_HCSTRING("modifiedAssetCache","\xdb","\xce","\x57","\xdf"),
	HX_HCSTRING("getBitmapData","\xef","\x11","\x33","\x90"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getSound","\x59","\x9c","\xa3","\xe0"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("updateAsset","\x27","\xd3","\xd1","\x0b"),
	::String(null())
};

void Assets_obj::__register()
{
	hx::Object *dummy = new Assets_obj;
	Assets_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("com.stencyl.utils.Assets","\x4f","\x0c","\x10","\x18");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_5c93738ce07605eb_20_boot)
HXDLIN(  20)		modifiedAssetCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace com
} // end namespace stencyl
} // end namespace utils
