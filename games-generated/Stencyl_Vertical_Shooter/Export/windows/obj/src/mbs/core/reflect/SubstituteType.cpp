// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_mbs_core_ComposedType
#include <mbs/core/ComposedType.h>
#endif
#ifndef INCLUDED_mbs_core_MbsField
#include <mbs/core/MbsField.h>
#endif
#ifndef INCLUDED_mbs_core_MbsType
#include <mbs/core/MbsType.h>
#endif
#ifndef INCLUDED_mbs_core_reflect_SubstituteField
#include <mbs/core/reflect/SubstituteField.h>
#endif
#ifndef INCLUDED_mbs_core_reflect_SubstituteType
#include <mbs/core/reflect/SubstituteType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c55813a522698daa_13_new,"mbs.core.reflect.SubstituteType","new",0xa6e27c96,"mbs.core.reflect.SubstituteType.new","mbs/core/reflect/SubstituteType.hx",13,0x3b1fee19)
HX_LOCAL_STACK_FRAME(_hx_pos_c55813a522698daa_21_mapTypes,"mbs.core.reflect.SubstituteType","mapTypes",0x62153047,"mbs.core.reflect.SubstituteType.mapTypes","mbs/core/reflect/SubstituteType.hx",21,0x3b1fee19)
namespace mbs{
namespace core{
namespace reflect{

void SubstituteType_obj::__construct(::String name,::String parentName,::Array< ::Dynamic> fields,int size){
            	HX_STACKFRAME(&_hx_pos_c55813a522698daa_13_new)
HXLINE(  14)		super::__construct(name);
HXLINE(  15)		this->parentName = parentName;
HXLINE(  16)		this->fields = fields->copy();
HXLINE(  17)		this->size = size;
            	}

Dynamic SubstituteType_obj::__CreateEmpty() { return new SubstituteType_obj; }

void *SubstituteType_obj::_hx_vtable = 0;

Dynamic SubstituteType_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SubstituteType_obj > _hx_result = new SubstituteType_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SubstituteType_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x23d66ad4) {
		if (inClassId<=(int)0x22c1a4e1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x22c1a4e1;
		} else {
			return inClassId==(int)0x23d66ad4;
		}
	} else {
		return inClassId==(int)0x7a6deafb;
	}
}

void SubstituteType_obj::mapTypes( ::haxe::ds::StringMap typeMap){
            	HX_STACKFRAME(&_hx_pos_c55813a522698daa_21_mapTypes)
HXLINE(  22)		this->parent = ( ( ::mbs::core::ComposedType)(typeMap->get(this->parentName).StaticCast<  ::mbs::core::MbsType >()) );
HXLINE(  24)		if (hx::IsNotNull( this->fields )) {
HXLINE(  26)			int _g1 = (int)0;
HXDLIN(  26)			int _g = this->fields->length;
HXDLIN(  26)			while((_g1 < _g)){
HXLINE(  26)				_g1 = (_g1 + (int)1);
HXDLIN(  26)				int i = (_g1 - (int)1);
HXLINE(  28)				 ::mbs::core::reflect::SubstituteField f = ( ( ::mbs::core::reflect::SubstituteField)(this->fields->__get(i).StaticCast<  ::mbs::core::MbsField >()) );
HXLINE(  29)				f->type = typeMap->get(f->typeName).StaticCast<  ::mbs::core::MbsType >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SubstituteType_obj,mapTypes,(void))


hx::ObjectPtr< SubstituteType_obj > SubstituteType_obj::__new(::String name,::String parentName,::Array< ::Dynamic> fields,int size) {
	hx::ObjectPtr< SubstituteType_obj > __this = new SubstituteType_obj();
	__this->__construct(name,parentName,fields,size);
	return __this;
}

hx::ObjectPtr< SubstituteType_obj > SubstituteType_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::String parentName,::Array< ::Dynamic> fields,int size) {
	SubstituteType_obj *__this = (SubstituteType_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SubstituteType_obj), true, "mbs.core.reflect.SubstituteType"));
	*(void **)__this = SubstituteType_obj::_hx_vtable;
	__this->__construct(name,parentName,fields,size);
	return __this;
}

SubstituteType_obj::SubstituteType_obj()
{
}

void SubstituteType_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SubstituteType);
	HX_MARK_MEMBER_NAME(parentName,"parentName");
	 ::mbs::core::ComposedType_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SubstituteType_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parentName,"parentName");
	 ::mbs::core::ComposedType_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SubstituteType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"mapTypes") ) { return hx::Val( mapTypes_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"parentName") ) { return hx::Val( parentName ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SubstituteType_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"parentName") ) { parentName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SubstituteType_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("parentName","\x95","\x80","\x11","\xe8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SubstituteType_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(SubstituteType_obj,parentName),HX_HCSTRING("parentName","\x95","\x80","\x11","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SubstituteType_obj_sStaticStorageInfo = 0;
#endif

static ::String SubstituteType_obj_sMemberFields[] = {
	HX_HCSTRING("parentName","\x95","\x80","\x11","\xe8"),
	HX_HCSTRING("mapTypes","\x3d","\xe0","\x0d","\x92"),
	::String(null()) };

static void SubstituteType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SubstituteType_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SubstituteType_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SubstituteType_obj::__mClass,"__mClass");
};

#endif

hx::Class SubstituteType_obj::__mClass;

void SubstituteType_obj::__register()
{
	hx::Object *dummy = new SubstituteType_obj;
	SubstituteType_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("mbs.core.reflect.SubstituteType","\xa4","\x39","\xdf","\x67");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SubstituteType_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SubstituteType_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SubstituteType_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SubstituteType_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SubstituteType_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SubstituteType_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mbs
} // end namespace core
} // end namespace reflect
