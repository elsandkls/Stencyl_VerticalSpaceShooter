// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_mbs_core_MbsField
#include <mbs/core/MbsField.h>
#endif
#ifndef INCLUDED_mbs_core_MbsType
#include <mbs/core/MbsType.h>
#endif
#ifndef INCLUDED_mbs_core_reflect_SubstituteField
#include <mbs/core/reflect/SubstituteField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb316c25e4a47603_10_new,"mbs.core.reflect.SubstituteField","new",0x335f8382,"mbs.core.reflect.SubstituteField.new","mbs/core/reflect/SubstituteField.hx",10,0x8c1d4acf)
HX_LOCAL_STACK_FRAME(_hx_pos_fb316c25e4a47603_17_toString,"mbs.core.reflect.SubstituteField","toString",0x973c824a,"mbs.core.reflect.SubstituteField.toString","mbs/core/reflect/SubstituteField.hx",17,0x8c1d4acf)
namespace mbs{
namespace core{
namespace reflect{

void SubstituteField_obj::__construct(::String name,::String typeName,int address){
            	HX_STACKFRAME(&_hx_pos_fb316c25e4a47603_10_new)
HXLINE(  11)		super::__construct(name,null(),address);
HXLINE(  12)		this->typeName = typeName;
            	}

Dynamic SubstituteField_obj::__CreateEmpty() { return new SubstituteField_obj; }

void *SubstituteField_obj::_hx_vtable = 0;

Dynamic SubstituteField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SubstituteField_obj > _hx_result = new SubstituteField_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SubstituteField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1d8f3360) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1d8f3360;
	} else {
		return inClassId==(int)0x7fdd0535;
	}
}

::String SubstituteField_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_fb316c25e4a47603_17_toString)
HXDLIN(  17)		::String _hx_tmp = ((HX_("MbsField [name=",7b,b8,ae,df) + this->getName()) + HX_(", typeName=",84,55,e6,8a));
HXDLIN(  17)		return ((((_hx_tmp + this->typeName) + HX_(", address=",7d,c6,f1,37)) + this->address) + HX_("]",5d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubstituteField_obj,toString,return )


hx::ObjectPtr< SubstituteField_obj > SubstituteField_obj::__new(::String name,::String typeName,int address) {
	hx::ObjectPtr< SubstituteField_obj > __this = new SubstituteField_obj();
	__this->__construct(name,typeName,address);
	return __this;
}

hx::ObjectPtr< SubstituteField_obj > SubstituteField_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::String typeName,int address) {
	SubstituteField_obj *__this = (SubstituteField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SubstituteField_obj), true, "mbs.core.reflect.SubstituteField"));
	*(void **)__this = SubstituteField_obj::_hx_vtable;
	__this->__construct(name,typeName,address);
	return __this;
}

SubstituteField_obj::SubstituteField_obj()
{
}

void SubstituteField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SubstituteField);
	HX_MARK_MEMBER_NAME(typeName,"typeName");
	 ::mbs::core::MbsField_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SubstituteField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(typeName,"typeName");
	 ::mbs::core::MbsField_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SubstituteField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"typeName") ) { return hx::Val( typeName ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SubstituteField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"typeName") ) { typeName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SubstituteField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("typeName","\x25","\x76","\xca","\xb5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SubstituteField_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(SubstituteField_obj,typeName),HX_HCSTRING("typeName","\x25","\x76","\xca","\xb5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SubstituteField_obj_sStaticStorageInfo = 0;
#endif

static ::String SubstituteField_obj_sMemberFields[] = {
	HX_HCSTRING("typeName","\x25","\x76","\xca","\xb5"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void SubstituteField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SubstituteField_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SubstituteField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SubstituteField_obj::__mClass,"__mClass");
};

#endif

hx::Class SubstituteField_obj::__mClass;

void SubstituteField_obj::__register()
{
	hx::Object *dummy = new SubstituteField_obj;
	SubstituteField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("mbs.core.reflect.SubstituteField","\x90","\x5a","\x3b","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SubstituteField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SubstituteField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SubstituteField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SubstituteField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SubstituteField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SubstituteField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mbs
} // end namespace core
} // end namespace reflect
