// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_mbs_core_MbsObject
#include <mbs/core/MbsObject.h>
#endif
#ifndef INCLUDED_mbs_core_MbsType
#include <mbs/core/MbsType.h>
#endif
#ifndef INCLUDED_mbs_core_MbsTypes
#include <mbs/core/MbsTypes.h>
#endif
#ifndef INCLUDED_mbs_io_MbsFloatList
#include <mbs/io/MbsFloatList.h>
#endif
#ifndef INCLUDED_mbs_io_MbsIO
#include <mbs/io/MbsIO.h>
#endif
#ifndef INCLUDED_mbs_io_MbsListBase
#include <mbs/io/MbsListBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ddfd6735181c4a7a_99_new,"mbs.io.MbsFloatList","new",0x79d33c66,"mbs.io.MbsFloatList.new","mbs/io/MbsListBase.hx",99,0xffa24d09)
HX_LOCAL_STACK_FRAME(_hx_pos_ddfd6735181c4a7a_103_readFloat,"mbs.io.MbsFloatList","readFloat",0xfdd746ec,"mbs.io.MbsFloatList.readFloat","mbs/io/MbsListBase.hx",103,0xffa24d09)
HX_LOCAL_STACK_FRAME(_hx_pos_ddfd6735181c4a7a_110_writeFloat,"mbs.io.MbsFloatList","writeFloat",0x7b0d80f7,"mbs.io.MbsFloatList.writeFloat","mbs/io/MbsListBase.hx",110,0xffa24d09)
namespace mbs{
namespace io{

void MbsFloatList_obj::__construct(::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_ddfd6735181c4a7a_99_new)
HXDLIN(  99)		super::__construct(data,::mbs::core::MbsTypes_obj::FLOAT);
            	}

Dynamic MbsFloatList_obj::__CreateEmpty() { return new MbsFloatList_obj; }

void *MbsFloatList_obj::_hx_vtable = 0;

Dynamic MbsFloatList_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MbsFloatList_obj > _hx_result = new MbsFloatList_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MbsFloatList_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x51c3cd0d) {
		if (inClassId<=(int)0x17b72d64) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17b72d64;
		} else {
			return inClassId==(int)0x51c3cd0d;
		}
	} else {
		return inClassId==(int)0x7080c4dc;
	}
}

Float MbsFloatList_obj::readFloat(){
            	HX_STACKFRAME(&_hx_pos_ddfd6735181c4a7a_103_readFloat)
HXLINE( 104)		Float f = ::mbs::io::MbsIO_obj::readFloat(this->data,this->elementAddress);
HXLINE( 105)		 ::mbs::io::MbsFloatList _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 105)		_hx_tmp->elementAddress = (_hx_tmp->elementAddress + this->elementSize);
HXLINE( 106)		return f;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MbsFloatList_obj,readFloat,return )

void MbsFloatList_obj::writeFloat(Float value){
            	HX_STACKFRAME(&_hx_pos_ddfd6735181c4a7a_110_writeFloat)
HXLINE( 111)		::mbs::io::MbsIO_obj::writeFloat(this->data,this->elementAddress,value);
HXLINE( 112)		 ::mbs::io::MbsFloatList _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 112)		_hx_tmp->elementAddress = (_hx_tmp->elementAddress + this->elementSize);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MbsFloatList_obj,writeFloat,(void))


hx::ObjectPtr< MbsFloatList_obj > MbsFloatList_obj::__new(::Dynamic data) {
	hx::ObjectPtr< MbsFloatList_obj > __this = new MbsFloatList_obj();
	__this->__construct(data);
	return __this;
}

hx::ObjectPtr< MbsFloatList_obj > MbsFloatList_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic data) {
	MbsFloatList_obj *__this = (MbsFloatList_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MbsFloatList_obj), true, "mbs.io.MbsFloatList"));
	*(void **)__this = MbsFloatList_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

MbsFloatList_obj::MbsFloatList_obj()
{
}

hx::Val MbsFloatList_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"readFloat") ) { return hx::Val( readFloat_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeFloat") ) { return hx::Val( writeFloat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MbsFloatList_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *MbsFloatList_obj_sStaticStorageInfo = 0;
#endif

static ::String MbsFloatList_obj_sMemberFields[] = {
	HX_HCSTRING("readFloat","\x66","\x12","\x7e","\xd3"),
	HX_HCSTRING("writeFloat","\x3d","\xc0","\x58","\x97"),
	::String(null()) };

static void MbsFloatList_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MbsFloatList_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MbsFloatList_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MbsFloatList_obj::__mClass,"__mClass");
};

#endif

hx::Class MbsFloatList_obj::__mClass;

void MbsFloatList_obj::__register()
{
	hx::Object *dummy = new MbsFloatList_obj;
	MbsFloatList_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("mbs.io.MbsFloatList","\x74","\xd1","\xdf","\xf5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MbsFloatList_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MbsFloatList_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MbsFloatList_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MbsFloatList_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MbsFloatList_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MbsFloatList_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mbs
} // end namespace io
