// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_mbs_core_MbsObject
#include <mbs/core/MbsObject.h>
#endif
#ifndef INCLUDED_mbs_core_MbsType
#include <mbs/core/MbsType.h>
#endif
#ifndef INCLUDED_mbs_core_MbsTypes
#include <mbs/core/MbsTypes.h>
#endif
#ifndef INCLUDED_mbs_io_MbsIO
#include <mbs/io/MbsIO.h>
#endif
#ifndef INCLUDED_mbs_io_MbsListBase
#include <mbs/io/MbsListBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1fb4b3d96afcbf86_16_new,"mbs.io.MbsListBase","new",0xe2285ae7,"mbs.io.MbsListBase.new","mbs/io/MbsListBase.hx",16,0xffa24d09)
HX_LOCAL_STACK_FRAME(_hx_pos_1fb4b3d96afcbf86_26_setAddress,"mbs.io.MbsListBase","setAddress",0x0bb57a8b,"mbs.io.MbsListBase.setAddress","mbs/io/MbsListBase.hx",26,0xffa24d09)
HX_LOCAL_STACK_FRAME(_hx_pos_1fb4b3d96afcbf86_51_allocateNew,"mbs.io.MbsListBase","allocateNew",0xdf0a332a,"mbs.io.MbsListBase.allocateNew","mbs/io/MbsListBase.hx",51,0xffa24d09)
HX_LOCAL_STACK_FRAME(_hx_pos_1fb4b3d96afcbf86_70_length,"mbs.io.MbsListBase","length",0x2a6118bf,"mbs.io.MbsListBase.length","mbs/io/MbsListBase.hx",70,0xffa24d09)
namespace mbs{
namespace io{

void MbsListBase_obj::__construct(::Dynamic data, ::mbs::core::MbsType type){
            	HX_STACKFRAME(&_hx_pos_1fb4b3d96afcbf86_16_new)
HXLINE(  17)		super::__construct(data);
HXLINE(  18)		if (hx::IsNotNull( type )) {
HXLINE(  20)			this->type = type;
HXLINE(  21)			this->elementSize = type->getSize();
            		}
            	}

Dynamic MbsListBase_obj::__CreateEmpty() { return new MbsListBase_obj; }

void *MbsListBase_obj::_hx_vtable = 0;

Dynamic MbsListBase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MbsListBase_obj > _hx_result = new MbsListBase_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MbsListBase_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17b72d64) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x17b72d64;
	} else {
		return inClassId==(int)0x51c3cd0d;
	}
}

void MbsListBase_obj::setAddress(int address){
            	HX_STACKFRAME(&_hx_pos_1fb4b3d96afcbf86_26_setAddress)
HXLINE(  27)		this->super::setAddress(address);
HXLINE(  29)		if (::mbs::io::MbsIO_obj::isReader(this->data)) {
HXLINE(  31)			if ((address != (int)0)) {
HXLINE(  33)				this->_length = ::mbs::io::MbsIO_obj::readInt(this->data,address);
HXLINE(  34)				::Dynamic _hx_tmp = this->data;
HXDLIN(  34)				this->type = ::mbs::io::MbsIO_obj::readTypecode(_hx_tmp,(address + ::mbs::core::MbsTypes_obj::INTEGER->getSize()));
HXLINE(  36)				this->elementSize = this->type->getSize();
HXLINE(  37)				this->elementAddress = (address + (::mbs::core::MbsTypes_obj::INTEGER->getSize() * (int)2));
            			}
            			else {
HXLINE(  41)				this->type = null();
HXLINE(  42)				this->_length = (int)0;
HXLINE(  43)				this->elementSize = (int)0;
HXLINE(  44)				this->elementAddress = (int)0;
            			}
            		}
            	}


int MbsListBase_obj::allocateNew(int length){
            	HX_STACKFRAME(&_hx_pos_1fb4b3d96afcbf86_51_allocateNew)
HXDLIN(  51)		if (::mbs::io::MbsIO_obj::isWriter(this->data)) {
HXLINE(  53)			this->_length = length;
HXLINE(  55)			::Dynamic _hx_tmp = this->data;
HXDLIN(  55)			int _hx_tmp1 = (::mbs::core::MbsTypes_obj::INTEGER->getSize() * (int)2);
HXDLIN(  55)			this->address = ::mbs::io::MbsIO_obj::allocate(_hx_tmp,(_hx_tmp1 + (this->elementSize * length)));
HXLINE(  56)			::mbs::io::MbsIO_obj::writeInt(this->data,this->address,length);
HXLINE(  57)			::Dynamic _hx_tmp2 = this->data;
HXDLIN(  57)			int _hx_tmp3 = this->address;
HXDLIN(  57)			int _hx_tmp4 = (_hx_tmp3 + ::mbs::core::MbsTypes_obj::INTEGER->getSize());
HXDLIN(  57)			::mbs::io::MbsIO_obj::writeTypecode(_hx_tmp2,_hx_tmp4,this->type);
HXLINE(  58)			int _hx_tmp5 = this->address;
HXDLIN(  58)			this->elementAddress = (_hx_tmp5 + (::mbs::core::MbsTypes_obj::INTEGER->getSize() * (int)2));
HXLINE(  60)			return this->address;
            		}
            		else {
HXLINE(  64)			HX_STACK_DO_THROW(HX_("Can't allocate new objects when reading",b2,55,1f,35));
            		}
HXLINE(  51)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MbsListBase_obj,allocateNew,return )

int MbsListBase_obj::length(){
            	HX_STACKFRAME(&_hx_pos_1fb4b3d96afcbf86_70_length)
HXDLIN(  70)		return this->_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MbsListBase_obj,length,return )


hx::ObjectPtr< MbsListBase_obj > MbsListBase_obj::__new(::Dynamic data, ::mbs::core::MbsType type) {
	hx::ObjectPtr< MbsListBase_obj > __this = new MbsListBase_obj();
	__this->__construct(data,type);
	return __this;
}

hx::ObjectPtr< MbsListBase_obj > MbsListBase_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic data, ::mbs::core::MbsType type) {
	MbsListBase_obj *__this = (MbsListBase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MbsListBase_obj), true, "mbs.io.MbsListBase"));
	*(void **)__this = MbsListBase_obj::_hx_vtable;
	__this->__construct(data,type);
	return __this;
}

MbsListBase_obj::MbsListBase_obj()
{
}

void MbsListBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MbsListBase);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(elementAddress,"elementAddress");
	HX_MARK_MEMBER_NAME(elementSize,"elementSize");
	HX_MARK_MEMBER_NAME(_length,"_length");
	 ::mbs::core::MbsObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MbsListBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(elementAddress,"elementAddress");
	HX_VISIT_MEMBER_NAME(elementSize,"elementSize");
	HX_VISIT_MEMBER_NAME(_length,"_length");
	 ::mbs::core::MbsObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MbsListBase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { return hx::Val( _length ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setAddress") ) { return hx::Val( setAddress_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"elementSize") ) { return hx::Val( elementSize ); }
		if (HX_FIELD_EQ(inName,"allocateNew") ) { return hx::Val( allocateNew_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"elementAddress") ) { return hx::Val( elementAddress ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MbsListBase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::mbs::core::MbsType >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { _length=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"elementSize") ) { elementSize=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"elementAddress") ) { elementAddress=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MbsListBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("elementAddress","\x58","\x7a","\x25","\xe1"));
	outFields->push(HX_HCSTRING("elementSize","\x9d","\x89","\xc5","\xef"));
	outFields->push(HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MbsListBase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::mbs::core::MbsType*/ ,(int)offsetof(MbsListBase_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(MbsListBase_obj,elementAddress),HX_HCSTRING("elementAddress","\x58","\x7a","\x25","\xe1")},
	{hx::fsInt,(int)offsetof(MbsListBase_obj,elementSize),HX_HCSTRING("elementSize","\x9d","\x89","\xc5","\xef")},
	{hx::fsInt,(int)offsetof(MbsListBase_obj,_length),HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MbsListBase_obj_sStaticStorageInfo = 0;
#endif

static ::String MbsListBase_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("elementAddress","\x58","\x7a","\x25","\xe1"),
	HX_HCSTRING("elementSize","\x9d","\x89","\xc5","\xef"),
	HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"),
	HX_HCSTRING("setAddress","\x32","\x96","\xea","\xef"),
	HX_HCSTRING("allocateNew","\xa3","\x49","\x4d","\xa9"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	::String(null()) };

static void MbsListBase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MbsListBase_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MbsListBase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MbsListBase_obj::__mClass,"__mClass");
};

#endif

hx::Class MbsListBase_obj::__mClass;

void MbsListBase_obj::__register()
{
	hx::Object *dummy = new MbsListBase_obj;
	MbsListBase_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("mbs.io.MbsListBase","\x75","\x5b","\x41","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MbsListBase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MbsListBase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MbsListBase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MbsListBase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MbsListBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MbsListBase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace mbs
} // end namespace io
