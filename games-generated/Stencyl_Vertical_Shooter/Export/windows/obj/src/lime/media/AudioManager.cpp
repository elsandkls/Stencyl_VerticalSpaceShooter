// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_lime_media_AudioContext
#include <lime/media/AudioContext.h>
#endif
#ifndef INCLUDED_lime_media_AudioManager
#include <lime/media/AudioManager.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_OpenALAudioContext
#include <lime/media/OpenALAudioContext.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b537b97081e2aab9_34_init,"lime.media.AudioManager","init",0x83630824,"lime.media.AudioManager.init","lime/media/AudioManager.hx",34,0x63af6ea2)
HX_LOCAL_STACK_FRAME(_hx_pos_b537b97081e2aab9_75_resume,"lime.media.AudioManager","resume",0xd988a3c1,"lime.media.AudioManager.resume","lime/media/AudioManager.hx",75,0x63af6ea2)
HX_LOCAL_STACK_FRAME(_hx_pos_b537b97081e2aab9_94_addAudioSource,"lime.media.AudioManager","addAudioSource",0x386357c4,"lime.media.AudioManager.addAudioSource","lime/media/AudioManager.hx",94,0x63af6ea2)
HX_LOCAL_STACK_FRAME(_hx_pos_b537b97081e2aab9_99_removeAudioSource,"lime.media.AudioManager","removeAudioSource",0xc27912d9,"lime.media.AudioManager.removeAudioSource","lime/media/AudioManager.hx",99,0x63af6ea2)
HX_LOCAL_STACK_FRAME(_hx_pos_b537b97081e2aab9_106_update,"lime.media.AudioManager","update",0x5809c01d,"lime.media.AudioManager.update","lime/media/AudioManager.hx",106,0x63af6ea2)
HX_LOCAL_STACK_FRAME(_hx_pos_b537b97081e2aab9_122_shutdown,"lime.media.AudioManager","shutdown",0xb121e3aa,"lime.media.AudioManager.shutdown","lime/media/AudioManager.hx",122,0x63af6ea2)
HX_LOCAL_STACK_FRAME(_hx_pos_b537b97081e2aab9_155_suspend,"lime.media.AudioManager","suspend",0x09fdc6e8,"lime.media.AudioManager.suspend","lime/media/AudioManager.hx",155,0x63af6ea2)
HX_LOCAL_STACK_FRAME(_hx_pos_b537b97081e2aab9_28_boot,"lime.media.AudioManager","boot",0x7ec35146,"lime.media.AudioManager.boot","lime/media/AudioManager.hx",28,0x63af6ea2)
HX_LOCAL_STACK_FRAME(_hx_pos_b537b97081e2aab9_29_boot,"lime.media.AudioManager","boot",0x7ec35146,"lime.media.AudioManager.boot","lime/media/AudioManager.hx",29,0x63af6ea2)
namespace lime{
namespace media{

void AudioManager_obj::__construct() { }

Dynamic AudioManager_obj::__CreateEmpty() { return new AudioManager_obj; }

void *AudioManager_obj::_hx_vtable = 0;

Dynamic AudioManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioManager_obj > _hx_result = new AudioManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AudioManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x67878622;
}

 ::lime::media::AudioContext AudioManager_obj::context;

::Array< ::Dynamic> AudioManager_obj::audioSources;

::Array< ::Dynamic> AudioManager_obj::sourcesToRemove;

void AudioManager_obj::init( ::lime::media::AudioContext context){
            	HX_GC_STACKFRAME(&_hx_pos_b537b97081e2aab9_34_init)
HXDLIN(  34)		if (hx::IsNull( ::lime::media::AudioManager_obj::context )) {
HXLINE(  36)			if (hx::IsNull( context )) {
HXLINE(  38)				::lime::media::AudioManager_obj::context =  ::lime::media::AudioContext_obj::__alloc( HX_CTX ,null());
HXLINE(  39)				context = ::lime::media::AudioManager_obj::context;
HXLINE(  42)				if ((context->type == HX_("openal",35,5f,94,21))) {
HXLINE(  44)					 ::lime::media::OpenALAudioContext alc = context->openal;
HXLINE(  46)					 ::Dynamic device = alc->openDevice(null());
HXLINE(  47)					 ::Dynamic ctx = alc->createContext(device,null());
HXLINE(  48)					alc->makeContextCurrent(ctx);
HXLINE(  49)					alc->processContext(ctx);
            				}
            			}
HXLINE(  56)			::lime::media::AudioManager_obj::context = context;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioManager_obj,init,(void))

void AudioManager_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_b537b97081e2aab9_75_resume)
HXDLIN(  75)		bool _hx_tmp;
HXDLIN(  75)		if (hx::IsNotNull( ::lime::media::AudioManager_obj::context )) {
HXDLIN(  75)			_hx_tmp = (::lime::media::AudioManager_obj::context->type == HX_("openal",35,5f,94,21));
            		}
            		else {
HXDLIN(  75)			_hx_tmp = false;
            		}
HXDLIN(  75)		if (_hx_tmp) {
HXLINE(  77)			 ::lime::media::OpenALAudioContext alc = ::lime::media::AudioManager_obj::context->openal;
HXLINE(  78)			 ::Dynamic currentContext = alc->getCurrentContext();
HXLINE(  80)			if (hx::IsNotNull( currentContext )) {
HXLINE(  82)				 ::Dynamic device = alc->getContextsDevice(currentContext);
HXLINE(  83)				alc->resumeDevice(device);
HXLINE(  84)				alc->processContext(currentContext);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,resume,(void))

void AudioManager_obj::addAudioSource( ::lime::media::AudioSource source){
            	HX_STACKFRAME(&_hx_pos_b537b97081e2aab9_94_addAudioSource)
HXDLIN(  94)		if ((::lime::media::AudioManager_obj::audioSources->indexOf(source,null()) == (int)-1)) {
HXLINE(  95)			::lime::media::AudioManager_obj::audioSources->push(source);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioManager_obj,addAudioSource,(void))

void AudioManager_obj::removeAudioSource( ::lime::media::AudioSource source){
            	HX_STACKFRAME(&_hx_pos_b537b97081e2aab9_99_removeAudioSource)
HXLINE( 100)		int idx = ::lime::media::AudioManager_obj::audioSources->indexOf(source,null());
HXLINE( 101)		if ((idx >= (int)0)) {
HXLINE( 102)			::lime::media::AudioManager_obj::sourcesToRemove->push(source);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioManager_obj,removeAudioSource,(void))

void AudioManager_obj::update(){
            	HX_STACKFRAME(&_hx_pos_b537b97081e2aab9_106_update)
HXLINE( 108)		{
HXLINE( 108)			int _g = (int)0;
HXDLIN( 108)			::Array< ::Dynamic> _g1 = ::lime::media::AudioManager_obj::audioSources;
HXDLIN( 108)			while((_g < _g1->length)){
HXLINE( 108)				 ::lime::media::AudioSource source = _g1->__get(_g).StaticCast<  ::lime::media::AudioSource >();
HXDLIN( 108)				_g = (_g + (int)1);
HXLINE( 109)				source->update();
            			}
            		}
HXLINE( 112)		while((::lime::media::AudioManager_obj::sourcesToRemove->length > (int)0)){
HXLINE( 113)			 ::lime::media::AudioSource source1 = ::lime::media::AudioManager_obj::sourcesToRemove->pop().StaticCast<  ::lime::media::AudioSource >();
HXLINE( 114)			if ((::lime::media::AudioManager_obj::audioSources->indexOf(source1,null()) != (int)-1)) {
HXLINE( 115)				::lime::media::AudioManager_obj::audioSources->remove(source1);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,update,(void))

void AudioManager_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_b537b97081e2aab9_122_shutdown)
HXLINE( 125)		bool _hx_tmp;
HXDLIN( 125)		if (hx::IsNotNull( ::lime::media::AudioManager_obj::context )) {
HXLINE( 125)			_hx_tmp = (::lime::media::AudioManager_obj::context->type == HX_("openal",35,5f,94,21));
            		}
            		else {
HXLINE( 125)			_hx_tmp = false;
            		}
HXDLIN( 125)		if (_hx_tmp) {
HXLINE( 127)			 ::lime::media::OpenALAudioContext alc = ::lime::media::AudioManager_obj::context->openal;
HXLINE( 128)			 ::Dynamic currentContext = alc->getCurrentContext();
HXLINE( 130)			if (hx::IsNotNull( currentContext )) {
HXLINE( 132)				 ::Dynamic device = alc->getContextsDevice(currentContext);
HXLINE( 133)				alc->makeContextCurrent(null());
HXLINE( 134)				alc->destroyContext(currentContext);
HXLINE( 136)				if (hx::IsNotNull( device )) {
HXLINE( 138)					alc->closeDevice(device);
            				}
            			}
            		}
HXLINE( 147)		::lime::media::AudioManager_obj::context = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,shutdown,(void))

void AudioManager_obj::suspend(){
            	HX_STACKFRAME(&_hx_pos_b537b97081e2aab9_155_suspend)
HXDLIN( 155)		bool _hx_tmp;
HXDLIN( 155)		if (hx::IsNotNull( ::lime::media::AudioManager_obj::context )) {
HXDLIN( 155)			_hx_tmp = (::lime::media::AudioManager_obj::context->type == HX_("openal",35,5f,94,21));
            		}
            		else {
HXDLIN( 155)			_hx_tmp = false;
            		}
HXDLIN( 155)		if (_hx_tmp) {
HXLINE( 157)			 ::lime::media::OpenALAudioContext alc = ::lime::media::AudioManager_obj::context->openal;
HXLINE( 158)			 ::Dynamic currentContext = alc->getCurrentContext();
HXLINE( 160)			if (hx::IsNotNull( currentContext )) {
HXLINE( 162)				alc->suspendContext(currentContext);
HXLINE( 163)				 ::Dynamic device = alc->getContextsDevice(currentContext);
HXLINE( 164)				alc->pauseDevice(device);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,suspend,(void))


AudioManager_obj::AudioManager_obj()
{
}

bool AudioManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resume") ) { outValue = resume_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { outValue = ( context ); return true; }
		if (HX_FIELD_EQ(inName,"suspend") ) { outValue = suspend_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { outValue = shutdown_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"audioSources") ) { outValue = ( audioSources ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addAudioSource") ) { outValue = addAudioSource_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sourcesToRemove") ) { outValue = ( sourcesToRemove ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"removeAudioSource") ) { outValue = removeAudioSource_dyn(); return true; }
	}
	return false;
}

bool AudioManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=ioValue.Cast<  ::lime::media::AudioContext >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"audioSources") ) { audioSources=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sourcesToRemove") ) { sourcesToRemove=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *AudioManager_obj_sMemberStorageInfo = 0;
static hx::StaticInfo AudioManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::media::AudioContext*/ ,(void *) &AudioManager_obj::context,HX_HCSTRING("context","\xef","\x95","\x77","\x19")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &AudioManager_obj::audioSources,HX_HCSTRING("audioSources","\x02","\x25","\xc4","\xc4")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &AudioManager_obj::sourcesToRemove,HX_HCSTRING("sourcesToRemove","\x77","\x07","\xb8","\xf9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void AudioManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AudioManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AudioManager_obj::context,"context");
	HX_MARK_MEMBER_NAME(AudioManager_obj::audioSources,"audioSources");
	HX_MARK_MEMBER_NAME(AudioManager_obj::sourcesToRemove,"sourcesToRemove");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AudioManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AudioManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AudioManager_obj::context,"context");
	HX_VISIT_MEMBER_NAME(AudioManager_obj::audioSources,"audioSources");
	HX_VISIT_MEMBER_NAME(AudioManager_obj::sourcesToRemove,"sourcesToRemove");
};

#endif

hx::Class AudioManager_obj::__mClass;

static ::String AudioManager_obj_sStaticFields[] = {
	HX_HCSTRING("context","\xef","\x95","\x77","\x19"),
	HX_HCSTRING("audioSources","\x02","\x25","\xc4","\xc4"),
	HX_HCSTRING("sourcesToRemove","\x77","\x07","\xb8","\xf9"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("addAudioSource","\xb0","\xe9","\xb8","\x96"),
	HX_HCSTRING("removeAudioSource","\x6d","\x7c","\x32","\xbb"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("shutdown","\x96","\xfc","\x0b","\x6b"),
	HX_HCSTRING("suspend","\x7c","\x2f","\x4f","\xf7"),
	::String(null())
};

void AudioManager_obj::__register()
{
	hx::Object *dummy = new AudioManager_obj;
	AudioManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.media.AudioManager","\xda","\xab","\xe7","\x29");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AudioManager_obj::__GetStatic;
	__mClass->mSetStaticField = &AudioManager_obj::__SetStatic;
	__mClass->mMarkFunc = AudioManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AudioManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< AudioManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AudioManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AudioManager_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b537b97081e2aab9_28_boot)
HXDLIN(  28)		audioSources = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b537b97081e2aab9_29_boot)
HXDLIN(  29)		sourcesToRemove = ::Array_obj< ::Dynamic>::__new(0);
            	}
}

} // end namespace lime
} // end namespace media
