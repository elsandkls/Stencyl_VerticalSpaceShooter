// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeApplication
#include <lime/_internal/backend/native/NativeApplication.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_system_Display
#include <lime/system/Display.h>
#endif
#ifndef INCLUDED_lime_system_DisplayMode
#include <lime/system/DisplayMode.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b81205d558ca9a41_64_new,"lime._internal.backend.native.NativeWindow","new",0x09d80f6b,"lime._internal.backend.native.NativeWindow.new","lime/_internal/backend/native/NativeWindow.hx",64,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_199_alert,"lime._internal.backend.native.NativeWindow","alert",0xc3e8af27,"lime._internal.backend.native.NativeWindow.alert","lime/_internal/backend/native/NativeWindow.hx",199,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_212_close,"lime._internal.backend.native.NativeWindow","close",0xeabd6f83,"lime._internal.backend.native.NativeWindow.close","lime/_internal/backend/native/NativeWindow.hx",212,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_241_contextFlip,"lime._internal.backend.native.NativeWindow","contextFlip",0xc77cba47,"lime._internal.backend.native.NativeWindow.contextFlip","lime/_internal/backend/native/NativeWindow.hx",241,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_265_focus,"lime._internal.backend.native.NativeWindow","focus",0xa6e3b7a3,"lime._internal.backend.native.NativeWindow.focus","lime/_internal/backend/native/NativeWindow.hx",265,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_278_getCursor,"lime._internal.backend.native.NativeWindow","getCursor",0x5168b157,"lime._internal.backend.native.NativeWindow.getCursor","lime/_internal/backend/native/NativeWindow.hx",278,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_283_getDisplay,"lime._internal.backend.native.NativeWindow","getDisplay",0xd8e838a1,"lime._internal.backend.native.NativeWindow.getDisplay","lime/_internal/backend/native/NativeWindow.hx",283,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_304_getDisplayMode,"lime._internal.backend.native.NativeWindow","getDisplayMode",0xc4219ca4,"lime._internal.backend.native.NativeWindow.getDisplayMode","lime/_internal/backend/native/NativeWindow.hx",304,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_325_getFrameRate,"lime._internal.backend.native.NativeWindow","getFrameRate",0x852ab5cc,"lime._internal.backend.native.NativeWindow.getFrameRate","lime/_internal/backend/native/NativeWindow.hx",325,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_330_getMouseLock,"lime._internal.backend.native.NativeWindow","getMouseLock",0x4011f8cf,"lime._internal.backend.native.NativeWindow.getMouseLock","lime/_internal/backend/native/NativeWindow.hx",330,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_345_getTextInputEnabled,"lime._internal.backend.native.NativeWindow","getTextInputEnabled",0x70d2f3a5,"lime._internal.backend.native.NativeWindow.getTextInputEnabled","lime/_internal/backend/native/NativeWindow.hx",345,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_362_move,"lime._internal.backend.native.NativeWindow","move",0x9293cda6,"lime._internal.backend.native.NativeWindow.move","lime/_internal/backend/native/NativeWindow.hx",362,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_373_readPixels,"lime._internal.backend.native.NativeWindow","readPixels",0x54625b78,"lime._internal.backend.native.NativeWindow.readPixels","lime/_internal/backend/native/NativeWindow.hx",373,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_464_render,"lime._internal.backend.native.NativeWindow","render",0x71dbe52b,"lime._internal.backend.native.NativeWindow.render","lime/_internal/backend/native/NativeWindow.hx",464,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_505_resize,"lime._internal.backend.native.NativeWindow","resize",0x752dd3c9,"lime._internal.backend.native.NativeWindow.resize","lime/_internal/backend/native/NativeWindow.hx",505,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_516_setBorderless,"lime._internal.backend.native.NativeWindow","setBorderless",0x95611f52,"lime._internal.backend.native.NativeWindow.setBorderless","lime/_internal/backend/native/NativeWindow.hx",516,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_531_setCursor,"lime._internal.backend.native.NativeWindow","setCursor",0x34b99d63,"lime._internal.backend.native.NativeWindow.setCursor","lime/_internal/backend/native/NativeWindow.hx",531,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_575_setDisplayMode,"lime._internal.backend.native.NativeWindow","setDisplayMode",0xe4418518,"lime._internal.backend.native.NativeWindow.setDisplayMode","lime/_internal/backend/native/NativeWindow.hx",575,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_594_setMouseLock,"lime._internal.backend.native.NativeWindow","setMouseLock",0x550b1c43,"lime._internal.backend.native.NativeWindow.setMouseLock","lime/_internal/backend/native/NativeWindow.hx",594,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_611_setTextInputEnabled,"lime._internal.backend.native.NativeWindow","setTextInputEnabled",0xad6fe6b1,"lime._internal.backend.native.NativeWindow.setTextInputEnabled","lime/_internal/backend/native/NativeWindow.hx",611,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_637_setFrameRate,"lime._internal.backend.native.NativeWindow","setFrameRate",0x9a23d940,"lime._internal.backend.native.NativeWindow.setFrameRate","lime/_internal/backend/native/NativeWindow.hx",637,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_654_setFullscreen,"lime._internal.backend.native.NativeWindow","setFullscreen",0x77a41348,"lime._internal.backend.native.NativeWindow.setFullscreen","lime/_internal/backend/native/NativeWindow.hx",654,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_682_setIcon,"lime._internal.backend.native.NativeWindow","setIcon",0xbaaf48c6,"lime._internal.backend.native.NativeWindow.setIcon","lime/_internal/backend/native/NativeWindow.hx",682,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_693_setMaximized,"lime._internal.backend.native.NativeWindow","setMaximized",0x5fdfd5ab,"lime._internal.backend.native.NativeWindow.setMaximized","lime/_internal/backend/native/NativeWindow.hx",693,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_708_setMinimized,"lime._internal.backend.native.NativeWindow","setMinimized",0x899cc319,"lime._internal.backend.native.NativeWindow.setMinimized","lime/_internal/backend/native/NativeWindow.hx",708,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_723_setResizable,"lime._internal.backend.native.NativeWindow","setResizable",0x0a4efefe,"lime._internal.backend.native.NativeWindow.setResizable","lime/_internal/backend/native/NativeWindow.hx",723,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_742_setTitle,"lime._internal.backend.native.NativeWindow","setTitle",0xf813d7ab,"lime._internal.backend.native.NativeWindow.setTitle","lime/_internal/backend/native/NativeWindow.hx",742,0x10f0f707)
HX_LOCAL_STACK_FRAME(_hx_pos_b81205d558ca9a41_760_warpMouse,"lime._internal.backend.native.NativeWindow","warpMouse",0x3c987808,"lime._internal.backend.native.NativeWindow.warpMouse","lime/_internal/backend/native/NativeWindow.hx",760,0x10f0f707)
namespace lime{
namespace _internal{
namespace backend{
namespace native{

void NativeWindow_obj::__construct( ::lime::ui::Window parent){
            	HX_GC_STACKFRAME(&_hx_pos_b81205d558ca9a41_64_new)
HXLINE(  66)		this->parent = parent;
HXLINE(  68)		this->cursor = ::lime::ui::MouseCursor_obj::DEFAULT_dyn();
HXLINE(  69)		this->displayMode =  ::lime::_hx_system::DisplayMode_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE(  71)		 ::Dynamic attributes = parent->_hx___attributes;
HXLINE(  72)		 ::Dynamic contextAttributes;
HXDLIN(  72)		if (::Reflect_obj::hasField(attributes,HX_("context",ef,95,77,19))) {
HXLINE(  72)			contextAttributes = attributes->__Field(HX_("context",ef,95,77,19),hx::paccDynamic);
            		}
            		else {
HXLINE(  72)			contextAttributes =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE(  73)		::String title;
HXDLIN(  73)		if (::Reflect_obj::hasField(attributes,HX_("title",98,15,3b,10))) {
HXLINE(  73)			title = ( (::String)(attributes->__Field(HX_("title",98,15,3b,10),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  73)			title = HX_("Lime Application",c5,b5,9d,ec);
            		}
HXLINE(  74)		int flags = (int)0;
HXLINE(  76)		if (!(::Reflect_obj::hasField(contextAttributes,HX_("antialiasing",f4,16,b3,48)))) {
HXLINE(  76)			contextAttributes->__SetField(HX_("antialiasing",f4,16,b3,48),(int)0,hx::paccDynamic);
            		}
HXLINE(  77)		if (!(::Reflect_obj::hasField(contextAttributes,HX_("background",ee,93,1d,26)))) {
HXLINE(  77)			contextAttributes->__SetField(HX_("background",ee,93,1d,26),(int)0,hx::paccDynamic);
            		}
HXLINE(  78)		if (!(::Reflect_obj::hasField(contextAttributes,HX_("colorDepth",a0,08,96,fb)))) {
HXLINE(  78)			contextAttributes->__SetField(HX_("colorDepth",a0,08,96,fb),(int)24,hx::paccDynamic);
            		}
HXLINE(  79)		if (!(::Reflect_obj::hasField(contextAttributes,HX_("depth",03,f1,29,d7)))) {
HXLINE(  79)			contextAttributes->__SetField(HX_("depth",03,f1,29,d7),true,hx::paccDynamic);
            		}
HXLINE(  80)		if (!(::Reflect_obj::hasField(contextAttributes,HX_("hardware",a8,e2,d3,75)))) {
HXLINE(  80)			contextAttributes->__SetField(HX_("hardware",a8,e2,d3,75),true,hx::paccDynamic);
            		}
HXLINE(  81)		if (!(::Reflect_obj::hasField(contextAttributes,HX_("stencil",fc,bd,03,80)))) {
HXLINE(  81)			contextAttributes->__SetField(HX_("stencil",fc,bd,03,80),true,hx::paccDynamic);
            		}
HXLINE(  82)		if (!(::Reflect_obj::hasField(contextAttributes,HX_("vsync",d1,2d,a8,3d)))) {
HXLINE(  82)			contextAttributes->__SetField(HX_("vsync",d1,2d,a8,3d),false,hx::paccDynamic);
            		}
HXLINE(  85)		bool _hx_tmp;
HXDLIN(  85)		if (::Reflect_obj::hasField(contextAttributes,HX_("type",ba,f2,08,4d))) {
HXLINE(  85)			_hx_tmp = (( (::String)(contextAttributes->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("cairo",88,30,19,41));
            		}
            		else {
HXLINE(  85)			_hx_tmp = false;
            		}
HXDLIN(  85)		if (_hx_tmp) {
HXLINE(  85)			contextAttributes->__SetField(HX_("hardware",a8,e2,d3,75),false,hx::paccDynamic);
            		}
HXLINE(  87)		bool _hx_tmp1;
HXDLIN(  87)		if (::Reflect_obj::hasField(attributes,HX_("allowHighDPI",92,07,a2,b4))) {
HXLINE(  87)			_hx_tmp1 = ( (bool)(attributes->__Field(HX_("allowHighDPI",92,07,a2,b4),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  87)			_hx_tmp1 = false;
            		}
HXDLIN(  87)		if (_hx_tmp1) {
HXLINE(  87)			flags = ((int)flags | (int)(int)2048);
            		}
HXLINE(  88)		bool _hx_tmp2;
HXDLIN(  88)		if (::Reflect_obj::hasField(attributes,HX_("alwaysOnTop",67,4d,53,16))) {
HXLINE(  88)			_hx_tmp2 = ( (bool)(attributes->__Field(HX_("alwaysOnTop",67,4d,53,16),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  88)			_hx_tmp2 = false;
            		}
HXDLIN(  88)		if (_hx_tmp2) {
HXLINE(  88)			flags = ((int)flags | (int)(int)32768);
            		}
HXLINE(  89)		bool _hx_tmp3;
HXDLIN(  89)		if (::Reflect_obj::hasField(attributes,HX_("borderless",45,46,71,17))) {
HXLINE(  89)			_hx_tmp3 = ( (bool)(attributes->__Field(HX_("borderless",45,46,71,17),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  89)			_hx_tmp3 = false;
            		}
HXDLIN(  89)		if (_hx_tmp3) {
HXLINE(  89)			flags = ((int)flags | (int)(int)2);
            		}
HXLINE(  90)		bool _hx_tmp4;
HXDLIN(  90)		if (::Reflect_obj::hasField(attributes,HX_("fullscreen",3b,3a,b4,f9))) {
HXLINE(  90)			_hx_tmp4 = ( (bool)(attributes->__Field(HX_("fullscreen",3b,3a,b4,f9),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  90)			_hx_tmp4 = false;
            		}
HXDLIN(  90)		if (_hx_tmp4) {
HXLINE(  90)			flags = ((int)flags | (int)(int)1);
            		}
HXLINE(  91)		bool _hx_tmp5;
HXDLIN(  91)		if (::Reflect_obj::hasField(attributes,HX_("hidden",6a,ff,95,4c))) {
HXLINE(  91)			_hx_tmp5 = ( (bool)(attributes->__Field(HX_("hidden",6a,ff,95,4c),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  91)			_hx_tmp5 = false;
            		}
HXDLIN(  91)		if (_hx_tmp5) {
HXLINE(  91)			flags = ((int)flags | (int)(int)4096);
            		}
HXLINE(  92)		bool _hx_tmp6;
HXDLIN(  92)		if (::Reflect_obj::hasField(attributes,HX_("maximized",18,0e,e1,fe))) {
HXLINE(  92)			_hx_tmp6 = ( (bool)(attributes->__Field(HX_("maximized",18,0e,e1,fe),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  92)			_hx_tmp6 = false;
            		}
HXDLIN(  92)		if (_hx_tmp6) {
HXLINE(  92)			flags = ((int)flags | (int)(int)16384);
            		}
HXLINE(  93)		bool _hx_tmp7;
HXDLIN(  93)		if (::Reflect_obj::hasField(attributes,HX_("minimized",86,fb,9d,28))) {
HXLINE(  93)			_hx_tmp7 = ( (bool)(attributes->__Field(HX_("minimized",86,fb,9d,28),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  93)			_hx_tmp7 = false;
            		}
HXDLIN(  93)		if (_hx_tmp7) {
HXLINE(  93)			flags = ((int)flags | (int)(int)8192);
            		}
HXLINE(  94)		bool _hx_tmp8;
HXDLIN(  94)		if (::Reflect_obj::hasField(attributes,HX_("resizable",6b,37,50,a9))) {
HXLINE(  94)			_hx_tmp8 = ( (bool)(attributes->__Field(HX_("resizable",6b,37,50,a9),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  94)			_hx_tmp8 = false;
            		}
HXDLIN(  94)		if (_hx_tmp8) {
HXLINE(  94)			flags = ((int)flags | (int)(int)4);
            		}
HXLINE(  96)		if (hx::IsGreaterEq( contextAttributes->__Field(HX_("antialiasing",f4,16,b3,48),hx::paccDynamic),(int)4 )) {
HXLINE(  98)			flags = ((int)flags | (int)(int)96);
            		}
            		else {
HXLINE( 100)			if (hx::IsGreaterEq( contextAttributes->__Field(HX_("antialiasing",f4,16,b3,48),hx::paccDynamic),(int)2 )) {
HXLINE( 102)				flags = ((int)flags | (int)(int)32);
            			}
            		}
HXLINE( 106)		if (hx::IsEq( contextAttributes->__Field(HX_("colorDepth",a0,08,96,fb),hx::paccDynamic),(int)32 )) {
HXLINE( 106)			flags = ((int)flags | (int)(int)65536);
            		}
HXLINE( 107)		if (( (bool)(contextAttributes->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)) )) {
HXLINE( 107)			flags = ((int)flags | (int)(int)512);
            		}
HXLINE( 108)		if (( (bool)(contextAttributes->__Field(HX_("hardware",a8,e2,d3,75),hx::paccDynamic)) )) {
HXLINE( 108)			flags = ((int)flags | (int)(int)8);
            		}
HXLINE( 109)		if (( (bool)(contextAttributes->__Field(HX_("stencil",fc,bd,03,80),hx::paccDynamic)) )) {
HXLINE( 109)			flags = ((int)flags | (int)(int)1024);
            		}
HXLINE( 110)		if (( (bool)(contextAttributes->__Field(HX_("vsync",d1,2d,a8,3d),hx::paccDynamic)) )) {
HXLINE( 110)			flags = ((int)flags | (int)(int)16);
            		}
HXLINE( 112)		 ::Dynamic width;
HXDLIN( 112)		if (::Reflect_obj::hasField(attributes,HX_("width",06,b6,62,ca))) {
HXLINE( 112)			width = attributes->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
            		}
            		else {
HXLINE( 112)			width = (int)800;
            		}
HXLINE( 113)		 ::Dynamic height;
HXDLIN( 113)		if (::Reflect_obj::hasField(attributes,HX_("height",e7,07,4c,02))) {
HXLINE( 113)			height = attributes->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic);
            		}
            		else {
HXLINE( 113)			height = (int)600;
            		}
HXLINE( 116)		this->handle = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_window_create(hx::DynamicPtr(parent->application->_hx___backend->handle),width,height,flags,title)) );
HXLINE( 118)		if (hx::IsNotNull( this->handle )) {
HXLINE( 120)			parent->_hx___width = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_width(hx::DynamicPtr(this->handle));
HXLINE( 121)			parent->_hx___height = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_height(hx::DynamicPtr(this->handle));
HXLINE( 122)			parent->_hx___x = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_x(hx::DynamicPtr(this->handle));
HXLINE( 123)			parent->_hx___y = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_y(hx::DynamicPtr(this->handle));
HXLINE( 124)			bool _hx_tmp9;
HXDLIN( 124)			if (::Reflect_obj::hasField(attributes,HX_("hidden",6a,ff,95,4c))) {
HXLINE( 124)				_hx_tmp9 = ( (bool)(attributes->__Field(HX_("hidden",6a,ff,95,4c),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 124)				_hx_tmp9 = false;
            			}
HXDLIN( 124)			parent->_hx___hidden = _hx_tmp9;
HXLINE( 125)			parent->id = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_id(hx::DynamicPtr(this->handle));
            		}
HXLINE( 129)		parent->_hx___scale = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_scale(hx::DynamicPtr(this->handle));
HXLINE( 131)		 ::lime::graphics::RenderContext context =  ::lime::graphics::RenderContext_obj::__alloc( HX_CTX );
HXLINE( 132)		context->window = parent;
HXLINE( 137)		::String contextType = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_context_type(hx::DynamicPtr(this->handle))) );
HXLINE( 140)		if ((contextType == HX_("opengl",6f,64,94,21))) {
HXLINE( 144)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl =  ::lime::_internal::backend::native::NativeOpenGLRenderContext_obj::__alloc( HX_CTX );
HXLINE( 146)			this->useHardware = true;
HXLINE( 149)			context->gl = gl;
HXLINE( 152)			context->gles2 = gl;
HXLINE( 153)			context->webgl = ::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::fromWebGL2RenderContext(gl);
HXLINE( 154)			context->type = gl->type;
HXLINE( 155)			context->version = ::Std_obj::string(gl->version);
HXLINE( 157)			bool _hx_tmp10;
HXDLIN( 157)			if ((gl->type == HX_("opengles",9d,f6,c9,fa))) {
HXLINE( 157)				_hx_tmp10 = (gl->version >= (int)3);
            			}
            			else {
HXLINE( 157)				_hx_tmp10 = false;
            			}
HXDLIN( 157)			if (_hx_tmp10) {
HXLINE( 159)				context->gles3 = gl;
HXLINE( 160)				context->webgl2 = ::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::fromOpenGLES3RenderContext(gl);
            			}
HXLINE( 164)			if (hx::IsNull( ::lime::graphics::opengl::GL_obj::context )) {
HXLINE( 166)				::lime::graphics::opengl::GL_obj::context = gl;
            			}
            		}
            		else {
HXLINE( 172)			this->useHardware = false;
HXLINE( 175)			context->cairo = this->cairo;
HXLINE( 176)			context->type = HX_("cairo",88,30,19,41);
HXLINE( 177)			context->version = HX_("",00,00,00,00);
HXLINE( 179)			parent->context = context;
HXLINE( 180)			this->render();
HXLINE( 182)			context->type = HX_("cairo",88,30,19,41);
            		}
HXLINE( 186)		contextAttributes->__SetField(HX_("type",ba,f2,08,4d),context->type,hx::paccDynamic);
HXLINE( 187)		context->attributes = contextAttributes;
HXLINE( 188)		parent->context = context;
HXLINE( 190)		Float _hx_tmp11;
HXDLIN( 190)		if (::Reflect_obj::hasField(attributes,HX_("frameRate",ad,11,25,39))) {
HXLINE( 190)			_hx_tmp11 = ( (Float)(attributes->__Field(HX_("frameRate",ad,11,25,39),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 190)			_hx_tmp11 = (int)60;
            		}
HXDLIN( 190)		this->setFrameRate(_hx_tmp11);
            	}

Dynamic NativeWindow_obj::__CreateEmpty() { return new NativeWindow_obj; }

void *NativeWindow_obj::_hx_vtable = 0;

Dynamic NativeWindow_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeWindow_obj > _hx_result = new NativeWindow_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NativeWindow_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7d8a733b;
}

void NativeWindow_obj::alert(::String message,::String title){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_199_alert)
HXDLIN( 199)		if (hx::IsNotNull( this->handle )) {
HXLINE( 202)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_alert(hx::DynamicPtr(this->handle),message,title);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeWindow_obj,alert,(void))

void NativeWindow_obj::close(){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_212_close)
HXDLIN( 212)		if (!(this->closing)) {
HXLINE( 214)			this->closing = true;
HXLINE( 215)			this->parent->onClose->dispatch();
HXLINE( 217)			if (!(this->parent->onClose->canceled)) {
HXLINE( 219)				if (hx::IsNotNull( this->handle )) {
HXLINE( 222)					::lime::_internal::backend::native::NativeCFFI_obj::lime_window_close(hx::DynamicPtr(this->handle));
HXLINE( 224)					this->handle = null();
            				}
            			}
            			else {
HXLINE( 230)				this->closing = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,close,(void))

void NativeWindow_obj::contextFlip(){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_241_contextFlip)
HXLINE( 244)		if (!(this->useHardware)) {
HXLINE( 247)			if (hx::IsNotNull( this->cairo )) {
HXLINE( 249)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->primarySurface);
            			}
HXLINE( 253)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_context_unlock(hx::DynamicPtr(this->handle));
            		}
HXLINE( 257)		::lime::_internal::backend::native::NativeCFFI_obj::lime_window_context_flip(hx::DynamicPtr(this->handle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,contextFlip,(void))

void NativeWindow_obj::focus(){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_265_focus)
HXDLIN( 265)		if (hx::IsNotNull( this->handle )) {
HXLINE( 268)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_focus(hx::DynamicPtr(this->handle));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,focus,(void))

 ::lime::ui::MouseCursor NativeWindow_obj::getCursor(){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_278_getCursor)
HXDLIN( 278)		return this->cursor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,getCursor,return )

 ::lime::_hx_system::Display NativeWindow_obj::getDisplay(){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_283_getDisplay)
HXLINE( 285)		if (hx::IsNotNull( this->handle )) {
HXLINE( 288)			int index = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_display(hx::DynamicPtr(this->handle));
HXLINE( 290)			if ((index > (int)-1)) {
HXLINE( 292)				return ::lime::_hx_system::System_obj::getDisplay(index);
            			}
            		}
HXLINE( 299)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,getDisplay,return )

 ::lime::_hx_system::DisplayMode NativeWindow_obj::getDisplayMode(){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_304_getDisplayMode)
HXLINE( 306)		if (hx::IsNotNull( this->handle )) {
HXLINE( 309)			 ::Dynamic data = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_display_mode(hx::DynamicPtr(this->handle))) );
HXLINE( 310)			this->displayMode->width = ( (int)(data->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) );
HXLINE( 311)			this->displayMode->height = ( (int)(data->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXLINE( 312)			this->displayMode->pixelFormat = ( (int)(data->__Field(HX_("pixelFormat",5d,72,1b,6f),hx::paccDynamic)) );
HXLINE( 313)			this->displayMode->refreshRate = ( (int)(data->__Field(HX_("refreshRate",5b,e2,3f,40),hx::paccDynamic)) );
            		}
HXLINE( 318)		return this->displayMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,getDisplayMode,return )

Float NativeWindow_obj::getFrameRate(){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_325_getFrameRate)
HXDLIN( 325)		return this->frameRate;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,getFrameRate,return )

bool NativeWindow_obj::getMouseLock(){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_330_getMouseLock)
HXLINE( 332)		if (hx::IsNotNull( this->handle )) {
HXLINE( 335)			this->mouseLock = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_mouse_lock(hx::DynamicPtr(this->handle));
            		}
HXLINE( 340)		return this->mouseLock;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,getMouseLock,return )

bool NativeWindow_obj::getTextInputEnabled(){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_345_getTextInputEnabled)
HXLINE( 347)		if (hx::IsNotNull( this->handle )) {
HXLINE( 350)			return ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_text_input_enabled(hx::DynamicPtr(this->handle));
            		}
HXLINE( 355)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,getTextInputEnabled,return )

void NativeWindow_obj::move(int x,int y){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_362_move)
HXDLIN( 362)		if (hx::IsNotNull( this->handle )) {
HXLINE( 365)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_move(hx::DynamicPtr(this->handle),x,y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeWindow_obj,move,(void))

 ::lime::graphics::Image NativeWindow_obj::readPixels( ::lime::math::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_b81205d558ca9a41_373_readPixels)
HXLINE( 375)		 ::lime::graphics::ImageBuffer imageBuffer = null();
HXLINE( 377)		{
HXLINE( 377)			::String _g = this->parent->context->type;
HXDLIN( 377)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("opengl",6f,64,94,21)) ||  (_hx_switch_0==HX_("opengles",9d,f6,c9,fa)) ||  (_hx_switch_0==HX_("webgl",b9,4b,bc,c7)) ){
HXLINE( 381)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->parent->context->webgl;
HXLINE( 382)				int windowWidth = ::Std_obj::_hx_int((this->parent->_hx___width * this->parent->_hx___scale));
HXLINE( 383)				int windowHeight = ::Std_obj::_hx_int((this->parent->_hx___height * this->parent->_hx___scale));
HXLINE( 385)				int x;
HXDLIN( 385)				int y;
HXDLIN( 385)				int width;
HXDLIN( 385)				int height;
HXLINE( 387)				if (hx::IsNotNull( rect )) {
HXLINE( 389)					x = ::Std_obj::_hx_int(rect->x);
HXLINE( 390)					y = ::Std_obj::_hx_int(((windowHeight - rect->y) - rect->height));
HXLINE( 391)					width = ::Std_obj::_hx_int(rect->width);
HXLINE( 392)					height = ::Std_obj::_hx_int(rect->height);
            				}
            				else {
HXLINE( 396)					x = (int)0;
HXLINE( 397)					y = (int)0;
HXLINE( 398)					width = windowWidth;
HXLINE( 399)					height = windowHeight;
            				}
HXLINE( 403)				 ::Dynamic elements = ((width * height) * (int)4);
HXDLIN( 403)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 403)				if (hx::IsNotNull( elements )) {
HXLINE( 403)					this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            				}
            				else {
HXLINE( 403)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXDLIN( 403)				 ::lime::utils::ArrayBufferView data = this1;
HXLINE( 405)				{
HXLINE( 405)					int format = gl->RGBA;
HXDLIN( 405)					int type = gl->UNSIGNED_BYTE;
HXDLIN( 405)					{
HXLINE( 405)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data,null(),(int)0);
HXDLIN( 405)						gl->readPixels(x,y,width,height,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
HXLINE( 409)				int rowLength = (width * (int)4);
HXLINE( 410)				int srcPosition = ((height - (int)1) * rowLength);
HXLINE( 411)				int destPosition = (int)0;
HXLINE( 413)				 ::haxe::io::Bytes temp = ::haxe::io::Bytes_obj::alloc(rowLength);
HXLINE( 414)				 ::haxe::io::Bytes buffer = data->buffer;
HXLINE( 415)				int rows = ::Std_obj::_hx_int(((Float)height / (Float)(int)2));
HXLINE( 417)				while(true){
HXLINE( 417)					rows = (rows - (int)1);
HXDLIN( 417)					if (!(((rows + (int)1) > (int)0))) {
HXLINE( 417)						goto _hx_goto_13;
            					}
HXLINE( 419)					temp->blit((int)0,buffer,destPosition,rowLength);
HXLINE( 420)					buffer->blit(destPosition,buffer,srcPosition,rowLength);
HXLINE( 421)					buffer->blit(srcPosition,temp,(int)0,rowLength);
HXLINE( 423)					destPosition = (destPosition + rowLength);
HXLINE( 424)					srcPosition = (srcPosition - rowLength);
            				}
            				_hx_goto_13:;
HXLINE( 430)				imageBuffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,data,width,height,(int)32,(int)0);
HXLINE( 379)				goto _hx_goto_12;
            			}
            			/* default */{
HXLINE( 436)				 ::Dynamic imageBuffer1 = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN( 436)				 ::Dynamic imageBuffer2 = this->handle;
HXDLIN( 436)				 ::haxe::io::Bytes buffer1 = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN( 436)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 436)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 436)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 436)					int in_byteOffset = (int)0;
HXDLIN( 436)					if ((in_byteOffset < (int)0)) {
HXLINE( 436)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 436)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 436)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 436)					int bufferByteLength = buffer1->length;
HXDLIN( 436)					int elementSize = _this->bytesPerElement;
HXDLIN( 436)					int newByteLength = bufferByteLength;
HXDLIN( 436)					{
HXLINE( 436)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 436)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 436)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 436)						if ((newByteLength < (int)0)) {
HXLINE( 436)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 436)					_this->buffer = buffer1;
HXDLIN( 436)					_this->byteOffset = in_byteOffset;
HXDLIN( 436)					_this->byteLength = newByteLength;
HXDLIN( 436)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 436)					this2 = _this;
            				}
            				else {
HXLINE( 436)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXDLIN( 436)				imageBuffer = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_window_read_pixels(hx::DynamicPtr(imageBuffer2),hx::DynamicPtr(rect),hx::DynamicPtr( ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this2,null(),null(),null(),null())))) );
HXLINE( 445)				if (hx::IsNotNull( imageBuffer )) {
HXLINE( 447)					imageBuffer->format = (int)0;
            				}
            			}
            			_hx_goto_12:;
            		}
HXLINE( 453)		if (hx::IsNotNull( imageBuffer )) {
HXLINE( 455)			return  ::lime::graphics::Image_obj::__alloc( HX_CTX ,imageBuffer,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 459)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,readPixels,return )

void NativeWindow_obj::render(){
            	HX_GC_STACKFRAME(&_hx_pos_b81205d558ca9a41_464_render)
HXLINE( 467)		::lime::_internal::backend::native::NativeCFFI_obj::lime_window_context_make_current(hx::DynamicPtr(this->handle));
HXLINE( 469)		if (!(this->useHardware)) {
HXLINE( 472)			 ::Dynamic lock = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_window_context_lock(hx::DynamicPtr(this->handle))) );
HXLINE( 474)			bool _hx_tmp;
HXDLIN( 474)			if (hx::IsNotNull( lock )) {
HXLINE( 474)				bool _hx_tmp1;
HXDLIN( 474)				bool _hx_tmp2;
HXDLIN( 474)				if (hx::IsNotNull( this->cacheLock )) {
HXLINE( 474)					_hx_tmp2 = hx::IsNotEq(  ::Dynamic(this->cacheLock->__Field(HX_("pixels",2d,ef,a9,8c),hx::paccDynamic)), ::Dynamic(lock->__Field(HX_("pixels",2d,ef,a9,8c),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 474)					_hx_tmp2 = true;
            				}
HXDLIN( 474)				if (!(_hx_tmp2)) {
HXLINE( 474)					_hx_tmp1 = hx::IsNotEq(  ::Dynamic(this->cacheLock->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(lock->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 474)					_hx_tmp1 = true;
            				}
HXDLIN( 474)				if (!(_hx_tmp1)) {
HXLINE( 474)					_hx_tmp = hx::IsNotEq(  ::Dynamic(this->cacheLock->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)), ::Dynamic(lock->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 474)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 474)				_hx_tmp = false;
            			}
HXDLIN( 474)			if (_hx_tmp) {
HXLINE( 476)				this->primarySurface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::create(( (Float)(lock->__Field(HX_("pixels",2d,ef,a9,8c),hx::paccDynamic)) ),(int)0,( (int)(lock->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ),( (int)(lock->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) ),( (int)(lock->__Field(HX_("pitch",c0,bb,a0,c2),hx::paccDynamic)) ));
HXLINE( 478)				if (hx::IsNotNull( this->cairo )) {
HXLINE( 480)					this->cairo->recreate(this->primarySurface);
            				}
            				else {
HXLINE( 484)					this->cairo =  ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,this->primarySurface);
            				}
HXLINE( 488)				this->parent->context->cairo = this->cairo;
            			}
HXLINE( 492)			this->cacheLock = lock;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeWindow_obj,render,(void))

void NativeWindow_obj::resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_505_resize)
HXDLIN( 505)		if (hx::IsNotNull( this->handle )) {
HXLINE( 508)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_resize(hx::DynamicPtr(this->handle),width,height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeWindow_obj,resize,(void))

bool NativeWindow_obj::setBorderless(bool value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_516_setBorderless)
HXLINE( 518)		if (hx::IsNotNull( this->handle )) {
HXLINE( 521)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_borderless(hx::DynamicPtr(this->handle),value);
            		}
HXLINE( 526)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setBorderless,return )

 ::lime::ui::MouseCursor NativeWindow_obj::setCursor( ::lime::ui::MouseCursor value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_531_setCursor)
HXLINE( 533)		if (hx::IsNotEq( this->cursor,value )) {
HXLINE( 535)			if (hx::IsNull( value )) {
HXLINE( 538)				::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_cursor(hx::DynamicPtr(this->handle),(int)0);
            			}
            			else {
HXLINE( 543)				int type;
HXDLIN( 543)				switch((int)(_hx_getEnumValueIndex(value))){
            					case (int)0: {
HXLINE( 543)						type = (int)1;
            					}
            					break;
            					case (int)1: {
HXLINE( 543)						type = (int)2;
            					}
            					break;
            					case (int)3: {
HXLINE( 543)						type = (int)4;
            					}
            					break;
            					case (int)4: {
HXLINE( 543)						type = (int)5;
            					}
            					break;
            					case (int)5: {
HXLINE( 543)						type = (int)6;
            					}
            					break;
            					case (int)6: {
HXLINE( 543)						type = (int)7;
            					}
            					break;
            					case (int)7: {
HXLINE( 543)						type = (int)8;
            					}
            					break;
            					case (int)8: {
HXLINE( 543)						type = (int)9;
            					}
            					break;
            					case (int)9: {
HXLINE( 543)						type = (int)10;
            					}
            					break;
            					case (int)10: {
HXLINE( 543)						type = (int)11;
            					}
            					break;
            					case (int)11: {
HXLINE( 543)						type = (int)12;
            					}
            					break;
            					default:{
HXLINE( 543)						type = (int)3;
            					}
            				}
HXLINE( 561)				::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_cursor(hx::DynamicPtr(this->handle),type);
            			}
HXLINE( 566)			this->cursor = value;
            		}
HXLINE( 570)		return this->cursor;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setCursor,return )

 ::lime::_hx_system::DisplayMode NativeWindow_obj::setDisplayMode( ::lime::_hx_system::DisplayMode value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_575_setDisplayMode)
HXLINE( 577)		if (hx::IsNotNull( this->handle )) {
HXLINE( 580)			 ::Dynamic data = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_display_mode(hx::DynamicPtr(this->handle),hx::DynamicPtr(value))) );
HXLINE( 581)			this->displayMode->width = ( (int)(data->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) );
HXLINE( 582)			this->displayMode->height = ( (int)(data->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXLINE( 583)			this->displayMode->pixelFormat = ( (int)(data->__Field(HX_("pixelFormat",5d,72,1b,6f),hx::paccDynamic)) );
HXLINE( 584)			this->displayMode->refreshRate = ( (int)(data->__Field(HX_("refreshRate",5b,e2,3f,40),hx::paccDynamic)) );
            		}
HXLINE( 589)		return this->displayMode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setDisplayMode,return )

bool NativeWindow_obj::setMouseLock(bool value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_594_setMouseLock)
HXLINE( 596)		if ((this->mouseLock != value)) {
HXLINE( 599)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_mouse_lock(hx::DynamicPtr(this->handle),value);
HXLINE( 602)			this->mouseLock = value;
            		}
HXLINE( 606)		return this->mouseLock;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setMouseLock,return )

bool NativeWindow_obj::setTextInputEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_611_setTextInputEnabled)
HXLINE( 613)		if (hx::IsNotNull( this->handle )) {
HXLINE( 616)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_text_input_enabled(hx::DynamicPtr(this->handle),value);
            		}
HXLINE( 632)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setTextInputEnabled,return )

Float NativeWindow_obj::setFrameRate(Float value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_637_setFrameRate)
HXLINE( 641)		if (hx::IsNotNull( this->handle )) {
HXLINE( 644)			::lime::_internal::backend::native::NativeCFFI_obj::lime_application_set_frame_rate(hx::DynamicPtr(this->parent->application->_hx___backend->handle),value);
            		}
HXLINE( 649)		return (this->frameRate = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setFrameRate,return )

bool NativeWindow_obj::setFullscreen(bool value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_654_setFullscreen)
HXLINE( 656)		if (hx::IsNotNull( this->handle )) {
HXLINE( 659)			value = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_fullscreen(hx::DynamicPtr(this->handle),value);
HXLINE( 661)			this->parent->_hx___width = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_width(hx::DynamicPtr(this->handle));
HXLINE( 662)			this->parent->_hx___height = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_height(hx::DynamicPtr(this->handle));
HXLINE( 663)			this->parent->_hx___x = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_x(hx::DynamicPtr(this->handle));
HXLINE( 664)			this->parent->_hx___y = ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_get_y(hx::DynamicPtr(this->handle));
HXLINE( 667)			if (value) {
HXLINE( 669)				this->parent->onFullscreen->dispatch();
            			}
            		}
HXLINE( 675)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setFullscreen,return )

void NativeWindow_obj::setIcon( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_682_setIcon)
HXDLIN( 682)		if (hx::IsNotNull( this->handle )) {
HXLINE( 685)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_icon(hx::DynamicPtr(this->handle),hx::DynamicPtr(image->buffer));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setIcon,(void))

bool NativeWindow_obj::setMaximized(bool value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_693_setMaximized)
HXLINE( 695)		if (hx::IsNotNull( this->handle )) {
HXLINE( 698)			return ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_maximized(hx::DynamicPtr(this->handle),value);
            		}
HXLINE( 703)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setMaximized,return )

bool NativeWindow_obj::setMinimized(bool value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_708_setMinimized)
HXLINE( 710)		if (hx::IsNotNull( this->handle )) {
HXLINE( 713)			return ::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_minimized(hx::DynamicPtr(this->handle),value);
            		}
HXLINE( 718)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setMinimized,return )

bool NativeWindow_obj::setResizable(bool value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_723_setResizable)
HXLINE( 725)		if (hx::IsNotNull( this->handle )) {
HXLINE( 728)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_resizable(hx::DynamicPtr(this->handle),value);
HXLINE( 732)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_borderless(hx::DynamicPtr(this->handle),!(this->parent->_hx___borderless));
HXLINE( 733)			::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_borderless(hx::DynamicPtr(this->handle),this->parent->_hx___borderless);
            		}
HXLINE( 738)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setResizable,return )

::String NativeWindow_obj::setTitle(::String value){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_742_setTitle)
HXLINE( 744)		if (hx::IsNotNull( this->handle )) {
HXLINE( 747)			return ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_window_set_title(hx::DynamicPtr(this->handle),value)) );
            		}
HXLINE( 752)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeWindow_obj,setTitle,return )

void NativeWindow_obj::warpMouse(int x,int y){
            	HX_STACKFRAME(&_hx_pos_b81205d558ca9a41_760_warpMouse)
HXDLIN( 760)		::lime::_internal::backend::native::NativeCFFI_obj::lime_window_warp_mouse(hx::DynamicPtr(this->handle),x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeWindow_obj,warpMouse,(void))


hx::ObjectPtr< NativeWindow_obj > NativeWindow_obj::__new( ::lime::ui::Window parent) {
	hx::ObjectPtr< NativeWindow_obj > __this = new NativeWindow_obj();
	__this->__construct(parent);
	return __this;
}

hx::ObjectPtr< NativeWindow_obj > NativeWindow_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::ui::Window parent) {
	NativeWindow_obj *__this = (NativeWindow_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NativeWindow_obj), true, "lime._internal.backend.native.NativeWindow"));
	*(void **)__this = NativeWindow_obj::_hx_vtable;
	__this->__construct(parent);
	return __this;
}

NativeWindow_obj::NativeWindow_obj()
{
}

void NativeWindow_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeWindow);
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_MEMBER_NAME(closing,"closing");
	HX_MARK_MEMBER_NAME(cursor,"cursor");
	HX_MARK_MEMBER_NAME(displayMode,"displayMode");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(mouseLock,"mouseLock");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(useHardware,"useHardware");
	HX_MARK_MEMBER_NAME(cacheLock,"cacheLock");
	HX_MARK_MEMBER_NAME(cairo,"cairo");
	HX_MARK_MEMBER_NAME(primarySurface,"primarySurface");
	HX_MARK_END_CLASS();
}

void NativeWindow_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(handle,"handle");
	HX_VISIT_MEMBER_NAME(closing,"closing");
	HX_VISIT_MEMBER_NAME(cursor,"cursor");
	HX_VISIT_MEMBER_NAME(displayMode,"displayMode");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(mouseLock,"mouseLock");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(useHardware,"useHardware");
	HX_VISIT_MEMBER_NAME(cacheLock,"cacheLock");
	HX_VISIT_MEMBER_NAME(cairo,"cairo");
	HX_VISIT_MEMBER_NAME(primarySurface,"primarySurface");
}

hx::Val NativeWindow_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cairo") ) { return hx::Val( cairo ); }
		if (HX_FIELD_EQ(inName,"alert") ) { return hx::Val( alert_dyn() ); }
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn() ); }
		if (HX_FIELD_EQ(inName,"focus") ) { return hx::Val( focus_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle ); }
		if (HX_FIELD_EQ(inName,"cursor") ) { return hx::Val( cursor ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"closing") ) { return hx::Val( closing ); }
		if (HX_FIELD_EQ(inName,"setIcon") ) { return hx::Val( setIcon_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setTitle") ) { return hx::Val( setTitle_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate ); }
		if (HX_FIELD_EQ(inName,"mouseLock") ) { return hx::Val( mouseLock ); }
		if (HX_FIELD_EQ(inName,"cacheLock") ) { return hx::Val( cacheLock ); }
		if (HX_FIELD_EQ(inName,"getCursor") ) { return hx::Val( getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCursor") ) { return hx::Val( setCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"warpMouse") ) { return hx::Val( warpMouse_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getDisplay") ) { return hx::Val( getDisplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"readPixels") ) { return hx::Val( readPixels_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"displayMode") ) { return hx::Val( displayMode ); }
		if (HX_FIELD_EQ(inName,"useHardware") ) { return hx::Val( useHardware ); }
		if (HX_FIELD_EQ(inName,"contextFlip") ) { return hx::Val( contextFlip_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getFrameRate") ) { return hx::Val( getFrameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMouseLock") ) { return hx::Val( getMouseLock_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMouseLock") ) { return hx::Val( setMouseLock_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrameRate") ) { return hx::Val( setFrameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMaximized") ) { return hx::Val( setMaximized_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMinimized") ) { return hx::Val( setMinimized_dyn() ); }
		if (HX_FIELD_EQ(inName,"setResizable") ) { return hx::Val( setResizable_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setBorderless") ) { return hx::Val( setBorderless_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFullscreen") ) { return hx::Val( setFullscreen_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"primarySurface") ) { return hx::Val( primarySurface ); }
		if (HX_FIELD_EQ(inName,"getDisplayMode") ) { return hx::Val( getDisplayMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDisplayMode") ) { return hx::Val( setDisplayMode_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getTextInputEnabled") ) { return hx::Val( getTextInputEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextInputEnabled") ) { return hx::Val( setTextInputEnabled_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NativeWindow_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cairo") ) { cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cursor") ) { cursor=inValue.Cast<  ::lime::ui::MouseCursor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::lime::ui::Window >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"closing") ) { closing=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { frameRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseLock") ) { mouseLock=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheLock") ) { cacheLock=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"displayMode") ) { displayMode=inValue.Cast<  ::lime::_hx_system::DisplayMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useHardware") ) { useHardware=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"primarySurface") ) { primarySurface=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NativeWindow_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"));
	outFields->push(HX_HCSTRING("closing","\xf5","\xde","\x25","\x79"));
	outFields->push(HX_HCSTRING("cursor","\xd6","\x8e","\xe8","\x3e"));
	outFields->push(HX_HCSTRING("displayMode","\xc5","\x72","\x53","\x30"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("mouseLock","\xb0","\x54","\x0c","\xf4"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("useHardware","\x0f","\xea","\xde","\xcf"));
	outFields->push(HX_HCSTRING("cacheLock","\x4d","\xab","\x6c","\x43"));
	outFields->push(HX_HCSTRING("cairo","\x88","\x30","\x19","\x41"));
	outFields->push(HX_HCSTRING("primarySurface","\x8b","\xaa","\xee","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeWindow_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeWindow_obj,handle),HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7")},
	{hx::fsBool,(int)offsetof(NativeWindow_obj,closing),HX_HCSTRING("closing","\xf5","\xde","\x25","\x79")},
	{hx::fsObject /*::lime::ui::MouseCursor*/ ,(int)offsetof(NativeWindow_obj,cursor),HX_HCSTRING("cursor","\xd6","\x8e","\xe8","\x3e")},
	{hx::fsObject /*::lime::_hx_system::DisplayMode*/ ,(int)offsetof(NativeWindow_obj,displayMode),HX_HCSTRING("displayMode","\xc5","\x72","\x53","\x30")},
	{hx::fsFloat,(int)offsetof(NativeWindow_obj,frameRate),HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39")},
	{hx::fsBool,(int)offsetof(NativeWindow_obj,mouseLock),HX_HCSTRING("mouseLock","\xb0","\x54","\x0c","\xf4")},
	{hx::fsObject /*::lime::ui::Window*/ ,(int)offsetof(NativeWindow_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsBool,(int)offsetof(NativeWindow_obj,useHardware),HX_HCSTRING("useHardware","\x0f","\xea","\xde","\xcf")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeWindow_obj,cacheLock),HX_HCSTRING("cacheLock","\x4d","\xab","\x6c","\x43")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(NativeWindow_obj,cairo),HX_HCSTRING("cairo","\x88","\x30","\x19","\x41")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeWindow_obj,primarySurface),HX_HCSTRING("primarySurface","\x8b","\xaa","\xee","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NativeWindow_obj_sStaticStorageInfo = 0;
#endif

static ::String NativeWindow_obj_sMemberFields[] = {
	HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"),
	HX_HCSTRING("closing","\xf5","\xde","\x25","\x79"),
	HX_HCSTRING("cursor","\xd6","\x8e","\xe8","\x3e"),
	HX_HCSTRING("displayMode","\xc5","\x72","\x53","\x30"),
	HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"),
	HX_HCSTRING("mouseLock","\xb0","\x54","\x0c","\xf4"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("useHardware","\x0f","\xea","\xde","\xcf"),
	HX_HCSTRING("cacheLock","\x4d","\xab","\x6c","\x43"),
	HX_HCSTRING("cairo","\x88","\x30","\x19","\x41"),
	HX_HCSTRING("primarySurface","\x8b","\xaa","\xee","\x10"),
	HX_HCSTRING("alert","\x5c","\x57","\x8e","\x21"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("contextFlip","\x3c","\xf8","\xc1","\x20"),
	HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"),
	HX_HCSTRING("getCursor","\x0c","\x18","\x3f","\xbb"),
	HX_HCSTRING("getDisplay","\x4c","\xb0","\xab","\x0a"),
	HX_HCSTRING("getDisplayMode","\xcf","\xc5","\xf1","\xb7"),
	HX_HCSTRING("getFrameRate","\x37","\xae","\x7b","\x48"),
	HX_HCSTRING("getMouseLock","\x3a","\xf1","\x62","\x03"),
	HX_HCSTRING("getTextInputEnabled","\x9a","\xae","\x26","\x7e"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	HX_HCSTRING("readPixels","\x23","\xd3","\x25","\x86"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("setBorderless","\x87","\x84","\xe9","\xb8"),
	HX_HCSTRING("setCursor","\x18","\x04","\x90","\x9e"),
	HX_HCSTRING("setDisplayMode","\x43","\xae","\x11","\xd8"),
	HX_HCSTRING("setMouseLock","\xae","\x14","\x5c","\x18"),
	HX_HCSTRING("setTextInputEnabled","\xa6","\xa1","\xc3","\xba"),
	HX_HCSTRING("setFrameRate","\xab","\xd1","\x74","\x5d"),
	HX_HCSTRING("setFullscreen","\x7d","\x78","\x2c","\x9b"),
	HX_HCSTRING("setIcon","\x3b","\x28","\x37","\x0b"),
	HX_HCSTRING("setMaximized","\x16","\xce","\x30","\x23"),
	HX_HCSTRING("setMinimized","\x84","\xbb","\xed","\x4c"),
	HX_HCSTRING("setResizable","\x69","\xf7","\x9f","\xcd"),
	HX_HCSTRING("setTitle","\x96","\x7e","\x6f","\x1e"),
	HX_HCSTRING("warpMouse","\xbd","\xde","\x6e","\xa6"),
	::String(null()) };

static void NativeWindow_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeWindow_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeWindow_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeWindow_obj::__mClass,"__mClass");
};

#endif

hx::Class NativeWindow_obj::__mClass;

void NativeWindow_obj::__register()
{
	hx::Object *dummy = new NativeWindow_obj;
	NativeWindow_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._internal.backend.native.NativeWindow","\xf9","\x7d","\x53","\x50");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeWindow_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeWindow_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeWindow_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeWindow_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeWindow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeWindow_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace backend
} // end namespace native
