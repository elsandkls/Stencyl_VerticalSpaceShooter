// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSourceImpl
#include <lime/_internal/backend/native/NativeAudioSourceImpl.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_media_vorbis_VorbisFile
#include <lime/media/vorbis/VorbisFile.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_46_new,"lime._internal.backend.native.NativeAudioSource","new",0xc4558c9a,"lime._internal.backend.native.NativeAudioSource.new","lime/_internal/backend/native/NativeAudioSource.hx",46,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_58_dispose,"lime._internal.backend.native.NativeAudioSource","dispose",0xce19e1d9,"lime._internal.backend.native.NativeAudioSource.dispose","lime/_internal/backend/native/NativeAudioSource.hx",58,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_70_init,"lime._internal.backend.native.NativeAudioSource","init",0x033e3196,"lime._internal.backend.native.NativeAudioSource.init","lime/_internal/backend/native/NativeAudioSource.hx",70,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_149_update,"lime._internal.backend.native.NativeAudioSource","update",0xe417aa0f,"lime._internal.backend.native.NativeAudioSource.update","lime/_internal/backend/native/NativeAudioSource.hx",149,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_154_play,"lime._internal.backend.native.NativeAudioSource","play",0x07dd247a,"lime._internal.backend.native.NativeAudioSource.play","lime/_internal/backend/native/NativeAudioSource.hx",154,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_221_pause,"lime._internal.backend.native.NativeAudioSource","pause",0xd26c95b0,"lime._internal.backend.native.NativeAudioSource.pause","lime/_internal/backend/native/NativeAudioSource.hx",221,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_243_readVorbisFileBuffer,"lime._internal.backend.native.NativeAudioSource","readVorbisFileBuffer",0x5a6427cb,"lime._internal.backend.native.NativeAudioSource.readVorbisFileBuffer","lime/_internal/backend/native/NativeAudioSource.hx",243,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_285_refillBuffers,"lime._internal.backend.native.NativeAudioSource","refillBuffers",0x8dd34f17,"lime._internal.backend.native.NativeAudioSource.refillBuffers","lime/_internal/backend/native/NativeAudioSource.hx",285,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_352_stop,"lime._internal.backend.native.NativeAudioSource","stop",0x09dee688,"lime._internal.backend.native.NativeAudioSource.stop","lime/_internal/backend/native/NativeAudioSource.hx",352,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_386_streamTimer_onRun,"lime._internal.backend.native.NativeAudioSource","streamTimer_onRun",0xd26ae54c,"lime._internal.backend.native.NativeAudioSource.streamTimer_onRun","lime/_internal/backend/native/NativeAudioSource.hx",386,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_391_timer_onRun,"lime._internal.backend.native.NativeAudioSource","timer_onRun",0x98b8aa6c,"lime._internal.backend.native.NativeAudioSource.timer_onRun","lime/_internal/backend/native/NativeAudioSource.hx",391,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_420_getCurrentTime,"lime._internal.backend.native.NativeAudioSource","getCurrentTime",0xb0ab91f6,"lime._internal.backend.native.NativeAudioSource.getCurrentTime","lime/_internal/backend/native/NativeAudioSource.hx",420,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_455_setCurrentTime,"lime._internal.backend.native.NativeAudioSource","setCurrentTime",0xd0cb7a6a,"lime._internal.backend.native.NativeAudioSource.setCurrentTime","lime/_internal/backend/native/NativeAudioSource.hx",455,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_522_getGain,"lime._internal.backend.native.NativeAudioSource","getGain",0x29af016f,"lime._internal.backend.native.NativeAudioSource.getGain","lime/_internal/backend/native/NativeAudioSource.hx",522,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_535_setGain,"lime._internal.backend.native.NativeAudioSource","setGain",0x1cb0927b,"lime._internal.backend.native.NativeAudioSource.setGain","lime/_internal/backend/native/NativeAudioSource.hx",535,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_548_getLength,"lime._internal.backend.native.NativeAudioSource","getLength",0x8531c1d6,"lime._internal.backend.native.NativeAudioSource.getLength","lime/_internal/backend/native/NativeAudioSource.hx",548,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_561_setLength,"lime._internal.backend.native.NativeAudioSource","setLength",0x6882ade2,"lime._internal.backend.native.NativeAudioSource.setLength","lime/_internal/backend/native/NativeAudioSource.hx",561,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_589_getLoops,"lime._internal.backend.native.NativeAudioSource","getLoops",0x39b8b29f,"lime._internal.backend.native.NativeAudioSource.getLoops","lime/_internal/backend/native/NativeAudioSource.hx",589,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_596_setLoops,"lime._internal.backend.native.NativeAudioSource","setLoops",0xe8160c13,"lime._internal.backend.native.NativeAudioSource.setLoops","lime/_internal/backend/native/NativeAudioSource.hx",596,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_601_getPosition,"lime._internal.backend.native.NativeAudioSource","getPosition",0x31bde999,"lime._internal.backend.native.NativeAudioSource.getPosition","lime/_internal/backend/native/NativeAudioSource.hx",601,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_619_setPosition,"lime._internal.backend.native.NativeAudioSource","setPosition",0x3c2af0a5,"lime._internal.backend.native.NativeAudioSource.setPosition","lime/_internal/backend/native/NativeAudioSource.hx",619,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_26_boot,"lime._internal.backend.native.NativeAudioSource","boot",0xfe9e7ab8,"lime._internal.backend.native.NativeAudioSource.boot","lime/_internal/backend/native/NativeAudioSource.hx",26,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_27_boot,"lime._internal.backend.native.NativeAudioSource","boot",0xfe9e7ab8,"lime._internal.backend.native.NativeAudioSource.boot","lime/_internal/backend/native/NativeAudioSource.hx",27,0xce8e0834)
HX_LOCAL_STACK_FRAME(_hx_pos_a101d5e86f44bfa1_28_boot,"lime._internal.backend.native.NativeAudioSource","boot",0xfe9e7ab8,"lime._internal.backend.native.NativeAudioSource.boot","lime/_internal/backend/native/NativeAudioSource.hx",28,0xce8e0834)
namespace lime{
namespace _internal{
namespace backend{
namespace native{

void NativeAudioSource_obj::__construct( ::lime::media::AudioSource parent){
            	HX_GC_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_46_new)
HXLINE(  48)		this->parent = parent;
HXLINE(  50)		this->position =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}

Dynamic NativeAudioSource_obj::__CreateEmpty() { return new NativeAudioSource_obj; }

void *NativeAudioSource_obj::_hx_vtable = 0;

Dynamic NativeAudioSource_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeAudioSource_obj > _hx_result = new NativeAudioSource_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NativeAudioSource_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12c6bab6;
}

static ::lime::_internal::backend::native::NativeAudioSourceImpl_obj _hx_lime__internal_backend_native_NativeAudioSource__hx_lime__internal_backend_native_NativeAudioSourceImpl= {
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::dispose,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::init,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::update,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::play,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::pause,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::stop,
	( int (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::getCurrentTime,
	( int (hx::Object::*)(int))&::lime::_internal::backend::native::NativeAudioSource_obj::setCurrentTime,
	( Float (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::getGain,
	( Float (hx::Object::*)(Float))&::lime::_internal::backend::native::NativeAudioSource_obj::setGain,
	( int (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::getLength,
	( int (hx::Object::*)(int))&::lime::_internal::backend::native::NativeAudioSource_obj::setLength,
	( int (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::getLoops,
	( int (hx::Object::*)(int))&::lime::_internal::backend::native::NativeAudioSource_obj::setLoops,
	(  ::lime::math::Vector4 (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource_obj::getPosition,
	(  ::lime::math::Vector4 (hx::Object::*)( ::lime::math::Vector4))&::lime::_internal::backend::native::NativeAudioSource_obj::setPosition,
};

void *NativeAudioSource_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x712cf8b6: return &_hx_lime__internal_backend_native_NativeAudioSource__hx_lime__internal_backend_native_NativeAudioSourceImpl;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void NativeAudioSource_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_58_dispose)
HXDLIN(  58)		if (hx::IsNotNull( this->handle )) {
HXLINE(  60)			this->stop();
HXLINE(  61)			::lime::media::openal::AL_obj::sourcei(this->handle,(int)4105,null());
HXLINE(  62)			::lime::media::openal::AL_obj::deleteSource(this->handle);
HXLINE(  63)			this->handle = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,dispose,(void))

void NativeAudioSource_obj::init(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_70_init)
HXLINE(  72)		this->dataLength = (int)0;
HXLINE(  73)		this->format = (int)0;
HXLINE(  75)		if ((this->parent->buffer->channels == (int)1)) {
HXLINE(  77)			if ((this->parent->buffer->bitsPerSample == (int)8)) {
HXLINE(  79)				this->format = (int)4352;
            			}
            			else {
HXLINE(  81)				if ((this->parent->buffer->bitsPerSample == (int)16)) {
HXLINE(  83)					this->format = (int)4353;
            				}
            			}
            		}
            		else {
HXLINE(  87)			if ((this->parent->buffer->channels == (int)2)) {
HXLINE(  89)				if ((this->parent->buffer->bitsPerSample == (int)8)) {
HXLINE(  91)					this->format = (int)4354;
            				}
            				else {
HXLINE(  93)					if ((this->parent->buffer->bitsPerSample == (int)16)) {
HXLINE(  95)						this->format = (int)4355;
            					}
            				}
            			}
            		}
HXLINE( 101)		if (hx::IsNotNull( this->parent->buffer->_hx___srcVorbisFile )) {
HXLINE( 103)			this->stream = true;
HXLINE( 105)			 ::lime::media::vorbis::VorbisFile vorbisFile = this->parent->buffer->_hx___srcVorbisFile;
HXLINE( 106)			 cpp::Int64Struct x = vorbisFile->pcmTotal(null());
HXDLIN( 106)			int _hx_tmp = _hx_int64_high(x);
HXDLIN( 106)			if ((_hx_tmp != ((int)_hx_int64_low(x) >> (int)(int)31))) {
HXLINE( 106)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 106)			int _hx_tmp1 = _hx_int64_low(x);
HXDLIN( 106)			int _hx_tmp2 = (_hx_tmp1 * this->parent->buffer->channels);
HXDLIN( 106)			this->dataLength = ::Std_obj::_hx_int((_hx_tmp2 * ((Float)this->parent->buffer->bitsPerSample / (Float)(int)8)));
HXLINE( 108)			this->buffers = ::cpp::VirtualArray_obj::__new();
HXLINE( 110)			{
HXLINE( 110)				int _g1 = (int)0;
HXDLIN( 110)				int _g = ::lime::_internal::backend::native::NativeAudioSource_obj::STREAM_NUM_BUFFERS;
HXDLIN( 110)				while((_g1 < _g)){
HXLINE( 110)					_g1 = (_g1 + (int)1);
HXDLIN( 110)					int i = (_g1 - (int)1);
HXLINE( 112)					::cpp::VirtualArray _hx_tmp3 = this->buffers;
HXDLIN( 112)					_hx_tmp3->push(::lime::media::openal::AL_obj::createBuffer());
            				}
            			}
HXLINE( 116)			this->handle = ::lime::media::openal::AL_obj::createSource();
            		}
            		else {
HXLINE( 120)			if (hx::IsNull( this->parent->buffer->_hx___srcBuffer )) {
HXLINE( 122)				this->parent->buffer->_hx___srcBuffer = ::lime::media::openal::AL_obj::createBuffer();
HXLINE( 124)				if (hx::IsNotNull( this->parent->buffer->_hx___srcBuffer )) {
HXLINE( 126)					::lime::media::openal::AL_obj::bufferData(this->parent->buffer->_hx___srcBuffer,this->format,this->parent->buffer->data,this->parent->buffer->data->length,this->parent->buffer->sampleRate);
            				}
            			}
HXLINE( 132)			this->dataLength = this->parent->buffer->data->length;
HXLINE( 134)			this->handle = ::lime::media::openal::AL_obj::createSource();
HXLINE( 136)			if (hx::IsNotNull( this->handle )) {
HXLINE( 138)				::lime::media::openal::AL_obj::sourcei(this->handle,(int)4105,this->parent->buffer->_hx___srcBuffer);
            			}
            		}
HXLINE( 144)		int _hx_tmp4 = (this->dataLength * (int)8);
HXDLIN( 144)		this->samples = ::Std_obj::_hx_int(((Float)_hx_tmp4 / (Float)(this->parent->buffer->channels * this->parent->buffer->bitsPerSample)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,init,(void))

void NativeAudioSource_obj::update(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_149_update)
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,update,(void))

void NativeAudioSource_obj::play(){
            	HX_GC_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_154_play)
HXLINE( 186)		bool _hx_tmp;
HXDLIN( 186)		if (!(this->playing)) {
HXLINE( 186)			_hx_tmp = hx::IsNull( this->handle );
            		}
            		else {
HXLINE( 186)			_hx_tmp = true;
            		}
HXDLIN( 186)		if (_hx_tmp) {
HXLINE( 188)			return;
            		}
HXLINE( 192)		this->playing = true;
HXLINE( 194)		if (this->stream) {
HXLINE( 196)			if (hx::IsNotNull( this->streamTimer )) {
HXLINE( 197)				this->streamTimer->stop();
            			}
HXLINE( 202)			int time = (int)0;
HXLINE( 203)			this->setCurrentTime(time);
HXLINE( 205)			this->streamTimer =  ::haxe::Timer_obj::__alloc( HX_CTX ,::lime::_internal::backend::native::NativeAudioSource_obj::STREAM_TIMER_FREQUENCY);
HXLINE( 206)			this->streamTimer->run = this->streamTimer_onRun_dyn();
            		}
            		else {
HXLINE( 210)			int time1;
HXDLIN( 210)			if (this->completed) {
HXLINE( 210)				time1 = (int)0;
            			}
            			else {
HXLINE( 210)				time1 = this->getCurrentTime();
            			}
HXLINE( 212)			::lime::media::openal::AL_obj::sourcePlay(this->handle);
HXLINE( 214)			this->setCurrentTime(time1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,play,(void))

void NativeAudioSource_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_221_pause)
HXLINE( 223)		this->playing = false;
HXLINE( 225)		if (hx::IsNull( this->handle )) {
HXLINE( 225)			return;
            		}
HXLINE( 226)		::lime::media::openal::AL_obj::sourcePause(this->handle);
HXLINE( 228)		if (hx::IsNotNull( this->streamTimer )) {
HXLINE( 230)			this->streamTimer->stop();
            		}
HXLINE( 234)		if (hx::IsNotNull( this->timer )) {
HXLINE( 236)			this->timer->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,pause,(void))

 ::lime::utils::ArrayBufferView NativeAudioSource_obj::readVorbisFileBuffer( ::lime::media::vorbis::VorbisFile vorbisFile,int length){
            	HX_GC_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_243_readVorbisFileBuffer)
HXLINE( 247)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 247)		if (hx::IsNotNull( length )) {
HXLINE( 247)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,(int)4);
            		}
            		else {
HXLINE( 247)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 247)		 ::lime::utils::ArrayBufferView buffer = this1;
HXLINE( 248)		int read = (int)0;
HXDLIN( 248)		int total = (int)0;
HXDLIN( 248)		int readMax;
HXLINE( 250)		while((total < length)){
HXLINE( 252)			readMax = (int)4096;
HXLINE( 254)			if ((readMax > (length - total))) {
HXLINE( 256)				readMax = (length - total);
            			}
HXLINE( 260)			read = vorbisFile->read(buffer->buffer,total,readMax,null(),null(),null());
HXLINE( 262)			if ((read > (int)0)) {
HXLINE( 264)				total = (total + read);
            			}
            			else {
HXLINE( 268)				goto _hx_goto_7;
            			}
            		}
            		_hx_goto_7:;
HXLINE( 274)		return buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeAudioSource_obj,readVorbisFileBuffer,return )

void NativeAudioSource_obj::refillBuffers(::cpp::VirtualArray buffers){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_285_refillBuffers)
HXLINE( 289)		 ::lime::media::vorbis::VorbisFile vorbisFile = null();
HXLINE( 290)		int position = (int)0;
HXLINE( 292)		if (hx::IsNull( buffers )) {
HXLINE( 294)			int buffersProcessed = ( (int)(::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4118)) );
HXLINE( 296)			if ((buffersProcessed > (int)0)) {
HXLINE( 298)				vorbisFile = this->parent->buffer->_hx___srcVorbisFile;
HXLINE( 299)				 cpp::Int64Struct x = vorbisFile->pcmTell();
HXDLIN( 299)				int position1 = _hx_int64_high(x);
HXDLIN( 299)				if ((position1 != ((int)_hx_int64_low(x) >> (int)(int)31))) {
HXLINE( 299)					HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            				}
HXDLIN( 299)				position = _hx_int64_low(x);
HXLINE( 301)				if ((position < this->dataLength)) {
HXLINE( 303)					buffers = ::lime::media::openal::AL_obj::sourceUnqueueBuffers(this->handle,buffersProcessed);
            				}
            			}
            		}
HXLINE( 311)		if (hx::IsNotNull( buffers )) {
HXLINE( 313)			if (hx::IsNull( vorbisFile )) {
HXLINE( 315)				vorbisFile = this->parent->buffer->_hx___srcVorbisFile;
HXLINE( 316)				 cpp::Int64Struct x1 = vorbisFile->pcmTell();
HXDLIN( 316)				int position2 = _hx_int64_high(x1);
HXDLIN( 316)				if ((position2 != ((int)_hx_int64_low(x1) >> (int)(int)31))) {
HXLINE( 316)					HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            				}
HXDLIN( 316)				position = _hx_int64_low(x1);
            			}
HXLINE( 320)			int numBuffers = (int)0;
HXLINE( 321)			 ::lime::utils::ArrayBufferView data;
HXLINE( 323)			{
HXLINE( 323)				int _g = (int)0;
HXDLIN( 323)				while((_g < buffers->get_length())){
HXLINE( 323)					 ::Dynamic buffer = buffers->__get(_g);
HXDLIN( 323)					_g = (_g + (int)1);
HXLINE( 325)					if (((this->dataLength - position) >= ::lime::_internal::backend::native::NativeAudioSource_obj::STREAM_BUFFER_SIZE)) {
HXLINE( 327)						data = this->readVorbisFileBuffer(vorbisFile,::lime::_internal::backend::native::NativeAudioSource_obj::STREAM_BUFFER_SIZE);
HXLINE( 328)						::lime::media::openal::AL_obj::bufferData(buffer,this->format,data,data->length,this->parent->buffer->sampleRate);
HXLINE( 329)						position = (position + ::lime::_internal::backend::native::NativeAudioSource_obj::STREAM_BUFFER_SIZE);
HXLINE( 330)						numBuffers = (numBuffers + (int)1);
            					}
            					else {
HXLINE( 332)						if ((position < this->dataLength)) {
HXLINE( 334)							data = this->readVorbisFileBuffer(vorbisFile,(this->dataLength - position));
HXLINE( 335)							::lime::media::openal::AL_obj::bufferData(buffer,this->format,data,data->length,this->parent->buffer->sampleRate);
HXLINE( 336)							numBuffers = (numBuffers + (int)1);
HXLINE( 337)							goto _hx_goto_9;
            						}
            					}
            				}
            				_hx_goto_9:;
            			}
HXLINE( 343)			::lime::media::openal::AL_obj::sourceQueueBuffers(this->handle,numBuffers,buffers);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,refillBuffers,(void))

void NativeAudioSource_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_352_stop)
HXLINE( 354)		bool _hx_tmp;
HXDLIN( 354)		bool _hx_tmp1;
HXDLIN( 354)		if (this->playing) {
HXLINE( 354)			_hx_tmp1 = hx::IsNotNull( this->handle );
            		}
            		else {
HXLINE( 354)			_hx_tmp1 = false;
            		}
HXDLIN( 354)		if (_hx_tmp1) {
HXLINE( 354)			_hx_tmp = hx::IsEq( ::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4112),(int)4114 );
            		}
            		else {
HXLINE( 354)			_hx_tmp = false;
            		}
HXDLIN( 354)		if (_hx_tmp) {
HXLINE( 356)			::lime::media::openal::AL_obj::sourceStop(this->handle);
            		}
HXLINE( 360)		this->playing = false;
HXLINE( 362)		if (hx::IsNotNull( this->streamTimer )) {
HXLINE( 364)			this->streamTimer->stop();
            		}
HXLINE( 368)		if (hx::IsNotNull( this->timer )) {
HXLINE( 370)			this->timer->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,stop,(void))

void NativeAudioSource_obj::streamTimer_onRun(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_386_streamTimer_onRun)
HXDLIN( 386)		this->refillBuffers(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,streamTimer_onRun,(void))

void NativeAudioSource_obj::timer_onRun(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_391_timer_onRun)
HXLINE( 393)		if ((this->loops > (int)0)) {
HXLINE( 395)			this->playing = false;
HXLINE( 396)			this->loops--;
HXLINE( 397)			this->setCurrentTime((int)0);
HXLINE( 398)			this->play();
HXLINE( 399)			return;
            		}
            		else {
HXLINE( 403)			this->stop();
            		}
HXLINE( 407)		this->completed = true;
HXLINE( 408)		this->parent->onComplete->dispatch();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,timer_onRun,(void))

int NativeAudioSource_obj::getCurrentTime(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_420_getCurrentTime)
HXLINE( 422)		if (this->completed) {
HXLINE( 424)			return this->getLength();
            		}
            		else {
HXLINE( 426)			if (hx::IsNotNull( this->handle )) {
HXLINE( 428)				if (this->stream) {
HXLINE( 430)					int time = ::Std_obj::_hx_int((this->parent->buffer->_hx___srcVorbisFile->timeTell() * (int)1000));
HXDLIN( 430)					int time1 = (time + ::Std_obj::_hx_int((::lime::media::openal::AL_obj::getSourcef(this->handle,(int)4132) * (int)1000)));
HXDLIN( 430)					int time2 = (time1 - this->parent->offset);
HXLINE( 431)					if ((time2 < (int)0)) {
HXLINE( 431)						return (int)0;
            					}
HXLINE( 432)					return time2;
            				}
            				else {
HXLINE( 436)					int offset = ( (int)(::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4134)) );
HXLINE( 437)					Float ratio = ((Float)offset / (Float)this->dataLength);
HXLINE( 438)					Float totalSeconds = ((Float)this->samples / (Float)this->parent->buffer->sampleRate);
HXLINE( 440)					int time3 = ::Std_obj::_hx_int(((totalSeconds * ratio) * (int)1000));
HXDLIN( 440)					int time4 = (time3 - this->parent->offset);
HXLINE( 443)					if ((time4 < (int)0)) {
HXLINE( 443)						return (int)0;
            					}
HXLINE( 444)					return time4;
            				}
            			}
            		}
HXLINE( 450)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getCurrentTime,return )

int NativeAudioSource_obj::setCurrentTime(int value){
            	HX_GC_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_455_setCurrentTime)
HXLINE( 457)		if (hx::IsNotNull( this->handle )) {
HXLINE( 459)			if (this->stream) {
HXLINE( 461)				::lime::media::openal::AL_obj::sourceStop(this->handle);
HXLINE( 463)				 ::lime::media::vorbis::VorbisFile _hx_tmp = this->parent->buffer->_hx___srcVorbisFile;
HXDLIN( 463)				_hx_tmp->timeSeek(((Float)(value + this->parent->offset) / (Float)(int)1000));
HXLINE( 464)				::lime::media::openal::AL_obj::sourceUnqueueBuffers(this->handle,::lime::_internal::backend::native::NativeAudioSource_obj::STREAM_NUM_BUFFERS);
HXLINE( 465)				this->refillBuffers(this->buffers);
HXLINE( 467)				if (this->playing) {
HXLINE( 467)					::lime::media::openal::AL_obj::sourcePlay(this->handle);
            				}
            			}
            			else {
HXLINE( 469)				if (hx::IsNotNull( this->parent->buffer )) {
HXLINE( 471)					::lime::media::openal::AL_obj::sourceRewind(this->handle);
HXLINE( 472)					if (this->playing) {
HXLINE( 472)						::lime::media::openal::AL_obj::sourcePlay(this->handle);
            					}
HXLINE( 475)					Float secondOffset = ((Float)(value + this->parent->offset) / (Float)(int)1000);
HXLINE( 476)					Float totalSeconds = ((Float)this->samples / (Float)this->parent->buffer->sampleRate);
HXLINE( 478)					if ((secondOffset < (int)0)) {
HXLINE( 478)						secondOffset = (int)0;
            					}
HXLINE( 479)					if ((secondOffset > totalSeconds)) {
HXLINE( 479)						secondOffset = totalSeconds;
            					}
HXLINE( 481)					Float ratio = ((Float)secondOffset / (Float)totalSeconds);
HXLINE( 482)					int totalOffset = ::Std_obj::_hx_int((this->dataLength * ratio));
HXLINE( 484)					::lime::media::openal::AL_obj::sourcei(this->handle,(int)4134,totalOffset);
            				}
            			}
            		}
HXLINE( 490)		if (this->playing) {
HXLINE( 492)			if (hx::IsNotNull( this->timer )) {
HXLINE( 494)				this->timer->stop();
            			}
HXLINE( 498)			int timeRemaining = (this->getLength() - value);
HXLINE( 500)			if ((timeRemaining > (int)0)) {
HXLINE( 502)				this->completed = false;
HXLINE( 503)				this->timer =  ::haxe::Timer_obj::__alloc( HX_CTX ,timeRemaining);
HXLINE( 504)				this->timer->run = this->timer_onRun_dyn();
            			}
            			else {
HXLINE( 508)				this->playing = false;
HXLINE( 509)				this->completed = true;
            			}
            		}
HXLINE( 515)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setCurrentTime,return )

Float NativeAudioSource_obj::getGain(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_522_getGain)
HXDLIN( 522)		if (hx::IsNotNull( this->handle )) {
HXLINE( 524)			return ::lime::media::openal::AL_obj::getSourcef(this->handle,(int)4106);
            		}
            		else {
HXLINE( 528)			return (int)1;
            		}
HXLINE( 522)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getGain,return )

Float NativeAudioSource_obj::setGain(Float value){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_535_setGain)
HXLINE( 537)		if (hx::IsNotNull( this->handle )) {
HXLINE( 539)			::lime::media::openal::AL_obj::sourcef(this->handle,(int)4106,value);
            		}
HXLINE( 543)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setGain,return )

int NativeAudioSource_obj::getLength(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_548_getLength)
HXLINE( 550)		if (hx::IsNotNull( this->length )) {
HXLINE( 552)			return this->length;
            		}
HXLINE( 556)		int _hx_tmp = ::Std_obj::_hx_int((((Float)this->samples / (Float)this->parent->buffer->sampleRate) * (int)1000));
HXDLIN( 556)		return (_hx_tmp - this->parent->offset);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getLength,return )

int NativeAudioSource_obj::setLength(int value){
            	HX_GC_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_561_setLength)
HXLINE( 563)		bool _hx_tmp;
HXDLIN( 563)		if (this->playing) {
HXLINE( 563)			_hx_tmp = hx::IsNotEq( this->length,value );
            		}
            		else {
HXLINE( 563)			_hx_tmp = false;
            		}
HXDLIN( 563)		if (_hx_tmp) {
HXLINE( 565)			if (hx::IsNotNull( this->timer )) {
HXLINE( 567)				this->timer->stop();
            			}
HXLINE( 571)			int timeRemaining = (value - this->getCurrentTime());
HXLINE( 573)			if ((timeRemaining > (int)0)) {
HXLINE( 575)				this->timer =  ::haxe::Timer_obj::__alloc( HX_CTX ,timeRemaining);
HXLINE( 576)				this->timer->run = this->timer_onRun_dyn();
            			}
            		}
HXLINE( 582)		return (this->length = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setLength,return )

int NativeAudioSource_obj::getLoops(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_589_getLoops)
HXDLIN( 589)		return this->loops;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getLoops,return )

int NativeAudioSource_obj::setLoops(int value){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_596_setLoops)
HXDLIN( 596)		return (this->loops = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setLoops,return )

 ::lime::math::Vector4 NativeAudioSource_obj::getPosition(){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_601_getPosition)
HXLINE( 603)		if (hx::IsNotNull( this->handle )) {
HXLINE( 606)			::Array< Float > value = ::lime::media::openal::AL_obj::getSource3f(this->handle,(int)4100);
HXLINE( 607)			this->position->x = value->__get((int)0);
HXLINE( 608)			this->position->y = value->__get((int)1);
HXLINE( 609)			this->position->z = value->__get((int)2);
            		}
HXLINE( 614)		return this->position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getPosition,return )

 ::lime::math::Vector4 NativeAudioSource_obj::setPosition( ::lime::math::Vector4 value){
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_619_setPosition)
HXLINE( 621)		this->position->x = value->x;
HXLINE( 622)		this->position->y = value->y;
HXLINE( 623)		this->position->z = value->z;
HXLINE( 624)		this->position->w = value->w;
HXLINE( 626)		if (hx::IsNotNull( this->handle )) {
HXLINE( 628)			::lime::media::openal::AL_obj::distanceModel((int)0);
HXLINE( 629)			::lime::media::openal::AL_obj::source3f(this->handle,(int)4100,this->position->x,this->position->y,this->position->z);
            		}
HXLINE( 633)		return this->position;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setPosition,return )

int NativeAudioSource_obj::STREAM_BUFFER_SIZE;

int NativeAudioSource_obj::STREAM_NUM_BUFFERS;

int NativeAudioSource_obj::STREAM_TIMER_FREQUENCY;


hx::ObjectPtr< NativeAudioSource_obj > NativeAudioSource_obj::__new( ::lime::media::AudioSource parent) {
	hx::ObjectPtr< NativeAudioSource_obj > __this = new NativeAudioSource_obj();
	__this->__construct(parent);
	return __this;
}

hx::ObjectPtr< NativeAudioSource_obj > NativeAudioSource_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::media::AudioSource parent) {
	NativeAudioSource_obj *__this = (NativeAudioSource_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NativeAudioSource_obj), true, "lime._internal.backend.native.NativeAudioSource"));
	*(void **)__this = NativeAudioSource_obj::_hx_vtable;
	__this->__construct(parent);
	return __this;
}

NativeAudioSource_obj::NativeAudioSource_obj()
{
}

void NativeAudioSource_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeAudioSource);
	HX_MARK_MEMBER_NAME(buffers,"buffers");
	HX_MARK_MEMBER_NAME(completed,"completed");
	HX_MARK_MEMBER_NAME(dataLength,"dataLength");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(loops,"loops");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(playing,"playing");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(samples,"samples");
	HX_MARK_MEMBER_NAME(stream,"stream");
	HX_MARK_MEMBER_NAME(streamTimer,"streamTimer");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_END_CLASS();
}

void NativeAudioSource_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffers,"buffers");
	HX_VISIT_MEMBER_NAME(completed,"completed");
	HX_VISIT_MEMBER_NAME(dataLength,"dataLength");
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(handle,"handle");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(loops,"loops");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(playing,"playing");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(samples,"samples");
	HX_VISIT_MEMBER_NAME(stream,"stream");
	HX_VISIT_MEMBER_NAME(streamTimer,"streamTimer");
	HX_VISIT_MEMBER_NAME(timer,"timer");
}

hx::Val NativeAudioSource_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { return hx::Val( loops ); }
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format ); }
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"stream") ) { return hx::Val( stream ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"buffers") ) { return hx::Val( buffers ); }
		if (HX_FIELD_EQ(inName,"playing") ) { return hx::Val( playing ); }
		if (HX_FIELD_EQ(inName,"samples") ) { return hx::Val( samples ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGain") ) { return hx::Val( getGain_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGain") ) { return hx::Val( setGain_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"getLoops") ) { return hx::Val( getLoops_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLoops") ) { return hx::Val( setLoops_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { return hx::Val( completed ); }
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLength") ) { return hx::Val( setLength_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataLength") ) { return hx::Val( dataLength ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"streamTimer") ) { return hx::Val( streamTimer ); }
		if (HX_FIELD_EQ(inName,"timer_onRun") ) { return hx::Val( timer_onRun_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPosition") ) { return hx::Val( getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"refillBuffers") ) { return hx::Val( refillBuffers_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCurrentTime") ) { return hx::Val( getCurrentTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCurrentTime") ) { return hx::Val( setCurrentTime_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"streamTimer_onRun") ) { return hx::Val( streamTimer_onRun_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"readVorbisFileBuffer") ) { return hx::Val( readVorbisFileBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NativeAudioSource_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"STREAM_BUFFER_SIZE") ) { outValue = ( STREAM_BUFFER_SIZE ); return true; }
		if (HX_FIELD_EQ(inName,"STREAM_NUM_BUFFERS") ) { outValue = ( STREAM_NUM_BUFFERS ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"STREAM_TIMER_FREQUENCY") ) { outValue = ( STREAM_TIMER_FREQUENCY ); return true; }
	}
	return false;
}

hx::Val NativeAudioSource_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { loops=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::lime::media::AudioSource >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stream") ) { stream=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"buffers") ) { buffers=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playing") ) { playing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"samples") ) { samples=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::lime::math::Vector4 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { completed=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataLength") ) { dataLength=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"streamTimer") ) { streamTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool NativeAudioSource_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"STREAM_BUFFER_SIZE") ) { STREAM_BUFFER_SIZE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"STREAM_NUM_BUFFERS") ) { STREAM_NUM_BUFFERS=ioValue.Cast< int >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"STREAM_TIMER_FREQUENCY") ) { STREAM_TIMER_FREQUENCY=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void NativeAudioSource_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffers","\x73","\xa3","\x90","\xb1"));
	outFields->push(HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f"));
	outFields->push(HX_HCSTRING("dataLength","\xb0","\x5a","\xa9","\x8a"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("samples","\x09","\xc5","\xc9","\x83"));
	outFields->push(HX_HCSTRING("stream","\x80","\x14","\x2d","\x11"));
	outFields->push(HX_HCSTRING("streamTimer","\x25","\xcb","\xfb","\x7f"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeAudioSource_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(NativeAudioSource_obj,buffers),HX_HCSTRING("buffers","\x73","\xa3","\x90","\xb1")},
	{hx::fsBool,(int)offsetof(NativeAudioSource_obj,completed),HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f")},
	{hx::fsInt,(int)offsetof(NativeAudioSource_obj,dataLength),HX_HCSTRING("dataLength","\xb0","\x5a","\xa9","\x8a")},
	{hx::fsInt,(int)offsetof(NativeAudioSource_obj,format),HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeAudioSource_obj,handle),HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeAudioSource_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsInt,(int)offsetof(NativeAudioSource_obj,loops),HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78")},
	{hx::fsObject /*::lime::media::AudioSource*/ ,(int)offsetof(NativeAudioSource_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsBool,(int)offsetof(NativeAudioSource_obj,playing),HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a")},
	{hx::fsObject /*::lime::math::Vector4*/ ,(int)offsetof(NativeAudioSource_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsInt,(int)offsetof(NativeAudioSource_obj,samples),HX_HCSTRING("samples","\x09","\xc5","\xc9","\x83")},
	{hx::fsBool,(int)offsetof(NativeAudioSource_obj,stream),HX_HCSTRING("stream","\x80","\x14","\x2d","\x11")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(NativeAudioSource_obj,streamTimer),HX_HCSTRING("streamTimer","\x25","\xcb","\xfb","\x7f")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(NativeAudioSource_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo NativeAudioSource_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &NativeAudioSource_obj::STREAM_BUFFER_SIZE,HX_HCSTRING("STREAM_BUFFER_SIZE","\x21","\xaa","\x29","\xff")},
	{hx::fsInt,(void *) &NativeAudioSource_obj::STREAM_NUM_BUFFERS,HX_HCSTRING("STREAM_NUM_BUFFERS","\x7b","\x0f","\xd0","\xac")},
	{hx::fsInt,(void *) &NativeAudioSource_obj::STREAM_TIMER_FREQUENCY,HX_HCSTRING("STREAM_TIMER_FREQUENCY","\x23","\x49","\x97","\x07")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String NativeAudioSource_obj_sMemberFields[] = {
	HX_HCSTRING("buffers","\x73","\xa3","\x90","\xb1"),
	HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f"),
	HX_HCSTRING("dataLength","\xb0","\x5a","\xa9","\x8a"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("samples","\x09","\xc5","\xc9","\x83"),
	HX_HCSTRING("stream","\x80","\x14","\x2d","\x11"),
	HX_HCSTRING("streamTimer","\x25","\xcb","\xfb","\x7f"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("readVorbisFileBuffer","\x45","\x45","\x75","\x21"),
	HX_HCSTRING("refillBuffers","\x5d","\x46","\x6a","\xd5"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("streamTimer_onRun","\x92","\xf7","\x55","\xe4"),
	HX_HCSTRING("timer_onRun","\x32","\x24","\xe9","\x57"),
	HX_HCSTRING("getCurrentTime","\xf0","\xf7","\x2c","\x0d"),
	HX_HCSTRING("setCurrentTime","\x64","\xe0","\x4c","\x2d"),
	HX_HCSTRING("getGain","\x35","\xa0","\xe1","\x16"),
	HX_HCSTRING("setGain","\x41","\x31","\xe3","\x09"),
	HX_HCSTRING("getLength","\x1c","\x1e","\x5e","\x1b"),
	HX_HCSTRING("setLength","\x28","\x0a","\xaf","\xfe"),
	HX_HCSTRING("getLoops","\x19","\x01","\xd1","\xd8"),
	HX_HCSTRING("setLoops","\x8d","\x5a","\x2e","\x87"),
	HX_HCSTRING("getPosition","\x5f","\x63","\xee","\xf0"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	::String(null()) };

static void NativeAudioSource_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeAudioSource_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NativeAudioSource_obj::STREAM_BUFFER_SIZE,"STREAM_BUFFER_SIZE");
	HX_MARK_MEMBER_NAME(NativeAudioSource_obj::STREAM_NUM_BUFFERS,"STREAM_NUM_BUFFERS");
	HX_MARK_MEMBER_NAME(NativeAudioSource_obj::STREAM_TIMER_FREQUENCY,"STREAM_TIMER_FREQUENCY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeAudioSource_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeAudioSource_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NativeAudioSource_obj::STREAM_BUFFER_SIZE,"STREAM_BUFFER_SIZE");
	HX_VISIT_MEMBER_NAME(NativeAudioSource_obj::STREAM_NUM_BUFFERS,"STREAM_NUM_BUFFERS");
	HX_VISIT_MEMBER_NAME(NativeAudioSource_obj::STREAM_TIMER_FREQUENCY,"STREAM_TIMER_FREQUENCY");
};

#endif

hx::Class NativeAudioSource_obj::__mClass;

static ::String NativeAudioSource_obj_sStaticFields[] = {
	HX_HCSTRING("STREAM_BUFFER_SIZE","\x21","\xaa","\x29","\xff"),
	HX_HCSTRING("STREAM_NUM_BUFFERS","\x7b","\x0f","\xd0","\xac"),
	HX_HCSTRING("STREAM_TIMER_FREQUENCY","\x23","\x49","\x97","\x07"),
	::String(null())
};

void NativeAudioSource_obj::__register()
{
	hx::Object *dummy = new NativeAudioSource_obj;
	NativeAudioSource_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._internal.backend.native.NativeAudioSource","\xa8","\xf7","\x00","\x71");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NativeAudioSource_obj::__GetStatic;
	__mClass->mSetStaticField = &NativeAudioSource_obj::__SetStatic;
	__mClass->mMarkFunc = NativeAudioSource_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NativeAudioSource_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeAudioSource_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeAudioSource_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeAudioSource_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeAudioSource_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeAudioSource_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NativeAudioSource_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_26_boot)
HXDLIN(  26)		STREAM_BUFFER_SIZE = (int)48000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_27_boot)
HXDLIN(  27)		STREAM_NUM_BUFFERS = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a101d5e86f44bfa1_28_boot)
HXDLIN(  28)		STREAM_TIMER_FREQUENCY = (int)100;
            	}
}

} // end namespace lime
} // end namespace _internal
} // end namespace backend
} // end namespace native
