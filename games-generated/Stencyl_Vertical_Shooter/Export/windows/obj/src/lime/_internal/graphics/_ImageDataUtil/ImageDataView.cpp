// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime__internal_graphics__ImageDataUtil_ImageDataView
#include <lime/_internal/graphics/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0f70c5927802d56d_1821_new,"lime._internal.graphics._ImageDataUtil.ImageDataView","new",0x36089ace,"lime._internal.graphics._ImageDataUtil.ImageDataView.new","lime/_internal/graphics/ImageDataUtil.hx",1821,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_0f70c5927802d56d_1848_clip,"lime._internal.graphics._ImageDataUtil.ImageDataView","clip",0x0a3ec4a2,"lime._internal.graphics._ImageDataUtil.ImageDataView.clip","lime/_internal/graphics/ImageDataUtil.hx",1848,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_0f70c5927802d56d_1861_hasRow,"lime._internal.graphics._ImageDataUtil.ImageDataView","hasRow",0xdbd8dd32,"lime._internal.graphics._ImageDataUtil.ImageDataView.hasRow","lime/_internal/graphics/ImageDataUtil.hx",1861,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_0f70c5927802d56d_1866_offset,"lime._internal.graphics._ImageDataUtil.ImageDataView","offset",0x80da85e5,"lime._internal.graphics._ImageDataUtil.ImageDataView.offset","lime/_internal/graphics/ImageDataUtil.hx",1866,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_0f70c5927802d56d_1899_row,"lime._internal.graphics._ImageDataUtil.ImageDataView","row",0x360bac88,"lime._internal.graphics._ImageDataUtil.ImageDataView.row","lime/_internal/graphics/ImageDataUtil.hx",1899,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_0f70c5927802d56d_1904___update,"lime._internal.graphics._ImageDataUtil.ImageDataView","__update",0xdf2597fb,"lime._internal.graphics._ImageDataUtil.ImageDataView.__update","lime/_internal/graphics/ImageDataUtil.hx",1904,0x59dddace)
namespace lime{
namespace _internal{
namespace graphics{
namespace _ImageDataUtil{

void ImageDataView_obj::__construct( ::lime::graphics::Image image, ::lime::math::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_0f70c5927802d56d_1821_new)
HXLINE(1823)		this->image = image;
HXLINE(1825)		if (hx::IsNull( rect )) {
HXLINE(1827)			this->rect = image->get_rect();
            		}
            		else {
HXLINE(1831)			if ((rect->x < (int)0)) {
HXLINE(1831)				rect->x = (int)0;
            			}
HXLINE(1832)			if ((rect->y < (int)0)) {
HXLINE(1832)				rect->y = (int)0;
            			}
HXLINE(1833)			if (((rect->x + rect->width) > image->width)) {
HXLINE(1833)				rect->width = (image->width - rect->x);
            			}
HXLINE(1834)			if (((rect->y + rect->height) > image->height)) {
HXLINE(1834)				rect->height = (image->height - rect->y);
            			}
HXLINE(1835)			if ((rect->width < (int)0)) {
HXLINE(1835)				rect->width = (int)0;
            			}
HXLINE(1836)			if ((rect->height < (int)0)) {
HXLINE(1836)				rect->height = (int)0;
            			}
HXLINE(1837)			this->rect = rect;
            		}
HXLINE(1841)		this->stride = image->buffer->get_stride();
HXLINE(1843)		this->_hx___update();
            	}

Dynamic ImageDataView_obj::__CreateEmpty() { return new ImageDataView_obj; }

void *ImageDataView_obj::_hx_vtable = 0;

Dynamic ImageDataView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataView_obj > _hx_result = new ImageDataView_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ImageDataView_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x58696d14;
}

void ImageDataView_obj::clip(int x,int y,int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_0f70c5927802d56d_1848_clip)
HXLINE(1850)		if (hx::IsNull( this->tempRect )) {
HXLINE(1850)			this->tempRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE(1851)		this->tempRect->setTo(x,y,width,height);
HXLINE(1853)		this->rect->intersection(this->tempRect,this->rect);
HXLINE(1854)		this->_hx___update();
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageDataView_obj,clip,(void))

bool ImageDataView_obj::hasRow(int y){
            	HX_STACKFRAME(&_hx_pos_0f70c5927802d56d_1861_hasRow)
HXDLIN(1861)		if ((y >= (int)0)) {
HXDLIN(1861)			return (y < this->height);
            		}
            		else {
HXDLIN(1861)			return false;
            		}
HXDLIN(1861)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageDataView_obj,hasRow,return )

void ImageDataView_obj::offset(int x,int y){
            	HX_STACKFRAME(&_hx_pos_0f70c5927802d56d_1866_offset)
HXLINE(1868)		if ((x < (int)0)) {
HXLINE(1870)			 ::lime::math::Rectangle _hx_tmp = this->rect;
HXDLIN(1870)			_hx_tmp->x = (_hx_tmp->x + x);
HXLINE(1871)			if ((this->rect->x < (int)0)) {
HXLINE(1871)				this->rect->x = (int)0;
            			}
            		}
            		else {
HXLINE(1875)			 ::lime::math::Rectangle _hx_tmp1 = this->rect;
HXDLIN(1875)			_hx_tmp1->x = (_hx_tmp1->x + x);
HXLINE(1876)			 ::lime::math::Rectangle _hx_tmp2 = this->rect;
HXDLIN(1876)			_hx_tmp2->width = (_hx_tmp2->width - x);
            		}
HXLINE(1880)		if ((y < (int)0)) {
HXLINE(1882)			 ::lime::math::Rectangle _hx_tmp3 = this->rect;
HXDLIN(1882)			_hx_tmp3->y = (_hx_tmp3->y + y);
HXLINE(1883)			if ((this->rect->y < (int)0)) {
HXLINE(1883)				this->rect->y = (int)0;
            			}
            		}
            		else {
HXLINE(1887)			 ::lime::math::Rectangle _hx_tmp4 = this->rect;
HXDLIN(1887)			_hx_tmp4->y = (_hx_tmp4->y + y);
HXLINE(1888)			 ::lime::math::Rectangle _hx_tmp5 = this->rect;
HXDLIN(1888)			_hx_tmp5->height = (_hx_tmp5->height - y);
            		}
HXLINE(1892)		this->_hx___update();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ImageDataView_obj,offset,(void))

int ImageDataView_obj::row(int y){
            	HX_STACKFRAME(&_hx_pos_0f70c5927802d56d_1899_row)
HXDLIN(1899)		int _hx_tmp = this->byteOffset;
HXDLIN(1899)		return (_hx_tmp + (this->stride * y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageDataView_obj,row,return )

void ImageDataView_obj::_hx___update(){
            	HX_STACKFRAME(&_hx_pos_0f70c5927802d56d_1904___update)
HXLINE(1906)		this->x = ::Math_obj::ceil(this->rect->x);
HXLINE(1907)		this->y = ::Math_obj::ceil(this->rect->y);
HXLINE(1908)		this->width = ::Math_obj::floor(this->rect->width);
HXLINE(1909)		this->height = ::Math_obj::floor(this->rect->height);
HXLINE(1910)		int _hx_tmp = this->stride;
HXDLIN(1910)		int _hx_tmp1 = (_hx_tmp * (this->y + this->image->offsetY));
HXDLIN(1910)		this->byteOffset = (_hx_tmp1 + ((this->x + this->image->offsetX) * (int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImageDataView_obj,_hx___update,(void))


hx::ObjectPtr< ImageDataView_obj > ImageDataView_obj::__new( ::lime::graphics::Image image, ::lime::math::Rectangle rect) {
	hx::ObjectPtr< ImageDataView_obj > __this = new ImageDataView_obj();
	__this->__construct(image,rect);
	return __this;
}

hx::ObjectPtr< ImageDataView_obj > ImageDataView_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::graphics::Image image, ::lime::math::Rectangle rect) {
	ImageDataView_obj *__this = (ImageDataView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ImageDataView_obj), true, "lime._internal.graphics._ImageDataUtil.ImageDataView"));
	*(void **)__this = ImageDataView_obj::_hx_vtable;
	__this->__construct(image,rect);
	return __this;
}

ImageDataView_obj::ImageDataView_obj()
{
}

void ImageDataView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageDataView);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(byteOffset,"byteOffset");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(stride,"stride");
	HX_MARK_MEMBER_NAME(tempRect,"tempRect");
	HX_MARK_END_CLASS();
}

void ImageDataView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(byteOffset,"byteOffset");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(stride,"stride");
	HX_VISIT_MEMBER_NAME(tempRect,"tempRect");
}

hx::Val ImageDataView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"row") ) { return hx::Val( row_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"clip") ) { return hx::Val( clip_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"stride") ) { return hx::Val( stride ); }
		if (HX_FIELD_EQ(inName,"hasRow") ) { return hx::Val( hasRow_dyn() ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tempRect") ) { return hx::Val( tempRect ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { return hx::Val( byteOffset ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ImageDataView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::lime::math::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stride") ) { stride=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tempRect") ) { tempRect=inValue.Cast<  ::lime::math::Rectangle >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { byteOffset=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ImageDataView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("stride","\x19","\x20","\x30","\x11"));
	outFields->push(HX_HCSTRING("tempRect","\x58","\x56","\x1b","\x9b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ImageDataView_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ImageDataView_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,byteOffset),HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38")},
	{hx::fsObject /*::lime::graphics::Image*/ ,(int)offsetof(ImageDataView_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsObject /*::lime::math::Rectangle*/ ,(int)offsetof(ImageDataView_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,stride),HX_HCSTRING("stride","\x19","\x20","\x30","\x11")},
	{hx::fsObject /*::lime::math::Rectangle*/ ,(int)offsetof(ImageDataView_obj,tempRect),HX_HCSTRING("tempRect","\x58","\x56","\x1b","\x9b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ImageDataView_obj_sStaticStorageInfo = 0;
#endif

static ::String ImageDataView_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("stride","\x19","\x20","\x30","\x11"),
	HX_HCSTRING("tempRect","\x58","\x56","\x1b","\x9b"),
	HX_HCSTRING("clip","\xd0","\x6e","\xc2","\x41"),
	HX_HCSTRING("hasRow","\xe0","\xee","\x3d","\xbb"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("row","\x1a","\xe2","\x56","\x00"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	::String(null()) };

static void ImageDataView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageDataView_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageDataView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageDataView_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageDataView_obj::__mClass;

void ImageDataView_obj::__register()
{
	hx::Object *dummy = new ImageDataView_obj;
	ImageDataView_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._internal.graphics._ImageDataUtil.ImageDataView","\xdc","\xdb","\x9b","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageDataView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ImageDataView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ImageDataView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageDataView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace graphics
} // end namespace _ImageDataUtil
