// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeHTTPRequest
#include <lime/_internal/backend/native/NativeHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_String
#include <lime/app/Promise_String.h>
#endif
#ifndef INCLUDED_lime_app_Promise_haxe_io_Bytes
#include <lime/app/Promise_haxe_io_Bytes.h>
#endif
#ifndef INCLUDED_lime_app__Event_haxe_Function_Void
#include <lime/app/_Event_haxe_Function_Void.h>
#endif
#ifndef INCLUDED_lime_net_HTTPRequestHeader
#include <lime/net/HTTPRequestHeader.h>
#endif
#ifndef INCLUDED_lime_net__IHTTPRequest
#include <lime/net/_IHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_net_curl_CURL
#include <lime/net/curl/CURL.h>
#endif
#ifndef INCLUDED_lime_net_curl_CURLMulti
#include <lime/net/curl/CURLMulti.h>
#endif
#ifndef INCLUDED_lime_net_curl_CURLMultiMessage
#include <lime/net/curl/CURLMultiMessage.h>
#endif
#ifndef INCLUDED_lime_system_ThreadPool
#include <lime/system/ThreadPool.h>
#endif
#ifndef INCLUDED_lime_utils__Bytes_Bytes_Impl_
#include <lime/utils/_Bytes/Bytes_Impl_.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_11449fe5de606ab4_45_new,"lime._internal.backend.native.NativeHTTPRequest","new",0x75342a10,"lime._internal.backend.native.NativeHTTPRequest.new","lime/_internal/backend/native/NativeHTTPRequest.hx",45,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_53_cancel,"lime._internal.backend.native.NativeHTTPRequest","cancel",0xd7a6c1ca,"lime._internal.backend.native.NativeHTTPRequest.cancel","lime/_internal/backend/native/NativeHTTPRequest.hx",53,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_80_init,"lime._internal.backend.native.NativeHTTPRequest","init",0x15295b60,"lime._internal.backend.native.NativeHTTPRequest.init","lime/_internal/backend/native/NativeHTTPRequest.hx",80,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_85_initRequest,"lime._internal.backend.native.NativeHTTPRequest","initRequest",0x4548d7cf,"lime._internal.backend.native.NativeHTTPRequest.initRequest","lime/_internal/backend/native/NativeHTTPRequest.hx",85,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_279_loadData,"lime._internal.backend.native.NativeHTTPRequest","loadData",0xb40fafc0,"lime._internal.backend.native.NativeHTTPRequest.loadData","lime/_internal/backend/native/NativeHTTPRequest.hx",279,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_351_loadText,"lime._internal.backend.native.NativeHTTPRequest","loadText",0xbea62643,"lime._internal.backend.native.NativeHTTPRequest.loadText","lime/_internal/backend/native/NativeHTTPRequest.hx",351,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_341_loadText,"lime._internal.backend.native.NativeHTTPRequest","loadText",0xbea62643,"lime._internal.backend.native.NativeHTTPRequest.loadText","lime/_internal/backend/native/NativeHTTPRequest.hx",341,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_370_growBuffer,"lime._internal.backend.native.NativeHTTPRequest","growBuffer",0x377519c3,"lime._internal.backend.native.NativeHTTPRequest.growBuffer","lime/_internal/backend/native/NativeHTTPRequest.hx",370,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_388_curl_onHeader,"lime._internal.backend.native.NativeHTTPRequest","curl_onHeader",0xe5ba44af,"lime._internal.backend.native.NativeHTTPRequest.curl_onHeader","lime/_internal/backend/native/NativeHTTPRequest.hx",388,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_401_curl_onProgress,"lime._internal.backend.native.NativeHTTPRequest","curl_onProgress",0xbe43bf4f,"lime._internal.backend.native.NativeHTTPRequest.curl_onProgress","lime/_internal/backend/native/NativeHTTPRequest.hx",401,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_419_curl_onWrite,"lime._internal.backend.native.NativeHTTPRequest","curl_onWrite",0x97fe6bfd,"lime._internal.backend.native.NativeHTTPRequest.curl_onWrite","lime/_internal/backend/native/NativeHTTPRequest.hx",419,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_431_multiTimer_onRun,"lime._internal.backend.native.NativeHTTPRequest","multiTimer_onRun",0xeebe9a89,"lime._internal.backend.native.NativeHTTPRequest.multiTimer_onRun","lime/_internal/backend/native/NativeHTTPRequest.hx",431,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_505_threadPool_doWork,"lime._internal.backend.native.NativeHTTPRequest","threadPool_doWork",0x74d11645,"lime._internal.backend.native.NativeHTTPRequest.threadPool_doWork","lime/_internal/backend/native/NativeHTTPRequest.hx",505,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_550_threadPool_onComplete,"lime._internal.backend.native.NativeHTTPRequest","threadPool_onComplete",0x5df31cc1,"lime._internal.backend.native.NativeHTTPRequest.threadPool_onComplete","lime/_internal/backend/native/NativeHTTPRequest.hx",550,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_571_threadPool_onError,"lime._internal.backend.native.NativeHTTPRequest","threadPool_onError",0xc9f85ac0,"lime._internal.backend.native.NativeHTTPRequest.threadPool_onError","lime/_internal/backend/native/NativeHTTPRequest.hx",571,0xfe6a4b7e)
HX_LOCAL_STACK_FRAME(_hx_pos_11449fe5de606ab4_591_threadPool_onProgress,"lime._internal.backend.native.NativeHTTPRequest","threadPool_onProgress",0x645613b5,"lime._internal.backend.native.NativeHTTPRequest.threadPool_onProgress","lime/_internal/backend/native/NativeHTTPRequest.hx",591,0xfe6a4b7e)
namespace lime{
namespace _internal{
namespace backend{
namespace native{

void NativeHTTPRequest_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_45_new)
HXLINE(  47)		this->curl = null();
HXLINE(  48)		this->timeout = null();
            	}

Dynamic NativeHTTPRequest_obj::__CreateEmpty() { return new NativeHTTPRequest_obj; }

void *NativeHTTPRequest_obj::_hx_vtable = 0;

Dynamic NativeHTTPRequest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeHTTPRequest_obj > _hx_result = new NativeHTTPRequest_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NativeHTTPRequest_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5d9c6164;
}

void NativeHTTPRequest_obj::cancel(){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_53_cancel)
HXLINE(  55)		this->canceled = true;
HXLINE(  57)		bool _hx_tmp = hx::IsNotNull( this->curl );
HXLINE(  68)		if (hx::IsNotNull( this->timeout )) {
HXLINE(  70)			this->timeout->stop();
HXLINE(  71)			this->timeout = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeHTTPRequest_obj,cancel,(void))

void NativeHTTPRequest_obj::init(::Dynamic parent){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_80_init)
HXDLIN(  80)		this->parent = parent;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,init,(void))

void NativeHTTPRequest_obj::initRequest(::String uri,bool binary){
            	HX_GC_STACKFRAME(&_hx_pos_11449fe5de606ab4_85_initRequest)
HXLINE(  87)		this->bytes = ::haxe::io::Bytes_obj::alloc((int)0);
HXLINE(  89)		this->bytesLoaded = (int)0;
HXLINE(  90)		this->bytesTotal = (int)0;
HXLINE(  91)		this->writePosition = (int)0;
HXLINE(  93)		if (hx::IsNull( this->curl )) {
HXLINE(  95)			this->curl =  ::lime::net::curl::CURL_obj::__alloc( HX_CTX ,null());
            		}
            		else {
HXLINE(  99)			this->curl->reset();
            		}
HXLINE( 103)		 ::haxe::io::Bytes data = ( ( ::haxe::io::Bytes)(this->parent->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) );
HXLINE( 104)		::String query = HX_("",00,00,00,00);
HXLINE( 106)		if (hx::IsNull( data )) {
HXLINE( 108)			{
HXLINE( 108)				 ::Dynamic key = ( ( ::haxe::ds::StringMap)( ::Dynamic(this->parent->__Field(HX_("formData",8e,d5,80,56),hx::paccDynamic))) )->keys();
HXDLIN( 108)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 108)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 110)					if ((query.length > (int)0)) {
HXLINE( 110)						query = (query + HX_("&",26,00,00,00));
            					}
HXLINE( 111)					::String query1 = (::StringTools_obj::urlEncode(key1) + HX_("=",3d,00,00,00));
HXDLIN( 111)					query = (query + (query1 + ::StringTools_obj::urlEncode(::Std_obj::string(( ( ::haxe::ds::StringMap)( ::Dynamic(this->parent->__Field(HX_("formData",8e,d5,80,56),hx::paccDynamic))) )->get(key1)))));
            				}
            			}
HXLINE( 115)			if ((query != HX_("",00,00,00,00))) {
HXLINE( 117)				if ((( (::String)(this->parent->__Field(HX_("method",e1,f6,5a,09),hx::paccDynamic)) ) == HX_("GET",76,1c,36,00))) {
HXLINE( 119)					if ((uri.indexOf(HX_("?",3f,00,00,00),null()) > (int)-1)) {
HXLINE( 121)						uri = (uri + (HX_("&",26,00,00,00) + query));
            					}
            					else {
HXLINE( 125)						uri = (uri + (HX_("?",3f,00,00,00) + query));
            					}
HXLINE( 129)					query = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 133)					data = ::haxe::io::Bytes_obj::ofString(query,null());
            				}
            			}
HXLINE( 139)			bool _hx_tmp;
HXDLIN( 139)			if (hx::IsNotNull( data )) {
HXLINE( 139)				_hx_tmp = (data->length == (int)0);
            			}
            			else {
HXLINE( 139)				_hx_tmp = false;
            			}
HXDLIN( 139)			if (_hx_tmp) {
HXLINE( 139)				data = null();
            			}
            		}
HXLINE( 143)		this->curl->setOption((int)10002,uri);
HXLINE( 145)		{
HXLINE( 145)			::String _g = ( (::String)(this->parent->__Field(HX_("method",e1,f6,5a,09),hx::paccDynamic)) );
HXDLIN( 145)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("GET",76,1c,36,00)) ){
HXLINE( 153)				this->curl->setOption((int)80,true);
HXDLIN( 153)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("HEAD",20,f1,cb,2f)) ){
HXLINE( 149)				this->curl->setOption((int)44,true);
HXDLIN( 149)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("POST",60,4c,1d,35)) ){
HXLINE( 157)				this->curl->setOption((int)47,true);
HXLINE( 159)				if (hx::IsNotNull( data )) {
HXLINE( 161)					this->curl->setOption((int)10009,data);
HXLINE( 162)					this->curl->setOption((int)14,data->length);
HXLINE( 163)					this->curl->setOption((int)60,data->length);
            				}
            				else {
HXLINE( 167)					this->curl->setOption((int)60,(int)0);
            				}
HXLINE( 155)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("PUT",af,fe,3c,00)) ){
HXLINE( 173)				this->curl->setOption((int)46,true);
HXLINE( 175)				if (hx::IsNotNull( data )) {
HXLINE( 177)					this->curl->setOption((int)10009,data);
HXLINE( 178)					this->curl->setOption((int)14,data->length);
            				}
HXLINE( 171)				goto _hx_goto_4;
            			}
            			/* default */{
HXLINE( 184)				 ::lime::net::curl::CURL _hx_tmp1 = this->curl;
HXDLIN( 184)				_hx_tmp1->setOption((int)10036,::Std_obj::string( ::Dynamic(this->parent->__Field(HX_("method",e1,f6,5a,09),hx::paccDynamic))));
HXLINE( 186)				if (hx::IsNotNull( data )) {
HXLINE( 188)					this->curl->setOption((int)10009,data);
HXLINE( 189)					this->curl->setOption((int)14,data->length);
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE( 195)		this->curl->setOption((int)52, ::Dynamic(this->parent->__Field(HX_("followRedirects",26,5a,40,75),hx::paccDynamic)));
HXLINE( 196)		this->curl->setOption((int)58,true);
HXLINE( 198)		::Array< ::String > headers = ::Array_obj< ::String >::__new(0);
HXLINE( 199)		headers->push(HX_("Expect: ",df,c4,e1,19));
HXLINE( 201)		::String contentType = null();
HXLINE( 203)		{
HXLINE( 203)			int _g1 = (int)0;
HXDLIN( 203)			::cpp::VirtualArray _g2 = hx::TCast< ::cpp::VirtualArray >::cast(( (::Array< ::Dynamic>)(this->parent->__Field(HX_("headers",46,52,08,63),hx::paccDynamic)) ));
HXDLIN( 203)			while((_g1 < _g2->get_length())){
HXLINE( 203)				 ::Dynamic header = _g2->__get(_g1);
HXDLIN( 203)				_g1 = (_g1 + (int)1);
HXLINE( 205)				if (hx::IsEq(  ::Dynamic(header->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)),HX_("Content-Type",ce,69,5d,3c) )) {
HXLINE( 207)					contentType = ( (::String)(header->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 211)					::String _hx_tmp2 = ((HX_("",00,00,00,00) + ::Std_obj::string( ::Dynamic(header->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)))) + HX_(": ",a6,32,00,00));
HXDLIN( 211)					headers->push((_hx_tmp2 + ::Std_obj::string( ::Dynamic(header->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)))));
            				}
            			}
            		}
HXLINE( 217)		if (hx::IsNotNull( ( (::String)(this->parent->__Field(HX_("contentType",93,3c,7b,2a),hx::paccDynamic)) ) )) {
HXLINE( 219)			contentType = ( (::String)(this->parent->__Field(HX_("contentType",93,3c,7b,2a),hx::paccDynamic)) );
            		}
HXLINE( 223)		if (hx::IsNull( contentType )) {
HXLINE( 225)			if (hx::IsNotNull( ( ( ::haxe::io::Bytes)(this->parent->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) ) )) {
HXLINE( 227)				contentType = HX_("application/octet-stream",5d,f8,82,30);
            			}
            			else {
HXLINE( 229)				if ((query != HX_("",00,00,00,00))) {
HXLINE( 231)					contentType = HX_("application/x-www-form-urlencoded",9e,61,91,fa);
            				}
            			}
            		}
HXLINE( 237)		if (hx::IsNotNull( contentType )) {
HXLINE( 239)			headers->push((HX_("Content-Type: ",f4,2b,e6,1d) + contentType));
            		}
HXLINE( 243)		this->curl->setOption((int)10023,headers);
HXLINE( 245)		this->curl->setOption((int)20056,this->curl_onProgress_dyn());
HXLINE( 246)		this->curl->setOption((int)20011,this->curl_onWrite_dyn());
HXLINE( 248)		if (( (bool)(this->parent->__Field(HX_("enableResponseHeaders",82,32,47,05),hx::paccDynamic)) )) {
HXLINE( 250)			this->parent->__SetField(HX_("responseHeaders",c5,0d,ca,43),::Array_obj< ::Dynamic>::__new(0),hx::paccDynamic);
HXLINE( 251)			this->curl->setOption((int)20079,this->curl_onHeader_dyn());
            		}
HXLINE( 257)		bool _hx_tmp3 = ( (bool)(this->parent->__Field(HX_("withCredentials",56,86,c4,ca),hx::paccDynamic)) );
HXLINE( 263)		this->curl->setOption((int)64,false);
HXLINE( 264)		this->curl->setOption((int)81,(int)0);
HXLINE( 265)		 ::Dynamic _hx_tmp4;
HXDLIN( 265)		if (hx::IsNull( ( (::String)(this->parent->__Field(HX_("userAgent",7a,f0,12,c8),hx::paccDynamic)) ) )) {
HXLINE( 265)			_hx_tmp4 = HX_("libcurl-agent/1.0",4d,41,cc,d3);
            		}
            		else {
HXLINE( 265)			_hx_tmp4 =  ::Dynamic(this->parent->__Field(HX_("userAgent",7a,f0,12,c8),hx::paccDynamic));
            		}
HXDLIN( 265)		this->curl->setOption((int)10018,_hx_tmp4);
HXLINE( 268)		this->curl->setOption((int)99,true);
HXLINE( 270)		this->curl->setOption((int)53,!(binary));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeHTTPRequest_obj,initRequest,(void))

 ::lime::app::Future NativeHTTPRequest_obj::loadData(::String uri,hx::Null< bool >  __o_binary){
bool binary = __o_binary.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_11449fe5de606ab4_279_loadData)
HXLINE( 281)		if (hx::IsNull( uri )) {
HXLINE( 283)			return ::lime::app::Future_obj::withError(HX_("The URI must not be null",e3,4c,b6,a7));
            		}
HXLINE( 287)		 ::lime::app::Promise_haxe_io_Bytes promise =  ::lime::app::Promise_haxe_io_Bytes_obj::__alloc( HX_CTX );
HXLINE( 288)		this->promise = promise;
HXLINE( 290)		this->canceled = false;
HXLINE( 292)		bool _hx_tmp;
HXDLIN( 292)		if ((uri.indexOf(HX_("http://",52,75,cd,5a),null()) == (int)-1)) {
HXLINE( 292)			_hx_tmp = (uri.indexOf(HX_("https://",cf,b4,ae,3e),null()) == (int)-1);
            		}
            		else {
HXLINE( 292)			_hx_tmp = false;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 294)			if (hx::IsNull( ::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool )) {
HXLINE( 296)				::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool =  ::lime::_hx_system::ThreadPool_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXLINE( 297)				::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool->doWork->add(::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool_doWork_dyn(),null(),null());
HXLINE( 298)				::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool->onProgress->add(::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool_onProgress_dyn(),null(),null());
HXLINE( 299)				::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool->onComplete->add(::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool_onComplete_dyn(),null(),null());
HXLINE( 300)				::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool->onError->add(::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool_onError_dyn(),null(),null());
            			}
HXLINE( 304)			::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool->queue( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("uri",6c,2b,59,00),uri)
            				->setFixed(1,HX_("instance",95,1f,e1,59),hx::ObjectPtr<OBJ_>(this))));
            		}
            		else {
HXLINE( 308)			if (hx::IsNull( ::lime::_internal::backend::native::NativeHTTPRequest_obj::multi )) {
HXLINE( 310)				::lime::net::curl::CURL_obj::globalInit((int)3);
HXLINE( 312)				::lime::_internal::backend::native::NativeHTTPRequest_obj::multi =  ::lime::net::curl::CURLMulti_obj::__alloc( HX_CTX ,null());
HXLINE( 313)				::lime::_internal::backend::native::NativeHTTPRequest_obj::multiInstances =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 317)			this->initRequest(uri,binary);
HXLINE( 319)			if (hx::IsNotNull( this->curl )) {
HXLINE( 321)				::lime::_internal::backend::native::NativeHTTPRequest_obj::multiInstances->set(this->curl,hx::ObjectPtr<OBJ_>(this));
HXLINE( 322)				::lime::_internal::backend::native::NativeHTTPRequest_obj::multi->addHandle(this->curl);
HXLINE( 324)				if (hx::IsNull( ::lime::_internal::backend::native::NativeHTTPRequest_obj::multiTimer )) {
HXLINE( 326)					::lime::_internal::backend::native::NativeHTTPRequest_obj::multiTimer =  ::haxe::Timer_obj::__alloc( HX_CTX ,(int)14);
HXLINE( 327)					::lime::_internal::backend::native::NativeHTTPRequest_obj::multiTimer->run = ::lime::_internal::backend::native::NativeHTTPRequest_obj::multiTimer_onRun_dyn();
HXLINE( 328)					::lime::_internal::backend::native::NativeHTTPRequest_obj::multiTimer_onRun();
            				}
            			}
            		}
HXLINE( 336)		return promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeHTTPRequest_obj,loadData,return )

 ::lime::app::Future NativeHTTPRequest_obj::loadText(::String uri){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::lime::app::Promise_String,promise) HXARGC(1)
            		void _hx_run( ::haxe::io::Bytes bytes){
            			HX_GC_STACKFRAME(&_hx_pos_11449fe5de606ab4_351_loadText)
HXLINE( 351)			if (hx::IsNull( bytes )) {
HXLINE( 353)				promise->complete(null());
            			}
            			else {
HXLINE( 357)				::String _hx_tmp = bytes->getString((int)0,bytes->length,null());
HXDLIN( 357)				promise->complete(_hx_tmp);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_11449fe5de606ab4_341_loadText)
HXLINE( 343)		 ::lime::app::Promise_String promise =  ::lime::app::Promise_String_obj::__alloc( HX_CTX );
HXLINE( 344)		 ::lime::app::Future future = this->loadData(uri,false);
HXLINE( 346)		future->onProgress(promise->progress_dyn());
HXLINE( 347)		future->onError(promise->error_dyn());
HXLINE( 349)		future->onComplete( ::Dynamic(new _hx_Closure_0(promise)));
HXLINE( 363)		return promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,loadText,return )

void NativeHTTPRequest_obj::growBuffer(int length){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_370_growBuffer)
HXDLIN( 370)		if ((length > this->bytes->length)) {
HXLINE( 372)			 ::haxe::io::Bytes cacheBytes = this->bytes;
HXLINE( 373)			this->bytes = ::haxe::io::Bytes_obj::alloc(length);
HXLINE( 374)			this->bytes->blit((int)0,cacheBytes,(int)0,cacheBytes->length);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,growBuffer,(void))

void NativeHTTPRequest_obj::curl_onHeader( ::lime::net::curl::CURL curl,::String header){
            	HX_GC_STACKFRAME(&_hx_pos_11449fe5de606ab4_388_curl_onHeader)
HXLINE( 390)		::Array< ::String > parts = header.split(HX_(": ",a6,32,00,00));
HXLINE( 392)		if ((parts->length == (int)2)) {
HXLINE( 394)			::Array< ::Dynamic> _hx_tmp = ( (::Array< ::Dynamic>)(this->parent->__Field(HX_("responseHeaders",c5,0d,ca,43),hx::paccDynamic)) );
HXDLIN( 394)			::String _hx_tmp1 = ::StringTools_obj::trim(parts->__get((int)0));
HXDLIN( 394)			_hx_tmp->push( ::lime::net::HTTPRequestHeader_obj::__alloc( HX_CTX ,_hx_tmp1,::StringTools_obj::trim(parts->__get((int)1))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeHTTPRequest_obj,curl_onHeader,(void))

int NativeHTTPRequest_obj::curl_onProgress( ::lime::net::curl::CURL curl,int dltotal,int dlnow,int uptotal,int upnow){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_401_curl_onProgress)
HXLINE( 403)		bool _hx_tmp;
HXDLIN( 403)		bool _hx_tmp1;
HXDLIN( 403)		bool _hx_tmp2;
HXDLIN( 403)		if ((upnow <= this->bytesLoaded)) {
HXLINE( 403)			_hx_tmp2 = (dlnow > this->bytesLoaded);
            		}
            		else {
HXLINE( 403)			_hx_tmp2 = true;
            		}
HXDLIN( 403)		if (!(_hx_tmp2)) {
HXLINE( 403)			_hx_tmp1 = (uptotal > this->bytesTotal);
            		}
            		else {
HXLINE( 403)			_hx_tmp1 = true;
            		}
HXDLIN( 403)		if (!(_hx_tmp1)) {
HXLINE( 403)			_hx_tmp = (dltotal > this->bytesTotal);
            		}
            		else {
HXLINE( 403)			_hx_tmp = true;
            		}
HXDLIN( 403)		if (_hx_tmp) {
HXLINE( 405)			if ((upnow > this->bytesLoaded)) {
HXLINE( 405)				this->bytesLoaded = upnow;
            			}
HXLINE( 406)			if ((dlnow > this->bytesLoaded)) {
HXLINE( 406)				this->bytesLoaded = dlnow;
            			}
HXLINE( 407)			if ((uptotal > this->bytesTotal)) {
HXLINE( 407)				this->bytesTotal = uptotal;
            			}
HXLINE( 408)			if ((dltotal > this->bytesTotal)) {
HXLINE( 408)				this->bytesTotal = dltotal;
            			}
HXLINE( 410)			this->promise->progress(this->bytesLoaded,this->bytesTotal);
            		}
HXLINE( 414)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC5(NativeHTTPRequest_obj,curl_onProgress,return )

int NativeHTTPRequest_obj::curl_onWrite( ::lime::net::curl::CURL curl, ::haxe::io::Bytes output){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_419_curl_onWrite)
HXLINE( 421)		this->growBuffer((this->writePosition + output->length));
HXLINE( 422)		this->bytes->blit(this->writePosition,output,(int)0,output->length);
HXLINE( 424)		 ::lime::_internal::backend::native::NativeHTTPRequest _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 424)		_hx_tmp->writePosition = (_hx_tmp->writePosition + output->length);
HXLINE( 426)		return output->length;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeHTTPRequest_obj,curl_onWrite,return )

 ::lime::net::curl::CURLMulti NativeHTTPRequest_obj::multi;

 ::haxe::ds::ObjectMap NativeHTTPRequest_obj::multiInstances;

 ::haxe::Timer NativeHTTPRequest_obj::multiTimer;

 ::lime::_hx_system::ThreadPool NativeHTTPRequest_obj::threadPool;

void NativeHTTPRequest_obj::multiTimer_onRun(){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_431_multiTimer_onRun)
HXLINE( 433)		::lime::_internal::backend::native::NativeHTTPRequest_obj::multi->perform();
HXLINE( 435)		 ::lime::net::curl::CURLMultiMessage message = ::lime::_internal::backend::native::NativeHTTPRequest_obj::multi->infoRead();
HXLINE( 436)		 ::lime::net::curl::CURL curl;
HXDLIN( 436)		 ::lime::_internal::backend::native::NativeHTTPRequest instance;
HXDLIN( 436)		int status;
HXLINE( 438)		bool _hx_tmp;
HXDLIN( 438)		if (hx::IsNull( message )) {
HXLINE( 438)			_hx_tmp = (::lime::_internal::backend::native::NativeHTTPRequest_obj::multi->get_runningHandles() == (int)0);
            		}
            		else {
HXLINE( 438)			_hx_tmp = false;
            		}
HXDLIN( 438)		if (_hx_tmp) {
HXLINE( 440)			::lime::_internal::backend::native::NativeHTTPRequest_obj::multiTimer->stop();
HXLINE( 441)			::lime::_internal::backend::native::NativeHTTPRequest_obj::multiTimer = null();
            		}
HXLINE( 445)		while(hx::IsNotNull( message )){
HXLINE( 447)			curl = message->curl;
HXLINE( 449)			if (::lime::_internal::backend::native::NativeHTTPRequest_obj::multiInstances->exists(curl)) {
HXLINE( 451)				instance = ::lime::_internal::backend::native::NativeHTTPRequest_obj::multiInstances->get(curl).StaticCast<  ::lime::_internal::backend::native::NativeHTTPRequest >();
HXLINE( 452)				::lime::_internal::backend::native::NativeHTTPRequest_obj::multiInstances->remove(curl);
HXLINE( 454)				status = ( (int)(curl->getInfo((int)2097154)) );
HXLINE( 455)				instance->parent->__SetField(HX_("responseStatus",93,60,a4,78),status,hx::paccDynamic);
HXLINE( 457)				curl->cleanup();
HXLINE( 458)				curl = null();
HXLINE( 460)				if ((message->result == (int)0)) {
HXLINE( 462)					bool _hx_tmp1;
HXDLIN( 462)					bool _hx_tmp2;
HXDLIN( 462)					if ((status >= (int)200)) {
HXLINE( 462)						_hx_tmp2 = (status < (int)400);
            					}
            					else {
HXLINE( 462)						_hx_tmp2 = false;
            					}
HXDLIN( 462)					if (!(_hx_tmp2)) {
HXLINE( 462)						_hx_tmp1 = (status == (int)0);
            					}
            					else {
HXLINE( 462)						_hx_tmp1 = true;
            					}
HXDLIN( 462)					if (_hx_tmp1) {
HXLINE( 464)						if (!(instance->promise->get_isError())) {
HXLINE( 466)							instance->promise->complete(instance->bytes);
            						}
            					}
            					else {
HXLINE( 470)						if (hx::IsNotNull( instance->bytes )) {
HXLINE( 472)							 ::lime::app::Promise_haxe_io_Bytes instance1 = instance->promise;
HXDLIN( 472)							instance1->error(instance->bytes->getString((int)0,instance->bytes->length,null()));
            						}
            						else {
HXLINE( 476)							 ::lime::app::Promise_haxe_io_Bytes instance2 = instance->promise;
HXDLIN( 476)							instance2->error((HX_("Status ",8e,8c,bf,03) + status));
            						}
            					}
            				}
            				else {
HXLINE( 482)					 ::lime::app::Promise_haxe_io_Bytes instance3 = instance->promise;
HXDLIN( 482)					instance3->error(::lime::net::curl::CURL_obj::strerror(message->result));
            				}
HXLINE( 486)				if (hx::IsNotNull( instance->timeout )) {
HXLINE( 488)					instance->timeout->stop();
HXLINE( 489)					instance->timeout = null();
            				}
HXLINE( 493)				instance->bytes = null();
HXLINE( 494)				instance->promise = null();
            			}
HXLINE( 498)			message = ::lime::_internal::backend::native::NativeHTTPRequest_obj::multi->infoRead();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NativeHTTPRequest_obj,multiTimer_onRun,(void))

void NativeHTTPRequest_obj::threadPool_doWork( ::Dynamic state){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_505_threadPool_doWork)
HXLINE( 507)		 ::lime::_internal::backend::native::NativeHTTPRequest instance = ( ( ::lime::_internal::backend::native::NativeHTTPRequest)(state->__Field(HX_("instance",95,1f,e1,59),hx::paccDynamic)) );
HXLINE( 508)		::String path = ( (::String)(state->__Field(HX_("uri",6c,2b,59,00),hx::paccDynamic)) );
HXLINE( 510)		int index = path.indexOf(HX_("?",3f,00,00,00),null());
HXLINE( 512)		if ((index > (int)-1)) {
HXLINE( 514)			path = path.substring((int)0,index);
            		}
HXLINE( 526)		bool _hx_tmp;
HXDLIN( 526)		if (hx::IsNotNull( path )) {
HXLINE( 526)			_hx_tmp = !(::sys::FileSystem_obj::exists(path));
            		}
            		else {
HXLINE( 526)			_hx_tmp = true;
            		}
HXDLIN( 526)		if (_hx_tmp) {
HXLINE( 528)			 ::lime::app::Promise_haxe_io_Bytes instance1 = instance->promise;
HXDLIN( 528)			::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool->sendError( ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("promise",9b,cd,e9,f7),instance1)
            				->setFixed(1,HX_("instance",95,1f,e1,59),instance)
            				->setFixed(2,HX_("error",c8,cb,29,73),(HX_("Cannot load file: ",5f,26,cd,00) + path))));
            		}
            		else {
HXLINE( 532)			instance->bytes = ::lime::utils::_Bytes::Bytes_Impl__obj::fromFile(path);
HXLINE( 534)			if (hx::IsNotNull( instance->bytes )) {
HXLINE( 536)				::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool->sendProgress( ::Dynamic(hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("bytesLoaded",d0,66,ca,99),instance->bytes->length)
            					->setFixed(1,HX_("promise",9b,cd,e9,f7),instance->promise)
            					->setFixed(2,HX_("bytesTotal",59,57,da,45),instance->bytes->length)
            					->setFixed(3,HX_("instance",95,1f,e1,59),instance)));
HXLINE( 537)				::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool->sendComplete( ::Dynamic(hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("promise",9b,cd,e9,f7),instance->promise)
            					->setFixed(1,HX_("result",dd,68,84,08),instance->bytes)
            					->setFixed(2,HX_("instance",95,1f,e1,59),instance)));
            			}
            			else {
HXLINE( 541)				 ::lime::app::Promise_haxe_io_Bytes instance2 = instance->promise;
HXDLIN( 541)				::lime::_internal::backend::native::NativeHTTPRequest_obj::threadPool->sendError( ::Dynamic(hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("promise",9b,cd,e9,f7),instance2)
            					->setFixed(1,HX_("instance",95,1f,e1,59),instance)
            					->setFixed(2,HX_("error",c8,cb,29,73),(HX_("Cannot load file: ",5f,26,cd,00) + path))));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,threadPool_doWork,(void))

void NativeHTTPRequest_obj::threadPool_onComplete( ::Dynamic state){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_550_threadPool_onComplete)
HXLINE( 552)		 ::lime::app::Promise_haxe_io_Bytes promise = ( ( ::lime::app::Promise_haxe_io_Bytes)(state->__Field(HX_("promise",9b,cd,e9,f7),hx::paccDynamic)) );
HXLINE( 553)		if (promise->get_isError()) {
HXLINE( 553)			return;
            		}
HXLINE( 554)		promise->complete(( ( ::haxe::io::Bytes)(state->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) ));
HXLINE( 556)		 ::Dynamic instance = state->__Field(HX_("instance",95,1f,e1,59),hx::paccDynamic);
HXLINE( 558)		if (hx::IsNotNull( instance->__Field(HX_("timeout",a1,1a,f7,d8),hx::paccDynamic) )) {
HXLINE( 560)			 ::Dynamic(instance->__Field(HX_("timeout",a1,1a,f7,d8),hx::paccDynamic))->__Field(HX_("stop",02,f0,5b,4c),hx::paccDynamic)();
HXLINE( 561)			instance->__SetField(HX_("timeout",a1,1a,f7,d8),null(),hx::paccDynamic);
            		}
HXLINE( 565)		instance->__SetField(HX_("bytes",6b,08,98,bd),null(),hx::paccDynamic);
HXLINE( 566)		instance->__SetField(HX_("promise",9b,cd,e9,f7),null(),hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,threadPool_onComplete,(void))

void NativeHTTPRequest_obj::threadPool_onError( ::Dynamic state){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_571_threadPool_onError)
HXLINE( 573)		 ::lime::app::Promise_haxe_io_Bytes promise = ( ( ::lime::app::Promise_haxe_io_Bytes)(state->__Field(HX_("promise",9b,cd,e9,f7),hx::paccDynamic)) );
HXLINE( 574)		promise->error( ::Dynamic(state->__Field(HX_("error",c8,cb,29,73),hx::paccDynamic)));
HXLINE( 576)		 ::Dynamic instance = state->__Field(HX_("instance",95,1f,e1,59),hx::paccDynamic);
HXLINE( 578)		if (hx::IsNotNull( instance->__Field(HX_("timeout",a1,1a,f7,d8),hx::paccDynamic) )) {
HXLINE( 580)			 ::Dynamic(instance->__Field(HX_("timeout",a1,1a,f7,d8),hx::paccDynamic))->__Field(HX_("stop",02,f0,5b,4c),hx::paccDynamic)();
HXLINE( 581)			instance->__SetField(HX_("timeout",a1,1a,f7,d8),null(),hx::paccDynamic);
            		}
HXLINE( 585)		instance->__SetField(HX_("bytes",6b,08,98,bd),null(),hx::paccDynamic);
HXLINE( 586)		instance->__SetField(HX_("promise",9b,cd,e9,f7),null(),hx::paccDynamic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,threadPool_onError,(void))

void NativeHTTPRequest_obj::threadPool_onProgress( ::Dynamic state){
            	HX_STACKFRAME(&_hx_pos_11449fe5de606ab4_591_threadPool_onProgress)
HXLINE( 593)		 ::lime::app::Promise_haxe_io_Bytes promise = ( ( ::lime::app::Promise_haxe_io_Bytes)(state->__Field(HX_("promise",9b,cd,e9,f7),hx::paccDynamic)) );
HXLINE( 594)		bool _hx_tmp;
HXDLIN( 594)		if (!(promise->get_isComplete())) {
HXLINE( 594)			_hx_tmp = promise->get_isError();
            		}
            		else {
HXLINE( 594)			_hx_tmp = true;
            		}
HXDLIN( 594)		if (_hx_tmp) {
HXLINE( 594)			return;
            		}
HXLINE( 595)		promise->progress(( (int)(state->__Field(HX_("bytesLoaded",d0,66,ca,99),hx::paccDynamic)) ),( (int)(state->__Field(HX_("bytesTotal",59,57,da,45),hx::paccDynamic)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,threadPool_onProgress,(void))


hx::ObjectPtr< NativeHTTPRequest_obj > NativeHTTPRequest_obj::__new() {
	hx::ObjectPtr< NativeHTTPRequest_obj > __this = new NativeHTTPRequest_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< NativeHTTPRequest_obj > NativeHTTPRequest_obj::__alloc(hx::Ctx *_hx_ctx) {
	NativeHTTPRequest_obj *__this = (NativeHTTPRequest_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NativeHTTPRequest_obj), true, "lime._internal.backend.native.NativeHTTPRequest"));
	*(void **)__this = NativeHTTPRequest_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

NativeHTTPRequest_obj::NativeHTTPRequest_obj()
{
}

void NativeHTTPRequest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeHTTPRequest);
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	HX_MARK_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_MARK_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_MARK_MEMBER_NAME(canceled,"canceled");
	HX_MARK_MEMBER_NAME(curl,"curl");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(promise,"promise");
	HX_MARK_MEMBER_NAME(writePosition,"writePosition");
	HX_MARK_MEMBER_NAME(timeout,"timeout");
	HX_MARK_END_CLASS();
}

void NativeHTTPRequest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
	HX_VISIT_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_VISIT_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_VISIT_MEMBER_NAME(canceled,"canceled");
	HX_VISIT_MEMBER_NAME(curl,"curl");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(promise,"promise");
	HX_VISIT_MEMBER_NAME(writePosition,"writePosition");
	HX_VISIT_MEMBER_NAME(timeout,"timeout");
}

hx::Val NativeHTTPRequest_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"curl") ) { return hx::Val( curl ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { return hx::Val( bytes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return hx::Val( cancel_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"promise") ) { return hx::Val( promise ); }
		if (HX_FIELD_EQ(inName,"timeout") ) { return hx::Val( timeout ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canceled") ) { return hx::Val( canceled ); }
		if (HX_FIELD_EQ(inName,"loadData") ) { return hx::Val( loadData_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadText") ) { return hx::Val( loadText_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return hx::Val( bytesTotal ); }
		if (HX_FIELD_EQ(inName,"growBuffer") ) { return hx::Val( growBuffer_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return hx::Val( bytesLoaded ); }
		if (HX_FIELD_EQ(inName,"initRequest") ) { return hx::Val( initRequest_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curl_onWrite") ) { return hx::Val( curl_onWrite_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"writePosition") ) { return hx::Val( writePosition ); }
		if (HX_FIELD_EQ(inName,"curl_onHeader") ) { return hx::Val( curl_onHeader_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curl_onProgress") ) { return hx::Val( curl_onProgress_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NativeHTTPRequest_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"multi") ) { outValue = ( multi ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"multiTimer") ) { outValue = ( multiTimer ); return true; }
		if (HX_FIELD_EQ(inName,"threadPool") ) { outValue = ( threadPool ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"multiInstances") ) { outValue = ( multiInstances ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"multiTimer_onRun") ) { outValue = multiTimer_onRun_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"threadPool_doWork") ) { outValue = threadPool_doWork_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"threadPool_onError") ) { outValue = threadPool_onError_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"threadPool_onComplete") ) { outValue = threadPool_onComplete_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"threadPool_onProgress") ) { outValue = threadPool_onProgress_dyn(); return true; }
	}
	return false;
}

hx::Val NativeHTTPRequest_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"curl") ) { curl=inValue.Cast<  ::lime::net::curl::CURL >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { bytes=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"promise") ) { promise=inValue.Cast<  ::lime::app::Promise_haxe_io_Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeout") ) { timeout=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canceled") ) { canceled=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"writePosition") ) { writePosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool NativeHTTPRequest_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"multi") ) { multi=ioValue.Cast<  ::lime::net::curl::CURLMulti >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"multiTimer") ) { multiTimer=ioValue.Cast<  ::haxe::Timer >(); return true; }
		if (HX_FIELD_EQ(inName,"threadPool") ) { threadPool=ioValue.Cast<  ::lime::_hx_system::ThreadPool >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"multiInstances") ) { multiInstances=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
	}
	return false;
}

void NativeHTTPRequest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"));
	outFields->push(HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"));
	outFields->push(HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"));
	outFields->push(HX_HCSTRING("canceled","\x59","\x18","\x26","\x1f"));
	outFields->push(HX_HCSTRING("curl","\xec","\x4a","\xc9","\x41"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"));
	outFields->push(HX_HCSTRING("writePosition","\xa8","\x40","\x9c","\x8e"));
	outFields->push(HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeHTTPRequest_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(NativeHTTPRequest_obj,bytes),HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd")},
	{hx::fsInt,(int)offsetof(NativeHTTPRequest_obj,bytesLoaded),HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99")},
	{hx::fsInt,(int)offsetof(NativeHTTPRequest_obj,bytesTotal),HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45")},
	{hx::fsBool,(int)offsetof(NativeHTTPRequest_obj,canceled),HX_HCSTRING("canceled","\x59","\x18","\x26","\x1f")},
	{hx::fsObject /*::lime::net::curl::CURL*/ ,(int)offsetof(NativeHTTPRequest_obj,curl),HX_HCSTRING("curl","\xec","\x4a","\xc9","\x41")},
	{hx::fsObject /*::lime::net::_IHTTPRequest*/ ,(int)offsetof(NativeHTTPRequest_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::lime::app::Promise_haxe_io_Bytes*/ ,(int)offsetof(NativeHTTPRequest_obj,promise),HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7")},
	{hx::fsInt,(int)offsetof(NativeHTTPRequest_obj,writePosition),HX_HCSTRING("writePosition","\xa8","\x40","\x9c","\x8e")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(NativeHTTPRequest_obj,timeout),HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo NativeHTTPRequest_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::net::curl::CURLMulti*/ ,(void *) &NativeHTTPRequest_obj::multi,HX_HCSTRING("multi","\x79","\x8a","\x55","\x10")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(void *) &NativeHTTPRequest_obj::multiInstances,HX_HCSTRING("multiInstances","\x85","\x41","\xc9","\xb1")},
	{hx::fsObject /*::haxe::Timer*/ ,(void *) &NativeHTTPRequest_obj::multiTimer,HX_HCSTRING("multiTimer","\x8c","\x0e","\xe8","\xdf")},
	{hx::fsObject /*::lime::_hx_system::ThreadPool*/ ,(void *) &NativeHTTPRequest_obj::threadPool,HX_HCSTRING("threadPool","\xc6","\x54","\x25","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String NativeHTTPRequest_obj_sMemberFields[] = {
	HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"),
	HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"),
	HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"),
	HX_HCSTRING("canceled","\x59","\x18","\x26","\x1f"),
	HX_HCSTRING("curl","\xec","\x4a","\xc9","\x41"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"),
	HX_HCSTRING("writePosition","\xa8","\x40","\x9c","\x8e"),
	HX_HCSTRING("timeout","\xa1","\x1a","\xf7","\xd8"),
	HX_HCSTRING("cancel","\x7a","\xed","\x33","\xb8"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("initRequest","\x1f","\x4e","\xef","\xfc"),
	HX_HCSTRING("loadData","\x70","\x27","\x03","\xb3"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("growBuffer","\x73","\xdd","\xf9","\x73"),
	HX_HCSTRING("curl_onHeader","\xff","\xee","\xa6","\xac"),
	HX_HCSTRING("curl_onProgress","\x9f","\x9d","\x6b","\x99"),
	HX_HCSTRING("curl_onWrite","\xad","\x7b","\xff","\x91"),
	::String(null()) };

static void NativeHTTPRequest_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeHTTPRequest_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NativeHTTPRequest_obj::multi,"multi");
	HX_MARK_MEMBER_NAME(NativeHTTPRequest_obj::multiInstances,"multiInstances");
	HX_MARK_MEMBER_NAME(NativeHTTPRequest_obj::multiTimer,"multiTimer");
	HX_MARK_MEMBER_NAME(NativeHTTPRequest_obj::threadPool,"threadPool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeHTTPRequest_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeHTTPRequest_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NativeHTTPRequest_obj::multi,"multi");
	HX_VISIT_MEMBER_NAME(NativeHTTPRequest_obj::multiInstances,"multiInstances");
	HX_VISIT_MEMBER_NAME(NativeHTTPRequest_obj::multiTimer,"multiTimer");
	HX_VISIT_MEMBER_NAME(NativeHTTPRequest_obj::threadPool,"threadPool");
};

#endif

hx::Class NativeHTTPRequest_obj::__mClass;

static ::String NativeHTTPRequest_obj_sStaticFields[] = {
	HX_HCSTRING("multi","\x79","\x8a","\x55","\x10"),
	HX_HCSTRING("multiInstances","\x85","\x41","\xc9","\xb1"),
	HX_HCSTRING("multiTimer","\x8c","\x0e","\xe8","\xdf"),
	HX_HCSTRING("threadPool","\xc6","\x54","\x25","\x46"),
	HX_HCSTRING("multiTimer_onRun","\x39","\x42","\x79","\xd6"),
	HX_HCSTRING("threadPool_doWork","\x95","\x28","\x69","\x50"),
	HX_HCSTRING("threadPool_onComplete","\x11","\x97","\x0a","\x2c"),
	HX_HCSTRING("threadPool_onError","\x70","\x4e","\x70","\x13"),
	HX_HCSTRING("threadPool_onProgress","\x05","\x8e","\x6d","\x32"),
	::String(null())
};

void NativeHTTPRequest_obj::__register()
{
	hx::Object *dummy = new NativeHTTPRequest_obj;
	NativeHTTPRequest_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._internal.backend.native.NativeHTTPRequest","\x1e","\x22","\xba","\x0b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NativeHTTPRequest_obj::__GetStatic;
	__mClass->mSetStaticField = &NativeHTTPRequest_obj::__SetStatic;
	__mClass->mMarkFunc = NativeHTTPRequest_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NativeHTTPRequest_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeHTTPRequest_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeHTTPRequest_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeHTTPRequest_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeHTTPRequest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeHTTPRequest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace backend
} // end namespace native
