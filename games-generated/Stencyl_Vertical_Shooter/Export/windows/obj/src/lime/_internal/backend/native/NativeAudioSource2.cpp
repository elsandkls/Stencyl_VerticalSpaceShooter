// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource2
#include <lime/_internal/backend/native/NativeAudioSource2.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSourceImpl
#include <lime/_internal/backend/native/NativeAudioSourceImpl.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_media_vorbis_VorbisFile
#include <lime/media/vorbis/VorbisFile.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_26_new,"lime._internal.backend.native.NativeAudioSource2","new",0x29d8e97c,"lime._internal.backend.native.NativeAudioSource2.new","lime/_internal/backend/native/NativeAudioSource2.hx",26,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_53_init,"lime._internal.backend.native.NativeAudioSource2","init",0x70ac1a74,"lime._internal.backend.native.NativeAudioSource2.init","lime/_internal/backend/native/NativeAudioSource2.hx",53,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_83_dispose,"lime._internal.backend.native.NativeAudioSource2","dispose",0xaf0a57bb,"lime._internal.backend.native.NativeAudioSource2.dispose","lime/_internal/backend/native/NativeAudioSource2.hx",83,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_112_update,"lime._internal.backend.native.NativeAudioSource2","update",0xf778066d,"lime._internal.backend.native.NativeAudioSource2.update","lime/_internal/backend/native/NativeAudioSource2.hx",112,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_172_play,"lime._internal.backend.native.NativeAudioSource2","play",0x754b0d58,"lime._internal.backend.native.NativeAudioSource2.play","lime/_internal/backend/native/NativeAudioSource2.hx",172,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_182_pause,"lime._internal.backend.native.NativeAudioSource2","pause",0x252a6f12,"lime._internal.backend.native.NativeAudioSource2.pause","lime/_internal/backend/native/NativeAudioSource2.hx",182,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_191_stop,"lime._internal.backend.native.NativeAudioSource2","stop",0x774ccf66,"lime._internal.backend.native.NativeAudioSource2.stop","lime/_internal/backend/native/NativeAudioSource2.hx",191,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_200_initHandle,"lime._internal.backend.native.NativeAudioSource2","initHandle",0x2c07613c,"lime._internal.backend.native.NativeAudioSource2.initHandle","lime/_internal/backend/native/NativeAudioSource2.hx",200,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_218_initBuffers,"lime._internal.backend.native.NativeAudioSource2","initBuffers",0xc628a75f,"lime._internal.backend.native.NativeAudioSource2.initBuffers","lime/_internal/backend/native/NativeAudioSource2.hx",218,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_227_fillBuffer,"lime._internal.backend.native.NativeAudioSource2","fillBuffer",0x43f3c647,"lime._internal.backend.native.NativeAudioSource2.fillBuffer","lime/_internal/backend/native/NativeAudioSource2.hx",227,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_241_flushBuffers,"lime._internal.backend.native.NativeAudioSource2","flushBuffers",0x3baaec73,"lime._internal.backend.native.NativeAudioSource2.flushBuffers","lime/_internal/backend/native/NativeAudioSource2.hx",241,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_251_error,"lime._internal.backend.native.NativeAudioSource2","error",0xdafc63e4,"lime._internal.backend.native.NativeAudioSource2.error","lime/_internal/backend/native/NativeAudioSource2.hx",251,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_259_seek,"lime._internal.backend.native.NativeAudioSource2","seek",0x774164dc,"lime._internal.backend.native.NativeAudioSource2.seek","lime/_internal/backend/native/NativeAudioSource2.hx",259,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_263_bytesToSeconds,"lime._internal.backend.native.NativeAudioSource2","bytesToSeconds",0xfb7b64bd,"lime._internal.backend.native.NativeAudioSource2.bytesToSeconds","lime/_internal/backend/native/NativeAudioSource2.hx",263,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_267_secondsToBytes,"lime._internal.backend.native.NativeAudioSource2","secondsToBytes",0xa2e8a895,"lime._internal.backend.native.NativeAudioSource2.secondsToBytes","lime/_internal/backend/native/NativeAudioSource2.hx",267,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_270_readVorbisFile,"lime._internal.backend.native.NativeAudioSource2","readVorbisFile",0x984c3ec9,"lime._internal.backend.native.NativeAudioSource2.readVorbisFile","lime/_internal/backend/native/NativeAudioSource2.hx",270,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_294_getCurrentTime,"lime._internal.backend.native.NativeAudioSource2","getCurrentTime",0x5a6c7c54,"lime._internal.backend.native.NativeAudioSource2.getCurrentTime","lime/_internal/backend/native/NativeAudioSource2.hx",294,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_299_setCurrentTime,"lime._internal.backend.native.NativeAudioSource2","setCurrentTime",0x7a8c64c8,"lime._internal.backend.native.NativeAudioSource2.setCurrentTime","lime/_internal/backend/native/NativeAudioSource2.hx",299,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_318_getGain,"lime._internal.backend.native.NativeAudioSource2","getGain",0x0a9f7751,"lime._internal.backend.native.NativeAudioSource2.getGain","lime/_internal/backend/native/NativeAudioSource2.hx",318,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_326_setGain,"lime._internal.backend.native.NativeAudioSource2","setGain",0xfda1085d,"lime._internal.backend.native.NativeAudioSource2.setGain","lime/_internal/backend/native/NativeAudioSource2.hx",326,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_335_getLength,"lime._internal.backend.native.NativeAudioSource2","getLength",0xdb94f438,"lime._internal.backend.native.NativeAudioSource2.getLength","lime/_internal/backend/native/NativeAudioSource2.hx",335,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_339_setLength,"lime._internal.backend.native.NativeAudioSource2","setLength",0xbee5e044,"lime._internal.backend.native.NativeAudioSource2.setLength","lime/_internal/backend/native/NativeAudioSource2.hx",339,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_343_getLoops,"lime._internal.backend.native.NativeAudioSource2","getLoops",0x2b2f627d,"lime._internal.backend.native.NativeAudioSource2.getLoops","lime/_internal/backend/native/NativeAudioSource2.hx",343,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_347_setLoops,"lime._internal.backend.native.NativeAudioSource2","setLoops",0xd98cbbf1,"lime._internal.backend.native.NativeAudioSource2.setLoops","lime/_internal/backend/native/NativeAudioSource2.hx",347,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_350_getPosition,"lime._internal.backend.native.NativeAudioSource2","getPosition",0x4d1bf87b,"lime._internal.backend.native.NativeAudioSource2.getPosition","lime/_internal/backend/native/NativeAudioSource2.hx",350,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_362_setPosition,"lime._internal.backend.native.NativeAudioSource2","setPosition",0x5788ff87,"lime._internal.backend.native.NativeAudioSource2.setPosition","lime/_internal/backend/native/NativeAudioSource2.hx",362,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_28_boot,"lime._internal.backend.native.NativeAudioSource2","boot",0x6c0c6396,"lime._internal.backend.native.NativeAudioSource2.boot","lime/_internal/backend/native/NativeAudioSource2.hx",28,0xf031ef96)
HX_LOCAL_STACK_FRAME(_hx_pos_bf79b3ebdf1b910a_29_boot,"lime._internal.backend.native.NativeAudioSource2","boot",0x6c0c6396,"lime._internal.backend.native.NativeAudioSource2.boot","lime/_internal/backend/native/NativeAudioSource2.hx",29,0xf031ef96)
namespace lime{
namespace _internal{
namespace backend{
namespace native{

void NativeAudioSource2_obj::__construct( ::lime::media::AudioSource audioSource){
            	HX_GC_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_26_new)
HXLINE(  41)		this->samples = (int)0;
HXLINE(  40)		this->dataLength = (int)0;
HXLINE(  39)		this->playing = false;
HXLINE(  37)		this->position =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  36)		this->loops = (int)0;
HXLINE(  34)		this->format = (int)0;
HXLINE(  50)		this->audioSource = audioSource;
            	}

Dynamic NativeAudioSource2_obj::__CreateEmpty() { return new NativeAudioSource2_obj; }

void *NativeAudioSource2_obj::_hx_vtable = 0;

Dynamic NativeAudioSource2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeAudioSource2_obj > _hx_result = new NativeAudioSource2_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NativeAudioSource2_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b1ca4bc;
}

static ::lime::_internal::backend::native::NativeAudioSourceImpl_obj _hx_lime__internal_backend_native_NativeAudioSource2__hx_lime__internal_backend_native_NativeAudioSourceImpl= {
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::dispose,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::init,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::update,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::play,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::pause,
	( void (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::stop,
	( int (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::getCurrentTime,
	( int (hx::Object::*)(int))&::lime::_internal::backend::native::NativeAudioSource2_obj::setCurrentTime,
	( Float (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::getGain,
	( Float (hx::Object::*)(Float))&::lime::_internal::backend::native::NativeAudioSource2_obj::setGain,
	( int (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::getLength,
	( int (hx::Object::*)(int))&::lime::_internal::backend::native::NativeAudioSource2_obj::setLength,
	( int (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::getLoops,
	( int (hx::Object::*)(int))&::lime::_internal::backend::native::NativeAudioSource2_obj::setLoops,
	(  ::lime::math::Vector4 (hx::Object::*)())&::lime::_internal::backend::native::NativeAudioSource2_obj::getPosition,
	(  ::lime::math::Vector4 (hx::Object::*)( ::lime::math::Vector4))&::lime::_internal::backend::native::NativeAudioSource2_obj::setPosition,
};

void *NativeAudioSource2_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x712cf8b6: return &_hx_lime__internal_backend_native_NativeAudioSource2__hx_lime__internal_backend_native_NativeAudioSourceImpl;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void NativeAudioSource2_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_53_init)
HXLINE(  54)		this->dataLength = (int)0;
HXLINE(  55)		this->format = (int)0;
HXLINE(  56)		this->playing = false;
HXLINE(  58)		if ((this->audioSource->buffer->channels == (int)1)) {
HXLINE(  59)			int _hx_tmp;
HXDLIN(  59)			if ((this->audioSource->buffer->bitsPerSample == (int)8)) {
HXLINE(  59)				_hx_tmp = (int)4352;
            			}
            			else {
HXLINE(  59)				_hx_tmp = (int)4353;
            			}
HXDLIN(  59)			this->format = _hx_tmp;
            		}
            		else {
HXLINE(  60)			if ((this->audioSource->buffer->channels == (int)2)) {
HXLINE(  61)				int _hx_tmp1;
HXDLIN(  61)				if ((this->audioSource->buffer->bitsPerSample == (int)8)) {
HXLINE(  61)					_hx_tmp1 = (int)4354;
            				}
            				else {
HXLINE(  61)					_hx_tmp1 = (int)4355;
            				}
HXDLIN(  61)				this->format = _hx_tmp1;
            			}
            		}
HXLINE(  64)		if (hx::IsNotNull( this->audioSource->buffer->_hx___srcVorbisFile )) {
HXLINE(  65)			this->buffers = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  66)			{
HXLINE(  66)				int _g = (int)0;
HXDLIN(  66)				while((_g < (int)2)){
HXLINE(  66)					_g = (_g + (int)1);
HXDLIN(  66)					int i = (_g - (int)1);
HXLINE(  67)					::cpp::VirtualArray _hx_tmp2 = this->buffers;
HXDLIN(  67)					_hx_tmp2->set(i,::lime::media::openal::AL_obj::createBuffer());
            				}
            			}
HXLINE(  70)			 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)176000,(int)4);
HXDLIN(  70)			this->bufferData = this1;
HXLINE(  72)			this->vorbisFile = this->audioSource->buffer->_hx___srcVorbisFile;
HXLINE(  73)			 cpp::Int64Struct x = this->vorbisFile->pcmTotal(null());
HXDLIN(  73)			int _hx_tmp3 = _hx_int64_high(x);
HXDLIN(  73)			if ((_hx_tmp3 != ((int)_hx_int64_low(x) >> (int)(int)31))) {
HXLINE(  73)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN(  73)			int _hx_tmp4 = _hx_int64_low(x);
HXDLIN(  73)			int _hx_tmp5 = (_hx_tmp4 * this->audioSource->buffer->channels);
HXDLIN(  73)			this->dataLength = ::Std_obj::_hx_int((_hx_tmp5 * ((Float)this->audioSource->buffer->bitsPerSample / (Float)(int)8)));
HXLINE(  74)			int _hx_tmp6 = (this->dataLength * (int)8);
HXDLIN(  74)			this->samples = ::Std_obj::_hx_int(((Float)_hx_tmp6 / (Float)(this->audioSource->buffer->channels * this->audioSource->buffer->bitsPerSample)));
HXLINE(  76)			this->vorbisFile->timeSeek((int)0);
HXLINE(  77)			{
HXLINE(  77)				this->handle = ::lime::media::openal::AL_obj::createSource();
HXDLIN(  77)				::lime::media::openal::AL_obj::sourcef(this->handle,(int)4106,((Float)1.0));
HXDLIN(  77)				::lime::media::openal::AL_obj::sourcei(this->handle,(int)4103,(int)0);
HXDLIN(  77)				::lime::media::openal::AL_obj::sourcef(this->handle,(int)4099,((Float)1.0));
HXDLIN(  77)				::lime::media::openal::AL_obj::distanceModel((int)0);
HXDLIN(  77)				::lime::media::openal::AL_obj::source3f(this->handle,(int)4100,(int)0,(int)0,(int)0);
HXDLIN(  77)				::lime::media::openal::AL_obj::source3f(this->handle,(int)4102,(int)0,(int)0,(int)0);
            			}
            		}
            		else {
HXLINE(  79)			HX_STACK_DO_THROW(HX_("Non-streaming audio not implemented",0d,22,95,06));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,init,(void))

void NativeAudioSource2_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_83_dispose)
HXLINE(  84)		if (hx::IsNull( this->handle )) {
HXLINE(  85)			return;
            		}
HXLINE(  88)		if (this->playing) {
HXLINE(  89)			::lime::media::openal::AL_obj::sourceStop(this->handle);
            		}
HXLINE(  92)		this->flushBuffers(hx::SourceInfo(HX_("NativeAudioSource2.hx",a6,9c,54,ef),92,HX_("lime._internal.backend.native.NativeAudioSource2",8a,bb,d7,6f),HX_("dispose",9f,80,4c,bb)));
HXLINE(  94)		if (hx::IsNotEq( ::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4105),(int)0 )) {
HXLINE(  95)			::lime::media::openal::AL_obj::sourcei(this->handle,(int)4105,null());
            		}
HXLINE(  99)		::lime::media::openal::AL_obj::deleteSource(this->handle);
HXLINE( 102)		while((this->buffers->get_length() > (int)0)){
HXLINE( 103)			::lime::media::openal::AL_obj::deleteBuffer(this->buffers->pop());
            		}
HXLINE( 107)		this->handle = null();
HXLINE( 108)		this->buffers = null();
HXLINE( 109)		this->bufferData = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,dispose,(void))

void NativeAudioSource2_obj::update(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_112_update)
HXLINE( 113)		if (!(this->playing)) {
HXLINE( 114)			return;
            		}
HXLINE( 117)		bool stillStreaming = true;
HXLINE( 118)		int processedBuffers = ( (int)(::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4118)) );
HXLINE( 122)		if ((processedBuffers > (int)2)) {
HXLINE( 122)			processedBuffers = (int)2;
            		}
HXLINE( 124)		while((processedBuffers > (int)0)){
HXLINE( 125)			 ::Dynamic buffer = ::lime::media::openal::AL_obj::sourceUnqueueBuffer(this->handle);
HXLINE( 128)			 ::Dynamic result = this->fillBuffer(buffer,hx::SourceInfo(HX_("NativeAudioSource2.hx",a6,9c,54,ef),128,HX_("lime._internal.backend.native.NativeAudioSource2",8a,bb,d7,6f),HX_("update",09,86,05,87)));
HXLINE( 131)			bool skipQueue;
HXDLIN( 131)			bool skipQueue1;
HXDLIN( 131)			if ((this->loops <= (int)0)) {
HXLINE( 131)				skipQueue1 = ( (bool)(result->__Field(HX_("ended",fa,48,7a,70),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 131)				skipQueue1 = false;
            			}
HXDLIN( 131)			if (skipQueue1) {
HXLINE( 131)				skipQueue = (( (int)(result->__Field(HX_("amount",d8,11,03,d5),hx::paccDynamic)) ) <= (int)0);
            			}
            			else {
HXLINE( 131)				skipQueue = false;
            			}
HXLINE( 133)			if (!(skipQueue)) {
HXLINE( 134)				::lime::media::openal::AL_obj::sourceQueueBuffer(this->handle,buffer);
            			}
HXLINE( 138)			if (( (bool)(result->__Field(HX_("ended",fa,48,7a,70),hx::paccDynamic)) )) {
HXLINE( 139)				if ((this->loops > (int)0)) {
HXLINE( 140)					this->vorbisFile->timeSeek((int)0);
HXLINE( 143)					if ((( (int)(result->__Field(HX_("amount",d8,11,03,d5),hx::paccDynamic)) ) <= (int)0)) {
HXLINE( 144)						this->fillBuffer(buffer,hx::SourceInfo(HX_("NativeAudioSource2.hx",a6,9c,54,ef),144,HX_("lime._internal.backend.native.NativeAudioSource2",8a,bb,d7,6f),HX_("update",09,86,05,87)));
            					}
HXLINE( 147)					this->loops--;
            				}
            				else {
HXLINE( 151)					int queued = ( (int)(::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4117)) );
HXLINE( 154)					if ((queued <= (int)0)) {
HXLINE( 155)						stillStreaming = false;
            					}
            				}
            			}
HXLINE( 160)			processedBuffers = (processedBuffers - (int)1);
            		}
HXLINE( 163)		if (!(stillStreaming)) {
HXLINE( 164)			this->stop();
HXLINE( 165)			this->audioSource->onComplete->dispatch();
            		}
            		else {
HXLINE( 166)			bool _hx_tmp;
HXDLIN( 166)			if (this->playing) {
HXLINE( 166)				_hx_tmp = hx::IsEq( ::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4112),(int)4116 );
            			}
            			else {
HXLINE( 166)				_hx_tmp = false;
            			}
HXDLIN( 166)			if (_hx_tmp) {
HXLINE( 168)				::lime::media::openal::AL_obj::sourcePlay(this->handle);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,update,(void))

void NativeAudioSource2_obj::play(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_172_play)
HXLINE( 173)		bool _hx_tmp;
HXDLIN( 173)		if (!(this->playing)) {
HXLINE( 173)			_hx_tmp = hx::IsNull( this->handle );
            		}
            		else {
HXLINE( 173)			_hx_tmp = true;
            		}
HXDLIN( 173)		if (_hx_tmp) {
HXLINE( 174)			return;
            		}
HXLINE( 177)		this->playing = true;
HXLINE( 179)		this->setCurrentTime((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,play,(void))

void NativeAudioSource2_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_182_pause)
HXLINE( 183)		this->playing = false;
HXLINE( 185)		if (hx::IsNotNull( this->handle )) {
HXLINE( 186)			::lime::media::openal::AL_obj::sourcePause(this->handle);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,pause,(void))

void NativeAudioSource2_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_191_stop)
HXLINE( 192)		bool _hx_tmp;
HXDLIN( 192)		if (this->playing) {
HXLINE( 192)			_hx_tmp = hx::IsNotNull( this->handle );
            		}
            		else {
HXLINE( 192)			_hx_tmp = false;
            		}
HXDLIN( 192)		if (_hx_tmp) {
HXLINE( 193)			::lime::media::openal::AL_obj::sourceStop(this->handle);
            		}
HXLINE( 197)		this->playing = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,stop,(void))

void NativeAudioSource2_obj::initHandle(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_200_initHandle)
HXLINE( 201)		this->handle = ::lime::media::openal::AL_obj::createSource();
HXLINE( 203)		::lime::media::openal::AL_obj::sourcef(this->handle,(int)4106,((Float)1.0));
HXLINE( 205)		::lime::media::openal::AL_obj::sourcei(this->handle,(int)4103,(int)0);
HXLINE( 207)		::lime::media::openal::AL_obj::sourcef(this->handle,(int)4099,((Float)1.0));
HXLINE( 209)		::lime::media::openal::AL_obj::distanceModel((int)0);
HXLINE( 211)		::lime::media::openal::AL_obj::source3f(this->handle,(int)4100,(int)0,(int)0,(int)0);
HXLINE( 213)		::lime::media::openal::AL_obj::source3f(this->handle,(int)4102,(int)0,(int)0,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,initHandle,(void))

void NativeAudioSource2_obj::initBuffers(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_218_initBuffers)
HXDLIN( 218)		int _g = (int)0;
HXDLIN( 218)		while((_g < (int)2)){
HXDLIN( 218)			_g = (_g + (int)1);
HXDLIN( 218)			int i = (_g - (int)1);
HXLINE( 219)			 ::Dynamic result = this->fillBuffer(this->buffers->__get(i),hx::SourceInfo(HX_("NativeAudioSource2.hx",a6,9c,54,ef),219,HX_("lime._internal.backend.native.NativeAudioSource2",8a,bb,d7,6f),HX_("initBuffers",43,12,fb,69)));
HXLINE( 220)			if ((( (int)(result->__Field(HX_("amount",d8,11,03,d5),hx::paccDynamic)) ) > (int)0)) {
HXLINE( 221)				 ::Dynamic _hx_tmp = this->handle;
HXDLIN( 221)				::lime::media::openal::AL_obj::sourceQueueBuffer(_hx_tmp,this->buffers->__get(i));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,initBuffers,(void))

 ::Dynamic NativeAudioSource2_obj::fillBuffer( ::Dynamic buffer, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_227_fillBuffer)
HXLINE( 229)		 cpp::Int64Struct x = this->vorbisFile->pcmTell();
HXDLIN( 229)		int position = _hx_int64_high(x);
HXDLIN( 229)		if ((position != ((int)_hx_int64_low(x) >> (int)(int)31))) {
HXLINE( 229)			HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            		}
HXDLIN( 229)		int position1 = _hx_int64_low(x);
HXDLIN( 229)		int position2 = (position1 * this->audioSource->buffer->channels);
HXDLIN( 229)		int position3 = ::Std_obj::_hx_int((position2 * ((Float)this->audioSource->buffer->bitsPerSample / (Float)(int)8)));
HXLINE( 231)		 ::Dynamic result = this->readVorbisFile(null());
HXLINE( 233)		if ((( (int)(result->__Field(HX_("amount",d8,11,03,d5),hx::paccDynamic)) ) > (int)0)) {
HXLINE( 234)			::lime::media::openal::AL_obj::bufferData(buffer,this->format,this->bufferData,( (int)(result->__Field(HX_("amount",d8,11,03,d5),hx::paccDynamic)) ),this->audioSource->buffer->sampleRate);
            		}
HXLINE( 238)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeAudioSource2_obj,fillBuffer,return )

void NativeAudioSource2_obj::flushBuffers( ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_241_flushBuffers)
HXLINE( 242)		if (hx::IsNull( this->handle )) {
HXLINE( 243)			return;
            		}
HXLINE( 245)		int queued = ( (int)(::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4117)) );
HXLINE( 247)		::lime::media::openal::AL_obj::sourceUnqueueBuffers(this->handle,queued);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,flushBuffers,(void))

void NativeAudioSource2_obj::error( ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_251_error)
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,error,(void))

void NativeAudioSource2_obj::seek(Float value){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_259_seek)
HXDLIN( 259)		this->vorbisFile->timeSeek(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,seek,(void))

Float NativeAudioSource2_obj::bytesToSeconds(int bytes){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_263_bytesToSeconds)
HXDLIN( 263)		int _hx_tmp;
HXDLIN( 263)		if ((this->audioSource->buffer->bitsPerSample == (int)16)) {
HXDLIN( 263)			_hx_tmp = (int)2;
            		}
            		else {
HXDLIN( 263)			_hx_tmp = (int)1;
            		}
HXDLIN( 263)		return ((Float)bytes / (Float)((this->audioSource->buffer->sampleRate * this->audioSource->buffer->channels) * _hx_tmp));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,bytesToSeconds,return )

int NativeAudioSource2_obj::secondsToBytes(Float seconds){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_267_secondsToBytes)
HXDLIN( 267)		int _hx_tmp;
HXDLIN( 267)		if ((this->audioSource->buffer->bitsPerSample == (int)16)) {
HXDLIN( 267)			_hx_tmp = (int)2;
            		}
            		else {
HXDLIN( 267)			_hx_tmp = (int)1;
            		}
HXDLIN( 267)		return ::Std_obj::_hx_int((seconds * ((this->audioSource->buffer->sampleRate * this->audioSource->buffer->channels) * _hx_tmp)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,secondsToBytes,return )

 ::Dynamic NativeAudioSource2_obj::readVorbisFile(hx::Null< int >  __o_length){
int length = __o_length.Default(176000);
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_270_readVorbisFile)
HXLINE( 271)		int read = (int)0;
HXDLIN( 271)		int total = (int)0;
HXDLIN( 271)		int readMax = (int)0;
HXLINE( 272)		this->timeBlock1 = this->timeBlock2;
HXLINE( 273)		this->timeBlock2 = this->vorbisFile->timeTell();
HXLINE( 274)		while((total < length)){
HXLINE( 275)			readMax = (int)4096;
HXLINE( 276)			if ((readMax > (length - total))) {
HXLINE( 277)				readMax = (length - total);
            			}
HXLINE( 280)			read = this->vorbisFile->read(this->bufferData->buffer,total,readMax,null(),null(),null());
HXLINE( 282)			if ((read > (int)0)) {
HXLINE( 283)				total = (total + read);
            			}
            			else {
HXLINE( 285)				goto _hx_goto_19;
            			}
            		}
            		_hx_goto_19:;
HXLINE( 289)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("amount",d8,11,03,d5),total)
            			->setFixed(1,HX_("ended",fa,48,7a,70),(total < length)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,readVorbisFile,return )

int NativeAudioSource2_obj::getCurrentTime(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_294_getCurrentTime)
HXLINE( 295)		Float time = (this->timeBlock1 * (int)1000);
HXDLIN( 295)		Float time1 = (time + (::lime::media::openal::AL_obj::getSourcef(this->handle,(int)4132) * (int)1000));
HXDLIN( 295)		Float time2 = (time1 - this->audioSource->offset);
HXLINE( 296)		if ((time2 > (int)0)) {
HXLINE( 296)			return ::Std_obj::_hx_int(time2);
            		}
            		else {
HXLINE( 296)			return (int)0;
            		}
HXDLIN( 296)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,getCurrentTime,return )

int NativeAudioSource2_obj::setCurrentTime(int value){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_299_setCurrentTime)
HXLINE( 300)		if (hx::IsNotNull( this->handle )) {
HXLINE( 301)			::lime::media::openal::AL_obj::sourceStop(this->handle);
HXLINE( 303)			this->flushBuffers(hx::SourceInfo(HX_("NativeAudioSource2.hx",a6,9c,54,ef),303,HX_("lime._internal.backend.native.NativeAudioSource2",8a,bb,d7,6f),HX_("setCurrentTime",64,e0,4c,2d)));
HXLINE( 305)			this->vorbisFile->timeSeek(((Float)(value + this->audioSource->offset) / (Float)(int)1000));
HXLINE( 307)			this->initBuffers();
HXLINE( 309)			if (this->playing) {
HXLINE( 310)				::lime::media::openal::AL_obj::sourcePlay(this->handle);
            			}
            		}
HXLINE( 315)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,setCurrentTime,return )

Float NativeAudioSource2_obj::getGain(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_318_getGain)
HXLINE( 319)		if (hx::IsNull( this->handle )) {
HXLINE( 320)			return ((Float)1.0);
            		}
HXLINE( 323)		return ::lime::media::openal::AL_obj::getSourcef(this->handle,(int)4106);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,getGain,return )

Float NativeAudioSource2_obj::setGain(Float value){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_326_setGain)
HXLINE( 327)		if (hx::IsNotNull( this->handle )) {
HXLINE( 328)			::lime::media::openal::AL_obj::sourcef(this->handle,(int)4106,value);
            		}
HXLINE( 331)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,setGain,return )

int NativeAudioSource2_obj::getLength(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_335_getLength)
HXDLIN( 335)		int _hx_tmp;
HXDLIN( 335)		if ((this->audioSource->buffer->bitsPerSample == (int)16)) {
HXDLIN( 335)			_hx_tmp = (int)2;
            		}
            		else {
HXDLIN( 335)			_hx_tmp = (int)1;
            		}
HXDLIN( 335)		return ::Std_obj::_hx_int(((((Float)this->dataLength / (Float)((this->audioSource->buffer->sampleRate * this->audioSource->buffer->channels) * _hx_tmp)) * (int)1000) - this->audioSource->offset));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,getLength,return )

int NativeAudioSource2_obj::setLength(int value){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_339_setLength)
HXDLIN( 339)		return this->getLength();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,setLength,return )

int NativeAudioSource2_obj::getLoops(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_343_getLoops)
HXDLIN( 343)		return this->loops;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,getLoops,return )

int NativeAudioSource2_obj::setLoops(int value){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_347_setLoops)
HXDLIN( 347)		return (this->loops = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,setLoops,return )

 ::lime::math::Vector4 NativeAudioSource2_obj::getPosition(){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_350_getPosition)
HXLINE( 352)		if (hx::IsNotNull( this->handle )) {
HXLINE( 353)			::Array< Float > value = ::lime::media::openal::AL_obj::getSource3f(this->handle,(int)4100);
HXLINE( 354)			this->position->x = value->__get((int)0);
HXLINE( 355)			this->position->y = value->__get((int)1);
HXLINE( 356)			this->position->z = value->__get((int)2);
            		}
HXLINE( 359)		return this->position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource2_obj,getPosition,return )

 ::lime::math::Vector4 NativeAudioSource2_obj::setPosition( ::lime::math::Vector4 value){
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_362_setPosition)
HXLINE( 363)		this->position->x = value->x;
HXLINE( 364)		this->position->y = value->y;
HXLINE( 365)		this->position->z = value->z;
HXLINE( 366)		this->position->w = value->w;
HXLINE( 368)		if (hx::IsNotNull( this->handle )) {
HXLINE( 369)			::lime::media::openal::AL_obj::distanceModel((int)0);
HXLINE( 371)			::lime::media::openal::AL_obj::source3f(this->handle,(int)4100,this->position->x,this->position->y,this->position->z);
            		}
HXLINE( 375)		return this->position;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource2_obj,setPosition,return )

int NativeAudioSource2_obj::BUFFER_LENGTH;

int NativeAudioSource2_obj::BUFFER_NUMBER;


hx::ObjectPtr< NativeAudioSource2_obj > NativeAudioSource2_obj::__new( ::lime::media::AudioSource audioSource) {
	hx::ObjectPtr< NativeAudioSource2_obj > __this = new NativeAudioSource2_obj();
	__this->__construct(audioSource);
	return __this;
}

hx::ObjectPtr< NativeAudioSource2_obj > NativeAudioSource2_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::media::AudioSource audioSource) {
	NativeAudioSource2_obj *__this = (NativeAudioSource2_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NativeAudioSource2_obj), true, "lime._internal.backend.native.NativeAudioSource2"));
	*(void **)__this = NativeAudioSource2_obj::_hx_vtable;
	__this->__construct(audioSource);
	return __this;
}

NativeAudioSource2_obj::NativeAudioSource2_obj()
{
}

void NativeAudioSource2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeAudioSource2);
	HX_MARK_MEMBER_NAME(buffers,"buffers");
	HX_MARK_MEMBER_NAME(audioSource,"audioSource");
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(loops,"loops");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(playing,"playing");
	HX_MARK_MEMBER_NAME(dataLength,"dataLength");
	HX_MARK_MEMBER_NAME(samples,"samples");
	HX_MARK_MEMBER_NAME(bufferData,"bufferData");
	HX_MARK_MEMBER_NAME(vorbisFile,"vorbisFile");
	HX_MARK_MEMBER_NAME(timeBlock1,"timeBlock1");
	HX_MARK_MEMBER_NAME(timeBlock2,"timeBlock2");
	HX_MARK_END_CLASS();
}

void NativeAudioSource2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffers,"buffers");
	HX_VISIT_MEMBER_NAME(audioSource,"audioSource");
	HX_VISIT_MEMBER_NAME(handle,"handle");
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(loops,"loops");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(playing,"playing");
	HX_VISIT_MEMBER_NAME(dataLength,"dataLength");
	HX_VISIT_MEMBER_NAME(samples,"samples");
	HX_VISIT_MEMBER_NAME(bufferData,"bufferData");
	HX_VISIT_MEMBER_NAME(vorbisFile,"vorbisFile");
	HX_VISIT_MEMBER_NAME(timeBlock1,"timeBlock1");
	HX_VISIT_MEMBER_NAME(timeBlock2,"timeBlock2");
}

hx::Val NativeAudioSource2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		if (HX_FIELD_EQ(inName,"seek") ) { return hx::Val( seek_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { return hx::Val( loops ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle ); }
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"buffers") ) { return hx::Val( buffers ); }
		if (HX_FIELD_EQ(inName,"playing") ) { return hx::Val( playing ); }
		if (HX_FIELD_EQ(inName,"samples") ) { return hx::Val( samples ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGain") ) { return hx::Val( getGain_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGain") ) { return hx::Val( setGain_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"getLoops") ) { return hx::Val( getLoops_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLoops") ) { return hx::Val( setLoops_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLength") ) { return hx::Val( setLength_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataLength") ) { return hx::Val( dataLength ); }
		if (HX_FIELD_EQ(inName,"bufferData") ) { return hx::Val( bufferData ); }
		if (HX_FIELD_EQ(inName,"vorbisFile") ) { return hx::Val( vorbisFile ); }
		if (HX_FIELD_EQ(inName,"timeBlock1") ) { return hx::Val( timeBlock1 ); }
		if (HX_FIELD_EQ(inName,"timeBlock2") ) { return hx::Val( timeBlock2 ); }
		if (HX_FIELD_EQ(inName,"initHandle") ) { return hx::Val( initHandle_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillBuffer") ) { return hx::Val( fillBuffer_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"audioSource") ) { return hx::Val( audioSource ); }
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return hx::Val( initBuffers_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPosition") ) { return hx::Val( getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"flushBuffers") ) { return hx::Val( flushBuffers_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bytesToSeconds") ) { return hx::Val( bytesToSeconds_dyn() ); }
		if (HX_FIELD_EQ(inName,"secondsToBytes") ) { return hx::Val( secondsToBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"readVorbisFile") ) { return hx::Val( readVorbisFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentTime") ) { return hx::Val( getCurrentTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCurrentTime") ) { return hx::Val( setCurrentTime_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NativeAudioSource2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { loops=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"buffers") ) { buffers=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playing") ) { playing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"samples") ) { samples=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::lime::math::Vector4 >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataLength") ) { dataLength=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bufferData") ) { bufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vorbisFile") ) { vorbisFile=inValue.Cast<  ::lime::media::vorbis::VorbisFile >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeBlock1") ) { timeBlock1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeBlock2") ) { timeBlock2=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"audioSource") ) { audioSource=inValue.Cast<  ::lime::media::AudioSource >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NativeAudioSource2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffers","\x73","\xa3","\x90","\xb1"));
	outFields->push(HX_HCSTRING("audioSource","\x51","\xe2","\xe1","\x00"));
	outFields->push(HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"));
	outFields->push(HX_HCSTRING("dataLength","\xb0","\x5a","\xa9","\x8a"));
	outFields->push(HX_HCSTRING("samples","\x09","\xc5","\xc9","\x83"));
	outFields->push(HX_HCSTRING("bufferData","\x4a","\xbf","\x73","\x93"));
	outFields->push(HX_HCSTRING("vorbisFile","\x6f","\xa3","\xd0","\xdd"));
	outFields->push(HX_HCSTRING("timeBlock1","\x31","\x76","\xb3","\x45"));
	outFields->push(HX_HCSTRING("timeBlock2","\x32","\x76","\xb3","\x45"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeAudioSource2_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(NativeAudioSource2_obj,buffers),HX_HCSTRING("buffers","\x73","\xa3","\x90","\xb1")},
	{hx::fsObject /*::lime::media::AudioSource*/ ,(int)offsetof(NativeAudioSource2_obj,audioSource),HX_HCSTRING("audioSource","\x51","\xe2","\xe1","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeAudioSource2_obj,handle),HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7")},
	{hx::fsInt,(int)offsetof(NativeAudioSource2_obj,format),HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd")},
	{hx::fsInt,(int)offsetof(NativeAudioSource2_obj,loops),HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78")},
	{hx::fsObject /*::lime::math::Vector4*/ ,(int)offsetof(NativeAudioSource2_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsBool,(int)offsetof(NativeAudioSource2_obj,playing),HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a")},
	{hx::fsInt,(int)offsetof(NativeAudioSource2_obj,dataLength),HX_HCSTRING("dataLength","\xb0","\x5a","\xa9","\x8a")},
	{hx::fsInt,(int)offsetof(NativeAudioSource2_obj,samples),HX_HCSTRING("samples","\x09","\xc5","\xc9","\x83")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(NativeAudioSource2_obj,bufferData),HX_HCSTRING("bufferData","\x4a","\xbf","\x73","\x93")},
	{hx::fsObject /*::lime::media::vorbis::VorbisFile*/ ,(int)offsetof(NativeAudioSource2_obj,vorbisFile),HX_HCSTRING("vorbisFile","\x6f","\xa3","\xd0","\xdd")},
	{hx::fsFloat,(int)offsetof(NativeAudioSource2_obj,timeBlock1),HX_HCSTRING("timeBlock1","\x31","\x76","\xb3","\x45")},
	{hx::fsFloat,(int)offsetof(NativeAudioSource2_obj,timeBlock2),HX_HCSTRING("timeBlock2","\x32","\x76","\xb3","\x45")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo NativeAudioSource2_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &NativeAudioSource2_obj::BUFFER_LENGTH,HX_HCSTRING("BUFFER_LENGTH","\x85","\x09","\x99","\x8e")},
	{hx::fsInt,(void *) &NativeAudioSource2_obj::BUFFER_NUMBER,HX_HCSTRING("BUFFER_NUMBER","\x68","\xfb","\x0b","\x91")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String NativeAudioSource2_obj_sMemberFields[] = {
	HX_HCSTRING("buffers","\x73","\xa3","\x90","\xb1"),
	HX_HCSTRING("audioSource","\x51","\xe2","\xe1","\x00"),
	HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"),
	HX_HCSTRING("dataLength","\xb0","\x5a","\xa9","\x8a"),
	HX_HCSTRING("samples","\x09","\xc5","\xc9","\x83"),
	HX_HCSTRING("bufferData","\x4a","\xbf","\x73","\x93"),
	HX_HCSTRING("vorbisFile","\x6f","\xa3","\xd0","\xdd"),
	HX_HCSTRING("timeBlock1","\x31","\x76","\xb3","\x45"),
	HX_HCSTRING("timeBlock2","\x32","\x76","\xb3","\x45"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("initHandle","\xd8","\xde","\x42","\xbc"),
	HX_HCSTRING("initBuffers","\x43","\x12","\xfb","\x69"),
	HX_HCSTRING("fillBuffer","\xe3","\x43","\x2f","\xd4"),
	HX_HCSTRING("flushBuffers","\x0f","\x09","\xf6","\xef"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("seek","\x78","\x85","\x50","\x4c"),
	HX_HCSTRING("bytesToSeconds","\x59","\xe0","\x3b","\xae"),
	HX_HCSTRING("secondsToBytes","\x31","\x24","\xa9","\x55"),
	HX_HCSTRING("readVorbisFile","\x65","\xba","\x0c","\x4b"),
	HX_HCSTRING("getCurrentTime","\xf0","\xf7","\x2c","\x0d"),
	HX_HCSTRING("setCurrentTime","\x64","\xe0","\x4c","\x2d"),
	HX_HCSTRING("getGain","\x35","\xa0","\xe1","\x16"),
	HX_HCSTRING("setGain","\x41","\x31","\xe3","\x09"),
	HX_HCSTRING("getLength","\x1c","\x1e","\x5e","\x1b"),
	HX_HCSTRING("setLength","\x28","\x0a","\xaf","\xfe"),
	HX_HCSTRING("getLoops","\x19","\x01","\xd1","\xd8"),
	HX_HCSTRING("setLoops","\x8d","\x5a","\x2e","\x87"),
	HX_HCSTRING("getPosition","\x5f","\x63","\xee","\xf0"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	::String(null()) };

static void NativeAudioSource2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeAudioSource2_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NativeAudioSource2_obj::BUFFER_LENGTH,"BUFFER_LENGTH");
	HX_MARK_MEMBER_NAME(NativeAudioSource2_obj::BUFFER_NUMBER,"BUFFER_NUMBER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeAudioSource2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeAudioSource2_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NativeAudioSource2_obj::BUFFER_LENGTH,"BUFFER_LENGTH");
	HX_VISIT_MEMBER_NAME(NativeAudioSource2_obj::BUFFER_NUMBER,"BUFFER_NUMBER");
};

#endif

hx::Class NativeAudioSource2_obj::__mClass;

static ::String NativeAudioSource2_obj_sStaticFields[] = {
	HX_HCSTRING("BUFFER_LENGTH","\x85","\x09","\x99","\x8e"),
	HX_HCSTRING("BUFFER_NUMBER","\x68","\xfb","\x0b","\x91"),
	::String(null())
};

void NativeAudioSource2_obj::__register()
{
	hx::Object *dummy = new NativeAudioSource2_obj;
	NativeAudioSource2_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._internal.backend.native.NativeAudioSource2","\x8a","\xbb","\xd7","\x6f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeAudioSource2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NativeAudioSource2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeAudioSource2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeAudioSource2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeAudioSource2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeAudioSource2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeAudioSource2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NativeAudioSource2_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_28_boot)
HXDLIN(  28)		BUFFER_LENGTH = (int)176000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_bf79b3ebdf1b910a_29_boot)
HXDLIN(  29)		BUFFER_NUMBER = (int)2;
            	}
}

} // end namespace lime
} // end namespace _internal
} // end namespace backend
} // end namespace native
