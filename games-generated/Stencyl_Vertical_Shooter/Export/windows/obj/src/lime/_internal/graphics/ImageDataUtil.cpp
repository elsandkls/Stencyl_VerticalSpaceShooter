// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_ImageDataUtil
#include <lime/_internal/graphics/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime__internal_graphics__ImageDataUtil_ImageDataView
#include <lime/_internal/graphics/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_math__RGBA_RGBA_Impl_
#include <lime/math/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_39_displaceMap,"lime._internal.graphics.ImageDataUtil","displaceMap",0x5f09aa44,"lime._internal.graphics.ImageDataUtil.displaceMap","lime/_internal/graphics/ImageDataUtil.hx",39,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_144_bilinear,"lime._internal.graphics.ImageDataUtil","bilinear",0x779ce56b,"lime._internal.graphics.ImageDataUtil.bilinear","lime/_internal/graphics/ImageDataUtil.hx",144,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_151_lerpRGBA,"lime._internal.graphics.ImageDataUtil","lerpRGBA",0x6898e12a,"lime._internal.graphics.ImageDataUtil.lerpRGBA","lime/_internal/graphics/ImageDataUtil.hx",151,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_162_lerp4f,"lime._internal.graphics.ImageDataUtil","lerp4f",0x5c714ca8,"lime._internal.graphics.ImageDataUtil.lerp4f","lime/_internal/graphics/ImageDataUtil.hx",162,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_171_lerp,"lime._internal.graphics.ImageDataUtil","lerp",0x85985576,"lime._internal.graphics.ImageDataUtil.lerp","lime/_internal/graphics/ImageDataUtil.hx",171,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_174_colorTransform,"lime._internal.graphics.ImageDataUtil","colorTransform",0x125b6f48,"lime._internal.graphics.ImageDataUtil.colorTransform","lime/_internal/graphics/ImageDataUtil.hx",174,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_220_copyChannel,"lime._internal.graphics.ImageDataUtil","copyChannel",0xecaa286f,"lime._internal.graphics.ImageDataUtil.copyChannel","lime/_internal/graphics/ImageDataUtil.hx",220,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_305_copyPixels,"lime._internal.graphics.ImageDataUtil","copyPixels",0xd2d56101,"lime._internal.graphics.ImageDataUtil.copyPixels","lime/_internal/graphics/ImageDataUtil.hx",305,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_510_fillRect,"lime._internal.graphics.ImageDataUtil","fillRect",0x041873c6,"lime._internal.graphics.ImageDataUtil.fillRect","lime/_internal/graphics/ImageDataUtil.hx",510,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_563_floodFill,"lime._internal.graphics.ImageDataUtil","floodFill",0x35740402,"lime._internal.graphics.ImageDataUtil.floodFill","lime/_internal/graphics/ImageDataUtil.hx",563,0x59dddace)
static const int _hx_array_data_0eb0fdcf_29[] = {
	(int)0,(int)-1,(int)1,(int)0,
};
static const int _hx_array_data_0eb0fdcf_30[] = {
	(int)-1,(int)0,(int)0,(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_648_gaussianBlur,"lime._internal.graphics.ImageDataUtil","gaussianBlur",0xb8d3c441,"lime._internal.graphics.ImageDataUtil.gaussianBlur","lime/_internal/graphics/ImageDataUtil.hx",648,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_740_getColorBoundsRect,"lime._internal.graphics.ImageDataUtil","getColorBoundsRect",0x8aa490c5,"lime._internal.graphics.ImageDataUtil.getColorBoundsRect","lime/_internal/graphics/ImageDataUtil.hx",740,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_907_getPixel,"lime._internal.graphics.ImageDataUtil","getPixel",0xb9da048f,"lime._internal.graphics.ImageDataUtil.getPixel","lime/_internal/graphics/ImageDataUtil.hx",907,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_925_getPixel32,"lime._internal.graphics.ImageDataUtil","getPixel32",0x67cfb2ee,"lime._internal.graphics.ImageDataUtil.getPixel32","lime/_internal/graphics/ImageDataUtil.hx",925,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_942_getPixels,"lime._internal.graphics.ImageDataUtil","getPixels",0xe4e9f904,"lime._internal.graphics.ImageDataUtil.getPixels","lime/_internal/graphics/ImageDataUtil.hx",942,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_996_merge,"lime._internal.graphics.ImageDataUtil","merge",0xf318fed9,"lime._internal.graphics.ImageDataUtil.merge","lime/_internal/graphics/ImageDataUtil.hx",996,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1049_multiplyAlpha,"lime._internal.graphics.ImageDataUtil","multiplyAlpha",0xed49d7bb,"lime._internal.graphics.ImageDataUtil.multiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",1049,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1079_resize,"lime._internal.graphics.ImageDataUtil","resize",0xc3399ab3,"lime._internal.graphics.ImageDataUtil.resize","lime/_internal/graphics/ImageDataUtil.hx",1079,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1162_resizeBuffer,"lime._internal.graphics.ImageDataUtil","resizeBuffer",0x76145413,"lime._internal.graphics.ImageDataUtil.resizeBuffer","lime/_internal/graphics/ImageDataUtil.hx",1162,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1201_setFormat,"lime._internal.graphics.ImageDataUtil","setFormat",0x391f851a,"lime._internal.graphics.ImageDataUtil.setFormat","lime/_internal/graphics/ImageDataUtil.hx",1201,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1291_setPixel,"lime._internal.graphics.ImageDataUtil","setPixel",0x68375e03,"lime._internal.graphics.ImageDataUtil.setPixel","lime/_internal/graphics/ImageDataUtil.hx",1291,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1317_setPixel32,"lime._internal.graphics.ImageDataUtil","setPixel32",0x6b4d5162,"lime._internal.graphics.ImageDataUtil.setPixel32","lime/_internal/graphics/ImageDataUtil.hx",1317,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1338_setPixels,"lime._internal.graphics.ImageDataUtil","setPixels",0xc83ae510,"lime._internal.graphics.ImageDataUtil.setPixels","lime/_internal/graphics/ImageDataUtil.hx",1338,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1398_threshold,"lime._internal.graphics.ImageDataUtil","threshold",0x108d444c,"lime._internal.graphics.ImageDataUtil.threshold","lime/_internal/graphics/ImageDataUtil.hx",1398,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1517_unmultiplyAlpha,"lime._internal.graphics.ImageDataUtil","unmultiplyAlpha",0x3b9ff802,"lime._internal.graphics.ImageDataUtil.unmultiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",1517,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1547___boxBlur,"lime._internal.graphics.ImageDataUtil","__boxBlur",0xee145fd3,"lime._internal.graphics.ImageDataUtil.__boxBlur","lime/_internal/graphics/ImageDataUtil.hx",1547,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1569___boxBlurH,"lime._internal.graphics.ImageDataUtil","__boxBlurH",0x63bf7915,"lime._internal.graphics.ImageDataUtil.__boxBlurH","lime/_internal/graphics/ImageDataUtil.hx",1569,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1623___boxBlurT,"lime._internal.graphics.ImageDataUtil","__boxBlurT",0x63bf7921,"lime._internal.graphics.ImageDataUtil.__boxBlurT","lime/_internal/graphics/ImageDataUtil.hx",1623,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1682___calculateSourceOffset,"lime._internal.graphics.ImageDataUtil","__calculateSourceOffset",0x5e2fc695,"lime._internal.graphics.ImageDataUtil.__calculateSourceOffset","lime/_internal/graphics/ImageDataUtil.hx",1682,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1704___getBoxesForGaussianBlur,"lime._internal.graphics.ImageDataUtil","__getBoxesForGaussianBlur",0xdeeea6e9,"lime._internal.graphics.ImageDataUtil.__getBoxesForGaussianBlur","lime/_internal/graphics/ImageDataUtil.hx",1704,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1726___pixelCompare,"lime._internal.graphics.ImageDataUtil","__pixelCompare",0xf2ff119e,"lime._internal.graphics.ImageDataUtil.__pixelCompare","lime/_internal/graphics/ImageDataUtil.hx",1726,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1780___translatePixel,"lime._internal.graphics.ImageDataUtil","__translatePixel",0xf39bf4f7,"lime._internal.graphics.ImageDataUtil.__translatePixel","lime/_internal/graphics/ImageDataUtil.hx",1780,0x59dddace)
namespace lime{
namespace _internal{
namespace graphics{

void ImageDataUtil_obj::__construct() { }

Dynamic ImageDataUtil_obj::__CreateEmpty() { return new ImageDataUtil_obj; }

void *ImageDataUtil_obj::_hx_vtable = 0;

Dynamic ImageDataUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageDataUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2fa36321;
}

void ImageDataUtil_obj::displaceMap( ::lime::graphics::Image target, ::lime::graphics::Image source, ::lime::graphics::Image map, ::lime::math::Vector2 mapPoint, ::lime::math::Vector4 componentX, ::lime::math::Vector4 componentY,bool smooth){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_39_displaceMap)
HXLINE(  40)		 ::lime::utils::ArrayBufferView targetData = target->buffer->data;
HXLINE(  41)		 ::lime::utils::ArrayBufferView sourceData = source->buffer->data;
HXLINE(  42)		 ::lime::utils::ArrayBufferView mapData = map->buffer->data;
HXLINE(  44)		int targetFormat = target->buffer->format;
HXLINE(  45)		int sourceFormat = source->buffer->format;
HXLINE(  46)		int mapFormat = map->buffer->format;
HXLINE(  48)		bool targetPremultiplied = target->get_premultiplied();
HXLINE(  49)		bool sourcePremultiplied = source->get_premultiplied();
HXLINE(  50)		bool mapPremultiplied = map->get_premultiplied();
HXLINE(  52)		 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,source,null());
HXLINE(  53)		 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView mapView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,map,null());
HXLINE(  55)		int row;
HXLINE(  57)		int sourceOffset;
HXLINE(  59)		int sourcePixel;
HXLINE(  60)		int mapPixel;
HXLINE(  61)		int targetPixel;
HXLINE(  63)		Float mapPixelX;
HXLINE(  64)		Float mapPixelY;
HXLINE(  65)		Float mapPixelA;
HXLINE(  68)		int s1;
HXLINE(  69)		int s2;
HXLINE(  70)		int s3;
HXLINE(  71)		int s4;
HXLINE(  73)		int mPointXFloor;
HXLINE(  74)		int mPointYFloor;
HXLINE(  76)		int disOffsetXFloor;
HXLINE(  77)		int disOffsetYFloor;
HXLINE(  79)		Float disX;
HXLINE(  80)		Float disY;
HXLINE(  82)		{
HXLINE(  82)			int _g1 = (int)0;
HXDLIN(  82)			int _g = sourceView->height;
HXDLIN(  82)			while((_g1 < _g)){
HXLINE(  82)				_g1 = (_g1 + (int)1);
HXDLIN(  82)				int y = (_g1 - (int)1);
HXLINE(  83)				int sourceView1 = sourceView->byteOffset;
HXDLIN(  83)				row = (sourceView1 + (sourceView->stride * y));
HXLINE(  85)				{
HXLINE(  85)					int _g3 = (int)0;
HXDLIN(  85)					int _g2 = sourceView->width;
HXDLIN(  85)					while((_g3 < _g2)){
HXLINE(  85)						_g3 = (_g3 + (int)1);
HXDLIN(  85)						int x = (_g3 - (int)1);
HXLINE(  86)						sourceOffset = (row + (x * (int)4));
HXLINE(  88)						mPointXFloor = ::Std_obj::_hx_int(mapPoint->x);
HXLINE(  89)						mPointYFloor = ::Std_obj::_hx_int(mapPoint->y);
HXLINE(  91)						if (smooth) {
HXLINE(  92)							{
HXLINE(  92)								int sourceView2 = sourceView->byteOffset;
HXDLIN(  92)								int sourceView3 = sourceView->stride;
HXDLIN(  92)								int offset = (sourceView2 + (sourceView3 * ((y - mPointYFloor) + (int)1)));
HXDLIN(  92)								int offset1 = (offset + ((x - mPointXFloor) * (int)4));
HXDLIN(  92)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  92)										int r = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & (int)(int)255);
HXDLIN(  92)										int mapData1 = mapData->byteOffset;
HXDLIN(  92)										int g = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(  92)										int mapData2 = mapData->byteOffset;
HXDLIN(  92)										int b = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(  92)										int mapData3 = mapData->byteOffset;
HXDLIN(  92)										s1 = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  92)										int mapData4 = mapData->byteOffset;
HXDLIN(  92)										int r1 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(  92)										int mapData5 = mapData->byteOffset;
HXDLIN(  92)										int g1 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(  92)										int mapData6 = mapData->byteOffset;
HXDLIN(  92)										int b1 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN(  92)										s1 = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  92)										int mapData7 = mapData->byteOffset;
HXDLIN(  92)										int r2 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(  92)										int mapData8 = mapData->byteOffset;
HXDLIN(  92)										int g2 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(  92)										int b2 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & (int)(int)255);
HXDLIN(  92)										int mapData9 = mapData->byteOffset;
HXDLIN(  92)										s1 = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  92)								if (mapPremultiplied) {
HXLINE(  92)									bool _hx_tmp;
HXDLIN(  92)									if ((((int)s1 & (int)(int)255) != (int)0)) {
HXLINE(  92)										_hx_tmp = (((int)s1 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  92)										_hx_tmp = false;
            									}
HXDLIN(  92)									if (_hx_tmp) {
HXLINE(  92)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s1 & (int)(int)255));
HXDLIN(  92)										{
HXLINE(  92)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  92)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  92)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											s1 = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s1 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  93)							{
HXLINE(  93)								int sourceView4 = sourceView->byteOffset;
HXDLIN(  93)								int sourceView5 = sourceView->stride;
HXDLIN(  93)								int offset2 = (sourceView4 + (sourceView5 * (y - mPointYFloor)));
HXDLIN(  93)								int offset3 = (offset2 + (((x - mPointXFloor) + (int)1) * (int)4));
HXDLIN(  93)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  93)										int r4 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & (int)(int)255);
HXDLIN(  93)										int mapData10 = mapData->byteOffset;
HXDLIN(  93)										int g4 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData10 + (offset3 + (int)1))) & (int)(int)255);
HXDLIN(  93)										int mapData11 = mapData->byteOffset;
HXDLIN(  93)										int b3 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData11 + (offset3 + (int)2))) & (int)(int)255);
HXDLIN(  93)										int mapData12 = mapData->byteOffset;
HXDLIN(  93)										s2 = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData12 + (offset3 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  93)										int mapData13 = mapData->byteOffset;
HXDLIN(  93)										int r5 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData13 + (offset3 + (int)1))) & (int)(int)255);
HXDLIN(  93)										int mapData14 = mapData->byteOffset;
HXDLIN(  93)										int g5 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData14 + (offset3 + (int)2))) & (int)(int)255);
HXDLIN(  93)										int mapData15 = mapData->byteOffset;
HXDLIN(  93)										int b4 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData15 + (offset3 + (int)3))) & (int)(int)255);
HXDLIN(  93)										s2 = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  93)										int mapData16 = mapData->byteOffset;
HXDLIN(  93)										int r6 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData16 + (offset3 + (int)2))) & (int)(int)255);
HXDLIN(  93)										int mapData17 = mapData->byteOffset;
HXDLIN(  93)										int g6 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData17 + (offset3 + (int)1))) & (int)(int)255);
HXDLIN(  93)										int b5 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & (int)(int)255);
HXDLIN(  93)										int mapData18 = mapData->byteOffset;
HXDLIN(  93)										s2 = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData18 + (offset3 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  93)								if (mapPremultiplied) {
HXLINE(  93)									bool _hx_tmp1;
HXDLIN(  93)									if ((((int)s2 & (int)(int)255) != (int)0)) {
HXLINE(  93)										_hx_tmp1 = (((int)s2 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  93)										_hx_tmp1 = false;
            									}
HXDLIN(  93)									if (_hx_tmp1) {
HXLINE(  93)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s2 & (int)(int)255));
HXDLIN(  93)										{
HXLINE(  93)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  93)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  93)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  93)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  93)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  93)											s2 = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s2 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  94)							{
HXLINE(  94)								int sourceView6 = sourceView->byteOffset;
HXDLIN(  94)								int sourceView7 = sourceView->stride;
HXDLIN(  94)								int offset4 = (sourceView6 + (sourceView7 * ((y - mPointYFloor) + (int)1)));
HXDLIN(  94)								int offset5 = (offset4 + (((x - mPointXFloor) + (int)1) * (int)4));
HXDLIN(  94)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  94)										int r8 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset5)) & (int)(int)255);
HXDLIN(  94)										int mapData19 = mapData->byteOffset;
HXDLIN(  94)										int g8 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData19 + (offset5 + (int)1))) & (int)(int)255);
HXDLIN(  94)										int mapData20 = mapData->byteOffset;
HXDLIN(  94)										int b6 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData20 + (offset5 + (int)2))) & (int)(int)255);
HXDLIN(  94)										int mapData21 = mapData->byteOffset;
HXDLIN(  94)										s3 = ((int)((int)((int)((int)((int)r8 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g8 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData21 + (offset5 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  94)										int mapData22 = mapData->byteOffset;
HXDLIN(  94)										int r9 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData22 + (offset5 + (int)1))) & (int)(int)255);
HXDLIN(  94)										int mapData23 = mapData->byteOffset;
HXDLIN(  94)										int g9 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData23 + (offset5 + (int)2))) & (int)(int)255);
HXDLIN(  94)										int mapData24 = mapData->byteOffset;
HXDLIN(  94)										int b7 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData24 + (offset5 + (int)3))) & (int)(int)255);
HXDLIN(  94)										s3 = ((int)((int)((int)((int)((int)r9 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g9 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b7 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset5)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  94)										int mapData25 = mapData->byteOffset;
HXDLIN(  94)										int r10 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData25 + (offset5 + (int)2))) & (int)(int)255);
HXDLIN(  94)										int mapData26 = mapData->byteOffset;
HXDLIN(  94)										int g10 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData26 + (offset5 + (int)1))) & (int)(int)255);
HXDLIN(  94)										int b8 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset5)) & (int)(int)255);
HXDLIN(  94)										int mapData27 = mapData->byteOffset;
HXDLIN(  94)										s3 = ((int)((int)((int)((int)((int)r10 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g10 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b8 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData27 + (offset5 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  94)								if (mapPremultiplied) {
HXLINE(  94)									bool _hx_tmp2;
HXDLIN(  94)									if ((((int)s3 & (int)(int)255) != (int)0)) {
HXLINE(  94)										_hx_tmp2 = (((int)s3 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  94)										_hx_tmp2 = false;
            									}
HXDLIN(  94)									if (_hx_tmp2) {
HXLINE(  94)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s3 & (int)(int)255));
HXDLIN(  94)										{
HXLINE(  94)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  94)											int r11 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  94)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  94)											int g11 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  94)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  94)											s3 = ((int)((int)((int)((int)((int)r11 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g11 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s3 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  95)							{
HXLINE(  95)								int sourceView8 = sourceView->byteOffset;
HXDLIN(  95)								int sourceView9 = sourceView->stride;
HXDLIN(  95)								int offset6 = (sourceView8 + (sourceView9 * (y - mPointYFloor)));
HXDLIN(  95)								int offset7 = (offset6 + ((x - mPointXFloor) * (int)4));
HXDLIN(  95)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  95)										int r12 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset7)) & (int)(int)255);
HXDLIN(  95)										int mapData28 = mapData->byteOffset;
HXDLIN(  95)										int g12 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData28 + (offset7 + (int)1))) & (int)(int)255);
HXDLIN(  95)										int mapData29 = mapData->byteOffset;
HXDLIN(  95)										int b9 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData29 + (offset7 + (int)2))) & (int)(int)255);
HXDLIN(  95)										int mapData30 = mapData->byteOffset;
HXDLIN(  95)										s4 = ((int)((int)((int)((int)((int)r12 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g12 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b9 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData30 + (offset7 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  95)										int mapData31 = mapData->byteOffset;
HXDLIN(  95)										int r13 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData31 + (offset7 + (int)1))) & (int)(int)255);
HXDLIN(  95)										int mapData32 = mapData->byteOffset;
HXDLIN(  95)										int g13 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData32 + (offset7 + (int)2))) & (int)(int)255);
HXDLIN(  95)										int mapData33 = mapData->byteOffset;
HXDLIN(  95)										int b10 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData33 + (offset7 + (int)3))) & (int)(int)255);
HXDLIN(  95)										s4 = ((int)((int)((int)((int)((int)r13 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g13 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b10 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset7)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  95)										int mapData34 = mapData->byteOffset;
HXDLIN(  95)										int r14 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData34 + (offset7 + (int)2))) & (int)(int)255);
HXDLIN(  95)										int mapData35 = mapData->byteOffset;
HXDLIN(  95)										int g14 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData35 + (offset7 + (int)1))) & (int)(int)255);
HXDLIN(  95)										int b11 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset7)) & (int)(int)255);
HXDLIN(  95)										int mapData36 = mapData->byteOffset;
HXDLIN(  95)										s4 = ((int)((int)((int)((int)((int)r14 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g14 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b11 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData36 + (offset7 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  95)								if (mapPremultiplied) {
HXLINE(  95)									bool _hx_tmp3;
HXDLIN(  95)									if ((((int)s4 & (int)(int)255) != (int)0)) {
HXLINE(  95)										_hx_tmp3 = (((int)s4 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  95)										_hx_tmp3 = false;
            									}
HXDLIN(  95)									if (_hx_tmp3) {
HXLINE(  95)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s4 & (int)(int)255));
HXDLIN(  95)										{
HXLINE(  95)											 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  95)											int r15 = ((int)::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  95)											 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  95)											int g15 = ((int)::__hxcpp_memory_get_byte(this11->buffer->b,(this11->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  95)											 ::lime::utils::ArrayBufferView this12 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  95)											s4 = ((int)((int)((int)((int)((int)r15 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g15 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this12->buffer->b,(this12->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s4 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  99)							Float mapPixel1 = (mapPoint->x - mPointXFloor);
HXLINE(  97)							mapPixel = ::lime::_internal::graphics::ImageDataUtil_obj::bilinear(s1,s2,s3,s4,mapPixel1,(mapPoint->y - mPointYFloor));
            						}
            						else {
HXLINE( 103)							int mapView1 = mapView->byteOffset;
HXDLIN( 103)							int mapView2 = mapView->stride;
HXDLIN( 103)							int offset8 = (mapView1 + (mapView2 * (y - mPointYFloor)));
HXDLIN( 103)							int offset9 = (offset8 + ((x - mPointXFloor) * (int)4));
HXDLIN( 103)							switch((int)(mapFormat)){
            								case (int)0: {
HXLINE( 103)									int r16 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset9)) & (int)(int)255);
HXDLIN( 103)									int mapData37 = mapData->byteOffset;
HXDLIN( 103)									int g16 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData37 + (offset9 + (int)1))) & (int)(int)255);
HXDLIN( 103)									int mapData38 = mapData->byteOffset;
HXDLIN( 103)									int b12 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData38 + (offset9 + (int)2))) & (int)(int)255);
HXDLIN( 103)									int mapData39 = mapData->byteOffset;
HXDLIN( 103)									mapPixel = ((int)((int)((int)((int)((int)r16 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g16 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b12 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData39 + (offset9 + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 103)									int mapData40 = mapData->byteOffset;
HXDLIN( 103)									int r17 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData40 + (offset9 + (int)1))) & (int)(int)255);
HXDLIN( 103)									int mapData41 = mapData->byteOffset;
HXDLIN( 103)									int g17 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData41 + (offset9 + (int)2))) & (int)(int)255);
HXDLIN( 103)									int mapData42 = mapData->byteOffset;
HXDLIN( 103)									int b13 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData42 + (offset9 + (int)3))) & (int)(int)255);
HXDLIN( 103)									mapPixel = ((int)((int)((int)((int)((int)r17 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g17 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b13 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset9)) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 103)									int mapData43 = mapData->byteOffset;
HXDLIN( 103)									int r18 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData43 + (offset9 + (int)2))) & (int)(int)255);
HXDLIN( 103)									int mapData44 = mapData->byteOffset;
HXDLIN( 103)									int g18 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData44 + (offset9 + (int)1))) & (int)(int)255);
HXDLIN( 103)									int b14 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset9)) & (int)(int)255);
HXDLIN( 103)									int mapData45 = mapData->byteOffset;
HXDLIN( 103)									mapPixel = ((int)((int)((int)((int)((int)r18 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g18 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b14 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData45 + (offset9 + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN( 103)							if (mapPremultiplied) {
HXLINE( 103)								bool _hx_tmp4;
HXDLIN( 103)								if ((((int)mapPixel & (int)(int)255) != (int)0)) {
HXLINE( 103)									_hx_tmp4 = (((int)mapPixel & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE( 103)									_hx_tmp4 = false;
            								}
HXDLIN( 103)								if (_hx_tmp4) {
HXLINE( 103)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)mapPixel & (int)(int)255));
HXDLIN( 103)									{
HXLINE( 103)										 ::lime::utils::ArrayBufferView this13 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 103)										int r19 = ((int)::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round((((int)hx::UShr(mapPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 103)										 ::lime::utils::ArrayBufferView this14 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 103)										int g19 = ((int)::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((((int)hx::UShr(mapPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 103)										 ::lime::utils::ArrayBufferView this15 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 103)										mapPixel = ((int)((int)((int)((int)((int)r19 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g19 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this15->buffer->b,(this15->byteOffset + ::Math_obj::round((((int)hx::UShr(mapPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)mapPixel & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
            						}
HXLINE( 106)						mapPixelA = ((Float)((int)mapPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 107)						mapPixelX = (((Float)(((int)hx::UShr(mapPixel,(int)24) & (int)(int)255) - (int)128) / (Float)((Float)255.0)) * mapPixelA);
HXLINE( 108)						mapPixelY = (((Float)(((int)hx::UShr(mapPixel,(int)16) & (int)(int)255) - (int)128) / (Float)((Float)255.0)) * mapPixelA);
HXLINE( 110)						Float disX1 = (mapPixelX * componentX->x);
HXDLIN( 110)						disX = (disX1 + (mapPixelY * componentY->x));
HXLINE( 111)						Float disY1 = (mapPixelX * componentX->y);
HXDLIN( 111)						disY = (disY1 + (mapPixelY * componentY->y));
HXLINE( 113)						disOffsetXFloor = ::Math_obj::floor((disX * sourceView->width));
HXLINE( 114)						disOffsetYFloor = ::Math_obj::floor((disY * sourceView->height));
HXLINE( 116)						if (smooth) {
HXLINE( 117)							{
HXLINE( 117)								int sourceView10 = sourceView->byteOffset;
HXDLIN( 117)								int sourceView11 = sourceView->stride;
HXDLIN( 117)								int offset10 = (sourceView10 + (sourceView11 * ((y + disOffsetYFloor) + (int)1)));
HXDLIN( 117)								int offset11 = (offset10 + ((x + disOffsetXFloor) * (int)4));
HXDLIN( 117)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 117)										int r20 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset11)) & (int)(int)255);
HXDLIN( 117)										int sourceData1 = sourceData->byteOffset;
HXDLIN( 117)										int g20 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (offset11 + (int)1))) & (int)(int)255);
HXDLIN( 117)										int sourceData2 = sourceData->byteOffset;
HXDLIN( 117)										int b15 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (offset11 + (int)2))) & (int)(int)255);
HXDLIN( 117)										int sourceData3 = sourceData->byteOffset;
HXDLIN( 117)										s1 = ((int)((int)((int)((int)((int)r20 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g20 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b15 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (offset11 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 117)										int sourceData4 = sourceData->byteOffset;
HXDLIN( 117)										int r21 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (offset11 + (int)1))) & (int)(int)255);
HXDLIN( 117)										int sourceData5 = sourceData->byteOffset;
HXDLIN( 117)										int g21 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (offset11 + (int)2))) & (int)(int)255);
HXDLIN( 117)										int sourceData6 = sourceData->byteOffset;
HXDLIN( 117)										int b16 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (offset11 + (int)3))) & (int)(int)255);
HXDLIN( 117)										s1 = ((int)((int)((int)((int)((int)r21 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g21 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b16 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset11)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 117)										int sourceData7 = sourceData->byteOffset;
HXDLIN( 117)										int r22 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (offset11 + (int)2))) & (int)(int)255);
HXDLIN( 117)										int sourceData8 = sourceData->byteOffset;
HXDLIN( 117)										int g22 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (offset11 + (int)1))) & (int)(int)255);
HXDLIN( 117)										int b17 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset11)) & (int)(int)255);
HXDLIN( 117)										int sourceData9 = sourceData->byteOffset;
HXDLIN( 117)										s1 = ((int)((int)((int)((int)((int)r22 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g22 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b17 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (offset11 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 117)								if (sourcePremultiplied) {
HXLINE( 117)									bool _hx_tmp5;
HXDLIN( 117)									if ((((int)s1 & (int)(int)255) != (int)0)) {
HXLINE( 117)										_hx_tmp5 = (((int)s1 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 117)										_hx_tmp5 = false;
            									}
HXDLIN( 117)									if (_hx_tmp5) {
HXLINE( 117)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s1 & (int)(int)255));
HXDLIN( 117)										{
HXLINE( 117)											 ::lime::utils::ArrayBufferView this16 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 117)											int r23 = ((int)::__hxcpp_memory_get_byte(this16->buffer->b,(this16->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 117)											 ::lime::utils::ArrayBufferView this17 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 117)											int g23 = ((int)::__hxcpp_memory_get_byte(this17->buffer->b,(this17->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 117)											 ::lime::utils::ArrayBufferView this18 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 117)											s1 = ((int)((int)((int)((int)((int)r23 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g23 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s1 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 118)							{
HXLINE( 118)								int sourceView12 = sourceView->byteOffset;
HXDLIN( 118)								int sourceView13 = sourceView->stride;
HXDLIN( 118)								int offset12 = (sourceView12 + (sourceView13 * (y + disOffsetYFloor)));
HXDLIN( 118)								int offset13 = (offset12 + (((x + disOffsetXFloor) + (int)1) * (int)4));
HXDLIN( 118)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 118)										int r24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset13)) & (int)(int)255);
HXDLIN( 118)										int sourceData10 = sourceData->byteOffset;
HXDLIN( 118)										int g24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData10 + (offset13 + (int)1))) & (int)(int)255);
HXDLIN( 118)										int sourceData11 = sourceData->byteOffset;
HXDLIN( 118)										int b18 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData11 + (offset13 + (int)2))) & (int)(int)255);
HXDLIN( 118)										int sourceData12 = sourceData->byteOffset;
HXDLIN( 118)										s2 = ((int)((int)((int)((int)((int)r24 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g24 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b18 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData12 + (offset13 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 118)										int sourceData13 = sourceData->byteOffset;
HXDLIN( 118)										int r25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData13 + (offset13 + (int)1))) & (int)(int)255);
HXDLIN( 118)										int sourceData14 = sourceData->byteOffset;
HXDLIN( 118)										int g25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData14 + (offset13 + (int)2))) & (int)(int)255);
HXDLIN( 118)										int sourceData15 = sourceData->byteOffset;
HXDLIN( 118)										int b19 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData15 + (offset13 + (int)3))) & (int)(int)255);
HXDLIN( 118)										s2 = ((int)((int)((int)((int)((int)r25 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g25 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b19 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset13)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 118)										int sourceData16 = sourceData->byteOffset;
HXDLIN( 118)										int r26 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData16 + (offset13 + (int)2))) & (int)(int)255);
HXDLIN( 118)										int sourceData17 = sourceData->byteOffset;
HXDLIN( 118)										int g26 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData17 + (offset13 + (int)1))) & (int)(int)255);
HXDLIN( 118)										int b20 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset13)) & (int)(int)255);
HXDLIN( 118)										int sourceData18 = sourceData->byteOffset;
HXDLIN( 118)										s2 = ((int)((int)((int)((int)((int)r26 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g26 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b20 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData18 + (offset13 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 118)								if (sourcePremultiplied) {
HXLINE( 118)									bool _hx_tmp6;
HXDLIN( 118)									if ((((int)s2 & (int)(int)255) != (int)0)) {
HXLINE( 118)										_hx_tmp6 = (((int)s2 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 118)										_hx_tmp6 = false;
            									}
HXDLIN( 118)									if (_hx_tmp6) {
HXLINE( 118)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s2 & (int)(int)255));
HXDLIN( 118)										{
HXLINE( 118)											 ::lime::utils::ArrayBufferView this19 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 118)											int r27 = ((int)::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 118)											 ::lime::utils::ArrayBufferView this20 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 118)											int g27 = ((int)::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 118)											 ::lime::utils::ArrayBufferView this21 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 118)											s2 = ((int)((int)((int)((int)((int)r27 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g27 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s2 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 119)							{
HXLINE( 119)								int sourceView14 = sourceView->byteOffset;
HXDLIN( 119)								int sourceView15 = sourceView->stride;
HXDLIN( 119)								int offset14 = (sourceView14 + (sourceView15 * ((y + disOffsetYFloor) + (int)1)));
HXDLIN( 119)								int offset15 = (offset14 + (((x + disOffsetXFloor) + (int)1) * (int)4));
HXDLIN( 119)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 119)										int r28 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset15)) & (int)(int)255);
HXDLIN( 119)										int sourceData19 = sourceData->byteOffset;
HXDLIN( 119)										int g28 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData19 + (offset15 + (int)1))) & (int)(int)255);
HXDLIN( 119)										int sourceData20 = sourceData->byteOffset;
HXDLIN( 119)										int b21 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData20 + (offset15 + (int)2))) & (int)(int)255);
HXDLIN( 119)										int sourceData21 = sourceData->byteOffset;
HXDLIN( 119)										s3 = ((int)((int)((int)((int)((int)r28 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g28 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b21 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData21 + (offset15 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 119)										int sourceData22 = sourceData->byteOffset;
HXDLIN( 119)										int r29 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData22 + (offset15 + (int)1))) & (int)(int)255);
HXDLIN( 119)										int sourceData23 = sourceData->byteOffset;
HXDLIN( 119)										int g29 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData23 + (offset15 + (int)2))) & (int)(int)255);
HXDLIN( 119)										int sourceData24 = sourceData->byteOffset;
HXDLIN( 119)										int b22 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData24 + (offset15 + (int)3))) & (int)(int)255);
HXDLIN( 119)										s3 = ((int)((int)((int)((int)((int)r29 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g29 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b22 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset15)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 119)										int sourceData25 = sourceData->byteOffset;
HXDLIN( 119)										int r30 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData25 + (offset15 + (int)2))) & (int)(int)255);
HXDLIN( 119)										int sourceData26 = sourceData->byteOffset;
HXDLIN( 119)										int g30 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData26 + (offset15 + (int)1))) & (int)(int)255);
HXDLIN( 119)										int b23 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset15)) & (int)(int)255);
HXDLIN( 119)										int sourceData27 = sourceData->byteOffset;
HXDLIN( 119)										s3 = ((int)((int)((int)((int)((int)r30 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g30 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b23 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData27 + (offset15 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 119)								if (sourcePremultiplied) {
HXLINE( 119)									bool _hx_tmp7;
HXDLIN( 119)									if ((((int)s3 & (int)(int)255) != (int)0)) {
HXLINE( 119)										_hx_tmp7 = (((int)s3 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 119)										_hx_tmp7 = false;
            									}
HXDLIN( 119)									if (_hx_tmp7) {
HXLINE( 119)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s3 & (int)(int)255));
HXDLIN( 119)										{
HXLINE( 119)											 ::lime::utils::ArrayBufferView this22 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 119)											int r31 = ((int)::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 119)											 ::lime::utils::ArrayBufferView this23 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 119)											int g31 = ((int)::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 119)											 ::lime::utils::ArrayBufferView this24 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 119)											s3 = ((int)((int)((int)((int)((int)r31 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g31 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s3 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 120)							{
HXLINE( 120)								int sourceView16 = sourceView->byteOffset;
HXDLIN( 120)								int sourceView17 = sourceView->stride;
HXDLIN( 120)								int offset16 = (sourceView16 + (sourceView17 * (y + disOffsetYFloor)));
HXDLIN( 120)								int offset17 = (offset16 + ((x + disOffsetXFloor) * (int)4));
HXDLIN( 120)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 120)										int r32 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset17)) & (int)(int)255);
HXDLIN( 120)										int sourceData28 = sourceData->byteOffset;
HXDLIN( 120)										int g32 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData28 + (offset17 + (int)1))) & (int)(int)255);
HXDLIN( 120)										int sourceData29 = sourceData->byteOffset;
HXDLIN( 120)										int b24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData29 + (offset17 + (int)2))) & (int)(int)255);
HXDLIN( 120)										int sourceData30 = sourceData->byteOffset;
HXDLIN( 120)										s4 = ((int)((int)((int)((int)((int)r32 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g32 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b24 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData30 + (offset17 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 120)										int sourceData31 = sourceData->byteOffset;
HXDLIN( 120)										int r33 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData31 + (offset17 + (int)1))) & (int)(int)255);
HXDLIN( 120)										int sourceData32 = sourceData->byteOffset;
HXDLIN( 120)										int g33 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData32 + (offset17 + (int)2))) & (int)(int)255);
HXDLIN( 120)										int sourceData33 = sourceData->byteOffset;
HXDLIN( 120)										int b25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData33 + (offset17 + (int)3))) & (int)(int)255);
HXDLIN( 120)										s4 = ((int)((int)((int)((int)((int)r33 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g33 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b25 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset17)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 120)										int sourceData34 = sourceData->byteOffset;
HXDLIN( 120)										int r34 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData34 + (offset17 + (int)2))) & (int)(int)255);
HXDLIN( 120)										int sourceData35 = sourceData->byteOffset;
HXDLIN( 120)										int g34 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData35 + (offset17 + (int)1))) & (int)(int)255);
HXDLIN( 120)										int b26 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset17)) & (int)(int)255);
HXDLIN( 120)										int sourceData36 = sourceData->byteOffset;
HXDLIN( 120)										s4 = ((int)((int)((int)((int)((int)r34 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g34 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b26 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData36 + (offset17 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 120)								if (sourcePremultiplied) {
HXLINE( 120)									bool _hx_tmp8;
HXDLIN( 120)									if ((((int)s4 & (int)(int)255) != (int)0)) {
HXLINE( 120)										_hx_tmp8 = (((int)s4 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 120)										_hx_tmp8 = false;
            									}
HXDLIN( 120)									if (_hx_tmp8) {
HXLINE( 120)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s4 & (int)(int)255));
HXDLIN( 120)										{
HXLINE( 120)											 ::lime::utils::ArrayBufferView this25 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 120)											int r35 = ((int)::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 120)											 ::lime::utils::ArrayBufferView this26 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 120)											int g35 = ((int)::__hxcpp_memory_get_byte(this26->buffer->b,(this26->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 120)											 ::lime::utils::ArrayBufferView this27 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 120)											s4 = ((int)((int)((int)((int)((int)r35 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g35 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s4 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 124)							Float sourcePixel1 = ((disX * sourceView->width) - disOffsetXFloor);
HXLINE( 122)							sourcePixel = ::lime::_internal::graphics::ImageDataUtil_obj::bilinear(s1,s2,s3,s4,sourcePixel1,((disY * sourceView->height) - disOffsetYFloor));
            						}
            						else {
HXLINE( 128)							int sourceView18 = sourceView->byteOffset;
HXDLIN( 128)							int sourceView19 = sourceView->stride;
HXDLIN( 128)							int offset18 = (sourceView18 + (sourceView19 * (y + disOffsetYFloor)));
HXDLIN( 128)							int offset19 = (offset18 + ((x + disOffsetXFloor) * (int)4));
HXDLIN( 128)							switch((int)(sourceFormat)){
            								case (int)0: {
HXLINE( 128)									int r36 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset19)) & (int)(int)255);
HXDLIN( 128)									int sourceData37 = sourceData->byteOffset;
HXDLIN( 128)									int g36 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData37 + (offset19 + (int)1))) & (int)(int)255);
HXDLIN( 128)									int sourceData38 = sourceData->byteOffset;
HXDLIN( 128)									int b27 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData38 + (offset19 + (int)2))) & (int)(int)255);
HXDLIN( 128)									int sourceData39 = sourceData->byteOffset;
HXDLIN( 128)									sourcePixel = ((int)((int)((int)((int)((int)r36 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g36 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b27 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData39 + (offset19 + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 128)									int sourceData40 = sourceData->byteOffset;
HXDLIN( 128)									int r37 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData40 + (offset19 + (int)1))) & (int)(int)255);
HXDLIN( 128)									int sourceData41 = sourceData->byteOffset;
HXDLIN( 128)									int g37 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData41 + (offset19 + (int)2))) & (int)(int)255);
HXDLIN( 128)									int sourceData42 = sourceData->byteOffset;
HXDLIN( 128)									int b28 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData42 + (offset19 + (int)3))) & (int)(int)255);
HXDLIN( 128)									sourcePixel = ((int)((int)((int)((int)((int)r37 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g37 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b28 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset19)) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 128)									int sourceData43 = sourceData->byteOffset;
HXDLIN( 128)									int r38 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData43 + (offset19 + (int)2))) & (int)(int)255);
HXDLIN( 128)									int sourceData44 = sourceData->byteOffset;
HXDLIN( 128)									int g38 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData44 + (offset19 + (int)1))) & (int)(int)255);
HXDLIN( 128)									int b29 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset19)) & (int)(int)255);
HXDLIN( 128)									int sourceData45 = sourceData->byteOffset;
HXDLIN( 128)									sourcePixel = ((int)((int)((int)((int)((int)r38 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g38 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b29 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData45 + (offset19 + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN( 128)							if (sourcePremultiplied) {
HXLINE( 128)								bool _hx_tmp9;
HXDLIN( 128)								if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 128)									_hx_tmp9 = (((int)sourcePixel & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE( 128)									_hx_tmp9 = false;
            								}
HXDLIN( 128)								if (_hx_tmp9) {
HXLINE( 128)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 128)									{
HXLINE( 128)										 ::lime::utils::ArrayBufferView this28 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 128)										int r39 = ((int)::__hxcpp_memory_get_byte(this28->buffer->b,(this28->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 128)										 ::lime::utils::ArrayBufferView this29 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 128)										int g39 = ((int)::__hxcpp_memory_get_byte(this29->buffer->b,(this29->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 128)										 ::lime::utils::ArrayBufferView this30 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 128)										sourcePixel = ((int)((int)((int)((int)((int)r39 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g39 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this30->buffer->b,(this30->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
            						}
HXLINE( 131)						{
HXLINE( 131)							if (targetPremultiplied) {
HXLINE( 131)								if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 131)									if ((sourcePixel != (int)0)) {
HXLINE( 131)										sourcePixel = (int)0;
            									}
            								}
            								else {
HXLINE( 131)									if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 131)										 ::lime::utils::ArrayBufferView this31 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 131)										int this32 = this31->byteOffset;
HXDLIN( 131)										::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this31->buffer->b,(this32 + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 131)										sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
HXDLIN( 131)							switch((int)(targetFormat)){
            								case (int)0: {
HXLINE( 131)									{
HXLINE( 131)										int val = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 131)										::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val);
            									}
HXDLIN( 131)									{
HXLINE( 131)										int val1 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 131)										{
HXLINE( 131)											int targetData1 = targetData->byteOffset;
HXDLIN( 131)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData1 + (sourceOffset + (int)1)),val1);
            										}
            									}
HXDLIN( 131)									{
HXLINE( 131)										int val2 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 131)										{
HXLINE( 131)											int targetData2 = targetData->byteOffset;
HXDLIN( 131)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData2 + (sourceOffset + (int)2)),val2);
            										}
            									}
HXDLIN( 131)									{
HXLINE( 131)										int val3 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 131)										{
HXLINE( 131)											int targetData3 = targetData->byteOffset;
HXDLIN( 131)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData3 + (sourceOffset + (int)3)),val3);
            										}
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 131)									{
HXLINE( 131)										int val4 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 131)										::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val4);
            									}
HXDLIN( 131)									{
HXLINE( 131)										int val5 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 131)										{
HXLINE( 131)											int targetData4 = targetData->byteOffset;
HXDLIN( 131)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData4 + (sourceOffset + (int)1)),val5);
            										}
            									}
HXDLIN( 131)									{
HXLINE( 131)										int val6 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 131)										{
HXLINE( 131)											int targetData5 = targetData->byteOffset;
HXDLIN( 131)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData5 + (sourceOffset + (int)2)),val6);
            										}
            									}
HXDLIN( 131)									{
HXLINE( 131)										int val7 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 131)										{
HXLINE( 131)											int targetData6 = targetData->byteOffset;
HXDLIN( 131)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData6 + (sourceOffset + (int)3)),val7);
            										}
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 131)									{
HXLINE( 131)										int val8 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 131)										::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val8);
            									}
HXDLIN( 131)									{
HXLINE( 131)										int val9 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 131)										{
HXLINE( 131)											int targetData7 = targetData->byteOffset;
HXDLIN( 131)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData7 + (sourceOffset + (int)1)),val9);
            										}
            									}
HXDLIN( 131)									{
HXLINE( 131)										int val10 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 131)										{
HXLINE( 131)											int targetData8 = targetData->byteOffset;
HXDLIN( 131)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData8 + (sourceOffset + (int)2)),val10);
            										}
            									}
HXDLIN( 131)									{
HXLINE( 131)										int val11 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 131)										{
HXLINE( 131)											int targetData9 = targetData->byteOffset;
HXDLIN( 131)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData9 + (sourceOffset + (int)3)),val11);
            										}
            									}
            								}
            								break;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 135)		target->dirty = true;
HXLINE( 136)		target->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,displaceMap,(void))

int ImageDataUtil_obj::bilinear(int s1,int s2,int s3,int s4,Float su,Float sv){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_144_bilinear)
HXLINE( 145)		int _hx_tmp = ::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(s4,s2,su);
HXLINE( 144)		return ::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(_hx_tmp,::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(s1,s3,su),sv);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,bilinear,return )

int ImageDataUtil_obj::lerpRGBA(int v0,int v1,Float x){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_151_lerpRGBA)
HXLINE( 152)		int this1 = (int)0;
HXDLIN( 152)		int result = this1;
HXLINE( 153)		{
HXLINE( 153)			int value = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(((int)hx::UShr(v0,(int)24) & (int)(int)255),((int)hx::UShr(v1,(int)24) & (int)(int)255),x));
HXDLIN( 153)			result = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(result,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(result,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)result & (int)(int)255) & (int)(int)255));
            		}
HXLINE( 154)		{
HXLINE( 154)			int value1 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(((int)hx::UShr(v0,(int)16) & (int)(int)255),((int)hx::UShr(v1,(int)16) & (int)(int)255),x));
HXDLIN( 154)			result = ((int)((int)((int)((int)((int)((int)hx::UShr(result,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(result,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)result & (int)(int)255) & (int)(int)255));
            		}
HXLINE( 155)		{
HXLINE( 155)			int value2 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(((int)hx::UShr(v0,(int)8) & (int)(int)255),((int)hx::UShr(v1,(int)8) & (int)(int)255),x));
HXDLIN( 155)			result = ((int)((int)((int)((int)((int)((int)hx::UShr(result,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(result,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)result & (int)(int)255) & (int)(int)255));
            		}
HXLINE( 156)		{
HXLINE( 156)			int value3 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(((int)v0 & (int)(int)255),((int)v1 & (int)(int)255),x));
HXDLIN( 156)			result = ((int)((int)((int)((int)((int)((int)hx::UShr(result,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(result,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(result,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            		}
HXLINE( 158)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerpRGBA,return )

 ::lime::math::Vector4 ImageDataUtil_obj::lerp4f( ::lime::math::Vector4 v0, ::lime::math::Vector4 v1,Float x){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_162_lerp4f)
HXLINE( 163)		Float _hx_tmp = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->x,v1->x,x);
HXLINE( 164)		Float _hx_tmp1 = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->y,v1->y,x);
HXLINE( 165)		Float _hx_tmp2 = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->z,v1->z,x);
HXLINE( 162)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->w,v1->w,x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerp4f,return )

Float ImageDataUtil_obj::lerp(Float v0,Float v1,Float x){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_171_lerp)
HXDLIN( 171)		return (((((Float)1.0) - x) * v0) + (x * v1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerp,return )

void ImageDataUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_174_colorTransform)
HXLINE( 176)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 177)		if (hx::IsNull( data )) {
HXLINE( 177)			return;
            		}
HXLINE( 180)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 180)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_color_transform(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(colorMatrix));
            		}
            		else {
HXLINE( 184)			int format = image->buffer->format;
HXLINE( 185)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 187)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 189)			 ::lime::utils::ArrayBufferView alphaTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getAlphaTable(colorMatrix);
HXLINE( 190)			 ::lime::utils::ArrayBufferView redTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getRedTable(colorMatrix);
HXLINE( 191)			 ::lime::utils::ArrayBufferView greenTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getGreenTable(colorMatrix);
HXLINE( 192)			 ::lime::utils::ArrayBufferView blueTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getBlueTable(colorMatrix);
HXLINE( 194)			int row;
HXDLIN( 194)			int offset;
HXDLIN( 194)			int pixel;
HXLINE( 196)			{
HXLINE( 196)				int _g1 = (int)0;
HXDLIN( 196)				int _g = dataView->height;
HXDLIN( 196)				while((_g1 < _g)){
HXLINE( 196)					_g1 = (_g1 + (int)1);
HXDLIN( 196)					int y = (_g1 - (int)1);
HXLINE( 198)					int dataView1 = dataView->byteOffset;
HXDLIN( 198)					row = (dataView1 + (dataView->stride * y));
HXLINE( 200)					{
HXLINE( 200)						int _g3 = (int)0;
HXDLIN( 200)						int _g2 = dataView->width;
HXDLIN( 200)						while((_g3 < _g2)){
HXLINE( 200)							_g3 = (_g3 + (int)1);
HXDLIN( 200)							int x = (_g3 - (int)1);
HXLINE( 202)							offset = (row + (x * (int)4));
HXLINE( 204)							{
HXLINE( 204)								switch((int)(format)){
            									case (int)0: {
HXLINE( 204)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 204)										int data1 = data->byteOffset;
HXDLIN( 204)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 204)										int data2 = data->byteOffset;
HXDLIN( 204)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 204)										int data3 = data->byteOffset;
HXDLIN( 204)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 204)										int data4 = data->byteOffset;
HXDLIN( 204)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 204)										int data5 = data->byteOffset;
HXDLIN( 204)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 204)										int data6 = data->byteOffset;
HXDLIN( 204)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN( 204)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 204)										int data7 = data->byteOffset;
HXDLIN( 204)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 204)										int data8 = data->byteOffset;
HXDLIN( 204)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 204)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 204)										int data9 = data->byteOffset;
HXDLIN( 204)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 204)								if (premultiplied) {
HXLINE( 204)									bool _hx_tmp;
HXDLIN( 204)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 204)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 204)										_hx_tmp = false;
            									}
HXDLIN( 204)									if (_hx_tmp) {
HXLINE( 204)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 204)										{
HXLINE( 204)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 204)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 204)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 204)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 204)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 204)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 205)							{
HXLINE( 205)								int r4 = ((int)::__hxcpp_memory_get_byte(redTable->buffer->b,(redTable->byteOffset + ((int)hx::UShr(pixel,(int)24) & (int)(int)255))) & (int)(int)255);
HXDLIN( 205)								int g4 = ((int)::__hxcpp_memory_get_byte(greenTable->buffer->b,(greenTable->byteOffset + ((int)hx::UShr(pixel,(int)16) & (int)(int)255))) & (int)(int)255);
HXDLIN( 205)								int b3 = ((int)::__hxcpp_memory_get_byte(blueTable->buffer->b,(blueTable->byteOffset + ((int)hx::UShr(pixel,(int)8) & (int)(int)255))) & (int)(int)255);
HXDLIN( 205)								pixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaTable->buffer->b,(alphaTable->byteOffset + ((int)pixel & (int)(int)255))) & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 206)							{
HXLINE( 206)								if (premultiplied) {
HXLINE( 206)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE( 206)										if ((pixel != (int)0)) {
HXLINE( 206)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE( 206)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE( 206)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 206)											int this5 = this4->byteOffset;
HXDLIN( 206)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this5 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN( 206)											pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 206)								switch((int)(format)){
            									case (int)0: {
HXLINE( 206)										{
HXLINE( 206)											int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 206)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 206)										{
HXLINE( 206)											int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 206)											{
HXLINE( 206)												int data10 = data->byteOffset;
HXDLIN( 206)												::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN( 206)										{
HXLINE( 206)											int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 206)											{
HXLINE( 206)												int data11 = data->byteOffset;
HXDLIN( 206)												::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN( 206)										{
HXLINE( 206)											int val3 = ((int)pixel & (int)(int)255);
HXDLIN( 206)											{
HXLINE( 206)												int data12 = data->byteOffset;
HXDLIN( 206)												::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 206)										{
HXLINE( 206)											int val4 = ((int)pixel & (int)(int)255);
HXDLIN( 206)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 206)										{
HXLINE( 206)											int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 206)											{
HXLINE( 206)												int data13 = data->byteOffset;
HXDLIN( 206)												::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN( 206)										{
HXLINE( 206)											int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 206)											{
HXLINE( 206)												int data14 = data->byteOffset;
HXDLIN( 206)												::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN( 206)										{
HXLINE( 206)											int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 206)											{
HXLINE( 206)												int data15 = data->byteOffset;
HXDLIN( 206)												::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 206)										{
HXLINE( 206)											int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 206)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 206)										{
HXLINE( 206)											int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 206)											{
HXLINE( 206)												int data16 = data->byteOffset;
HXDLIN( 206)												::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN( 206)										{
HXLINE( 206)											int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 206)											{
HXLINE( 206)												int data17 = data->byteOffset;
HXDLIN( 206)												::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN( 206)										{
HXLINE( 206)											int val11 = ((int)pixel & (int)(int)255);
HXDLIN( 206)											{
HXLINE( 206)												int data18 = data->byteOffset;
HXDLIN( 206)												::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 214)		image->dirty = true;
HXLINE( 215)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,colorTransform,(void))

void ImageDataUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_220_copyChannel)
HXLINE( 222)		int destIdx;
HXDLIN( 222)		switch((int)(_hx_getEnumValueIndex(destChannel))){
            			case (int)0: {
HXLINE( 222)				destIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 222)				destIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 222)				destIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE( 222)				destIdx = (int)3;
            			}
            			break;
            		}
HXLINE( 231)		int srcIdx;
HXDLIN( 231)		switch((int)(_hx_getEnumValueIndex(sourceChannel))){
            			case (int)0: {
HXLINE( 231)				srcIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 231)				srcIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 231)				srcIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE( 231)				srcIdx = (int)3;
            			}
            			break;
            		}
HXLINE( 240)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE( 241)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 243)		bool _hx_tmp;
HXDLIN( 243)		if (hx::IsNotNull( srcData )) {
HXLINE( 243)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE( 243)			_hx_tmp = true;
            		}
HXDLIN( 243)		if (_hx_tmp) {
HXLINE( 243)			return;
            		}
HXLINE( 246)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 246)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_channel(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),srcIdx,destIdx);
            		}
            		else {
HXLINE( 250)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView srcView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 251)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE( 253)			int srcFormat = sourceImage->buffer->format;
HXLINE( 254)			int destFormat = image->buffer->format;
HXLINE( 255)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 256)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 258)			int srcPosition;
HXDLIN( 258)			int destPosition;
HXDLIN( 258)			int srcPixel;
HXDLIN( 258)			int destPixel;
HXDLIN( 258)			int value = (int)0;
HXLINE( 260)			{
HXLINE( 260)				int _g1 = (int)0;
HXDLIN( 260)				int _g = destView->height;
HXDLIN( 260)				while((_g1 < _g)){
HXLINE( 260)					_g1 = (_g1 + (int)1);
HXDLIN( 260)					int y = (_g1 - (int)1);
HXLINE( 262)					int srcView1 = srcView->byteOffset;
HXDLIN( 262)					srcPosition = (srcView1 + (srcView->stride * y));
HXLINE( 263)					int destView1 = destView->byteOffset;
HXDLIN( 263)					destPosition = (destView1 + (destView->stride * y));
HXLINE( 265)					{
HXLINE( 265)						int _g3 = (int)0;
HXDLIN( 265)						int _g2 = destView->width;
HXDLIN( 265)						while((_g3 < _g2)){
HXLINE( 265)							_g3 = (_g3 + (int)1);
HXDLIN( 265)							int x = (_g3 - (int)1);
HXLINE( 267)							{
HXLINE( 267)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE( 267)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 267)										int srcData1 = srcData->byteOffset;
HXDLIN( 267)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData1 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 267)										int srcData2 = srcData->byteOffset;
HXDLIN( 267)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData2 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 267)										int srcData3 = srcData->byteOffset;
HXDLIN( 267)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData3 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 267)										int srcData4 = srcData->byteOffset;
HXDLIN( 267)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData4 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 267)										int srcData5 = srcData->byteOffset;
HXDLIN( 267)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData5 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 267)										int srcData6 = srcData->byteOffset;
HXDLIN( 267)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData6 + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN( 267)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 267)										int srcData7 = srcData->byteOffset;
HXDLIN( 267)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData7 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 267)										int srcData8 = srcData->byteOffset;
HXDLIN( 267)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData8 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 267)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 267)										int srcData9 = srcData->byteOffset;
HXDLIN( 267)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData9 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 267)								if (srcPremultiplied) {
HXLINE( 267)									bool _hx_tmp1;
HXDLIN( 267)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE( 267)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 267)										_hx_tmp1 = false;
            									}
HXDLIN( 267)									if (_hx_tmp1) {
HXLINE( 267)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN( 267)										{
HXLINE( 267)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 267)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 267)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 267)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 267)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 267)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 268)							{
HXLINE( 268)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 268)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 268)										int destData1 = destData->byteOffset;
HXDLIN( 268)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 268)										int destData2 = destData->byteOffset;
HXDLIN( 268)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 268)										int destData3 = destData->byteOffset;
HXDLIN( 268)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 268)										int destData4 = destData->byteOffset;
HXDLIN( 268)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 268)										int destData5 = destData->byteOffset;
HXDLIN( 268)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 268)										int destData6 = destData->byteOffset;
HXDLIN( 268)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 268)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 268)										int destData7 = destData->byteOffset;
HXDLIN( 268)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 268)										int destData8 = destData->byteOffset;
HXDLIN( 268)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 268)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 268)										int destData9 = destData->byteOffset;
HXDLIN( 268)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 268)								if (destPremultiplied) {
HXLINE( 268)									bool _hx_tmp2;
HXDLIN( 268)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 268)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 268)										_hx_tmp2 = false;
            									}
HXDLIN( 268)									if (_hx_tmp2) {
HXLINE( 268)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 268)										{
HXLINE( 268)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 268)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 268)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 268)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 268)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 268)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 270)							switch((int)(srcIdx)){
            								case (int)0: {
HXLINE( 272)									value = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
            								}
            								break;
            								case (int)1: {
HXLINE( 273)									value = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
            								}
            								break;
            								case (int)2: {
HXLINE( 274)									value = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
            								}
            								break;
            								case (int)3: {
HXLINE( 275)									value = ((int)srcPixel & (int)(int)255);
            								}
            								break;
            							}
HXLINE( 279)							switch((int)(destIdx)){
            								case (int)0: {
HXLINE( 281)									destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 282)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 283)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)3: {
HXLINE( 284)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value & (int)(int)255));
            								}
            								break;
            							}
HXLINE( 288)							{
HXLINE( 288)								if (destPremultiplied) {
HXLINE( 288)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 288)										if ((destPixel != (int)0)) {
HXLINE( 288)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 288)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 288)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 288)											int this8 = this7->byteOffset;
HXDLIN( 288)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 288)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 288)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 288)										{
HXLINE( 288)											int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 288)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 288)										{
HXLINE( 288)											int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 288)											{
HXLINE( 288)												int destData10 = destData->byteOffset;
HXDLIN( 288)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            											}
            										}
HXDLIN( 288)										{
HXLINE( 288)											int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 288)											{
HXLINE( 288)												int destData11 = destData->byteOffset;
HXDLIN( 288)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            											}
            										}
HXDLIN( 288)										{
HXLINE( 288)											int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 288)											{
HXLINE( 288)												int destData12 = destData->byteOffset;
HXDLIN( 288)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 288)										{
HXLINE( 288)											int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 288)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 288)										{
HXLINE( 288)											int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 288)											{
HXLINE( 288)												int destData13 = destData->byteOffset;
HXDLIN( 288)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            											}
            										}
HXDLIN( 288)										{
HXLINE( 288)											int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 288)											{
HXLINE( 288)												int destData14 = destData->byteOffset;
HXDLIN( 288)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            											}
            										}
HXDLIN( 288)										{
HXLINE( 288)											int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 288)											{
HXLINE( 288)												int destData15 = destData->byteOffset;
HXDLIN( 288)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 288)										{
HXLINE( 288)											int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 288)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 288)										{
HXLINE( 288)											int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 288)											{
HXLINE( 288)												int destData16 = destData->byteOffset;
HXDLIN( 288)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            											}
            										}
HXDLIN( 288)										{
HXLINE( 288)											int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 288)											{
HXLINE( 288)												int destData17 = destData->byteOffset;
HXDLIN( 288)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            											}
            										}
HXDLIN( 288)										{
HXLINE( 288)											int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 288)											{
HXLINE( 288)												int destData18 = destData->byteOffset;
HXDLIN( 288)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 290)							srcPosition = (srcPosition + (int)4);
HXLINE( 291)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 299)		image->dirty = true;
HXLINE( 300)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,copyChannel,(void))

void ImageDataUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_305_copyPixels)
HXLINE( 307)		bool _hx_tmp;
HXDLIN( 307)		bool _hx_tmp1;
HXDLIN( 307)		bool _hx_tmp2;
HXDLIN( 307)		bool _hx_tmp3;
HXDLIN( 307)		bool _hx_tmp4;
HXDLIN( 307)		bool _hx_tmp5;
HXDLIN( 307)		bool _hx_tmp6;
HXDLIN( 307)		bool _hx_tmp7;
HXDLIN( 307)		bool _hx_tmp8;
HXDLIN( 307)		bool _hx_tmp9;
HXDLIN( 307)		bool _hx_tmp10;
HXDLIN( 307)		if ((image->width == sourceImage->width)) {
HXLINE( 307)			_hx_tmp10 = (image->height == sourceImage->height);
            		}
            		else {
HXLINE( 307)			_hx_tmp10 = false;
            		}
HXDLIN( 307)		if (_hx_tmp10) {
HXLINE( 307)			_hx_tmp9 = (sourceRect->width == sourceImage->width);
            		}
            		else {
HXLINE( 307)			_hx_tmp9 = false;
            		}
HXDLIN( 307)		if (_hx_tmp9) {
HXLINE( 307)			_hx_tmp8 = (sourceRect->height == sourceImage->height);
            		}
            		else {
HXLINE( 307)			_hx_tmp8 = false;
            		}
HXDLIN( 307)		if (_hx_tmp8) {
HXLINE( 307)			_hx_tmp7 = (sourceRect->x == (int)0);
            		}
            		else {
HXLINE( 307)			_hx_tmp7 = false;
            		}
HXDLIN( 307)		if (_hx_tmp7) {
HXLINE( 307)			_hx_tmp6 = (sourceRect->y == (int)0);
            		}
            		else {
HXLINE( 307)			_hx_tmp6 = false;
            		}
HXDLIN( 307)		if (_hx_tmp6) {
HXLINE( 307)			_hx_tmp5 = (destPoint->x == (int)0);
            		}
            		else {
HXLINE( 307)			_hx_tmp5 = false;
            		}
HXDLIN( 307)		if (_hx_tmp5) {
HXLINE( 307)			_hx_tmp4 = (destPoint->y == (int)0);
            		}
            		else {
HXLINE( 307)			_hx_tmp4 = false;
            		}
HXDLIN( 307)		if (_hx_tmp4) {
HXLINE( 307)			_hx_tmp3 = hx::IsNull( alphaImage );
            		}
            		else {
HXLINE( 307)			_hx_tmp3 = false;
            		}
HXDLIN( 307)		if (_hx_tmp3) {
HXLINE( 307)			_hx_tmp2 = hx::IsNull( alphaPoint );
            		}
            		else {
HXLINE( 307)			_hx_tmp2 = false;
            		}
HXDLIN( 307)		if (_hx_tmp2) {
HXLINE( 307)			_hx_tmp1 = (mergeAlpha == false);
            		}
            		else {
HXLINE( 307)			_hx_tmp1 = false;
            		}
HXDLIN( 307)		if (_hx_tmp1) {
HXLINE( 307)			int _hx_tmp11 = image->get_format();
HXDLIN( 307)			_hx_tmp = (_hx_tmp11 == sourceImage->get_format());
            		}
            		else {
HXLINE( 307)			_hx_tmp = false;
            		}
HXDLIN( 307)		if (_hx_tmp) {
HXLINE( 309)			 ::lime::utils::ArrayBufferView _this = image->buffer->data;
HXDLIN( 309)			 ::lime::utils::ArrayBufferView view = sourceImage->buffer->data;
HXDLIN( 309)			int offset = (int)0;
HXDLIN( 309)			if (hx::IsNotNull( view )) {
HXLINE( 309)				 ::haxe::io::Bytes _this1 = _this->buffer;
HXDLIN( 309)				_this1->blit((offset * _this->bytesPerElement),view->buffer,view->byteOffset,view->byteLength);
            			}
            			else {
HXLINE( 309)				HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            			}
            		}
            		else {
HXLINE( 314)			if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 314)				::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_pixels(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),hx::DynamicPtr(alphaImage),hx::DynamicPtr(alphaPoint),mergeAlpha);
            			}
            			else {
HXLINE( 318)				 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 319)				 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 321)				bool _hx_tmp12;
HXDLIN( 321)				if (hx::IsNotNull( sourceData )) {
HXLINE( 321)					_hx_tmp12 = hx::IsNull( destData );
            				}
            				else {
HXLINE( 321)					_hx_tmp12 = true;
            				}
HXDLIN( 321)				if (_hx_tmp12) {
HXLINE( 321)					return;
            				}
HXLINE( 323)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 324)				 ::lime::math::Rectangle destRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height);
HXLINE( 325)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,destRect);
HXLINE( 327)				int sourceFormat = sourceImage->buffer->format;
HXLINE( 328)				int destFormat = image->buffer->format;
HXLINE( 330)				int sourcePosition;
HXDLIN( 330)				int destPosition;
HXLINE( 331)				Float sourceAlpha;
HXDLIN( 331)				Float destAlpha;
HXDLIN( 331)				Float oneMinusSourceAlpha;
HXDLIN( 331)				Float blendAlpha;
HXLINE( 332)				int sourcePixel;
HXDLIN( 332)				int destPixel;
HXLINE( 334)				bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 335)				bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 336)				int sourceBytesPerPixel = ::Std_obj::_hx_int(((Float)sourceImage->buffer->bitsPerPixel / (Float)(int)8));
HXLINE( 337)				int destBytesPerPixel = ::Std_obj::_hx_int(((Float)image->buffer->bitsPerPixel / (Float)(int)8));
HXLINE( 339)				bool useAlphaImage;
HXDLIN( 339)				if (hx::IsNotNull( alphaImage )) {
HXLINE( 339)					useAlphaImage = alphaImage->get_transparent();
            				}
            				else {
HXLINE( 339)					useAlphaImage = false;
            				}
HXLINE( 340)				bool blend;
HXDLIN( 340)				if (!(mergeAlpha)) {
HXLINE( 340)					if (useAlphaImage) {
HXLINE( 340)						blend = !(image->get_transparent());
            					}
            					else {
HXLINE( 340)						blend = false;
            					}
            				}
            				else {
HXLINE( 340)					blend = true;
            				}
HXLINE( 342)				if (!(useAlphaImage)) {
HXLINE( 344)					if (blend) {
HXLINE( 346)						int _g1 = (int)0;
HXDLIN( 346)						int _g = destView->height;
HXDLIN( 346)						while((_g1 < _g)){
HXLINE( 346)							_g1 = (_g1 + (int)1);
HXDLIN( 346)							int y = (_g1 - (int)1);
HXLINE( 348)							int sourceView1 = sourceView->byteOffset;
HXDLIN( 348)							sourcePosition = (sourceView1 + (sourceView->stride * y));
HXLINE( 349)							int destView1 = destView->byteOffset;
HXDLIN( 349)							destPosition = (destView1 + (destView->stride * y));
HXLINE( 351)							{
HXLINE( 351)								int _g3 = (int)0;
HXDLIN( 351)								int _g2 = destView->width;
HXDLIN( 351)								while((_g3 < _g2)){
HXLINE( 351)									_g3 = (_g3 + (int)1);
HXDLIN( 351)									int x = (_g3 - (int)1);
HXLINE( 353)									{
HXLINE( 353)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 353)												int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 353)												int sourceData1 = sourceData->byteOffset;
HXDLIN( 353)												int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 353)												int sourceData2 = sourceData->byteOffset;
HXDLIN( 353)												int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 353)												int sourceData3 = sourceData->byteOffset;
HXDLIN( 353)												sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 353)												int sourceData4 = sourceData->byteOffset;
HXDLIN( 353)												int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 353)												int sourceData5 = sourceData->byteOffset;
HXDLIN( 353)												int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 353)												int sourceData6 = sourceData->byteOffset;
HXDLIN( 353)												int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 353)												sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 353)												int sourceData7 = sourceData->byteOffset;
HXDLIN( 353)												int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 353)												int sourceData8 = sourceData->byteOffset;
HXDLIN( 353)												int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 353)												int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 353)												int sourceData9 = sourceData->byteOffset;
HXDLIN( 353)												sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 353)										if (sourcePremultiplied) {
HXLINE( 353)											bool _hx_tmp13;
HXDLIN( 353)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 353)												_hx_tmp13 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 353)												_hx_tmp13 = false;
            											}
HXDLIN( 353)											if (_hx_tmp13) {
HXLINE( 353)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 353)												{
HXLINE( 353)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 353)													int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 353)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 353)													int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 353)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 353)													sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 354)									{
HXLINE( 354)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 354)												int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 354)												int destData1 = destData->byteOffset;
HXDLIN( 354)												int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 354)												int destData2 = destData->byteOffset;
HXDLIN( 354)												int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 354)												int destData3 = destData->byteOffset;
HXDLIN( 354)												destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 354)												int destData4 = destData->byteOffset;
HXDLIN( 354)												int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 354)												int destData5 = destData->byteOffset;
HXDLIN( 354)												int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 354)												int destData6 = destData->byteOffset;
HXDLIN( 354)												int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 354)												destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 354)												int destData7 = destData->byteOffset;
HXDLIN( 354)												int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 354)												int destData8 = destData->byteOffset;
HXDLIN( 354)												int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 354)												int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 354)												int destData9 = destData->byteOffset;
HXDLIN( 354)												destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 354)										if (destPremultiplied) {
HXLINE( 354)											bool _hx_tmp14;
HXDLIN( 354)											if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 354)												_hx_tmp14 = (((int)destPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 354)												_hx_tmp14 = false;
            											}
HXDLIN( 354)											if (_hx_tmp14) {
HXLINE( 354)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 354)												{
HXLINE( 354)													 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 354)													int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 354)													 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 354)													int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 354)													 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 354)													destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 356)									sourceAlpha = ((Float)((int)sourcePixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 357)									destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 358)									oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 359)									blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 361)									if ((blendAlpha == (int)0)) {
HXLINE( 363)										destPixel = (int)0;
            									}
            									else {
HXLINE( 367)										{
HXLINE( 367)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 367)											int value = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 367)											destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 368)										{
HXLINE( 368)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 368)											int value1 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 368)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 369)										{
HXLINE( 369)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 369)											int value2 = ((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 369)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 370)										{
HXLINE( 370)											 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 370)											int value3 = ((int)::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255);
HXDLIN( 370)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            										}
            									}
HXLINE( 374)									{
HXLINE( 374)										if (destPremultiplied) {
HXLINE( 374)											if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 374)												if ((destPixel != (int)0)) {
HXLINE( 374)													destPixel = (int)0;
            												}
            											}
            											else {
HXLINE( 374)												if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 374)													 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 374)													int this12 = this11->byteOffset;
HXDLIN( 374)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this11->buffer->b,(this12 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 374)													destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
HXDLIN( 374)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 374)												{
HXLINE( 374)													int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 374)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 374)												{
HXLINE( 374)													int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 374)													{
HXLINE( 374)														int destData10 = destData->byteOffset;
HXDLIN( 374)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            													}
            												}
HXDLIN( 374)												{
HXLINE( 374)													int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 374)													{
HXLINE( 374)														int destData11 = destData->byteOffset;
HXDLIN( 374)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            													}
            												}
HXDLIN( 374)												{
HXLINE( 374)													int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 374)													{
HXLINE( 374)														int destData12 = destData->byteOffset;
HXDLIN( 374)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            													}
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 374)												{
HXLINE( 374)													int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 374)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            												}
HXDLIN( 374)												{
HXLINE( 374)													int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 374)													{
HXLINE( 374)														int destData13 = destData->byteOffset;
HXDLIN( 374)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            													}
            												}
HXDLIN( 374)												{
HXLINE( 374)													int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 374)													{
HXLINE( 374)														int destData14 = destData->byteOffset;
HXDLIN( 374)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            													}
            												}
HXDLIN( 374)												{
HXLINE( 374)													int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 374)													{
HXLINE( 374)														int destData15 = destData->byteOffset;
HXDLIN( 374)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            													}
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 374)												{
HXLINE( 374)													int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 374)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            												}
HXDLIN( 374)												{
HXLINE( 374)													int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 374)													{
HXLINE( 374)														int destData16 = destData->byteOffset;
HXDLIN( 374)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            													}
            												}
HXDLIN( 374)												{
HXLINE( 374)													int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 374)													{
HXLINE( 374)														int destData17 = destData->byteOffset;
HXDLIN( 374)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            													}
            												}
HXDLIN( 374)												{
HXLINE( 374)													int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 374)													{
HXLINE( 374)														int destData18 = destData->byteOffset;
HXDLIN( 374)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            													}
            												}
            											}
            											break;
            										}
            									}
HXLINE( 376)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 377)									destPosition = (destPosition + (int)4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 383)						bool _hx_tmp15;
HXDLIN( 383)						bool _hx_tmp16;
HXDLIN( 383)						if ((sourceFormat == destFormat)) {
HXLINE( 383)							_hx_tmp16 = (sourcePremultiplied == destPremultiplied);
            						}
            						else {
HXLINE( 383)							_hx_tmp16 = false;
            						}
HXDLIN( 383)						if (_hx_tmp16) {
HXLINE( 383)							_hx_tmp15 = (sourceBytesPerPixel == destBytesPerPixel);
            						}
            						else {
HXLINE( 383)							_hx_tmp15 = false;
            						}
HXDLIN( 383)						if (_hx_tmp15) {
HXLINE( 385)							int _g11 = (int)0;
HXDLIN( 385)							int _g4 = destView->height;
HXDLIN( 385)							while((_g11 < _g4)){
HXLINE( 385)								_g11 = (_g11 + (int)1);
HXDLIN( 385)								int y1 = (_g11 - (int)1);
HXLINE( 387)								int sourceView2 = sourceView->byteOffset;
HXDLIN( 387)								sourcePosition = (sourceView2 + (sourceView->stride * y1));
HXLINE( 388)								int destView2 = destView->byteOffset;
HXDLIN( 388)								destPosition = (destView2 + (destView->stride * y1));
HXLINE( 394)								 ::haxe::io::Bytes destData19 = destData->buffer;
HXDLIN( 394)								 ::haxe::io::Bytes sourceData10 = sourceData->buffer;
HXDLIN( 394)								destData19->blit(destPosition,sourceData10,sourcePosition,(destView->width * destBytesPerPixel));
            							}
            						}
            						else {
HXLINE( 401)							int _g12 = (int)0;
HXDLIN( 401)							int _g5 = destView->height;
HXDLIN( 401)							while((_g12 < _g5)){
HXLINE( 401)								_g12 = (_g12 + (int)1);
HXDLIN( 401)								int y2 = (_g12 - (int)1);
HXLINE( 403)								int sourceView3 = sourceView->byteOffset;
HXDLIN( 403)								sourcePosition = (sourceView3 + (sourceView->stride * y2));
HXLINE( 404)								int destView3 = destView->byteOffset;
HXDLIN( 404)								destPosition = (destView3 + (destView->stride * y2));
HXLINE( 406)								{
HXLINE( 406)									int _g31 = (int)0;
HXDLIN( 406)									int _g21 = destView->width;
HXDLIN( 406)									while((_g31 < _g21)){
HXLINE( 406)										_g31 = (_g31 + (int)1);
HXDLIN( 406)										int x1 = (_g31 - (int)1);
HXLINE( 408)										{
HXLINE( 408)											switch((int)(sourceFormat)){
            												case (int)0: {
HXLINE( 408)													int r8 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 408)													int sourceData11 = sourceData->byteOffset;
HXDLIN( 408)													int g8 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData11 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 408)													int sourceData12 = sourceData->byteOffset;
HXDLIN( 408)													int b6 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData12 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 408)													int sourceData13 = sourceData->byteOffset;
HXDLIN( 408)													sourcePixel = ((int)((int)((int)((int)((int)r8 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g8 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData13 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            												}
            												break;
            												case (int)1: {
HXLINE( 408)													int sourceData14 = sourceData->byteOffset;
HXDLIN( 408)													int r9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData14 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 408)													int sourceData15 = sourceData->byteOffset;
HXDLIN( 408)													int g9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData15 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 408)													int sourceData16 = sourceData->byteOffset;
HXDLIN( 408)													int b7 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData16 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 408)													sourcePixel = ((int)((int)((int)((int)((int)r9 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g9 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b7 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            												}
            												break;
            												case (int)2: {
HXLINE( 408)													int sourceData17 = sourceData->byteOffset;
HXDLIN( 408)													int r10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData17 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 408)													int sourceData18 = sourceData->byteOffset;
HXDLIN( 408)													int g10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData18 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 408)													int b8 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 408)													int sourceData19 = sourceData->byteOffset;
HXDLIN( 408)													sourcePixel = ((int)((int)((int)((int)((int)r10 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g10 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b8 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData19 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            												}
            												break;
            											}
HXDLIN( 408)											if (sourcePremultiplied) {
HXLINE( 408)												bool _hx_tmp17;
HXDLIN( 408)												if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 408)													_hx_tmp17 = (((int)sourcePixel & (int)(int)255) != (int)255);
            												}
            												else {
HXLINE( 408)													_hx_tmp17 = false;
            												}
HXDLIN( 408)												if (_hx_tmp17) {
HXLINE( 408)													::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 408)													{
HXLINE( 408)														 ::lime::utils::ArrayBufferView this13 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 408)														int r11 = ((int)::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 408)														 ::lime::utils::ArrayBufferView this14 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 408)														int g11 = ((int)::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 408)														 ::lime::utils::ArrayBufferView this15 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 408)														sourcePixel = ((int)((int)((int)((int)((int)r11 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g11 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this15->buffer->b,(this15->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            													}
            												}
            											}
            										}
HXLINE( 409)										{
HXLINE( 409)											if (destPremultiplied) {
HXLINE( 409)												if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 409)													if ((sourcePixel != (int)0)) {
HXLINE( 409)														sourcePixel = (int)0;
            													}
            												}
            												else {
HXLINE( 409)													if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 409)														 ::lime::utils::ArrayBufferView this16 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 409)														int this17 = this16->byteOffset;
HXDLIN( 409)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this16->buffer->b,(this17 + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 409)														sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            													}
            												}
            											}
HXDLIN( 409)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 409)													{
HXLINE( 409)														int val12 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 409)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val13 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData20 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData20 + (destPosition + (int)1)),val13);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val14 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData21 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData21 + (destPosition + (int)2)),val14);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val15 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData22 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData22 + (destPosition + (int)3)),val15);
            														}
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 409)													{
HXLINE( 409)														int val16 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 409)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val17 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData23 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData23 + (destPosition + (int)1)),val17);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val18 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData24 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData24 + (destPosition + (int)2)),val18);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val19 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData25 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData25 + (destPosition + (int)3)),val19);
            														}
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 409)													{
HXLINE( 409)														int val20 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 409)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val21 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData26 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData26 + (destPosition + (int)1)),val21);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val22 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData27 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData27 + (destPosition + (int)2)),val22);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val23 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData28 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData28 + (destPosition + (int)3)),val23);
            														}
            													}
            												}
            												break;
            											}
            										}
HXLINE( 411)										sourcePosition = (sourcePosition + (int)4);
HXLINE( 412)										destPosition = (destPosition + (int)4);
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 422)					if (hx::IsNull( alphaPoint )) {
HXLINE( 422)						alphaPoint =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            					}
HXLINE( 424)					 ::lime::utils::ArrayBufferView alphaData = alphaImage->buffer->data;
HXLINE( 425)					int alphaFormat = alphaImage->buffer->format;
HXLINE( 426)					int alphaPosition;
HXDLIN( 426)					int alphaPixel;
HXLINE( 428)					 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView alphaView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,alphaImage, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,alphaPoint->x,alphaPoint->y,alphaImage->width,alphaImage->height));
HXLINE( 429)					alphaView->offset(sourceView->x,sourceView->y);
HXLINE( 431)					int _hx_tmp18 = ::Std_obj::_hx_int(destPoint->x);
HXDLIN( 431)					int _hx_tmp19 = ::Std_obj::_hx_int(destPoint->y);
HXDLIN( 431)					destView->clip(_hx_tmp18,_hx_tmp19,alphaView->width,alphaView->height);
HXLINE( 433)					if (blend) {
HXLINE( 435)						int _g13 = (int)0;
HXDLIN( 435)						int _g6 = destView->height;
HXDLIN( 435)						while((_g13 < _g6)){
HXLINE( 435)							_g13 = (_g13 + (int)1);
HXDLIN( 435)							int y3 = (_g13 - (int)1);
HXLINE( 437)							int sourceView4 = sourceView->byteOffset;
HXDLIN( 437)							sourcePosition = (sourceView4 + (sourceView->stride * y3));
HXLINE( 438)							int destView4 = destView->byteOffset;
HXDLIN( 438)							destPosition = (destView4 + (destView->stride * y3));
HXLINE( 439)							int alphaView1 = alphaView->byteOffset;
HXDLIN( 439)							alphaPosition = (alphaView1 + (alphaView->stride * y3));
HXLINE( 441)							{
HXLINE( 441)								int _g32 = (int)0;
HXDLIN( 441)								int _g22 = destView->width;
HXDLIN( 441)								while((_g32 < _g22)){
HXLINE( 441)									_g32 = (_g32 + (int)1);
HXDLIN( 441)									int x2 = (_g32 - (int)1);
HXLINE( 443)									{
HXLINE( 443)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 443)												int r12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 443)												int sourceData20 = sourceData->byteOffset;
HXDLIN( 443)												int g12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData20 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 443)												int sourceData21 = sourceData->byteOffset;
HXDLIN( 443)												int b9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData21 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 443)												int sourceData22 = sourceData->byteOffset;
HXDLIN( 443)												sourcePixel = ((int)((int)((int)((int)((int)r12 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g12 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b9 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData22 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 443)												int sourceData23 = sourceData->byteOffset;
HXDLIN( 443)												int r13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData23 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 443)												int sourceData24 = sourceData->byteOffset;
HXDLIN( 443)												int g13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData24 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 443)												int sourceData25 = sourceData->byteOffset;
HXDLIN( 443)												int b10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData25 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 443)												sourcePixel = ((int)((int)((int)((int)((int)r13 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g13 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b10 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 443)												int sourceData26 = sourceData->byteOffset;
HXDLIN( 443)												int r14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData26 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 443)												int sourceData27 = sourceData->byteOffset;
HXDLIN( 443)												int g14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData27 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 443)												int b11 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 443)												int sourceData28 = sourceData->byteOffset;
HXDLIN( 443)												sourcePixel = ((int)((int)((int)((int)((int)r14 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g14 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b11 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData28 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 443)										if (sourcePremultiplied) {
HXLINE( 443)											bool _hx_tmp20;
HXDLIN( 443)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 443)												_hx_tmp20 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 443)												_hx_tmp20 = false;
            											}
HXDLIN( 443)											if (_hx_tmp20) {
HXLINE( 443)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 443)												{
HXLINE( 443)													 ::lime::utils::ArrayBufferView this18 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 443)													int r15 = ((int)::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 443)													 ::lime::utils::ArrayBufferView this19 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 443)													int g15 = ((int)::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 443)													 ::lime::utils::ArrayBufferView this20 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 443)													sourcePixel = ((int)((int)((int)((int)((int)r15 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g15 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 444)									{
HXLINE( 444)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 444)												int r16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 444)												int destData29 = destData->byteOffset;
HXDLIN( 444)												int g16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData29 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 444)												int destData30 = destData->byteOffset;
HXDLIN( 444)												int b12 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData30 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 444)												int destData31 = destData->byteOffset;
HXDLIN( 444)												destPixel = ((int)((int)((int)((int)((int)r16 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g16 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b12 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData31 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 444)												int destData32 = destData->byteOffset;
HXDLIN( 444)												int r17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData32 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 444)												int destData33 = destData->byteOffset;
HXDLIN( 444)												int g17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData33 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 444)												int destData34 = destData->byteOffset;
HXDLIN( 444)												int b13 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData34 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 444)												destPixel = ((int)((int)((int)((int)((int)r17 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g17 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b13 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 444)												int destData35 = destData->byteOffset;
HXDLIN( 444)												int r18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData35 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 444)												int destData36 = destData->byteOffset;
HXDLIN( 444)												int g18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData36 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 444)												int b14 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 444)												int destData37 = destData->byteOffset;
HXDLIN( 444)												destPixel = ((int)((int)((int)((int)((int)r18 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g18 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b14 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData37 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 444)										if (destPremultiplied) {
HXLINE( 444)											bool _hx_tmp21;
HXDLIN( 444)											if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 444)												_hx_tmp21 = (((int)destPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 444)												_hx_tmp21 = false;
            											}
HXDLIN( 444)											if (_hx_tmp21) {
HXLINE( 444)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 444)												{
HXLINE( 444)													 ::lime::utils::ArrayBufferView this21 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 444)													int r19 = ((int)::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 444)													 ::lime::utils::ArrayBufferView this22 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 444)													int g19 = ((int)::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 444)													 ::lime::utils::ArrayBufferView this23 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 444)													destPixel = ((int)((int)((int)((int)((int)r19 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g19 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 445)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 445)											int r20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 445)											int alphaData1 = alphaData->byteOffset;
HXDLIN( 445)											int g20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData1 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 445)											int alphaData2 = alphaData->byteOffset;
HXDLIN( 445)											int b15 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData2 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 445)											int alphaData3 = alphaData->byteOffset;
HXDLIN( 445)											alphaPixel = ((int)((int)((int)((int)((int)r20 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g20 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b15 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData3 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 445)											int alphaData4 = alphaData->byteOffset;
HXDLIN( 445)											int r21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData4 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 445)											int alphaData5 = alphaData->byteOffset;
HXDLIN( 445)											int g21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData5 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 445)											int alphaData6 = alphaData->byteOffset;
HXDLIN( 445)											int b16 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData6 + (alphaPosition + (int)3))) & (int)(int)255);
HXDLIN( 445)											alphaPixel = ((int)((int)((int)((int)((int)r21 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g21 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b16 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 445)											int alphaData7 = alphaData->byteOffset;
HXDLIN( 445)											int r22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData7 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 445)											int alphaData8 = alphaData->byteOffset;
HXDLIN( 445)											int g22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData8 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 445)											int b17 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 445)											int alphaData9 = alphaData->byteOffset;
HXDLIN( 445)											alphaPixel = ((int)((int)((int)((int)((int)r22 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g22 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b17 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData9 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXLINE( 447)									sourceAlpha = (((Float)((int)alphaPixel & (int)(int)255) / (Float)((Float)255.0)) * ((Float)((int)sourcePixel & (int)(int)255) / (Float)((Float)255.0)));
HXLINE( 449)									if ((sourceAlpha > (int)0)) {
HXLINE( 451)										destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 452)										oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 453)										blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 455)										{
HXLINE( 455)											 ::lime::utils::ArrayBufferView this24 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 455)											int value4 = ((int)::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 455)											destPixel = ((int)((int)((int)((int)((int)value4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 456)										{
HXLINE( 456)											 ::lime::utils::ArrayBufferView this25 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 456)											int value5 = ((int)::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 456)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 457)										{
HXLINE( 457)											 ::lime::utils::ArrayBufferView this26 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 457)											int value6 = ((int)::__hxcpp_memory_get_byte(this26->buffer->b,(this26->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 457)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 458)										{
HXLINE( 458)											 ::lime::utils::ArrayBufferView this27 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 458)											int value7 = ((int)::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255);
HXDLIN( 458)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value7 & (int)(int)255));
            										}
HXLINE( 460)										{
HXLINE( 460)											if (destPremultiplied) {
HXLINE( 460)												if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 460)													if ((destPixel != (int)0)) {
HXLINE( 460)														destPixel = (int)0;
            													}
            												}
            												else {
HXLINE( 460)													if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 460)														 ::lime::utils::ArrayBufferView this28 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 460)														int this29 = this28->byteOffset;
HXDLIN( 460)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this28->buffer->b,(this29 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 460)														destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            													}
            												}
            											}
HXDLIN( 460)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 460)													{
HXLINE( 460)														int val24 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 460)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val24);
            													}
HXDLIN( 460)													{
HXLINE( 460)														int val25 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 460)														{
HXLINE( 460)															int destData38 = destData->byteOffset;
HXDLIN( 460)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData38 + (destPosition + (int)1)),val25);
            														}
            													}
HXDLIN( 460)													{
HXLINE( 460)														int val26 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 460)														{
HXLINE( 460)															int destData39 = destData->byteOffset;
HXDLIN( 460)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData39 + (destPosition + (int)2)),val26);
            														}
            													}
HXDLIN( 460)													{
HXLINE( 460)														int val27 = ((int)destPixel & (int)(int)255);
HXDLIN( 460)														{
HXLINE( 460)															int destData40 = destData->byteOffset;
HXDLIN( 460)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData40 + (destPosition + (int)3)),val27);
            														}
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 460)													{
HXLINE( 460)														int val28 = ((int)destPixel & (int)(int)255);
HXDLIN( 460)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val28);
            													}
HXDLIN( 460)													{
HXLINE( 460)														int val29 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 460)														{
HXLINE( 460)															int destData41 = destData->byteOffset;
HXDLIN( 460)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData41 + (destPosition + (int)1)),val29);
            														}
            													}
HXDLIN( 460)													{
HXLINE( 460)														int val30 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 460)														{
HXLINE( 460)															int destData42 = destData->byteOffset;
HXDLIN( 460)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData42 + (destPosition + (int)2)),val30);
            														}
            													}
HXDLIN( 460)													{
HXLINE( 460)														int val31 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 460)														{
HXLINE( 460)															int destData43 = destData->byteOffset;
HXDLIN( 460)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData43 + (destPosition + (int)3)),val31);
            														}
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 460)													{
HXLINE( 460)														int val32 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 460)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val32);
            													}
HXDLIN( 460)													{
HXLINE( 460)														int val33 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 460)														{
HXLINE( 460)															int destData44 = destData->byteOffset;
HXDLIN( 460)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData44 + (destPosition + (int)1)),val33);
            														}
            													}
HXDLIN( 460)													{
HXLINE( 460)														int val34 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 460)														{
HXLINE( 460)															int destData45 = destData->byteOffset;
HXDLIN( 460)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData45 + (destPosition + (int)2)),val34);
            														}
            													}
HXDLIN( 460)													{
HXLINE( 460)														int val35 = ((int)destPixel & (int)(int)255);
HXDLIN( 460)														{
HXLINE( 460)															int destData46 = destData->byteOffset;
HXDLIN( 460)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData46 + (destPosition + (int)3)),val35);
            														}
            													}
            												}
            												break;
            											}
            										}
            									}
HXLINE( 464)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 465)									destPosition = (destPosition + (int)4);
HXLINE( 466)									alphaPosition = (alphaPosition + (int)4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 474)						int _g14 = (int)0;
HXDLIN( 474)						int _g7 = destView->height;
HXDLIN( 474)						while((_g14 < _g7)){
HXLINE( 474)							_g14 = (_g14 + (int)1);
HXDLIN( 474)							int y4 = (_g14 - (int)1);
HXLINE( 476)							int sourceView5 = sourceView->byteOffset;
HXDLIN( 476)							sourcePosition = (sourceView5 + (sourceView->stride * y4));
HXLINE( 477)							int destView5 = destView->byteOffset;
HXDLIN( 477)							destPosition = (destView5 + (destView->stride * y4));
HXLINE( 478)							int alphaView2 = alphaView->byteOffset;
HXDLIN( 478)							alphaPosition = (alphaView2 + (alphaView->stride * y4));
HXLINE( 480)							{
HXLINE( 480)								int _g33 = (int)0;
HXDLIN( 480)								int _g23 = destView->width;
HXDLIN( 480)								while((_g33 < _g23)){
HXLINE( 480)									_g33 = (_g33 + (int)1);
HXDLIN( 480)									int x3 = (_g33 - (int)1);
HXLINE( 482)									{
HXLINE( 482)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 482)												int r23 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 482)												int sourceData29 = sourceData->byteOffset;
HXDLIN( 482)												int g23 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData29 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 482)												int sourceData30 = sourceData->byteOffset;
HXDLIN( 482)												int b18 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData30 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 482)												int sourceData31 = sourceData->byteOffset;
HXDLIN( 482)												sourcePixel = ((int)((int)((int)((int)((int)r23 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g23 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b18 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData31 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 482)												int sourceData32 = sourceData->byteOffset;
HXDLIN( 482)												int r24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData32 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 482)												int sourceData33 = sourceData->byteOffset;
HXDLIN( 482)												int g24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData33 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 482)												int sourceData34 = sourceData->byteOffset;
HXDLIN( 482)												int b19 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData34 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 482)												sourcePixel = ((int)((int)((int)((int)((int)r24 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g24 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b19 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 482)												int sourceData35 = sourceData->byteOffset;
HXDLIN( 482)												int r25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData35 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 482)												int sourceData36 = sourceData->byteOffset;
HXDLIN( 482)												int g25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData36 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 482)												int b20 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 482)												int sourceData37 = sourceData->byteOffset;
HXDLIN( 482)												sourcePixel = ((int)((int)((int)((int)((int)r25 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g25 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b20 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData37 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 482)										if (sourcePremultiplied) {
HXLINE( 482)											bool _hx_tmp22;
HXDLIN( 482)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 482)												_hx_tmp22 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 482)												_hx_tmp22 = false;
            											}
HXDLIN( 482)											if (_hx_tmp22) {
HXLINE( 482)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 482)												{
HXLINE( 482)													 ::lime::utils::ArrayBufferView this30 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 482)													int r26 = ((int)::__hxcpp_memory_get_byte(this30->buffer->b,(this30->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 482)													 ::lime::utils::ArrayBufferView this31 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 482)													int g26 = ((int)::__hxcpp_memory_get_byte(this31->buffer->b,(this31->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 482)													 ::lime::utils::ArrayBufferView this32 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 482)													sourcePixel = ((int)((int)((int)((int)((int)r26 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g26 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this32->buffer->b,(this32->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 483)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 483)											int r27 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 483)											int alphaData10 = alphaData->byteOffset;
HXDLIN( 483)											int g27 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData10 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 483)											int alphaData11 = alphaData->byteOffset;
HXDLIN( 483)											int b21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData11 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 483)											int alphaData12 = alphaData->byteOffset;
HXDLIN( 483)											alphaPixel = ((int)((int)((int)((int)((int)r27 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g27 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b21 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData12 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 483)											int alphaData13 = alphaData->byteOffset;
HXDLIN( 483)											int r28 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData13 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 483)											int alphaData14 = alphaData->byteOffset;
HXDLIN( 483)											int g28 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData14 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 483)											int alphaData15 = alphaData->byteOffset;
HXDLIN( 483)											int b22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData15 + (alphaPosition + (int)3))) & (int)(int)255);
HXDLIN( 483)											alphaPixel = ((int)((int)((int)((int)((int)r28 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g28 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b22 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 483)											int alphaData16 = alphaData->byteOffset;
HXDLIN( 483)											int r29 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData16 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 483)											int alphaData17 = alphaData->byteOffset;
HXDLIN( 483)											int g29 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData17 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 483)											int b23 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 483)											int alphaData18 = alphaData->byteOffset;
HXDLIN( 483)											alphaPixel = ((int)((int)((int)((int)((int)r29 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g29 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b23 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData18 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXLINE( 485)									{
HXLINE( 485)										int value8 = ::Math_obj::round((((int)sourcePixel & (int)(int)255) * ((Float)((int)alphaPixel & (int)(int)255) / (Float)(int)255)));
HXDLIN( 485)										sourcePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value8 & (int)(int)255));
            									}
HXLINE( 486)									{
HXLINE( 486)										if (destPremultiplied) {
HXLINE( 486)											if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 486)												if ((sourcePixel != (int)0)) {
HXLINE( 486)													sourcePixel = (int)0;
            												}
            											}
            											else {
HXLINE( 486)												if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 486)													 ::lime::utils::ArrayBufferView this33 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 486)													int this34 = this33->byteOffset;
HXDLIN( 486)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this33->buffer->b,(this34 + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 486)													sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
HXDLIN( 486)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 486)												{
HXLINE( 486)													int val36 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 486)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val36);
            												}
HXDLIN( 486)												{
HXLINE( 486)													int val37 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 486)													{
HXLINE( 486)														int destData47 = destData->byteOffset;
HXDLIN( 486)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData47 + (destPosition + (int)1)),val37);
            													}
            												}
HXDLIN( 486)												{
HXLINE( 486)													int val38 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 486)													{
HXLINE( 486)														int destData48 = destData->byteOffset;
HXDLIN( 486)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData48 + (destPosition + (int)2)),val38);
            													}
            												}
HXDLIN( 486)												{
HXLINE( 486)													int val39 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 486)													{
HXLINE( 486)														int destData49 = destData->byteOffset;
HXDLIN( 486)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData49 + (destPosition + (int)3)),val39);
            													}
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 486)												{
HXLINE( 486)													int val40 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 486)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val40);
            												}
HXDLIN( 486)												{
HXLINE( 486)													int val41 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 486)													{
HXLINE( 486)														int destData50 = destData->byteOffset;
HXDLIN( 486)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData50 + (destPosition + (int)1)),val41);
            													}
            												}
HXDLIN( 486)												{
HXLINE( 486)													int val42 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 486)													{
HXLINE( 486)														int destData51 = destData->byteOffset;
HXDLIN( 486)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData51 + (destPosition + (int)2)),val42);
            													}
            												}
HXDLIN( 486)												{
HXLINE( 486)													int val43 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 486)													{
HXLINE( 486)														int destData52 = destData->byteOffset;
HXDLIN( 486)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData52 + (destPosition + (int)3)),val43);
            													}
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 486)												{
HXLINE( 486)													int val44 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 486)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val44);
            												}
HXDLIN( 486)												{
HXLINE( 486)													int val45 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 486)													{
HXLINE( 486)														int destData53 = destData->byteOffset;
HXDLIN( 486)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData53 + (destPosition + (int)1)),val45);
            													}
            												}
HXDLIN( 486)												{
HXLINE( 486)													int val46 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 486)													{
HXLINE( 486)														int destData54 = destData->byteOffset;
HXDLIN( 486)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData54 + (destPosition + (int)2)),val46);
            													}
            												}
HXDLIN( 486)												{
HXLINE( 486)													int val47 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 486)													{
HXLINE( 486)														int destData55 = destData->byteOffset;
HXDLIN( 486)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData55 + (destPosition + (int)3)),val47);
            													}
            												}
            											}
            											break;
            										}
            									}
HXLINE( 488)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 489)									destPosition = (destPosition + (int)4);
HXLINE( 490)									alphaPosition = (alphaPosition + (int)4);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 504)		image->dirty = true;
HXLINE( 505)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,copyPixels,(void))

void ImageDataUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_510_fillRect)
HXLINE( 512)		int fillColor;
HXLINE( 514)		switch((int)(format)){
            			case (int)1: {
HXLINE( 516)				int argb = color;
HXDLIN( 516)				int this1 = (int)0;
HXDLIN( 516)				int rgba = this1;
HXDLIN( 516)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 516)				fillColor = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 517)				int bgra = color;
HXDLIN( 517)				int this2 = (int)0;
HXDLIN( 517)				int rgba1 = this2;
HXDLIN( 517)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 517)				fillColor = rgba1;
            			}
            			break;
            			default:{
HXLINE( 518)				fillColor = color;
            			}
            		}
HXLINE( 522)		if (!(image->get_transparent())) {
HXLINE( 524)			fillColor = ((int)((int)((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 528)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 529)		if (hx::IsNull( data )) {
HXLINE( 529)			return;
            		}
HXLINE( 532)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 532)			 ::Dynamic _hx_tmp = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN( 532)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_fill_rect(hx::DynamicPtr(image),hx::DynamicPtr(rect),((int)((int)fillColor >> (int)(int)16) & (int)(int)65535),((int)fillColor & (int)(int)65535));
            		}
            		else {
HXLINE( 536)			int format1 = image->buffer->format;
HXLINE( 537)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 538)			if (premultiplied) {
HXLINE( 538)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 538)					if ((fillColor != (int)0)) {
HXLINE( 538)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 538)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 538)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 538)						int this4 = this3->byteOffset;
HXDLIN( 538)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 538)						fillColor = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXLINE( 540)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 541)			int row;
HXLINE( 543)			{
HXLINE( 543)				int _g1 = (int)0;
HXDLIN( 543)				int _g = dataView->height;
HXDLIN( 543)				while((_g1 < _g)){
HXLINE( 543)					_g1 = (_g1 + (int)1);
HXDLIN( 543)					int y = (_g1 - (int)1);
HXLINE( 545)					int dataView1 = dataView->byteOffset;
HXDLIN( 545)					row = (dataView1 + (dataView->stride * y));
HXLINE( 547)					{
HXLINE( 547)						int _g3 = (int)0;
HXDLIN( 547)						int _g2 = dataView->width;
HXDLIN( 547)						while((_g3 < _g2)){
HXLINE( 547)							_g3 = (_g3 + (int)1);
HXDLIN( 547)							int x = (_g3 - (int)1);
HXLINE( 549)							{
HXLINE( 549)								int offset = (row + (x * (int)4));
HXDLIN( 549)								switch((int)(format1)){
            									case (int)0: {
HXLINE( 549)										{
HXLINE( 549)											int val = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 549)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 549)										{
HXLINE( 549)											int val1 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 549)											{
HXLINE( 549)												int data1 = data->byteOffset;
HXDLIN( 549)												::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN( 549)										{
HXLINE( 549)											int val2 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 549)											{
HXLINE( 549)												int data2 = data->byteOffset;
HXDLIN( 549)												::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN( 549)										{
HXLINE( 549)											int val3 = ((int)fillColor & (int)(int)255);
HXDLIN( 549)											{
HXLINE( 549)												int data3 = data->byteOffset;
HXDLIN( 549)												::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 549)										{
HXLINE( 549)											int val4 = ((int)fillColor & (int)(int)255);
HXDLIN( 549)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 549)										{
HXLINE( 549)											int val5 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 549)											{
HXLINE( 549)												int data4 = data->byteOffset;
HXDLIN( 549)												::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN( 549)										{
HXLINE( 549)											int val6 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 549)											{
HXLINE( 549)												int data5 = data->byteOffset;
HXDLIN( 549)												::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN( 549)										{
HXLINE( 549)											int val7 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 549)											{
HXLINE( 549)												int data6 = data->byteOffset;
HXDLIN( 549)												::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 549)										{
HXLINE( 549)											int val8 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 549)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 549)										{
HXLINE( 549)											int val9 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 549)											{
HXLINE( 549)												int data7 = data->byteOffset;
HXDLIN( 549)												::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN( 549)										{
HXLINE( 549)											int val10 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 549)											{
HXLINE( 549)												int data8 = data->byteOffset;
HXDLIN( 549)												::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN( 549)										{
HXLINE( 549)											int val11 = ((int)fillColor & (int)(int)255);
HXDLIN( 549)											{
HXLINE( 549)												int data9 = data->byteOffset;
HXDLIN( 549)												::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 557)		image->dirty = true;
HXLINE( 558)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,fillRect,(void))

void ImageDataUtil_obj::floodFill( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_563_floodFill)
HXLINE( 565)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 566)		if (hx::IsNull( data )) {
HXLINE( 566)			return;
            		}
HXLINE( 568)		if ((format == (int)1)) {
HXLINE( 568)			color = ((int)((int)((int)color & (int)(int)16777215) << (int)(int)8) | (int)((int)((int)color >> (int)(int)24) & (int)(int)255));
            		}
HXLINE( 571)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 571)			 ::Dynamic _hx_tmp = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN( 571)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_flood_fill(hx::DynamicPtr(image),x,y,((int)((int)color >> (int)(int)16) & (int)(int)65535),((int)color & (int)(int)65535));
            		}
            		else {
HXLINE( 575)			int format1 = image->buffer->format;
HXLINE( 576)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 578)			int fillColor = color;
HXLINE( 580)			int hitColor;
HXLINE( 581)			{
HXLINE( 581)				int offset = (y + image->offsetY);
HXDLIN( 581)				int offset1 = (offset * (image->buffer->width * (int)4));
HXDLIN( 581)				int offset2 = (offset1 + ((x + image->offsetX) * (int)4));
HXDLIN( 581)				switch((int)(format1)){
            					case (int)0: {
HXLINE( 581)						int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255);
HXDLIN( 581)						int data1 = data->byteOffset;
HXDLIN( 581)						int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 581)						int data2 = data->byteOffset;
HXDLIN( 581)						int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 581)						int data3 = data->byteOffset;
HXDLIN( 581)						hitColor = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset2 + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)1: {
HXLINE( 581)						int data4 = data->byteOffset;
HXDLIN( 581)						int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 581)						int data5 = data->byteOffset;
HXDLIN( 581)						int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 581)						int data6 = data->byteOffset;
HXDLIN( 581)						int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset2 + (int)3))) & (int)(int)255);
HXDLIN( 581)						hitColor = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)2: {
HXLINE( 581)						int data7 = data->byteOffset;
HXDLIN( 581)						int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 581)						int data8 = data->byteOffset;
HXDLIN( 581)						int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 581)						int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255);
HXDLIN( 581)						int data9 = data->byteOffset;
HXDLIN( 581)						hitColor = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset2 + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            				}
HXDLIN( 581)				if (premultiplied) {
HXLINE( 581)					bool _hx_tmp1;
HXDLIN( 581)					if ((((int)hitColor & (int)(int)255) != (int)0)) {
HXLINE( 581)						_hx_tmp1 = (((int)hitColor & (int)(int)255) != (int)255);
            					}
            					else {
HXLINE( 581)						_hx_tmp1 = false;
            					}
HXDLIN( 581)					if (_hx_tmp1) {
HXLINE( 581)						::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)hitColor & (int)(int)255));
HXDLIN( 581)						{
HXLINE( 581)							 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 581)							int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 581)							 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 581)							int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 581)							 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 581)							hitColor = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hitColor & (int)(int)255) & (int)(int)255));
            						}
            					}
            				}
            			}
HXLINE( 583)			if (!(image->get_transparent())) {
HXLINE( 585)				fillColor = ((int)((int)((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 586)				hitColor = ((int)((int)((int)((int)((int)((int)hx::UShr(hitColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(hitColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(hitColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            			}
HXLINE( 590)			if ((fillColor == hitColor)) {
HXLINE( 590)				return;
            			}
HXLINE( 592)			if (premultiplied) {
HXLINE( 592)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 592)					if ((fillColor != (int)0)) {
HXLINE( 592)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 592)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 592)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 592)						int this5 = this4->byteOffset;
HXDLIN( 592)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this5 + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 592)						fillColor = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXLINE( 594)			::Array< int > dx = ::Array_obj< int >::fromData( _hx_array_data_0eb0fdcf_29,4);
HXLINE( 595)			::Array< int > dy = ::Array_obj< int >::fromData( _hx_array_data_0eb0fdcf_30,4);
HXLINE( 597)			int minX = -(image->offsetX);
HXLINE( 598)			int minY = -(image->offsetY);
HXLINE( 599)			int maxX = (minX + image->width);
HXLINE( 600)			int maxY = (minY + image->height);
HXLINE( 602)			::Array< int > queue = ::Array_obj< int >::__new();
HXLINE( 603)			queue->push(x);
HXLINE( 604)			queue->push(y);
HXLINE( 606)			 ::Dynamic curPointX;
HXDLIN( 606)			 ::Dynamic curPointY;
HXDLIN( 606)			int nextPointX;
HXDLIN( 606)			int nextPointY;
HXDLIN( 606)			int nextPointOffset;
HXDLIN( 606)			int readColor;
HXLINE( 608)			while((queue->length > (int)0)){
HXLINE( 610)				curPointY = queue->pop();
HXLINE( 611)				curPointX = queue->pop();
HXLINE( 613)				{
HXLINE( 613)					int _g = (int)0;
HXDLIN( 613)					while((_g < (int)4)){
HXLINE( 613)						_g = (_g + (int)1);
HXDLIN( 613)						int i = (_g - (int)1);
HXLINE( 615)						nextPointX = (curPointX + dx->__get(i));
HXLINE( 616)						nextPointY = (curPointY + dy->__get(i));
HXLINE( 618)						bool _hx_tmp2;
HXDLIN( 618)						bool _hx_tmp3;
HXDLIN( 618)						bool _hx_tmp4;
HXDLIN( 618)						if ((nextPointX >= minX)) {
HXLINE( 618)							_hx_tmp4 = (nextPointY < minY);
            						}
            						else {
HXLINE( 618)							_hx_tmp4 = true;
            						}
HXDLIN( 618)						if (!(_hx_tmp4)) {
HXLINE( 618)							_hx_tmp3 = (nextPointX >= maxX);
            						}
            						else {
HXLINE( 618)							_hx_tmp3 = true;
            						}
HXDLIN( 618)						if (!(_hx_tmp3)) {
HXLINE( 618)							_hx_tmp2 = (nextPointY >= maxY);
            						}
            						else {
HXLINE( 618)							_hx_tmp2 = true;
            						}
HXDLIN( 618)						if (_hx_tmp2) {
HXLINE( 620)							continue;
            						}
HXLINE( 624)						nextPointOffset = (((nextPointY * image->width) + nextPointX) * (int)4);
HXLINE( 625)						{
HXLINE( 625)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 625)									int r4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 625)									int data10 = data->byteOffset;
HXDLIN( 625)									int g4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data10 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 625)									int data11 = data->byteOffset;
HXDLIN( 625)									int b3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data11 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 625)									int data12 = data->byteOffset;
HXDLIN( 625)									readColor = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data12 + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 625)									int data13 = data->byteOffset;
HXDLIN( 625)									int r5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data13 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 625)									int data14 = data->byteOffset;
HXDLIN( 625)									int g5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data14 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 625)									int data15 = data->byteOffset;
HXDLIN( 625)									int b4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data15 + (nextPointOffset + (int)3))) & (int)(int)255);
HXDLIN( 625)									readColor = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 625)									int data16 = data->byteOffset;
HXDLIN( 625)									int r6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data16 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 625)									int data17 = data->byteOffset;
HXDLIN( 625)									int g6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data17 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 625)									int b5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 625)									int data18 = data->byteOffset;
HXDLIN( 625)									readColor = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data18 + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN( 625)							if (premultiplied) {
HXLINE( 625)								bool _hx_tmp5;
HXDLIN( 625)								if ((((int)readColor & (int)(int)255) != (int)0)) {
HXLINE( 625)									_hx_tmp5 = (((int)readColor & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE( 625)									_hx_tmp5 = false;
            								}
HXDLIN( 625)								if (_hx_tmp5) {
HXLINE( 625)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)readColor & (int)(int)255));
HXDLIN( 625)									{
HXLINE( 625)										 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 625)										int r7 = ((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 625)										 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 625)										int g7 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 625)										 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 625)										readColor = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)readColor & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
            						}
HXLINE( 627)						if ((readColor == hitColor)) {
HXLINE( 629)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 629)									{
HXLINE( 629)										int val = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 629)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val);
            									}
HXDLIN( 629)									{
HXLINE( 629)										int val1 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 629)										{
HXLINE( 629)											int data19 = data->byteOffset;
HXDLIN( 629)											::__hxcpp_memory_set_byte(data->buffer->b,(data19 + (nextPointOffset + (int)1)),val1);
            										}
            									}
HXDLIN( 629)									{
HXLINE( 629)										int val2 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 629)										{
HXLINE( 629)											int data20 = data->byteOffset;
HXDLIN( 629)											::__hxcpp_memory_set_byte(data->buffer->b,(data20 + (nextPointOffset + (int)2)),val2);
            										}
            									}
HXDLIN( 629)									{
HXLINE( 629)										int val3 = ((int)fillColor & (int)(int)255);
HXDLIN( 629)										{
HXLINE( 629)											int data21 = data->byteOffset;
HXDLIN( 629)											::__hxcpp_memory_set_byte(data->buffer->b,(data21 + (nextPointOffset + (int)3)),val3);
            										}
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 629)									{
HXLINE( 629)										int val4 = ((int)fillColor & (int)(int)255);
HXDLIN( 629)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val4);
            									}
HXDLIN( 629)									{
HXLINE( 629)										int val5 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 629)										{
HXLINE( 629)											int data22 = data->byteOffset;
HXDLIN( 629)											::__hxcpp_memory_set_byte(data->buffer->b,(data22 + (nextPointOffset + (int)1)),val5);
            										}
            									}
HXDLIN( 629)									{
HXLINE( 629)										int val6 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 629)										{
HXLINE( 629)											int data23 = data->byteOffset;
HXDLIN( 629)											::__hxcpp_memory_set_byte(data->buffer->b,(data23 + (nextPointOffset + (int)2)),val6);
            										}
            									}
HXDLIN( 629)									{
HXLINE( 629)										int val7 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 629)										{
HXLINE( 629)											int data24 = data->byteOffset;
HXDLIN( 629)											::__hxcpp_memory_set_byte(data->buffer->b,(data24 + (nextPointOffset + (int)3)),val7);
            										}
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 629)									{
HXLINE( 629)										int val8 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 629)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val8);
            									}
HXDLIN( 629)									{
HXLINE( 629)										int val9 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 629)										{
HXLINE( 629)											int data25 = data->byteOffset;
HXDLIN( 629)											::__hxcpp_memory_set_byte(data->buffer->b,(data25 + (nextPointOffset + (int)1)),val9);
            										}
            									}
HXDLIN( 629)									{
HXLINE( 629)										int val10 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 629)										{
HXLINE( 629)											int data26 = data->byteOffset;
HXDLIN( 629)											::__hxcpp_memory_set_byte(data->buffer->b,(data26 + (nextPointOffset + (int)2)),val10);
            										}
            									}
HXDLIN( 629)									{
HXLINE( 629)										int val11 = ((int)fillColor & (int)(int)255);
HXDLIN( 629)										{
HXLINE( 629)											int data27 = data->byteOffset;
HXDLIN( 629)											::__hxcpp_memory_set_byte(data->buffer->b,(data27 + (nextPointOffset + (int)3)),val11);
            										}
            									}
            								}
            								break;
            							}
HXLINE( 631)							queue->push(nextPointX);
HXLINE( 632)							queue->push(nextPointY);
            						}
            					}
            				}
            			}
            		}
HXLINE( 642)		image->dirty = true;
HXLINE( 643)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,floodFill,(void))

 ::lime::graphics::Image ImageDataUtil_obj::gaussianBlur( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality,hx::Null< Float >  __o_strength, ::Dynamic color){
Float blurX = __o_blurX.Default(4);
Float blurY = __o_blurY.Default(4);
int quality = __o_quality.Default(1);
Float strength = __o_strength.Default(1);
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_648_gaussianBlur)
HXLINE( 653)		bool imagePremultiplied = image->get_premultiplied();
HXLINE( 654)		bool sourceImagePremultiplied = sourceImage->get_premultiplied();
HXLINE( 655)		if (imagePremultiplied) {
HXLINE( 655)			image->set_premultiplied(false);
            		}
HXLINE( 656)		if (sourceImagePremultiplied) {
HXLINE( 656)			sourceImage->set_premultiplied(false);
            		}
HXLINE( 666)		 ::lime::utils::ArrayBufferView imgB = image->get_data();
HXLINE( 667)		 ::lime::utils::ArrayBufferView imgA = sourceImage->get_data();
HXLINE( 668)		int w = ::Std_obj::_hx_int(sourceRect->width);
HXLINE( 669)		int h = ::Std_obj::_hx_int(sourceRect->height);
HXLINE( 670)		int bx = ::Std_obj::_hx_int(blurX);
HXLINE( 671)		int by = ::Std_obj::_hx_int(blurY);
HXLINE( 672)		int oX = ::Std_obj::_hx_int(destPoint->x);
HXLINE( 673)		int oY = ::Std_obj::_hx_int(destPoint->y);
HXLINE( 675)		int n = ((quality * (int)2) - (int)1);
HXLINE( 676)		Float rng = (::Math_obj::pow((int)2,quality) * ((Float)0.125));
HXLINE( 678)		::Array< Float > bxs = ::lime::_internal::graphics::ImageDataUtil_obj::_hx___getBoxesForGaussianBlur((bx * rng),n);
HXLINE( 679)		::Array< Float > bys = ::lime::_internal::graphics::ImageDataUtil_obj::_hx___getBoxesForGaussianBlur((by * rng),n);
HXLINE( 680)		int offset = ::Std_obj::_hx_int((((w * oY) + oX) * (int)4));
HXLINE( 682)		::lime::_internal::graphics::ImageDataUtil_obj::_hx___boxBlur(imgA,imgB,w,h,((Float)(bxs->__get((int)0) - (int)1) / (Float)(int)2),((Float)(bys->__get((int)0) - (int)1) / (Float)(int)2));
HXLINE( 683)		int bIndex = (int)1;
HXLINE( 685)		{
HXLINE( 685)			int _g1 = (int)0;
HXDLIN( 685)			int _g = ::Std_obj::_hx_int(((Float)n / (Float)(int)2));
HXDLIN( 685)			while((_g1 < _g)){
HXLINE( 685)				_g1 = (_g1 + (int)1);
HXDLIN( 685)				int i = (_g1 - (int)1);
HXLINE( 687)				::lime::_internal::graphics::ImageDataUtil_obj::_hx___boxBlur(imgB,imgA,w,h,((Float)(bxs->__get(bIndex) - (int)1) / (Float)(int)2),((Float)(bys->__get(bIndex) - (int)1) / (Float)(int)2));
HXLINE( 688)				::lime::_internal::graphics::ImageDataUtil_obj::_hx___boxBlur(imgA,imgB,w,h,((Float)(bxs->__get((bIndex + (int)1)) - (int)1) / (Float)(int)2),((Float)(bys->__get((bIndex + (int)1)) - (int)1) / (Float)(int)2));
HXLINE( 689)				bIndex = (bIndex + (int)2);
            			}
            		}
HXLINE( 693)		int x;
HXLINE( 694)		int y;
HXLINE( 696)		bool _hx_tmp;
HXDLIN( 696)		if ((offset == (int)0)) {
HXLINE( 696)			_hx_tmp = (strength != (int)1);
            		}
            		else {
HXLINE( 696)			_hx_tmp = true;
            		}
HXDLIN( 696)		if (_hx_tmp) {
HXLINE( 698)			if ((offset <= (int)0)) {
HXLINE( 700)				y = (int)0;
HXLINE( 701)				while((y < h)){
HXLINE( 702)					x = (int)0;
HXLINE( 703)					while((x < w)){
HXLINE( 704)						{
HXLINE( 704)							 ::lime::math::Rectangle sourceRect1 = sourceImage->get_rect();
HXDLIN( 704)							int d = ((int)4 * ((y * ::Std_obj::_hx_int(image->get_rect()->width)) + x));
HXDLIN( 704)							int sourceX = (x - ::Std_obj::_hx_int(destPoint->x));
HXDLIN( 704)							int sourceY = (y - ::Std_obj::_hx_int(destPoint->y));
HXDLIN( 704)							int offset1 = (int)0;
HXDLIN( 704)							bool _hx_tmp1;
HXDLIN( 704)							bool _hx_tmp2;
HXDLIN( 704)							bool _hx_tmp3;
HXDLIN( 704)							if ((sourceX >= (int)0)) {
HXLINE( 704)								_hx_tmp3 = (sourceY < (int)0);
            							}
            							else {
HXLINE( 704)								_hx_tmp3 = true;
            							}
HXDLIN( 704)							if (!(_hx_tmp3)) {
HXLINE( 704)								_hx_tmp2 = (sourceX >= sourceRect1->width);
            							}
            							else {
HXLINE( 704)								_hx_tmp2 = true;
            							}
HXDLIN( 704)							if (!(_hx_tmp2)) {
HXLINE( 704)								_hx_tmp1 = (sourceY >= sourceRect1->height);
            							}
            							else {
HXLINE( 704)								_hx_tmp1 = true;
            							}
HXDLIN( 704)							if (_hx_tmp1) {
HXLINE( 704)								offset1 = (int)-1;
            							}
            							else {
HXLINE( 704)								offset1 = ((int)4 * ((sourceY * ::Std_obj::_hx_int(sourceRect1->width)) + sourceX));
            							}
HXDLIN( 704)							int s = offset1;
HXDLIN( 704)							if ((s < (int)0)) {
HXLINE( 704)								{
HXLINE( 704)									int imgB1 = imgB->byteOffset;
HXDLIN( 704)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB1 + (d + (int)3)),(int)0);
            								}
HXDLIN( 704)								int val = (int)0;
HXDLIN( 704)								{
HXLINE( 704)									int imgB2 = imgB->byteOffset;
HXDLIN( 704)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB2 + (d + (int)2)),val);
            								}
HXDLIN( 704)								int val1 = val;
HXDLIN( 704)								{
HXLINE( 704)									int imgB3 = imgB->byteOffset;
HXDLIN( 704)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB3 + (d + (int)1)),val1);
            								}
HXDLIN( 704)								int val2 = val1;
HXDLIN( 704)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val2);
            							}
            							else {
HXLINE( 704)								{
HXLINE( 704)									int val3 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + s)) & (int)(int)255);
HXDLIN( 704)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val3);
            								}
HXDLIN( 704)								{
HXLINE( 704)									int imgB4 = imgB->byteOffset;
HXDLIN( 704)									int val4 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB4 + (s + (int)1))) & (int)(int)255);
HXDLIN( 704)									{
HXLINE( 704)										int imgB5 = imgB->byteOffset;
HXDLIN( 704)										::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB5 + (d + (int)1)),val4);
            									}
            								}
HXDLIN( 704)								{
HXLINE( 704)									int imgB6 = imgB->byteOffset;
HXDLIN( 704)									int val5 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB6 + (s + (int)2))) & (int)(int)255);
HXDLIN( 704)									{
HXLINE( 704)										int imgB7 = imgB->byteOffset;
HXDLIN( 704)										::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB7 + (d + (int)2)),val5);
            									}
            								}
HXDLIN( 704)								int imgB8 = imgB->byteOffset;
HXDLIN( 704)								int _hx_int = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB8 + (s + (int)3))) & (int)(int)255);
HXDLIN( 704)								Float a;
HXDLIN( 704)								if ((_hx_int < (int)0)) {
HXLINE( 704)									a = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE( 704)									a = (_hx_int + ((Float)0.0));
            								}
HXDLIN( 704)								int a1 = ::Std_obj::_hx_int((a * strength));
HXDLIN( 704)								{
HXLINE( 704)									int val6;
HXDLIN( 704)									if ((a1 < (int)0)) {
HXLINE( 704)										val6 = (int)0;
            									}
            									else {
HXLINE( 704)										if ((a1 > (int)255)) {
HXLINE( 704)											val6 = (int)255;
            										}
            										else {
HXLINE( 704)											val6 = a1;
            										}
            									}
HXDLIN( 704)									{
HXLINE( 704)										int imgB9 = imgB->byteOffset;
HXDLIN( 704)										::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB9 + (d + (int)3)),val6);
            									}
            								}
            							}
            						}
HXLINE( 705)						x = (x + (int)1);
            					}
HXLINE( 707)					y = (y + (int)1);
            				}
            			}
            			else {
HXLINE( 712)				y = (h - (int)1);
HXLINE( 713)				while((y >= (int)0)){
HXLINE( 714)					x = (w - (int)1);
HXLINE( 715)					while((x >= (int)0)){
HXLINE( 716)						{
HXLINE( 716)							 ::lime::math::Rectangle sourceRect2 = sourceImage->get_rect();
HXDLIN( 716)							int d1 = ((int)4 * ((y * ::Std_obj::_hx_int(image->get_rect()->width)) + x));
HXDLIN( 716)							int sourceX1 = (x - ::Std_obj::_hx_int(destPoint->x));
HXDLIN( 716)							int sourceY1 = (y - ::Std_obj::_hx_int(destPoint->y));
HXDLIN( 716)							int offset2 = (int)0;
HXDLIN( 716)							bool _hx_tmp4;
HXDLIN( 716)							bool _hx_tmp5;
HXDLIN( 716)							bool _hx_tmp6;
HXDLIN( 716)							if ((sourceX1 >= (int)0)) {
HXLINE( 716)								_hx_tmp6 = (sourceY1 < (int)0);
            							}
            							else {
HXLINE( 716)								_hx_tmp6 = true;
            							}
HXDLIN( 716)							if (!(_hx_tmp6)) {
HXLINE( 716)								_hx_tmp5 = (sourceX1 >= sourceRect2->width);
            							}
            							else {
HXLINE( 716)								_hx_tmp5 = true;
            							}
HXDLIN( 716)							if (!(_hx_tmp5)) {
HXLINE( 716)								_hx_tmp4 = (sourceY1 >= sourceRect2->height);
            							}
            							else {
HXLINE( 716)								_hx_tmp4 = true;
            							}
HXDLIN( 716)							if (_hx_tmp4) {
HXLINE( 716)								offset2 = (int)-1;
            							}
            							else {
HXLINE( 716)								offset2 = ((int)4 * ((sourceY1 * ::Std_obj::_hx_int(sourceRect2->width)) + sourceX1));
            							}
HXDLIN( 716)							int s1 = offset2;
HXDLIN( 716)							if ((s1 < (int)0)) {
HXLINE( 716)								{
HXLINE( 716)									int imgB10 = imgB->byteOffset;
HXDLIN( 716)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB10 + (d1 + (int)3)),(int)0);
            								}
HXDLIN( 716)								int val7 = (int)0;
HXDLIN( 716)								{
HXLINE( 716)									int imgB11 = imgB->byteOffset;
HXDLIN( 716)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB11 + (d1 + (int)2)),val7);
            								}
HXDLIN( 716)								int val8 = val7;
HXDLIN( 716)								{
HXLINE( 716)									int imgB12 = imgB->byteOffset;
HXDLIN( 716)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB12 + (d1 + (int)1)),val8);
            								}
HXDLIN( 716)								int val9 = val8;
HXDLIN( 716)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d1),val9);
            							}
            							else {
HXLINE( 716)								{
HXLINE( 716)									int val10 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + s1)) & (int)(int)255);
HXDLIN( 716)									::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d1),val10);
            								}
HXDLIN( 716)								{
HXLINE( 716)									int imgB13 = imgB->byteOffset;
HXDLIN( 716)									int val11 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB13 + (s1 + (int)1))) & (int)(int)255);
HXDLIN( 716)									{
HXLINE( 716)										int imgB14 = imgB->byteOffset;
HXDLIN( 716)										::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB14 + (d1 + (int)1)),val11);
            									}
            								}
HXDLIN( 716)								{
HXLINE( 716)									int imgB15 = imgB->byteOffset;
HXDLIN( 716)									int val12 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB15 + (s1 + (int)2))) & (int)(int)255);
HXDLIN( 716)									{
HXLINE( 716)										int imgB16 = imgB->byteOffset;
HXDLIN( 716)										::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB16 + (d1 + (int)2)),val12);
            									}
            								}
HXDLIN( 716)								int imgB17 = imgB->byteOffset;
HXDLIN( 716)								int int1 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB17 + (s1 + (int)3))) & (int)(int)255);
HXDLIN( 716)								Float a2;
HXDLIN( 716)								if ((int1 < (int)0)) {
HXLINE( 716)									a2 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE( 716)									a2 = (int1 + ((Float)0.0));
            								}
HXDLIN( 716)								int a3 = ::Std_obj::_hx_int((a2 * strength));
HXDLIN( 716)								{
HXLINE( 716)									int val13;
HXDLIN( 716)									if ((a3 < (int)0)) {
HXLINE( 716)										val13 = (int)0;
            									}
            									else {
HXLINE( 716)										if ((a3 > (int)255)) {
HXLINE( 716)											val13 = (int)255;
            										}
            										else {
HXLINE( 716)											val13 = a3;
            										}
            									}
HXDLIN( 716)									{
HXLINE( 716)										int imgB18 = imgB->byteOffset;
HXDLIN( 716)										::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB18 + (d1 + (int)3)),val13);
            									}
            								}
            							}
            						}
HXLINE( 717)						x = (x - (int)1);
            					}
HXLINE( 719)					y = (y - (int)1);
            				}
            			}
            		}
HXLINE( 726)		image->dirty = true;
HXLINE( 727)		image->version++;
HXLINE( 728)		sourceImage->dirty = true;
HXLINE( 729)		sourceImage->version++;
HXLINE( 731)		if (imagePremultiplied) {
HXLINE( 731)			image->set_premultiplied(true);
            		}
HXLINE( 732)		if (sourceImagePremultiplied) {
HXLINE( 732)			sourceImage->set_premultiplied(true);
            		}
HXLINE( 734)		if (hx::IsEq( imgB,image->get_data() )) {
HXLINE( 734)			return image;
            		}
HXLINE( 735)		return sourceImage;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(ImageDataUtil_obj,gaussianBlur,return )

 ::lime::math::Rectangle ImageDataUtil_obj::getColorBoundsRect( ::lime::graphics::Image image,int mask,int color,bool findColor,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_740_getColorBoundsRect)
HXLINE( 742)		int left = (image->width + (int)1);
HXLINE( 743)		int right = (int)0;
HXLINE( 744)		int top = (image->height + (int)1);
HXLINE( 745)		int bottom = (int)0;
HXLINE( 747)		int _color;
HXDLIN( 747)		int _mask;
HXLINE( 749)		switch((int)(format)){
            			case (int)1: {
HXLINE( 753)				int argb = color;
HXDLIN( 753)				int this1 = (int)0;
HXDLIN( 753)				int rgba = this1;
HXDLIN( 753)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 753)				_color = rgba;
HXLINE( 754)				int argb1 = mask;
HXDLIN( 754)				int this2 = (int)0;
HXDLIN( 754)				int rgba1 = this2;
HXDLIN( 754)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 754)				_mask = rgba1;
            			}
            			break;
            			case (int)2: {
HXLINE( 758)				int bgra = color;
HXDLIN( 758)				int this3 = (int)0;
HXDLIN( 758)				int rgba2 = this3;
HXDLIN( 758)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 758)				_color = rgba2;
HXLINE( 759)				int bgra1 = mask;
HXDLIN( 759)				int this4 = (int)0;
HXDLIN( 759)				int rgba3 = this4;
HXDLIN( 759)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN( 759)				_mask = rgba3;
            			}
            			break;
            			default:{
HXLINE( 763)				_color = color;
HXLINE( 764)				_mask = mask;
            			}
            		}
HXLINE( 768)		if (!(image->get_transparent())) {
HXLINE( 770)			_color = ((int)((int)((int)((int)((int)((int)hx::UShr(_color,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(_color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 771)			_mask = ((int)((int)((int)((int)((int)((int)hx::UShr(_mask,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_mask,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(_mask,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 775)		int pixel;
HXDLIN( 775)		bool hit;
HXLINE( 777)		{
HXLINE( 777)			int _g1 = (int)0;
HXDLIN( 777)			int _g = image->width;
HXDLIN( 777)			while((_g1 < _g)){
HXLINE( 777)				_g1 = (_g1 + (int)1);
HXDLIN( 777)				int x = (_g1 - (int)1);
HXLINE( 779)				hit = false;
HXLINE( 781)				{
HXLINE( 781)					int _g3 = (int)0;
HXDLIN( 781)					int _g2 = image->height;
HXDLIN( 781)					while((_g3 < _g2)){
HXLINE( 781)						_g3 = (_g3 + (int)1);
HXDLIN( 781)						int y = (_g3 - (int)1);
HXLINE( 783)						pixel = image->getPixel32(x,y,(int)0);
HXLINE( 784)						if (findColor) {
HXLINE( 784)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 784)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 786)						if (hit) {
HXLINE( 788)							if ((x < left)) {
HXLINE( 788)								left = x;
            							}
HXLINE( 789)							goto _hx_goto_38;
            						}
            					}
            					_hx_goto_38:;
            				}
HXLINE( 795)				if (hit) {
HXLINE( 797)					goto _hx_goto_37;
            				}
            			}
            			_hx_goto_37:;
            		}
HXLINE( 803)		int ix;
HXLINE( 805)		{
HXLINE( 805)			int _g11 = (int)0;
HXDLIN( 805)			int _g4 = image->width;
HXDLIN( 805)			while((_g11 < _g4)){
HXLINE( 805)				_g11 = (_g11 + (int)1);
HXDLIN( 805)				int x1 = (_g11 - (int)1);
HXLINE( 807)				ix = ((image->width - (int)1) - x1);
HXLINE( 808)				hit = false;
HXLINE( 810)				{
HXLINE( 810)					int _g31 = (int)0;
HXDLIN( 810)					int _g21 = image->height;
HXDLIN( 810)					while((_g31 < _g21)){
HXLINE( 810)						_g31 = (_g31 + (int)1);
HXDLIN( 810)						int y1 = (_g31 - (int)1);
HXLINE( 812)						pixel = image->getPixel32(ix,y1,(int)0);
HXLINE( 813)						if (findColor) {
HXLINE( 813)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 813)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 815)						if (hit) {
HXLINE( 817)							if ((ix > right)) {
HXLINE( 817)								right = ix;
            							}
HXLINE( 818)							goto _hx_goto_40;
            						}
            					}
            					_hx_goto_40:;
            				}
HXLINE( 824)				if (hit) {
HXLINE( 826)					goto _hx_goto_39;
            				}
            			}
            			_hx_goto_39:;
            		}
HXLINE( 832)		{
HXLINE( 832)			int _g12 = (int)0;
HXDLIN( 832)			int _g5 = image->height;
HXDLIN( 832)			while((_g12 < _g5)){
HXLINE( 832)				_g12 = (_g12 + (int)1);
HXDLIN( 832)				int y2 = (_g12 - (int)1);
HXLINE( 834)				hit = false;
HXLINE( 836)				{
HXLINE( 836)					int _g32 = (int)0;
HXDLIN( 836)					int _g22 = image->width;
HXDLIN( 836)					while((_g32 < _g22)){
HXLINE( 836)						_g32 = (_g32 + (int)1);
HXDLIN( 836)						int x2 = (_g32 - (int)1);
HXLINE( 838)						pixel = image->getPixel32(x2,y2,(int)0);
HXLINE( 839)						if (findColor) {
HXLINE( 839)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 839)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 841)						if (hit) {
HXLINE( 843)							if ((y2 < top)) {
HXLINE( 843)								top = y2;
            							}
HXLINE( 844)							goto _hx_goto_42;
            						}
            					}
            					_hx_goto_42:;
            				}
HXLINE( 850)				if (hit) {
HXLINE( 852)					goto _hx_goto_41;
            				}
            			}
            			_hx_goto_41:;
            		}
HXLINE( 858)		int iy;
HXLINE( 860)		{
HXLINE( 860)			int _g13 = (int)0;
HXDLIN( 860)			int _g6 = image->height;
HXDLIN( 860)			while((_g13 < _g6)){
HXLINE( 860)				_g13 = (_g13 + (int)1);
HXDLIN( 860)				int y3 = (_g13 - (int)1);
HXLINE( 862)				iy = ((image->height - (int)1) - y3);
HXLINE( 863)				hit = false;
HXLINE( 865)				{
HXLINE( 865)					int _g33 = (int)0;
HXDLIN( 865)					int _g23 = image->width;
HXDLIN( 865)					while((_g33 < _g23)){
HXLINE( 865)						_g33 = (_g33 + (int)1);
HXDLIN( 865)						int x3 = (_g33 - (int)1);
HXLINE( 867)						pixel = image->getPixel32(x3,iy,(int)0);
HXLINE( 868)						if (findColor) {
HXLINE( 868)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 868)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 870)						if (hit) {
HXLINE( 872)							if ((iy > bottom)) {
HXLINE( 872)								bottom = iy;
            							}
HXLINE( 873)							goto _hx_goto_44;
            						}
            					}
            					_hx_goto_44:;
            				}
HXLINE( 879)				if (hit) {
HXLINE( 881)					goto _hx_goto_43;
            				}
            			}
            			_hx_goto_43:;
            		}
HXLINE( 887)		int w = (right - left);
HXLINE( 888)		int h = (bottom - top);
HXLINE( 890)		if ((w > (int)0)) {
HXLINE( 890)			w = (w + (int)1);
            		}
HXLINE( 891)		if ((h > (int)0)) {
HXLINE( 891)			h = (h + (int)1);
            		}
HXLINE( 893)		if ((w < (int)0)) {
HXLINE( 893)			w = (int)0;
            		}
HXLINE( 894)		if ((h < (int)0)) {
HXLINE( 894)			h = (int)0;
            		}
HXLINE( 896)		if ((left == right)) {
HXLINE( 896)			w = (int)1;
            		}
HXLINE( 897)		if ((top == bottom)) {
HXLINE( 897)			h = (int)1;
            		}
HXLINE( 899)		if ((left > image->width)) {
HXLINE( 899)			left = (int)0;
            		}
HXLINE( 900)		if ((top > image->height)) {
HXLINE( 900)			top = (int)0;
            		}
HXLINE( 902)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,left,top,w,h);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,getColorBoundsRect,return )

int ImageDataUtil_obj::getPixel( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_907_getPixel)
HXLINE( 909)		int pixel;
HXLINE( 911)		{
HXLINE( 911)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 911)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN( 911)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN( 911)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 911)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 911)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 911)					int data1 = data->byteOffset;
HXDLIN( 911)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 911)					int data2 = data->byteOffset;
HXDLIN( 911)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 911)					int data3 = data->byteOffset;
HXDLIN( 911)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 911)					int data4 = data->byteOffset;
HXDLIN( 911)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 911)					int data5 = data->byteOffset;
HXDLIN( 911)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 911)					int data6 = data->byteOffset;
HXDLIN( 911)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN( 911)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 911)					int data7 = data->byteOffset;
HXDLIN( 911)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 911)					int data8 = data->byteOffset;
HXDLIN( 911)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 911)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 911)					int data9 = data->byteOffset;
HXDLIN( 911)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 911)			if (premultiplied) {
HXLINE( 911)				bool _hx_tmp;
HXDLIN( 911)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 911)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 911)					_hx_tmp = false;
            				}
HXDLIN( 911)				if (_hx_tmp) {
HXLINE( 911)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 911)					{
HXLINE( 911)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 911)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 911)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 911)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 911)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 911)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 912)		pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)0);
HXLINE( 914)		switch((int)(format)){
            			case (int)1: {
HXLINE( 916)				int this4 = (int)0;
HXDLIN( 916)				int argb = this4;
HXDLIN( 916)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 916)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 917)				int this5 = (int)0;
HXDLIN( 917)				int bgra = this5;
HXDLIN( 917)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 917)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 918)				return pixel;
            			}
            		}
HXLINE( 914)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel,return )

int ImageDataUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_925_getPixel32)
HXLINE( 927)		int pixel;
HXLINE( 929)		{
HXLINE( 929)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 929)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN( 929)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN( 929)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 929)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 929)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 929)					int data1 = data->byteOffset;
HXDLIN( 929)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 929)					int data2 = data->byteOffset;
HXDLIN( 929)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 929)					int data3 = data->byteOffset;
HXDLIN( 929)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 929)					int data4 = data->byteOffset;
HXDLIN( 929)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 929)					int data5 = data->byteOffset;
HXDLIN( 929)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 929)					int data6 = data->byteOffset;
HXDLIN( 929)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN( 929)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 929)					int data7 = data->byteOffset;
HXDLIN( 929)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 929)					int data8 = data->byteOffset;
HXDLIN( 929)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 929)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 929)					int data9 = data->byteOffset;
HXDLIN( 929)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 929)			if (premultiplied) {
HXLINE( 929)				bool _hx_tmp;
HXDLIN( 929)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 929)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 929)					_hx_tmp = false;
            				}
HXDLIN( 929)				if (_hx_tmp) {
HXLINE( 929)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 929)					{
HXLINE( 929)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 929)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 929)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 929)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 929)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 929)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 931)		switch((int)(format)){
            			case (int)1: {
HXLINE( 933)				int this4 = (int)0;
HXDLIN( 933)				int argb = this4;
HXDLIN( 933)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 933)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 934)				int this5 = (int)0;
HXDLIN( 934)				int bgra = this5;
HXDLIN( 934)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 934)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 935)				return pixel;
            			}
            		}
HXLINE( 931)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageDataUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_942_getPixels)
HXLINE( 944)		if (hx::IsNull( image->buffer->data )) {
HXLINE( 944)			return null();
            		}
HXLINE( 946)		int length = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 947)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((length * (int)4));
HXLINE( 950)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 950)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_get_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),format,hx::DynamicPtr(bytes));
            		}
            		else {
HXLINE( 954)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 955)			int sourceFormat = image->buffer->format;
HXLINE( 956)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 958)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 959)			int position;
HXDLIN( 959)			int argb;
HXDLIN( 959)			int bgra;
HXDLIN( 959)			int pixel;
HXLINE( 960)			int destPosition = (int)0;
HXLINE( 962)			{
HXLINE( 962)				int _g1 = (int)0;
HXDLIN( 962)				int _g = dataView->height;
HXDLIN( 962)				while((_g1 < _g)){
HXLINE( 962)					_g1 = (_g1 + (int)1);
HXDLIN( 962)					int y = (_g1 - (int)1);
HXLINE( 964)					int dataView1 = dataView->byteOffset;
HXDLIN( 964)					position = (dataView1 + (dataView->stride * y));
HXLINE( 966)					{
HXLINE( 966)						int _g3 = (int)0;
HXDLIN( 966)						int _g2 = dataView->width;
HXDLIN( 966)						while((_g3 < _g2)){
HXLINE( 966)							_g3 = (_g3 + (int)1);
HXDLIN( 966)							int x = (_g3 - (int)1);
HXLINE( 968)							{
HXLINE( 968)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 968)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 968)										int data1 = data->byteOffset;
HXDLIN( 968)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (position + (int)1))) & (int)(int)255);
HXDLIN( 968)										int data2 = data->byteOffset;
HXDLIN( 968)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (position + (int)2))) & (int)(int)255);
HXDLIN( 968)										int data3 = data->byteOffset;
HXDLIN( 968)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 968)										int data4 = data->byteOffset;
HXDLIN( 968)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (position + (int)1))) & (int)(int)255);
HXDLIN( 968)										int data5 = data->byteOffset;
HXDLIN( 968)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (position + (int)2))) & (int)(int)255);
HXDLIN( 968)										int data6 = data->byteOffset;
HXDLIN( 968)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (position + (int)3))) & (int)(int)255);
HXDLIN( 968)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 968)										int data7 = data->byteOffset;
HXDLIN( 968)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (position + (int)2))) & (int)(int)255);
HXDLIN( 968)										int data8 = data->byteOffset;
HXDLIN( 968)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (position + (int)1))) & (int)(int)255);
HXDLIN( 968)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 968)										int data9 = data->byteOffset;
HXDLIN( 968)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 968)								if (premultiplied) {
HXLINE( 968)									bool _hx_tmp;
HXDLIN( 968)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 968)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 968)										_hx_tmp = false;
            									}
HXDLIN( 968)									if (_hx_tmp) {
HXLINE( 968)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 968)										{
HXLINE( 968)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 968)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 968)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 968)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 968)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 968)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 970)							switch((int)(format)){
            								case (int)1: {
HXLINE( 972)									int this4 = (int)0;
HXDLIN( 972)									int argb1 = this4;
HXDLIN( 972)									argb1 = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 972)									argb = argb1;
HXDLIN( 972)									pixel = argb;
            								}
            								break;
            								case (int)2: {
HXLINE( 973)									int this5 = (int)0;
HXDLIN( 973)									int bgra1 = this5;
HXDLIN( 973)									bgra1 = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 973)									bgra = bgra1;
HXDLIN( 973)									pixel = bgra;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 978)							{
HXLINE( 978)								destPosition = (destPosition + (int)1);
HXDLIN( 978)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
            							}
HXLINE( 979)							{
HXLINE( 979)								destPosition = (destPosition + (int)1);
HXDLIN( 979)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
            							}
HXLINE( 980)							{
HXLINE( 980)								destPosition = (destPosition + (int)1);
HXDLIN( 980)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
            							}
HXLINE( 981)							{
HXLINE( 981)								destPosition = (destPosition + (int)1);
HXDLIN( 981)								bytes->b[(destPosition - (int)1)] = ((int)pixel & (int)(int)255);
            							}
HXLINE( 983)							position = (position + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 991)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,getPixels,return )

void ImageDataUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_996_merge)
HXLINE( 998)		bool _hx_tmp;
HXDLIN( 998)		if (hx::IsNotNull( image->buffer->data )) {
HXLINE( 998)			_hx_tmp = hx::IsNull( sourceImage->buffer->data );
            		}
            		else {
HXLINE( 998)			_hx_tmp = true;
            		}
HXDLIN( 998)		if (_hx_tmp) {
HXLINE( 998)			return;
            		}
HXLINE(1001)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1001)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_merge(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            		}
            		else {
HXLINE(1005)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE(1006)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE(1008)			 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE(1009)			 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE(1010)			int sourceFormat = sourceImage->buffer->format;
HXLINE(1011)			int destFormat = image->buffer->format;
HXLINE(1012)			bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE(1013)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE(1015)			int sourcePosition;
HXDLIN(1015)			int destPosition;
HXDLIN(1015)			int sourcePixel;
HXDLIN(1015)			int destPixel;
HXLINE(1017)			{
HXLINE(1017)				int _g1 = (int)0;
HXDLIN(1017)				int _g = destView->height;
HXDLIN(1017)				while((_g1 < _g)){
HXLINE(1017)					_g1 = (_g1 + (int)1);
HXDLIN(1017)					int y = (_g1 - (int)1);
HXLINE(1019)					int sourceView1 = sourceView->byteOffset;
HXDLIN(1019)					sourcePosition = (sourceView1 + (sourceView->stride * y));
HXLINE(1020)					int destView1 = destView->byteOffset;
HXDLIN(1020)					destPosition = (destView1 + (destView->stride * y));
HXLINE(1022)					{
HXLINE(1022)						int _g3 = (int)0;
HXDLIN(1022)						int _g2 = destView->width;
HXDLIN(1022)						while((_g3 < _g2)){
HXLINE(1022)							_g3 = (_g3 + (int)1);
HXDLIN(1022)							int x = (_g3 - (int)1);
HXLINE(1024)							{
HXLINE(1024)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1024)										int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN(1024)										int sourceData1 = sourceData->byteOffset;
HXDLIN(1024)										int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN(1024)										int sourceData2 = sourceData->byteOffset;
HXDLIN(1024)										int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN(1024)										int sourceData3 = sourceData->byteOffset;
HXDLIN(1024)										sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(1024)										int sourceData4 = sourceData->byteOffset;
HXDLIN(1024)										int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN(1024)										int sourceData5 = sourceData->byteOffset;
HXDLIN(1024)										int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN(1024)										int sourceData6 = sourceData->byteOffset;
HXDLIN(1024)										int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN(1024)										sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(1024)										int sourceData7 = sourceData->byteOffset;
HXDLIN(1024)										int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN(1024)										int sourceData8 = sourceData->byteOffset;
HXDLIN(1024)										int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN(1024)										int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN(1024)										int sourceData9 = sourceData->byteOffset;
HXDLIN(1024)										sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(1024)								if (sourcePremultiplied) {
HXLINE(1024)									bool _hx_tmp1;
HXDLIN(1024)									if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE(1024)										_hx_tmp1 = (((int)sourcePixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(1024)										_hx_tmp1 = false;
            									}
HXDLIN(1024)									if (_hx_tmp1) {
HXLINE(1024)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN(1024)										{
HXLINE(1024)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1024)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1024)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1024)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1024)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1024)											sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(1025)							{
HXLINE(1025)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE(1025)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN(1025)										int destData1 = destData->byteOffset;
HXDLIN(1025)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN(1025)										int destData2 = destData->byteOffset;
HXDLIN(1025)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN(1025)										int destData3 = destData->byteOffset;
HXDLIN(1025)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(1025)										int destData4 = destData->byteOffset;
HXDLIN(1025)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN(1025)										int destData5 = destData->byteOffset;
HXDLIN(1025)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN(1025)										int destData6 = destData->byteOffset;
HXDLIN(1025)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN(1025)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(1025)										int destData7 = destData->byteOffset;
HXDLIN(1025)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN(1025)										int destData8 = destData->byteOffset;
HXDLIN(1025)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN(1025)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN(1025)										int destData9 = destData->byteOffset;
HXDLIN(1025)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(1025)								if (destPremultiplied) {
HXLINE(1025)									bool _hx_tmp2;
HXDLIN(1025)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE(1025)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(1025)										_hx_tmp2 = false;
            									}
HXDLIN(1025)									if (_hx_tmp2) {
HXLINE(1025)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN(1025)										{
HXLINE(1025)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1025)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1025)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1025)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1025)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1025)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(1027)							{
HXLINE(1027)								int value = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * redMultiplier) + (((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ((int)256 - redMultiplier))) / (Float)(int)256));
HXDLIN(1027)								destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE(1028)							{
HXLINE(1028)								int value1 = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * greenMultiplier) + (((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ((int)256 - greenMultiplier))) / (Float)(int)256));
HXDLIN(1028)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE(1029)							{
HXLINE(1029)								int value2 = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * blueMultiplier) + (((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ((int)256 - blueMultiplier))) / (Float)(int)256));
HXDLIN(1029)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE(1030)							{
HXLINE(1030)								int value3 = ::Std_obj::_hx_int(((Float)((((int)sourcePixel & (int)(int)255) * alphaMultiplier) + (((int)destPixel & (int)(int)255) * ((int)256 - alphaMultiplier))) / (Float)(int)256));
HXDLIN(1030)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            							}
HXLINE(1032)							{
HXLINE(1032)								if (destPremultiplied) {
HXLINE(1032)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE(1032)										if ((destPixel != (int)0)) {
HXLINE(1032)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE(1032)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE(1032)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1032)											int this8 = this7->byteOffset;
HXDLIN(1032)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN(1032)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN(1032)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE(1032)										{
HXLINE(1032)											int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN(1032)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN(1032)										{
HXLINE(1032)											int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN(1032)											{
HXLINE(1032)												int destData10 = destData->byteOffset;
HXDLIN(1032)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            											}
            										}
HXDLIN(1032)										{
HXLINE(1032)											int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN(1032)											{
HXLINE(1032)												int destData11 = destData->byteOffset;
HXDLIN(1032)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            											}
            										}
HXDLIN(1032)										{
HXLINE(1032)											int val3 = ((int)destPixel & (int)(int)255);
HXDLIN(1032)											{
HXLINE(1032)												int destData12 = destData->byteOffset;
HXDLIN(1032)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(1032)										{
HXLINE(1032)											int val4 = ((int)destPixel & (int)(int)255);
HXDLIN(1032)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN(1032)										{
HXLINE(1032)											int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN(1032)											{
HXLINE(1032)												int destData13 = destData->byteOffset;
HXDLIN(1032)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            											}
            										}
HXDLIN(1032)										{
HXLINE(1032)											int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN(1032)											{
HXLINE(1032)												int destData14 = destData->byteOffset;
HXDLIN(1032)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            											}
            										}
HXDLIN(1032)										{
HXLINE(1032)											int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN(1032)											{
HXLINE(1032)												int destData15 = destData->byteOffset;
HXDLIN(1032)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(1032)										{
HXLINE(1032)											int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN(1032)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN(1032)										{
HXLINE(1032)											int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN(1032)											{
HXLINE(1032)												int destData16 = destData->byteOffset;
HXDLIN(1032)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            											}
            										}
HXDLIN(1032)										{
HXLINE(1032)											int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN(1032)											{
HXLINE(1032)												int destData17 = destData->byteOffset;
HXDLIN(1032)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            											}
            										}
HXDLIN(1032)										{
HXLINE(1032)											int val11 = ((int)destPixel & (int)(int)255);
HXDLIN(1032)											{
HXLINE(1032)												int destData18 = destData->byteOffset;
HXDLIN(1032)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE(1034)							sourcePosition = (sourcePosition + (int)4);
HXLINE(1035)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1043)		image->dirty = true;
HXLINE(1044)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,merge,(void))

void ImageDataUtil_obj::multiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1049_multiplyAlpha)
HXLINE(1051)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1052)		bool _hx_tmp;
HXDLIN(1052)		if (hx::IsNotNull( data )) {
HXLINE(1052)			_hx_tmp = !(image->buffer->transparent);
            		}
            		else {
HXLINE(1052)			_hx_tmp = true;
            		}
HXDLIN(1052)		if (_hx_tmp) {
HXLINE(1052)			return;
            		}
HXLINE(1055)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1055)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_multiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1059)			int format = image->buffer->format;
HXLINE(1060)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE(1061)			int pixel;
HXLINE(1063)			{
HXLINE(1063)				int _g1 = (int)0;
HXDLIN(1063)				int _g = length;
HXDLIN(1063)				while((_g1 < _g)){
HXLINE(1063)					_g1 = (_g1 + (int)1);
HXDLIN(1063)					int i = (_g1 - (int)1);
HXLINE(1065)					{
HXLINE(1065)						int offset = (i * (int)4);
HXDLIN(1065)						switch((int)(format)){
            							case (int)0: {
HXLINE(1065)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1065)								int data1 = data->byteOffset;
HXDLIN(1065)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1065)								int data2 = data->byteOffset;
HXDLIN(1065)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1065)								int data3 = data->byteOffset;
HXDLIN(1065)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE(1065)								int data4 = data->byteOffset;
HXDLIN(1065)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1065)								int data5 = data->byteOffset;
HXDLIN(1065)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1065)								int data6 = data->byteOffset;
HXDLIN(1065)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN(1065)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE(1065)								int data7 = data->byteOffset;
HXDLIN(1065)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1065)								int data8 = data->byteOffset;
HXDLIN(1065)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1065)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1065)								int data9 = data->byteOffset;
HXDLIN(1065)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
            					}
HXLINE(1066)					{
HXLINE(1066)						int offset1 = (i * (int)4);
HXDLIN(1066)						if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1066)							if ((pixel != (int)0)) {
HXLINE(1066)								pixel = (int)0;
            							}
            						}
            						else {
HXLINE(1066)							if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1066)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1066)								int this2 = this1->byteOffset;
HXDLIN(1066)								::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this1->buffer->b,(this2 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1066)								pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
HXDLIN(1066)						switch((int)(format)){
            							case (int)0: {
HXLINE(1066)								{
HXLINE(1066)									int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1066)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1066)								{
HXLINE(1066)									int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1066)									{
HXLINE(1066)										int data10 = data->byteOffset;
HXDLIN(1066)										::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset1 + (int)1)),val1);
            									}
            								}
HXDLIN(1066)								{
HXLINE(1066)									int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1066)									{
HXLINE(1066)										int data11 = data->byteOffset;
HXDLIN(1066)										::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset1 + (int)2)),val2);
            									}
            								}
HXDLIN(1066)								{
HXLINE(1066)									int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1066)									{
HXLINE(1066)										int data12 = data->byteOffset;
HXDLIN(1066)										::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset1 + (int)3)),val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1066)								{
HXLINE(1066)									int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1066)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN(1066)								{
HXLINE(1066)									int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1066)									{
HXLINE(1066)										int data13 = data->byteOffset;
HXDLIN(1066)										::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset1 + (int)1)),val5);
            									}
            								}
HXDLIN(1066)								{
HXLINE(1066)									int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1066)									{
HXLINE(1066)										int data14 = data->byteOffset;
HXDLIN(1066)										::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset1 + (int)2)),val6);
            									}
            								}
HXDLIN(1066)								{
HXLINE(1066)									int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1066)									{
HXLINE(1066)										int data15 = data->byteOffset;
HXDLIN(1066)										::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset1 + (int)3)),val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1066)								{
HXLINE(1066)									int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1066)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN(1066)								{
HXLINE(1066)									int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1066)									{
HXLINE(1066)										int data16 = data->byteOffset;
HXDLIN(1066)										::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset1 + (int)1)),val9);
            									}
            								}
HXDLIN(1066)								{
HXLINE(1066)									int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1066)									{
HXLINE(1066)										int data17 = data->byteOffset;
HXDLIN(1066)										::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset1 + (int)2)),val10);
            									}
            								}
HXDLIN(1066)								{
HXLINE(1066)									int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1066)									{
HXLINE(1066)										int data18 = data->byteOffset;
HXDLIN(1066)										::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset1 + (int)3)),val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1072)		image->buffer->premultiplied = true;
HXLINE(1073)		image->dirty = true;
HXLINE(1074)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,multiplyAlpha,(void))

void ImageDataUtil_obj::resize( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1079_resize)
HXLINE(1081)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE(1082)		bool _hx_tmp;
HXDLIN(1082)		if ((buffer->width == newWidth)) {
HXLINE(1082)			_hx_tmp = (buffer->height == newHeight);
            		}
            		else {
HXLINE(1082)			_hx_tmp = false;
            		}
HXDLIN(1082)		if (_hx_tmp) {
HXLINE(1082)			return;
            		}
HXLINE(1083)		 ::Dynamic elements = ((newWidth * newHeight) * (int)4);
HXDLIN(1083)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1083)		if (hx::IsNotNull( elements )) {
HXLINE(1083)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE(1083)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1083)		 ::lime::graphics::ImageBuffer newBuffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,newWidth,newHeight,null(),null());
HXLINE(1086)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1086)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_resize(hx::DynamicPtr(image),hx::DynamicPtr(newBuffer),newWidth,newHeight);
            		}
            		else {
HXLINE(1090)			int imageWidth = image->width;
HXLINE(1091)			int imageHeight = image->height;
HXLINE(1093)			 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE(1094)			 ::lime::utils::ArrayBufferView newData = newBuffer->data;
HXLINE(1095)			int sourceIndex;
HXDLIN(1095)			int sourceIndexX;
HXDLIN(1095)			int sourceIndexY;
HXDLIN(1095)			int sourceIndexXY;
HXDLIN(1095)			int index;
HXLINE(1096)			int sourceX;
HXDLIN(1096)			int sourceY;
HXLINE(1097)			Float u;
HXDLIN(1097)			Float v;
HXDLIN(1097)			Float uRatio;
HXDLIN(1097)			Float vRatio;
HXDLIN(1097)			Float uOpposite;
HXDLIN(1097)			Float vOpposite;
HXLINE(1099)			{
HXLINE(1099)				int _g1 = (int)0;
HXDLIN(1099)				int _g = newHeight;
HXDLIN(1099)				while((_g1 < _g)){
HXLINE(1099)					_g1 = (_g1 + (int)1);
HXDLIN(1099)					int y = (_g1 - (int)1);
HXLINE(1101)					{
HXLINE(1101)						int _g3 = (int)0;
HXDLIN(1101)						int _g2 = newWidth;
HXDLIN(1101)						while((_g3 < _g2)){
HXLINE(1101)							_g3 = (_g3 + (int)1);
HXDLIN(1101)							int x = (_g3 - (int)1);
HXLINE(1105)							u = ((((Float)(x + ((Float)0.5)) / (Float)newWidth) * imageWidth) - ((Float)0.5));
HXLINE(1106)							v = ((((Float)(y + ((Float)0.5)) / (Float)newHeight) * imageHeight) - ((Float)0.5));
HXLINE(1108)							sourceX = ::Std_obj::_hx_int(u);
HXLINE(1109)							sourceY = ::Std_obj::_hx_int(v);
HXLINE(1111)							sourceIndex = (((sourceY * imageWidth) + sourceX) * (int)4);
HXLINE(1112)							if ((sourceX < (imageWidth - (int)1))) {
HXLINE(1112)								sourceIndexX = (sourceIndex + (int)4);
            							}
            							else {
HXLINE(1112)								sourceIndexX = sourceIndex;
            							}
HXLINE(1113)							if ((sourceY < (imageHeight - (int)1))) {
HXLINE(1113)								sourceIndexY = (sourceIndex + (imageWidth * (int)4));
            							}
            							else {
HXLINE(1113)								sourceIndexY = sourceIndex;
            							}
HXLINE(1114)							if ((sourceIndexX != sourceIndex)) {
HXLINE(1114)								sourceIndexXY = (sourceIndexY + (int)4);
            							}
            							else {
HXLINE(1114)								sourceIndexXY = sourceIndexY;
            							}
HXLINE(1116)							index = (((y * newWidth) + x) * (int)4);
HXLINE(1118)							uRatio = (u - sourceX);
HXLINE(1119)							vRatio = (v - sourceY);
HXLINE(1120)							uOpposite = ((int)1 - uRatio);
HXLINE(1121)							vOpposite = ((int)1 - vRatio);
HXLINE(1123)							{
HXLINE(1123)								int _hx_int = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN(1123)								Float val;
HXDLIN(1123)								if ((_hx_int < (int)0)) {
HXLINE(1123)									val = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE(1123)									val = (_hx_int + ((Float)0.0));
            								}
HXDLIN(1123)								Float val1 = (val * uOpposite);
HXDLIN(1123)								int int1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexX)) & (int)(int)255);
HXDLIN(1123)								Float val2;
HXDLIN(1123)								if ((int1 < (int)0)) {
HXLINE(1123)									val2 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE(1123)									val2 = (int1 + ((Float)0.0));
            								}
HXDLIN(1123)								Float val3 = ((val1 + (val2 * uRatio)) * vOpposite);
HXDLIN(1123)								int int2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexY)) & (int)(int)255);
HXDLIN(1123)								Float val4;
HXDLIN(1123)								if ((int2 < (int)0)) {
HXLINE(1123)									val4 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE(1123)									val4 = (int2 + ((Float)0.0));
            								}
HXDLIN(1123)								Float val5 = (val4 * uOpposite);
HXDLIN(1123)								int int3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexXY)) & (int)(int)255);
HXDLIN(1123)								Float val6;
HXDLIN(1123)								if ((int3 < (int)0)) {
HXLINE(1123)									val6 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE(1123)									val6 = (int3 + ((Float)0.0));
            								}
HXDLIN(1123)								int val7 = ::Std_obj::_hx_int((val3 + ((val5 + (val6 * uRatio)) * vRatio)));
HXDLIN(1123)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val7);
            							}
HXLINE(1124)							{
HXLINE(1124)								int data1 = data->byteOffset;
HXDLIN(1124)								int int4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN(1124)								Float val8;
HXDLIN(1124)								if ((int4 < (int)0)) {
HXLINE(1124)									val8 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1124)									val8 = (int4 + ((Float)0.0));
            								}
HXDLIN(1124)								Float val9 = (val8 * uOpposite);
HXDLIN(1124)								int data2 = data->byteOffset;
HXDLIN(1124)								int int5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (sourceIndexX + (int)1))) & (int)(int)255);
HXDLIN(1124)								Float val10;
HXDLIN(1124)								if ((int5 < (int)0)) {
HXLINE(1124)									val10 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1124)									val10 = (int5 + ((Float)0.0));
            								}
HXDLIN(1124)								Float val11 = ((val9 + (val10 * uRatio)) * vOpposite);
HXDLIN(1124)								int data3 = data->byteOffset;
HXDLIN(1124)								int int6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (sourceIndexY + (int)1))) & (int)(int)255);
HXDLIN(1124)								Float val12;
HXDLIN(1124)								if ((int6 < (int)0)) {
HXLINE(1124)									val12 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1124)									val12 = (int6 + ((Float)0.0));
            								}
HXDLIN(1124)								Float val13 = (val12 * uOpposite);
HXDLIN(1124)								int data4 = data->byteOffset;
HXDLIN(1124)								int int7 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (sourceIndexXY + (int)1))) & (int)(int)255);
HXDLIN(1124)								Float val14;
HXDLIN(1124)								if ((int7 < (int)0)) {
HXLINE(1124)									val14 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1124)									val14 = (int7 + ((Float)0.0));
            								}
HXDLIN(1124)								int val15 = ::Std_obj::_hx_int((val11 + ((val13 + (val14 * uRatio)) * vRatio)));
HXDLIN(1124)								{
HXLINE(1124)									int newData1 = newData->byteOffset;
HXDLIN(1124)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData1 + (index + (int)1)),val15);
            								}
            							}
HXLINE(1125)							{
HXLINE(1125)								int data5 = data->byteOffset;
HXDLIN(1125)								int int8 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN(1125)								Float val16;
HXDLIN(1125)								if ((int8 < (int)0)) {
HXLINE(1125)									val16 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE(1125)									val16 = (int8 + ((Float)0.0));
            								}
HXDLIN(1125)								Float val17 = (val16 * uOpposite);
HXDLIN(1125)								int data6 = data->byteOffset;
HXDLIN(1125)								int int9 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (sourceIndexX + (int)2))) & (int)(int)255);
HXDLIN(1125)								Float val18;
HXDLIN(1125)								if ((int9 < (int)0)) {
HXLINE(1125)									val18 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE(1125)									val18 = (int9 + ((Float)0.0));
            								}
HXDLIN(1125)								Float val19 = ((val17 + (val18 * uRatio)) * vOpposite);
HXDLIN(1125)								int data7 = data->byteOffset;
HXDLIN(1125)								int int10 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (sourceIndexY + (int)2))) & (int)(int)255);
HXDLIN(1125)								Float val20;
HXDLIN(1125)								if ((int10 < (int)0)) {
HXLINE(1125)									val20 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE(1125)									val20 = (int10 + ((Float)0.0));
            								}
HXDLIN(1125)								Float val21 = (val20 * uOpposite);
HXDLIN(1125)								int data8 = data->byteOffset;
HXDLIN(1125)								int int11 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (sourceIndexXY + (int)2))) & (int)(int)255);
HXDLIN(1125)								Float val22;
HXDLIN(1125)								if ((int11 < (int)0)) {
HXLINE(1125)									val22 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE(1125)									val22 = (int11 + ((Float)0.0));
            								}
HXDLIN(1125)								int val23 = ::Std_obj::_hx_int((val19 + ((val21 + (val22 * uRatio)) * vRatio)));
HXDLIN(1125)								{
HXLINE(1125)									int newData2 = newData->byteOffset;
HXDLIN(1125)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData2 + (index + (int)2)),val23);
            								}
            							}
HXLINE(1129)							bool _hx_tmp1;
HXDLIN(1129)							bool _hx_tmp2;
HXDLIN(1129)							int data9 = data->byteOffset;
HXDLIN(1129)							if (hx::IsNotEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (sourceIndexX + (int)3))) & (int)(int)255),(int)0 )) {
HXLINE(1129)								int data10 = data->byteOffset;
HXDLIN(1129)								_hx_tmp2 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data10 + (sourceIndexY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE(1129)								_hx_tmp2 = true;
            							}
HXDLIN(1129)							if (!(_hx_tmp2)) {
HXLINE(1129)								int data11 = data->byteOffset;
HXDLIN(1129)								_hx_tmp1 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data11 + (sourceIndexXY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE(1129)								_hx_tmp1 = true;
            							}
HXDLIN(1129)							if (_hx_tmp1) {
HXLINE(1131)								int newData3 = newData->byteOffset;
HXDLIN(1131)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData3 + (index + (int)3)),(int)0);
            							}
            							else {
HXLINE(1135)								int data12 = data->byteOffset;
HXDLIN(1135)								int val24 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data12 + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN(1135)								{
HXLINE(1135)									int newData4 = newData->byteOffset;
HXDLIN(1135)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData4 + (index + (int)3)),val24);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1145)		buffer->data = newBuffer->data;
HXLINE(1146)		buffer->width = newWidth;
HXLINE(1147)		buffer->height = newHeight;
HXLINE(1156)		image->dirty = true;
HXLINE(1157)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resize,(void))

void ImageDataUtil_obj::resizeBuffer( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1162_resizeBuffer)
HXLINE(1164)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE(1165)		 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE(1166)		 ::Dynamic elements = ((newWidth * newHeight) * (int)4);
HXDLIN(1166)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1166)		if (hx::IsNotNull( elements )) {
HXLINE(1166)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE(1166)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1166)		 ::lime::utils::ArrayBufferView newData = this1;
HXLINE(1167)		int sourceIndex;
HXDLIN(1167)		int index;
HXLINE(1169)		{
HXLINE(1169)			int _g1 = (int)0;
HXDLIN(1169)			int _g = buffer->height;
HXDLIN(1169)			while((_g1 < _g)){
HXLINE(1169)				_g1 = (_g1 + (int)1);
HXDLIN(1169)				int y = (_g1 - (int)1);
HXLINE(1171)				{
HXLINE(1171)					int _g3 = (int)0;
HXDLIN(1171)					int _g2 = buffer->width;
HXDLIN(1171)					while((_g3 < _g2)){
HXLINE(1171)						_g3 = (_g3 + (int)1);
HXDLIN(1171)						int x = (_g3 - (int)1);
HXLINE(1173)						sourceIndex = (((y * buffer->width) + x) * (int)4);
HXLINE(1174)						index = (((y * newWidth) + x) * (int)4);
HXLINE(1176)						{
HXLINE(1176)							int val = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN(1176)							::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val);
            						}
HXLINE(1177)						{
HXLINE(1177)							int data1 = data->byteOffset;
HXDLIN(1177)							int val1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN(1177)							{
HXLINE(1177)								int newData1 = newData->byteOffset;
HXDLIN(1177)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData1 + (index + (int)1)),val1);
            							}
            						}
HXLINE(1178)						{
HXLINE(1178)							int data2 = data->byteOffset;
HXDLIN(1178)							int val2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN(1178)							{
HXLINE(1178)								int newData2 = newData->byteOffset;
HXDLIN(1178)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData2 + (index + (int)2)),val2);
            							}
            						}
HXLINE(1179)						{
HXLINE(1179)							int data3 = data->byteOffset;
HXDLIN(1179)							int val3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN(1179)							{
HXLINE(1179)								int newData3 = newData->byteOffset;
HXDLIN(1179)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData3 + (index + (int)3)),val3);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1185)		buffer->data = newData;
HXLINE(1186)		buffer->width = newWidth;
HXLINE(1187)		buffer->height = newHeight;
HXLINE(1196)		image->dirty = true;
HXLINE(1197)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resizeBuffer,(void))

void ImageDataUtil_obj::setFormat( ::lime::graphics::Image image,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1201_setFormat)
HXLINE(1203)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1204)		if (hx::IsNull( data )) {
HXLINE(1204)			return;
            		}
HXLINE(1207)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1207)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_format(hx::DynamicPtr(image),format);
            		}
            		else {
HXLINE(1211)			int index;
HXDLIN(1211)			 ::Dynamic a16;
HXLINE(1212)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE(1213)			int r1;
HXDLIN(1213)			int g1;
HXDLIN(1213)			int b1;
HXDLIN(1213)			int a1;
HXDLIN(1213)			int r2;
HXDLIN(1213)			int g2;
HXDLIN(1213)			int b2;
HXDLIN(1213)			int a2;
HXLINE(1214)			 ::Dynamic r;
HXDLIN(1214)			 ::Dynamic g;
HXDLIN(1214)			 ::Dynamic b;
HXDLIN(1214)			 ::Dynamic a;
HXLINE(1216)			{
HXLINE(1216)				int _g = image->get_format();
HXDLIN(1216)				switch((int)(_g)){
            					case (int)0: {
HXLINE(1220)						r1 = (int)0;
HXLINE(1221)						g1 = (int)1;
HXLINE(1222)						b1 = (int)2;
HXLINE(1223)						a1 = (int)3;
            					}
            					break;
            					case (int)1: {
HXLINE(1227)						r1 = (int)1;
HXLINE(1228)						g1 = (int)2;
HXLINE(1229)						b1 = (int)3;
HXLINE(1230)						a1 = (int)0;
            					}
            					break;
            					case (int)2: {
HXLINE(1234)						r1 = (int)2;
HXLINE(1235)						g1 = (int)1;
HXLINE(1236)						b1 = (int)0;
HXLINE(1237)						a1 = (int)3;
            					}
            					break;
            				}
            			}
HXLINE(1241)			switch((int)(format)){
            				case (int)0: {
HXLINE(1245)					r2 = (int)0;
HXLINE(1246)					g2 = (int)1;
HXLINE(1247)					b2 = (int)2;
HXLINE(1248)					a2 = (int)3;
            				}
            				break;
            				case (int)1: {
HXLINE(1252)					r2 = (int)1;
HXLINE(1253)					g2 = (int)2;
HXLINE(1254)					b2 = (int)3;
HXLINE(1255)					a2 = (int)0;
            				}
            				break;
            				case (int)2: {
HXLINE(1259)					r2 = (int)2;
HXLINE(1260)					g2 = (int)1;
HXLINE(1261)					b2 = (int)0;
HXLINE(1262)					a2 = (int)3;
            				}
            				break;
            			}
HXLINE(1266)			{
HXLINE(1266)				int _g2 = (int)0;
HXDLIN(1266)				int _g1 = length;
HXDLIN(1266)				while((_g2 < _g1)){
HXLINE(1266)					_g2 = (_g2 + (int)1);
HXDLIN(1266)					int i = (_g2 - (int)1);
HXLINE(1268)					index = (i * (int)4);
HXLINE(1270)					int data1 = data->byteOffset;
HXDLIN(1270)					r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (index + r1))) & (int)(int)255);
HXLINE(1271)					int data2 = data->byteOffset;
HXDLIN(1271)					g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (index + g1))) & (int)(int)255);
HXLINE(1272)					int data3 = data->byteOffset;
HXDLIN(1272)					b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (index + b1))) & (int)(int)255);
HXLINE(1273)					int data4 = data->byteOffset;
HXDLIN(1273)					a = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (index + a1))) & (int)(int)255);
HXLINE(1275)					{
HXLINE(1275)						int val = r;
HXDLIN(1275)						{
HXLINE(1275)							int data5 = data->byteOffset;
HXDLIN(1275)							::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (index + r2)),val);
            						}
            					}
HXLINE(1276)					{
HXLINE(1276)						int val1 = g;
HXDLIN(1276)						{
HXLINE(1276)							int data6 = data->byteOffset;
HXDLIN(1276)							::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (index + g2)),val1);
            						}
            					}
HXLINE(1277)					{
HXLINE(1277)						int val2 = b;
HXDLIN(1277)						{
HXLINE(1277)							int data7 = data->byteOffset;
HXDLIN(1277)							::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (index + b2)),val2);
            						}
            					}
HXLINE(1278)					{
HXLINE(1278)						int val3 = a;
HXDLIN(1278)						{
HXLINE(1278)							int data8 = data->byteOffset;
HXDLIN(1278)							::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (index + a2)),val3);
            						}
            					}
            				}
            			}
            		}
HXLINE(1284)		image->buffer->format = format;
HXLINE(1285)		image->dirty = true;
HXLINE(1286)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,setFormat,(void))

void ImageDataUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1291_setPixel)
HXLINE(1293)		int pixel;
HXLINE(1295)		switch((int)(format)){
            			case (int)1: {
HXLINE(1297)				int argb = color;
HXDLIN(1297)				int this1 = (int)0;
HXDLIN(1297)				int rgba = this1;
HXDLIN(1297)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1297)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1298)				int bgra = color;
HXDLIN(1298)				int this2 = (int)0;
HXDLIN(1298)				int rgba1 = this2;
HXDLIN(1298)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1298)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1299)				pixel = color;
            			}
            		}
HXLINE(1305)		int this3 = (int)0;
HXDLIN(1305)		int source = this3;
HXLINE(1306)		{
HXLINE(1306)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1306)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1306)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN(1306)			bool premultiplied = image->buffer->premultiplied;
HXDLIN(1306)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE(1306)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN(1306)					int data1 = data->byteOffset;
HXDLIN(1306)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1306)					int data2 = data->byteOffset;
HXDLIN(1306)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1306)					int data3 = data->byteOffset;
HXDLIN(1306)					source = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE(1306)					int data4 = data->byteOffset;
HXDLIN(1306)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1306)					int data5 = data->byteOffset;
HXDLIN(1306)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1306)					int data6 = data->byteOffset;
HXDLIN(1306)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN(1306)					source = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE(1306)					int data7 = data->byteOffset;
HXDLIN(1306)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1306)					int data8 = data->byteOffset;
HXDLIN(1306)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1306)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN(1306)					int data9 = data->byteOffset;
HXDLIN(1306)					source = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN(1306)			if (premultiplied) {
HXLINE(1306)				bool _hx_tmp;
HXDLIN(1306)				if ((((int)source & (int)(int)255) != (int)0)) {
HXLINE(1306)					_hx_tmp = (((int)source & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE(1306)					_hx_tmp = false;
            				}
HXDLIN(1306)				if (_hx_tmp) {
HXLINE(1306)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)source & (int)(int)255));
HXDLIN(1306)					{
HXLINE(1306)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1306)						int r3 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1306)						 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1306)						int g3 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1306)						 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1306)						source = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)source & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE(1308)		{
HXLINE(1308)			int value = ((int)source & (int)(int)255);
HXDLIN(1308)			pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value & (int)(int)255));
            		}
HXLINE(1309)		{
HXLINE(1309)			 ::lime::utils::ArrayBufferView data10 = image->buffer->data;
HXDLIN(1309)			int offset2 = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1309)			int offset3 = (offset2 + ((x + image->offsetX) * (int)4));
HXDLIN(1309)			int format1 = image->buffer->format;
HXDLIN(1309)			if (image->buffer->premultiplied) {
HXLINE(1309)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1309)					if ((pixel != (int)0)) {
HXLINE(1309)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1309)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1309)						 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1309)						int this8 = this7->byteOffset;
HXDLIN(1309)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1309)						pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN(1309)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1309)					{
HXLINE(1309)						int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1309)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val);
            					}
HXDLIN(1309)					{
HXLINE(1309)						int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1309)						{
HXLINE(1309)							int data11 = data10->byteOffset;
HXDLIN(1309)							::__hxcpp_memory_set_byte(data10->buffer->b,(data11 + (offset3 + (int)1)),val1);
            						}
            					}
HXDLIN(1309)					{
HXLINE(1309)						int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1309)						{
HXLINE(1309)							int data12 = data10->byteOffset;
HXDLIN(1309)							::__hxcpp_memory_set_byte(data10->buffer->b,(data12 + (offset3 + (int)2)),val2);
            						}
            					}
HXDLIN(1309)					{
HXLINE(1309)						int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1309)						{
HXLINE(1309)							int data13 = data10->byteOffset;
HXDLIN(1309)							::__hxcpp_memory_set_byte(data10->buffer->b,(data13 + (offset3 + (int)3)),val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1309)					{
HXLINE(1309)						int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1309)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val4);
            					}
HXDLIN(1309)					{
HXLINE(1309)						int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1309)						{
HXLINE(1309)							int data14 = data10->byteOffset;
HXDLIN(1309)							::__hxcpp_memory_set_byte(data10->buffer->b,(data14 + (offset3 + (int)1)),val5);
            						}
            					}
HXDLIN(1309)					{
HXLINE(1309)						int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1309)						{
HXLINE(1309)							int data15 = data10->byteOffset;
HXDLIN(1309)							::__hxcpp_memory_set_byte(data10->buffer->b,(data15 + (offset3 + (int)2)),val6);
            						}
            					}
HXDLIN(1309)					{
HXLINE(1309)						int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1309)						{
HXLINE(1309)							int data16 = data10->byteOffset;
HXDLIN(1309)							::__hxcpp_memory_set_byte(data10->buffer->b,(data16 + (offset3 + (int)3)),val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1309)					{
HXLINE(1309)						int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1309)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val8);
            					}
HXDLIN(1309)					{
HXLINE(1309)						int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1309)						{
HXLINE(1309)							int data17 = data10->byteOffset;
HXDLIN(1309)							::__hxcpp_memory_set_byte(data10->buffer->b,(data17 + (offset3 + (int)1)),val9);
            						}
            					}
HXDLIN(1309)					{
HXLINE(1309)						int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1309)						{
HXLINE(1309)							int data18 = data10->byteOffset;
HXDLIN(1309)							::__hxcpp_memory_set_byte(data10->buffer->b,(data18 + (offset3 + (int)2)),val10);
            						}
            					}
HXDLIN(1309)					{
HXLINE(1309)						int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1309)						{
HXLINE(1309)							int data19 = data10->byteOffset;
HXDLIN(1309)							::__hxcpp_memory_set_byte(data10->buffer->b,(data19 + (offset3 + (int)3)),val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1311)		image->dirty = true;
HXLINE(1312)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel,(void))

void ImageDataUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1317_setPixel32)
HXLINE(1319)		int pixel;
HXLINE(1321)		switch((int)(format)){
            			case (int)1: {
HXLINE(1323)				int argb = color;
HXDLIN(1323)				int this1 = (int)0;
HXDLIN(1323)				int rgba = this1;
HXDLIN(1323)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1323)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1324)				int bgra = color;
HXDLIN(1324)				int this2 = (int)0;
HXDLIN(1324)				int rgba1 = this2;
HXDLIN(1324)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1324)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1325)				pixel = color;
            			}
            		}
HXLINE(1329)		if (!(image->get_transparent())) {
HXLINE(1329)			pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE(1330)		{
HXLINE(1330)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1330)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1330)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN(1330)			int format1 = image->buffer->format;
HXDLIN(1330)			if (image->buffer->premultiplied) {
HXLINE(1330)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1330)					if ((pixel != (int)0)) {
HXLINE(1330)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1330)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1330)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1330)						int this4 = this3->byteOffset;
HXDLIN(1330)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1330)						pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN(1330)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1330)					{
HXLINE(1330)						int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1330)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            					}
HXDLIN(1330)					{
HXLINE(1330)						int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1330)						{
HXLINE(1330)							int data1 = data->byteOffset;
HXDLIN(1330)							::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset1 + (int)1)),val1);
            						}
            					}
HXDLIN(1330)					{
HXLINE(1330)						int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1330)						{
HXLINE(1330)							int data2 = data->byteOffset;
HXDLIN(1330)							::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset1 + (int)2)),val2);
            						}
            					}
HXDLIN(1330)					{
HXLINE(1330)						int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1330)						{
HXLINE(1330)							int data3 = data->byteOffset;
HXDLIN(1330)							::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset1 + (int)3)),val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1330)					{
HXLINE(1330)						int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1330)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            					}
HXDLIN(1330)					{
HXLINE(1330)						int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1330)						{
HXLINE(1330)							int data4 = data->byteOffset;
HXDLIN(1330)							::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset1 + (int)1)),val5);
            						}
            					}
HXDLIN(1330)					{
HXLINE(1330)						int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1330)						{
HXLINE(1330)							int data5 = data->byteOffset;
HXDLIN(1330)							::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset1 + (int)2)),val6);
            						}
            					}
HXDLIN(1330)					{
HXLINE(1330)						int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1330)						{
HXLINE(1330)							int data6 = data->byteOffset;
HXDLIN(1330)							::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset1 + (int)3)),val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1330)					{
HXLINE(1330)						int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1330)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            					}
HXDLIN(1330)					{
HXLINE(1330)						int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1330)						{
HXLINE(1330)							int data7 = data->byteOffset;
HXDLIN(1330)							::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset1 + (int)1)),val9);
            						}
            					}
HXDLIN(1330)					{
HXLINE(1330)						int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1330)						{
HXLINE(1330)							int data8 = data->byteOffset;
HXDLIN(1330)							::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset1 + (int)2)),val10);
            						}
            					}
HXDLIN(1330)					{
HXLINE(1330)						int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1330)						{
HXLINE(1330)							int data9 = data->byteOffset;
HXDLIN(1330)							::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset1 + (int)3)),val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1332)		image->dirty = true;
HXLINE(1333)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel32,(void))

void ImageDataUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::BytePointerData bytePointer,int format, ::lime::_hx_system::Endian endian){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1338_setPixels)
HXLINE(1340)		if (hx::IsNull( image->buffer->data )) {
HXLINE(1340)			return;
            		}
HXLINE(1343)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1343)			int _hx_tmp;
HXDLIN(1343)			if (hx::IsEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() )) {
HXLINE(1343)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(1343)				_hx_tmp = (int)0;
            			}
HXDLIN(1343)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(bytePointer->bytes),bytePointer->offset,format,_hx_tmp);
            		}
            		else {
HXLINE(1347)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1348)			int sourceFormat = image->buffer->format;
HXLINE(1349)			bool premultiplied = image->buffer->premultiplied;
HXLINE(1350)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(1351)			int row;
HXDLIN(1351)			int color;
HXDLIN(1351)			int pixel;
HXLINE(1352)			bool transparent = image->get_transparent();
HXLINE(1353)			 ::haxe::io::Bytes bytes = bytePointer->bytes;
HXLINE(1354)			int dataPosition = bytePointer->offset;
HXLINE(1355)			bool littleEndian = hx::IsNotEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() );
HXLINE(1357)			{
HXLINE(1357)				int _g1 = (int)0;
HXDLIN(1357)				int _g = dataView->height;
HXDLIN(1357)				while((_g1 < _g)){
HXLINE(1357)					_g1 = (_g1 + (int)1);
HXDLIN(1357)					int y = (_g1 - (int)1);
HXLINE(1359)					int dataView1 = dataView->byteOffset;
HXDLIN(1359)					row = (dataView1 + (dataView->stride * y));
HXLINE(1361)					{
HXLINE(1361)						int _g3 = (int)0;
HXDLIN(1361)						int _g2 = dataView->width;
HXDLIN(1361)						while((_g3 < _g2)){
HXLINE(1361)							_g3 = (_g3 + (int)1);
HXDLIN(1361)							int x = (_g3 - (int)1);
HXLINE(1363)							if (littleEndian) {
HXLINE(1365)								int bytes1 = bytes->b->__get(dataPosition);
HXDLIN(1365)								::Array< unsigned char > bytes2 = bytes->b;
HXDLIN(1365)								int color1 = ((int)bytes1 | (int)((int)bytes2->__get((dataPosition + (int)1)) << (int)(int)8));
HXDLIN(1365)								::Array< unsigned char > bytes3 = bytes->b;
HXDLIN(1365)								int color2 = ((int)color1 | (int)((int)bytes3->__get((dataPosition + (int)2)) << (int)(int)16));
HXDLIN(1365)								::Array< unsigned char > bytes4 = bytes->b;
HXDLIN(1365)								color = ((int)color2 | (int)((int)bytes4->__get((dataPosition + (int)3)) << (int)(int)24));
            							}
            							else {
HXLINE(1369)								::Array< unsigned char > bytes5 = bytes->b;
HXDLIN(1369)								int bytes6 = bytes5->__get((dataPosition + (int)3));
HXDLIN(1369)								::Array< unsigned char > bytes7 = bytes->b;
HXDLIN(1369)								int color3 = ((int)bytes6 | (int)((int)bytes7->__get((dataPosition + (int)2)) << (int)(int)8));
HXDLIN(1369)								::Array< unsigned char > bytes8 = bytes->b;
HXDLIN(1369)								int color4 = ((int)color3 | (int)((int)bytes8->__get((dataPosition + (int)1)) << (int)(int)16));
HXDLIN(1369)								color = ((int)color4 | (int)((int)bytes->b->__get(dataPosition) << (int)(int)24));
            							}
HXLINE(1373)							dataPosition = (dataPosition + (int)4);
HXLINE(1375)							switch((int)(format)){
            								case (int)1: {
HXLINE(1377)									int argb = color;
HXDLIN(1377)									int this1 = (int)0;
HXDLIN(1377)									int rgba = this1;
HXDLIN(1377)									rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1377)									pixel = rgba;
            								}
            								break;
            								case (int)2: {
HXLINE(1378)									int bgra = color;
HXDLIN(1378)									int this2 = (int)0;
HXDLIN(1378)									int rgba1 = this2;
HXDLIN(1378)									rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1378)									pixel = rgba1;
            								}
            								break;
            								default:{
HXLINE(1379)									pixel = color;
            								}
            							}
HXLINE(1383)							if (!(transparent)) {
HXLINE(1383)								pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            							}
HXLINE(1384)							{
HXLINE(1384)								int offset = (row + (x * (int)4));
HXDLIN(1384)								if (premultiplied) {
HXLINE(1384)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1384)										if ((pixel != (int)0)) {
HXLINE(1384)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(1384)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1384)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1384)											int this4 = this3->byteOffset;
HXDLIN(1384)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1384)											pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN(1384)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1384)										{
HXLINE(1384)											int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1384)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(1384)										{
HXLINE(1384)											int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1384)											{
HXLINE(1384)												int data1 = data->byteOffset;
HXDLIN(1384)												::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN(1384)										{
HXLINE(1384)											int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1384)											{
HXLINE(1384)												int data2 = data->byteOffset;
HXDLIN(1384)												::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN(1384)										{
HXLINE(1384)											int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1384)											{
HXLINE(1384)												int data3 = data->byteOffset;
HXDLIN(1384)												::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(1384)										{
HXLINE(1384)											int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1384)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN(1384)										{
HXLINE(1384)											int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1384)											{
HXLINE(1384)												int data4 = data->byteOffset;
HXDLIN(1384)												::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN(1384)										{
HXLINE(1384)											int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1384)											{
HXLINE(1384)												int data5 = data->byteOffset;
HXDLIN(1384)												::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN(1384)										{
HXLINE(1384)											int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1384)											{
HXLINE(1384)												int data6 = data->byteOffset;
HXDLIN(1384)												::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(1384)										{
HXLINE(1384)											int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1384)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN(1384)										{
HXLINE(1384)											int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1384)											{
HXLINE(1384)												int data7 = data->byteOffset;
HXDLIN(1384)												::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN(1384)										{
HXLINE(1384)											int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1384)											{
HXLINE(1384)												int data8 = data->byteOffset;
HXDLIN(1384)												::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN(1384)										{
HXLINE(1384)											int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1384)											{
HXLINE(1384)												int data9 = data->byteOffset;
HXDLIN(1384)												::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1392)		image->dirty = true;
HXLINE(1393)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixels,(void))

int ImageDataUtil_obj::threshold( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,int color,int mask,bool copySource,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1398_threshold)
HXLINE(1400)		int _color;
HXDLIN(1400)		int _mask;
HXDLIN(1400)		int _threshold;
HXLINE(1402)		switch((int)(format)){
            			case (int)1: {
HXLINE(1406)				int argb = color;
HXDLIN(1406)				int this1 = (int)0;
HXDLIN(1406)				int rgba = this1;
HXDLIN(1406)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1406)				_color = rgba;
HXLINE(1407)				int argb1 = mask;
HXDLIN(1407)				int this2 = (int)0;
HXDLIN(1407)				int rgba1 = this2;
HXDLIN(1407)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1407)				_mask = rgba1;
HXLINE(1408)				int argb2 = threshold;
HXDLIN(1408)				int this3 = (int)0;
HXDLIN(1408)				int rgba2 = this3;
HXDLIN(1408)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1408)				_threshold = rgba2;
            			}
            			break;
            			case (int)2: {
HXLINE(1412)				int bgra = color;
HXDLIN(1412)				int this4 = (int)0;
HXDLIN(1412)				int rgba3 = this4;
HXDLIN(1412)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1412)				_color = rgba3;
HXLINE(1413)				int bgra1 = mask;
HXDLIN(1413)				int this5 = (int)0;
HXDLIN(1413)				int rgba4 = this5;
HXDLIN(1413)				rgba4 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN(1413)				_mask = rgba4;
HXLINE(1414)				int bgra2 = threshold;
HXDLIN(1414)				int this6 = (int)0;
HXDLIN(1414)				int rgba5 = this6;
HXDLIN(1414)				rgba5 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra2,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra2 & (int)(int)255) & (int)(int)255));
HXDLIN(1414)				_threshold = rgba5;
            			}
            			break;
            			default:{
HXLINE(1418)				_color = color;
HXLINE(1419)				_mask = mask;
HXLINE(1420)				_threshold = threshold;
            			}
            		}
HXLINE(1424)		int _operation;
HXDLIN(1424)		::String _hx_switch_0 = operation;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE(1424)			_operation = (int)0;
HXDLIN(1424)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE(1424)			_operation = (int)2;
HXDLIN(1424)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE(1424)			_operation = (int)3;
HXDLIN(1424)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE(1424)			_operation = (int)1;
HXDLIN(1424)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE(1424)			_operation = (int)4;
HXDLIN(1424)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE(1424)			_operation = (int)5;
HXDLIN(1424)			goto _hx_goto_69;
            		}
            		/* default */{
HXLINE(1424)			_operation = (int)-1;
            		}
            		_hx_goto_69:;
HXLINE(1436)		if ((_operation == (int)-1)) {
HXLINE(1436)			return (int)0;
            		}
HXLINE(1438)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE(1439)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE(1441)		bool _hx_tmp;
HXDLIN(1441)		if (hx::IsNotNull( srcData )) {
HXLINE(1441)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE(1441)			_hx_tmp = true;
            		}
HXDLIN(1441)		if (_hx_tmp) {
HXLINE(1441)			return (int)0;
            		}
HXLINE(1443)		int hits = (int)0;
HXLINE(1446)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1446)			 ::Dynamic hits1 = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN(1446)			hits = ::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_threshold(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),_operation,((int)((int)_threshold >> (int)(int)16) & (int)(int)65535),((int)_threshold & (int)(int)65535),((int)((int)_color >> (int)(int)16) & (int)(int)65535),((int)_color & (int)(int)65535),((int)((int)_mask >> (int)(int)16) & (int)(int)65535),((int)_mask & (int)(int)65535),copySource);
            		}
            		else {
HXLINE(1450)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView srcView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE(1451)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE(1453)			int srcFormat = sourceImage->buffer->format;
HXLINE(1454)			int destFormat = image->buffer->format;
HXLINE(1455)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE(1456)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE(1458)			int srcPosition;
HXDLIN(1458)			int destPosition;
HXDLIN(1458)			int srcPixel;
HXDLIN(1458)			int destPixel;
HXDLIN(1458)			int pixelMask;
HXDLIN(1458)			bool test;
HXDLIN(1458)			int value;
HXLINE(1460)			{
HXLINE(1460)				int _g1 = (int)0;
HXDLIN(1460)				int _g = destView->height;
HXDLIN(1460)				while((_g1 < _g)){
HXLINE(1460)					_g1 = (_g1 + (int)1);
HXDLIN(1460)					int y = (_g1 - (int)1);
HXLINE(1462)					int srcView1 = srcView->byteOffset;
HXDLIN(1462)					srcPosition = (srcView1 + (srcView->stride * y));
HXLINE(1463)					int destView1 = destView->byteOffset;
HXDLIN(1463)					destPosition = (destView1 + (destView->stride * y));
HXLINE(1465)					{
HXLINE(1465)						int _g3 = (int)0;
HXDLIN(1465)						int _g2 = destView->width;
HXDLIN(1465)						while((_g3 < _g2)){
HXLINE(1465)							_g3 = (_g3 + (int)1);
HXDLIN(1465)							int x = (_g3 - (int)1);
HXLINE(1467)							{
HXLINE(1467)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE(1467)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1467)										int srcData1 = srcData->byteOffset;
HXDLIN(1467)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData1 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1467)										int srcData2 = srcData->byteOffset;
HXDLIN(1467)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData2 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1467)										int srcData3 = srcData->byteOffset;
HXDLIN(1467)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData3 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(1467)										int srcData4 = srcData->byteOffset;
HXDLIN(1467)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData4 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1467)										int srcData5 = srcData->byteOffset;
HXDLIN(1467)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData5 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1467)										int srcData6 = srcData->byteOffset;
HXDLIN(1467)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData6 + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN(1467)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(1467)										int srcData7 = srcData->byteOffset;
HXDLIN(1467)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData7 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1467)										int srcData8 = srcData->byteOffset;
HXDLIN(1467)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData8 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1467)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1467)										int srcData9 = srcData->byteOffset;
HXDLIN(1467)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData9 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(1467)								if (srcPremultiplied) {
HXLINE(1467)									bool _hx_tmp1;
HXDLIN(1467)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE(1467)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(1467)										_hx_tmp1 = false;
            									}
HXDLIN(1467)									if (_hx_tmp1) {
HXLINE(1467)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN(1467)										{
HXLINE(1467)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1467)											int r3 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1467)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1467)											int g3 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1467)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1467)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(1469)							pixelMask = ((int)srcPixel & (int)_mask);
HXLINE(1471)							int tmp1;
HXDLIN(1471)							int tmp2;
HXDLIN(1471)							tmp1 = ((int)hx::UShr(pixelMask,(int)24) & (int)(int)255);
HXDLIN(1471)							tmp2 = ((int)hx::UShr(_threshold,(int)24) & (int)(int)255);
HXDLIN(1471)							if ((tmp1 != tmp2)) {
HXLINE(1471)								bool aNeg = (tmp1 < (int)0);
HXDLIN(1471)								bool bNeg = (tmp2 < (int)0);
HXDLIN(1471)								bool value1;
HXDLIN(1471)								if ((aNeg != bNeg)) {
HXLINE(1471)									value1 = aNeg;
            								}
            								else {
HXLINE(1471)									value1 = (tmp1 > tmp2);
            								}
HXDLIN(1471)								if (value1) {
HXLINE(1471)									value = (int)1;
            								}
            								else {
HXLINE(1471)									value = (int)-1;
            								}
            							}
            							else {
HXLINE(1471)								tmp1 = ((int)hx::UShr(pixelMask,(int)16) & (int)(int)255);
HXDLIN(1471)								tmp2 = ((int)hx::UShr(_threshold,(int)16) & (int)(int)255);
HXDLIN(1471)								if ((tmp1 != tmp2)) {
HXLINE(1471)									bool aNeg1 = (tmp1 < (int)0);
HXDLIN(1471)									bool bNeg1 = (tmp2 < (int)0);
HXDLIN(1471)									bool value2;
HXDLIN(1471)									if ((aNeg1 != bNeg1)) {
HXLINE(1471)										value2 = aNeg1;
            									}
            									else {
HXLINE(1471)										value2 = (tmp1 > tmp2);
            									}
HXDLIN(1471)									if (value2) {
HXLINE(1471)										value = (int)1;
            									}
            									else {
HXLINE(1471)										value = (int)-1;
            									}
            								}
            								else {
HXLINE(1471)									tmp1 = ((int)hx::UShr(pixelMask,(int)8) & (int)(int)255);
HXDLIN(1471)									tmp2 = ((int)hx::UShr(_threshold,(int)8) & (int)(int)255);
HXDLIN(1471)									if ((tmp1 != tmp2)) {
HXLINE(1471)										bool aNeg2 = (tmp1 < (int)0);
HXDLIN(1471)										bool bNeg2 = (tmp2 < (int)0);
HXDLIN(1471)										bool value3;
HXDLIN(1471)										if ((aNeg2 != bNeg2)) {
HXLINE(1471)											value3 = aNeg2;
            										}
            										else {
HXLINE(1471)											value3 = (tmp1 > tmp2);
            										}
HXDLIN(1471)										if (value3) {
HXLINE(1471)											value = (int)1;
            										}
            										else {
HXLINE(1471)											value = (int)-1;
            										}
            									}
            									else {
HXLINE(1471)										tmp1 = ((int)pixelMask & (int)(int)255);
HXDLIN(1471)										tmp2 = ((int)_threshold & (int)(int)255);
HXDLIN(1471)										if ((tmp1 != tmp2)) {
HXLINE(1471)											bool aNeg3 = (tmp1 < (int)0);
HXDLIN(1471)											bool bNeg3 = (tmp2 < (int)0);
HXDLIN(1471)											bool value4;
HXDLIN(1471)											if ((aNeg3 != bNeg3)) {
HXLINE(1471)												value4 = aNeg3;
            											}
            											else {
HXLINE(1471)												value4 = (tmp1 > tmp2);
            											}
HXDLIN(1471)											if (value4) {
HXLINE(1471)												value = (int)1;
            											}
            											else {
HXLINE(1471)												value = (int)-1;
            											}
            										}
            										else {
HXLINE(1471)											value = (int)0;
            										}
            									}
            								}
            							}
HXLINE(1473)							switch((int)(_operation)){
            								case (int)0: {
HXLINE(1475)									test = (value != (int)0);
            								}
            								break;
            								case (int)1: {
HXLINE(1476)									test = (value == (int)0);
            								}
            								break;
            								case (int)2: {
HXLINE(1477)									test = (value == (int)-1);
            								}
            								break;
            								case (int)3: {
HXLINE(1478)									if ((value != (int)0)) {
HXLINE(1478)										test = (value == (int)-1);
            									}
            									else {
HXLINE(1478)										test = true;
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1479)									test = (value == (int)1);
            								}
            								break;
            								case (int)5: {
HXLINE(1480)									if ((value != (int)0)) {
HXLINE(1480)										test = (value == (int)1);
            									}
            									else {
HXLINE(1480)										test = true;
            									}
            								}
            								break;
            								default:{
HXLINE(1481)									test = false;
            								}
            							}
HXLINE(1485)							if (test) {
HXLINE(1487)								{
HXLINE(1487)									if (destPremultiplied) {
HXLINE(1487)										if ((((int)_color & (int)(int)255) == (int)0)) {
HXLINE(1487)											if ((_color != (int)0)) {
HXLINE(1487)												_color = (int)0;
            											}
            										}
            										else {
HXLINE(1487)											if ((((int)_color & (int)(int)255) != (int)255)) {
HXLINE(1487)												 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1487)												int this11 = this10->byteOffset;
HXDLIN(1487)												::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this10->buffer->b,(this11 + (((int)_color & (int)(int)255) * (int)4)));
HXDLIN(1487)												_color = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(_color,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_color & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1487)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1487)											{
HXLINE(1487)												int val = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1487)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            											}
HXDLIN(1487)											{
HXLINE(1487)												int val1 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1487)												{
HXLINE(1487)													int destData1 = destData->byteOffset;
HXDLIN(1487)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData1 + (destPosition + (int)1)),val1);
            												}
            											}
HXDLIN(1487)											{
HXLINE(1487)												int val2 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1487)												{
HXLINE(1487)													int destData2 = destData->byteOffset;
HXDLIN(1487)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData2 + (destPosition + (int)2)),val2);
            												}
            											}
HXDLIN(1487)											{
HXLINE(1487)												int val3 = ((int)_color & (int)(int)255);
HXDLIN(1487)												{
HXLINE(1487)													int destData3 = destData->byteOffset;
HXDLIN(1487)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData3 + (destPosition + (int)3)),val3);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1487)											{
HXLINE(1487)												int val4 = ((int)_color & (int)(int)255);
HXDLIN(1487)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            											}
HXDLIN(1487)											{
HXLINE(1487)												int val5 = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1487)												{
HXLINE(1487)													int destData4 = destData->byteOffset;
HXDLIN(1487)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData4 + (destPosition + (int)1)),val5);
            												}
            											}
HXDLIN(1487)											{
HXLINE(1487)												int val6 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1487)												{
HXLINE(1487)													int destData5 = destData->byteOffset;
HXDLIN(1487)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData5 + (destPosition + (int)2)),val6);
            												}
            											}
HXDLIN(1487)											{
HXLINE(1487)												int val7 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1487)												{
HXLINE(1487)													int destData6 = destData->byteOffset;
HXDLIN(1487)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData6 + (destPosition + (int)3)),val7);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1487)											{
HXLINE(1487)												int val8 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1487)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            											}
HXDLIN(1487)											{
HXLINE(1487)												int val9 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1487)												{
HXLINE(1487)													int destData7 = destData->byteOffset;
HXDLIN(1487)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData7 + (destPosition + (int)1)),val9);
            												}
            											}
HXDLIN(1487)											{
HXLINE(1487)												int val10 = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1487)												{
HXLINE(1487)													int destData8 = destData->byteOffset;
HXDLIN(1487)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData8 + (destPosition + (int)2)),val10);
            												}
            											}
HXDLIN(1487)											{
HXLINE(1487)												int val11 = ((int)_color & (int)(int)255);
HXDLIN(1487)												{
HXLINE(1487)													int destData9 = destData->byteOffset;
HXDLIN(1487)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData9 + (destPosition + (int)3)),val11);
            												}
            											}
            										}
            										break;
            									}
            								}
HXLINE(1488)								hits = (hits + (int)1);
            							}
            							else {
HXLINE(1490)								if (copySource) {
HXLINE(1492)									if (destPremultiplied) {
HXLINE(1492)										if ((((int)srcPixel & (int)(int)255) == (int)0)) {
HXLINE(1492)											if ((srcPixel != (int)0)) {
HXLINE(1492)												srcPixel = (int)0;
            											}
            										}
            										else {
HXLINE(1492)											if ((((int)srcPixel & (int)(int)255) != (int)255)) {
HXLINE(1492)												 ::lime::utils::ArrayBufferView this12 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1492)												int this13 = this12->byteOffset;
HXDLIN(1492)												::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this12->buffer->b,(this13 + (((int)srcPixel & (int)(int)255) * (int)4)));
HXDLIN(1492)												srcPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1492)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1492)											{
HXLINE(1492)												int val12 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1492)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            											}
HXDLIN(1492)											{
HXLINE(1492)												int val13 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1492)												{
HXLINE(1492)													int destData10 = destData->byteOffset;
HXDLIN(1492)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val13);
            												}
            											}
HXDLIN(1492)											{
HXLINE(1492)												int val14 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1492)												{
HXLINE(1492)													int destData11 = destData->byteOffset;
HXDLIN(1492)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val14);
            												}
            											}
HXDLIN(1492)											{
HXLINE(1492)												int val15 = ((int)srcPixel & (int)(int)255);
HXDLIN(1492)												{
HXLINE(1492)													int destData12 = destData->byteOffset;
HXDLIN(1492)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val15);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1492)											{
HXLINE(1492)												int val16 = ((int)srcPixel & (int)(int)255);
HXDLIN(1492)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            											}
HXDLIN(1492)											{
HXLINE(1492)												int val17 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1492)												{
HXLINE(1492)													int destData13 = destData->byteOffset;
HXDLIN(1492)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val17);
            												}
            											}
HXDLIN(1492)											{
HXLINE(1492)												int val18 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1492)												{
HXLINE(1492)													int destData14 = destData->byteOffset;
HXDLIN(1492)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val18);
            												}
            											}
HXDLIN(1492)											{
HXLINE(1492)												int val19 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1492)												{
HXLINE(1492)													int destData15 = destData->byteOffset;
HXDLIN(1492)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val19);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1492)											{
HXLINE(1492)												int val20 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1492)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            											}
HXDLIN(1492)											{
HXLINE(1492)												int val21 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1492)												{
HXLINE(1492)													int destData16 = destData->byteOffset;
HXDLIN(1492)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val21);
            												}
            											}
HXDLIN(1492)											{
HXLINE(1492)												int val22 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1492)												{
HXLINE(1492)													int destData17 = destData->byteOffset;
HXDLIN(1492)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val22);
            												}
            											}
HXDLIN(1492)											{
HXLINE(1492)												int val23 = ((int)srcPixel & (int)(int)255);
HXDLIN(1492)												{
HXLINE(1492)													int destData18 = destData->byteOffset;
HXDLIN(1492)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val23);
            												}
            											}
            										}
            										break;
            									}
            								}
            							}
HXLINE(1496)							srcPosition = (srcPosition + (int)4);
HXLINE(1497)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1505)		if ((hits > (int)0)) {
HXLINE(1507)			image->dirty = true;
HXLINE(1508)			image->version++;
            		}
HXLINE(1512)		return hits;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ImageDataUtil_obj,threshold,return )

void ImageDataUtil_obj::unmultiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1517_unmultiplyAlpha)
HXLINE(1519)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1520)		if (hx::IsNull( data )) {
HXLINE(1520)			return;
            		}
HXLINE(1523)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1523)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_unmultiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1527)			int format = image->buffer->format;
HXLINE(1528)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE(1529)			int pixel;
HXLINE(1531)			{
HXLINE(1531)				int _g1 = (int)0;
HXDLIN(1531)				int _g = length;
HXDLIN(1531)				while((_g1 < _g)){
HXLINE(1531)					_g1 = (_g1 + (int)1);
HXDLIN(1531)					int i = (_g1 - (int)1);
HXLINE(1533)					{
HXLINE(1533)						int offset = (i * (int)4);
HXDLIN(1533)						switch((int)(format)){
            							case (int)0: {
HXLINE(1533)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1533)								int data1 = data->byteOffset;
HXDLIN(1533)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1533)								int data2 = data->byteOffset;
HXDLIN(1533)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1533)								int data3 = data->byteOffset;
HXDLIN(1533)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE(1533)								int data4 = data->byteOffset;
HXDLIN(1533)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1533)								int data5 = data->byteOffset;
HXDLIN(1533)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1533)								int data6 = data->byteOffset;
HXDLIN(1533)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN(1533)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE(1533)								int data7 = data->byteOffset;
HXDLIN(1533)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1533)								int data8 = data->byteOffset;
HXDLIN(1533)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1533)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1533)								int data9 = data->byteOffset;
HXDLIN(1533)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
HXDLIN(1533)						bool _hx_tmp;
HXDLIN(1533)						if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(1533)							_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            						}
            						else {
HXLINE(1533)							_hx_tmp = false;
            						}
HXDLIN(1533)						if (_hx_tmp) {
HXLINE(1533)							::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(1533)							{
HXLINE(1533)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1533)								int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1533)								 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1533)								int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1533)								 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1533)								pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
            					}
HXLINE(1534)					{
HXLINE(1534)						int offset1 = (i * (int)4);
HXDLIN(1534)						switch((int)(format)){
            							case (int)0: {
HXLINE(1534)								{
HXLINE(1534)									int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1534)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1534)								{
HXLINE(1534)									int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1534)									{
HXLINE(1534)										int data10 = data->byteOffset;
HXDLIN(1534)										::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset1 + (int)1)),val1);
            									}
            								}
HXDLIN(1534)								{
HXLINE(1534)									int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1534)									{
HXLINE(1534)										int data11 = data->byteOffset;
HXDLIN(1534)										::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset1 + (int)2)),val2);
            									}
            								}
HXDLIN(1534)								{
HXLINE(1534)									int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1534)									{
HXLINE(1534)										int data12 = data->byteOffset;
HXDLIN(1534)										::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset1 + (int)3)),val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1534)								{
HXLINE(1534)									int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1534)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN(1534)								{
HXLINE(1534)									int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1534)									{
HXLINE(1534)										int data13 = data->byteOffset;
HXDLIN(1534)										::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset1 + (int)1)),val5);
            									}
            								}
HXDLIN(1534)								{
HXLINE(1534)									int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1534)									{
HXLINE(1534)										int data14 = data->byteOffset;
HXDLIN(1534)										::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset1 + (int)2)),val6);
            									}
            								}
HXDLIN(1534)								{
HXLINE(1534)									int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1534)									{
HXLINE(1534)										int data15 = data->byteOffset;
HXDLIN(1534)										::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset1 + (int)3)),val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1534)								{
HXLINE(1534)									int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1534)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN(1534)								{
HXLINE(1534)									int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1534)									{
HXLINE(1534)										int data16 = data->byteOffset;
HXDLIN(1534)										::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset1 + (int)1)),val9);
            									}
            								}
HXDLIN(1534)								{
HXLINE(1534)									int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1534)									{
HXLINE(1534)										int data17 = data->byteOffset;
HXDLIN(1534)										::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset1 + (int)2)),val10);
            									}
            								}
HXDLIN(1534)								{
HXLINE(1534)									int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1534)									{
HXLINE(1534)										int data18 = data->byteOffset;
HXDLIN(1534)										::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset1 + (int)3)),val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1540)		image->buffer->premultiplied = false;
HXLINE(1541)		image->dirty = true;
HXLINE(1542)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,unmultiplyAlpha,(void))

void ImageDataUtil_obj::_hx___boxBlur( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,Float bx,Float by){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1547___boxBlur)
HXLINE(1551)		{
HXLINE(1551)			int offset = (int)0;
HXDLIN(1551)			if (hx::IsNotNull( imgA )) {
HXLINE(1551)				 ::haxe::io::Bytes imgB1 = imgB->buffer;
HXDLIN(1551)				imgB1->blit((offset * imgB->bytesPerElement),imgA->buffer,imgA->byteOffset,imgA->byteLength);
            			}
            			else {
HXLINE(1551)				HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            			}
            		}
HXLINE(1553)		int bx1 = ::Std_obj::_hx_int(bx);
HXLINE(1554)		int by1 = ::Std_obj::_hx_int(by);
HXLINE(1556)		{
HXLINE(1556)			Float iarr = ((Float)(int)1 / (Float)((bx1 + bx1) + (int)1));
HXDLIN(1556)			int ti;
HXDLIN(1556)			int li;
HXDLIN(1556)			int ri;
HXDLIN(1556)			 ::Dynamic fv;
HXDLIN(1556)			 ::Dynamic lv;
HXDLIN(1556)			int val;
HXDLIN(1556)			{
HXLINE(1556)				int _g1 = (int)0;
HXDLIN(1556)				int _g = h;
HXDLIN(1556)				while((_g1 < _g)){
HXLINE(1556)					_g1 = (_g1 + (int)1);
HXDLIN(1556)					int i = (_g1 - (int)1);
HXDLIN(1556)					ti = (i * w);
HXDLIN(1556)					li = ti;
HXDLIN(1556)					ri = (ti + bx1);
HXDLIN(1556)					int imgB2 = imgB->byteOffset;
HXDLIN(1556)					fv = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB2 + (ti * (int)4))) & (int)(int)255);
HXDLIN(1556)					int imgB3 = imgB->byteOffset;
HXDLIN(1556)					lv = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB3 + (((ti + w) - (int)1) * (int)4))) & (int)(int)255);
HXDLIN(1556)					val = ((bx1 + (int)1) * fv);
HXDLIN(1556)					{
HXLINE(1556)						int _g3 = (int)0;
HXDLIN(1556)						int _g2 = bx1;
HXDLIN(1556)						while((_g3 < _g2)){
HXLINE(1556)							_g3 = (_g3 + (int)1);
HXDLIN(1556)							int j = (_g3 - (int)1);
HXDLIN(1556)							int imgB4 = imgB->byteOffset;
HXDLIN(1556)							val = (val + ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB4 + ((ti + j) * (int)4))) & (int)(int)255));
            						}
            					}
HXDLIN(1556)					{
HXLINE(1556)						int _g31 = (int)0;
HXDLIN(1556)						int _g21 = (bx1 + (int)1);
HXDLIN(1556)						while((_g31 < _g21)){
HXLINE(1556)							_g31 = (_g31 + (int)1);
HXDLIN(1556)							int j1 = (_g31 - (int)1);
HXDLIN(1556)							int imgB5 = imgB->byteOffset;
HXDLIN(1556)							val = (val + (((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB5 + (ri * (int)4))) & (int)(int)255) - fv));
HXDLIN(1556)							{
HXLINE(1556)								int _hx_int = val;
HXDLIN(1556)								Float val1;
HXDLIN(1556)								if ((_hx_int < (int)0)) {
HXLINE(1556)									val1 = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE(1556)									val1 = (_hx_int + ((Float)0.0));
            								}
HXDLIN(1556)								int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1556)								{
HXLINE(1556)									int imgA1 = imgA->byteOffset;
HXDLIN(1556)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA1 + (ti * (int)4)),val2);
            								}
            							}
HXDLIN(1556)							ri = (ri + (int)1);
HXDLIN(1556)							ti = (ti + (int)1);
            						}
            					}
HXDLIN(1556)					{
HXLINE(1556)						int _g32 = (bx1 + (int)1);
HXDLIN(1556)						int _g22 = (w - bx1);
HXDLIN(1556)						while((_g32 < _g22)){
HXLINE(1556)							_g32 = (_g32 + (int)1);
HXDLIN(1556)							int j2 = (_g32 - (int)1);
HXDLIN(1556)							int imgB6 = imgB->byteOffset;
HXDLIN(1556)							int a = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB6 + (ri * (int)4))) & (int)(int)255);
HXDLIN(1556)							int imgB7 = imgB->byteOffset;
HXDLIN(1556)							val = (val + (a - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB7 + (li * (int)4))) & (int)(int)255)));
HXDLIN(1556)							{
HXLINE(1556)								int int1 = val;
HXDLIN(1556)								Float val3;
HXDLIN(1556)								if ((int1 < (int)0)) {
HXLINE(1556)									val3 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE(1556)									val3 = (int1 + ((Float)0.0));
            								}
HXDLIN(1556)								int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1556)								{
HXLINE(1556)									int imgA2 = imgA->byteOffset;
HXDLIN(1556)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA2 + (ti * (int)4)),val4);
            								}
            							}
HXDLIN(1556)							ri = (ri + (int)1);
HXDLIN(1556)							li = (li + (int)1);
HXDLIN(1556)							ti = (ti + (int)1);
            						}
            					}
HXDLIN(1556)					{
HXLINE(1556)						int _g33 = (w - bx1);
HXDLIN(1556)						int _g23 = w;
HXDLIN(1556)						while((_g33 < _g23)){
HXLINE(1556)							_g33 = (_g33 + (int)1);
HXDLIN(1556)							int j3 = (_g33 - (int)1);
HXDLIN(1556)							int imgB8 = imgB->byteOffset;
HXDLIN(1556)							val = (val + (lv - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB8 + (li * (int)4))) & (int)(int)255)));
HXDLIN(1556)							{
HXLINE(1556)								int int2 = val;
HXDLIN(1556)								Float val5;
HXDLIN(1556)								if ((int2 < (int)0)) {
HXLINE(1556)									val5 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE(1556)									val5 = (int2 + ((Float)0.0));
            								}
HXDLIN(1556)								int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1556)								{
HXLINE(1556)									int imgA3 = imgA->byteOffset;
HXDLIN(1556)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA3 + (ti * (int)4)),val6);
            								}
            							}
HXDLIN(1556)							li = (li + (int)1);
HXDLIN(1556)							ti = (ti + (int)1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1557)		{
HXLINE(1557)			Float iarr1 = ((Float)(int)1 / (Float)((bx1 + bx1) + (int)1));
HXDLIN(1557)			int ti1;
HXDLIN(1557)			int li1;
HXDLIN(1557)			int ri1;
HXDLIN(1557)			 ::Dynamic fv1;
HXDLIN(1557)			 ::Dynamic lv1;
HXDLIN(1557)			int val7;
HXDLIN(1557)			{
HXLINE(1557)				int _g11 = (int)0;
HXDLIN(1557)				int _g4 = h;
HXDLIN(1557)				while((_g11 < _g4)){
HXLINE(1557)					_g11 = (_g11 + (int)1);
HXDLIN(1557)					int i1 = (_g11 - (int)1);
HXDLIN(1557)					ti1 = (i1 * w);
HXDLIN(1557)					li1 = ti1;
HXDLIN(1557)					ri1 = (ti1 + bx1);
HXDLIN(1557)					int imgB9 = imgB->byteOffset;
HXDLIN(1557)					fv1 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB9 + ((ti1 * (int)4) + (int)1))) & (int)(int)255);
HXDLIN(1557)					int imgB10 = imgB->byteOffset;
HXDLIN(1557)					lv1 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB10 + ((((ti1 + w) - (int)1) * (int)4) + (int)1))) & (int)(int)255);
HXDLIN(1557)					val7 = ((bx1 + (int)1) * fv1);
HXDLIN(1557)					{
HXLINE(1557)						int _g34 = (int)0;
HXDLIN(1557)						int _g24 = bx1;
HXDLIN(1557)						while((_g34 < _g24)){
HXLINE(1557)							_g34 = (_g34 + (int)1);
HXDLIN(1557)							int j4 = (_g34 - (int)1);
HXDLIN(1557)							int imgB11 = imgB->byteOffset;
HXDLIN(1557)							val7 = (val7 + ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB11 + (((ti1 + j4) * (int)4) + (int)1))) & (int)(int)255));
            						}
            					}
HXDLIN(1557)					{
HXLINE(1557)						int _g35 = (int)0;
HXDLIN(1557)						int _g25 = (bx1 + (int)1);
HXDLIN(1557)						while((_g35 < _g25)){
HXLINE(1557)							_g35 = (_g35 + (int)1);
HXDLIN(1557)							int j5 = (_g35 - (int)1);
HXDLIN(1557)							int imgB12 = imgB->byteOffset;
HXDLIN(1557)							val7 = (val7 + (((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB12 + ((ri1 * (int)4) + (int)1))) & (int)(int)255) - fv1));
HXDLIN(1557)							{
HXLINE(1557)								int int3 = val7;
HXDLIN(1557)								Float val8;
HXDLIN(1557)								if ((int3 < (int)0)) {
HXLINE(1557)									val8 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE(1557)									val8 = (int3 + ((Float)0.0));
            								}
HXDLIN(1557)								int val9 = ::Math_obj::round((val8 * iarr1));
HXDLIN(1557)								{
HXLINE(1557)									int imgA4 = imgA->byteOffset;
HXDLIN(1557)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA4 + ((ti1 * (int)4) + (int)1)),val9);
            								}
            							}
HXDLIN(1557)							ri1 = (ri1 + (int)1);
HXDLIN(1557)							ti1 = (ti1 + (int)1);
            						}
            					}
HXDLIN(1557)					{
HXLINE(1557)						int _g36 = (bx1 + (int)1);
HXDLIN(1557)						int _g26 = (w - bx1);
HXDLIN(1557)						while((_g36 < _g26)){
HXLINE(1557)							_g36 = (_g36 + (int)1);
HXDLIN(1557)							int j6 = (_g36 - (int)1);
HXDLIN(1557)							int imgB13 = imgB->byteOffset;
HXDLIN(1557)							int a1 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB13 + ((ri1 * (int)4) + (int)1))) & (int)(int)255);
HXDLIN(1557)							int imgB14 = imgB->byteOffset;
HXDLIN(1557)							val7 = (val7 + (a1 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB14 + ((li1 * (int)4) + (int)1))) & (int)(int)255)));
HXDLIN(1557)							{
HXLINE(1557)								int int4 = val7;
HXDLIN(1557)								Float val10;
HXDLIN(1557)								if ((int4 < (int)0)) {
HXLINE(1557)									val10 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1557)									val10 = (int4 + ((Float)0.0));
            								}
HXDLIN(1557)								int val11 = ::Math_obj::round((val10 * iarr1));
HXDLIN(1557)								{
HXLINE(1557)									int imgA5 = imgA->byteOffset;
HXDLIN(1557)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA5 + ((ti1 * (int)4) + (int)1)),val11);
            								}
            							}
HXDLIN(1557)							ri1 = (ri1 + (int)1);
HXDLIN(1557)							li1 = (li1 + (int)1);
HXDLIN(1557)							ti1 = (ti1 + (int)1);
            						}
            					}
HXDLIN(1557)					{
HXLINE(1557)						int _g37 = (w - bx1);
HXDLIN(1557)						int _g27 = w;
HXDLIN(1557)						while((_g37 < _g27)){
HXLINE(1557)							_g37 = (_g37 + (int)1);
HXDLIN(1557)							int j7 = (_g37 - (int)1);
HXDLIN(1557)							int imgB15 = imgB->byteOffset;
HXDLIN(1557)							val7 = (val7 + (lv1 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB15 + ((li1 * (int)4) + (int)1))) & (int)(int)255)));
HXDLIN(1557)							{
HXLINE(1557)								int int5 = val7;
HXDLIN(1557)								Float val12;
HXDLIN(1557)								if ((int5 < (int)0)) {
HXLINE(1557)									val12 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1557)									val12 = (int5 + ((Float)0.0));
            								}
HXDLIN(1557)								int val13 = ::Math_obj::round((val12 * iarr1));
HXDLIN(1557)								{
HXLINE(1557)									int imgA6 = imgA->byteOffset;
HXDLIN(1557)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA6 + ((ti1 * (int)4) + (int)1)),val13);
            								}
            							}
HXDLIN(1557)							li1 = (li1 + (int)1);
HXDLIN(1557)							ti1 = (ti1 + (int)1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1558)		{
HXLINE(1558)			Float iarr2 = ((Float)(int)1 / (Float)((bx1 + bx1) + (int)1));
HXDLIN(1558)			int ti2;
HXDLIN(1558)			int li2;
HXDLIN(1558)			int ri2;
HXDLIN(1558)			 ::Dynamic fv2;
HXDLIN(1558)			 ::Dynamic lv2;
HXDLIN(1558)			int val14;
HXDLIN(1558)			{
HXLINE(1558)				int _g12 = (int)0;
HXDLIN(1558)				int _g5 = h;
HXDLIN(1558)				while((_g12 < _g5)){
HXLINE(1558)					_g12 = (_g12 + (int)1);
HXDLIN(1558)					int i2 = (_g12 - (int)1);
HXDLIN(1558)					ti2 = (i2 * w);
HXDLIN(1558)					li2 = ti2;
HXDLIN(1558)					ri2 = (ti2 + bx1);
HXDLIN(1558)					int imgB16 = imgB->byteOffset;
HXDLIN(1558)					fv2 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB16 + ((ti2 * (int)4) + (int)2))) & (int)(int)255);
HXDLIN(1558)					int imgB17 = imgB->byteOffset;
HXDLIN(1558)					lv2 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB17 + ((((ti2 + w) - (int)1) * (int)4) + (int)2))) & (int)(int)255);
HXDLIN(1558)					val14 = ((bx1 + (int)1) * fv2);
HXDLIN(1558)					{
HXLINE(1558)						int _g38 = (int)0;
HXDLIN(1558)						int _g28 = bx1;
HXDLIN(1558)						while((_g38 < _g28)){
HXLINE(1558)							_g38 = (_g38 + (int)1);
HXDLIN(1558)							int j8 = (_g38 - (int)1);
HXDLIN(1558)							int imgB18 = imgB->byteOffset;
HXDLIN(1558)							val14 = (val14 + ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB18 + (((ti2 + j8) * (int)4) + (int)2))) & (int)(int)255));
            						}
            					}
HXDLIN(1558)					{
HXLINE(1558)						int _g39 = (int)0;
HXDLIN(1558)						int _g29 = (bx1 + (int)1);
HXDLIN(1558)						while((_g39 < _g29)){
HXLINE(1558)							_g39 = (_g39 + (int)1);
HXDLIN(1558)							int j9 = (_g39 - (int)1);
HXDLIN(1558)							int imgB19 = imgB->byteOffset;
HXDLIN(1558)							val14 = (val14 + (((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB19 + ((ri2 * (int)4) + (int)2))) & (int)(int)255) - fv2));
HXDLIN(1558)							{
HXLINE(1558)								int int6 = val14;
HXDLIN(1558)								Float val15;
HXDLIN(1558)								if ((int6 < (int)0)) {
HXLINE(1558)									val15 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1558)									val15 = (int6 + ((Float)0.0));
            								}
HXDLIN(1558)								int val16 = ::Math_obj::round((val15 * iarr2));
HXDLIN(1558)								{
HXLINE(1558)									int imgA7 = imgA->byteOffset;
HXDLIN(1558)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA7 + ((ti2 * (int)4) + (int)2)),val16);
            								}
            							}
HXDLIN(1558)							ri2 = (ri2 + (int)1);
HXDLIN(1558)							ti2 = (ti2 + (int)1);
            						}
            					}
HXDLIN(1558)					{
HXLINE(1558)						int _g310 = (bx1 + (int)1);
HXDLIN(1558)						int _g210 = (w - bx1);
HXDLIN(1558)						while((_g310 < _g210)){
HXLINE(1558)							_g310 = (_g310 + (int)1);
HXDLIN(1558)							int j10 = (_g310 - (int)1);
HXDLIN(1558)							int imgB20 = imgB->byteOffset;
HXDLIN(1558)							int a2 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB20 + ((ri2 * (int)4) + (int)2))) & (int)(int)255);
HXDLIN(1558)							int imgB21 = imgB->byteOffset;
HXDLIN(1558)							val14 = (val14 + (a2 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB21 + ((li2 * (int)4) + (int)2))) & (int)(int)255)));
HXDLIN(1558)							{
HXLINE(1558)								int int7 = val14;
HXDLIN(1558)								Float val17;
HXDLIN(1558)								if ((int7 < (int)0)) {
HXLINE(1558)									val17 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1558)									val17 = (int7 + ((Float)0.0));
            								}
HXDLIN(1558)								int val18 = ::Math_obj::round((val17 * iarr2));
HXDLIN(1558)								{
HXLINE(1558)									int imgA8 = imgA->byteOffset;
HXDLIN(1558)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA8 + ((ti2 * (int)4) + (int)2)),val18);
            								}
            							}
HXDLIN(1558)							ri2 = (ri2 + (int)1);
HXDLIN(1558)							li2 = (li2 + (int)1);
HXDLIN(1558)							ti2 = (ti2 + (int)1);
            						}
            					}
HXDLIN(1558)					{
HXLINE(1558)						int _g311 = (w - bx1);
HXDLIN(1558)						int _g211 = w;
HXDLIN(1558)						while((_g311 < _g211)){
HXLINE(1558)							_g311 = (_g311 + (int)1);
HXDLIN(1558)							int j11 = (_g311 - (int)1);
HXDLIN(1558)							int imgB22 = imgB->byteOffset;
HXDLIN(1558)							val14 = (val14 + (lv2 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB22 + ((li2 * (int)4) + (int)2))) & (int)(int)255)));
HXDLIN(1558)							{
HXLINE(1558)								int int8 = val14;
HXDLIN(1558)								Float val19;
HXDLIN(1558)								if ((int8 < (int)0)) {
HXLINE(1558)									val19 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE(1558)									val19 = (int8 + ((Float)0.0));
            								}
HXDLIN(1558)								int val20 = ::Math_obj::round((val19 * iarr2));
HXDLIN(1558)								{
HXLINE(1558)									int imgA9 = imgA->byteOffset;
HXDLIN(1558)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA9 + ((ti2 * (int)4) + (int)2)),val20);
            								}
            							}
HXDLIN(1558)							li2 = (li2 + (int)1);
HXDLIN(1558)							ti2 = (ti2 + (int)1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1559)		{
HXLINE(1559)			Float iarr3 = ((Float)(int)1 / (Float)((bx1 + bx1) + (int)1));
HXDLIN(1559)			int ti3;
HXDLIN(1559)			int li3;
HXDLIN(1559)			int ri3;
HXDLIN(1559)			 ::Dynamic fv3;
HXDLIN(1559)			 ::Dynamic lv3;
HXDLIN(1559)			int val21;
HXDLIN(1559)			{
HXLINE(1559)				int _g13 = (int)0;
HXDLIN(1559)				int _g6 = h;
HXDLIN(1559)				while((_g13 < _g6)){
HXLINE(1559)					_g13 = (_g13 + (int)1);
HXDLIN(1559)					int i3 = (_g13 - (int)1);
HXDLIN(1559)					ti3 = (i3 * w);
HXDLIN(1559)					li3 = ti3;
HXDLIN(1559)					ri3 = (ti3 + bx1);
HXDLIN(1559)					int imgB23 = imgB->byteOffset;
HXDLIN(1559)					fv3 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB23 + ((ti3 * (int)4) + (int)3))) & (int)(int)255);
HXDLIN(1559)					int imgB24 = imgB->byteOffset;
HXDLIN(1559)					lv3 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB24 + ((((ti3 + w) - (int)1) * (int)4) + (int)3))) & (int)(int)255);
HXDLIN(1559)					val21 = ((bx1 + (int)1) * fv3);
HXDLIN(1559)					{
HXLINE(1559)						int _g312 = (int)0;
HXDLIN(1559)						int _g212 = bx1;
HXDLIN(1559)						while((_g312 < _g212)){
HXLINE(1559)							_g312 = (_g312 + (int)1);
HXDLIN(1559)							int j12 = (_g312 - (int)1);
HXDLIN(1559)							int imgB25 = imgB->byteOffset;
HXDLIN(1559)							val21 = (val21 + ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB25 + (((ti3 + j12) * (int)4) + (int)3))) & (int)(int)255));
            						}
            					}
HXDLIN(1559)					{
HXLINE(1559)						int _g313 = (int)0;
HXDLIN(1559)						int _g213 = (bx1 + (int)1);
HXDLIN(1559)						while((_g313 < _g213)){
HXLINE(1559)							_g313 = (_g313 + (int)1);
HXDLIN(1559)							int j13 = (_g313 - (int)1);
HXDLIN(1559)							int imgB26 = imgB->byteOffset;
HXDLIN(1559)							val21 = (val21 + (((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB26 + ((ri3 * (int)4) + (int)3))) & (int)(int)255) - fv3));
HXDLIN(1559)							{
HXLINE(1559)								int int9 = val21;
HXDLIN(1559)								Float val22;
HXDLIN(1559)								if ((int9 < (int)0)) {
HXLINE(1559)									val22 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE(1559)									val22 = (int9 + ((Float)0.0));
            								}
HXDLIN(1559)								int val23 = ::Math_obj::round((val22 * iarr3));
HXDLIN(1559)								{
HXLINE(1559)									int imgA10 = imgA->byteOffset;
HXDLIN(1559)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA10 + ((ti3 * (int)4) + (int)3)),val23);
            								}
            							}
HXDLIN(1559)							ri3 = (ri3 + (int)1);
HXDLIN(1559)							ti3 = (ti3 + (int)1);
            						}
            					}
HXDLIN(1559)					{
HXLINE(1559)						int _g314 = (bx1 + (int)1);
HXDLIN(1559)						int _g214 = (w - bx1);
HXDLIN(1559)						while((_g314 < _g214)){
HXLINE(1559)							_g314 = (_g314 + (int)1);
HXDLIN(1559)							int j14 = (_g314 - (int)1);
HXDLIN(1559)							int imgB27 = imgB->byteOffset;
HXDLIN(1559)							int a3 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB27 + ((ri3 * (int)4) + (int)3))) & (int)(int)255);
HXDLIN(1559)							int imgB28 = imgB->byteOffset;
HXDLIN(1559)							val21 = (val21 + (a3 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB28 + ((li3 * (int)4) + (int)3))) & (int)(int)255)));
HXDLIN(1559)							{
HXLINE(1559)								int int10 = val21;
HXDLIN(1559)								Float val24;
HXDLIN(1559)								if ((int10 < (int)0)) {
HXLINE(1559)									val24 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE(1559)									val24 = (int10 + ((Float)0.0));
            								}
HXDLIN(1559)								int val25 = ::Math_obj::round((val24 * iarr3));
HXDLIN(1559)								{
HXLINE(1559)									int imgA11 = imgA->byteOffset;
HXDLIN(1559)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA11 + ((ti3 * (int)4) + (int)3)),val25);
            								}
            							}
HXDLIN(1559)							ri3 = (ri3 + (int)1);
HXDLIN(1559)							li3 = (li3 + (int)1);
HXDLIN(1559)							ti3 = (ti3 + (int)1);
            						}
            					}
HXDLIN(1559)					{
HXLINE(1559)						int _g315 = (w - bx1);
HXDLIN(1559)						int _g215 = w;
HXDLIN(1559)						while((_g315 < _g215)){
HXLINE(1559)							_g315 = (_g315 + (int)1);
HXDLIN(1559)							int j15 = (_g315 - (int)1);
HXDLIN(1559)							int imgB29 = imgB->byteOffset;
HXDLIN(1559)							val21 = (val21 + (lv3 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB29 + ((li3 * (int)4) + (int)3))) & (int)(int)255)));
HXDLIN(1559)							{
HXLINE(1559)								int int11 = val21;
HXDLIN(1559)								Float val26;
HXDLIN(1559)								if ((int11 < (int)0)) {
HXLINE(1559)									val26 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE(1559)									val26 = (int11 + ((Float)0.0));
            								}
HXDLIN(1559)								int val27 = ::Math_obj::round((val26 * iarr3));
HXDLIN(1559)								{
HXLINE(1559)									int imgA12 = imgA->byteOffset;
HXDLIN(1559)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA12 + ((ti3 * (int)4) + (int)3)),val27);
            								}
            							}
HXDLIN(1559)							li3 = (li3 + (int)1);
HXDLIN(1559)							ti3 = (ti3 + (int)1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1561)		{
HXLINE(1561)			Float iarr4 = ((Float)(int)1 / (Float)((by1 + by1) + (int)1));
HXDLIN(1561)			int ws = (w * (int)4);
HXDLIN(1561)			int ti4;
HXDLIN(1561)			int li4;
HXDLIN(1561)			int ri4;
HXDLIN(1561)			 ::Dynamic fv4;
HXDLIN(1561)			 ::Dynamic lv4;
HXDLIN(1561)			int val28;
HXDLIN(1561)			{
HXLINE(1561)				int _g14 = (int)0;
HXDLIN(1561)				int _g7 = w;
HXDLIN(1561)				while((_g14 < _g7)){
HXLINE(1561)					_g14 = (_g14 + (int)1);
HXDLIN(1561)					int i4 = (_g14 - (int)1);
HXDLIN(1561)					ti4 = (i4 * (int)4);
HXDLIN(1561)					li4 = ti4;
HXDLIN(1561)					ri4 = (ti4 + (by1 * ws));
HXDLIN(1561)					fv4 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti4)) & (int)(int)255);
HXDLIN(1561)					int imgA13 = imgA->byteOffset;
HXDLIN(1561)					lv4 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA13 + (ti4 + (ws * (h - (int)1))))) & (int)(int)255);
HXDLIN(1561)					val28 = ((by1 + (int)1) * fv4);
HXDLIN(1561)					{
HXLINE(1561)						int _g316 = (int)0;
HXDLIN(1561)						int _g216 = by1;
HXDLIN(1561)						while((_g316 < _g216)){
HXLINE(1561)							_g316 = (_g316 + (int)1);
HXDLIN(1561)							int j16 = (_g316 - (int)1);
HXDLIN(1561)							int imgA14 = imgA->byteOffset;
HXDLIN(1561)							val28 = (val28 + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA14 + (ti4 + (j16 * ws)))) & (int)(int)255));
            						}
            					}
HXDLIN(1561)					{
HXLINE(1561)						int _g317 = (int)0;
HXDLIN(1561)						int _g217 = (by1 + (int)1);
HXDLIN(1561)						while((_g317 < _g217)){
HXLINE(1561)							_g317 = (_g317 + (int)1);
HXDLIN(1561)							int j17 = (_g317 - (int)1);
HXDLIN(1561)							val28 = (val28 + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri4)) & (int)(int)255) - fv4));
HXDLIN(1561)							{
HXLINE(1561)								int int12 = val28;
HXDLIN(1561)								Float val29;
HXDLIN(1561)								if ((int12 < (int)0)) {
HXLINE(1561)									val29 = (((Float)4294967296.0) + int12);
            								}
            								else {
HXLINE(1561)									val29 = (int12 + ((Float)0.0));
            								}
HXDLIN(1561)								int val30 = ::Math_obj::round((val29 * iarr4));
HXDLIN(1561)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val30);
            							}
HXDLIN(1561)							ri4 = (ri4 + ws);
HXDLIN(1561)							ti4 = (ti4 + ws);
            						}
            					}
HXDLIN(1561)					{
HXLINE(1561)						int _g318 = (by1 + (int)1);
HXDLIN(1561)						int _g218 = (h - by1);
HXDLIN(1561)						while((_g318 < _g218)){
HXLINE(1561)							_g318 = (_g318 + (int)1);
HXDLIN(1561)							int j18 = (_g318 - (int)1);
HXDLIN(1561)							int a4 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri4)) & (int)(int)255);
HXDLIN(1561)							val28 = (val28 + (a4 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li4)) & (int)(int)255)));
HXDLIN(1561)							{
HXLINE(1561)								int int13 = val28;
HXDLIN(1561)								Float val31;
HXDLIN(1561)								if ((int13 < (int)0)) {
HXLINE(1561)									val31 = (((Float)4294967296.0) + int13);
            								}
            								else {
HXLINE(1561)									val31 = (int13 + ((Float)0.0));
            								}
HXDLIN(1561)								int val32 = ::Math_obj::round((val31 * iarr4));
HXDLIN(1561)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val32);
            							}
HXDLIN(1561)							li4 = (li4 + ws);
HXDLIN(1561)							ri4 = (ri4 + ws);
HXDLIN(1561)							ti4 = (ti4 + ws);
            						}
            					}
HXDLIN(1561)					{
HXLINE(1561)						int _g319 = (h - by1);
HXDLIN(1561)						int _g219 = h;
HXDLIN(1561)						while((_g319 < _g219)){
HXLINE(1561)							_g319 = (_g319 + (int)1);
HXDLIN(1561)							int j19 = (_g319 - (int)1);
HXDLIN(1561)							val28 = (val28 + (lv4 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li4)) & (int)(int)255)));
HXDLIN(1561)							{
HXLINE(1561)								int int14 = val28;
HXDLIN(1561)								Float val33;
HXDLIN(1561)								if ((int14 < (int)0)) {
HXLINE(1561)									val33 = (((Float)4294967296.0) + int14);
            								}
            								else {
HXLINE(1561)									val33 = (int14 + ((Float)0.0));
            								}
HXDLIN(1561)								int val34 = ::Math_obj::round((val33 * iarr4));
HXDLIN(1561)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val34);
            							}
HXDLIN(1561)							li4 = (li4 + ws);
HXDLIN(1561)							ti4 = (ti4 + ws);
            						}
            					}
            				}
            			}
            		}
HXLINE(1562)		{
HXLINE(1562)			Float iarr5 = ((Float)(int)1 / (Float)((by1 + by1) + (int)1));
HXDLIN(1562)			int ws1 = (w * (int)4);
HXDLIN(1562)			int ti5;
HXDLIN(1562)			int li5;
HXDLIN(1562)			int ri5;
HXDLIN(1562)			 ::Dynamic fv5;
HXDLIN(1562)			 ::Dynamic lv5;
HXDLIN(1562)			int val35;
HXDLIN(1562)			{
HXLINE(1562)				int _g15 = (int)0;
HXDLIN(1562)				int _g8 = w;
HXDLIN(1562)				while((_g15 < _g8)){
HXLINE(1562)					_g15 = (_g15 + (int)1);
HXDLIN(1562)					int i5 = (_g15 - (int)1);
HXDLIN(1562)					ti5 = ((i5 * (int)4) + (int)1);
HXDLIN(1562)					li5 = ti5;
HXDLIN(1562)					ri5 = (ti5 + (by1 * ws1));
HXDLIN(1562)					fv5 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti5)) & (int)(int)255);
HXDLIN(1562)					int imgA15 = imgA->byteOffset;
HXDLIN(1562)					lv5 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA15 + (ti5 + (ws1 * (h - (int)1))))) & (int)(int)255);
HXDLIN(1562)					val35 = ((by1 + (int)1) * fv5);
HXDLIN(1562)					{
HXLINE(1562)						int _g320 = (int)0;
HXDLIN(1562)						int _g220 = by1;
HXDLIN(1562)						while((_g320 < _g220)){
HXLINE(1562)							_g320 = (_g320 + (int)1);
HXDLIN(1562)							int j20 = (_g320 - (int)1);
HXDLIN(1562)							int imgA16 = imgA->byteOffset;
HXDLIN(1562)							val35 = (val35 + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA16 + (ti5 + (j20 * ws1)))) & (int)(int)255));
            						}
            					}
HXDLIN(1562)					{
HXLINE(1562)						int _g321 = (int)0;
HXDLIN(1562)						int _g221 = (by1 + (int)1);
HXDLIN(1562)						while((_g321 < _g221)){
HXLINE(1562)							_g321 = (_g321 + (int)1);
HXDLIN(1562)							int j21 = (_g321 - (int)1);
HXDLIN(1562)							val35 = (val35 + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri5)) & (int)(int)255) - fv5));
HXDLIN(1562)							{
HXLINE(1562)								int int15 = val35;
HXDLIN(1562)								Float val36;
HXDLIN(1562)								if ((int15 < (int)0)) {
HXLINE(1562)									val36 = (((Float)4294967296.0) + int15);
            								}
            								else {
HXLINE(1562)									val36 = (int15 + ((Float)0.0));
            								}
HXDLIN(1562)								int val37 = ::Math_obj::round((val36 * iarr5));
HXDLIN(1562)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val37);
            							}
HXDLIN(1562)							ri5 = (ri5 + ws1);
HXDLIN(1562)							ti5 = (ti5 + ws1);
            						}
            					}
HXDLIN(1562)					{
HXLINE(1562)						int _g322 = (by1 + (int)1);
HXDLIN(1562)						int _g222 = (h - by1);
HXDLIN(1562)						while((_g322 < _g222)){
HXLINE(1562)							_g322 = (_g322 + (int)1);
HXDLIN(1562)							int j22 = (_g322 - (int)1);
HXDLIN(1562)							int a5 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri5)) & (int)(int)255);
HXDLIN(1562)							val35 = (val35 + (a5 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li5)) & (int)(int)255)));
HXDLIN(1562)							{
HXLINE(1562)								int int16 = val35;
HXDLIN(1562)								Float val38;
HXDLIN(1562)								if ((int16 < (int)0)) {
HXLINE(1562)									val38 = (((Float)4294967296.0) + int16);
            								}
            								else {
HXLINE(1562)									val38 = (int16 + ((Float)0.0));
            								}
HXDLIN(1562)								int val39 = ::Math_obj::round((val38 * iarr5));
HXDLIN(1562)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val39);
            							}
HXDLIN(1562)							li5 = (li5 + ws1);
HXDLIN(1562)							ri5 = (ri5 + ws1);
HXDLIN(1562)							ti5 = (ti5 + ws1);
            						}
            					}
HXDLIN(1562)					{
HXLINE(1562)						int _g323 = (h - by1);
HXDLIN(1562)						int _g223 = h;
HXDLIN(1562)						while((_g323 < _g223)){
HXLINE(1562)							_g323 = (_g323 + (int)1);
HXDLIN(1562)							int j23 = (_g323 - (int)1);
HXDLIN(1562)							val35 = (val35 + (lv5 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li5)) & (int)(int)255)));
HXDLIN(1562)							{
HXLINE(1562)								int int17 = val35;
HXDLIN(1562)								Float val40;
HXDLIN(1562)								if ((int17 < (int)0)) {
HXLINE(1562)									val40 = (((Float)4294967296.0) + int17);
            								}
            								else {
HXLINE(1562)									val40 = (int17 + ((Float)0.0));
            								}
HXDLIN(1562)								int val41 = ::Math_obj::round((val40 * iarr5));
HXDLIN(1562)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val41);
            							}
HXDLIN(1562)							li5 = (li5 + ws1);
HXDLIN(1562)							ti5 = (ti5 + ws1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1563)		{
HXLINE(1563)			Float iarr6 = ((Float)(int)1 / (Float)((by1 + by1) + (int)1));
HXDLIN(1563)			int ws2 = (w * (int)4);
HXDLIN(1563)			int ti6;
HXDLIN(1563)			int li6;
HXDLIN(1563)			int ri6;
HXDLIN(1563)			 ::Dynamic fv6;
HXDLIN(1563)			 ::Dynamic lv6;
HXDLIN(1563)			int val42;
HXDLIN(1563)			{
HXLINE(1563)				int _g16 = (int)0;
HXDLIN(1563)				int _g9 = w;
HXDLIN(1563)				while((_g16 < _g9)){
HXLINE(1563)					_g16 = (_g16 + (int)1);
HXDLIN(1563)					int i6 = (_g16 - (int)1);
HXDLIN(1563)					ti6 = ((i6 * (int)4) + (int)2);
HXDLIN(1563)					li6 = ti6;
HXDLIN(1563)					ri6 = (ti6 + (by1 * ws2));
HXDLIN(1563)					fv6 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti6)) & (int)(int)255);
HXDLIN(1563)					int imgA17 = imgA->byteOffset;
HXDLIN(1563)					lv6 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA17 + (ti6 + (ws2 * (h - (int)1))))) & (int)(int)255);
HXDLIN(1563)					val42 = ((by1 + (int)1) * fv6);
HXDLIN(1563)					{
HXLINE(1563)						int _g324 = (int)0;
HXDLIN(1563)						int _g224 = by1;
HXDLIN(1563)						while((_g324 < _g224)){
HXLINE(1563)							_g324 = (_g324 + (int)1);
HXDLIN(1563)							int j24 = (_g324 - (int)1);
HXDLIN(1563)							int imgA18 = imgA->byteOffset;
HXDLIN(1563)							val42 = (val42 + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA18 + (ti6 + (j24 * ws2)))) & (int)(int)255));
            						}
            					}
HXDLIN(1563)					{
HXLINE(1563)						int _g325 = (int)0;
HXDLIN(1563)						int _g225 = (by1 + (int)1);
HXDLIN(1563)						while((_g325 < _g225)){
HXLINE(1563)							_g325 = (_g325 + (int)1);
HXDLIN(1563)							int j25 = (_g325 - (int)1);
HXDLIN(1563)							val42 = (val42 + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri6)) & (int)(int)255) - fv6));
HXDLIN(1563)							{
HXLINE(1563)								int int18 = val42;
HXDLIN(1563)								Float val43;
HXDLIN(1563)								if ((int18 < (int)0)) {
HXLINE(1563)									val43 = (((Float)4294967296.0) + int18);
            								}
            								else {
HXLINE(1563)									val43 = (int18 + ((Float)0.0));
            								}
HXDLIN(1563)								int val44 = ::Math_obj::round((val43 * iarr6));
HXDLIN(1563)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val44);
            							}
HXDLIN(1563)							ri6 = (ri6 + ws2);
HXDLIN(1563)							ti6 = (ti6 + ws2);
            						}
            					}
HXDLIN(1563)					{
HXLINE(1563)						int _g326 = (by1 + (int)1);
HXDLIN(1563)						int _g226 = (h - by1);
HXDLIN(1563)						while((_g326 < _g226)){
HXLINE(1563)							_g326 = (_g326 + (int)1);
HXDLIN(1563)							int j26 = (_g326 - (int)1);
HXDLIN(1563)							int a6 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri6)) & (int)(int)255);
HXDLIN(1563)							val42 = (val42 + (a6 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li6)) & (int)(int)255)));
HXDLIN(1563)							{
HXLINE(1563)								int int19 = val42;
HXDLIN(1563)								Float val45;
HXDLIN(1563)								if ((int19 < (int)0)) {
HXLINE(1563)									val45 = (((Float)4294967296.0) + int19);
            								}
            								else {
HXLINE(1563)									val45 = (int19 + ((Float)0.0));
            								}
HXDLIN(1563)								int val46 = ::Math_obj::round((val45 * iarr6));
HXDLIN(1563)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val46);
            							}
HXDLIN(1563)							li6 = (li6 + ws2);
HXDLIN(1563)							ri6 = (ri6 + ws2);
HXDLIN(1563)							ti6 = (ti6 + ws2);
            						}
            					}
HXDLIN(1563)					{
HXLINE(1563)						int _g327 = (h - by1);
HXDLIN(1563)						int _g227 = h;
HXDLIN(1563)						while((_g327 < _g227)){
HXLINE(1563)							_g327 = (_g327 + (int)1);
HXDLIN(1563)							int j27 = (_g327 - (int)1);
HXDLIN(1563)							val42 = (val42 + (lv6 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li6)) & (int)(int)255)));
HXDLIN(1563)							{
HXLINE(1563)								int int20 = val42;
HXDLIN(1563)								Float val47;
HXDLIN(1563)								if ((int20 < (int)0)) {
HXLINE(1563)									val47 = (((Float)4294967296.0) + int20);
            								}
            								else {
HXLINE(1563)									val47 = (int20 + ((Float)0.0));
            								}
HXDLIN(1563)								int val48 = ::Math_obj::round((val47 * iarr6));
HXDLIN(1563)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val48);
            							}
HXDLIN(1563)							li6 = (li6 + ws2);
HXDLIN(1563)							ti6 = (ti6 + ws2);
            						}
            					}
            				}
            			}
            		}
HXLINE(1564)		{
HXLINE(1564)			Float iarr7 = ((Float)(int)1 / (Float)((by1 + by1) + (int)1));
HXDLIN(1564)			int ws3 = (w * (int)4);
HXDLIN(1564)			int ti7;
HXDLIN(1564)			int li7;
HXDLIN(1564)			int ri7;
HXDLIN(1564)			 ::Dynamic fv7;
HXDLIN(1564)			 ::Dynamic lv7;
HXDLIN(1564)			int val49;
HXDLIN(1564)			{
HXLINE(1564)				int _g17 = (int)0;
HXDLIN(1564)				int _g10 = w;
HXDLIN(1564)				while((_g17 < _g10)){
HXLINE(1564)					_g17 = (_g17 + (int)1);
HXDLIN(1564)					int i7 = (_g17 - (int)1);
HXDLIN(1564)					ti7 = ((i7 * (int)4) + (int)3);
HXDLIN(1564)					li7 = ti7;
HXDLIN(1564)					ri7 = (ti7 + (by1 * ws3));
HXDLIN(1564)					fv7 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti7)) & (int)(int)255);
HXDLIN(1564)					int imgA19 = imgA->byteOffset;
HXDLIN(1564)					lv7 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA19 + (ti7 + (ws3 * (h - (int)1))))) & (int)(int)255);
HXDLIN(1564)					val49 = ((by1 + (int)1) * fv7);
HXDLIN(1564)					{
HXLINE(1564)						int _g328 = (int)0;
HXDLIN(1564)						int _g228 = by1;
HXDLIN(1564)						while((_g328 < _g228)){
HXLINE(1564)							_g328 = (_g328 + (int)1);
HXDLIN(1564)							int j28 = (_g328 - (int)1);
HXDLIN(1564)							int imgA20 = imgA->byteOffset;
HXDLIN(1564)							val49 = (val49 + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA20 + (ti7 + (j28 * ws3)))) & (int)(int)255));
            						}
            					}
HXDLIN(1564)					{
HXLINE(1564)						int _g329 = (int)0;
HXDLIN(1564)						int _g229 = (by1 + (int)1);
HXDLIN(1564)						while((_g329 < _g229)){
HXLINE(1564)							_g329 = (_g329 + (int)1);
HXDLIN(1564)							int j29 = (_g329 - (int)1);
HXDLIN(1564)							val49 = (val49 + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri7)) & (int)(int)255) - fv7));
HXDLIN(1564)							{
HXLINE(1564)								int int21 = val49;
HXDLIN(1564)								Float val50;
HXDLIN(1564)								if ((int21 < (int)0)) {
HXLINE(1564)									val50 = (((Float)4294967296.0) + int21);
            								}
            								else {
HXLINE(1564)									val50 = (int21 + ((Float)0.0));
            								}
HXDLIN(1564)								int val51 = ::Math_obj::round((val50 * iarr7));
HXDLIN(1564)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val51);
            							}
HXDLIN(1564)							ri7 = (ri7 + ws3);
HXDLIN(1564)							ti7 = (ti7 + ws3);
            						}
            					}
HXDLIN(1564)					{
HXLINE(1564)						int _g330 = (by1 + (int)1);
HXDLIN(1564)						int _g230 = (h - by1);
HXDLIN(1564)						while((_g330 < _g230)){
HXLINE(1564)							_g330 = (_g330 + (int)1);
HXDLIN(1564)							int j30 = (_g330 - (int)1);
HXDLIN(1564)							int a7 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri7)) & (int)(int)255);
HXDLIN(1564)							val49 = (val49 + (a7 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li7)) & (int)(int)255)));
HXDLIN(1564)							{
HXLINE(1564)								int int22 = val49;
HXDLIN(1564)								Float val52;
HXDLIN(1564)								if ((int22 < (int)0)) {
HXLINE(1564)									val52 = (((Float)4294967296.0) + int22);
            								}
            								else {
HXLINE(1564)									val52 = (int22 + ((Float)0.0));
            								}
HXDLIN(1564)								int val53 = ::Math_obj::round((val52 * iarr7));
HXDLIN(1564)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val53);
            							}
HXDLIN(1564)							li7 = (li7 + ws3);
HXDLIN(1564)							ri7 = (ri7 + ws3);
HXDLIN(1564)							ti7 = (ti7 + ws3);
            						}
            					}
HXDLIN(1564)					{
HXLINE(1564)						int _g331 = (h - by1);
HXDLIN(1564)						int _g231 = h;
HXDLIN(1564)						while((_g331 < _g231)){
HXLINE(1564)							_g331 = (_g331 + (int)1);
HXDLIN(1564)							int j31 = (_g331 - (int)1);
HXDLIN(1564)							val49 = (val49 + (lv7 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li7)) & (int)(int)255)));
HXDLIN(1564)							{
HXLINE(1564)								int int23 = val49;
HXDLIN(1564)								Float val54;
HXDLIN(1564)								if ((int23 < (int)0)) {
HXLINE(1564)									val54 = (((Float)4294967296.0) + int23);
            								}
            								else {
HXLINE(1564)									val54 = (int23 + ((Float)0.0));
            								}
HXDLIN(1564)								int val55 = ::Math_obj::round((val54 * iarr7));
HXDLIN(1564)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val55);
            							}
HXDLIN(1564)							li7 = (li7 + ws3);
HXDLIN(1564)							ti7 = (ti7 + ws3);
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlur,(void))

void ImageDataUtil_obj::_hx___boxBlurH( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,int r,int off){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1569___boxBlurH)
HXLINE(1571)		Float iarr = ((Float)(int)1 / (Float)((r + r) + (int)1));
HXLINE(1572)		int ti;
HXDLIN(1572)		int li;
HXDLIN(1572)		int ri;
HXDLIN(1572)		 ::Dynamic fv;
HXDLIN(1572)		 ::Dynamic lv;
HXDLIN(1572)		int val;
HXLINE(1574)		{
HXLINE(1574)			int _g1 = (int)0;
HXDLIN(1574)			int _g = h;
HXDLIN(1574)			while((_g1 < _g)){
HXLINE(1574)				_g1 = (_g1 + (int)1);
HXDLIN(1574)				int i = (_g1 - (int)1);
HXLINE(1576)				ti = (i * w);
HXLINE(1577)				li = ti;
HXLINE(1578)				ri = (ti + r);
HXLINE(1580)				int imgA1 = imgA->byteOffset;
HXDLIN(1580)				fv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA1 + ((ti * (int)4) + off))) & (int)(int)255);
HXLINE(1581)				int imgA2 = imgA->byteOffset;
HXDLIN(1581)				lv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA2 + ((((ti + w) - (int)1) * (int)4) + off))) & (int)(int)255);
HXLINE(1582)				val = ((r + (int)1) * fv);
HXLINE(1584)				{
HXLINE(1584)					int _g3 = (int)0;
HXDLIN(1584)					int _g2 = r;
HXDLIN(1584)					while((_g3 < _g2)){
HXLINE(1584)						_g3 = (_g3 + (int)1);
HXDLIN(1584)						int j = (_g3 - (int)1);
HXLINE(1586)						int imgA3 = imgA->byteOffset;
HXDLIN(1586)						val = (val + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA3 + (((ti + j) * (int)4) + off))) & (int)(int)255));
            					}
            				}
HXLINE(1590)				{
HXLINE(1590)					int _g31 = (int)0;
HXDLIN(1590)					int _g21 = (r + (int)1);
HXDLIN(1590)					while((_g31 < _g21)){
HXLINE(1590)						_g31 = (_g31 + (int)1);
HXDLIN(1590)						int j1 = (_g31 - (int)1);
HXLINE(1592)						int imgA4 = imgA->byteOffset;
HXDLIN(1592)						val = (val + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA4 + ((ri * (int)4) + off))) & (int)(int)255) - fv));
HXLINE(1593)						{
HXLINE(1593)							int _hx_int = val;
HXDLIN(1593)							Float val1;
HXDLIN(1593)							if ((_hx_int < (int)0)) {
HXLINE(1593)								val1 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(1593)								val1 = (_hx_int + ((Float)0.0));
            							}
HXDLIN(1593)							int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1593)							{
HXLINE(1593)								int imgB1 = imgB->byteOffset;
HXDLIN(1593)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB1 + ((ti * (int)4) + off)),val2);
            							}
            						}
HXLINE(1594)						ri = (ri + (int)1);
HXLINE(1595)						ti = (ti + (int)1);
            					}
            				}
HXLINE(1599)				{
HXLINE(1599)					int _g32 = (r + (int)1);
HXDLIN(1599)					int _g22 = (w - r);
HXDLIN(1599)					while((_g32 < _g22)){
HXLINE(1599)						_g32 = (_g32 + (int)1);
HXDLIN(1599)						int j2 = (_g32 - (int)1);
HXLINE(1601)						int imgA5 = imgA->byteOffset;
HXDLIN(1601)						int a = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA5 + ((ri * (int)4) + off))) & (int)(int)255);
HXDLIN(1601)						int imgA6 = imgA->byteOffset;
HXDLIN(1601)						val = (val + (a - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA6 + ((li * (int)4) + off))) & (int)(int)255)));
HXLINE(1602)						{
HXLINE(1602)							int int1 = val;
HXDLIN(1602)							Float val3;
HXDLIN(1602)							if ((int1 < (int)0)) {
HXLINE(1602)								val3 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(1602)								val3 = (int1 + ((Float)0.0));
            							}
HXDLIN(1602)							int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1602)							{
HXLINE(1602)								int imgB2 = imgB->byteOffset;
HXDLIN(1602)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB2 + ((ti * (int)4) + off)),val4);
            							}
            						}
HXLINE(1603)						ri = (ri + (int)1);
HXLINE(1604)						li = (li + (int)1);
HXLINE(1605)						ti = (ti + (int)1);
            					}
            				}
HXLINE(1609)				{
HXLINE(1609)					int _g33 = (w - r);
HXDLIN(1609)					int _g23 = w;
HXDLIN(1609)					while((_g33 < _g23)){
HXLINE(1609)						_g33 = (_g33 + (int)1);
HXDLIN(1609)						int j3 = (_g33 - (int)1);
HXLINE(1611)						int imgA7 = imgA->byteOffset;
HXDLIN(1611)						val = (val + (lv - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA7 + ((li * (int)4) + off))) & (int)(int)255)));
HXLINE(1612)						{
HXLINE(1612)							int int2 = val;
HXDLIN(1612)							Float val5;
HXDLIN(1612)							if ((int2 < (int)0)) {
HXLINE(1612)								val5 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(1612)								val5 = (int2 + ((Float)0.0));
            							}
HXDLIN(1612)							int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1612)							{
HXLINE(1612)								int imgB3 = imgB->byteOffset;
HXDLIN(1612)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB3 + ((ti * (int)4) + off)),val6);
            							}
            						}
HXLINE(1613)						li = (li + (int)1);
HXLINE(1614)						ti = (ti + (int)1);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlurH,(void))

void ImageDataUtil_obj::_hx___boxBlurT( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,int r,int off){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1623___boxBlurT)
HXLINE(1625)		Float iarr = ((Float)(int)1 / (Float)((r + r) + (int)1));
HXLINE(1626)		int ws = (w * (int)4);
HXLINE(1627)		int ti;
HXDLIN(1627)		int li;
HXDLIN(1627)		int ri;
HXDLIN(1627)		 ::Dynamic fv;
HXDLIN(1627)		 ::Dynamic lv;
HXDLIN(1627)		int val;
HXLINE(1629)		{
HXLINE(1629)			int _g1 = (int)0;
HXDLIN(1629)			int _g = w;
HXDLIN(1629)			while((_g1 < _g)){
HXLINE(1629)				_g1 = (_g1 + (int)1);
HXDLIN(1629)				int i = (_g1 - (int)1);
HXLINE(1631)				ti = ((i * (int)4) + off);
HXLINE(1632)				li = ti;
HXLINE(1633)				ri = (ti + (r * ws));
HXLINE(1635)				fv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti)) & (int)(int)255);
HXLINE(1636)				int imgA1 = imgA->byteOffset;
HXDLIN(1636)				lv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA1 + (ti + (ws * (h - (int)1))))) & (int)(int)255);
HXLINE(1637)				val = ((r + (int)1) * fv);
HXLINE(1639)				{
HXLINE(1639)					int _g3 = (int)0;
HXDLIN(1639)					int _g2 = r;
HXDLIN(1639)					while((_g3 < _g2)){
HXLINE(1639)						_g3 = (_g3 + (int)1);
HXDLIN(1639)						int j = (_g3 - (int)1);
HXLINE(1641)						int imgA2 = imgA->byteOffset;
HXDLIN(1641)						val = (val + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA2 + (ti + (j * ws)))) & (int)(int)255));
            					}
            				}
HXLINE(1645)				{
HXLINE(1645)					int _g31 = (int)0;
HXDLIN(1645)					int _g21 = (r + (int)1);
HXDLIN(1645)					while((_g31 < _g21)){
HXLINE(1645)						_g31 = (_g31 + (int)1);
HXDLIN(1645)						int j1 = (_g31 - (int)1);
HXLINE(1647)						val = (val + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri)) & (int)(int)255) - fv));
HXLINE(1648)						{
HXLINE(1648)							int _hx_int = val;
HXDLIN(1648)							Float val1;
HXDLIN(1648)							if ((_hx_int < (int)0)) {
HXLINE(1648)								val1 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(1648)								val1 = (_hx_int + ((Float)0.0));
            							}
HXDLIN(1648)							int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1648)							::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val2);
            						}
HXLINE(1649)						ri = (ri + ws);
HXLINE(1650)						ti = (ti + ws);
            					}
            				}
HXLINE(1654)				{
HXLINE(1654)					int _g32 = (r + (int)1);
HXDLIN(1654)					int _g22 = (h - r);
HXDLIN(1654)					while((_g32 < _g22)){
HXLINE(1654)						_g32 = (_g32 + (int)1);
HXDLIN(1654)						int j2 = (_g32 - (int)1);
HXLINE(1656)						int a = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri)) & (int)(int)255);
HXDLIN(1656)						val = (val + (a - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li)) & (int)(int)255)));
HXLINE(1657)						{
HXLINE(1657)							int int1 = val;
HXDLIN(1657)							Float val3;
HXDLIN(1657)							if ((int1 < (int)0)) {
HXLINE(1657)								val3 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(1657)								val3 = (int1 + ((Float)0.0));
            							}
HXDLIN(1657)							int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1657)							::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val4);
            						}
HXLINE(1658)						li = (li + ws);
HXLINE(1659)						ri = (ri + ws);
HXLINE(1660)						ti = (ti + ws);
            					}
            				}
HXLINE(1664)				{
HXLINE(1664)					int _g33 = (h - r);
HXDLIN(1664)					int _g23 = h;
HXDLIN(1664)					while((_g33 < _g23)){
HXLINE(1664)						_g33 = (_g33 + (int)1);
HXDLIN(1664)						int j3 = (_g33 - (int)1);
HXLINE(1666)						val = (val + (lv - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li)) & (int)(int)255)));
HXLINE(1667)						{
HXLINE(1667)							int int2 = val;
HXDLIN(1667)							Float val5;
HXDLIN(1667)							if ((int2 < (int)0)) {
HXLINE(1667)								val5 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(1667)								val5 = (int2 + ((Float)0.0));
            							}
HXDLIN(1667)							int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1667)							::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val6);
            						}
HXLINE(1668)						li = (li + ws);
HXLINE(1669)						ti = (ti + ws);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlurT,(void))

int ImageDataUtil_obj::_hx___calculateSourceOffset( ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int destX,int destY){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1682___calculateSourceOffset)
HXLINE(1684)		int sourceX = (destX - ::Std_obj::_hx_int(destPoint->x));
HXLINE(1685)		int sourceY = (destY - ::Std_obj::_hx_int(destPoint->y));
HXLINE(1687)		int offset = (int)0;
HXLINE(1689)		bool _hx_tmp;
HXDLIN(1689)		bool _hx_tmp1;
HXDLIN(1689)		bool _hx_tmp2;
HXDLIN(1689)		if ((sourceX >= (int)0)) {
HXLINE(1689)			_hx_tmp2 = (sourceY < (int)0);
            		}
            		else {
HXLINE(1689)			_hx_tmp2 = true;
            		}
HXDLIN(1689)		if (!(_hx_tmp2)) {
HXLINE(1689)			_hx_tmp1 = (sourceX >= sourceRect->width);
            		}
            		else {
HXLINE(1689)			_hx_tmp1 = true;
            		}
HXDLIN(1689)		if (!(_hx_tmp1)) {
HXLINE(1689)			_hx_tmp = (sourceY >= sourceRect->height);
            		}
            		else {
HXLINE(1689)			_hx_tmp = true;
            		}
HXDLIN(1689)		if (_hx_tmp) {
HXLINE(1691)			offset = (int)-1;
            		}
            		else {
HXLINE(1695)			offset = ((int)4 * ((sourceY * ::Std_obj::_hx_int(sourceRect->width)) + sourceX));
            		}
HXLINE(1699)		return offset;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,_hx___calculateSourceOffset,return )

::Array< Float > ImageDataUtil_obj::_hx___getBoxesForGaussianBlur(Float sigma,int n){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1704___getBoxesForGaussianBlur)
HXLINE(1706)		Float wIdeal = ::Math_obj::sqrt((((Float)(((int)12 * sigma) * sigma) / (Float)n) + (int)1));
HXLINE(1707)		int wl = ::Math_obj::floor(wIdeal);
HXLINE(1708)		if ((hx::Mod(wl,(int)2) == (int)0)) {
HXLINE(1708)			wl = (wl - (int)1);
            		}
HXLINE(1709)		int wu = (wl + (int)2);
HXLINE(1711)		Float mIdeal = ((Float)((((((int)12 * sigma) * sigma) - ((n * wl) * wl)) - (((int)4 * n) * wl)) - ((int)3 * n)) / (Float)(((int)-4 * wl) - (int)4));
HXLINE(1712)		int m = ::Math_obj::round(mIdeal);
HXLINE(1713)		::Array< Float > sizes = ::Array_obj< Float >::__new(0);
HXLINE(1715)		{
HXLINE(1715)			int _g1 = (int)0;
HXDLIN(1715)			int _g = n;
HXDLIN(1715)			while((_g1 < _g)){
HXLINE(1715)				_g1 = (_g1 + (int)1);
HXDLIN(1715)				int i = (_g1 - (int)1);
HXLINE(1717)				Float _hx_tmp;
HXDLIN(1717)				if ((i < m)) {
HXLINE(1717)					_hx_tmp = wl;
            				}
            				else {
HXLINE(1717)					_hx_tmp = wu;
            				}
HXDLIN(1717)				sizes->push(_hx_tmp);
            			}
            		}
HXLINE(1721)		return sizes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___getBoxesForGaussianBlur,return )

int ImageDataUtil_obj::_hx___pixelCompare(int n1,int n2){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1726___pixelCompare)
HXLINE(1728)		int tmp1;
HXLINE(1729)		int tmp2;
HXLINE(1731)		tmp1 = ((int)hx::UShr(n1,(int)24) & (int)(int)255);
HXLINE(1732)		tmp2 = ((int)hx::UShr(n2,(int)24) & (int)(int)255);
HXLINE(1734)		if ((tmp1 != tmp2)) {
HXLINE(1736)			bool aNeg = (tmp1 < (int)0);
HXDLIN(1736)			bool bNeg = (tmp2 < (int)0);
HXDLIN(1736)			bool _hx_tmp;
HXDLIN(1736)			if ((aNeg != bNeg)) {
HXLINE(1736)				_hx_tmp = aNeg;
            			}
            			else {
HXLINE(1736)				_hx_tmp = (tmp1 > tmp2);
            			}
HXDLIN(1736)			if (_hx_tmp) {
HXLINE(1736)				return (int)1;
            			}
            			else {
HXLINE(1736)				return (int)-1;
            			}
            		}
            		else {
HXLINE(1740)			tmp1 = ((int)hx::UShr(n1,(int)16) & (int)(int)255);
HXLINE(1741)			tmp2 = ((int)hx::UShr(n2,(int)16) & (int)(int)255);
HXLINE(1743)			if ((tmp1 != tmp2)) {
HXLINE(1745)				bool aNeg1 = (tmp1 < (int)0);
HXDLIN(1745)				bool bNeg1 = (tmp2 < (int)0);
HXDLIN(1745)				bool _hx_tmp1;
HXDLIN(1745)				if ((aNeg1 != bNeg1)) {
HXLINE(1745)					_hx_tmp1 = aNeg1;
            				}
            				else {
HXLINE(1745)					_hx_tmp1 = (tmp1 > tmp2);
            				}
HXDLIN(1745)				if (_hx_tmp1) {
HXLINE(1745)					return (int)1;
            				}
            				else {
HXLINE(1745)					return (int)-1;
            				}
            			}
            			else {
HXLINE(1749)				tmp1 = ((int)hx::UShr(n1,(int)8) & (int)(int)255);
HXLINE(1750)				tmp2 = ((int)hx::UShr(n2,(int)8) & (int)(int)255);
HXLINE(1752)				if ((tmp1 != tmp2)) {
HXLINE(1754)					bool aNeg2 = (tmp1 < (int)0);
HXDLIN(1754)					bool bNeg2 = (tmp2 < (int)0);
HXDLIN(1754)					bool _hx_tmp2;
HXDLIN(1754)					if ((aNeg2 != bNeg2)) {
HXLINE(1754)						_hx_tmp2 = aNeg2;
            					}
            					else {
HXLINE(1754)						_hx_tmp2 = (tmp1 > tmp2);
            					}
HXDLIN(1754)					if (_hx_tmp2) {
HXLINE(1754)						return (int)1;
            					}
            					else {
HXLINE(1754)						return (int)-1;
            					}
            				}
            				else {
HXLINE(1758)					tmp1 = ((int)n1 & (int)(int)255);
HXLINE(1759)					tmp2 = ((int)n2 & (int)(int)255);
HXLINE(1761)					if ((tmp1 != tmp2)) {
HXLINE(1763)						bool aNeg3 = (tmp1 < (int)0);
HXDLIN(1763)						bool bNeg3 = (tmp2 < (int)0);
HXDLIN(1763)						bool _hx_tmp3;
HXDLIN(1763)						if ((aNeg3 != bNeg3)) {
HXLINE(1763)							_hx_tmp3 = aNeg3;
            						}
            						else {
HXLINE(1763)							_hx_tmp3 = (tmp1 > tmp2);
            						}
HXDLIN(1763)						if (_hx_tmp3) {
HXLINE(1763)							return (int)1;
            						}
            						else {
HXLINE(1763)							return (int)-1;
            						}
            					}
            					else {
HXLINE(1767)						return (int)0;
            					}
            				}
            			}
            		}
HXLINE(1734)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___pixelCompare,return )

void ImageDataUtil_obj::_hx___translatePixel( ::lime::utils::ArrayBufferView imgB, ::lime::math::Rectangle sourceRect, ::lime::math::Rectangle destRect, ::lime::math::Vector2 destPoint,int destX,int destY,Float strength){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1780___translatePixel)
HXLINE(1782)		int d = ((int)4 * ((destY * ::Std_obj::_hx_int(destRect->width)) + destX));
HXLINE(1783)		int sourceX = (destX - ::Std_obj::_hx_int(destPoint->x));
HXDLIN(1783)		int sourceY = (destY - ::Std_obj::_hx_int(destPoint->y));
HXDLIN(1783)		int offset = (int)0;
HXDLIN(1783)		bool _hx_tmp;
HXDLIN(1783)		bool _hx_tmp1;
HXDLIN(1783)		bool _hx_tmp2;
HXDLIN(1783)		if ((sourceX >= (int)0)) {
HXLINE(1783)			_hx_tmp2 = (sourceY < (int)0);
            		}
            		else {
HXLINE(1783)			_hx_tmp2 = true;
            		}
HXDLIN(1783)		if (!(_hx_tmp2)) {
HXLINE(1783)			_hx_tmp1 = (sourceX >= sourceRect->width);
            		}
            		else {
HXLINE(1783)			_hx_tmp1 = true;
            		}
HXDLIN(1783)		if (!(_hx_tmp1)) {
HXLINE(1783)			_hx_tmp = (sourceY >= sourceRect->height);
            		}
            		else {
HXLINE(1783)			_hx_tmp = true;
            		}
HXDLIN(1783)		if (_hx_tmp) {
HXLINE(1783)			offset = (int)-1;
            		}
            		else {
HXLINE(1783)			offset = ((int)4 * ((sourceY * ::Std_obj::_hx_int(sourceRect->width)) + sourceX));
            		}
HXDLIN(1783)		int s = offset;
HXLINE(1785)		if ((s < (int)0)) {
HXLINE(1787)			{
HXLINE(1787)				int imgB1 = imgB->byteOffset;
HXDLIN(1787)				::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB1 + (d + (int)3)),(int)0);
            			}
HXDLIN(1787)			int val = (int)0;
HXDLIN(1787)			{
HXLINE(1787)				int imgB2 = imgB->byteOffset;
HXDLIN(1787)				::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB2 + (d + (int)2)),val);
            			}
HXDLIN(1787)			int val1 = val;
HXDLIN(1787)			{
HXLINE(1787)				int imgB3 = imgB->byteOffset;
HXDLIN(1787)				::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB3 + (d + (int)1)),val1);
            			}
HXDLIN(1787)			int val2 = val1;
HXDLIN(1787)			::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val2);
            		}
            		else {
HXLINE(1791)			{
HXLINE(1791)				int val3 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + s)) & (int)(int)255);
HXDLIN(1791)				::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val3);
            			}
HXLINE(1792)			{
HXLINE(1792)				int imgB4 = imgB->byteOffset;
HXDLIN(1792)				int val4 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB4 + (s + (int)1))) & (int)(int)255);
HXDLIN(1792)				{
HXLINE(1792)					int imgB5 = imgB->byteOffset;
HXDLIN(1792)					::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB5 + (d + (int)1)),val4);
            				}
            			}
HXLINE(1793)			{
HXLINE(1793)				int imgB6 = imgB->byteOffset;
HXDLIN(1793)				int val5 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB6 + (s + (int)2))) & (int)(int)255);
HXDLIN(1793)				{
HXLINE(1793)					int imgB7 = imgB->byteOffset;
HXDLIN(1793)					::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB7 + (d + (int)2)),val5);
            				}
            			}
HXLINE(1795)			int imgB8 = imgB->byteOffset;
HXDLIN(1795)			int _hx_int = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB8 + (s + (int)3))) & (int)(int)255);
HXDLIN(1795)			Float a;
HXDLIN(1795)			if ((_hx_int < (int)0)) {
HXLINE(1795)				a = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE(1795)				a = (_hx_int + ((Float)0.0));
            			}
HXDLIN(1795)			int a1 = ::Std_obj::_hx_int((a * strength));
HXLINE(1796)			{
HXLINE(1796)				int val6;
HXDLIN(1796)				if ((a1 < (int)0)) {
HXLINE(1796)					val6 = (int)0;
            				}
            				else {
HXLINE(1796)					if ((a1 > (int)255)) {
HXLINE(1796)						val6 = (int)255;
            					}
            					else {
HXLINE(1796)						val6 = a1;
            					}
            				}
HXDLIN(1796)				{
HXLINE(1796)					int imgB9 = imgB->byteOffset;
HXDLIN(1796)					::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB9 + (d + (int)3)),val6);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,_hx___translatePixel,(void))


ImageDataUtil_obj::ImageDataUtil_obj()
{
}

bool ImageDataUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lerp4f") ) { outValue = lerp4f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { outValue = bilinear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerpRGBA") ) { outValue = lerpRGBA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setFormat") ) { outValue = setFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"threshold") ) { outValue = threshold_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlur") ) { outValue = _hx___boxBlur_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlurH") ) { outValue = _hx___boxBlurH_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlurT") ) { outValue = _hx___boxBlurT_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"displaceMap") ) { outValue = displaceMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gaussianBlur") ) { outValue = gaussianBlur_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__pixelCompare") ) { outValue = _hx___pixelCompare_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__translatePixel") ) { outValue = _hx___translatePixel_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { outValue = getColorBoundsRect_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__calculateSourceOffset") ) { outValue = _hx___calculateSourceOffset_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__getBoxesForGaussianBlur") ) { outValue = _hx___getBoxesForGaussianBlur_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageDataUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ImageDataUtil_obj_sStaticStorageInfo = 0;
#endif

static void ImageDataUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageDataUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageDataUtil_obj::__mClass;

static ::String ImageDataUtil_obj_sStaticFields[] = {
	HX_HCSTRING("displaceMap","\x63","\xff","\x45","\x95"),
	HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"),
	HX_HCSTRING("lerpRGBA","\xab","\xb2","\x39","\xd1"),
	HX_HCSTRING("lerp4f","\xe9","\x0b","\xb3","\xa1"),
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("gaussianBlur","\x42","\xea","\x61","\xf7"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("multiplyAlpha","\x9a","\xf2","\x1c","\x6b"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("resizeBuffer","\x14","\x7a","\xa2","\xb4"),
	HX_HCSTRING("setFormat","\x79","\x04","\x36","\x5d"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	HX_HCSTRING("__boxBlur","\x32","\xdf","\x2a","\x12"),
	HX_HCSTRING("__boxBlurH","\xd6","\x6c","\x58","\xd3"),
	HX_HCSTRING("__boxBlurT","\xe2","\x6c","\x58","\xd3"),
	HX_HCSTRING("__calculateSourceOffset","\x34","\xce","\x66","\x5a"),
	HX_HCSTRING("__getBoxesForGaussianBlur","\x48","\x14","\xae","\x9c"),
	HX_HCSTRING("__pixelCompare","\xdf","\x79","\xe3","\x8d"),
	HX_HCSTRING("__translatePixel","\x78","\xaf","\x9b","\x5e"),
	::String(null())
};

void ImageDataUtil_obj::__register()
{
	hx::Object *dummy = new ImageDataUtil_obj;
	ImageDataUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._internal.graphics.ImageDataUtil","\xcf","\xfd","\xb0","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageDataUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageDataUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageDataUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageDataUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageDataUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace graphics
