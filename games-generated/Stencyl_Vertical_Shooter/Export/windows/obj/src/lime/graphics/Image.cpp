// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_crypto_Base64
#include <haxe/crypto/Base64.h>
#endif
#ifndef INCLUDED_haxe_crypto_BaseCode
#include <haxe/crypto/BaseCode.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_format_BMP
#include <lime/_internal/format/BMP.h>
#endif
#ifndef INCLUDED_lime__internal_format_BMPType
#include <lime/_internal/format/BMPType.h>
#endif
#ifndef INCLUDED_lime__internal_format_JPEG
#include <lime/_internal/format/JPEG.h>
#endif
#ifndef INCLUDED_lime__internal_format_PNG
#include <lime/_internal/format/PNG.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_ImageCanvasUtil
#include <lime/_internal/graphics/ImageCanvasUtil.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_ImageDataUtil
#include <lime/_internal/graphics/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageFileFormat
#include <lime/graphics/ImageFileFormat.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_AbstractHTTPRequest
#include <lime/net/_HTTPRequest/AbstractHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_Bytes
#include <lime/net/_HTTPRequest_Bytes.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_lime_graphics_Image
#include <lime/net/_HTTPRequest_lime_graphics_Image.h>
#endif
#ifndef INCLUDED_lime_net__IHTTPRequest
#include <lime/net/_IHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_236_new,"lime.graphics.Image","new",0x344ae603,"lime.graphics.Image.new","lime/graphics/Image.hx",236,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_314_clone,"lime.graphics.Image","clone",0xb88517c0,"lime.graphics.Image.clone","lime/graphics/Image.hx",314,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_346_colorTransform,"lime.graphics.Image","colorTransform",0xaf89aec6,"lime.graphics.Image.colorTransform","lime/graphics/Image.hx",346,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_385_copyChannel,"lime.graphics.Image","copyChannel",0xc3306e31,"lime.graphics.Image.copyChannel","lime/graphics/Image.hx",385,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_446_copyPixels,"lime.graphics.Image","copyPixels",0x19d2897f,"lime.graphics.Image.copyPixels","lime/graphics/Image.hx",446,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_553_encode,"lime.graphics.Image","encode",0xa785c453,"lime.graphics.Image.encode","lime/graphics/Image.hx",553,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_582_fillRect,"lime.graphics.Image","fillRect",0x2421e0c4,"lime.graphics.Image.fillRect","lime/graphics/Image.hx",582,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_634_floodFill,"lime.graphics.Image","floodFill",0x1da9f544,"lime.graphics.Image.floodFill","lime/graphics/Image.hx",634,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_815_getColorBoundsRect,"lime.graphics.Image","getColorBoundsRect",0x21db6743,"lime.graphics.Image.getColorBoundsRect","lime/graphics/Image.hx",815,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_853_getPixel,"lime.graphics.Image","getPixel",0xd9e3718d,"lime.graphics.Image.getPixel","lime/graphics/Image.hx",853,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_899_getPixel32,"lime.graphics.Image","getPixel32",0xaeccdb6c,"lime.graphics.Image.getPixel32","lime/graphics/Image.hx",899,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_944_getPixels,"lime.graphics.Image","getPixels",0xcd1fea46,"lime.graphics.Image.getPixels","lime/graphics/Image.hx",944,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1217_merge,"lime.graphics.Image","merge",0x75e8a71b,"lime.graphics.Image.merge","lime/graphics/Image.hx",1217,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1257_resize,"lime.graphics.Image","resize",0xb61d2c31,"lime.graphics.Image.resize","lime/graphics/Image.hx",1257,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1303_scroll,"lime.graphics.Image","scroll",0xf506aa4a,"lime.graphics.Image.scroll","lime/graphics/Image.hx",1303,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1335_setPixel,"lime.graphics.Image","setPixel",0x8840cb01,"lime.graphics.Image.setPixel","lime/graphics/Image.hx",1335,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1379_setPixel32,"lime.graphics.Image","setPixel32",0xb24a79e0,"lime.graphics.Image.setPixel32","lime/graphics/Image.hx",1379,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1423_setPixels,"lime.graphics.Image","setPixels",0xb070d652,"lime.graphics.Image.setPixels","lime/graphics/Image.hx",1423,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1540_threshold,"lime.graphics.Image","threshold",0xf8c3358e,"lime.graphics.Image.threshold","lime/graphics/Image.hx",1540,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1616___clipRect,"lime.graphics.Image","__clipRect",0xd30737f1,"lime.graphics.Image.__clipRect","lime/graphics/Image.hx",1616,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1692___fromBase64,"lime.graphics.Image","__fromBase64",0x71681bb6,"lime.graphics.Image.__fromBase64","lime/graphics/Image.hx",1692,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1703___fromBytes,"lime.graphics.Image","__fromBytes",0x40972c24,"lime.graphics.Image.__fromBytes","lime/graphics/Image.hx",1703,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1769___fromFile,"lime.graphics.Image","__fromFile",0x1c2444e3,"lime.graphics.Image.__fromFile","lime/graphics/Image.hx",1769,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1954___fromImageBuffer,"lime.graphics.Image","__fromImageBuffer",0xe152fb34,"lime.graphics.Image.__fromImageBuffer","lime/graphics/Image.hx",1954,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2021_get_data,"lime.graphics.Image","get_data",0x7986ad30,"lime.graphics.Image.get_data","lime/graphics/Image.hx",2021,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2045_set_data,"lime.graphics.Image","set_data",0x27e406a4,"lime.graphics.Image.set_data","lime/graphics/Image.hx",2045,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2052_get_format,"lime.graphics.Image","get_format",0xc57a33bd,"lime.graphics.Image.get_format","lime/graphics/Image.hx",2052,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2057_set_format,"lime.graphics.Image","set_format",0xc8f7d231,"lime.graphics.Image.set_format","lime/graphics/Image.hx",2057,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2080_get_powerOfTwo,"lime.graphics.Image","get_powerOfTwo",0x62ee1df6,"lime.graphics.Image.get_powerOfTwo","lime/graphics/Image.hx",2080,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2085_set_powerOfTwo,"lime.graphics.Image","set_powerOfTwo",0x830e066a,"lime.graphics.Image.set_powerOfTwo","lime/graphics/Image.hx",2085,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2145_get_premultiplied,"lime.graphics.Image","get_premultiplied",0xc1478990,"lime.graphics.Image.get_premultiplied","lime/graphics/Image.hx",2145,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2150_set_premultiplied,"lime.graphics.Image","set_premultiplied",0xe4b5619c,"lime.graphics.Image.set_premultiplied","lime/graphics/Image.hx",2150,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2197_get_rect,"lime.graphics.Image","get_rect",0x82caa42a,"lime.graphics.Image.get_rect","lime/graphics/Image.hx",2197,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2212_get_src,"lime.graphics.Image","get_src",0x66c2929e,"lime.graphics.Image.get_src","lime/graphics/Image.hx",2212,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2219_set_src,"lime.graphics.Image","set_src",0x59c423aa,"lime.graphics.Image.set_src","lime/graphics/Image.hx",2219,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2224_get_transparent,"lime.graphics.Image","get_transparent",0xe1ee610c,"lime.graphics.Image.get_transparent","lime/graphics/Image.hx",2224,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2232_set_transparent,"lime.graphics.Image","set_transparent",0xddb9de18,"lime.graphics.Image.set_transparent","lime/graphics/Image.hx",2232,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_677_fromBase64,"lime.graphics.Image","fromBase64",0x6fd03756,"lime.graphics.Image.fromBase64","lime/graphics/Image.hx",677,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_696_fromBitmapData,"lime.graphics.Image","fromBitmapData",0x2e36df00,"lime.graphics.Image.fromBitmapData","lime/graphics/Image.hx",696,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_723_fromBytes,"lime.graphics.Image","fromBytes",0x36406484,"lime.graphics.Image.fromBytes","lime/graphics/Image.hx",723,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_745_fromCanvas,"lime.graphics.Image","fromCanvas",0xd2ea8e9f,"lime.graphics.Image.fromCanvas","lime/graphics/Image.hx",745,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_770_fromFile,"lime.graphics.Image","fromFile",0x58f03883,"lime.graphics.Image.fromFile","lime/graphics/Image.hx",770,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_792_fromImageElement,"lime.graphics.Image","fromImageElement",0x196571a8,"lime.graphics.Image.fromImageElement","lime/graphics/Image.hx",792,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1023_loadFromBase64,"lime.graphics.Image","loadFromBase64",0x3166e39c,"lime.graphics.Image.loadFromBase64","lime/graphics/Image.hx",1023,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1116_loadFromBytes,"lime.graphics.Image","loadFromBytes",0xafa862fe,"lime.graphics.Image.loadFromBytes","lime/graphics/Image.hx",1116,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1053_loadFromBytes,"lime.graphics.Image","loadFromBytes",0xafa862fe,"lime.graphics.Image.loadFromBytes","lime/graphics/Image.hx",1053,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1190_loadFromFile,"lime.graphics.Image","loadFromFile",0xfb592749,"lime.graphics.Image.loadFromFile","lime/graphics/Image.hx",1190,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1128_loadFromFile,"lime.graphics.Image","loadFromFile",0xfb592749,"lime.graphics.Image.loadFromFile","lime/graphics/Image.hx",1128,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1609___base64Encode,"lime.graphics.Image","__base64Encode",0x6ec3d362,"lime.graphics.Image.__base64Encode","lime/graphics/Image.hx",1609,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1977___isGIF,"lime.graphics.Image","__isGIF",0x6ba10e3d,"lime.graphics.Image.__isGIF","lime/graphics/Image.hx",1977,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1987___isJPG,"lime.graphics.Image","__isJPG",0x6ba35b1a,"lime.graphics.Image.__isJPG","lime/graphics/Image.hx",1987,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1996___isPNG,"lime.graphics.Image","__isPNG",0x6ba7e6e2,"lime.graphics.Image.__isPNG","lime/graphics/Image.hx",1996,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_2005___isWebP,"lime.graphics.Image","__isWebP",0xcbf428e3,"lime.graphics.Image.__isWebP","lime/graphics/Image.hx",2005,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_101_boot,"lime.graphics.Image","boot",0x85575d2f,"lime.graphics.Image.boot","lime/graphics/Image.hx",101,0xc7b862ad)
namespace lime{
namespace graphics{

void Image_obj::__construct( ::lime::graphics::ImageBuffer buffer,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic color, ::lime::graphics::ImageType type){
int offsetX = __o_offsetX.Default(0);
int offsetY = __o_offsetY.Default(0);
int width = __o_width.Default(-1);
int height = __o_height.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_236_new)
HXLINE( 238)		this->offsetX = offsetX;
HXLINE( 239)		this->offsetY = offsetY;
HXLINE( 240)		this->width = width;
HXLINE( 241)		this->height = height;
HXLINE( 243)		this->version = (int)0;
HXLINE( 245)		if (hx::IsNull( type )) {
HXLINE( 252)			type = ::lime::graphics::ImageType_obj::DATA_dyn();
            		}
HXLINE( 257)		this->type = type;
HXLINE( 259)		if (hx::IsNull( buffer )) {
HXLINE( 261)			bool _hx_tmp;
HXDLIN( 261)			if ((width > (int)0)) {
HXLINE( 261)				_hx_tmp = (height > (int)0);
            			}
            			else {
HXLINE( 261)				_hx_tmp = false;
            			}
HXDLIN( 261)			if (_hx_tmp) {
HXLINE( 263)				 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 263)				switch((int)(_hx_getEnumValueIndex(_g))){
            					case (int)0: {
HXLINE( 267)						this->buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(),width,height,null(),null());
HXLINE( 268)						::lime::_internal::graphics::ImageCanvasUtil_obj::createCanvas(hx::ObjectPtr<OBJ_>(this),width,height);
HXLINE( 270)						bool _hx_tmp1;
HXDLIN( 270)						if (hx::IsNotNull( color )) {
HXLINE( 270)							_hx_tmp1 = hx::IsNotEq( color,(int)0 );
            						}
            						else {
HXLINE( 270)							_hx_tmp1 = false;
            						}
HXDLIN( 270)						if (_hx_tmp1) {
HXLINE( 272)							this->fillRect( ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height),color,null());
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 278)						 ::Dynamic elements = ((width * height) * (int)4);
HXDLIN( 278)						 ::lime::utils::ArrayBufferView this1;
HXDLIN( 278)						if (hx::IsNotNull( elements )) {
HXLINE( 278)							this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            						}
            						else {
HXLINE( 278)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            						}
HXDLIN( 278)						this->buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,null(),null());
HXLINE( 280)						bool _hx_tmp2;
HXDLIN( 280)						if (hx::IsNotNull( color )) {
HXLINE( 280)							_hx_tmp2 = hx::IsNotEq( color,(int)0 );
            						}
            						else {
HXLINE( 280)							_hx_tmp2 = false;
            						}
HXDLIN( 280)						if (_hx_tmp2) {
HXLINE( 282)							this->fillRect( ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height),color,null());
            						}
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
            		else {
HXLINE( 301)			this->_hx___fromImageBuffer(buffer);
            		}
            	}

Dynamic Image_obj::__CreateEmpty() { return new Image_obj; }

void *Image_obj::_hx_vtable = 0;

Dynamic Image_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Image_obj > _hx_result = new Image_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Image_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x66ea719b;
}

 ::lime::graphics::Image Image_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_314_clone)
HXDLIN( 314)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 328)			 ::lime::graphics::ImageBuffer image = this->buffer->clone();
HXDLIN( 328)			 ::lime::graphics::Image image1 =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,image,this->offsetX,this->offsetY,this->width,this->height,null(),this->type);
HXLINE( 329)			image1->version = this->version;
HXLINE( 330)			return image1;
            		}
            		else {
HXLINE( 334)			return  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),this->offsetX,this->offsetY,this->width,this->height,null(),this->type);
            		}
HXLINE( 314)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,clone,return )

void Image_obj::colorTransform( ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_346_colorTransform)
HXLINE( 348)		rect = this->_hx___clipRect(rect);
HXLINE( 349)		bool _hx_tmp;
HXDLIN( 349)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 349)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 349)			_hx_tmp = true;
            		}
HXDLIN( 349)		if (_hx_tmp) {
HXLINE( 349)			return;
            		}
HXLINE( 351)		{
HXLINE( 351)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 351)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 355)					::lime::_internal::graphics::ImageCanvasUtil_obj::colorTransform(hx::ObjectPtr<OBJ_>(this),rect,colorMatrix);
            				}
            				break;
            				case (int)1: {
HXLINE( 363)					::lime::_internal::graphics::ImageDataUtil_obj::colorTransform(hx::ObjectPtr<OBJ_>(this),rect,colorMatrix);
            				}
            				break;
            				case (int)2: {
HXLINE( 367)					rect->offset(this->offsetX,this->offsetY);
HXLINE( 368)					 ::Dynamic _hx_tmp1 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic));
HXDLIN( 368)					 ::Dynamic _hx_tmp2 = rect->_hx___toFlashRectangle();
HXDLIN( 368)					_hx_tmp1(_hx_tmp2,::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::_hx___toFlashColorTransform(colorMatrix));
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,colorTransform,(void))

void Image_obj::copyChannel( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_385_copyChannel)
HXLINE( 387)		sourceRect = this->_hx___clipRect(sourceRect);
HXLINE( 388)		bool _hx_tmp;
HXDLIN( 388)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 388)			_hx_tmp = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE( 388)			_hx_tmp = true;
            		}
HXDLIN( 388)		if (_hx_tmp) {
HXLINE( 388)			return;
            		}
HXLINE( 389)		bool _hx_tmp1;
HXDLIN( 389)		if (hx::IsEq( destChannel,::lime::graphics::ImageChannel_obj::ALPHA_dyn() )) {
HXLINE( 389)			_hx_tmp1 = !(this->get_transparent());
            		}
            		else {
HXLINE( 389)			_hx_tmp1 = false;
            		}
HXDLIN( 389)		if (_hx_tmp1) {
HXLINE( 389)			return;
            		}
HXLINE( 390)		bool _hx_tmp2;
HXDLIN( 390)		if (!((sourceRect->width <= (int)0))) {
HXLINE( 390)			_hx_tmp2 = (sourceRect->height <= (int)0);
            		}
            		else {
HXLINE( 390)			_hx_tmp2 = true;
            		}
HXDLIN( 390)		if (_hx_tmp2) {
HXLINE( 390)			return;
            		}
HXLINE( 391)		if (((sourceRect->x + sourceRect->width) > sourceImage->width)) {
HXLINE( 391)			sourceRect->width = (sourceImage->width - sourceRect->x);
            		}
HXLINE( 392)		if (((sourceRect->y + sourceRect->height) > sourceImage->height)) {
HXLINE( 392)			sourceRect->height = (sourceImage->height - sourceRect->y);
            		}
HXLINE( 394)		{
HXLINE( 394)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 394)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 398)					::lime::_internal::graphics::ImageCanvasUtil_obj::copyChannel(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            				}
            				break;
            				case (int)1: {
HXLINE( 407)					::lime::_internal::graphics::ImageDataUtil_obj::copyChannel(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            				}
            				break;
            				case (int)2: {
HXLINE( 411)					int srcChannel;
HXDLIN( 411)					switch((int)(_hx_getEnumValueIndex(sourceChannel))){
            						case (int)0: {
HXLINE( 411)							srcChannel = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 411)							srcChannel = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 411)							srcChannel = (int)4;
            						}
            						break;
            						case (int)3: {
HXLINE( 411)							srcChannel = (int)8;
            						}
            						break;
            					}
HXLINE( 418)					int dstChannel;
HXDLIN( 418)					switch((int)(_hx_getEnumValueIndex(destChannel))){
            						case (int)0: {
HXLINE( 418)							dstChannel = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 418)							dstChannel = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 418)							dstChannel = (int)4;
            						}
            						break;
            						case (int)3: {
HXLINE( 418)							dstChannel = (int)8;
            						}
            						break;
            					}
HXLINE( 425)					sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE( 426)					destPoint->offset(this->offsetX,this->offsetY);
HXLINE( 428)					 ::Dynamic _hx_tmp3 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("copyChannel",8e,7d,e6,22),hx::paccDynamic));
HXDLIN( 428)					 ::Dynamic _hx_tmp4 = sourceImage->buffer->get_src();
HXDLIN( 428)					 ::Dynamic _hx_tmp5 = sourceRect->_hx___toFlashRectangle();
HXDLIN( 428)					_hx_tmp3(_hx_tmp4,_hx_tmp5,destPoint->_hx___toFlashPoint(),srcChannel,dstChannel);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Image_obj,copyChannel,(void))

void Image_obj::copyPixels( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_446_copyPixels)
HXLINE( 448)		bool _hx_tmp;
HXDLIN( 448)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 448)			_hx_tmp = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE( 448)			_hx_tmp = true;
            		}
HXDLIN( 448)		if (_hx_tmp) {
HXLINE( 448)			return;
            		}
HXLINE( 449)		bool _hx_tmp1;
HXDLIN( 449)		if (!((sourceRect->width <= (int)0))) {
HXLINE( 449)			_hx_tmp1 = (sourceRect->height <= (int)0);
            		}
            		else {
HXLINE( 449)			_hx_tmp1 = true;
            		}
HXDLIN( 449)		if (_hx_tmp1) {
HXLINE( 449)			return;
            		}
HXLINE( 450)		bool _hx_tmp2;
HXDLIN( 450)		if ((this->width > (int)0)) {
HXLINE( 450)			_hx_tmp2 = (this->height <= (int)0);
            		}
            		else {
HXLINE( 450)			_hx_tmp2 = true;
            		}
HXDLIN( 450)		if (_hx_tmp2) {
HXLINE( 450)			return;
            		}
HXLINE( 452)		if (((sourceRect->x + sourceRect->width) > sourceImage->width)) {
HXLINE( 452)			sourceRect->width = (sourceImage->width - sourceRect->x);
            		}
HXLINE( 453)		if (((sourceRect->y + sourceRect->height) > sourceImage->height)) {
HXLINE( 453)			sourceRect->height = (sourceImage->height - sourceRect->y);
            		}
HXLINE( 455)		if ((sourceRect->x < (int)0)) {
HXLINE( 457)			 ::lime::math::Rectangle sourceRect1 = sourceRect;
HXDLIN( 457)			sourceRect1->width = (sourceRect1->width + sourceRect->x);
HXLINE( 458)			sourceRect->x = (int)0;
            		}
HXLINE( 462)		if ((sourceRect->y < (int)0)) {
HXLINE( 464)			 ::lime::math::Rectangle sourceRect2 = sourceRect;
HXDLIN( 464)			sourceRect2->height = (sourceRect2->height + sourceRect->y);
HXLINE( 465)			sourceRect->y = (int)0;
            		}
HXLINE( 469)		if (((destPoint->x + sourceRect->width) > this->width)) {
HXLINE( 469)			sourceRect->width = (this->width - destPoint->x);
            		}
HXLINE( 470)		if (((destPoint->y + sourceRect->height) > this->height)) {
HXLINE( 470)			sourceRect->height = (this->height - destPoint->y);
            		}
HXLINE( 472)		if ((destPoint->x < (int)0)) {
HXLINE( 474)			 ::lime::math::Rectangle sourceRect3 = sourceRect;
HXDLIN( 474)			sourceRect3->width = (sourceRect3->width + destPoint->x);
HXLINE( 475)			 ::lime::math::Rectangle sourceRect4 = sourceRect;
HXDLIN( 475)			sourceRect4->x = (sourceRect4->x - destPoint->x);
HXLINE( 476)			destPoint->x = (int)0;
            		}
HXLINE( 480)		if ((destPoint->y < (int)0)) {
HXLINE( 482)			 ::lime::math::Rectangle sourceRect5 = sourceRect;
HXDLIN( 482)			sourceRect5->height = (sourceRect5->height + destPoint->y);
HXLINE( 483)			 ::lime::math::Rectangle sourceRect6 = sourceRect;
HXDLIN( 483)			sourceRect6->y = (sourceRect6->y - destPoint->y);
HXLINE( 484)			destPoint->y = (int)0;
            		}
HXLINE( 488)		bool _hx_tmp3;
HXDLIN( 488)		bool _hx_tmp4;
HXDLIN( 488)		if (hx::IsEq( sourceImage,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 488)			Float destPoint1 = destPoint->x;
HXDLIN( 488)			_hx_tmp4 = (destPoint1 < sourceRect->get_right());
            		}
            		else {
HXLINE( 488)			_hx_tmp4 = false;
            		}
HXDLIN( 488)		if (_hx_tmp4) {
HXLINE( 488)			Float destPoint2 = destPoint->y;
HXDLIN( 488)			_hx_tmp3 = (destPoint2 < sourceRect->get_bottom());
            		}
            		else {
HXLINE( 488)			_hx_tmp3 = false;
            		}
HXDLIN( 488)		if (_hx_tmp3) {
HXLINE( 491)			sourceImage = this->clone();
            		}
HXLINE( 495)		{
HXLINE( 495)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 495)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 499)					bool _hx_tmp5;
HXDLIN( 499)					if (hx::IsNull( alphaImage )) {
HXLINE( 499)						_hx_tmp5 = hx::IsNotEq( sourceImage->type,::lime::graphics::ImageType_obj::CANVAS_dyn() );
            					}
            					else {
HXLINE( 499)						_hx_tmp5 = true;
            					}
HXDLIN( 499)					if (_hx_tmp5) {
HXLINE( 501)						::lime::_internal::graphics::ImageCanvasUtil_obj::convertToData(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 502)						::lime::_internal::graphics::ImageCanvasUtil_obj::convertToData(sourceImage,null());
HXLINE( 503)						if (hx::IsNotNull( alphaImage )) {
HXLINE( 503)							::lime::_internal::graphics::ImageCanvasUtil_obj::convertToData(alphaImage,null());
            						}
HXLINE( 505)						::lime::_internal::graphics::ImageDataUtil_obj::copyPixels(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
            					}
            					else {
HXLINE( 509)						::lime::_internal::graphics::ImageCanvasUtil_obj::convertToCanvas(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 510)						::lime::_internal::graphics::ImageCanvasUtil_obj::convertToCanvas(sourceImage,null());
HXLINE( 511)						::lime::_internal::graphics::ImageCanvasUtil_obj::copyPixels(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 523)					::lime::_internal::graphics::ImageDataUtil_obj::copyPixels(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
            				}
            				break;
            				case (int)2: {
HXLINE( 527)					sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE( 528)					destPoint->offset(this->offsetX,this->offsetY);
HXLINE( 530)					bool _hx_tmp6;
HXDLIN( 530)					if (hx::IsNotNull( alphaImage )) {
HXLINE( 530)						_hx_tmp6 = hx::IsNotNull( alphaPoint );
            					}
            					else {
HXLINE( 530)						_hx_tmp6 = false;
            					}
HXDLIN( 530)					if (_hx_tmp6) {
HXLINE( 532)						alphaPoint->offset(alphaImage->offsetX,alphaImage->offsetY);
            					}
HXLINE( 536)					 ::Dynamic _hx_tmp7 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("copyPixels",c2,54,6e,42),hx::paccDynamic));
HXDLIN( 536)					 ::Dynamic sourceImage1 = sourceImage->buffer->_hx___srcBitmapData;
HXDLIN( 536)					 ::Dynamic _hx_tmp8 = sourceRect->_hx___toFlashRectangle();
HXDLIN( 536)					 ::Dynamic _hx_tmp9 = destPoint->_hx___toFlashPoint();
HXDLIN( 536)					 ::Dynamic _hx_tmp10;
HXDLIN( 536)					if (hx::IsNotNull( alphaImage )) {
HXLINE( 536)						_hx_tmp10 = alphaImage->buffer->get_src();
            					}
            					else {
HXLINE( 536)						_hx_tmp10 = null();
            					}
HXDLIN( 536)					 ::Dynamic _hx_tmp11;
HXDLIN( 536)					if (hx::IsNotNull( alphaPoint )) {
HXLINE( 536)						_hx_tmp11 = alphaPoint->_hx___toFlashPoint();
            					}
            					else {
HXLINE( 536)						_hx_tmp11 = null();
            					}
HXDLIN( 536)					_hx_tmp7(sourceImage1,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,mergeAlpha);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Image_obj,copyPixels,(void))

 ::haxe::io::Bytes Image_obj::encode( ::lime::graphics::ImageFileFormat format,hx::Null< int >  __o_quality){
int quality = __o_quality.Default(90);
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_553_encode)
HXDLIN( 553)		if (hx::IsNull( format )) {
HXLINE( 557)			return ::lime::_internal::format::PNG_obj::encode(hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXDLIN( 553)			switch((int)(_hx_getEnumValueIndex(format))){
            				case (int)0: {
HXLINE( 565)					return ::lime::_internal::format::BMP_obj::encode(hx::ObjectPtr<OBJ_>(this),null());
            				}
            				break;
            				case (int)1: {
HXLINE( 561)					return ::lime::_internal::format::JPEG_obj::encode(hx::ObjectPtr<OBJ_>(this),quality);
            				}
            				break;
            				case (int)2: {
HXLINE( 557)					return ::lime::_internal::format::PNG_obj::encode(hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            			}
            		}
HXLINE( 553)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,encode,return )

void Image_obj::fillRect( ::lime::math::Rectangle rect,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_582_fillRect)
HXLINE( 584)		rect = this->_hx___clipRect(rect);
HXLINE( 585)		bool _hx_tmp;
HXDLIN( 585)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 585)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 585)			_hx_tmp = true;
            		}
HXDLIN( 585)		if (_hx_tmp) {
HXLINE( 585)			return;
            		}
HXLINE( 587)		{
HXLINE( 587)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 587)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 591)					::lime::_internal::graphics::ImageCanvasUtil_obj::fillRect(hx::ObjectPtr<OBJ_>(this),rect,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE( 599)					if ((this->buffer->data->length == (int)0)) {
HXLINE( 599)						return;
            					}
HXLINE( 601)					::lime::_internal::graphics::ImageDataUtil_obj::fillRect(hx::ObjectPtr<OBJ_>(this),rect,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE( 605)					rect->offset(this->offsetX,this->offsetY);
HXLINE( 607)					int argb;
HXDLIN( 607)					if (hx::IsNull( format )) {
HXLINE( 611)						int rgba = color;
HXDLIN( 611)						int this1 = (int)0;
HXDLIN( 611)						int argb1 = this1;
HXDLIN( 611)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 607)						argb = argb1;
            					}
            					else {
HXLINE( 607)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 607)							argb = color;
HXDLIN( 607)							goto _hx_goto_6;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 610)							int bgra = color;
HXDLIN( 610)							int this2 = (int)0;
HXDLIN( 610)							int argb2 = this2;
HXDLIN( 610)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 607)							argb = argb2;
HXLINE( 610)							goto _hx_goto_6;
            						}
            						/* default */{
HXLINE( 611)							int rgba1 = color;
HXDLIN( 611)							int this3 = (int)0;
HXDLIN( 611)							int argb3 = this3;
HXDLIN( 611)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 607)							argb = argb3;
            						}
            						_hx_goto_6:;
            					}
HXLINE( 615)					 ::Dynamic _hx_tmp1 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("fillRect",47,45,b9,6c),hx::paccDynamic));
HXDLIN( 615)					_hx_tmp1(rect->_hx___toFlashRectangle(),argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,fillRect,(void))

void Image_obj::floodFill(int x,int y,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_634_floodFill)
HXLINE( 636)		if (hx::IsNull( this->buffer )) {
HXLINE( 636)			return;
            		}
HXLINE( 638)		{
HXLINE( 638)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 638)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 642)					::lime::_internal::graphics::ImageCanvasUtil_obj::floodFill(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE( 650)					::lime::_internal::graphics::ImageDataUtil_obj::floodFill(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE( 654)					int argb;
HXDLIN( 654)					if (hx::IsNull( format )) {
HXLINE( 658)						int rgba = color;
HXDLIN( 658)						int this1 = (int)0;
HXDLIN( 658)						int argb1 = this1;
HXDLIN( 658)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 654)						argb = argb1;
            					}
            					else {
HXLINE( 654)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 654)							argb = color;
HXDLIN( 654)							goto _hx_goto_8;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 657)							int bgra = color;
HXDLIN( 657)							int this2 = (int)0;
HXDLIN( 657)							int argb2 = this2;
HXDLIN( 657)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 654)							argb = argb2;
HXLINE( 657)							goto _hx_goto_8;
            						}
            						/* default */{
HXLINE( 658)							int rgba1 = color;
HXDLIN( 658)							int this3 = (int)0;
HXDLIN( 658)							int argb3 = this3;
HXDLIN( 658)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 654)							argb = argb3;
            						}
            						_hx_goto_8:;
            					}
HXLINE( 662)					 ::Dynamic _hx_tmp =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("floodFill",61,83,8a,59),hx::paccDynamic));
HXDLIN( 662)					int _hx_tmp1 = (x + this->offsetX);
HXDLIN( 662)					_hx_tmp(_hx_tmp1,(y + this->offsetY),argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,floodFill,(void))

 ::lime::math::Rectangle Image_obj::getColorBoundsRect(int mask,int color,hx::Null< bool >  __o_findColor, ::Dynamic format){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_815_getColorBoundsRect)
HXLINE( 817)		if (hx::IsNull( this->buffer )) {
HXLINE( 817)			return null();
            		}
HXLINE( 819)		 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 819)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 827)				return ::lime::_internal::graphics::ImageDataUtil_obj::getColorBoundsRect(hx::ObjectPtr<OBJ_>(this),mask,color,findColor,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 831)				return ::lime::_internal::graphics::ImageDataUtil_obj::getColorBoundsRect(hx::ObjectPtr<OBJ_>(this),mask,color,findColor,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 835)				 ::Dynamic rect = this->buffer->_hx___srcBitmapData->__Field(HX_("getColorBoundsRect",86,ad,e8,80),hx::paccDynamic)(mask,color,findColor);
HXLINE( 836)				return  ::lime::math::Rectangle_obj::__alloc( HX_CTX , ::Dynamic(rect->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("y",79,00,00,00),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)));
            			}
            			break;
            			default:{
HXLINE( 840)				return null();
            			}
            		}
HXLINE( 819)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,getColorBoundsRect,return )

int Image_obj::getPixel(int x,int y, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_853_getPixel)
HXLINE( 855)		bool _hx_tmp;
HXDLIN( 855)		bool _hx_tmp1;
HXDLIN( 855)		bool _hx_tmp2;
HXDLIN( 855)		bool _hx_tmp3;
HXDLIN( 855)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 855)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 855)			_hx_tmp3 = true;
            		}
HXDLIN( 855)		if (!(_hx_tmp3)) {
HXLINE( 855)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 855)			_hx_tmp2 = true;
            		}
HXDLIN( 855)		if (!(_hx_tmp2)) {
HXLINE( 855)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 855)			_hx_tmp1 = true;
            		}
HXDLIN( 855)		if (!(_hx_tmp1)) {
HXLINE( 855)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 855)			_hx_tmp = true;
            		}
HXDLIN( 855)		if (_hx_tmp) {
HXLINE( 855)			return (int)0;
            		}
HXLINE( 857)		 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 857)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 861)				return ::lime::_internal::graphics::ImageCanvasUtil_obj::getPixel(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 869)				return ::lime::_internal::graphics::ImageDataUtil_obj::getPixel(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 873)				 ::Dynamic color =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("getPixel",10,d6,7a,22),hx::paccDynamic));
HXDLIN( 873)				int color1 = (x + this->offsetX);
HXDLIN( 873)				int color2 = ( (int)(color(color1,(y + this->offsetY))) );
HXLINE( 875)				if (hx::IsNull( format )) {
HXLINE( 879)					int this1 = (int)0;
HXDLIN( 879)					int rgba = this1;
HXDLIN( 879)					rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 879)					int rgba1 = rgba;
HXDLIN( 879)					return rgba1;
            				}
            				else {
HXLINE( 875)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 877)						return color2;
HXDLIN( 877)						goto _hx_goto_11;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 878)						int this2 = (int)0;
HXDLIN( 878)						int bgra = this2;
HXDLIN( 878)						bgra = ((int)((int)((int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 878)						int bgra1 = bgra;
HXDLIN( 878)						return bgra1;
HXDLIN( 878)						goto _hx_goto_11;
            					}
            					/* default */{
HXLINE( 879)						int this3 = (int)0;
HXDLIN( 879)						int rgba2 = this3;
HXDLIN( 879)						rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 879)						int rgba3 = rgba2;
HXDLIN( 879)						return rgba3;
            					}
            					_hx_goto_11:;
            				}
            			}
            			break;
            			default:{
HXLINE( 885)				return (int)0;
            			}
            		}
HXLINE( 857)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,getPixel,return )

int Image_obj::getPixel32(int x,int y, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_899_getPixel32)
HXLINE( 901)		bool _hx_tmp;
HXDLIN( 901)		bool _hx_tmp1;
HXDLIN( 901)		bool _hx_tmp2;
HXDLIN( 901)		bool _hx_tmp3;
HXDLIN( 901)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 901)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 901)			_hx_tmp3 = true;
            		}
HXDLIN( 901)		if (!(_hx_tmp3)) {
HXLINE( 901)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 901)			_hx_tmp2 = true;
            		}
HXDLIN( 901)		if (!(_hx_tmp2)) {
HXLINE( 901)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 901)			_hx_tmp1 = true;
            		}
HXDLIN( 901)		if (!(_hx_tmp1)) {
HXLINE( 901)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 901)			_hx_tmp = true;
            		}
HXDLIN( 901)		if (_hx_tmp) {
HXLINE( 901)			return (int)0;
            		}
HXLINE( 903)		 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 903)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 907)				return ::lime::_internal::graphics::ImageCanvasUtil_obj::getPixel32(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 915)				return ::lime::_internal::graphics::ImageDataUtil_obj::getPixel32(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 919)				 ::Dynamic color =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("getPixel32",af,a6,68,d7),hx::paccDynamic));
HXDLIN( 919)				int color1 = (x + this->offsetX);
HXDLIN( 919)				int color2 = ( (int)(color(color1,(y + this->offsetY))) );
HXLINE( 921)				if (hx::IsNull( format )) {
HXLINE( 925)					int this1 = (int)0;
HXDLIN( 925)					int rgba = this1;
HXDLIN( 925)					rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 925)					int rgba1 = rgba;
HXDLIN( 925)					return rgba1;
            				}
            				else {
HXLINE( 921)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 923)						return color2;
HXDLIN( 923)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 924)						int this2 = (int)0;
HXDLIN( 924)						int bgra = this2;
HXDLIN( 924)						bgra = ((int)((int)((int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 924)						int bgra1 = bgra;
HXDLIN( 924)						return bgra1;
HXDLIN( 924)						goto _hx_goto_13;
            					}
            					/* default */{
HXLINE( 925)						int this3 = (int)0;
HXDLIN( 925)						int rgba2 = this3;
HXDLIN( 925)						rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 925)						int rgba3 = rgba2;
HXDLIN( 925)						return rgba3;
            					}
            					_hx_goto_13:;
            				}
            			}
            			break;
            			default:{
HXLINE( 931)				return (int)0;
            			}
            		}
HXLINE( 903)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,getPixel32,return )

 ::haxe::io::Bytes Image_obj::getPixels( ::lime::math::Rectangle rect, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_944_getPixels)
HXLINE( 946)		if (hx::IsNull( this->buffer )) {
HXLINE( 946)			return null();
            		}
HXLINE( 948)		 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 948)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 952)				return ::lime::_internal::graphics::ImageCanvasUtil_obj::getPixels(hx::ObjectPtr<OBJ_>(this),rect,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 960)				return ::lime::_internal::graphics::ImageDataUtil_obj::getPixels(hx::ObjectPtr<OBJ_>(this),rect,format);
            			}
            			break;
            			case (int)2: {
HXLINE(1005)				return null();
            			}
            			break;
            			default:{
HXLINE(1010)				return null();
            			}
            		}
HXLINE( 948)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,getPixels,return )

void Image_obj::merge( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1217_merge)
HXLINE(1219)		bool _hx_tmp;
HXDLIN(1219)		if (hx::IsNotNull( this->buffer )) {
HXLINE(1219)			_hx_tmp = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE(1219)			_hx_tmp = true;
            		}
HXDLIN(1219)		if (_hx_tmp) {
HXLINE(1219)			return;
            		}
HXLINE(1221)		{
HXLINE(1221)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1221)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE(1225)					::lime::_internal::graphics::ImageCanvasUtil_obj::convertToCanvas(hx::ObjectPtr<OBJ_>(this),null());
HXLINE(1226)					::lime::_internal::graphics::ImageCanvasUtil_obj::merge(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            				}
            				break;
            				case (int)1: {
HXLINE(1235)					::lime::_internal::graphics::ImageDataUtil_obj::merge(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            				}
            				break;
            				case (int)2: {
HXLINE(1239)					sourceRect->offset(this->offsetX,this->offsetY);
HXLINE(1240)					 ::Dynamic _hx_tmp1 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("merge",b8,a2,c6,05),hx::paccDynamic));
HXDLIN(1240)					 ::Dynamic sourceImage1 = sourceImage->buffer->_hx___srcBitmapData;
HXDLIN(1240)					 ::Dynamic _hx_tmp2 = sourceRect->_hx___toFlashRectangle();
HXDLIN(1240)					_hx_tmp1(sourceImage1,_hx_tmp2,destPoint->_hx___toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            				}
            				break;
            				default:{
HXLINE(1244)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(Image_obj,merge,(void))

void Image_obj::resize(int newWidth,int newHeight){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1257_resize)
HXLINE(1259)		{
HXLINE(1259)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1259)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE(1263)					::lime::_internal::graphics::ImageCanvasUtil_obj::resize(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            				}
            				break;
            				case (int)1: {
HXLINE(1267)					::lime::_internal::graphics::ImageDataUtil_obj::resize(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE(1283)		this->buffer->width = newWidth;
HXLINE(1284)		this->buffer->height = newHeight;
HXLINE(1286)		this->offsetX = (int)0;
HXLINE(1287)		this->offsetY = (int)0;
HXLINE(1288)		this->width = newWidth;
HXLINE(1289)		this->height = newHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,resize,(void))

void Image_obj::scroll(int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1303_scroll)
HXLINE(1305)		if (hx::IsNull( this->buffer )) {
HXLINE(1305)			return;
            		}
HXLINE(1307)		{
HXLINE(1307)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1307)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE(1311)					::lime::_internal::graphics::ImageCanvasUtil_obj::scroll(hx::ObjectPtr<OBJ_>(this),x,y);
            				}
            				break;
            				case (int)1: {
HXLINE(1315)					 ::lime::math::Rectangle _hx_tmp = this->get_rect();
HXDLIN(1315)					this->copyPixels(hx::ObjectPtr<OBJ_>(this),_hx_tmp, ::lime::math::Vector2_obj::__alloc( HX_CTX ,x,y),null(),null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE(1319)					 ::Dynamic _hx_tmp1 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("scroll",0d,d8,64,47),hx::paccDynamic));
HXDLIN(1319)					int _hx_tmp2 = (x + this->offsetX);
HXDLIN(1319)					_hx_tmp1(_hx_tmp2,(y + this->offsetX));
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,scroll,(void))

void Image_obj::setPixel(int x,int y,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1335_setPixel)
HXLINE(1337)		bool _hx_tmp;
HXDLIN(1337)		bool _hx_tmp1;
HXDLIN(1337)		bool _hx_tmp2;
HXDLIN(1337)		bool _hx_tmp3;
HXDLIN(1337)		if (hx::IsNotNull( this->buffer )) {
HXLINE(1337)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE(1337)			_hx_tmp3 = true;
            		}
HXDLIN(1337)		if (!(_hx_tmp3)) {
HXLINE(1337)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE(1337)			_hx_tmp2 = true;
            		}
HXDLIN(1337)		if (!(_hx_tmp2)) {
HXLINE(1337)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE(1337)			_hx_tmp1 = true;
            		}
HXDLIN(1337)		if (!(_hx_tmp1)) {
HXLINE(1337)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE(1337)			_hx_tmp = true;
            		}
HXDLIN(1337)		if (_hx_tmp) {
HXLINE(1337)			return;
            		}
HXLINE(1339)		{
HXLINE(1339)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1339)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE(1343)					::lime::_internal::graphics::ImageCanvasUtil_obj::setPixel(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE(1351)					::lime::_internal::graphics::ImageDataUtil_obj::setPixel(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE(1355)					int argb;
HXDLIN(1355)					if (hx::IsNull( format )) {
HXLINE(1359)						int rgba = color;
HXDLIN(1359)						int this1 = (int)0;
HXDLIN(1359)						int argb1 = this1;
HXDLIN(1359)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1355)						argb = argb1;
            					}
            					else {
HXLINE(1355)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE(1355)							argb = color;
HXDLIN(1355)							goto _hx_goto_19;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1358)							int bgra = color;
HXDLIN(1358)							int this2 = (int)0;
HXDLIN(1358)							int argb2 = this2;
HXDLIN(1358)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE(1355)							argb = argb2;
HXLINE(1358)							goto _hx_goto_19;
            						}
            						/* default */{
HXLINE(1359)							int rgba1 = color;
HXDLIN(1359)							int this3 = (int)0;
HXDLIN(1359)							int argb3 = this3;
HXDLIN(1359)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1355)							argb = argb3;
            						}
            						_hx_goto_19:;
            					}
HXLINE(1363)					 ::Dynamic _hx_tmp4 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("setPixel",84,2f,d8,d0),hx::paccDynamic));
HXDLIN(1363)					int _hx_tmp5 = (x + this->offsetX);
HXDLIN(1363)					_hx_tmp4(_hx_tmp5,(y + this->offsetX),argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,setPixel,(void))

void Image_obj::setPixel32(int x,int y,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1379_setPixel32)
HXLINE(1381)		bool _hx_tmp;
HXDLIN(1381)		bool _hx_tmp1;
HXDLIN(1381)		bool _hx_tmp2;
HXDLIN(1381)		bool _hx_tmp3;
HXDLIN(1381)		if (hx::IsNotNull( this->buffer )) {
HXLINE(1381)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE(1381)			_hx_tmp3 = true;
            		}
HXDLIN(1381)		if (!(_hx_tmp3)) {
HXLINE(1381)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE(1381)			_hx_tmp2 = true;
            		}
HXDLIN(1381)		if (!(_hx_tmp2)) {
HXLINE(1381)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE(1381)			_hx_tmp1 = true;
            		}
HXDLIN(1381)		if (!(_hx_tmp1)) {
HXLINE(1381)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE(1381)			_hx_tmp = true;
            		}
HXDLIN(1381)		if (_hx_tmp) {
HXLINE(1381)			return;
            		}
HXLINE(1383)		{
HXLINE(1383)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1383)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE(1387)					::lime::_internal::graphics::ImageCanvasUtil_obj::setPixel32(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE(1395)					::lime::_internal::graphics::ImageDataUtil_obj::setPixel32(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE(1399)					int argb;
HXDLIN(1399)					if (hx::IsNull( format )) {
HXLINE(1403)						int rgba = color;
HXDLIN(1403)						int this1 = (int)0;
HXDLIN(1403)						int argb1 = this1;
HXDLIN(1403)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1399)						argb = argb1;
            					}
            					else {
HXLINE(1399)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE(1399)							argb = color;
HXDLIN(1399)							goto _hx_goto_21;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1402)							int bgra = color;
HXDLIN(1402)							int this2 = (int)0;
HXDLIN(1402)							int argb2 = this2;
HXDLIN(1402)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE(1399)							argb = argb2;
HXLINE(1402)							goto _hx_goto_21;
            						}
            						/* default */{
HXLINE(1403)							int rgba1 = color;
HXDLIN(1403)							int this3 = (int)0;
HXDLIN(1403)							int argb3 = this3;
HXDLIN(1403)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1399)							argb = argb3;
            						}
            						_hx_goto_21:;
            					}
HXLINE(1407)					 ::Dynamic _hx_tmp4 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("setPixel32",23,45,e6,da),hx::paccDynamic));
HXDLIN(1407)					int _hx_tmp5 = (x + this->offsetX);
HXDLIN(1407)					_hx_tmp4(_hx_tmp5,(y + this->offsetY),argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,setPixel32,(void))

void Image_obj::setPixels( ::lime::math::Rectangle rect, ::lime::utils::BytePointerData bytePointer, ::Dynamic format, ::lime::_hx_system::Endian endian){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1423_setPixels)
HXLINE(1425)		rect = this->_hx___clipRect(rect);
HXLINE(1426)		bool _hx_tmp;
HXDLIN(1426)		if (hx::IsNotNull( this->buffer )) {
HXLINE(1426)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1426)			_hx_tmp = true;
            		}
HXDLIN(1426)		if (_hx_tmp) {
HXLINE(1426)			return;
            		}
HXLINE(1427)		if (hx::IsNull( endian )) {
HXLINE(1427)			endian = ::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn();
            		}
HXLINE(1429)		{
HXLINE(1429)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1429)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE(1433)					::lime::_internal::graphics::ImageCanvasUtil_obj::setPixels(hx::ObjectPtr<OBJ_>(this),rect,bytePointer,format,endian);
            				}
            				break;
            				case (int)1: {
HXLINE(1441)					::lime::_internal::graphics::ImageDataUtil_obj::setPixels(hx::ObjectPtr<OBJ_>(this),rect,bytePointer,format,endian);
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,setPixels,(void))

int Image_obj::threshold( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,hx::Null< int >  __o_color,hx::Null< int >  __o_mask,hx::Null< bool >  __o_copySource, ::Dynamic format){
int color = __o_color.Default(0);
int mask = __o_mask.Default(-1);
bool copySource = __o_copySource.Default(false);
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1540_threshold)
HXLINE(1542)		bool _hx_tmp;
HXDLIN(1542)		bool _hx_tmp1;
HXDLIN(1542)		if (hx::IsNotNull( this->buffer )) {
HXLINE(1542)			_hx_tmp1 = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE(1542)			_hx_tmp1 = true;
            		}
HXDLIN(1542)		if (!(_hx_tmp1)) {
HXLINE(1542)			_hx_tmp = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1542)			_hx_tmp = true;
            		}
HXDLIN(1542)		if (_hx_tmp) {
HXLINE(1542)			return (int)0;
            		}
HXLINE(1544)		{
HXLINE(1544)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1544)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: case (int)1: {
HXLINE(1553)					return ::lime::_internal::graphics::ImageDataUtil_obj::threshold(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
            				}
            				break;
            				case (int)2: {
HXLINE(1557)					int _color;
HXDLIN(1557)					if (hx::IsNull( format )) {
HXLINE(1561)						int rgba = color;
HXDLIN(1561)						int this1 = (int)0;
HXDLIN(1561)						int argb = this1;
HXDLIN(1561)						argb = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1557)						_color = argb;
            					}
            					else {
HXLINE(1557)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE(1557)							_color = color;
HXDLIN(1557)							goto _hx_goto_24;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1560)							int bgra = color;
HXDLIN(1560)							int this2 = (int)0;
HXDLIN(1560)							int argb1 = this2;
HXDLIN(1560)							argb1 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE(1557)							_color = argb1;
HXLINE(1560)							goto _hx_goto_24;
            						}
            						/* default */{
HXLINE(1561)							int rgba1 = color;
HXDLIN(1561)							int this3 = (int)0;
HXDLIN(1561)							int argb2 = this3;
HXDLIN(1561)							argb2 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1557)							_color = argb2;
            						}
            						_hx_goto_24:;
            					}
HXLINE(1565)					int _mask;
HXDLIN(1565)					if (hx::IsNull( format )) {
HXLINE(1569)						int rgba2 = mask;
HXDLIN(1569)						int this4 = (int)0;
HXDLIN(1569)						int argb3 = this4;
HXDLIN(1569)						argb3 = ((int)((int)((int)((int)((int)((int)rgba2 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba2,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba2,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1565)						_mask = argb3;
            					}
            					else {
HXLINE(1565)						 ::Dynamic _hx_switch_1 = format;
            						if (  (_hx_switch_1==(int)1) ){
HXLINE(1565)							_mask = mask;
HXDLIN(1565)							goto _hx_goto_25;
            						}
            						if (  (_hx_switch_1==(int)2) ){
HXLINE(1568)							int bgra1 = mask;
HXDLIN(1568)							int this5 = (int)0;
HXDLIN(1568)							int argb4 = this5;
HXDLIN(1568)							argb4 = ((int)((int)((int)((int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE(1565)							_mask = argb4;
HXLINE(1568)							goto _hx_goto_25;
            						}
            						/* default */{
HXLINE(1569)							int rgba3 = mask;
HXDLIN(1569)							int this6 = (int)0;
HXDLIN(1569)							int argb5 = this6;
HXDLIN(1569)							argb5 = ((int)((int)((int)((int)((int)((int)rgba3 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba3,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba3,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba3,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1565)							_mask = argb5;
            						}
            						_hx_goto_25:;
            					}
HXLINE(1573)					sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE(1574)					destPoint->offset(this->offsetX,this->offsetY);
HXLINE(1576)					 ::Dynamic _hx_tmp2 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("threshold",ab,c3,a3,34),hx::paccDynamic));
HXDLIN(1576)					 ::Dynamic _hx_tmp3 = sourceImage->buffer->get_src();
HXDLIN(1576)					 ::Dynamic _hx_tmp4 = sourceRect->_hx___toFlashRectangle();
HXDLIN(1576)					return ( (int)(_hx_tmp2(_hx_tmp3,_hx_tmp4,destPoint->_hx___toFlashPoint(),operation,threshold,_color,_mask,copySource)) );
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE(1582)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC9(Image_obj,threshold,return )

 ::lime::math::Rectangle Image_obj::_hx___clipRect( ::lime::math::Rectangle r){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1616___clipRect)
HXLINE(1618)		if (hx::IsNull( r )) {
HXLINE(1618)			return null();
            		}
HXLINE(1620)		if ((r->x < (int)0)) {
HXLINE(1622)			 ::lime::math::Rectangle r1 = r;
HXDLIN(1622)			r1->width = (r1->width - -(r->x));
HXLINE(1623)			r->x = (int)0;
HXLINE(1625)			if (((r->x + r->width) <= (int)0)) {
HXLINE(1625)				return null();
            			}
            		}
HXLINE(1629)		if ((r->y < (int)0)) {
HXLINE(1631)			 ::lime::math::Rectangle r2 = r;
HXDLIN(1631)			r2->height = (r2->height - -(r->y));
HXLINE(1632)			r->y = (int)0;
HXLINE(1634)			if (((r->y + r->height) <= (int)0)) {
HXLINE(1634)				return null();
            			}
            		}
HXLINE(1638)		if (((r->x + r->width) >= this->width)) {
HXLINE(1640)			 ::lime::math::Rectangle r3 = r;
HXDLIN(1640)			r3->width = (r3->width - ((r->x + r->width) - this->width));
HXLINE(1642)			if ((r->width <= (int)0)) {
HXLINE(1642)				return null();
            			}
            		}
HXLINE(1646)		if (((r->y + r->height) >= this->height)) {
HXLINE(1648)			 ::lime::math::Rectangle r4 = r;
HXDLIN(1648)			r4->height = (r4->height - ((r->y + r->height) - this->height));
HXLINE(1650)			if ((r->height <= (int)0)) {
HXLINE(1650)				return null();
            			}
            		}
HXLINE(1654)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___clipRect,return )

void Image_obj::_hx___fromBase64(::String base64,::String type, ::Dynamic onload){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1692___fromBase64)
HXDLIN(1692)		if (hx::IsNotNull( base64 )) {
HXLINE(1694)			this->_hx___fromBytes(::haxe::crypto::Base64_obj::decode(base64,null()),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,_hx___fromBase64,(void))

bool Image_obj::_hx___fromBytes( ::haxe::io::Bytes bytes, ::Dynamic onload){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1703___fromBytes)
HXLINE(1733)		 ::lime::graphics::ImageBuffer imageBuffer = null();
HXLINE(1736)		 ::Dynamic imageBuffer1 = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN(1736)		 ::haxe::io::Bytes buffer = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(1736)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1736)		if (hx::IsNotNull( buffer )) {
HXLINE(1736)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN(1736)			int in_byteOffset = (int)0;
HXDLIN(1736)			if ((in_byteOffset < (int)0)) {
HXLINE(1736)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(1736)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE(1736)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(1736)			int bufferByteLength = buffer->length;
HXDLIN(1736)			int elementSize = _this->bytesPerElement;
HXDLIN(1736)			int newByteLength = bufferByteLength;
HXDLIN(1736)			{
HXLINE(1736)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(1736)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(1736)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(1736)				if ((newByteLength < (int)0)) {
HXLINE(1736)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(1736)			_this->buffer = buffer;
HXDLIN(1736)			_this->byteOffset = in_byteOffset;
HXDLIN(1736)			_this->byteLength = newByteLength;
HXDLIN(1736)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN(1736)			this1 = _this;
            		}
            		else {
HXLINE(1736)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1736)		imageBuffer = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_image_load_bytes(hx::DynamicPtr(bytes),hx::DynamicPtr( ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,null(),null(),null(),null())))) );
HXLINE(1744)		if (hx::IsNotNull( imageBuffer )) {
HXLINE(1746)			this->_hx___fromImageBuffer(imageBuffer);
HXLINE(1748)			if (hx::IsNotNull( onload )) {
HXLINE(1750)				onload(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE(1754)			return true;
            		}
HXLINE(1764)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,_hx___fromBytes,return )

bool Image_obj::_hx___fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1769___fromFile)
HXLINE(1872)		 ::lime::graphics::ImageBuffer buffer = null();
HXLINE(1877)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1880)			 ::Dynamic buffer1 = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN(1880)			 ::haxe::io::Bytes buffer2 = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(1880)			 ::lime::utils::ArrayBufferView this1;
HXDLIN(1880)			if (hx::IsNotNull( buffer2 )) {
HXLINE(1880)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN(1880)				int in_byteOffset = (int)0;
HXDLIN(1880)				if ((in_byteOffset < (int)0)) {
HXLINE(1880)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(1880)				if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE(1880)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(1880)				int bufferByteLength = buffer2->length;
HXDLIN(1880)				int elementSize = _this->bytesPerElement;
HXDLIN(1880)				int newByteLength = bufferByteLength;
HXDLIN(1880)				{
HXLINE(1880)					newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(1880)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(1880)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN(1880)					if ((newByteLength < (int)0)) {
HXLINE(1880)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN(1880)				_this->buffer = buffer2;
HXDLIN(1880)				_this->byteOffset = in_byteOffset;
HXDLIN(1880)				_this->byteLength = newByteLength;
HXDLIN(1880)				_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN(1880)				this1 = _this;
            			}
            			else {
HXLINE(1880)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN(1880)			buffer = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_image_load_file(hx::DynamicPtr(path),hx::DynamicPtr( ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,null(),null(),null(),null())))) );
            		}
HXLINE(1929)		if (hx::IsNotNull( buffer )) {
HXLINE(1931)			this->_hx___fromImageBuffer(buffer);
HXLINE(1933)			if (hx::IsNotNull( onload )) {
HXLINE(1935)				onload(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE(1939)			return true;
            		}
HXLINE(1949)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,_hx___fromFile,return )

void Image_obj::_hx___fromImageBuffer( ::lime::graphics::ImageBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1954___fromImageBuffer)
HXLINE(1956)		this->buffer = buffer;
HXLINE(1958)		if (hx::IsNotNull( buffer )) {
HXLINE(1960)			if ((this->width == (int)-1)) {
HXLINE(1962)				this->width = buffer->width;
            			}
HXLINE(1966)			if ((this->height == (int)-1)) {
HXLINE(1968)				this->height = buffer->height;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___fromImageBuffer,(void))

 ::lime::utils::ArrayBufferView Image_obj::get_data(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2021_get_data)
HXLINE(2023)		bool _hx_tmp;
HXDLIN(2023)		bool _hx_tmp1;
HXDLIN(2023)		if (hx::IsNull( this->buffer->data )) {
HXLINE(2023)			_hx_tmp1 = (this->buffer->width > (int)0);
            		}
            		else {
HXLINE(2023)			_hx_tmp1 = false;
            		}
HXDLIN(2023)		if (_hx_tmp1) {
HXLINE(2023)			_hx_tmp = (this->buffer->height > (int)0);
            		}
            		else {
HXLINE(2023)			_hx_tmp = false;
            		}
HXLINE(2038)		return this->buffer->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_data,return )

 ::lime::utils::ArrayBufferView Image_obj::set_data( ::lime::utils::ArrayBufferView value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2045_set_data)
HXDLIN(2045)		return (this->buffer->data = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_data,return )

int Image_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2052_get_format)
HXDLIN(2052)		return this->buffer->format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_format,return )

int Image_obj::set_format(int value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2057_set_format)
HXLINE(2059)		if ((this->buffer->format != value)) {
HXLINE(2061)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(2061)			if ((_hx_getEnumValueIndex(_g) == (int)1)) {
HXLINE(2065)				::lime::_internal::graphics::ImageDataUtil_obj::setFormat(hx::ObjectPtr<OBJ_>(this),value);
            			}
            		}
HXLINE(2073)		return (this->buffer->format = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_format,return )

bool Image_obj::get_powerOfTwo(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2080_get_powerOfTwo)
HXDLIN(2080)		bool _hx_tmp;
HXDLIN(2080)		if ((this->buffer->width != (int)0)) {
HXDLIN(2080)			int _hx_tmp1 = this->buffer->width;
HXDLIN(2080)			_hx_tmp = (((int)_hx_tmp1 & (int)(~(this->buffer->width) + (int)1)) == this->buffer->width);
            		}
            		else {
HXDLIN(2080)			_hx_tmp = false;
            		}
HXDLIN(2080)		if (_hx_tmp) {
HXDLIN(2080)			if ((this->buffer->height != (int)0)) {
HXDLIN(2080)				int _hx_tmp2 = this->buffer->height;
HXDLIN(2080)				return (((int)_hx_tmp2 & (int)(~(this->buffer->height) + (int)1)) == this->buffer->height);
            			}
            			else {
HXDLIN(2080)				return false;
            			}
            		}
            		else {
HXDLIN(2080)			return false;
            		}
HXDLIN(2080)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_powerOfTwo,return )

bool Image_obj::set_powerOfTwo(bool value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2085_set_powerOfTwo)
HXLINE(2087)		if ((value != this->get_powerOfTwo())) {
HXLINE(2089)			int newWidth = (int)1;
HXLINE(2090)			int newHeight = (int)1;
HXLINE(2092)			while((newWidth < this->buffer->width)){
HXLINE(2094)				newWidth = ((int)newWidth << (int)(int)1);
            			}
HXLINE(2098)			while((newHeight < this->buffer->height)){
HXLINE(2100)				newHeight = ((int)newHeight << (int)(int)1);
            			}
HXLINE(2104)			bool _hx_tmp;
HXDLIN(2104)			if ((newWidth == this->buffer->width)) {
HXLINE(2104)				_hx_tmp = (newHeight == this->buffer->height);
            			}
            			else {
HXLINE(2104)				_hx_tmp = false;
            			}
HXDLIN(2104)			if (_hx_tmp) {
HXLINE(2106)				return value;
            			}
HXLINE(2109)			{
HXLINE(2109)				 ::lime::graphics::ImageType _g = this->type;
HXDLIN(2109)				switch((int)(_hx_getEnumValueIndex(_g))){
            					case (int)0: {
HXLINE(2116)						::lime::_internal::graphics::ImageDataUtil_obj::resizeBuffer(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            					}
            					break;
            					case (int)1: {
HXLINE(2120)						::lime::_internal::graphics::ImageDataUtil_obj::resizeBuffer(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
HXLINE(2138)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_powerOfTwo,return )

bool Image_obj::get_premultiplied(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2145_get_premultiplied)
HXDLIN(2145)		return this->buffer->premultiplied;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_premultiplied,return )

bool Image_obj::set_premultiplied(bool value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2150_set_premultiplied)
HXLINE(2152)		bool _hx_tmp;
HXDLIN(2152)		if (value) {
HXLINE(2152)			_hx_tmp = !(this->buffer->premultiplied);
            		}
            		else {
HXLINE(2152)			_hx_tmp = false;
            		}
HXDLIN(2152)		if (_hx_tmp) {
HXLINE(2154)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(2154)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: case (int)1: {
HXLINE(2162)					::lime::_internal::graphics::ImageDataUtil_obj::multiplyAlpha(hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				default:{
            				}
            			}
            		}
            		else {
HXLINE(2170)			bool _hx_tmp1;
HXDLIN(2170)			if (!(value)) {
HXLINE(2170)				_hx_tmp1 = this->buffer->premultiplied;
            			}
            			else {
HXLINE(2170)				_hx_tmp1 = false;
            			}
HXDLIN(2170)			if (_hx_tmp1) {
HXLINE(2172)				 ::lime::graphics::ImageType _g1 = this->type;
HXDLIN(2172)				if ((_hx_getEnumValueIndex(_g1) == (int)1)) {
HXLINE(2180)					::lime::_internal::graphics::ImageDataUtil_obj::unmultiplyAlpha(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE(2190)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_premultiplied,return )

 ::lime::math::Rectangle Image_obj::get_rect(){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2197_get_rect)
HXDLIN(2197)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_rect,return )

 ::Dynamic Image_obj::get_src(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2212_get_src)
HXDLIN(2212)		return this->buffer->get_src();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_src,return )

 ::Dynamic Image_obj::set_src( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2219_set_src)
HXDLIN(2219)		return this->buffer->set_src(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_src,return )

bool Image_obj::get_transparent(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2224_get_transparent)
HXLINE(2226)		if (hx::IsNull( this->buffer )) {
HXLINE(2226)			return false;
            		}
HXLINE(2227)		return this->buffer->transparent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_transparent,return )

bool Image_obj::set_transparent(bool value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2232_set_transparent)
HXLINE(2235)		if (hx::IsNull( this->buffer )) {
HXLINE(2235)			return false;
            		}
HXLINE(2236)		return (this->buffer->transparent = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_transparent,return )

::String Image_obj::_hx___base64Chars;

 ::haxe::crypto::BaseCode Image_obj::_hx___base64Encoder;

 ::lime::graphics::Image Image_obj::fromBase64(::String base64,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_677_fromBase64)
HXLINE( 679)		if (hx::IsNull( base64 )) {
HXLINE( 679)			return null();
            		}
HXLINE( 680)		 ::lime::graphics::Image image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE( 681)		image->_hx___fromBase64(base64,type,null());
HXLINE( 682)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,fromBase64,return )

 ::lime::graphics::Image Image_obj::fromBitmapData( ::Dynamic bitmapData){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_696_fromBitmapData)
HXLINE( 699)		if (hx::IsNull( bitmapData )) {
HXLINE( 699)			return null();
            		}
HXLINE( 705)		return ( ( ::lime::graphics::Image)(bitmapData->__Field(HX_("image",5b,1f,69,bd),hx::paccDynamic)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromBitmapData,return )

 ::lime::graphics::Image Image_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_723_fromBytes)
HXLINE( 725)		if (hx::IsNull( bytes )) {
HXLINE( 725)			return null();
            		}
HXLINE( 726)		 ::lime::graphics::Image image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE( 727)		if (image->_hx___fromBytes(bytes,null())) {
HXLINE( 728)			return image;
            		}
            		else {
HXLINE( 730)			return null();
            		}
HXLINE( 727)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromBytes,return )

 ::lime::graphics::Image Image_obj::fromCanvas( ::Dynamic canvas){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_745_fromCanvas)
HXLINE( 748)		if (hx::IsNull( canvas )) {
HXLINE( 748)			return null();
            		}
HXLINE( 749)		 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(), ::Dynamic(canvas->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(canvas->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)),null(),null());
HXLINE( 750)		buffer->set_src(canvas);
HXLINE( 751)		 ::lime::graphics::Image image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,null(),null(),null(),null(),null(),null());
HXLINE( 752)		image->type = ::lime::graphics::ImageType_obj::CANVAS_dyn();
HXLINE( 753)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromCanvas,return )

 ::lime::graphics::Image Image_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_770_fromFile)
HXLINE( 772)		if (hx::IsNull( path )) {
HXLINE( 772)			return null();
            		}
HXLINE( 773)		 ::lime::graphics::Image image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE( 774)		if (image->_hx___fromFile(path,null(),null())) {
HXLINE( 775)			return image;
            		}
            		else {
HXLINE( 777)			return null();
            		}
HXLINE( 774)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromFile,return )

 ::lime::graphics::Image Image_obj::fromImageElement( ::Dynamic image){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_792_fromImageElement)
HXLINE( 795)		if (hx::IsNull( image )) {
HXLINE( 795)			return null();
            		}
HXLINE( 796)		 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(), ::Dynamic(image->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(image->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)),null(),null());
HXLINE( 797)		buffer->set_src(image);
HXLINE( 798)		 ::lime::graphics::Image _image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,null(),null(),null(),null(),null(),null());
HXLINE( 799)		_image->type = ::lime::graphics::ImageType_obj::CANVAS_dyn();
HXLINE( 800)		return _image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromImageElement,return )

 ::lime::app::Future Image_obj::loadFromBase64(::String base64,::String type){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1023_loadFromBase64)
HXLINE(1025)		bool _hx_tmp;
HXDLIN(1025)		if (hx::IsNotNull( base64 )) {
HXLINE(1025)			_hx_tmp = hx::IsNull( type );
            		}
            		else {
HXLINE(1025)			_hx_tmp = true;
            		}
HXDLIN(1025)		if (_hx_tmp) {
HXLINE(1025)			return ::lime::app::Future_obj::withValue(null());
            		}
HXLINE(1033)		if (hx::IsNotNull( base64 )) {
HXLINE(1035)			return ::lime::graphics::Image_obj::loadFromBytes(::haxe::crypto::Base64_obj::decode(base64,null()));
            		}
            		else {
HXLINE(1039)			return ::lime::app::Future_obj::withError(HX_("",00,00,00,00));
            		}
HXLINE(1033)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,loadFromBase64,return )

 ::lime::app::Future Image_obj::loadFromBytes( ::haxe::io::Bytes bytes){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::io::Bytes,bytes) HXARGC(0)
            		 ::lime::graphics::Image _hx_run(){
            			HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1116_loadFromBytes)
HXLINE(1116)			return ::lime::graphics::Image_obj::fromBytes(bytes);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1053_loadFromBytes)
HXLINE(1055)		if (hx::IsNull( bytes )) {
HXLINE(1055)			return ::lime::app::Future_obj::withValue(null());
            		}
HXLINE(1116)		return  ::lime::app::Future_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(bytes)),true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,loadFromBytes,return )

 ::lime::app::Future Image_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1190_loadFromFile)
HXLINE(1190)			if (hx::IsNotNull( image )) {
HXLINE(1192)				return ::lime::app::Future_obj::withValue(image);
            			}
            			else {
HXLINE(1196)				return ::lime::app::Future_obj::withError(HX_("",00,00,00,00));
            			}
HXLINE(1190)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1128_loadFromFile)
HXLINE(1130)		if (hx::IsNull( path )) {
HXLINE(1130)			return ::lime::app::Future_obj::withValue(null());
            		}
HXLINE(1187)		 ::lime::net::_HTTPRequest_lime_graphics_Image request =  ::lime::net::_HTTPRequest_lime_graphics_Image_obj::__alloc( HX_CTX ,null());
HXLINE(1188)		return request->load(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,loadFromFile,return )

::String Image_obj::_hx___base64Encode( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1609___base64Encode)
HXDLIN(1609)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___base64Encode,return )

bool Image_obj::_hx___isGIF( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1977___isGIF)
HXLINE(1979)		bool _hx_tmp;
HXDLIN(1979)		if (hx::IsNotNull( bytes )) {
HXLINE(1979)			_hx_tmp = (bytes->length < (int)6);
            		}
            		else {
HXLINE(1979)			_hx_tmp = true;
            		}
HXDLIN(1979)		if (_hx_tmp) {
HXLINE(1979)			return false;
            		}
HXLINE(1981)		::String header = bytes->getString((int)0,(int)6,null());
HXLINE(1982)		if ((header != HX_("GIF87a",1e,95,06,9a))) {
HXLINE(1982)			return (header == HX_("GIF89a",dc,96,06,9a));
            		}
            		else {
HXLINE(1982)			return true;
            		}
HXDLIN(1982)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isGIF,return )

bool Image_obj::_hx___isJPG( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1987___isJPG)
HXLINE(1989)		bool _hx_tmp;
HXDLIN(1989)		if (hx::IsNotNull( bytes )) {
HXLINE(1989)			_hx_tmp = (bytes->length < (int)4);
            		}
            		else {
HXLINE(1989)			_hx_tmp = true;
            		}
HXDLIN(1989)		if (_hx_tmp) {
HXLINE(1989)			return false;
            		}
HXLINE(1991)		bool _hx_tmp1;
HXDLIN(1991)		bool _hx_tmp2;
HXDLIN(1991)		if ((bytes->b->__get((int)0) == (int)255)) {
HXLINE(1991)			_hx_tmp2 = (bytes->b->__get((int)1) == (int)216);
            		}
            		else {
HXLINE(1991)			_hx_tmp2 = false;
            		}
HXDLIN(1991)		if (_hx_tmp2) {
HXLINE(1991)			_hx_tmp1 = (bytes->b->__get((bytes->length - (int)2)) == (int)255);
            		}
            		else {
HXLINE(1991)			_hx_tmp1 = false;
            		}
HXDLIN(1991)		if (_hx_tmp1) {
HXLINE(1991)			return (bytes->b->__get((bytes->length - (int)1)) == (int)217);
            		}
            		else {
HXLINE(1991)			return false;
            		}
HXDLIN(1991)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isJPG,return )

bool Image_obj::_hx___isPNG( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1996___isPNG)
HXLINE(1998)		bool _hx_tmp;
HXDLIN(1998)		if (hx::IsNotNull( bytes )) {
HXLINE(1998)			_hx_tmp = (bytes->length < (int)8);
            		}
            		else {
HXLINE(1998)			_hx_tmp = true;
            		}
HXDLIN(1998)		if (_hx_tmp) {
HXLINE(1998)			return false;
            		}
HXLINE(2000)		bool _hx_tmp1;
HXDLIN(2000)		bool _hx_tmp2;
HXDLIN(2000)		bool _hx_tmp3;
HXDLIN(2000)		bool _hx_tmp4;
HXDLIN(2000)		bool _hx_tmp5;
HXDLIN(2000)		bool _hx_tmp6;
HXDLIN(2000)		if ((bytes->b->__get((int)0) == (int)137)) {
HXLINE(2000)			_hx_tmp6 = (bytes->b->__get((int)1) == (int)80);
            		}
            		else {
HXLINE(2000)			_hx_tmp6 = false;
            		}
HXDLIN(2000)		if (_hx_tmp6) {
HXLINE(2000)			_hx_tmp5 = (bytes->b->__get((int)2) == (int)78);
            		}
            		else {
HXLINE(2000)			_hx_tmp5 = false;
            		}
HXDLIN(2000)		if (_hx_tmp5) {
HXLINE(2000)			_hx_tmp4 = (bytes->b->__get((int)3) == (int)71);
            		}
            		else {
HXLINE(2000)			_hx_tmp4 = false;
            		}
HXDLIN(2000)		if (_hx_tmp4) {
HXLINE(2000)			_hx_tmp3 = (bytes->b->__get((int)4) == (int)13);
            		}
            		else {
HXLINE(2000)			_hx_tmp3 = false;
            		}
HXDLIN(2000)		if (_hx_tmp3) {
HXLINE(2000)			_hx_tmp2 = (bytes->b->__get((int)5) == (int)10);
            		}
            		else {
HXLINE(2000)			_hx_tmp2 = false;
            		}
HXDLIN(2000)		if (_hx_tmp2) {
HXLINE(2000)			_hx_tmp1 = (bytes->b->__get((int)6) == (int)26);
            		}
            		else {
HXLINE(2000)			_hx_tmp1 = false;
            		}
HXDLIN(2000)		if (_hx_tmp1) {
HXLINE(2000)			return (bytes->b->__get((int)7) == (int)10);
            		}
            		else {
HXLINE(2000)			return false;
            		}
HXDLIN(2000)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isPNG,return )

bool Image_obj::_hx___isWebP( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_2005___isWebP)
HXLINE(2007)		bool _hx_tmp;
HXDLIN(2007)		if (hx::IsNotNull( bytes )) {
HXLINE(2007)			_hx_tmp = (bytes->length < (int)16);
            		}
            		else {
HXLINE(2007)			_hx_tmp = true;
            		}
HXDLIN(2007)		if (_hx_tmp) {
HXLINE(2007)			return false;
            		}
HXLINE(2009)		if ((bytes->getString((int)0,(int)4,null()) == HX_("RIFF",b7,20,6b,36))) {
HXLINE(2009)			return (bytes->getString((int)8,(int)4,null()) == HX_("WEBP",5c,25,b6,39));
            		}
            		else {
HXLINE(2009)			return false;
            		}
HXDLIN(2009)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isWebP,return )


hx::ObjectPtr< Image_obj > Image_obj::__new( ::lime::graphics::ImageBuffer buffer,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic color, ::lime::graphics::ImageType type) {
	hx::ObjectPtr< Image_obj > __this = new Image_obj();
	__this->__construct(buffer,__o_offsetX,__o_offsetY,__o_width,__o_height,color,type);
	return __this;
}

hx::ObjectPtr< Image_obj > Image_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::graphics::ImageBuffer buffer,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic color, ::lime::graphics::ImageType type) {
	Image_obj *__this = (Image_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Image_obj), true, "lime.graphics.Image"));
	*(void **)__this = Image_obj::_hx_vtable;
	__this->__construct(buffer,__o_offsetX,__o_offsetY,__o_width,__o_height,color,type);
	return __this;
}

Image_obj::Image_obj()
{
}

void Image_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Image);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(version,"version");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_END_CLASS();
}

void Image_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(version,"version");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
}

hx::Val Image_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_src() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_data() ); }
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( inCallProp == hx::paccAlways ? get_rect() : rect ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer ); }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_format() ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { return hx::Val( offsetX ); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return hx::Val( offsetY ); }
		if (HX_FIELD_EQ(inName,"version") ) { return hx::Val( version ); }
		if (HX_FIELD_EQ(inName,"get_src") ) { return hx::Val( get_src_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_src") ) { return hx::Val( set_src_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_data") ) { return hx::Val( get_data_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_data") ) { return hx::Val( set_data_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rect") ) { return hx::Val( get_rect_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_powerOfTwo() ); }
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"__clipRect") ) { return hx::Val( _hx___clipRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_format") ) { return hx::Val( set_format_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transparent() ); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premultiplied") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_premultiplied() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_powerOfTwo") ) { return hx::Val( get_powerOfTwo_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_powerOfTwo") ) { return hx::Val( set_powerOfTwo_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_transparent") ) { return hx::Val( get_transparent_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transparent") ) { return hx::Val( set_transparent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__fromImageBuffer") ) { return hx::Val( _hx___fromImageBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_premultiplied") ) { return hx::Val( get_premultiplied_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_premultiplied") ) { return hx::Val( set_premultiplied_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Image_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__isGIF") ) { outValue = _hx___isGIF_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isJPG") ) { outValue = _hx___isJPG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isPNG") ) { outValue = _hx___isPNG_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isWebP") ) { outValue = _hx___isWebP_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromCanvas") ) { outValue = fromCanvas_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__base64Chars") ) { outValue = ( _hx___base64Chars ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fromBitmapData") ) { outValue = fromBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBase64") ) { outValue = loadFromBase64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__base64Encode") ) { outValue = _hx___base64Encode_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__base64Encoder") ) { outValue = ( _hx___base64Encoder ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromImageElement") ) { outValue = fromImageElement_dyn(); return true; }
	}
	return false;
}

hx::Val Image_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_src(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_data(inValue.Cast<  ::lime::utils::ArrayBufferView >()) ); }
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::lime::math::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::lime::graphics::ImageType >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::lime::graphics::ImageBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_format(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"version") ) { version=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_powerOfTwo(inValue.Cast< bool >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transparent(inValue.Cast< bool >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premultiplied") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_premultiplied(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Image_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"__base64Chars") ) { _hx___base64Chars=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__base64Encoder") ) { _hx___base64Encoder=ioValue.Cast<  ::haxe::crypto::BaseCode >(); return true; }
	}
	return false;
}

void Image_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("powerOfTwo","\x70","\xbe","\xae","\xea"));
	outFields->push(HX_HCSTRING("premultiplied","\x56","\xf1","\x4e","\xa4"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Image_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::ImageBuffer*/ ,(int)offsetof(Image_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsBool,(int)offsetof(Image_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsInt,(int)offsetof(Image_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(Image_obj,offsetX),HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7")},
	{hx::fsInt,(int)offsetof(Image_obj,offsetY),HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7")},
	{hx::fsObject /*::lime::math::Rectangle*/ ,(int)offsetof(Image_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::lime::graphics::ImageType*/ ,(int)offsetof(Image_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(Image_obj,version),HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c")},
	{hx::fsInt,(int)offsetof(Image_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Image_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Image_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Image_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Image_obj::_hx___base64Chars,HX_HCSTRING("__base64Chars","\xae","\xc9","\x24","\x36")},
	{hx::fsObject /*::haxe::crypto::BaseCode*/ ,(void *) &Image_obj::_hx___base64Encoder,HX_HCSTRING("__base64Encoder","\xad","\xa4","\x42","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Image_obj_sMemberFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"),
	HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("__clipRect","\x34","\x03","\xa3","\xfb"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImageBuffer","\x51","\x6e","\xca","\xca"),
	HX_HCSTRING("get_data","\xb3","\x11","\x1e","\xc2"),
	HX_HCSTRING("set_data","\x27","\x6b","\x7b","\x70"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("set_format","\x74","\x9d","\x93","\xf1"),
	HX_HCSTRING("get_powerOfTwo","\xb9","\x46","\xa4","\x60"),
	HX_HCSTRING("set_powerOfTwo","\x2d","\x2f","\xc4","\x80"),
	HX_HCSTRING("get_premultiplied","\xad","\xfc","\xbe","\xaa"),
	HX_HCSTRING("set_premultiplied","\xb9","\xd4","\x2c","\xce"),
	HX_HCSTRING("get_rect","\xad","\x08","\x62","\xcb"),
	HX_HCSTRING("get_src","\x7b","\x6f","\xcc","\x26"),
	HX_HCSTRING("set_src","\x87","\x00","\xce","\x19"),
	HX_HCSTRING("get_transparent","\xe9","\xe2","\x9b","\xe3"),
	HX_HCSTRING("set_transparent","\xf5","\x5f","\x67","\xdf"),
	::String(null()) };

static void Image_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Image_obj::_hx___base64Chars,"__base64Chars");
	HX_MARK_MEMBER_NAME(Image_obj::_hx___base64Encoder,"__base64Encoder");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Image_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Image_obj::_hx___base64Chars,"__base64Chars");
	HX_VISIT_MEMBER_NAME(Image_obj::_hx___base64Encoder,"__base64Encoder");
};

#endif

hx::Class Image_obj::__mClass;

static ::String Image_obj_sStaticFields[] = {
	HX_HCSTRING("__base64Chars","\xae","\xc9","\x24","\x36"),
	HX_HCSTRING("__base64Encoder","\xad","\xa4","\x42","\x7e"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBitmapData","\xc3","\x07","\xed","\x2b"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromCanvas","\xe2","\x59","\x86","\xfb"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImageElement","\x2b","\x91","\x89","\x8f"),
	HX_HCSTRING("loadFromBase64","\x5f","\x0c","\x1d","\x2f"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	HX_HCSTRING("__base64Encode","\x25","\xfc","\x79","\x6c"),
	HX_HCSTRING("__isGIF","\x1a","\xeb","\xaa","\x2b"),
	HX_HCSTRING("__isJPG","\xf7","\x37","\xad","\x2b"),
	HX_HCSTRING("__isPNG","\xbf","\xc3","\xb1","\x2b"),
	HX_HCSTRING("__isWebP","\x66","\x8d","\x8b","\x14"),
	::String(null())
};

void Image_obj::__register()
{
	hx::Object *dummy = new Image_obj;
	Image_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.Image","\x91","\x28","\xc1","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Image_obj::__GetStatic;
	__mClass->mSetStaticField = &Image_obj::__SetStatic;
	__mClass->mMarkFunc = Image_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Image_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Image_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Image_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Image_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Image_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Image_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Image_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_101_boot)
HXDLIN( 101)		_hx___base64Chars = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",03,41,03,7f);
            	}
}

} // end namespace lime
} // end namespace graphics
