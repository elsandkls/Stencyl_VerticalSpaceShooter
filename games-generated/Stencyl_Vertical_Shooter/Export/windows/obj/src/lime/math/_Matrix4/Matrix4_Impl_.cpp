// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_32__new,"lime.math._Matrix4.Matrix4_Impl_","_new",0x84b003e9,"lime.math._Matrix4.Matrix4_Impl_._new","lime/math/Matrix4.hx",32,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_51_append,"lime.math._Matrix4.Matrix4_Impl_","append",0x0e638262,"lime.math._Matrix4.Matrix4_Impl_.append","lime/math/Matrix4.hx",51,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_91_appendRotation,"lime.math._Matrix4.Matrix4_Impl_","appendRotation",0xe357adc0,"lime.math._Matrix4.Matrix4_Impl_.appendRotation","lime/math/Matrix4.hx",91,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_115_appendScale,"lime.math._Matrix4.Matrix4_Impl_","appendScale",0x8a9ad8c8,"lime.math._Matrix4.Matrix4_Impl_.appendScale","lime/math/Matrix4.hx",115,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_126_appendTranslation,"lime.math._Matrix4.Matrix4_Impl_","appendTranslation",0xe6447daf,"lime.math._Matrix4.Matrix4_Impl_.appendTranslation","lime/math/Matrix4.hx",126,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_141_clone,"lime.math._Matrix4.Matrix4_Impl_","clone",0xe1a2dbd5,"lime.math._Matrix4.Matrix4_Impl_.clone","lime/math/Matrix4.hx",141,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_153_copyColumnFrom,"lime.math._Matrix4.Matrix4_Impl_","copyColumnFrom",0x5224fffd,"lime.math._Matrix4.Matrix4_Impl_.copyColumnFrom","lime/math/Matrix4.hx",153,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_199_copyColumnTo,"lime.math._Matrix4.Matrix4_Impl_","copyColumnTo",0xcc64e54e,"lime.math._Matrix4.Matrix4_Impl_.copyColumnTo","lime/math/Matrix4.hx",199,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_244_copyFrom,"lime.math._Matrix4.Matrix4_Impl_","copyFrom",0xc27fde47,"lime.math._Matrix4.Matrix4_Impl_.copyFrom","lime/math/Matrix4.hx",244,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_256_copyRowFrom,"lime.math._Matrix4.Matrix4_Impl_","copyRowFrom",0xc4e0b7e7,"lime.math._Matrix4.Matrix4_Impl_.copyRowFrom","lime/math/Matrix4.hx",256,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_302_copyRowTo,"lime.math._Matrix4.Matrix4_Impl_","copyRowTo",0x543beeb8,"lime.math._Matrix4.Matrix4_Impl_.copyRowTo","lime/math/Matrix4.hx",302,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_350_create2D,"lime.math._Matrix4.Matrix4_Impl_","create2D",0x26131c56,"lime.math._Matrix4.Matrix4_Impl_.create2D","lime/math/Matrix4.hx",350,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_384_createOrtho,"lime.math._Matrix4.Matrix4_Impl_","createOrtho",0x33fdc114,"lime.math._Matrix4.Matrix4_Impl_.createOrtho","lime/math/Matrix4.hx",384,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_518_deltaTransformVector,"lime.math._Matrix4.Matrix4_Impl_","deltaTransformVector",0x66f080bf,"lime.math._Matrix4.Matrix4_Impl_.deltaTransformVector","lime/math/Matrix4.hx",518,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_530_fromMatrix3,"lime.math._Matrix4.Matrix4_Impl_","fromMatrix3",0x00fd1900,"lime.math._Matrix4.Matrix4_Impl_.fromMatrix3","lime/math/Matrix4.hx",530,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_542_identity,"lime.math._Matrix4.Matrix4_Impl_","identity",0xb34e17c6,"lime.math._Matrix4.Matrix4_Impl_.identity","lime/math/Matrix4.hx",542,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_572_interpolate,"lime.math._Matrix4.Matrix4_Impl_","interpolate",0xf4884739,"lime.math._Matrix4.Matrix4_Impl_.interpolate","lime/math/Matrix4.hx",572,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_594_interpolateTo,"lime.math._Matrix4.Matrix4_Impl_","interpolateTo",0x5c939114,"lime.math._Matrix4.Matrix4_Impl_.interpolateTo","lime/math/Matrix4.hx",594,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_607_invert,"lime.math._Matrix4.Matrix4_Impl_","invert",0x1e68879e,"lime.math._Matrix4.Matrix4_Impl_.invert","lime/math/Matrix4.hx",607,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_651_pointAt,"lime.math._Matrix4.Matrix4_Impl_","pointAt",0x903e77db,"lime.math._Matrix4.Matrix4_Impl_.pointAt","lime/math/Matrix4.hx",651,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_724_prepend,"lime.math._Matrix4.Matrix4_Impl_","prepend",0x76fd6d86,"lime.math._Matrix4.Matrix4_Impl_.prepend","lime/math/Matrix4.hx",724,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_764_prependRotation,"lime.math._Matrix4.Matrix4_Impl_","prependRotation",0x52475ce4,"lime.math._Matrix4.Matrix4_Impl_.prependRotation","lime/math/Matrix4.hx",764,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_788_prependScale,"lime.math._Matrix4.Matrix4_Impl_","prependScale",0x9a060b24,"lime.math._Matrix4.Matrix4_Impl_.prependScale","lime/math/Matrix4.hx",788,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_799_prependTranslation,"lime.math._Matrix4.Matrix4_Impl_","prependTranslation",0xfad7dd0b,"lime.math._Matrix4.Matrix4_Impl_.prependTranslation","lime/math/Matrix4.hx",799,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_897_transformVector,"lime.math._Matrix4.Matrix4_Impl_","transformVector",0x3cbf39c7,"lime.math._Matrix4.Matrix4_Impl_.transformVector","lime/math/Matrix4.hx",897,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_915_transformVectors,"lime.math._Matrix4.Matrix4_Impl_","transformVectors",0xea9354cc,"lime.math._Matrix4.Matrix4_Impl_.transformVectors","lime/math/Matrix4.hx",915,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_940_transpose,"lime.math._Matrix4.Matrix4_Impl_","transpose",0x2d08b4f1,"lime.math._Matrix4.Matrix4_Impl_.transpose","lime/math/Matrix4.hx",940,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_952___getAxisRotation,"lime.math._Matrix4.Matrix4_Impl_","__getAxisRotation",0x8b4b420d,"lime.math._Matrix4.Matrix4_Impl_.__getAxisRotation","lime/math/Matrix4.hx",952,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_984___swap,"lime.math._Matrix4.Matrix4_Impl_","__swap",0x79e62e3b,"lime.math._Matrix4.Matrix4_Impl_.__swap","lime/math/Matrix4.hx",984,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_1002_get_determinant,"lime.math._Matrix4.Matrix4_Impl_","get_determinant",0x5d0323a4,"lime.math._Matrix4.Matrix4_Impl_.get_determinant","lime/math/Matrix4.hx",1002,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_1014_get_position,"lime.math._Matrix4.Matrix4_Impl_","get_position",0x55830b3a,"lime.math._Matrix4.Matrix4_Impl_.get_position","lime/math/Matrix4.hx",1014,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_1019_set_position,"lime.math._Matrix4.Matrix4_Impl_","set_position",0x6a7c2eae,"lime.math._Matrix4.Matrix4_Impl_.set_position","lime/math/Matrix4.hx",1019,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_1031_get,"lime.math._Matrix4.Matrix4_Impl_","get",0x10b0bb0e,"lime.math._Matrix4.Matrix4_Impl_.get","lime/math/Matrix4.hx",1031,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_1036_set,"lime.math._Matrix4.Matrix4_Impl_","set",0x10b9d61a,"lime.math._Matrix4.Matrix4_Impl_.set","lime/math/Matrix4.hx",1036,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_15_boot,"lime.math._Matrix4.Matrix4_Impl_","boot",0x86ac72ba,"lime.math._Matrix4.Matrix4_Impl_.boot","lime/math/Matrix4.hx",15,0xeb65dbd8)
static const Float _hx_array_data_cbf9fee6_38[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
namespace lime{
namespace math{
namespace _Matrix4{

void Matrix4_Impl__obj::__construct() { }

Dynamic Matrix4_Impl__obj::__CreateEmpty() { return new Matrix4_Impl__obj; }

void *Matrix4_Impl__obj::_hx_vtable = 0;

Dynamic Matrix4_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix4_Impl__obj > _hx_result = new Matrix4_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Matrix4_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x71ea7962;
}

::Array< Float > Matrix4_Impl__obj::_hx___identity;

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::_new( ::lime::utils::ArrayBufferView data){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_32__new)
HXDLIN(  32)		 ::lime::utils::ArrayBufferView this1;
HXLINE(  34)		bool _hx_tmp;
HXDLIN(  34)		if (hx::IsNotNull( data )) {
HXLINE(  34)			_hx_tmp = (data->length == (int)16);
            		}
            		else {
HXLINE(  34)			_hx_tmp = false;
            		}
HXDLIN(  34)		if (_hx_tmp) {
HXLINE(  36)			this1 = data;
            		}
            		else {
HXLINE(  40)			::cpp::VirtualArray array = ::lime::math::_Matrix4::Matrix4_Impl__obj::_hx___identity;
HXDLIN(  40)			 ::lime::utils::ArrayBufferView this2;
HXDLIN(  40)			if (hx::IsNotNull( array )) {
HXLINE(  40)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN(  40)				_this->byteOffset = (int)0;
HXDLIN(  40)				_this->length = array->get_length();
HXDLIN(  40)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  40)				 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  40)				_this->buffer = this3;
HXDLIN(  40)				_this->copyFromArray(array,null());
HXDLIN(  40)				this2 = _this;
            			}
            			else {
HXLINE(  40)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN(  40)			this1 = this2;
            		}
HXLINE(  32)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,_new,return )

void Matrix4_Impl__obj::append( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView lhs){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_51_append)
HXLINE(  53)		Float m111 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  53)		Float m121 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN(  53)		Float m131 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN(  53)		Float m141 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN(  53)		Float m112 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN(  53)		Float m122 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXDLIN(  53)		Float m132 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN(  53)		Float m142 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN(  53)		Float m113 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN(  53)		Float m123 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN(  53)		Float m133 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN(  53)		Float m143 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN(  53)		Float m114 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN(  53)		Float m124 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN(  53)		Float m134 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN(  53)		Float m144 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
HXDLIN(  53)		Float m211 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)0);
HXDLIN(  53)		Float m221 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)4);
HXDLIN(  53)		Float m231 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)8);
HXDLIN(  53)		Float m241 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)12);
HXDLIN(  53)		Float m212 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)1);
HXDLIN(  53)		Float m222 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)5);
HXDLIN(  53)		Float m232 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)9);
HXDLIN(  53)		Float m242 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)13);
HXDLIN(  53)		Float m213 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)2);
HXDLIN(  53)		Float m223 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)6);
HXDLIN(  53)		Float m233 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)10);
HXDLIN(  53)		Float m243 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)14);
HXDLIN(  53)		Float m214 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)3);
HXDLIN(  53)		Float m224 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)7);
HXDLIN(  53)		Float m234 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)11);
HXDLIN(  53)		Float m244 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)15);
HXLINE(  62)		{
HXLINE(  62)			Float val = ((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241));
HXDLIN(  62)			::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            		}
HXLINE(  63)		{
HXLINE(  63)			Float val1 = ((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242));
HXDLIN(  63)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val1);
            		}
HXLINE(  64)		{
HXLINE(  64)			Float val2 = ((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243));
HXDLIN(  64)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val2);
            		}
HXLINE(  65)		{
HXLINE(  65)			Float val3 = ((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244));
HXDLIN(  65)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val3);
            		}
HXLINE(  67)		{
HXLINE(  67)			Float val4 = ((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241));
HXDLIN(  67)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val4);
            		}
HXLINE(  68)		{
HXLINE(  68)			Float val5 = ((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242));
HXDLIN(  68)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            		}
HXLINE(  69)		{
HXLINE(  69)			Float val6 = ((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243));
HXDLIN(  69)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val6);
            		}
HXLINE(  70)		{
HXLINE(  70)			Float val7 = ((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244));
HXDLIN(  70)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val7);
            		}
HXLINE(  72)		{
HXLINE(  72)			Float val8 = ((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241));
HXDLIN(  72)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val8);
            		}
HXLINE(  73)		{
HXLINE(  73)			Float val9 = ((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242));
HXDLIN(  73)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val9);
            		}
HXLINE(  74)		{
HXLINE(  74)			Float val10 = ((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243));
HXDLIN(  74)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            		}
HXLINE(  75)		{
HXLINE(  75)			Float val11 = ((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244));
HXDLIN(  75)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            		}
HXLINE(  77)		{
HXLINE(  77)			Float val12 = ((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241));
HXDLIN(  77)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val12);
            		}
HXLINE(  78)		{
HXLINE(  78)			Float val13 = ((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242));
HXDLIN(  78)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val13);
            		}
HXLINE(  79)		{
HXLINE(  79)			Float val14 = ((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243));
HXDLIN(  79)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val14);
            		}
HXLINE(  80)		{
HXLINE(  80)			Float val15 = ((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244));
HXDLIN(  80)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,append,(void))

void Matrix4_Impl__obj::appendRotation( ::lime::utils::ArrayBufferView this1,Float degrees, ::lime::math::Vector4 axis, ::lime::math::Vector4 pivotPoint){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_91_appendRotation)
HXLINE(  93)		 ::lime::utils::ArrayBufferView m = ::lime::math::_Matrix4::Matrix4_Impl__obj::_hx___getAxisRotation(this1,axis->x,axis->y,axis->z,degrees);
HXLINE(  95)		if (hx::IsNotNull( pivotPoint )) {
HXLINE(  97)			 ::lime::math::Vector4 p = pivotPoint;
HXLINE(  98)			::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(m,p->x,p->y,p->z);
            		}
HXLINE( 102)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendRotation,(void))

void Matrix4_Impl__obj::appendScale( ::lime::utils::ArrayBufferView this1,Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_115_appendScale)
HXDLIN( 115)		::cpp::VirtualArray array = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 115)		 ::lime::utils::ArrayBufferView this2;
HXDLIN( 115)		if (hx::IsNotNull( array )) {
HXDLIN( 115)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 115)			_this->byteOffset = (int)0;
HXDLIN( 115)			_this->length = array->get_length();
HXDLIN( 115)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 115)			 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 115)			_this->buffer = this3;
HXDLIN( 115)			_this->copyFromArray(array,null());
HXDLIN( 115)			this2 = _this;
            		}
            		else {
HXDLIN( 115)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 115)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this1,::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendScale,(void))

void Matrix4_Impl__obj::appendTranslation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_126_appendTranslation)
HXLINE( 128)		{
HXLINE( 128)			Float val = (::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48)) + x);
HXDLIN( 128)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val);
            		}
HXLINE( 129)		{
HXLINE( 129)			Float val1 = (::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)) + y);
HXDLIN( 129)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val1);
            		}
HXLINE( 130)		{
HXLINE( 130)			Float val2 = (::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)) + z);
HXDLIN( 130)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val2);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendTranslation,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::clone( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_141_clone)
HXDLIN( 141)		 ::lime::utils::ArrayBufferView this2;
HXDLIN( 141)		if (hx::IsNotNull( this1 )) {
HXDLIN( 141)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 141)			 ::haxe::io::Bytes srcData = this1->buffer;
HXDLIN( 141)			int srcLength = this1->length;
HXDLIN( 141)			int srcByteOffset = this1->byteOffset;
HXDLIN( 141)			int srcElementSize = this1->bytesPerElement;
HXDLIN( 141)			int elementSize = _this->bytesPerElement;
HXDLIN( 141)			if ((this1->type == _this->type)) {
HXDLIN( 141)				int srcLength1 = srcData->length;
HXDLIN( 141)				int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 141)				 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 141)				_this->buffer = this3;
HXDLIN( 141)				_this->buffer->blit((int)0,srcData,srcByteOffset,cloneLength);
            			}
            			else {
HXDLIN( 141)				HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            			}
HXDLIN( 141)			_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 141)			_this->byteOffset = (int)0;
HXDLIN( 141)			_this->length = srcLength;
HXDLIN( 141)			this2 = _this;
            		}
            		else {
HXDLIN( 141)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 141)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,clone,return )

void Matrix4_Impl__obj::copyColumnFrom( ::lime::utils::ArrayBufferView this1,int column, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_153_copyColumnFrom)
HXDLIN( 153)		switch((int)(column)){
            			case (int)0: {
HXLINE( 157)				{
HXLINE( 157)					Float val = vector->x;
HXDLIN( 157)					::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            				}
HXLINE( 158)				{
HXLINE( 158)					Float val1 = vector->y;
HXDLIN( 158)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val1);
            				}
HXLINE( 159)				{
HXLINE( 159)					Float val2 = vector->z;
HXDLIN( 159)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val2);
            				}
HXLINE( 160)				{
HXLINE( 160)					Float val3 = vector->w;
HXDLIN( 160)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val3);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 164)				{
HXLINE( 164)					Float val4 = vector->x;
HXDLIN( 164)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val4);
            				}
HXLINE( 165)				{
HXLINE( 165)					Float val5 = vector->y;
HXDLIN( 165)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            				}
HXLINE( 166)				{
HXLINE( 166)					Float val6 = vector->z;
HXDLIN( 166)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val6);
            				}
HXLINE( 167)				{
HXLINE( 167)					Float val7 = vector->w;
HXDLIN( 167)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val7);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 171)				{
HXLINE( 171)					Float val8 = vector->x;
HXDLIN( 171)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val8);
            				}
HXLINE( 172)				{
HXLINE( 172)					Float val9 = vector->y;
HXDLIN( 172)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val9);
            				}
HXLINE( 173)				{
HXLINE( 173)					Float val10 = vector->z;
HXDLIN( 173)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            				}
HXLINE( 174)				{
HXLINE( 174)					Float val11 = vector->w;
HXDLIN( 174)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 178)				{
HXLINE( 178)					Float val12 = vector->x;
HXDLIN( 178)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val12);
            				}
HXLINE( 179)				{
HXLINE( 179)					Float val13 = vector->y;
HXDLIN( 179)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val13);
            				}
HXLINE( 180)				{
HXLINE( 180)					Float val14 = vector->z;
HXDLIN( 180)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val14);
            				}
HXLINE( 181)				{
HXLINE( 181)					Float val15 = vector->w;
HXDLIN( 181)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            				}
            			}
            			break;
            			default:{
HXLINE( 185)				::lime::utils::Log_obj::error(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)),hx::SourceInfo(HX_("Matrix4.hx",eb,49,5a,69),185,HX_("lime.math._Matrix4.Matrix4_Impl_",e6,fe,f9,cb),HX_("copyColumnFrom",75,97,b5,3a)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyColumnFrom,(void))

void Matrix4_Impl__obj::copyColumnTo( ::lime::utils::ArrayBufferView this1,int column, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_199_copyColumnTo)
HXDLIN( 199)		switch((int)(column)){
            			case (int)0: {
HXLINE( 203)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXLINE( 204)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXLINE( 205)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXLINE( 206)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
            			}
            			break;
            			case (int)1: {
HXLINE( 210)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXLINE( 211)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXLINE( 212)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXLINE( 213)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
            			}
            			break;
            			case (int)2: {
HXLINE( 217)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXLINE( 218)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXLINE( 219)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 220)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
            			}
            			break;
            			case (int)3: {
HXLINE( 224)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXLINE( 225)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXLINE( 226)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 227)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
            			}
            			break;
            			default:{
HXLINE( 231)				::lime::utils::Log_obj::error(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)),hx::SourceInfo(HX_("Matrix4.hx",eb,49,5a,69),231,HX_("lime.math._Matrix4.Matrix4_Impl_",e6,fe,f9,cb),HX_("copyColumnTo",c6,2e,f6,f6)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyColumnTo,(void))

void Matrix4_Impl__obj::copyFrom( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView other){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_244_copyFrom)
HXDLIN( 244)		int offset = (int)0;
HXDLIN( 244)		if (hx::IsNotNull( other )) {
HXDLIN( 244)			 ::haxe::io::Bytes this2 = this1->buffer;
HXDLIN( 244)			this2->blit((offset * this1->bytesPerElement),other->buffer,other->byteOffset,other->byteLength);
            		}
            		else {
HXDLIN( 244)			HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,copyFrom,(void))

void Matrix4_Impl__obj::copyRowFrom( ::lime::utils::ArrayBufferView this1,int row, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_256_copyRowFrom)
HXDLIN( 256)		switch((int)(row)){
            			case (int)0: {
HXLINE( 260)				{
HXLINE( 260)					Float val = vector->x;
HXDLIN( 260)					::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            				}
HXLINE( 261)				{
HXLINE( 261)					Float val1 = vector->y;
HXDLIN( 261)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val1);
            				}
HXLINE( 262)				{
HXLINE( 262)					Float val2 = vector->z;
HXDLIN( 262)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val2);
            				}
HXLINE( 263)				{
HXLINE( 263)					Float val3 = vector->w;
HXDLIN( 263)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val3);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 267)				{
HXLINE( 267)					Float val4 = vector->x;
HXDLIN( 267)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val4);
            				}
HXLINE( 268)				{
HXLINE( 268)					Float val5 = vector->y;
HXDLIN( 268)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            				}
HXLINE( 269)				{
HXLINE( 269)					Float val6 = vector->z;
HXDLIN( 269)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val6);
            				}
HXLINE( 270)				{
HXLINE( 270)					Float val7 = vector->w;
HXDLIN( 270)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val7);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 274)				{
HXLINE( 274)					Float val8 = vector->x;
HXDLIN( 274)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val8);
            				}
HXLINE( 275)				{
HXLINE( 275)					Float val9 = vector->y;
HXDLIN( 275)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val9);
            				}
HXLINE( 276)				{
HXLINE( 276)					Float val10 = vector->z;
HXDLIN( 276)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            				}
HXLINE( 277)				{
HXLINE( 277)					Float val11 = vector->w;
HXDLIN( 277)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val11);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 281)				{
HXLINE( 281)					Float val12 = vector->x;
HXDLIN( 281)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val12);
            				}
HXLINE( 282)				{
HXLINE( 282)					Float val13 = vector->y;
HXDLIN( 282)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val13);
            				}
HXLINE( 283)				{
HXLINE( 283)					Float val14 = vector->z;
HXDLIN( 283)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val14);
            				}
HXLINE( 284)				{
HXLINE( 284)					Float val15 = vector->w;
HXDLIN( 284)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            				}
            			}
            			break;
            			default:{
HXLINE( 288)				::lime::utils::Log_obj::error(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)),hx::SourceInfo(HX_("Matrix4.hx",eb,49,5a,69),288,HX_("lime.math._Matrix4.Matrix4_Impl_",e6,fe,f9,cb),HX_("copyRowFrom",6f,45,8b,ef)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyRowFrom,(void))

void Matrix4_Impl__obj::copyRowTo( ::lime::utils::ArrayBufferView this1,int row, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_302_copyRowTo)
HXDLIN( 302)		switch((int)(row)){
            			case (int)0: {
HXLINE( 306)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXLINE( 307)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXLINE( 308)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXLINE( 309)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
            			}
            			break;
            			case (int)1: {
HXLINE( 313)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXLINE( 314)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXLINE( 315)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXLINE( 316)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
            			}
            			break;
            			case (int)2: {
HXLINE( 320)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXLINE( 321)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXLINE( 322)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 323)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
            			}
            			break;
            			case (int)3: {
HXLINE( 327)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXLINE( 328)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXLINE( 329)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXLINE( 330)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
            			}
            			break;
            			default:{
HXLINE( 334)				::lime::utils::Log_obj::error(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)),hx::SourceInfo(HX_("Matrix4.hx",eb,49,5a,69),334,HX_("lime.math._Matrix4.Matrix4_Impl_",e6,fe,f9,cb),HX_("copyRowTo",40,8a,62,73)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyRowTo,(void))

void Matrix4_Impl__obj::create2D( ::lime::utils::ArrayBufferView this1,Float a,Float b,Float c,Float d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_350_create2D)
HXLINE( 352)		::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,a);
HXLINE( 353)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),b);
HXLINE( 354)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),(int)0);
HXLINE( 355)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),(int)0);
HXLINE( 357)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),c);
HXLINE( 358)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),d);
HXLINE( 359)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),(int)0);
HXLINE( 360)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),(int)0);
HXLINE( 362)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),(int)0);
HXLINE( 363)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),(int)0);
HXLINE( 364)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),(int)1);
HXLINE( 365)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),(int)0);
HXLINE( 367)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),tx);
HXLINE( 368)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),ty);
HXLINE( 369)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),(int)0);
HXLINE( 370)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Matrix4_Impl__obj,create2D,(void))

void Matrix4_Impl__obj::createOrtho( ::lime::utils::ArrayBufferView this1,Float left,Float right,Float bottom,Float top,Float zNear,Float zFar){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_384_createOrtho)
HXLINE( 386)		Float sx = ((Float)((Float)1.0) / (Float)(right - left));
HXLINE( 387)		Float sy = ((Float)((Float)1.0) / (Float)(top - bottom));
HXLINE( 388)		Float sz = ((Float)((Float)1.0) / (Float)(zFar - zNear));
HXLINE( 390)		{
HXLINE( 390)			Float val = ((int)2 * sx);
HXDLIN( 390)			::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            		}
HXLINE( 391)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),(int)0);
HXLINE( 392)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),(int)0);
HXLINE( 393)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),(int)0);
HXLINE( 395)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),(int)0);
HXLINE( 396)		{
HXLINE( 396)			Float val1 = ((int)2 * sy);
HXDLIN( 396)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val1);
            		}
HXLINE( 397)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),(int)0);
HXLINE( 398)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),(int)0);
HXLINE( 400)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),(int)0);
HXLINE( 401)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),(int)0);
HXLINE( 402)		{
HXLINE( 402)			Float val2 = ((int)-2 * sz);
HXDLIN( 402)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val2);
            		}
HXLINE( 403)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),(int)0);
HXLINE( 405)		{
HXLINE( 405)			Float val3 = (-((left + right)) * sx);
HXDLIN( 405)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val3);
            		}
HXLINE( 406)		{
HXLINE( 406)			Float val4 = (-((bottom + top)) * sy);
HXDLIN( 406)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val4);
            		}
HXLINE( 407)		{
HXLINE( 407)			Float val5 = (-((zNear + zFar)) * sz);
HXDLIN( 407)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val5);
            		}
HXLINE( 408)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Matrix4_Impl__obj,createOrtho,(void))

 ::lime::math::Vector4 Matrix4_Impl__obj::deltaTransformVector( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 v, ::lime::math::Vector4 result){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_518_deltaTransformVector)
HXLINE( 520)		if (hx::IsNull( result )) {
HXLINE( 520)			result =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 521)		Float x = v->x;
HXDLIN( 521)		Float y = v->y;
HXDLIN( 521)		Float z = v->z;
HXLINE( 522)		Float _hx_tmp = (x * ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
HXDLIN( 522)		Float _hx_tmp1 = (_hx_tmp + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16))));
HXDLIN( 522)		Float _hx_tmp2 = (_hx_tmp1 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32))));
HXDLIN( 522)		result->x = (_hx_tmp2 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12)));
HXLINE( 523)		Float _hx_tmp3 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4)));
HXDLIN( 523)		Float _hx_tmp4 = (_hx_tmp3 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 523)		Float _hx_tmp5 = (_hx_tmp4 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 523)		result->y = (_hx_tmp5 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28)));
HXLINE( 524)		Float _hx_tmp6 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8)));
HXDLIN( 524)		Float _hx_tmp7 = (_hx_tmp6 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24))));
HXDLIN( 524)		Float _hx_tmp8 = (_hx_tmp7 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40))));
HXDLIN( 524)		result->z = (_hx_tmp8 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)));
HXLINE( 525)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,deltaTransformVector,return )

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::fromMatrix3( ::lime::math::Matrix3 matrix3){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_530_fromMatrix3)
HXLINE( 532)		 ::lime::utils::ArrayBufferView mat = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 533)		::lime::math::_Matrix4::Matrix4_Impl__obj::create2D(mat,matrix3->a,matrix3->b,matrix3->c,matrix3->d,matrix3->tx,matrix3->ty);
HXLINE( 534)		return mat;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,fromMatrix3,return )

void Matrix4_Impl__obj::identity( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_542_identity)
HXLINE( 544)		::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,(int)1);
HXLINE( 545)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),(int)0);
HXLINE( 546)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),(int)0);
HXLINE( 547)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),(int)0);
HXLINE( 548)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),(int)0);
HXLINE( 549)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),(int)1);
HXLINE( 550)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),(int)0);
HXLINE( 551)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),(int)0);
HXLINE( 552)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),(int)0);
HXLINE( 553)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),(int)0);
HXLINE( 554)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),(int)1);
HXLINE( 555)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),(int)0);
HXLINE( 556)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),(int)0);
HXLINE( 557)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),(int)0);
HXLINE( 558)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),(int)0);
HXLINE( 559)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,identity,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::interpolate( ::lime::utils::ArrayBufferView thisMat, ::lime::utils::ArrayBufferView toMat,Float percent, ::lime::utils::ArrayBufferView result){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_572_interpolate)
HXLINE( 574)		if (hx::IsNull( result )) {
HXLINE( 574)			result = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
            		}
HXLINE( 576)		{
HXLINE( 576)			int _g = (int)0;
HXDLIN( 576)			while((_g < (int)16)){
HXLINE( 576)				_g = (_g + (int)1);
HXDLIN( 576)				int i = (_g - (int)1);
HXLINE( 578)				Float _hx_tmp = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(thisMat,i);
HXDLIN( 578)				Float _hx_tmp1 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(toMat,i);
HXDLIN( 578)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(result,i,(_hx_tmp + ((_hx_tmp1 - ::lime::math::_Matrix4::Matrix4_Impl__obj::get(thisMat,i)) * percent)));
            			}
            		}
HXLINE( 582)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,interpolate,return )

void Matrix4_Impl__obj::interpolateTo( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView toMat,Float percent){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_594_interpolateTo)
HXDLIN( 594)		int _g = (int)0;
HXDLIN( 594)		while((_g < (int)16)){
HXDLIN( 594)			_g = (_g + (int)1);
HXDLIN( 594)			int i = (_g - (int)1);
HXLINE( 596)			{
HXLINE( 596)				int this2 = this1->byteOffset;
HXDLIN( 596)				Float val = ::__hxcpp_memory_get_float(this1->buffer->b,(this2 + (i * (int)4)));
HXDLIN( 596)				Float val1 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(toMat,i);
HXDLIN( 596)				int this3 = this1->byteOffset;
HXDLIN( 596)				Float val2 = (val + ((val1 - ::__hxcpp_memory_get_float(this1->buffer->b,(this3 + (i * (int)4)))) * percent));
HXDLIN( 596)				{
HXLINE( 596)					int this4 = this1->byteOffset;
HXDLIN( 596)					::__hxcpp_memory_set_float(this1->buffer->b,(this4 + (i * (int)4)),val2);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,interpolateTo,(void))

bool Matrix4_Impl__obj::invert( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_607_invert)
HXLINE( 609)		Float d = ::lime::math::_Matrix4::Matrix4_Impl__obj::get_determinant(this1);
HXLINE( 610)		bool invertable = (::Math_obj::abs(d) > ((Float)0.00000000001));
HXLINE( 612)		if (invertable) {
HXLINE( 614)			d = ((Float)(int)1 / (Float)d);
HXLINE( 616)			Float m11 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 616)			Float m21 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 616)			Float m31 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 616)			Float m41 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXLINE( 617)			Float m12 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN( 617)			Float m22 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXDLIN( 617)			Float m32 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN( 617)			Float m42 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXLINE( 618)			Float m13 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 618)			Float m23 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 618)			Float m33 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN( 618)			Float m43 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 619)			Float m14 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN( 619)			Float m24 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN( 619)			Float m34 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN( 619)			Float m44 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
HXLINE( 621)			{
HXLINE( 621)				Float val = (d * (((m22 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m23 * m44) - (m43 * m24)))) + (m42 * ((m23 * m34) - (m33 * m24)))));
HXDLIN( 621)				::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            			}
HXLINE( 622)			{
HXLINE( 622)				Float val1 = (-(d) * (((m12 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m34) - (m33 * m14)))));
HXDLIN( 622)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val1);
            			}
HXLINE( 623)			{
HXLINE( 623)				Float val2 = (d * (((m12 * ((m23 * m44) - (m43 * m24))) - (m22 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m24) - (m23 * m14)))));
HXDLIN( 623)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val2);
            			}
HXLINE( 624)			{
HXLINE( 624)				Float val3 = (-(d) * (((m12 * ((m23 * m34) - (m33 * m24))) - (m22 * ((m13 * m34) - (m33 * m14)))) + (m32 * ((m13 * m24) - (m23 * m14)))));
HXDLIN( 624)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val3);
            			}
HXLINE( 625)			{
HXLINE( 625)				Float val4 = (-(d) * (((m21 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m23 * m44) - (m43 * m24)))) + (m41 * ((m23 * m34) - (m33 * m24)))));
HXDLIN( 625)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val4);
            			}
HXLINE( 626)			{
HXLINE( 626)				Float val5 = (d * (((m11 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m34) - (m33 * m14)))));
HXDLIN( 626)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            			}
HXLINE( 627)			{
HXLINE( 627)				Float val6 = (-(d) * (((m11 * ((m23 * m44) - (m43 * m24))) - (m21 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m24) - (m23 * m14)))));
HXDLIN( 627)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val6);
            			}
HXLINE( 628)			{
HXLINE( 628)				Float val7 = (d * (((m11 * ((m23 * m34) - (m33 * m24))) - (m21 * ((m13 * m34) - (m33 * m14)))) + (m31 * ((m13 * m24) - (m23 * m14)))));
HXDLIN( 628)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val7);
            			}
HXLINE( 629)			{
HXLINE( 629)				Float val8 = (d * (((m21 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m22 * m44) - (m42 * m24)))) + (m41 * ((m22 * m34) - (m32 * m24)))));
HXDLIN( 629)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val8);
            			}
HXLINE( 630)			{
HXLINE( 630)				Float val9 = (-(d) * (((m11 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m34) - (m32 * m14)))));
HXDLIN( 630)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val9);
            			}
HXLINE( 631)			{
HXLINE( 631)				Float val10 = (d * (((m11 * ((m22 * m44) - (m42 * m24))) - (m21 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m24) - (m22 * m14)))));
HXDLIN( 631)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            			}
HXLINE( 632)			{
HXLINE( 632)				Float val11 = (-(d) * (((m11 * ((m22 * m34) - (m32 * m24))) - (m21 * ((m12 * m34) - (m32 * m14)))) + (m31 * ((m12 * m24) - (m22 * m14)))));
HXDLIN( 632)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            			}
HXLINE( 633)			{
HXLINE( 633)				Float val12 = (-(d) * (((m21 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m22 * m43) - (m42 * m23)))) + (m41 * ((m22 * m33) - (m32 * m23)))));
HXDLIN( 633)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val12);
            			}
HXLINE( 634)			{
HXLINE( 634)				Float val13 = (d * (((m11 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m33) - (m32 * m13)))));
HXDLIN( 634)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val13);
            			}
HXLINE( 635)			{
HXLINE( 635)				Float val14 = (-(d) * (((m11 * ((m22 * m43) - (m42 * m23))) - (m21 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m23) - (m22 * m13)))));
HXDLIN( 635)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val14);
            			}
HXLINE( 636)			{
HXLINE( 636)				Float val15 = (d * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13)))));
HXDLIN( 636)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            			}
            		}
HXLINE( 640)		return invertable;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,invert,return )

void Matrix4_Impl__obj::pointAt( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 pos, ::lime::math::Vector4 at, ::lime::math::Vector4 up){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_651_pointAt)
HXLINE( 655)		if (hx::IsNull( at )) {
HXLINE( 657)			at =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)1,null());
            		}
HXLINE( 661)		if (hx::IsNull( up )) {
HXLINE( 663)			up =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)1,(int)0,null());
            		}
HXLINE( 667)		 ::lime::math::Vector4 result = null();
HXDLIN( 667)		if (hx::IsNull( result )) {
HXLINE( 667)			result =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXDLIN( 667)		{
HXLINE( 667)			result->x = (pos->x - at->x);
HXDLIN( 667)			result->y = (pos->y - at->y);
HXDLIN( 667)			result->z = (pos->z - at->z);
            		}
HXDLIN( 667)		 ::lime::math::Vector4 dir = result;
HXLINE( 668)		 ::lime::math::Vector4 vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,up->x,up->y,up->z,up->w);
HXLINE( 669)		 ::lime::math::Vector4 right;
HXLINE( 671)		{
HXLINE( 671)			Float l = (dir->x * dir->x);
HXDLIN( 671)			Float l1 = (l + (dir->y * dir->y));
HXDLIN( 671)			Float l2 = ::Math_obj::sqrt((l1 + (dir->z * dir->z)));
HXDLIN( 671)			if ((l2 != (int)0)) {
HXLINE( 671)				 ::lime::math::Vector4 dir1 = dir;
HXDLIN( 671)				dir1->x = ((Float)dir1->x / (Float)l2);
HXDLIN( 671)				 ::lime::math::Vector4 dir2 = dir;
HXDLIN( 671)				dir2->y = ((Float)dir2->y / (Float)l2);
HXDLIN( 671)				 ::lime::math::Vector4 dir3 = dir;
HXDLIN( 671)				dir3->z = ((Float)dir3->z / (Float)l2);
            			}
            		}
HXLINE( 672)		{
HXLINE( 672)			Float l3 = (vup->x * vup->x);
HXDLIN( 672)			Float l4 = (l3 + (vup->y * vup->y));
HXDLIN( 672)			Float l5 = ::Math_obj::sqrt((l4 + (vup->z * vup->z)));
HXDLIN( 672)			if ((l5 != (int)0)) {
HXLINE( 672)				 ::lime::math::Vector4 vup1 = vup;
HXDLIN( 672)				vup1->x = ((Float)vup1->x / (Float)l5);
HXDLIN( 672)				 ::lime::math::Vector4 vup2 = vup;
HXDLIN( 672)				vup2->y = ((Float)vup2->y / (Float)l5);
HXDLIN( 672)				 ::lime::math::Vector4 vup3 = vup;
HXDLIN( 672)				vup3->z = ((Float)vup3->z / (Float)l5);
            			}
            		}
HXLINE( 674)		 ::lime::math::Vector4 dir21 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,dir->x,dir->y,dir->z,dir->w);
HXLINE( 675)		{
HXLINE( 675)			Float s = (vup->x * dir->x);
HXDLIN( 675)			Float s1 = (s + (vup->y * dir->y));
HXDLIN( 675)			Float s2 = (s1 + (vup->z * dir->z));
HXDLIN( 675)			 ::lime::math::Vector4 dir22 = dir21;
HXDLIN( 675)			dir22->x = (dir22->x * s2);
HXDLIN( 675)			 ::lime::math::Vector4 dir23 = dir21;
HXDLIN( 675)			dir23->y = (dir23->y * s2);
HXDLIN( 675)			 ::lime::math::Vector4 dir24 = dir21;
HXDLIN( 675)			dir24->z = (dir24->z * s2);
            		}
HXLINE( 677)		 ::lime::math::Vector4 result1 = null();
HXDLIN( 677)		if (hx::IsNull( result1 )) {
HXLINE( 677)			result1 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXDLIN( 677)		{
HXLINE( 677)			result1->x = (vup->x - dir21->x);
HXDLIN( 677)			result1->y = (vup->y - dir21->y);
HXDLIN( 677)			result1->z = (vup->z - dir21->z);
            		}
HXDLIN( 677)		vup = result1;
HXLINE( 679)		Float _hx_tmp = (vup->x * vup->x);
HXDLIN( 679)		Float _hx_tmp1 = (_hx_tmp + (vup->y * vup->y));
HXDLIN( 679)		if ((::Math_obj::sqrt((_hx_tmp1 + (vup->z * vup->z))) > (int)0)) {
HXLINE( 681)			Float l6 = (vup->x * vup->x);
HXDLIN( 681)			Float l7 = (l6 + (vup->y * vup->y));
HXDLIN( 681)			Float l8 = ::Math_obj::sqrt((l7 + (vup->z * vup->z)));
HXDLIN( 681)			if ((l8 != (int)0)) {
HXLINE( 681)				 ::lime::math::Vector4 vup4 = vup;
HXDLIN( 681)				vup4->x = ((Float)vup4->x / (Float)l8);
HXDLIN( 681)				 ::lime::math::Vector4 vup5 = vup;
HXDLIN( 681)				vup5->y = ((Float)vup5->y / (Float)l8);
HXDLIN( 681)				 ::lime::math::Vector4 vup6 = vup;
HXDLIN( 681)				vup6->z = ((Float)vup6->z / (Float)l8);
            			}
            		}
            		else {
HXLINE( 685)			if ((dir->x != (int)0)) {
HXLINE( 687)				vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,-(dir->y),dir->x,(int)0,null());
            			}
            			else {
HXLINE( 691)				vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,null());
            			}
            		}
HXLINE( 697)		 ::lime::math::Vector4 result2 = null();
HXDLIN( 697)		if (hx::IsNull( result2 )) {
HXLINE( 697)			result2 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXDLIN( 697)		{
HXLINE( 697)			Float xa = (vup->y * dir->z);
HXDLIN( 697)			Float ya = (vup->z * dir->x);
HXDLIN( 697)			Float ya1 = (ya - (vup->x * dir->z));
HXDLIN( 697)			Float za = (vup->x * dir->y);
HXDLIN( 697)			Float za1 = (za - (vup->y * dir->x));
HXDLIN( 697)			result2->x = (xa - (vup->z * dir->y));
HXDLIN( 697)			result2->y = ya1;
HXDLIN( 697)			result2->z = za1;
            		}
HXDLIN( 697)		result2->w = (int)1;
HXDLIN( 697)		right = result2;
HXLINE( 698)		{
HXLINE( 698)			Float l9 = (right->x * right->x);
HXDLIN( 698)			Float l10 = (l9 + (right->y * right->y));
HXDLIN( 698)			Float l11 = ::Math_obj::sqrt((l10 + (right->z * right->z)));
HXDLIN( 698)			if ((l11 != (int)0)) {
HXLINE( 698)				 ::lime::math::Vector4 right1 = right;
HXDLIN( 698)				right1->x = ((Float)right1->x / (Float)l11);
HXDLIN( 698)				 ::lime::math::Vector4 right2 = right;
HXDLIN( 698)				right2->y = ((Float)right2->y / (Float)l11);
HXDLIN( 698)				 ::lime::math::Vector4 right3 = right;
HXDLIN( 698)				right3->z = ((Float)right3->z / (Float)l11);
            			}
            		}
HXLINE( 700)		{
HXLINE( 700)			Float val = right->x;
HXDLIN( 700)			::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            		}
HXLINE( 701)		{
HXLINE( 701)			Float val1 = right->y;
HXDLIN( 701)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val1);
            		}
HXLINE( 702)		{
HXLINE( 702)			Float val2 = right->z;
HXDLIN( 702)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val2);
            		}
HXLINE( 703)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),((Float)0.0));
HXLINE( 704)		{
HXLINE( 704)			Float val3 = vup->x;
HXDLIN( 704)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val3);
            		}
HXLINE( 705)		{
HXLINE( 705)			Float val4 = vup->y;
HXDLIN( 705)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val4);
            		}
HXLINE( 706)		{
HXLINE( 706)			Float val5 = vup->z;
HXDLIN( 706)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val5);
            		}
HXLINE( 707)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),((Float)0.0));
HXLINE( 708)		{
HXLINE( 708)			Float val6 = dir->x;
HXDLIN( 708)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val6);
            		}
HXLINE( 709)		{
HXLINE( 709)			Float val7 = dir->y;
HXDLIN( 709)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val7);
            		}
HXLINE( 710)		{
HXLINE( 710)			Float val8 = dir->z;
HXDLIN( 710)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val8);
            		}
HXLINE( 711)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),((Float)0.0));
HXLINE( 712)		{
HXLINE( 712)			Float val9 = pos->x;
HXDLIN( 712)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val9);
            		}
HXLINE( 713)		{
HXLINE( 713)			Float val10 = pos->y;
HXDLIN( 713)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val10);
            		}
HXLINE( 714)		{
HXLINE( 714)			Float val11 = pos->z;
HXDLIN( 714)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            		}
HXLINE( 715)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,pointAt,(void))

void Matrix4_Impl__obj::prepend( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView rhs){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_724_prepend)
HXLINE( 726)		Float m111 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)0);
HXDLIN( 726)		Float m121 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)4);
HXDLIN( 726)		Float m131 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)8);
HXDLIN( 726)		Float m141 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)12);
HXDLIN( 726)		Float m112 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)1);
HXDLIN( 726)		Float m122 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)5);
HXDLIN( 726)		Float m132 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)9);
HXDLIN( 726)		Float m142 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)13);
HXDLIN( 726)		Float m113 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)2);
HXDLIN( 726)		Float m123 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)6);
HXDLIN( 726)		Float m133 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)10);
HXDLIN( 726)		Float m143 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)14);
HXDLIN( 726)		Float m114 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)3);
HXDLIN( 726)		Float m124 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)7);
HXDLIN( 726)		Float m134 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)11);
HXDLIN( 726)		Float m144 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)15);
HXDLIN( 726)		Float m211 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 726)		Float m221 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 726)		Float m231 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 726)		Float m241 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 726)		Float m212 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN( 726)		Float m222 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXDLIN( 726)		Float m232 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN( 726)		Float m242 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN( 726)		Float m213 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 726)		Float m223 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 726)		Float m233 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN( 726)		Float m243 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN( 726)		Float m214 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN( 726)		Float m224 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN( 726)		Float m234 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN( 726)		Float m244 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
HXLINE( 735)		{
HXLINE( 735)			Float val = ((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241));
HXDLIN( 735)			::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            		}
HXLINE( 736)		{
HXLINE( 736)			Float val1 = ((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242));
HXDLIN( 736)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val1);
            		}
HXLINE( 737)		{
HXLINE( 737)			Float val2 = ((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243));
HXDLIN( 737)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val2);
            		}
HXLINE( 738)		{
HXLINE( 738)			Float val3 = ((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244));
HXDLIN( 738)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val3);
            		}
HXLINE( 740)		{
HXLINE( 740)			Float val4 = ((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241));
HXDLIN( 740)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val4);
            		}
HXLINE( 741)		{
HXLINE( 741)			Float val5 = ((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242));
HXDLIN( 741)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            		}
HXLINE( 742)		{
HXLINE( 742)			Float val6 = ((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243));
HXDLIN( 742)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val6);
            		}
HXLINE( 743)		{
HXLINE( 743)			Float val7 = ((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244));
HXDLIN( 743)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val7);
            		}
HXLINE( 745)		{
HXLINE( 745)			Float val8 = ((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241));
HXDLIN( 745)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val8);
            		}
HXLINE( 746)		{
HXLINE( 746)			Float val9 = ((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242));
HXDLIN( 746)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val9);
            		}
HXLINE( 747)		{
HXLINE( 747)			Float val10 = ((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243));
HXDLIN( 747)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            		}
HXLINE( 748)		{
HXLINE( 748)			Float val11 = ((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244));
HXDLIN( 748)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            		}
HXLINE( 750)		{
HXLINE( 750)			Float val12 = ((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241));
HXDLIN( 750)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val12);
            		}
HXLINE( 751)		{
HXLINE( 751)			Float val13 = ((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242));
HXDLIN( 751)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val13);
            		}
HXLINE( 752)		{
HXLINE( 752)			Float val14 = ((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243));
HXDLIN( 752)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val14);
            		}
HXLINE( 753)		{
HXLINE( 753)			Float val15 = ((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244));
HXDLIN( 753)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,prepend,(void))

void Matrix4_Impl__obj::prependRotation( ::lime::utils::ArrayBufferView this1,Float degrees, ::lime::math::Vector4 axis, ::lime::math::Vector4 pivotPoint){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_764_prependRotation)
HXLINE( 766)		 ::lime::utils::ArrayBufferView m = ::lime::math::_Matrix4::Matrix4_Impl__obj::_hx___getAxisRotation(this1,axis->x,axis->y,axis->z,degrees);
HXLINE( 768)		if (hx::IsNotNull( pivotPoint )) {
HXLINE( 770)			 ::lime::math::Vector4 p = pivotPoint;
HXLINE( 771)			::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(m,p->x,p->y,p->z);
            		}
HXLINE( 775)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependRotation,(void))

void Matrix4_Impl__obj::prependScale( ::lime::utils::ArrayBufferView this1,Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_788_prependScale)
HXDLIN( 788)		::cpp::VirtualArray array = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 788)		 ::lime::utils::ArrayBufferView this2;
HXDLIN( 788)		if (hx::IsNotNull( array )) {
HXDLIN( 788)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 788)			_this->byteOffset = (int)0;
HXDLIN( 788)			_this->length = array->get_length();
HXDLIN( 788)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 788)			 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 788)			_this->buffer = this3;
HXDLIN( 788)			_this->copyFromArray(array,null());
HXDLIN( 788)			this2 = _this;
            		}
            		else {
HXDLIN( 788)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 788)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependScale,(void))

void Matrix4_Impl__obj::prependTranslation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_799_prependTranslation)
HXLINE( 801)		 ::lime::utils::ArrayBufferView m = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 802)		::lime::math::_Matrix4::Matrix4_Impl__obj::set_position(m, ::lime::math::Vector4_obj::__alloc( HX_CTX ,x,y,z,null()));
HXLINE( 803)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependTranslation,(void))

 ::lime::math::Vector4 Matrix4_Impl__obj::transformVector( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 v, ::lime::math::Vector4 result){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_897_transformVector)
HXLINE( 899)		if (hx::IsNull( result )) {
HXLINE( 899)			result =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 900)		Float x = v->x;
HXDLIN( 900)		Float y = v->y;
HXDLIN( 900)		Float z = v->z;
HXLINE( 901)		Float _hx_tmp = (x * ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
HXDLIN( 901)		Float _hx_tmp1 = (_hx_tmp + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16))));
HXDLIN( 901)		Float _hx_tmp2 = (_hx_tmp1 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32))));
HXDLIN( 901)		result->x = (_hx_tmp2 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48)));
HXLINE( 902)		Float _hx_tmp3 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4)));
HXDLIN( 902)		Float _hx_tmp4 = (_hx_tmp3 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 902)		Float _hx_tmp5 = (_hx_tmp4 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 902)		result->y = (_hx_tmp5 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXLINE( 903)		Float _hx_tmp6 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8)));
HXDLIN( 903)		Float _hx_tmp7 = (_hx_tmp6 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24))));
HXDLIN( 903)		Float _hx_tmp8 = (_hx_tmp7 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40))));
HXDLIN( 903)		result->z = (_hx_tmp8 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)));
HXLINE( 904)		Float _hx_tmp9 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12)));
HXDLIN( 904)		Float _hx_tmp10 = (_hx_tmp9 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28))));
HXDLIN( 904)		Float _hx_tmp11 = (_hx_tmp10 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44))));
HXDLIN( 904)		result->w = (_hx_tmp11 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXLINE( 905)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,transformVector,return )

void Matrix4_Impl__obj::transformVectors( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView ain, ::lime::utils::ArrayBufferView aout){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_915_transformVectors)
HXLINE( 917)		int i = (int)0;
HXLINE( 918)		Float x;
HXDLIN( 918)		Float y;
HXDLIN( 918)		Float z;
HXLINE( 920)		while(((i + (int)3) <= ain->length)){
HXLINE( 922)			int ain1 = ain->byteOffset;
HXDLIN( 922)			x = ::__hxcpp_memory_get_float(ain->buffer->b,(ain1 + (i * (int)4)));
HXLINE( 923)			int ain2 = ain->byteOffset;
HXDLIN( 923)			y = ::__hxcpp_memory_get_float(ain->buffer->b,(ain2 + ((i + (int)1) * (int)4)));
HXLINE( 924)			int ain3 = ain->byteOffset;
HXDLIN( 924)			z = ::__hxcpp_memory_get_float(ain->buffer->b,(ain3 + ((i + (int)2) * (int)4)));
HXLINE( 926)			{
HXLINE( 926)				Float val = (x * ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
HXDLIN( 926)				Float val1 = (val + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16))));
HXDLIN( 926)				Float val2 = (val1 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32))));
HXDLIN( 926)				Float val3 = (val2 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48)));
HXDLIN( 926)				{
HXLINE( 926)					int aout1 = aout->byteOffset;
HXDLIN( 926)					::__hxcpp_memory_set_float(aout->buffer->b,(aout1 + (i * (int)4)),val3);
            				}
            			}
HXLINE( 927)			{
HXLINE( 927)				Float val4 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4)));
HXDLIN( 927)				Float val5 = (val4 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 927)				Float val6 = (val5 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 927)				Float val7 = (val6 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN( 927)				{
HXLINE( 927)					int aout2 = aout->byteOffset;
HXDLIN( 927)					::__hxcpp_memory_set_float(aout->buffer->b,(aout2 + ((i + (int)1) * (int)4)),val7);
            				}
            			}
HXLINE( 928)			{
HXLINE( 928)				Float val8 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8)));
HXDLIN( 928)				Float val9 = (val8 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24))));
HXDLIN( 928)				Float val10 = (val9 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40))));
HXDLIN( 928)				Float val11 = (val10 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)));
HXDLIN( 928)				{
HXLINE( 928)					int aout3 = aout->byteOffset;
HXDLIN( 928)					::__hxcpp_memory_set_float(aout->buffer->b,(aout3 + ((i + (int)2) * (int)4)),val11);
            				}
            			}
HXLINE( 930)			i = (i + (int)3);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,transformVectors,(void))

void Matrix4_Impl__obj::transpose( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_940_transpose)
HXLINE( 942)		{
HXLINE( 942)			Float temp = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN( 942)			{
HXLINE( 942)				Float val = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 942)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val);
            			}
HXDLIN( 942)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),temp);
            		}
HXLINE( 943)		{
HXLINE( 943)			Float temp1 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 943)			{
HXLINE( 943)				Float val1 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 943)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val1);
            			}
HXDLIN( 943)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),temp1);
            		}
HXLINE( 944)		{
HXLINE( 944)			Float temp2 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN( 944)			{
HXLINE( 944)				Float val2 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 944)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val2);
            			}
HXDLIN( 944)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),temp2);
            		}
HXLINE( 945)		{
HXLINE( 945)			Float temp3 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 945)			{
HXLINE( 945)				Float val3 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN( 945)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val3);
            			}
HXDLIN( 945)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),temp3);
            		}
HXLINE( 946)		{
HXLINE( 946)			Float temp4 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN( 946)			{
HXLINE( 946)				Float val4 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN( 946)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val4);
            			}
HXDLIN( 946)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),temp4);
            		}
HXLINE( 947)		{
HXLINE( 947)			Float temp5 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN( 947)			{
HXLINE( 947)				Float val5 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN( 947)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val5);
            			}
HXDLIN( 947)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),temp5);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,transpose,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::_hx___getAxisRotation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z,Float degrees){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_952___getAxisRotation)
HXLINE( 954)		 ::lime::utils::ArrayBufferView m = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 956)		 ::lime::math::Vector4 a1 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,x,y,z,null());
HXLINE( 957)		Float rad = (-(degrees) * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 958)		Float c = ::Math_obj::cos(rad);
HXLINE( 959)		Float s = ::Math_obj::sin(rad);
HXLINE( 960)		Float t = (((Float)1.0) - c);
HXLINE( 962)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)0,(c + ((a1->x * a1->x) * t)));
HXLINE( 963)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)5,(c + ((a1->y * a1->y) * t)));
HXLINE( 964)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)10,(c + ((a1->z * a1->z) * t)));
HXLINE( 966)		Float tmp1 = ((a1->x * a1->y) * t);
HXLINE( 967)		Float tmp2 = (a1->z * s);
HXLINE( 968)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)4,(tmp1 + tmp2));
HXLINE( 969)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)1,(tmp1 - tmp2));
HXLINE( 970)		tmp1 = ((a1->x * a1->z) * t);
HXLINE( 971)		tmp2 = (a1->y * s);
HXLINE( 972)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)8,(tmp1 - tmp2));
HXLINE( 973)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)2,(tmp1 + tmp2));
HXLINE( 974)		tmp1 = ((a1->y * a1->z) * t);
HXLINE( 975)		tmp2 = (a1->x * s);
HXLINE( 976)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)9,(tmp1 + tmp2));
HXLINE( 977)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)6,(tmp1 - tmp2));
HXLINE( 979)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Matrix4_Impl__obj,_hx___getAxisRotation,return )

void Matrix4_Impl__obj::_hx___swap( ::lime::utils::ArrayBufferView this1,int a,int b){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_984___swap)
HXLINE( 986)		int this2 = this1->byteOffset;
HXDLIN( 986)		Float temp = ::__hxcpp_memory_get_float(this1->buffer->b,(this2 + (a * (int)4)));
HXLINE( 987)		{
HXLINE( 987)			int this3 = this1->byteOffset;
HXDLIN( 987)			Float val = ::__hxcpp_memory_get_float(this1->buffer->b,(this3 + (b * (int)4)));
HXDLIN( 987)			{
HXLINE( 987)				int this4 = this1->byteOffset;
HXDLIN( 987)				::__hxcpp_memory_set_float(this1->buffer->b,(this4 + (a * (int)4)),val);
            			}
            		}
HXLINE( 988)		{
HXLINE( 988)			int this5 = this1->byteOffset;
HXDLIN( 988)			::__hxcpp_memory_set_float(this1->buffer->b,(this5 + (b * (int)4)),temp);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,_hx___swap,(void))

Float Matrix4_Impl__obj::get_determinant( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_1002_get_determinant)
HXDLIN(1002)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(1002)		Float _hx_tmp1 = (_hx_tmp * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20)));
HXDLIN(1002)		Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN(1002)		Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4))));
HXDLIN(1002)		Float _hx_tmp4 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN(1002)		Float _hx_tmp5 = (_hx_tmp4 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXDLIN(1002)		Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN(1002)		Float _hx_tmp7 = (_hx_tmp3 * (_hx_tmp5 - (_hx_tmp6 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)))));
HXLINE(1003)		Float _hx_tmp8 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(1003)		Float _hx_tmp9 = (_hx_tmp8 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36)));
HXDLIN(1003)		Float _hx_tmp10 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN(1003)		Float _hx_tmp11 = (_hx_tmp9 - (_hx_tmp10 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4))));
HXDLIN(1003)		Float _hx_tmp12 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN(1003)		Float _hx_tmp13 = (_hx_tmp12 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXDLIN(1003)		Float _hx_tmp14 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE(1002)		Float _hx_tmp15 = (_hx_tmp7 - (_hx_tmp11 * (_hx_tmp13 - (_hx_tmp14 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28))))));
HXLINE(1004)		Float _hx_tmp16 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(1004)		Float _hx_tmp17 = (_hx_tmp16 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN(1004)		Float _hx_tmp18 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN(1004)		Float _hx_tmp19 = (_hx_tmp17 - (_hx_tmp18 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4))));
HXDLIN(1004)		Float _hx_tmp20 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN(1004)		Float _hx_tmp21 = (_hx_tmp20 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)));
HXDLIN(1004)		Float _hx_tmp22 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE(1002)		Float _hx_tmp23 = (_hx_tmp15 + (_hx_tmp19 * (_hx_tmp21 - (_hx_tmp22 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28))))));
HXLINE(1005)		Float _hx_tmp24 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN(1005)		Float _hx_tmp25 = (_hx_tmp24 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36)));
HXDLIN(1005)		Float _hx_tmp26 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN(1005)		Float _hx_tmp27 = (_hx_tmp25 - (_hx_tmp26 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN(1005)		Float _hx_tmp28 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN(1005)		Float _hx_tmp29 = (_hx_tmp28 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXDLIN(1005)		Float _hx_tmp30 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE(1002)		Float _hx_tmp31 = (_hx_tmp23 + (_hx_tmp27 * (_hx_tmp29 - (_hx_tmp30 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12))))));
HXLINE(1006)		Float _hx_tmp32 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN(1006)		Float _hx_tmp33 = (_hx_tmp32 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN(1006)		Float _hx_tmp34 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN(1006)		Float _hx_tmp35 = (_hx_tmp33 - (_hx_tmp34 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN(1006)		Float _hx_tmp36 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN(1006)		Float _hx_tmp37 = (_hx_tmp36 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)));
HXDLIN(1006)		Float _hx_tmp38 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE(1002)		Float _hx_tmp39 = (_hx_tmp31 - (_hx_tmp35 * (_hx_tmp37 - (_hx_tmp38 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12))))));
HXLINE(1007)		Float _hx_tmp40 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN(1007)		Float _hx_tmp41 = (_hx_tmp40 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN(1007)		Float _hx_tmp42 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN(1007)		Float _hx_tmp43 = (_hx_tmp41 - (_hx_tmp42 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN(1007)		Float _hx_tmp44 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN(1007)		Float _hx_tmp45 = (_hx_tmp44 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28)));
HXDLIN(1007)		Float _hx_tmp46 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXLINE(1002)		return (_hx_tmp39 + (_hx_tmp43 * (_hx_tmp45 - (_hx_tmp46 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12))))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,get_determinant,return )

 ::lime::math::Vector4 Matrix4_Impl__obj::get_position( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_1014_get_position)
HXDLIN(1014)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN(1014)		Float _hx_tmp1 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN(1014)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,get_position,return )

 ::lime::math::Vector4 Matrix4_Impl__obj::set_position( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 val){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_1019_set_position)
HXLINE(1021)		{
HXLINE(1021)			Float val1 = val->x;
HXDLIN(1021)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val1);
            		}
HXLINE(1022)		{
HXLINE(1022)			Float val2 = val->y;
HXDLIN(1022)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val2);
            		}
HXLINE(1023)		{
HXLINE(1023)			Float val3 = val->z;
HXDLIN(1023)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val3);
            		}
HXLINE(1024)		return val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,set_position,return )

Float Matrix4_Impl__obj::get( ::lime::utils::ArrayBufferView this1,int index){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_1031_get)
HXDLIN(1031)		int this2 = this1->byteOffset;
HXDLIN(1031)		return ::__hxcpp_memory_get_float(this1->buffer->b,(this2 + (index * (int)4)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,get,return )

Float Matrix4_Impl__obj::set( ::lime::utils::ArrayBufferView this1,int index,Float value){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_1036_set)
HXLINE(1038)		{
HXLINE(1038)			int this2 = this1->byteOffset;
HXDLIN(1038)			::__hxcpp_memory_set_float(this1->buffer->b,(this2 + (index * (int)4)),value);
            		}
HXLINE(1039)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,set,return )


Matrix4_Impl__obj::Matrix4_Impl__obj()
{
}

bool Matrix4_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { outValue = append_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invert") ) { outValue = invert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__swap") ) { outValue = _hx___swap_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pointAt") ) { outValue = pointAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prepend") ) { outValue = prepend_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { outValue = copyFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"create2D") ) { outValue = create2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"identity") ) { outValue = identity_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { outValue = copyRowTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transpose") ) { outValue = transpose_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"appendScale") ) { outValue = appendScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { outValue = copyRowFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createOrtho") ) { outValue = createOrtho_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromMatrix3") ) { outValue = fromMatrix3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { outValue = copyColumnTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prependScale") ) { outValue = prependScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_position") ) { outValue = get_position_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_position") ) { outValue = set_position_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"interpolateTo") ) { outValue = interpolateTo_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"appendRotation") ) { outValue = appendRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { outValue = copyColumnFrom_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"prependRotation") ) { outValue = prependRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transformVector") ) { outValue = transformVector_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_determinant") ) { outValue = get_determinant_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformVectors") ) { outValue = transformVectors_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"appendTranslation") ) { outValue = appendTranslation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getAxisRotation") ) { outValue = _hx___getAxisRotation_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { outValue = prependTranslation_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { outValue = deltaTransformVector_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Matrix4_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Matrix4_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(void *) &Matrix4_Impl__obj::_hx___identity,HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Matrix4_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix4_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix4_Impl__obj::_hx___identity,"__identity");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix4_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix4_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix4_Impl__obj::_hx___identity,"__identity");
};

#endif

hx::Class Matrix4_Impl__obj::__mClass;

static ::String Matrix4_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("appendRotation","\x38","\x45","\xe8","\xcb"),
	HX_HCSTRING("appendScale","\x50","\x66","\x45","\xb5"),
	HX_HCSTRING("appendTranslation","\x37","\xe1","\x3d","\xd6"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("create2D","\xce","\x49","\xf4","\x2b"),
	HX_HCSTRING("createOrtho","\x9c","\x4e","\xa8","\x5e"),
	HX_HCSTRING("deltaTransformVector","\x37","\x02","\x9c","\xc2"),
	HX_HCSTRING("fromMatrix3","\x88","\xa6","\xa7","\x2b"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("interpolateTo","\x9c","\x90","\x22","\x71"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("pointAt","\x63","\xa1","\x21","\x51"),
	HX_HCSTRING("prepend","\x0e","\x97","\xe0","\x37"),
	HX_HCSTRING("prependRotation","\x6c","\x4e","\x3b","\xe8"),
	HX_HCSTRING("prependScale","\x9c","\x54","\x97","\xc4"),
	HX_HCSTRING("prependTranslation","\x83","\x90","\x15","\x05"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("transformVectors","\x44","\xba","\x12","\x8a"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("__getAxisRotation","\x95","\xa5","\x44","\x7b"),
	HX_HCSTRING("__swap","\xb3","\x8d","\x56","\xfb"),
	HX_HCSTRING("get_determinant","\x2c","\x15","\xf7","\xf2"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null())
};

void Matrix4_Impl__obj::__register()
{
	hx::Object *dummy = new Matrix4_Impl__obj;
	Matrix4_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math._Matrix4.Matrix4_Impl_","\xe6","\xfe","\xf9","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix4_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix4_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix4_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Matrix4_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix4_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix4_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix4_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix4_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_15_boot)
HXDLIN(  15)		_hx___identity = ::Array_obj< Float >::fromData( _hx_array_data_cbf9fee6_38,16);
            	}
}

} // end namespace lime
} // end namespace math
} // end namespace _Matrix4
