// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_21e31708d26ee405_72_new,"lime.math.Matrix3","new",0xb5a52a77,"lime.math.Matrix3.new","lime/math/Matrix3.hx",72,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_90_clone,"lime.math.Matrix3","clone",0xf8506134,"lime.math.Matrix3.clone","lime/math/Matrix3.hx",90,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_101_concat,"lime.math.Matrix3","concat",0x0786d75d,"lime.math.Matrix3.concat","lime/math/Matrix3.hx",101,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_127_copyColumnFrom,"lime.math.Matrix3","copyColumnFrom",0x89c156be,"lime.math.Matrix3.copyColumnFrom","lime/math/Matrix3.hx",127,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_159_copyColumnTo,"lime.math.Matrix3","copyColumnTo",0x045a59cf,"lime.math.Matrix3.copyColumnTo","lime/math/Matrix3.hx",159,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_191_copyFrom,"lime.math.Matrix3","copyFrom",0x7e1ebe48,"lime.math.Matrix3.copyFrom","lime/math/Matrix3.hx",191,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_211_copyRowFrom,"lime.math.Matrix3","copyRowFrom",0xb0770e86,"lime.math.Matrix3.copyRowFrom","lime/math/Matrix3.hx",211,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_240_copyRowTo,"lime.math.Matrix3","copyRowTo",0xc3a10f97,"lime.math.Matrix3.copyRowTo","lime/math/Matrix3.hx",240,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_276_createBox,"lime.math.Matrix3","createBox",0x9a1719c6,"lime.math.Matrix3.createBox","lime/math/Matrix3.hx",276,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_312_createGradientBox,"lime.math.Matrix3","createGradientBox",0xff9720b6,"lime.math.Matrix3.createGradientBox","lime/math/Matrix3.hx",312,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_347_equals,"lime.math.Matrix3","equals",0xffa9bc88,"lime.math.Matrix3.equals","lime/math/Matrix3.hx",347,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_358_deltaTransformVector,"lime.math.Matrix3","deltaTransformVector",0xcb1fde40,"lime.math.Matrix3.deltaTransformVector","lime/math/Matrix3.hx",358,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_371_identity,"lime.math.Matrix3","identity",0x6eecf7c7,"lime.math.Matrix3.identity","lime/math/Matrix3.hx",371,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_387_invert,"lime.math.Matrix3","invert",0xdf8fb55f,"lime.math.Matrix3.invert","lime/math/Matrix3.hx",387,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_430_rotate,"lime.math.Matrix3","rotate",0x0ad714a4,"lime.math.Matrix3.rotate","lime/math/Matrix3.hx",430,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_469_scale,"lime.math.Matrix3","scale",0x28bc1c61,"lime.math.Matrix3.scale","lime/math/Matrix3.hx",469,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_490_setRotation,"lime.math.Matrix3","setRotation",0xf9d2d017,"lime.math.Matrix3.setRotation","lime/math/Matrix3.hx",490,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_509_setTo,"lime.math.Matrix3","setTo",0x2a1cdf94,"lime.math.Matrix3.setTo","lime/math/Matrix3.hx",509,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_531_to3DString,"lime.math.Matrix3","to3DString",0x3565e3a6,"lime.math.Matrix3.to3DString","lime/math/Matrix3.hx",531,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_546_toString,"lime.math.Matrix3","toString",0xee2c8335,"lime.math.Matrix3.toString","lime/math/Matrix3.hx",546,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_559_transformRect,"lime.math.Matrix3","transformRect",0x23364987,"lime.math.Matrix3.transformRect","lime/math/Matrix3.hx",559,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_603_transformVector,"lime.math.Matrix3","transformVector",0xadeecbe6,"lime.math.Matrix3.transformVector","lime/math/Matrix3.hx",603,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_618_translate,"lime.math.Matrix3","translate",0x99be5ca5,"lime.math.Matrix3.translate","lime/math/Matrix3.hx",618,0xeabca539)
HX_LOCAL_STACK_FRAME(_hx_pos_21e31708d26ee405_60_boot,"lime.math.Matrix3","boot",0x32f8fe3b,"lime.math.Matrix3.boot","lime/math/Matrix3.hx",60,0xeabca539)
namespace lime{
namespace math{

void Matrix3_obj::__construct(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float a = __o_a.Default(1);
Float b = __o_b.Default(0);
Float c = __o_c.Default(0);
Float d = __o_d.Default(1);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_72_new)
HXLINE(  74)		this->a = a;
HXLINE(  75)		this->b = b;
HXLINE(  76)		this->c = c;
HXLINE(  77)		this->d = d;
HXLINE(  78)		this->tx = tx;
HXLINE(  79)		this->ty = ty;
            	}

Dynamic Matrix3_obj::__CreateEmpty() { return new Matrix3_obj; }

void *Matrix3_obj::_hx_vtable = 0;

Dynamic Matrix3_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix3_obj > _hx_result = new Matrix3_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Matrix3_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20f892f5;
}

 ::lime::math::Matrix3 Matrix3_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_21e31708d26ee405_90_clone)
HXDLIN(  90)		return  ::lime::math::Matrix3_obj::__alloc( HX_CTX ,this->a,this->b,this->c,this->d,this->tx,this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3_obj,clone,return )

void Matrix3_obj::concat( ::lime::math::Matrix3 m){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_101_concat)
HXLINE( 103)		Float a1 = (this->a * m->a);
HXDLIN( 103)		Float a11 = (a1 + (this->b * m->c));
HXLINE( 104)		Float _hx_tmp = (this->a * m->b);
HXDLIN( 104)		this->b = (_hx_tmp + (this->b * m->d));
HXLINE( 105)		this->a = a11;
HXLINE( 107)		Float c1 = (this->c * m->a);
HXDLIN( 107)		Float c11 = (c1 + (this->d * m->c));
HXLINE( 108)		Float _hx_tmp1 = (this->c * m->b);
HXDLIN( 108)		this->d = (_hx_tmp1 + (this->d * m->d));
HXLINE( 109)		this->c = c11;
HXLINE( 111)		Float tx1 = (this->tx * m->a);
HXDLIN( 111)		Float tx11 = ((tx1 + (this->ty * m->c)) + m->tx);
HXLINE( 112)		Float _hx_tmp2 = (this->tx * m->b);
HXDLIN( 112)		this->ty = ((_hx_tmp2 + (this->ty * m->d)) + m->ty);
HXLINE( 113)		this->tx = tx11;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3_obj,concat,(void))

void Matrix3_obj::copyColumnFrom(int column, ::lime::math::Vector4 vector4){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_127_copyColumnFrom)
HXDLIN( 127)		if ((column > (int)2)) {
HXLINE( 129)			HX_STACK_DO_THROW(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 131)			if ((column == (int)0)) {
HXLINE( 133)				this->a = vector4->x;
HXLINE( 134)				this->b = vector4->y;
            			}
            			else {
HXLINE( 136)				if ((column == (int)1)) {
HXLINE( 138)					this->c = vector4->x;
HXLINE( 139)					this->d = vector4->y;
            				}
            				else {
HXLINE( 143)					this->tx = vector4->x;
HXLINE( 144)					this->ty = vector4->y;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,copyColumnFrom,(void))

void Matrix3_obj::copyColumnTo(int column, ::lime::math::Vector4 vector4){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_159_copyColumnTo)
HXDLIN( 159)		if ((column > (int)2)) {
HXLINE( 161)			HX_STACK_DO_THROW(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 163)			if ((column == (int)0)) {
HXLINE( 165)				vector4->x = this->a;
HXLINE( 166)				vector4->y = this->b;
HXLINE( 167)				vector4->z = (int)0;
            			}
            			else {
HXLINE( 169)				if ((column == (int)1)) {
HXLINE( 171)					vector4->x = this->c;
HXLINE( 172)					vector4->y = this->d;
HXLINE( 173)					vector4->z = (int)0;
            				}
            				else {
HXLINE( 177)					vector4->x = this->tx;
HXLINE( 178)					vector4->y = this->ty;
HXLINE( 179)					vector4->z = (int)1;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,copyColumnTo,(void))

void Matrix3_obj::copyFrom( ::lime::math::Matrix3 sourceMatrix3){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_191_copyFrom)
HXLINE( 193)		this->a = sourceMatrix3->a;
HXLINE( 194)		this->b = sourceMatrix3->b;
HXLINE( 195)		this->c = sourceMatrix3->c;
HXLINE( 196)		this->d = sourceMatrix3->d;
HXLINE( 197)		this->tx = sourceMatrix3->tx;
HXLINE( 198)		this->ty = sourceMatrix3->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3_obj,copyFrom,(void))

void Matrix3_obj::copyRowFrom(int row, ::lime::math::Vector4 vector4){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_211_copyRowFrom)
HXDLIN( 211)		if ((row > (int)2)) {
HXLINE( 213)			HX_STACK_DO_THROW(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 215)			if ((row == (int)0)) {
HXLINE( 217)				this->a = vector4->x;
HXLINE( 218)				this->c = vector4->y;
HXLINE( 219)				this->tx = vector4->z;
            			}
            			else {
HXLINE( 221)				if ((row == (int)1)) {
HXLINE( 223)					this->b = vector4->x;
HXLINE( 224)					this->d = vector4->y;
HXLINE( 225)					this->ty = vector4->z;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,copyRowFrom,(void))

void Matrix3_obj::copyRowTo(int row, ::lime::math::Vector4 vector4){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_240_copyRowTo)
HXDLIN( 240)		if ((row > (int)2)) {
HXLINE( 242)			HX_STACK_DO_THROW(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 244)			if ((row == (int)0)) {
HXLINE( 246)				vector4->x = this->a;
HXLINE( 247)				vector4->y = this->c;
HXLINE( 248)				vector4->z = this->tx;
            			}
            			else {
HXLINE( 250)				if ((row == (int)1)) {
HXLINE( 252)					vector4->x = this->b;
HXLINE( 253)					vector4->y = this->d;
HXLINE( 254)					vector4->z = this->ty;
            				}
            				else {
HXLINE( 258)					vector4->x = (int)0;
HXDLIN( 258)					vector4->y = (int)0;
HXDLIN( 258)					vector4->z = (int)1;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,copyRowTo,(void))

void Matrix3_obj::createBox(Float scaleX,Float scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float rotation = __o_rotation.Default(0);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_276_createBox)
HXLINE( 278)		if ((rotation != (int)0)) {
HXLINE( 280)			Float cos = ::Math_obj::cos(rotation);
HXLINE( 281)			Float sin = ::Math_obj::sin(rotation);
HXLINE( 283)			this->a = (cos * scaleX);
HXLINE( 284)			this->b = (sin * scaleY);
HXLINE( 285)			this->c = (-(sin) * scaleX);
HXLINE( 286)			this->d = (cos * scaleY);
            		}
            		else {
HXLINE( 290)			this->a = scaleX;
HXLINE( 291)			this->b = (int)0;
HXLINE( 292)			this->c = (int)0;
HXLINE( 293)			this->d = scaleY;
            		}
HXLINE( 297)		this->tx = tx;
HXLINE( 298)		this->ty = ty;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Matrix3_obj,createBox,(void))

void Matrix3_obj::createGradientBox(Float width,Float height,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float rotation = __o_rotation.Default(0);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_312_createGradientBox)
HXLINE( 314)		this->a = ((Float)width / (Float)((Float)1638.4));
HXLINE( 315)		this->d = ((Float)height / (Float)((Float)1638.4));
HXLINE( 318)		if ((rotation != (int)0)) {
HXLINE( 320)			Float cos = ::Math_obj::cos(rotation);
HXLINE( 321)			Float sin = ::Math_obj::sin(rotation);
HXLINE( 323)			this->b = (sin * this->d);
HXLINE( 324)			this->c = (-(sin) * this->a);
HXLINE( 325)			 ::lime::math::Matrix3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 325)			_hx_tmp->a = (_hx_tmp->a * cos);
HXLINE( 326)			 ::lime::math::Matrix3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 326)			_hx_tmp1->d = (_hx_tmp1->d * cos);
            		}
            		else {
HXLINE( 330)			this->b = (int)0;
HXLINE( 331)			this->c = (int)0;
            		}
HXLINE( 335)		this->tx = (tx + ((Float)width / (Float)(int)2));
HXLINE( 336)		this->ty = (ty + ((Float)height / (Float)(int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Matrix3_obj,createGradientBox,(void))

bool Matrix3_obj::equals( ::lime::math::Matrix3 matrix3){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_347_equals)
HXDLIN( 347)		bool _hx_tmp;
HXDLIN( 347)		bool _hx_tmp1;
HXDLIN( 347)		bool _hx_tmp2;
HXDLIN( 347)		bool _hx_tmp3;
HXDLIN( 347)		bool _hx_tmp4;
HXDLIN( 347)		if (hx::IsNotNull( matrix3 )) {
HXDLIN( 347)			_hx_tmp4 = (this->tx == matrix3->tx);
            		}
            		else {
HXDLIN( 347)			_hx_tmp4 = false;
            		}
HXDLIN( 347)		if (_hx_tmp4) {
HXDLIN( 347)			_hx_tmp3 = (this->ty == matrix3->ty);
            		}
            		else {
HXDLIN( 347)			_hx_tmp3 = false;
            		}
HXDLIN( 347)		if (_hx_tmp3) {
HXDLIN( 347)			_hx_tmp2 = (this->a == matrix3->a);
            		}
            		else {
HXDLIN( 347)			_hx_tmp2 = false;
            		}
HXDLIN( 347)		if (_hx_tmp2) {
HXDLIN( 347)			_hx_tmp1 = (this->b == matrix3->b);
            		}
            		else {
HXDLIN( 347)			_hx_tmp1 = false;
            		}
HXDLIN( 347)		if (_hx_tmp1) {
HXDLIN( 347)			_hx_tmp = (this->c == matrix3->c);
            		}
            		else {
HXDLIN( 347)			_hx_tmp = false;
            		}
HXDLIN( 347)		if (_hx_tmp) {
HXDLIN( 347)			return (this->d == matrix3->d);
            		}
            		else {
HXDLIN( 347)			return false;
            		}
HXDLIN( 347)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3_obj,equals,return )

 ::lime::math::Vector2 Matrix3_obj::deltaTransformVector( ::lime::math::Vector2 Vector2, ::lime::math::Vector2 result){
            	HX_GC_STACKFRAME(&_hx_pos_21e31708d26ee405_358_deltaTransformVector)
HXLINE( 360)		if (hx::IsNull( result )) {
HXLINE( 360)			result =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 361)		Float _hx_tmp = (Vector2->x * this->a);
HXDLIN( 361)		result->x = (_hx_tmp + (Vector2->y * this->c));
HXLINE( 362)		Float _hx_tmp1 = (Vector2->x * this->b);
HXDLIN( 362)		result->y = (_hx_tmp1 + (Vector2->y * this->d));
HXLINE( 363)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,deltaTransformVector,return )

void Matrix3_obj::identity(){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_371_identity)
HXLINE( 373)		this->a = (int)1;
HXLINE( 374)		this->b = (int)0;
HXLINE( 375)		this->c = (int)0;
HXLINE( 376)		this->d = (int)1;
HXLINE( 377)		this->tx = (int)0;
HXLINE( 378)		this->ty = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3_obj,identity,(void))

 ::lime::math::Matrix3 Matrix3_obj::invert(){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_387_invert)
HXLINE( 389)		Float norm = (this->a * this->d);
HXDLIN( 389)		Float norm1 = (norm - (this->b * this->c));
HXLINE( 391)		if ((norm1 == (int)0)) {
HXLINE( 393)			this->a = (this->b = (this->c = (this->d = (int)0)));
HXLINE( 394)			this->tx = -(this->tx);
HXLINE( 395)			this->ty = -(this->ty);
            		}
            		else {
HXLINE( 399)			norm1 = ((Float)((Float)1.0) / (Float)norm1);
HXLINE( 400)			Float a1 = (this->d * norm1);
HXLINE( 401)			this->d = (this->a * norm1);
HXLINE( 402)			this->a = a1;
HXLINE( 403)			 ::lime::math::Matrix3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 403)			_hx_tmp->b = (_hx_tmp->b * -(norm1));
HXLINE( 404)			 ::lime::math::Matrix3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 404)			_hx_tmp1->c = (_hx_tmp1->c * -(norm1));
HXLINE( 406)			Float tx1 = (-(this->a) * this->tx);
HXDLIN( 406)			Float tx11 = (tx1 - (this->c * this->ty));
HXLINE( 407)			Float _hx_tmp2 = (-(this->b) * this->tx);
HXDLIN( 407)			this->ty = (_hx_tmp2 - (this->d * this->ty));
HXLINE( 408)			this->tx = tx11;
            		}
HXLINE( 412)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3_obj,invert,return )

void Matrix3_obj::rotate(Float theta){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_430_rotate)
HXLINE( 446)		Float cos = ::Math_obj::cos(theta);
HXLINE( 447)		Float sin = ::Math_obj::sin(theta);
HXLINE( 449)		Float a1 = (this->a * cos);
HXDLIN( 449)		Float a11 = (a1 - (this->b * sin));
HXLINE( 450)		Float _hx_tmp = (this->a * sin);
HXDLIN( 450)		this->b = (_hx_tmp + (this->b * cos));
HXLINE( 451)		this->a = a11;
HXLINE( 453)		Float c1 = (this->c * cos);
HXDLIN( 453)		Float c11 = (c1 - (this->d * sin));
HXLINE( 454)		Float _hx_tmp1 = (this->c * sin);
HXDLIN( 454)		this->d = (_hx_tmp1 + (this->d * cos));
HXLINE( 455)		this->c = c11;
HXLINE( 457)		Float tx1 = (this->tx * cos);
HXDLIN( 457)		Float tx11 = (tx1 - (this->ty * sin));
HXLINE( 458)		Float _hx_tmp2 = (this->tx * sin);
HXDLIN( 458)		this->ty = (_hx_tmp2 + (this->ty * cos));
HXLINE( 459)		this->tx = tx11;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3_obj,rotate,(void))

void Matrix3_obj::scale(Float sx,Float sy){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_469_scale)
HXLINE( 480)		 ::lime::math::Matrix3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 480)		_hx_tmp->a = (_hx_tmp->a * sx);
HXLINE( 481)		 ::lime::math::Matrix3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 481)		_hx_tmp1->b = (_hx_tmp1->b * sy);
HXLINE( 482)		 ::lime::math::Matrix3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 482)		_hx_tmp2->c = (_hx_tmp2->c * sx);
HXLINE( 483)		 ::lime::math::Matrix3 _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 483)		_hx_tmp3->d = (_hx_tmp3->d * sy);
HXLINE( 484)		 ::lime::math::Matrix3 _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 484)		_hx_tmp4->tx = (_hx_tmp4->tx * sx);
HXLINE( 485)		 ::lime::math::Matrix3 _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 485)		_hx_tmp5->ty = (_hx_tmp5->ty * sy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,scale,(void))

void Matrix3_obj::setRotation(Float theta,hx::Null< Float >  __o_scale){
Float scale = __o_scale.Default(1);
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_490_setRotation)
HXLINE( 492)		this->a = (::Math_obj::cos(theta) * scale);
HXLINE( 493)		this->c = (::Math_obj::sin(theta) * scale);
HXLINE( 494)		this->b = -(this->c);
HXLINE( 495)		this->d = this->a;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,setRotation,(void))

void Matrix3_obj::setTo(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_509_setTo)
HXLINE( 511)		this->a = a;
HXLINE( 512)		this->b = b;
HXLINE( 513)		this->c = c;
HXLINE( 514)		this->d = d;
HXLINE( 515)		this->tx = tx;
HXLINE( 516)		this->ty = ty;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Matrix3_obj,setTo,(void))

::String Matrix3_obj::to3DString(hx::Null< bool >  __o_roundPixels){
bool roundPixels = __o_roundPixels.Default(false);
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_531_to3DString)
HXDLIN( 531)		if (roundPixels) {
HXLINE( 533)			::String _hx_tmp = ((((((((((HX_("matrix3d(",96,72,db,ad) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", ",74,26,00,00)) + HX_("0, 0, ",80,3e,0e,9c)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", ",74,26,00,00)) + HX_("0, 0, 0, 0, 1, 0, ",df,b7,27,12));
HXDLIN( 533)			::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::_hx_int(this->tx)) + HX_(", ",74,26,00,00));
HXDLIN( 533)			return ((_hx_tmp1 + ::Std_obj::_hx_int(this->ty)) + HX_(", 0, 1)",88,a3,85,b1));
            		}
            		else {
HXLINE( 537)			return ((((((((((((((HX_("matrix3d(",96,72,db,ad) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", ",74,26,00,00)) + HX_("0, 0, ",80,3e,0e,9c)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", ",74,26,00,00)) + HX_("0, 0, 0, 0, 1, 0, ",df,b7,27,12)) + this->tx) + HX_(", ",74,26,00,00)) + this->ty) + HX_(", 0, 1)",88,a3,85,b1));
            		}
HXLINE( 531)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3_obj,to3DString,return )

::String Matrix3_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_546_toString)
HXDLIN( 546)		return ((((((((((((HX_("matrix(",c7,42,67,93) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", ",74,26,00,00)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", ",74,26,00,00)) + this->tx) + HX_(", ",74,26,00,00)) + this->ty) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3_obj,toString,return )

 ::lime::math::Rectangle Matrix3_obj::transformRect( ::lime::math::Rectangle rect, ::lime::math::Rectangle result){
            	HX_GC_STACKFRAME(&_hx_pos_21e31708d26ee405_559_transformRect)
HXLINE( 561)		if (hx::IsNull( result )) {
HXLINE( 561)			result =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 563)		Float tx0 = (this->a * rect->x);
HXDLIN( 563)		Float tx01 = (tx0 + (this->c * rect->y));
HXLINE( 564)		Float tx1 = tx01;
HXLINE( 565)		Float ty0 = (this->b * rect->x);
HXDLIN( 565)		Float ty01 = (ty0 + (this->d * rect->y));
HXLINE( 566)		Float ty1 = ty01;
HXLINE( 568)		Float tx = this->a;
HXDLIN( 568)		Float tx2 = (tx * (rect->x + rect->width));
HXDLIN( 568)		Float tx3 = (tx2 + (this->c * rect->y));
HXLINE( 569)		Float ty = this->b;
HXDLIN( 569)		Float ty2 = (ty * (rect->x + rect->width));
HXDLIN( 569)		Float ty3 = (ty2 + (this->d * rect->y));
HXLINE( 571)		if ((tx3 < tx01)) {
HXLINE( 571)			tx01 = tx3;
            		}
HXLINE( 572)		if ((ty3 < ty01)) {
HXLINE( 572)			ty01 = ty3;
            		}
HXLINE( 573)		if ((tx3 > tx1)) {
HXLINE( 573)			tx1 = tx3;
            		}
HXLINE( 574)		if ((ty3 > ty1)) {
HXLINE( 574)			ty1 = ty3;
            		}
HXLINE( 576)		Float tx4 = this->a;
HXDLIN( 576)		Float tx5 = (tx4 * (rect->x + rect->width));
HXDLIN( 576)		Float tx6 = this->c;
HXDLIN( 576)		tx3 = (tx5 + (tx6 * (rect->y + rect->height)));
HXLINE( 577)		Float ty4 = this->b;
HXDLIN( 577)		Float ty5 = (ty4 * (rect->x + rect->width));
HXDLIN( 577)		Float ty6 = this->d;
HXDLIN( 577)		ty3 = (ty5 + (ty6 * (rect->y + rect->height)));
HXLINE( 579)		if ((tx3 < tx01)) {
HXLINE( 579)			tx01 = tx3;
            		}
HXLINE( 580)		if ((ty3 < ty01)) {
HXLINE( 580)			ty01 = ty3;
            		}
HXLINE( 581)		if ((tx3 > tx1)) {
HXLINE( 581)			tx1 = tx3;
            		}
HXLINE( 582)		if ((ty3 > ty1)) {
HXLINE( 582)			ty1 = ty3;
            		}
HXLINE( 584)		Float tx7 = (this->a * rect->x);
HXDLIN( 584)		Float tx8 = this->c;
HXDLIN( 584)		tx3 = (tx7 + (tx8 * (rect->y + rect->height)));
HXLINE( 585)		Float ty7 = (this->b * rect->x);
HXDLIN( 585)		Float ty8 = this->d;
HXDLIN( 585)		ty3 = (ty7 + (ty8 * (rect->y + rect->height)));
HXLINE( 587)		if ((tx3 < tx01)) {
HXLINE( 587)			tx01 = tx3;
            		}
HXLINE( 588)		if ((ty3 < ty01)) {
HXLINE( 588)			ty01 = ty3;
            		}
HXLINE( 589)		if ((tx3 > tx1)) {
HXLINE( 589)			tx1 = tx3;
            		}
HXLINE( 590)		if ((ty3 > ty1)) {
HXLINE( 590)			ty1 = ty3;
            		}
HXLINE( 592)		result->setTo((tx01 + tx3),(ty01 + ty3),(tx1 - tx01),(ty1 - ty01));
HXLINE( 593)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,transformRect,return )

 ::lime::math::Vector2 Matrix3_obj::transformVector( ::lime::math::Vector2 pos, ::lime::math::Vector2 result){
            	HX_GC_STACKFRAME(&_hx_pos_21e31708d26ee405_603_transformVector)
HXLINE( 605)		if (hx::IsNull( result )) {
HXLINE( 605)			result =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 606)		Float _hx_tmp = (pos->x * this->a);
HXDLIN( 606)		result->x = ((_hx_tmp + (pos->y * this->c)) + this->tx);
HXLINE( 607)		Float _hx_tmp1 = (pos->x * this->b);
HXDLIN( 607)		result->y = ((_hx_tmp1 + (pos->y * this->d)) + this->ty);
HXLINE( 608)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,transformVector,return )

void Matrix3_obj::translate(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_21e31708d26ee405_618_translate)
HXLINE( 620)		 ::lime::math::Matrix3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 620)		_hx_tmp->tx = (_hx_tmp->tx + dx);
HXLINE( 621)		 ::lime::math::Matrix3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 621)		_hx_tmp1->ty = (_hx_tmp1->ty + dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3_obj,translate,(void))

 ::lime::math::Matrix3 Matrix3_obj::_hx___identity;


hx::ObjectPtr< Matrix3_obj > Matrix3_obj::__new(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	hx::ObjectPtr< Matrix3_obj > __this = new Matrix3_obj();
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

hx::ObjectPtr< Matrix3_obj > Matrix3_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty) {
	Matrix3_obj *__this = (Matrix3_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Matrix3_obj), false, "lime.math.Matrix3"));
	*(void **)__this = Matrix3_obj::_hx_vtable;
	__this->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return __this;
}

Matrix3_obj::Matrix3_obj()
{
}

hx::Val Matrix3_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b ); }
		if (HX_FIELD_EQ(inName,"c") ) { return hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"d") ) { return hx::Val( d ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { return hx::Val( tx ); }
		if (HX_FIELD_EQ(inName,"ty") ) { return hx::Val( ty ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { return hx::Val( copyRowTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"createBox") ) { return hx::Val( createBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"translate") ) { return hx::Val( translate_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"to3DString") ) { return hx::Val( to3DString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { return hx::Val( copyRowFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRotation") ) { return hx::Val( setRotation_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { return hx::Val( copyColumnTo_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transformRect") ) { return hx::Val( transformRect_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { return hx::Val( copyColumnFrom_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"transformVector") ) { return hx::Val( transformVector_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createGradientBox") ) { return hx::Val( createGradientBox_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { return hx::Val( deltaTransformVector_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix3_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"__identity") ) { outValue = ( _hx___identity ); return true; }
	}
	return false;
}

hx::Val Matrix3_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"d") ) { d=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { tx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ty") ) { ty=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Matrix3_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"__identity") ) { _hx___identity=ioValue.Cast<  ::lime::math::Matrix3 >(); return true; }
	}
	return false;
}

void Matrix3_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("c","\x63","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("d","\x64","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("tx","\x84","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("ty","\x85","\x65","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix3_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Matrix3_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix3_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix3_obj,c),HX_HCSTRING("c","\x63","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix3_obj,d),HX_HCSTRING("d","\x64","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix3_obj,tx),HX_HCSTRING("tx","\x84","\x65","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix3_obj,ty),HX_HCSTRING("ty","\x85","\x65","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Matrix3_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::math::Matrix3*/ ,(void *) &Matrix3_obj::_hx___identity,HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Matrix3_obj_sMemberFields[] = {
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("c","\x63","\x00","\x00","\x00"),
	HX_HCSTRING("d","\x64","\x00","\x00","\x00"),
	HX_HCSTRING("tx","\x84","\x65","\x00","\x00"),
	HX_HCSTRING("ty","\x85","\x65","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("createBox","\x6f","\x94","\xd8","\x49"),
	HX_HCSTRING("createGradientBox","\x5f","\xec","\xc0","\x25"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("deltaTransformVector","\x37","\x02","\x9c","\xc2"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("setRotation","\x00","\x07","\xe7","\x38"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("to3DString","\xdd","\xbc","\xef","\x4e"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("transformRect","\xb0","\xcc","\xf4","\x78"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("translate","\x4e","\xd7","\x7f","\x49"),
	::String(null()) };

static void Matrix3_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix3_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix3_obj::_hx___identity,"__identity");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix3_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix3_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix3_obj::_hx___identity,"__identity");
};

#endif

hx::Class Matrix3_obj::__mClass;

static ::String Matrix3_obj_sStaticFields[] = {
	HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c"),
	::String(null())
};

void Matrix3_obj::__register()
{
	hx::Object *dummy = new Matrix3_obj;
	Matrix3_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math.Matrix3","\x05","\x23","\x1b","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix3_obj::__GetStatic;
	__mClass->mSetStaticField = &Matrix3_obj::__SetStatic;
	__mClass->mMarkFunc = Matrix3_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix3_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix3_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix3_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix3_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix3_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix3_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix3_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_21e31708d26ee405_60_boot)
HXDLIN(  60)		_hx___identity =  ::lime::math::Matrix3_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
}

} // end namespace lime
} // end namespace math
