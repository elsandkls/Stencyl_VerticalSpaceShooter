// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4684393cb692a867_74_new,"lime.math.Vector4","new",0xd5c0ed36,"lime.math.Vector4.new","lime/math/Vector4.hx",74,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_90_add,"lime.math.Vector4","add",0xd5b70ef7,"lime.math.Vector4.add","lime/math/Vector4.hx",90,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_123_clone,"lime.math.Vector4","clone",0x28f191b3,"lime.math.Vector4.clone","lime/math/Vector4.hx",123,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_132_copyFrom,"lime.math.Vector4","copyFrom",0xb64da729,"lime.math.Vector4.copyFrom","lime/math/Vector4.hx",132,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_147_crossProduct,"lime.math.Vector4","crossProduct",0xdc193ff9,"lime.math.Vector4.crossProduct","lime/math/Vector4.hx",147,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_161_decrementBy,"lime.math.Vector4","decrementBy",0xf530fda0,"lime.math.Vector4.decrementBy","lime/math/Vector4.hx",161,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_212_dotProduct,"lime.math.Vector4","dotProduct",0xf4c9f190,"lime.math.Vector4.dotProduct","lime/math/Vector4.hx",212,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_227_equals,"lime.math.Vector4","equals",0x5c12fb29,"lime.math.Vector4.equals","lime/math/Vector4.hx",227,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_236_incrementBy,"lime.math.Vector4","incrementBy",0x3c274cbc,"lime.math.Vector4.incrementBy","lime/math/Vector4.hx",236,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_255_nearEquals,"lime.math.Vector4","nearEquals",0xb54b3b31,"lime.math.Vector4.nearEquals","lime/math/Vector4.hx",255,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_264_negate,"lime.math.Vector4","negate",0x03394eac,"lime.math.Vector4.negate","lime/math/Vector4.hx",264,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_277_normalize,"lime.math.Vector4","normalize",0xecbc98e3,"lime.math.Vector4.normalize","lime/math/Vector4.hx",277,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_298_project,"lime.math.Vector4","project",0xf5d652af,"lime.math.Vector4.project","lime/math/Vector4.hx",298,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_311_scaleBy,"lime.math.Vector4","scaleBy",0x64f27ed7,"lime.math.Vector4.scaleBy","lime/math/Vector4.hx",311,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_326_setTo,"lime.math.Vector4","setTo",0x5abe1013,"lime.math.Vector4.setTo","lime/math/Vector4.hx",326,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_342_subtract,"lime.math.Vector4","subtract",0xe5fe107e,"lime.math.Vector4.subtract","lime/math/Vector4.hx",342,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_353_toString,"lime.math.Vector4","toString",0x265b6c16,"lime.math.Vector4.toString","lime/math/Vector4.hx",353,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_367_get_length,"lime.math.Vector4","get_length",0x4668ce99,"lime.math.Vector4.get_length","lime/math/Vector4.hx",367,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_374_get_lengthSquared,"lime.math.Vector4","get_lengthSquared",0xe5b2d78e,"lime.math.Vector4.get_lengthSquared","lime/math/Vector4.hx",374,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_105_angleBetween,"lime.math.Vector4","angleBetween",0xe2247e9f,"lime.math.Vector4.angleBetween","lime/math/Vector4.hx",105,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_176_distance,"lime.math.Vector4","distance",0x59e62e9f,"lime.math.Vector4.distance","lime/math/Vector4.hx",176,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_194_distanceSquared,"lime.math.Vector4","distanceSquared",0x2dd02448,"lime.math.Vector4.distanceSquared","lime/math/Vector4.hx",194,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_381_get_X_AXIS,"lime.math.Vector4","get_X_AXIS",0xb513fadb,"lime.math.Vector4.get_X_AXIS","lime/math/Vector4.hx",381,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_388_get_Y_AXIS,"lime.math.Vector4","get_Y_AXIS",0x1b6f573a,"lime.math.Vector4.get_Y_AXIS","lime/math/Vector4.hx",388,0x7257bf5a)
HX_LOCAL_STACK_FRAME(_hx_pos_4684393cb692a867_395_get_Z_AXIS,"lime.math.Vector4","get_Z_AXIS",0x81cab399,"lime.math.Vector4.get_Z_AXIS","lime/math/Vector4.hx",395,0x7257bf5a)
namespace lime{
namespace math{

void Vector4_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w){
Float x = __o_x.Default(((Float)0.));
Float y = __o_y.Default(((Float)0.));
Float z = __o_z.Default(((Float)0.));
Float w = __o_w.Default(((Float)0.));
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_74_new)
HXLINE(  76)		this->w = w;
HXLINE(  77)		this->x = x;
HXLINE(  78)		this->y = y;
HXLINE(  79)		this->z = z;
            	}

Dynamic Vector4_obj::__CreateEmpty() { return new Vector4_obj; }

void *Vector4_obj::_hx_vtable = 0;

Dynamic Vector4_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector4_obj > _hx_result = new Vector4_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Vector4_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x682e4a34;
}

 ::lime::math::Vector4 Vector4_obj::add( ::lime::math::Vector4 a, ::lime::math::Vector4 result){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_90_add)
HXLINE(  92)		if (hx::IsNull( result )) {
HXLINE(  92)			result =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE(  93)		{
HXLINE(  93)			result->x = (this->x + a->x);
HXDLIN(  93)			result->y = (this->y + a->y);
HXDLIN(  93)			result->z = (this->z + a->z);
            		}
HXLINE(  94)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,add,return )

 ::lime::math::Vector4 Vector4_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_123_clone)
HXDLIN( 123)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,this->x,this->y,this->z,this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,clone,return )

void Vector4_obj::copyFrom( ::lime::math::Vector4 sourceVector4){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_132_copyFrom)
HXLINE( 134)		this->x = sourceVector4->x;
HXLINE( 135)		this->y = sourceVector4->y;
HXLINE( 136)		this->z = sourceVector4->z;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,copyFrom,(void))

 ::lime::math::Vector4 Vector4_obj::crossProduct( ::lime::math::Vector4 a, ::lime::math::Vector4 result){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_147_crossProduct)
HXLINE( 149)		if (hx::IsNull( result )) {
HXLINE( 149)			result =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 150)		{
HXLINE( 150)			Float xa = (this->y * a->z);
HXDLIN( 150)			Float ya = (this->z * a->x);
HXDLIN( 150)			Float ya1 = (ya - (this->x * a->z));
HXDLIN( 150)			Float za = (this->x * a->y);
HXDLIN( 150)			Float za1 = (za - (this->y * a->x));
HXDLIN( 150)			result->x = (xa - (this->z * a->y));
HXDLIN( 150)			result->y = ya1;
HXDLIN( 150)			result->z = za1;
            		}
HXLINE( 151)		result->w = (int)1;
HXLINE( 152)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,crossProduct,return )

void Vector4_obj::decrementBy( ::lime::math::Vector4 a){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_161_decrementBy)
HXLINE( 163)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 163)		_hx_tmp->x = (_hx_tmp->x - a->x);
HXLINE( 164)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 164)		_hx_tmp1->y = (_hx_tmp1->y - a->y);
HXLINE( 165)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 165)		_hx_tmp2->z = (_hx_tmp2->z - a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,decrementBy,(void))

Float Vector4_obj::dotProduct( ::lime::math::Vector4 a){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_212_dotProduct)
HXDLIN( 212)		Float _hx_tmp = (this->x * a->x);
HXDLIN( 212)		Float _hx_tmp1 = (_hx_tmp + (this->y * a->y));
HXDLIN( 212)		return (_hx_tmp1 + (this->z * a->z));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,dotProduct,return )

bool Vector4_obj::equals( ::lime::math::Vector4 toCompare, ::Dynamic __o_allFour){
 ::Dynamic allFour = __o_allFour.Default(false);
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_227_equals)
HXDLIN( 227)		bool _hx_tmp;
HXDLIN( 227)		bool _hx_tmp1;
HXDLIN( 227)		if ((this->x == toCompare->x)) {
HXDLIN( 227)			_hx_tmp1 = (this->y == toCompare->y);
            		}
            		else {
HXDLIN( 227)			_hx_tmp1 = false;
            		}
HXDLIN( 227)		if (_hx_tmp1) {
HXDLIN( 227)			_hx_tmp = (this->z == toCompare->z);
            		}
            		else {
HXDLIN( 227)			_hx_tmp = false;
            		}
HXDLIN( 227)		if (_hx_tmp) {
HXDLIN( 227)			if (!(!(allFour))) {
HXDLIN( 227)				return (this->w == toCompare->w);
            			}
            			else {
HXDLIN( 227)				return true;
            			}
            		}
            		else {
HXDLIN( 227)			return false;
            		}
HXDLIN( 227)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,equals,return )

void Vector4_obj::incrementBy( ::lime::math::Vector4 a){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_236_incrementBy)
HXLINE( 238)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 238)		_hx_tmp->x = (_hx_tmp->x + a->x);
HXLINE( 239)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 239)		_hx_tmp1->y = (_hx_tmp1->y + a->y);
HXLINE( 240)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 240)		_hx_tmp2->z = (_hx_tmp2->z + a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,incrementBy,(void))

bool Vector4_obj::nearEquals( ::lime::math::Vector4 toCompare,Float tolerance, ::Dynamic __o_allFour){
 ::Dynamic allFour = __o_allFour.Default(false);
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_255_nearEquals)
HXDLIN( 255)		bool _hx_tmp;
HXDLIN( 255)		bool _hx_tmp1;
HXDLIN( 255)		if ((::Math_obj::abs((this->x - toCompare->x)) < tolerance)) {
HXDLIN( 255)			_hx_tmp1 = (::Math_obj::abs((this->y - toCompare->y)) < tolerance);
            		}
            		else {
HXDLIN( 255)			_hx_tmp1 = false;
            		}
HXDLIN( 255)		if (_hx_tmp1) {
HXDLIN( 255)			_hx_tmp = (::Math_obj::abs((this->z - toCompare->z)) < tolerance);
            		}
            		else {
HXDLIN( 255)			_hx_tmp = false;
            		}
HXDLIN( 255)		if (_hx_tmp) {
HXDLIN( 255)			if (!(!(allFour))) {
HXDLIN( 255)				return (::Math_obj::abs((this->w - toCompare->w)) < tolerance);
            			}
            			else {
HXDLIN( 255)				return true;
            			}
            		}
            		else {
HXDLIN( 255)			return false;
            		}
HXDLIN( 255)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector4_obj,nearEquals,return )

void Vector4_obj::negate(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_264_negate)
HXLINE( 266)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 266)		_hx_tmp->x = (_hx_tmp->x * (int)-1);
HXLINE( 267)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 267)		_hx_tmp1->y = (_hx_tmp1->y * (int)-1);
HXLINE( 268)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 268)		_hx_tmp2->z = (_hx_tmp2->z * (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,negate,(void))

Float Vector4_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_277_normalize)
HXLINE( 279)		Float l = (this->x * this->x);
HXDLIN( 279)		Float l1 = (l + (this->y * this->y));
HXDLIN( 279)		Float l2 = ::Math_obj::sqrt((l1 + (this->z * this->z)));
HXLINE( 281)		if ((l2 != (int)0)) {
HXLINE( 283)			 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 283)			_hx_tmp->x = ((Float)_hx_tmp->x / (Float)l2);
HXLINE( 284)			 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 284)			_hx_tmp1->y = ((Float)_hx_tmp1->y / (Float)l2);
HXLINE( 285)			 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 285)			_hx_tmp2->z = ((Float)_hx_tmp2->z / (Float)l2);
            		}
HXLINE( 289)		return l2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,normalize,return )

void Vector4_obj::project(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_298_project)
HXLINE( 300)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 300)		_hx_tmp->x = ((Float)_hx_tmp->x / (Float)this->w);
HXLINE( 301)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 301)		_hx_tmp1->y = ((Float)_hx_tmp1->y / (Float)this->w);
HXLINE( 302)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 302)		_hx_tmp2->z = ((Float)_hx_tmp2->z / (Float)this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,project,(void))

void Vector4_obj::scaleBy(Float s){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_311_scaleBy)
HXLINE( 313)		 ::lime::math::Vector4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 313)		_hx_tmp->x = (_hx_tmp->x * s);
HXLINE( 314)		 ::lime::math::Vector4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 314)		_hx_tmp1->y = (_hx_tmp1->y * s);
HXLINE( 315)		 ::lime::math::Vector4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 315)		_hx_tmp2->z = (_hx_tmp2->z * s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector4_obj,scaleBy,(void))

void Vector4_obj::setTo(Float xa,Float ya,Float za){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_326_setTo)
HXLINE( 328)		this->x = xa;
HXLINE( 329)		this->y = ya;
HXLINE( 330)		this->z = za;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector4_obj,setTo,(void))

 ::lime::math::Vector4 Vector4_obj::subtract( ::lime::math::Vector4 a, ::lime::math::Vector4 result){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_342_subtract)
HXLINE( 344)		if (hx::IsNull( result )) {
HXLINE( 344)			result =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 345)		{
HXLINE( 345)			result->x = (this->x - a->x);
HXDLIN( 345)			result->y = (this->y - a->y);
HXDLIN( 345)			result->z = (this->z - a->z);
            		}
HXLINE( 346)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,subtract,return )

::String Vector4_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_353_toString)
HXDLIN( 353)		return ((((((HX_("Vector4(",17,91,6f,48) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(", ",74,26,00,00)) + this->z) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,toString,return )

Float Vector4_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_367_get_length)
HXDLIN( 367)		Float _hx_tmp = (this->x * this->x);
HXDLIN( 367)		Float _hx_tmp1 = (_hx_tmp + (this->y * this->y));
HXDLIN( 367)		return ::Math_obj::sqrt((_hx_tmp1 + (this->z * this->z)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_length,return )

Float Vector4_obj::get_lengthSquared(){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_374_get_lengthSquared)
HXDLIN( 374)		Float _hx_tmp = (this->x * this->x);
HXDLIN( 374)		Float _hx_tmp1 = (_hx_tmp + (this->y * this->y));
HXDLIN( 374)		return (_hx_tmp1 + (this->z * this->z));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_lengthSquared,return )

Float Vector4_obj::angleBetween( ::lime::math::Vector4 a, ::lime::math::Vector4 b){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_105_angleBetween)
HXLINE( 107)		 ::lime::math::Vector4 a0 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,a->x,a->y,a->z,a->w);
HXLINE( 108)		{
HXLINE( 108)			Float l = (a0->x * a0->x);
HXDLIN( 108)			Float l1 = (l + (a0->y * a0->y));
HXDLIN( 108)			Float l2 = ::Math_obj::sqrt((l1 + (a0->z * a0->z)));
HXDLIN( 108)			if ((l2 != (int)0)) {
HXLINE( 108)				 ::lime::math::Vector4 a01 = a0;
HXDLIN( 108)				a01->x = ((Float)a01->x / (Float)l2);
HXDLIN( 108)				 ::lime::math::Vector4 a02 = a0;
HXDLIN( 108)				a02->y = ((Float)a02->y / (Float)l2);
HXDLIN( 108)				 ::lime::math::Vector4 a03 = a0;
HXDLIN( 108)				a03->z = ((Float)a03->z / (Float)l2);
            			}
            		}
HXLINE( 109)		 ::lime::math::Vector4 b0 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,b->x,b->y,b->z,b->w);
HXLINE( 110)		{
HXLINE( 110)			Float l3 = (b0->x * b0->x);
HXDLIN( 110)			Float l4 = (l3 + (b0->y * b0->y));
HXDLIN( 110)			Float l5 = ::Math_obj::sqrt((l4 + (b0->z * b0->z)));
HXDLIN( 110)			if ((l5 != (int)0)) {
HXLINE( 110)				 ::lime::math::Vector4 b01 = b0;
HXDLIN( 110)				b01->x = ((Float)b01->x / (Float)l5);
HXDLIN( 110)				 ::lime::math::Vector4 b02 = b0;
HXDLIN( 110)				b02->y = ((Float)b02->y / (Float)l5);
HXDLIN( 110)				 ::lime::math::Vector4 b03 = b0;
HXDLIN( 110)				b03->z = ((Float)b03->z / (Float)l5);
            			}
            		}
HXLINE( 112)		Float _hx_tmp = (a0->x * b0->x);
HXDLIN( 112)		Float _hx_tmp1 = (_hx_tmp + (a0->y * b0->y));
HXDLIN( 112)		return ::Math_obj::acos((_hx_tmp1 + (a0->z * b0->z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,angleBetween,return )

Float Vector4_obj::distance( ::lime::math::Vector4 pt1, ::lime::math::Vector4 pt2){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_176_distance)
HXLINE( 178)		Float x = (pt2->x - pt1->x);
HXLINE( 179)		Float y = (pt2->y - pt1->y);
HXLINE( 180)		Float z = (pt2->z - pt1->z);
HXLINE( 182)		return ::Math_obj::sqrt((((x * x) + (y * y)) + (z * z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,distance,return )

Float Vector4_obj::distanceSquared( ::lime::math::Vector4 pt1, ::lime::math::Vector4 pt2){
            	HX_STACKFRAME(&_hx_pos_4684393cb692a867_194_distanceSquared)
HXLINE( 196)		Float x = (pt2->x - pt1->x);
HXLINE( 197)		Float y = (pt2->y - pt1->y);
HXLINE( 198)		Float z = (pt2->z - pt1->z);
HXLINE( 200)		return (((x * x) + (y * y)) + (z * z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector4_obj,distanceSquared,return )

 ::lime::math::Vector4 Vector4_obj::get_X_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_381_get_X_AXIS)
HXDLIN( 381)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_X_AXIS,return )

 ::lime::math::Vector4 Vector4_obj::get_Y_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_388_get_Y_AXIS)
HXDLIN( 388)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)1,(int)0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_Y_AXIS,return )

 ::lime::math::Vector4 Vector4_obj::get_Z_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_4684393cb692a867_395_get_Z_AXIS)
HXDLIN( 395)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector4_obj,get_Z_AXIS,return )


hx::ObjectPtr< Vector4_obj > Vector4_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w) {
	hx::ObjectPtr< Vector4_obj > __this = new Vector4_obj();
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

hx::ObjectPtr< Vector4_obj > Vector4_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w) {
	Vector4_obj *__this = (Vector4_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vector4_obj), false, "lime.math.Vector4"));
	*(void **)__this = Vector4_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

Vector4_obj::Vector4_obj()
{
}

hx::Val Vector4_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w ); }
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"negate") ) { return hx::Val( negate_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"project") ) { return hx::Val( project_dyn() ); }
		if (HX_FIELD_EQ(inName,"scaleBy") ) { return hx::Val( scaleBy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dotProduct") ) { return hx::Val( dotProduct_dyn() ); }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { return hx::Val( nearEquals_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"decrementBy") ) { return hx::Val( decrementBy_dyn() ); }
		if (HX_FIELD_EQ(inName,"incrementBy") ) { return hx::Val( incrementBy_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"crossProduct") ) { return hx::Val( crossProduct_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthSquared") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_lengthSquared() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_lengthSquared") ) { return hx::Val( get_lengthSquared_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vector4_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"X_AXIS") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_X_AXIS() ); return true; } }
		if (HX_FIELD_EQ(inName,"Y_AXIS") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_Y_AXIS() ); return true; } }
		if (HX_FIELD_EQ(inName,"Z_AXIS") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_Z_AXIS() ); return true; } }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_X_AXIS") ) { outValue = get_X_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Y_AXIS") ) { outValue = get_Y_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Z_AXIS") ) { outValue = get_Z_AXIS_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleBetween") ) { outValue = angleBetween_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"distanceSquared") ) { outValue = distanceSquared_dyn(); return true; }
	}
	return false;
}

hx::Val Vector4_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vector4_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("lengthSquared","\xe1","\x24","\x45","\x35"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Vector4_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Vector4_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector4_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector4_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector4_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vector4_obj_sStaticStorageInfo = 0;
#endif

static ::String Vector4_obj_sMemberFields[] = {
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("crossProduct","\x8f","\xa7","\xc9","\x63"),
	HX_HCSTRING("decrementBy","\xca","\x1a","\x7a","\xad"),
	HX_HCSTRING("dotProduct","\xa6","\x27","\xf0","\x3d"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("incrementBy","\xe6","\x69","\x70","\xf4"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("project","\xd9","\x12","\xeb","\xf5"),
	HX_HCSTRING("scaleBy","\x01","\x3f","\x07","\x65"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_lengthSquared","\x38","\x30","\xb5","\x3b"),
	::String(null()) };

static void Vector4_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector4_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector4_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector4_obj::__mClass,"__mClass");
};

#endif

hx::Class Vector4_obj::__mClass;

static ::String Vector4_obj_sStaticFields[] = {
	HX_HCSTRING("angleBetween","\x35","\xe6","\xd4","\x69"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("distanceSquared","\x72","\x1e","\x40","\x0c"),
	HX_HCSTRING("get_X_AXIS","\xf1","\x30","\x3a","\xfe"),
	HX_HCSTRING("get_Y_AXIS","\x50","\x8d","\x95","\x64"),
	HX_HCSTRING("get_Z_AXIS","\xaf","\xe9","\xf0","\xca"),
	::String(null())
};

void Vector4_obj::__register()
{
	hx::Object *dummy = new Vector4_obj;
	Vector4_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math.Vector4","\x44","\xda","\x50","\x4d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector4_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vector4_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vector4_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vector4_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vector4_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector4_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector4_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector4_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace math
