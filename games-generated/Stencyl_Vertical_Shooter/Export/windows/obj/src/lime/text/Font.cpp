// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_text_Font
#include <lime/app/Promise_lime_text_Font.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_AbstractHTTPRequest
#include <lime/net/_HTTPRequest/AbstractHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_Bytes
#include <lime/net/_HTTPRequest_Bytes.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_lime_text_Font
#include <lime/net/_HTTPRequest_lime_text_Font.h>
#endif
#ifndef INCLUDED_lime_net__IHTTPRequest
#include <lime/net/_IHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphMetrics
#include <lime/text/GlyphMetrics.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_62_new,"lime.text.Font","new",0x97494f29,"lime.text.Font.new","lime/text/Font.hx",62,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_99_decompose,"lime.text.Font","decompose",0x6e29ff3a,"lime.text.Font.decompose","lime/text/Font.hx",99,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_194_getGlyph,"lime.text.Font","getGlyph",0x5bf955cd,"lime.text.Font.getGlyph","lime/text/Font.hx",194,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_202_getGlyphs,"lime.text.Font","getGlyphs",0x1e31be06,"lime.text.Font.getGlyphs","lime/text/Font.hx",202,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_214_getGlyphMetrics,"lime.text.Font","getGlyphMetrics",0x8c9677f6,"lime.text.Font.getGlyphMetrics","lime/text/Font.hx",214,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_233_renderGlyph,"lime.text.Font","renderGlyph",0xe6e51a3f,"lime.text.Font.renderGlyph","lime/text/Font.hx",233,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_272_renderGlyphs,"lime.text.Font","renderGlyphs",0x2191dd54,"lime.text.Font.renderGlyphs","lime/text/Font.hx",272,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_446___copyFrom,"lime.text.Font","__copyFrom",0x8a0b5b36,"lime.text.Font.__copyFrom","lime/text/Font.hx",446,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_472___fromBytes,"lime.text.Font","__fromBytes",0x257c2b4a,"lime.text.Font.__fromBytes","lime/text/Font.hx",472,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_487___fromFile,"lime.text.Font","__fromFile",0x6331ec7d,"lime.text.Font.__fromFile","lime/text/Font.hx",487,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_502___initializeSource,"lime.text.Font","__initializeSource",0xb57a50c2,"lime.text.Font.__initializeSource","lime/text/Font.hx",502,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_529___loadFromName,"lime.text.Font","__loadFromName",0x6b610412,"lime.text.Font.__loadFromName","lime/text/Font.hx",529,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_641___setSize,"lime.text.Font","__setSize",0x86a86dec,"lime.text.Font.__setSize","lime/text/Font.hx",641,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_116_fromBytes,"lime.text.Font","fromBytes",0x65a32e2a,"lime.text.Font.fromBytes","lime/text/Font.hx",116,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_132_fromFile,"lime.text.Font","fromFile",0x07a4e59d,"lime.text.Font.fromFile","lime/text/Font.hx",132,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_150_loadFromBytes,"lime.text.Font","loadFromBytes",0x5727f7a4,"lime.text.Font.loadFromBytes","lime/text/Font.hx",150,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_160_loadFromFile,"lime.text.Font","loadFromFile",0x5ed36963,"lime.text.Font.loadFromFile","lime/text/Font.hx",160,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_155_loadFromFile,"lime.text.Font","loadFromFile",0x5ed36963,"lime.text.Font.loadFromFile","lime/text/Font.hx",155,0x3be57807)
HX_LOCAL_STACK_FRAME(_hx_pos_51012fd6257f8a4a_184_loadFromName,"lime.text.Font","loadFromName",0x64170d32,"lime.text.Font.loadFromName","lime/text/Font.hx",184,0x3be57807)
namespace lime{
namespace text{

void Font_obj::__construct(::String name){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_62_new)
HXLINE(  64)		if (hx::IsNotNull( name )) {
HXLINE(  66)			this->name = name;
            		}
HXLINE(  70)		if (!(this->_hx___init)) {
HXLINE(  72)			this->ascender = (int)0;
HXLINE(  73)			this->descender = (int)0;
HXLINE(  74)			this->height = (int)0;
HXLINE(  75)			this->numGlyphs = (int)0;
HXLINE(  76)			this->underlinePosition = (int)0;
HXLINE(  77)			this->underlineThickness = (int)0;
HXLINE(  78)			this->unitsPerEM = (int)0;
HXLINE(  80)			if (hx::IsNotNull( this->_hx___fontID )) {
HXLINE(  82)				if (::lime::utils::Assets_obj::isLocal(this->_hx___fontID,null(),null())) {
HXLINE(  84)					this->_hx___fromBytes(::lime::utils::Assets_obj::getBytes(this->_hx___fontID));
            				}
            			}
            			else {
HXLINE(  88)				if (hx::IsNotNull( this->_hx___fontPath )) {
HXLINE(  90)					this->_hx___fromFile(this->_hx___fontPath);
            				}
            			}
            		}
            	}

Dynamic Font_obj::__CreateEmpty() { return new Font_obj; }

void *Font_obj::_hx_vtable = 0;

Dynamic Font_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Font_obj > _hx_result = new Font_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Font_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6aed2e71;
}

 ::Dynamic Font_obj::decompose(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_99_decompose)
HXLINE( 103)		if (hx::IsNull( this->src )) {
HXLINE( 103)			HX_STACK_DO_THROW(HX_("Uninitialized font handle.",3a,84,ab,29));
            		}
HXLINE( 104)		 ::Dynamic data = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_outline_decompose(hx::DynamicPtr(this->src),(int)20480)) );
HXLINE( 105)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,decompose,return )

int Font_obj::getGlyph(::String character){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_194_getGlyph)
HXDLIN( 194)		return ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_glyph_index(hx::DynamicPtr(this->src),character);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,getGlyph,return )

::Array< int > Font_obj::getGlyphs(::String __o_characters){
::String characters = __o_characters.Default(HX_HCSTRING("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ","\xc1","\xf6","\x34","\x50"));
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_202_getGlyphs)
HXLINE( 205)		 ::Dynamic glyphs = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_glyph_indices(hx::DynamicPtr(this->src),characters)) );
HXLINE( 206)		return ( (::Array< int >)(glyphs) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,getGlyphs,return )

 ::lime::text::GlyphMetrics Font_obj::getGlyphMetrics(int glyph){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_214_getGlyphMetrics)
HXLINE( 217)		 ::Dynamic value = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_glyph_metrics(hx::DynamicPtr(this->src),glyph)) );
HXLINE( 218)		 ::lime::text::GlyphMetrics metrics =  ::lime::text::GlyphMetrics_obj::__alloc( HX_CTX );
HXLINE( 220)		metrics->advance =  ::lime::math::Vector2_obj::__alloc( HX_CTX , ::Dynamic(value->__Field(HX_("horizontalAdvance",fe,57,3e,ce),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("verticalAdvance",ac,8e,f7,57),hx::paccDynamic)));
HXLINE( 221)		metrics->height = ( (int)(value->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXLINE( 222)		metrics->horizontalBearing =  ::lime::math::Vector2_obj::__alloc( HX_CTX , ::Dynamic(value->__Field(HX_("horizontalBearingX",ae,21,22,6c),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("horizontalBearingY",af,21,22,6c),hx::paccDynamic)));
HXLINE( 223)		metrics->verticalBearing =  ::lime::math::Vector2_obj::__alloc( HX_CTX , ::Dynamic(value->__Field(HX_("verticalBearingX",40,c3,78,64),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("verticalBearingY",41,c3,78,64),hx::paccDynamic)));
HXLINE( 225)		return metrics;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,getGlyphMetrics,return )

 ::lime::graphics::Image Font_obj::renderGlyph(int glyph,int fontSize){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_233_renderGlyph)
HXLINE( 237)		this->_hx___setSize(fontSize);
HXLINE( 239)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((int)0);
HXLINE( 242)		int dataPosition = (int)0;
HXLINE( 243)		bytes = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_render_glyph(hx::DynamicPtr(this->src),glyph,hx::DynamicPtr(bytes))) );
HXLINE( 245)		bool _hx_tmp;
HXDLIN( 245)		if (hx::IsNotNull( bytes )) {
HXLINE( 245)			_hx_tmp = (bytes->length > (int)0);
            		}
            		else {
HXLINE( 245)			_hx_tmp = false;
            		}
HXDLIN( 245)		if (_hx_tmp) {
HXLINE( 247)			int bytes1 = bytes->b->__get(dataPosition);
HXDLIN( 247)			::Array< unsigned char > bytes2 = bytes->b;
HXDLIN( 247)			int index = ((int)bytes1 | (int)((int)bytes2->__get((dataPosition + (int)1)) << (int)(int)8));
HXDLIN( 247)			::Array< unsigned char > bytes3 = bytes->b;
HXDLIN( 247)			int index1 = ((int)index | (int)((int)bytes3->__get((dataPosition + (int)2)) << (int)(int)16));
HXDLIN( 247)			::Array< unsigned char > bytes4 = bytes->b;
HXDLIN( 247)			int index2 = ((int)index1 | (int)((int)bytes4->__get((dataPosition + (int)3)) << (int)(int)24));
HXDLIN( 247)			dataPosition = (dataPosition + (int)4);
HXLINE( 248)			int bytes5 = bytes->b->__get(dataPosition);
HXDLIN( 248)			::Array< unsigned char > bytes6 = bytes->b;
HXDLIN( 248)			int width = ((int)bytes5 | (int)((int)bytes6->__get((dataPosition + (int)1)) << (int)(int)8));
HXDLIN( 248)			::Array< unsigned char > bytes7 = bytes->b;
HXDLIN( 248)			int width1 = ((int)width | (int)((int)bytes7->__get((dataPosition + (int)2)) << (int)(int)16));
HXDLIN( 248)			::Array< unsigned char > bytes8 = bytes->b;
HXDLIN( 248)			int width2 = ((int)width1 | (int)((int)bytes8->__get((dataPosition + (int)3)) << (int)(int)24));
HXDLIN( 248)			dataPosition = (dataPosition + (int)4);
HXLINE( 249)			int bytes9 = bytes->b->__get(dataPosition);
HXDLIN( 249)			::Array< unsigned char > bytes10 = bytes->b;
HXDLIN( 249)			int height = ((int)bytes9 | (int)((int)bytes10->__get((dataPosition + (int)1)) << (int)(int)8));
HXDLIN( 249)			::Array< unsigned char > bytes11 = bytes->b;
HXDLIN( 249)			int height1 = ((int)height | (int)((int)bytes11->__get((dataPosition + (int)2)) << (int)(int)16));
HXDLIN( 249)			::Array< unsigned char > bytes12 = bytes->b;
HXDLIN( 249)			int height2 = ((int)height1 | (int)((int)bytes12->__get((dataPosition + (int)3)) << (int)(int)24));
HXDLIN( 249)			dataPosition = (dataPosition + (int)4);
HXLINE( 250)			int bytes13 = bytes->b->__get(dataPosition);
HXDLIN( 250)			::Array< unsigned char > bytes14 = bytes->b;
HXDLIN( 250)			int x = ((int)bytes13 | (int)((int)bytes14->__get((dataPosition + (int)1)) << (int)(int)8));
HXDLIN( 250)			::Array< unsigned char > bytes15 = bytes->b;
HXDLIN( 250)			int x1 = ((int)x | (int)((int)bytes15->__get((dataPosition + (int)2)) << (int)(int)16));
HXDLIN( 250)			::Array< unsigned char > bytes16 = bytes->b;
HXDLIN( 250)			int x2 = ((int)x1 | (int)((int)bytes16->__get((dataPosition + (int)3)) << (int)(int)24));
HXDLIN( 250)			dataPosition = (dataPosition + (int)4);
HXLINE( 251)			int bytes17 = bytes->b->__get(dataPosition);
HXDLIN( 251)			::Array< unsigned char > bytes18 = bytes->b;
HXDLIN( 251)			int y = ((int)bytes17 | (int)((int)bytes18->__get((dataPosition + (int)1)) << (int)(int)8));
HXDLIN( 251)			::Array< unsigned char > bytes19 = bytes->b;
HXDLIN( 251)			int y1 = ((int)y | (int)((int)bytes19->__get((dataPosition + (int)2)) << (int)(int)16));
HXDLIN( 251)			::Array< unsigned char > bytes20 = bytes->b;
HXDLIN( 251)			int y2 = ((int)y1 | (int)((int)bytes20->__get((dataPosition + (int)3)) << (int)(int)24));
HXDLIN( 251)			dataPosition = (dataPosition + (int)4);
HXLINE( 253)			 ::haxe::io::Bytes data = bytes->sub(dataPosition,(width2 * height2));
HXLINE( 254)			dataPosition = (dataPosition + (width2 * height2));
HXLINE( 256)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 256)			if (hx::IsNotNull( data )) {
HXLINE( 256)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 256)				int in_byteOffset = (int)0;
HXDLIN( 256)				if ((in_byteOffset < (int)0)) {
HXLINE( 256)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 256)				if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 256)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 256)				int bufferByteLength = data->length;
HXDLIN( 256)				int elementSize = _this->bytesPerElement;
HXDLIN( 256)				int newByteLength = bufferByteLength;
HXDLIN( 256)				{
HXLINE( 256)					newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 256)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 256)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 256)					if ((newByteLength < (int)0)) {
HXLINE( 256)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN( 256)				_this->buffer = data;
HXDLIN( 256)				_this->byteOffset = in_byteOffset;
HXDLIN( 256)				_this->byteLength = newByteLength;
HXDLIN( 256)				_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 256)				this1 = _this;
            			}
            			else {
HXLINE( 256)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 256)			 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width2,height2,(int)1,null());
HXLINE( 257)			 ::lime::graphics::Image image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,(int)0,(int)0,width2,height2,null(),null());
HXLINE( 258)			image->x = x2;
HXLINE( 259)			image->y = y2;
HXLINE( 261)			return image;
            		}
HXLINE( 267)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Font_obj,renderGlyph,return )

 ::haxe::ds::IntMap Font_obj::renderGlyphs(::Array< int > glyphs,int fontSize){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_272_renderGlyphs)
HXLINE( 276)		 ::haxe::ds::IntMap uniqueGlyphs =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 278)		{
HXLINE( 278)			int _g = (int)0;
HXDLIN( 278)			while((_g < glyphs->length)){
HXLINE( 278)				int glyph = glyphs->__get(_g);
HXDLIN( 278)				_g = (_g + (int)1);
HXLINE( 280)				uniqueGlyphs->set(glyph,true);
            			}
            		}
HXLINE( 284)		::Array< int > glyphList = ::Array_obj< int >::__new(0);
HXLINE( 286)		{
HXLINE( 286)			 ::Dynamic key = uniqueGlyphs->keys();
HXDLIN( 286)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 286)				int key1 = ( (int)(key->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 288)				glyphList->push(key1);
            			}
            		}
HXLINE( 304)		::lime::_internal::backend::native::NativeCFFI_obj::lime_font_set_size(hx::DynamicPtr(this->src),fontSize);
HXLINE( 306)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((int)0);
HXLINE( 307)		bytes = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_render_glyphs(hx::DynamicPtr(this->src),hx::DynamicPtr(glyphList),hx::DynamicPtr(bytes))) );
HXLINE( 309)		bool _hx_tmp;
HXDLIN( 309)		if (hx::IsNotNull( bytes )) {
HXLINE( 309)			_hx_tmp = (bytes->length > (int)0);
            		}
            		else {
HXLINE( 309)			_hx_tmp = false;
            		}
HXDLIN( 309)		if (_hx_tmp) {
HXLINE( 311)			int bytesPosition = (int)0;
HXLINE( 312)			int bytes1 = bytes->b->__get(bytesPosition);
HXDLIN( 312)			::Array< unsigned char > bytes2 = bytes->b;
HXDLIN( 312)			int count = ((int)bytes1 | (int)((int)bytes2->__get((bytesPosition + (int)1)) << (int)(int)8));
HXDLIN( 312)			::Array< unsigned char > bytes3 = bytes->b;
HXDLIN( 312)			int count1 = ((int)count | (int)((int)bytes3->__get((bytesPosition + (int)2)) << (int)(int)16));
HXDLIN( 312)			::Array< unsigned char > bytes4 = bytes->b;
HXDLIN( 312)			int count2 = ((int)count1 | (int)((int)bytes4->__get((bytesPosition + (int)3)) << (int)(int)24));
HXDLIN( 312)			bytesPosition = (bytesPosition + (int)4);
HXLINE( 314)			int bufferWidth = (int)128;
HXLINE( 315)			int bufferHeight = (int)128;
HXLINE( 316)			int offsetX = (int)0;
HXLINE( 317)			int offsetY = (int)0;
HXLINE( 318)			int maxRows = (int)0;
HXLINE( 320)			int width;
HXDLIN( 320)			int height;
HXLINE( 321)			int i = (int)0;
HXLINE( 323)			while((i < count2)){
HXLINE( 325)				bytesPosition = (bytesPosition + (int)4);
HXLINE( 326)				int bytes5 = bytes->b->__get(bytesPosition);
HXDLIN( 326)				::Array< unsigned char > bytes6 = bytes->b;
HXDLIN( 326)				int width1 = ((int)bytes5 | (int)((int)bytes6->__get((bytesPosition + (int)1)) << (int)(int)8));
HXDLIN( 326)				::Array< unsigned char > bytes7 = bytes->b;
HXDLIN( 326)				int width2 = ((int)width1 | (int)((int)bytes7->__get((bytesPosition + (int)2)) << (int)(int)16));
HXDLIN( 326)				::Array< unsigned char > bytes8 = bytes->b;
HXDLIN( 326)				width = ((int)width2 | (int)((int)bytes8->__get((bytesPosition + (int)3)) << (int)(int)24));
HXDLIN( 326)				bytesPosition = (bytesPosition + (int)4);
HXLINE( 327)				int bytes9 = bytes->b->__get(bytesPosition);
HXDLIN( 327)				::Array< unsigned char > bytes10 = bytes->b;
HXDLIN( 327)				int height1 = ((int)bytes9 | (int)((int)bytes10->__get((bytesPosition + (int)1)) << (int)(int)8));
HXDLIN( 327)				::Array< unsigned char > bytes11 = bytes->b;
HXDLIN( 327)				int height2 = ((int)height1 | (int)((int)bytes11->__get((bytesPosition + (int)2)) << (int)(int)16));
HXDLIN( 327)				::Array< unsigned char > bytes12 = bytes->b;
HXDLIN( 327)				height = ((int)height2 | (int)((int)bytes12->__get((bytesPosition + (int)3)) << (int)(int)24));
HXDLIN( 327)				bytesPosition = (bytesPosition + (int)4);
HXLINE( 329)				bytesPosition = (bytesPosition + ((int)8 + (width * height)));
HXLINE( 331)				if (((offsetX + width) > bufferWidth)) {
HXLINE( 333)					offsetY = (offsetY + (maxRows + (int)1));
HXLINE( 334)					offsetX = (int)0;
HXLINE( 335)					maxRows = (int)0;
            				}
HXLINE( 339)				if (((offsetY + height) > bufferHeight)) {
HXLINE( 341)					if ((bufferWidth < bufferHeight)) {
HXLINE( 343)						bufferWidth = (bufferWidth * (int)2);
            					}
            					else {
HXLINE( 347)						bufferHeight = (bufferHeight * (int)2);
            					}
HXLINE( 351)					offsetX = (int)0;
HXLINE( 352)					offsetY = (int)0;
HXLINE( 353)					maxRows = (int)0;
HXLINE( 357)					bytesPosition = (int)4;
HXLINE( 358)					i = (int)0;
HXLINE( 359)					continue;
            				}
HXLINE( 363)				offsetX = (offsetX + (width + (int)1));
HXLINE( 365)				if ((height > maxRows)) {
HXLINE( 367)					maxRows = height;
            				}
HXLINE( 371)				i = (i + (int)1);
            			}
HXLINE( 375)			 ::haxe::ds::IntMap map =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 376)			 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(),bufferWidth,bufferHeight,(int)8,null());
HXLINE( 377)			int dataPosition = (int)0;
HXLINE( 378)			 ::haxe::io::Bytes data = ::haxe::io::Bytes_obj::alloc((bufferWidth * bufferHeight));
HXLINE( 380)			bytesPosition = (int)4;
HXLINE( 381)			offsetX = (int)0;
HXLINE( 382)			offsetY = (int)0;
HXLINE( 383)			maxRows = (int)0;
HXLINE( 385)			int index;
HXDLIN( 385)			int x;
HXDLIN( 385)			int y;
HXDLIN( 385)			 ::lime::graphics::Image image;
HXLINE( 387)			{
HXLINE( 387)				int _g1 = (int)0;
HXDLIN( 387)				int _g2 = count2;
HXDLIN( 387)				while((_g1 < _g2)){
HXLINE( 387)					_g1 = (_g1 + (int)1);
HXDLIN( 387)					int i1 = (_g1 - (int)1);
HXLINE( 389)					int bytes13 = bytes->b->__get(bytesPosition);
HXDLIN( 389)					::Array< unsigned char > bytes14 = bytes->b;
HXDLIN( 389)					int index1 = ((int)bytes13 | (int)((int)bytes14->__get((bytesPosition + (int)1)) << (int)(int)8));
HXDLIN( 389)					::Array< unsigned char > bytes15 = bytes->b;
HXDLIN( 389)					int index2 = ((int)index1 | (int)((int)bytes15->__get((bytesPosition + (int)2)) << (int)(int)16));
HXDLIN( 389)					::Array< unsigned char > bytes16 = bytes->b;
HXDLIN( 389)					index = ((int)index2 | (int)((int)bytes16->__get((bytesPosition + (int)3)) << (int)(int)24));
HXDLIN( 389)					bytesPosition = (bytesPosition + (int)4);
HXLINE( 390)					int bytes17 = bytes->b->__get(bytesPosition);
HXDLIN( 390)					::Array< unsigned char > bytes18 = bytes->b;
HXDLIN( 390)					int width3 = ((int)bytes17 | (int)((int)bytes18->__get((bytesPosition + (int)1)) << (int)(int)8));
HXDLIN( 390)					::Array< unsigned char > bytes19 = bytes->b;
HXDLIN( 390)					int width4 = ((int)width3 | (int)((int)bytes19->__get((bytesPosition + (int)2)) << (int)(int)16));
HXDLIN( 390)					::Array< unsigned char > bytes20 = bytes->b;
HXDLIN( 390)					width = ((int)width4 | (int)((int)bytes20->__get((bytesPosition + (int)3)) << (int)(int)24));
HXDLIN( 390)					bytesPosition = (bytesPosition + (int)4);
HXLINE( 391)					int bytes21 = bytes->b->__get(bytesPosition);
HXDLIN( 391)					::Array< unsigned char > bytes22 = bytes->b;
HXDLIN( 391)					int height3 = ((int)bytes21 | (int)((int)bytes22->__get((bytesPosition + (int)1)) << (int)(int)8));
HXDLIN( 391)					::Array< unsigned char > bytes23 = bytes->b;
HXDLIN( 391)					int height4 = ((int)height3 | (int)((int)bytes23->__get((bytesPosition + (int)2)) << (int)(int)16));
HXDLIN( 391)					::Array< unsigned char > bytes24 = bytes->b;
HXDLIN( 391)					height = ((int)height4 | (int)((int)bytes24->__get((bytesPosition + (int)3)) << (int)(int)24));
HXDLIN( 391)					bytesPosition = (bytesPosition + (int)4);
HXLINE( 392)					int bytes25 = bytes->b->__get(bytesPosition);
HXDLIN( 392)					::Array< unsigned char > bytes26 = bytes->b;
HXDLIN( 392)					int x1 = ((int)bytes25 | (int)((int)bytes26->__get((bytesPosition + (int)1)) << (int)(int)8));
HXDLIN( 392)					::Array< unsigned char > bytes27 = bytes->b;
HXDLIN( 392)					int x2 = ((int)x1 | (int)((int)bytes27->__get((bytesPosition + (int)2)) << (int)(int)16));
HXDLIN( 392)					::Array< unsigned char > bytes28 = bytes->b;
HXDLIN( 392)					x = ((int)x2 | (int)((int)bytes28->__get((bytesPosition + (int)3)) << (int)(int)24));
HXDLIN( 392)					bytesPosition = (bytesPosition + (int)4);
HXLINE( 393)					int bytes29 = bytes->b->__get(bytesPosition);
HXDLIN( 393)					::Array< unsigned char > bytes30 = bytes->b;
HXDLIN( 393)					int y1 = ((int)bytes29 | (int)((int)bytes30->__get((bytesPosition + (int)1)) << (int)(int)8));
HXDLIN( 393)					::Array< unsigned char > bytes31 = bytes->b;
HXDLIN( 393)					int y2 = ((int)y1 | (int)((int)bytes31->__get((bytesPosition + (int)2)) << (int)(int)16));
HXDLIN( 393)					::Array< unsigned char > bytes32 = bytes->b;
HXDLIN( 393)					y = ((int)y2 | (int)((int)bytes32->__get((bytesPosition + (int)3)) << (int)(int)24));
HXDLIN( 393)					bytesPosition = (bytesPosition + (int)4);
HXLINE( 395)					if (((offsetX + width) > bufferWidth)) {
HXLINE( 397)						offsetY = (offsetY + (maxRows + (int)1));
HXLINE( 398)						offsetX = (int)0;
HXLINE( 399)						maxRows = (int)0;
            					}
HXLINE( 403)					{
HXLINE( 403)						int _g3 = (int)0;
HXDLIN( 403)						int _g21 = height;
HXDLIN( 403)						while((_g3 < _g21)){
HXLINE( 403)							_g3 = (_g3 + (int)1);
HXDLIN( 403)							int i2 = (_g3 - (int)1);
HXLINE( 405)							dataPosition = (((i2 + offsetY) * bufferWidth) + offsetX);
HXLINE( 406)							data->blit(dataPosition,bytes,bytesPosition,width);
HXLINE( 407)							bytesPosition = (bytesPosition + width);
            						}
            					}
HXLINE( 411)					image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,offsetX,offsetY,width,height,null(),null());
HXLINE( 412)					image->x = x;
HXLINE( 413)					image->y = y;
HXLINE( 415)					map->set(index,image);
HXLINE( 417)					offsetX = (offsetX + (width + (int)1));
HXLINE( 419)					if ((height > maxRows)) {
HXLINE( 421)						maxRows = height;
            					}
            				}
            			}
HXLINE( 430)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 430)			if (hx::IsNotNull( data )) {
HXLINE( 430)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 430)				int in_byteOffset = (int)0;
HXDLIN( 430)				if ((in_byteOffset < (int)0)) {
HXLINE( 430)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 430)				if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 430)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 430)				int bufferByteLength = data->length;
HXDLIN( 430)				int elementSize = _this->bytesPerElement;
HXDLIN( 430)				int newByteLength = bufferByteLength;
HXDLIN( 430)				{
HXLINE( 430)					newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 430)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 430)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 430)					if ((newByteLength < (int)0)) {
HXLINE( 430)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN( 430)				_this->buffer = data;
HXDLIN( 430)				_this->byteOffset = in_byteOffset;
HXDLIN( 430)				_this->byteLength = newByteLength;
HXDLIN( 430)				_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 430)				this1 = _this;
            			}
            			else {
HXLINE( 430)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 430)			buffer->data = this1;
HXLINE( 433)			return map;
            		}
HXLINE( 439)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Font_obj,renderGlyphs,return )

void Font_obj::_hx___copyFrom( ::lime::text::Font other){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_446___copyFrom)
HXDLIN( 446)		if (hx::IsNotNull( other )) {
HXLINE( 448)			this->ascender = other->ascender;
HXLINE( 449)			this->descender = other->descender;
HXLINE( 450)			this->height = other->height;
HXLINE( 451)			this->name = other->name;
HXLINE( 452)			this->numGlyphs = other->numGlyphs;
HXLINE( 453)			this->src = other->src;
HXLINE( 454)			this->underlinePosition = other->underlinePosition;
HXLINE( 455)			this->underlineThickness = other->underlineThickness;
HXLINE( 456)			this->unitsPerEM = other->unitsPerEM;
HXLINE( 458)			this->_hx___fontID = other->_hx___fontID;
HXLINE( 459)			this->_hx___fontPath = other->_hx___fontPath;
HXLINE( 462)			this->_hx___fontPathWithoutDirectory = other->_hx___fontPathWithoutDirectory;
HXLINE( 465)			this->_hx___init = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___copyFrom,(void))

void Font_obj::_hx___fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_472___fromBytes)
HXLINE( 474)		this->_hx___fontPath = null();
HXLINE( 477)		this->_hx___fontPathWithoutDirectory = null();
HXLINE( 479)		this->src = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_load_bytes(hx::DynamicPtr(bytes))) );
HXLINE( 481)		this->_hx___initializeSource();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromBytes,(void))

void Font_obj::_hx___fromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_487___fromFile)
HXLINE( 489)		this->_hx___fontPath = path;
HXLINE( 492)		this->_hx___fontPathWithoutDirectory = ::haxe::io::Path_obj::withoutDirectory(this->_hx___fontPath);
HXLINE( 494)		this->src = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_load_file(hx::DynamicPtr(this->_hx___fontPath))) );
HXLINE( 496)		this->_hx___initializeSource();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromFile,(void))

void Font_obj::_hx___initializeSource(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_502___initializeSource)
HXLINE( 505)		if (hx::IsNotNull( this->src )) {
HXLINE( 507)			if (hx::IsNull( this->name )) {
HXLINE( 509)				this->name = ( (::String)(( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_family_name(hx::DynamicPtr(this->src))) )) );
            			}
HXLINE( 513)			this->ascender = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_ascender(hx::DynamicPtr(this->src));
HXLINE( 514)			this->descender = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_descender(hx::DynamicPtr(this->src));
HXLINE( 515)			this->height = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_height(hx::DynamicPtr(this->src));
HXLINE( 516)			this->numGlyphs = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_num_glyphs(hx::DynamicPtr(this->src));
HXLINE( 517)			this->underlinePosition = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_underline_position(hx::DynamicPtr(this->src));
HXLINE( 518)			this->underlineThickness = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_underline_thickness(hx::DynamicPtr(this->src));
HXLINE( 519)			this->unitsPerEM = ::lime::_internal::backend::native::NativeCFFI_obj::lime_font_get_units_per_em(hx::DynamicPtr(this->src));
            		}
HXLINE( 524)		this->_hx___init = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,_hx___initializeSource,(void))

 ::lime::app::Future Font_obj::_hx___loadFromName(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_529___loadFromName)
HXLINE( 531)		 ::lime::app::Promise_lime_text_Font promise =  ::lime::app::Promise_lime_text_Font_obj::__alloc( HX_CTX );
HXLINE( 601)		promise->error(HX_("",00,00,00,00));
HXLINE( 605)		return promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___loadFromName,return )

void Font_obj::_hx___setSize(int size){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_641___setSize)
HXDLIN( 641)		::lime::_internal::backend::native::NativeCFFI_obj::lime_font_set_size(hx::DynamicPtr(this->src),size);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___setSize,(void))

 ::lime::text::Font Font_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_116_fromBytes)
HXLINE( 118)		if (hx::IsNull( bytes )) {
HXLINE( 118)			return null();
            		}
HXLINE( 120)		 ::lime::text::Font font =  ::lime::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 121)		font->_hx___fromBytes(bytes);
HXLINE( 124)		if (hx::IsNotNull( font->src )) {
HXLINE( 124)			return font;
            		}
            		else {
HXLINE( 124)			return null();
            		}
HXDLIN( 124)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromBytes,return )

 ::lime::text::Font Font_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_132_fromFile)
HXLINE( 134)		if (hx::IsNull( path )) {
HXLINE( 134)			return null();
            		}
HXLINE( 136)		 ::lime::text::Font font =  ::lime::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 137)		font->_hx___fromFile(path);
HXLINE( 140)		if (hx::IsNotNull( font->src )) {
HXLINE( 140)			return font;
            		}
            		else {
HXLINE( 140)			return null();
            		}
HXDLIN( 140)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromFile,return )

 ::lime::app::Future Font_obj::loadFromBytes( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_150_loadFromBytes)
HXDLIN( 150)		return ::lime::app::Future_obj::withValue(::lime::text::Font_obj::fromBytes(bytes));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromBytes,return )

 ::lime::app::Future Font_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::text::Font font){
            			HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_160_loadFromFile)
HXLINE( 160)			if (hx::IsNotNull( font )) {
HXLINE( 162)				return ::lime::app::Future_obj::withValue(font);
            			}
            			else {
HXLINE( 166)				return ::lime::app::Future_obj::withError(HX_("",00,00,00,00));
            			}
HXLINE( 160)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_155_loadFromFile)
HXLINE( 157)		 ::lime::net::_HTTPRequest_lime_text_Font request =  ::lime::net::_HTTPRequest_lime_text_Font_obj::__alloc( HX_CTX ,null());
HXLINE( 158)		return request->load(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromFile,return )

 ::lime::app::Future Font_obj::loadFromName(::String path){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_184_loadFromName)
HXDLIN( 184)		return ::lime::app::Future_obj::withError(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromName,return )


hx::ObjectPtr< Font_obj > Font_obj::__new(::String name) {
	hx::ObjectPtr< Font_obj > __this = new Font_obj();
	__this->__construct(name);
	return __this;
}

hx::ObjectPtr< Font_obj > Font_obj::__alloc(hx::Ctx *_hx_ctx,::String name) {
	Font_obj *__this = (Font_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Font_obj), true, "lime.text.Font"));
	*(void **)__this = Font_obj::_hx_vtable;
	__this->__construct(name);
	return __this;
}

Font_obj::Font_obj()
{
}

void Font_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Font);
	HX_MARK_MEMBER_NAME(ascender,"ascender");
	HX_MARK_MEMBER_NAME(descender,"descender");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(numGlyphs,"numGlyphs");
	HX_MARK_MEMBER_NAME(src,"src");
	HX_MARK_MEMBER_NAME(underlinePosition,"underlinePosition");
	HX_MARK_MEMBER_NAME(underlineThickness,"underlineThickness");
	HX_MARK_MEMBER_NAME(unitsPerEM,"unitsPerEM");
	HX_MARK_MEMBER_NAME(_hx___fontID,"__fontID");
	HX_MARK_MEMBER_NAME(_hx___fontPath,"__fontPath");
	HX_MARK_MEMBER_NAME(_hx___fontPathWithoutDirectory,"__fontPathWithoutDirectory");
	HX_MARK_MEMBER_NAME(_hx___init,"__init");
	HX_MARK_END_CLASS();
}

void Font_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ascender,"ascender");
	HX_VISIT_MEMBER_NAME(descender,"descender");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(numGlyphs,"numGlyphs");
	HX_VISIT_MEMBER_NAME(src,"src");
	HX_VISIT_MEMBER_NAME(underlinePosition,"underlinePosition");
	HX_VISIT_MEMBER_NAME(underlineThickness,"underlineThickness");
	HX_VISIT_MEMBER_NAME(unitsPerEM,"unitsPerEM");
	HX_VISIT_MEMBER_NAME(_hx___fontID,"__fontID");
	HX_VISIT_MEMBER_NAME(_hx___fontPath,"__fontPath");
	HX_VISIT_MEMBER_NAME(_hx___fontPathWithoutDirectory,"__fontPathWithoutDirectory");
	HX_VISIT_MEMBER_NAME(_hx___init,"__init");
}

hx::Val Font_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { return hx::Val( src ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__init") ) { return hx::Val( _hx___init ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ascender") ) { return hx::Val( ascender ); }
		if (HX_FIELD_EQ(inName,"__fontID") ) { return hx::Val( _hx___fontID ); }
		if (HX_FIELD_EQ(inName,"getGlyph") ) { return hx::Val( getGlyph_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"descender") ) { return hx::Val( descender ); }
		if (HX_FIELD_EQ(inName,"numGlyphs") ) { return hx::Val( numGlyphs ); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGlyphs") ) { return hx::Val( getGlyphs_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setSize") ) { return hx::Val( _hx___setSize_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unitsPerEM") ) { return hx::Val( unitsPerEM ); }
		if (HX_FIELD_EQ(inName,"__fontPath") ) { return hx::Val( _hx___fontPath ); }
		if (HX_FIELD_EQ(inName,"__copyFrom") ) { return hx::Val( _hx___copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"renderGlyph") ) { return hx::Val( renderGlyph_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderGlyphs") ) { return hx::Val( renderGlyphs_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__loadFromName") ) { return hx::Val( _hx___loadFromName_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getGlyphMetrics") ) { return hx::Val( getGlyphMetrics_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"underlinePosition") ) { return hx::Val( underlinePosition ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"underlineThickness") ) { return hx::Val( underlineThickness ); }
		if (HX_FIELD_EQ(inName,"__initializeSource") ) { return hx::Val( _hx___initializeSource_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__fontPathWithoutDirectory") ) { return hx::Val( _hx___fontPathWithoutDirectory ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Font_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromName") ) { outValue = loadFromName_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
	}
	return false;
}

hx::Val Font_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { src=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__init") ) { _hx___init=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ascender") ) { ascender=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fontID") ) { _hx___fontID=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"descender") ) { descender=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numGlyphs") ) { numGlyphs=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unitsPerEM") ) { unitsPerEM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fontPath") ) { _hx___fontPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"underlinePosition") ) { underlinePosition=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"underlineThickness") ) { underlineThickness=inValue.Cast< int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__fontPathWithoutDirectory") ) { _hx___fontPathWithoutDirectory=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Font_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("ascender","\x37","\x98","\x10","\x60"));
	outFields->push(HX_HCSTRING("descender","\x17","\x65","\x27","\xab"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("numGlyphs","\x2d","\x44","\x5a","\x5f"));
	outFields->push(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
	outFields->push(HX_HCSTRING("underlinePosition","\xd5","\x5d","\x6b","\x96"));
	outFields->push(HX_HCSTRING("underlineThickness","\xc8","\xba","\x9b","\x91"));
	outFields->push(HX_HCSTRING("unitsPerEM","\x96","\xb6","\x60","\x21"));
	outFields->push(HX_HCSTRING("__fontID","\x8a","\x5a","\x1e","\xa3"));
	outFields->push(HX_HCSTRING("__fontPath","\x34","\x76","\x08","\x70"));
	outFields->push(HX_HCSTRING("__fontPathWithoutDirectory","\x59","\x11","\x28","\x91"));
	outFields->push(HX_HCSTRING("__init","\x30","\x9e","\xb3","\xf4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Font_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Font_obj,ascender),HX_HCSTRING("ascender","\x37","\x98","\x10","\x60")},
	{hx::fsInt,(int)offsetof(Font_obj,descender),HX_HCSTRING("descender","\x17","\x65","\x27","\xab")},
	{hx::fsInt,(int)offsetof(Font_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsString,(int)offsetof(Font_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(Font_obj,numGlyphs),HX_HCSTRING("numGlyphs","\x2d","\x44","\x5a","\x5f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Font_obj,src),HX_HCSTRING("src","\xe4","\xa6","\x57","\x00")},
	{hx::fsInt,(int)offsetof(Font_obj,underlinePosition),HX_HCSTRING("underlinePosition","\xd5","\x5d","\x6b","\x96")},
	{hx::fsInt,(int)offsetof(Font_obj,underlineThickness),HX_HCSTRING("underlineThickness","\xc8","\xba","\x9b","\x91")},
	{hx::fsInt,(int)offsetof(Font_obj,unitsPerEM),HX_HCSTRING("unitsPerEM","\x96","\xb6","\x60","\x21")},
	{hx::fsString,(int)offsetof(Font_obj,_hx___fontID),HX_HCSTRING("__fontID","\x8a","\x5a","\x1e","\xa3")},
	{hx::fsString,(int)offsetof(Font_obj,_hx___fontPath),HX_HCSTRING("__fontPath","\x34","\x76","\x08","\x70")},
	{hx::fsString,(int)offsetof(Font_obj,_hx___fontPathWithoutDirectory),HX_HCSTRING("__fontPathWithoutDirectory","\x59","\x11","\x28","\x91")},
	{hx::fsBool,(int)offsetof(Font_obj,_hx___init),HX_HCSTRING("__init","\x30","\x9e","\xb3","\xf4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Font_obj_sStaticStorageInfo = 0;
#endif

static ::String Font_obj_sMemberFields[] = {
	HX_HCSTRING("ascender","\x37","\x98","\x10","\x60"),
	HX_HCSTRING("descender","\x17","\x65","\x27","\xab"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("numGlyphs","\x2d","\x44","\x5a","\x5f"),
	HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"),
	HX_HCSTRING("underlinePosition","\xd5","\x5d","\x6b","\x96"),
	HX_HCSTRING("underlineThickness","\xc8","\xba","\x9b","\x91"),
	HX_HCSTRING("unitsPerEM","\x96","\xb6","\x60","\x21"),
	HX_HCSTRING("__fontID","\x8a","\x5a","\x1e","\xa3"),
	HX_HCSTRING("__fontPath","\x34","\x76","\x08","\x70"),
	HX_HCSTRING("__fontPathWithoutDirectory","\x59","\x11","\x28","\x91"),
	HX_HCSTRING("__init","\x30","\x9e","\xb3","\xf4"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("getGlyph","\x36","\x0d","\xdc","\xf5"),
	HX_HCSTRING("getGlyphs","\x7d","\x82","\xaf","\x2a"),
	HX_HCSTRING("getGlyphMetrics","\xad","\x6f","\x39","\x58"),
	HX_HCSTRING("renderGlyph","\x76","\x2a","\xb6","\x61"),
	HX_HCSTRING("renderGlyphs","\x3d","\xfd","\xae","\x1d"),
	HX_HCSTRING("__copyFrom","\xdf","\x7e","\x99","\x6b"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__initializeSource","\x6b","\xc5","\xc1","\x17"),
	HX_HCSTRING("__loadFromName","\x3b","\xb0","\xf4","\x80"),
	HX_HCSTRING("__setSize","\x63","\x32","\x26","\x93"),
	::String(null()) };

static void Font_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Font_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Font_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Font_obj::__mClass,"__mClass");
};

#endif

hx::Class Font_obj::__mClass;

static ::String Font_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	HX_HCSTRING("loadFromName","\x1b","\x2d","\x34","\x60"),
	::String(null())
};

void Font_obj::__register()
{
	hx::Object *dummy = new Font_obj;
	Font_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.text.Font","\xb7","\x86","\x7e","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Font_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Font_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Font_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Font_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Font_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Font_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Font_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Font_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace text
