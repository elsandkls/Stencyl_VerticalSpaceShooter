// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_text_harfbuzz__HBLanguage_HBLanguage_Impl_
#include <lime/text/harfbuzz/_HBLanguage/HBLanguage_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ea4d32685afb113e_13__new,"lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_","_new",0x28591bba,"lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_._new","lime/text/harfbuzz/HBLanguage.hx",13,0x01dc06e5)
HX_LOCAL_STACK_FRAME(_hx_pos_ea4d32685afb113e_32_toString,"lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_","toString",0xeccd7785,"lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_.toString","lime/text/harfbuzz/HBLanguage.hx",32,0x01dc06e5)
HX_LOCAL_STACK_FRAME(_hx_pos_ea4d32685afb113e_52_fromString,"lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_","fromString",0xdaecfcf4,"lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_.fromString","lime/text/harfbuzz/HBLanguage.hx",52,0x01dc06e5)
namespace lime{
namespace text{
namespace harfbuzz{
namespace _HBLanguage{

void HBLanguage_Impl__obj::__construct() { }

Dynamic HBLanguage_Impl__obj::__CreateEmpty() { return new HBLanguage_Impl__obj; }

void *HBLanguage_Impl__obj::_hx_vtable = 0;

Dynamic HBLanguage_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HBLanguage_Impl__obj > _hx_result = new HBLanguage_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HBLanguage_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5ce3d699;
}

 ::Dynamic HBLanguage_Impl__obj::_new(::String language){
            	HX_STACKFRAME(&_hx_pos_ea4d32685afb113e_13__new)
HXDLIN(  13)		 ::Dynamic this1;
HXLINE(  16)		if (hx::IsNotNull( language )) {
HXLINE(  18)			this1 = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_language_from_string(language)) );
            		}
            		else {
HXLINE(  22)			this1 = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_language_get_default()) );
            		}
HXLINE(  13)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HBLanguage_Impl__obj,_new,return )

::String HBLanguage_Impl__obj::toString( ::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_ea4d32685afb113e_32_toString)
HXLINE(  35)		if (hx::IsNotNull( this1 )) {
HXLINE(  37)			 ::hx::Object * result = ::lime::_internal::backend::native::NativeCFFI_obj::lime_hb_language_to_string(hx::DynamicPtr(this1));
HXLINE(  41)			return ( ( ::Dynamic)(result) );
            		}
HXLINE(  45)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HBLanguage_Impl__obj,toString,return )

 ::Dynamic HBLanguage_Impl__obj::fromString(::String value){
            	HX_STACKFRAME(&_hx_pos_ea4d32685afb113e_52_fromString)
HXDLIN(  52)		return ::lime::text::harfbuzz::_HBLanguage::HBLanguage_Impl__obj::_new(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HBLanguage_Impl__obj,fromString,return )


HBLanguage_Impl__obj::HBLanguage_Impl__obj()
{
}

bool HBLanguage_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *HBLanguage_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *HBLanguage_Impl__obj_sStaticStorageInfo = 0;
#endif

static void HBLanguage_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HBLanguage_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HBLanguage_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HBLanguage_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class HBLanguage_Impl__obj::__mClass;

static ::String HBLanguage_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	::String(null())
};

void HBLanguage_Impl__obj::__register()
{
	hx::Object *dummy = new HBLanguage_Impl__obj;
	HBLanguage_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_","\xb5","\xf8","\xa9","\xae");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HBLanguage_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HBLanguage_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(HBLanguage_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< HBLanguage_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HBLanguage_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HBLanguage_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HBLanguage_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace text
} // end namespace harfbuzz
} // end namespace _HBLanguage
