// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED__RoxGestureAgent_TouchPoint
#include <_RoxGestureAgent/TouchPoint.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e3ebb681a953f4a4_427_new,"_RoxGestureAgent.TouchPoint","new",0xd8708cb9,"_RoxGestureAgent.TouchPoint.new","RoxGestureAgent.hx",427,0x509ef107)
HX_LOCAL_STACK_FRAME(_hx_pos_e3ebb681a953f4a4_438_distSqr,"_RoxGestureAgent.TouchPoint","distSqr",0x67b07727,"_RoxGestureAgent.TouchPoint.distSqr","RoxGestureAgent.hx",438,0x509ef107)
namespace _RoxGestureAgent{

void TouchPoint_obj::__construct( ::openfl::display::InteractiveObject src, ::openfl::events::MouseEvent e,int touchId){
            	HX_GC_STACKFRAME(&_hx_pos_e3ebb681a953f4a4_427_new)
HXLINE( 428)		this->tid = touchId;
HXLINE( 429)		this->sx = e->stageX;
HXLINE( 430)		this->sy = e->stageY;
HXLINE( 431)		this->spt =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->sx,this->sy);
HXLINE( 432)		this->lpt = src->globalToLocal(this->spt);
HXLINE( 433)		this->lx = this->lpt->x;
HXLINE( 434)		this->ly = this->lpt->y;
HXLINE( 435)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 435)		Float _hx_tmp;
HXDLIN( 435)		if ((timer > (int)0)) {
HXLINE( 435)			_hx_tmp = ((Float)timer / (Float)(int)1000);
            		}
            		else {
HXLINE( 435)			_hx_tmp = (int)0;
            		}
HXDLIN( 435)		this->time = _hx_tmp;
            	}

Dynamic TouchPoint_obj::__CreateEmpty() { return new TouchPoint_obj; }

void *TouchPoint_obj::_hx_vtable = 0;

Dynamic TouchPoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TouchPoint_obj > _hx_result = new TouchPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TouchPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2bdf1c51;
}

Float TouchPoint_obj::distSqr( ::_RoxGestureAgent::TouchPoint pt){
            	HX_STACKFRAME(&_hx_pos_e3ebb681a953f4a4_438_distSqr)
HXLINE( 439)		Float dx = (pt->sx - this->sx);
HXDLIN( 439)		Float dy = (pt->sy - this->sy);
HXLINE( 440)		return ((dx * dx) + (dy * dy));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchPoint_obj,distSqr,return )


hx::ObjectPtr< TouchPoint_obj > TouchPoint_obj::__new( ::openfl::display::InteractiveObject src, ::openfl::events::MouseEvent e,int touchId) {
	hx::ObjectPtr< TouchPoint_obj > __this = new TouchPoint_obj();
	__this->__construct(src,e,touchId);
	return __this;
}

hx::ObjectPtr< TouchPoint_obj > TouchPoint_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::InteractiveObject src, ::openfl::events::MouseEvent e,int touchId) {
	TouchPoint_obj *__this = (TouchPoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TouchPoint_obj), true, "_RoxGestureAgent.TouchPoint"));
	*(void **)__this = TouchPoint_obj::_hx_vtable;
	__this->__construct(src,e,touchId);
	return __this;
}

TouchPoint_obj::TouchPoint_obj()
{
}

void TouchPoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TouchPoint);
	HX_MARK_MEMBER_NAME(tid,"tid");
	HX_MARK_MEMBER_NAME(lx,"lx");
	HX_MARK_MEMBER_NAME(ly,"ly");
	HX_MARK_MEMBER_NAME(sx,"sx");
	HX_MARK_MEMBER_NAME(sy,"sy");
	HX_MARK_MEMBER_NAME(lpt,"lpt");
	HX_MARK_MEMBER_NAME(spt,"spt");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_END_CLASS();
}

void TouchPoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tid,"tid");
	HX_VISIT_MEMBER_NAME(lx,"lx");
	HX_VISIT_MEMBER_NAME(ly,"ly");
	HX_VISIT_MEMBER_NAME(sx,"sx");
	HX_VISIT_MEMBER_NAME(sy,"sy");
	HX_VISIT_MEMBER_NAME(lpt,"lpt");
	HX_VISIT_MEMBER_NAME(spt,"spt");
	HX_VISIT_MEMBER_NAME(time,"time");
}

hx::Val TouchPoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lx") ) { return hx::Val( lx ); }
		if (HX_FIELD_EQ(inName,"ly") ) { return hx::Val( ly ); }
		if (HX_FIELD_EQ(inName,"sx") ) { return hx::Val( sx ); }
		if (HX_FIELD_EQ(inName,"sy") ) { return hx::Val( sy ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"tid") ) { return hx::Val( tid ); }
		if (HX_FIELD_EQ(inName,"lpt") ) { return hx::Val( lpt ); }
		if (HX_FIELD_EQ(inName,"spt") ) { return hx::Val( spt ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"distSqr") ) { return hx::Val( distSqr_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TouchPoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lx") ) { lx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ly") ) { ly=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sx") ) { sx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sy") ) { sy=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"tid") ) { tid=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lpt") ) { lpt=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spt") ) { spt=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TouchPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tid","\x4f","\x61","\x58","\x00"));
	outFields->push(HX_HCSTRING("lx","\x8c","\x5e","\x00","\x00"));
	outFields->push(HX_HCSTRING("ly","\x8d","\x5e","\x00","\x00"));
	outFields->push(HX_HCSTRING("sx","\xa5","\x64","\x00","\x00"));
	outFields->push(HX_HCSTRING("sy","\xa6","\x64","\x00","\x00"));
	outFields->push(HX_HCSTRING("lpt","\x70","\x55","\x52","\x00"));
	outFields->push(HX_HCSTRING("spt","\x37","\xa5","\x57","\x00"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TouchPoint_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TouchPoint_obj,tid),HX_HCSTRING("tid","\x4f","\x61","\x58","\x00")},
	{hx::fsFloat,(int)offsetof(TouchPoint_obj,lx),HX_HCSTRING("lx","\x8c","\x5e","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TouchPoint_obj,ly),HX_HCSTRING("ly","\x8d","\x5e","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TouchPoint_obj,sx),HX_HCSTRING("sx","\xa5","\x64","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TouchPoint_obj,sy),HX_HCSTRING("sy","\xa6","\x64","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(TouchPoint_obj,lpt),HX_HCSTRING("lpt","\x70","\x55","\x52","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(TouchPoint_obj,spt),HX_HCSTRING("spt","\x37","\xa5","\x57","\x00")},
	{hx::fsFloat,(int)offsetof(TouchPoint_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TouchPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String TouchPoint_obj_sMemberFields[] = {
	HX_HCSTRING("tid","\x4f","\x61","\x58","\x00"),
	HX_HCSTRING("lx","\x8c","\x5e","\x00","\x00"),
	HX_HCSTRING("ly","\x8d","\x5e","\x00","\x00"),
	HX_HCSTRING("sx","\xa5","\x64","\x00","\x00"),
	HX_HCSTRING("sy","\xa6","\x64","\x00","\x00"),
	HX_HCSTRING("lpt","\x70","\x55","\x52","\x00"),
	HX_HCSTRING("spt","\x37","\xa5","\x57","\x00"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("distSqr","\x4e","\x1a","\xdc","\xbd"),
	::String(null()) };

static void TouchPoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TouchPoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TouchPoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TouchPoint_obj::__mClass,"__mClass");
};

#endif

hx::Class TouchPoint_obj::__mClass;

void TouchPoint_obj::__register()
{
	hx::Object *dummy = new TouchPoint_obj;
	TouchPoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("_RoxGestureAgent.TouchPoint","\x47","\xbc","\xb3","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TouchPoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TouchPoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TouchPoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TouchPoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TouchPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TouchPoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace _RoxGestureAgent
