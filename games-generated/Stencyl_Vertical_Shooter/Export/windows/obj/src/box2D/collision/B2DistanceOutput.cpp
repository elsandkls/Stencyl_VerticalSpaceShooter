// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2DistanceOutput
#include <box2D/collision/B2DistanceOutput.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_353530376586e26d_28_new,"box2D.collision.B2DistanceOutput","new",0x65975805,"box2D.collision.B2DistanceOutput.new","box2D/collision/B2DistanceOutput.hx",28,0xf7153509)
namespace box2D{
namespace collision{

void B2DistanceOutput_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_353530376586e26d_28_new)
HXLINE(  30)		this->pointA =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  31)		this->pointB =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}

Dynamic B2DistanceOutput_obj::__CreateEmpty() { return new B2DistanceOutput_obj; }

void *B2DistanceOutput_obj::_hx_vtable = 0;

Dynamic B2DistanceOutput_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2DistanceOutput_obj > _hx_result = new B2DistanceOutput_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2DistanceOutput_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x198f797f;
}


hx::ObjectPtr< B2DistanceOutput_obj > B2DistanceOutput_obj::__new() {
	hx::ObjectPtr< B2DistanceOutput_obj > __this = new B2DistanceOutput_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2DistanceOutput_obj > B2DistanceOutput_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2DistanceOutput_obj *__this = (B2DistanceOutput_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2DistanceOutput_obj), true, "box2D.collision.B2DistanceOutput"));
	*(void **)__this = B2DistanceOutput_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2DistanceOutput_obj::B2DistanceOutput_obj()
{
}

void B2DistanceOutput_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2DistanceOutput);
	HX_MARK_MEMBER_NAME(pointA,"pointA");
	HX_MARK_MEMBER_NAME(pointB,"pointB");
	HX_MARK_MEMBER_NAME(distance,"distance");
	HX_MARK_MEMBER_NAME(iterations,"iterations");
	HX_MARK_END_CLASS();
}

void B2DistanceOutput_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pointA,"pointA");
	HX_VISIT_MEMBER_NAME(pointB,"pointB");
	HX_VISIT_MEMBER_NAME(distance,"distance");
	HX_VISIT_MEMBER_NAME(iterations,"iterations");
}

hx::Val B2DistanceOutput_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"pointA") ) { return hx::Val( pointA ); }
		if (HX_FIELD_EQ(inName,"pointB") ) { return hx::Val( pointB ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { return hx::Val( distance ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"iterations") ) { return hx::Val( iterations ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2DistanceOutput_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"pointA") ) { pointA=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointB") ) { pointB=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { distance=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"iterations") ) { iterations=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2DistanceOutput_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pointA","\xf1","\x11","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("pointB","\xf2","\x11","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"));
	outFields->push(HX_HCSTRING("iterations","\x36","\xf3","\x39","\x62"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2DistanceOutput_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2DistanceOutput_obj,pointA),HX_HCSTRING("pointA","\xf1","\x11","\x2e","\xf7")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2DistanceOutput_obj,pointB),HX_HCSTRING("pointB","\xf2","\x11","\x2e","\xf7")},
	{hx::fsFloat,(int)offsetof(B2DistanceOutput_obj,distance),HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b")},
	{hx::fsInt,(int)offsetof(B2DistanceOutput_obj,iterations),HX_HCSTRING("iterations","\x36","\xf3","\x39","\x62")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2DistanceOutput_obj_sStaticStorageInfo = 0;
#endif

static ::String B2DistanceOutput_obj_sMemberFields[] = {
	HX_HCSTRING("pointA","\xf1","\x11","\x2e","\xf7"),
	HX_HCSTRING("pointB","\xf2","\x11","\x2e","\xf7"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("iterations","\x36","\xf3","\x39","\x62"),
	::String(null()) };

static void B2DistanceOutput_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2DistanceOutput_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2DistanceOutput_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2DistanceOutput_obj::__mClass,"__mClass");
};

#endif

hx::Class B2DistanceOutput_obj::__mClass;

void B2DistanceOutput_obj::__register()
{
	hx::Object *dummy = new B2DistanceOutput_obj;
	B2DistanceOutput_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2DistanceOutput","\x93","\xf1","\xa7","\xb1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2DistanceOutput_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2DistanceOutput_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2DistanceOutput_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2DistanceOutput_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2DistanceOutput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2DistanceOutput_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
