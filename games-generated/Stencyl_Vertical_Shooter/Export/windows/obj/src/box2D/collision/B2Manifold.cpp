// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2Manifold
#include <box2D/collision/B2Manifold.h>
#endif
#ifndef INCLUDED_box2D_collision_B2ManifoldPoint
#include <box2D/collision/B2ManifoldPoint.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ed659c2e77c54c96_46_new,"box2D.collision.B2Manifold","new",0x06ae313f,"box2D.collision.B2Manifold.new","box2D/collision/B2Manifold.hx",46,0x57fc2e8f)
HX_LOCAL_STACK_FRAME(_hx_pos_ed659c2e77c54c96_55_reset,"box2D.collision.B2Manifold","reset",0x0123e06e,"box2D.collision.B2Manifold.reset","box2D/collision/B2Manifold.hx",55,0x57fc2e8f)
HX_LOCAL_STACK_FRAME(_hx_pos_ed659c2e77c54c96_64_set,"box2D.collision.B2Manifold","set",0x06b1fc81,"box2D.collision.B2Manifold.set","box2D/collision/B2Manifold.hx",64,0x57fc2e8f)
HX_LOCAL_STACK_FRAME(_hx_pos_ed659c2e77c54c96_74_copy,"box2D.collision.B2Manifold","copy",0xca7f1df6,"box2D.collision.B2Manifold.copy","box2D/collision/B2Manifold.hx",74,0x57fc2e8f)
HX_LOCAL_STACK_FRAME(_hx_pos_ed659c2e77c54c96_90_boot,"box2D.collision.B2Manifold","boot",0xc9d5e673,"box2D.collision.B2Manifold.boot","box2D/collision/B2Manifold.hx",90,0x57fc2e8f)
HX_LOCAL_STACK_FRAME(_hx_pos_ed659c2e77c54c96_91_boot,"box2D.collision.B2Manifold","boot",0xc9d5e673,"box2D.collision.B2Manifold.boot","box2D/collision/B2Manifold.hx",91,0x57fc2e8f)
HX_LOCAL_STACK_FRAME(_hx_pos_ed659c2e77c54c96_92_boot,"box2D.collision.B2Manifold","boot",0xc9d5e673,"box2D.collision.B2Manifold.boot","box2D/collision/B2Manifold.hx",92,0x57fc2e8f)
namespace box2D{
namespace collision{

void B2Manifold_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ed659c2e77c54c96_46_new)
HXLINE(  47)		this->m_pointCount = (int)0;
HXLINE(  48)		this->m_points = ::Array_obj< ::Dynamic>::__new();
HXLINE(  49)		{
HXLINE(  49)			int _g1 = (int)0;
HXDLIN(  49)			int _g = ::box2D::common::B2Settings_obj::b2_maxManifoldPoints;
HXDLIN(  49)			while((_g1 < _g)){
HXLINE(  49)				_g1 = (_g1 + (int)1);
HXDLIN(  49)				int i = (_g1 - (int)1);
HXLINE(  50)				::Array< ::Dynamic> _hx_tmp = this->m_points;
HXDLIN(  50)				_hx_tmp[i] =  ::box2D::collision::B2ManifoldPoint_obj::__alloc( HX_CTX );
            			}
            		}
HXLINE(  52)		this->m_localPlaneNormal =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  53)		this->m_localPoint =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}

Dynamic B2Manifold_obj::__CreateEmpty() { return new B2Manifold_obj; }

void *B2Manifold_obj::_hx_vtable = 0;

Dynamic B2Manifold_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Manifold_obj > _hx_result = new B2Manifold_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2Manifold_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x657ba655;
}

void B2Manifold_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_ed659c2e77c54c96_55_reset)
HXLINE(  56)		{
HXLINE(  56)			int _g1 = (int)0;
HXDLIN(  56)			int _g = ::box2D::common::B2Settings_obj::b2_maxManifoldPoints;
HXDLIN(  56)			while((_g1 < _g)){
HXLINE(  56)				_g1 = (_g1 + (int)1);
HXDLIN(  56)				int i = (_g1 - (int)1);
HXLINE(  57)				this->m_points->__get(i).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->reset();
            			}
            		}
HXLINE(  59)		{
HXLINE(  59)			 ::box2D::common::math::B2Vec2 _this = this->m_localPlaneNormal;
HXDLIN(  59)			_this->x = ((Float)0.0);
HXDLIN(  59)			_this->y = ((Float)0.0);
            		}
HXLINE(  60)		{
HXLINE(  60)			 ::box2D::common::math::B2Vec2 _this1 = this->m_localPoint;
HXDLIN(  60)			_this1->x = ((Float)0.0);
HXDLIN(  60)			_this1->y = ((Float)0.0);
            		}
HXLINE(  61)		this->m_type = (int)0;
HXLINE(  62)		this->m_pointCount = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Manifold_obj,reset,(void))

void B2Manifold_obj::set( ::box2D::collision::B2Manifold m){
            	HX_STACKFRAME(&_hx_pos_ed659c2e77c54c96_64_set)
HXLINE(  65)		this->m_pointCount = m->m_pointCount;
HXLINE(  66)		{
HXLINE(  66)			int _g1 = (int)0;
HXDLIN(  66)			int _g = ::box2D::common::B2Settings_obj::b2_maxManifoldPoints;
HXDLIN(  66)			while((_g1 < _g)){
HXLINE(  66)				_g1 = (_g1 + (int)1);
HXDLIN(  66)				int i = (_g1 - (int)1);
HXLINE(  67)				 ::box2D::collision::B2ManifoldPoint _hx_tmp = this->m_points->__get(i).StaticCast<  ::box2D::collision::B2ManifoldPoint >();
HXDLIN(  67)				_hx_tmp->set(m->m_points->__get(i).StaticCast<  ::box2D::collision::B2ManifoldPoint >());
            			}
            		}
HXLINE(  69)		{
HXLINE(  69)			 ::box2D::common::math::B2Vec2 _this = this->m_localPlaneNormal;
HXDLIN(  69)			 ::box2D::common::math::B2Vec2 v = m->m_localPlaneNormal;
HXDLIN(  69)			_this->x = v->x;
HXDLIN(  69)			_this->y = v->y;
            		}
HXLINE(  70)		{
HXLINE(  70)			 ::box2D::common::math::B2Vec2 _this1 = this->m_localPoint;
HXDLIN(  70)			 ::box2D::common::math::B2Vec2 v1 = m->m_localPoint;
HXDLIN(  70)			_this1->x = v1->x;
HXDLIN(  70)			_this1->y = v1->y;
            		}
HXLINE(  71)		this->m_type = m->m_type;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Manifold_obj,set,(void))

 ::box2D::collision::B2Manifold B2Manifold_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_ed659c2e77c54c96_74_copy)
HXLINE(  75)		 ::box2D::collision::B2Manifold copy =  ::box2D::collision::B2Manifold_obj::__alloc( HX_CTX );
HXLINE(  76)		copy->set(hx::ObjectPtr<OBJ_>(this));
HXLINE(  77)		return copy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Manifold_obj,copy,return )

int B2Manifold_obj::e_circles;

int B2Manifold_obj::e_faceA;

int B2Manifold_obj::e_faceB;


hx::ObjectPtr< B2Manifold_obj > B2Manifold_obj::__new() {
	hx::ObjectPtr< B2Manifold_obj > __this = new B2Manifold_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2Manifold_obj > B2Manifold_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2Manifold_obj *__this = (B2Manifold_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Manifold_obj), true, "box2D.collision.B2Manifold"));
	*(void **)__this = B2Manifold_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2Manifold_obj::B2Manifold_obj()
{
}

void B2Manifold_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Manifold);
	HX_MARK_MEMBER_NAME(m_points,"m_points");
	HX_MARK_MEMBER_NAME(m_localPlaneNormal,"m_localPlaneNormal");
	HX_MARK_MEMBER_NAME(m_localPoint,"m_localPoint");
	HX_MARK_MEMBER_NAME(m_type,"m_type");
	HX_MARK_MEMBER_NAME(m_pointCount,"m_pointCount");
	HX_MARK_END_CLASS();
}

void B2Manifold_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_points,"m_points");
	HX_VISIT_MEMBER_NAME(m_localPlaneNormal,"m_localPlaneNormal");
	HX_VISIT_MEMBER_NAME(m_localPoint,"m_localPoint");
	HX_VISIT_MEMBER_NAME(m_type,"m_type");
	HX_VISIT_MEMBER_NAME(m_pointCount,"m_pointCount");
}

hx::Val B2Manifold_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_type") ) { return hx::Val( m_type ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_points") ) { return hx::Val( m_points ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_localPoint") ) { return hx::Val( m_localPoint ); }
		if (HX_FIELD_EQ(inName,"m_pointCount") ) { return hx::Val( m_pointCount ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"m_localPlaneNormal") ) { return hx::Val( m_localPlaneNormal ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2Manifold_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"m_type") ) { m_type=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_points") ) { m_points=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_localPoint") ) { m_localPoint=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_pointCount") ) { m_pointCount=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"m_localPlaneNormal") ) { m_localPlaneNormal=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2Manifold_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_points","\xf5","\xba","\x1f","\xc0"));
	outFields->push(HX_HCSTRING("m_localPlaneNormal","\x4a","\xf5","\x33","\x35"));
	outFields->push(HX_HCSTRING("m_localPoint","\xb7","\xd0","\x8e","\xcf"));
	outFields->push(HX_HCSTRING("m_type","\x0c","\x63","\x00","\x95"));
	outFields->push(HX_HCSTRING("m_pointCount","\x31","\xd8","\x2c","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Manifold_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2Manifold_obj,m_points),HX_HCSTRING("m_points","\xf5","\xba","\x1f","\xc0")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Manifold_obj,m_localPlaneNormal),HX_HCSTRING("m_localPlaneNormal","\x4a","\xf5","\x33","\x35")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Manifold_obj,m_localPoint),HX_HCSTRING("m_localPoint","\xb7","\xd0","\x8e","\xcf")},
	{hx::fsInt,(int)offsetof(B2Manifold_obj,m_type),HX_HCSTRING("m_type","\x0c","\x63","\x00","\x95")},
	{hx::fsInt,(int)offsetof(B2Manifold_obj,m_pointCount),HX_HCSTRING("m_pointCount","\x31","\xd8","\x2c","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2Manifold_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &B2Manifold_obj::e_circles,HX_HCSTRING("e_circles","\x49","\x23","\xad","\x68")},
	{hx::fsInt,(void *) &B2Manifold_obj::e_faceA,HX_HCSTRING("e_faceA","\x6a","\x76","\x27","\x5f")},
	{hx::fsInt,(void *) &B2Manifold_obj::e_faceB,HX_HCSTRING("e_faceB","\x6b","\x76","\x27","\x5f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2Manifold_obj_sMemberFields[] = {
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("m_points","\xf5","\xba","\x1f","\xc0"),
	HX_HCSTRING("m_localPlaneNormal","\x4a","\xf5","\x33","\x35"),
	HX_HCSTRING("m_localPoint","\xb7","\xd0","\x8e","\xcf"),
	HX_HCSTRING("m_type","\x0c","\x63","\x00","\x95"),
	HX_HCSTRING("m_pointCount","\x31","\xd8","\x2c","\xfb"),
	::String(null()) };

static void B2Manifold_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Manifold_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2Manifold_obj::e_circles,"e_circles");
	HX_MARK_MEMBER_NAME(B2Manifold_obj::e_faceA,"e_faceA");
	HX_MARK_MEMBER_NAME(B2Manifold_obj::e_faceB,"e_faceB");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Manifold_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Manifold_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2Manifold_obj::e_circles,"e_circles");
	HX_VISIT_MEMBER_NAME(B2Manifold_obj::e_faceA,"e_faceA");
	HX_VISIT_MEMBER_NAME(B2Manifold_obj::e_faceB,"e_faceB");
};

#endif

hx::Class B2Manifold_obj::__mClass;

static ::String B2Manifold_obj_sStaticFields[] = {
	HX_HCSTRING("e_circles","\x49","\x23","\xad","\x68"),
	HX_HCSTRING("e_faceA","\x6a","\x76","\x27","\x5f"),
	HX_HCSTRING("e_faceB","\x6b","\x76","\x27","\x5f"),
	::String(null())
};

void B2Manifold_obj::__register()
{
	hx::Object *dummy = new B2Manifold_obj;
	B2Manifold_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2Manifold","\xcd","\x25","\xd7","\xd3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2Manifold_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2Manifold_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Manifold_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Manifold_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Manifold_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Manifold_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Manifold_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2Manifold_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ed659c2e77c54c96_90_boot)
HXDLIN(  90)		e_circles = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ed659c2e77c54c96_91_boot)
HXDLIN(  91)		e_faceA = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ed659c2e77c54c96_92_boot)
HXDLIN(  92)		e_faceB = (int)4;
            	}
}

} // end namespace box2D
} // end namespace collision
