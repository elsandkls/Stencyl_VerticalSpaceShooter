// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2RayCastInput
#include <box2D/collision/B2RayCastInput.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5d1cd8837c27be76_29_new,"box2D.collision.B2RayCastInput","new",0xacc951b0,"box2D.collision.B2RayCastInput.new","box2D/collision/B2RayCastInput.hx",29,0x279d3e3e)
namespace box2D{
namespace collision{

void B2RayCastInput_obj::__construct( ::box2D::common::math::B2Vec2 p1, ::box2D::common::math::B2Vec2 p2,hx::Null< Float >  __o_maxFraction){
Float maxFraction = __o_maxFraction.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_5d1cd8837c27be76_29_new)
HXLINE(  31)		this->p1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  32)		this->p2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  34)		if (hx::IsNotNull( p1 )) {
HXLINE(  35)			 ::box2D::common::math::B2Vec2 _this = this->p1;
HXDLIN(  35)			_this->x = p1->x;
HXDLIN(  35)			_this->y = p1->y;
            		}
HXLINE(  36)		if (hx::IsNotNull( p2 )) {
HXLINE(  37)			 ::box2D::common::math::B2Vec2 _this1 = this->p2;
HXDLIN(  37)			_this1->x = p2->x;
HXDLIN(  37)			_this1->y = p2->y;
            		}
HXLINE(  38)		this->maxFraction = maxFraction;
            	}

Dynamic B2RayCastInput_obj::__CreateEmpty() { return new B2RayCastInput_obj; }

void *B2RayCastInput_obj::_hx_vtable = 0;

Dynamic B2RayCastInput_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2RayCastInput_obj > _hx_result = new B2RayCastInput_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool B2RayCastInput_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x68de5e46;
}


hx::ObjectPtr< B2RayCastInput_obj > B2RayCastInput_obj::__new( ::box2D::common::math::B2Vec2 p1, ::box2D::common::math::B2Vec2 p2,hx::Null< Float >  __o_maxFraction) {
	hx::ObjectPtr< B2RayCastInput_obj > __this = new B2RayCastInput_obj();
	__this->__construct(p1,p2,__o_maxFraction);
	return __this;
}

hx::ObjectPtr< B2RayCastInput_obj > B2RayCastInput_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::common::math::B2Vec2 p1, ::box2D::common::math::B2Vec2 p2,hx::Null< Float >  __o_maxFraction) {
	B2RayCastInput_obj *__this = (B2RayCastInput_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2RayCastInput_obj), true, "box2D.collision.B2RayCastInput"));
	*(void **)__this = B2RayCastInput_obj::_hx_vtable;
	__this->__construct(p1,p2,__o_maxFraction);
	return __this;
}

B2RayCastInput_obj::B2RayCastInput_obj()
{
}

void B2RayCastInput_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2RayCastInput);
	HX_MARK_MEMBER_NAME(p1,"p1");
	HX_MARK_MEMBER_NAME(p2,"p2");
	HX_MARK_MEMBER_NAME(maxFraction,"maxFraction");
	HX_MARK_END_CLASS();
}

void B2RayCastInput_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(p1,"p1");
	HX_VISIT_MEMBER_NAME(p2,"p2");
	HX_VISIT_MEMBER_NAME(maxFraction,"maxFraction");
}

hx::Val B2RayCastInput_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"p1") ) { return hx::Val( p1 ); }
		if (HX_FIELD_EQ(inName,"p2") ) { return hx::Val( p2 ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxFraction") ) { return hx::Val( maxFraction ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2RayCastInput_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"p1") ) { p1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"p2") ) { p2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"maxFraction") ) { maxFraction=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2RayCastInput_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("p1","\xc1","\x61","\x00","\x00"));
	outFields->push(HX_HCSTRING("p2","\xc2","\x61","\x00","\x00"));
	outFields->push(HX_HCSTRING("maxFraction","\xc6","\xa0","\xb4","\xda"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2RayCastInput_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2RayCastInput_obj,p1),HX_HCSTRING("p1","\xc1","\x61","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2RayCastInput_obj,p2),HX_HCSTRING("p2","\xc2","\x61","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(B2RayCastInput_obj,maxFraction),HX_HCSTRING("maxFraction","\xc6","\xa0","\xb4","\xda")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2RayCastInput_obj_sStaticStorageInfo = 0;
#endif

static ::String B2RayCastInput_obj_sMemberFields[] = {
	HX_HCSTRING("p1","\xc1","\x61","\x00","\x00"),
	HX_HCSTRING("p2","\xc2","\x61","\x00","\x00"),
	HX_HCSTRING("maxFraction","\xc6","\xa0","\xb4","\xda"),
	::String(null()) };

static void B2RayCastInput_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2RayCastInput_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2RayCastInput_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2RayCastInput_obj::__mClass,"__mClass");
};

#endif

hx::Class B2RayCastInput_obj::__mClass;

void B2RayCastInput_obj::__register()
{
	hx::Object *dummy = new B2RayCastInput_obj;
	B2RayCastInput_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2RayCastInput","\xbe","\xf9","\x7a","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2RayCastInput_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2RayCastInput_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2RayCastInput_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2RayCastInput_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2RayCastInput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2RayCastInput_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
