// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTreeNode
#include <box2D/collision/B2DynamicTreeNode.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d0d83d887a159d37_34_new,"box2D.collision.B2DynamicTreeNode","new",0xe4e65af4,"box2D.collision.B2DynamicTreeNode.new","box2D/collision/B2DynamicTreeNode.hx",34,0x6f9b973e)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d83d887a159d37_41_isLeaf,"box2D.collision.B2DynamicTreeNode","isLeaf",0xc10a1294,"box2D.collision.B2DynamicTreeNode.isLeaf","box2D/collision/B2DynamicTreeNode.hx",41,0x6f9b973e)
HX_LOCAL_STACK_FRAME(_hx_pos_d0d83d887a159d37_32_boot,"box2D.collision.B2DynamicTreeNode","boot",0x5cc23b1e,"box2D.collision.B2DynamicTreeNode.boot","box2D/collision/B2DynamicTreeNode.hx",32,0x6f9b973e)
namespace box2D{
namespace collision{

void B2DynamicTreeNode_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d0d83d887a159d37_34_new)
HXLINE(  35)		this->aabb =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
HXLINE(  36)		this->id = ::box2D::collision::B2DynamicTreeNode_obj::currentID++;
            	}

Dynamic B2DynamicTreeNode_obj::__CreateEmpty() { return new B2DynamicTreeNode_obj; }

void *B2DynamicTreeNode_obj::_hx_vtable = 0;

Dynamic B2DynamicTreeNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2DynamicTreeNode_obj > _hx_result = new B2DynamicTreeNode_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2DynamicTreeNode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x01b9317a;
}

bool B2DynamicTreeNode_obj::isLeaf(){
            	HX_STACKFRAME(&_hx_pos_d0d83d887a159d37_41_isLeaf)
HXDLIN(  41)		return hx::IsNull( this->child1 );
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2DynamicTreeNode_obj,isLeaf,return )

int B2DynamicTreeNode_obj::currentID;


hx::ObjectPtr< B2DynamicTreeNode_obj > B2DynamicTreeNode_obj::__new() {
	hx::ObjectPtr< B2DynamicTreeNode_obj > __this = new B2DynamicTreeNode_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2DynamicTreeNode_obj > B2DynamicTreeNode_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2DynamicTreeNode_obj *__this = (B2DynamicTreeNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2DynamicTreeNode_obj), true, "box2D.collision.B2DynamicTreeNode"));
	*(void **)__this = B2DynamicTreeNode_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2DynamicTreeNode_obj::B2DynamicTreeNode_obj()
{
}

void B2DynamicTreeNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2DynamicTreeNode);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(aabb,"aabb");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(child1,"child1");
	HX_MARK_MEMBER_NAME(child2,"child2");
	HX_MARK_END_CLASS();
}

void B2DynamicTreeNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(aabb,"aabb");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(child1,"child1");
	HX_VISIT_MEMBER_NAME(child2,"child2");
}

hx::Val B2DynamicTreeNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"aabb") ) { return hx::Val( aabb ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isLeaf") ) { return hx::Val( isLeaf_dyn() ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"child1") ) { return hx::Val( child1 ); }
		if (HX_FIELD_EQ(inName,"child2") ) { return hx::Val( child2 ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2DynamicTreeNode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"currentID") ) { outValue = ( currentID ); return true; }
	}
	return false;
}

hx::Val B2DynamicTreeNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"aabb") ) { aabb=inValue.Cast<  ::box2D::collision::B2AABB >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::box2D::collision::B2DynamicTreeNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"child1") ) { child1=inValue.Cast<  ::box2D::collision::B2DynamicTreeNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"child2") ) { child2=inValue.Cast<  ::box2D::collision::B2DynamicTreeNode >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::box2D::dynamics::B2Fixture >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2DynamicTreeNode_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"currentID") ) { currentID=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void B2DynamicTreeNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("child1","\x15","\xbf","\xba","\xbc"));
	outFields->push(HX_HCSTRING("child2","\x16","\xbf","\xba","\xbc"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2DynamicTreeNode_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(B2DynamicTreeNode_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*::box2D::dynamics::B2Fixture*/ ,(int)offsetof(B2DynamicTreeNode_obj,userData),HX_HCSTRING("userData","\x15","\x96","\x28","\x05")},
	{hx::fsObject /*::box2D::collision::B2AABB*/ ,(int)offsetof(B2DynamicTreeNode_obj,aabb),HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40")},
	{hx::fsObject /*::box2D::collision::B2DynamicTreeNode*/ ,(int)offsetof(B2DynamicTreeNode_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::box2D::collision::B2DynamicTreeNode*/ ,(int)offsetof(B2DynamicTreeNode_obj,child1),HX_HCSTRING("child1","\x15","\xbf","\xba","\xbc")},
	{hx::fsObject /*::box2D::collision::B2DynamicTreeNode*/ ,(int)offsetof(B2DynamicTreeNode_obj,child2),HX_HCSTRING("child2","\x16","\xbf","\xba","\xbc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2DynamicTreeNode_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &B2DynamicTreeNode_obj::currentID,HX_HCSTRING("currentID","\x54","\x1c","\x2e","\x41")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2DynamicTreeNode_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("isLeaf","\xa8","\xc8","\x16","\x65"),
	HX_HCSTRING("userData","\x15","\x96","\x28","\x05"),
	HX_HCSTRING("aabb","\xa0","\xa2","\x67","\x40"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("child1","\x15","\xbf","\xba","\xbc"),
	HX_HCSTRING("child2","\x16","\xbf","\xba","\xbc"),
	::String(null()) };

static void B2DynamicTreeNode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2DynamicTreeNode_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2DynamicTreeNode_obj::currentID,"currentID");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2DynamicTreeNode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2DynamicTreeNode_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2DynamicTreeNode_obj::currentID,"currentID");
};

#endif

hx::Class B2DynamicTreeNode_obj::__mClass;

static ::String B2DynamicTreeNode_obj_sStaticFields[] = {
	HX_HCSTRING("currentID","\x54","\x1c","\x2e","\x41"),
	::String(null())
};

void B2DynamicTreeNode_obj::__register()
{
	hx::Object *dummy = new B2DynamicTreeNode_obj;
	B2DynamicTreeNode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2DynamicTreeNode","\x02","\x11","\x01","\xbb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2DynamicTreeNode_obj::__GetStatic;
	__mClass->mSetStaticField = &B2DynamicTreeNode_obj::__SetStatic;
	__mClass->mMarkFunc = B2DynamicTreeNode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2DynamicTreeNode_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2DynamicTreeNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2DynamicTreeNode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2DynamicTreeNode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2DynamicTreeNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2DynamicTreeNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2DynamicTreeNode_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d0d83d887a159d37_32_boot)
HXDLIN(  32)		currentID = (int)0;
            	}
}

} // end namespace box2D
} // end namespace collision
