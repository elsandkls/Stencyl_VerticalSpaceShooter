// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2ContactID
#include <box2D/collision/B2ContactID.h>
#endif
#ifndef INCLUDED_box2D_collision_Features
#include <box2D/collision/Features.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d93920cfbaa06c52_29_new,"box2D.collision.Features","new",0xfa3d25bc,"box2D.collision.Features.new","box2D/collision/Features.hx",29,0x45bd9d32)
HX_LOCAL_STACK_FRAME(_hx_pos_d93920cfbaa06c52_40_get_referenceEdge,"box2D.collision.Features","get_referenceEdge",0xbc25c75b,"box2D.collision.Features.get_referenceEdge","box2D/collision/Features.hx",40,0x45bd9d32)
HX_LOCAL_STACK_FRAME(_hx_pos_d93920cfbaa06c52_42_set_referenceEdge,"box2D.collision.Features","set_referenceEdge",0xdf939f67,"box2D.collision.Features.set_referenceEdge","box2D/collision/Features.hx",42,0x45bd9d32)
HX_LOCAL_STACK_FRAME(_hx_pos_d93920cfbaa06c52_55_get_incidentEdge,"box2D.collision.Features","get_incidentEdge",0xbc46445c,"box2D.collision.Features.get_incidentEdge","box2D/collision/Features.hx",55,0x45bd9d32)
HX_LOCAL_STACK_FRAME(_hx_pos_d93920cfbaa06c52_57_set_incidentEdge,"box2D.collision.Features","set_incidentEdge",0x128831d0,"box2D.collision.Features.set_incidentEdge","box2D/collision/Features.hx",57,0x45bd9d32)
HX_LOCAL_STACK_FRAME(_hx_pos_d93920cfbaa06c52_70_get_incidentVertex,"box2D.collision.Features","get_incidentVertex",0x746ddd43,"box2D.collision.Features.get_incidentVertex","box2D/collision/Features.hx",70,0x45bd9d32)
HX_LOCAL_STACK_FRAME(_hx_pos_d93920cfbaa06c52_72_set_incidentVertex,"box2D.collision.Features","set_incidentVertex",0x511d0fb7,"box2D.collision.Features.set_incidentVertex","box2D/collision/Features.hx",72,0x45bd9d32)
HX_LOCAL_STACK_FRAME(_hx_pos_d93920cfbaa06c52_85_get_flip,"box2D.collision.Features","get_flip",0x5b708b5a,"box2D.collision.Features.get_flip","box2D/collision/Features.hx",85,0x45bd9d32)
HX_LOCAL_STACK_FRAME(_hx_pos_d93920cfbaa06c52_87_set_flip,"box2D.collision.Features","set_flip",0x09cde4ce,"box2D.collision.Features.set_flip","box2D/collision/Features.hx",87,0x45bd9d32)
namespace box2D{
namespace collision{

void Features_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d93920cfbaa06c52_29_new)
            	}

Dynamic Features_obj::__CreateEmpty() { return new Features_obj; }

void *Features_obj::_hx_vtable = 0;

Dynamic Features_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Features_obj > _hx_result = new Features_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Features_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a746e7e;
}

int Features_obj::get_referenceEdge(){
            	HX_STACKFRAME(&_hx_pos_d93920cfbaa06c52_40_get_referenceEdge)
HXDLIN(  40)		return this->_referenceEdge;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Features_obj,get_referenceEdge,return )

int Features_obj::set_referenceEdge(int value){
            	HX_STACKFRAME(&_hx_pos_d93920cfbaa06c52_42_set_referenceEdge)
HXLINE(  43)		this->_referenceEdge = value;
HXLINE(  44)		int _hx_tmp = ((int)this->_m_id->_key & (int)(int)-256);
HXDLIN(  44)		this->_m_id->_key = ((int)_hx_tmp | (int)((int)this->_referenceEdge & (int)(int)255));
HXLINE(  45)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Features_obj,set_referenceEdge,return )

int Features_obj::get_incidentEdge(){
            	HX_STACKFRAME(&_hx_pos_d93920cfbaa06c52_55_get_incidentEdge)
HXDLIN(  55)		return this->_incidentEdge;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Features_obj,get_incidentEdge,return )

int Features_obj::set_incidentEdge(int value){
            	HX_STACKFRAME(&_hx_pos_d93920cfbaa06c52_57_set_incidentEdge)
HXLINE(  58)		this->_incidentEdge = value;
HXLINE(  59)		int _hx_tmp = ((int)this->_m_id->_key & (int)(int)-65281);
HXDLIN(  59)		this->_m_id->_key = ((int)_hx_tmp | (int)((int)((int)this->_incidentEdge << (int)(int)8) & (int)(int)65280));
HXLINE(  60)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Features_obj,set_incidentEdge,return )

int Features_obj::get_incidentVertex(){
            	HX_STACKFRAME(&_hx_pos_d93920cfbaa06c52_70_get_incidentVertex)
HXDLIN(  70)		return this->_incidentVertex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Features_obj,get_incidentVertex,return )

int Features_obj::set_incidentVertex(int value){
            	HX_STACKFRAME(&_hx_pos_d93920cfbaa06c52_72_set_incidentVertex)
HXLINE(  73)		this->_incidentVertex = value;
HXLINE(  74)		int _hx_tmp = ((int)this->_m_id->_key & (int)(int)-16711681);
HXDLIN(  74)		this->_m_id->_key = ((int)_hx_tmp | (int)((int)((int)this->_incidentVertex << (int)(int)16) & (int)(int)16711680));
HXLINE(  75)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Features_obj,set_incidentVertex,return )

int Features_obj::get_flip(){
            	HX_STACKFRAME(&_hx_pos_d93920cfbaa06c52_85_get_flip)
HXDLIN(  85)		return this->_flip;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Features_obj,get_flip,return )

int Features_obj::set_flip(int value){
            	HX_STACKFRAME(&_hx_pos_d93920cfbaa06c52_87_set_flip)
HXLINE(  88)		this->_flip = value;
HXLINE(  89)		int _hx_tmp = ((int)this->_m_id->_key & (int)(int)16777215);
HXDLIN(  89)		this->_m_id->_key = ((int)_hx_tmp | (int)((int)((int)this->_flip << (int)(int)24) & (int)(int)-16777216));
HXLINE(  90)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Features_obj,set_flip,return )


hx::ObjectPtr< Features_obj > Features_obj::__new() {
	hx::ObjectPtr< Features_obj > __this = new Features_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Features_obj > Features_obj::__alloc(hx::Ctx *_hx_ctx) {
	Features_obj *__this = (Features_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Features_obj), true, "box2D.collision.Features"));
	*(void **)__this = Features_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Features_obj::Features_obj()
{
}

void Features_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Features);
	HX_MARK_MEMBER_NAME(_referenceEdge,"_referenceEdge");
	HX_MARK_MEMBER_NAME(_incidentEdge,"_incidentEdge");
	HX_MARK_MEMBER_NAME(_incidentVertex,"_incidentVertex");
	HX_MARK_MEMBER_NAME(_flip,"_flip");
	HX_MARK_MEMBER_NAME(_m_id,"_m_id");
	HX_MARK_END_CLASS();
}

void Features_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_referenceEdge,"_referenceEdge");
	HX_VISIT_MEMBER_NAME(_incidentEdge,"_incidentEdge");
	HX_VISIT_MEMBER_NAME(_incidentVertex,"_incidentVertex");
	HX_VISIT_MEMBER_NAME(_flip,"_flip");
	HX_VISIT_MEMBER_NAME(_m_id,"_m_id");
}

hx::Val Features_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flip") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_flip() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_flip") ) { return hx::Val( _flip ); }
		if (HX_FIELD_EQ(inName,"_m_id") ) { return hx::Val( _m_id ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_flip") ) { return hx::Val( get_flip_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_flip") ) { return hx::Val( set_flip_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"incidentEdge") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_incidentEdge() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"referenceEdge") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_referenceEdge() ); }
		if (HX_FIELD_EQ(inName,"_incidentEdge") ) { return hx::Val( _incidentEdge ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_referenceEdge") ) { return hx::Val( _referenceEdge ); }
		if (HX_FIELD_EQ(inName,"incidentVertex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_incidentVertex() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_incidentVertex") ) { return hx::Val( _incidentVertex ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_incidentEdge") ) { return hx::Val( get_incidentEdge_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_incidentEdge") ) { return hx::Val( set_incidentEdge_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_referenceEdge") ) { return hx::Val( get_referenceEdge_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_referenceEdge") ) { return hx::Val( set_referenceEdge_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_incidentVertex") ) { return hx::Val( get_incidentVertex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_incidentVertex") ) { return hx::Val( set_incidentVertex_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Features_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flip") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_flip(inValue.Cast< int >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_flip") ) { _flip=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_m_id") ) { _m_id=inValue.Cast<  ::box2D::collision::B2ContactID >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"incidentEdge") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_incidentEdge(inValue.Cast< int >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"referenceEdge") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_referenceEdge(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"_incidentEdge") ) { _incidentEdge=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_referenceEdge") ) { _referenceEdge=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"incidentVertex") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_incidentVertex(inValue.Cast< int >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_incidentVertex") ) { _incidentVertex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Features_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("referenceEdge","\xa8","\x3d","\x94","\x7f"));
	outFields->push(HX_HCSTRING("_referenceEdge","\xe9","\x2d","\xe6","\xbd"));
	outFields->push(HX_HCSTRING("incidentEdge","\xaf","\xd6","\x37","\xec"));
	outFields->push(HX_HCSTRING("_incidentEdge","\x8e","\x69","\xa6","\xce"));
	outFields->push(HX_HCSTRING("incidentVertex","\x56","\xea","\xa6","\xb1"));
	outFields->push(HX_HCSTRING("_incidentVertex","\xf5","\x32","\x07","\xfb"));
	outFields->push(HX_HCSTRING("flip","\xad","\x12","\xbe","\x43"));
	outFields->push(HX_HCSTRING("_flip","\x8c","\x2e","\xcf","\xf6"));
	outFields->push(HX_HCSTRING("_m_id","\x8c","\xcf","\x65","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Features_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Features_obj,_referenceEdge),HX_HCSTRING("_referenceEdge","\xe9","\x2d","\xe6","\xbd")},
	{hx::fsInt,(int)offsetof(Features_obj,_incidentEdge),HX_HCSTRING("_incidentEdge","\x8e","\x69","\xa6","\xce")},
	{hx::fsInt,(int)offsetof(Features_obj,_incidentVertex),HX_HCSTRING("_incidentVertex","\xf5","\x32","\x07","\xfb")},
	{hx::fsInt,(int)offsetof(Features_obj,_flip),HX_HCSTRING("_flip","\x8c","\x2e","\xcf","\xf6")},
	{hx::fsObject /*::box2D::collision::B2ContactID*/ ,(int)offsetof(Features_obj,_m_id),HX_HCSTRING("_m_id","\x8c","\xcf","\x65","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Features_obj_sStaticStorageInfo = 0;
#endif

static ::String Features_obj_sMemberFields[] = {
	HX_HCSTRING("get_referenceEdge","\xff","\x48","\x04","\x86"),
	HX_HCSTRING("set_referenceEdge","\x0b","\x21","\x72","\xa9"),
	HX_HCSTRING("_referenceEdge","\xe9","\x2d","\xe6","\xbd"),
	HX_HCSTRING("get_incidentEdge","\x38","\xc3","\xd6","\xf0"),
	HX_HCSTRING("set_incidentEdge","\xac","\xb0","\x18","\x47"),
	HX_HCSTRING("_incidentEdge","\x8e","\x69","\xa6","\xce"),
	HX_HCSTRING("get_incidentVertex","\x1f","\xcb","\x40","\x4d"),
	HX_HCSTRING("set_incidentVertex","\x93","\xfd","\xef","\x29"),
	HX_HCSTRING("_incidentVertex","\xf5","\x32","\x07","\xfb"),
	HX_HCSTRING("get_flip","\x36","\xce","\x78","\xc3"),
	HX_HCSTRING("set_flip","\xaa","\x27","\xd6","\x71"),
	HX_HCSTRING("_flip","\x8c","\x2e","\xcf","\xf6"),
	HX_HCSTRING("_m_id","\x8c","\xcf","\x65","\xfb"),
	::String(null()) };

static void Features_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Features_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Features_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Features_obj::__mClass,"__mClass");
};

#endif

hx::Class Features_obj::__mClass;

void Features_obj::__register()
{
	hx::Object *dummy = new Features_obj;
	Features_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.Features","\xca","\xd7","\xd8","\x99");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Features_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Features_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Features_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Features_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Features_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Features_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
