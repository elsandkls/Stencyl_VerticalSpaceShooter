// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastInput
#include <box2D/collision/B2RayCastInput.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastOutput
#include <box2D/collision/B2RayCastOutput.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5778d931a11e631d_231_new,"box2D.collision.B2AABB","new",0xc171b92f,"box2D.collision.B2AABB.new","box2D/collision/B2AABB.hx",231,0x658add9f)
HX_LOCAL_STACK_FRAME(_hx_pos_5778d931a11e631d_34_isValid,"box2D.collision.B2AABB","isValid",0x08621501,"box2D.collision.B2AABB.isValid","box2D/collision/B2AABB.hx",34,0x658add9f)
HX_LOCAL_STACK_FRAME(_hx_pos_5778d931a11e631d_46_getCenter,"box2D.collision.B2AABB","getCenter",0x8a889d1a,"box2D.collision.B2AABB.getCenter","box2D/collision/B2AABB.hx",46,0x658add9f)
HX_LOCAL_STACK_FRAME(_hx_pos_5778d931a11e631d_53_getExtents,"box2D.collision.B2AABB","getExtents",0x0377c064,"box2D.collision.B2AABB.getExtents","box2D/collision/B2AABB.hx",53,0x658add9f)
HX_LOCAL_STACK_FRAME(_hx_pos_5778d931a11e631d_61_contains,"box2D.collision.B2AABB","contains",0xd1d422f0,"box2D.collision.B2AABB.contains","box2D/collision/B2AABB.hx",61,0x658add9f)
HX_LOCAL_STACK_FRAME(_hx_pos_5778d931a11e631d_75_rayCast,"box2D.collision.B2AABB","rayCast",0x5f605a18,"box2D.collision.B2AABB.rayCast","box2D/collision/B2AABB.hx",75,0x658add9f)
HX_LOCAL_STACK_FRAME(_hx_pos_5778d931a11e631d_183_testOverlap,"box2D.collision.B2AABB","testOverlap",0x64530124,"box2D.collision.B2AABB.testOverlap","box2D/collision/B2AABB.hx",183,0x658add9f)
HX_LOCAL_STACK_FRAME(_hx_pos_5778d931a11e631d_208_combine,"box2D.collision.B2AABB","combine",0xb45226ce,"box2D.collision.B2AABB.combine","box2D/collision/B2AABB.hx",208,0x658add9f)
HX_LOCAL_STACK_FRAME(_hx_pos_5778d931a11e631d_216_reset,"box2D.collision.B2AABB","reset",0x99cd445e,"box2D.collision.B2AABB.reset","box2D/collision/B2AABB.hx",216,0x658add9f)
HX_LOCAL_STACK_FRAME(_hx_pos_5778d931a11e631d_224_setTo,"box2D.collision.B2AABB","setTo",0x2d348c4c,"box2D.collision.B2AABB.setTo","box2D/collision/B2AABB.hx",224,0x658add9f)
namespace box2D{
namespace collision{

void B2AABB_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_5778d931a11e631d_231_new)
HXLINE( 233)		this->lowerBound =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 234)		this->upperBound =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}

Dynamic B2AABB_obj::__CreateEmpty() { return new B2AABB_obj; }

void *B2AABB_obj::_hx_vtable = 0;

Dynamic B2AABB_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2AABB_obj > _hx_result = new B2AABB_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2AABB_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7b839245;
}

bool B2AABB_obj::isValid(){
            	HX_STACKFRAME(&_hx_pos_5778d931a11e631d_34_isValid)
HXLINE(  36)		Float dX = (this->upperBound->x - this->lowerBound->x);
HXLINE(  37)		Float dY = (this->upperBound->y - this->lowerBound->y);
HXLINE(  38)		bool valid;
HXDLIN(  38)		if ((dX >= ((Float)0.0))) {
HXLINE(  38)			valid = (dY >= ((Float)0.0));
            		}
            		else {
HXLINE(  38)			valid = false;
            		}
HXLINE(  39)		bool valid1;
HXDLIN(  39)		if (valid) {
HXLINE(  39)			valid1 = this->lowerBound->isValid();
            		}
            		else {
HXLINE(  39)			valid1 = false;
            		}
HXDLIN(  39)		if (valid1) {
HXLINE(  39)			valid = this->upperBound->isValid();
            		}
            		else {
HXLINE(  39)			valid = false;
            		}
HXLINE(  40)		return valid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2AABB_obj,isValid,return )

 ::box2D::common::math::B2Vec2 B2AABB_obj::getCenter(){
            	HX_GC_STACKFRAME(&_hx_pos_5778d931a11e631d_46_getCenter)
HXDLIN(  46)		Float _hx_tmp = ((Float)(this->lowerBound->x + this->upperBound->x) / (Float)(int)2);
HXDLIN(  46)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp,((Float)(this->lowerBound->y + this->upperBound->y) / (Float)(int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2AABB_obj,getCenter,return )

 ::box2D::common::math::B2Vec2 B2AABB_obj::getExtents(){
            	HX_GC_STACKFRAME(&_hx_pos_5778d931a11e631d_53_getExtents)
HXDLIN(  53)		Float _hx_tmp = ((Float)(this->upperBound->x - this->lowerBound->x) / (Float)(int)2);
HXDLIN(  53)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp,((Float)(this->upperBound->y - this->lowerBound->y) / (Float)(int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2AABB_obj,getExtents,return )

bool B2AABB_obj::contains( ::box2D::collision::B2AABB aabb){
            	HX_STACKFRAME(&_hx_pos_5778d931a11e631d_61_contains)
HXLINE(  62)		bool result = true;
HXLINE(  63)		if (result) {
HXLINE(  63)			result = (this->lowerBound->x <= aabb->lowerBound->x);
            		}
            		else {
HXLINE(  63)			result = false;
            		}
HXLINE(  64)		if (result) {
HXLINE(  64)			result = (this->lowerBound->y <= aabb->lowerBound->y);
            		}
            		else {
HXLINE(  64)			result = false;
            		}
HXLINE(  65)		if (result) {
HXLINE(  65)			result = (aabb->upperBound->x <= this->upperBound->x);
            		}
            		else {
HXLINE(  65)			result = false;
            		}
HXLINE(  66)		if (result) {
HXLINE(  66)			result = (aabb->upperBound->y <= this->upperBound->y);
            		}
            		else {
HXLINE(  66)			result = false;
            		}
HXLINE(  67)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2AABB_obj,contains,return )

bool B2AABB_obj::rayCast( ::box2D::collision::B2RayCastOutput output, ::box2D::collision::B2RayCastInput input){
            	HX_STACKFRAME(&_hx_pos_5778d931a11e631d_75_rayCast)
HXLINE(  76)		Float tmin = ((Float)-1.7976931348623157e+308);
HXLINE(  77)		Float tmax = ((Float)1.7976931348623158e+308);
HXLINE(  79)		Float pX = input->p1->x;
HXLINE(  80)		Float pY = input->p1->y;
HXLINE(  81)		Float dX = (input->p2->x - input->p1->x);
HXLINE(  82)		Float dY = (input->p2->y - input->p1->y);
HXLINE(  83)		Float absDX = ::Math_obj::abs(dX);
HXLINE(  84)		Float absDY = ::Math_obj::abs(dY);
HXLINE(  86)		 ::box2D::common::math::B2Vec2 normal = output->normal;
HXLINE(  88)		Float inv_d;
HXLINE(  89)		Float t1;
HXLINE(  90)		Float t2;
HXLINE(  91)		Float t3;
HXLINE(  92)		Float s;
HXLINE(  96)		if ((absDX < ((Float)2.2250738585072014e-308))) {
HXLINE(  99)			bool _hx_tmp;
HXDLIN(  99)			if (!((pX < this->lowerBound->x))) {
HXLINE(  99)				_hx_tmp = (this->upperBound->x < pX);
            			}
            			else {
HXLINE(  99)				_hx_tmp = true;
            			}
HXDLIN(  99)			if (_hx_tmp) {
HXLINE( 100)				return false;
            			}
            		}
            		else {
HXLINE( 104)			inv_d = ((Float)((Float)1.0) / (Float)dX);
HXLINE( 105)			t1 = ((this->lowerBound->x - pX) * inv_d);
HXLINE( 106)			t2 = ((this->upperBound->x - pX) * inv_d);
HXLINE( 109)			s = ((Float)-1.0);
HXLINE( 111)			if ((t1 > t2)) {
HXLINE( 113)				t3 = t1;
HXLINE( 114)				t1 = t2;
HXLINE( 115)				t2 = t3;
HXLINE( 116)				s = ((Float)1.0);
            			}
HXLINE( 120)			if ((t1 > tmin)) {
HXLINE( 122)				normal->x = s;
HXLINE( 123)				normal->y = (int)0;
HXLINE( 124)				tmin = t1;
            			}
HXLINE( 128)			tmax = ::Math_obj::min(tmax,t2);
HXLINE( 130)			if ((tmin > tmax)) {
HXLINE( 131)				return false;
            			}
            		}
HXLINE( 136)		if ((absDY < ((Float)2.2250738585072014e-308))) {
HXLINE( 139)			bool _hx_tmp1;
HXDLIN( 139)			if (!((pY < this->lowerBound->y))) {
HXLINE( 139)				_hx_tmp1 = (this->upperBound->y < pY);
            			}
            			else {
HXLINE( 139)				_hx_tmp1 = true;
            			}
HXDLIN( 139)			if (_hx_tmp1) {
HXLINE( 140)				return false;
            			}
            		}
            		else {
HXLINE( 144)			inv_d = ((Float)((Float)1.0) / (Float)dY);
HXLINE( 145)			t1 = ((this->lowerBound->y - pY) * inv_d);
HXLINE( 146)			t2 = ((this->upperBound->y - pY) * inv_d);
HXLINE( 149)			s = ((Float)-1.0);
HXLINE( 151)			if ((t1 > t2)) {
HXLINE( 153)				t3 = t1;
HXLINE( 154)				t1 = t2;
HXLINE( 155)				t2 = t3;
HXLINE( 156)				s = ((Float)1.0);
            			}
HXLINE( 160)			if ((t1 > tmin)) {
HXLINE( 162)				normal->y = s;
HXLINE( 163)				normal->x = (int)0;
HXLINE( 164)				tmin = t1;
            			}
HXLINE( 168)			tmax = ::Math_obj::min(tmax,t2);
HXLINE( 170)			if ((tmin > tmax)) {
HXLINE( 171)				return false;
            			}
            		}
HXLINE( 175)		output->fraction = tmin;
HXLINE( 176)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2AABB_obj,rayCast,return )

bool B2AABB_obj::testOverlap( ::box2D::collision::B2AABB other){
            	HX_STACKFRAME(&_hx_pos_5778d931a11e631d_183_testOverlap)
HXLINE( 184)		Float d1X = (other->lowerBound->x - this->upperBound->x);
HXLINE( 185)		Float d1Y = (other->lowerBound->y - this->upperBound->y);
HXLINE( 186)		Float d2X = (this->lowerBound->x - other->upperBound->x);
HXLINE( 187)		Float d2Y = (this->lowerBound->y - other->upperBound->y);
HXLINE( 189)		bool _hx_tmp;
HXDLIN( 189)		if (!((d1X > ((Float)0.0)))) {
HXLINE( 189)			_hx_tmp = (d1Y > ((Float)0.0));
            		}
            		else {
HXLINE( 189)			_hx_tmp = true;
            		}
HXDLIN( 189)		if (_hx_tmp) {
HXLINE( 190)			return false;
            		}
HXLINE( 192)		bool _hx_tmp1;
HXDLIN( 192)		if (!((d2X > ((Float)0.0)))) {
HXLINE( 192)			_hx_tmp1 = (d2Y > ((Float)0.0));
            		}
            		else {
HXLINE( 192)			_hx_tmp1 = true;
            		}
HXDLIN( 192)		if (_hx_tmp1) {
HXLINE( 193)			return false;
            		}
HXLINE( 195)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2AABB_obj,testOverlap,return )

void B2AABB_obj::combine( ::box2D::collision::B2AABB aabb1, ::box2D::collision::B2AABB aabb2){
            	HX_STACKFRAME(&_hx_pos_5778d931a11e631d_208_combine)
HXLINE( 209)		this->lowerBound->x = ::Math_obj::min(aabb1->lowerBound->x,aabb2->lowerBound->x);
HXLINE( 210)		this->lowerBound->y = ::Math_obj::min(aabb1->lowerBound->y,aabb2->lowerBound->y);
HXLINE( 211)		this->upperBound->x = ::Math_obj::max(aabb1->upperBound->x,aabb2->upperBound->x);
HXLINE( 212)		this->upperBound->y = ::Math_obj::max(aabb1->upperBound->y,aabb2->upperBound->y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2AABB_obj,combine,(void))

void B2AABB_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_5778d931a11e631d_216_reset)
HXLINE( 217)		this->lowerBound->x = (int)0;
HXLINE( 218)		this->lowerBound->y = (int)0;
HXLINE( 219)		this->upperBound->x = (int)0;
HXLINE( 220)		this->upperBound->y = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2AABB_obj,reset,(void))

void B2AABB_obj::setTo( ::box2D::collision::B2AABB other){
            	HX_STACKFRAME(&_hx_pos_5778d931a11e631d_224_setTo)
HXLINE( 225)		this->lowerBound->x = other->lowerBound->x;
HXLINE( 226)		this->lowerBound->y = other->lowerBound->y;
HXLINE( 227)		this->upperBound->x = other->upperBound->x;
HXLINE( 228)		this->upperBound->y = other->upperBound->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2AABB_obj,setTo,(void))


hx::ObjectPtr< B2AABB_obj > B2AABB_obj::__new() {
	hx::ObjectPtr< B2AABB_obj > __this = new B2AABB_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2AABB_obj > B2AABB_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2AABB_obj *__this = (B2AABB_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2AABB_obj), true, "box2D.collision.B2AABB"));
	*(void **)__this = B2AABB_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2AABB_obj::B2AABB_obj()
{
}

void B2AABB_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2AABB);
	HX_MARK_MEMBER_NAME(lowerBound,"lowerBound");
	HX_MARK_MEMBER_NAME(upperBound,"upperBound");
	HX_MARK_END_CLASS();
}

void B2AABB_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lowerBound,"lowerBound");
	HX_VISIT_MEMBER_NAME(upperBound,"upperBound");
}

hx::Val B2AABB_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isValid") ) { return hx::Val( isValid_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"combine") ) { return hx::Val( combine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getCenter") ) { return hx::Val( getCenter_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getExtents") ) { return hx::Val( getExtents_dyn() ); }
		if (HX_FIELD_EQ(inName,"lowerBound") ) { return hx::Val( lowerBound ); }
		if (HX_FIELD_EQ(inName,"upperBound") ) { return hx::Val( upperBound ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"testOverlap") ) { return hx::Val( testOverlap_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2AABB_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"lowerBound") ) { lowerBound=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upperBound") ) { upperBound=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2AABB_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("lowerBound","\x7d","\x42","\x5b","\x73"));
	outFields->push(HX_HCSTRING("upperBound","\x7c","\xc3","\x89","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2AABB_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2AABB_obj,lowerBound),HX_HCSTRING("lowerBound","\x7d","\x42","\x5b","\x73")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2AABB_obj,upperBound),HX_HCSTRING("upperBound","\x7c","\xc3","\x89","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2AABB_obj_sStaticStorageInfo = 0;
#endif

static ::String B2AABB_obj_sMemberFields[] = {
	HX_HCSTRING("isValid","\xb2","\x18","\x3e","\xce"),
	HX_HCSTRING("getCenter","\x0b","\xaf","\x31","\x82"),
	HX_HCSTRING("getExtents","\x53","\x61","\xbe","\xbf"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("testOverlap","\x55","\x31","\xd9","\x65"),
	HX_HCSTRING("combine","\x7f","\x2a","\x2e","\x7a"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("lowerBound","\x7d","\x42","\x5b","\x73"),
	HX_HCSTRING("upperBound","\x7c","\xc3","\x89","\x78"),
	::String(null()) };

static void B2AABB_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2AABB_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2AABB_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2AABB_obj::__mClass,"__mClass");
};

#endif

hx::Class B2AABB_obj::__mClass;

void B2AABB_obj::__register()
{
	hx::Object *dummy = new B2AABB_obj;
	B2AABB_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2AABB","\xbd","\xf5","\x5b","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2AABB_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2AABB_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2AABB_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2AABB_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2AABB_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2AABB_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
