// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastInput
#include <box2D/collision/B2RayCastInput.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastOutput
#include <box2D/collision/B2RayCastOutput.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2CircleShape
#include <box2D/collision/shapes/B2CircleShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2MassData
#include <box2D/collision/shapes/B2MassData.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a52065e61d1ac738_218_new,"box2D.collision.shapes.B2CircleShape","new",0x65b9dc04,"box2D.collision.shapes.B2CircleShape.new","box2D/collision/shapes/B2CircleShape.hx",218,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_39_copy,"box2D.collision.shapes.B2CircleShape","copy",0x95a8df91,"box2D.collision.shapes.B2CircleShape.copy","box2D/collision/shapes/B2CircleShape.hx",39,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_46_set,"box2D.collision.shapes.B2CircleShape","set",0x65bda746,"box2D.collision.shapes.B2CircleShape.set","box2D/collision/shapes/B2CircleShape.hx",46,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_58_testPoint,"box2D.collision.shapes.B2CircleShape","testPoint",0x15525142,"box2D.collision.shapes.B2CircleShape.testPoint","box2D/collision/shapes/B2CircleShape.hx",58,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_74_rayCast,"box2D.collision.shapes.B2CircleShape","rayCast",0x0bbb0b6d,"box2D.collision.shapes.B2CircleShape.rayCast","box2D/collision/shapes/B2CircleShape.hx",74,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_131_computeAABB,"box2D.collision.shapes.B2CircleShape","computeAABB",0x800f893b,"box2D.collision.shapes.B2CircleShape.computeAABB","box2D/collision/shapes/B2CircleShape.hx",131,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_143_computeMass,"box2D.collision.shapes.B2CircleShape","computeMass",0x88168baf,"box2D.collision.shapes.B2CircleShape.computeMass","box2D/collision/shapes/B2CircleShape.hx",143,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_160_computeSubmergedArea,"box2D.collision.shapes.B2CircleShape","computeSubmergedArea",0xea5ecbbe,"box2D.collision.shapes.B2CircleShape.computeSubmergedArea","box2D/collision/shapes/B2CircleShape.hx",160,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_192_getLocalPosition,"box2D.collision.shapes.B2CircleShape","getLocalPosition",0x8a8e309a,"box2D.collision.shapes.B2CircleShape.getLocalPosition","box2D/collision/shapes/B2CircleShape.hx",192,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_199_setLocalPosition,"box2D.collision.shapes.B2CircleShape","setLocalPosition",0xe0d01e0e,"box2D.collision.shapes.B2CircleShape.setLocalPosition","box2D/collision/shapes/B2CircleShape.hx",199,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_207_getRadius,"box2D.collision.shapes.B2CircleShape","getRadius",0xb30db82c,"box2D.collision.shapes.B2CircleShape.getRadius","box2D/collision/shapes/B2CircleShape.hx",207,0x60fd1eeb)
HX_LOCAL_STACK_FRAME(_hx_pos_a52065e61d1ac738_215_setRadius,"box2D.collision.shapes.B2CircleShape","setRadius",0x965ea438,"box2D.collision.shapes.B2CircleShape.setRadius","box2D/collision/shapes/B2CircleShape.hx",215,0x60fd1eeb)
namespace box2D{
namespace collision{
namespace shapes{

void B2CircleShape_obj::__construct(hx::Null< Float >  __o_radius){
Float radius = __o_radius.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_a52065e61d1ac738_218_new)
HXLINE( 219)		super::__construct();
HXLINE( 220)		this->m_p =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 221)		this->m_type = (int)0;
HXLINE( 222)		this->m_radius = radius;
            	}

Dynamic B2CircleShape_obj::__CreateEmpty() { return new B2CircleShape_obj; }

void *B2CircleShape_obj::_hx_vtable = 0;

Dynamic B2CircleShape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2CircleShape_obj > _hx_result = new B2CircleShape_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool B2CircleShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19eeb38a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x19eeb38a;
	} else {
		return inClassId==(int)0x1c30786e;
	}
}

 ::box2D::collision::shapes::B2Shape B2CircleShape_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_a52065e61d1ac738_39_copy)
HXLINE(  40)		 ::box2D::collision::shapes::B2Shape s =  ::box2D::collision::shapes::B2CircleShape_obj::__alloc( HX_CTX ,null());
HXLINE(  41)		s->set(hx::ObjectPtr<OBJ_>(this));
HXLINE(  42)		return s;
            	}


void B2CircleShape_obj::set( ::box2D::collision::shapes::B2Shape other){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_46_set)
HXLINE(  47)		this->super::set(other);
HXLINE(  48)		if (::Std_obj::is(other,hx::ClassOf< ::box2D::collision::shapes::B2CircleShape >())) {
HXLINE(  50)			 ::box2D::collision::shapes::B2CircleShape other2 = hx::TCast<  ::box2D::collision::shapes::B2CircleShape >::cast(other);
HXLINE(  51)			{
HXLINE(  51)				 ::box2D::common::math::B2Vec2 _this = this->m_p;
HXDLIN(  51)				 ::box2D::common::math::B2Vec2 v = other2->m_p;
HXDLIN(  51)				_this->x = v->x;
HXDLIN(  51)				_this->y = v->y;
            			}
            		}
            	}


bool B2CircleShape_obj::testPoint( ::box2D::common::math::B2Transform transform, ::box2D::common::math::B2Vec2 p){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_58_testPoint)
HXLINE(  60)		 ::box2D::common::math::B2Mat22 tMat = transform->R;
HXLINE(  61)		Float transform1 = transform->position->x;
HXDLIN(  61)		Float dX = (tMat->col1->x * this->m_p->x);
HXDLIN(  61)		Float dX1 = (transform1 + (dX + (tMat->col2->x * this->m_p->y)));
HXLINE(  62)		Float transform2 = transform->position->y;
HXDLIN(  62)		Float dY = (tMat->col1->y * this->m_p->x);
HXDLIN(  62)		Float dY1 = (transform2 + (dY + (tMat->col2->y * this->m_p->y)));
HXLINE(  64)		dX1 = (p->x - dX1);
HXLINE(  65)		dY1 = (p->y - dY1);
HXLINE(  67)		return (((dX1 * dX1) + (dY1 * dY1)) <= (this->m_radius * this->m_radius));
            	}


bool B2CircleShape_obj::rayCast( ::box2D::collision::B2RayCastOutput output, ::box2D::collision::B2RayCastInput input, ::box2D::common::math::B2Transform transform){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_74_rayCast)
HXLINE(  76)		 ::box2D::common::math::B2Mat22 tMat = transform->R;
HXLINE(  77)		Float transform1 = transform->position->x;
HXDLIN(  77)		Float positionX = (tMat->col1->x * this->m_p->x);
HXDLIN(  77)		Float positionX1 = (transform1 + (positionX + (tMat->col2->x * this->m_p->y)));
HXLINE(  78)		Float transform2 = transform->position->y;
HXDLIN(  78)		Float positionY = (tMat->col1->y * this->m_p->x);
HXDLIN(  78)		Float positionY1 = (transform2 + (positionY + (tMat->col2->y * this->m_p->y)));
HXLINE(  81)		Float sX = (input->p1->x - positionX1);
HXLINE(  82)		Float sY = (input->p1->y - positionY1);
HXLINE(  84)		Float b = (((sX * sX) + (sY * sY)) - (this->m_radius * this->m_radius));
HXLINE(  96)		Float rX = (input->p2->x - input->p1->x);
HXLINE(  97)		Float rY = (input->p2->y - input->p1->y);
HXLINE(  99)		Float c = ((sX * rX) + (sY * rY));
HXLINE( 101)		Float rr = ((rX * rX) + (rY * rY));
HXLINE( 102)		Float sigma = ((c * c) - (rr * b));
HXLINE( 105)		bool _hx_tmp;
HXDLIN( 105)		if (!((sigma < ((Float)0.0)))) {
HXLINE( 105)			_hx_tmp = (rr < ((Float)2.2250738585072014e-308));
            		}
            		else {
HXLINE( 105)			_hx_tmp = true;
            		}
HXDLIN( 105)		if (_hx_tmp) {
HXLINE( 107)			return false;
            		}
HXLINE( 111)		Float a = -((c + ::Math_obj::sqrt(sigma)));
HXLINE( 114)		bool _hx_tmp1;
HXDLIN( 114)		if ((((Float)0.0) <= a)) {
HXLINE( 114)			_hx_tmp1 = (a <= (input->maxFraction * rr));
            		}
            		else {
HXLINE( 114)			_hx_tmp1 = false;
            		}
HXDLIN( 114)		if (_hx_tmp1) {
HXLINE( 116)			a = ((Float)a / (Float)rr);
HXLINE( 117)			output->fraction = a;
HXLINE( 119)			output->normal->x = (sX + (a * rX));
HXLINE( 120)			output->normal->y = (sY + (a * rY));
HXLINE( 121)			output->normal->normalize();
HXLINE( 122)			return true;
            		}
HXLINE( 125)		return false;
            	}


void B2CircleShape_obj::computeAABB( ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Transform transform){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_131_computeAABB)
HXLINE( 133)		 ::box2D::common::math::B2Mat22 tMat = transform->R;
HXLINE( 134)		Float transform1 = transform->position->x;
HXDLIN( 134)		Float pX = (tMat->col1->x * this->m_p->x);
HXDLIN( 134)		Float pX1 = (transform1 + (pX + (tMat->col2->x * this->m_p->y)));
HXLINE( 135)		Float transform2 = transform->position->y;
HXDLIN( 135)		Float pY = (tMat->col1->y * this->m_p->x);
HXDLIN( 135)		Float pY1 = (transform2 + (pY + (tMat->col2->y * this->m_p->y)));
HXLINE( 136)		{
HXLINE( 136)			 ::box2D::common::math::B2Vec2 _this = aabb->lowerBound;
HXDLIN( 136)			_this->x = (pX1 - this->m_radius);
HXDLIN( 136)			_this->y = (pY1 - this->m_radius);
            		}
HXLINE( 137)		{
HXLINE( 137)			 ::box2D::common::math::B2Vec2 _this1 = aabb->upperBound;
HXDLIN( 137)			_this1->x = (pX1 + this->m_radius);
HXDLIN( 137)			_this1->y = (pY1 + this->m_radius);
            		}
            	}


void B2CircleShape_obj::computeMass( ::box2D::collision::shapes::B2MassData massData,Float density){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_143_computeMass)
HXLINE( 144)		massData->mass = (((density * ::box2D::common::B2Settings_obj::b2_pi) * this->m_radius) * this->m_radius);
HXLINE( 145)		{
HXLINE( 145)			 ::box2D::common::math::B2Vec2 _this = massData->center;
HXDLIN( 145)			 ::box2D::common::math::B2Vec2 v = this->m_p;
HXDLIN( 145)			_this->x = v->x;
HXDLIN( 145)			_this->y = v->y;
            		}
HXLINE( 149)		Float massData1 = massData->mass;
HXDLIN( 149)		Float _hx_tmp = ((((Float)0.5) * this->m_radius) * this->m_radius);
HXDLIN( 149)		Float _hx_tmp1 = (this->m_p->x * this->m_p->x);
HXDLIN( 149)		massData->I = (massData1 * (_hx_tmp + (_hx_tmp1 + (this->m_p->y * this->m_p->y))));
            	}


Float B2CircleShape_obj::computeSubmergedArea( ::box2D::common::math::B2Vec2 normal,Float offset, ::box2D::common::math::B2Transform xf, ::box2D::common::math::B2Vec2 c){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_160_computeSubmergedArea)
HXLINE( 161)		 ::box2D::common::math::B2Vec2 p = ::box2D::common::math::B2Math_obj::mulX(xf,this->m_p,true);
HXLINE( 162)		Float l = -((::box2D::common::math::B2Math_obj::dot(normal,p) - offset));
HXLINE( 164)		if ((l < (-(this->m_radius) + ((Float)2.2250738585072014e-308)))) {
HXLINE( 167)			return (int)0;
            		}
HXLINE( 169)		if ((l > this->m_radius)) {
HXLINE( 172)			{
HXLINE( 172)				c->x = p->x;
HXDLIN( 172)				c->y = p->y;
            			}
HXLINE( 173)			return ((::Math_obj::PI * this->m_radius) * this->m_radius);
            		}
HXLINE( 177)		Float r2 = (this->m_radius * this->m_radius);
HXLINE( 178)		Float l2 = (l * l);
HXLINE( 179)		Float area = ::Math_obj::asin(((Float)l / (Float)this->m_radius));
HXDLIN( 179)		Float area1 = (r2 * (area + ((Float)::Math_obj::PI / (Float)(int)2)));
HXDLIN( 179)		Float area2 = (area1 + (l * ::Math_obj::sqrt((r2 - l2))));
HXLINE( 180)		Float com = ((Float)(((Float)-0.66666666666666663) * ::Math_obj::pow((r2 - l2),((Float)1.5))) / (Float)area2);
HXLINE( 182)		Float p1 = p->x;
HXDLIN( 182)		c->x = (p1 + (normal->x * com));
HXLINE( 183)		Float p2 = p->y;
HXDLIN( 183)		c->y = (p2 + (normal->y * com));
HXLINE( 185)		return area2;
            	}


 ::box2D::common::math::B2Vec2 B2CircleShape_obj::getLocalPosition(){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_192_getLocalPosition)
HXDLIN( 192)		return this->m_p;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2CircleShape_obj,getLocalPosition,return )

void B2CircleShape_obj::setLocalPosition( ::box2D::common::math::B2Vec2 position){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_199_setLocalPosition)
HXDLIN( 199)		 ::box2D::common::math::B2Vec2 _this = this->m_p;
HXDLIN( 199)		_this->x = position->x;
HXDLIN( 199)		_this->y = position->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2CircleShape_obj,setLocalPosition,(void))

Float B2CircleShape_obj::getRadius(){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_207_getRadius)
HXDLIN( 207)		return this->m_radius;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2CircleShape_obj,getRadius,return )

void B2CircleShape_obj::setRadius(Float radius){
            	HX_STACKFRAME(&_hx_pos_a52065e61d1ac738_215_setRadius)
HXDLIN( 215)		this->m_radius = radius;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2CircleShape_obj,setRadius,(void))


hx::ObjectPtr< B2CircleShape_obj > B2CircleShape_obj::__new(hx::Null< Float >  __o_radius) {
	hx::ObjectPtr< B2CircleShape_obj > __this = new B2CircleShape_obj();
	__this->__construct(__o_radius);
	return __this;
}

hx::ObjectPtr< B2CircleShape_obj > B2CircleShape_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_radius) {
	B2CircleShape_obj *__this = (B2CircleShape_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2CircleShape_obj), true, "box2D.collision.shapes.B2CircleShape"));
	*(void **)__this = B2CircleShape_obj::_hx_vtable;
	__this->__construct(__o_radius);
	return __this;
}

B2CircleShape_obj::B2CircleShape_obj()
{
}

void B2CircleShape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2CircleShape);
	HX_MARK_MEMBER_NAME(m_p,"m_p");
	HX_MARK_END_CLASS();
}

void B2CircleShape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_p,"m_p");
}

hx::Val B2CircleShape_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_p") ) { return hx::Val( m_p ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testPoint") ) { return hx::Val( testPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRadius") ) { return hx::Val( getRadius_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRadius") ) { return hx::Val( setRadius_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"computeAABB") ) { return hx::Val( computeAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"computeMass") ) { return hx::Val( computeMass_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getLocalPosition") ) { return hx::Val( getLocalPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLocalPosition") ) { return hx::Val( setLocalPosition_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"computeSubmergedArea") ) { return hx::Val( computeSubmergedArea_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2CircleShape_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m_p") ) { m_p=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2CircleShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_p","\xde","\x08","\x53","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2CircleShape_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2CircleShape_obj,m_p),HX_HCSTRING("m_p","\xde","\x08","\x53","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2CircleShape_obj_sStaticStorageInfo = 0;
#endif

static ::String B2CircleShape_obj_sMemberFields[] = {
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("testPoint","\x9e","\xf2","\x91","\x8f"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("computeAABB","\x97","\x39","\x7f","\xc2"),
	HX_HCSTRING("computeMass","\x0b","\x3c","\x86","\xca"),
	HX_HCSTRING("computeSubmergedArea","\xe2","\x2f","\x3c","\xaf"),
	HX_HCSTRING("getLocalPosition","\xbe","\xb2","\x15","\xae"),
	HX_HCSTRING("setLocalPosition","\x32","\xa0","\x57","\x04"),
	HX_HCSTRING("getRadius","\x88","\x59","\x4d","\x2d"),
	HX_HCSTRING("setRadius","\x94","\x45","\x9e","\x10"),
	HX_HCSTRING("m_p","\xde","\x08","\x53","\x00"),
	::String(null()) };

static void B2CircleShape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2CircleShape_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2CircleShape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2CircleShape_obj::__mClass,"__mClass");
};

#endif

hx::Class B2CircleShape_obj::__mClass;

void B2CircleShape_obj::__register()
{
	hx::Object *dummy = new B2CircleShape_obj;
	B2CircleShape_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.shapes.B2CircleShape","\x12","\xca","\x9a","\x23");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2CircleShape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2CircleShape_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2CircleShape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2CircleShape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2CircleShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2CircleShape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
} // end namespace shapes
