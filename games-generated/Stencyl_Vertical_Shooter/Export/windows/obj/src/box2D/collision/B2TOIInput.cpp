// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2DistanceProxy
#include <box2D/collision/B2DistanceProxy.h>
#endif
#ifndef INCLUDED_box2D_collision_B2TOIInput
#include <box2D/collision/B2TOIInput.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_03cb569d26a509b1_29_new,"box2D.collision.B2TOIInput","new",0x5d1ec1cb,"box2D.collision.B2TOIInput.new","box2D/collision/B2TOIInput.hx",29,0xa1d7f383)
namespace box2D{
namespace collision{

void B2TOIInput_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_03cb569d26a509b1_29_new)
HXLINE(  31)		this->proxyA =  ::box2D::collision::B2DistanceProxy_obj::__alloc( HX_CTX );
HXLINE(  32)		this->proxyB =  ::box2D::collision::B2DistanceProxy_obj::__alloc( HX_CTX );
HXLINE(  33)		this->sweepA =  ::box2D::common::math::B2Sweep_obj::__alloc( HX_CTX );
HXLINE(  34)		this->sweepB =  ::box2D::common::math::B2Sweep_obj::__alloc( HX_CTX );
            	}

Dynamic B2TOIInput_obj::__CreateEmpty() { return new B2TOIInput_obj; }

void *B2TOIInput_obj::_hx_vtable = 0;

Dynamic B2TOIInput_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2TOIInput_obj > _hx_result = new B2TOIInput_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2TOIInput_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x25f90f45;
}


hx::ObjectPtr< B2TOIInput_obj > B2TOIInput_obj::__new() {
	hx::ObjectPtr< B2TOIInput_obj > __this = new B2TOIInput_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2TOIInput_obj > B2TOIInput_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2TOIInput_obj *__this = (B2TOIInput_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2TOIInput_obj), true, "box2D.collision.B2TOIInput"));
	*(void **)__this = B2TOIInput_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2TOIInput_obj::B2TOIInput_obj()
{
}

void B2TOIInput_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2TOIInput);
	HX_MARK_MEMBER_NAME(proxyA,"proxyA");
	HX_MARK_MEMBER_NAME(proxyB,"proxyB");
	HX_MARK_MEMBER_NAME(sweepA,"sweepA");
	HX_MARK_MEMBER_NAME(sweepB,"sweepB");
	HX_MARK_MEMBER_NAME(tolerance,"tolerance");
	HX_MARK_END_CLASS();
}

void B2TOIInput_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(proxyA,"proxyA");
	HX_VISIT_MEMBER_NAME(proxyB,"proxyB");
	HX_VISIT_MEMBER_NAME(sweepA,"sweepA");
	HX_VISIT_MEMBER_NAME(sweepB,"sweepB");
	HX_VISIT_MEMBER_NAME(tolerance,"tolerance");
}

hx::Val B2TOIInput_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"proxyA") ) { return hx::Val( proxyA ); }
		if (HX_FIELD_EQ(inName,"proxyB") ) { return hx::Val( proxyB ); }
		if (HX_FIELD_EQ(inName,"sweepA") ) { return hx::Val( sweepA ); }
		if (HX_FIELD_EQ(inName,"sweepB") ) { return hx::Val( sweepB ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tolerance") ) { return hx::Val( tolerance ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2TOIInput_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"proxyA") ) { proxyA=inValue.Cast<  ::box2D::collision::B2DistanceProxy >(); return inValue; }
		if (HX_FIELD_EQ(inName,"proxyB") ) { proxyB=inValue.Cast<  ::box2D::collision::B2DistanceProxy >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweepA") ) { sweepA=inValue.Cast<  ::box2D::common::math::B2Sweep >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweepB") ) { sweepB=inValue.Cast<  ::box2D::common::math::B2Sweep >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tolerance") ) { tolerance=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2TOIInput_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("proxyA","\x13","\xb2","\x60","\xb5"));
	outFields->push(HX_HCSTRING("proxyB","\x14","\xb2","\x60","\xb5"));
	outFields->push(HX_HCSTRING("sweepA","\xd5","\x18","\xc9","\xc2"));
	outFields->push(HX_HCSTRING("sweepB","\xd6","\x18","\xc9","\xc2"));
	outFields->push(HX_HCSTRING("tolerance","\x0d","\x3d","\x7c","\x33"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2TOIInput_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::collision::B2DistanceProxy*/ ,(int)offsetof(B2TOIInput_obj,proxyA),HX_HCSTRING("proxyA","\x13","\xb2","\x60","\xb5")},
	{hx::fsObject /*::box2D::collision::B2DistanceProxy*/ ,(int)offsetof(B2TOIInput_obj,proxyB),HX_HCSTRING("proxyB","\x14","\xb2","\x60","\xb5")},
	{hx::fsObject /*::box2D::common::math::B2Sweep*/ ,(int)offsetof(B2TOIInput_obj,sweepA),HX_HCSTRING("sweepA","\xd5","\x18","\xc9","\xc2")},
	{hx::fsObject /*::box2D::common::math::B2Sweep*/ ,(int)offsetof(B2TOIInput_obj,sweepB),HX_HCSTRING("sweepB","\xd6","\x18","\xc9","\xc2")},
	{hx::fsFloat,(int)offsetof(B2TOIInput_obj,tolerance),HX_HCSTRING("tolerance","\x0d","\x3d","\x7c","\x33")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2TOIInput_obj_sStaticStorageInfo = 0;
#endif

static ::String B2TOIInput_obj_sMemberFields[] = {
	HX_HCSTRING("proxyA","\x13","\xb2","\x60","\xb5"),
	HX_HCSTRING("proxyB","\x14","\xb2","\x60","\xb5"),
	HX_HCSTRING("sweepA","\xd5","\x18","\xc9","\xc2"),
	HX_HCSTRING("sweepB","\xd6","\x18","\xc9","\xc2"),
	HX_HCSTRING("tolerance","\x0d","\x3d","\x7c","\x33"),
	::String(null()) };

static void B2TOIInput_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2TOIInput_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2TOIInput_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2TOIInput_obj::__mClass,"__mClass");
};

#endif

hx::Class B2TOIInput_obj::__mClass;

void B2TOIInput_obj::__register()
{
	hx::Object *dummy = new B2TOIInput_obj;
	B2TOIInput_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2TOIInput","\x59","\x80","\xf9","\x44");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2TOIInput_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2TOIInput_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2TOIInput_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2TOIInput_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2TOIInput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2TOIInput_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
