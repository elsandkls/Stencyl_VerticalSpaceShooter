// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastInput
#include <box2D/collision/B2RayCastInput.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastOutput
#include <box2D/collision/B2RayCastOutput.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2EdgeShape
#include <box2D/collision/shapes/B2EdgeShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2MassData
#include <box2D/collision/shapes/B2MassData.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_356_new,"box2D.collision.shapes.B2EdgeShape","new",0x3e45fdf7,"box2D.collision.shapes.B2EdgeShape.new","box2D/collision/shapes/B2EdgeShape.hx",356,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_43_testPoint,"box2D.collision.shapes.B2EdgeShape","testPoint",0x9c0ceb75,"box2D.collision.shapes.B2EdgeShape.testPoint","box2D/collision/shapes/B2EdgeShape.hx",43,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_50_rayCast,"box2D.collision.shapes.B2EdgeShape","rayCast",0x3dcaa2e0,"box2D.collision.shapes.B2EdgeShape.rayCast","box2D/collision/shapes/B2EdgeShape.hx",50,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_98_computeAABB,"box2D.collision.shapes.B2EdgeShape","computeAABB",0x1e4b562e,"box2D.collision.shapes.B2EdgeShape.computeAABB","box2D/collision/shapes/B2EdgeShape.hx",98,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_125_computeMass,"box2D.collision.shapes.B2EdgeShape","computeMass",0x265258a2,"box2D.collision.shapes.B2EdgeShape.computeMass","box2D/collision/shapes/B2EdgeShape.hx",125,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_139_computeSubmergedArea,"box2D.collision.shapes.B2EdgeShape","computeSubmergedArea",0x0af9486b,"box2D.collision.shapes.B2EdgeShape.computeSubmergedArea","box2D/collision/shapes/B2EdgeShape.hx",139,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_192_getLength,"box2D.collision.shapes.B2EdgeShape","getLength",0x27d916f3,"box2D.collision.shapes.B2EdgeShape.getLength","box2D/collision/shapes/B2EdgeShape.hx",192,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_200_getVertex1,"box2D.collision.shapes.B2EdgeShape","getVertex1",0xac1865a0,"box2D.collision.shapes.B2EdgeShape.getVertex1","box2D/collision/shapes/B2EdgeShape.hx",200,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_208_getVertex2,"box2D.collision.shapes.B2EdgeShape","getVertex2",0xac1865a1,"box2D.collision.shapes.B2EdgeShape.getVertex2","box2D/collision/shapes/B2EdgeShape.hx",208,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_218_getCoreVertex1,"box2D.collision.shapes.B2EdgeShape","getCoreVertex1",0x7ab96f81,"box2D.collision.shapes.B2EdgeShape.getCoreVertex1","box2D/collision/shapes/B2EdgeShape.hx",218,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_228_getCoreVertex2,"box2D.collision.shapes.B2EdgeShape","getCoreVertex2",0x7ab96f82,"box2D.collision.shapes.B2EdgeShape.getCoreVertex2","box2D/collision/shapes/B2EdgeShape.hx",228,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_237_getNormalVector,"box2D.collision.shapes.B2EdgeShape","getNormalVector",0x14383817,"box2D.collision.shapes.B2EdgeShape.getNormalVector","box2D/collision/shapes/B2EdgeShape.hx",237,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_247_getDirectionVector,"box2D.collision.shapes.B2EdgeShape","getDirectionVector",0xe92694b5,"box2D.collision.shapes.B2EdgeShape.getDirectionVector","box2D/collision/shapes/B2EdgeShape.hx",247,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_256_getCorner1Vector,"box2D.collision.shapes.B2EdgeShape","getCorner1Vector",0x1a91fe32,"box2D.collision.shapes.B2EdgeShape.getCorner1Vector","box2D/collision/shapes/B2EdgeShape.hx",256,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_265_getCorner2Vector,"box2D.collision.shapes.B2EdgeShape","getCorner2Vector",0x442774f3,"box2D.collision.shapes.B2EdgeShape.getCorner2Vector","box2D/collision/shapes/B2EdgeShape.hx",265,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_274_corner1IsConvex,"box2D.collision.shapes.B2EdgeShape","corner1IsConvex",0x851339e4,"box2D.collision.shapes.B2EdgeShape.corner1IsConvex","box2D/collision/shapes/B2EdgeShape.hx",274,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_283_corner2IsConvex,"box2D.collision.shapes.B2EdgeShape","corner2IsConvex",0x5804a2e5,"box2D.collision.shapes.B2EdgeShape.corner2IsConvex","box2D/collision/shapes/B2EdgeShape.hx",283,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_290_getFirstVertex,"box2D.collision.shapes.B2EdgeShape","getFirstVertex",0xff04fa87,"box2D.collision.shapes.B2EdgeShape.getFirstVertex","box2D/collision/shapes/B2EdgeShape.hx",290,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_302_getNextEdge,"box2D.collision.shapes.B2EdgeShape","getNextEdge",0x709b4e1d,"box2D.collision.shapes.B2EdgeShape.getNextEdge","box2D/collision/shapes/B2EdgeShape.hx",302,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_310_getPrevEdge,"box2D.collision.shapes.B2EdgeShape","getPrevEdge",0x8d9c881d,"box2D.collision.shapes.B2EdgeShape.getPrevEdge","box2D/collision/shapes/B2EdgeShape.hx",310,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_318_support,"box2D.collision.shapes.B2EdgeShape","support",0x55b15126,"box2D.collision.shapes.B2EdgeShape.support","box2D/collision/shapes/B2EdgeShape.hx",318,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_341_copy,"box2D.collision.shapes.B2EdgeShape","copy",0x37ba723e,"box2D.collision.shapes.B2EdgeShape.copy","box2D/collision/shapes/B2EdgeShape.hx",341,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_404_setPrevEdge,"box2D.collision.shapes.B2EdgeShape","setPrevEdge",0x98098f29,"box2D.collision.shapes.B2EdgeShape.setPrevEdge","box2D/collision/shapes/B2EdgeShape.hx",404,0x6bc8ae98)
HX_LOCAL_STACK_FRAME(_hx_pos_05d8da8e51dc28b4_415_setNextEdge,"box2D.collision.shapes.B2EdgeShape","setNextEdge",0x7b085529,"box2D.collision.shapes.B2EdgeShape.setNextEdge","box2D/collision/shapes/B2EdgeShape.hx",415,0x6bc8ae98)
namespace box2D{
namespace collision{
namespace shapes{

void B2EdgeShape_obj::__construct( ::box2D::common::math::B2Vec2 v1, ::box2D::common::math::B2Vec2 v2){
            	HX_GC_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_356_new)
HXLINE( 357)		super::__construct();
HXLINE( 359)		this->s_supportVec =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 360)		this->m_v1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 361)		this->m_v2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 363)		this->m_v0 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 364)		this->m_v3 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 365)		this->m_hasVertex0 = false;
HXLINE( 366)		this->m_hasVertex3 = false;
HXLINE( 368)		this->m_coreV1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 369)		this->m_coreV2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 371)		this->m_normal =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 373)		this->m_direction =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 375)		this->m_cornerDir1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 377)		this->m_cornerDir2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 379)		this->m_type = (int)2;
HXLINE( 381)		this->m_prevEdge = null();
HXLINE( 382)		this->m_nextEdge = null();
HXLINE( 384)		this->m_v1 = v1;
HXLINE( 385)		this->m_v2 = v2;
HXLINE( 387)		{
HXLINE( 387)			 ::box2D::common::math::B2Vec2 _this = this->m_direction;
HXDLIN( 387)			_this->x = (this->m_v2->x - this->m_v1->x);
HXDLIN( 387)			_this->y = (this->m_v2->y - this->m_v1->y);
            		}
HXLINE( 388)		this->m_length = this->m_direction->normalize();
HXLINE( 389)		{
HXLINE( 389)			 ::box2D::common::math::B2Vec2 _this1 = this->m_normal;
HXDLIN( 389)			Float y_ = -(this->m_direction->x);
HXDLIN( 389)			_this1->x = this->m_direction->y;
HXDLIN( 389)			_this1->y = y_;
            		}
HXLINE( 391)		{
HXLINE( 391)			 ::box2D::common::math::B2Vec2 _this2 = this->m_coreV1;
HXDLIN( 391)			Float x_ = -(::box2D::common::B2Settings_obj::b2_toiSlop);
HXLINE( 392)			Float y_1 = -(::box2D::common::B2Settings_obj::b2_toiSlop);
HXLINE( 391)			_this2->x = ((x_ * (this->m_normal->x - this->m_direction->x)) + this->m_v1->x);
HXDLIN( 391)			_this2->y = ((y_1 * (this->m_normal->y - this->m_direction->y)) + this->m_v1->y);
            		}
HXLINE( 393)		{
HXLINE( 393)			 ::box2D::common::math::B2Vec2 _this3 = this->m_coreV2;
HXDLIN( 393)			Float x_1 = -(::box2D::common::B2Settings_obj::b2_toiSlop);
HXLINE( 394)			Float y_2 = -(::box2D::common::B2Settings_obj::b2_toiSlop);
HXLINE( 393)			_this3->x = ((x_1 * (this->m_normal->x + this->m_direction->x)) + this->m_v2->x);
HXDLIN( 393)			_this3->y = ((y_2 * (this->m_normal->y + this->m_direction->y)) + this->m_v2->y);
            		}
HXLINE( 396)		this->m_cornerDir1 = this->m_normal;
HXLINE( 397)		{
HXLINE( 397)			 ::box2D::common::math::B2Vec2 _this4 = this->m_cornerDir2;
HXDLIN( 397)			_this4->x = -(this->m_normal->x);
HXDLIN( 397)			_this4->y = -(this->m_normal->y);
            		}
            	}

Dynamic B2EdgeShape_obj::__CreateEmpty() { return new B2EdgeShape_obj; }

void *B2EdgeShape_obj::_hx_vtable = 0;

Dynamic B2EdgeShape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2EdgeShape_obj > _hx_result = new B2EdgeShape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool B2EdgeShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19eeb38a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x19eeb38a;
	} else {
		return inClassId==(int)0x1f4c50c5;
	}
}

bool B2EdgeShape_obj::testPoint( ::box2D::common::math::B2Transform transform, ::box2D::common::math::B2Vec2 p){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_43_testPoint)
HXDLIN(  43)		return false;
            	}


bool B2EdgeShape_obj::rayCast( ::box2D::collision::B2RayCastOutput output, ::box2D::collision::B2RayCastInput input, ::box2D::common::math::B2Transform transform){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_50_rayCast)
HXLINE(  51)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE(  52)		Float rX = (input->p2->x - input->p1->x);
HXLINE(  53)		Float rY = (input->p2->y - input->p1->y);
HXLINE(  56)		tMat = transform->R;
HXLINE(  57)		Float transform1 = transform->position->x;
HXDLIN(  57)		Float v1X = (tMat->col1->x * this->m_v1->x);
HXDLIN(  57)		Float v1X1 = (transform1 + (v1X + (tMat->col2->x * this->m_v1->y)));
HXLINE(  58)		Float transform2 = transform->position->y;
HXDLIN(  58)		Float v1Y = (tMat->col1->y * this->m_v1->x);
HXDLIN(  58)		Float v1Y1 = (transform2 + (v1Y + (tMat->col2->y * this->m_v1->y)));
HXLINE(  61)		Float transform3 = transform->position->y;
HXDLIN(  61)		Float nX = (tMat->col1->y * this->m_v2->x);
HXDLIN(  61)		Float nX1 = ((transform3 + (nX + (tMat->col2->y * this->m_v2->y))) - v1Y1);
HXLINE(  62)		Float transform4 = transform->position->x;
HXDLIN(  62)		Float nY = (tMat->col1->x * this->m_v2->x);
HXDLIN(  62)		Float nY1 = -(((transform4 + (nY + (tMat->col2->x * this->m_v2->y))) - v1X1));
HXLINE(  64)		Float k_slop = ((Float)2.2250738585072014e-306);
HXLINE(  65)		Float denom = -(((rX * nX1) + (rY * nY1)));
HXLINE(  68)		if ((denom > k_slop)) {
HXLINE(  71)			Float bX = (input->p1->x - v1X1);
HXLINE(  72)			Float bY = (input->p1->y - v1Y1);
HXLINE(  73)			Float a = ((bX * nX1) + (bY * nY1));
HXLINE(  75)			bool _hx_tmp;
HXDLIN(  75)			if ((((Float)0.0) <= a)) {
HXLINE(  75)				_hx_tmp = (a <= (input->maxFraction * denom));
            			}
            			else {
HXLINE(  75)				_hx_tmp = false;
            			}
HXDLIN(  75)			if (_hx_tmp) {
HXLINE(  77)				Float mu2 = ((-(rX) * bY) + (rY * bX));
HXLINE(  80)				bool _hx_tmp1;
HXDLIN(  80)				if (((-(k_slop) * denom) <= mu2)) {
HXLINE(  80)					_hx_tmp1 = (mu2 <= (denom * (((Float)1.0) + k_slop)));
            				}
            				else {
HXLINE(  80)					_hx_tmp1 = false;
            				}
HXDLIN(  80)				if (_hx_tmp1) {
HXLINE(  82)					a = ((Float)a / (Float)denom);
HXLINE(  83)					output->fraction = a;
HXLINE(  84)					Float nLen = ::Math_obj::sqrt(((nX1 * nX1) + (nY1 * nY1)));
HXLINE(  85)					output->normal->x = ((Float)nX1 / (Float)nLen);
HXLINE(  86)					output->normal->y = ((Float)nY1 / (Float)nLen);
HXLINE(  87)					return true;
            				}
            			}
            		}
HXLINE(  92)		return false;
            	}


void B2EdgeShape_obj::computeAABB( ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Transform transform){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_98_computeAABB)
HXLINE(  99)		 ::box2D::common::math::B2Mat22 tMat = transform->R;
HXLINE( 101)		Float transform1 = transform->position->x;
HXDLIN( 101)		Float v1X = (tMat->col1->x * this->m_v1->x);
HXDLIN( 101)		Float v1X1 = (transform1 + (v1X + (tMat->col2->x * this->m_v1->y)));
HXLINE( 102)		Float transform2 = transform->position->y;
HXDLIN( 102)		Float v1Y = (tMat->col1->y * this->m_v1->x);
HXDLIN( 102)		Float v1Y1 = (transform2 + (v1Y + (tMat->col2->y * this->m_v1->y)));
HXLINE( 104)		Float transform3 = transform->position->x;
HXDLIN( 104)		Float v2X = (tMat->col1->x * this->m_v2->x);
HXDLIN( 104)		Float v2X1 = (transform3 + (v2X + (tMat->col2->x * this->m_v2->y)));
HXLINE( 105)		Float transform4 = transform->position->y;
HXDLIN( 105)		Float v2Y = (tMat->col1->y * this->m_v2->x);
HXDLIN( 105)		Float v2Y1 = (transform4 + (v2Y + (tMat->col2->y * this->m_v2->y)));
HXLINE( 106)		if ((v1X1 < v2X1)) {
HXLINE( 107)			aabb->lowerBound->x = v1X1;
HXLINE( 108)			aabb->upperBound->x = v2X1;
            		}
            		else {
HXLINE( 110)			aabb->lowerBound->x = v2X1;
HXLINE( 111)			aabb->upperBound->x = v1X1;
            		}
HXLINE( 113)		if ((v1Y1 < v2Y1)) {
HXLINE( 114)			aabb->lowerBound->y = v1Y1;
HXLINE( 115)			aabb->upperBound->y = v2Y1;
            		}
            		else {
HXLINE( 117)			aabb->lowerBound->y = v2Y1;
HXLINE( 118)			aabb->upperBound->y = v1Y1;
            		}
            	}


void B2EdgeShape_obj::computeMass( ::box2D::collision::shapes::B2MassData massData,Float density){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_125_computeMass)
HXLINE( 126)		massData->mass = (int)0;
HXLINE( 127)		{
HXLINE( 127)			 ::box2D::common::math::B2Vec2 _this = massData->center;
HXDLIN( 127)			 ::box2D::common::math::B2Vec2 v = this->m_v1;
HXDLIN( 127)			_this->x = v->x;
HXDLIN( 127)			_this->y = v->y;
            		}
HXLINE( 128)		massData->I = (int)0;
            	}


Float B2EdgeShape_obj::computeSubmergedArea( ::box2D::common::math::B2Vec2 normal,Float offset, ::box2D::common::math::B2Transform xf, ::box2D::common::math::B2Vec2 c){
            	HX_GC_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_139_computeSubmergedArea)
HXLINE( 143)		Float v0 = (normal->x * offset);
HXDLIN( 143)		 ::box2D::common::math::B2Vec2 v01 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,v0,(normal->y * offset));
HXLINE( 145)		 ::box2D::common::math::B2Vec2 v1 = ::box2D::common::math::B2Math_obj::mulX(xf,this->m_v1,true);
HXLINE( 146)		 ::box2D::common::math::B2Vec2 v2 = ::box2D::common::math::B2Math_obj::mulX(xf,this->m_v2,true);
HXLINE( 148)		Float d1 = (::box2D::common::math::B2Math_obj::dot(normal,v1) - offset);
HXLINE( 149)		Float d2 = (::box2D::common::math::B2Math_obj::dot(normal,v2) - offset);
HXLINE( 150)		if ((d1 > (int)0)) {
HXLINE( 152)			if ((d2 > (int)0)) {
HXLINE( 154)				return (int)0;
            			}
            			else {
HXLINE( 159)				Float _hx_tmp = (((Float)-(d2) / (Float)(d1 - d2)) * v1->x);
HXDLIN( 159)				v1->x = (_hx_tmp + (((Float)d1 / (Float)(d1 - d2)) * v2->x));
HXLINE( 160)				Float _hx_tmp1 = (((Float)-(d2) / (Float)(d1 - d2)) * v1->y);
HXDLIN( 160)				v1->y = (_hx_tmp1 + (((Float)d1 / (Float)(d1 - d2)) * v2->y));
            			}
            		}
            		else {
HXLINE( 165)			if ((d2 > (int)0)) {
HXLINE( 168)				Float _hx_tmp2 = (((Float)-(d2) / (Float)(d1 - d2)) * v1->x);
HXDLIN( 168)				v2->x = (_hx_tmp2 + (((Float)d1 / (Float)(d1 - d2)) * v2->x));
HXLINE( 169)				Float _hx_tmp3 = (((Float)-(d2) / (Float)(d1 - d2)) * v1->y);
HXDLIN( 169)				v2->y = (_hx_tmp3 + (((Float)d1 / (Float)(d1 - d2)) * v2->y));
            			}
            		}
HXLINE( 178)		c->x = ((Float)((v01->x + v1->x) + v2->x) / (Float)(int)3);
HXLINE( 179)		c->y = ((Float)((v01->y + v1->y) + v2->y) / (Float)(int)3);
HXLINE( 184)		Float _hx_tmp4 = (v1->x - v01->x);
HXDLIN( 184)		Float _hx_tmp5 = (_hx_tmp4 * (v2->y - v01->y));
HXDLIN( 184)		Float _hx_tmp6 = (v1->y - v01->y);
HXDLIN( 184)		return (((Float)0.5) * (_hx_tmp5 - (_hx_tmp6 * (v2->x - v01->x))));
            	}


Float B2EdgeShape_obj::getLength(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_192_getLength)
HXDLIN( 192)		return this->m_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getLength,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::getVertex1(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_200_getVertex1)
HXDLIN( 200)		return this->m_v1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getVertex1,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::getVertex2(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_208_getVertex2)
HXDLIN( 208)		return this->m_v2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getVertex2,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::getCoreVertex1(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_218_getCoreVertex1)
HXDLIN( 218)		return this->m_coreV1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getCoreVertex1,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::getCoreVertex2(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_228_getCoreVertex2)
HXDLIN( 228)		return this->m_coreV2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getCoreVertex2,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::getNormalVector(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_237_getNormalVector)
HXDLIN( 237)		return this->m_normal;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getNormalVector,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::getDirectionVector(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_247_getDirectionVector)
HXDLIN( 247)		return this->m_direction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getDirectionVector,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::getCorner1Vector(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_256_getCorner1Vector)
HXDLIN( 256)		return this->m_cornerDir1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getCorner1Vector,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::getCorner2Vector(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_265_getCorner2Vector)
HXDLIN( 265)		return this->m_cornerDir2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getCorner2Vector,return )

bool B2EdgeShape_obj::corner1IsConvex(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_274_corner1IsConvex)
HXDLIN( 274)		return this->m_cornerConvex1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,corner1IsConvex,return )

bool B2EdgeShape_obj::corner2IsConvex(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_283_corner2IsConvex)
HXDLIN( 283)		return this->m_cornerConvex2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,corner2IsConvex,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::getFirstVertex( ::box2D::common::math::B2Transform xf){
            	HX_GC_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_290_getFirstVertex)
HXLINE( 292)		 ::box2D::common::math::B2Mat22 tMat = xf->R;
HXLINE( 293)		Float xf1 = xf->position->x;
HXDLIN( 293)		Float _hx_tmp = (tMat->col1->x * this->m_coreV1->x);
HXDLIN( 293)		Float _hx_tmp1 = (xf1 + (_hx_tmp + (tMat->col2->x * this->m_coreV1->y)));
HXLINE( 294)		Float xf2 = xf->position->y;
HXDLIN( 294)		Float _hx_tmp2 = (tMat->col1->y * this->m_coreV1->x);
HXLINE( 293)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp1,(xf2 + (_hx_tmp2 + (tMat->col2->y * this->m_coreV1->y))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2EdgeShape_obj,getFirstVertex,return )

 ::box2D::collision::shapes::B2EdgeShape B2EdgeShape_obj::getNextEdge(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_302_getNextEdge)
HXDLIN( 302)		return this->m_nextEdge;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getNextEdge,return )

 ::box2D::collision::shapes::B2EdgeShape B2EdgeShape_obj::getPrevEdge(){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_310_getPrevEdge)
HXDLIN( 310)		return this->m_prevEdge;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2EdgeShape_obj,getPrevEdge,return )

 ::box2D::common::math::B2Vec2 B2EdgeShape_obj::support( ::box2D::common::math::B2Transform xf,Float dX,Float dY){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_318_support)
HXLINE( 319)		 ::box2D::common::math::B2Mat22 tMat = xf->R;
HXLINE( 321)		Float xf1 = xf->position->x;
HXDLIN( 321)		Float v1X = (tMat->col1->x * this->m_coreV1->x);
HXDLIN( 321)		Float v1X1 = (xf1 + (v1X + (tMat->col2->x * this->m_coreV1->y)));
HXLINE( 322)		Float xf2 = xf->position->y;
HXDLIN( 322)		Float v1Y = (tMat->col1->y * this->m_coreV1->x);
HXDLIN( 322)		Float v1Y1 = (xf2 + (v1Y + (tMat->col2->y * this->m_coreV1->y)));
HXLINE( 325)		Float xf3 = xf->position->x;
HXDLIN( 325)		Float v2X = (tMat->col1->x * this->m_coreV2->x);
HXDLIN( 325)		Float v2X1 = (xf3 + (v2X + (tMat->col2->x * this->m_coreV2->y)));
HXLINE( 326)		Float xf4 = xf->position->y;
HXDLIN( 326)		Float v2Y = (tMat->col1->y * this->m_coreV2->x);
HXDLIN( 326)		Float v2Y1 = (xf4 + (v2Y + (tMat->col2->y * this->m_coreV2->y)));
HXLINE( 328)		if ((((v1X1 * dX) + (v1Y1 * dY)) > ((v2X1 * dX) + (v2Y1 * dY)))) {
HXLINE( 329)			this->s_supportVec->x = v1X1;
HXLINE( 330)			this->s_supportVec->y = v1Y1;
            		}
            		else {
HXLINE( 332)			this->s_supportVec->x = v2X1;
HXLINE( 333)			this->s_supportVec->y = v2Y1;
            		}
HXLINE( 335)		return this->s_supportVec;
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2EdgeShape_obj,support,return )

 ::box2D::collision::shapes::B2Shape B2EdgeShape_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_341_copy)
HXLINE( 342)		 ::box2D::collision::shapes::B2Shape s =  ::box2D::collision::shapes::B2EdgeShape_obj::__alloc( HX_CTX ,this->m_v1,this->m_v2);
HXLINE( 343)		s->set(hx::ObjectPtr<OBJ_>(this));
HXLINE( 345)		 ::box2D::collision::shapes::B2EdgeShape edge = hx::TCast<  ::box2D::collision::shapes::B2EdgeShape >::cast(s);
HXLINE( 346)		{
HXLINE( 346)			 ::box2D::common::math::B2Vec2 _this = edge->m_v0;
HXDLIN( 346)			 ::box2D::common::math::B2Vec2 v = this->m_v0;
HXDLIN( 346)			_this->x = v->x;
HXDLIN( 346)			_this->y = v->y;
            		}
HXLINE( 347)		{
HXLINE( 347)			 ::box2D::common::math::B2Vec2 _this1 = edge->m_v3;
HXDLIN( 347)			 ::box2D::common::math::B2Vec2 v1 = this->m_v3;
HXDLIN( 347)			_this1->x = v1->x;
HXDLIN( 347)			_this1->y = v1->y;
            		}
HXLINE( 348)		edge->m_hasVertex0 = this->m_hasVertex0;
HXLINE( 349)		edge->m_hasVertex3 = this->m_hasVertex3;
HXLINE( 350)		return s;
            	}


void B2EdgeShape_obj::setPrevEdge( ::box2D::collision::shapes::B2EdgeShape edge, ::box2D::common::math::B2Vec2 core, ::box2D::common::math::B2Vec2 cornerDir,bool convex){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_404_setPrevEdge)
HXLINE( 405)		this->m_prevEdge = edge;
HXLINE( 406)		this->m_coreV1 = core;
HXLINE( 407)		this->m_cornerDir1 = cornerDir;
HXLINE( 408)		this->m_cornerConvex1 = convex;
            	}


HX_DEFINE_DYNAMIC_FUNC4(B2EdgeShape_obj,setPrevEdge,(void))

void B2EdgeShape_obj::setNextEdge( ::box2D::collision::shapes::B2EdgeShape edge, ::box2D::common::math::B2Vec2 core, ::box2D::common::math::B2Vec2 cornerDir,bool convex){
            	HX_STACKFRAME(&_hx_pos_05d8da8e51dc28b4_415_setNextEdge)
HXLINE( 416)		this->m_nextEdge = edge;
HXLINE( 417)		this->m_coreV2 = core;
HXLINE( 418)		this->m_cornerDir2 = cornerDir;
HXLINE( 419)		this->m_cornerConvex2 = convex;
            	}


HX_DEFINE_DYNAMIC_FUNC4(B2EdgeShape_obj,setNextEdge,(void))


hx::ObjectPtr< B2EdgeShape_obj > B2EdgeShape_obj::__new( ::box2D::common::math::B2Vec2 v1, ::box2D::common::math::B2Vec2 v2) {
	hx::ObjectPtr< B2EdgeShape_obj > __this = new B2EdgeShape_obj();
	__this->__construct(v1,v2);
	return __this;
}

hx::ObjectPtr< B2EdgeShape_obj > B2EdgeShape_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::common::math::B2Vec2 v1, ::box2D::common::math::B2Vec2 v2) {
	B2EdgeShape_obj *__this = (B2EdgeShape_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2EdgeShape_obj), true, "box2D.collision.shapes.B2EdgeShape"));
	*(void **)__this = B2EdgeShape_obj::_hx_vtable;
	__this->__construct(v1,v2);
	return __this;
}

B2EdgeShape_obj::B2EdgeShape_obj()
{
}

void B2EdgeShape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2EdgeShape);
	HX_MARK_MEMBER_NAME(s_supportVec,"s_supportVec");
	HX_MARK_MEMBER_NAME(m_v1,"m_v1");
	HX_MARK_MEMBER_NAME(m_v2,"m_v2");
	HX_MARK_MEMBER_NAME(m_v0,"m_v0");
	HX_MARK_MEMBER_NAME(m_v3,"m_v3");
	HX_MARK_MEMBER_NAME(m_hasVertex0,"m_hasVertex0");
	HX_MARK_MEMBER_NAME(m_hasVertex3,"m_hasVertex3");
	HX_MARK_MEMBER_NAME(m_coreV1,"m_coreV1");
	HX_MARK_MEMBER_NAME(m_coreV2,"m_coreV2");
	HX_MARK_MEMBER_NAME(m_length,"m_length");
	HX_MARK_MEMBER_NAME(m_normal,"m_normal");
	HX_MARK_MEMBER_NAME(m_direction,"m_direction");
	HX_MARK_MEMBER_NAME(m_cornerDir1,"m_cornerDir1");
	HX_MARK_MEMBER_NAME(m_cornerDir2,"m_cornerDir2");
	HX_MARK_MEMBER_NAME(m_cornerConvex1,"m_cornerConvex1");
	HX_MARK_MEMBER_NAME(m_cornerConvex2,"m_cornerConvex2");
	HX_MARK_MEMBER_NAME(m_nextEdge,"m_nextEdge");
	HX_MARK_MEMBER_NAME(m_prevEdge,"m_prevEdge");
	HX_MARK_END_CLASS();
}

void B2EdgeShape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(s_supportVec,"s_supportVec");
	HX_VISIT_MEMBER_NAME(m_v1,"m_v1");
	HX_VISIT_MEMBER_NAME(m_v2,"m_v2");
	HX_VISIT_MEMBER_NAME(m_v0,"m_v0");
	HX_VISIT_MEMBER_NAME(m_v3,"m_v3");
	HX_VISIT_MEMBER_NAME(m_hasVertex0,"m_hasVertex0");
	HX_VISIT_MEMBER_NAME(m_hasVertex3,"m_hasVertex3");
	HX_VISIT_MEMBER_NAME(m_coreV1,"m_coreV1");
	HX_VISIT_MEMBER_NAME(m_coreV2,"m_coreV2");
	HX_VISIT_MEMBER_NAME(m_length,"m_length");
	HX_VISIT_MEMBER_NAME(m_normal,"m_normal");
	HX_VISIT_MEMBER_NAME(m_direction,"m_direction");
	HX_VISIT_MEMBER_NAME(m_cornerDir1,"m_cornerDir1");
	HX_VISIT_MEMBER_NAME(m_cornerDir2,"m_cornerDir2");
	HX_VISIT_MEMBER_NAME(m_cornerConvex1,"m_cornerConvex1");
	HX_VISIT_MEMBER_NAME(m_cornerConvex2,"m_cornerConvex2");
	HX_VISIT_MEMBER_NAME(m_nextEdge,"m_nextEdge");
	HX_VISIT_MEMBER_NAME(m_prevEdge,"m_prevEdge");
}

hx::Val B2EdgeShape_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_v1") ) { return hx::Val( m_v1 ); }
		if (HX_FIELD_EQ(inName,"m_v2") ) { return hx::Val( m_v2 ); }
		if (HX_FIELD_EQ(inName,"m_v0") ) { return hx::Val( m_v0 ); }
		if (HX_FIELD_EQ(inName,"m_v3") ) { return hx::Val( m_v3 ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"support") ) { return hx::Val( support_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_coreV1") ) { return hx::Val( m_coreV1 ); }
		if (HX_FIELD_EQ(inName,"m_coreV2") ) { return hx::Val( m_coreV2 ); }
		if (HX_FIELD_EQ(inName,"m_length") ) { return hx::Val( m_length ); }
		if (HX_FIELD_EQ(inName,"m_normal") ) { return hx::Val( m_normal ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testPoint") ) { return hx::Val( testPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getVertex1") ) { return hx::Val( getVertex1_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVertex2") ) { return hx::Val( getVertex2_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_nextEdge") ) { return hx::Val( m_nextEdge ); }
		if (HX_FIELD_EQ(inName,"m_prevEdge") ) { return hx::Val( m_prevEdge ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"computeAABB") ) { return hx::Val( computeAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"computeMass") ) { return hx::Val( computeMass_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNextEdge") ) { return hx::Val( getNextEdge_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPrevEdge") ) { return hx::Val( getPrevEdge_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPrevEdge") ) { return hx::Val( setPrevEdge_dyn() ); }
		if (HX_FIELD_EQ(inName,"setNextEdge") ) { return hx::Val( setNextEdge_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_direction") ) { return hx::Val( m_direction ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"s_supportVec") ) { return hx::Val( s_supportVec ); }
		if (HX_FIELD_EQ(inName,"m_hasVertex0") ) { return hx::Val( m_hasVertex0 ); }
		if (HX_FIELD_EQ(inName,"m_hasVertex3") ) { return hx::Val( m_hasVertex3 ); }
		if (HX_FIELD_EQ(inName,"m_cornerDir1") ) { return hx::Val( m_cornerDir1 ); }
		if (HX_FIELD_EQ(inName,"m_cornerDir2") ) { return hx::Val( m_cornerDir2 ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCoreVertex1") ) { return hx::Val( getCoreVertex1_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCoreVertex2") ) { return hx::Val( getCoreVertex2_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFirstVertex") ) { return hx::Val( getFirstVertex_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getNormalVector") ) { return hx::Val( getNormalVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"corner1IsConvex") ) { return hx::Val( corner1IsConvex_dyn() ); }
		if (HX_FIELD_EQ(inName,"corner2IsConvex") ) { return hx::Val( corner2IsConvex_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_cornerConvex1") ) { return hx::Val( m_cornerConvex1 ); }
		if (HX_FIELD_EQ(inName,"m_cornerConvex2") ) { return hx::Val( m_cornerConvex2 ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getCorner1Vector") ) { return hx::Val( getCorner1Vector_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCorner2Vector") ) { return hx::Val( getCorner2Vector_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getDirectionVector") ) { return hx::Val( getDirectionVector_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"computeSubmergedArea") ) { return hx::Val( computeSubmergedArea_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2EdgeShape_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"m_v1") ) { m_v1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v2") ) { m_v2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v0") ) { m_v0=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v3") ) { m_v3=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_coreV1") ) { m_coreV1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_coreV2") ) { m_coreV2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_length") ) { m_length=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_normal") ) { m_normal=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_nextEdge") ) { m_nextEdge=inValue.Cast<  ::box2D::collision::shapes::B2EdgeShape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_prevEdge") ) { m_prevEdge=inValue.Cast<  ::box2D::collision::shapes::B2EdgeShape >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_direction") ) { m_direction=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"s_supportVec") ) { s_supportVec=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_hasVertex0") ) { m_hasVertex0=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_hasVertex3") ) { m_hasVertex3=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_cornerDir1") ) { m_cornerDir1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_cornerDir2") ) { m_cornerDir2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_cornerConvex1") ) { m_cornerConvex1=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_cornerConvex2") ) { m_cornerConvex2=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2EdgeShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("s_supportVec","\x11","\x4d","\x00","\xaf"));
	outFields->push(HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v0","\xcc","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_hasVertex0","\xe4","\x7d","\x57","\xd9"));
	outFields->push(HX_HCSTRING("m_hasVertex3","\xe7","\x7d","\x57","\xd9"));
	outFields->push(HX_HCSTRING("m_coreV1","\x0c","\x07","\x68","\x93"));
	outFields->push(HX_HCSTRING("m_coreV2","\x0d","\x07","\x68","\x93"));
	outFields->push(HX_HCSTRING("m_length","\xb8","\x3d","\xf9","\x67"));
	outFields->push(HX_HCSTRING("m_normal","\xf9","\x1a","\x5b","\xf9"));
	outFields->push(HX_HCSTRING("m_direction","\xad","\x88","\x96","\x4a"));
	outFields->push(HX_HCSTRING("m_cornerDir1","\x8b","\x5a","\x30","\x2e"));
	outFields->push(HX_HCSTRING("m_cornerDir2","\x8c","\x5a","\x30","\x2e"));
	outFields->push(HX_HCSTRING("m_cornerConvex1","\x03","\xb5","\xc1","\xc5"));
	outFields->push(HX_HCSTRING("m_cornerConvex2","\x04","\xb5","\xc1","\xc5"));
	outFields->push(HX_HCSTRING("m_nextEdge","\x22","\x70","\x26","\x16"));
	outFields->push(HX_HCSTRING("m_prevEdge","\x22","\xaa","\x27","\x33"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2EdgeShape_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,s_supportVec),HX_HCSTRING("s_supportVec","\x11","\x4d","\x00","\xaf")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_v1),HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_v2),HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_v0),HX_HCSTRING("m_v0","\xcc","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_v3),HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48")},
	{hx::fsBool,(int)offsetof(B2EdgeShape_obj,m_hasVertex0),HX_HCSTRING("m_hasVertex0","\xe4","\x7d","\x57","\xd9")},
	{hx::fsBool,(int)offsetof(B2EdgeShape_obj,m_hasVertex3),HX_HCSTRING("m_hasVertex3","\xe7","\x7d","\x57","\xd9")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_coreV1),HX_HCSTRING("m_coreV1","\x0c","\x07","\x68","\x93")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_coreV2),HX_HCSTRING("m_coreV2","\x0d","\x07","\x68","\x93")},
	{hx::fsFloat,(int)offsetof(B2EdgeShape_obj,m_length),HX_HCSTRING("m_length","\xb8","\x3d","\xf9","\x67")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_normal),HX_HCSTRING("m_normal","\xf9","\x1a","\x5b","\xf9")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_direction),HX_HCSTRING("m_direction","\xad","\x88","\x96","\x4a")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_cornerDir1),HX_HCSTRING("m_cornerDir1","\x8b","\x5a","\x30","\x2e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeShape_obj,m_cornerDir2),HX_HCSTRING("m_cornerDir2","\x8c","\x5a","\x30","\x2e")},
	{hx::fsBool,(int)offsetof(B2EdgeShape_obj,m_cornerConvex1),HX_HCSTRING("m_cornerConvex1","\x03","\xb5","\xc1","\xc5")},
	{hx::fsBool,(int)offsetof(B2EdgeShape_obj,m_cornerConvex2),HX_HCSTRING("m_cornerConvex2","\x04","\xb5","\xc1","\xc5")},
	{hx::fsObject /*::box2D::collision::shapes::B2EdgeShape*/ ,(int)offsetof(B2EdgeShape_obj,m_nextEdge),HX_HCSTRING("m_nextEdge","\x22","\x70","\x26","\x16")},
	{hx::fsObject /*::box2D::collision::shapes::B2EdgeShape*/ ,(int)offsetof(B2EdgeShape_obj,m_prevEdge),HX_HCSTRING("m_prevEdge","\x22","\xaa","\x27","\x33")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2EdgeShape_obj_sStaticStorageInfo = 0;
#endif

static ::String B2EdgeShape_obj_sMemberFields[] = {
	HX_HCSTRING("testPoint","\x9e","\xf2","\x91","\x8f"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("computeAABB","\x97","\x39","\x7f","\xc2"),
	HX_HCSTRING("computeMass","\x0b","\x3c","\x86","\xca"),
	HX_HCSTRING("computeSubmergedArea","\xe2","\x2f","\x3c","\xaf"),
	HX_HCSTRING("getLength","\x1c","\x1e","\x5e","\x1b"),
	HX_HCSTRING("getVertex1","\x57","\xa2","\xf9","\xcc"),
	HX_HCSTRING("getVertex2","\x58","\xa2","\xf9","\xcc"),
	HX_HCSTRING("getCoreVertex1","\xb8","\xd3","\x3c","\x89"),
	HX_HCSTRING("getCoreVertex2","\xb9","\xd3","\x3c","\x89"),
	HX_HCSTRING("getNormalVector","\x00","\x84","\xac","\xb8"),
	HX_HCSTRING("getDirectionVector","\x6c","\xe0","\x35","\xb2"),
	HX_HCSTRING("getCorner1Vector","\x29","\x1e","\xe0","\x5b"),
	HX_HCSTRING("getCorner2Vector","\xea","\x94","\x75","\x85"),
	HX_HCSTRING("corner1IsConvex","\xcd","\x85","\x87","\x29"),
	HX_HCSTRING("corner2IsConvex","\xce","\xee","\x78","\xfc"),
	HX_HCSTRING("getFirstVertex","\xbe","\x5e","\x88","\x0d"),
	HX_HCSTRING("getNextEdge","\x86","\x31","\xcf","\x14"),
	HX_HCSTRING("getPrevEdge","\x86","\x6b","\xd0","\x31"),
	HX_HCSTRING("s_supportVec","\x11","\x4d","\x00","\xaf"),
	HX_HCSTRING("support","\x0f","\x0c","\x23","\x3d"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setPrevEdge","\x92","\x72","\x3d","\x3c"),
	HX_HCSTRING("setNextEdge","\x92","\x38","\x3c","\x1f"),
	HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v0","\xcc","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48"),
	HX_HCSTRING("m_hasVertex0","\xe4","\x7d","\x57","\xd9"),
	HX_HCSTRING("m_hasVertex3","\xe7","\x7d","\x57","\xd9"),
	HX_HCSTRING("m_coreV1","\x0c","\x07","\x68","\x93"),
	HX_HCSTRING("m_coreV2","\x0d","\x07","\x68","\x93"),
	HX_HCSTRING("m_length","\xb8","\x3d","\xf9","\x67"),
	HX_HCSTRING("m_normal","\xf9","\x1a","\x5b","\xf9"),
	HX_HCSTRING("m_direction","\xad","\x88","\x96","\x4a"),
	HX_HCSTRING("m_cornerDir1","\x8b","\x5a","\x30","\x2e"),
	HX_HCSTRING("m_cornerDir2","\x8c","\x5a","\x30","\x2e"),
	HX_HCSTRING("m_cornerConvex1","\x03","\xb5","\xc1","\xc5"),
	HX_HCSTRING("m_cornerConvex2","\x04","\xb5","\xc1","\xc5"),
	HX_HCSTRING("m_nextEdge","\x22","\x70","\x26","\x16"),
	HX_HCSTRING("m_prevEdge","\x22","\xaa","\x27","\x33"),
	::String(null()) };

static void B2EdgeShape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2EdgeShape_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2EdgeShape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2EdgeShape_obj::__mClass,"__mClass");
};

#endif

hx::Class B2EdgeShape_obj::__mClass;

void B2EdgeShape_obj::__register()
{
	hx::Object *dummy = new B2EdgeShape_obj;
	B2EdgeShape_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.shapes.B2EdgeShape","\x85","\x36","\xec","\x81");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2EdgeShape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2EdgeShape_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2EdgeShape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2EdgeShape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2EdgeShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2EdgeShape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
} // end namespace shapes
