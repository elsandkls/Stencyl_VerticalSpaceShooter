// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTree
#include <box2D/collision/B2DynamicTree.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTreeNode
#include <box2D/collision/B2DynamicTreeNode.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastInput
#include <box2D/collision/B2RayCastInput.h>
#endif
#ifndef INCLUDED_box2D_collision_QueryCallback
#include <box2D/collision/QueryCallback.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_38_new,"box2D.collision.B2DynamicTree","new",0xa5d97bd2,"box2D.collision.B2DynamicTree.new","box2D/collision/B2DynamicTree.hx",38,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_80_createProxy,"box2D.collision.B2DynamicTree","createProxy",0x55349344,"box2D.collision.B2DynamicTree.createProxy","box2D/collision/B2DynamicTree.hx",80,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_101_destroyProxy,"box2D.collision.B2DynamicTree","destroyProxy",0x1ba63d62,"box2D.collision.B2DynamicTree.destroyProxy","box2D/collision/B2DynamicTree.hx",101,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_113_moveProxy,"box2D.collision.B2DynamicTree","moveProxy",0xf87d8a8f,"box2D.collision.B2DynamicTree.moveProxy","box2D/collision/B2DynamicTree.hx",113,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_139_rebalance,"box2D.collision.B2DynamicTree","rebalance",0x161c32bb,"box2D.collision.B2DynamicTree.rebalance","box2D/collision/B2DynamicTree.hx",139,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_161_getFatAABB,"box2D.collision.B2DynamicTree","getFatAABB",0x0efd12d1,"box2D.collision.B2DynamicTree.getFatAABB","box2D/collision/B2DynamicTree.hx",161,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_169_getUserData,"box2D.collision.B2DynamicTree","getUserData",0x8e45c63d,"box2D.collision.B2DynamicTree.getUserData","box2D/collision/B2DynamicTree.hx",169,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_183_query,"box2D.collision.B2DynamicTree","query",0xb0c776fa,"box2D.collision.B2DynamicTree.query","box2D/collision/B2DynamicTree.hx",183,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_233_rayCast,"box2D.collision.B2DynamicTree","rayCast",0x9a21aa3b,"box2D.collision.B2DynamicTree.rayCast","box2D/collision/B2DynamicTree.hx",233,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_319_allocateNode,"box2D.collision.B2DynamicTree","allocateNode",0xdb7101ad,"box2D.collision.B2DynamicTree.allocateNode","box2D/collision/B2DynamicTree.hx",319,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_337_freeNode,"box2D.collision.B2DynamicTree","freeNode",0xdfcd301c,"box2D.collision.B2DynamicTree.freeNode","box2D/collision/B2DynamicTree.hx",337,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_343_insertLeaf,"box2D.collision.B2DynamicTree","insertLeaf",0x9d678a45,"box2D.collision.B2DynamicTree.insertLeaf","box2D/collision/B2DynamicTree.hx",343,0x5cc2f320)
HX_LOCAL_STACK_FRAME(_hx_pos_0716cb6006ebc4fd_428_removeLeaf,"box2D.collision.B2DynamicTree","removeLeaf",0x349bc4d0,"box2D.collision.B2DynamicTree.removeLeaf","box2D/collision/B2DynamicTree.hx",428,0x5cc2f320)
namespace box2D{
namespace collision{

void B2DynamicTree_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_38_new)
HXLINE( 425)		this->oldAABB =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
HXLINE( 173)		this->stackQueue = ::Array_obj< ::Dynamic>::__new();
HXLINE( 172)		this->stackQueuePos = (int)0;
HXLINE(  45)		this->m_root = null();
HXLINE(  48)		this->m_freeList = null();
HXLINE(  49)		this->m_path = (int)0;
HXLINE(  51)		this->m_insertionCount = (int)0;
            	}

Dynamic B2DynamicTree_obj::__CreateEmpty() { return new B2DynamicTree_obj; }

void *B2DynamicTree_obj::_hx_vtable = 0;

Dynamic B2DynamicTree_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2DynamicTree_obj > _hx_result = new B2DynamicTree_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2DynamicTree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24af6f58;
}

 ::box2D::collision::B2DynamicTreeNode B2DynamicTree_obj::createProxy( ::box2D::collision::B2AABB aabb, ::box2D::dynamics::B2Fixture userData){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_80_createProxy)
HXLINE(  81)		 ::box2D::collision::B2DynamicTreeNode node = this->allocateNode();
HXLINE(  84)		Float extendX = ::box2D::common::B2Settings_obj::b2_aabbExtension;
HXLINE(  85)		Float extendY = ::box2D::common::B2Settings_obj::b2_aabbExtension;
HXLINE(  86)		node->aabb->lowerBound->x = (aabb->lowerBound->x - extendX);
HXLINE(  87)		node->aabb->lowerBound->y = (aabb->lowerBound->y - extendY);
HXLINE(  88)		node->aabb->upperBound->x = (aabb->upperBound->x + extendX);
HXLINE(  89)		node->aabb->upperBound->y = (aabb->upperBound->y + extendY);
HXLINE(  91)		node->userData = userData;
HXLINE(  93)		this->insertLeaf(node);
HXLINE(  94)		return node;
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2DynamicTree_obj,createProxy,return )

void B2DynamicTree_obj::destroyProxy( ::box2D::collision::B2DynamicTreeNode proxy){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_101_destroyProxy)
HXLINE( 103)		this->removeLeaf(proxy);
HXLINE( 104)		this->freeNode(proxy);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTree_obj,destroyProxy,(void))

bool B2DynamicTree_obj::moveProxy( ::box2D::collision::B2DynamicTreeNode proxy, ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Vec2 displacement){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_113_moveProxy)
HXLINE( 114)		::box2D::common::B2Settings_obj::b2Assert(proxy->isLeaf());
HXLINE( 116)		if (proxy->aabb->contains(aabb)) {
HXLINE( 118)			return false;
            		}
HXLINE( 121)		this->removeLeaf(proxy);
HXLINE( 124)		Float extendX = ::box2D::common::B2Settings_obj::b2_aabbExtension;
HXDLIN( 124)		Float extendX1;
HXDLIN( 124)		if ((displacement->x > (int)0)) {
HXLINE( 124)			extendX1 = displacement->x;
            		}
            		else {
HXLINE( 124)			extendX1 = -(displacement->x);
            		}
HXDLIN( 124)		Float extendX2 = (extendX + (::box2D::common::B2Settings_obj::b2_aabbMultiplier * extendX1));
HXLINE( 125)		Float extendY = ::box2D::common::B2Settings_obj::b2_aabbExtension;
HXDLIN( 125)		Float extendY1;
HXDLIN( 125)		if ((displacement->y > (int)0)) {
HXLINE( 125)			extendY1 = displacement->y;
            		}
            		else {
HXLINE( 125)			extendY1 = -(displacement->y);
            		}
HXDLIN( 125)		Float extendY2 = (extendY + (::box2D::common::B2Settings_obj::b2_aabbMultiplier * extendY1));
HXLINE( 126)		proxy->aabb->lowerBound->x = (aabb->lowerBound->x - extendX2);
HXLINE( 127)		proxy->aabb->lowerBound->y = (aabb->lowerBound->y - extendY2);
HXLINE( 128)		proxy->aabb->upperBound->x = (aabb->upperBound->x + extendX2);
HXLINE( 129)		proxy->aabb->upperBound->y = (aabb->upperBound->y + extendY2);
HXLINE( 131)		this->insertLeaf(proxy);
HXLINE( 132)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2DynamicTree_obj,moveProxy,return )

void B2DynamicTree_obj::rebalance(int iterations){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_139_rebalance)
HXLINE( 140)		if (hx::IsNull( this->m_root )) {
HXLINE( 141)			return;
            		}
HXLINE( 143)		{
HXLINE( 143)			int _g1 = (int)0;
HXDLIN( 143)			int _g = iterations;
HXDLIN( 143)			while((_g1 < _g)){
HXLINE( 143)				_g1 = (_g1 + (int)1);
HXDLIN( 143)				int i = (_g1 - (int)1);
HXLINE( 145)				 ::box2D::collision::B2DynamicTreeNode node = this->m_root;
HXLINE( 146)				int bit = (int)0;
HXLINE( 147)				while((node->isLeaf() == false)){
HXLINE( 149)					if ((((int)((int)this->m_path >> (int)bit) & (int)(int)1) != (int)0)) {
HXLINE( 149)						node = node->child2;
            					}
            					else {
HXLINE( 149)						node = node->child1;
            					}
HXLINE( 150)					bit = ((int)(bit + (int)1) & (int)(int)31);
            				}
HXLINE( 152)				++this->m_path;
HXLINE( 154)				this->removeLeaf(node);
HXLINE( 155)				this->insertLeaf(node);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTree_obj,rebalance,(void))

 ::box2D::collision::B2AABB B2DynamicTree_obj::getFatAABB( ::box2D::collision::B2DynamicTreeNode proxy){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_161_getFatAABB)
HXDLIN( 161)		return proxy->aabb;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTree_obj,getFatAABB,return )

 ::box2D::dynamics::B2Fixture B2DynamicTree_obj::getUserData( ::box2D::collision::B2DynamicTreeNode proxy){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_169_getUserData)
HXDLIN( 169)		return proxy->userData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTree_obj,getUserData,return )

void B2DynamicTree_obj::query(::Dynamic callbackMethod, ::box2D::collision::B2AABB aabb){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_183_query)
HXLINE( 184)		if (hx::IsNull( this->m_root )) {
HXLINE( 185)			return;
            		}
HXLINE( 187)		if (hx::IsNull( this->stackQueue->__get(this->stackQueuePos).StaticCast< ::Array< ::Dynamic> >() )) {
HXLINE( 187)			::Array< ::Dynamic> _hx_tmp = this->stackQueue;
HXDLIN( 187)			int _hx_tmp1 = this->stackQueuePos;
HXDLIN( 187)			_hx_tmp[_hx_tmp1] = ::Array_obj< ::Dynamic>::__new();
            		}
HXLINE( 188)		::Array< ::Dynamic> stack = this->stackQueue;
HXDLIN( 188)		::Array< ::Dynamic> stack1 = stack->__get(this->stackQueuePos++).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 190)		int count = (int)0;
HXLINE( 191)		count = (count + (int)1);
HXDLIN( 191)		stack1[(count - (int)1)] = this->m_root;
HXLINE( 193)		while((count > (int)0)){
HXLINE( 195)			count = (count - (int)1);
HXDLIN( 195)			 ::box2D::collision::B2DynamicTreeNode node = stack1->__get(count).StaticCast<  ::box2D::collision::B2DynamicTreeNode >();
HXLINE( 197)			if (node->aabb->testOverlap(aabb)) {
HXLINE( 199)				if (node->isLeaf()) {
HXLINE( 201)					bool proceed = ::box2D::collision::QueryCallback_obj::queryCallback(callbackMethod,node);
HXLINE( 202)					if (!(proceed)) {
HXLINE( 203)						goto _hx_goto_9;
            					}
            				}
            				else {
HXLINE( 208)					count = (count + (int)1);
HXDLIN( 208)					stack1[(count - (int)1)] = node->child1;
HXLINE( 209)					count = (count + (int)1);
HXDLIN( 209)					stack1[(count - (int)1)] = node->child2;
            				}
            			}
            		}
            		_hx_goto_9:;
HXLINE( 214)		count = stack1->length;
HXLINE( 215)		while(true){
HXLINE( 215)			count = (count - (int)1);
HXDLIN( 215)			if (!(((count + (int)1) > (int)0))) {
HXLINE( 215)				goto _hx_goto_10;
            			}
HXLINE( 216)			stack1->pop().StaticCast<  ::box2D::collision::B2DynamicTreeNode >();
            		}
            		_hx_goto_10:;
HXLINE( 218)		--this->stackQueuePos;
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2DynamicTree_obj,query,(void))

void B2DynamicTree_obj::rayCast( ::Dynamic callbackMethod, ::box2D::collision::B2RayCastInput input){
            	HX_GC_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_233_rayCast)
HXLINE( 234)		if (hx::IsNull( this->m_root )) {
HXLINE( 235)			return;
            		}
HXLINE( 237)		 ::box2D::common::math::B2Vec2 p1 = input->p1;
HXLINE( 238)		 ::box2D::common::math::B2Vec2 p2 = input->p2;
HXLINE( 239)		 ::box2D::common::math::B2Vec2 r = ::box2D::common::math::B2Math_obj::subtractVVPooled(p1,p2);
HXLINE( 241)		r->normalize();
HXLINE( 244)		 ::box2D::common::math::B2Vec2 v = ::box2D::common::math::B2Math_obj::crossFV(((Float)1.0),r,null());
HXLINE( 245)		 ::box2D::common::math::B2Vec2 abs_v = ::box2D::common::math::B2Math_obj::absV(v);
HXLINE( 247)		Float maxFraction = input->maxFraction;
HXLINE( 250)		 ::box2D::collision::B2AABB segmentAABB =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
HXLINE( 251)		Float tX;
HXLINE( 252)		Float tY;
HXLINE( 253)		{
HXLINE( 254)			Float p11 = p1->x;
HXDLIN( 254)			tX = (p11 + (maxFraction * (p2->x - p1->x)));
HXLINE( 255)			Float p12 = p1->y;
HXDLIN( 255)			tY = (p12 + (maxFraction * (p2->y - p1->y)));
HXLINE( 256)			segmentAABB->lowerBound->x = ::Math_obj::min(p1->x,tX);
HXLINE( 257)			segmentAABB->lowerBound->y = ::Math_obj::min(p1->y,tY);
HXLINE( 258)			segmentAABB->upperBound->x = ::Math_obj::max(p1->x,tX);
HXLINE( 259)			segmentAABB->upperBound->y = ::Math_obj::max(p1->y,tY);
            		}
HXLINE( 262)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 264)		int count = (int)0;
HXLINE( 265)		count = (count + (int)1);
HXDLIN( 265)		stack[(count - (int)1)] = this->m_root;
HXLINE( 267)		while((count > (int)0)){
HXLINE( 269)			count = (count - (int)1);
HXDLIN( 269)			 ::box2D::collision::B2DynamicTreeNode node = stack->__get(count).StaticCast<  ::box2D::collision::B2DynamicTreeNode >();
HXLINE( 271)			if ((node->aabb->testOverlap(segmentAABB) == false)) {
HXLINE( 273)				continue;
            			}
HXLINE( 279)			 ::box2D::common::math::B2Vec2 c = node->aabb->getCenter();
HXLINE( 280)			 ::box2D::common::math::B2Vec2 h = node->aabb->getExtents();
HXLINE( 281)			Float v1 = v->x;
HXDLIN( 281)			Float separation = (v1 * (p1->x - c->x));
HXDLIN( 281)			Float v2 = v->y;
HXDLIN( 281)			Float separation1 = ::Math_obj::abs((separation + (v2 * (p1->y - c->y))));
HXDLIN( 281)			Float separation2 = (separation1 - (abs_v->x * h->x));
HXDLIN( 281)			Float separation3 = (separation2 - (abs_v->y * h->y));
HXLINE( 283)			if ((separation3 > ((Float)0.0))) {
HXLINE( 284)				continue;
            			}
HXLINE( 286)			if (node->isLeaf()) {
HXLINE( 288)				 ::box2D::collision::B2RayCastInput subInput =  ::box2D::collision::B2RayCastInput_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 289)				subInput->p1 = input->p1;
HXLINE( 290)				subInput->p2 = input->p2;
HXLINE( 291)				subInput->maxFraction = input->maxFraction;
HXLINE( 293)				maxFraction = ( (Float)(callbackMethod(subInput,node)) );
HXLINE( 295)				if ((maxFraction == ((Float)0.0))) {
HXLINE( 296)					return;
            				}
HXLINE( 299)				{
HXLINE( 300)					Float p13 = p1->x;
HXDLIN( 300)					tX = (p13 + (maxFraction * (p2->x - p1->x)));
HXLINE( 301)					Float p14 = p1->y;
HXDLIN( 301)					tY = (p14 + (maxFraction * (p2->y - p1->y)));
HXLINE( 302)					segmentAABB->lowerBound->x = ::Math_obj::min(p1->x,tX);
HXLINE( 303)					segmentAABB->lowerBound->y = ::Math_obj::min(p1->y,tY);
HXLINE( 304)					segmentAABB->upperBound->x = ::Math_obj::max(p1->x,tX);
HXLINE( 305)					segmentAABB->upperBound->y = ::Math_obj::max(p1->y,tY);
            				}
            			}
            			else {
HXLINE( 311)				count = (count + (int)1);
HXDLIN( 311)				stack[(count - (int)1)] = node->child1;
HXLINE( 312)				count = (count + (int)1);
HXDLIN( 312)				stack[(count - (int)1)] = node->child2;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2DynamicTree_obj,rayCast,(void))

 ::box2D::collision::B2DynamicTreeNode B2DynamicTree_obj::allocateNode(){
            	HX_GC_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_319_allocateNode)
HXLINE( 321)		if (hx::IsNotNull( this->m_freeList )) {
HXLINE( 323)			 ::box2D::collision::B2DynamicTreeNode node = this->m_freeList;
HXLINE( 324)			this->m_freeList = node->parent;
HXLINE( 325)			node->parent = null();
HXLINE( 326)			node->child1 = null();
HXLINE( 327)			node->child2 = null();
HXLINE( 328)			return node;
            		}
HXLINE( 333)		return  ::box2D::collision::B2DynamicTreeNode_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2DynamicTree_obj,allocateNode,return )

void B2DynamicTree_obj::freeNode( ::box2D::collision::B2DynamicTreeNode node){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_337_freeNode)
HXLINE( 338)		node->parent = this->m_freeList;
HXLINE( 339)		this->m_freeList = node;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTree_obj,freeNode,(void))

void B2DynamicTree_obj::insertLeaf( ::box2D::collision::B2DynamicTreeNode leaf){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_343_insertLeaf)
HXLINE( 344)		++this->m_insertionCount;
HXLINE( 346)		if (hx::IsNull( this->m_root )) {
HXLINE( 348)			this->m_root = leaf;
HXLINE( 349)			this->m_root->parent = null();
HXLINE( 350)			return;
            		}
HXLINE( 353)		 ::box2D::common::math::B2Vec2 center = leaf->aabb->getCenter();
HXLINE( 354)		 ::box2D::collision::B2DynamicTreeNode sibling = this->m_root;
HXLINE( 355)		if ((sibling->isLeaf() == false)) {
HXLINE( 357)			while(true){
HXLINE( 359)				 ::box2D::collision::B2DynamicTreeNode child1 = sibling->child1;
HXLINE( 360)				 ::box2D::collision::B2DynamicTreeNode child2 = sibling->child2;
HXLINE( 367)				Float norm1 = ::Math_obj::abs((((Float)(child1->aabb->lowerBound->x + child1->aabb->upperBound->x) / (Float)(int)2) - center->x));
HXDLIN( 367)				Float norm11 = (norm1 + ::Math_obj::abs((((Float)(child1->aabb->lowerBound->y + child1->aabb->upperBound->y) / (Float)(int)2) - center->y)));
HXLINE( 369)				Float norm2 = ::Math_obj::abs((((Float)(child2->aabb->lowerBound->x + child2->aabb->upperBound->x) / (Float)(int)2) - center->x));
HXDLIN( 369)				Float norm21 = (norm2 + ::Math_obj::abs((((Float)(child2->aabb->lowerBound->y + child2->aabb->upperBound->y) / (Float)(int)2) - center->y)));
HXLINE( 372)				if ((norm11 < norm21)) {
HXLINE( 374)					sibling = child1;
            				}
            				else {
HXLINE( 376)					sibling = child2;
            				}
HXLINE( 357)				if (!((sibling->isLeaf() == false))) {
HXLINE( 357)					goto _hx_goto_16;
            				}
            			}
            			_hx_goto_16:;
            		}
HXLINE( 383)		 ::box2D::collision::B2DynamicTreeNode node1 = sibling->parent;
HXLINE( 384)		 ::box2D::collision::B2DynamicTreeNode node2 = this->allocateNode();
HXLINE( 385)		node2->parent = node1;
HXLINE( 386)		node2->userData = null();
HXLINE( 387)		node2->aabb->combine(leaf->aabb,sibling->aabb);
HXLINE( 388)		if (hx::IsNotNull( node1 )) {
HXLINE( 390)			if (hx::IsEq( sibling->parent->child1,sibling )) {
HXLINE( 392)				node1->child1 = node2;
            			}
            			else {
HXLINE( 396)				node1->child2 = node2;
            			}
HXLINE( 399)			node2->child1 = sibling;
HXLINE( 400)			node2->child2 = leaf;
HXLINE( 401)			sibling->parent = node2;
HXLINE( 402)			leaf->parent = node2;
HXLINE( 403)			while(!(node1->aabb->contains(node2->aabb))){
HXLINE( 408)				node1->aabb->combine(node1->child1->aabb,node1->child2->aabb);
HXLINE( 409)				node2 = node1;
HXLINE( 410)				node1 = node1->parent;
HXLINE( 403)				if (!(hx::IsNotNull( node1 ))) {
HXLINE( 403)					goto _hx_goto_17;
            				}
            			}
            			_hx_goto_17:;
            		}
            		else {
HXLINE( 416)			node2->child1 = sibling;
HXLINE( 417)			node2->child2 = leaf;
HXLINE( 418)			sibling->parent = node2;
HXLINE( 419)			leaf->parent = node2;
HXLINE( 420)			this->m_root = node2;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTree_obj,insertLeaf,(void))

void B2DynamicTree_obj::removeLeaf( ::box2D::collision::B2DynamicTreeNode leaf){
            	HX_STACKFRAME(&_hx_pos_0716cb6006ebc4fd_428_removeLeaf)
HXLINE( 429)		if (hx::IsEq( leaf,this->m_root )) {
HXLINE( 431)			this->m_root = null();
HXLINE( 432)			return;
            		}
HXLINE( 435)		 ::box2D::collision::B2DynamicTreeNode node2 = leaf->parent;
HXLINE( 436)		 ::box2D::collision::B2DynamicTreeNode node1 = node2->parent;
HXLINE( 437)		 ::box2D::collision::B2DynamicTreeNode sibling;
HXLINE( 438)		if (hx::IsEq( node2->child1,leaf )) {
HXLINE( 440)			sibling = node2->child2;
            		}
            		else {
HXLINE( 444)			sibling = node2->child1;
            		}
HXLINE( 447)		if (hx::IsNotNull( node1 )) {
HXLINE( 450)			if (hx::IsEq( node1->child1,node2 )) {
HXLINE( 452)				node1->child1 = sibling;
            			}
            			else {
HXLINE( 456)				node1->child2 = sibling;
            			}
HXLINE( 458)			sibling->parent = node1;
HXLINE( 459)			this->freeNode(node2);
HXLINE( 462)			while(hx::IsNotNull( node1 )){
HXLINE( 464)				this->oldAABB->setTo(node1->aabb);
HXLINE( 466)				node1->aabb->combine(node1->child1->aabb,node1->child2->aabb);
HXLINE( 468)				if (this->oldAABB->contains(node1->aabb)) {
HXLINE( 469)					goto _hx_goto_19;
            				}
HXLINE( 471)				node1 = node1->parent;
            			}
            			_hx_goto_19:;
            		}
            		else {
HXLINE( 476)			this->m_root = sibling;
HXLINE( 477)			sibling->parent = null();
HXLINE( 478)			this->freeNode(node2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTree_obj,removeLeaf,(void))


hx::ObjectPtr< B2DynamicTree_obj > B2DynamicTree_obj::__new() {
	hx::ObjectPtr< B2DynamicTree_obj > __this = new B2DynamicTree_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2DynamicTree_obj > B2DynamicTree_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2DynamicTree_obj *__this = (B2DynamicTree_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2DynamicTree_obj), true, "box2D.collision.B2DynamicTree"));
	*(void **)__this = B2DynamicTree_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2DynamicTree_obj::B2DynamicTree_obj()
{
}

void B2DynamicTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2DynamicTree);
	HX_MARK_MEMBER_NAME(stackQueuePos,"stackQueuePos");
	HX_MARK_MEMBER_NAME(stackQueue,"stackQueue");
	HX_MARK_MEMBER_NAME(oldAABB,"oldAABB");
	HX_MARK_MEMBER_NAME(m_root,"m_root");
	HX_MARK_MEMBER_NAME(m_freeList,"m_freeList");
	HX_MARK_MEMBER_NAME(m_path,"m_path");
	HX_MARK_MEMBER_NAME(m_insertionCount,"m_insertionCount");
	HX_MARK_END_CLASS();
}

void B2DynamicTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(stackQueuePos,"stackQueuePos");
	HX_VISIT_MEMBER_NAME(stackQueue,"stackQueue");
	HX_VISIT_MEMBER_NAME(oldAABB,"oldAABB");
	HX_VISIT_MEMBER_NAME(m_root,"m_root");
	HX_VISIT_MEMBER_NAME(m_freeList,"m_freeList");
	HX_VISIT_MEMBER_NAME(m_path,"m_path");
	HX_VISIT_MEMBER_NAME(m_insertionCount,"m_insertionCount");
}

hx::Val B2DynamicTree_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"query") ) { return hx::Val( query_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_root") ) { return hx::Val( m_root ); }
		if (HX_FIELD_EQ(inName,"m_path") ) { return hx::Val( m_path ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"oldAABB") ) { return hx::Val( oldAABB ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"freeNode") ) { return hx::Val( freeNode_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"moveProxy") ) { return hx::Val( moveProxy_dyn() ); }
		if (HX_FIELD_EQ(inName,"rebalance") ) { return hx::Val( rebalance_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getFatAABB") ) { return hx::Val( getFatAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"stackQueue") ) { return hx::Val( stackQueue ); }
		if (HX_FIELD_EQ(inName,"insertLeaf") ) { return hx::Val( insertLeaf_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeLeaf") ) { return hx::Val( removeLeaf_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_freeList") ) { return hx::Val( m_freeList ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createProxy") ) { return hx::Val( createProxy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getUserData") ) { return hx::Val( getUserData_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"destroyProxy") ) { return hx::Val( destroyProxy_dyn() ); }
		if (HX_FIELD_EQ(inName,"allocateNode") ) { return hx::Val( allocateNode_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stackQueuePos") ) { return hx::Val( stackQueuePos ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"m_insertionCount") ) { return hx::Val( m_insertionCount ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2DynamicTree_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"m_root") ) { m_root=inValue.Cast<  ::box2D::collision::B2DynamicTreeNode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_path") ) { m_path=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oldAABB") ) { oldAABB=inValue.Cast<  ::box2D::collision::B2AABB >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stackQueue") ) { stackQueue=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_freeList") ) { m_freeList=inValue.Cast<  ::box2D::collision::B2DynamicTreeNode >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stackQueuePos") ) { stackQueuePos=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"m_insertionCount") ) { m_insertionCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2DynamicTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("stackQueuePos","\xeb","\x43","\x62","\x99"));
	outFields->push(HX_HCSTRING("stackQueue","\x29","\x31","\x09","\x71"));
	outFields->push(HX_HCSTRING("oldAABB","\xc7","\xe2","\x93","\xf5"));
	outFields->push(HX_HCSTRING("m_root","\x74","\x5e","\xa6","\x93"));
	outFields->push(HX_HCSTRING("m_freeList","\x7c","\xac","\x03","\x32"));
	outFields->push(HX_HCSTRING("m_path","\xf7","\x55","\x49","\x92"));
	outFields->push(HX_HCSTRING("m_insertionCount","\xf2","\x20","\x4c","\xd8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2DynamicTree_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(B2DynamicTree_obj,stackQueuePos),HX_HCSTRING("stackQueuePos","\xeb","\x43","\x62","\x99")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2DynamicTree_obj,stackQueue),HX_HCSTRING("stackQueue","\x29","\x31","\x09","\x71")},
	{hx::fsObject /*::box2D::collision::B2AABB*/ ,(int)offsetof(B2DynamicTree_obj,oldAABB),HX_HCSTRING("oldAABB","\xc7","\xe2","\x93","\xf5")},
	{hx::fsObject /*::box2D::collision::B2DynamicTreeNode*/ ,(int)offsetof(B2DynamicTree_obj,m_root),HX_HCSTRING("m_root","\x74","\x5e","\xa6","\x93")},
	{hx::fsObject /*::box2D::collision::B2DynamicTreeNode*/ ,(int)offsetof(B2DynamicTree_obj,m_freeList),HX_HCSTRING("m_freeList","\x7c","\xac","\x03","\x32")},
	{hx::fsInt,(int)offsetof(B2DynamicTree_obj,m_path),HX_HCSTRING("m_path","\xf7","\x55","\x49","\x92")},
	{hx::fsInt,(int)offsetof(B2DynamicTree_obj,m_insertionCount),HX_HCSTRING("m_insertionCount","\xf2","\x20","\x4c","\xd8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2DynamicTree_obj_sStaticStorageInfo = 0;
#endif

static ::String B2DynamicTree_obj_sMemberFields[] = {
	HX_HCSTRING("createProxy","\xd2","\x25","\x0b","\xf2"),
	HX_HCSTRING("destroyProxy","\x14","\xe7","\x8f","\xba"),
	HX_HCSTRING("moveProxy","\x9d","\xbd","\x56","\x86"),
	HX_HCSTRING("rebalance","\xc9","\x65","\xf5","\xa3"),
	HX_HCSTRING("getFatAABB","\x03","\x8c","\x30","\x9f"),
	HX_HCSTRING("getUserData","\xcb","\x58","\x1c","\x2b"),
	HX_HCSTRING("stackQueuePos","\xeb","\x43","\x62","\x99"),
	HX_HCSTRING("stackQueue","\x29","\x31","\x09","\x71"),
	HX_HCSTRING("query","\x08","\x8b","\xea","\x5d"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("allocateNode","\x5f","\xab","\x5a","\x7a"),
	HX_HCSTRING("freeNode","\xce","\x98","\x0f","\x0c"),
	HX_HCSTRING("insertLeaf","\x77","\x03","\x9b","\x2d"),
	HX_HCSTRING("oldAABB","\xc7","\xe2","\x93","\xf5"),
	HX_HCSTRING("removeLeaf","\x02","\x3e","\xcf","\xc4"),
	HX_HCSTRING("m_root","\x74","\x5e","\xa6","\x93"),
	HX_HCSTRING("m_freeList","\x7c","\xac","\x03","\x32"),
	HX_HCSTRING("m_path","\xf7","\x55","\x49","\x92"),
	HX_HCSTRING("m_insertionCount","\xf2","\x20","\x4c","\xd8"),
	::String(null()) };

static void B2DynamicTree_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2DynamicTree_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2DynamicTree_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2DynamicTree_obj::__mClass,"__mClass");
};

#endif

hx::Class B2DynamicTree_obj::__mClass;

void B2DynamicTree_obj::__register()
{
	hx::Object *dummy = new B2DynamicTree_obj;
	B2DynamicTree_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2DynamicTree","\xe0","\xea","\x9e","\x22");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2DynamicTree_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2DynamicTree_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2DynamicTree_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2DynamicTree_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2DynamicTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2DynamicTree_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
