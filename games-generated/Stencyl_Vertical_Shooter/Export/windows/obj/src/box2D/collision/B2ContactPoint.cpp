// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2ContactID
#include <box2D/collision/B2ContactID.h>
#endif
#ifndef INCLUDED_box2D_collision_B2ContactPoint
#include <box2D/collision/B2ContactPoint.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4403ccc628d2433e_32_new,"box2D.collision.B2ContactPoint","new",0x236eed3f,"box2D.collision.B2ContactPoint.new","box2D/collision/B2ContactPoint.hx",32,0x89b9898f)
namespace box2D{
namespace collision{

void B2ContactPoint_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_4403ccc628d2433e_32_new)
HXLINE(  34)		this->position =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  35)		this->velocity =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  36)		this->normal =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  37)		this->id =  ::box2D::collision::B2ContactID_obj::__alloc( HX_CTX );
            	}

Dynamic B2ContactPoint_obj::__CreateEmpty() { return new B2ContactPoint_obj; }

void *B2ContactPoint_obj::_hx_vtable = 0;

Dynamic B2ContactPoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2ContactPoint_obj > _hx_result = new B2ContactPoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2ContactPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26ed4655;
}


hx::ObjectPtr< B2ContactPoint_obj > B2ContactPoint_obj::__new() {
	hx::ObjectPtr< B2ContactPoint_obj > __this = new B2ContactPoint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2ContactPoint_obj > B2ContactPoint_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2ContactPoint_obj *__this = (B2ContactPoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2ContactPoint_obj), true, "box2D.collision.B2ContactPoint"));
	*(void **)__this = B2ContactPoint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2ContactPoint_obj::B2ContactPoint_obj()
{
}

void B2ContactPoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2ContactPoint);
	HX_MARK_MEMBER_NAME(shape1,"shape1");
	HX_MARK_MEMBER_NAME(shape2,"shape2");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(velocity,"velocity");
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_MEMBER_NAME(separation,"separation");
	HX_MARK_MEMBER_NAME(friction,"friction");
	HX_MARK_MEMBER_NAME(restitution,"restitution");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_END_CLASS();
}

void B2ContactPoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shape1,"shape1");
	HX_VISIT_MEMBER_NAME(shape2,"shape2");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(velocity,"velocity");
	HX_VISIT_MEMBER_NAME(normal,"normal");
	HX_VISIT_MEMBER_NAME(separation,"separation");
	HX_VISIT_MEMBER_NAME(friction,"friction");
	HX_VISIT_MEMBER_NAME(restitution,"restitution");
	HX_VISIT_MEMBER_NAME(id,"id");
}

hx::Val B2ContactPoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shape1") ) { return hx::Val( shape1 ); }
		if (HX_FIELD_EQ(inName,"shape2") ) { return hx::Val( shape2 ); }
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"velocity") ) { return hx::Val( velocity ); }
		if (HX_FIELD_EQ(inName,"friction") ) { return hx::Val( friction ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"separation") ) { return hx::Val( separation ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restitution") ) { return hx::Val( restitution ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2ContactPoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast<  ::box2D::collision::B2ContactID >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shape1") ) { shape1=inValue.Cast<  ::box2D::collision::shapes::B2Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shape2") ) { shape2=inValue.Cast<  ::box2D::collision::shapes::B2Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"velocity") ) { velocity=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"friction") ) { friction=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"separation") ) { separation=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restitution") ) { restitution=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2ContactPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("shape1","\xf0","\xd9","\x29","\x1d"));
	outFields->push(HX_HCSTRING("shape2","\xf1","\xd9","\x29","\x1d"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"));
	outFields->push(HX_HCSTRING("normal","\x27","\x72","\x69","\x30"));
	outFields->push(HX_HCSTRING("separation","\x46","\x68","\xf0","\x1d"));
	outFields->push(HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"));
	outFields->push(HX_HCSTRING("restitution","\x6a","\x2c","\x4d","\x08"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2ContactPoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::collision::shapes::B2Shape*/ ,(int)offsetof(B2ContactPoint_obj,shape1),HX_HCSTRING("shape1","\xf0","\xd9","\x29","\x1d")},
	{hx::fsObject /*::box2D::collision::shapes::B2Shape*/ ,(int)offsetof(B2ContactPoint_obj,shape2),HX_HCSTRING("shape2","\xf1","\xd9","\x29","\x1d")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2ContactPoint_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2ContactPoint_obj,velocity),HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2ContactPoint_obj,normal),HX_HCSTRING("normal","\x27","\x72","\x69","\x30")},
	{hx::fsFloat,(int)offsetof(B2ContactPoint_obj,separation),HX_HCSTRING("separation","\x46","\x68","\xf0","\x1d")},
	{hx::fsFloat,(int)offsetof(B2ContactPoint_obj,friction),HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97")},
	{hx::fsFloat,(int)offsetof(B2ContactPoint_obj,restitution),HX_HCSTRING("restitution","\x6a","\x2c","\x4d","\x08")},
	{hx::fsObject /*::box2D::collision::B2ContactID*/ ,(int)offsetof(B2ContactPoint_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2ContactPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String B2ContactPoint_obj_sMemberFields[] = {
	HX_HCSTRING("shape1","\xf0","\xd9","\x29","\x1d"),
	HX_HCSTRING("shape2","\xf1","\xd9","\x29","\x1d"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"),
	HX_HCSTRING("normal","\x27","\x72","\x69","\x30"),
	HX_HCSTRING("separation","\x46","\x68","\xf0","\x1d"),
	HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"),
	HX_HCSTRING("restitution","\x6a","\x2c","\x4d","\x08"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	::String(null()) };

static void B2ContactPoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2ContactPoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2ContactPoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2ContactPoint_obj::__mClass,"__mClass");
};

#endif

hx::Class B2ContactPoint_obj::__mClass;

void B2ContactPoint_obj::__register()
{
	hx::Object *dummy = new B2ContactPoint_obj;
	B2ContactPoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2ContactPoint","\xcd","\xe1","\x89","\x5a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2ContactPoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2ContactPoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2ContactPoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2ContactPoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2ContactPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2ContactPoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
