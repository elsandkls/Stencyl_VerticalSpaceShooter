// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTree
#include <box2D/collision/B2DynamicTree.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTreeBroadPhase
#include <box2D/collision/B2DynamicTreeBroadPhase.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTreeNode
#include <box2D/collision/B2DynamicTreeNode.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTreePair
#include <box2D/collision/B2DynamicTreePair.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastInput
#include <box2D/collision/B2RayCastInput.h>
#endif
#ifndef INCLUDED_box2D_collision_IBroadPhase
#include <box2D/collision/IBroadPhase.h>
#endif
#ifndef INCLUDED_box2D_collision_QueryCallback
#include <box2D/collision/QueryCallback.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactManager
#include <box2D/dynamics/B2ContactManager.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_63eda192025b43f0_219_new,"box2D.collision.B2DynamicTreeBroadPhase","new",0x75e5760b,"box2D.collision.B2DynamicTreeBroadPhase.new","box2D/collision/B2DynamicTreeBroadPhase.hx",219,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_20_createProxy,"box2D.collision.B2DynamicTreeBroadPhase","createProxy",0x608aee7d,"box2D.collision.B2DynamicTreeBroadPhase.createProxy","box2D/collision/B2DynamicTreeBroadPhase.hx",20,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_31_destroyProxy,"box2D.collision.B2DynamicTreeBroadPhase","destroyProxy",0xfbdfb409,"box2D.collision.B2DynamicTreeBroadPhase.destroyProxy","box2D/collision/B2DynamicTreeBroadPhase.hx",31,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_42_moveProxy,"box2D.collision.B2DynamicTreeBroadPhase","moveProxy",0x1b087588,"box2D.collision.B2DynamicTreeBroadPhase.moveProxy","box2D/collision/B2DynamicTreeBroadPhase.hx",42,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_51_testOverlap,"box2D.collision.B2DynamicTreeBroadPhase","testOverlap",0xd458fa00,"box2D.collision.B2DynamicTreeBroadPhase.testOverlap","box2D/collision/B2DynamicTreeBroadPhase.hx",51,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_62_getUserData,"box2D.collision.B2DynamicTreeBroadPhase","getUserData",0x999c2176,"box2D.collision.B2DynamicTreeBroadPhase.getUserData","box2D/collision/B2DynamicTreeBroadPhase.hx",62,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_70_getFatAABB,"box2D.collision.B2DynamicTreeBroadPhase","getFatAABB",0x25ffc1b8,"box2D.collision.B2DynamicTreeBroadPhase.getFatAABB","box2D/collision/B2DynamicTreeBroadPhase.hx",70,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_78_getProxyCount,"box2D.collision.B2DynamicTreeBroadPhase","getProxyCount",0xdab99d22,"box2D.collision.B2DynamicTreeBroadPhase.getProxyCount","box2D/collision/B2DynamicTreeBroadPhase.hx",78,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_85_updatePairs,"box2D.collision.B2DynamicTreeBroadPhase","updatePairs",0x1166ecfb,"box2D.collision.B2DynamicTreeBroadPhase.updatePairs","box2D/collision/B2DynamicTreeBroadPhase.hx",85,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_140_queryCallback,"box2D.collision.B2DynamicTreeBroadPhase","queryCallback",0x40b4b258,"box2D.collision.B2DynamicTreeBroadPhase.queryCallback","box2D/collision/B2DynamicTreeBroadPhase.hx",140,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_176_query,"box2D.collision.B2DynamicTreeBroadPhase","query",0x97713173,"box2D.collision.B2DynamicTreeBroadPhase.query","box2D/collision/B2DynamicTreeBroadPhase.hx",176,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_184_rayCast,"box2D.collision.B2DynamicTreeBroadPhase","rayCast",0xca89b4f4,"box2D.collision.B2DynamicTreeBroadPhase.rayCast","box2D/collision/B2DynamicTreeBroadPhase.hx",184,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_189_validate,"box2D.collision.B2DynamicTreeBroadPhase","validate",0x0342bf0b,"box2D.collision.B2DynamicTreeBroadPhase.validate","box2D/collision/B2DynamicTreeBroadPhase.hx",189,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_195_rebalance,"box2D.collision.B2DynamicTreeBroadPhase","rebalance",0x38a71db4,"box2D.collision.B2DynamicTreeBroadPhase.rebalance","box2D/collision/B2DynamicTreeBroadPhase.hx",195,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_203_bufferMove,"box2D.collision.B2DynamicTreeBroadPhase","bufferMove",0x204081e6,"box2D.collision.B2DynamicTreeBroadPhase.bufferMove","box2D/collision/B2DynamicTreeBroadPhase.hx",203,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_208_unBufferMove,"box2D.collision.B2DynamicTreeBroadPhase","unBufferMove",0x3d814cdf,"box2D.collision.B2DynamicTreeBroadPhase.unBufferMove","box2D/collision/B2DynamicTreeBroadPhase.hx",208,0xa5294987)
HX_LOCAL_STACK_FRAME(_hx_pos_63eda192025b43f0_216_comparePairs,"box2D.collision.B2DynamicTreeBroadPhase","comparePairs",0x9b4e6929,"box2D.collision.B2DynamicTreeBroadPhase.comparePairs","box2D/collision/B2DynamicTreeBroadPhase.hx",216,0xa5294987)
namespace box2D{
namespace collision{

void B2DynamicTreeBroadPhase_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_63eda192025b43f0_219_new)
HXLINE( 221)		this->m_tree =  ::box2D::collision::B2DynamicTree_obj::__alloc( HX_CTX );
HXLINE( 222)		this->m_moveBuffer = ::Array_obj< ::Dynamic>::__new();
HXLINE( 224)		this->m_pairBuffer = ::Array_obj< ::Dynamic>::__new();
HXLINE( 225)		this->m_pairCount = (int)0;
HXLINE( 226)		this->m_proxyCount = (int)0;
            	}

Dynamic B2DynamicTreeBroadPhase_obj::__CreateEmpty() { return new B2DynamicTreeBroadPhase_obj; }

void *B2DynamicTreeBroadPhase_obj::_hx_vtable = 0;

Dynamic B2DynamicTreeBroadPhase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2DynamicTreeBroadPhase_obj > _hx_result = new B2DynamicTreeBroadPhase_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2DynamicTreeBroadPhase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0e69a22d;
}

static ::box2D::collision::QueryCallback_obj _hx_box2D_collision_B2DynamicTreeBroadPhase__hx_box2D_collision_QueryCallback= {
	( bool (hx::Object::*)( ::box2D::collision::B2DynamicTreeNode))&::box2D::collision::B2DynamicTreeBroadPhase_obj::queryCallback,
};

static ::box2D::collision::IBroadPhase_obj _hx_box2D_collision_B2DynamicTreeBroadPhase__hx_box2D_collision_IBroadPhase= {
	(  ::box2D::collision::B2DynamicTreeNode (hx::Object::*)( ::box2D::collision::B2AABB, ::box2D::dynamics::B2Fixture))&::box2D::collision::B2DynamicTreeBroadPhase_obj::createProxy,
	( void (hx::Object::*)( ::box2D::collision::B2DynamicTreeNode))&::box2D::collision::B2DynamicTreeBroadPhase_obj::destroyProxy,
	( void (hx::Object::*)( ::box2D::collision::B2DynamicTreeNode, ::box2D::collision::B2AABB, ::box2D::common::math::B2Vec2))&::box2D::collision::B2DynamicTreeBroadPhase_obj::moveProxy,
	( bool (hx::Object::*)( ::box2D::collision::B2DynamicTreeNode, ::box2D::collision::B2DynamicTreeNode))&::box2D::collision::B2DynamicTreeBroadPhase_obj::testOverlap,
	(  ::box2D::dynamics::B2Fixture (hx::Object::*)( ::box2D::collision::B2DynamicTreeNode))&::box2D::collision::B2DynamicTreeBroadPhase_obj::getUserData,
	(  ::box2D::collision::B2AABB (hx::Object::*)( ::box2D::collision::B2DynamicTreeNode))&::box2D::collision::B2DynamicTreeBroadPhase_obj::getFatAABB,
	( int (hx::Object::*)())&::box2D::collision::B2DynamicTreeBroadPhase_obj::getProxyCount,
	( void (hx::Object::*)( ::box2D::dynamics::B2ContactManager))&::box2D::collision::B2DynamicTreeBroadPhase_obj::updatePairs,
	( void (hx::Object::*)(::Dynamic, ::box2D::collision::B2AABB))&::box2D::collision::B2DynamicTreeBroadPhase_obj::query,
	( void (hx::Object::*)( ::Dynamic, ::box2D::collision::B2RayCastInput))&::box2D::collision::B2DynamicTreeBroadPhase_obj::rayCast,
	( void (hx::Object::*)())&::box2D::collision::B2DynamicTreeBroadPhase_obj::validate,
	( void (hx::Object::*)(int))&::box2D::collision::B2DynamicTreeBroadPhase_obj::rebalance,
};

void *B2DynamicTreeBroadPhase_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9f08fb78: return &_hx_box2D_collision_B2DynamicTreeBroadPhase__hx_box2D_collision_QueryCallback;
		case (int)0xc33f592d: return &_hx_box2D_collision_B2DynamicTreeBroadPhase__hx_box2D_collision_IBroadPhase;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::box2D::collision::B2DynamicTreeNode B2DynamicTreeBroadPhase_obj::createProxy( ::box2D::collision::B2AABB aabb, ::box2D::dynamics::B2Fixture userData){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_20_createProxy)
HXLINE(  21)		 ::box2D::collision::B2DynamicTreeNode proxy = this->m_tree->createProxy(aabb,userData);
HXLINE(  22)		++this->m_proxyCount;
HXLINE(  23)		this->bufferMove(proxy);
HXLINE(  24)		return proxy;
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2DynamicTreeBroadPhase_obj,createProxy,return )

void B2DynamicTreeBroadPhase_obj::destroyProxy( ::box2D::collision::B2DynamicTreeNode proxy){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_31_destroyProxy)
HXLINE(  32)		this->unBufferMove(proxy);
HXLINE(  33)		--this->m_proxyCount;
HXLINE(  34)		this->m_tree->destroyProxy(proxy);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTreeBroadPhase_obj,destroyProxy,(void))

void B2DynamicTreeBroadPhase_obj::moveProxy( ::box2D::collision::B2DynamicTreeNode proxy, ::box2D::collision::B2AABB aabb, ::box2D::common::math::B2Vec2 displacement){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_42_moveProxy)
HXLINE(  43)		bool buffer = this->m_tree->moveProxy(proxy,aabb,displacement);
HXLINE(  44)		if (buffer) {
HXLINE(  46)			this->bufferMove(proxy);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2DynamicTreeBroadPhase_obj,moveProxy,(void))

bool B2DynamicTreeBroadPhase_obj::testOverlap( ::box2D::collision::B2DynamicTreeNode proxyA, ::box2D::collision::B2DynamicTreeNode proxyB){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_51_testOverlap)
HXLINE(  52)		 ::box2D::collision::B2AABB aabbA = this->m_tree->getFatAABB(proxyA);
HXLINE(  53)		 ::box2D::collision::B2AABB aabbB = this->m_tree->getFatAABB(proxyB);
HXLINE(  54)		return aabbA->testOverlap(aabbB);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2DynamicTreeBroadPhase_obj,testOverlap,return )

 ::box2D::dynamics::B2Fixture B2DynamicTreeBroadPhase_obj::getUserData( ::box2D::collision::B2DynamicTreeNode proxy){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_62_getUserData)
HXDLIN(  62)		return this->m_tree->getUserData(proxy);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTreeBroadPhase_obj,getUserData,return )

 ::box2D::collision::B2AABB B2DynamicTreeBroadPhase_obj::getFatAABB( ::box2D::collision::B2DynamicTreeNode proxy){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_70_getFatAABB)
HXDLIN(  70)		return this->m_tree->getFatAABB(proxy);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTreeBroadPhase_obj,getFatAABB,return )

int B2DynamicTreeBroadPhase_obj::getProxyCount(){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_78_getProxyCount)
HXDLIN(  78)		return this->m_proxyCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2DynamicTreeBroadPhase_obj,getProxyCount,return )

void B2DynamicTreeBroadPhase_obj::updatePairs( ::box2D::dynamics::B2ContactManager manager){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_85_updatePairs)
HXLINE(  86)		this->m_pairCount = (int)0;
HXLINE(  88)		{
HXLINE(  88)			int _g = (int)0;
HXDLIN(  88)			::Array< ::Dynamic> _g1 = this->m_moveBuffer;
HXDLIN(  88)			while((_g < _g1->length)){
HXLINE(  88)				 ::box2D::collision::B2DynamicTreeNode queryProxy = _g1->__get(_g).StaticCast<  ::box2D::collision::B2DynamicTreeNode >();
HXDLIN(  88)				_g = (_g + (int)1);
HXLINE(  90)				this->cur_queryProxy = queryProxy;
HXLINE(  93)				 ::box2D::collision::B2AABB fatAABB = this->m_tree->getFatAABB(queryProxy);
HXLINE(  94)				this->m_tree->query(hx::ObjectPtr<OBJ_>(this),fatAABB);
            			}
            		}
HXLINE(  96)		this->cur_queryProxy = null();
HXLINE(  99)		int i = this->m_moveBuffer->length;
HXLINE( 100)		while(true){
HXLINE( 100)			i = (i - (int)1);
HXDLIN( 100)			if (!((i >= (int)0))) {
HXLINE( 100)				goto _hx_goto_9;
            			}
HXDLIN( 100)			this->m_moveBuffer->pop().StaticCast<  ::box2D::collision::B2DynamicTreeNode >();
            		}
            		_hx_goto_9:;
HXLINE( 110)		bool pairing = true;
HXLINE( 111)		i = (int)0;
HXLINE( 112)		while(pairing){
HXLINE( 114)			if ((i >= this->m_pairCount)) {
HXLINE( 116)				pairing = false;
            			}
            			else {
HXLINE( 120)				 ::box2D::collision::B2DynamicTreePair primaryPair = this->m_pairBuffer->__get(i).StaticCast<  ::box2D::collision::B2DynamicTreePair >();
HXLINE( 121)				 ::box2D::dynamics::B2Fixture _hx_tmp = this->m_tree->getUserData(primaryPair->proxyA);
HXDLIN( 121)				manager->addPair(_hx_tmp,this->m_tree->getUserData(primaryPair->proxyB));
HXLINE( 122)				i = (i + (int)1);
HXLINE( 125)				while((i < this->m_pairCount)){
HXLINE( 127)					 ::box2D::collision::B2DynamicTreePair pair = this->m_pairBuffer->__get(i).StaticCast<  ::box2D::collision::B2DynamicTreePair >();
HXLINE( 128)					bool _hx_tmp1;
HXDLIN( 128)					if (hx::IsEq( pair->proxyA,primaryPair->proxyA )) {
HXLINE( 128)						_hx_tmp1 = hx::IsNotEq( pair->proxyB,primaryPair->proxyB );
            					}
            					else {
HXLINE( 128)						_hx_tmp1 = true;
            					}
HXDLIN( 128)					if (_hx_tmp1) {
HXLINE( 130)						goto _hx_goto_11;
            					}
HXLINE( 132)					i = (i + (int)1);
            				}
            				_hx_goto_11:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTreeBroadPhase_obj,updatePairs,(void))

bool B2DynamicTreeBroadPhase_obj::queryCallback( ::box2D::collision::B2DynamicTreeNode proxy){
            	HX_GC_STACKFRAME(&_hx_pos_63eda192025b43f0_140_queryCallback)
HXLINE( 142)		if (hx::IsEq( proxy,this->cur_queryProxy )) {
HXLINE( 143)			return true;
            		}
HXLINE( 146)		if ((this->m_pairCount == this->m_pairBuffer->length)) {
HXLINE( 148)			::Array< ::Dynamic> _hx_tmp = this->m_pairBuffer;
HXDLIN( 148)			int _hx_tmp1 = this->m_pairCount;
HXDLIN( 148)			_hx_tmp[_hx_tmp1] =  ::box2D::collision::B2DynamicTreePair_obj::__alloc( HX_CTX );
            		}
HXLINE( 151)		 ::box2D::collision::B2DynamicTreePair pair = this->m_pairBuffer->__get(this->m_pairCount).StaticCast<  ::box2D::collision::B2DynamicTreePair >();
HXLINE( 153)		if ((proxy->id < this->cur_queryProxy->id)) {
HXLINE( 155)			pair->proxyA = proxy;
HXLINE( 156)			pair->proxyB = this->cur_queryProxy;
            		}
            		else {
HXLINE( 160)			pair->proxyA = this->cur_queryProxy;
HXLINE( 161)			pair->proxyB = proxy;
            		}
HXLINE( 166)		++this->m_pairCount;
HXLINE( 168)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTreeBroadPhase_obj,queryCallback,return )

void B2DynamicTreeBroadPhase_obj::query(::Dynamic callbackMethod, ::box2D::collision::B2AABB aabb){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_176_query)
HXDLIN( 176)		this->m_tree->query(callbackMethod,aabb);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2DynamicTreeBroadPhase_obj,query,(void))

void B2DynamicTreeBroadPhase_obj::rayCast( ::Dynamic callbackMethod, ::box2D::collision::B2RayCastInput input){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_184_rayCast)
HXDLIN( 184)		this->m_tree->rayCast(callbackMethod,input);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2DynamicTreeBroadPhase_obj,rayCast,(void))

void B2DynamicTreeBroadPhase_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_189_validate)
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2DynamicTreeBroadPhase_obj,validate,(void))

void B2DynamicTreeBroadPhase_obj::rebalance(int iterations){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_195_rebalance)
HXDLIN( 195)		this->m_tree->rebalance(iterations);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTreeBroadPhase_obj,rebalance,(void))

void B2DynamicTreeBroadPhase_obj::bufferMove( ::box2D::collision::B2DynamicTreeNode proxy){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_203_bufferMove)
HXDLIN( 203)		this->m_moveBuffer[this->m_moveBuffer->length] = proxy;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTreeBroadPhase_obj,bufferMove,(void))

void B2DynamicTreeBroadPhase_obj::unBufferMove( ::box2D::collision::B2DynamicTreeNode proxy){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_208_unBufferMove)
HXDLIN( 208)		this->m_moveBuffer->remove(proxy);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DynamicTreeBroadPhase_obj,unBufferMove,(void))

int B2DynamicTreeBroadPhase_obj::comparePairs( ::box2D::collision::B2DynamicTreePair pair1, ::box2D::collision::B2DynamicTreePair pair2){
            	HX_STACKFRAME(&_hx_pos_63eda192025b43f0_216_comparePairs)
HXDLIN( 216)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2DynamicTreeBroadPhase_obj,comparePairs,return )


hx::ObjectPtr< B2DynamicTreeBroadPhase_obj > B2DynamicTreeBroadPhase_obj::__new() {
	hx::ObjectPtr< B2DynamicTreeBroadPhase_obj > __this = new B2DynamicTreeBroadPhase_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2DynamicTreeBroadPhase_obj > B2DynamicTreeBroadPhase_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2DynamicTreeBroadPhase_obj *__this = (B2DynamicTreeBroadPhase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2DynamicTreeBroadPhase_obj), true, "box2D.collision.B2DynamicTreeBroadPhase"));
	*(void **)__this = B2DynamicTreeBroadPhase_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2DynamicTreeBroadPhase_obj::B2DynamicTreeBroadPhase_obj()
{
}

void B2DynamicTreeBroadPhase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2DynamicTreeBroadPhase);
	HX_MARK_MEMBER_NAME(m_tree,"m_tree");
	HX_MARK_MEMBER_NAME(m_proxyCount,"m_proxyCount");
	HX_MARK_MEMBER_NAME(m_moveBuffer,"m_moveBuffer");
	HX_MARK_MEMBER_NAME(m_pairBuffer,"m_pairBuffer");
	HX_MARK_MEMBER_NAME(m_pairCount,"m_pairCount");
	HX_MARK_MEMBER_NAME(cur_queryProxy,"cur_queryProxy");
	HX_MARK_END_CLASS();
}

void B2DynamicTreeBroadPhase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_tree,"m_tree");
	HX_VISIT_MEMBER_NAME(m_proxyCount,"m_proxyCount");
	HX_VISIT_MEMBER_NAME(m_moveBuffer,"m_moveBuffer");
	HX_VISIT_MEMBER_NAME(m_pairBuffer,"m_pairBuffer");
	HX_VISIT_MEMBER_NAME(m_pairCount,"m_pairCount");
	HX_VISIT_MEMBER_NAME(cur_queryProxy,"cur_queryProxy");
}

hx::Val B2DynamicTreeBroadPhase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"query") ) { return hx::Val( query_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_tree") ) { return hx::Val( m_tree ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"moveProxy") ) { return hx::Val( moveProxy_dyn() ); }
		if (HX_FIELD_EQ(inName,"rebalance") ) { return hx::Val( rebalance_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getFatAABB") ) { return hx::Val( getFatAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"bufferMove") ) { return hx::Val( bufferMove_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createProxy") ) { return hx::Val( createProxy_dyn() ); }
		if (HX_FIELD_EQ(inName,"testOverlap") ) { return hx::Val( testOverlap_dyn() ); }
		if (HX_FIELD_EQ(inName,"getUserData") ) { return hx::Val( getUserData_dyn() ); }
		if (HX_FIELD_EQ(inName,"updatePairs") ) { return hx::Val( updatePairs_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_pairCount") ) { return hx::Val( m_pairCount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"destroyProxy") ) { return hx::Val( destroyProxy_dyn() ); }
		if (HX_FIELD_EQ(inName,"unBufferMove") ) { return hx::Val( unBufferMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"comparePairs") ) { return hx::Val( comparePairs_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_proxyCount") ) { return hx::Val( m_proxyCount ); }
		if (HX_FIELD_EQ(inName,"m_moveBuffer") ) { return hx::Val( m_moveBuffer ); }
		if (HX_FIELD_EQ(inName,"m_pairBuffer") ) { return hx::Val( m_pairBuffer ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getProxyCount") ) { return hx::Val( getProxyCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"queryCallback") ) { return hx::Val( queryCallback_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cur_queryProxy") ) { return hx::Val( cur_queryProxy ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2DynamicTreeBroadPhase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"m_tree") ) { m_tree=inValue.Cast<  ::box2D::collision::B2DynamicTree >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_pairCount") ) { m_pairCount=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_proxyCount") ) { m_proxyCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_moveBuffer") ) { m_moveBuffer=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_pairBuffer") ) { m_pairBuffer=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cur_queryProxy") ) { cur_queryProxy=inValue.Cast<  ::box2D::collision::B2DynamicTreeNode >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2DynamicTreeBroadPhase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_tree","\xb0","\x09","\xfb","\x94"));
	outFields->push(HX_HCSTRING("m_proxyCount","\x53","\x31","\xcf","\x6a"));
	outFields->push(HX_HCSTRING("m_moveBuffer","\xc3","\xb0","\xce","\xf1"));
	outFields->push(HX_HCSTRING("m_pairBuffer","\x8c","\x96","\x81","\xde"));
	outFields->push(HX_HCSTRING("m_pairCount","\xc3","\xe0","\x9e","\xb0"));
	outFields->push(HX_HCSTRING("cur_queryProxy","\xe5","\x0d","\x5f","\x5f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2DynamicTreeBroadPhase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::collision::B2DynamicTree*/ ,(int)offsetof(B2DynamicTreeBroadPhase_obj,m_tree),HX_HCSTRING("m_tree","\xb0","\x09","\xfb","\x94")},
	{hx::fsInt,(int)offsetof(B2DynamicTreeBroadPhase_obj,m_proxyCount),HX_HCSTRING("m_proxyCount","\x53","\x31","\xcf","\x6a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2DynamicTreeBroadPhase_obj,m_moveBuffer),HX_HCSTRING("m_moveBuffer","\xc3","\xb0","\xce","\xf1")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2DynamicTreeBroadPhase_obj,m_pairBuffer),HX_HCSTRING("m_pairBuffer","\x8c","\x96","\x81","\xde")},
	{hx::fsInt,(int)offsetof(B2DynamicTreeBroadPhase_obj,m_pairCount),HX_HCSTRING("m_pairCount","\xc3","\xe0","\x9e","\xb0")},
	{hx::fsObject /*::box2D::collision::B2DynamicTreeNode*/ ,(int)offsetof(B2DynamicTreeBroadPhase_obj,cur_queryProxy),HX_HCSTRING("cur_queryProxy","\xe5","\x0d","\x5f","\x5f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2DynamicTreeBroadPhase_obj_sStaticStorageInfo = 0;
#endif

static ::String B2DynamicTreeBroadPhase_obj_sMemberFields[] = {
	HX_HCSTRING("createProxy","\xd2","\x25","\x0b","\xf2"),
	HX_HCSTRING("destroyProxy","\x14","\xe7","\x8f","\xba"),
	HX_HCSTRING("moveProxy","\x9d","\xbd","\x56","\x86"),
	HX_HCSTRING("testOverlap","\x55","\x31","\xd9","\x65"),
	HX_HCSTRING("getUserData","\xcb","\x58","\x1c","\x2b"),
	HX_HCSTRING("getFatAABB","\x03","\x8c","\x30","\x9f"),
	HX_HCSTRING("getProxyCount","\xb7","\x13","\x36","\xf6"),
	HX_HCSTRING("updatePairs","\x50","\x24","\xe7","\xa2"),
	HX_HCSTRING("queryCallback","\xed","\x28","\x31","\x5c"),
	HX_HCSTRING("query","\x08","\x8b","\xea","\x5d"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("rebalance","\xc9","\x65","\xf5","\xa3"),
	HX_HCSTRING("bufferMove","\x31","\x4c","\x71","\x99"),
	HX_HCSTRING("unBufferMove","\xea","\x7f","\x31","\xfc"),
	HX_HCSTRING("comparePairs","\x34","\x9c","\xfe","\x59"),
	HX_HCSTRING("m_tree","\xb0","\x09","\xfb","\x94"),
	HX_HCSTRING("m_proxyCount","\x53","\x31","\xcf","\x6a"),
	HX_HCSTRING("m_moveBuffer","\xc3","\xb0","\xce","\xf1"),
	HX_HCSTRING("m_pairBuffer","\x8c","\x96","\x81","\xde"),
	HX_HCSTRING("m_pairCount","\xc3","\xe0","\x9e","\xb0"),
	HX_HCSTRING("cur_queryProxy","\xe5","\x0d","\x5f","\x5f"),
	::String(null()) };

static void B2DynamicTreeBroadPhase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2DynamicTreeBroadPhase_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2DynamicTreeBroadPhase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2DynamicTreeBroadPhase_obj::__mClass,"__mClass");
};

#endif

hx::Class B2DynamicTreeBroadPhase_obj::__mClass;

void B2DynamicTreeBroadPhase_obj::__register()
{
	hx::Object *dummy = new B2DynamicTreeBroadPhase_obj;
	B2DynamicTreeBroadPhase_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2DynamicTreeBroadPhase","\x99","\x14","\xc1","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2DynamicTreeBroadPhase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2DynamicTreeBroadPhase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2DynamicTreeBroadPhase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2DynamicTreeBroadPhase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2DynamicTreeBroadPhase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2DynamicTreeBroadPhase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
