// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2ContactID
#include <box2D/collision/B2ContactID.h>
#endif
#ifndef INCLUDED_box2D_collision_Features
#include <box2D/collision/Features.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e5dfdd9bd46e2c63_28_new,"box2D.collision.B2ContactID","new",0x28619610,"box2D.collision.B2ContactID.new","box2D/collision/B2ContactID.hx",28,0xd425b622)
HX_LOCAL_STACK_FRAME(_hx_pos_e5dfdd9bd46e2c63_33_set,"box2D.collision.B2ContactID","set",0x28656152,"box2D.collision.B2ContactID.set","box2D/collision/B2ContactID.hx",33,0xd425b622)
HX_LOCAL_STACK_FRAME(_hx_pos_e5dfdd9bd46e2c63_35_copy,"box2D.collision.B2ContactID","copy",0x25c3f005,"box2D.collision.B2ContactID.copy","box2D/collision/B2ContactID.hx",35,0xd425b622)
HX_LOCAL_STACK_FRAME(_hx_pos_e5dfdd9bd46e2c63_44_get_key,"box2D.collision.B2ContactID","get_key",0x2020afe6,"box2D.collision.B2ContactID.get_key","box2D/collision/B2ContactID.hx",44,0xd425b622)
HX_LOCAL_STACK_FRAME(_hx_pos_e5dfdd9bd46e2c63_46_set_key,"box2D.collision.B2ContactID","set_key",0x132240f2,"box2D.collision.B2ContactID.set_key","box2D/collision/B2ContactID.hx",46,0xd425b622)
HX_LOCAL_STACK_FRAME(_hx_pos_e5dfdd9bd46e2c63_58_boot,"box2D.collision.B2ContactID","boot",0x251ab882,"box2D.collision.B2ContactID.boot","box2D/collision/B2ContactID.hx",58,0xd425b622)
HX_LOCAL_STACK_FRAME(_hx_pos_e5dfdd9bd46e2c63_59_boot,"box2D.collision.B2ContactID","boot",0x251ab882,"box2D.collision.B2ContactID.boot","box2D/collision/B2ContactID.hx",59,0xd425b622)
namespace box2D{
namespace collision{

void B2ContactID_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e5dfdd9bd46e2c63_28_new)
HXLINE(  29)		this->features =  ::box2D::collision::Features_obj::__alloc( HX_CTX );
HXLINE(  30)		this->features->_m_id = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic B2ContactID_obj::__CreateEmpty() { return new B2ContactID_obj; }

void *B2ContactID_obj::_hx_vtable = 0;

Dynamic B2ContactID_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2ContactID_obj > _hx_result = new B2ContactID_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2ContactID_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07b096ce;
}

void B2ContactID_obj::set( ::box2D::collision::B2ContactID id){
            	HX_STACKFRAME(&_hx_pos_e5dfdd9bd46e2c63_33_set)
HXDLIN(  33)		this->set_key(id->_key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2ContactID_obj,set,(void))

 ::box2D::collision::B2ContactID B2ContactID_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_e5dfdd9bd46e2c63_35_copy)
HXLINE(  36)		 ::box2D::collision::B2ContactID id =  ::box2D::collision::B2ContactID_obj::__alloc( HX_CTX );
HXLINE(  37)		id->set_key(this->get_key());
HXLINE(  38)		return id;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2ContactID_obj,copy,return )

int B2ContactID_obj::get_key(){
            	HX_STACKFRAME(&_hx_pos_e5dfdd9bd46e2c63_44_get_key)
HXDLIN(  44)		return this->_key;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2ContactID_obj,get_key,return )

int B2ContactID_obj::set_key(int value){
            	HX_STACKFRAME(&_hx_pos_e5dfdd9bd46e2c63_46_set_key)
HXLINE(  47)		this->_key = value;
HXLINE(  48)		this->features->_referenceEdge = ((int)this->_key & (int)(int)255);
HXLINE(  49)		this->features->_incidentEdge = ((int)((int)((int)this->_key & (int)(int)65280) >> (int)(int)8) & (int)(int)255);
HXLINE(  50)		this->features->_incidentVertex = ((int)((int)((int)this->_key & (int)(int)16711680) >> (int)(int)16) & (int)(int)255);
HXLINE(  51)		this->features->_flip = ((int)((int)((int)this->_key & (int)(int)-16777216) >> (int)(int)24) & (int)(int)255);
HXLINE(  52)		return this->_key;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2ContactID_obj,set_key,return )

int B2ContactID_obj::VERTEX;

int B2ContactID_obj::FACE;


hx::ObjectPtr< B2ContactID_obj > B2ContactID_obj::__new() {
	hx::ObjectPtr< B2ContactID_obj > __this = new B2ContactID_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2ContactID_obj > B2ContactID_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2ContactID_obj *__this = (B2ContactID_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2ContactID_obj), true, "box2D.collision.B2ContactID"));
	*(void **)__this = B2ContactID_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2ContactID_obj::B2ContactID_obj()
{
}

void B2ContactID_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2ContactID);
	HX_MARK_MEMBER_NAME(features,"features");
	HX_MARK_MEMBER_NAME(_key,"_key");
	HX_MARK_MEMBER_NAME(indexA,"indexA");
	HX_MARK_MEMBER_NAME(indexB,"indexB");
	HX_MARK_MEMBER_NAME(typeA,"typeA");
	HX_MARK_MEMBER_NAME(typeB,"typeB");
	HX_MARK_END_CLASS();
}

void B2ContactID_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(features,"features");
	HX_VISIT_MEMBER_NAME(_key,"_key");
	HX_VISIT_MEMBER_NAME(indexA,"indexA");
	HX_VISIT_MEMBER_NAME(indexB,"indexB");
	HX_VISIT_MEMBER_NAME(typeA,"typeA");
	HX_VISIT_MEMBER_NAME(typeB,"typeB");
}

hx::Val B2ContactID_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"key") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_key() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"_key") ) { return hx::Val( _key ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"typeA") ) { return hx::Val( typeA ); }
		if (HX_FIELD_EQ(inName,"typeB") ) { return hx::Val( typeB ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indexA") ) { return hx::Val( indexA ); }
		if (HX_FIELD_EQ(inName,"indexB") ) { return hx::Val( indexB ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_key") ) { return hx::Val( get_key_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_key") ) { return hx::Val( set_key_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"features") ) { return hx::Val( features ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2ContactID_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"FACE") ) { outValue = ( FACE ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"VERTEX") ) { outValue = ( VERTEX ); return true; }
	}
	return false;
}

hx::Val B2ContactID_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_key(inValue.Cast< int >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_key") ) { _key=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"typeA") ) { typeA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typeB") ) { typeB=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indexA") ) { indexA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexB") ) { indexB=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"features") ) { features=inValue.Cast<  ::box2D::collision::Features >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2ContactID_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"FACE") ) { FACE=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"VERTEX") ) { VERTEX=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void B2ContactID_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("key","\x9f","\x89","\x51","\x00"));
	outFields->push(HX_HCSTRING("features","\xfd","\x6c","\xd7","\x12"));
	outFields->push(HX_HCSTRING("_key","\xa0","\xce","\x1c","\x3f"));
	outFields->push(HX_HCSTRING("indexA","\xef","\x14","\xf3","\x93"));
	outFields->push(HX_HCSTRING("indexB","\xf0","\x14","\xf3","\x93"));
	outFields->push(HX_HCSTRING("typeA","\x47","\x70","\xcb","\x1a"));
	outFields->push(HX_HCSTRING("typeB","\x48","\x70","\xcb","\x1a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2ContactID_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::collision::Features*/ ,(int)offsetof(B2ContactID_obj,features),HX_HCSTRING("features","\xfd","\x6c","\xd7","\x12")},
	{hx::fsInt,(int)offsetof(B2ContactID_obj,_key),HX_HCSTRING("_key","\xa0","\xce","\x1c","\x3f")},
	{hx::fsInt,(int)offsetof(B2ContactID_obj,indexA),HX_HCSTRING("indexA","\xef","\x14","\xf3","\x93")},
	{hx::fsInt,(int)offsetof(B2ContactID_obj,indexB),HX_HCSTRING("indexB","\xf0","\x14","\xf3","\x93")},
	{hx::fsInt,(int)offsetof(B2ContactID_obj,typeA),HX_HCSTRING("typeA","\x47","\x70","\xcb","\x1a")},
	{hx::fsInt,(int)offsetof(B2ContactID_obj,typeB),HX_HCSTRING("typeB","\x48","\x70","\xcb","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2ContactID_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &B2ContactID_obj::VERTEX,HX_HCSTRING("VERTEX","\x64","\x87","\xca","\x53")},
	{hx::fsInt,(void *) &B2ContactID_obj::FACE,HX_HCSTRING("FACE","\x9d","\x7c","\x76","\x2e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2ContactID_obj_sMemberFields[] = {
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("get_key","\x36","\x52","\xc6","\x26"),
	HX_HCSTRING("set_key","\x42","\xe3","\xc7","\x19"),
	HX_HCSTRING("features","\xfd","\x6c","\xd7","\x12"),
	HX_HCSTRING("_key","\xa0","\xce","\x1c","\x3f"),
	HX_HCSTRING("indexA","\xef","\x14","\xf3","\x93"),
	HX_HCSTRING("indexB","\xf0","\x14","\xf3","\x93"),
	HX_HCSTRING("typeA","\x47","\x70","\xcb","\x1a"),
	HX_HCSTRING("typeB","\x48","\x70","\xcb","\x1a"),
	::String(null()) };

static void B2ContactID_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2ContactID_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2ContactID_obj::VERTEX,"VERTEX");
	HX_MARK_MEMBER_NAME(B2ContactID_obj::FACE,"FACE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2ContactID_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2ContactID_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2ContactID_obj::VERTEX,"VERTEX");
	HX_VISIT_MEMBER_NAME(B2ContactID_obj::FACE,"FACE");
};

#endif

hx::Class B2ContactID_obj::__mClass;

static ::String B2ContactID_obj_sStaticFields[] = {
	HX_HCSTRING("VERTEX","\x64","\x87","\xca","\x53"),
	HX_HCSTRING("FACE","\x9d","\x7c","\x76","\x2e"),
	::String(null())
};

void B2ContactID_obj::__register()
{
	hx::Object *dummy = new B2ContactID_obj;
	B2ContactID_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2ContactID","\x1e","\x8e","\xc1","\xe8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2ContactID_obj::__GetStatic;
	__mClass->mSetStaticField = &B2ContactID_obj::__SetStatic;
	__mClass->mMarkFunc = B2ContactID_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2ContactID_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2ContactID_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2ContactID_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2ContactID_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2ContactID_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2ContactID_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2ContactID_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e5dfdd9bd46e2c63_58_boot)
HXDLIN(  58)		VERTEX = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e5dfdd9bd46e2c63_59_boot)
HXDLIN(  59)		FACE = (int)1;
            	}
}

} // end namespace box2D
} // end namespace collision
