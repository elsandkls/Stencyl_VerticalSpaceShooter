// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2DistanceProxy
#include <box2D/collision/B2DistanceProxy.h>
#endif
#ifndef INCLUDED_box2D_collision_B2Simplex
#include <box2D/collision/B2Simplex.h>
#endif
#ifndef INCLUDED_box2D_collision_B2SimplexCache
#include <box2D/collision/B2SimplexCache.h>
#endif
#ifndef INCLUDED_box2D_collision_B2SimplexVertex
#include <box2D/collision/B2SimplexVertex.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ba3ced8e75c2d3ec_32_new,"box2D.collision.B2Simplex","new",0x6d491e5b,"box2D.collision.B2Simplex.new","box2D/collision/B2Simplex.hx",32,0x494f6bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_ba3ced8e75c2d3ec_46_readCache,"box2D.collision.B2Simplex","readCache",0xdef46347,"box2D.collision.B2Simplex.readCache","box2D/collision/B2Simplex.hx",46,0x494f6bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_ba3ced8e75c2d3ec_103_writeCache,"box2D.collision.B2Simplex","writeCache",0x624acc48,"box2D.collision.B2Simplex.writeCache","box2D/collision/B2Simplex.hx",103,0x494f6bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_ba3ced8e75c2d3ec_118_getSearchDirection,"box2D.collision.B2Simplex","getSearchDirection",0x00f7ba26,"box2D.collision.B2Simplex.getSearchDirection","box2D/collision/B2Simplex.hx",118,0x494f6bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_ba3ced8e75c2d3ec_144_getClosestPoint,"box2D.collision.B2Simplex","getClosestPoint",0xdca15768,"box2D.collision.B2Simplex.getClosestPoint","box2D/collision/B2Simplex.hx",144,0x494f6bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_ba3ced8e75c2d3ec_164_getWitnessPoints,"box2D.collision.B2Simplex","getWitnessPoints",0x77a4f36b,"box2D.collision.B2Simplex.getWitnessPoints","box2D/collision/B2Simplex.hx",164,0x494f6bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_ba3ced8e75c2d3ec_191_getMetric,"box2D.collision.B2Simplex","getMetric",0x52b18da1,"box2D.collision.B2Simplex.getMetric","box2D/collision/B2Simplex.hx",191,0x494f6bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_ba3ced8e75c2d3ec_236_solve2,"box2D.collision.B2Simplex","solve2",0x11c330b8,"box2D.collision.B2Simplex.solve2","box2D/collision/B2Simplex.hx",236,0x494f6bb7)
HX_LOCAL_STACK_FRAME(_hx_pos_ba3ced8e75c2d3ec_270_solve3,"box2D.collision.B2Simplex","solve3",0x11c330b9,"box2D.collision.B2Simplex.solve3","box2D/collision/B2Simplex.hx",270,0x494f6bb7)
namespace box2D{
namespace collision{

void B2Simplex_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ba3ced8e75c2d3ec_32_new)
HXLINE(  33)		this->m_v1 =  ::box2D::collision::B2SimplexVertex_obj::__alloc( HX_CTX );
HXLINE(  34)		this->m_v2 =  ::box2D::collision::B2SimplexVertex_obj::__alloc( HX_CTX );
HXLINE(  35)		this->m_v3 =  ::box2D::collision::B2SimplexVertex_obj::__alloc( HX_CTX );
HXLINE(  36)		this->m_vertices = ::Array_obj< ::Dynamic>::__new();
HXLINE(  38)		this->m_vertices[(int)0] = this->m_v1;
HXLINE(  39)		this->m_vertices[(int)1] = this->m_v2;
HXLINE(  40)		this->m_vertices[(int)2] = this->m_v3;
            	}

Dynamic B2Simplex_obj::__CreateEmpty() { return new B2Simplex_obj; }

void *B2Simplex_obj::_hx_vtable = 0;

Dynamic B2Simplex_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Simplex_obj > _hx_result = new B2Simplex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2Simplex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4293077d;
}

void B2Simplex_obj::readCache( ::box2D::collision::B2SimplexCache cache, ::box2D::collision::B2DistanceProxy proxyA, ::box2D::common::math::B2Transform transformA, ::box2D::collision::B2DistanceProxy proxyB, ::box2D::common::math::B2Transform transformB){
            	HX_STACKFRAME(&_hx_pos_ba3ced8e75c2d3ec_46_readCache)
HXLINE(  47)		bool _hx_tmp;
HXDLIN(  47)		if (((int)0 <= cache->count)) {
HXLINE(  47)			_hx_tmp = (cache->count <= (int)3);
            		}
            		else {
HXLINE(  47)			_hx_tmp = false;
            		}
HXDLIN(  47)		::box2D::common::B2Settings_obj::b2Assert(_hx_tmp);
HXLINE(  49)		 ::box2D::common::math::B2Vec2 wALocal;
HXLINE(  50)		 ::box2D::common::math::B2Vec2 wBLocal;
HXLINE(  53)		this->m_count = cache->count;
HXLINE(  54)		::Array< ::Dynamic> vertices = this->m_vertices;
HXLINE(  55)		 ::box2D::collision::B2SimplexVertex v;
HXLINE(  56)		if (cache->useCache) {
HXLINE(  58)			{
HXLINE(  58)				int _g1 = (int)0;
HXDLIN(  58)				int _g = this->m_count;
HXDLIN(  58)				while((_g1 < _g)){
HXLINE(  58)					_g1 = (_g1 + (int)1);
HXDLIN(  58)					int i = (_g1 - (int)1);
HXLINE(  60)					v = vertices->__get(i).StaticCast<  ::box2D::collision::B2SimplexVertex >();
HXLINE(  61)					v->indexA = cache->indexA->__get(i);
HXLINE(  62)					v->indexB = cache->indexB->__get(i);
HXLINE(  63)					wALocal = proxyA->getVertex(v->indexA);
HXLINE(  64)					wBLocal = proxyB->getVertex(v->indexB);
HXLINE(  65)					v->wA = ::box2D::common::math::B2Math_obj::mulX(transformA,wALocal,true);
HXLINE(  66)					v->wB = ::box2D::common::math::B2Math_obj::mulX(transformB,wBLocal,true);
HXLINE(  67)					v->w = ::box2D::common::math::B2Math_obj::subtractVVPooled(v->wB,v->wA);
HXLINE(  68)					v->a = (int)0;
            				}
            			}
HXLINE(  74)			if ((this->m_count > (int)1)) {
HXLINE(  76)				Float metric1 = cache->metric;
HXLINE(  77)				Float metric2 = this->getMetric();
HXLINE(  78)				bool _hx_tmp1;
HXDLIN(  78)				bool _hx_tmp2;
HXDLIN(  78)				if (!((metric2 < (((Float).5) * metric1)))) {
HXLINE(  78)					_hx_tmp2 = ((((Float)2.0) * metric1) < metric2);
            				}
            				else {
HXLINE(  78)					_hx_tmp2 = true;
            				}
HXDLIN(  78)				if (!(_hx_tmp2)) {
HXLINE(  78)					_hx_tmp1 = (metric2 < ((Float)2.2250738585072014e-308));
            				}
            				else {
HXLINE(  78)					_hx_tmp1 = true;
            				}
HXDLIN(  78)				if (_hx_tmp1) {
HXLINE(  81)					this->m_count = (int)0;
            				}
            			}
            		}
HXLINE(  87)		if ((this->m_count == (int)0)) {
HXLINE(  89)			v = vertices->__get((int)0).StaticCast<  ::box2D::collision::B2SimplexVertex >();
HXLINE(  90)			v->indexA = (int)0;
HXLINE(  91)			v->indexB = (int)0;
HXLINE(  92)			wALocal = proxyA->getVertex((int)0);
HXLINE(  93)			wBLocal = proxyB->getVertex((int)0);
HXLINE(  94)			v->wA = ::box2D::common::math::B2Math_obj::mulX(transformA,wALocal,true);
HXLINE(  95)			v->wB = ::box2D::common::math::B2Math_obj::mulX(transformB,wBLocal,true);
HXLINE(  96)			v->w = ::box2D::common::math::B2Math_obj::subtractVVPooled(v->wB,v->wA);
HXLINE(  97)			this->m_count = (int)1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(B2Simplex_obj,readCache,(void))

void B2Simplex_obj::writeCache( ::box2D::collision::B2SimplexCache cache){
            	HX_STACKFRAME(&_hx_pos_ba3ced8e75c2d3ec_103_writeCache)
HXDLIN( 103)		if (cache->useCache) {
HXLINE( 105)			cache->metric = this->getMetric();
HXLINE( 106)			cache->count = this->m_count;
HXLINE( 107)			::Array< ::Dynamic> vertices = this->m_vertices;
HXLINE( 108)			{
HXLINE( 108)				int _g1 = (int)0;
HXDLIN( 108)				int _g = this->m_count;
HXDLIN( 108)				while((_g1 < _g)){
HXLINE( 108)					_g1 = (_g1 + (int)1);
HXDLIN( 108)					int i = (_g1 - (int)1);
HXLINE( 110)					cache->indexA[i] = vertices->__get(i).StaticCast<  ::box2D::collision::B2SimplexVertex >()->indexA;
HXLINE( 111)					cache->indexB[i] = vertices->__get(i).StaticCast<  ::box2D::collision::B2SimplexVertex >()->indexB;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Simplex_obj,writeCache,(void))

 ::box2D::common::math::B2Vec2 B2Simplex_obj::getSearchDirection(){
            	HX_STACKFRAME(&_hx_pos_ba3ced8e75c2d3ec_118_getSearchDirection)
HXDLIN( 118)		int _g = this->m_count;
HXDLIN( 118)		switch((int)(_g)){
            			case (int)1: {
HXLINE( 121)				return this->m_v1->w->getNegativePooled();
            			}
            			break;
            			case (int)2: {
HXLINE( 125)				 ::box2D::common::math::B2Vec2 e12 = ::box2D::common::math::B2Math_obj::subtractVVPooled(this->m_v2->w,this->m_v1->w);
HXLINE( 126)				Float sgn = ::box2D::common::math::B2Math_obj::crossVV(e12,this->m_v1->w->getNegativePooled());
HXLINE( 127)				if ((sgn > ((Float)0.0))) {
HXLINE( 130)					return ::box2D::common::math::B2Math_obj::crossFV(((Float)1.0),e12,true);
            				}
            				else {
HXLINE( 133)					return ::box2D::common::math::B2Math_obj::crossVF(e12,((Float)1.0),true);
            				}
            			}
            			break;
            			default:{
HXLINE( 137)				::box2D::common::B2Settings_obj::b2Assert(false);
HXLINE( 138)				return ::box2D::common::math::B2Vec2_obj::getFromPool();
            			}
            		}
HXLINE( 118)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Simplex_obj,getSearchDirection,return )

 ::box2D::common::math::B2Vec2 B2Simplex_obj::getClosestPoint(){
            	HX_STACKFRAME(&_hx_pos_ba3ced8e75c2d3ec_144_getClosestPoint)
HXDLIN( 144)		int _g = this->m_count;
HXDLIN( 144)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 147)				::box2D::common::B2Settings_obj::b2Assert(false);
HXLINE( 148)				return ::box2D::common::math::B2Vec2_obj::getFromPool();
            			}
            			break;
            			case (int)1: {
HXLINE( 150)				return this->m_v1->w;
            			}
            			break;
            			case (int)2: {
HXLINE( 152)				 ::box2D::common::math::B2Vec2 toReturn = ::box2D::common::math::B2Vec2_obj::getFromPool();
HXLINE( 153)				Float _hx_tmp = (this->m_v1->a * this->m_v1->w->x);
HXDLIN( 153)				toReturn->x = (_hx_tmp + (this->m_v2->a * this->m_v2->w->x));
HXLINE( 154)				Float _hx_tmp1 = (this->m_v1->a * this->m_v1->w->y);
HXDLIN( 154)				toReturn->y = (_hx_tmp1 + (this->m_v2->a * this->m_v2->w->y));
HXLINE( 155)				return toReturn;
            			}
            			break;
            			default:{
HXLINE( 157)				::box2D::common::B2Settings_obj::b2Assert(false);
HXLINE( 158)				return ::box2D::common::math::B2Vec2_obj::getFromPool();
            			}
            		}
HXLINE( 144)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Simplex_obj,getClosestPoint,return )

void B2Simplex_obj::getWitnessPoints( ::box2D::common::math::B2Vec2 pA, ::box2D::common::math::B2Vec2 pB){
            	HX_STACKFRAME(&_hx_pos_ba3ced8e75c2d3ec_164_getWitnessPoints)
HXDLIN( 164)		int _g = this->m_count;
HXDLIN( 164)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 167)				::box2D::common::B2Settings_obj::b2Assert(false);
            			}
            			break;
            			case (int)1: {
HXLINE( 170)				{
HXLINE( 170)					 ::box2D::common::math::B2Vec2 v = this->m_v1->wA;
HXDLIN( 170)					pA->x = v->x;
HXDLIN( 170)					pA->y = v->y;
            				}
HXLINE( 171)				{
HXLINE( 171)					 ::box2D::common::math::B2Vec2 v1 = this->m_v1->wB;
HXDLIN( 171)					pB->x = v1->x;
HXDLIN( 171)					pB->y = v1->y;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 174)				Float _hx_tmp = (this->m_v1->a * this->m_v1->wA->x);
HXDLIN( 174)				pA->x = (_hx_tmp + (this->m_v2->a * this->m_v2->wA->x));
HXLINE( 175)				Float _hx_tmp1 = (this->m_v1->a * this->m_v1->wA->y);
HXDLIN( 175)				pA->y = (_hx_tmp1 + (this->m_v2->a * this->m_v2->wA->y));
HXLINE( 176)				Float _hx_tmp2 = (this->m_v1->a * this->m_v1->wB->x);
HXDLIN( 176)				pB->x = (_hx_tmp2 + (this->m_v2->a * this->m_v2->wB->x));
HXLINE( 177)				Float _hx_tmp3 = (this->m_v1->a * this->m_v1->wB->y);
HXDLIN( 177)				pB->y = (_hx_tmp3 + (this->m_v2->a * this->m_v2->wB->y));
            			}
            			break;
            			case (int)3: {
HXLINE( 180)				Float _hx_tmp4 = (this->m_v1->a * this->m_v1->wA->x);
HXDLIN( 180)				Float _hx_tmp5 = (_hx_tmp4 + (this->m_v2->a * this->m_v2->wA->x));
HXDLIN( 180)				pB->x = (pA->x = (_hx_tmp5 + (this->m_v3->a * this->m_v3->wA->x)));
HXLINE( 181)				Float _hx_tmp6 = (this->m_v1->a * this->m_v1->wA->y);
HXDLIN( 181)				Float _hx_tmp7 = (_hx_tmp6 + (this->m_v2->a * this->m_v2->wA->y));
HXDLIN( 181)				pB->y = (pA->y = (_hx_tmp7 + (this->m_v3->a * this->m_v3->wA->y)));
            			}
            			break;
            			default:{
HXLINE( 184)				::box2D::common::B2Settings_obj::b2Assert(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Simplex_obj,getWitnessPoints,(void))

Float B2Simplex_obj::getMetric(){
            	HX_STACKFRAME(&_hx_pos_ba3ced8e75c2d3ec_191_getMetric)
HXDLIN( 191)		int _g = this->m_count;
HXDLIN( 191)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 194)				::box2D::common::B2Settings_obj::b2Assert(false);
HXLINE( 195)				return ((Float)0.0);
            			}
            			break;
            			case (int)1: {
HXLINE( 198)				return ((Float)0.0);
            			}
            			break;
            			case (int)2: {
HXLINE( 201)				return ::box2D::common::math::B2Math_obj::subtractVVPooled(this->m_v1->w,this->m_v2->w)->length();
            			}
            			break;
            			case (int)3: {
HXLINE( 204)				 ::box2D::common::math::B2Vec2 _hx_tmp = ::box2D::common::math::B2Math_obj::subtractVVPooled(this->m_v2->w,this->m_v1->w);
HXDLIN( 204)				return ::box2D::common::math::B2Math_obj::crossVV(_hx_tmp,::box2D::common::math::B2Math_obj::subtractVVPooled(this->m_v3->w,this->m_v1->w));
            			}
            			break;
            			default:{
HXLINE( 207)				::box2D::common::B2Settings_obj::b2Assert(false);
HXLINE( 208)				return ((Float)0.0);
            			}
            		}
HXLINE( 191)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Simplex_obj,getMetric,return )

void B2Simplex_obj::solve2(){
            	HX_STACKFRAME(&_hx_pos_ba3ced8e75c2d3ec_236_solve2)
HXLINE( 237)		 ::box2D::common::math::B2Vec2 w1 = this->m_v1->w;
HXLINE( 238)		 ::box2D::common::math::B2Vec2 w2 = this->m_v2->w;
HXLINE( 239)		 ::box2D::common::math::B2Vec2 e12 = ::box2D::common::math::B2Math_obj::subtractVVPooled(w2,w1);
HXLINE( 242)		Float d12_2 = (w1->x * e12->x);
HXDLIN( 242)		Float d12_21 = -((d12_2 + (w1->y * e12->y)));
HXLINE( 243)		if ((d12_21 <= ((Float)0.0))) {
HXLINE( 246)			this->m_v1->a = ((Float)1.0);
HXLINE( 247)			this->m_count = (int)1;
HXLINE( 248)			return;
            		}
HXLINE( 252)		Float d12_1 = (w2->x * e12->x);
HXDLIN( 252)		Float d12_11 = (d12_1 + (w2->y * e12->y));
HXLINE( 253)		if ((d12_11 <= ((Float)0.0))) {
HXLINE( 256)			this->m_v2->a = ((Float)1.0);
HXLINE( 257)			this->m_count = (int)1;
HXLINE( 258)			this->m_v1->set(this->m_v2);
HXLINE( 259)			return;
            		}
HXLINE( 263)		Float inv_d12 = ((Float)((Float)1.0) / (Float)(d12_11 + d12_21));
HXLINE( 264)		this->m_v1->a = (d12_11 * inv_d12);
HXLINE( 265)		this->m_v2->a = (d12_21 * inv_d12);
HXLINE( 266)		this->m_count = (int)2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Simplex_obj,solve2,(void))

void B2Simplex_obj::solve3(){
            	HX_STACKFRAME(&_hx_pos_ba3ced8e75c2d3ec_270_solve3)
HXLINE( 271)		 ::box2D::common::math::B2Vec2 w1 = this->m_v1->w;
HXLINE( 272)		 ::box2D::common::math::B2Vec2 w2 = this->m_v2->w;
HXLINE( 273)		 ::box2D::common::math::B2Vec2 w3 = this->m_v3->w;
HXLINE( 279)		 ::box2D::common::math::B2Vec2 e12 = ::box2D::common::math::B2Math_obj::subtractVVPooled(w2,w1);
HXLINE( 280)		Float w1e12 = ::box2D::common::math::B2Math_obj::dot(w1,e12);
HXLINE( 281)		Float w2e12 = ::box2D::common::math::B2Math_obj::dot(w2,e12);
HXLINE( 282)		Float d12_1 = w2e12;
HXLINE( 283)		Float d12_2 = -(w1e12);
HXLINE( 289)		 ::box2D::common::math::B2Vec2 e13 = ::box2D::common::math::B2Math_obj::subtractVVPooled(w3,w1);
HXLINE( 290)		Float w1e13 = ::box2D::common::math::B2Math_obj::dot(w1,e13);
HXLINE( 291)		Float w3e13 = ::box2D::common::math::B2Math_obj::dot(w3,e13);
HXLINE( 292)		Float d13_1 = w3e13;
HXLINE( 293)		Float d13_2 = -(w1e13);
HXLINE( 299)		 ::box2D::common::math::B2Vec2 e23 = ::box2D::common::math::B2Math_obj::subtractVVPooled(w3,w2);
HXLINE( 300)		Float w2e23 = ::box2D::common::math::B2Math_obj::dot(w2,e23);
HXLINE( 301)		Float w3e23 = ::box2D::common::math::B2Math_obj::dot(w3,e23);
HXLINE( 302)		Float d23_1 = w3e23;
HXLINE( 303)		Float d23_2 = -(w2e23);
HXLINE( 306)		Float n123 = ::box2D::common::math::B2Math_obj::crossVV(e12,e13);
HXLINE( 308)		Float d123_1 = (n123 * ::box2D::common::math::B2Math_obj::crossVV(w2,w3));
HXLINE( 309)		Float d123_2 = (n123 * ::box2D::common::math::B2Math_obj::crossVV(w3,w1));
HXLINE( 310)		Float d123_3 = (n123 * ::box2D::common::math::B2Math_obj::crossVV(w1,w2));
HXLINE( 313)		bool _hx_tmp;
HXDLIN( 313)		if ((d12_2 <= ((Float)0.0))) {
HXLINE( 313)			_hx_tmp = (d13_2 <= ((Float)0.0));
            		}
            		else {
HXLINE( 313)			_hx_tmp = false;
            		}
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 315)			this->m_v1->a = ((Float)1.0);
HXLINE( 316)			this->m_count = (int)1;
HXLINE( 317)			return;
            		}
HXLINE( 321)		bool _hx_tmp1;
HXDLIN( 321)		bool _hx_tmp2;
HXDLIN( 321)		if ((d12_1 > ((Float)0.0))) {
HXLINE( 321)			_hx_tmp2 = (d12_2 > ((Float)0.0));
            		}
            		else {
HXLINE( 321)			_hx_tmp2 = false;
            		}
HXDLIN( 321)		if (_hx_tmp2) {
HXLINE( 321)			_hx_tmp1 = (d123_3 <= ((Float)0.0));
            		}
            		else {
HXLINE( 321)			_hx_tmp1 = false;
            		}
HXDLIN( 321)		if (_hx_tmp1) {
HXLINE( 323)			Float inv_d12 = ((Float)((Float)1.0) / (Float)(d12_1 + d12_2));
HXLINE( 324)			this->m_v1->a = (d12_1 * inv_d12);
HXLINE( 325)			this->m_v2->a = (d12_2 * inv_d12);
HXLINE( 326)			this->m_count = (int)2;
HXLINE( 327)			return;
            		}
HXLINE( 331)		bool _hx_tmp3;
HXDLIN( 331)		bool _hx_tmp4;
HXDLIN( 331)		if ((d13_1 > ((Float)0.0))) {
HXLINE( 331)			_hx_tmp4 = (d13_2 > ((Float)0.0));
            		}
            		else {
HXLINE( 331)			_hx_tmp4 = false;
            		}
HXDLIN( 331)		if (_hx_tmp4) {
HXLINE( 331)			_hx_tmp3 = (d123_2 <= ((Float)0.0));
            		}
            		else {
HXLINE( 331)			_hx_tmp3 = false;
            		}
HXDLIN( 331)		if (_hx_tmp3) {
HXLINE( 333)			Float inv_d13 = ((Float)((Float)1.0) / (Float)(d13_1 + d13_2));
HXLINE( 334)			this->m_v1->a = (d13_1 * inv_d13);
HXLINE( 335)			this->m_v3->a = (d13_2 * inv_d13);
HXLINE( 336)			this->m_count = (int)2;
HXLINE( 337)			this->m_v2->set(this->m_v3);
HXLINE( 338)			return;
            		}
HXLINE( 342)		bool _hx_tmp5;
HXDLIN( 342)		if ((d12_1 <= ((Float)0.0))) {
HXLINE( 342)			_hx_tmp5 = (d23_2 <= ((Float)0.0));
            		}
            		else {
HXLINE( 342)			_hx_tmp5 = false;
            		}
HXDLIN( 342)		if (_hx_tmp5) {
HXLINE( 344)			this->m_v2->a = ((Float)1.0);
HXLINE( 345)			this->m_count = (int)1;
HXLINE( 346)			this->m_v1->set(this->m_v2);
HXLINE( 347)			return;
            		}
HXLINE( 351)		bool _hx_tmp6;
HXDLIN( 351)		if ((d13_1 <= ((Float)0.0))) {
HXLINE( 351)			_hx_tmp6 = (d23_1 <= ((Float)0.0));
            		}
            		else {
HXLINE( 351)			_hx_tmp6 = false;
            		}
HXDLIN( 351)		if (_hx_tmp6) {
HXLINE( 353)			this->m_v3->a = ((Float)1.0);
HXLINE( 354)			this->m_count = (int)1;
HXLINE( 355)			this->m_v1->set(this->m_v3);
HXLINE( 356)			return;
            		}
HXLINE( 360)		bool _hx_tmp7;
HXDLIN( 360)		bool _hx_tmp8;
HXDLIN( 360)		if ((d23_1 > ((Float)0.0))) {
HXLINE( 360)			_hx_tmp8 = (d23_2 > ((Float)0.0));
            		}
            		else {
HXLINE( 360)			_hx_tmp8 = false;
            		}
HXDLIN( 360)		if (_hx_tmp8) {
HXLINE( 360)			_hx_tmp7 = (d123_1 <= ((Float)0.0));
            		}
            		else {
HXLINE( 360)			_hx_tmp7 = false;
            		}
HXDLIN( 360)		if (_hx_tmp7) {
HXLINE( 362)			Float inv_d23 = ((Float)((Float)1.0) / (Float)(d23_1 + d23_2));
HXLINE( 363)			this->m_v2->a = (d23_1 * inv_d23);
HXLINE( 364)			this->m_v3->a = (d23_2 * inv_d23);
HXLINE( 365)			this->m_count = (int)2;
HXLINE( 366)			this->m_v1->set(this->m_v3);
HXLINE( 367)			return;
            		}
HXLINE( 371)		Float inv_d123 = ((Float)((Float)1.0) / (Float)((d123_1 + d123_2) + d123_3));
HXLINE( 372)		this->m_v1->a = (d123_1 * inv_d123);
HXLINE( 373)		this->m_v2->a = (d123_2 * inv_d123);
HXLINE( 374)		this->m_v3->a = (d123_3 * inv_d123);
HXLINE( 375)		this->m_count = (int)3;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Simplex_obj,solve3,(void))


hx::ObjectPtr< B2Simplex_obj > B2Simplex_obj::__new() {
	hx::ObjectPtr< B2Simplex_obj > __this = new B2Simplex_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2Simplex_obj > B2Simplex_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2Simplex_obj *__this = (B2Simplex_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Simplex_obj), true, "box2D.collision.B2Simplex"));
	*(void **)__this = B2Simplex_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2Simplex_obj::B2Simplex_obj()
{
}

void B2Simplex_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Simplex);
	HX_MARK_MEMBER_NAME(m_v1,"m_v1");
	HX_MARK_MEMBER_NAME(m_v2,"m_v2");
	HX_MARK_MEMBER_NAME(m_v3,"m_v3");
	HX_MARK_MEMBER_NAME(m_vertices,"m_vertices");
	HX_MARK_MEMBER_NAME(m_count,"m_count");
	HX_MARK_END_CLASS();
}

void B2Simplex_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_v1,"m_v1");
	HX_VISIT_MEMBER_NAME(m_v2,"m_v2");
	HX_VISIT_MEMBER_NAME(m_v3,"m_v3");
	HX_VISIT_MEMBER_NAME(m_vertices,"m_vertices");
	HX_VISIT_MEMBER_NAME(m_count,"m_count");
}

hx::Val B2Simplex_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"m_v1") ) { return hx::Val( m_v1 ); }
		if (HX_FIELD_EQ(inName,"m_v2") ) { return hx::Val( m_v2 ); }
		if (HX_FIELD_EQ(inName,"m_v3") ) { return hx::Val( m_v3 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"solve2") ) { return hx::Val( solve2_dyn() ); }
		if (HX_FIELD_EQ(inName,"solve3") ) { return hx::Val( solve3_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_count") ) { return hx::Val( m_count ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readCache") ) { return hx::Val( readCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMetric") ) { return hx::Val( getMetric_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeCache") ) { return hx::Val( writeCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_vertices") ) { return hx::Val( m_vertices ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getClosestPoint") ) { return hx::Val( getClosestPoint_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getWitnessPoints") ) { return hx::Val( getWitnessPoints_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getSearchDirection") ) { return hx::Val( getSearchDirection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2Simplex_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"m_v1") ) { m_v1=inValue.Cast<  ::box2D::collision::B2SimplexVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v2") ) { m_v2=inValue.Cast<  ::box2D::collision::B2SimplexVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v3") ) { m_v3=inValue.Cast<  ::box2D::collision::B2SimplexVertex >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_count") ) { m_count=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_vertices") ) { m_vertices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2Simplex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_vertices","\x4b","\xc1","\x60","\x91"));
	outFields->push(HX_HCSTRING("m_count","\x3d","\x1c","\xee","\xfa"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Simplex_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::collision::B2SimplexVertex*/ ,(int)offsetof(B2Simplex_obj,m_v1),HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::collision::B2SimplexVertex*/ ,(int)offsetof(B2Simplex_obj,m_v2),HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::collision::B2SimplexVertex*/ ,(int)offsetof(B2Simplex_obj,m_v3),HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2Simplex_obj,m_vertices),HX_HCSTRING("m_vertices","\x4b","\xc1","\x60","\x91")},
	{hx::fsInt,(int)offsetof(B2Simplex_obj,m_count),HX_HCSTRING("m_count","\x3d","\x1c","\xee","\xfa")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2Simplex_obj_sStaticStorageInfo = 0;
#endif

static ::String B2Simplex_obj_sMemberFields[] = {
	HX_HCSTRING("readCache","\x0c","\xe7","\xfb","\x11"),
	HX_HCSTRING("writeCache","\xe3","\x94","\xd6","\xd5"),
	HX_HCSTRING("getSearchDirection","\xc1","\x15","\xb6","\xc9"),
	HX_HCSTRING("getClosestPoint","\xed","\x7c","\xb1","\x0a"),
	HX_HCSTRING("getWitnessPoints","\x46","\xa2","\xb5","\x97"),
	HX_HCSTRING("getMetric","\x66","\x11","\xb9","\x85"),
	HX_HCSTRING("solve2","\xd3","\xcf","\x41","\x2c"),
	HX_HCSTRING("solve3","\xd4","\xcf","\x41","\x2c"),
	HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48"),
	HX_HCSTRING("m_vertices","\x4b","\xc1","\x60","\x91"),
	HX_HCSTRING("m_count","\x3d","\x1c","\xee","\xfa"),
	::String(null()) };

static void B2Simplex_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Simplex_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Simplex_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Simplex_obj::__mClass,"__mClass");
};

#endif

hx::Class B2Simplex_obj::__mClass;

void B2Simplex_obj::__register()
{
	hx::Object *dummy = new B2Simplex_obj;
	B2Simplex_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2Simplex","\xe9","\x54","\x76","\x0a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2Simplex_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Simplex_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Simplex_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Simplex_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Simplex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Simplex_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
