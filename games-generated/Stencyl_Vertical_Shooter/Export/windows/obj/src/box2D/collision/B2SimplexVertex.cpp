// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2SimplexVertex
#include <box2D/collision/B2SimplexVertex.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a176a27f2bb02aa9_27_new,"box2D.collision.B2SimplexVertex","new",0xfae6f49f,"box2D.collision.B2SimplexVertex.new","box2D/collision/B2SimplexVertex.hx",27,0x09fd2773)
HX_LOCAL_STACK_FRAME(_hx_pos_a176a27f2bb02aa9_29_set,"box2D.collision.B2SimplexVertex","set",0xfaeabfe1,"box2D.collision.B2SimplexVertex.set","box2D/collision/B2SimplexVertex.hx",29,0x09fd2773)
namespace box2D{
namespace collision{

void B2SimplexVertex_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a176a27f2bb02aa9_27_new)
            	}

Dynamic B2SimplexVertex_obj::__CreateEmpty() { return new B2SimplexVertex_obj; }

void *B2SimplexVertex_obj::_hx_vtable = 0;

Dynamic B2SimplexVertex_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2SimplexVertex_obj > _hx_result = new B2SimplexVertex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2SimplexVertex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b674ba5;
}

void B2SimplexVertex_obj::set( ::box2D::collision::B2SimplexVertex other){
            	HX_STACKFRAME(&_hx_pos_a176a27f2bb02aa9_29_set)
HXLINE(  30)		{
HXLINE(  30)			 ::box2D::common::math::B2Vec2 _this = this->wA;
HXDLIN(  30)			 ::box2D::common::math::B2Vec2 v = other->wA;
HXDLIN(  30)			_this->x = v->x;
HXDLIN(  30)			_this->y = v->y;
            		}
HXLINE(  31)		{
HXLINE(  31)			 ::box2D::common::math::B2Vec2 _this1 = this->wB;
HXDLIN(  31)			 ::box2D::common::math::B2Vec2 v1 = other->wB;
HXDLIN(  31)			_this1->x = v1->x;
HXDLIN(  31)			_this1->y = v1->y;
            		}
HXLINE(  32)		{
HXLINE(  32)			 ::box2D::common::math::B2Vec2 _this2 = this->w;
HXDLIN(  32)			 ::box2D::common::math::B2Vec2 v2 = other->w;
HXDLIN(  32)			_this2->x = v2->x;
HXDLIN(  32)			_this2->y = v2->y;
            		}
HXLINE(  33)		this->a = other->a;
HXLINE(  34)		this->indexA = other->indexA;
HXLINE(  35)		this->indexB = other->indexB;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2SimplexVertex_obj,set,(void))


hx::ObjectPtr< B2SimplexVertex_obj > B2SimplexVertex_obj::__new() {
	hx::ObjectPtr< B2SimplexVertex_obj > __this = new B2SimplexVertex_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2SimplexVertex_obj > B2SimplexVertex_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2SimplexVertex_obj *__this = (B2SimplexVertex_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2SimplexVertex_obj), true, "box2D.collision.B2SimplexVertex"));
	*(void **)__this = B2SimplexVertex_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2SimplexVertex_obj::B2SimplexVertex_obj()
{
}

void B2SimplexVertex_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2SimplexVertex);
	HX_MARK_MEMBER_NAME(wA,"wA");
	HX_MARK_MEMBER_NAME(wB,"wB");
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(indexA,"indexA");
	HX_MARK_MEMBER_NAME(indexB,"indexB");
	HX_MARK_END_CLASS();
}

void B2SimplexVertex_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(wA,"wA");
	HX_VISIT_MEMBER_NAME(wB,"wB");
	HX_VISIT_MEMBER_NAME(w,"w");
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(indexA,"indexA");
	HX_VISIT_MEMBER_NAME(indexB,"indexB");
}

hx::Val B2SimplexVertex_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w ); }
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"wA") ) { return hx::Val( wA ); }
		if (HX_FIELD_EQ(inName,"wB") ) { return hx::Val( wB ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indexA") ) { return hx::Val( indexA ); }
		if (HX_FIELD_EQ(inName,"indexB") ) { return hx::Val( indexB ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2SimplexVertex_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"wA") ) { wA=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wB") ) { wB=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indexA") ) { indexA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexB") ) { indexB=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2SimplexVertex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("wA","\xea","\x67","\x00","\x00"));
	outFields->push(HX_HCSTRING("wB","\xeb","\x67","\x00","\x00"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("indexA","\xef","\x14","\xf3","\x93"));
	outFields->push(HX_HCSTRING("indexB","\xf0","\x14","\xf3","\x93"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2SimplexVertex_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2SimplexVertex_obj,wA),HX_HCSTRING("wA","\xea","\x67","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2SimplexVertex_obj,wB),HX_HCSTRING("wB","\xeb","\x67","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2SimplexVertex_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(B2SimplexVertex_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(B2SimplexVertex_obj,indexA),HX_HCSTRING("indexA","\xef","\x14","\xf3","\x93")},
	{hx::fsInt,(int)offsetof(B2SimplexVertex_obj,indexB),HX_HCSTRING("indexB","\xf0","\x14","\xf3","\x93")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2SimplexVertex_obj_sStaticStorageInfo = 0;
#endif

static ::String B2SimplexVertex_obj_sMemberFields[] = {
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("wA","\xea","\x67","\x00","\x00"),
	HX_HCSTRING("wB","\xeb","\x67","\x00","\x00"),
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("indexA","\xef","\x14","\xf3","\x93"),
	HX_HCSTRING("indexB","\xf0","\x14","\xf3","\x93"),
	::String(null()) };

static void B2SimplexVertex_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2SimplexVertex_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2SimplexVertex_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2SimplexVertex_obj::__mClass,"__mClass");
};

#endif

hx::Class B2SimplexVertex_obj::__mClass;

void B2SimplexVertex_obj::__register()
{
	hx::Object *dummy = new B2SimplexVertex_obj;
	B2SimplexVertex_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2SimplexVertex","\x2d","\xb9","\xd2","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2SimplexVertex_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2SimplexVertex_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2SimplexVertex_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2SimplexVertex_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2SimplexVertex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2SimplexVertex_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
