// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2DistanceProxy
#include <box2D/collision/B2DistanceProxy.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2CircleShape
#include <box2D/collision/shapes/B2CircleShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2EdgeShape
#include <box2D/collision/shapes/B2EdgeShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2PolygonShape
#include <box2D/collision/shapes/B2PolygonShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cd31fc0b68effdcc_135_new,"box2D.collision.B2DistanceProxy","new",0xe841e30e,"box2D.collision.B2DistanceProxy.new","box2D/collision/B2DistanceProxy.hx",135,0x90381be4)
HX_LOCAL_STACK_FRAME(_hx_pos_cd31fc0b68effdcc_42_set,"box2D.collision.B2DistanceProxy","set",0xe845ae50,"box2D.collision.B2DistanceProxy.set","box2D/collision/B2DistanceProxy.hx",42,0x90381be4)
HX_LOCAL_STACK_FRAME(_hx_pos_cd31fc0b68effdcc_82_getSupport,"box2D.collision.B2DistanceProxy","getSupport",0x0aa6512b,"box2D.collision.B2DistanceProxy.getSupport","box2D/collision/B2DistanceProxy.hx",82,0x90381be4)
HX_LOCAL_STACK_FRAME(_hx_pos_cd31fc0b68effdcc_101_getSupportVertex,"box2D.collision.B2DistanceProxy","getSupportVertex",0xa7b052ef,"box2D.collision.B2DistanceProxy.getSupportVertex","box2D/collision/B2DistanceProxy.hx",101,0x90381be4)
HX_LOCAL_STACK_FRAME(_hx_pos_cd31fc0b68effdcc_120_getVertexCount,"box2D.collision.B2DistanceProxy","getVertexCount",0x6ee111e7,"box2D.collision.B2DistanceProxy.getVertexCount","box2D/collision/B2DistanceProxy.hx",120,0x90381be4)
HX_LOCAL_STACK_FRAME(_hx_pos_cd31fc0b68effdcc_127_getVertex,"box2D.collision.B2DistanceProxy","getVertex",0x71fcadc8,"box2D.collision.B2DistanceProxy.getVertex","box2D/collision/B2DistanceProxy.hx",127,0x90381be4)
namespace box2D{
namespace collision{

void B2DistanceProxy_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_cd31fc0b68effdcc_135_new)
HXDLIN( 135)		this->m_internalVertices = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic B2DistanceProxy_obj::__CreateEmpty() { return new B2DistanceProxy_obj; }

void *B2DistanceProxy_obj::_hx_vtable = 0;

Dynamic B2DistanceProxy_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2DistanceProxy_obj > _hx_result = new B2DistanceProxy_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2DistanceProxy_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6c909694;
}

void B2DistanceProxy_obj::set( ::box2D::collision::shapes::B2Shape shape){
            	HX_STACKFRAME(&_hx_pos_cd31fc0b68effdcc_42_set)
HXDLIN(  42)		int _g = shape->getType();
HXDLIN(  42)		switch((int)(_g)){
            			case (int)0: {
HXLINE(  46)				 ::box2D::collision::shapes::B2CircleShape circle = hx::TCast<  ::box2D::collision::shapes::B2CircleShape >::cast(shape);
HXLINE(  47)				this->m_vertices = this->m_internalVertices;
HXLINE(  48)				while((this->m_vertices->length > (int)1)){
HXLINE(  48)					this->m_vertices->pop().StaticCast<  ::box2D::common::math::B2Vec2 >();
            				}
HXLINE(  49)				this->m_vertices[(int)0] = circle->m_p;
HXLINE(  50)				this->m_count = (int)1;
HXLINE(  51)				this->m_radius = circle->m_radius;
            			}
            			break;
            			case (int)1: {
HXLINE(  56)				 ::box2D::collision::shapes::B2PolygonShape polygon = hx::TCast<  ::box2D::collision::shapes::B2PolygonShape >::cast(shape);
HXLINE(  57)				this->m_vertices = polygon->m_vertices;
HXLINE(  58)				this->m_count = polygon->m_vertexCount;
HXLINE(  59)				this->m_radius = polygon->m_radius;
            			}
            			break;
            			case (int)2: {
HXLINE(  64)				 ::box2D::collision::shapes::B2EdgeShape edge = hx::TCast<  ::box2D::collision::shapes::B2EdgeShape >::cast(shape);
HXLINE(  65)				this->m_vertices = this->m_internalVertices;
HXLINE(  66)				while((this->m_vertices->length > (int)2)){
HXLINE(  66)					this->m_vertices->pop().StaticCast<  ::box2D::common::math::B2Vec2 >();
            				}
HXLINE(  67)				this->m_vertices[(int)0] = edge->m_v1;
HXLINE(  68)				this->m_vertices[(int)1] = edge->m_v2;
HXLINE(  69)				this->m_count = (int)2;
HXLINE(  70)				this->m_radius = edge->m_radius;
            			}
            			break;
            			default:{
HXLINE(  74)				::box2D::common::B2Settings_obj::b2Assert(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DistanceProxy_obj,set,(void))

Float B2DistanceProxy_obj::getSupport( ::box2D::common::math::B2Vec2 d){
            	HX_STACKFRAME(&_hx_pos_cd31fc0b68effdcc_82_getSupport)
HXLINE(  83)		int bestIndex = (int)0;
HXLINE(  84)		Float bestValue = (this->m_vertices->__get((int)0).StaticCast<  ::box2D::common::math::B2Vec2 >()->x * d->x);
HXDLIN(  84)		Float bestValue1 = (bestValue + (this->m_vertices->__get((int)0).StaticCast<  ::box2D::common::math::B2Vec2 >()->y * d->y));
HXLINE(  85)		{
HXLINE(  85)			int _g1 = (int)1;
HXDLIN(  85)			int _g = this->m_count;
HXDLIN(  85)			while((_g1 < _g)){
HXLINE(  85)				_g1 = (_g1 + (int)1);
HXDLIN(  85)				int i = (_g1 - (int)1);
HXLINE(  87)				Float value = (this->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->x * d->x);
HXDLIN(  87)				Float value1 = (value + (this->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->y * d->y));
HXLINE(  88)				if ((value1 > bestValue1)) {
HXLINE(  90)					bestIndex = i;
HXLINE(  91)					bestValue1 = value1;
            				}
            			}
            		}
HXLINE(  94)		return bestIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DistanceProxy_obj,getSupport,return )

 ::box2D::common::math::B2Vec2 B2DistanceProxy_obj::getSupportVertex( ::box2D::common::math::B2Vec2 d){
            	HX_STACKFRAME(&_hx_pos_cd31fc0b68effdcc_101_getSupportVertex)
HXLINE( 102)		int bestIndex = (int)0;
HXLINE( 103)		Float bestValue = (this->m_vertices->__get((int)0).StaticCast<  ::box2D::common::math::B2Vec2 >()->x * d->x);
HXDLIN( 103)		Float bestValue1 = (bestValue + (this->m_vertices->__get((int)0).StaticCast<  ::box2D::common::math::B2Vec2 >()->y * d->y));
HXLINE( 104)		{
HXLINE( 104)			int _g1 = (int)1;
HXDLIN( 104)			int _g = this->m_count;
HXDLIN( 104)			while((_g1 < _g)){
HXLINE( 104)				_g1 = (_g1 + (int)1);
HXDLIN( 104)				int i = (_g1 - (int)1);
HXLINE( 106)				Float value = (this->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->x * d->x);
HXDLIN( 106)				Float value1 = (value + (this->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >()->y * d->y));
HXLINE( 107)				if ((value1 > bestValue1)) {
HXLINE( 109)					bestIndex = i;
HXLINE( 110)					bestValue1 = value1;
            				}
            			}
            		}
HXLINE( 113)		return this->m_vertices->__get(bestIndex).StaticCast<  ::box2D::common::math::B2Vec2 >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DistanceProxy_obj,getSupportVertex,return )

int B2DistanceProxy_obj::getVertexCount(){
            	HX_STACKFRAME(&_hx_pos_cd31fc0b68effdcc_120_getVertexCount)
HXDLIN( 120)		return this->m_count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2DistanceProxy_obj,getVertexCount,return )

 ::box2D::common::math::B2Vec2 B2DistanceProxy_obj::getVertex(int index){
            	HX_STACKFRAME(&_hx_pos_cd31fc0b68effdcc_127_getVertex)
HXLINE( 128)		bool _hx_tmp;
HXDLIN( 128)		if (((int)0 <= index)) {
HXLINE( 128)			_hx_tmp = (index < this->m_count);
            		}
            		else {
HXLINE( 128)			_hx_tmp = false;
            		}
HXDLIN( 128)		::box2D::common::B2Settings_obj::b2Assert(_hx_tmp);
HXLINE( 129)		return this->m_vertices->__get(index).StaticCast<  ::box2D::common::math::B2Vec2 >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DistanceProxy_obj,getVertex,return )


hx::ObjectPtr< B2DistanceProxy_obj > B2DistanceProxy_obj::__new() {
	hx::ObjectPtr< B2DistanceProxy_obj > __this = new B2DistanceProxy_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2DistanceProxy_obj > B2DistanceProxy_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2DistanceProxy_obj *__this = (B2DistanceProxy_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2DistanceProxy_obj), true, "box2D.collision.B2DistanceProxy"));
	*(void **)__this = B2DistanceProxy_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2DistanceProxy_obj::B2DistanceProxy_obj()
{
}

void B2DistanceProxy_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2DistanceProxy);
	HX_MARK_MEMBER_NAME(m_internalVertices,"m_internalVertices");
	HX_MARK_MEMBER_NAME(m_vertices,"m_vertices");
	HX_MARK_MEMBER_NAME(m_count,"m_count");
	HX_MARK_MEMBER_NAME(m_radius,"m_radius");
	HX_MARK_END_CLASS();
}

void B2DistanceProxy_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_internalVertices,"m_internalVertices");
	HX_VISIT_MEMBER_NAME(m_vertices,"m_vertices");
	HX_VISIT_MEMBER_NAME(m_count,"m_count");
	HX_VISIT_MEMBER_NAME(m_radius,"m_radius");
}

hx::Val B2DistanceProxy_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_count") ) { return hx::Val( m_count ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_radius") ) { return hx::Val( m_radius ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getVertex") ) { return hx::Val( getVertex_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getSupport") ) { return hx::Val( getSupport_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_vertices") ) { return hx::Val( m_vertices ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getVertexCount") ) { return hx::Val( getVertexCount_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getSupportVertex") ) { return hx::Val( getSupportVertex_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"m_internalVertices") ) { return hx::Val( m_internalVertices ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2DistanceProxy_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"m_count") ) { m_count=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_radius") ) { m_radius=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_vertices") ) { m_vertices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"m_internalVertices") ) { m_internalVertices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2DistanceProxy_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_internalVertices","\xa8","\x8b","\x0a","\xa4"));
	outFields->push(HX_HCSTRING("m_vertices","\x4b","\xc1","\x60","\x91"));
	outFields->push(HX_HCSTRING("m_count","\x3d","\x1c","\xee","\xfa"));
	outFields->push(HX_HCSTRING("m_radius","\x24","\x79","\xe8","\x79"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2DistanceProxy_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2DistanceProxy_obj,m_internalVertices),HX_HCSTRING("m_internalVertices","\xa8","\x8b","\x0a","\xa4")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2DistanceProxy_obj,m_vertices),HX_HCSTRING("m_vertices","\x4b","\xc1","\x60","\x91")},
	{hx::fsInt,(int)offsetof(B2DistanceProxy_obj,m_count),HX_HCSTRING("m_count","\x3d","\x1c","\xee","\xfa")},
	{hx::fsFloat,(int)offsetof(B2DistanceProxy_obj,m_radius),HX_HCSTRING("m_radius","\x24","\x79","\xe8","\x79")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2DistanceProxy_obj_sStaticStorageInfo = 0;
#endif

static ::String B2DistanceProxy_obj_sMemberFields[] = {
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("getSupport","\x19","\x92","\x84","\x8c"),
	HX_HCSTRING("getSupportVertex","\x5d","\xfa","\xb2","\xea"),
	HX_HCSTRING("getVertexCount","\xd5","\x61","\x3d","\xe6"),
	HX_HCSTRING("getVertex","\x9a","\x64","\x9e","\x1d"),
	HX_HCSTRING("m_internalVertices","\xa8","\x8b","\x0a","\xa4"),
	HX_HCSTRING("m_vertices","\x4b","\xc1","\x60","\x91"),
	HX_HCSTRING("m_count","\x3d","\x1c","\xee","\xfa"),
	HX_HCSTRING("m_radius","\x24","\x79","\xe8","\x79"),
	::String(null()) };

static void B2DistanceProxy_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2DistanceProxy_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2DistanceProxy_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2DistanceProxy_obj::__mClass,"__mClass");
};

#endif

hx::Class B2DistanceProxy_obj::__mClass;

void B2DistanceProxy_obj::__register()
{
	hx::Object *dummy = new B2DistanceProxy_obj;
	B2DistanceProxy_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.collision.B2DistanceProxy","\x1c","\x04","\xfc","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2DistanceProxy_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2DistanceProxy_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2DistanceProxy_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2DistanceProxy_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2DistanceProxy_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2DistanceProxy_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace collision
