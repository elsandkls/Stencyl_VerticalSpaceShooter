// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2TimeStep
#include <box2D/dynamics/B2TimeStep.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2DistanceJoint
#include <box2D/dynamics/joints/B2DistanceJoint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2DistanceJointDef
#include <box2D/dynamics/joints/B2DistanceJointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointDef
#include <box2D/dynamics/joints/B2JointDef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff222eebdc580d70_116_new,"box2D.dynamics.joints.B2DistanceJoint","new",0x5ae8e83b,"box2D.dynamics.joints.B2DistanceJoint.new","box2D/dynamics/joints/B2DistanceJoint.hx",116,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_55_getAnchorA,"box2D.dynamics.joints.B2DistanceJoint","getAnchorA",0x1a76dbbb,"box2D.dynamics.joints.B2DistanceJoint.getAnchorA","box2D/dynamics/joints/B2DistanceJoint.hx",55,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_59_getAnchorB,"box2D.dynamics.joints.B2DistanceJoint","getAnchorB",0x1a76dbbc,"box2D.dynamics.joints.B2DistanceJoint.getAnchorB","box2D/dynamics/joints/B2DistanceJoint.hx",59,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_67_getReactionForce,"box2D.dynamics.joints.B2DistanceJoint","getReactionForce",0x4a675a51,"box2D.dynamics.joints.B2DistanceJoint.getReactionForce","box2D/dynamics/joints/B2DistanceJoint.hx",67,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_74_getReactionTorque,"box2D.dynamics.joints.B2DistanceJoint","getReactionTorque",0x691167a4,"box2D.dynamics.joints.B2DistanceJoint.getReactionTorque","box2D/dynamics/joints/B2DistanceJoint.hx",74,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_80_getLength,"box2D.dynamics.joints.B2DistanceJoint","getLength",0x143b0c37,"box2D.dynamics.joints.B2DistanceJoint.getLength","box2D/dynamics/joints/B2DistanceJoint.hx",80,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_86_setLength,"box2D.dynamics.joints.B2DistanceJoint","setLength",0xf78bf843,"box2D.dynamics.joints.B2DistanceJoint.setLength","box2D/dynamics/joints/B2DistanceJoint.hx",86,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_92_getFrequency,"box2D.dynamics.joints.B2DistanceJoint","getFrequency",0x2685b3eb,"box2D.dynamics.joints.B2DistanceJoint.getFrequency","box2D/dynamics/joints/B2DistanceJoint.hx",92,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_98_setFrequency,"box2D.dynamics.joints.B2DistanceJoint","setFrequency",0x3b7ed75f,"box2D.dynamics.joints.B2DistanceJoint.setFrequency","box2D/dynamics/joints/B2DistanceJoint.hx",98,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_104_getDampingRatio,"box2D.dynamics.joints.B2DistanceJoint","getDampingRatio",0x264f5efa,"box2D.dynamics.joints.B2DistanceJoint.getDampingRatio","box2D/dynamics/joints/B2DistanceJoint.hx",104,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_110_setDampingRatio,"box2D.dynamics.joints.B2DistanceJoint","setDampingRatio",0x221adc06,"box2D.dynamics.joints.B2DistanceJoint.setDampingRatio","box2D/dynamics/joints/B2DistanceJoint.hx",110,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_138_initVelocityConstraints,"box2D.dynamics.joints.B2DistanceJoint","initVelocityConstraints",0x4bdc4084,"box2D.dynamics.joints.B2DistanceJoint.initVelocityConstraints","box2D/dynamics/joints/B2DistanceJoint.hx",138,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_236_solveVelocityConstraints,"box2D.dynamics.joints.B2DistanceJoint","solveVelocityConstraints",0xe99f7e5f,"box2D.dynamics.joints.B2DistanceJoint.solveVelocityConstraints","box2D/dynamics/joints/B2DistanceJoint.hx",236,0x558317f6)
HX_LOCAL_STACK_FRAME(_hx_pos_ff222eebdc580d70_287_solvePositionConstraints,"box2D.dynamics.joints.B2DistanceJoint","solvePositionConstraints",0x217b9353,"box2D.dynamics.joints.B2DistanceJoint.solvePositionConstraints","box2D/dynamics/joints/B2DistanceJoint.hx",287,0x558317f6)
namespace box2D{
namespace dynamics{
namespace joints{

void B2DistanceJoint_obj::__construct( ::box2D::dynamics::joints::B2DistanceJointDef def){
            	HX_GC_STACKFRAME(&_hx_pos_ff222eebdc580d70_116_new)
HXLINE( 117)		super::__construct(def);
HXLINE( 119)		this->m_localAnchor1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 120)		this->m_localAnchor2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 121)		this->m_u =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 124)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 125)		Float tX;
HXLINE( 126)		Float tY;
HXLINE( 127)		{
HXLINE( 127)			 ::box2D::common::math::B2Vec2 _this = this->m_localAnchor1;
HXDLIN( 127)			 ::box2D::common::math::B2Vec2 v = def->localAnchorA;
HXDLIN( 127)			_this->x = v->x;
HXDLIN( 127)			_this->y = v->y;
            		}
HXLINE( 128)		{
HXLINE( 128)			 ::box2D::common::math::B2Vec2 _this1 = this->m_localAnchor2;
HXDLIN( 128)			 ::box2D::common::math::B2Vec2 v1 = def->localAnchorB;
HXDLIN( 128)			_this1->x = v1->x;
HXDLIN( 128)			_this1->y = v1->y;
            		}
HXLINE( 130)		this->m_length = def->length;
HXLINE( 131)		this->m_frequencyHz = def->frequencyHz;
HXLINE( 132)		this->m_dampingRatio = def->dampingRatio;
HXLINE( 133)		this->m_impulse = ((Float)0.0);
HXLINE( 134)		this->m_gamma = ((Float)0.0);
HXLINE( 135)		this->m_bias = ((Float)0.0);
            	}

Dynamic B2DistanceJoint_obj::__CreateEmpty() { return new B2DistanceJoint_obj; }

void *B2DistanceJoint_obj::_hx_vtable = 0;

Dynamic B2DistanceJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2DistanceJoint_obj > _hx_result = new B2DistanceJoint_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool B2DistanceJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x13310c20) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x13310c20;
	} else {
		return inClassId==(int)0x16652bd7;
	}
}

 ::box2D::common::math::B2Vec2 B2DistanceJoint_obj::getAnchorA(){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_55_getAnchorA)
HXDLIN(  55)		return this->m_bodyA->getWorldPoint(this->m_localAnchor1);
            	}


 ::box2D::common::math::B2Vec2 B2DistanceJoint_obj::getAnchorB(){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_59_getAnchorB)
HXDLIN(  59)		return this->m_bodyB->getWorldPoint(this->m_localAnchor2);
            	}


 ::box2D::common::math::B2Vec2 B2DistanceJoint_obj::getReactionForce(Float inv_dt){
            	HX_GC_STACKFRAME(&_hx_pos_ff222eebdc580d70_67_getReactionForce)
HXDLIN(  67)		Float _hx_tmp = ((inv_dt * this->m_impulse) * this->m_u->x);
HXDLIN(  67)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp,((inv_dt * this->m_impulse) * this->m_u->y));
            	}


Float B2DistanceJoint_obj::getReactionTorque(Float inv_dt){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_74_getReactionTorque)
HXDLIN(  74)		return ((Float)0.0);
            	}


Float B2DistanceJoint_obj::getLength(){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_80_getLength)
HXDLIN(  80)		return this->m_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2DistanceJoint_obj,getLength,return )

void B2DistanceJoint_obj::setLength(Float length){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_86_setLength)
HXDLIN(  86)		this->m_length = length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DistanceJoint_obj,setLength,(void))

Float B2DistanceJoint_obj::getFrequency(){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_92_getFrequency)
HXDLIN(  92)		return this->m_frequencyHz;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2DistanceJoint_obj,getFrequency,return )

void B2DistanceJoint_obj::setFrequency(Float hz){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_98_setFrequency)
HXDLIN(  98)		this->m_frequencyHz = hz;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DistanceJoint_obj,setFrequency,(void))

Float B2DistanceJoint_obj::getDampingRatio(){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_104_getDampingRatio)
HXDLIN( 104)		return this->m_dampingRatio;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2DistanceJoint_obj,getDampingRatio,return )

void B2DistanceJoint_obj::setDampingRatio(Float ratio){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_110_setDampingRatio)
HXDLIN( 110)		this->m_dampingRatio = ratio;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2DistanceJoint_obj,setDampingRatio,(void))

void B2DistanceJoint_obj::initVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_138_initVelocityConstraints)
HXLINE( 140)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 141)		Float tX;
HXLINE( 143)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 144)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 148)		tMat = bA->m_xf->R;
HXLINE( 149)		Float r1X = (this->m_localAnchor1->x - bA->m_sweep->localCenter->x);
HXLINE( 150)		Float r1Y = (this->m_localAnchor1->y - bA->m_sweep->localCenter->y);
HXLINE( 151)		Float tX1 = (tMat->col1->x * r1X);
HXDLIN( 151)		tX = (tX1 + (tMat->col2->x * r1Y));
HXLINE( 152)		Float r1Y1 = (tMat->col1->y * r1X);
HXDLIN( 152)		r1Y = (r1Y1 + (tMat->col2->y * r1Y));
HXLINE( 153)		r1X = tX;
HXLINE( 155)		tMat = bB->m_xf->R;
HXLINE( 156)		Float r2X = (this->m_localAnchor2->x - bB->m_sweep->localCenter->x);
HXLINE( 157)		Float r2Y = (this->m_localAnchor2->y - bB->m_sweep->localCenter->y);
HXLINE( 158)		Float tX2 = (tMat->col1->x * r2X);
HXDLIN( 158)		tX = (tX2 + (tMat->col2->x * r2Y));
HXLINE( 159)		Float r2Y1 = (tMat->col1->y * r2X);
HXDLIN( 159)		r2Y = (r2Y1 + (tMat->col2->y * r2Y));
HXLINE( 160)		r2X = tX;
HXLINE( 163)		this->m_u->x = (((bB->m_sweep->c->x + r2X) - bA->m_sweep->c->x) - r1X);
HXLINE( 164)		this->m_u->y = (((bB->m_sweep->c->y + r2Y) - bA->m_sweep->c->y) - r1Y);
HXLINE( 168)		Float length = (this->m_u->x * this->m_u->x);
HXDLIN( 168)		Float length1 = ::Math_obj::sqrt((length + (this->m_u->y * this->m_u->y)));
HXLINE( 169)		if ((length1 > ::box2D::common::B2Settings_obj::b2_linearSlop)) {
HXLINE( 172)			 ::box2D::common::math::B2Vec2 _hx_tmp = this->m_u;
HXDLIN( 172)			_hx_tmp->multiply(((Float)((Float)1.0) / (Float)length1));
            		}
            		else {
HXLINE( 176)			 ::box2D::common::math::B2Vec2 _this = this->m_u;
HXDLIN( 176)			_this->x = ((Float)0.0);
HXDLIN( 176)			_this->y = ((Float)0.0);
            		}
HXLINE( 180)		Float cr1u = (r1X * this->m_u->y);
HXDLIN( 180)		Float cr1u1 = (cr1u - (r1Y * this->m_u->x));
HXLINE( 182)		Float cr2u = (r2X * this->m_u->y);
HXDLIN( 182)		Float cr2u1 = (cr2u - (r2Y * this->m_u->x));
HXLINE( 184)		Float bA1 = bA->m_invMass;
HXDLIN( 184)		Float invMass = ((bA1 + ((bA->m_invI * cr1u1) * cr1u1)) + bB->m_invMass);
HXDLIN( 184)		Float invMass1 = (invMass + ((bB->m_invI * cr2u1) * cr2u1));
HXLINE( 185)		Float _hx_tmp1;
HXDLIN( 185)		if ((invMass1 != ((Float)0.0))) {
HXLINE( 185)			_hx_tmp1 = ((Float)((Float)1.0) / (Float)invMass1);
            		}
            		else {
HXLINE( 185)			_hx_tmp1 = ((Float)0.0);
            		}
HXDLIN( 185)		this->m_mass = _hx_tmp1;
HXLINE( 187)		if ((this->m_frequencyHz > ((Float)0.0))) {
HXLINE( 189)			Float C = (length1 - this->m_length);
HXLINE( 192)			Float omega = ((((Float)2.0) * ::Math_obj::PI) * this->m_frequencyHz);
HXLINE( 195)			Float d = (((((Float)2.0) * this->m_mass) * this->m_dampingRatio) * omega);
HXLINE( 198)			Float k = ((this->m_mass * omega) * omega);
HXLINE( 201)			Float step1 = step->dt;
HXDLIN( 201)			this->m_gamma = (step1 * (d + (step->dt * k)));
HXLINE( 202)			Float _hx_tmp2;
HXDLIN( 202)			if ((this->m_gamma != ((Float)0.0))) {
HXLINE( 202)				_hx_tmp2 = ((Float)(int)1 / (Float)this->m_gamma);
            			}
            			else {
HXLINE( 202)				_hx_tmp2 = ((Float)0.0);
            			}
HXDLIN( 202)			this->m_gamma = _hx_tmp2;
HXLINE( 203)			this->m_bias = (((C * step->dt) * k) * this->m_gamma);
HXLINE( 205)			this->m_mass = (invMass1 + this->m_gamma);
HXLINE( 206)			Float _hx_tmp3;
HXDLIN( 206)			if ((this->m_mass != ((Float)0.0))) {
HXLINE( 206)				_hx_tmp3 = ((Float)((Float)1.0) / (Float)this->m_mass);
            			}
            			else {
HXLINE( 206)				_hx_tmp3 = ((Float)0.0);
            			}
HXDLIN( 206)			this->m_mass = _hx_tmp3;
            		}
HXLINE( 209)		if (step->warmStarting) {
HXLINE( 212)			 ::box2D::dynamics::joints::B2DistanceJoint _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 212)			_hx_tmp4->m_impulse = (_hx_tmp4->m_impulse * step->dtRatio);
HXLINE( 215)			Float PX = (this->m_impulse * this->m_u->x);
HXLINE( 216)			Float PY = (this->m_impulse * this->m_u->y);
HXLINE( 218)			 ::box2D::common::math::B2Vec2 bA2 = bA->m_linearVelocity;
HXDLIN( 218)			bA2->x = (bA2->x - (bA->m_invMass * PX));
HXLINE( 219)			 ::box2D::common::math::B2Vec2 bA3 = bA->m_linearVelocity;
HXDLIN( 219)			bA3->y = (bA3->y - (bA->m_invMass * PY));
HXLINE( 221)			 ::box2D::dynamics::B2Body bA4 = bA;
HXDLIN( 221)			Float bA5 = bA->m_invI;
HXDLIN( 221)			bA4->m_angularVelocity = (bA4->m_angularVelocity - (bA5 * ((r1X * PY) - (r1Y * PX))));
HXLINE( 223)			 ::box2D::common::math::B2Vec2 bB1 = bB->m_linearVelocity;
HXDLIN( 223)			bB1->x = (bB1->x + (bB->m_invMass * PX));
HXLINE( 224)			 ::box2D::common::math::B2Vec2 bB2 = bB->m_linearVelocity;
HXDLIN( 224)			bB2->y = (bB2->y + (bB->m_invMass * PY));
HXLINE( 226)			 ::box2D::dynamics::B2Body bB3 = bB;
HXDLIN( 226)			Float bB4 = bB->m_invI;
HXDLIN( 226)			bB3->m_angularVelocity = (bB3->m_angularVelocity + (bB4 * ((r2X * PY) - (r2Y * PX))));
            		}
            		else {
HXLINE( 230)			this->m_impulse = ((Float)0.0);
            		}
            	}


void B2DistanceJoint_obj::solveVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_236_solveVelocityConstraints)
HXLINE( 238)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 240)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 241)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 244)		tMat = bA->m_xf->R;
HXLINE( 245)		Float r1X = (this->m_localAnchor1->x - bA->m_sweep->localCenter->x);
HXLINE( 246)		Float r1Y = (this->m_localAnchor1->y - bA->m_sweep->localCenter->y);
HXLINE( 247)		Float tX = (tMat->col1->x * r1X);
HXDLIN( 247)		Float tX1 = (tX + (tMat->col2->x * r1Y));
HXLINE( 248)		Float r1Y1 = (tMat->col1->y * r1X);
HXDLIN( 248)		r1Y = (r1Y1 + (tMat->col2->y * r1Y));
HXLINE( 249)		r1X = tX1;
HXLINE( 251)		tMat = bB->m_xf->R;
HXLINE( 252)		Float r2X = (this->m_localAnchor2->x - bB->m_sweep->localCenter->x);
HXLINE( 253)		Float r2Y = (this->m_localAnchor2->y - bB->m_sweep->localCenter->y);
HXLINE( 254)		Float tX2 = (tMat->col1->x * r2X);
HXDLIN( 254)		tX1 = (tX2 + (tMat->col2->x * r2Y));
HXLINE( 255)		Float r2Y1 = (tMat->col1->y * r2X);
HXDLIN( 255)		r2Y = (r2Y1 + (tMat->col2->y * r2Y));
HXLINE( 256)		r2X = tX1;
HXLINE( 260)		Float bA1 = bA->m_linearVelocity->x;
HXDLIN( 260)		Float v1X = (bA1 + (-(bA->m_angularVelocity) * r1Y));
HXLINE( 261)		Float bA2 = bA->m_linearVelocity->y;
HXDLIN( 261)		Float v1Y = (bA2 + (bA->m_angularVelocity * r1X));
HXLINE( 263)		Float bB1 = bB->m_linearVelocity->x;
HXDLIN( 263)		Float v2X = (bB1 + (-(bB->m_angularVelocity) * r2Y));
HXLINE( 264)		Float bB2 = bB->m_linearVelocity->y;
HXDLIN( 264)		Float v2Y = (bB2 + (bB->m_angularVelocity * r2X));
HXLINE( 266)		Float Cdot = this->m_u->x;
HXDLIN( 266)		Float Cdot1 = (Cdot * (v2X - v1X));
HXDLIN( 266)		Float Cdot2 = this->m_u->y;
HXDLIN( 266)		Float Cdot3 = (Cdot1 + (Cdot2 * (v2Y - v1Y)));
HXLINE( 268)		Float impulse = -(this->m_mass);
HXDLIN( 268)		Float impulse1 = (Cdot3 + this->m_bias);
HXDLIN( 268)		Float impulse2 = (impulse * (impulse1 + (this->m_gamma * this->m_impulse)));
HXLINE( 269)		 ::box2D::dynamics::joints::B2DistanceJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 269)		_hx_tmp->m_impulse = (_hx_tmp->m_impulse + impulse2);
HXLINE( 272)		Float PX = (impulse2 * this->m_u->x);
HXLINE( 273)		Float PY = (impulse2 * this->m_u->y);
HXLINE( 275)		 ::box2D::common::math::B2Vec2 bA3 = bA->m_linearVelocity;
HXDLIN( 275)		bA3->x = (bA3->x - (bA->m_invMass * PX));
HXLINE( 276)		 ::box2D::common::math::B2Vec2 bA4 = bA->m_linearVelocity;
HXDLIN( 276)		bA4->y = (bA4->y - (bA->m_invMass * PY));
HXLINE( 278)		 ::box2D::dynamics::B2Body bA5 = bA;
HXDLIN( 278)		Float bA6 = bA->m_invI;
HXDLIN( 278)		bA5->m_angularVelocity = (bA5->m_angularVelocity - (bA6 * ((r1X * PY) - (r1Y * PX))));
HXLINE( 280)		 ::box2D::common::math::B2Vec2 bB3 = bB->m_linearVelocity;
HXDLIN( 280)		bB3->x = (bB3->x + (bB->m_invMass * PX));
HXLINE( 281)		 ::box2D::common::math::B2Vec2 bB4 = bB->m_linearVelocity;
HXDLIN( 281)		bB4->y = (bB4->y + (bB->m_invMass * PY));
HXLINE( 283)		 ::box2D::dynamics::B2Body bB5 = bB;
HXDLIN( 283)		Float bB6 = bB->m_invI;
HXDLIN( 283)		bB5->m_angularVelocity = (bB5->m_angularVelocity + (bB6 * ((r2X * PY) - (r2Y * PX))));
            	}


bool B2DistanceJoint_obj::solvePositionConstraints(Float baumgarte){
            	HX_STACKFRAME(&_hx_pos_ff222eebdc580d70_287_solvePositionConstraints)
HXLINE( 290)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 292)		if ((this->m_frequencyHz > ((Float)0.0))) {
HXLINE( 295)			return true;
            		}
HXLINE( 298)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 299)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 302)		tMat = bA->m_xf->R;
HXLINE( 303)		Float r1X = (this->m_localAnchor1->x - bA->m_sweep->localCenter->x);
HXLINE( 304)		Float r1Y = (this->m_localAnchor1->y - bA->m_sweep->localCenter->y);
HXLINE( 305)		Float tX = (tMat->col1->x * r1X);
HXDLIN( 305)		Float tX1 = (tX + (tMat->col2->x * r1Y));
HXLINE( 306)		Float r1Y1 = (tMat->col1->y * r1X);
HXDLIN( 306)		r1Y = (r1Y1 + (tMat->col2->y * r1Y));
HXLINE( 307)		r1X = tX1;
HXLINE( 309)		tMat = bB->m_xf->R;
HXLINE( 310)		Float r2X = (this->m_localAnchor2->x - bB->m_sweep->localCenter->x);
HXLINE( 311)		Float r2Y = (this->m_localAnchor2->y - bB->m_sweep->localCenter->y);
HXLINE( 312)		Float tX2 = (tMat->col1->x * r2X);
HXDLIN( 312)		tX1 = (tX2 + (tMat->col2->x * r2Y));
HXLINE( 313)		Float r2Y1 = (tMat->col1->y * r2X);
HXDLIN( 313)		r2Y = (r2Y1 + (tMat->col2->y * r2Y));
HXLINE( 314)		r2X = tX1;
HXLINE( 317)		Float dX = (((bB->m_sweep->c->x + r2X) - bA->m_sweep->c->x) - r1X);
HXLINE( 318)		Float dY = (((bB->m_sweep->c->y + r2Y) - bA->m_sweep->c->y) - r1Y);
HXLINE( 321)		Float length = ::Math_obj::sqrt(((dX * dX) + (dY * dY)));
HXLINE( 322)		dX = ((Float)dX / (Float)length);
HXLINE( 323)		dY = ((Float)dY / (Float)length);
HXLINE( 325)		Float C = (length - this->m_length);
HXLINE( 326)		C = ::box2D::common::math::B2Math_obj::clamp(C,-(::box2D::common::B2Settings_obj::b2_maxLinearCorrection),::box2D::common::B2Settings_obj::b2_maxLinearCorrection);
HXLINE( 328)		Float impulse = (-(this->m_mass) * C);
HXLINE( 330)		{
HXLINE( 330)			 ::box2D::common::math::B2Vec2 _this = this->m_u;
HXDLIN( 330)			_this->x = dX;
HXDLIN( 330)			_this->y = dY;
            		}
HXLINE( 332)		Float PX = (impulse * this->m_u->x);
HXLINE( 333)		Float PY = (impulse * this->m_u->y);
HXLINE( 336)		 ::box2D::common::math::B2Vec2 bA1 = bA->m_sweep->c;
HXDLIN( 336)		bA1->x = (bA1->x - (bA->m_invMass * PX));
HXLINE( 337)		 ::box2D::common::math::B2Vec2 bA2 = bA->m_sweep->c;
HXDLIN( 337)		bA2->y = (bA2->y - (bA->m_invMass * PY));
HXLINE( 339)		 ::box2D::common::math::B2Sweep bA3 = bA->m_sweep;
HXDLIN( 339)		Float bA4 = bA->m_invI;
HXDLIN( 339)		bA3->a = (bA3->a - (bA4 * ((r1X * PY) - (r1Y * PX))));
HXLINE( 341)		 ::box2D::common::math::B2Vec2 bB1 = bB->m_sweep->c;
HXDLIN( 341)		bB1->x = (bB1->x + (bB->m_invMass * PX));
HXLINE( 342)		 ::box2D::common::math::B2Vec2 bB2 = bB->m_sweep->c;
HXDLIN( 342)		bB2->y = (bB2->y + (bB->m_invMass * PY));
HXLINE( 344)		 ::box2D::common::math::B2Sweep bB3 = bB->m_sweep;
HXDLIN( 344)		Float bB4 = bB->m_invI;
HXDLIN( 344)		bB3->a = (bB3->a + (bB4 * ((r2X * PY) - (r2Y * PX))));
HXLINE( 346)		bA->synchronizeTransform();
HXLINE( 347)		bB->synchronizeTransform();
HXLINE( 349)		Float _hx_tmp = ::box2D::common::math::B2Math_obj::abs(C);
HXDLIN( 349)		return (_hx_tmp < ::box2D::common::B2Settings_obj::b2_linearSlop);
            	}



hx::ObjectPtr< B2DistanceJoint_obj > B2DistanceJoint_obj::__new( ::box2D::dynamics::joints::B2DistanceJointDef def) {
	hx::ObjectPtr< B2DistanceJoint_obj > __this = new B2DistanceJoint_obj();
	__this->__construct(def);
	return __this;
}

hx::ObjectPtr< B2DistanceJoint_obj > B2DistanceJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::joints::B2DistanceJointDef def) {
	B2DistanceJoint_obj *__this = (B2DistanceJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2DistanceJoint_obj), true, "box2D.dynamics.joints.B2DistanceJoint"));
	*(void **)__this = B2DistanceJoint_obj::_hx_vtable;
	__this->__construct(def);
	return __this;
}

B2DistanceJoint_obj::B2DistanceJoint_obj()
{
}

void B2DistanceJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2DistanceJoint);
	HX_MARK_MEMBER_NAME(m_localAnchor1,"m_localAnchor1");
	HX_MARK_MEMBER_NAME(m_localAnchor2,"m_localAnchor2");
	HX_MARK_MEMBER_NAME(m_u,"m_u");
	HX_MARK_MEMBER_NAME(m_frequencyHz,"m_frequencyHz");
	HX_MARK_MEMBER_NAME(m_dampingRatio,"m_dampingRatio");
	HX_MARK_MEMBER_NAME(m_gamma,"m_gamma");
	HX_MARK_MEMBER_NAME(m_bias,"m_bias");
	HX_MARK_MEMBER_NAME(m_impulse,"m_impulse");
	HX_MARK_MEMBER_NAME(m_mass,"m_mass");
	HX_MARK_MEMBER_NAME(m_length,"m_length");
	 ::box2D::dynamics::joints::B2Joint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void B2DistanceJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_localAnchor1,"m_localAnchor1");
	HX_VISIT_MEMBER_NAME(m_localAnchor2,"m_localAnchor2");
	HX_VISIT_MEMBER_NAME(m_u,"m_u");
	HX_VISIT_MEMBER_NAME(m_frequencyHz,"m_frequencyHz");
	HX_VISIT_MEMBER_NAME(m_dampingRatio,"m_dampingRatio");
	HX_VISIT_MEMBER_NAME(m_gamma,"m_gamma");
	HX_VISIT_MEMBER_NAME(m_bias,"m_bias");
	HX_VISIT_MEMBER_NAME(m_impulse,"m_impulse");
	HX_VISIT_MEMBER_NAME(m_mass,"m_mass");
	HX_VISIT_MEMBER_NAME(m_length,"m_length");
	 ::box2D::dynamics::joints::B2Joint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val B2DistanceJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m_u") ) { return hx::Val( m_u ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_bias") ) { return hx::Val( m_bias ); }
		if (HX_FIELD_EQ(inName,"m_mass") ) { return hx::Val( m_mass ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_gamma") ) { return hx::Val( m_gamma ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_length") ) { return hx::Val( m_length ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLength") ) { return hx::Val( setLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_impulse") ) { return hx::Val( m_impulse ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getAnchorA") ) { return hx::Val( getAnchorA_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnchorB") ) { return hx::Val( getAnchorB_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getFrequency") ) { return hx::Val( getFrequency_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrequency") ) { return hx::Val( setFrequency_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_frequencyHz") ) { return hx::Val( m_frequencyHz ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_localAnchor1") ) { return hx::Val( m_localAnchor1 ); }
		if (HX_FIELD_EQ(inName,"m_localAnchor2") ) { return hx::Val( m_localAnchor2 ); }
		if (HX_FIELD_EQ(inName,"m_dampingRatio") ) { return hx::Val( m_dampingRatio ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getDampingRatio") ) { return hx::Val( getDampingRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDampingRatio") ) { return hx::Val( setDampingRatio_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getReactionForce") ) { return hx::Val( getReactionForce_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getReactionTorque") ) { return hx::Val( getReactionTorque_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"initVelocityConstraints") ) { return hx::Val( initVelocityConstraints_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"solveVelocityConstraints") ) { return hx::Val( solveVelocityConstraints_dyn() ); }
		if (HX_FIELD_EQ(inName,"solvePositionConstraints") ) { return hx::Val( solvePositionConstraints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2DistanceJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m_u") ) { m_u=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_bias") ) { m_bias=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_mass") ) { m_mass=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_gamma") ) { m_gamma=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_length") ) { m_length=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_impulse") ) { m_impulse=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_frequencyHz") ) { m_frequencyHz=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_localAnchor1") ) { m_localAnchor1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_localAnchor2") ) { m_localAnchor2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_dampingRatio") ) { m_dampingRatio=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2DistanceJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_u","\xe3","\x08","\x53","\x00"));
	outFields->push(HX_HCSTRING("m_frequencyHz","\xbc","\xbe","\x84","\x86"));
	outFields->push(HX_HCSTRING("m_dampingRatio","\x3b","\x27","\x99","\x6c"));
	outFields->push(HX_HCSTRING("m_gamma","\x95","\x5e","\x41","\x3f"));
	outFields->push(HX_HCSTRING("m_bias","\xcb","\x5a","\x0e","\x89"));
	outFields->push(HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78"));
	outFields->push(HX_HCSTRING("m_mass","\x46","\xb1","\x4d","\x90"));
	outFields->push(HX_HCSTRING("m_length","\xb8","\x3d","\xf9","\x67"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2DistanceJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2DistanceJoint_obj,m_localAnchor1),HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2DistanceJoint_obj,m_localAnchor2),HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2DistanceJoint_obj,m_u),HX_HCSTRING("m_u","\xe3","\x08","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(B2DistanceJoint_obj,m_frequencyHz),HX_HCSTRING("m_frequencyHz","\xbc","\xbe","\x84","\x86")},
	{hx::fsFloat,(int)offsetof(B2DistanceJoint_obj,m_dampingRatio),HX_HCSTRING("m_dampingRatio","\x3b","\x27","\x99","\x6c")},
	{hx::fsFloat,(int)offsetof(B2DistanceJoint_obj,m_gamma),HX_HCSTRING("m_gamma","\x95","\x5e","\x41","\x3f")},
	{hx::fsFloat,(int)offsetof(B2DistanceJoint_obj,m_bias),HX_HCSTRING("m_bias","\xcb","\x5a","\x0e","\x89")},
	{hx::fsFloat,(int)offsetof(B2DistanceJoint_obj,m_impulse),HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78")},
	{hx::fsFloat,(int)offsetof(B2DistanceJoint_obj,m_mass),HX_HCSTRING("m_mass","\x46","\xb1","\x4d","\x90")},
	{hx::fsFloat,(int)offsetof(B2DistanceJoint_obj,m_length),HX_HCSTRING("m_length","\xb8","\x3d","\xf9","\x67")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2DistanceJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String B2DistanceJoint_obj_sMemberFields[] = {
	HX_HCSTRING("getAnchorA","\x36","\x72","\x03","\x52"),
	HX_HCSTRING("getAnchorB","\x37","\x72","\x03","\x52"),
	HX_HCSTRING("getReactionForce","\x0c","\x7f","\x58","\x41"),
	HX_HCSTRING("getReactionTorque","\x89","\x66","\x20","\x85"),
	HX_HCSTRING("getLength","\x1c","\x1e","\x5e","\x1b"),
	HX_HCSTRING("setLength","\x28","\x0a","\xaf","\xfe"),
	HX_HCSTRING("getFrequency","\x26","\x1f","\x41","\xcb"),
	HX_HCSTRING("setFrequency","\x9a","\x42","\x3a","\xe0"),
	HX_HCSTRING("getDampingRatio","\x9f","\x6a","\x48","\xc9"),
	HX_HCSTRING("setDampingRatio","\xab","\xe7","\x13","\xc5"),
	HX_HCSTRING("initVelocityConstraints","\x29","\xf9","\xf0","\x64"),
	HX_HCSTRING("solveVelocityConstraints","\x1a","\x56","\xac","\xc2"),
	HX_HCSTRING("solvePositionConstraints","\x0e","\x6b","\x88","\xfa"),
	HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e"),
	HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e"),
	HX_HCSTRING("m_u","\xe3","\x08","\x53","\x00"),
	HX_HCSTRING("m_frequencyHz","\xbc","\xbe","\x84","\x86"),
	HX_HCSTRING("m_dampingRatio","\x3b","\x27","\x99","\x6c"),
	HX_HCSTRING("m_gamma","\x95","\x5e","\x41","\x3f"),
	HX_HCSTRING("m_bias","\xcb","\x5a","\x0e","\x89"),
	HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78"),
	HX_HCSTRING("m_mass","\x46","\xb1","\x4d","\x90"),
	HX_HCSTRING("m_length","\xb8","\x3d","\xf9","\x67"),
	::String(null()) };

static void B2DistanceJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2DistanceJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2DistanceJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2DistanceJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class B2DistanceJoint_obj::__mClass;

void B2DistanceJoint_obj::__register()
{
	hx::Object *dummy = new B2DistanceJoint_obj;
	B2DistanceJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.joints.B2DistanceJoint","\xc9","\xae","\x33","\x32");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2DistanceJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2DistanceJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2DistanceJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2DistanceJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2DistanceJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2DistanceJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints
