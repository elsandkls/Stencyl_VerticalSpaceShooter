// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2Manifold
#include <box2D/collision/B2Manifold.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactConstraint
#include <box2D/dynamics/contacts/B2ContactConstraint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactConstraintPoint
#include <box2D/dynamics/contacts/B2ContactConstraintPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0216ba706c727601_34_new,"box2D.dynamics.contacts.B2ContactConstraint","new",0x010da3ad,"box2D.dynamics.contacts.B2ContactConstraint.new","box2D/dynamics/contacts/B2ContactConstraint.hx",34,0x0aed9d44)
namespace box2D{
namespace dynamics{
namespace contacts{

void B2ContactConstraint_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_0216ba706c727601_34_new)
HXLINE(  35)		this->localPlaneNormal =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  36)		this->localPoint =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  37)		this->normal =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  38)		this->normalMass =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
HXLINE(  39)		this->K =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
HXLINE(  40)		this->points = ::Array_obj< ::Dynamic>::__new();
HXLINE(  41)		{
HXLINE(  41)			int _g1 = (int)0;
HXDLIN(  41)			int _g = ::box2D::common::B2Settings_obj::b2_maxManifoldPoints;
HXDLIN(  41)			while((_g1 < _g)){
HXLINE(  41)				_g1 = (_g1 + (int)1);
HXDLIN(  41)				int i = (_g1 - (int)1);
HXLINE(  42)				::Array< ::Dynamic> _hx_tmp = this->points;
HXDLIN(  42)				_hx_tmp[i] =  ::box2D::dynamics::contacts::B2ContactConstraintPoint_obj::__alloc( HX_CTX );
            			}
            		}
            	}

Dynamic B2ContactConstraint_obj::__CreateEmpty() { return new B2ContactConstraint_obj; }

void *B2ContactConstraint_obj::_hx_vtable = 0;

Dynamic B2ContactConstraint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2ContactConstraint_obj > _hx_result = new B2ContactConstraint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2ContactConstraint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3a628e89;
}


hx::ObjectPtr< B2ContactConstraint_obj > B2ContactConstraint_obj::__new() {
	hx::ObjectPtr< B2ContactConstraint_obj > __this = new B2ContactConstraint_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2ContactConstraint_obj > B2ContactConstraint_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2ContactConstraint_obj *__this = (B2ContactConstraint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2ContactConstraint_obj), true, "box2D.dynamics.contacts.B2ContactConstraint"));
	*(void **)__this = B2ContactConstraint_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2ContactConstraint_obj::B2ContactConstraint_obj()
{
}

void B2ContactConstraint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2ContactConstraint);
	HX_MARK_MEMBER_NAME(points,"points");
	HX_MARK_MEMBER_NAME(localPlaneNormal,"localPlaneNormal");
	HX_MARK_MEMBER_NAME(localPoint,"localPoint");
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_MEMBER_NAME(normalMass,"normalMass");
	HX_MARK_MEMBER_NAME(K,"K");
	HX_MARK_MEMBER_NAME(bodyA,"bodyA");
	HX_MARK_MEMBER_NAME(bodyB,"bodyB");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(radius,"radius");
	HX_MARK_MEMBER_NAME(friction,"friction");
	HX_MARK_MEMBER_NAME(restitution,"restitution");
	HX_MARK_MEMBER_NAME(pointCount,"pointCount");
	HX_MARK_MEMBER_NAME(manifold,"manifold");
	HX_MARK_END_CLASS();
}

void B2ContactConstraint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(points,"points");
	HX_VISIT_MEMBER_NAME(localPlaneNormal,"localPlaneNormal");
	HX_VISIT_MEMBER_NAME(localPoint,"localPoint");
	HX_VISIT_MEMBER_NAME(normal,"normal");
	HX_VISIT_MEMBER_NAME(normalMass,"normalMass");
	HX_VISIT_MEMBER_NAME(K,"K");
	HX_VISIT_MEMBER_NAME(bodyA,"bodyA");
	HX_VISIT_MEMBER_NAME(bodyB,"bodyB");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(radius,"radius");
	HX_VISIT_MEMBER_NAME(friction,"friction");
	HX_VISIT_MEMBER_NAME(restitution,"restitution");
	HX_VISIT_MEMBER_NAME(pointCount,"pointCount");
	HX_VISIT_MEMBER_NAME(manifold,"manifold");
}

hx::Val B2ContactConstraint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"K") ) { return hx::Val( K ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bodyA") ) { return hx::Val( bodyA ); }
		if (HX_FIELD_EQ(inName,"bodyB") ) { return hx::Val( bodyB ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { return hx::Val( points ); }
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal ); }
		if (HX_FIELD_EQ(inName,"radius") ) { return hx::Val( radius ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"friction") ) { return hx::Val( friction ); }
		if (HX_FIELD_EQ(inName,"manifold") ) { return hx::Val( manifold ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"localPoint") ) { return hx::Val( localPoint ); }
		if (HX_FIELD_EQ(inName,"normalMass") ) { return hx::Val( normalMass ); }
		if (HX_FIELD_EQ(inName,"pointCount") ) { return hx::Val( pointCount ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restitution") ) { return hx::Val( restitution ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"localPlaneNormal") ) { return hx::Val( localPlaneNormal ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2ContactConstraint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"K") ) { K=inValue.Cast<  ::box2D::common::math::B2Mat22 >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bodyA") ) { bodyA=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bodyB") ) { bodyB=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { points=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"friction") ) { friction=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"manifold") ) { manifold=inValue.Cast<  ::box2D::collision::B2Manifold >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"localPoint") ) { localPoint=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"normalMass") ) { normalMass=inValue.Cast<  ::box2D::common::math::B2Mat22 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointCount") ) { pointCount=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restitution") ) { restitution=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"localPlaneNormal") ) { localPlaneNormal=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2ContactConstraint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("localPlaneNormal","\xf8","\x51","\x2c","\xc8"));
	outFields->push(HX_HCSTRING("localPoint","\xe5","\x56","\x83","\xfe"));
	outFields->push(HX_HCSTRING("normal","\x27","\x72","\x69","\x30"));
	outFields->push(HX_HCSTRING("normalMass","\xbb","\x7e","\xda","\x6e"));
	outFields->push(HX_HCSTRING("K","\x4b","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("bodyA","\x5f","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("bodyB","\x60","\xd3","\xef","\xb6"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"));
	outFields->push(HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"));
	outFields->push(HX_HCSTRING("restitution","\x6a","\x2c","\x4d","\x08"));
	outFields->push(HX_HCSTRING("pointCount","\x5f","\x5e","\x21","\x2a"));
	outFields->push(HX_HCSTRING("manifold","\x10","\x8c","\x31","\xd0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2ContactConstraint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2ContactConstraint_obj,points),HX_HCSTRING("points","\x23","\x12","\x2e","\xf7")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2ContactConstraint_obj,localPlaneNormal),HX_HCSTRING("localPlaneNormal","\xf8","\x51","\x2c","\xc8")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2ContactConstraint_obj,localPoint),HX_HCSTRING("localPoint","\xe5","\x56","\x83","\xfe")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2ContactConstraint_obj,normal),HX_HCSTRING("normal","\x27","\x72","\x69","\x30")},
	{hx::fsObject /*::box2D::common::math::B2Mat22*/ ,(int)offsetof(B2ContactConstraint_obj,normalMass),HX_HCSTRING("normalMass","\xbb","\x7e","\xda","\x6e")},
	{hx::fsObject /*::box2D::common::math::B2Mat22*/ ,(int)offsetof(B2ContactConstraint_obj,K),HX_HCSTRING("K","\x4b","\x00","\x00","\x00")},
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2ContactConstraint_obj,bodyA),HX_HCSTRING("bodyA","\x5f","\xd3","\xef","\xb6")},
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2ContactConstraint_obj,bodyB),HX_HCSTRING("bodyB","\x60","\xd3","\xef","\xb6")},
	{hx::fsInt,(int)offsetof(B2ContactConstraint_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(B2ContactConstraint_obj,radius),HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0")},
	{hx::fsFloat,(int)offsetof(B2ContactConstraint_obj,friction),HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97")},
	{hx::fsFloat,(int)offsetof(B2ContactConstraint_obj,restitution),HX_HCSTRING("restitution","\x6a","\x2c","\x4d","\x08")},
	{hx::fsInt,(int)offsetof(B2ContactConstraint_obj,pointCount),HX_HCSTRING("pointCount","\x5f","\x5e","\x21","\x2a")},
	{hx::fsObject /*::box2D::collision::B2Manifold*/ ,(int)offsetof(B2ContactConstraint_obj,manifold),HX_HCSTRING("manifold","\x10","\x8c","\x31","\xd0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2ContactConstraint_obj_sStaticStorageInfo = 0;
#endif

static ::String B2ContactConstraint_obj_sMemberFields[] = {
	HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"),
	HX_HCSTRING("localPlaneNormal","\xf8","\x51","\x2c","\xc8"),
	HX_HCSTRING("localPoint","\xe5","\x56","\x83","\xfe"),
	HX_HCSTRING("normal","\x27","\x72","\x69","\x30"),
	HX_HCSTRING("normalMass","\xbb","\x7e","\xda","\x6e"),
	HX_HCSTRING("K","\x4b","\x00","\x00","\x00"),
	HX_HCSTRING("bodyA","\x5f","\xd3","\xef","\xb6"),
	HX_HCSTRING("bodyB","\x60","\xd3","\xef","\xb6"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("radius","\x52","\xd0","\xf6","\xb0"),
	HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"),
	HX_HCSTRING("restitution","\x6a","\x2c","\x4d","\x08"),
	HX_HCSTRING("pointCount","\x5f","\x5e","\x21","\x2a"),
	HX_HCSTRING("manifold","\x10","\x8c","\x31","\xd0"),
	::String(null()) };

static void B2ContactConstraint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2ContactConstraint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2ContactConstraint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2ContactConstraint_obj::__mClass,"__mClass");
};

#endif

hx::Class B2ContactConstraint_obj::__mClass;

void B2ContactConstraint_obj::__register()
{
	hx::Object *dummy = new B2ContactConstraint_obj;
	B2ContactConstraint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.contacts.B2ContactConstraint","\x3b","\x49","\xd5","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2ContactConstraint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2ContactConstraint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2ContactConstraint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2ContactConstraint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2ContactConstraint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2ContactConstraint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts
