// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2TimeStep
#include <box2D/dynamics/B2TimeStep.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2GearJoint
#include <box2D/dynamics/joints/B2GearJoint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2GearJointDef
#include <box2D/dynamics/joints/B2GearJointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2Jacobian
#include <box2D/dynamics/joints/B2Jacobian.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointDef
#include <box2D/dynamics/joints/B2JointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2PrismaticJoint
#include <box2D/dynamics/joints/B2PrismaticJoint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2RevoluteJoint
#include <box2D/dynamics/joints/B2RevoluteJoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_97_new,"box2D.dynamics.joints.B2GearJoint","new",0x485943a1,"box2D.dynamics.joints.B2GearJoint.new","box2D/dynamics/joints/B2GearJoint.hx",97,0xf661a6d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_47_getAnchorA,"box2D.dynamics.joints.B2GearJoint","getAnchorA",0x73b15915,"box2D.dynamics.joints.B2GearJoint.getAnchorA","box2D/dynamics/joints/B2GearJoint.hx",47,0xf661a6d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_52_getAnchorB,"box2D.dynamics.joints.B2GearJoint","getAnchorB",0x73b15916,"box2D.dynamics.joints.B2GearJoint.getAnchorB","box2D/dynamics/joints/B2GearJoint.hx",52,0xf661a6d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_59_getReactionForce,"box2D.dynamics.joints.B2GearJoint","getReactionForce",0xe4a9572b,"box2D.dynamics.joints.B2GearJoint.getReactionForce","box2D/dynamics/joints/B2GearJoint.hx",59,0xf661a6d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_62_getReactionTorque,"box2D.dynamics.joints.B2GearJoint","getReactionTorque",0xc88ca98a,"box2D.dynamics.joints.B2GearJoint.getReactionTorque","box2D/dynamics/joints/B2GearJoint.hx",62,0xf661a6d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_83_getRatio,"box2D.dynamics.joints.B2GearJoint","getRatio",0xd18765b4,"box2D.dynamics.joints.B2GearJoint.getRatio","box2D/dynamics/joints/B2GearJoint.hx",83,0xf661a6d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_91_setRatio,"box2D.dynamics.joints.B2GearJoint","setRatio",0x7fe4bf28,"box2D.dynamics.joints.B2GearJoint.setRatio","box2D/dynamics/joints/B2GearJoint.hx",91,0xf661a6d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_168_initVelocityConstraints,"box2D.dynamics.joints.B2GearJoint","initVelocityConstraints",0x4906f2ea,"box2D.dynamics.joints.B2GearJoint.initVelocityConstraints","box2D/dynamics/joints/B2GearJoint.hx",168,0xf661a6d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_265_solveVelocityConstraints,"box2D.dynamics.joints.B2GearJoint","solveVelocityConstraints",0x71d0e539,"box2D.dynamics.joints.B2GearJoint.solveVelocityConstraints","box2D/dynamics/joints/B2GearJoint.hx",265,0xf661a6d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1c2b9b9921d0e3b6_286_solvePositionConstraints,"box2D.dynamics.joints.B2GearJoint","solvePositionConstraints",0xa9acfa2d,"box2D.dynamics.joints.B2GearJoint.solvePositionConstraints","box2D/dynamics/joints/B2GearJoint.hx",286,0xf661a6d0)
namespace box2D{
namespace dynamics{
namespace joints{

void B2GearJoint_obj::__construct( ::box2D::dynamics::joints::B2GearJointDef def){
            	HX_GC_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_97_new)
HXLINE(  99)		super::__construct(def);
HXLINE( 101)		this->m_groundAnchor1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 102)		this->m_groundAnchor2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 104)		this->m_localAnchor1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 105)		this->m_localAnchor2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 107)		this->m_J =  ::box2D::dynamics::joints::B2Jacobian_obj::__alloc( HX_CTX );
HXLINE( 110)		int type1 = def->joint1->m_type;
HXLINE( 111)		int type2 = def->joint2->m_type;
HXLINE( 118)		this->m_revolute1 = null();
HXLINE( 119)		this->m_prismatic1 = null();
HXLINE( 120)		this->m_revolute2 = null();
HXLINE( 121)		this->m_prismatic2 = null();
HXLINE( 123)		Float coordinate1;
HXLINE( 124)		Float coordinate2;
HXLINE( 126)		this->m_ground1 = def->joint1->getBodyA();
HXLINE( 127)		this->m_bodyA = def->joint1->getBodyB();
HXLINE( 128)		if ((type1 == (int)1)) {
HXLINE( 130)			this->m_revolute1 = hx::TCast<  ::box2D::dynamics::joints::B2RevoluteJoint >::cast(def->joint1);
HXLINE( 131)			{
HXLINE( 131)				 ::box2D::common::math::B2Vec2 _this = this->m_groundAnchor1;
HXDLIN( 131)				 ::box2D::common::math::B2Vec2 v = this->m_revolute1->m_localAnchor1;
HXDLIN( 131)				_this->x = v->x;
HXDLIN( 131)				_this->y = v->y;
            			}
HXLINE( 132)			{
HXLINE( 132)				 ::box2D::common::math::B2Vec2 _this1 = this->m_localAnchor1;
HXDLIN( 132)				 ::box2D::common::math::B2Vec2 v1 = this->m_revolute1->m_localAnchor2;
HXDLIN( 132)				_this1->x = v1->x;
HXDLIN( 132)				_this1->y = v1->y;
            			}
HXLINE( 133)			coordinate1 = this->m_revolute1->getJointAngle();
            		}
            		else {
HXLINE( 137)			this->m_prismatic1 = hx::TCast<  ::box2D::dynamics::joints::B2PrismaticJoint >::cast(def->joint1);
HXLINE( 138)			{
HXLINE( 138)				 ::box2D::common::math::B2Vec2 _this2 = this->m_groundAnchor1;
HXDLIN( 138)				 ::box2D::common::math::B2Vec2 v2 = this->m_prismatic1->m_localAnchor1;
HXDLIN( 138)				_this2->x = v2->x;
HXDLIN( 138)				_this2->y = v2->y;
            			}
HXLINE( 139)			{
HXLINE( 139)				 ::box2D::common::math::B2Vec2 _this3 = this->m_localAnchor1;
HXDLIN( 139)				 ::box2D::common::math::B2Vec2 v3 = this->m_prismatic1->m_localAnchor2;
HXDLIN( 139)				_this3->x = v3->x;
HXDLIN( 139)				_this3->y = v3->y;
            			}
HXLINE( 140)			coordinate1 = this->m_prismatic1->getJointTranslation();
            		}
HXLINE( 143)		this->m_ground2 = def->joint2->getBodyA();
HXLINE( 144)		this->m_bodyB = def->joint2->getBodyB();
HXLINE( 145)		if ((type2 == (int)1)) {
HXLINE( 147)			this->m_revolute2 = hx::TCast<  ::box2D::dynamics::joints::B2RevoluteJoint >::cast(def->joint2);
HXLINE( 148)			{
HXLINE( 148)				 ::box2D::common::math::B2Vec2 _this4 = this->m_groundAnchor2;
HXDLIN( 148)				 ::box2D::common::math::B2Vec2 v4 = this->m_revolute2->m_localAnchor1;
HXDLIN( 148)				_this4->x = v4->x;
HXDLIN( 148)				_this4->y = v4->y;
            			}
HXLINE( 149)			{
HXLINE( 149)				 ::box2D::common::math::B2Vec2 _this5 = this->m_localAnchor2;
HXDLIN( 149)				 ::box2D::common::math::B2Vec2 v5 = this->m_revolute2->m_localAnchor2;
HXDLIN( 149)				_this5->x = v5->x;
HXDLIN( 149)				_this5->y = v5->y;
            			}
HXLINE( 150)			coordinate2 = this->m_revolute2->getJointAngle();
            		}
            		else {
HXLINE( 154)			this->m_prismatic2 = hx::TCast<  ::box2D::dynamics::joints::B2PrismaticJoint >::cast(def->joint2);
HXLINE( 155)			{
HXLINE( 155)				 ::box2D::common::math::B2Vec2 _this6 = this->m_groundAnchor2;
HXDLIN( 155)				 ::box2D::common::math::B2Vec2 v6 = this->m_prismatic2->m_localAnchor1;
HXDLIN( 155)				_this6->x = v6->x;
HXDLIN( 155)				_this6->y = v6->y;
            			}
HXLINE( 156)			{
HXLINE( 156)				 ::box2D::common::math::B2Vec2 _this7 = this->m_localAnchor2;
HXDLIN( 156)				 ::box2D::common::math::B2Vec2 v7 = this->m_prismatic2->m_localAnchor2;
HXDLIN( 156)				_this7->x = v7->x;
HXDLIN( 156)				_this7->y = v7->y;
            			}
HXLINE( 157)			coordinate2 = this->m_prismatic2->getJointTranslation();
            		}
HXLINE( 160)		this->m_ratio = def->ratio;
HXLINE( 162)		this->m_constant = (coordinate1 + (this->m_ratio * coordinate2));
HXLINE( 164)		this->m_impulse = ((Float)0.0);
            	}

Dynamic B2GearJoint_obj::__CreateEmpty() { return new B2GearJoint_obj; }

void *B2GearJoint_obj::_hx_vtable = 0;

Dynamic B2GearJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2GearJoint_obj > _hx_result = new B2GearJoint_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool B2GearJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x13310c20) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x13310c20;
	} else {
		return inClassId==(int)0x2aaf1875;
	}
}

 ::box2D::common::math::B2Vec2 B2GearJoint_obj::getAnchorA(){
            	HX_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_47_getAnchorA)
HXDLIN(  47)		return this->m_bodyA->getWorldPoint(this->m_localAnchor1);
            	}


 ::box2D::common::math::B2Vec2 B2GearJoint_obj::getAnchorB(){
            	HX_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_52_getAnchorB)
HXDLIN(  52)		return this->m_bodyB->getWorldPoint(this->m_localAnchor2);
            	}


 ::box2D::common::math::B2Vec2 B2GearJoint_obj::getReactionForce(Float inv_dt){
            	HX_GC_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_59_getReactionForce)
HXDLIN(  59)		Float _hx_tmp = ((inv_dt * this->m_impulse) * this->m_J->linearB->x);
HXDLIN(  59)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp,((inv_dt * this->m_impulse) * this->m_J->linearB->y));
            	}


Float B2GearJoint_obj::getReactionTorque(Float inv_dt){
            	HX_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_62_getReactionTorque)
HXLINE(  65)		 ::box2D::common::math::B2Mat22 tMat = this->m_bodyB->m_xf->R;
HXLINE(  66)		Float rX = (this->m_localAnchor1->x - this->m_bodyB->m_sweep->localCenter->x);
HXLINE(  67)		Float rY = (this->m_localAnchor1->y - this->m_bodyB->m_sweep->localCenter->y);
HXLINE(  68)		Float tX = (tMat->col1->x * rX);
HXDLIN(  68)		Float tX1 = (tX + (tMat->col2->x * rY));
HXLINE(  69)		Float rY1 = (tMat->col1->y * rX);
HXDLIN(  69)		rY = (rY1 + (tMat->col2->y * rY));
HXLINE(  70)		rX = tX1;
HXLINE(  72)		Float PX = (this->m_impulse * this->m_J->linearB->x);
HXLINE(  73)		Float PY = (this->m_impulse * this->m_J->linearB->y);
HXLINE(  76)		Float _hx_tmp = (this->m_impulse * this->m_J->angularB);
HXDLIN(  76)		Float _hx_tmp1 = (_hx_tmp - (rX * PY));
HXDLIN(  76)		return (inv_dt * (_hx_tmp1 + (rY * PX)));
            	}


Float B2GearJoint_obj::getRatio(){
            	HX_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_83_getRatio)
HXDLIN(  83)		return this->m_ratio;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2GearJoint_obj,getRatio,return )

void B2GearJoint_obj::setRatio(Float ratio){
            	HX_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_91_setRatio)
HXDLIN(  91)		this->m_ratio = ratio;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2GearJoint_obj,setRatio,(void))

void B2GearJoint_obj::initVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_168_initVelocityConstraints)
HXLINE( 169)		 ::box2D::dynamics::B2Body g1 = this->m_ground1;
HXLINE( 170)		 ::box2D::dynamics::B2Body g2 = this->m_ground2;
HXLINE( 171)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 172)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 175)		Float ugX;
HXLINE( 176)		Float ugY;
HXLINE( 177)		Float rX;
HXLINE( 178)		Float rY;
HXLINE( 179)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 180)		 ::box2D::common::math::B2Vec2 tVec;
HXLINE( 181)		Float crug;
HXLINE( 182)		Float tX;
HXLINE( 184)		Float K = ((Float)0.0);
HXLINE( 185)		this->m_J->setZero();
HXLINE( 187)		if (hx::IsNotNull( this->m_revolute1 )) {
HXLINE( 189)			this->m_J->angularA = ((Float)-1.0);
HXLINE( 190)			K = (K + bA->m_invI);
            		}
            		else {
HXLINE( 195)			tMat = g1->m_xf->R;
HXLINE( 196)			tVec = this->m_prismatic1->m_localXAxis1;
HXLINE( 197)			Float ugX1 = (tMat->col1->x * tVec->x);
HXDLIN( 197)			ugX = (ugX1 + (tMat->col2->x * tVec->y));
HXLINE( 198)			Float ugY1 = (tMat->col1->y * tVec->x);
HXDLIN( 198)			ugY = (ugY1 + (tMat->col2->y * tVec->y));
HXLINE( 200)			tMat = bA->m_xf->R;
HXLINE( 201)			rX = (this->m_localAnchor1->x - bA->m_sweep->localCenter->x);
HXLINE( 202)			rY = (this->m_localAnchor1->y - bA->m_sweep->localCenter->y);
HXLINE( 203)			Float tX1 = (tMat->col1->x * rX);
HXDLIN( 203)			tX = (tX1 + (tMat->col2->x * rY));
HXLINE( 204)			Float rY1 = (tMat->col1->y * rX);
HXDLIN( 204)			rY = (rY1 + (tMat->col2->y * rY));
HXLINE( 205)			rX = tX;
HXLINE( 208)			crug = ((rX * ugY) - (rY * ugX));
HXLINE( 210)			{
HXLINE( 210)				 ::box2D::common::math::B2Vec2 _this = this->m_J->linearA;
HXDLIN( 210)				_this->x = -(ugX);
HXDLIN( 210)				_this->y = -(ugY);
            			}
HXLINE( 211)			this->m_J->angularA = -(crug);
HXLINE( 212)			Float bA1 = bA->m_invMass;
HXDLIN( 212)			K = (K + (bA1 + ((bA->m_invI * crug) * crug)));
            		}
HXLINE( 215)		if (hx::IsNotNull( this->m_revolute2 )) {
HXLINE( 217)			this->m_J->angularB = -(this->m_ratio);
HXLINE( 218)			K = (K + ((this->m_ratio * this->m_ratio) * bB->m_invI));
            		}
            		else {
HXLINE( 223)			tMat = g2->m_xf->R;
HXLINE( 224)			tVec = this->m_prismatic2->m_localXAxis1;
HXLINE( 225)			Float ugX2 = (tMat->col1->x * tVec->x);
HXDLIN( 225)			ugX = (ugX2 + (tMat->col2->x * tVec->y));
HXLINE( 226)			Float ugY2 = (tMat->col1->y * tVec->x);
HXDLIN( 226)			ugY = (ugY2 + (tMat->col2->y * tVec->y));
HXLINE( 228)			tMat = bB->m_xf->R;
HXLINE( 229)			rX = (this->m_localAnchor2->x - bB->m_sweep->localCenter->x);
HXLINE( 230)			rY = (this->m_localAnchor2->y - bB->m_sweep->localCenter->y);
HXLINE( 231)			Float tX2 = (tMat->col1->x * rX);
HXDLIN( 231)			tX = (tX2 + (tMat->col2->x * rY));
HXLINE( 232)			Float rY2 = (tMat->col1->y * rX);
HXDLIN( 232)			rY = (rY2 + (tMat->col2->y * rY));
HXLINE( 233)			rX = tX;
HXLINE( 236)			crug = ((rX * ugY) - (rY * ugX));
HXLINE( 238)			{
HXLINE( 238)				 ::box2D::common::math::B2Vec2 _this1 = this->m_J->linearB;
HXDLIN( 238)				_this1->x = (-(this->m_ratio) * ugX);
HXDLIN( 238)				_this1->y = (-(this->m_ratio) * ugY);
            			}
HXLINE( 239)			this->m_J->angularB = (-(this->m_ratio) * crug);
HXLINE( 240)			Float K1 = (this->m_ratio * this->m_ratio);
HXDLIN( 240)			Float bB1 = bB->m_invMass;
HXDLIN( 240)			K = (K + (K1 * (bB1 + ((bB->m_invI * crug) * crug))));
            		}
HXLINE( 244)		Float _hx_tmp;
HXDLIN( 244)		if ((K > ((Float)0.0))) {
HXLINE( 244)			_hx_tmp = ((Float)((Float)1.0) / (Float)K);
            		}
            		else {
HXLINE( 244)			_hx_tmp = ((Float)0.0);
            		}
HXDLIN( 244)		this->m_mass = _hx_tmp;
HXLINE( 246)		if (step->warmStarting) {
HXLINE( 250)			 ::box2D::common::math::B2Vec2 bA2 = bA->m_linearVelocity;
HXDLIN( 250)			bA2->x = (bA2->x + ((bA->m_invMass * this->m_impulse) * this->m_J->linearA->x));
HXLINE( 251)			 ::box2D::common::math::B2Vec2 bA3 = bA->m_linearVelocity;
HXDLIN( 251)			bA3->y = (bA3->y + ((bA->m_invMass * this->m_impulse) * this->m_J->linearA->y));
HXLINE( 252)			 ::box2D::dynamics::B2Body bA4 = bA;
HXDLIN( 252)			bA4->m_angularVelocity = (bA4->m_angularVelocity + ((bA->m_invI * this->m_impulse) * this->m_J->angularA));
HXLINE( 254)			 ::box2D::common::math::B2Vec2 bB2 = bB->m_linearVelocity;
HXDLIN( 254)			bB2->x = (bB2->x + ((bB->m_invMass * this->m_impulse) * this->m_J->linearB->x));
HXLINE( 255)			 ::box2D::common::math::B2Vec2 bB3 = bB->m_linearVelocity;
HXDLIN( 255)			bB3->y = (bB3->y + ((bB->m_invMass * this->m_impulse) * this->m_J->linearB->y));
HXLINE( 256)			 ::box2D::dynamics::B2Body bB4 = bB;
HXDLIN( 256)			bB4->m_angularVelocity = (bB4->m_angularVelocity + ((bB->m_invI * this->m_impulse) * this->m_J->angularB));
            		}
            		else {
HXLINE( 260)			this->m_impulse = ((Float)0.0);
            		}
            	}


void B2GearJoint_obj::solveVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_265_solveVelocityConstraints)
HXLINE( 268)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 269)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 271)		Float Cdot = this->m_J->compute(bA->m_linearVelocity,bA->m_angularVelocity,bB->m_linearVelocity,bB->m_angularVelocity);
HXLINE( 274)		Float impulse = (-(this->m_mass) * Cdot);
HXLINE( 275)		 ::box2D::dynamics::joints::B2GearJoint _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 275)		_hx_tmp->m_impulse = (_hx_tmp->m_impulse + impulse);
HXLINE( 277)		 ::box2D::common::math::B2Vec2 bA1 = bA->m_linearVelocity;
HXDLIN( 277)		bA1->x = (bA1->x + ((bA->m_invMass * impulse) * this->m_J->linearA->x));
HXLINE( 278)		 ::box2D::common::math::B2Vec2 bA2 = bA->m_linearVelocity;
HXDLIN( 278)		bA2->y = (bA2->y + ((bA->m_invMass * impulse) * this->m_J->linearA->y));
HXLINE( 279)		 ::box2D::dynamics::B2Body bA3 = bA;
HXDLIN( 279)		bA3->m_angularVelocity = (bA3->m_angularVelocity + ((bA->m_invI * impulse) * this->m_J->angularA));
HXLINE( 280)		 ::box2D::common::math::B2Vec2 bB1 = bB->m_linearVelocity;
HXDLIN( 280)		bB1->x = (bB1->x + ((bB->m_invMass * impulse) * this->m_J->linearB->x));
HXLINE( 281)		 ::box2D::common::math::B2Vec2 bB2 = bB->m_linearVelocity;
HXDLIN( 281)		bB2->y = (bB2->y + ((bB->m_invMass * impulse) * this->m_J->linearB->y));
HXLINE( 282)		 ::box2D::dynamics::B2Body bB3 = bB;
HXDLIN( 282)		bB3->m_angularVelocity = (bB3->m_angularVelocity + ((bB->m_invI * impulse) * this->m_J->angularB));
            	}


bool B2GearJoint_obj::solvePositionConstraints(Float baumgarte){
            	HX_STACKFRAME(&_hx_pos_1c2b9b9921d0e3b6_286_solvePositionConstraints)
HXLINE( 289)		Float linearError = ((Float)0.0);
HXLINE( 291)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 292)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 294)		Float coordinate1;
HXLINE( 295)		Float coordinate2;
HXLINE( 296)		if (hx::IsNotNull( this->m_revolute1 )) {
HXLINE( 298)			coordinate1 = this->m_revolute1->getJointAngle();
            		}
            		else {
HXLINE( 302)			coordinate1 = this->m_prismatic1->getJointTranslation();
            		}
HXLINE( 305)		if (hx::IsNotNull( this->m_revolute2 )) {
HXLINE( 307)			coordinate2 = this->m_revolute2->getJointAngle();
            		}
            		else {
HXLINE( 311)			coordinate2 = this->m_prismatic2->getJointTranslation();
            		}
HXLINE( 314)		Float C = this->m_constant;
HXDLIN( 314)		Float C1 = (C - (coordinate1 + (this->m_ratio * coordinate2)));
HXLINE( 316)		Float impulse = (-(this->m_mass) * C1);
HXLINE( 318)		 ::box2D::common::math::B2Vec2 bA1 = bA->m_sweep->c;
HXDLIN( 318)		bA1->x = (bA1->x + ((bA->m_invMass * impulse) * this->m_J->linearA->x));
HXLINE( 319)		 ::box2D::common::math::B2Vec2 bA2 = bA->m_sweep->c;
HXDLIN( 319)		bA2->y = (bA2->y + ((bA->m_invMass * impulse) * this->m_J->linearA->y));
HXLINE( 320)		 ::box2D::common::math::B2Sweep bA3 = bA->m_sweep;
HXDLIN( 320)		bA3->a = (bA3->a + ((bA->m_invI * impulse) * this->m_J->angularA));
HXLINE( 321)		 ::box2D::common::math::B2Vec2 bB1 = bB->m_sweep->c;
HXDLIN( 321)		bB1->x = (bB1->x + ((bB->m_invMass * impulse) * this->m_J->linearB->x));
HXLINE( 322)		 ::box2D::common::math::B2Vec2 bB2 = bB->m_sweep->c;
HXDLIN( 322)		bB2->y = (bB2->y + ((bB->m_invMass * impulse) * this->m_J->linearB->y));
HXLINE( 323)		 ::box2D::common::math::B2Sweep bB3 = bB->m_sweep;
HXDLIN( 323)		bB3->a = (bB3->a + ((bB->m_invI * impulse) * this->m_J->angularB));
HXLINE( 325)		bA->synchronizeTransform();
HXLINE( 326)		bB->synchronizeTransform();
HXLINE( 329)		return (linearError < ::box2D::common::B2Settings_obj::b2_linearSlop);
            	}



hx::ObjectPtr< B2GearJoint_obj > B2GearJoint_obj::__new( ::box2D::dynamics::joints::B2GearJointDef def) {
	hx::ObjectPtr< B2GearJoint_obj > __this = new B2GearJoint_obj();
	__this->__construct(def);
	return __this;
}

hx::ObjectPtr< B2GearJoint_obj > B2GearJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::joints::B2GearJointDef def) {
	B2GearJoint_obj *__this = (B2GearJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2GearJoint_obj), true, "box2D.dynamics.joints.B2GearJoint"));
	*(void **)__this = B2GearJoint_obj::_hx_vtable;
	__this->__construct(def);
	return __this;
}

B2GearJoint_obj::B2GearJoint_obj()
{
}

void B2GearJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2GearJoint);
	HX_MARK_MEMBER_NAME(m_ground1,"m_ground1");
	HX_MARK_MEMBER_NAME(m_ground2,"m_ground2");
	HX_MARK_MEMBER_NAME(m_revolute1,"m_revolute1");
	HX_MARK_MEMBER_NAME(m_prismatic1,"m_prismatic1");
	HX_MARK_MEMBER_NAME(m_revolute2,"m_revolute2");
	HX_MARK_MEMBER_NAME(m_prismatic2,"m_prismatic2");
	HX_MARK_MEMBER_NAME(m_groundAnchor1,"m_groundAnchor1");
	HX_MARK_MEMBER_NAME(m_groundAnchor2,"m_groundAnchor2");
	HX_MARK_MEMBER_NAME(m_localAnchor1,"m_localAnchor1");
	HX_MARK_MEMBER_NAME(m_localAnchor2,"m_localAnchor2");
	HX_MARK_MEMBER_NAME(m_J,"m_J");
	HX_MARK_MEMBER_NAME(m_constant,"m_constant");
	HX_MARK_MEMBER_NAME(m_ratio,"m_ratio");
	HX_MARK_MEMBER_NAME(m_mass,"m_mass");
	HX_MARK_MEMBER_NAME(m_impulse,"m_impulse");
	 ::box2D::dynamics::joints::B2Joint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void B2GearJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_ground1,"m_ground1");
	HX_VISIT_MEMBER_NAME(m_ground2,"m_ground2");
	HX_VISIT_MEMBER_NAME(m_revolute1,"m_revolute1");
	HX_VISIT_MEMBER_NAME(m_prismatic1,"m_prismatic1");
	HX_VISIT_MEMBER_NAME(m_revolute2,"m_revolute2");
	HX_VISIT_MEMBER_NAME(m_prismatic2,"m_prismatic2");
	HX_VISIT_MEMBER_NAME(m_groundAnchor1,"m_groundAnchor1");
	HX_VISIT_MEMBER_NAME(m_groundAnchor2,"m_groundAnchor2");
	HX_VISIT_MEMBER_NAME(m_localAnchor1,"m_localAnchor1");
	HX_VISIT_MEMBER_NAME(m_localAnchor2,"m_localAnchor2");
	HX_VISIT_MEMBER_NAME(m_J,"m_J");
	HX_VISIT_MEMBER_NAME(m_constant,"m_constant");
	HX_VISIT_MEMBER_NAME(m_ratio,"m_ratio");
	HX_VISIT_MEMBER_NAME(m_mass,"m_mass");
	HX_VISIT_MEMBER_NAME(m_impulse,"m_impulse");
	 ::box2D::dynamics::joints::B2Joint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val B2GearJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m_J") ) { return hx::Val( m_J ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_mass") ) { return hx::Val( m_mass ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_ratio") ) { return hx::Val( m_ratio ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getRatio") ) { return hx::Val( getRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRatio") ) { return hx::Val( setRatio_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_ground1") ) { return hx::Val( m_ground1 ); }
		if (HX_FIELD_EQ(inName,"m_ground2") ) { return hx::Val( m_ground2 ); }
		if (HX_FIELD_EQ(inName,"m_impulse") ) { return hx::Val( m_impulse ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getAnchorA") ) { return hx::Val( getAnchorA_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnchorB") ) { return hx::Val( getAnchorB_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_constant") ) { return hx::Val( m_constant ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_revolute1") ) { return hx::Val( m_revolute1 ); }
		if (HX_FIELD_EQ(inName,"m_revolute2") ) { return hx::Val( m_revolute2 ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_prismatic1") ) { return hx::Val( m_prismatic1 ); }
		if (HX_FIELD_EQ(inName,"m_prismatic2") ) { return hx::Val( m_prismatic2 ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_localAnchor1") ) { return hx::Val( m_localAnchor1 ); }
		if (HX_FIELD_EQ(inName,"m_localAnchor2") ) { return hx::Val( m_localAnchor2 ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_groundAnchor1") ) { return hx::Val( m_groundAnchor1 ); }
		if (HX_FIELD_EQ(inName,"m_groundAnchor2") ) { return hx::Val( m_groundAnchor2 ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getReactionForce") ) { return hx::Val( getReactionForce_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getReactionTorque") ) { return hx::Val( getReactionTorque_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"initVelocityConstraints") ) { return hx::Val( initVelocityConstraints_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"solveVelocityConstraints") ) { return hx::Val( solveVelocityConstraints_dyn() ); }
		if (HX_FIELD_EQ(inName,"solvePositionConstraints") ) { return hx::Val( solvePositionConstraints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2GearJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m_J") ) { m_J=inValue.Cast<  ::box2D::dynamics::joints::B2Jacobian >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_mass") ) { m_mass=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_ratio") ) { m_ratio=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_ground1") ) { m_ground1=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_ground2") ) { m_ground2=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_impulse") ) { m_impulse=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_constant") ) { m_constant=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_revolute1") ) { m_revolute1=inValue.Cast<  ::box2D::dynamics::joints::B2RevoluteJoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_revolute2") ) { m_revolute2=inValue.Cast<  ::box2D::dynamics::joints::B2RevoluteJoint >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_prismatic1") ) { m_prismatic1=inValue.Cast<  ::box2D::dynamics::joints::B2PrismaticJoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_prismatic2") ) { m_prismatic2=inValue.Cast<  ::box2D::dynamics::joints::B2PrismaticJoint >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_localAnchor1") ) { m_localAnchor1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_localAnchor2") ) { m_localAnchor2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_groundAnchor1") ) { m_groundAnchor1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_groundAnchor2") ) { m_groundAnchor2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2GearJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_ground1","\xb8","\x22","\x78","\x91"));
	outFields->push(HX_HCSTRING("m_ground2","\xb9","\x22","\x78","\x91"));
	outFields->push(HX_HCSTRING("m_revolute1","\xf9","\xb3","\x34","\xc4"));
	outFields->push(HX_HCSTRING("m_prismatic1","\xb5","\x31","\xb7","\xc0"));
	outFields->push(HX_HCSTRING("m_revolute2","\xfa","\xb3","\x34","\xc4"));
	outFields->push(HX_HCSTRING("m_prismatic2","\xb6","\x31","\xb7","\xc0"));
	outFields->push(HX_HCSTRING("m_groundAnchor1","\xc3","\x55","\x02","\x93"));
	outFields->push(HX_HCSTRING("m_groundAnchor2","\xc4","\x55","\x02","\x93"));
	outFields->push(HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_J","\xb8","\x08","\x53","\x00"));
	outFields->push(HX_HCSTRING("m_constant","\xb6","\xc2","\xe8","\xcc"));
	outFields->push(HX_HCSTRING("m_ratio","\x79","\x0c","\xaf","\x94"));
	outFields->push(HX_HCSTRING("m_mass","\x46","\xb1","\x4d","\x90"));
	outFields->push(HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2GearJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2GearJoint_obj,m_ground1),HX_HCSTRING("m_ground1","\xb8","\x22","\x78","\x91")},
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2GearJoint_obj,m_ground2),HX_HCSTRING("m_ground2","\xb9","\x22","\x78","\x91")},
	{hx::fsObject /*::box2D::dynamics::joints::B2RevoluteJoint*/ ,(int)offsetof(B2GearJoint_obj,m_revolute1),HX_HCSTRING("m_revolute1","\xf9","\xb3","\x34","\xc4")},
	{hx::fsObject /*::box2D::dynamics::joints::B2PrismaticJoint*/ ,(int)offsetof(B2GearJoint_obj,m_prismatic1),HX_HCSTRING("m_prismatic1","\xb5","\x31","\xb7","\xc0")},
	{hx::fsObject /*::box2D::dynamics::joints::B2RevoluteJoint*/ ,(int)offsetof(B2GearJoint_obj,m_revolute2),HX_HCSTRING("m_revolute2","\xfa","\xb3","\x34","\xc4")},
	{hx::fsObject /*::box2D::dynamics::joints::B2PrismaticJoint*/ ,(int)offsetof(B2GearJoint_obj,m_prismatic2),HX_HCSTRING("m_prismatic2","\xb6","\x31","\xb7","\xc0")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2GearJoint_obj,m_groundAnchor1),HX_HCSTRING("m_groundAnchor1","\xc3","\x55","\x02","\x93")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2GearJoint_obj,m_groundAnchor2),HX_HCSTRING("m_groundAnchor2","\xc4","\x55","\x02","\x93")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2GearJoint_obj,m_localAnchor1),HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2GearJoint_obj,m_localAnchor2),HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::dynamics::joints::B2Jacobian*/ ,(int)offsetof(B2GearJoint_obj,m_J),HX_HCSTRING("m_J","\xb8","\x08","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(B2GearJoint_obj,m_constant),HX_HCSTRING("m_constant","\xb6","\xc2","\xe8","\xcc")},
	{hx::fsFloat,(int)offsetof(B2GearJoint_obj,m_ratio),HX_HCSTRING("m_ratio","\x79","\x0c","\xaf","\x94")},
	{hx::fsFloat,(int)offsetof(B2GearJoint_obj,m_mass),HX_HCSTRING("m_mass","\x46","\xb1","\x4d","\x90")},
	{hx::fsFloat,(int)offsetof(B2GearJoint_obj,m_impulse),HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2GearJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String B2GearJoint_obj_sMemberFields[] = {
	HX_HCSTRING("getAnchorA","\x36","\x72","\x03","\x52"),
	HX_HCSTRING("getAnchorB","\x37","\x72","\x03","\x52"),
	HX_HCSTRING("getReactionForce","\x0c","\x7f","\x58","\x41"),
	HX_HCSTRING("getReactionTorque","\x89","\x66","\x20","\x85"),
	HX_HCSTRING("getRatio","\x95","\x44","\xfb","\x43"),
	HX_HCSTRING("setRatio","\x09","\x9e","\x58","\xf2"),
	HX_HCSTRING("initVelocityConstraints","\x29","\xf9","\xf0","\x64"),
	HX_HCSTRING("solveVelocityConstraints","\x1a","\x56","\xac","\xc2"),
	HX_HCSTRING("solvePositionConstraints","\x0e","\x6b","\x88","\xfa"),
	HX_HCSTRING("m_ground1","\xb8","\x22","\x78","\x91"),
	HX_HCSTRING("m_ground2","\xb9","\x22","\x78","\x91"),
	HX_HCSTRING("m_revolute1","\xf9","\xb3","\x34","\xc4"),
	HX_HCSTRING("m_prismatic1","\xb5","\x31","\xb7","\xc0"),
	HX_HCSTRING("m_revolute2","\xfa","\xb3","\x34","\xc4"),
	HX_HCSTRING("m_prismatic2","\xb6","\x31","\xb7","\xc0"),
	HX_HCSTRING("m_groundAnchor1","\xc3","\x55","\x02","\x93"),
	HX_HCSTRING("m_groundAnchor2","\xc4","\x55","\x02","\x93"),
	HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e"),
	HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e"),
	HX_HCSTRING("m_J","\xb8","\x08","\x53","\x00"),
	HX_HCSTRING("m_constant","\xb6","\xc2","\xe8","\xcc"),
	HX_HCSTRING("m_ratio","\x79","\x0c","\xaf","\x94"),
	HX_HCSTRING("m_mass","\x46","\xb1","\x4d","\x90"),
	HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78"),
	::String(null()) };

static void B2GearJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2GearJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2GearJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2GearJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class B2GearJoint_obj::__mClass;

void B2GearJoint_obj::__register()
{
	hx::Object *dummy = new B2GearJoint_obj;
	B2GearJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.joints.B2GearJoint","\x2f","\xdf","\x6c","\x18");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2GearJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2GearJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2GearJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2GearJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2GearJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2GearJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints
