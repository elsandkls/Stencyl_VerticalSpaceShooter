// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_box2D_collision_B2ContactID
#include <box2D/collision/B2ContactID.h>
#endif
#ifndef INCLUDED_box2D_collision_B2Manifold
#include <box2D/collision/B2Manifold.h>
#endif
#ifndef INCLUDED_box2D_collision_B2ManifoldPoint
#include <box2D/collision/B2ManifoldPoint.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2EdgeShape
#include <box2D/collision/shapes/B2EdgeShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2PolygonShape
#include <box2D/collision/shapes/B2PolygonShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2PolyAndEdgeContact
#include <box2D/dynamics/contacts/B2PolyAndEdgeContact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_ClipVertex
#include <box2D/dynamics/contacts/ClipVertex.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_EPAxis
#include <box2D/dynamics/contacts/EPAxis.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_ReferenceFace
#include <box2D/dynamics/contacts/ReferenceFace.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_TempPolygon
#include <box2D/dynamics/contacts/TempPolygon.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_Type
#include <box2D/dynamics/contacts/Type.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_35_new,"box2D.dynamics.contacts.B2PolyAndEdgeContact","new",0x572f27cc,"box2D.dynamics.contacts.B2PolyAndEdgeContact.new","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",35,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_86_reset,"box2D.dynamics.contacts.B2PolyAndEdgeContact","reset",0x2cb9543b,"box2D.dynamics.contacts.B2PolyAndEdgeContact.reset","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",86,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_104_evaluate,"box2D.dynamics.contacts.B2PolyAndEdgeContact","evaluate",0x2b84a16d,"box2D.dynamics.contacts.B2PolyAndEdgeContact.evaluate","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",104,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_119_b2CollidePolyAndEdge,"box2D.dynamics.contacts.B2PolyAndEdgeContact","b2CollidePolyAndEdge",0xa601dbae,"box2D.dynamics.contacts.B2PolyAndEdgeContact.b2CollidePolyAndEdge","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",119,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_649_computeEdgeSeparation,"box2D.dynamics.contacts.B2PolyAndEdgeContact","computeEdgeSeparation",0x850ec326,"box2D.dynamics.contacts.B2PolyAndEdgeContact.computeEdgeSeparation","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",649,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_669_computePolygonSeparation,"box2D.dynamics.contacts.B2PolyAndEdgeContact","computePolygonSeparation",0x7d9c56fd,"box2D.dynamics.contacts.B2PolyAndEdgeContact.computePolygonSeparation","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",669,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_791_multiplyTransformsInverse,"box2D.dynamics.contacts.B2PolyAndEdgeContact","multiplyTransformsInverse",0xddf5ae91,"box2D.dynamics.contacts.B2PolyAndEdgeContact.multiplyTransformsInverse","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",791,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_805_multiplyRotationsInverse,"box2D.dynamics.contacts.B2PolyAndEdgeContact","multiplyRotationsInverse",0x83b65213,"box2D.dynamics.contacts.B2PolyAndEdgeContact.multiplyRotationsInverse","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",805,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_813_multiplyRotationVector,"box2D.dynamics.contacts.B2PolyAndEdgeContact","multiplyRotationVector",0x892fcdf9,"box2D.dynamics.contacts.B2PolyAndEdgeContact.multiplyRotationVector","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",813,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_819_multiplyRotationVectorInverse,"box2D.dynamics.contacts.B2PolyAndEdgeContact","multiplyRotationVectorInverse",0x9d6746b7,"box2D.dynamics.contacts.B2PolyAndEdgeContact.multiplyRotationVectorInverse","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",819,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_825_multiplyTransformVector,"box2D.dynamics.contacts.B2PolyAndEdgeContact","multiplyTransformVector",0x17c66ef7,"box2D.dynamics.contacts.B2PolyAndEdgeContact.multiplyTransformVector","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",825,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_76_create,"box2D.dynamics.contacts.B2PolyAndEdgeContact","create",0x69077b10,"box2D.dynamics.contacts.B2PolyAndEdgeContact.create","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",76,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_80_destroy,"box2D.dynamics.contacts.B2PolyAndEdgeContact","destroy",0x909faa66,"box2D.dynamics.contacts.B2PolyAndEdgeContact.destroy","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",80,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_747_clipSegmentToLine,"box2D.dynamics.contacts.B2PolyAndEdgeContact","clipSegmentToLine",0x6ef8ea9e,"box2D.dynamics.contacts.B2PolyAndEdgeContact.clipSegmentToLine","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",747,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_37_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",37,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_38_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",38,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_39_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",39,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_40_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",40,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_41_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",41,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_42_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",42,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_43_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",43,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_44_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",44,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_45_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",45,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_46_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",46,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_47_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",47,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_49_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",49,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_50_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",50,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_51_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",51,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_53_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",53,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_54_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",54,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_55_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",55,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_62_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",62,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_63_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",63,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_64_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",64,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_66_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",66,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_67_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",67,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_68_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",68,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_652d8a4e344cb5f4_69_boot,"box2D.dynamics.contacts.B2PolyAndEdgeContact","boot",0xea2cab46,"box2D.dynamics.contacts.B2PolyAndEdgeContact.boot","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",69,0x86a2ad23)
namespace box2D{
namespace dynamics{
namespace contacts{

void B2PolyAndEdgeContact_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_35_new)
HXDLIN(  35)		super::__construct();
            	}

Dynamic B2PolyAndEdgeContact_obj::__CreateEmpty() { return new B2PolyAndEdgeContact_obj; }

void *B2PolyAndEdgeContact_obj::_hx_vtable = 0;

Dynamic B2PolyAndEdgeContact_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2PolyAndEdgeContact_obj > _hx_result = new B2PolyAndEdgeContact_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2PolyAndEdgeContact_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x12b7f104) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x12b7f104;
	} else {
		return inClassId==(int)0x5f46c30c;
	}
}

void B2PolyAndEdgeContact_obj::reset( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_86_reset)
HXDLIN(  86)		if (::Std_obj::is(fixtureA->getShape(),hx::ClassOf< ::box2D::collision::shapes::B2PolygonShape >())) {
HXLINE(  88)			this->super::reset(fixtureB,fixtureA);
HXLINE(  90)			::box2D::common::B2Settings_obj::b2Assert((fixtureA->getType() == (int)1));
HXLINE(  91)			::box2D::common::B2Settings_obj::b2Assert((fixtureB->getType() == (int)2));
            		}
            		else {
HXLINE(  96)			this->super::reset(fixtureA,fixtureB);
HXLINE(  98)			::box2D::common::B2Settings_obj::b2Assert((fixtureA->getType() == (int)2));
HXLINE(  99)			::box2D::common::B2Settings_obj::b2Assert((fixtureB->getType() == (int)1));
            		}
            	}


void B2PolyAndEdgeContact_obj::evaluate(){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_104_evaluate)
HXLINE( 105)		 ::box2D::dynamics::B2Body bA = this->m_fixtureA->getBody();
HXLINE( 106)		 ::box2D::dynamics::B2Body bB = this->m_fixtureB->getBody();
HXLINE( 108)		 ::box2D::collision::B2Manifold _hx_tmp = this->m_manifold;
HXLINE( 109)		 ::box2D::collision::shapes::B2EdgeShape _hx_tmp1 = hx::TCast<  ::box2D::collision::shapes::B2EdgeShape >::cast(this->m_fixtureA->getShape());
HXDLIN( 109)		 ::box2D::common::math::B2Transform bA1 = bA->m_xf;
HXLINE( 108)		this->b2CollidePolyAndEdge(_hx_tmp,_hx_tmp1,bA1,hx::TCast<  ::box2D::collision::shapes::B2PolygonShape >::cast(this->m_fixtureB->getShape()),bB->m_xf);
            	}


void B2PolyAndEdgeContact_obj::b2CollidePolyAndEdge( ::box2D::collision::B2Manifold manifold, ::box2D::collision::shapes::B2EdgeShape edgeA, ::box2D::common::math::B2Transform xfA, ::box2D::collision::shapes::B2PolygonShape polygonB, ::box2D::common::math::B2Transform xfB){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_119_b2CollidePolyAndEdge)
HXLINE( 123)		this->multiplyTransformsInverse(xfA,xfB,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_xf);
HXLINE( 124)		this->multiplyTransformVector(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_xf,polygonB->m_centroid,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
HXLINE( 125)		{
HXLINE( 125)			 ::box2D::common::math::B2Vec2 _this = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_centroidB;
HXDLIN( 125)			 ::box2D::common::math::B2Vec2 v = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 125)			_this->x = v->x;
HXDLIN( 125)			_this->y = v->y;
            		}
HXLINE( 127)		this->m_v0 = edgeA->m_v0;
HXLINE( 128)		this->m_v1 = edgeA->m_v1;
HXLINE( 129)		this->m_v2 = edgeA->m_v2;
HXLINE( 130)		this->m_v3 = edgeA->m_v3;
HXLINE( 135)		bool hasVertex0 = edgeA->m_hasVertex0;
HXLINE( 136)		bool hasVertex3 = edgeA->m_hasVertex3;
HXLINE( 142)		{
HXLINE( 142)			 ::box2D::common::math::B2Vec2 _this1 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge1;
HXDLIN( 142)			 ::box2D::common::math::B2Vec2 v1 = this->m_v2;
HXDLIN( 142)			_this1->x = v1->x;
HXDLIN( 142)			_this1->y = v1->y;
            		}
HXLINE( 143)		::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge1->subtract(this->m_v1);
HXLINE( 144)		::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge1->normalize();
HXLINE( 145)		{
HXLINE( 145)			 ::box2D::common::math::B2Vec2 _this2 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 145)			Float y_ = -(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge1->x);
HXDLIN( 145)			_this2->x = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge1->y;
HXDLIN( 145)			_this2->y = y_;
            		}
HXLINE( 151)		{
HXLINE( 151)			 ::box2D::common::math::B2Vec2 _this3 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 151)			 ::box2D::common::math::B2Vec2 v2 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_centroidB;
HXDLIN( 151)			_this3->x = v2->x;
HXDLIN( 151)			_this3->y = v2->y;
            		}
HXLINE( 152)		::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp->subtract(this->m_v1);
HXLINE( 154)		Float offset1 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
HXLINE( 155)		Float offset0 = ((Float)0.0);
HXLINE( 156)		Float offset2 = ((Float)0.0);
HXLINE( 157)		bool convex1 = false;
HXLINE( 158)		bool convex2 = false;
HXLINE( 175)		if (hasVertex0) {
HXLINE( 177)			{
HXLINE( 177)				 ::box2D::common::math::B2Vec2 _this4 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge0;
HXDLIN( 177)				 ::box2D::common::math::B2Vec2 v3 = this->m_v1;
HXDLIN( 177)				_this4->x = v3->x;
HXDLIN( 177)				_this4->y = v3->y;
            			}
HXLINE( 178)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge0->subtract(this->m_v0);
HXLINE( 179)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge0->normalize();
HXLINE( 181)			{
HXLINE( 181)				 ::box2D::common::math::B2Vec2 _this5 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal0;
HXDLIN( 181)				Float y_1 = -(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge0->x);
HXDLIN( 181)				_this5->x = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge0->y;
HXDLIN( 181)				_this5->y = y_1;
            			}
HXLINE( 182)			convex1 = (::box2D::common::math::B2Math_obj::crossVV(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge0,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge1) >= ((Float)0.0));
HXLINE( 184)			{
HXLINE( 184)				 ::box2D::common::math::B2Vec2 _this6 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 184)				 ::box2D::common::math::B2Vec2 v4 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_centroidB;
HXDLIN( 184)				_this6->x = v4->x;
HXDLIN( 184)				_this6->y = v4->y;
            			}
HXLINE( 185)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp->subtract(this->m_v0);
HXLINE( 186)			offset0 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal0,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
            		}
HXLINE( 202)		if (hasVertex3) {
HXLINE( 204)			{
HXLINE( 204)				 ::box2D::common::math::B2Vec2 _this7 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge2;
HXDLIN( 204)				 ::box2D::common::math::B2Vec2 v5 = this->m_v3;
HXDLIN( 204)				_this7->x = v5->x;
HXDLIN( 204)				_this7->y = v5->y;
            			}
HXLINE( 205)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge2->subtract(this->m_v2);
HXLINE( 206)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge2->normalize();
HXLINE( 208)			{
HXLINE( 208)				 ::box2D::common::math::B2Vec2 _this8 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal2;
HXDLIN( 208)				Float y_2 = -(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge2->x);
HXDLIN( 208)				_this8->x = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge2->y;
HXDLIN( 208)				_this8->y = y_2;
            			}
HXLINE( 209)			convex2 = (::box2D::common::math::B2Math_obj::crossVV(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge1,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edge2) > ((Float)0.0));
HXLINE( 211)			{
HXLINE( 211)				 ::box2D::common::math::B2Vec2 _this9 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 211)				 ::box2D::common::math::B2Vec2 v6 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_centroidB;
HXDLIN( 211)				_this9->x = v6->x;
HXDLIN( 211)				_this9->y = v6->y;
            			}
HXLINE( 212)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp->subtract(this->m_v2);
HXLINE( 213)			offset2 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal2,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
            		}
HXLINE( 219)		bool _hx_tmp;
HXDLIN( 219)		if (hasVertex0) {
HXLINE( 219)			_hx_tmp = hasVertex3;
            		}
            		else {
HXLINE( 219)			_hx_tmp = false;
            		}
HXDLIN( 219)		if (_hx_tmp) {
HXLINE( 221)			bool _hx_tmp1;
HXDLIN( 221)			if (convex1) {
HXLINE( 221)				_hx_tmp1 = convex2;
            			}
            			else {
HXLINE( 221)				_hx_tmp1 = false;
            			}
HXDLIN( 221)			if (_hx_tmp1) {
HXLINE( 223)				bool _hx_tmp2;
HXDLIN( 223)				bool _hx_tmp3;
HXDLIN( 223)				if (!((offset0 >= ((Float)0.0)))) {
HXLINE( 223)					_hx_tmp3 = (offset1 >= ((Float)0.0));
            				}
            				else {
HXLINE( 223)					_hx_tmp3 = true;
            				}
HXDLIN( 223)				if (!(_hx_tmp3)) {
HXLINE( 223)					_hx_tmp2 = (offset2 >= ((Float)0.0));
            				}
            				else {
HXLINE( 223)					_hx_tmp2 = true;
            				}
HXDLIN( 223)				this->m_front = _hx_tmp2;
HXLINE( 225)				if (this->m_front) {
HXLINE( 227)					{
HXLINE( 227)						 ::box2D::common::math::B2Vec2 _this10 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 227)						 ::box2D::common::math::B2Vec2 v7 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 227)						_this10->x = v7->x;
HXDLIN( 227)						_this10->y = v7->y;
            					}
HXLINE( 228)					{
HXLINE( 228)						 ::box2D::common::math::B2Vec2 _this11 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 228)						 ::box2D::common::math::B2Vec2 v8 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal0;
HXDLIN( 228)						_this11->x = v8->x;
HXDLIN( 228)						_this11->y = v8->y;
            					}
HXLINE( 229)					{
HXLINE( 229)						 ::box2D::common::math::B2Vec2 _this12 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 229)						 ::box2D::common::math::B2Vec2 v9 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal2;
HXDLIN( 229)						_this12->x = v9->x;
HXDLIN( 229)						_this12->y = v9->y;
            					}
            				}
            				else {
HXLINE( 234)					{
HXLINE( 234)						 ::box2D::common::math::B2Vec2 _this13 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 234)						 ::box2D::common::math::B2Vec2 v10 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 234)						_this13->x = v10->x;
HXDLIN( 234)						_this13->y = v10->y;
            					}
HXLINE( 235)					{
HXLINE( 235)						 ::box2D::common::math::B2Vec2 _this14 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 235)						_this14->x = -(_this14->x);
HXDLIN( 235)						_this14->y = -(_this14->y);
            					}
HXLINE( 236)					{
HXLINE( 236)						 ::box2D::common::math::B2Vec2 _this15 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 236)						 ::box2D::common::math::B2Vec2 v11 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 236)						_this15->x = v11->x;
HXDLIN( 236)						_this15->y = v11->y;
            					}
HXLINE( 237)					{
HXLINE( 237)						 ::box2D::common::math::B2Vec2 _this16 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 237)						_this16->x = -(_this16->x);
HXDLIN( 237)						_this16->y = -(_this16->y);
            					}
HXLINE( 238)					{
HXLINE( 238)						 ::box2D::common::math::B2Vec2 _this17 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 238)						 ::box2D::common::math::B2Vec2 v12 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 238)						_this17->x = v12->x;
HXDLIN( 238)						_this17->y = v12->y;
            					}
HXLINE( 239)					{
HXLINE( 239)						 ::box2D::common::math::B2Vec2 _this18 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 239)						_this18->x = -(_this18->x);
HXDLIN( 239)						_this18->y = -(_this18->y);
            					}
            				}
            			}
            			else {
HXLINE( 243)				if (convex1) {
HXLINE( 245)					bool _hx_tmp4;
HXDLIN( 245)					if (!((offset0 >= ((Float)0.0)))) {
HXLINE( 245)						if ((offset1 >= ((Float)0.0))) {
HXLINE( 245)							_hx_tmp4 = (offset2 >= ((Float)0.0));
            						}
            						else {
HXLINE( 245)							_hx_tmp4 = false;
            						}
            					}
            					else {
HXLINE( 245)						_hx_tmp4 = true;
            					}
HXDLIN( 245)					this->m_front = _hx_tmp4;
HXLINE( 247)					if (this->m_front) {
HXLINE( 249)						{
HXLINE( 249)							 ::box2D::common::math::B2Vec2 _this19 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 249)							 ::box2D::common::math::B2Vec2 v13 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 249)							_this19->x = v13->x;
HXDLIN( 249)							_this19->y = v13->y;
            						}
HXLINE( 250)						{
HXLINE( 250)							 ::box2D::common::math::B2Vec2 _this20 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 250)							 ::box2D::common::math::B2Vec2 v14 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal0;
HXDLIN( 250)							_this20->x = v14->x;
HXDLIN( 250)							_this20->y = v14->y;
            						}
HXLINE( 251)						{
HXLINE( 251)							 ::box2D::common::math::B2Vec2 _this21 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 251)							 ::box2D::common::math::B2Vec2 v15 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 251)							_this21->x = v15->x;
HXDLIN( 251)							_this21->y = v15->y;
            						}
            					}
            					else {
HXLINE( 256)						{
HXLINE( 256)							 ::box2D::common::math::B2Vec2 _this22 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 256)							 ::box2D::common::math::B2Vec2 v16 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 256)							_this22->x = v16->x;
HXDLIN( 256)							_this22->y = v16->y;
            						}
HXLINE( 257)						{
HXLINE( 257)							 ::box2D::common::math::B2Vec2 _this23 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 257)							_this23->x = -(_this23->x);
HXDLIN( 257)							_this23->y = -(_this23->y);
            						}
HXLINE( 258)						{
HXLINE( 258)							 ::box2D::common::math::B2Vec2 _this24 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 258)							 ::box2D::common::math::B2Vec2 v17 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal2;
HXDLIN( 258)							_this24->x = v17->x;
HXDLIN( 258)							_this24->y = v17->y;
            						}
HXLINE( 259)						{
HXLINE( 259)							 ::box2D::common::math::B2Vec2 _this25 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 259)							_this25->x = -(_this25->x);
HXDLIN( 259)							_this25->y = -(_this25->y);
            						}
HXLINE( 260)						{
HXLINE( 260)							 ::box2D::common::math::B2Vec2 _this26 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 260)							 ::box2D::common::math::B2Vec2 v18 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 260)							_this26->x = v18->x;
HXDLIN( 260)							_this26->y = v18->y;
            						}
HXLINE( 261)						{
HXLINE( 261)							 ::box2D::common::math::B2Vec2 _this27 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 261)							_this27->x = -(_this27->x);
HXDLIN( 261)							_this27->y = -(_this27->y);
            						}
            					}
            				}
            				else {
HXLINE( 265)					if (convex2) {
HXLINE( 267)						bool _hx_tmp5;
HXDLIN( 267)						if (!((offset2 >= ((Float)0.0)))) {
HXLINE( 267)							if ((offset0 >= ((Float)0.0))) {
HXLINE( 267)								_hx_tmp5 = (offset1 >= ((Float)0.0));
            							}
            							else {
HXLINE( 267)								_hx_tmp5 = false;
            							}
            						}
            						else {
HXLINE( 267)							_hx_tmp5 = true;
            						}
HXDLIN( 267)						this->m_front = _hx_tmp5;
HXLINE( 269)						if (this->m_front) {
HXLINE( 271)							{
HXLINE( 271)								 ::box2D::common::math::B2Vec2 _this28 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 271)								 ::box2D::common::math::B2Vec2 v19 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 271)								_this28->x = v19->x;
HXDLIN( 271)								_this28->y = v19->y;
            							}
HXLINE( 272)							{
HXLINE( 272)								 ::box2D::common::math::B2Vec2 _this29 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 272)								 ::box2D::common::math::B2Vec2 v20 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 272)								_this29->x = v20->x;
HXDLIN( 272)								_this29->y = v20->y;
            							}
HXLINE( 273)							{
HXLINE( 273)								 ::box2D::common::math::B2Vec2 _this30 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 273)								 ::box2D::common::math::B2Vec2 v21 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal2;
HXDLIN( 273)								_this30->x = v21->x;
HXDLIN( 273)								_this30->y = v21->y;
            							}
            						}
            						else {
HXLINE( 278)							{
HXLINE( 278)								 ::box2D::common::math::B2Vec2 _this31 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 278)								 ::box2D::common::math::B2Vec2 v22 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 278)								_this31->x = v22->x;
HXDLIN( 278)								_this31->y = v22->y;
            							}
HXLINE( 279)							{
HXLINE( 279)								 ::box2D::common::math::B2Vec2 _this32 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 279)								_this32->x = -(_this32->x);
HXDLIN( 279)								_this32->y = -(_this32->y);
            							}
HXLINE( 280)							{
HXLINE( 280)								 ::box2D::common::math::B2Vec2 _this33 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 280)								 ::box2D::common::math::B2Vec2 v23 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 280)								_this33->x = v23->x;
HXDLIN( 280)								_this33->y = v23->y;
            							}
HXLINE( 281)							{
HXLINE( 281)								 ::box2D::common::math::B2Vec2 _this34 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 281)								_this34->x = -(_this34->x);
HXDLIN( 281)								_this34->y = -(_this34->y);
            							}
HXLINE( 282)							{
HXLINE( 282)								 ::box2D::common::math::B2Vec2 _this35 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 282)								 ::box2D::common::math::B2Vec2 v24 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal0;
HXDLIN( 282)								_this35->x = v24->x;
HXDLIN( 282)								_this35->y = v24->y;
            							}
HXLINE( 283)							{
HXLINE( 283)								 ::box2D::common::math::B2Vec2 _this36 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 283)								_this36->x = -(_this36->x);
HXDLIN( 283)								_this36->y = -(_this36->y);
            							}
            						}
            					}
            					else {
HXLINE( 289)						bool _hx_tmp6;
HXDLIN( 289)						bool _hx_tmp7;
HXDLIN( 289)						if ((offset0 >= ((Float)0.0))) {
HXLINE( 289)							_hx_tmp7 = (offset1 >= ((Float)0.0));
            						}
            						else {
HXLINE( 289)							_hx_tmp7 = false;
            						}
HXDLIN( 289)						if (_hx_tmp7) {
HXLINE( 289)							_hx_tmp6 = (offset2 >= ((Float)0.0));
            						}
            						else {
HXLINE( 289)							_hx_tmp6 = false;
            						}
HXDLIN( 289)						this->m_front = _hx_tmp6;
HXLINE( 291)						if (this->m_front) {
HXLINE( 293)							{
HXLINE( 293)								 ::box2D::common::math::B2Vec2 _this37 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 293)								 ::box2D::common::math::B2Vec2 v25 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 293)								_this37->x = v25->x;
HXDLIN( 293)								_this37->y = v25->y;
            							}
HXLINE( 294)							{
HXLINE( 294)								 ::box2D::common::math::B2Vec2 _this38 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 294)								 ::box2D::common::math::B2Vec2 v26 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 294)								_this38->x = v26->x;
HXDLIN( 294)								_this38->y = v26->y;
            							}
HXLINE( 295)							{
HXLINE( 295)								 ::box2D::common::math::B2Vec2 _this39 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 295)								 ::box2D::common::math::B2Vec2 v27 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 295)								_this39->x = v27->x;
HXDLIN( 295)								_this39->y = v27->y;
            							}
            						}
            						else {
HXLINE( 300)							{
HXLINE( 300)								 ::box2D::common::math::B2Vec2 _this40 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 300)								 ::box2D::common::math::B2Vec2 v28 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 300)								_this40->x = v28->x;
HXDLIN( 300)								_this40->y = v28->y;
            							}
HXLINE( 301)							{
HXLINE( 301)								 ::box2D::common::math::B2Vec2 _this41 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 301)								_this41->x = -(_this41->x);
HXDLIN( 301)								_this41->y = -(_this41->y);
            							}
HXLINE( 302)							{
HXLINE( 302)								 ::box2D::common::math::B2Vec2 _this42 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 302)								 ::box2D::common::math::B2Vec2 v29 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal2;
HXDLIN( 302)								_this42->x = v29->x;
HXDLIN( 302)								_this42->y = v29->y;
            							}
HXLINE( 303)							{
HXLINE( 303)								 ::box2D::common::math::B2Vec2 _this43 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 303)								_this43->x = -(_this43->x);
HXDLIN( 303)								_this43->y = -(_this43->y);
            							}
HXLINE( 304)							{
HXLINE( 304)								 ::box2D::common::math::B2Vec2 _this44 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 304)								 ::box2D::common::math::B2Vec2 v30 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal0;
HXDLIN( 304)								_this44->x = v30->x;
HXDLIN( 304)								_this44->y = v30->y;
            							}
HXLINE( 305)							{
HXLINE( 305)								 ::box2D::common::math::B2Vec2 _this45 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 305)								_this45->x = -(_this45->x);
HXDLIN( 305)								_this45->y = -(_this45->y);
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 310)			if (hasVertex0) {
HXLINE( 312)				if (convex1) {
HXLINE( 314)					bool _hx_tmp8;
HXDLIN( 314)					if (!((offset0 >= ((Float)0.0)))) {
HXLINE( 314)						_hx_tmp8 = (offset1 >= ((Float)0.0));
            					}
            					else {
HXLINE( 314)						_hx_tmp8 = true;
            					}
HXDLIN( 314)					this->m_front = _hx_tmp8;
HXLINE( 316)					if (this->m_front) {
HXLINE( 318)						{
HXLINE( 318)							 ::box2D::common::math::B2Vec2 _this46 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 318)							 ::box2D::common::math::B2Vec2 v31 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 318)							_this46->x = v31->x;
HXDLIN( 318)							_this46->y = v31->y;
            						}
HXLINE( 319)						{
HXLINE( 319)							 ::box2D::common::math::B2Vec2 _this47 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 319)							 ::box2D::common::math::B2Vec2 v32 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal0;
HXDLIN( 319)							_this47->x = v32->x;
HXDLIN( 319)							_this47->y = v32->y;
            						}
HXLINE( 320)						{
HXLINE( 320)							 ::box2D::common::math::B2Vec2 _this48 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 320)							 ::box2D::common::math::B2Vec2 v33 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 320)							_this48->x = v33->x;
HXDLIN( 320)							_this48->y = v33->y;
            						}
HXLINE( 321)						{
HXLINE( 321)							 ::box2D::common::math::B2Vec2 _this49 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 321)							_this49->x = -(_this49->x);
HXDLIN( 321)							_this49->y = -(_this49->y);
            						}
            					}
            					else {
HXLINE( 326)						{
HXLINE( 326)							 ::box2D::common::math::B2Vec2 _this50 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 326)							 ::box2D::common::math::B2Vec2 v34 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 326)							_this50->x = v34->x;
HXDLIN( 326)							_this50->y = v34->y;
            						}
HXLINE( 327)						{
HXLINE( 327)							 ::box2D::common::math::B2Vec2 _this51 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 327)							_this51->x = -(_this51->x);
HXDLIN( 327)							_this51->y = -(_this51->y);
            						}
HXLINE( 328)						{
HXLINE( 328)							 ::box2D::common::math::B2Vec2 _this52 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 328)							 ::box2D::common::math::B2Vec2 v35 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 328)							_this52->x = v35->x;
HXDLIN( 328)							_this52->y = v35->y;
            						}
HXLINE( 329)						{
HXLINE( 329)							 ::box2D::common::math::B2Vec2 _this53 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 329)							 ::box2D::common::math::B2Vec2 v36 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 329)							_this53->x = v36->x;
HXDLIN( 329)							_this53->y = v36->y;
            						}
HXLINE( 330)						{
HXLINE( 330)							 ::box2D::common::math::B2Vec2 _this54 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 330)							_this54->x = -(_this54->x);
HXDLIN( 330)							_this54->y = -(_this54->y);
            						}
            					}
            				}
            				else {
HXLINE( 336)					bool _hx_tmp9;
HXDLIN( 336)					if ((offset0 >= ((Float)0.0))) {
HXLINE( 336)						_hx_tmp9 = (offset1 >= ((Float)0.0));
            					}
            					else {
HXLINE( 336)						_hx_tmp9 = false;
            					}
HXDLIN( 336)					this->m_front = _hx_tmp9;
HXLINE( 338)					if (this->m_front) {
HXLINE( 340)						{
HXLINE( 340)							 ::box2D::common::math::B2Vec2 _this55 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 340)							 ::box2D::common::math::B2Vec2 v37 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 340)							_this55->x = v37->x;
HXDLIN( 340)							_this55->y = v37->y;
            						}
HXLINE( 341)						{
HXLINE( 341)							 ::box2D::common::math::B2Vec2 _this56 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 341)							 ::box2D::common::math::B2Vec2 v38 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 341)							_this56->x = v38->x;
HXDLIN( 341)							_this56->y = v38->y;
            						}
HXLINE( 342)						{
HXLINE( 342)							 ::box2D::common::math::B2Vec2 _this57 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 342)							 ::box2D::common::math::B2Vec2 v39 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 342)							_this57->x = v39->x;
HXDLIN( 342)							_this57->y = v39->y;
            						}
HXLINE( 343)						{
HXLINE( 343)							 ::box2D::common::math::B2Vec2 _this58 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 343)							_this58->x = -(_this58->x);
HXDLIN( 343)							_this58->y = -(_this58->y);
            						}
            					}
            					else {
HXLINE( 348)						{
HXLINE( 348)							 ::box2D::common::math::B2Vec2 _this59 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 348)							 ::box2D::common::math::B2Vec2 v40 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 348)							_this59->x = v40->x;
HXDLIN( 348)							_this59->y = v40->y;
            						}
HXLINE( 349)						{
HXLINE( 349)							 ::box2D::common::math::B2Vec2 _this60 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 349)							_this60->x = -(_this60->x);
HXDLIN( 349)							_this60->y = -(_this60->y);
            						}
HXLINE( 350)						{
HXLINE( 350)							 ::box2D::common::math::B2Vec2 _this61 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 350)							 ::box2D::common::math::B2Vec2 v41 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 350)							_this61->x = v41->x;
HXDLIN( 350)							_this61->y = v41->y;
            						}
HXLINE( 351)						{
HXLINE( 351)							 ::box2D::common::math::B2Vec2 _this62 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 351)							 ::box2D::common::math::B2Vec2 v42 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal0;
HXDLIN( 351)							_this62->x = v42->x;
HXDLIN( 351)							_this62->y = v42->y;
            						}
HXLINE( 352)						{
HXLINE( 352)							 ::box2D::common::math::B2Vec2 _this63 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 352)							_this63->x = -(_this63->x);
HXDLIN( 352)							_this63->y = -(_this63->y);
            						}
            					}
            				}
            			}
            			else {
HXLINE( 357)				if (hasVertex3) {
HXLINE( 359)					if (convex2) {
HXLINE( 361)						bool _hx_tmp10;
HXDLIN( 361)						if (!((offset1 >= ((Float)0.0)))) {
HXLINE( 361)							_hx_tmp10 = (offset2 >= ((Float)0.0));
            						}
            						else {
HXLINE( 361)							_hx_tmp10 = true;
            						}
HXDLIN( 361)						this->m_front = _hx_tmp10;
HXLINE( 363)						if (this->m_front) {
HXLINE( 365)							{
HXLINE( 365)								 ::box2D::common::math::B2Vec2 _this64 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 365)								 ::box2D::common::math::B2Vec2 v43 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 365)								_this64->x = v43->x;
HXDLIN( 365)								_this64->y = v43->y;
            							}
HXLINE( 366)							{
HXLINE( 366)								 ::box2D::common::math::B2Vec2 _this65 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 366)								 ::box2D::common::math::B2Vec2 v44 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 366)								_this65->x = v44->x;
HXDLIN( 366)								_this65->y = v44->y;
            							}
HXLINE( 367)							{
HXLINE( 367)								 ::box2D::common::math::B2Vec2 _this66 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 367)								_this66->x = -(_this66->x);
HXDLIN( 367)								_this66->y = -(_this66->y);
            							}
HXLINE( 368)							{
HXLINE( 368)								 ::box2D::common::math::B2Vec2 _this67 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 368)								 ::box2D::common::math::B2Vec2 v45 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal2;
HXDLIN( 368)								_this67->x = v45->x;
HXDLIN( 368)								_this67->y = v45->y;
            							}
            						}
            						else {
HXLINE( 373)							{
HXLINE( 373)								 ::box2D::common::math::B2Vec2 _this68 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 373)								 ::box2D::common::math::B2Vec2 v46 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 373)								_this68->x = v46->x;
HXDLIN( 373)								_this68->y = v46->y;
            							}
HXLINE( 374)							{
HXLINE( 374)								 ::box2D::common::math::B2Vec2 _this69 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 374)								_this69->x = -(_this69->x);
HXDLIN( 374)								_this69->y = -(_this69->y);
            							}
HXLINE( 375)							{
HXLINE( 375)								 ::box2D::common::math::B2Vec2 _this70 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 375)								 ::box2D::common::math::B2Vec2 v47 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 375)								_this70->x = v47->x;
HXDLIN( 375)								_this70->y = v47->y;
            							}
HXLINE( 376)							{
HXLINE( 376)								 ::box2D::common::math::B2Vec2 _this71 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 376)								_this71->x = -(_this71->x);
HXDLIN( 376)								_this71->y = -(_this71->y);
            							}
HXLINE( 377)							{
HXLINE( 377)								 ::box2D::common::math::B2Vec2 _this72 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 377)								 ::box2D::common::math::B2Vec2 v48 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 377)								_this72->x = v48->x;
HXDLIN( 377)								_this72->y = v48->y;
            							}
            						}
            					}
            					else {
HXLINE( 383)						bool _hx_tmp11;
HXDLIN( 383)						if ((offset1 >= ((Float)0.0))) {
HXLINE( 383)							_hx_tmp11 = (offset2 >= ((Float)0.0));
            						}
            						else {
HXLINE( 383)							_hx_tmp11 = false;
            						}
HXDLIN( 383)						this->m_front = _hx_tmp11;
HXLINE( 385)						if (this->m_front) {
HXLINE( 387)							{
HXLINE( 387)								 ::box2D::common::math::B2Vec2 _this73 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 387)								 ::box2D::common::math::B2Vec2 v49 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 387)								_this73->x = v49->x;
HXDLIN( 387)								_this73->y = v49->y;
            							}
HXLINE( 388)							{
HXLINE( 388)								 ::box2D::common::math::B2Vec2 _this74 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 388)								 ::box2D::common::math::B2Vec2 v50 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 388)								_this74->x = v50->x;
HXDLIN( 388)								_this74->y = v50->y;
            							}
HXLINE( 389)							{
HXLINE( 389)								 ::box2D::common::math::B2Vec2 _this75 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 389)								_this75->x = -(_this75->x);
HXDLIN( 389)								_this75->y = -(_this75->y);
            							}
HXLINE( 390)							{
HXLINE( 390)								 ::box2D::common::math::B2Vec2 _this76 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 390)								 ::box2D::common::math::B2Vec2 v51 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 390)								_this76->x = v51->x;
HXDLIN( 390)								_this76->y = v51->y;
            							}
            						}
            						else {
HXLINE( 395)							{
HXLINE( 395)								 ::box2D::common::math::B2Vec2 _this77 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 395)								 ::box2D::common::math::B2Vec2 v52 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 395)								_this77->x = v52->x;
HXDLIN( 395)								_this77->y = v52->y;
            							}
HXLINE( 396)							{
HXLINE( 396)								 ::box2D::common::math::B2Vec2 _this78 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 396)								_this78->x = -(_this78->x);
HXDLIN( 396)								_this78->y = -(_this78->y);
            							}
HXLINE( 397)							{
HXLINE( 397)								 ::box2D::common::math::B2Vec2 _this79 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 397)								 ::box2D::common::math::B2Vec2 v53 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal2;
HXDLIN( 397)								_this79->x = v53->x;
HXDLIN( 397)								_this79->y = v53->y;
            							}
HXLINE( 398)							{
HXLINE( 398)								 ::box2D::common::math::B2Vec2 _this80 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 398)								_this80->x = -(_this80->x);
HXDLIN( 398)								_this80->y = -(_this80->y);
            							}
HXLINE( 399)							{
HXLINE( 399)								 ::box2D::common::math::B2Vec2 _this81 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 399)								 ::box2D::common::math::B2Vec2 v54 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 399)								_this81->x = v54->x;
HXDLIN( 399)								_this81->y = v54->y;
            							}
            						}
            					}
            				}
            				else {
HXLINE( 406)					this->m_front = (offset1 >= ((Float)0.0));
HXLINE( 408)					if (this->m_front) {
HXLINE( 410)						{
HXLINE( 410)							 ::box2D::common::math::B2Vec2 _this82 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 410)							 ::box2D::common::math::B2Vec2 v55 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 410)							_this82->x = v55->x;
HXDLIN( 410)							_this82->y = v55->y;
            						}
HXLINE( 411)						{
HXLINE( 411)							 ::box2D::common::math::B2Vec2 _this83 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 411)							 ::box2D::common::math::B2Vec2 v56 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 411)							_this83->x = v56->x;
HXDLIN( 411)							_this83->y = v56->y;
            						}
HXLINE( 412)						{
HXLINE( 412)							 ::box2D::common::math::B2Vec2 _this84 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 412)							_this84->x = -(_this84->x);
HXDLIN( 412)							_this84->y = -(_this84->y);
            						}
HXLINE( 413)						{
HXLINE( 413)							 ::box2D::common::math::B2Vec2 _this85 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 413)							 ::box2D::common::math::B2Vec2 v57 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 413)							_this85->x = v57->x;
HXDLIN( 413)							_this85->y = v57->y;
            						}
HXLINE( 414)						{
HXLINE( 414)							 ::box2D::common::math::B2Vec2 _this86 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 414)							_this86->x = -(_this86->x);
HXDLIN( 414)							_this86->y = -(_this86->y);
            						}
            					}
            					else {
HXLINE( 419)						{
HXLINE( 419)							 ::box2D::common::math::B2Vec2 _this87 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 419)							 ::box2D::common::math::B2Vec2 v58 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 419)							_this87->x = v58->x;
HXDLIN( 419)							_this87->y = v58->y;
            						}
HXLINE( 420)						{
HXLINE( 420)							 ::box2D::common::math::B2Vec2 _this88 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 420)							_this88->x = -(_this88->x);
HXDLIN( 420)							_this88->y = -(_this88->y);
            						}
HXLINE( 421)						{
HXLINE( 421)							 ::box2D::common::math::B2Vec2 _this89 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit;
HXDLIN( 421)							 ::box2D::common::math::B2Vec2 v59 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 421)							_this89->x = v59->x;
HXDLIN( 421)							_this89->y = v59->y;
            						}
HXLINE( 422)						{
HXLINE( 422)							 ::box2D::common::math::B2Vec2 _this90 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit;
HXDLIN( 422)							 ::box2D::common::math::B2Vec2 v60 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 422)							_this90->x = v60->x;
HXDLIN( 422)							_this90->y = v60->y;
            						}
            					}
            				}
            			}
            		}
HXLINE( 429)		::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->count = polygonB->m_vertexCount;
HXLINE( 431)		{
HXLINE( 431)			int _g1 = (int)0;
HXDLIN( 431)			int _g = polygonB->m_vertexCount;
HXDLIN( 431)			while((_g1 < _g)){
HXLINE( 431)				_g1 = (_g1 + (int)1);
HXDLIN( 431)				int i = (_g1 - (int)1);
HXLINE( 433)				 ::box2D::common::math::B2Transform _hx_tmp12 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_xf;
HXDLIN( 433)				this->multiplyTransformVector(_hx_tmp12,polygonB->m_vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >(),::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
HXLINE( 434)				{
HXLINE( 434)					 ::box2D::common::math::B2Vec2 _this91 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 434)					 ::box2D::common::math::B2Vec2 v61 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 434)					_this91->x = v61->x;
HXDLIN( 434)					_this91->y = v61->y;
            				}
HXLINE( 436)				 ::box2D::common::math::B2Mat22 _hx_tmp13 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_xf->R;
HXDLIN( 436)				this->multiplyRotationVector(_hx_tmp13,polygonB->m_normals->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >(),::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
HXLINE( 437)				{
HXLINE( 437)					 ::box2D::common::math::B2Vec2 _this92 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->normals->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 437)					 ::box2D::common::math::B2Vec2 v62 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 437)					_this92->x = v62->x;
HXDLIN( 437)					_this92->y = v62->y;
            				}
            			}
            		}
HXLINE( 442)		this->m_radius = (((Float)2.0) * ::box2D::common::B2Settings_obj::b2_polygonRadius);
HXLINE( 444)		manifold->m_pointCount = (int)0;
HXLINE( 446)		this->computeEdgeSeparation(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edgeAxis);
HXLINE( 449)		if (hx::IsEq( ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edgeAxis->type,::box2D::dynamics::contacts::Type_obj::UNKNOWN_dyn() )) {
HXLINE( 451)			return;
            		}
HXLINE( 454)		if ((::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edgeAxis->separation > this->m_radius)) {
HXLINE( 456)			return;
            		}
HXLINE( 459)		this->computePolygonSeparation(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::polygonAxis);
HXLINE( 461)		bool _hx_tmp14;
HXDLIN( 461)		if (hx::IsNotEq( ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::polygonAxis->type,::box2D::dynamics::contacts::Type_obj::UNKNOWN_dyn() )) {
HXLINE( 461)			_hx_tmp14 = (::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::polygonAxis->separation > this->m_radius);
            		}
            		else {
HXLINE( 461)			_hx_tmp14 = false;
            		}
HXDLIN( 461)		if (_hx_tmp14) {
HXLINE( 464)			return;
            		}
HXLINE( 470)		Float k_relativeTol = ((Float)0.98);
HXLINE( 471)		Float k_absoluteTol = ((Float)0.001);
HXLINE( 473)		 ::box2D::dynamics::contacts::EPAxis primaryAxis;
HXLINE( 475)		if (hx::IsEq( ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::polygonAxis->type,::box2D::dynamics::contacts::Type_obj::UNKNOWN_dyn() )) {
HXLINE( 477)			primaryAxis = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edgeAxis;
            		}
            		else {
HXLINE( 480)			Float _hx_tmp15 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::polygonAxis->separation;
HXDLIN( 480)			if ((_hx_tmp15 > ((k_relativeTol * ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edgeAxis->separation) + k_absoluteTol))) {
HXLINE( 482)				primaryAxis = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::polygonAxis;
            			}
            			else {
HXLINE( 487)				primaryAxis = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::edgeAxis;
            			}
            		}
HXLINE( 494)		if (hx::IsEq( primaryAxis->type,::box2D::dynamics::contacts::Type_obj::EDGE_A_dyn() )) {
HXLINE( 496)			manifold->m_type = (int)2;
HXLINE( 499)			int bestIndex = (int)0;
HXLINE( 500)			 ::box2D::common::math::B2Vec2 bestValue = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 500)			Float bestValue1 = ::box2D::common::math::B2Math_obj::dot(bestValue,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->normals->__get((int)0).StaticCast<  ::box2D::common::math::B2Vec2 >());
HXLINE( 502)			{
HXLINE( 502)				int _g11 = (int)1;
HXDLIN( 502)				int _g2 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->count;
HXDLIN( 502)				while((_g11 < _g2)){
HXLINE( 502)					_g11 = (_g11 + (int)1);
HXDLIN( 502)					int i1 = (_g11 - (int)1);
HXLINE( 504)					 ::box2D::common::math::B2Vec2 value = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal;
HXDLIN( 504)					Float value1 = ::box2D::common::math::B2Math_obj::dot(value,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->normals->__get(i1).StaticCast<  ::box2D::common::math::B2Vec2 >());
HXLINE( 506)					if ((value1 < bestValue1)) {
HXLINE( 508)						bestValue1 = value1;
HXLINE( 509)						bestIndex = i1;
            					}
            				}
            			}
HXLINE( 513)			int i11 = bestIndex;
HXLINE( 514)			int i2;
HXDLIN( 514)			if (((i11 + (int)1) < ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->count)) {
HXLINE( 514)				i2 = (i11 + (int)1);
            			}
            			else {
HXLINE( 514)				i2 = (int)0;
            			}
HXLINE( 516)			{
HXLINE( 516)				 ::box2D::common::math::B2Vec2 _this93 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v;
HXDLIN( 516)				 ::box2D::common::math::B2Vec2 v63 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->vertices->__get(i11).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 516)				_this93->x = v63->x;
HXDLIN( 516)				_this93->y = v63->y;
            			}
HXLINE( 517)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexA = (int)0;
HXLINE( 518)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexB = i11;
HXLINE( 519)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeA = ::box2D::collision::B2ContactID_obj::FACE;
HXLINE( 520)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeB = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 522)			{
HXLINE( 522)				 ::box2D::common::math::B2Vec2 _this94 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v;
HXDLIN( 522)				 ::box2D::common::math::B2Vec2 v64 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->vertices->__get(i2).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 522)				_this94->x = v64->x;
HXDLIN( 522)				_this94->y = v64->y;
            			}
HXLINE( 523)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexA = (int)0;
HXLINE( 524)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexB = i2;
HXLINE( 525)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeA = ::box2D::collision::B2ContactID_obj::FACE;
HXLINE( 526)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeB = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 528)			if (this->m_front) {
HXLINE( 530)				::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1 = (int)0;
HXLINE( 531)				::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i2 = (int)1;
HXLINE( 532)				{
HXLINE( 532)					 ::box2D::common::math::B2Vec2 _this95 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v1;
HXDLIN( 532)					 ::box2D::common::math::B2Vec2 v65 = this->m_v1;
HXDLIN( 532)					_this95->x = v65->x;
HXDLIN( 532)					_this95->y = v65->y;
            				}
HXLINE( 533)				{
HXLINE( 533)					 ::box2D::common::math::B2Vec2 _this96 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v2;
HXDLIN( 533)					 ::box2D::common::math::B2Vec2 v66 = this->m_v2;
HXDLIN( 533)					_this96->x = v66->x;
HXDLIN( 533)					_this96->y = v66->y;
            				}
HXLINE( 534)				{
HXLINE( 534)					 ::box2D::common::math::B2Vec2 _this97 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->normal;
HXDLIN( 534)					 ::box2D::common::math::B2Vec2 v67 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 534)					_this97->x = v67->x;
HXDLIN( 534)					_this97->y = v67->y;
            				}
            			}
            			else {
HXLINE( 539)				::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1 = (int)1;
HXLINE( 540)				::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i2 = (int)0;
HXLINE( 541)				{
HXLINE( 541)					 ::box2D::common::math::B2Vec2 _this98 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v1;
HXDLIN( 541)					 ::box2D::common::math::B2Vec2 v68 = this->m_v2;
HXDLIN( 541)					_this98->x = v68->x;
HXDLIN( 541)					_this98->y = v68->y;
            				}
HXLINE( 542)				{
HXLINE( 542)					 ::box2D::common::math::B2Vec2 _this99 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v2;
HXDLIN( 542)					 ::box2D::common::math::B2Vec2 v69 = this->m_v1;
HXDLIN( 542)					_this99->x = v69->x;
HXDLIN( 542)					_this99->y = v69->y;
            				}
HXLINE( 543)				{
HXLINE( 543)					 ::box2D::common::math::B2Vec2 _this100 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->normal;
HXDLIN( 543)					 ::box2D::common::math::B2Vec2 v70 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal1;
HXDLIN( 543)					_this100->x = v70->x;
HXDLIN( 543)					_this100->y = v70->y;
            				}
HXLINE( 544)				{
HXLINE( 544)					 ::box2D::common::math::B2Vec2 _this101 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->normal;
HXDLIN( 544)					_this101->x = -(_this101->x);
HXDLIN( 544)					_this101->y = -(_this101->y);
            				}
            			}
            		}
            		else {
HXLINE( 550)			manifold->m_type = (int)4;
HXLINE( 552)			{
HXLINE( 552)				 ::box2D::common::math::B2Vec2 _this102 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v;
HXDLIN( 552)				 ::box2D::common::math::B2Vec2 v71 = this->m_v1;
HXDLIN( 552)				_this102->x = v71->x;
HXDLIN( 552)				_this102->y = v71->y;
            			}
HXLINE( 553)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexA = (int)0;
HXLINE( 554)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexB = primaryAxis->index;
HXLINE( 555)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeA = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 556)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeB = ::box2D::collision::B2ContactID_obj::FACE;
HXLINE( 558)			{
HXLINE( 558)				 ::box2D::common::math::B2Vec2 _this103 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v;
HXDLIN( 558)				 ::box2D::common::math::B2Vec2 v72 = this->m_v2;
HXDLIN( 558)				_this103->x = v72->x;
HXDLIN( 558)				_this103->y = v72->y;
            			}
HXLINE( 559)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexA = (int)0;
HXLINE( 560)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexB = primaryAxis->index;
HXLINE( 561)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeA = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 562)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeB = ::box2D::collision::B2ContactID_obj::FACE;
HXLINE( 564)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1 = primaryAxis->index;
HXLINE( 565)			int _hx_tmp16;
HXDLIN( 565)			if (((::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1 + (int)1) < ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->count)) {
HXLINE( 565)				_hx_tmp16 = (::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1 + (int)1);
            			}
            			else {
HXLINE( 565)				_hx_tmp16 = (int)0;
            			}
HXDLIN( 565)			::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i2 = _hx_tmp16;
HXLINE( 566)			{
HXLINE( 566)				 ::box2D::common::math::B2Vec2 _this104 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v1;
HXDLIN( 566)				 ::box2D::common::math::B2Vec2 v73 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->vertices->__get(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 566)				_this104->x = v73->x;
HXDLIN( 566)				_this104->y = v73->y;
            			}
HXLINE( 567)			{
HXLINE( 567)				 ::box2D::common::math::B2Vec2 _this105 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v2;
HXDLIN( 567)				 ::box2D::common::math::B2Vec2 v74 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->vertices->__get(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i2).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 567)				_this105->x = v74->x;
HXDLIN( 567)				_this105->y = v74->y;
            			}
HXLINE( 568)			{
HXLINE( 568)				 ::box2D::common::math::B2Vec2 _this106 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->normal;
HXDLIN( 568)				 ::box2D::common::math::B2Vec2 v75 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->normals->__get(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 568)				_this106->x = v75->x;
HXDLIN( 568)				_this106->y = v75->y;
            			}
            		}
HXLINE( 573)		{
HXLINE( 573)			 ::box2D::common::math::B2Vec2 _this107 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideNormal1;
HXDLIN( 573)			Float y_3 = -(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->normal->x);
HXDLIN( 573)			_this107->x = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->normal->y;
HXDLIN( 573)			_this107->y = y_3;
            		}
HXLINE( 574)		{
HXLINE( 574)			 ::box2D::common::math::B2Vec2 _this108 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideNormal2;
HXDLIN( 574)			 ::box2D::common::math::B2Vec2 v76 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideNormal1;
HXDLIN( 574)			_this108->x = v76->x;
HXDLIN( 574)			_this108->y = v76->y;
            		}
HXLINE( 575)		{
HXLINE( 575)			 ::box2D::common::math::B2Vec2 _this109 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideNormal2;
HXDLIN( 575)			_this109->x = -(_this109->x);
HXDLIN( 575)			_this109->y = -(_this109->y);
            		}
HXLINE( 576)		::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideOffset1 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideNormal1,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v1);
HXLINE( 577)		::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideOffset2 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideNormal2,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v2);
HXLINE( 580)		int np = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipSegmentToLine(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints1,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::ie,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideNormal1,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideOffset1,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1);
HXLINE( 585)		if ((np < ::box2D::common::B2Settings_obj::b2_maxManifoldPoints)) {
HXLINE( 587)			return;
            		}
HXLINE( 591)		np = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipSegmentToLine(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints2,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints1,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideNormal2,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->sideOffset2,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i2);
HXLINE( 593)		if ((np < ::box2D::common::B2Settings_obj::b2_maxManifoldPoints)) {
HXLINE( 595)			return;
            		}
HXLINE( 599)		if (hx::IsEq( primaryAxis->type,::box2D::dynamics::contacts::Type_obj::EDGE_A_dyn() )) {
HXLINE( 601)			{
HXLINE( 601)				 ::box2D::common::math::B2Vec2 _this110 = manifold->m_localPlaneNormal;
HXDLIN( 601)				 ::box2D::common::math::B2Vec2 v77 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->normal;
HXDLIN( 601)				_this110->x = v77->x;
HXDLIN( 601)				_this110->y = v77->y;
            			}
HXLINE( 602)			{
HXLINE( 602)				 ::box2D::common::math::B2Vec2 _this111 = manifold->m_localPoint;
HXDLIN( 602)				 ::box2D::common::math::B2Vec2 v78 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v1;
HXDLIN( 602)				_this111->x = v78->x;
HXDLIN( 602)				_this111->y = v78->y;
            			}
            		}
            		else {
HXLINE( 607)			{
HXLINE( 607)				 ::box2D::common::math::B2Vec2 _this112 = manifold->m_localPlaneNormal;
HXDLIN( 607)				 ::box2D::common::math::B2Vec2 v79 = polygonB->m_normals->__get(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 607)				_this112->x = v79->x;
HXDLIN( 607)				_this112->y = v79->y;
            			}
HXLINE( 608)			{
HXLINE( 608)				 ::box2D::common::math::B2Vec2 _this113 = manifold->m_localPoint;
HXDLIN( 608)				 ::box2D::common::math::B2Vec2 v80 = polygonB->m_vertices->__get(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->i1).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 608)				_this113->x = v80->x;
HXDLIN( 608)				_this113->y = v80->y;
            			}
            		}
HXLINE( 613)		int pointCount = (int)0;
HXLINE( 615)		{
HXLINE( 615)			int _g12 = (int)0;
HXDLIN( 615)			int _g3 = ::box2D::common::B2Settings_obj::b2_maxManifoldPoints;
HXDLIN( 615)			while((_g12 < _g3)){
HXLINE( 615)				_g12 = (_g12 + (int)1);
HXDLIN( 615)				int i3 = (_g12 - (int)1);
HXLINE( 617)				{
HXLINE( 617)					 ::box2D::common::math::B2Vec2 _this114 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 617)					 ::box2D::common::math::B2Vec2 v81 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints2->__get(i3).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v;
HXDLIN( 617)					_this114->x = v81->x;
HXDLIN( 617)					_this114->y = v81->y;
            				}
HXLINE( 618)				::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp->subtract(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->v1);
HXLINE( 620)				Float separation = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::rf->normal,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
HXLINE( 622)				if ((separation <= this->m_radius)) {
HXLINE( 624)					 ::box2D::collision::B2ManifoldPoint cp = manifold->m_points->__get(pointCount).StaticCast<  ::box2D::collision::B2ManifoldPoint >();
HXLINE( 626)					if (hx::IsEq( primaryAxis->type,::box2D::dynamics::contacts::Type_obj::EDGE_A_dyn() )) {
HXLINE( 628)						{
HXLINE( 628)							 ::box2D::common::math::B2Vec2 _this115 = cp->m_localPoint;
HXDLIN( 628)							 ::box2D::common::math::B2Vec2 v82 = ::box2D::common::math::B2Math_obj::mulXT(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_xf,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints2->__get(i3).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v,null());
HXDLIN( 628)							_this115->x = v82->x;
HXDLIN( 628)							_this115->y = v82->y;
            						}
HXLINE( 629)						cp->m_id->set(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints2->__get(i3).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id);
            					}
            					else {
HXLINE( 634)						{
HXLINE( 634)							 ::box2D::common::math::B2Vec2 _this116 = cp->m_localPoint;
HXDLIN( 634)							 ::box2D::common::math::B2Vec2 v83 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints2->__get(i3).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v;
HXDLIN( 634)							_this116->x = v83->x;
HXDLIN( 634)							_this116->y = v83->y;
            						}
HXLINE( 635)						cp->m_id->typeA = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints2->__get(i3).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeB;
HXLINE( 636)						cp->m_id->typeB = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints2->__get(i3).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeA;
HXLINE( 637)						cp->m_id->indexA = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints2->__get(i3).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexB;
HXLINE( 638)						cp->m_id->indexB = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::clipPoints2->__get(i3).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexA;
            					}
HXLINE( 641)					pointCount = (pointCount + (int)1);
            				}
            			}
            		}
HXLINE( 645)		manifold->m_pointCount = pointCount;
            	}


HX_DEFINE_DYNAMIC_FUNC5(B2PolyAndEdgeContact_obj,b2CollidePolyAndEdge,(void))

void B2PolyAndEdgeContact_obj::computeEdgeSeparation( ::box2D::dynamics::contacts::EPAxis axis){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_649_computeEdgeSeparation)
HXLINE( 650)		axis->type = ::box2D::dynamics::contacts::Type_obj::EDGE_A_dyn();
HXLINE( 651)		int _hx_tmp;
HXDLIN( 651)		if (this->m_front) {
HXLINE( 651)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 651)			_hx_tmp = (int)1;
            		}
HXDLIN( 651)		axis->index = _hx_tmp;
HXLINE( 652)		axis->separation = ((Float)1.7976931348623158e+308);
HXLINE( 654)		{
HXLINE( 654)			int _g1 = (int)0;
HXDLIN( 654)			int _g = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->count;
HXDLIN( 654)			while((_g1 < _g)){
HXLINE( 654)				_g1 = (_g1 + (int)1);
HXDLIN( 654)				int i = (_g1 - (int)1);
HXLINE( 656)				{
HXLINE( 656)					 ::box2D::common::math::B2Vec2 _this = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 656)					 ::box2D::common::math::B2Vec2 v = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 656)					_this->x = v->x;
HXDLIN( 656)					_this->y = v->y;
            				}
HXLINE( 657)				::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp->subtract(this->m_v1);
HXLINE( 659)				Float s = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
HXLINE( 661)				if ((s < axis->separation)) {
HXLINE( 663)					axis->separation = s;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2PolyAndEdgeContact_obj,computeEdgeSeparation,(void))

void B2PolyAndEdgeContact_obj::computePolygonSeparation( ::box2D::dynamics::contacts::EPAxis axis){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_669_computePolygonSeparation)
HXLINE( 670)		axis->type = ::box2D::dynamics::contacts::Type_obj::UNKNOWN_dyn();
HXLINE( 671)		axis->index = (int)-1;
HXLINE( 672)		axis->separation = ((Float)-1.7976931348623157e+308);
HXLINE( 674)		{
HXLINE( 674)			 ::box2D::common::math::B2Vec2 _this = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::perp;
HXDLIN( 674)			Float y_ = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal->x;
HXDLIN( 674)			_this->x = -(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal->y);
HXDLIN( 674)			_this->y = y_;
            		}
HXLINE( 676)		{
HXLINE( 676)			int _g1 = (int)0;
HXDLIN( 676)			int _g = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->count;
HXDLIN( 676)			while((_g1 < _g)){
HXLINE( 676)				_g1 = (_g1 + (int)1);
HXDLIN( 676)				int i = (_g1 - (int)1);
HXLINE( 678)				{
HXLINE( 678)					 ::box2D::common::math::B2Vec2 _this1 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::n;
HXDLIN( 678)					 ::box2D::common::math::B2Vec2 v = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->normals->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 678)					_this1->x = v->x;
HXDLIN( 678)					_this1->y = v->y;
            				}
HXLINE( 679)				{
HXLINE( 679)					 ::box2D::common::math::B2Vec2 _this2 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::n;
HXDLIN( 679)					_this2->x = -(_this2->x);
HXDLIN( 679)					_this2->y = -(_this2->y);
            				}
HXLINE( 681)				{
HXLINE( 681)					 ::box2D::common::math::B2Vec2 _this3 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 681)					 ::box2D::common::math::B2Vec2 v1 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 681)					_this3->x = v1->x;
HXDLIN( 681)					_this3->y = v1->y;
            				}
HXLINE( 682)				::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp->subtract(this->m_v1);
HXLINE( 683)				Float s1 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::n,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
HXLINE( 685)				{
HXLINE( 685)					 ::box2D::common::math::B2Vec2 _this4 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 685)					 ::box2D::common::math::B2Vec2 v2 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_polygonB->vertices->__get(i).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 685)					_this4->x = v2->x;
HXDLIN( 685)					_this4->y = v2->y;
            				}
HXLINE( 686)				::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp->subtract(this->m_v2);
HXLINE( 687)				Float s2 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::n,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp);
HXLINE( 689)				Float s = ::Math_obj::min(s1,s2);
HXLINE( 691)				if ((s > this->m_radius)) {
HXLINE( 694)					axis->type = ::box2D::dynamics::contacts::Type_obj::EDGE_B_dyn();
HXLINE( 695)					axis->index = i;
HXLINE( 696)					axis->separation = s;
HXLINE( 704)					return;
            				}
HXLINE( 708)				if ((::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::n,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::perp) >= ((Float)0.0))) {
HXLINE( 710)					{
HXLINE( 710)						 ::box2D::common::math::B2Vec2 _this5 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 710)						 ::box2D::common::math::B2Vec2 v3 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::n;
HXDLIN( 710)						_this5->x = v3->x;
HXDLIN( 710)						_this5->y = v3->y;
            					}
HXLINE( 711)					::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp->subtract(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_upperLimit);
HXLINE( 713)					Float _hx_tmp = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal);
HXDLIN( 713)					if ((_hx_tmp < -(::box2D::common::B2Settings_obj::b2_angularSlop))) {
HXLINE( 715)						continue;
            					}
            				}
            				else {
HXLINE( 721)					{
HXLINE( 721)						 ::box2D::common::math::B2Vec2 _this6 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp;
HXDLIN( 721)						 ::box2D::common::math::B2Vec2 v4 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::n;
HXDLIN( 721)						_this6->x = v4->x;
HXDLIN( 721)						_this6->y = v4->y;
            					}
HXLINE( 722)					::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp->subtract(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_lowerLimit);
HXLINE( 724)					Float _hx_tmp1 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::m_normal);
HXDLIN( 724)					if ((_hx_tmp1 < -(::box2D::common::B2Settings_obj::b2_angularSlop))) {
HXLINE( 726)						continue;
            					}
            				}
HXLINE( 730)				if ((s > axis->separation)) {
HXLINE( 732)					axis->type = ::box2D::dynamics::contacts::Type_obj::EDGE_B_dyn();
HXLINE( 733)					axis->index = i;
HXLINE( 734)					axis->separation = s;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2PolyAndEdgeContact_obj,computePolygonSeparation,(void))

void B2PolyAndEdgeContact_obj::multiplyTransformsInverse( ::box2D::common::math::B2Transform A, ::box2D::common::math::B2Transform B, ::box2D::common::math::B2Transform out){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_791_multiplyTransformsInverse)
HXLINE( 793)		this->multiplyRotationsInverse(A->R,B->R,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::mat);
HXLINE( 796)		{
HXLINE( 796)			 ::box2D::common::math::B2Vec2 _this = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp2;
HXDLIN( 796)			 ::box2D::common::math::B2Vec2 v = B->position;
HXDLIN( 796)			_this->x = v->x;
HXDLIN( 796)			_this->y = v->y;
            		}
HXLINE( 797)		::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp2->subtract(A->position);
HXLINE( 798)		this->multiplyRotationVectorInverse(A->R,::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::temp2,out->position);
HXLINE( 800)		{
HXLINE( 800)			 ::box2D::common::math::B2Vec2 _this1 = out->R->col1;
HXDLIN( 800)			 ::box2D::common::math::B2Vec2 v1 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::mat->col1;
HXDLIN( 800)			_this1->x = v1->x;
HXDLIN( 800)			_this1->y = v1->y;
            		}
HXLINE( 801)		{
HXLINE( 801)			 ::box2D::common::math::B2Vec2 _this2 = out->R->col2;
HXDLIN( 801)			 ::box2D::common::math::B2Vec2 v2 = ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::mat->col2;
HXDLIN( 801)			_this2->x = v2->x;
HXDLIN( 801)			_this2->y = v2->y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2PolyAndEdgeContact_obj,multiplyTransformsInverse,(void))

void B2PolyAndEdgeContact_obj::multiplyRotationsInverse( ::box2D::common::math::B2Mat22 q, ::box2D::common::math::B2Mat22 r, ::box2D::common::math::B2Mat22 out){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_805_multiplyRotationsInverse)
HXLINE( 806)		Float _hx_tmp = (q->col1->x * r->col1->x);
HXDLIN( 806)		out->col1->x = (_hx_tmp + (q->col1->y * r->col1->y));
HXLINE( 807)		Float _hx_tmp1 = (q->col2->x * r->col1->x);
HXDLIN( 807)		out->col1->y = (_hx_tmp1 + (q->col2->y * r->col1->y));
HXLINE( 808)		Float _hx_tmp2 = (q->col1->x * r->col2->x);
HXDLIN( 808)		out->col2->x = (_hx_tmp2 + (q->col1->y * r->col2->y));
HXLINE( 809)		Float _hx_tmp3 = (q->col2->x * r->col2->x);
HXDLIN( 809)		out->col2->y = (_hx_tmp3 + (q->col2->y * r->col2->y));
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2PolyAndEdgeContact_obj,multiplyRotationsInverse,(void))

void B2PolyAndEdgeContact_obj::multiplyRotationVector( ::box2D::common::math::B2Mat22 q, ::box2D::common::math::B2Vec2 v, ::box2D::common::math::B2Vec2 out){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_813_multiplyRotationVector)
HXLINE( 814)		Float _hx_tmp = (q->col1->x * v->x);
HXDLIN( 814)		out->x = (_hx_tmp + (q->col2->x * v->y));
HXLINE( 815)		Float _hx_tmp1 = (q->col1->y * v->x);
HXDLIN( 815)		out->y = (_hx_tmp1 + (q->col2->y * v->y));
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2PolyAndEdgeContact_obj,multiplyRotationVector,(void))

void B2PolyAndEdgeContact_obj::multiplyRotationVectorInverse( ::box2D::common::math::B2Mat22 q, ::box2D::common::math::B2Vec2 v, ::box2D::common::math::B2Vec2 out){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_819_multiplyRotationVectorInverse)
HXLINE( 820)		Float _hx_tmp = (q->col1->x * v->x);
HXDLIN( 820)		out->x = (_hx_tmp + (q->col1->y * v->y));
HXLINE( 821)		Float _hx_tmp1 = (q->col2->x * v->x);
HXDLIN( 821)		out->y = (_hx_tmp1 + (q->col2->y * v->y));
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2PolyAndEdgeContact_obj,multiplyRotationVectorInverse,(void))

void B2PolyAndEdgeContact_obj::multiplyTransformVector( ::box2D::common::math::B2Transform T, ::box2D::common::math::B2Vec2 v, ::box2D::common::math::B2Vec2 out){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_825_multiplyTransformVector)
HXLINE( 826)		Float _hx_tmp = (T->R->col1->x * v->x);
HXDLIN( 826)		out->x = ((_hx_tmp + (T->R->col2->x * v->y)) + T->position->x);
HXLINE( 827)		Float _hx_tmp1 = (T->R->col1->y * v->x);
HXDLIN( 827)		out->y = ((_hx_tmp1 + (T->R->col2->y * v->y)) + T->position->y);
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2PolyAndEdgeContact_obj,multiplyTransformVector,(void))

 ::box2D::common::math::B2Transform B2PolyAndEdgeContact_obj::m_xf;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::temp;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::m_centroidB;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::m_lowerLimit;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::m_upperLimit;

 ::box2D::dynamics::contacts::TempPolygon B2PolyAndEdgeContact_obj::m_polygonB;

 ::box2D::dynamics::contacts::EPAxis B2PolyAndEdgeContact_obj::edgeAxis;

 ::box2D::dynamics::contacts::EPAxis B2PolyAndEdgeContact_obj::polygonAxis;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::perp;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::n;

 ::box2D::dynamics::contacts::ReferenceFace B2PolyAndEdgeContact_obj::rf;

 ::box2D::common::math::B2Mat22 B2PolyAndEdgeContact_obj::mat;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::temp1;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::temp2;

::Array< ::Dynamic> B2PolyAndEdgeContact_obj::ie;

::Array< ::Dynamic> B2PolyAndEdgeContact_obj::clipPoints1;

::Array< ::Dynamic> B2PolyAndEdgeContact_obj::clipPoints2;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::edge0;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::edge1;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::edge2;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::m_normal;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::m_normal0;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::m_normal1;

 ::box2D::common::math::B2Vec2 B2PolyAndEdgeContact_obj::m_normal2;

 ::box2D::dynamics::contacts::B2Contact B2PolyAndEdgeContact_obj::create( ::Dynamic allocator){
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_76_create)
HXDLIN(  76)		return  ::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(B2PolyAndEdgeContact_obj,create,return )

void B2PolyAndEdgeContact_obj::destroy( ::box2D::dynamics::contacts::B2Contact contact, ::Dynamic allocator){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_80_destroy)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(B2PolyAndEdgeContact_obj,destroy,(void))

int B2PolyAndEdgeContact_obj::clipSegmentToLine(::Array< ::Dynamic> vOut,::Array< ::Dynamic> vIn, ::box2D::common::math::B2Vec2 normal,Float offset,int vertexIndexA){
            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_747_clipSegmentToLine)
HXLINE( 749)		int numOut = (int)0;
HXLINE( 752)		Float distance0 = (::box2D::common::math::B2Math_obj::dot(normal,vIn->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v) - offset);
HXLINE( 753)		Float distance1 = (::box2D::common::math::B2Math_obj::dot(normal,vIn->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v) - offset);
HXLINE( 756)		if ((distance0 <= ((Float)0.0))) {
HXLINE( 758)			numOut = (numOut + (int)1);
HXDLIN( 758)			 ::box2D::dynamics::contacts::ClipVertex vOut1 = vOut->__get((numOut - (int)1)).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >();
HXDLIN( 758)			vOut1->set(vIn->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >());
            		}
HXLINE( 761)		if ((distance1 <= ((Float)0.0))) {
HXLINE( 763)			numOut = (numOut + (int)1);
HXDLIN( 763)			 ::box2D::dynamics::contacts::ClipVertex vOut2 = vOut->__get((numOut - (int)1)).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >();
HXDLIN( 763)			vOut2->set(vIn->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >());
            		}
HXLINE( 767)		if (((distance0 * distance1) < ((Float)0.0))) {
HXLINE( 770)			Float interp = ((Float)distance0 / (Float)(distance0 - distance1));
HXLINE( 773)			{
HXLINE( 773)				 ::box2D::common::math::B2Vec2 _this = vOut->__get(numOut).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v;
HXDLIN( 773)				 ::box2D::common::math::B2Vec2 v = vIn->__get((int)1).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v;
HXDLIN( 773)				_this->x = v->x;
HXDLIN( 773)				_this->y = v->y;
            			}
HXLINE( 774)			vOut->__get(numOut).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v->subtract(vIn->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v);
HXLINE( 775)			vOut->__get(numOut).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v->multiply(interp);
HXLINE( 776)			vOut->__get(numOut).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v->add(vIn->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->v);
HXLINE( 779)			vOut->__get(numOut).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexA = vertexIndexA;
HXLINE( 780)			vOut->__get(numOut).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexB = vIn->__get((int)0).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->indexB;
HXLINE( 781)			vOut->__get(numOut).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeA = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 782)			vOut->__get(numOut).StaticCast<  ::box2D::dynamics::contacts::ClipVertex >()->id->typeB = ::box2D::collision::B2ContactID_obj::FACE;
HXLINE( 784)			numOut = (numOut + (int)1);
            		}
HXLINE( 787)		return numOut;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(B2PolyAndEdgeContact_obj,clipSegmentToLine,return )


hx::ObjectPtr< B2PolyAndEdgeContact_obj > B2PolyAndEdgeContact_obj::__new() {
	hx::ObjectPtr< B2PolyAndEdgeContact_obj > __this = new B2PolyAndEdgeContact_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2PolyAndEdgeContact_obj > B2PolyAndEdgeContact_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2PolyAndEdgeContact_obj *__this = (B2PolyAndEdgeContact_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2PolyAndEdgeContact_obj), true, "box2D.dynamics.contacts.B2PolyAndEdgeContact"));
	*(void **)__this = B2PolyAndEdgeContact_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2PolyAndEdgeContact_obj::B2PolyAndEdgeContact_obj()
{
}

void B2PolyAndEdgeContact_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2PolyAndEdgeContact);
	HX_MARK_MEMBER_NAME(m_v0,"m_v0");
	HX_MARK_MEMBER_NAME(m_v1,"m_v1");
	HX_MARK_MEMBER_NAME(m_v2,"m_v2");
	HX_MARK_MEMBER_NAME(m_v3,"m_v3");
	HX_MARK_MEMBER_NAME(m_front,"m_front");
	HX_MARK_MEMBER_NAME(m_radius,"m_radius");
	 ::box2D::dynamics::contacts::B2Contact_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void B2PolyAndEdgeContact_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_v0,"m_v0");
	HX_VISIT_MEMBER_NAME(m_v1,"m_v1");
	HX_VISIT_MEMBER_NAME(m_v2,"m_v2");
	HX_VISIT_MEMBER_NAME(m_v3,"m_v3");
	HX_VISIT_MEMBER_NAME(m_front,"m_front");
	HX_VISIT_MEMBER_NAME(m_radius,"m_radius");
	 ::box2D::dynamics::contacts::B2Contact_obj::__Visit(HX_VISIT_ARG);
}

hx::Val B2PolyAndEdgeContact_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"m_v0") ) { return hx::Val( m_v0 ); }
		if (HX_FIELD_EQ(inName,"m_v1") ) { return hx::Val( m_v1 ); }
		if (HX_FIELD_EQ(inName,"m_v2") ) { return hx::Val( m_v2 ); }
		if (HX_FIELD_EQ(inName,"m_v3") ) { return hx::Val( m_v3 ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_front") ) { return hx::Val( m_front ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_radius") ) { return hx::Val( m_radius ); }
		if (HX_FIELD_EQ(inName,"evaluate") ) { return hx::Val( evaluate_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"b2CollidePolyAndEdge") ) { return hx::Val( b2CollidePolyAndEdge_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"computeEdgeSeparation") ) { return hx::Val( computeEdgeSeparation_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"multiplyRotationVector") ) { return hx::Val( multiplyRotationVector_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"multiplyTransformVector") ) { return hx::Val( multiplyTransformVector_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"computePolygonSeparation") ) { return hx::Val( computePolygonSeparation_dyn() ); }
		if (HX_FIELD_EQ(inName,"multiplyRotationsInverse") ) { return hx::Val( multiplyRotationsInverse_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"multiplyTransformsInverse") ) { return hx::Val( multiplyTransformsInverse_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"multiplyRotationVectorInverse") ) { return hx::Val( multiplyRotationVectorInverse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2PolyAndEdgeContact_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { outValue = ( n ); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"rf") ) { outValue = ( rf ); return true; }
		if (HX_FIELD_EQ(inName,"ie") ) { outValue = ( ie ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mat") ) { outValue = ( mat ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"m_xf") ) { outValue = ( m_xf ); return true; }
		if (HX_FIELD_EQ(inName,"temp") ) { outValue = ( temp ); return true; }
		if (HX_FIELD_EQ(inName,"perp") ) { outValue = ( perp ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"temp1") ) { outValue = ( temp1 ); return true; }
		if (HX_FIELD_EQ(inName,"temp2") ) { outValue = ( temp2 ); return true; }
		if (HX_FIELD_EQ(inName,"edge0") ) { outValue = ( edge0 ); return true; }
		if (HX_FIELD_EQ(inName,"edge1") ) { outValue = ( edge1 ); return true; }
		if (HX_FIELD_EQ(inName,"edge2") ) { outValue = ( edge2 ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { outValue = destroy_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"edgeAxis") ) { outValue = ( edgeAxis ); return true; }
		if (HX_FIELD_EQ(inName,"m_normal") ) { outValue = ( m_normal ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_normal0") ) { outValue = ( m_normal0 ); return true; }
		if (HX_FIELD_EQ(inName,"m_normal1") ) { outValue = ( m_normal1 ); return true; }
		if (HX_FIELD_EQ(inName,"m_normal2") ) { outValue = ( m_normal2 ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_polygonB") ) { outValue = ( m_polygonB ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_centroidB") ) { outValue = ( m_centroidB ); return true; }
		if (HX_FIELD_EQ(inName,"polygonAxis") ) { outValue = ( polygonAxis ); return true; }
		if (HX_FIELD_EQ(inName,"clipPoints1") ) { outValue = ( clipPoints1 ); return true; }
		if (HX_FIELD_EQ(inName,"clipPoints2") ) { outValue = ( clipPoints2 ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_lowerLimit") ) { outValue = ( m_lowerLimit ); return true; }
		if (HX_FIELD_EQ(inName,"m_upperLimit") ) { outValue = ( m_upperLimit ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"clipSegmentToLine") ) { outValue = clipSegmentToLine_dyn(); return true; }
	}
	return false;
}

hx::Val B2PolyAndEdgeContact_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"m_v0") ) { m_v0=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v1") ) { m_v1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v2") ) { m_v2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v3") ) { m_v3=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_front") ) { m_front=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_radius") ) { m_radius=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2PolyAndEdgeContact_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { n=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"rf") ) { rf=ioValue.Cast<  ::box2D::dynamics::contacts::ReferenceFace >(); return true; }
		if (HX_FIELD_EQ(inName,"ie") ) { ie=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mat") ) { mat=ioValue.Cast<  ::box2D::common::math::B2Mat22 >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"m_xf") ) { m_xf=ioValue.Cast<  ::box2D::common::math::B2Transform >(); return true; }
		if (HX_FIELD_EQ(inName,"temp") ) { temp=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"perp") ) { perp=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"temp1") ) { temp1=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"temp2") ) { temp2=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"edge0") ) { edge0=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"edge1") ) { edge1=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"edge2") ) { edge2=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"edgeAxis") ) { edgeAxis=ioValue.Cast<  ::box2D::dynamics::contacts::EPAxis >(); return true; }
		if (HX_FIELD_EQ(inName,"m_normal") ) { m_normal=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_normal0") ) { m_normal0=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"m_normal1") ) { m_normal1=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"m_normal2") ) { m_normal2=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_polygonB") ) { m_polygonB=ioValue.Cast<  ::box2D::dynamics::contacts::TempPolygon >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_centroidB") ) { m_centroidB=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"polygonAxis") ) { polygonAxis=ioValue.Cast<  ::box2D::dynamics::contacts::EPAxis >(); return true; }
		if (HX_FIELD_EQ(inName,"clipPoints1") ) { clipPoints1=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"clipPoints2") ) { clipPoints2=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_lowerLimit") ) { m_lowerLimit=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"m_upperLimit") ) { m_upperLimit=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
	}
	return false;
}

void B2PolyAndEdgeContact_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_v0","\xcc","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_front","\x17","\xf0","\x18","\xb7"));
	outFields->push(HX_HCSTRING("m_radius","\x24","\x79","\xe8","\x79"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2PolyAndEdgeContact_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PolyAndEdgeContact_obj,m_v0),HX_HCSTRING("m_v0","\xcc","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PolyAndEdgeContact_obj,m_v1),HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PolyAndEdgeContact_obj,m_v2),HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PolyAndEdgeContact_obj,m_v3),HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48")},
	{hx::fsBool,(int)offsetof(B2PolyAndEdgeContact_obj,m_front),HX_HCSTRING("m_front","\x17","\xf0","\x18","\xb7")},
	{hx::fsFloat,(int)offsetof(B2PolyAndEdgeContact_obj,m_radius),HX_HCSTRING("m_radius","\x24","\x79","\xe8","\x79")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2PolyAndEdgeContact_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Transform*/ ,(void *) &B2PolyAndEdgeContact_obj::m_xf,HX_HCSTRING("m_xf","\xc0","\xc0","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::temp,HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::m_centroidB,HX_HCSTRING("m_centroidB","\x70","\x7e","\x94","\x8b")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::m_lowerLimit,HX_HCSTRING("m_lowerLimit","\x4c","\x2b","\x6b","\x02")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::m_upperLimit,HX_HCSTRING("m_upperLimit","\x4b","\xac","\x99","\x07")},
	{hx::fsObject /*::box2D::dynamics::contacts::TempPolygon*/ ,(void *) &B2PolyAndEdgeContact_obj::m_polygonB,HX_HCSTRING("m_polygonB","\xda","\x29","\x9c","\x53")},
	{hx::fsObject /*::box2D::dynamics::contacts::EPAxis*/ ,(void *) &B2PolyAndEdgeContact_obj::edgeAxis,HX_HCSTRING("edgeAxis","\x7e","\x73","\xd6","\x50")},
	{hx::fsObject /*::box2D::dynamics::contacts::EPAxis*/ ,(void *) &B2PolyAndEdgeContact_obj::polygonAxis,HX_HCSTRING("polygonAxis","\x3b","\x10","\x6f","\x66")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::perp,HX_HCSTRING("perp","\xf3","\xec","\x54","\x4a")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::n,HX_HCSTRING("n","\x6e","\x00","\x00","\x00")},
	{hx::fsObject /*::box2D::dynamics::contacts::ReferenceFace*/ ,(void *) &B2PolyAndEdgeContact_obj::rf,HX_HCSTRING("rf","\xb4","\x63","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Mat22*/ ,(void *) &B2PolyAndEdgeContact_obj::mat,HX_HCSTRING("mat","\xa0","\x0a","\x53","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::temp1,HX_HCSTRING("temp1","\x9d","\xee","\x90","\x0d")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::temp2,HX_HCSTRING("temp2","\x9e","\xee","\x90","\x0d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &B2PolyAndEdgeContact_obj::ie,HX_HCSTRING("ie","\xdc","\x5b","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &B2PolyAndEdgeContact_obj::clipPoints1,HX_HCSTRING("clipPoints1","\xbe","\xff","\xf6","\x9e")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &B2PolyAndEdgeContact_obj::clipPoints2,HX_HCSTRING("clipPoints2","\xbf","\xff","\xf6","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::edge0,HX_HCSTRING("edge0","\x53","\x6d","\xe0","\x69")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::edge1,HX_HCSTRING("edge1","\x54","\x6d","\xe0","\x69")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::edge2,HX_HCSTRING("edge2","\x55","\x6d","\xe0","\x69")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::m_normal,HX_HCSTRING("m_normal","\xf9","\x1a","\x5b","\xf9")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::m_normal0,HX_HCSTRING("m_normal0","\x17","\x7f","\x5c","\x36")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::m_normal1,HX_HCSTRING("m_normal1","\x18","\x7f","\x5c","\x36")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2PolyAndEdgeContact_obj::m_normal2,HX_HCSTRING("m_normal2","\x19","\x7f","\x5c","\x36")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2PolyAndEdgeContact_obj_sMemberFields[] = {
	HX_HCSTRING("m_v0","\xcc","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48"),
	HX_HCSTRING("m_front","\x17","\xf0","\x18","\xb7"),
	HX_HCSTRING("m_radius","\x24","\x79","\xe8","\x79"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("evaluate","\x59","\x60","\x50","\x01"),
	HX_HCSTRING("b2CollidePolyAndEdge","\x9a","\x4c","\xe6","\xaa"),
	HX_HCSTRING("computeEdgeSeparation","\xba","\x20","\x0d","\xc8"),
	HX_HCSTRING("computePolygonSeparation","\xe9","\xad","\x09","\x88"),
	HX_HCSTRING("multiplyTransformsInverse","\x25","\x66","\x34","\xf3"),
	HX_HCSTRING("multiplyRotationsInverse","\xff","\xa8","\x23","\x8e"),
	HX_HCSTRING("multiplyRotationVector","\xe5","\x51","\xc3","\xe4"),
	HX_HCSTRING("multiplyRotationVectorInverse","\x4b","\x58","\x1b","\xb5"),
	HX_HCSTRING("multiplyTransformVector","\x8b","\x59","\x46","\xdd"),
	::String(null()) };

static void B2PolyAndEdgeContact_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_xf,"m_xf");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::temp,"temp");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_centroidB,"m_centroidB");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_lowerLimit,"m_lowerLimit");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_upperLimit,"m_upperLimit");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_polygonB,"m_polygonB");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::edgeAxis,"edgeAxis");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::polygonAxis,"polygonAxis");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::perp,"perp");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::n,"n");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::rf,"rf");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::mat,"mat");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::temp1,"temp1");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::temp2,"temp2");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::ie,"ie");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::clipPoints1,"clipPoints1");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::clipPoints2,"clipPoints2");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::edge0,"edge0");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::edge1,"edge1");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::edge2,"edge2");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_normal,"m_normal");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_normal0,"m_normal0");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_normal1,"m_normal1");
	HX_MARK_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_normal2,"m_normal2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2PolyAndEdgeContact_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_xf,"m_xf");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::temp,"temp");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_centroidB,"m_centroidB");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_lowerLimit,"m_lowerLimit");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_upperLimit,"m_upperLimit");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_polygonB,"m_polygonB");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::edgeAxis,"edgeAxis");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::polygonAxis,"polygonAxis");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::perp,"perp");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::n,"n");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::rf,"rf");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::mat,"mat");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::temp1,"temp1");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::temp2,"temp2");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::ie,"ie");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::clipPoints1,"clipPoints1");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::clipPoints2,"clipPoints2");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::edge0,"edge0");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::edge1,"edge1");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::edge2,"edge2");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_normal,"m_normal");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_normal0,"m_normal0");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_normal1,"m_normal1");
	HX_VISIT_MEMBER_NAME(B2PolyAndEdgeContact_obj::m_normal2,"m_normal2");
};

#endif

hx::Class B2PolyAndEdgeContact_obj::__mClass;

static ::String B2PolyAndEdgeContact_obj_sStaticFields[] = {
	HX_HCSTRING("m_xf","\xc0","\xc0","\x54","\x48"),
	HX_HCSTRING("temp","\x14","\xc3","\xf9","\x4c"),
	HX_HCSTRING("m_centroidB","\x70","\x7e","\x94","\x8b"),
	HX_HCSTRING("m_lowerLimit","\x4c","\x2b","\x6b","\x02"),
	HX_HCSTRING("m_upperLimit","\x4b","\xac","\x99","\x07"),
	HX_HCSTRING("m_polygonB","\xda","\x29","\x9c","\x53"),
	HX_HCSTRING("edgeAxis","\x7e","\x73","\xd6","\x50"),
	HX_HCSTRING("polygonAxis","\x3b","\x10","\x6f","\x66"),
	HX_HCSTRING("perp","\xf3","\xec","\x54","\x4a"),
	HX_HCSTRING("n","\x6e","\x00","\x00","\x00"),
	HX_HCSTRING("rf","\xb4","\x63","\x00","\x00"),
	HX_HCSTRING("mat","\xa0","\x0a","\x53","\x00"),
	HX_HCSTRING("temp1","\x9d","\xee","\x90","\x0d"),
	HX_HCSTRING("temp2","\x9e","\xee","\x90","\x0d"),
	HX_HCSTRING("ie","\xdc","\x5b","\x00","\x00"),
	HX_HCSTRING("clipPoints1","\xbe","\xff","\xf6","\x9e"),
	HX_HCSTRING("clipPoints2","\xbf","\xff","\xf6","\x9e"),
	HX_HCSTRING("edge0","\x53","\x6d","\xe0","\x69"),
	HX_HCSTRING("edge1","\x54","\x6d","\xe0","\x69"),
	HX_HCSTRING("edge2","\x55","\x6d","\xe0","\x69"),
	HX_HCSTRING("m_normal","\xf9","\x1a","\x5b","\xf9"),
	HX_HCSTRING("m_normal0","\x17","\x7f","\x5c","\x36"),
	HX_HCSTRING("m_normal1","\x18","\x7f","\x5c","\x36"),
	HX_HCSTRING("m_normal2","\x19","\x7f","\x5c","\x36"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("clipSegmentToLine","\x32","\xee","\x6b","\x91"),
	::String(null())
};

void B2PolyAndEdgeContact_obj::__register()
{
	hx::Object *dummy = new B2PolyAndEdgeContact_obj;
	B2PolyAndEdgeContact_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.contacts.B2PolyAndEdgeContact","\xda","\x91","\xfc","\x6a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2PolyAndEdgeContact_obj::__GetStatic;
	__mClass->mSetStaticField = &B2PolyAndEdgeContact_obj::__SetStatic;
	__mClass->mMarkFunc = B2PolyAndEdgeContact_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2PolyAndEdgeContact_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2PolyAndEdgeContact_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2PolyAndEdgeContact_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2PolyAndEdgeContact_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2PolyAndEdgeContact_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2PolyAndEdgeContact_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2PolyAndEdgeContact_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_37_boot)
HXDLIN(  37)		m_xf =  ::box2D::common::math::B2Transform_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_38_boot)
HXDLIN(  38)		temp =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_39_boot)
HXDLIN(  39)		m_centroidB =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_40_boot)
HXDLIN(  40)		m_lowerLimit =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_41_boot)
HXDLIN(  41)		m_upperLimit =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_42_boot)
HXDLIN(  42)		m_polygonB =  ::box2D::dynamics::contacts::TempPolygon_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_43_boot)
HXDLIN(  43)		edgeAxis =  ::box2D::dynamics::contacts::EPAxis_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_44_boot)
HXDLIN(  44)		polygonAxis =  ::box2D::dynamics::contacts::EPAxis_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_45_boot)
HXDLIN(  45)		perp =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_46_boot)
HXDLIN(  46)		n =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_47_boot)
HXDLIN(  47)		rf =  ::box2D::dynamics::contacts::ReferenceFace_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_49_boot)
HXDLIN(  49)		mat =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_50_boot)
HXDLIN(  50)		temp1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_51_boot)
HXDLIN(  51)		temp2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_53_boot)
HXDLIN(  53)			 ::box2D::dynamics::contacts::ClipVertex _hx_tmp =  ::box2D::dynamics::contacts::ClipVertex_obj::__alloc( HX_CTX );
HXDLIN(  53)			return ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1, ::box2D::dynamics::contacts::ClipVertex_obj::__alloc( HX_CTX ));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_53_boot)
HXDLIN(  53)		ie =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_54_boot)
HXDLIN(  54)			 ::box2D::dynamics::contacts::ClipVertex _hx_tmp =  ::box2D::dynamics::contacts::ClipVertex_obj::__alloc( HX_CTX );
HXDLIN(  54)			return ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1, ::box2D::dynamics::contacts::ClipVertex_obj::__alloc( HX_CTX ));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_54_boot)
HXDLIN(  54)		clipPoints1 =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_55_boot)
HXDLIN(  55)			 ::box2D::dynamics::contacts::ClipVertex _hx_tmp =  ::box2D::dynamics::contacts::ClipVertex_obj::__alloc( HX_CTX );
HXDLIN(  55)			return ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1, ::box2D::dynamics::contacts::ClipVertex_obj::__alloc( HX_CTX ));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_55_boot)
HXDLIN(  55)		clipPoints2 =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_62_boot)
HXDLIN(  62)		edge0 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_63_boot)
HXDLIN(  63)		edge1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_64_boot)
HXDLIN(  64)		edge2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_66_boot)
HXDLIN(  66)		m_normal =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_67_boot)
HXDLIN(  67)		m_normal0 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_68_boot)
HXDLIN(  68)		m_normal1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_652d8a4e344cb5f4_69_boot)
HXDLIN(  69)		m_normal2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts
