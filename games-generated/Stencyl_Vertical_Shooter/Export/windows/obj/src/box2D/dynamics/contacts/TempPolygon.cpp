// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_TempPolygon
#include <box2D/dynamics/contacts/TempPolygon.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9e233794d432bf95_838_new,"box2D.dynamics.contacts.TempPolygon","new",0xe07e4886,"box2D.dynamics.contacts.TempPolygon.new","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",838,0x86a2ad23)
namespace box2D{
namespace dynamics{
namespace contacts{

void TempPolygon_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_9e233794d432bf95_838_new)
HXLINE( 839)		this->vertices = ::Array_obj< ::Dynamic>::__new();
HXLINE( 840)		this->normals = ::Array_obj< ::Dynamic>::__new();
HXLINE( 842)		{
HXLINE( 842)			int _g = (int)0;
HXDLIN( 842)			while((_g < (int)32)){
HXLINE( 842)				_g = (_g + (int)1);
HXDLIN( 842)				int i = (_g - (int)1);
HXLINE( 844)				::Array< ::Dynamic> _hx_tmp = this->vertices;
HXDLIN( 844)				_hx_tmp->push( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 845)				::Array< ::Dynamic> _hx_tmp1 = this->normals;
HXDLIN( 845)				_hx_tmp1->push( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null()));
            			}
            		}
            	}

Dynamic TempPolygon_obj::__CreateEmpty() { return new TempPolygon_obj; }

void *TempPolygon_obj::_hx_vtable = 0;

Dynamic TempPolygon_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TempPolygon_obj > _hx_result = new TempPolygon_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TempPolygon_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x38850846;
}


hx::ObjectPtr< TempPolygon_obj > TempPolygon_obj::__new() {
	hx::ObjectPtr< TempPolygon_obj > __this = new TempPolygon_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TempPolygon_obj > TempPolygon_obj::__alloc(hx::Ctx *_hx_ctx) {
	TempPolygon_obj *__this = (TempPolygon_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TempPolygon_obj), true, "box2D.dynamics.contacts.TempPolygon"));
	*(void **)__this = TempPolygon_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TempPolygon_obj::TempPolygon_obj()
{
}

void TempPolygon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TempPolygon);
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_MEMBER_NAME(normals,"normals");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_END_CLASS();
}

void TempPolygon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
	HX_VISIT_MEMBER_NAME(normals,"normals");
	HX_VISIT_MEMBER_NAME(count,"count");
}

hx::Val TempPolygon_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"normals") ) { return hx::Val( normals ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { return hx::Val( vertices ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TempPolygon_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"normals") ) { normals=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TempPolygon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"));
	outFields->push(HX_HCSTRING("normals","\x6c","\x70","\xda","\x2b"));
	outFields->push(HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TempPolygon_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TempPolygon_obj,vertices),HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TempPolygon_obj,normals),HX_HCSTRING("normals","\x6c","\x70","\xda","\x2b")},
	{hx::fsInt,(int)offsetof(TempPolygon_obj,count),HX_HCSTRING("count","\xcf","\x44","\x63","\x4a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TempPolygon_obj_sStaticStorageInfo = 0;
#endif

static ::String TempPolygon_obj_sMemberFields[] = {
	HX_HCSTRING("vertices","\xf9","\xbf","\x15","\x6a"),
	HX_HCSTRING("normals","\x6c","\x70","\xda","\x2b"),
	HX_HCSTRING("count","\xcf","\x44","\x63","\x4a"),
	::String(null()) };

static void TempPolygon_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TempPolygon_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TempPolygon_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TempPolygon_obj::__mClass,"__mClass");
};

#endif

hx::Class TempPolygon_obj::__mClass;

void TempPolygon_obj::__register()
{
	hx::Object *dummy = new TempPolygon_obj;
	TempPolygon_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.contacts.TempPolygon","\x94","\x4d","\xca","\x82");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TempPolygon_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TempPolygon_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TempPolygon_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TempPolygon_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TempPolygon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TempPolygon_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts
