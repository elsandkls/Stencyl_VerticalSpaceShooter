// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_box2D_collision_B2Manifold
#include <box2D/collision/B2Manifold.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactImpulse
#include <box2D/dynamics/B2ContactImpulse.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactListener
#include <box2D/dynamics/B2ContactListener.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Region
#include <com/stencyl/models/Region.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Terrain
#include <com/stencyl/models/Terrain.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_Collision
#include <com/stencyl/models/actor/Collision.h>
#endif
#ifndef INCLUDED_com_stencyl_models_actor_CollisionPoint
#include <com/stencyl/models/actor/CollisionPoint.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Collection
#include <de/polygonal/ds/Collection.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Hashable
#include <de/polygonal/ds/Hashable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntHashTable
#include <de/polygonal/ds/IntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_IntIntHashTable
#include <de/polygonal/ds/IntIntHashTable.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Itr
#include <de/polygonal/ds/Itr.h>
#endif
#ifndef INCLUDED_de_polygonal_ds_Map
#include <de/polygonal/ds/Map.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_40a8ad4f39337b79_45_new,"box2D.dynamics.B2ContactListener","new",0xf649c72d,"box2D.dynamics.B2ContactListener.new","box2D/dynamics/B2ContactListener.hx",45,0xeea1a4c3)
HX_LOCAL_STACK_FRAME(_hx_pos_40a8ad4f39337b79_55_beginContact,"box2D.dynamics.B2ContactListener","beginContact",0x0eb2870a,"box2D.dynamics.B2ContactListener.beginContact","box2D/dynamics/B2ContactListener.hx",55,0xeea1a4c3)
HX_LOCAL_STACK_FRAME(_hx_pos_40a8ad4f39337b79_92_endContact,"box2D.dynamics.B2ContactListener","endContact",0xe950ccd8,"box2D.dynamics.B2ContactListener.endContact","box2D/dynamics/B2ContactListener.hx",92,0xeea1a4c3)
HX_LOCAL_STACK_FRAME(_hx_pos_40a8ad4f39337b79_170_preSolve,"box2D.dynamics.B2ContactListener","preSolve",0x1476b26f,"box2D.dynamics.B2ContactListener.preSolve","box2D/dynamics/B2ContactListener.hx",170,0xeea1a4c3)
HX_LOCAL_STACK_FRAME(_hx_pos_40a8ad4f39337b79_181_postSolve,"box2D.dynamics.B2ContactListener","postSolve",0x827d5d8c,"box2D.dynamics.B2ContactListener.postSolve","box2D/dynamics/B2ContactListener.hx",181,0xeea1a4c3)
HX_LOCAL_STACK_FRAME(_hx_pos_40a8ad4f39337b79_44_boot,"box2D.dynamics.B2ContactListener","boot",0x825d80c5,"box2D.dynamics.B2ContactListener.boot","box2D/dynamics/B2ContactListener.hx",44,0xeea1a4c3)
HX_LOCAL_STACK_FRAME(_hx_pos_40a8ad4f39337b79_183_boot,"box2D.dynamics.B2ContactListener","boot",0x825d80c5,"box2D.dynamics.B2ContactListener.boot","box2D/dynamics/B2ContactListener.hx",183,0xeea1a4c3)
namespace box2D{
namespace dynamics{

void B2ContactListener_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_40a8ad4f39337b79_45_new)
            	}

Dynamic B2ContactListener_obj::__CreateEmpty() { return new B2ContactListener_obj; }

void *B2ContactListener_obj::_hx_vtable = 0;

Dynamic B2ContactListener_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2ContactListener_obj > _hx_result = new B2ContactListener_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2ContactListener_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x25a76a5b;
}

void B2ContactListener_obj::beginContact( ::box2D::dynamics::contacts::B2Contact contact){
            	HX_STACKFRAME(&_hx_pos_40a8ad4f39337b79_55_beginContact)
HXLINE(  57)		if ((::box2D::dynamics::B2ContactListener_obj::KEY_LOCK > (int)2147483647)) {
HXLINE(  59)			::box2D::dynamics::B2ContactListener_obj::KEY_LOCK = (int)-2147483648;
            		}
HXLINE(  62)		contact->key = ::box2D::dynamics::B2ContactListener_obj::KEY_LOCK++;
HXLINE(  64)		 ::com::stencyl::models::Actor a1 = contact->getFixtureA()->getUserData();
HXLINE(  65)		 ::com::stencyl::models::Actor a2 = contact->getFixtureB()->getUserData();
HXLINE(  67)		bool r1 = ::Std_obj::is(a1,hx::ClassOf< ::com::stencyl::models::Region >());
HXLINE(  68)		bool r2 = ::Std_obj::is(a2,hx::ClassOf< ::com::stencyl::models::Region >());
HXLINE(  70)		bool _hx_tmp;
HXDLIN(  70)		if (r1) {
HXLINE(  70)			bool _hx_tmp1;
HXDLIN(  70)			if (!(r2)) {
HXLINE(  70)				_hx_tmp1 = ::Std_obj::is(a2,hx::ClassOf< ::com::stencyl::models::Terrain >());
            			}
            			else {
HXLINE(  70)				_hx_tmp1 = true;
            			}
HXDLIN(  70)			_hx_tmp = !(_hx_tmp1);
            		}
            		else {
HXLINE(  70)			_hx_tmp = false;
            		}
HXDLIN(  70)		if (_hx_tmp) {
HXLINE(  72)			hx::TCast<  ::com::stencyl::models::Region >::cast(a1)->addActor(a2);
HXLINE(  73)			if (hx::IsNotNull( a2->regionContacts )) {
HXLINE(  73)				a2->regionContacts->set(contact->key,contact);
            			}
HXLINE(  74)			return;
            		}
HXLINE(  77)		bool _hx_tmp2;
HXDLIN(  77)		if (r2) {
HXLINE(  77)			bool _hx_tmp3;
HXDLIN(  77)			if (!(r1)) {
HXLINE(  77)				_hx_tmp3 = ::Std_obj::is(a1,hx::ClassOf< ::com::stencyl::models::Terrain >());
            			}
            			else {
HXLINE(  77)				_hx_tmp3 = true;
            			}
HXDLIN(  77)			_hx_tmp2 = !(_hx_tmp3);
            		}
            		else {
HXLINE(  77)			_hx_tmp2 = false;
            		}
HXDLIN(  77)		if (_hx_tmp2) {
HXLINE(  79)			hx::TCast<  ::com::stencyl::models::Region >::cast(a2)->addActor(a1);
HXLINE(  80)			if (hx::IsNotNull( a1->regionContacts )) {
HXLINE(  80)				a1->regionContacts->set(contact->key,contact);
            			}
HXLINE(  81)			return;
            		}
HXLINE(  84)		if (hx::IsNotNull( a1->contacts )) {
HXLINE(  84)			a1->contacts->set(contact->key,contact);
HXDLIN(  84)			a1->contactCount++;
            		}
HXLINE(  85)		if (hx::IsNotNull( a2->contacts )) {
HXLINE(  85)			a2->contacts->set(contact->key,contact);
HXDLIN(  85)			a2->contactCount++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2ContactListener_obj,beginContact,(void))

void B2ContactListener_obj::endContact( ::box2D::dynamics::contacts::B2Contact contact){
            	HX_STACKFRAME(&_hx_pos_40a8ad4f39337b79_92_endContact)
HXLINE(  93)		 ::com::stencyl::models::Actor a1 = contact->getFixtureA()->getUserData();
HXLINE(  94)		 ::com::stencyl::models::Actor a2 = contact->getFixtureB()->getUserData();
HXLINE(  96)		bool r1 = ::Std_obj::is(a1,hx::ClassOf< ::com::stencyl::models::Region >());
HXLINE(  97)		bool r2 = ::Std_obj::is(a2,hx::ClassOf< ::com::stencyl::models::Region >());
HXLINE(  99)		bool _hx_tmp;
HXDLIN(  99)		if (r1) {
HXLINE(  99)			_hx_tmp = !(r2);
            		}
            		else {
HXLINE(  99)			_hx_tmp = false;
            		}
HXDLIN(  99)		if (_hx_tmp) {
HXLINE( 101)			bool inRegion = false;
HXLINE( 103)			if (hx::IsNotNull( a2->regionContacts )) {
HXLINE( 103)				a2->regionContacts->unset(contact->key);
            			}
HXLINE( 105)			{
HXLINE( 105)				::Dynamic p = a2->regionContacts->iterator();
HXDLIN( 105)				while(::de::polygonal::ds::Itr_obj::hasNext(p)){
HXLINE( 105)					 ::box2D::dynamics::contacts::B2Contact p1 = ( ( ::box2D::dynamics::contacts::B2Contact)(::de::polygonal::ds::Itr_obj::next(p)) );
HXLINE( 107)					bool _hx_tmp1;
HXDLIN( 107)					if (::Std_obj::is(p1->getFixtureA()->getUserData(),hx::ClassOf< ::com::stencyl::models::Region >())) {
HXLINE( 107)						_hx_tmp1 = hx::IsEq( p1->getFixtureA()->getUserData(),a1 );
            					}
            					else {
HXLINE( 107)						_hx_tmp1 = false;
            					}
HXDLIN( 107)					if (_hx_tmp1) {
HXLINE( 109)						inRegion = true;
HXLINE( 110)						goto _hx_goto_2;
            					}
HXLINE( 113)					bool _hx_tmp2;
HXDLIN( 113)					if (::Std_obj::is(p1->getFixtureB()->getUserData(),hx::ClassOf< ::com::stencyl::models::Region >())) {
HXLINE( 113)						_hx_tmp2 = hx::IsEq( p1->getFixtureB()->getUserData(),a1 );
            					}
            					else {
HXLINE( 113)						_hx_tmp2 = false;
            					}
HXDLIN( 113)					if (_hx_tmp2) {
HXLINE( 115)						inRegion = true;
HXLINE( 116)						goto _hx_goto_2;
            					}
            				}
            				_hx_goto_2:;
            			}
HXLINE( 120)			bool _hx_tmp3;
HXDLIN( 120)			if (!(!(inRegion))) {
HXLINE( 120)				_hx_tmp3 = a2->recycled;
            			}
            			else {
HXLINE( 120)				_hx_tmp3 = true;
            			}
HXDLIN( 120)			if (_hx_tmp3) {
HXLINE( 120)				hx::TCast<  ::com::stencyl::models::Region >::cast(a1)->removeActor(a2);
            			}
HXLINE( 122)			return;
            		}
HXLINE( 125)		bool _hx_tmp4;
HXDLIN( 125)		if (r2) {
HXLINE( 125)			_hx_tmp4 = !(r1);
            		}
            		else {
HXLINE( 125)			_hx_tmp4 = false;
            		}
HXDLIN( 125)		if (_hx_tmp4) {
HXLINE( 127)			bool inRegion1 = false;
HXLINE( 129)			if (hx::IsNotNull( a1->regionContacts )) {
HXLINE( 129)				a1->regionContacts->unset(contact->key);
            			}
HXLINE( 131)			{
HXLINE( 131)				::Dynamic p2 = a1->regionContacts->iterator();
HXDLIN( 131)				while(::de::polygonal::ds::Itr_obj::hasNext(p2)){
HXLINE( 131)					 ::box2D::dynamics::contacts::B2Contact p3 = ( ( ::box2D::dynamics::contacts::B2Contact)(::de::polygonal::ds::Itr_obj::next(p2)) );
HXLINE( 133)					bool _hx_tmp5;
HXDLIN( 133)					if (::Std_obj::is(p3->getFixtureA()->getUserData(),hx::ClassOf< ::com::stencyl::models::Region >())) {
HXLINE( 133)						_hx_tmp5 = hx::IsEq( p3->getFixtureA()->getUserData(),a2 );
            					}
            					else {
HXLINE( 133)						_hx_tmp5 = false;
            					}
HXDLIN( 133)					if (_hx_tmp5) {
HXLINE( 135)						inRegion1 = true;
HXLINE( 136)						goto _hx_goto_3;
            					}
HXLINE( 139)					bool _hx_tmp6;
HXDLIN( 139)					if (::Std_obj::is(p3->getFixtureB()->getUserData(),hx::ClassOf< ::com::stencyl::models::Region >())) {
HXLINE( 139)						_hx_tmp6 = hx::IsEq( p3->getFixtureB()->getUserData(),a2 );
            					}
            					else {
HXLINE( 139)						_hx_tmp6 = false;
            					}
HXDLIN( 139)					if (_hx_tmp6) {
HXLINE( 141)						inRegion1 = true;
HXLINE( 142)						goto _hx_goto_3;
            					}
            				}
            				_hx_goto_3:;
            			}
HXLINE( 146)			bool _hx_tmp7;
HXDLIN( 146)			if (!(!(inRegion1))) {
HXLINE( 146)				_hx_tmp7 = a1->recycled;
            			}
            			else {
HXLINE( 146)				_hx_tmp7 = true;
            			}
HXDLIN( 146)			if (_hx_tmp7) {
HXLINE( 146)				hx::TCast<  ::com::stencyl::models::Region >::cast(a2)->removeActor(a1);
            			}
HXLINE( 148)			return;
            		}
HXLINE( 151)		{
HXLINE( 151)			if (hx::IsNotNull( a1->collisions )) {
HXLINE( 151)				 ::de::polygonal::ds::IntHashTable _this = a1->collisions;
HXDLIN( 151)				int key = contact->key;
HXDLIN( 151)				 ::de::polygonal::ds::IntIntHashTable _this1 = _this->mH;
HXDLIN( 151)				int i = _this1->mHash->__get(((int)(key * (int)73856093) & (int)_this1->mMask));
HXDLIN( 151)				int i1;
HXDLIN( 151)				if ((i == (int)-1)) {
HXLINE( 151)					i1 = (int)-2147483647;
            				}
            				else {
HXLINE( 151)					::Array< int > d = _this1->mData;
HXDLIN( 151)					if ((d->__get(i) == key)) {
HXLINE( 151)						i1 = d->__get((i + (int)1));
            					}
            					else {
HXLINE( 151)						int v = (int)-2147483647;
HXDLIN( 151)						i = d->__get((i + (int)2));
HXDLIN( 151)						while((i != (int)-1)){
HXLINE( 151)							if ((d->__get(i) == key)) {
HXLINE( 151)								v = d->__get((i + (int)1));
HXDLIN( 151)								goto _hx_goto_4;
            							}
HXDLIN( 151)							i = d->__get((i + (int)2));
            						}
            						_hx_goto_4:;
HXDLIN( 151)						i1 = v;
            					}
            				}
HXDLIN( 151)				 ::com::stencyl::models::actor::Collision d1;
HXDLIN( 151)				if ((i1 == (int)-2147483647)) {
HXLINE( 151)					d1 = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            				}
            				else {
HXLINE( 151)					d1 = Dynamic( _this->mVals->__get(i1)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            				}
HXDLIN( 151)				if (hx::IsNotNull( d1 )) {
HXLINE( 151)					a1->collisions->unset(contact->key);
HXDLIN( 151)					a1->collisionsCount--;
HXDLIN( 151)					while((d1->points->length > (int)0)){
HXLINE( 151)						::com::stencyl::models::actor::CollisionPoint_obj::free(d1->points->pop().StaticCast<  ::com::stencyl::models::actor::CollisionPoint >());
            					}
            				}
            			}
HXDLIN( 151)			if (hx::IsNotNull( a1->contacts )) {
HXLINE( 151)				if (a1->contacts->unset(contact->key)) {
HXLINE( 151)					a1->contactCount--;
            				}
            			}
            		}
HXLINE( 152)		{
HXLINE( 152)			if (hx::IsNotNull( a2->collisions )) {
HXLINE( 152)				 ::de::polygonal::ds::IntHashTable _this2 = a2->collisions;
HXDLIN( 152)				int key1 = contact->key;
HXDLIN( 152)				 ::de::polygonal::ds::IntIntHashTable _this3 = _this2->mH;
HXDLIN( 152)				int i2 = _this3->mHash->__get(((int)(key1 * (int)73856093) & (int)_this3->mMask));
HXDLIN( 152)				int i3;
HXDLIN( 152)				if ((i2 == (int)-1)) {
HXLINE( 152)					i3 = (int)-2147483647;
            				}
            				else {
HXLINE( 152)					::Array< int > d2 = _this3->mData;
HXDLIN( 152)					if ((d2->__get(i2) == key1)) {
HXLINE( 152)						i3 = d2->__get((i2 + (int)1));
            					}
            					else {
HXLINE( 152)						int v1 = (int)-2147483647;
HXDLIN( 152)						i2 = d2->__get((i2 + (int)2));
HXDLIN( 152)						while((i2 != (int)-1)){
HXLINE( 152)							if ((d2->__get(i2) == key1)) {
HXLINE( 152)								v1 = d2->__get((i2 + (int)1));
HXDLIN( 152)								goto _hx_goto_6;
            							}
HXDLIN( 152)							i2 = d2->__get((i2 + (int)2));
            						}
            						_hx_goto_6:;
HXDLIN( 152)						i3 = v1;
            					}
            				}
HXDLIN( 152)				 ::com::stencyl::models::actor::Collision d3;
HXDLIN( 152)				if ((i3 == (int)-2147483647)) {
HXLINE( 152)					d3 = ( ( ::com::stencyl::models::actor::Collision)(null()) );
            				}
            				else {
HXLINE( 152)					d3 = Dynamic( _this2->mVals->__get(i3)).StaticCast<  ::com::stencyl::models::actor::Collision >();
            				}
HXDLIN( 152)				if (hx::IsNotNull( d3 )) {
HXLINE( 152)					a2->collisions->unset(contact->key);
HXDLIN( 152)					a2->collisionsCount--;
HXDLIN( 152)					while((d3->points->length > (int)0)){
HXLINE( 152)						::com::stencyl::models::actor::CollisionPoint_obj::free(d3->points->pop().StaticCast<  ::com::stencyl::models::actor::CollisionPoint >());
            					}
            				}
            			}
HXDLIN( 152)			if (hx::IsNotNull( a2->contacts )) {
HXLINE( 152)				if (a2->contacts->unset(contact->key)) {
HXLINE( 152)					a2->contactCount--;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2ContactListener_obj,endContact,(void))

void B2ContactListener_obj::preSolve( ::box2D::dynamics::contacts::B2Contact contact, ::box2D::collision::B2Manifold oldManifold){
            	HX_STACKFRAME(&_hx_pos_40a8ad4f39337b79_170_preSolve)
HXDLIN( 170)		::com::stencyl::models::actor::Collision_obj::preSolve(contact,oldManifold);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2ContactListener_obj,preSolve,(void))

void B2ContactListener_obj::postSolve( ::box2D::dynamics::contacts::B2Contact contact, ::box2D::dynamics::B2ContactImpulse impulse){
            	HX_STACKFRAME(&_hx_pos_40a8ad4f39337b79_181_postSolve)
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2ContactListener_obj,postSolve,(void))

int B2ContactListener_obj::KEY_LOCK;

 ::box2D::dynamics::B2ContactListener B2ContactListener_obj::b2_defaultListener;


hx::ObjectPtr< B2ContactListener_obj > B2ContactListener_obj::__new() {
	hx::ObjectPtr< B2ContactListener_obj > __this = new B2ContactListener_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2ContactListener_obj > B2ContactListener_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2ContactListener_obj *__this = (B2ContactListener_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2ContactListener_obj), false, "box2D.dynamics.B2ContactListener"));
	*(void **)__this = B2ContactListener_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2ContactListener_obj::B2ContactListener_obj()
{
}

hx::Val B2ContactListener_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"preSolve") ) { return hx::Val( preSolve_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"postSolve") ) { return hx::Val( postSolve_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"endContact") ) { return hx::Val( endContact_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"beginContact") ) { return hx::Val( beginContact_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2ContactListener_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"KEY_LOCK") ) { outValue = ( KEY_LOCK ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"b2_defaultListener") ) { outValue = ( b2_defaultListener ); return true; }
	}
	return false;
}

bool B2ContactListener_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"KEY_LOCK") ) { KEY_LOCK=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"b2_defaultListener") ) { b2_defaultListener=ioValue.Cast<  ::box2D::dynamics::B2ContactListener >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *B2ContactListener_obj_sMemberStorageInfo = 0;
static hx::StaticInfo B2ContactListener_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &B2ContactListener_obj::KEY_LOCK,HX_HCSTRING("KEY_LOCK","\xeb","\x0d","\x5d","\x72")},
	{hx::fsObject /*::box2D::dynamics::B2ContactListener*/ ,(void *) &B2ContactListener_obj::b2_defaultListener,HX_HCSTRING("b2_defaultListener","\x66","\x76","\xff","\xe9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2ContactListener_obj_sMemberFields[] = {
	HX_HCSTRING("beginContact","\x77","\x3f","\x75","\x60"),
	HX_HCSTRING("endContact","\x05","\xa0","\x96","\xbf"),
	HX_HCSTRING("preSolve","\x5c","\x70","\x9f","\x00"),
	HX_HCSTRING("postSolve","\xff","\xce","\xfa","\x39"),
	::String(null()) };

static void B2ContactListener_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2ContactListener_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2ContactListener_obj::KEY_LOCK,"KEY_LOCK");
	HX_MARK_MEMBER_NAME(B2ContactListener_obj::b2_defaultListener,"b2_defaultListener");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2ContactListener_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2ContactListener_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2ContactListener_obj::KEY_LOCK,"KEY_LOCK");
	HX_VISIT_MEMBER_NAME(B2ContactListener_obj::b2_defaultListener,"b2_defaultListener");
};

#endif

hx::Class B2ContactListener_obj::__mClass;

static ::String B2ContactListener_obj_sStaticFields[] = {
	HX_HCSTRING("KEY_LOCK","\xeb","\x0d","\x5d","\x72"),
	HX_HCSTRING("b2_defaultListener","\x66","\x76","\xff","\xe9"),
	::String(null())
};

void B2ContactListener_obj::__register()
{
	hx::Object *dummy = new B2ContactListener_obj;
	B2ContactListener_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.B2ContactListener","\xbb","\xac","\x59","\x1f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2ContactListener_obj::__GetStatic;
	__mClass->mSetStaticField = &B2ContactListener_obj::__SetStatic;
	__mClass->mMarkFunc = B2ContactListener_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2ContactListener_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2ContactListener_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2ContactListener_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2ContactListener_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2ContactListener_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2ContactListener_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2ContactListener_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_40a8ad4f39337b79_44_boot)
HXDLIN(  44)		KEY_LOCK = (int)0;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_40a8ad4f39337b79_183_boot)
HXDLIN( 183)		b2_defaultListener =  ::box2D::dynamics::B2ContactListener_obj::__alloc( HX_CTX );
            	}
}

} // end namespace box2D
} // end namespace dynamics
