// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2DistanceJointDef
#include <box2D/dynamics/joints/B2DistanceJointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointDef
#include <box2D/dynamics/joints/B2JointDef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_24e29430b6c1ddc8_38_new,"box2D.dynamics.joints.B2DistanceJointDef","new",0x43b3756e,"box2D.dynamics.joints.B2DistanceJointDef.new","box2D/dynamics/joints/B2DistanceJointDef.hx",38,0x9ac36401)
HX_LOCAL_STACK_FRAME(_hx_pos_24e29430b6c1ddc8_57_initialize,"box2D.dynamics.joints.B2DistanceJointDef","initialize",0x078c6a02,"box2D.dynamics.joints.B2DistanceJointDef.initialize","box2D/dynamics/joints/B2DistanceJointDef.hx",57,0x9ac36401)
namespace box2D{
namespace dynamics{
namespace joints{

void B2DistanceJointDef_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_24e29430b6c1ddc8_38_new)
HXLINE(  39)		super::__construct();
HXLINE(  40)		this->localAnchorA =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  41)		this->localAnchorB =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  43)		this->type = (int)3;
HXLINE(  46)		this->length = ((Float)1.0);
HXLINE(  47)		this->frequencyHz = ((Float)0.0);
HXLINE(  48)		this->dampingRatio = ((Float)0.0);
            	}

Dynamic B2DistanceJointDef_obj::__CreateEmpty() { return new B2DistanceJointDef_obj; }

void *B2DistanceJointDef_obj::_hx_vtable = 0;

Dynamic B2DistanceJointDef_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2DistanceJointDef_obj > _hx_result = new B2DistanceJointDef_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2DistanceJointDef_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x45593985) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x45593985;
	} else {
		return inClassId==(int)0x50fa3fda;
	}
}

void B2DistanceJointDef_obj::initialize( ::box2D::dynamics::B2Body bA, ::box2D::dynamics::B2Body bB, ::box2D::common::math::B2Vec2 anchorA, ::box2D::common::math::B2Vec2 anchorB){
            	HX_STACKFRAME(&_hx_pos_24e29430b6c1ddc8_57_initialize)
HXLINE(  58)		this->bodyA = bA;
HXLINE(  59)		this->bodyB = bB;
HXLINE(  60)		{
HXLINE(  60)			 ::box2D::common::math::B2Vec2 _this = this->localAnchorA;
HXDLIN(  60)			 ::box2D::common::math::B2Vec2 v = this->bodyA->getLocalPoint(anchorA);
HXDLIN(  60)			_this->x = v->x;
HXDLIN(  60)			_this->y = v->y;
            		}
HXLINE(  61)		{
HXLINE(  61)			 ::box2D::common::math::B2Vec2 _this1 = this->localAnchorB;
HXDLIN(  61)			 ::box2D::common::math::B2Vec2 v1 = this->bodyB->getLocalPoint(anchorB);
HXDLIN(  61)			_this1->x = v1->x;
HXDLIN(  61)			_this1->y = v1->y;
            		}
HXLINE(  62)		Float dX = (anchorB->x - anchorA->x);
HXLINE(  63)		Float dY = (anchorB->y - anchorA->y);
HXLINE(  64)		this->length = ::Math_obj::sqrt(((dX * dX) + (dY * dY)));
HXLINE(  65)		this->frequencyHz = ((Float)0.0);
HXLINE(  66)		this->dampingRatio = ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC4(B2DistanceJointDef_obj,initialize,(void))


hx::ObjectPtr< B2DistanceJointDef_obj > B2DistanceJointDef_obj::__new() {
	hx::ObjectPtr< B2DistanceJointDef_obj > __this = new B2DistanceJointDef_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2DistanceJointDef_obj > B2DistanceJointDef_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2DistanceJointDef_obj *__this = (B2DistanceJointDef_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2DistanceJointDef_obj), true, "box2D.dynamics.joints.B2DistanceJointDef"));
	*(void **)__this = B2DistanceJointDef_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2DistanceJointDef_obj::B2DistanceJointDef_obj()
{
}

void B2DistanceJointDef_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2DistanceJointDef);
	HX_MARK_MEMBER_NAME(localAnchorA,"localAnchorA");
	HX_MARK_MEMBER_NAME(localAnchorB,"localAnchorB");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(frequencyHz,"frequencyHz");
	HX_MARK_MEMBER_NAME(dampingRatio,"dampingRatio");
	 ::box2D::dynamics::joints::B2JointDef_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void B2DistanceJointDef_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(localAnchorA,"localAnchorA");
	HX_VISIT_MEMBER_NAME(localAnchorB,"localAnchorB");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(frequencyHz,"frequencyHz");
	HX_VISIT_MEMBER_NAME(dampingRatio,"dampingRatio");
	 ::box2D::dynamics::joints::B2JointDef_obj::__Visit(HX_VISIT_ARG);
}

hx::Val B2DistanceJointDef_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initialize") ) { return hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"frequencyHz") ) { return hx::Val( frequencyHz ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"localAnchorA") ) { return hx::Val( localAnchorA ); }
		if (HX_FIELD_EQ(inName,"localAnchorB") ) { return hx::Val( localAnchorB ); }
		if (HX_FIELD_EQ(inName,"dampingRatio") ) { return hx::Val( dampingRatio ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2DistanceJointDef_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"frequencyHz") ) { frequencyHz=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"localAnchorA") ) { localAnchorA=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"localAnchorB") ) { localAnchorB=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dampingRatio") ) { dampingRatio=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2DistanceJointDef_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("localAnchorA","\x01","\x1e","\xb3","\xd8"));
	outFields->push(HX_HCSTRING("localAnchorB","\x02","\x1e","\xb3","\xd8"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("frequencyHz","\xce","\xa0","\x85","\x6d"));
	outFields->push(HX_HCSTRING("dampingRatio","\xe9","\x14","\x5e","\xa6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2DistanceJointDef_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2DistanceJointDef_obj,localAnchorA),HX_HCSTRING("localAnchorA","\x01","\x1e","\xb3","\xd8")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2DistanceJointDef_obj,localAnchorB),HX_HCSTRING("localAnchorB","\x02","\x1e","\xb3","\xd8")},
	{hx::fsFloat,(int)offsetof(B2DistanceJointDef_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsFloat,(int)offsetof(B2DistanceJointDef_obj,frequencyHz),HX_HCSTRING("frequencyHz","\xce","\xa0","\x85","\x6d")},
	{hx::fsFloat,(int)offsetof(B2DistanceJointDef_obj,dampingRatio),HX_HCSTRING("dampingRatio","\xe9","\x14","\x5e","\xa6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2DistanceJointDef_obj_sStaticStorageInfo = 0;
#endif

static ::String B2DistanceJointDef_obj_sMemberFields[] = {
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("localAnchorA","\x01","\x1e","\xb3","\xd8"),
	HX_HCSTRING("localAnchorB","\x02","\x1e","\xb3","\xd8"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("frequencyHz","\xce","\xa0","\x85","\x6d"),
	HX_HCSTRING("dampingRatio","\xe9","\x14","\x5e","\xa6"),
	::String(null()) };

static void B2DistanceJointDef_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2DistanceJointDef_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2DistanceJointDef_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2DistanceJointDef_obj::__mClass,"__mClass");
};

#endif

hx::Class B2DistanceJointDef_obj::__mClass;

void B2DistanceJointDef_obj::__register()
{
	hx::Object *dummy = new B2DistanceJointDef_obj;
	B2DistanceJointDef_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.joints.B2DistanceJointDef","\x7c","\xe6","\xdc","\x77");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2DistanceJointDef_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2DistanceJointDef_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2DistanceJointDef_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2DistanceJointDef_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2DistanceJointDef_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2DistanceJointDef_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints
