// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2ContactPoint
#include <box2D/collision/B2ContactPoint.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTreeBroadPhase
#include <box2D/collision/B2DynamicTreeBroadPhase.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTreeNode
#include <box2D/collision/B2DynamicTreeNode.h>
#endif
#ifndef INCLUDED_box2D_collision_IBroadPhase
#include <box2D/collision/IBroadPhase.h>
#endif
#ifndef INCLUDED_box2D_collision_QueryCallback
#include <box2D/collision/QueryCallback.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactFilter
#include <box2D/dynamics/B2ContactFilter.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactListener
#include <box2D/dynamics/B2ContactListener.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactManager
#include <box2D/dynamics/B2ContactManager.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2World
#include <box2D/dynamics/B2World.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactEdge
#include <box2D/dynamics/contacts/B2ContactEdge.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactFactory
#include <box2D/dynamics/contacts/B2ContactFactory.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f0d863456db13949_36_new,"box2D.dynamics.B2ContactManager","new",0x953567f8,"box2D.dynamics.B2ContactManager.new","box2D/dynamics/B2ContactManager.hx",36,0xbc61b298)
HX_LOCAL_STACK_FRAME(_hx_pos_f0d863456db13949_47_addPair,"box2D.dynamics.B2ContactManager","addPair",0xa6706273,"box2D.dynamics.B2ContactManager.addPair","box2D/dynamics/B2ContactManager.hx",47,0xbc61b298)
HX_LOCAL_STACK_FRAME(_hx_pos_f0d863456db13949_136_findNewContacts,"box2D.dynamics.B2ContactManager","findNewContacts",0xe90e8a32,"box2D.dynamics.B2ContactManager.findNewContacts","box2D/dynamics/B2ContactManager.hx",136,0xbc61b298)
HX_LOCAL_STACK_FRAME(_hx_pos_f0d863456db13949_141_destroy,"box2D.dynamics.B2ContactManager","destroy",0x44677092,"box2D.dynamics.B2ContactManager.destroy","box2D/dynamics/B2ContactManager.hx",141,0xbc61b298)
HX_LOCAL_STACK_FRAME(_hx_pos_f0d863456db13949_211_collide,"box2D.dynamics.B2ContactManager","collide",0x0d44f316,"box2D.dynamics.B2ContactManager.collide","box2D/dynamics/B2ContactManager.hx",211,0xbc61b298)
HX_LOCAL_STACK_FRAME(_hx_pos_f0d863456db13949_139_boot,"box2D.dynamics.B2ContactManager","boot",0xf19e919a,"box2D.dynamics.B2ContactManager.boot","box2D/dynamics/B2ContactManager.hx",139,0xbc61b298)
namespace box2D{
namespace dynamics{

void B2ContactManager_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f0d863456db13949_36_new)
HXLINE(  37)		this->m_world = null();
HXLINE(  38)		this->m_contactCount = (int)0;
HXLINE(  39)		this->m_contactFilter = ::box2D::dynamics::B2ContactFilter_obj::b2_defaultFilter;
HXLINE(  40)		this->m_contactListener = ::box2D::dynamics::B2ContactListener_obj::b2_defaultListener;
HXLINE(  41)		this->m_contactFactory =  ::box2D::dynamics::contacts::B2ContactFactory_obj::__alloc( HX_CTX ,this->m_allocator);
HXLINE(  42)		this->m_broadPhase =  ::box2D::collision::B2DynamicTreeBroadPhase_obj::__alloc( HX_CTX );
            	}

Dynamic B2ContactManager_obj::__CreateEmpty() { return new B2ContactManager_obj; }

void *B2ContactManager_obj::_hx_vtable = 0;

Dynamic B2ContactManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2ContactManager_obj > _hx_result = new B2ContactManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2ContactManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0f4c6982;
}

void B2ContactManager_obj::addPair( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB){
            	HX_STACKFRAME(&_hx_pos_f0d863456db13949_47_addPair)
HXLINE(  49)		 ::box2D::dynamics::B2Body bodyA = fixtureA->getBody();
HXLINE(  50)		 ::box2D::dynamics::B2Body bodyB = fixtureB->getBody();
HXLINE(  53)		if (hx::IsEq( bodyA,bodyB )) {
HXLINE(  54)			return;
            		}
HXLINE(  57)		 ::box2D::dynamics::contacts::B2ContactEdge edge = bodyB->getContactList();
HXLINE(  58)		while(hx::IsNotNull( edge )){
HXLINE(  60)			if (hx::IsEq( edge->other,bodyA )) {
HXLINE(  62)				 ::box2D::dynamics::B2Fixture fA = edge->contact->getFixtureA();
HXLINE(  63)				 ::box2D::dynamics::B2Fixture fB = edge->contact->getFixtureB();
HXLINE(  64)				bool _hx_tmp;
HXDLIN(  64)				if (hx::IsEq( fA,fixtureA )) {
HXLINE(  64)					_hx_tmp = hx::IsEq( fB,fixtureB );
            				}
            				else {
HXLINE(  64)					_hx_tmp = false;
            				}
HXDLIN(  64)				if (_hx_tmp) {
HXLINE(  65)					return;
            				}
HXLINE(  66)				bool _hx_tmp1;
HXDLIN(  66)				if (hx::IsEq( fA,fixtureB )) {
HXLINE(  66)					_hx_tmp1 = hx::IsEq( fB,fixtureA );
            				}
            				else {
HXLINE(  66)					_hx_tmp1 = false;
            				}
HXDLIN(  66)				if (_hx_tmp1) {
HXLINE(  67)					return;
            				}
            			}
HXLINE(  69)			edge = edge->next;
            		}
HXLINE(  73)		if ((bodyB->shouldCollide(bodyA) == false)) {
HXLINE(  75)			return;
            		}
HXLINE(  79)		if ((this->m_contactFilter->shouldCollide(fixtureA,fixtureB) == false)) {
HXLINE(  81)			return;
            		}
HXLINE(  85)		 ::box2D::dynamics::contacts::B2Contact c = this->m_contactFactory->create(fixtureA,fixtureB);
HXLINE(  88)		fixtureA = c->getFixtureA();
HXLINE(  89)		fixtureB = c->getFixtureB();
HXLINE(  90)		bodyA = fixtureA->m_body;
HXLINE(  91)		bodyB = fixtureB->m_body;
HXLINE(  94)		c->m_prev = null();
HXLINE(  95)		c->m_next = this->m_world->m_contactList;
HXLINE(  96)		if (hx::IsNotNull( this->m_world->m_contactList )) {
HXLINE(  98)			this->m_world->m_contactList->m_prev = c;
            		}
HXLINE( 100)		this->m_world->m_contactList = c;
HXLINE( 106)		c->m_nodeA->contact = c;
HXLINE( 107)		c->m_nodeA->other = bodyB;
HXLINE( 109)		c->m_nodeA->prev = null();
HXLINE( 110)		c->m_nodeA->next = bodyA->m_contactList;
HXLINE( 111)		if (hx::IsNotNull( bodyA->m_contactList )) {
HXLINE( 113)			bodyA->m_contactList->prev = c->m_nodeA;
            		}
HXLINE( 115)		bodyA->m_contactList = c->m_nodeA;
HXLINE( 118)		c->m_nodeB->contact = c;
HXLINE( 119)		c->m_nodeB->other = bodyA;
HXLINE( 121)		c->m_nodeB->prev = null();
HXLINE( 122)		c->m_nodeB->next = bodyB->m_contactList;
HXLINE( 123)		if (hx::IsNotNull( bodyB->m_contactList )) {
HXLINE( 125)			bodyB->m_contactList->prev = c->m_nodeB;
            		}
HXLINE( 127)		bodyB->m_contactList = c->m_nodeB;
HXLINE( 129)		++this->m_world->m_contactCount;
HXLINE( 130)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2ContactManager_obj,addPair,(void))

void B2ContactManager_obj::findNewContacts(){
            	HX_STACKFRAME(&_hx_pos_f0d863456db13949_136_findNewContacts)
HXDLIN( 136)		::box2D::collision::IBroadPhase_obj::updatePairs(this->m_broadPhase,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2ContactManager_obj,findNewContacts,(void))

void B2ContactManager_obj::destroy( ::box2D::dynamics::contacts::B2Contact c){
            	HX_STACKFRAME(&_hx_pos_f0d863456db13949_141_destroy)
HXLINE( 143)		 ::box2D::dynamics::B2Fixture fixtureA = c->getFixtureA();
HXLINE( 144)		 ::box2D::dynamics::B2Fixture fixtureB = c->getFixtureB();
HXLINE( 145)		 ::box2D::dynamics::B2Body bodyA = fixtureA->getBody();
HXLINE( 146)		 ::box2D::dynamics::B2Body bodyB = fixtureB->getBody();
HXLINE( 148)		if (c->isTouching()) {
HXLINE( 150)			this->m_contactListener->endContact(c);
            		}
HXLINE( 154)		if (hx::IsNotNull( c->m_prev )) {
HXLINE( 156)			c->m_prev->m_next = c->m_next;
            		}
HXLINE( 159)		if (hx::IsNotNull( c->m_next )) {
HXLINE( 161)			c->m_next->m_prev = c->m_prev;
            		}
HXLINE( 164)		if (hx::IsEq( c,this->m_world->m_contactList )) {
HXLINE( 166)			this->m_world->m_contactList = c->m_next;
            		}
HXLINE( 170)		if (hx::IsNotNull( c->m_nodeA->prev )) {
HXLINE( 172)			c->m_nodeA->prev->next = c->m_nodeA->next;
            		}
HXLINE( 175)		if (hx::IsNotNull( c->m_nodeA->next )) {
HXLINE( 177)			c->m_nodeA->next->prev = c->m_nodeA->prev;
            		}
HXLINE( 180)		if (hx::IsEq( c->m_nodeA,bodyA->m_contactList )) {
HXLINE( 182)			bodyA->m_contactList = c->m_nodeA->next;
            		}
HXLINE( 186)		if (hx::IsNotNull( c->m_nodeB->prev )) {
HXLINE( 188)			c->m_nodeB->prev->next = c->m_nodeB->next;
            		}
HXLINE( 191)		if (hx::IsNotNull( c->m_nodeB->next )) {
HXLINE( 193)			c->m_nodeB->next->prev = c->m_nodeB->prev;
            		}
HXLINE( 196)		if (hx::IsEq( c->m_nodeB,bodyB->m_contactList )) {
HXLINE( 198)			bodyB->m_contactList = c->m_nodeB->next;
            		}
HXLINE( 202)		this->m_contactFactory->destroy(c);
HXLINE( 203)		--this->m_contactCount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2ContactManager_obj,destroy,(void))

void B2ContactManager_obj::collide(){
            	HX_STACKFRAME(&_hx_pos_f0d863456db13949_211_collide)
HXLINE( 213)		 ::box2D::dynamics::contacts::B2Contact c = this->m_world->m_contactList;
HXLINE( 214)		while(hx::IsNotNull( c )){
HXLINE( 216)			 ::box2D::dynamics::B2Fixture fixtureA = c->getFixtureA();
HXLINE( 217)			 ::box2D::dynamics::B2Fixture fixtureB = c->getFixtureB();
HXLINE( 218)			 ::box2D::dynamics::B2Body bodyA = fixtureA->getBody();
HXLINE( 219)			 ::box2D::dynamics::B2Body bodyB = fixtureB->getBody();
HXLINE( 220)			bool _hx_tmp;
HXDLIN( 220)			if ((bodyA->isAwake() == false)) {
HXLINE( 220)				_hx_tmp = (bodyB->isAwake() == false);
            			}
            			else {
HXLINE( 220)				_hx_tmp = false;
            			}
HXDLIN( 220)			if (_hx_tmp) {
HXLINE( 222)				c = c->getNext();
HXLINE( 223)				continue;
            			}
HXLINE( 227)			if ((((int)c->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_filterFlag) != (int)0)) {
HXLINE( 230)				if ((bodyB->shouldCollide(bodyA) == false)) {
HXLINE( 232)					 ::box2D::dynamics::contacts::B2Contact cNuke = c;
HXLINE( 233)					c = cNuke->getNext();
HXLINE( 234)					this->destroy(cNuke);
HXLINE( 235)					continue;
            				}
HXLINE( 239)				if ((this->m_contactFilter->shouldCollide(fixtureA,fixtureB) == false)) {
HXLINE( 241)					 ::box2D::dynamics::contacts::B2Contact cNuke1 = c;
HXLINE( 242)					c = cNuke1->getNext();
HXLINE( 243)					this->destroy(cNuke1);
HXLINE( 244)					continue;
            				}
HXLINE( 248)				 ::box2D::dynamics::contacts::B2Contact c1 = c;
HXDLIN( 248)				c1->m_flags = ((int)c1->m_flags & (int)~(::box2D::dynamics::contacts::B2Contact_obj::e_filterFlag));
            			}
HXLINE( 251)			 ::Dynamic proxyA = fixtureA->m_proxy;
HXLINE( 252)			 ::Dynamic proxyB = fixtureB->m_proxy;
HXLINE( 254)			bool overlap = ::box2D::collision::IBroadPhase_obj::testOverlap(this->m_broadPhase,proxyA,proxyB);
HXLINE( 257)			if ((overlap == false)) {
HXLINE( 259)				 ::box2D::dynamics::contacts::B2Contact cNuke2 = c;
HXLINE( 260)				c = cNuke2->getNext();
HXLINE( 261)				this->destroy(cNuke2);
HXLINE( 262)				continue;
            			}
HXLINE( 265)			c->update(this->m_contactListener);
HXLINE( 266)			c = c->getNext();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2ContactManager_obj,collide,(void))

 ::box2D::collision::B2ContactPoint B2ContactManager_obj::s_evalCP;


hx::ObjectPtr< B2ContactManager_obj > B2ContactManager_obj::__new() {
	hx::ObjectPtr< B2ContactManager_obj > __this = new B2ContactManager_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2ContactManager_obj > B2ContactManager_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2ContactManager_obj *__this = (B2ContactManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2ContactManager_obj), true, "box2D.dynamics.B2ContactManager"));
	*(void **)__this = B2ContactManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2ContactManager_obj::B2ContactManager_obj()
{
}

void B2ContactManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2ContactManager);
	HX_MARK_MEMBER_NAME(m_world,"m_world");
	HX_MARK_MEMBER_NAME(m_broadPhase,"m_broadPhase");
	HX_MARK_MEMBER_NAME(m_contactList,"m_contactList");
	HX_MARK_MEMBER_NAME(m_contactCount,"m_contactCount");
	HX_MARK_MEMBER_NAME(m_contactFilter,"m_contactFilter");
	HX_MARK_MEMBER_NAME(m_contactListener,"m_contactListener");
	HX_MARK_MEMBER_NAME(m_contactFactory,"m_contactFactory");
	HX_MARK_MEMBER_NAME(m_allocator,"m_allocator");
	HX_MARK_END_CLASS();
}

void B2ContactManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_world,"m_world");
	HX_VISIT_MEMBER_NAME(m_broadPhase,"m_broadPhase");
	HX_VISIT_MEMBER_NAME(m_contactList,"m_contactList");
	HX_VISIT_MEMBER_NAME(m_contactCount,"m_contactCount");
	HX_VISIT_MEMBER_NAME(m_contactFilter,"m_contactFilter");
	HX_VISIT_MEMBER_NAME(m_contactListener,"m_contactListener");
	HX_VISIT_MEMBER_NAME(m_contactFactory,"m_contactFactory");
	HX_VISIT_MEMBER_NAME(m_allocator,"m_allocator");
}

hx::Val B2ContactManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"addPair") ) { return hx::Val( addPair_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"collide") ) { return hx::Val( collide_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_world") ) { return hx::Val( m_world ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_allocator") ) { return hx::Val( m_allocator ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_broadPhase") ) { return hx::Val( m_broadPhase ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_contactList") ) { return hx::Val( m_contactList ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_contactCount") ) { return hx::Val( m_contactCount ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findNewContacts") ) { return hx::Val( findNewContacts_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_contactFilter") ) { return hx::Val( m_contactFilter ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"m_contactFactory") ) { return hx::Val( m_contactFactory ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"m_contactListener") ) { return hx::Val( m_contactListener ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2ContactManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"s_evalCP") ) { outValue = ( s_evalCP ); return true; }
	}
	return false;
}

hx::Val B2ContactManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"m_world") ) { m_world=inValue.Cast<  ::box2D::dynamics::B2World >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_allocator") ) { m_allocator=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_broadPhase") ) { m_broadPhase=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_contactList") ) { m_contactList=inValue.Cast<  ::box2D::dynamics::contacts::B2Contact >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_contactCount") ) { m_contactCount=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_contactFilter") ) { m_contactFilter=inValue.Cast<  ::box2D::dynamics::B2ContactFilter >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"m_contactFactory") ) { m_contactFactory=inValue.Cast<  ::box2D::dynamics::contacts::B2ContactFactory >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"m_contactListener") ) { m_contactListener=inValue.Cast<  ::box2D::dynamics::B2ContactListener >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2ContactManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"s_evalCP") ) { s_evalCP=ioValue.Cast<  ::box2D::collision::B2ContactPoint >(); return true; }
	}
	return false;
}

void B2ContactManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_world","\xc0","\x6d","\xef","\x7e"));
	outFields->push(HX_HCSTRING("m_broadPhase","\x6b","\x47","\x56","\x3c"));
	outFields->push(HX_HCSTRING("m_contactList","\x0c","\xb1","\xe1","\x31"));
	outFields->push(HX_HCSTRING("m_contactCount","\x61","\xc8","\xf6","\x48"));
	outFields->push(HX_HCSTRING("m_contactFilter","\xe6","\xbb","\xb4","\x47"));
	outFields->push(HX_HCSTRING("m_contactListener","\x22","\x84","\xf3","\x4e"));
	outFields->push(HX_HCSTRING("m_contactFactory","\xdc","\x28","\x01","\x15"));
	outFields->push(HX_HCSTRING("m_allocator","\x39","\xc2","\xe3","\x76"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2ContactManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::dynamics::B2World*/ ,(int)offsetof(B2ContactManager_obj,m_world),HX_HCSTRING("m_world","\xc0","\x6d","\xef","\x7e")},
	{hx::fsObject /*::box2D::collision::IBroadPhase*/ ,(int)offsetof(B2ContactManager_obj,m_broadPhase),HX_HCSTRING("m_broadPhase","\x6b","\x47","\x56","\x3c")},
	{hx::fsObject /*::box2D::dynamics::contacts::B2Contact*/ ,(int)offsetof(B2ContactManager_obj,m_contactList),HX_HCSTRING("m_contactList","\x0c","\xb1","\xe1","\x31")},
	{hx::fsInt,(int)offsetof(B2ContactManager_obj,m_contactCount),HX_HCSTRING("m_contactCount","\x61","\xc8","\xf6","\x48")},
	{hx::fsObject /*::box2D::dynamics::B2ContactFilter*/ ,(int)offsetof(B2ContactManager_obj,m_contactFilter),HX_HCSTRING("m_contactFilter","\xe6","\xbb","\xb4","\x47")},
	{hx::fsObject /*::box2D::dynamics::B2ContactListener*/ ,(int)offsetof(B2ContactManager_obj,m_contactListener),HX_HCSTRING("m_contactListener","\x22","\x84","\xf3","\x4e")},
	{hx::fsObject /*::box2D::dynamics::contacts::B2ContactFactory*/ ,(int)offsetof(B2ContactManager_obj,m_contactFactory),HX_HCSTRING("m_contactFactory","\xdc","\x28","\x01","\x15")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(B2ContactManager_obj,m_allocator),HX_HCSTRING("m_allocator","\x39","\xc2","\xe3","\x76")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2ContactManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::box2D::collision::B2ContactPoint*/ ,(void *) &B2ContactManager_obj::s_evalCP,HX_HCSTRING("s_evalCP","\xd5","\x1a","\xe4","\xb3")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2ContactManager_obj_sMemberFields[] = {
	HX_HCSTRING("addPair","\xdb","\x1e","\x8f","\x86"),
	HX_HCSTRING("findNewContacts","\x9a","\xee","\x5b","\x12"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("collide","\x7e","\xaf","\x63","\xed"),
	HX_HCSTRING("m_world","\xc0","\x6d","\xef","\x7e"),
	HX_HCSTRING("m_broadPhase","\x6b","\x47","\x56","\x3c"),
	HX_HCSTRING("m_contactList","\x0c","\xb1","\xe1","\x31"),
	HX_HCSTRING("m_contactCount","\x61","\xc8","\xf6","\x48"),
	HX_HCSTRING("m_contactFilter","\xe6","\xbb","\xb4","\x47"),
	HX_HCSTRING("m_contactListener","\x22","\x84","\xf3","\x4e"),
	HX_HCSTRING("m_contactFactory","\xdc","\x28","\x01","\x15"),
	HX_HCSTRING("m_allocator","\x39","\xc2","\xe3","\x76"),
	::String(null()) };

static void B2ContactManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2ContactManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2ContactManager_obj::s_evalCP,"s_evalCP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2ContactManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2ContactManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2ContactManager_obj::s_evalCP,"s_evalCP");
};

#endif

hx::Class B2ContactManager_obj::__mClass;

static ::String B2ContactManager_obj_sStaticFields[] = {
	HX_HCSTRING("s_evalCP","\xd5","\x1a","\xe4","\xb3"),
	::String(null())
};

void B2ContactManager_obj::__register()
{
	hx::Object *dummy = new B2ContactManager_obj;
	B2ContactManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.B2ContactManager","\x06","\x4c","\xfc","\xdf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2ContactManager_obj::__GetStatic;
	__mClass->mSetStaticField = &B2ContactManager_obj::__SetStatic;
	__mClass->mMarkFunc = B2ContactManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2ContactManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2ContactManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2ContactManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2ContactManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2ContactManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2ContactManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2ContactManager_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f0d863456db13949_139_boot)
HXDLIN( 139)		s_evalCP =  ::box2D::collision::B2ContactPoint_obj::__alloc( HX_CTX );
            	}
}

} // end namespace box2D
} // end namespace dynamics
