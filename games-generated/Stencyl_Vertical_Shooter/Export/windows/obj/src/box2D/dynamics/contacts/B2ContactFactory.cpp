// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2Manifold
#include <box2D/collision/B2Manifold.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2CircleContact
#include <box2D/dynamics/contacts/B2CircleContact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactFactory
#include <box2D/dynamics/contacts/B2ContactFactory.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactRegister
#include <box2D/dynamics/contacts/B2ContactRegister.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2EdgeAndCircleContact
#include <box2D/dynamics/contacts/B2EdgeAndCircleContact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2PolyAndCircleContact
#include <box2D/dynamics/contacts/B2PolyAndCircleContact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2PolyAndEdgeContact
#include <box2D/dynamics/contacts/B2PolyAndEdgeContact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2PolygonContact
#include <box2D/dynamics/contacts/B2PolygonContact.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_74e16bedaf212605_38_new,"box2D.dynamics.contacts.B2ContactFactory","new",0x61d9641e,"box2D.dynamics.contacts.B2ContactFactory.new","box2D/dynamics/contacts/B2ContactFactory.hx",38,0x20dc3591)
HX_LOCAL_STACK_FRAME(_hx_pos_74e16bedaf212605_44_addType,"box2D.dynamics.contacts.B2ContactFactory","addType",0xdeb38039,"box2D.dynamics.contacts.B2ContactFactory.addType","box2D/dynamics/contacts/B2ContactFactory.hx",44,0x20dc3591)
HX_LOCAL_STACK_FRAME(_hx_pos_74e16bedaf212605_52_initializeRegisters,"box2D.dynamics.contacts.B2ContactFactory","initializeRegisters",0x871264fe,"box2D.dynamics.contacts.B2ContactFactory.initializeRegisters","box2D/dynamics/contacts/B2ContactFactory.hx",52,0x20dc3591)
HX_LOCAL_STACK_FRAME(_hx_pos_74e16bedaf212605_82_create,"box2D.dynamics.contacts.B2ContactFactory","create",0xc39e3dfe,"box2D.dynamics.contacts.B2ContactFactory.create","box2D/dynamics/contacts/B2ContactFactory.hx",82,0x20dc3591)
HX_LOCAL_STACK_FRAME(_hx_pos_74e16bedaf212605_133_destroy,"box2D.dynamics.contacts.B2ContactFactory","destroy",0x79f377b8,"box2D.dynamics.contacts.B2ContactFactory.destroy","box2D/dynamics/contacts/B2ContactFactory.hx",133,0x20dc3591)
namespace box2D{
namespace dynamics{
namespace contacts{

void B2ContactFactory_obj::__construct( ::Dynamic allocator){
            	HX_STACKFRAME(&_hx_pos_74e16bedaf212605_38_new)
HXLINE(  39)		this->m_allocator = allocator;
HXLINE(  40)		this->initializeRegisters();
            	}

Dynamic B2ContactFactory_obj::__CreateEmpty() { return new B2ContactFactory_obj; }

void *B2ContactFactory_obj::_hx_vtable = 0;

Dynamic B2ContactFactory_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2ContactFactory_obj > _hx_result = new B2ContactFactory_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool B2ContactFactory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x45ee3b1e;
}

void B2ContactFactory_obj::addType( ::Dynamic createFcn, ::Dynamic destroyFcn,int type1,int type2){
            	HX_STACKFRAME(&_hx_pos_74e16bedaf212605_44_addType)
HXLINE(  48)		this->m_registers->__get(type1).StaticCast< ::Array< ::Dynamic> >()->__get(type2).StaticCast<  ::box2D::dynamics::contacts::B2ContactRegister >()->createFcn = createFcn;
HXLINE(  49)		this->m_registers->__get(type1).StaticCast< ::Array< ::Dynamic> >()->__get(type2).StaticCast<  ::box2D::dynamics::contacts::B2ContactRegister >()->destroyFcn = destroyFcn;
HXLINE(  50)		this->m_registers->__get(type1).StaticCast< ::Array< ::Dynamic> >()->__get(type2).StaticCast<  ::box2D::dynamics::contacts::B2ContactRegister >()->primary = type1;
            	}


HX_DEFINE_DYNAMIC_FUNC4(B2ContactFactory_obj,addType,(void))

void B2ContactFactory_obj::initializeRegisters(){
            	HX_GC_STACKFRAME(&_hx_pos_74e16bedaf212605_52_initializeRegisters)
HXLINE(  53)		this->m_registers = ::Array_obj< ::Dynamic>::__new();
HXLINE(  54)		{
HXLINE(  54)			int _g = (int)0;
HXDLIN(  54)			while((_g < (int)3)){
HXLINE(  54)				_g = (_g + (int)1);
HXDLIN(  54)				int i = (_g - (int)1);
HXLINE(  55)				::Array< ::Dynamic> _hx_tmp = this->m_registers;
HXDLIN(  55)				_hx_tmp[i] = ::Array_obj< ::Dynamic>::__new();
HXLINE(  56)				{
HXLINE(  56)					int _g1 = (int)0;
HXDLIN(  56)					while((_g1 < (int)3)){
HXLINE(  56)						_g1 = (_g1 + (int)1);
HXDLIN(  56)						int j = (_g1 - (int)1);
HXLINE(  57)						this->m_registers->__get(i).StaticCast< ::Array< ::Dynamic> >()[j] = null();
            					}
            				}
            			}
            		}
HXLINE(  61)		{
HXLINE(  61)			int _g2 = (int)0;
HXDLIN(  61)			while((_g2 < (int)3)){
HXLINE(  61)				_g2 = (_g2 + (int)1);
HXDLIN(  61)				int i1 = (_g2 - (int)1);
HXLINE(  62)				{
HXLINE(  62)					int _g11 = (int)0;
HXDLIN(  62)					while((_g11 < (int)3)){
HXLINE(  62)						_g11 = (_g11 + (int)1);
HXDLIN(  62)						int j1 = (_g11 - (int)1);
HXLINE(  63)						if (hx::IsNull( this->m_registers->__get(i1).StaticCast< ::Array< ::Dynamic> >()->__get(j1).StaticCast<  ::box2D::dynamics::contacts::B2ContactRegister >() )) {
HXLINE(  65)							::Array< ::Dynamic> _hx_tmp1 = this->m_registers->__get(i1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  65)							_hx_tmp1[j1] =  ::box2D::dynamics::contacts::B2ContactRegister_obj::__alloc( HX_CTX );
HXLINE(  67)							if ((i1 != j1)) {
HXLINE(  69)								::Array< ::Dynamic> _hx_tmp2 = this->m_registers->__get(j1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  69)								_hx_tmp2[i1] = this->m_registers->__get(i1).StaticCast< ::Array< ::Dynamic> >()->__get(j1).StaticCast<  ::box2D::dynamics::contacts::B2ContactRegister >();
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  75)		this->addType(::box2D::dynamics::contacts::B2CircleContact_obj::create_dyn(),::box2D::dynamics::contacts::B2CircleContact_obj::destroy_dyn(),(int)0,(int)0);
HXLINE(  76)		this->addType(::box2D::dynamics::contacts::B2PolyAndCircleContact_obj::create_dyn(),::box2D::dynamics::contacts::B2PolyAndCircleContact_obj::destroy_dyn(),(int)1,(int)0);
HXLINE(  77)		this->addType(::box2D::dynamics::contacts::B2PolygonContact_obj::create_dyn(),::box2D::dynamics::contacts::B2PolygonContact_obj::destroy_dyn(),(int)1,(int)1);
HXLINE(  79)		this->addType(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::create_dyn(),::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::destroy_dyn(),(int)2,(int)0);
HXLINE(  80)		this->addType(::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::create_dyn(),::box2D::dynamics::contacts::B2PolyAndEdgeContact_obj::destroy_dyn(),(int)1,(int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2ContactFactory_obj,initializeRegisters,(void))

 ::box2D::dynamics::contacts::B2Contact B2ContactFactory_obj::create( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB){
            	HX_STACKFRAME(&_hx_pos_74e16bedaf212605_82_create)
HXLINE(  83)		int type1 = fixtureA->getType();
HXLINE(  84)		int type2 = fixtureB->getType();
HXLINE(  89)		 ::box2D::dynamics::contacts::B2ContactRegister reg = this->m_registers->__get(type1).StaticCast< ::Array< ::Dynamic> >()->__get(type2).StaticCast<  ::box2D::dynamics::contacts::B2ContactRegister >();
HXLINE(  91)		 ::box2D::dynamics::contacts::B2Contact c;
HXLINE(  93)		if (hx::IsNotNull( reg->pool )) {
HXLINE(  96)			c = reg->pool;
HXLINE(  97)			reg->pool = c->m_next;
HXLINE(  98)			reg->poolCount--;
HXLINE( 100)			if ((reg->primary == type1)) {
HXLINE( 102)				c->reset(fixtureA,fixtureB);
HXLINE( 103)				return c;
            			}
            			else {
HXLINE( 107)				c->reset(fixtureB,fixtureA);
HXLINE( 108)				return c;
            			}
            		}
HXLINE( 112)		 ::Dynamic createFcn = reg->createFcn;
HXLINE( 113)		if (hx::IsNotNull( createFcn )) {
HXLINE( 115)			if ((reg->primary == type1)) {
HXLINE( 117)				c = ( ( ::box2D::dynamics::contacts::B2Contact)(createFcn(this->m_allocator)) );
HXLINE( 118)				c->reset(fixtureA,fixtureB);
HXLINE( 119)				return c;
            			}
            			else {
HXLINE( 123)				c = ( ( ::box2D::dynamics::contacts::B2Contact)(createFcn(this->m_allocator)) );
HXLINE( 124)				c->reset(fixtureB,fixtureA);
HXLINE( 125)				return c;
            			}
            		}
            		else {
HXLINE( 130)			return null();
            		}
HXLINE( 113)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2ContactFactory_obj,create,return )

void B2ContactFactory_obj::destroy( ::box2D::dynamics::contacts::B2Contact contact){
            	HX_STACKFRAME(&_hx_pos_74e16bedaf212605_133_destroy)
HXLINE( 134)		if ((contact->m_manifold->m_pointCount > (int)0)) {
HXLINE( 136)			contact->m_fixtureA->m_body->setAwake(true);
HXLINE( 137)			contact->m_fixtureB->m_body->setAwake(true);
            		}
HXLINE( 140)		int type1 = contact->m_fixtureA->getType();
HXLINE( 141)		int type2 = contact->m_fixtureB->getType();
HXLINE( 146)		 ::box2D::dynamics::contacts::B2ContactRegister reg = this->m_registers->__get(type1).StaticCast< ::Array< ::Dynamic> >()->__get(type2).StaticCast<  ::box2D::dynamics::contacts::B2ContactRegister >();
HXLINE( 149)		{
HXLINE( 150)			reg->poolCount++;
HXLINE( 151)			contact->m_next = reg->pool;
HXLINE( 152)			reg->pool = contact;
            		}
HXLINE( 155)		 ::Dynamic destroyFcn = reg->destroyFcn;
HXLINE( 156)		destroyFcn(contact,this->m_allocator);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2ContactFactory_obj,destroy,(void))


hx::ObjectPtr< B2ContactFactory_obj > B2ContactFactory_obj::__new( ::Dynamic allocator) {
	hx::ObjectPtr< B2ContactFactory_obj > __this = new B2ContactFactory_obj();
	__this->__construct(allocator);
	return __this;
}

hx::ObjectPtr< B2ContactFactory_obj > B2ContactFactory_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic allocator) {
	B2ContactFactory_obj *__this = (B2ContactFactory_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2ContactFactory_obj), true, "box2D.dynamics.contacts.B2ContactFactory"));
	*(void **)__this = B2ContactFactory_obj::_hx_vtable;
	__this->__construct(allocator);
	return __this;
}

B2ContactFactory_obj::B2ContactFactory_obj()
{
}

void B2ContactFactory_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2ContactFactory);
	HX_MARK_MEMBER_NAME(m_registers,"m_registers");
	HX_MARK_MEMBER_NAME(m_allocator,"m_allocator");
	HX_MARK_END_CLASS();
}

void B2ContactFactory_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_registers,"m_registers");
	HX_VISIT_MEMBER_NAME(m_allocator,"m_allocator");
}

hx::Val B2ContactFactory_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addType") ) { return hx::Val( addType_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_registers") ) { return hx::Val( m_registers ); }
		if (HX_FIELD_EQ(inName,"m_allocator") ) { return hx::Val( m_allocator ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"initializeRegisters") ) { return hx::Val( initializeRegisters_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2ContactFactory_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"m_registers") ) { m_registers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_allocator") ) { m_allocator=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2ContactFactory_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_registers","\x1e","\x17","\x68","\xf5"));
	outFields->push(HX_HCSTRING("m_allocator","\x39","\xc2","\xe3","\x76"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2ContactFactory_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2ContactFactory_obj,m_registers),HX_HCSTRING("m_registers","\x1e","\x17","\x68","\xf5")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(B2ContactFactory_obj,m_allocator),HX_HCSTRING("m_allocator","\x39","\xc2","\xe3","\x76")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2ContactFactory_obj_sStaticStorageInfo = 0;
#endif

static ::String B2ContactFactory_obj_sMemberFields[] = {
	HX_HCSTRING("addType","\x7b","\x35","\x46","\x89"),
	HX_HCSTRING("initializeRegisters","\x40","\xf5","\x00","\xd9"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("m_registers","\x1e","\x17","\x68","\xf5"),
	HX_HCSTRING("m_allocator","\x39","\xc2","\xe3","\x76"),
	::String(null()) };

static void B2ContactFactory_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2ContactFactory_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2ContactFactory_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2ContactFactory_obj::__mClass,"__mClass");
};

#endif

hx::Class B2ContactFactory_obj::__mClass;

void B2ContactFactory_obj::__register()
{
	hx::Object *dummy = new B2ContactFactory_obj;
	B2ContactFactory_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.contacts.B2ContactFactory","\x2c","\xbd","\x59","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2ContactFactory_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2ContactFactory_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2ContactFactory_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2ContactFactory_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2ContactFactory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2ContactFactory_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts
