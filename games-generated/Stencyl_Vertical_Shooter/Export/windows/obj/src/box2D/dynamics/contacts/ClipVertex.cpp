// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2ContactID
#include <box2D/collision/B2ContactID.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_ClipVertex
#include <box2D/dynamics/contacts/ClipVertex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fec23ff090e394f5_874_new,"box2D.dynamics.contacts.ClipVertex","new",0x15f94e38,"box2D.dynamics.contacts.ClipVertex.new","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",874,0x86a2ad23)
HX_LOCAL_STACK_FRAME(_hx_pos_fec23ff090e394f5_880_set,"box2D.dynamics.contacts.ClipVertex","set",0x15fd197a,"box2D.dynamics.contacts.ClipVertex.set","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",880,0x86a2ad23)
namespace box2D{
namespace dynamics{
namespace contacts{

void ClipVertex_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_fec23ff090e394f5_874_new)
HXLINE( 875)		this->v =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 876)		this->id =  ::box2D::collision::B2ContactID_obj::__alloc( HX_CTX );
            	}

Dynamic ClipVertex_obj::__CreateEmpty() { return new ClipVertex_obj; }

void *ClipVertex_obj::_hx_vtable = 0;

Dynamic ClipVertex_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ClipVertex_obj > _hx_result = new ClipVertex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ClipVertex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0068aeb8;
}

void ClipVertex_obj::set( ::box2D::dynamics::contacts::ClipVertex cv){
            	HX_STACKFRAME(&_hx_pos_fec23ff090e394f5_880_set)
HXLINE( 881)		{
HXLINE( 881)			 ::box2D::common::math::B2Vec2 _this = this->v;
HXDLIN( 881)			 ::box2D::common::math::B2Vec2 v = cv->v;
HXDLIN( 881)			_this->x = v->x;
HXDLIN( 881)			_this->y = v->y;
            		}
HXLINE( 882)		this->id->set(cv->id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClipVertex_obj,set,(void))


hx::ObjectPtr< ClipVertex_obj > ClipVertex_obj::__new() {
	hx::ObjectPtr< ClipVertex_obj > __this = new ClipVertex_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ClipVertex_obj > ClipVertex_obj::__alloc(hx::Ctx *_hx_ctx) {
	ClipVertex_obj *__this = (ClipVertex_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ClipVertex_obj), true, "box2D.dynamics.contacts.ClipVertex"));
	*(void **)__this = ClipVertex_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ClipVertex_obj::ClipVertex_obj()
{
}

void ClipVertex_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ClipVertex);
	HX_MARK_MEMBER_NAME(v,"v");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_END_CLASS();
}

void ClipVertex_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(v,"v");
	HX_VISIT_MEMBER_NAME(id,"id");
}

hx::Val ClipVertex_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { return hx::Val( v ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ClipVertex_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"v") ) { v=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast<  ::box2D::collision::B2ContactID >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ClipVertex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("v","\x76","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ClipVertex_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(ClipVertex_obj,v),HX_HCSTRING("v","\x76","\x00","\x00","\x00")},
	{hx::fsObject /*::box2D::collision::B2ContactID*/ ,(int)offsetof(ClipVertex_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ClipVertex_obj_sStaticStorageInfo = 0;
#endif

static ::String ClipVertex_obj_sMemberFields[] = {
	HX_HCSTRING("v","\x76","\x00","\x00","\x00"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void ClipVertex_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ClipVertex_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ClipVertex_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ClipVertex_obj::__mClass,"__mClass");
};

#endif

hx::Class ClipVertex_obj::__mClass;

void ClipVertex_obj::__register()
{
	hx::Object *dummy = new ClipVertex_obj;
	ClipVertex_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.contacts.ClipVertex","\x46","\x12","\xc0","\x12");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ClipVertex_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ClipVertex_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ClipVertex_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ClipVertex_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClipVertex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClipVertex_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts
