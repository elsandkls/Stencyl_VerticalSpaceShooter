// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2ContactID
#include <box2D/collision/B2ContactID.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DistanceProxy
#include <box2D/collision/B2DistanceProxy.h>
#endif
#ifndef INCLUDED_box2D_collision_B2Manifold
#include <box2D/collision/B2Manifold.h>
#endif
#ifndef INCLUDED_box2D_collision_B2ManifoldPoint
#include <box2D/collision/B2ManifoldPoint.h>
#endif
#ifndef INCLUDED_box2D_collision_B2TOIInput
#include <box2D/collision/B2TOIInput.h>
#endif
#ifndef INCLUDED_box2D_collision_B2TimeOfImpact
#include <box2D/collision/B2TimeOfImpact.h>
#endif
#ifndef INCLUDED_box2D_collision_B2WorldManifold
#include <box2D/collision/B2WorldManifold.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactListener
#include <box2D/dynamics/B2ContactListener.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactEdge
#include <box2D/dynamics/contacts/B2ContactEdge.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_184_new,"box2D.dynamics.contacts.B2Contact","new",0x30f3a330,"box2D.dynamics.contacts.B2Contact.new","box2D/dynamics/contacts/B2Contact.hx",184,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_55_getManifold,"box2D.dynamics.contacts.B2Contact","getManifold",0xca0c7196,"box2D.dynamics.contacts.B2Contact.getManifold","box2D/dynamics/contacts/B2Contact.hx",55,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_62_getWorldManifold,"box2D.dynamics.contacts.B2Contact","getWorldManifold",0xde7ad53c,"box2D.dynamics.contacts.B2Contact.getWorldManifold","box2D/dynamics/contacts/B2Contact.hx",62,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_76_isTouching,"box2D.dynamics.contacts.B2Contact","isTouching",0x06af4fbd,"box2D.dynamics.contacts.B2Contact.isTouching","box2D/dynamics/contacts/B2Contact.hx",76,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_84_isContinuous,"box2D.dynamics.contacts.B2Contact","isContinuous",0x468d80c9,"box2D.dynamics.contacts.B2Contact.isContinuous","box2D/dynamics/contacts/B2Contact.hx",84,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_91_setSensor,"box2D.dynamics.contacts.B2Contact","setSensor",0x21f1764c,"box2D.dynamics.contacts.B2Contact.setSensor","box2D/dynamics/contacts/B2Contact.hx",91,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_105_isSensor,"box2D.dynamics.contacts.B2Contact","isSensor",0x0efbc8f4,"box2D.dynamics.contacts.B2Contact.isSensor","box2D/dynamics/contacts/B2Contact.hx",105,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_114_setEnabled,"box2D.dynamics.contacts.B2Contact","setEnabled",0x5ceb502f,"box2D.dynamics.contacts.B2Contact.setEnabled","box2D/dynamics/contacts/B2Contact.hx",114,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_129_isEnabled,"box2D.dynamics.contacts.B2Contact","isEnabled",0xd8e95087,"box2D.dynamics.contacts.B2Contact.isEnabled","box2D/dynamics/contacts/B2Contact.hx",129,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_136_getNext,"box2D.dynamics.contacts.B2Contact","getNext",0x70ceaf79,"box2D.dynamics.contacts.B2Contact.getNext","box2D/dynamics/contacts/B2Contact.hx",136,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_144_getFixtureA,"box2D.dynamics.contacts.B2Contact","getFixtureA",0xe53d79de,"box2D.dynamics.contacts.B2Contact.getFixtureA","box2D/dynamics/contacts/B2Contact.hx",144,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_152_getFixtureB,"box2D.dynamics.contacts.B2Contact","getFixtureB",0xe53d79df,"box2D.dynamics.contacts.B2Contact.getFixtureB","box2D/dynamics/contacts/B2Contact.hx",152,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_160_flagForFiltering,"box2D.dynamics.contacts.B2Contact","flagForFiltering",0xfdebd4dd,"box2D.dynamics.contacts.B2Contact.flagForFiltering","box2D/dynamics/contacts/B2Contact.hx",160,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_196_reset,"box2D.dynamics.contacts.B2Contact","reset",0x5d1e709f,"box2D.dynamics.contacts.B2Contact.reset","box2D/dynamics/contacts/B2Contact.hx",196,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_238_update,"box2D.dynamics.contacts.B2Contact","update",0x9c115539,"box2D.dynamics.contacts.B2Contact.update","box2D/dynamics/contacts/B2Contact.hx",238,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_349_evaluate,"box2D.dynamics.contacts.B2Contact","evaluate",0x4c525b89,"box2D.dynamics.contacts.B2Contact.evaluate","box2D/dynamics/contacts/B2Contact.hx",349,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_353_computeTOI,"box2D.dynamics.contacts.B2Contact","computeTOI",0xc071a687,"box2D.dynamics.contacts.B2Contact.computeTOI","box2D/dynamics/contacts/B2Contact.hx",353,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_169_boot,"box2D.dynamics.contacts.B2Contact","boot",0x9c542762,"box2D.dynamics.contacts.B2Contact.boot","box2D/dynamics/contacts/B2Contact.hx",169,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_171_boot,"box2D.dynamics.contacts.B2Contact","boot",0x9c542762,"box2D.dynamics.contacts.B2Contact.boot","box2D/dynamics/contacts/B2Contact.hx",171,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_173_boot,"box2D.dynamics.contacts.B2Contact","boot",0x9c542762,"box2D.dynamics.contacts.B2Contact.boot","box2D/dynamics/contacts/B2Contact.hx",173,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_175_boot,"box2D.dynamics.contacts.B2Contact","boot",0x9c542762,"box2D.dynamics.contacts.B2Contact.boot","box2D/dynamics/contacts/B2Contact.hx",175,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_177_boot,"box2D.dynamics.contacts.B2Contact","boot",0x9c542762,"box2D.dynamics.contacts.B2Contact.boot","box2D/dynamics/contacts/B2Contact.hx",177,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_179_boot,"box2D.dynamics.contacts.B2Contact","boot",0x9c542762,"box2D.dynamics.contacts.B2Contact.boot","box2D/dynamics/contacts/B2Contact.hx",179,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_181_boot,"box2D.dynamics.contacts.B2Contact","boot",0x9c542762,"box2D.dynamics.contacts.B2Contact.boot","box2D/dynamics/contacts/B2Contact.hx",181,0xed128be1)
HX_LOCAL_STACK_FRAME(_hx_pos_c46b9dbd8c91de0e_351_boot,"box2D.dynamics.contacts.B2Contact","boot",0x9c542762,"box2D.dynamics.contacts.B2Contact.boot","box2D/dynamics/contacts/B2Contact.hx",351,0xed128be1)
namespace box2D{
namespace dynamics{
namespace contacts{

void B2Contact_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_184_new)
HXLINE( 186)		this->m_nodeA =  ::box2D::dynamics::contacts::B2ContactEdge_obj::__alloc( HX_CTX );
HXLINE( 187)		this->m_nodeB =  ::box2D::dynamics::contacts::B2ContactEdge_obj::__alloc( HX_CTX );
HXLINE( 188)		this->m_manifold =  ::box2D::collision::B2Manifold_obj::__alloc( HX_CTX );
HXLINE( 189)		this->m_oldManifold =  ::box2D::collision::B2Manifold_obj::__alloc( HX_CTX );
            	}

Dynamic B2Contact_obj::__CreateEmpty() { return new B2Contact_obj; }

void *B2Contact_obj::_hx_vtable = 0;

Dynamic B2Contact_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Contact_obj > _hx_result = new B2Contact_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2Contact_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5f46c30c;
}

 ::box2D::collision::B2Manifold B2Contact_obj::getManifold(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_55_getManifold)
HXDLIN(  55)		return this->m_manifold;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,getManifold,return )

void B2Contact_obj::getWorldManifold( ::box2D::collision::B2WorldManifold worldManifold){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_62_getWorldManifold)
HXLINE(  63)		 ::box2D::dynamics::B2Body bodyA = this->m_fixtureA->getBody();
HXLINE(  64)		 ::box2D::dynamics::B2Body bodyB = this->m_fixtureB->getBody();
HXLINE(  65)		 ::box2D::collision::shapes::B2Shape shapeA = this->m_fixtureA->getShape();
HXLINE(  66)		 ::box2D::collision::shapes::B2Shape shapeB = this->m_fixtureB->getShape();
HXLINE(  68)		 ::box2D::collision::B2Manifold _hx_tmp = this->m_manifold;
HXDLIN(  68)		 ::box2D::common::math::B2Transform _hx_tmp1 = bodyA->getTransform();
HXDLIN(  68)		Float shapeA1 = shapeA->m_radius;
HXDLIN(  68)		 ::box2D::common::math::B2Transform _hx_tmp2 = bodyB->getTransform();
HXDLIN(  68)		worldManifold->initialize(_hx_tmp,_hx_tmp1,shapeA1,_hx_tmp2,shapeB->m_radius);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Contact_obj,getWorldManifold,(void))

bool B2Contact_obj::isTouching(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_76_isTouching)
HXDLIN(  76)		return (((int)this->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_touchingFlag) == ::box2D::dynamics::contacts::B2Contact_obj::e_touchingFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,isTouching,return )

bool B2Contact_obj::isContinuous(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_84_isContinuous)
HXDLIN(  84)		return (((int)this->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_continuousFlag) == ::box2D::dynamics::contacts::B2Contact_obj::e_continuousFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,isContinuous,return )

void B2Contact_obj::setSensor(bool sensor){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_91_setSensor)
HXDLIN(  91)		if (sensor) {
HXLINE(  93)			 ::box2D::dynamics::contacts::B2Contact _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  93)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_sensorFlag);
            		}
            		else {
HXLINE(  97)			 ::box2D::dynamics::contacts::B2Contact _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  97)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::contacts::B2Contact_obj::e_sensorFlag));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Contact_obj,setSensor,(void))

bool B2Contact_obj::isSensor(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_105_isSensor)
HXDLIN( 105)		return (((int)this->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_sensorFlag) == ::box2D::dynamics::contacts::B2Contact_obj::e_sensorFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,isSensor,return )

void B2Contact_obj::setEnabled(bool flag){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_114_setEnabled)
HXDLIN( 114)		if (flag) {
HXLINE( 116)			 ::box2D::dynamics::contacts::B2Contact _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 116)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_enabledFlag);
            		}
            		else {
HXLINE( 120)			 ::box2D::dynamics::contacts::B2Contact _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 120)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::contacts::B2Contact_obj::e_enabledFlag));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Contact_obj,setEnabled,(void))

bool B2Contact_obj::isEnabled(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_129_isEnabled)
HXDLIN( 129)		return (((int)this->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_enabledFlag) == ::box2D::dynamics::contacts::B2Contact_obj::e_enabledFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,isEnabled,return )

 ::box2D::dynamics::contacts::B2Contact B2Contact_obj::getNext(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_136_getNext)
HXDLIN( 136)		return this->m_next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,getNext,return )

 ::box2D::dynamics::B2Fixture B2Contact_obj::getFixtureA(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_144_getFixtureA)
HXDLIN( 144)		return this->m_fixtureA;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,getFixtureA,return )

 ::box2D::dynamics::B2Fixture B2Contact_obj::getFixtureB(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_152_getFixtureB)
HXDLIN( 152)		return this->m_fixtureB;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,getFixtureB,return )

void B2Contact_obj::flagForFiltering(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_160_flagForFiltering)
HXDLIN( 160)		 ::box2D::dynamics::contacts::B2Contact _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 160)		_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_filterFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,flagForFiltering,(void))

void B2Contact_obj::reset( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_196_reset)
HXLINE( 197)		this->m_flags = ::box2D::dynamics::contacts::B2Contact_obj::e_enabledFlag;
HXLINE( 199)		bool _hx_tmp;
HXDLIN( 199)		if (hx::IsNotNull( fixtureA )) {
HXLINE( 199)			_hx_tmp = hx::IsNull( fixtureB );
            		}
            		else {
HXLINE( 199)			_hx_tmp = true;
            		}
HXDLIN( 199)		if (_hx_tmp) {
HXLINE( 200)			this->m_fixtureA = null();
HXLINE( 201)			this->m_fixtureB = null();
HXLINE( 202)			return;
            		}
HXLINE( 205)		bool _hx_tmp1;
HXDLIN( 205)		if (!(fixtureA->isSensor())) {
HXLINE( 205)			_hx_tmp1 = fixtureB->isSensor();
            		}
            		else {
HXLINE( 205)			_hx_tmp1 = true;
            		}
HXDLIN( 205)		if (_hx_tmp1) {
HXLINE( 207)			 ::box2D::dynamics::contacts::B2Contact _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 207)			_hx_tmp2->m_flags = ((int)_hx_tmp2->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_sensorFlag);
            		}
HXLINE( 210)		 ::box2D::dynamics::B2Body bodyA = fixtureA->getBody();
HXLINE( 211)		 ::box2D::dynamics::B2Body bodyB = fixtureB->getBody();
HXLINE( 213)		bool _hx_tmp3;
HXDLIN( 213)		bool _hx_tmp4;
HXDLIN( 213)		bool _hx_tmp5;
HXDLIN( 213)		int _hx_tmp6 = bodyA->getType();
HXDLIN( 213)		if ((_hx_tmp6 == ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE( 213)			_hx_tmp5 = bodyA->isBullet();
            		}
            		else {
HXLINE( 213)			_hx_tmp5 = true;
            		}
HXDLIN( 213)		if (!(_hx_tmp5)) {
HXLINE( 213)			int _hx_tmp7 = bodyB->getType();
HXDLIN( 213)			_hx_tmp4 = (_hx_tmp7 != ::box2D::dynamics::B2Body_obj::b2_dynamicBody);
            		}
            		else {
HXLINE( 213)			_hx_tmp4 = true;
            		}
HXDLIN( 213)		if (!(_hx_tmp4)) {
HXLINE( 213)			_hx_tmp3 = bodyB->isBullet();
            		}
            		else {
HXLINE( 213)			_hx_tmp3 = true;
            		}
HXDLIN( 213)		if (_hx_tmp3) {
HXLINE( 215)			 ::box2D::dynamics::contacts::B2Contact _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 215)			_hx_tmp8->m_flags = ((int)_hx_tmp8->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_continuousFlag);
            		}
HXLINE( 218)		this->m_fixtureA = fixtureA;
HXLINE( 219)		this->m_fixtureB = fixtureB;
HXLINE( 221)		this->m_manifold->m_pointCount = (int)0;
HXLINE( 223)		this->m_prev = null();
HXLINE( 224)		this->m_next = null();
HXLINE( 226)		this->m_nodeA->contact = null();
HXLINE( 227)		this->m_nodeA->prev = null();
HXLINE( 228)		this->m_nodeA->next = null();
HXLINE( 229)		this->m_nodeA->other = null();
HXLINE( 231)		this->m_nodeB->contact = null();
HXLINE( 232)		this->m_nodeB->prev = null();
HXLINE( 233)		this->m_nodeB->next = null();
HXLINE( 234)		this->m_nodeB->other = null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Contact_obj,reset,(void))

void B2Contact_obj::update( ::box2D::dynamics::B2ContactListener listener){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_238_update)
HXLINE( 240)		 ::box2D::collision::B2Manifold tManifold = this->m_oldManifold;
HXLINE( 241)		this->m_oldManifold = this->m_manifold;
HXLINE( 242)		this->m_manifold = tManifold;
HXLINE( 245)		 ::box2D::dynamics::contacts::B2Contact _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 245)		_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_enabledFlag);
HXLINE( 247)		bool touching = false;
HXLINE( 248)		bool wasTouching = (((int)this->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_touchingFlag) == ::box2D::dynamics::contacts::B2Contact_obj::e_touchingFlag);
HXLINE( 250)		 ::box2D::dynamics::B2Body bodyA = this->m_fixtureA->m_body;
HXLINE( 251)		 ::box2D::dynamics::B2Body bodyB = this->m_fixtureB->m_body;
HXLINE( 253)		bool aabbOverlap = this->m_fixtureA->m_aabb->testOverlap(this->m_fixtureB->m_aabb);
HXLINE( 256)		if ((((int)this->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_sensorFlag) != (int)0)) {
HXLINE( 258)			if (aabbOverlap) {
HXLINE( 260)				 ::box2D::collision::shapes::B2Shape shapeA = this->m_fixtureA->getShape();
HXLINE( 261)				 ::box2D::collision::shapes::B2Shape shapeB = this->m_fixtureB->getShape();
HXLINE( 262)				 ::box2D::common::math::B2Transform xfA = bodyA->getTransform();
HXLINE( 263)				 ::box2D::common::math::B2Transform xfB = bodyB->getTransform();
HXLINE( 264)				touching = ::box2D::collision::shapes::B2Shape_obj::testOverlap(shapeA,xfA,shapeB,xfB);
            			}
HXLINE( 268)			this->m_manifold->m_pointCount = (int)0;
            		}
            		else {
HXLINE( 273)			bool _hx_tmp1;
HXDLIN( 273)			bool _hx_tmp2;
HXDLIN( 273)			bool _hx_tmp3;
HXDLIN( 273)			int _hx_tmp4 = bodyA->getType();
HXDLIN( 273)			if ((_hx_tmp4 == ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE( 273)				_hx_tmp3 = bodyA->isBullet();
            			}
            			else {
HXLINE( 273)				_hx_tmp3 = true;
            			}
HXDLIN( 273)			if (!(_hx_tmp3)) {
HXLINE( 273)				int _hx_tmp5 = bodyB->getType();
HXDLIN( 273)				_hx_tmp2 = (_hx_tmp5 != ::box2D::dynamics::B2Body_obj::b2_dynamicBody);
            			}
            			else {
HXLINE( 273)				_hx_tmp2 = true;
            			}
HXDLIN( 273)			if (!(_hx_tmp2)) {
HXLINE( 273)				_hx_tmp1 = bodyB->isBullet();
            			}
            			else {
HXLINE( 273)				_hx_tmp1 = true;
            			}
HXDLIN( 273)			if (_hx_tmp1) {
HXLINE( 275)				 ::box2D::dynamics::contacts::B2Contact _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 275)				_hx_tmp6->m_flags = ((int)_hx_tmp6->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_continuousFlag);
            			}
            			else {
HXLINE( 279)				 ::box2D::dynamics::contacts::B2Contact _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 279)				_hx_tmp7->m_flags = ((int)_hx_tmp7->m_flags & (int)~(::box2D::dynamics::contacts::B2Contact_obj::e_continuousFlag));
            			}
HXLINE( 282)			if (aabbOverlap) {
HXLINE( 284)				this->evaluate();
HXLINE( 286)				touching = (this->m_manifold->m_pointCount > (int)0);
HXLINE( 290)				{
HXLINE( 290)					int _g1 = (int)0;
HXDLIN( 290)					int _g = this->m_manifold->m_pointCount;
HXDLIN( 290)					while((_g1 < _g)){
HXLINE( 290)						_g1 = (_g1 + (int)1);
HXDLIN( 290)						int i = (_g1 - (int)1);
HXLINE( 292)						 ::box2D::collision::B2ManifoldPoint mp2 = this->m_manifold->m_points->__get(i).StaticCast<  ::box2D::collision::B2ManifoldPoint >();
HXLINE( 293)						mp2->m_normalImpulse = ((Float)0.0);
HXLINE( 294)						mp2->m_tangentImpulse = ((Float)0.0);
HXLINE( 295)						 ::box2D::collision::B2ContactID id2 = mp2->m_id;
HXLINE( 297)						{
HXLINE( 297)							int _g3 = (int)0;
HXDLIN( 297)							int _g2 = this->m_oldManifold->m_pointCount;
HXDLIN( 297)							while((_g3 < _g2)){
HXLINE( 297)								_g3 = (_g3 + (int)1);
HXDLIN( 297)								int j = (_g3 - (int)1);
HXLINE( 299)								 ::box2D::collision::B2ManifoldPoint mp1 = this->m_oldManifold->m_points->__get(j).StaticCast<  ::box2D::collision::B2ManifoldPoint >();
HXLINE( 301)								int _hx_tmp8 = mp1->m_id->get_key();
HXDLIN( 301)								if ((_hx_tmp8 == id2->get_key())) {
HXLINE( 303)									mp2->m_normalImpulse = mp1->m_normalImpulse;
HXLINE( 304)									mp2->m_tangentImpulse = mp1->m_tangentImpulse;
HXLINE( 305)									goto _hx_goto_15;
            								}
            							}
            							_hx_goto_15:;
            						}
            					}
            				}
            			}
            			else {
HXLINE( 313)				this->m_manifold->m_pointCount = (int)0;
            			}
HXLINE( 315)			if ((touching != wasTouching)) {
HXLINE( 317)				bodyA->setAwake(true);
HXLINE( 318)				bodyB->setAwake(true);
            			}
            		}
HXLINE( 322)		if (touching) {
HXLINE( 324)			 ::box2D::dynamics::contacts::B2Contact _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 324)			_hx_tmp9->m_flags = ((int)_hx_tmp9->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_touchingFlag);
            		}
            		else {
HXLINE( 328)			 ::box2D::dynamics::contacts::B2Contact _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 328)			_hx_tmp10->m_flags = ((int)_hx_tmp10->m_flags & (int)~(::box2D::dynamics::contacts::B2Contact_obj::e_touchingFlag));
            		}
HXLINE( 331)		bool _hx_tmp11;
HXDLIN( 331)		if ((wasTouching == false)) {
HXLINE( 331)			_hx_tmp11 = (touching == true);
            		}
            		else {
HXLINE( 331)			_hx_tmp11 = false;
            		}
HXDLIN( 331)		if (_hx_tmp11) {
HXLINE( 333)			listener->beginContact(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 336)		bool _hx_tmp12;
HXDLIN( 336)		if ((wasTouching == true)) {
HXLINE( 336)			_hx_tmp12 = (touching == false);
            		}
            		else {
HXLINE( 336)			_hx_tmp12 = false;
            		}
HXDLIN( 336)		if (_hx_tmp12) {
HXLINE( 338)			listener->endContact(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 341)		if ((((int)this->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_sensorFlag) == (int)0)) {
HXLINE( 343)			listener->preSolve(hx::ObjectPtr<OBJ_>(this),this->m_oldManifold);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Contact_obj,update,(void))

void B2Contact_obj::evaluate(){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_349_evaluate)
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Contact_obj,evaluate,(void))

Float B2Contact_obj::computeTOI( ::box2D::common::math::B2Sweep sweepA, ::box2D::common::math::B2Sweep sweepB){
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_353_computeTOI)
HXLINE( 354)		 ::box2D::collision::B2DistanceProxy _hx_tmp = ::box2D::dynamics::contacts::B2Contact_obj::s_input->proxyA;
HXDLIN( 354)		_hx_tmp->set(this->m_fixtureA->getShape());
HXLINE( 355)		 ::box2D::collision::B2DistanceProxy _hx_tmp1 = ::box2D::dynamics::contacts::B2Contact_obj::s_input->proxyB;
HXDLIN( 355)		_hx_tmp1->set(this->m_fixtureB->getShape());
HXLINE( 356)		::box2D::dynamics::contacts::B2Contact_obj::s_input->sweepA = sweepA;
HXLINE( 357)		::box2D::dynamics::contacts::B2Contact_obj::s_input->sweepB = sweepB;
HXLINE( 358)		::box2D::dynamics::contacts::B2Contact_obj::s_input->tolerance = ::box2D::common::B2Settings_obj::b2_linearSlop;
HXLINE( 359)		return ::box2D::collision::B2TimeOfImpact_obj::timeOfImpact(::box2D::dynamics::contacts::B2Contact_obj::s_input);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Contact_obj,computeTOI,return )

int B2Contact_obj::e_sensorFlag;

int B2Contact_obj::e_continuousFlag;

int B2Contact_obj::e_islandFlag;

int B2Contact_obj::e_toiFlag;

int B2Contact_obj::e_touchingFlag;

int B2Contact_obj::e_enabledFlag;

int B2Contact_obj::e_filterFlag;

 ::box2D::collision::B2TOIInput B2Contact_obj::s_input;


hx::ObjectPtr< B2Contact_obj > B2Contact_obj::__new() {
	hx::ObjectPtr< B2Contact_obj > __this = new B2Contact_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2Contact_obj > B2Contact_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2Contact_obj *__this = (B2Contact_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Contact_obj), true, "box2D.dynamics.contacts.B2Contact"));
	*(void **)__this = B2Contact_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2Contact_obj::B2Contact_obj()
{
}

void B2Contact_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Contact);
	HX_MARK_MEMBER_NAME(m_flags,"m_flags");
	HX_MARK_MEMBER_NAME(m_prev,"m_prev");
	HX_MARK_MEMBER_NAME(m_next,"m_next");
	HX_MARK_MEMBER_NAME(m_nodeA,"m_nodeA");
	HX_MARK_MEMBER_NAME(m_nodeB,"m_nodeB");
	HX_MARK_MEMBER_NAME(m_fixtureA,"m_fixtureA");
	HX_MARK_MEMBER_NAME(m_fixtureB,"m_fixtureB");
	HX_MARK_MEMBER_NAME(m_manifold,"m_manifold");
	HX_MARK_MEMBER_NAME(m_oldManifold,"m_oldManifold");
	HX_MARK_MEMBER_NAME(m_toi,"m_toi");
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_END_CLASS();
}

void B2Contact_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_flags,"m_flags");
	HX_VISIT_MEMBER_NAME(m_prev,"m_prev");
	HX_VISIT_MEMBER_NAME(m_next,"m_next");
	HX_VISIT_MEMBER_NAME(m_nodeA,"m_nodeA");
	HX_VISIT_MEMBER_NAME(m_nodeB,"m_nodeB");
	HX_VISIT_MEMBER_NAME(m_fixtureA,"m_fixtureA");
	HX_VISIT_MEMBER_NAME(m_fixtureB,"m_fixtureB");
	HX_VISIT_MEMBER_NAME(m_manifold,"m_manifold");
	HX_VISIT_MEMBER_NAME(m_oldManifold,"m_oldManifold");
	HX_VISIT_MEMBER_NAME(m_toi,"m_toi");
	HX_VISIT_MEMBER_NAME(key,"key");
}

hx::Val B2Contact_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_toi") ) { return hx::Val( m_toi ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_prev") ) { return hx::Val( m_prev ); }
		if (HX_FIELD_EQ(inName,"m_next") ) { return hx::Val( m_next ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getNext") ) { return hx::Val( getNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_flags") ) { return hx::Val( m_flags ); }
		if (HX_FIELD_EQ(inName,"m_nodeA") ) { return hx::Val( m_nodeA ); }
		if (HX_FIELD_EQ(inName,"m_nodeB") ) { return hx::Val( m_nodeB ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isSensor") ) { return hx::Val( isSensor_dyn() ); }
		if (HX_FIELD_EQ(inName,"evaluate") ) { return hx::Val( evaluate_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setSensor") ) { return hx::Val( setSensor_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEnabled") ) { return hx::Val( isEnabled_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isTouching") ) { return hx::Val( isTouching_dyn() ); }
		if (HX_FIELD_EQ(inName,"setEnabled") ) { return hx::Val( setEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"computeTOI") ) { return hx::Val( computeTOI_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_fixtureA") ) { return hx::Val( m_fixtureA ); }
		if (HX_FIELD_EQ(inName,"m_fixtureB") ) { return hx::Val( m_fixtureB ); }
		if (HX_FIELD_EQ(inName,"m_manifold") ) { return hx::Val( m_manifold ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getManifold") ) { return hx::Val( getManifold_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFixtureA") ) { return hx::Val( getFixtureA_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFixtureB") ) { return hx::Val( getFixtureB_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isContinuous") ) { return hx::Val( isContinuous_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_oldManifold") ) { return hx::Val( m_oldManifold ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getWorldManifold") ) { return hx::Val( getWorldManifold_dyn() ); }
		if (HX_FIELD_EQ(inName,"flagForFiltering") ) { return hx::Val( flagForFiltering_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2Contact_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"s_input") ) { outValue = ( s_input ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"e_toiFlag") ) { outValue = ( e_toiFlag ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"e_sensorFlag") ) { outValue = ( e_sensorFlag ); return true; }
		if (HX_FIELD_EQ(inName,"e_islandFlag") ) { outValue = ( e_islandFlag ); return true; }
		if (HX_FIELD_EQ(inName,"e_filterFlag") ) { outValue = ( e_filterFlag ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"e_enabledFlag") ) { outValue = ( e_enabledFlag ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"e_touchingFlag") ) { outValue = ( e_touchingFlag ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"e_continuousFlag") ) { outValue = ( e_continuousFlag ); return true; }
	}
	return false;
}

hx::Val B2Contact_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"m_toi") ) { m_toi=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_prev") ) { m_prev=inValue.Cast<  ::box2D::dynamics::contacts::B2Contact >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_next") ) { m_next=inValue.Cast<  ::box2D::dynamics::contacts::B2Contact >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_flags") ) { m_flags=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_nodeA") ) { m_nodeA=inValue.Cast<  ::box2D::dynamics::contacts::B2ContactEdge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_nodeB") ) { m_nodeB=inValue.Cast<  ::box2D::dynamics::contacts::B2ContactEdge >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_fixtureA") ) { m_fixtureA=inValue.Cast<  ::box2D::dynamics::B2Fixture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_fixtureB") ) { m_fixtureB=inValue.Cast<  ::box2D::dynamics::B2Fixture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_manifold") ) { m_manifold=inValue.Cast<  ::box2D::collision::B2Manifold >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_oldManifold") ) { m_oldManifold=inValue.Cast<  ::box2D::collision::B2Manifold >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2Contact_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"s_input") ) { s_input=ioValue.Cast<  ::box2D::collision::B2TOIInput >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"e_toiFlag") ) { e_toiFlag=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"e_sensorFlag") ) { e_sensorFlag=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"e_islandFlag") ) { e_islandFlag=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"e_filterFlag") ) { e_filterFlag=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"e_enabledFlag") ) { e_enabledFlag=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"e_touchingFlag") ) { e_touchingFlag=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"e_continuousFlag") ) { e_continuousFlag=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void B2Contact_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_flags","\xb5","\x02","\x17","\xb3"));
	outFields->push(HX_HCSTRING("m_prev","\x45","\x2f","\x56","\x92"));
	outFields->push(HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90"));
	outFields->push(HX_HCSTRING("m_nodeA","\x6d","\x8f","\x49","\x50"));
	outFields->push(HX_HCSTRING("m_nodeB","\x6e","\x8f","\x49","\x50"));
	outFields->push(HX_HCSTRING("m_fixtureA","\xaa","\x95","\xad","\x12"));
	outFields->push(HX_HCSTRING("m_fixtureB","\xab","\x95","\xad","\x12"));
	outFields->push(HX_HCSTRING("m_manifold","\x62","\x8d","\x7c","\xf7"));
	outFields->push(HX_HCSTRING("m_oldManifold","\xc5","\x7d","\x0a","\x29"));
	outFields->push(HX_HCSTRING("m_toi","\x7c","\xe6","\xd0","\x01"));
	outFields->push(HX_HCSTRING("key","\x9f","\x89","\x51","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Contact_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(B2Contact_obj,m_flags),HX_HCSTRING("m_flags","\xb5","\x02","\x17","\xb3")},
	{hx::fsObject /*::box2D::dynamics::contacts::B2Contact*/ ,(int)offsetof(B2Contact_obj,m_prev),HX_HCSTRING("m_prev","\x45","\x2f","\x56","\x92")},
	{hx::fsObject /*::box2D::dynamics::contacts::B2Contact*/ ,(int)offsetof(B2Contact_obj,m_next),HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90")},
	{hx::fsObject /*::box2D::dynamics::contacts::B2ContactEdge*/ ,(int)offsetof(B2Contact_obj,m_nodeA),HX_HCSTRING("m_nodeA","\x6d","\x8f","\x49","\x50")},
	{hx::fsObject /*::box2D::dynamics::contacts::B2ContactEdge*/ ,(int)offsetof(B2Contact_obj,m_nodeB),HX_HCSTRING("m_nodeB","\x6e","\x8f","\x49","\x50")},
	{hx::fsObject /*::box2D::dynamics::B2Fixture*/ ,(int)offsetof(B2Contact_obj,m_fixtureA),HX_HCSTRING("m_fixtureA","\xaa","\x95","\xad","\x12")},
	{hx::fsObject /*::box2D::dynamics::B2Fixture*/ ,(int)offsetof(B2Contact_obj,m_fixtureB),HX_HCSTRING("m_fixtureB","\xab","\x95","\xad","\x12")},
	{hx::fsObject /*::box2D::collision::B2Manifold*/ ,(int)offsetof(B2Contact_obj,m_manifold),HX_HCSTRING("m_manifold","\x62","\x8d","\x7c","\xf7")},
	{hx::fsObject /*::box2D::collision::B2Manifold*/ ,(int)offsetof(B2Contact_obj,m_oldManifold),HX_HCSTRING("m_oldManifold","\xc5","\x7d","\x0a","\x29")},
	{hx::fsFloat,(int)offsetof(B2Contact_obj,m_toi),HX_HCSTRING("m_toi","\x7c","\xe6","\xd0","\x01")},
	{hx::fsInt,(int)offsetof(B2Contact_obj,key),HX_HCSTRING("key","\x9f","\x89","\x51","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2Contact_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &B2Contact_obj::e_sensorFlag,HX_HCSTRING("e_sensorFlag","\xe0","\x1b","\x76","\xd3")},
	{hx::fsInt,(void *) &B2Contact_obj::e_continuousFlag,HX_HCSTRING("e_continuousFlag","\x35","\xf2","\x77","\xe7")},
	{hx::fsInt,(void *) &B2Contact_obj::e_islandFlag,HX_HCSTRING("e_islandFlag","\xfb","\x71","\xe2","\x04")},
	{hx::fsInt,(void *) &B2Contact_obj::e_toiFlag,HX_HCSTRING("e_toiFlag","\x40","\xc4","\xf7","\x4f")},
	{hx::fsInt,(void *) &B2Contact_obj::e_touchingFlag,HX_HCSTRING("e_touchingFlag","\x29","\xc3","\x4d","\x94")},
	{hx::fsInt,(void *) &B2Contact_obj::e_enabledFlag,HX_HCSTRING("e_enabledFlag","\xb3","\x42","\x46","\xe5")},
	{hx::fsInt,(void *) &B2Contact_obj::e_filterFlag,HX_HCSTRING("e_filterFlag","\x5e","\xa0","\x12","\x13")},
	{hx::fsObject /*::box2D::collision::B2TOIInput*/ ,(void *) &B2Contact_obj::s_input,HX_HCSTRING("s_input","\xfe","\x63","\x29","\x68")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2Contact_obj_sMemberFields[] = {
	HX_HCSTRING("getManifold","\xc6","\x4e","\x25","\xf6"),
	HX_HCSTRING("getWorldManifold","\x0c","\x2a","\x42","\xeb"),
	HX_HCSTRING("isTouching","\x8d","\x28","\xd4","\x7a"),
	HX_HCSTRING("isContinuous","\x99","\x2d","\x36","\xb0"),
	HX_HCSTRING("setSensor","\x7c","\xa7","\x37","\xcb"),
	HX_HCSTRING("isSensor","\xc4","\xcd","\xf9","\xc3"),
	HX_HCSTRING("setEnabled","\xff","\x28","\x10","\xd1"),
	HX_HCSTRING("isEnabled","\xb7","\x81","\x2f","\x82"),
	HX_HCSTRING("getNext","\xa9","\x34","\x85","\x1b"),
	HX_HCSTRING("getFixtureA","\x0e","\x57","\x56","\x11"),
	HX_HCSTRING("getFixtureB","\x0f","\x57","\x56","\x11"),
	HX_HCSTRING("flagForFiltering","\xad","\x29","\xb3","\x0a"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("evaluate","\x59","\x60","\x50","\x01"),
	HX_HCSTRING("computeTOI","\x57","\x7f","\x96","\x34"),
	HX_HCSTRING("m_flags","\xb5","\x02","\x17","\xb3"),
	HX_HCSTRING("m_prev","\x45","\x2f","\x56","\x92"),
	HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90"),
	HX_HCSTRING("m_nodeA","\x6d","\x8f","\x49","\x50"),
	HX_HCSTRING("m_nodeB","\x6e","\x8f","\x49","\x50"),
	HX_HCSTRING("m_fixtureA","\xaa","\x95","\xad","\x12"),
	HX_HCSTRING("m_fixtureB","\xab","\x95","\xad","\x12"),
	HX_HCSTRING("m_manifold","\x62","\x8d","\x7c","\xf7"),
	HX_HCSTRING("m_oldManifold","\xc5","\x7d","\x0a","\x29"),
	HX_HCSTRING("m_toi","\x7c","\xe6","\xd0","\x01"),
	HX_HCSTRING("key","\x9f","\x89","\x51","\x00"),
	::String(null()) };

static void B2Contact_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Contact_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2Contact_obj::e_sensorFlag,"e_sensorFlag");
	HX_MARK_MEMBER_NAME(B2Contact_obj::e_continuousFlag,"e_continuousFlag");
	HX_MARK_MEMBER_NAME(B2Contact_obj::e_islandFlag,"e_islandFlag");
	HX_MARK_MEMBER_NAME(B2Contact_obj::e_toiFlag,"e_toiFlag");
	HX_MARK_MEMBER_NAME(B2Contact_obj::e_touchingFlag,"e_touchingFlag");
	HX_MARK_MEMBER_NAME(B2Contact_obj::e_enabledFlag,"e_enabledFlag");
	HX_MARK_MEMBER_NAME(B2Contact_obj::e_filterFlag,"e_filterFlag");
	HX_MARK_MEMBER_NAME(B2Contact_obj::s_input,"s_input");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Contact_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Contact_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2Contact_obj::e_sensorFlag,"e_sensorFlag");
	HX_VISIT_MEMBER_NAME(B2Contact_obj::e_continuousFlag,"e_continuousFlag");
	HX_VISIT_MEMBER_NAME(B2Contact_obj::e_islandFlag,"e_islandFlag");
	HX_VISIT_MEMBER_NAME(B2Contact_obj::e_toiFlag,"e_toiFlag");
	HX_VISIT_MEMBER_NAME(B2Contact_obj::e_touchingFlag,"e_touchingFlag");
	HX_VISIT_MEMBER_NAME(B2Contact_obj::e_enabledFlag,"e_enabledFlag");
	HX_VISIT_MEMBER_NAME(B2Contact_obj::e_filterFlag,"e_filterFlag");
	HX_VISIT_MEMBER_NAME(B2Contact_obj::s_input,"s_input");
};

#endif

hx::Class B2Contact_obj::__mClass;

static ::String B2Contact_obj_sStaticFields[] = {
	HX_HCSTRING("e_sensorFlag","\xe0","\x1b","\x76","\xd3"),
	HX_HCSTRING("e_continuousFlag","\x35","\xf2","\x77","\xe7"),
	HX_HCSTRING("e_islandFlag","\xfb","\x71","\xe2","\x04"),
	HX_HCSTRING("e_toiFlag","\x40","\xc4","\xf7","\x4f"),
	HX_HCSTRING("e_touchingFlag","\x29","\xc3","\x4d","\x94"),
	HX_HCSTRING("e_enabledFlag","\xb3","\x42","\x46","\xe5"),
	HX_HCSTRING("e_filterFlag","\x5e","\xa0","\x12","\x13"),
	HX_HCSTRING("s_input","\xfe","\x63","\x29","\x68"),
	::String(null())
};

void B2Contact_obj::__register()
{
	hx::Object *dummy = new B2Contact_obj;
	B2Contact_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.contacts.B2Contact","\x3e","\x8b","\xbe","\xf5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2Contact_obj::__GetStatic;
	__mClass->mSetStaticField = &B2Contact_obj::__SetStatic;
	__mClass->mMarkFunc = B2Contact_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2Contact_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Contact_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Contact_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Contact_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Contact_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Contact_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2Contact_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_169_boot)
HXDLIN( 169)		e_sensorFlag = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_171_boot)
HXDLIN( 171)		e_continuousFlag = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_173_boot)
HXDLIN( 173)		e_islandFlag = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_175_boot)
HXDLIN( 175)		e_toiFlag = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_177_boot)
HXDLIN( 177)		e_touchingFlag = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_179_boot)
HXDLIN( 179)		e_enabledFlag = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_181_boot)
HXDLIN( 181)		e_filterFlag = (int)64;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_c46b9dbd8c91de0e_351_boot)
HXDLIN( 351)		s_input =  ::box2D::collision::B2TOIInput_obj::__alloc( HX_CTX );
            	}
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts
