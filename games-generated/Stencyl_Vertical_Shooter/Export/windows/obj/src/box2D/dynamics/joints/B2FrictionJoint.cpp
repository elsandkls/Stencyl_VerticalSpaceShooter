// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2TimeStep
#include <box2D/dynamics/B2TimeStep.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2FrictionJoint
#include <box2D/dynamics/joints/B2FrictionJoint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2FrictionJointDef
#include <box2D/dynamics/joints/B2FrictionJointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointDef
#include <box2D/dynamics/joints/B2JointDef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d5004abbf20d7e12_93_new,"box2D.dynamics.joints.B2FrictionJoint","new",0x53c2a1d6,"box2D.dynamics.joints.B2FrictionJoint.new","box2D/dynamics/joints/B2FrictionJoint.hx",93,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_50_getAnchorA,"box2D.dynamics.joints.B2FrictionJoint","getAnchorA",0xf4c15b80,"box2D.dynamics.joints.B2FrictionJoint.getAnchorA","box2D/dynamics/joints/B2FrictionJoint.hx",50,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_54_getAnchorB,"box2D.dynamics.joints.B2FrictionJoint","getAnchorB",0xf4c15b81,"box2D.dynamics.joints.B2FrictionJoint.getAnchorB","box2D/dynamics/joints/B2FrictionJoint.hx",54,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_60_getReactionForce,"box2D.dynamics.joints.B2FrictionJoint","getReactionForce",0x1e1f7bd6,"box2D.dynamics.joints.B2FrictionJoint.getReactionForce","box2D/dynamics/joints/B2FrictionJoint.hx",60,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_67_getReactionTorque,"box2D.dynamics.joints.B2FrictionJoint","getReactionTorque",0xd6769a7f,"box2D.dynamics.joints.B2FrictionJoint.getReactionTorque","box2D/dynamics/joints/B2FrictionJoint.hx",67,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_72_setMaxForce,"box2D.dynamics.joints.B2FrictionJoint","setMaxForce",0xa28105df,"box2D.dynamics.joints.B2FrictionJoint.setMaxForce","box2D/dynamics/joints/B2FrictionJoint.hx",72,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_77_getMaxForce,"box2D.dynamics.joints.B2FrictionJoint","getMaxForce",0x9813fed3,"box2D.dynamics.joints.B2FrictionJoint.getMaxForce","box2D/dynamics/joints/B2FrictionJoint.hx",77,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_82_setMaxTorque,"box2D.dynamics.joints.B2FrictionJoint","setMaxTorque",0x276dd856,"box2D.dynamics.joints.B2FrictionJoint.setMaxTorque","box2D/dynamics/joints/B2FrictionJoint.hx",82,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_87_getMaxTorque,"box2D.dynamics.joints.B2FrictionJoint","getMaxTorque",0x1274b4e2,"box2D.dynamics.joints.B2FrictionJoint.getMaxTorque","box2D/dynamics/joints/B2FrictionJoint.hx",87,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_114_initVelocityConstraints,"box2D.dynamics.joints.B2FrictionJoint","initVelocityConstraints",0x170f899f,"box2D.dynamics.joints.B2FrictionJoint.initVelocityConstraints","box2D/dynamics/joints/B2FrictionJoint.hx",114,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_196_solveVelocityConstraints,"box2D.dynamics.joints.B2FrictionJoint","solveVelocityConstraints",0xeb4c2ce4,"box2D.dynamics.joints.B2FrictionJoint.solveVelocityConstraints","box2D/dynamics/joints/B2FrictionJoint.hx",196,0xaf05cabb)
HX_LOCAL_STACK_FRAME(_hx_pos_d5004abbf20d7e12_287_solvePositionConstraints,"box2D.dynamics.joints.B2FrictionJoint","solvePositionConstraints",0x232841d8,"box2D.dynamics.joints.B2FrictionJoint.solvePositionConstraints","box2D/dynamics/joints/B2FrictionJoint.hx",287,0xaf05cabb)
namespace box2D{
namespace dynamics{
namespace joints{

void B2FrictionJoint_obj::__construct( ::box2D::dynamics::joints::B2FrictionJointDef def){
            	HX_GC_STACKFRAME(&_hx_pos_d5004abbf20d7e12_93_new)
HXLINE(  94)		super::__construct(def);
HXLINE(  96)		this->m_localAnchorA =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  97)		this->m_localAnchorB =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  98)		this->m_linearMass =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
HXLINE(  99)		this->m_linearImpulse =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 101)		{
HXLINE( 101)			 ::box2D::common::math::B2Vec2 _this = this->m_localAnchorA;
HXDLIN( 101)			 ::box2D::common::math::B2Vec2 v = def->localAnchorA;
HXDLIN( 101)			_this->x = v->x;
HXDLIN( 101)			_this->y = v->y;
            		}
HXLINE( 102)		{
HXLINE( 102)			 ::box2D::common::math::B2Vec2 _this1 = this->m_localAnchorB;
HXDLIN( 102)			 ::box2D::common::math::B2Vec2 v1 = def->localAnchorB;
HXDLIN( 102)			_this1->x = v1->x;
HXDLIN( 102)			_this1->y = v1->y;
            		}
HXLINE( 104)		this->m_linearMass->setZero();
HXLINE( 105)		this->m_angularMass = ((Float)0.0);
HXLINE( 107)		{
HXLINE( 107)			 ::box2D::common::math::B2Vec2 _this2 = this->m_linearImpulse;
HXDLIN( 107)			_this2->x = ((Float)0.0);
HXDLIN( 107)			_this2->y = ((Float)0.0);
            		}
HXLINE( 108)		this->m_angularImpulse = ((Float)0.0);
HXLINE( 110)		this->m_maxForce = def->maxForce;
HXLINE( 111)		this->m_maxTorque = def->maxTorque;
            	}

Dynamic B2FrictionJoint_obj::__CreateEmpty() { return new B2FrictionJoint_obj; }

void *B2FrictionJoint_obj::_hx_vtable = 0;

Dynamic B2FrictionJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2FrictionJoint_obj > _hx_result = new B2FrictionJoint_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool B2FrictionJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x083c278e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x083c278e;
	} else {
		return inClassId==(int)0x13310c20;
	}
}

 ::box2D::common::math::B2Vec2 B2FrictionJoint_obj::getAnchorA(){
            	HX_STACKFRAME(&_hx_pos_d5004abbf20d7e12_50_getAnchorA)
HXDLIN(  50)		return this->m_bodyA->getWorldPoint(this->m_localAnchorA);
            	}


 ::box2D::common::math::B2Vec2 B2FrictionJoint_obj::getAnchorB(){
            	HX_STACKFRAME(&_hx_pos_d5004abbf20d7e12_54_getAnchorB)
HXDLIN(  54)		return this->m_bodyB->getWorldPoint(this->m_localAnchorB);
            	}


 ::box2D::common::math::B2Vec2 B2FrictionJoint_obj::getReactionForce(Float inv_dt){
            	HX_GC_STACKFRAME(&_hx_pos_d5004abbf20d7e12_60_getReactionForce)
HXDLIN(  60)		Float _hx_tmp = (inv_dt * this->m_linearImpulse->x);
HXDLIN(  60)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp,(inv_dt * this->m_linearImpulse->y));
            	}


Float B2FrictionJoint_obj::getReactionTorque(Float inv_dt){
            	HX_STACKFRAME(&_hx_pos_d5004abbf20d7e12_67_getReactionTorque)
HXDLIN(  67)		return (inv_dt * this->m_angularImpulse);
            	}


void B2FrictionJoint_obj::setMaxForce(Float force){
            	HX_STACKFRAME(&_hx_pos_d5004abbf20d7e12_72_setMaxForce)
HXDLIN(  72)		this->m_maxForce = force;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2FrictionJoint_obj,setMaxForce,(void))

Float B2FrictionJoint_obj::getMaxForce(){
            	HX_STACKFRAME(&_hx_pos_d5004abbf20d7e12_77_getMaxForce)
HXDLIN(  77)		return this->m_maxForce;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2FrictionJoint_obj,getMaxForce,return )

void B2FrictionJoint_obj::setMaxTorque(Float torque){
            	HX_STACKFRAME(&_hx_pos_d5004abbf20d7e12_82_setMaxTorque)
HXDLIN(  82)		this->m_maxTorque = torque;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2FrictionJoint_obj,setMaxTorque,(void))

Float B2FrictionJoint_obj::getMaxTorque(){
            	HX_STACKFRAME(&_hx_pos_d5004abbf20d7e12_87_getMaxTorque)
HXDLIN(  87)		return this->m_maxTorque;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2FrictionJoint_obj,getMaxTorque,return )

void B2FrictionJoint_obj::initVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_GC_STACKFRAME(&_hx_pos_d5004abbf20d7e12_114_initVelocityConstraints)
HXLINE( 115)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 116)		Float tX;
HXLINE( 118)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 119)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 123)		tMat = bA->m_xf->R;
HXLINE( 124)		Float rAX = (this->m_localAnchorA->x - bA->m_sweep->localCenter->x);
HXLINE( 125)		Float rAY = (this->m_localAnchorA->y - bA->m_sweep->localCenter->y);
HXLINE( 126)		Float tX1 = (tMat->col1->x * rAX);
HXDLIN( 126)		tX = (tX1 + (tMat->col2->x * rAY));
HXLINE( 127)		Float rAY1 = (tMat->col1->y * rAX);
HXDLIN( 127)		rAY = (rAY1 + (tMat->col2->y * rAY));
HXLINE( 128)		rAX = tX;
HXLINE( 130)		tMat = bB->m_xf->R;
HXLINE( 131)		Float rBX = (this->m_localAnchorB->x - bB->m_sweep->localCenter->x);
HXLINE( 132)		Float rBY = (this->m_localAnchorB->y - bB->m_sweep->localCenter->y);
HXLINE( 133)		Float tX2 = (tMat->col1->x * rBX);
HXDLIN( 133)		tX = (tX2 + (tMat->col2->x * rBY));
HXLINE( 134)		Float rBY1 = (tMat->col1->y * rBX);
HXDLIN( 134)		rBY = (rBY1 + (tMat->col2->y * rBY));
HXLINE( 135)		rBX = tX;
HXLINE( 146)		Float mA = bA->m_invMass;
HXLINE( 147)		Float mB = bB->m_invMass;
HXLINE( 148)		Float iA = bA->m_invI;
HXLINE( 149)		Float iB = bB->m_invI;
HXLINE( 151)		 ::box2D::common::math::B2Mat22 K =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
HXLINE( 152)		K->col1->x = (mA + mB);
HXDLIN( 152)		K->col2->x = ((Float)0.0);
HXLINE( 153)		K->col1->y = ((Float)0.0);
HXDLIN( 153)		K->col2->y = (mA + mB);
HXLINE( 155)		 ::box2D::common::math::B2Vec2 K1 = K->col1;
HXDLIN( 155)		K1->x = (K1->x + ((iA * rAY) * rAY));
HXDLIN( 155)		 ::box2D::common::math::B2Vec2 K2 = K->col2;
HXDLIN( 155)		K2->x = (K2->x + ((-(iA) * rAX) * rAY));
HXLINE( 156)		 ::box2D::common::math::B2Vec2 K3 = K->col1;
HXDLIN( 156)		K3->y = (K3->y + ((-(iA) * rAX) * rAY));
HXDLIN( 156)		 ::box2D::common::math::B2Vec2 K4 = K->col2;
HXDLIN( 156)		K4->y = (K4->y + ((iA * rAX) * rAX));
HXLINE( 158)		 ::box2D::common::math::B2Vec2 K5 = K->col1;
HXDLIN( 158)		K5->x = (K5->x + ((iB * rBY) * rBY));
HXDLIN( 158)		 ::box2D::common::math::B2Vec2 K6 = K->col2;
HXDLIN( 158)		K6->x = (K6->x + ((-(iB) * rBX) * rBY));
HXLINE( 159)		 ::box2D::common::math::B2Vec2 K7 = K->col1;
HXDLIN( 159)		K7->y = (K7->y + ((-(iB) * rBX) * rBY));
HXDLIN( 159)		 ::box2D::common::math::B2Vec2 K8 = K->col2;
HXDLIN( 159)		K8->y = (K8->y + ((iB * rBX) * rBX));
HXLINE( 161)		K->getInverse(this->m_linearMass);
HXLINE( 163)		this->m_angularMass = (iA + iB);
HXLINE( 164)		if ((this->m_angularMass > ((Float)0.0))) {
HXLINE( 166)			this->m_angularMass = ((Float)((Float)1.0) / (Float)this->m_angularMass);
            		}
HXLINE( 169)		if (step->warmStarting) {
HXLINE( 172)			 ::box2D::common::math::B2Vec2 _hx_tmp = this->m_linearImpulse;
HXDLIN( 172)			_hx_tmp->x = (_hx_tmp->x * step->dtRatio);
HXLINE( 173)			 ::box2D::common::math::B2Vec2 _hx_tmp1 = this->m_linearImpulse;
HXDLIN( 173)			_hx_tmp1->y = (_hx_tmp1->y * step->dtRatio);
HXLINE( 174)			 ::box2D::dynamics::joints::B2FrictionJoint _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 174)			_hx_tmp2->m_angularImpulse = (_hx_tmp2->m_angularImpulse * step->dtRatio);
HXLINE( 176)			 ::box2D::common::math::B2Vec2 P = this->m_linearImpulse;
HXLINE( 178)			 ::box2D::common::math::B2Vec2 bA1 = bA->m_linearVelocity;
HXDLIN( 178)			bA1->x = (bA1->x - (mA * P->x));
HXLINE( 179)			 ::box2D::common::math::B2Vec2 bA2 = bA->m_linearVelocity;
HXDLIN( 179)			bA2->y = (bA2->y - (mA * P->y));
HXLINE( 180)			 ::box2D::dynamics::B2Body bA3 = bA;
HXDLIN( 180)			Float _hx_tmp3 = (rAX * P->y);
HXDLIN( 180)			bA3->m_angularVelocity = (bA3->m_angularVelocity - (iA * ((_hx_tmp3 - (rAY * P->x)) + this->m_angularImpulse)));
HXLINE( 182)			 ::box2D::common::math::B2Vec2 bB1 = bB->m_linearVelocity;
HXDLIN( 182)			bB1->x = (bB1->x + (mB * P->x));
HXLINE( 183)			 ::box2D::common::math::B2Vec2 bB2 = bB->m_linearVelocity;
HXDLIN( 183)			bB2->y = (bB2->y + (mB * P->y));
HXLINE( 184)			 ::box2D::dynamics::B2Body bB3 = bB;
HXDLIN( 184)			Float _hx_tmp4 = (rBX * P->y);
HXDLIN( 184)			bB3->m_angularVelocity = (bB3->m_angularVelocity + (iB * ((_hx_tmp4 - (rBY * P->x)) + this->m_angularImpulse)));
            		}
            		else {
HXLINE( 188)			{
HXLINE( 188)				 ::box2D::common::math::B2Vec2 _this = this->m_linearImpulse;
HXDLIN( 188)				_this->x = ((Float)0.0);
HXDLIN( 188)				_this->y = ((Float)0.0);
            			}
HXLINE( 189)			this->m_angularImpulse = ((Float)0.0);
            		}
            	}


void B2FrictionJoint_obj::solveVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_GC_STACKFRAME(&_hx_pos_d5004abbf20d7e12_196_solveVelocityConstraints)
HXLINE( 198)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 199)		Float tX;
HXLINE( 201)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 202)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 204)		 ::box2D::common::math::B2Vec2 vA = bA->m_linearVelocity;
HXLINE( 205)		Float wA = bA->m_angularVelocity;
HXLINE( 206)		 ::box2D::common::math::B2Vec2 vB = bB->m_linearVelocity;
HXLINE( 207)		Float wB = bB->m_angularVelocity;
HXLINE( 209)		Float mA = bA->m_invMass;
HXLINE( 210)		Float mB = bB->m_invMass;
HXLINE( 211)		Float iA = bA->m_invI;
HXLINE( 212)		Float iB = bB->m_invI;
HXLINE( 215)		tMat = bA->m_xf->R;
HXLINE( 216)		Float rAX = (this->m_localAnchorA->x - bA->m_sweep->localCenter->x);
HXLINE( 217)		Float rAY = (this->m_localAnchorA->y - bA->m_sweep->localCenter->y);
HXLINE( 218)		Float tX1 = (tMat->col1->x * rAX);
HXDLIN( 218)		tX = (tX1 + (tMat->col2->x * rAY));
HXLINE( 219)		Float rAY1 = (tMat->col1->y * rAX);
HXDLIN( 219)		rAY = (rAY1 + (tMat->col2->y * rAY));
HXLINE( 220)		rAX = tX;
HXLINE( 222)		tMat = bB->m_xf->R;
HXLINE( 223)		Float rBX = (this->m_localAnchorB->x - bB->m_sweep->localCenter->x);
HXLINE( 224)		Float rBY = (this->m_localAnchorB->y - bB->m_sweep->localCenter->y);
HXLINE( 225)		Float tX2 = (tMat->col1->x * rBX);
HXDLIN( 225)		tX = (tX2 + (tMat->col2->x * rBY));
HXLINE( 226)		Float rBY1 = (tMat->col1->y * rBX);
HXDLIN( 226)		rBY = (rBY1 + (tMat->col2->y * rBY));
HXLINE( 227)		rBX = tX;
HXLINE( 229)		Float maxImpulse;
HXLINE( 232)		{
HXLINE( 233)			Float Cdot = (wB - wA);
HXLINE( 234)			Float impulse = (-(this->m_angularMass) * Cdot);
HXLINE( 236)			Float oldImpulse = this->m_angularImpulse;
HXLINE( 237)			maxImpulse = (step->dt * this->m_maxTorque);
HXLINE( 238)			this->m_angularImpulse = ::box2D::common::math::B2Math_obj::clamp((this->m_angularImpulse + impulse),-(maxImpulse),maxImpulse);
HXLINE( 239)			impulse = (this->m_angularImpulse - oldImpulse);
HXLINE( 241)			wA = (wA - (iA * impulse));
HXLINE( 242)			wB = (wB + (iB * impulse));
            		}
HXLINE( 246)		{
HXLINE( 248)			Float vB1 = vB->x;
HXDLIN( 248)			Float CdotX = ((vB1 - (wB * rBY)) - vA->x);
HXDLIN( 248)			Float CdotX1 = (CdotX + (wA * rAY));
HXLINE( 249)			Float vB2 = vB->y;
HXDLIN( 249)			Float CdotY = ((vB2 + (wB * rBX)) - vA->y);
HXDLIN( 249)			Float CdotY1 = (CdotY - (wA * rAX));
HXLINE( 251)			 ::box2D::common::math::B2Mat22 impulseV = this->m_linearMass;
HXDLIN( 251)			 ::box2D::common::math::B2Vec2 impulseV1 = ::box2D::common::math::B2Math_obj::mulMV(impulseV, ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,-(CdotX1),-(CdotY1)),null());
HXLINE( 252)			 ::box2D::common::math::B2Vec2 oldImpulseV = this->m_linearImpulse->copy(null());
HXLINE( 254)			this->m_linearImpulse->add(impulseV1);
HXLINE( 256)			maxImpulse = (step->dt * this->m_maxForce);
HXLINE( 258)			Float _hx_tmp = this->m_linearImpulse->lengthSquared();
HXDLIN( 258)			if ((_hx_tmp > (maxImpulse * maxImpulse))) {
HXLINE( 260)				this->m_linearImpulse->normalize();
HXLINE( 261)				this->m_linearImpulse->multiply(maxImpulse);
            			}
HXLINE( 264)			impulseV1 = ::box2D::common::math::B2Math_obj::subtractVV(this->m_linearImpulse,oldImpulseV);
HXLINE( 266)			 ::box2D::common::math::B2Vec2 vA1 = vA;
HXDLIN( 266)			vA1->x = (vA1->x - (mA * impulseV1->x));
HXLINE( 267)			 ::box2D::common::math::B2Vec2 vA2 = vA;
HXDLIN( 267)			vA2->y = (vA2->y - (mA * impulseV1->y));
HXLINE( 268)			Float wA1 = (rAX * impulseV1->y);
HXDLIN( 268)			wA = (wA - (iA * (wA1 - (rAY * impulseV1->x))));
HXLINE( 270)			 ::box2D::common::math::B2Vec2 vB3 = vB;
HXDLIN( 270)			vB3->x = (vB3->x + (mB * impulseV1->x));
HXLINE( 271)			 ::box2D::common::math::B2Vec2 vB4 = vB;
HXDLIN( 271)			vB4->y = (vB4->y + (mB * impulseV1->y));
HXLINE( 272)			Float wB1 = (rBX * impulseV1->y);
HXDLIN( 272)			wB = (wB + (iB * (wB1 - (rBY * impulseV1->x))));
            		}
HXLINE( 277)		bA->m_angularVelocity = wA;
HXLINE( 279)		bB->m_angularVelocity = wB;
            	}


bool B2FrictionJoint_obj::solvePositionConstraints(Float baumgarte){
            	HX_STACKFRAME(&_hx_pos_d5004abbf20d7e12_287_solvePositionConstraints)
HXDLIN( 287)		return true;
            	}



hx::ObjectPtr< B2FrictionJoint_obj > B2FrictionJoint_obj::__new( ::box2D::dynamics::joints::B2FrictionJointDef def) {
	hx::ObjectPtr< B2FrictionJoint_obj > __this = new B2FrictionJoint_obj();
	__this->__construct(def);
	return __this;
}

hx::ObjectPtr< B2FrictionJoint_obj > B2FrictionJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::joints::B2FrictionJointDef def) {
	B2FrictionJoint_obj *__this = (B2FrictionJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2FrictionJoint_obj), true, "box2D.dynamics.joints.B2FrictionJoint"));
	*(void **)__this = B2FrictionJoint_obj::_hx_vtable;
	__this->__construct(def);
	return __this;
}

B2FrictionJoint_obj::B2FrictionJoint_obj()
{
}

void B2FrictionJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2FrictionJoint);
	HX_MARK_MEMBER_NAME(m_localAnchorA,"m_localAnchorA");
	HX_MARK_MEMBER_NAME(m_localAnchorB,"m_localAnchorB");
	HX_MARK_MEMBER_NAME(m_linearMass,"m_linearMass");
	HX_MARK_MEMBER_NAME(m_angularMass,"m_angularMass");
	HX_MARK_MEMBER_NAME(m_linearImpulse,"m_linearImpulse");
	HX_MARK_MEMBER_NAME(m_angularImpulse,"m_angularImpulse");
	HX_MARK_MEMBER_NAME(m_maxForce,"m_maxForce");
	HX_MARK_MEMBER_NAME(m_maxTorque,"m_maxTorque");
	 ::box2D::dynamics::joints::B2Joint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void B2FrictionJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_localAnchorA,"m_localAnchorA");
	HX_VISIT_MEMBER_NAME(m_localAnchorB,"m_localAnchorB");
	HX_VISIT_MEMBER_NAME(m_linearMass,"m_linearMass");
	HX_VISIT_MEMBER_NAME(m_angularMass,"m_angularMass");
	HX_VISIT_MEMBER_NAME(m_linearImpulse,"m_linearImpulse");
	HX_VISIT_MEMBER_NAME(m_angularImpulse,"m_angularImpulse");
	HX_VISIT_MEMBER_NAME(m_maxForce,"m_maxForce");
	HX_VISIT_MEMBER_NAME(m_maxTorque,"m_maxTorque");
	 ::box2D::dynamics::joints::B2Joint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val B2FrictionJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"getAnchorA") ) { return hx::Val( getAnchorA_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnchorB") ) { return hx::Val( getAnchorB_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_maxForce") ) { return hx::Val( m_maxForce ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setMaxForce") ) { return hx::Val( setMaxForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMaxForce") ) { return hx::Val( getMaxForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_maxTorque") ) { return hx::Val( m_maxTorque ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setMaxTorque") ) { return hx::Val( setMaxTorque_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMaxTorque") ) { return hx::Val( getMaxTorque_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_linearMass") ) { return hx::Val( m_linearMass ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_angularMass") ) { return hx::Val( m_angularMass ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_localAnchorA") ) { return hx::Val( m_localAnchorA ); }
		if (HX_FIELD_EQ(inName,"m_localAnchorB") ) { return hx::Val( m_localAnchorB ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_linearImpulse") ) { return hx::Val( m_linearImpulse ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getReactionForce") ) { return hx::Val( getReactionForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_angularImpulse") ) { return hx::Val( m_angularImpulse ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getReactionTorque") ) { return hx::Val( getReactionTorque_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"initVelocityConstraints") ) { return hx::Val( initVelocityConstraints_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"solveVelocityConstraints") ) { return hx::Val( solveVelocityConstraints_dyn() ); }
		if (HX_FIELD_EQ(inName,"solvePositionConstraints") ) { return hx::Val( solvePositionConstraints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2FrictionJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"m_maxForce") ) { m_maxForce=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_maxTorque") ) { m_maxTorque=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_linearMass") ) { m_linearMass=inValue.Cast<  ::box2D::common::math::B2Mat22 >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_angularMass") ) { m_angularMass=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_localAnchorA") ) { m_localAnchorA=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_localAnchorB") ) { m_localAnchorB=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_linearImpulse") ) { m_linearImpulse=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"m_angularImpulse") ) { m_angularImpulse=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2FrictionJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_localAnchorA","\x53","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_localAnchorB","\x54","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_linearMass","\x4b","\x8f","\x9a","\x10"));
	outFields->push(HX_HCSTRING("m_angularMass","\xe4","\x52","\xfe","\xba"));
	outFields->push(HX_HCSTRING("m_linearImpulse","\xbe","\x52","\x1f","\xf0"));
	outFields->push(HX_HCSTRING("m_angularImpulse","\xc5","\x14","\x59","\xef"));
	outFields->push(HX_HCSTRING("m_maxForce","\xf9","\x05","\xfd","\xd5"));
	outFields->push(HX_HCSTRING("m_maxTorque","\xfc","\xee","\x71","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2FrictionJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2FrictionJoint_obj,m_localAnchorA),HX_HCSTRING("m_localAnchorA","\x53","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2FrictionJoint_obj,m_localAnchorB),HX_HCSTRING("m_localAnchorB","\x54","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Mat22*/ ,(int)offsetof(B2FrictionJoint_obj,m_linearMass),HX_HCSTRING("m_linearMass","\x4b","\x8f","\x9a","\x10")},
	{hx::fsFloat,(int)offsetof(B2FrictionJoint_obj,m_angularMass),HX_HCSTRING("m_angularMass","\xe4","\x52","\xfe","\xba")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2FrictionJoint_obj,m_linearImpulse),HX_HCSTRING("m_linearImpulse","\xbe","\x52","\x1f","\xf0")},
	{hx::fsFloat,(int)offsetof(B2FrictionJoint_obj,m_angularImpulse),HX_HCSTRING("m_angularImpulse","\xc5","\x14","\x59","\xef")},
	{hx::fsFloat,(int)offsetof(B2FrictionJoint_obj,m_maxForce),HX_HCSTRING("m_maxForce","\xf9","\x05","\xfd","\xd5")},
	{hx::fsFloat,(int)offsetof(B2FrictionJoint_obj,m_maxTorque),HX_HCSTRING("m_maxTorque","\xfc","\xee","\x71","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2FrictionJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String B2FrictionJoint_obj_sMemberFields[] = {
	HX_HCSTRING("getAnchorA","\x36","\x72","\x03","\x52"),
	HX_HCSTRING("getAnchorB","\x37","\x72","\x03","\x52"),
	HX_HCSTRING("getReactionForce","\x0c","\x7f","\x58","\x41"),
	HX_HCSTRING("getReactionTorque","\x89","\x66","\x20","\x85"),
	HX_HCSTRING("setMaxForce","\x69","\xce","\x12","\xdf"),
	HX_HCSTRING("getMaxForce","\x5d","\xc7","\xa5","\xd4"),
	HX_HCSTRING("setMaxTorque","\x8c","\x88","\x6b","\xea"),
	HX_HCSTRING("getMaxTorque","\x18","\x65","\x72","\xd5"),
	HX_HCSTRING("initVelocityConstraints","\x29","\xf9","\xf0","\x64"),
	HX_HCSTRING("solveVelocityConstraints","\x1a","\x56","\xac","\xc2"),
	HX_HCSTRING("solvePositionConstraints","\x0e","\x6b","\x88","\xfa"),
	HX_HCSTRING("m_localAnchorA","\x53","\x30","\xee","\x9e"),
	HX_HCSTRING("m_localAnchorB","\x54","\x30","\xee","\x9e"),
	HX_HCSTRING("m_linearMass","\x4b","\x8f","\x9a","\x10"),
	HX_HCSTRING("m_angularMass","\xe4","\x52","\xfe","\xba"),
	HX_HCSTRING("m_linearImpulse","\xbe","\x52","\x1f","\xf0"),
	HX_HCSTRING("m_angularImpulse","\xc5","\x14","\x59","\xef"),
	HX_HCSTRING("m_maxForce","\xf9","\x05","\xfd","\xd5"),
	HX_HCSTRING("m_maxTorque","\xfc","\xee","\x71","\x00"),
	::String(null()) };

static void B2FrictionJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2FrictionJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2FrictionJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2FrictionJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class B2FrictionJoint_obj::__mClass;

void B2FrictionJoint_obj::__register()
{
	hx::Object *dummy = new B2FrictionJoint_obj;
	B2FrictionJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.joints.B2FrictionJoint","\xe4","\xbe","\xf3","\x55");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2FrictionJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2FrictionJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2FrictionJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2FrictionJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2FrictionJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2FrictionJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints
