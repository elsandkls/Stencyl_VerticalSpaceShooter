// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2BodyDef
#include <box2D/dynamics/B2BodyDef.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_74a39e81dcb7f1d9_36_new,"box2D.dynamics.B2BodyDef","new",0xe45a8cbc,"box2D.dynamics.B2BodyDef.new","box2D/dynamics/B2BodyDef.hx",36,0x128b2614)
namespace box2D{
namespace dynamics{

void B2BodyDef_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_74a39e81dcb7f1d9_36_new)
HXLINE(  37)		this->position =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  38)		this->linearVelocity =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  40)		this->userData = null();
HXLINE(  42)		this->angle = ((Float)0.0);
HXLINE(  44)		this->angularVelocity = ((Float)0.0);
HXLINE(  45)		this->linearDamping = ((Float)0.0);
HXLINE(  46)		this->angularDamping = ((Float)0.0);
HXLINE(  47)		this->allowSleep = true;
HXLINE(  48)		this->awake = true;
HXLINE(  49)		this->fixedRotation = false;
HXLINE(  50)		this->bullet = false;
HXLINE(  51)		this->type = ::box2D::dynamics::B2Body_obj::b2_staticBody;
HXLINE(  52)		this->active = true;
HXLINE(  53)		this->inertiaScale = ((Float)1.0);
HXLINE(  56)		this->groupID = (int)3;
            	}

Dynamic B2BodyDef_obj::__CreateEmpty() { return new B2BodyDef_obj; }

void *B2BodyDef_obj::_hx_vtable = 0;

Dynamic B2BodyDef_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2BodyDef_obj > _hx_result = new B2BodyDef_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2BodyDef_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03f7c9ce;
}


hx::ObjectPtr< B2BodyDef_obj > B2BodyDef_obj::__new() {
	hx::ObjectPtr< B2BodyDef_obj > __this = new B2BodyDef_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2BodyDef_obj > B2BodyDef_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2BodyDef_obj *__this = (B2BodyDef_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2BodyDef_obj), true, "box2D.dynamics.B2BodyDef"));
	*(void **)__this = B2BodyDef_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2BodyDef_obj::B2BodyDef_obj()
{
}

void B2BodyDef_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2BodyDef);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(linearVelocity,"linearVelocity");
	HX_MARK_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_MARK_MEMBER_NAME(linearDamping,"linearDamping");
	HX_MARK_MEMBER_NAME(angularDamping,"angularDamping");
	HX_MARK_MEMBER_NAME(allowSleep,"allowSleep");
	HX_MARK_MEMBER_NAME(awake,"awake");
	HX_MARK_MEMBER_NAME(fixedRotation,"fixedRotation");
	HX_MARK_MEMBER_NAME(bullet,"bullet");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(inertiaScale,"inertiaScale");
	HX_MARK_MEMBER_NAME(groupID,"groupID");
	HX_MARK_MEMBER_NAME(ignoreGravity,"ignoreGravity");
	HX_MARK_MEMBER_NAME(friction,"friction");
	HX_MARK_MEMBER_NAME(bounciness,"bounciness");
	HX_MARK_MEMBER_NAME(mass,"mass");
	HX_MARK_MEMBER_NAME(aMass,"aMass");
	HX_MARK_END_CLASS();
}

void B2BodyDef_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(linearVelocity,"linearVelocity");
	HX_VISIT_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_VISIT_MEMBER_NAME(linearDamping,"linearDamping");
	HX_VISIT_MEMBER_NAME(angularDamping,"angularDamping");
	HX_VISIT_MEMBER_NAME(allowSleep,"allowSleep");
	HX_VISIT_MEMBER_NAME(awake,"awake");
	HX_VISIT_MEMBER_NAME(fixedRotation,"fixedRotation");
	HX_VISIT_MEMBER_NAME(bullet,"bullet");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(inertiaScale,"inertiaScale");
	HX_VISIT_MEMBER_NAME(groupID,"groupID");
	HX_VISIT_MEMBER_NAME(ignoreGravity,"ignoreGravity");
	HX_VISIT_MEMBER_NAME(friction,"friction");
	HX_VISIT_MEMBER_NAME(bounciness,"bounciness");
	HX_VISIT_MEMBER_NAME(mass,"mass");
	HX_VISIT_MEMBER_NAME(aMass,"aMass");
}

hx::Val B2BodyDef_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"mass") ) { return hx::Val( mass ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle ); }
		if (HX_FIELD_EQ(inName,"awake") ) { return hx::Val( awake ); }
		if (HX_FIELD_EQ(inName,"aMass") ) { return hx::Val( aMass ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bullet") ) { return hx::Val( bullet ); }
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"groupID") ) { return hx::Val( groupID ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData ); }
		if (HX_FIELD_EQ(inName,"friction") ) { return hx::Val( friction ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"allowSleep") ) { return hx::Val( allowSleep ); }
		if (HX_FIELD_EQ(inName,"bounciness") ) { return hx::Val( bounciness ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"inertiaScale") ) { return hx::Val( inertiaScale ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"linearDamping") ) { return hx::Val( linearDamping ); }
		if (HX_FIELD_EQ(inName,"fixedRotation") ) { return hx::Val( fixedRotation ); }
		if (HX_FIELD_EQ(inName,"ignoreGravity") ) { return hx::Val( ignoreGravity ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"linearVelocity") ) { return hx::Val( linearVelocity ); }
		if (HX_FIELD_EQ(inName,"angularDamping") ) { return hx::Val( angularDamping ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { return hx::Val( angularVelocity ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2BodyDef_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mass") ) { mass=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"awake") ) { awake=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aMass") ) { aMass=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bullet") ) { bullet=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"groupID") ) { groupID=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"friction") ) { friction=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"allowSleep") ) { allowSleep=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounciness") ) { bounciness=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"inertiaScale") ) { inertiaScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"linearDamping") ) { linearDamping=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fixedRotation") ) { fixedRotation=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ignoreGravity") ) { ignoreGravity=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"linearVelocity") ) { linearVelocity=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angularDamping") ) { angularDamping=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { angularVelocity=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2BodyDef_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("linearVelocity","\x22","\xfd","\x7b","\x99"));
	outFields->push(HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"));
	outFields->push(HX_HCSTRING("linearDamping","\x5d","\x9d","\xf2","\xe8"));
	outFields->push(HX_HCSTRING("angularDamping","\x00","\x8a","\xbf","\x7c"));
	outFields->push(HX_HCSTRING("allowSleep","\xce","\x77","\x90","\xa9"));
	outFields->push(HX_HCSTRING("awake","\x05","\xa1","\xd0","\x28"));
	outFields->push(HX_HCSTRING("fixedRotation","\xd2","\x86","\x5e","\x50"));
	outFields->push(HX_HCSTRING("bullet","\x42","\x92","\x90","\xd4"));
	outFields->push(HX_HCSTRING("active","\xc6","\x41","\x46","\x16"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("inertiaScale","\x30","\xc3","\xbb","\xf1"));
	outFields->push(HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"));
	outFields->push(HX_HCSTRING("ignoreGravity","\x5c","\x03","\x8d","\x95"));
	outFields->push(HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"));
	outFields->push(HX_HCSTRING("bounciness","\x23","\xbc","\xdf","\x68"));
	outFields->push(HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("aMass","\xf5","\xb1","\x0d","\x0d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2BodyDef_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(B2BodyDef_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2BodyDef_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsFloat,(int)offsetof(B2BodyDef_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2BodyDef_obj,linearVelocity),HX_HCSTRING("linearVelocity","\x22","\xfd","\x7b","\x99")},
	{hx::fsFloat,(int)offsetof(B2BodyDef_obj,angularVelocity),HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58")},
	{hx::fsFloat,(int)offsetof(B2BodyDef_obj,linearDamping),HX_HCSTRING("linearDamping","\x5d","\x9d","\xf2","\xe8")},
	{hx::fsFloat,(int)offsetof(B2BodyDef_obj,angularDamping),HX_HCSTRING("angularDamping","\x00","\x8a","\xbf","\x7c")},
	{hx::fsBool,(int)offsetof(B2BodyDef_obj,allowSleep),HX_HCSTRING("allowSleep","\xce","\x77","\x90","\xa9")},
	{hx::fsBool,(int)offsetof(B2BodyDef_obj,awake),HX_HCSTRING("awake","\x05","\xa1","\xd0","\x28")},
	{hx::fsBool,(int)offsetof(B2BodyDef_obj,fixedRotation),HX_HCSTRING("fixedRotation","\xd2","\x86","\x5e","\x50")},
	{hx::fsBool,(int)offsetof(B2BodyDef_obj,bullet),HX_HCSTRING("bullet","\x42","\x92","\x90","\xd4")},
	{hx::fsBool,(int)offsetof(B2BodyDef_obj,active),HX_HCSTRING("active","\xc6","\x41","\x46","\x16")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(B2BodyDef_obj,userData),HX_HCSTRING("userData","\x15","\x96","\x28","\x05")},
	{hx::fsFloat,(int)offsetof(B2BodyDef_obj,inertiaScale),HX_HCSTRING("inertiaScale","\x30","\xc3","\xbb","\xf1")},
	{hx::fsInt,(int)offsetof(B2BodyDef_obj,groupID),HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86")},
	{hx::fsBool,(int)offsetof(B2BodyDef_obj,ignoreGravity),HX_HCSTRING("ignoreGravity","\x5c","\x03","\x8d","\x95")},
	{hx::fsFloat,(int)offsetof(B2BodyDef_obj,friction),HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97")},
	{hx::fsFloat,(int)offsetof(B2BodyDef_obj,bounciness),HX_HCSTRING("bounciness","\x23","\xbc","\xdf","\x68")},
	{hx::fsFloat,(int)offsetof(B2BodyDef_obj,mass),HX_HCSTRING("mass","\xf4","\x40","\x56","\x48")},
	{hx::fsFloat,(int)offsetof(B2BodyDef_obj,aMass),HX_HCSTRING("aMass","\xf5","\xb1","\x0d","\x0d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2BodyDef_obj_sStaticStorageInfo = 0;
#endif

static ::String B2BodyDef_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("linearVelocity","\x22","\xfd","\x7b","\x99"),
	HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"),
	HX_HCSTRING("linearDamping","\x5d","\x9d","\xf2","\xe8"),
	HX_HCSTRING("angularDamping","\x00","\x8a","\xbf","\x7c"),
	HX_HCSTRING("allowSleep","\xce","\x77","\x90","\xa9"),
	HX_HCSTRING("awake","\x05","\xa1","\xd0","\x28"),
	HX_HCSTRING("fixedRotation","\xd2","\x86","\x5e","\x50"),
	HX_HCSTRING("bullet","\x42","\x92","\x90","\xd4"),
	HX_HCSTRING("active","\xc6","\x41","\x46","\x16"),
	HX_HCSTRING("userData","\x15","\x96","\x28","\x05"),
	HX_HCSTRING("inertiaScale","\x30","\xc3","\xbb","\xf1"),
	HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"),
	HX_HCSTRING("ignoreGravity","\x5c","\x03","\x8d","\x95"),
	HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"),
	HX_HCSTRING("bounciness","\x23","\xbc","\xdf","\x68"),
	HX_HCSTRING("mass","\xf4","\x40","\x56","\x48"),
	HX_HCSTRING("aMass","\xf5","\xb1","\x0d","\x0d"),
	::String(null()) };

static void B2BodyDef_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2BodyDef_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2BodyDef_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2BodyDef_obj::__mClass,"__mClass");
};

#endif

hx::Class B2BodyDef_obj::__mClass;

void B2BodyDef_obj::__register()
{
	hx::Object *dummy = new B2BodyDef_obj;
	B2BodyDef_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.B2BodyDef","\xca","\xbe","\x76","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2BodyDef_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2BodyDef_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2BodyDef_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2BodyDef_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2BodyDef_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2BodyDef_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
