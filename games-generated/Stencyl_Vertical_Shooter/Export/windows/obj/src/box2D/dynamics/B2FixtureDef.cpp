// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2FilterData
#include <box2D/dynamics/B2FilterData.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2FixtureDef
#include <box2D/dynamics/B2FixtureDef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_696f694568a6452a_35_new,"box2D.dynamics.B2FixtureDef","new",0x854480c7,"box2D.dynamics.B2FixtureDef.new","box2D/dynamics/B2FixtureDef.hx",35,0x022d58a9)
namespace box2D{
namespace dynamics{

void B2FixtureDef_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_696f694568a6452a_35_new)
HXLINE(  36)		this->filter =  ::box2D::dynamics::B2FilterData_obj::__alloc( HX_CTX );
HXLINE(  37)		this->shape = null();
HXLINE(  38)		this->userData = null();
HXLINE(  39)		this->friction = ((Float)0.2);
HXLINE(  40)		this->restitution = ((Float)0.0);
HXLINE(  41)		this->density = ((Float)0.0);
HXLINE(  42)		this->filter->categoryBits = (int)1;
HXLINE(  43)		this->filter->maskBits = (int)65535;
HXLINE(  44)		this->filter->groupIndex = (int)0;
HXLINE(  45)		this->isSensor = false;
HXLINE(  48)		this->groupID = (int)3;
            	}

Dynamic B2FixtureDef_obj::__CreateEmpty() { return new B2FixtureDef_obj; }

void *B2FixtureDef_obj::_hx_vtable = 0;

Dynamic B2FixtureDef_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2FixtureDef_obj > _hx_result = new B2FixtureDef_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2FixtureDef_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5e45257d;
}


hx::ObjectPtr< B2FixtureDef_obj > B2FixtureDef_obj::__new() {
	hx::ObjectPtr< B2FixtureDef_obj > __this = new B2FixtureDef_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2FixtureDef_obj > B2FixtureDef_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2FixtureDef_obj *__this = (B2FixtureDef_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2FixtureDef_obj), true, "box2D.dynamics.B2FixtureDef"));
	*(void **)__this = B2FixtureDef_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2FixtureDef_obj::B2FixtureDef_obj()
{
}

void B2FixtureDef_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2FixtureDef);
	HX_MARK_MEMBER_NAME(shape,"shape");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(friction,"friction");
	HX_MARK_MEMBER_NAME(restitution,"restitution");
	HX_MARK_MEMBER_NAME(density,"density");
	HX_MARK_MEMBER_NAME(isSensor,"isSensor");
	HX_MARK_MEMBER_NAME(filter,"filter");
	HX_MARK_MEMBER_NAME(groupID,"groupID");
	HX_MARK_END_CLASS();
}

void B2FixtureDef_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shape,"shape");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(friction,"friction");
	HX_VISIT_MEMBER_NAME(restitution,"restitution");
	HX_VISIT_MEMBER_NAME(density,"density");
	HX_VISIT_MEMBER_NAME(isSensor,"isSensor");
	HX_VISIT_MEMBER_NAME(filter,"filter");
	HX_VISIT_MEMBER_NAME(groupID,"groupID");
}

hx::Val B2FixtureDef_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { return hx::Val( shape ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filter") ) { return hx::Val( filter ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"density") ) { return hx::Val( density ); }
		if (HX_FIELD_EQ(inName,"groupID") ) { return hx::Val( groupID ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return hx::Val( userData ); }
		if (HX_FIELD_EQ(inName,"friction") ) { return hx::Val( friction ); }
		if (HX_FIELD_EQ(inName,"isSensor") ) { return hx::Val( isSensor ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restitution") ) { return hx::Val( restitution ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2FixtureDef_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"shape") ) { shape=inValue.Cast<  ::box2D::collision::shapes::B2Shape >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"filter") ) { filter=inValue.Cast<  ::box2D::dynamics::B2FilterData >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"density") ) { density=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groupID") ) { groupID=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"friction") ) { friction=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSensor") ) { isSensor=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restitution") ) { restitution=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2FixtureDef_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"));
	outFields->push(HX_HCSTRING("userData","\x15","\x96","\x28","\x05"));
	outFields->push(HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"));
	outFields->push(HX_HCSTRING("restitution","\x6a","\x2c","\x4d","\x08"));
	outFields->push(HX_HCSTRING("density","\xe8","\x3f","\xd5","\x42"));
	outFields->push(HX_HCSTRING("isSensor","\xc4","\xcd","\xf9","\xc3"));
	outFields->push(HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"));
	outFields->push(HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2FixtureDef_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::collision::shapes::B2Shape*/ ,(int)offsetof(B2FixtureDef_obj,shape),HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(B2FixtureDef_obj,userData),HX_HCSTRING("userData","\x15","\x96","\x28","\x05")},
	{hx::fsFloat,(int)offsetof(B2FixtureDef_obj,friction),HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97")},
	{hx::fsFloat,(int)offsetof(B2FixtureDef_obj,restitution),HX_HCSTRING("restitution","\x6a","\x2c","\x4d","\x08")},
	{hx::fsFloat,(int)offsetof(B2FixtureDef_obj,density),HX_HCSTRING("density","\xe8","\x3f","\xd5","\x42")},
	{hx::fsBool,(int)offsetof(B2FixtureDef_obj,isSensor),HX_HCSTRING("isSensor","\xc4","\xcd","\xf9","\xc3")},
	{hx::fsObject /*::box2D::dynamics::B2FilterData*/ ,(int)offsetof(B2FixtureDef_obj,filter),HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85")},
	{hx::fsInt,(int)offsetof(B2FixtureDef_obj,groupID),HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2FixtureDef_obj_sStaticStorageInfo = 0;
#endif

static ::String B2FixtureDef_obj_sMemberFields[] = {
	HX_HCSTRING("shape","\x21","\xe3","\x1c","\x7c"),
	HX_HCSTRING("userData","\x15","\x96","\x28","\x05"),
	HX_HCSTRING("friction","\xfa","\x78","\xc9","\x97"),
	HX_HCSTRING("restitution","\x6a","\x2c","\x4d","\x08"),
	HX_HCSTRING("density","\xe8","\x3f","\xd5","\x42"),
	HX_HCSTRING("isSensor","\xc4","\xcd","\xf9","\xc3"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"),
	::String(null()) };

static void B2FixtureDef_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2FixtureDef_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2FixtureDef_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2FixtureDef_obj::__mClass,"__mClass");
};

#endif

hx::Class B2FixtureDef_obj::__mClass;

void B2FixtureDef_obj::__register()
{
	hx::Object *dummy = new B2FixtureDef_obj;
	B2FixtureDef_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.B2FixtureDef","\x55","\x11","\x1d","\x53");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2FixtureDef_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2FixtureDef_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2FixtureDef_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2FixtureDef_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2FixtureDef_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2FixtureDef_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
