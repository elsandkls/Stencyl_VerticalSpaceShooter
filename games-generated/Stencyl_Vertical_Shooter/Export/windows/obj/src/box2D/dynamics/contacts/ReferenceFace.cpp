// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_ReferenceFace
#include <box2D/dynamics/contacts/ReferenceFace.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0129d48ce656b569_901_new,"box2D.dynamics.contacts.ReferenceFace","new",0x5c96d948,"box2D.dynamics.contacts.ReferenceFace.new","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",901,0x86a2ad23)
namespace box2D{
namespace dynamics{
namespace contacts{

void ReferenceFace_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_0129d48ce656b569_901_new)
HXLINE( 902)		this->v1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 903)		this->v2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 904)		this->normal =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 905)		this->sideNormal1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 906)		this->sideNormal2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}

Dynamic ReferenceFace_obj::__CreateEmpty() { return new ReferenceFace_obj; }

void *ReferenceFace_obj::_hx_vtable = 0;

Dynamic ReferenceFace_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ReferenceFace_obj > _hx_result = new ReferenceFace_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ReferenceFace_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x14a434ec;
}


hx::ObjectPtr< ReferenceFace_obj > ReferenceFace_obj::__new() {
	hx::ObjectPtr< ReferenceFace_obj > __this = new ReferenceFace_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ReferenceFace_obj > ReferenceFace_obj::__alloc(hx::Ctx *_hx_ctx) {
	ReferenceFace_obj *__this = (ReferenceFace_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ReferenceFace_obj), true, "box2D.dynamics.contacts.ReferenceFace"));
	*(void **)__this = ReferenceFace_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ReferenceFace_obj::ReferenceFace_obj()
{
}

void ReferenceFace_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ReferenceFace);
	HX_MARK_MEMBER_NAME(i1,"i1");
	HX_MARK_MEMBER_NAME(i2,"i2");
	HX_MARK_MEMBER_NAME(v1,"v1");
	HX_MARK_MEMBER_NAME(v2,"v2");
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_MEMBER_NAME(sideNormal1,"sideNormal1");
	HX_MARK_MEMBER_NAME(sideNormal2,"sideNormal2");
	HX_MARK_MEMBER_NAME(sideOffset1,"sideOffset1");
	HX_MARK_MEMBER_NAME(sideOffset2,"sideOffset2");
	HX_MARK_END_CLASS();
}

void ReferenceFace_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(i1,"i1");
	HX_VISIT_MEMBER_NAME(i2,"i2");
	HX_VISIT_MEMBER_NAME(v1,"v1");
	HX_VISIT_MEMBER_NAME(v2,"v2");
	HX_VISIT_MEMBER_NAME(normal,"normal");
	HX_VISIT_MEMBER_NAME(sideNormal1,"sideNormal1");
	HX_VISIT_MEMBER_NAME(sideNormal2,"sideNormal2");
	HX_VISIT_MEMBER_NAME(sideOffset1,"sideOffset1");
	HX_VISIT_MEMBER_NAME(sideOffset2,"sideOffset2");
}

hx::Val ReferenceFace_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"i1") ) { return hx::Val( i1 ); }
		if (HX_FIELD_EQ(inName,"i2") ) { return hx::Val( i2 ); }
		if (HX_FIELD_EQ(inName,"v1") ) { return hx::Val( v1 ); }
		if (HX_FIELD_EQ(inName,"v2") ) { return hx::Val( v2 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sideNormal1") ) { return hx::Val( sideNormal1 ); }
		if (HX_FIELD_EQ(inName,"sideNormal2") ) { return hx::Val( sideNormal2 ); }
		if (HX_FIELD_EQ(inName,"sideOffset1") ) { return hx::Val( sideOffset1 ); }
		if (HX_FIELD_EQ(inName,"sideOffset2") ) { return hx::Val( sideOffset2 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ReferenceFace_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"i1") ) { i1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i2") ) { i2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"v1") ) { v1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"v2") ) { v2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sideNormal1") ) { sideNormal1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sideNormal2") ) { sideNormal2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sideOffset1") ) { sideOffset1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sideOffset2") ) { sideOffset2=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ReferenceFace_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("i1","\xa8","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("i2","\xa9","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("v1","\xfb","\x66","\x00","\x00"));
	outFields->push(HX_HCSTRING("v2","\xfc","\x66","\x00","\x00"));
	outFields->push(HX_HCSTRING("normal","\x27","\x72","\x69","\x30"));
	outFields->push(HX_HCSTRING("sideNormal1","\x53","\xfb","\xd4","\xb2"));
	outFields->push(HX_HCSTRING("sideNormal2","\x54","\xfb","\xd4","\xb2"));
	outFields->push(HX_HCSTRING("sideOffset1","\x67","\x94","\x5f","\x5e"));
	outFields->push(HX_HCSTRING("sideOffset2","\x68","\x94","\x5f","\x5e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ReferenceFace_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ReferenceFace_obj,i1),HX_HCSTRING("i1","\xa8","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ReferenceFace_obj,i2),HX_HCSTRING("i2","\xa9","\x5b","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(ReferenceFace_obj,v1),HX_HCSTRING("v1","\xfb","\x66","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(ReferenceFace_obj,v2),HX_HCSTRING("v2","\xfc","\x66","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(ReferenceFace_obj,normal),HX_HCSTRING("normal","\x27","\x72","\x69","\x30")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(ReferenceFace_obj,sideNormal1),HX_HCSTRING("sideNormal1","\x53","\xfb","\xd4","\xb2")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(ReferenceFace_obj,sideNormal2),HX_HCSTRING("sideNormal2","\x54","\xfb","\xd4","\xb2")},
	{hx::fsFloat,(int)offsetof(ReferenceFace_obj,sideOffset1),HX_HCSTRING("sideOffset1","\x67","\x94","\x5f","\x5e")},
	{hx::fsFloat,(int)offsetof(ReferenceFace_obj,sideOffset2),HX_HCSTRING("sideOffset2","\x68","\x94","\x5f","\x5e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ReferenceFace_obj_sStaticStorageInfo = 0;
#endif

static ::String ReferenceFace_obj_sMemberFields[] = {
	HX_HCSTRING("i1","\xa8","\x5b","\x00","\x00"),
	HX_HCSTRING("i2","\xa9","\x5b","\x00","\x00"),
	HX_HCSTRING("v1","\xfb","\x66","\x00","\x00"),
	HX_HCSTRING("v2","\xfc","\x66","\x00","\x00"),
	HX_HCSTRING("normal","\x27","\x72","\x69","\x30"),
	HX_HCSTRING("sideNormal1","\x53","\xfb","\xd4","\xb2"),
	HX_HCSTRING("sideNormal2","\x54","\xfb","\xd4","\xb2"),
	HX_HCSTRING("sideOffset1","\x67","\x94","\x5f","\x5e"),
	HX_HCSTRING("sideOffset2","\x68","\x94","\x5f","\x5e"),
	::String(null()) };

static void ReferenceFace_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ReferenceFace_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ReferenceFace_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ReferenceFace_obj::__mClass,"__mClass");
};

#endif

hx::Class ReferenceFace_obj::__mClass;

void ReferenceFace_obj::__register()
{
	hx::Object *dummy = new ReferenceFace_obj;
	ReferenceFace_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.contacts.ReferenceFace","\x56","\xd5","\xd6","\x3c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ReferenceFace_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ReferenceFace_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ReferenceFace_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ReferenceFace_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ReferenceFace_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ReferenceFace_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts
