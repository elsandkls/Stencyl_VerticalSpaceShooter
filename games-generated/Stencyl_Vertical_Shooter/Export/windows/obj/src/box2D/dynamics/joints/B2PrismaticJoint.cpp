// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat33
#include <box2D/common/math/B2Mat33.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec3
#include <box2D/common/math/B2Vec3.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2TimeStep
#include <box2D/dynamics/B2TimeStep.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointDef
#include <box2D/dynamics/joints/B2JointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2PrismaticJoint
#include <box2D/dynamics/joints/B2PrismaticJoint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2PrismaticJointDef
#include <box2D/dynamics/joints/B2PrismaticJointDef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e13821f40b1344d0_296_new,"box2D.dynamics.joints.B2PrismaticJoint","new",0xd116935a,"box2D.dynamics.joints.B2PrismaticJoint.new","box2D/dynamics/joints/B2PrismaticJoint.hx",296,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_110_getAnchorA,"box2D.dynamics.joints.B2PrismaticJoint","getAnchorA",0x1340627c,"box2D.dynamics.joints.B2PrismaticJoint.getAnchorA","box2D/dynamics/joints/B2PrismaticJoint.hx",110,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_114_getAnchorB,"box2D.dynamics.joints.B2PrismaticJoint","getAnchorB",0x1340627d,"box2D.dynamics.joints.B2PrismaticJoint.getAnchorB","box2D/dynamics/joints/B2PrismaticJoint.hx",114,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_120_getReactionForce,"box2D.dynamics.joints.B2PrismaticJoint","getReactionForce",0x15c7e7d2,"box2D.dynamics.joints.B2PrismaticJoint.getReactionForce","box2D/dynamics/joints/B2PrismaticJoint.hx",120,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_127_getReactionTorque,"box2D.dynamics.joints.B2PrismaticJoint","getReactionTorque",0x922cab03,"box2D.dynamics.joints.B2PrismaticJoint.getReactionTorque","box2D/dynamics/joints/B2PrismaticJoint.hx",127,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_133_getJointTranslation,"box2D.dynamics.joints.B2PrismaticJoint","getJointTranslation",0x74931f77,"box2D.dynamics.joints.B2PrismaticJoint.getJointTranslation","box2D/dynamics/joints/B2PrismaticJoint.hx",133,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_155_getJointSpeed,"box2D.dynamics.joints.B2PrismaticJoint","getJointSpeed",0xb9993d8d,"box2D.dynamics.joints.B2PrismaticJoint.getJointSpeed","box2D/dynamics/joints/B2PrismaticJoint.hx",155,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_206_isLimitEnabled,"box2D.dynamics.joints.B2PrismaticJoint","isLimitEnabled",0xb236a4d6,"box2D.dynamics.joints.B2PrismaticJoint.isLimitEnabled","box2D/dynamics/joints/B2PrismaticJoint.hx",206,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_212_enableLimit,"box2D.dynamics.joints.B2PrismaticJoint","enableLimit",0x93e5b2b2,"box2D.dynamics.joints.B2PrismaticJoint.enableLimit","box2D/dynamics/joints/B2PrismaticJoint.hx",212,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_222_getLowerLimit,"box2D.dynamics.joints.B2PrismaticJoint","getLowerLimit",0x0b900d2a,"box2D.dynamics.joints.B2PrismaticJoint.getLowerLimit","box2D/dynamics/joints/B2PrismaticJoint.hx",222,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_229_getUpperLimit,"box2D.dynamics.joints.B2PrismaticJoint","getUpperLimit",0x10be8e29,"box2D.dynamics.joints.B2PrismaticJoint.getUpperLimit","box2D/dynamics/joints/B2PrismaticJoint.hx",229,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_235_setLimits,"box2D.dynamics.joints.B2PrismaticJoint","setLimits",0xf9d7e494,"box2D.dynamics.joints.B2PrismaticJoint.setLimits","box2D/dynamics/joints/B2PrismaticJoint.hx",235,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_247_isMotorEnabled,"box2D.dynamics.joints.B2PrismaticJoint","isMotorEnabled",0xba796edc,"box2D.dynamics.joints.B2PrismaticJoint.isMotorEnabled","box2D/dynamics/joints/B2PrismaticJoint.hx",247,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_253_enableMotor,"box2D.dynamics.joints.B2PrismaticJoint","enableMotor",0x2b48e3ec,"box2D.dynamics.joints.B2PrismaticJoint.enableMotor","box2D/dynamics/joints/B2PrismaticJoint.hx",253,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_262_setMotorSpeed,"box2D.dynamics.joints.B2PrismaticJoint","setMotorSpeed",0x11882c8e,"box2D.dynamics.joints.B2PrismaticJoint.setMotorSpeed","box2D/dynamics/joints/B2PrismaticJoint.hx",262,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_272_getMotorSpeed,"box2D.dynamics.joints.B2PrismaticJoint","getMotorSpeed",0xcc824a82,"box2D.dynamics.joints.B2PrismaticJoint.getMotorSpeed","box2D/dynamics/joints/B2PrismaticJoint.hx",272,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_279_setMaxMotorForce,"box2D.dynamics.joints.B2PrismaticJoint","setMaxMotorForce",0x05c04cbe,"box2D.dynamics.joints.B2PrismaticJoint.setMaxMotorForce","box2D/dynamics/joints/B2PrismaticJoint.hx",279,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_289_getMotorForce,"box2D.dynamics.joints.B2PrismaticJoint","getMotorForce",0x4fad64e6,"box2D.dynamics.joints.B2PrismaticJoint.getMotorForce","box2D/dynamics/joints/B2PrismaticJoint.hx",289,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_339_initVelocityConstraints,"box2D.dynamics.joints.B2PrismaticJoint","initVelocityConstraints",0x47c2d523,"box2D.dynamics.joints.B2PrismaticJoint.initVelocityConstraints","box2D/dynamics/joints/B2PrismaticJoint.hx",339,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_487_solveVelocityConstraints,"box2D.dynamics.joints.B2PrismaticJoint","solveVelocityConstraints",0x577af4e0,"box2D.dynamics.joints.B2PrismaticJoint.solveVelocityConstraints","box2D/dynamics/joints/B2PrismaticJoint.hx",487,0x93be09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_e13821f40b1344d0_605_solvePositionConstraints,"box2D.dynamics.joints.B2PrismaticJoint","solvePositionConstraints",0x8f5709d4,"box2D.dynamics.joints.B2PrismaticJoint.solvePositionConstraints","box2D/dynamics/joints/B2PrismaticJoint.hx",605,0x93be09d5)
namespace box2D{
namespace dynamics{
namespace joints{

void B2PrismaticJoint_obj::__construct( ::box2D::dynamics::joints::B2PrismaticJointDef def){
            	HX_GC_STACKFRAME(&_hx_pos_e13821f40b1344d0_296_new)
HXLINE( 297)		super::__construct(def);
HXLINE( 299)		this->m_localAnchor1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 300)		this->m_localAnchor2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 301)		this->m_localXAxis1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 302)		this->m_localYAxis1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 303)		this->m_axis =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 304)		this->m_perp =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 305)		this->m_K =  ::box2D::common::math::B2Mat33_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 306)		this->m_impulse =  ::box2D::common::math::B2Vec3_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 309)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 310)		Float tX;
HXLINE( 311)		Float tY;
HXLINE( 313)		{
HXLINE( 313)			 ::box2D::common::math::B2Vec2 _this = this->m_localAnchor1;
HXDLIN( 313)			 ::box2D::common::math::B2Vec2 v = def->localAnchorA;
HXDLIN( 313)			_this->x = v->x;
HXDLIN( 313)			_this->y = v->y;
            		}
HXLINE( 314)		{
HXLINE( 314)			 ::box2D::common::math::B2Vec2 _this1 = this->m_localAnchor2;
HXDLIN( 314)			 ::box2D::common::math::B2Vec2 v1 = def->localAnchorB;
HXDLIN( 314)			_this1->x = v1->x;
HXDLIN( 314)			_this1->y = v1->y;
            		}
HXLINE( 315)		{
HXLINE( 315)			 ::box2D::common::math::B2Vec2 _this2 = this->m_localXAxis1;
HXDLIN( 315)			 ::box2D::common::math::B2Vec2 v2 = def->localAxisA;
HXDLIN( 315)			_this2->x = v2->x;
HXDLIN( 315)			_this2->y = v2->y;
            		}
HXLINE( 318)		this->m_localYAxis1->x = -(this->m_localXAxis1->y);
HXLINE( 319)		this->m_localYAxis1->y = this->m_localXAxis1->x;
HXLINE( 321)		this->m_refAngle = def->referenceAngle;
HXLINE( 323)		this->m_impulse->setZero();
HXLINE( 324)		this->m_motorMass = ((Float)0.0);
HXLINE( 325)		this->m_motorImpulse = ((Float)0.0);
HXLINE( 327)		this->m_lowerTranslation = def->lowerTranslation;
HXLINE( 328)		this->m_upperTranslation = def->upperTranslation;
HXLINE( 329)		this->m_maxMotorForce = def->maxMotorForce;
HXLINE( 330)		this->m_motorSpeed = def->motorSpeed;
HXLINE( 331)		this->m_enableLimit = def->enableLimit;
HXLINE( 332)		this->m_enableMotor = def->enableMotor;
HXLINE( 333)		this->m_limitState = (int)0;
HXLINE( 335)		{
HXLINE( 335)			 ::box2D::common::math::B2Vec2 _this3 = this->m_axis;
HXDLIN( 335)			_this3->x = ((Float)0.0);
HXDLIN( 335)			_this3->y = ((Float)0.0);
            		}
HXLINE( 336)		{
HXLINE( 336)			 ::box2D::common::math::B2Vec2 _this4 = this->m_perp;
HXDLIN( 336)			_this4->x = ((Float)0.0);
HXDLIN( 336)			_this4->y = ((Float)0.0);
            		}
            	}

Dynamic B2PrismaticJoint_obj::__CreateEmpty() { return new B2PrismaticJoint_obj; }

void *B2PrismaticJoint_obj::_hx_vtable = 0;

Dynamic B2PrismaticJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2PrismaticJoint_obj > _hx_result = new B2PrismaticJoint_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool B2PrismaticJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0a894446) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0a894446;
	} else {
		return inClassId==(int)0x13310c20;
	}
}

 ::box2D::common::math::B2Vec2 B2PrismaticJoint_obj::getAnchorA(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_110_getAnchorA)
HXDLIN( 110)		return this->m_bodyA->getWorldPoint(this->m_localAnchor1);
            	}


 ::box2D::common::math::B2Vec2 B2PrismaticJoint_obj::getAnchorB(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_114_getAnchorB)
HXDLIN( 114)		return this->m_bodyB->getWorldPoint(this->m_localAnchor2);
            	}


 ::box2D::common::math::B2Vec2 B2PrismaticJoint_obj::getReactionForce(Float inv_dt){
            	HX_GC_STACKFRAME(&_hx_pos_e13821f40b1344d0_120_getReactionForce)
HXDLIN( 120)		Float _hx_tmp = (this->m_impulse->x * this->m_perp->x);
HXDLIN( 120)		Float _hx_tmp1 = (inv_dt * (_hx_tmp + ((this->m_motorImpulse + this->m_impulse->z) * this->m_axis->x)));
HXLINE( 121)		Float _hx_tmp2 = (this->m_impulse->x * this->m_perp->y);
HXLINE( 120)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp1,(inv_dt * (_hx_tmp2 + ((this->m_motorImpulse + this->m_impulse->z) * this->m_axis->y))));
            	}


Float B2PrismaticJoint_obj::getReactionTorque(Float inv_dt){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_127_getReactionTorque)
HXDLIN( 127)		return (inv_dt * this->m_impulse->y);
            	}


Float B2PrismaticJoint_obj::getJointTranslation(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_133_getJointTranslation)
HXLINE( 134)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 135)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 137)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 139)		 ::box2D::common::math::B2Vec2 p1 = bA->getWorldPoint(this->m_localAnchor1);
HXLINE( 140)		 ::box2D::common::math::B2Vec2 p2 = bB->getWorldPoint(this->m_localAnchor2);
HXLINE( 142)		Float dX = (p2->x - p1->x);
HXLINE( 143)		Float dY = (p2->y - p1->y);
HXLINE( 145)		 ::box2D::common::math::B2Vec2 axis = bA->getWorldVector(this->m_localXAxis1);
HXLINE( 148)		Float translation = (axis->x * dX);
HXDLIN( 148)		Float translation1 = (translation + (axis->y * dY));
HXLINE( 149)		return translation1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PrismaticJoint_obj,getJointTranslation,return )

Float B2PrismaticJoint_obj::getJointSpeed(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_155_getJointSpeed)
HXLINE( 156)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 157)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 159)		 ::box2D::common::math::B2Mat22 tMat = bA->m_xf->R;
HXLINE( 163)		Float r1X = (this->m_localAnchor1->x - bA->m_sweep->localCenter->x);
HXLINE( 164)		Float r1Y = (this->m_localAnchor1->y - bA->m_sweep->localCenter->y);
HXLINE( 165)		Float tX = (tMat->col1->x * r1X);
HXDLIN( 165)		Float tX1 = (tX + (tMat->col2->x * r1Y));
HXLINE( 166)		Float r1Y1 = (tMat->col1->y * r1X);
HXDLIN( 166)		r1Y = (r1Y1 + (tMat->col2->y * r1Y));
HXLINE( 167)		r1X = tX1;
HXLINE( 169)		tMat = bB->m_xf->R;
HXLINE( 170)		Float r2X = (this->m_localAnchor2->x - bB->m_sweep->localCenter->x);
HXLINE( 171)		Float r2Y = (this->m_localAnchor2->y - bB->m_sweep->localCenter->y);
HXLINE( 172)		Float tX2 = (tMat->col1->x * r2X);
HXDLIN( 172)		tX1 = (tX2 + (tMat->col2->x * r2Y));
HXLINE( 173)		Float r2Y1 = (tMat->col1->y * r2X);
HXDLIN( 173)		r2Y = (r2Y1 + (tMat->col2->y * r2Y));
HXLINE( 174)		r2X = tX1;
HXLINE( 177)		Float p1X = (bA->m_sweep->c->x + r1X);
HXLINE( 178)		Float p1Y = (bA->m_sweep->c->y + r1Y);
HXLINE( 180)		Float p2X = (bB->m_sweep->c->x + r2X);
HXLINE( 181)		Float p2Y = (bB->m_sweep->c->y + r2Y);
HXLINE( 183)		Float dX = (p2X - p1X);
HXLINE( 184)		Float dY = (p2Y - p1Y);
HXLINE( 186)		 ::box2D::common::math::B2Vec2 axis = bA->getWorldVector(this->m_localXAxis1);
HXLINE( 188)		 ::box2D::common::math::B2Vec2 v1 = bA->m_linearVelocity;
HXLINE( 189)		 ::box2D::common::math::B2Vec2 v2 = bB->m_linearVelocity;
HXLINE( 190)		Float w1 = bA->m_angularVelocity;
HXLINE( 191)		Float w2 = bB->m_angularVelocity;
HXLINE( 196)		Float speed = (dX * (-(w1) * axis->y));
HXDLIN( 196)		Float speed1 = (speed + (dY * (w1 * axis->x)));
HXDLIN( 196)		Float axis1 = axis->x;
HXDLIN( 196)		Float v21 = v2->x;
HXDLIN( 196)		Float speed2 = ((v21 + (-(w2) * r2Y)) - v1->x);
HXDLIN( 196)		Float speed3 = (axis1 * (speed2 - (-(w1) * r1Y)));
HXDLIN( 196)		Float axis2 = axis->y;
HXDLIN( 196)		Float v22 = v2->y;
HXDLIN( 196)		Float speed4 = ((v22 + (w2 * r2X)) - v1->y);
HXDLIN( 196)		Float speed5 = (speed1 + (speed3 + (axis2 * (speed4 - (w1 * r1X)))));
HXLINE( 198)		return speed5;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PrismaticJoint_obj,getJointSpeed,return )

bool B2PrismaticJoint_obj::isLimitEnabled(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_206_isLimitEnabled)
HXDLIN( 206)		return this->m_enableLimit;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PrismaticJoint_obj,isLimitEnabled,return )

void B2PrismaticJoint_obj::enableLimit(bool flag){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_212_enableLimit)
HXLINE( 213)		this->m_bodyA->setAwake(true);
HXLINE( 214)		this->m_bodyB->setAwake(true);
HXLINE( 215)		this->m_enableLimit = flag;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2PrismaticJoint_obj,enableLimit,(void))

Float B2PrismaticJoint_obj::getLowerLimit(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_222_getLowerLimit)
HXDLIN( 222)		return this->m_lowerTranslation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PrismaticJoint_obj,getLowerLimit,return )

Float B2PrismaticJoint_obj::getUpperLimit(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_229_getUpperLimit)
HXDLIN( 229)		return this->m_upperTranslation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PrismaticJoint_obj,getUpperLimit,return )

void B2PrismaticJoint_obj::setLimits(Float lower,Float upper){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_235_setLimits)
HXLINE( 237)		this->m_bodyA->setAwake(true);
HXLINE( 238)		this->m_bodyB->setAwake(true);
HXLINE( 239)		this->m_lowerTranslation = lower;
HXLINE( 240)		this->m_upperTranslation = upper;
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2PrismaticJoint_obj,setLimits,(void))

bool B2PrismaticJoint_obj::isMotorEnabled(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_247_isMotorEnabled)
HXDLIN( 247)		return this->m_enableMotor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PrismaticJoint_obj,isMotorEnabled,return )

void B2PrismaticJoint_obj::enableMotor(bool flag){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_253_enableMotor)
HXLINE( 254)		this->m_bodyA->setAwake(true);
HXLINE( 255)		this->m_bodyB->setAwake(true);
HXLINE( 256)		this->m_enableMotor = flag;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2PrismaticJoint_obj,enableMotor,(void))

void B2PrismaticJoint_obj::setMotorSpeed(Float speed){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_262_setMotorSpeed)
HXLINE( 263)		this->m_bodyA->setAwake(true);
HXLINE( 264)		this->m_bodyB->setAwake(true);
HXLINE( 265)		this->m_motorSpeed = speed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2PrismaticJoint_obj,setMotorSpeed,(void))

Float B2PrismaticJoint_obj::getMotorSpeed(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_272_getMotorSpeed)
HXDLIN( 272)		return this->m_motorSpeed;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PrismaticJoint_obj,getMotorSpeed,return )

void B2PrismaticJoint_obj::setMaxMotorForce(Float force){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_279_setMaxMotorForce)
HXLINE( 280)		this->m_bodyA->setAwake(true);
HXLINE( 281)		this->m_bodyB->setAwake(true);
HXLINE( 282)		this->m_maxMotorForce = force;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2PrismaticJoint_obj,setMaxMotorForce,(void))

Float B2PrismaticJoint_obj::getMotorForce(){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_289_getMotorForce)
HXDLIN( 289)		return this->m_motorImpulse;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PrismaticJoint_obj,getMotorForce,return )

void B2PrismaticJoint_obj::initVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_e13821f40b1344d0_339_initVelocityConstraints)
HXLINE( 340)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 341)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 343)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 344)		Float tX;
HXLINE( 346)		{
HXLINE( 346)			 ::box2D::common::math::B2Vec2 _this = this->m_localCenterA;
HXDLIN( 346)			 ::box2D::common::math::B2Vec2 v = bA->getLocalCenter();
HXDLIN( 346)			_this->x = v->x;
HXDLIN( 346)			_this->y = v->y;
            		}
HXLINE( 347)		{
HXLINE( 347)			 ::box2D::common::math::B2Vec2 _this1 = this->m_localCenterB;
HXDLIN( 347)			 ::box2D::common::math::B2Vec2 v1 = bB->getLocalCenter();
HXDLIN( 347)			_this1->x = v1->x;
HXDLIN( 347)			_this1->y = v1->y;
            		}
HXLINE( 349)		 ::box2D::common::math::B2Transform xf1 = bA->getTransform();
HXLINE( 350)		 ::box2D::common::math::B2Transform xf2 = bB->getTransform();
HXLINE( 354)		tMat = bA->m_xf->R;
HXLINE( 355)		Float r1X = (this->m_localAnchor1->x - this->m_localCenterA->x);
HXLINE( 356)		Float r1Y = (this->m_localAnchor1->y - this->m_localCenterA->y);
HXLINE( 357)		Float tX1 = (tMat->col1->x * r1X);
HXDLIN( 357)		tX = (tX1 + (tMat->col2->x * r1Y));
HXLINE( 358)		Float r1Y1 = (tMat->col1->y * r1X);
HXDLIN( 358)		r1Y = (r1Y1 + (tMat->col2->y * r1Y));
HXLINE( 359)		r1X = tX;
HXLINE( 361)		tMat = bB->m_xf->R;
HXLINE( 362)		Float r2X = (this->m_localAnchor2->x - this->m_localCenterB->x);
HXLINE( 363)		Float r2Y = (this->m_localAnchor2->y - this->m_localCenterB->y);
HXLINE( 364)		Float tX2 = (tMat->col1->x * r2X);
HXDLIN( 364)		tX = (tX2 + (tMat->col2->x * r2Y));
HXLINE( 365)		Float r2Y1 = (tMat->col1->y * r2X);
HXDLIN( 365)		r2Y = (r2Y1 + (tMat->col2->y * r2Y));
HXLINE( 366)		r2X = tX;
HXLINE( 369)		Float dX = (((bB->m_sweep->c->x + r2X) - bA->m_sweep->c->x) - r1X);
HXLINE( 370)		Float dY = (((bB->m_sweep->c->y + r2Y) - bA->m_sweep->c->y) - r1Y);
HXLINE( 372)		this->m_invMassA = bA->m_invMass;
HXLINE( 373)		this->m_invMassB = bB->m_invMass;
HXLINE( 374)		this->m_invIA = bA->m_invI;
HXLINE( 375)		this->m_invIB = bB->m_invI;
HXLINE( 378)		{
HXLINE( 379)			{
HXLINE( 379)				 ::box2D::common::math::B2Vec2 _this2 = this->m_axis;
HXDLIN( 379)				 ::box2D::common::math::B2Vec2 v2 = ::box2D::common::math::B2Math_obj::mulMV(xf1->R,this->m_localXAxis1,null());
HXDLIN( 379)				_this2->x = v2->x;
HXDLIN( 379)				_this2->y = v2->y;
            			}
HXLINE( 381)			Float _hx_tmp = ((dX + r1X) * this->m_axis->y);
HXDLIN( 381)			this->m_a1 = (_hx_tmp - ((dY + r1Y) * this->m_axis->x));
HXLINE( 383)			Float _hx_tmp1 = (r2X * this->m_axis->y);
HXDLIN( 383)			this->m_a2 = (_hx_tmp1 - (r2Y * this->m_axis->x));
HXLINE( 385)			Float _hx_tmp2 = (this->m_invMassA + this->m_invMassB);
HXDLIN( 385)			Float _hx_tmp3 = (_hx_tmp2 + ((this->m_invIA * this->m_a1) * this->m_a1));
HXDLIN( 385)			this->m_motorMass = (_hx_tmp3 + ((this->m_invIB * this->m_a2) * this->m_a2));
HXLINE( 386)			if ((this->m_motorMass > ((Float)2.2250738585072014e-308))) {
HXLINE( 387)				this->m_motorMass = ((Float)((Float)1.0) / (Float)this->m_motorMass);
            			}
            		}
HXLINE( 391)		{
HXLINE( 392)			{
HXLINE( 392)				 ::box2D::common::math::B2Vec2 _this3 = this->m_perp;
HXDLIN( 392)				 ::box2D::common::math::B2Vec2 v3 = ::box2D::common::math::B2Math_obj::mulMV(xf1->R,this->m_localYAxis1,null());
HXDLIN( 392)				_this3->x = v3->x;
HXDLIN( 392)				_this3->y = v3->y;
            			}
HXLINE( 394)			Float _hx_tmp4 = ((dX + r1X) * this->m_perp->y);
HXDLIN( 394)			this->m_s1 = (_hx_tmp4 - ((dY + r1Y) * this->m_perp->x));
HXLINE( 396)			Float _hx_tmp5 = (r2X * this->m_perp->y);
HXDLIN( 396)			this->m_s2 = (_hx_tmp5 - (r2Y * this->m_perp->x));
HXLINE( 398)			Float m1 = this->m_invMassA;
HXLINE( 399)			Float m2 = this->m_invMassB;
HXLINE( 400)			Float i1 = this->m_invIA;
HXLINE( 401)			Float i2 = this->m_invIB;
HXLINE( 403)			Float _hx_tmp6 = ((m1 + m2) + ((i1 * this->m_s1) * this->m_s1));
HXDLIN( 403)			this->m_K->col1->x = (_hx_tmp6 + ((i2 * this->m_s2) * this->m_s2));
HXLINE( 404)			Float _hx_tmp7 = (i1 * this->m_s1);
HXDLIN( 404)			this->m_K->col1->y = (_hx_tmp7 + (i2 * this->m_s2));
HXLINE( 405)			Float _hx_tmp8 = ((i1 * this->m_s1) * this->m_a1);
HXDLIN( 405)			this->m_K->col1->z = (_hx_tmp8 + ((i2 * this->m_s2) * this->m_a2));
HXLINE( 406)			this->m_K->col2->x = this->m_K->col1->y;
HXLINE( 407)			this->m_K->col2->y = (i1 + i2);
HXLINE( 408)			Float _hx_tmp9 = (i1 * this->m_a1);
HXDLIN( 408)			this->m_K->col2->z = (_hx_tmp9 + (i2 * this->m_a2));
HXLINE( 409)			this->m_K->col3->x = this->m_K->col1->z;
HXLINE( 410)			this->m_K->col3->y = this->m_K->col2->z;
HXLINE( 411)			Float _hx_tmp10 = ((m1 + m2) + ((i1 * this->m_a1) * this->m_a1));
HXDLIN( 411)			this->m_K->col3->z = (_hx_tmp10 + ((i2 * this->m_a2) * this->m_a2));
            		}
HXLINE( 415)		if (this->m_enableLimit) {
HXLINE( 418)			Float jointTransition = (this->m_axis->x * dX);
HXDLIN( 418)			Float jointTransition1 = (jointTransition + (this->m_axis->y * dY));
HXLINE( 419)			Float _hx_tmp11 = ::box2D::common::math::B2Math_obj::abs((this->m_upperTranslation - this->m_lowerTranslation));
HXDLIN( 419)			if ((_hx_tmp11 < (((Float)2.0) * ::box2D::common::B2Settings_obj::b2_linearSlop))) {
HXLINE( 421)				this->m_limitState = (int)3;
            			}
            			else {
HXLINE( 423)				if ((jointTransition1 <= this->m_lowerTranslation)) {
HXLINE( 425)					if ((this->m_limitState != (int)1)) {
HXLINE( 427)						this->m_limitState = (int)1;
HXLINE( 428)						this->m_impulse->z = ((Float)0.0);
            					}
            				}
            				else {
HXLINE( 431)					if ((jointTransition1 >= this->m_upperTranslation)) {
HXLINE( 433)						if ((this->m_limitState != (int)2)) {
HXLINE( 435)							this->m_limitState = (int)2;
HXLINE( 436)							this->m_impulse->z = ((Float)0.0);
            						}
            					}
            					else {
HXLINE( 441)						this->m_limitState = (int)0;
HXLINE( 442)						this->m_impulse->z = ((Float)0.0);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 447)			this->m_limitState = (int)0;
            		}
HXLINE( 450)		if ((this->m_enableMotor == false)) {
HXLINE( 452)			this->m_motorImpulse = ((Float)0.0);
            		}
HXLINE( 455)		if (step->warmStarting) {
HXLINE( 458)			 ::box2D::common::math::B2Vec3 _hx_tmp12 = this->m_impulse;
HXDLIN( 458)			_hx_tmp12->x = (_hx_tmp12->x * step->dtRatio);
HXLINE( 459)			 ::box2D::common::math::B2Vec3 _hx_tmp13 = this->m_impulse;
HXDLIN( 459)			_hx_tmp13->y = (_hx_tmp13->y * step->dtRatio);
HXLINE( 460)			 ::box2D::dynamics::joints::B2PrismaticJoint _hx_tmp14 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 460)			_hx_tmp14->m_motorImpulse = (_hx_tmp14->m_motorImpulse * step->dtRatio);
HXLINE( 463)			Float PX = (this->m_impulse->x * this->m_perp->x);
HXDLIN( 463)			Float PX1 = (PX + ((this->m_motorImpulse + this->m_impulse->z) * this->m_axis->x));
HXLINE( 464)			Float PY = (this->m_impulse->x * this->m_perp->y);
HXDLIN( 464)			Float PY1 = (PY + ((this->m_motorImpulse + this->m_impulse->z) * this->m_axis->y));
HXLINE( 465)			Float L1 = ((this->m_impulse->x * this->m_s1) + this->m_impulse->y);
HXDLIN( 465)			Float L11 = (L1 + ((this->m_motorImpulse + this->m_impulse->z) * this->m_a1));
HXLINE( 466)			Float L2 = ((this->m_impulse->x * this->m_s2) + this->m_impulse->y);
HXDLIN( 466)			Float L21 = (L2 + ((this->m_motorImpulse + this->m_impulse->z) * this->m_a2));
HXLINE( 469)			 ::box2D::common::math::B2Vec2 bA1 = bA->m_linearVelocity;
HXDLIN( 469)			bA1->x = (bA1->x - (this->m_invMassA * PX1));
HXLINE( 470)			 ::box2D::common::math::B2Vec2 bA2 = bA->m_linearVelocity;
HXDLIN( 470)			bA2->y = (bA2->y - (this->m_invMassA * PY1));
HXLINE( 472)			 ::box2D::dynamics::B2Body bA3 = bA;
HXDLIN( 472)			bA3->m_angularVelocity = (bA3->m_angularVelocity - (this->m_invIA * L11));
HXLINE( 475)			 ::box2D::common::math::B2Vec2 bB1 = bB->m_linearVelocity;
HXDLIN( 475)			bB1->x = (bB1->x + (this->m_invMassB * PX1));
HXLINE( 476)			 ::box2D::common::math::B2Vec2 bB2 = bB->m_linearVelocity;
HXDLIN( 476)			bB2->y = (bB2->y + (this->m_invMassB * PY1));
HXLINE( 478)			 ::box2D::dynamics::B2Body bB3 = bB;
HXDLIN( 478)			bB3->m_angularVelocity = (bB3->m_angularVelocity + (this->m_invIB * L21));
            		}
            		else {
HXLINE( 482)			this->m_impulse->setZero();
HXLINE( 483)			this->m_motorImpulse = ((Float)0.0);
            		}
            	}


void B2PrismaticJoint_obj::solveVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_GC_STACKFRAME(&_hx_pos_e13821f40b1344d0_487_solveVelocityConstraints)
HXLINE( 488)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 489)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 491)		 ::box2D::common::math::B2Vec2 v1 = bA->m_linearVelocity;
HXLINE( 492)		Float w1 = bA->m_angularVelocity;
HXLINE( 493)		 ::box2D::common::math::B2Vec2 v2 = bB->m_linearVelocity;
HXLINE( 494)		Float w2 = bB->m_angularVelocity;
HXLINE( 496)		Float PX;
HXLINE( 497)		Float PY;
HXLINE( 498)		Float L1;
HXLINE( 499)		Float L2;
HXLINE( 502)		bool _hx_tmp;
HXDLIN( 502)		if (this->m_enableMotor) {
HXLINE( 502)			_hx_tmp = (this->m_limitState != (int)3);
            		}
            		else {
HXLINE( 502)			_hx_tmp = false;
            		}
HXDLIN( 502)		if (_hx_tmp) {
HXLINE( 505)			Float Cdot = this->m_axis->x;
HXDLIN( 505)			Float Cdot1 = (Cdot * (v2->x - v1->x));
HXDLIN( 505)			Float Cdot2 = this->m_axis->y;
HXDLIN( 505)			Float Cdot3 = (Cdot1 + (Cdot2 * (v2->y - v1->y)));
HXDLIN( 505)			Float Cdot4 = (Cdot3 + (this->m_a2 * w2));
HXDLIN( 505)			Float Cdot5 = (Cdot4 - (this->m_a1 * w1));
HXLINE( 506)			Float impulse = this->m_motorMass;
HXDLIN( 506)			Float impulse1 = (impulse * (this->m_motorSpeed - Cdot5));
HXLINE( 507)			Float oldImpulse = this->m_motorImpulse;
HXLINE( 508)			Float maxImpulse = (step->dt * this->m_maxMotorForce);
HXLINE( 509)			this->m_motorImpulse = ::box2D::common::math::B2Math_obj::clamp((this->m_motorImpulse + impulse1),-(maxImpulse),maxImpulse);
HXLINE( 510)			impulse1 = (this->m_motorImpulse - oldImpulse);
HXLINE( 512)			PX = (impulse1 * this->m_axis->x);
HXLINE( 513)			PY = (impulse1 * this->m_axis->y);
HXLINE( 514)			L1 = (impulse1 * this->m_a1);
HXLINE( 515)			L2 = (impulse1 * this->m_a2);
HXLINE( 517)			 ::box2D::common::math::B2Vec2 v11 = v1;
HXDLIN( 517)			v11->x = (v11->x - (this->m_invMassA * PX));
HXLINE( 518)			 ::box2D::common::math::B2Vec2 v12 = v1;
HXDLIN( 518)			v12->y = (v12->y - (this->m_invMassA * PY));
HXLINE( 519)			w1 = (w1 - (this->m_invIA * L1));
HXLINE( 521)			 ::box2D::common::math::B2Vec2 v21 = v2;
HXDLIN( 521)			v21->x = (v21->x + (this->m_invMassB * PX));
HXLINE( 522)			 ::box2D::common::math::B2Vec2 v22 = v2;
HXDLIN( 522)			v22->y = (v22->y + (this->m_invMassB * PY));
HXLINE( 523)			w2 = (w2 + (this->m_invIB * L2));
            		}
HXLINE( 527)		Float Cdot1X = this->m_perp->x;
HXDLIN( 527)		Float Cdot1X1 = (Cdot1X * (v2->x - v1->x));
HXDLIN( 527)		Float Cdot1X2 = this->m_perp->y;
HXDLIN( 527)		Float Cdot1X3 = (Cdot1X1 + (Cdot1X2 * (v2->y - v1->y)));
HXDLIN( 527)		Float Cdot1X4 = (Cdot1X3 + (this->m_s2 * w2));
HXDLIN( 527)		Float Cdot1X5 = (Cdot1X4 - (this->m_s1 * w1));
HXLINE( 528)		Float Cdot1Y = (w2 - w1);
HXLINE( 530)		bool _hx_tmp1;
HXDLIN( 530)		if (this->m_enableLimit) {
HXLINE( 530)			_hx_tmp1 = (this->m_limitState != (int)0);
            		}
            		else {
HXLINE( 530)			_hx_tmp1 = false;
            		}
HXDLIN( 530)		if (_hx_tmp1) {
HXLINE( 534)			Float Cdot21 = this->m_axis->x;
HXDLIN( 534)			Float Cdot22 = (Cdot21 * (v2->x - v1->x));
HXDLIN( 534)			Float Cdot23 = this->m_axis->y;
HXDLIN( 534)			Float Cdot24 = (Cdot22 + (Cdot23 * (v2->y - v1->y)));
HXDLIN( 534)			Float Cdot25 = (Cdot24 + (this->m_a2 * w2));
HXDLIN( 534)			Float Cdot26 = (Cdot25 - (this->m_a1 * w1));
HXLINE( 536)			 ::box2D::common::math::B2Vec3 f1 = this->m_impulse->copy();
HXLINE( 537)			 ::box2D::common::math::B2Mat33 df = this->m_K;
HXDLIN( 537)			 ::box2D::common::math::B2Vec3 df1 = df->solve33( ::box2D::common::math::B2Vec3_obj::__alloc( HX_CTX ,null(),null(),null()),-(Cdot1X5),-(Cdot1Y),-(Cdot26));
HXLINE( 539)			this->m_impulse->add(df1);
HXLINE( 541)			if ((this->m_limitState == (int)1)) {
HXLINE( 543)				this->m_impulse->z = ::box2D::common::math::B2Math_obj::max(this->m_impulse->z,((Float)0.0));
            			}
            			else {
HXLINE( 545)				if ((this->m_limitState == (int)2)) {
HXLINE( 547)					this->m_impulse->z = ::box2D::common::math::B2Math_obj::min(this->m_impulse->z,((Float)0.0));
            				}
            			}
HXLINE( 552)			Float bX = (-(Cdot1X5) - ((this->m_impulse->z - f1->z) * this->m_K->col3->x));
HXLINE( 553)			Float bY = (-(Cdot1Y) - ((this->m_impulse->z - f1->z) * this->m_K->col3->y));
HXLINE( 554)			 ::box2D::common::math::B2Mat33 f2r = this->m_K;
HXDLIN( 554)			 ::box2D::common::math::B2Vec2 f2r1 = f2r->solve22( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null()),bX,bY);
HXLINE( 555)			 ::box2D::common::math::B2Vec2 f2r2 = f2r1;
HXDLIN( 555)			f2r2->x = (f2r2->x + f1->x);
HXLINE( 556)			 ::box2D::common::math::B2Vec2 f2r3 = f2r1;
HXDLIN( 556)			f2r3->y = (f2r3->y + f1->y);
HXLINE( 557)			this->m_impulse->x = f2r1->x;
HXLINE( 558)			this->m_impulse->y = f2r1->y;
HXLINE( 560)			df1->x = (this->m_impulse->x - f1->x);
HXLINE( 561)			df1->y = (this->m_impulse->y - f1->y);
HXLINE( 562)			df1->z = (this->m_impulse->z - f1->z);
HXLINE( 564)			Float PX1 = (df1->x * this->m_perp->x);
HXDLIN( 564)			PX = (PX1 + (df1->z * this->m_axis->x));
HXLINE( 565)			Float PY1 = (df1->x * this->m_perp->y);
HXDLIN( 565)			PY = (PY1 + (df1->z * this->m_axis->y));
HXLINE( 566)			Float L11 = ((df1->x * this->m_s1) + df1->y);
HXDLIN( 566)			L1 = (L11 + (df1->z * this->m_a1));
HXLINE( 567)			Float L21 = ((df1->x * this->m_s2) + df1->y);
HXDLIN( 567)			L2 = (L21 + (df1->z * this->m_a2));
HXLINE( 569)			 ::box2D::common::math::B2Vec2 v13 = v1;
HXDLIN( 569)			v13->x = (v13->x - (this->m_invMassA * PX));
HXLINE( 570)			 ::box2D::common::math::B2Vec2 v14 = v1;
HXDLIN( 570)			v14->y = (v14->y - (this->m_invMassA * PY));
HXLINE( 571)			w1 = (w1 - (this->m_invIA * L1));
HXLINE( 573)			 ::box2D::common::math::B2Vec2 v23 = v2;
HXDLIN( 573)			v23->x = (v23->x + (this->m_invMassB * PX));
HXLINE( 574)			 ::box2D::common::math::B2Vec2 v24 = v2;
HXDLIN( 574)			v24->y = (v24->y + (this->m_invMassB * PY));
HXLINE( 575)			w2 = (w2 + (this->m_invIB * L2));
            		}
            		else {
HXLINE( 580)			 ::box2D::common::math::B2Mat33 df2 = this->m_K;
HXDLIN( 580)			 ::box2D::common::math::B2Vec2 df21 = df2->solve22( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null()),-(Cdot1X5),-(Cdot1Y));
HXLINE( 581)			 ::box2D::common::math::B2Vec3 _hx_tmp2 = this->m_impulse;
HXDLIN( 581)			_hx_tmp2->x = (_hx_tmp2->x + df21->x);
HXLINE( 582)			 ::box2D::common::math::B2Vec3 _hx_tmp3 = this->m_impulse;
HXDLIN( 582)			_hx_tmp3->y = (_hx_tmp3->y + df21->y);
HXLINE( 584)			PX = (df21->x * this->m_perp->x);
HXLINE( 585)			PY = (df21->x * this->m_perp->y);
HXLINE( 586)			L1 = ((df21->x * this->m_s1) + df21->y);
HXLINE( 587)			L2 = ((df21->x * this->m_s2) + df21->y);
HXLINE( 589)			 ::box2D::common::math::B2Vec2 v15 = v1;
HXDLIN( 589)			v15->x = (v15->x - (this->m_invMassA * PX));
HXLINE( 590)			 ::box2D::common::math::B2Vec2 v16 = v1;
HXDLIN( 590)			v16->y = (v16->y - (this->m_invMassA * PY));
HXLINE( 591)			w1 = (w1 - (this->m_invIA * L1));
HXLINE( 593)			 ::box2D::common::math::B2Vec2 v25 = v2;
HXDLIN( 593)			v25->x = (v25->x + (this->m_invMassB * PX));
HXLINE( 594)			 ::box2D::common::math::B2Vec2 v26 = v2;
HXDLIN( 594)			v26->y = (v26->y + (this->m_invMassB * PY));
HXLINE( 595)			w2 = (w2 + (this->m_invIB * L2));
            		}
HXLINE( 598)		{
HXLINE( 598)			 ::box2D::common::math::B2Vec2 _this = bA->m_linearVelocity;
HXDLIN( 598)			_this->x = v1->x;
HXDLIN( 598)			_this->y = v1->y;
            		}
HXLINE( 599)		bA->m_angularVelocity = w1;
HXLINE( 600)		{
HXLINE( 600)			 ::box2D::common::math::B2Vec2 _this1 = bB->m_linearVelocity;
HXDLIN( 600)			_this1->x = v2->x;
HXDLIN( 600)			_this1->y = v2->y;
            		}
HXLINE( 601)		bB->m_angularVelocity = w2;
            	}


bool B2PrismaticJoint_obj::solvePositionConstraints(Float baumgarte){
            	HX_GC_STACKFRAME(&_hx_pos_e13821f40b1344d0_605_solvePositionConstraints)
HXLINE( 609)		Float limitC;
HXLINE( 610)		Float oldLimitImpulse;
HXLINE( 612)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 613)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 615)		 ::box2D::common::math::B2Vec2 c1 = bA->m_sweep->c;
HXLINE( 616)		Float a1 = bA->m_sweep->a;
HXLINE( 618)		 ::box2D::common::math::B2Vec2 c2 = bB->m_sweep->c;
HXLINE( 619)		Float a2 = bB->m_sweep->a;
HXLINE( 621)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 622)		Float tX;
HXLINE( 624)		Float m1;
HXLINE( 625)		Float m2;
HXLINE( 626)		Float i1;
HXLINE( 627)		Float i2;
HXLINE( 630)		Float linearError = ((Float)0.0);
HXLINE( 631)		Float angularError = ((Float)0.0);
HXLINE( 632)		bool active = false;
HXLINE( 633)		Float C2 = ((Float)0.0);
HXLINE( 635)		 ::box2D::common::math::B2Mat22 R1 = ::box2D::common::math::B2Mat22_obj::fromAngle(a1);
HXLINE( 636)		 ::box2D::common::math::B2Mat22 R2 = ::box2D::common::math::B2Mat22_obj::fromAngle(a2);
HXLINE( 639)		tMat = R1;
HXLINE( 640)		Float r1X = (this->m_localAnchor1->x - this->m_localCenterA->x);
HXLINE( 641)		Float r1Y = (this->m_localAnchor1->y - this->m_localCenterA->y);
HXLINE( 642)		Float tX1 = (tMat->col1->x * r1X);
HXDLIN( 642)		tX = (tX1 + (tMat->col2->x * r1Y));
HXLINE( 643)		Float r1Y1 = (tMat->col1->y * r1X);
HXDLIN( 643)		r1Y = (r1Y1 + (tMat->col2->y * r1Y));
HXLINE( 644)		r1X = tX;
HXLINE( 646)		tMat = R2;
HXLINE( 647)		Float r2X = (this->m_localAnchor2->x - this->m_localCenterB->x);
HXLINE( 648)		Float r2Y = (this->m_localAnchor2->y - this->m_localCenterB->y);
HXLINE( 649)		Float tX2 = (tMat->col1->x * r2X);
HXDLIN( 649)		tX = (tX2 + (tMat->col2->x * r2Y));
HXLINE( 650)		Float r2Y1 = (tMat->col1->y * r2X);
HXDLIN( 650)		r2Y = (r2Y1 + (tMat->col2->y * r2Y));
HXLINE( 651)		r2X = tX;
HXLINE( 653)		Float dX = (((c2->x + r2X) - c1->x) - r1X);
HXLINE( 654)		Float dY = (((c2->y + r2Y) - c1->y) - r1Y);
HXLINE( 656)		if (this->m_enableLimit) {
HXLINE( 658)			this->m_axis = ::box2D::common::math::B2Math_obj::mulMV(R1,this->m_localXAxis1,null());
HXLINE( 661)			Float _hx_tmp = ((dX + r1X) * this->m_axis->y);
HXDLIN( 661)			this->m_a1 = (_hx_tmp - ((dY + r1Y) * this->m_axis->x));
HXLINE( 663)			Float _hx_tmp1 = (r2X * this->m_axis->y);
HXDLIN( 663)			this->m_a2 = (_hx_tmp1 - (r2Y * this->m_axis->x));
HXLINE( 665)			Float translation = (this->m_axis->x * dX);
HXDLIN( 665)			Float translation1 = (translation + (this->m_axis->y * dY));
HXLINE( 666)			Float _hx_tmp2 = ::box2D::common::math::B2Math_obj::abs((this->m_upperTranslation - this->m_lowerTranslation));
HXDLIN( 666)			if ((_hx_tmp2 < (((Float)2.0) * ::box2D::common::B2Settings_obj::b2_linearSlop))) {
HXLINE( 669)				C2 = ::box2D::common::math::B2Math_obj::clamp(translation1,-(::box2D::common::B2Settings_obj::b2_maxLinearCorrection),::box2D::common::B2Settings_obj::b2_maxLinearCorrection);
HXLINE( 670)				linearError = ::box2D::common::math::B2Math_obj::abs(translation1);
HXLINE( 671)				active = true;
            			}
            			else {
HXLINE( 673)				if ((translation1 <= this->m_lowerTranslation)) {
HXLINE( 676)					C2 = ::box2D::common::math::B2Math_obj::clamp(((translation1 - this->m_lowerTranslation) + ::box2D::common::B2Settings_obj::b2_linearSlop),-(::box2D::common::B2Settings_obj::b2_maxLinearCorrection),((Float)0.0));
HXLINE( 677)					linearError = (this->m_lowerTranslation - translation1);
HXLINE( 678)					active = true;
            				}
            				else {
HXLINE( 680)					if ((translation1 >= this->m_upperTranslation)) {
HXLINE( 683)						C2 = ::box2D::common::math::B2Math_obj::clamp(((translation1 - this->m_upperTranslation) + ::box2D::common::B2Settings_obj::b2_linearSlop),((Float)0.0),::box2D::common::B2Settings_obj::b2_maxLinearCorrection);
HXLINE( 684)						linearError = (translation1 - this->m_upperTranslation);
HXLINE( 685)						active = true;
            					}
            				}
            			}
            		}
HXLINE( 689)		this->m_perp = ::box2D::common::math::B2Math_obj::mulMV(R1,this->m_localYAxis1,null());
HXLINE( 692)		Float _hx_tmp3 = ((dX + r1X) * this->m_perp->y);
HXDLIN( 692)		this->m_s1 = (_hx_tmp3 - ((dY + r1Y) * this->m_perp->x));
HXLINE( 694)		Float _hx_tmp4 = (r2X * this->m_perp->y);
HXDLIN( 694)		this->m_s2 = (_hx_tmp4 - (r2Y * this->m_perp->x));
HXLINE( 696)		 ::box2D::common::math::B2Vec3 impulse =  ::box2D::common::math::B2Vec3_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 697)		Float C1X = (this->m_perp->x * dX);
HXDLIN( 697)		Float C1X1 = (C1X + (this->m_perp->y * dY));
HXLINE( 698)		Float C1Y = ((a2 - a1) - this->m_refAngle);
HXLINE( 700)		linearError = ::box2D::common::math::B2Math_obj::max(linearError,::box2D::common::math::B2Math_obj::abs(C1X1));
HXLINE( 701)		angularError = ::box2D::common::math::B2Math_obj::abs(C1Y);
HXLINE( 703)		if (active) {
HXLINE( 705)			m1 = this->m_invMassA;
HXLINE( 706)			m2 = this->m_invMassB;
HXLINE( 707)			i1 = this->m_invIA;
HXLINE( 708)			i2 = this->m_invIB;
HXLINE( 710)			Float _hx_tmp5 = ((m1 + m2) + ((i1 * this->m_s1) * this->m_s1));
HXDLIN( 710)			this->m_K->col1->x = (_hx_tmp5 + ((i2 * this->m_s2) * this->m_s2));
HXLINE( 711)			Float _hx_tmp6 = (i1 * this->m_s1);
HXDLIN( 711)			this->m_K->col1->y = (_hx_tmp6 + (i2 * this->m_s2));
HXLINE( 712)			Float _hx_tmp7 = ((i1 * this->m_s1) * this->m_a1);
HXDLIN( 712)			this->m_K->col1->z = (_hx_tmp7 + ((i2 * this->m_s2) * this->m_a2));
HXLINE( 713)			this->m_K->col2->x = this->m_K->col1->y;
HXLINE( 714)			this->m_K->col2->y = (i1 + i2);
HXLINE( 715)			Float _hx_tmp8 = (i1 * this->m_a1);
HXDLIN( 715)			this->m_K->col2->z = (_hx_tmp8 + (i2 * this->m_a2));
HXLINE( 716)			this->m_K->col3->x = this->m_K->col1->z;
HXLINE( 717)			this->m_K->col3->y = this->m_K->col2->z;
HXLINE( 718)			Float _hx_tmp9 = ((m1 + m2) + ((i1 * this->m_a1) * this->m_a1));
HXDLIN( 718)			this->m_K->col3->z = (_hx_tmp9 + ((i2 * this->m_a2) * this->m_a2));
HXLINE( 720)			this->m_K->solve33(impulse,-(C1X1),-(C1Y),-(C2));
            		}
            		else {
HXLINE( 724)			m1 = this->m_invMassA;
HXLINE( 725)			m2 = this->m_invMassB;
HXLINE( 726)			i1 = this->m_invIA;
HXLINE( 727)			i2 = this->m_invIB;
HXLINE( 729)			Float k11 = ((m1 + m2) + ((i1 * this->m_s1) * this->m_s1));
HXDLIN( 729)			Float k111 = (k11 + ((i2 * this->m_s2) * this->m_s2));
HXLINE( 730)			Float k12 = (i1 * this->m_s1);
HXDLIN( 730)			Float k121 = (k12 + (i2 * this->m_s2));
HXLINE( 731)			Float k22 = (i1 + i2);
HXLINE( 733)			this->m_K->col1->set(k111,k121,((Float)0.0));
HXLINE( 734)			this->m_K->col2->set(k121,k22,((Float)0.0));
HXLINE( 736)			 ::box2D::common::math::B2Mat33 impulse1 = this->m_K;
HXDLIN( 736)			 ::box2D::common::math::B2Vec2 impulse11 = impulse1->solve22( ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null()),-(C1X1),-(C1Y));
HXLINE( 737)			impulse->x = impulse11->x;
HXLINE( 738)			impulse->y = impulse11->y;
HXLINE( 739)			impulse->z = ((Float)0.0);
            		}
HXLINE( 742)		Float PX = (impulse->x * this->m_perp->x);
HXDLIN( 742)		Float PX1 = (PX + (impulse->z * this->m_axis->x));
HXLINE( 743)		Float PY = (impulse->x * this->m_perp->y);
HXDLIN( 743)		Float PY1 = (PY + (impulse->z * this->m_axis->y));
HXLINE( 744)		Float L1 = ((impulse->x * this->m_s1) + impulse->y);
HXDLIN( 744)		Float L11 = (L1 + (impulse->z * this->m_a1));
HXLINE( 745)		Float L2 = ((impulse->x * this->m_s2) + impulse->y);
HXDLIN( 745)		Float L21 = (L2 + (impulse->z * this->m_a2));
HXLINE( 747)		 ::box2D::common::math::B2Vec2 c11 = c1;
HXDLIN( 747)		c11->x = (c11->x - (this->m_invMassA * PX1));
HXLINE( 748)		 ::box2D::common::math::B2Vec2 c12 = c1;
HXDLIN( 748)		c12->y = (c12->y - (this->m_invMassA * PY1));
HXLINE( 749)		a1 = (a1 - (this->m_invIA * L11));
HXLINE( 751)		 ::box2D::common::math::B2Vec2 c21 = c2;
HXDLIN( 751)		c21->x = (c21->x + (this->m_invMassB * PX1));
HXLINE( 752)		 ::box2D::common::math::B2Vec2 c22 = c2;
HXDLIN( 752)		c22->y = (c22->y + (this->m_invMassB * PY1));
HXLINE( 753)		a2 = (a2 + (this->m_invIB * L21));
HXLINE( 757)		bA->m_sweep->a = a1;
HXLINE( 759)		bB->m_sweep->a = a2;
HXLINE( 760)		bA->synchronizeTransform();
HXLINE( 761)		bB->synchronizeTransform();
HXLINE( 763)		if ((linearError <= ::box2D::common::B2Settings_obj::b2_linearSlop)) {
HXLINE( 763)			return (angularError <= ::box2D::common::B2Settings_obj::b2_angularSlop);
            		}
            		else {
HXLINE( 763)			return false;
            		}
HXDLIN( 763)		return false;
            	}



hx::ObjectPtr< B2PrismaticJoint_obj > B2PrismaticJoint_obj::__new( ::box2D::dynamics::joints::B2PrismaticJointDef def) {
	hx::ObjectPtr< B2PrismaticJoint_obj > __this = new B2PrismaticJoint_obj();
	__this->__construct(def);
	return __this;
}

hx::ObjectPtr< B2PrismaticJoint_obj > B2PrismaticJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::joints::B2PrismaticJointDef def) {
	B2PrismaticJoint_obj *__this = (B2PrismaticJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2PrismaticJoint_obj), true, "box2D.dynamics.joints.B2PrismaticJoint"));
	*(void **)__this = B2PrismaticJoint_obj::_hx_vtable;
	__this->__construct(def);
	return __this;
}

B2PrismaticJoint_obj::B2PrismaticJoint_obj()
{
}

void B2PrismaticJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2PrismaticJoint);
	HX_MARK_MEMBER_NAME(m_localAnchor1,"m_localAnchor1");
	HX_MARK_MEMBER_NAME(m_localAnchor2,"m_localAnchor2");
	HX_MARK_MEMBER_NAME(m_localXAxis1,"m_localXAxis1");
	HX_MARK_MEMBER_NAME(m_localYAxis1,"m_localYAxis1");
	HX_MARK_MEMBER_NAME(m_refAngle,"m_refAngle");
	HX_MARK_MEMBER_NAME(m_axis,"m_axis");
	HX_MARK_MEMBER_NAME(m_perp,"m_perp");
	HX_MARK_MEMBER_NAME(m_s1,"m_s1");
	HX_MARK_MEMBER_NAME(m_s2,"m_s2");
	HX_MARK_MEMBER_NAME(m_a1,"m_a1");
	HX_MARK_MEMBER_NAME(m_a2,"m_a2");
	HX_MARK_MEMBER_NAME(m_K,"m_K");
	HX_MARK_MEMBER_NAME(m_impulse,"m_impulse");
	HX_MARK_MEMBER_NAME(m_motorMass,"m_motorMass");
	HX_MARK_MEMBER_NAME(m_motorImpulse,"m_motorImpulse");
	HX_MARK_MEMBER_NAME(m_lowerTranslation,"m_lowerTranslation");
	HX_MARK_MEMBER_NAME(m_upperTranslation,"m_upperTranslation");
	HX_MARK_MEMBER_NAME(m_maxMotorForce,"m_maxMotorForce");
	HX_MARK_MEMBER_NAME(m_motorSpeed,"m_motorSpeed");
	HX_MARK_MEMBER_NAME(m_enableLimit,"m_enableLimit");
	HX_MARK_MEMBER_NAME(m_enableMotor,"m_enableMotor");
	HX_MARK_MEMBER_NAME(m_limitState,"m_limitState");
	 ::box2D::dynamics::joints::B2Joint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void B2PrismaticJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_localAnchor1,"m_localAnchor1");
	HX_VISIT_MEMBER_NAME(m_localAnchor2,"m_localAnchor2");
	HX_VISIT_MEMBER_NAME(m_localXAxis1,"m_localXAxis1");
	HX_VISIT_MEMBER_NAME(m_localYAxis1,"m_localYAxis1");
	HX_VISIT_MEMBER_NAME(m_refAngle,"m_refAngle");
	HX_VISIT_MEMBER_NAME(m_axis,"m_axis");
	HX_VISIT_MEMBER_NAME(m_perp,"m_perp");
	HX_VISIT_MEMBER_NAME(m_s1,"m_s1");
	HX_VISIT_MEMBER_NAME(m_s2,"m_s2");
	HX_VISIT_MEMBER_NAME(m_a1,"m_a1");
	HX_VISIT_MEMBER_NAME(m_a2,"m_a2");
	HX_VISIT_MEMBER_NAME(m_K,"m_K");
	HX_VISIT_MEMBER_NAME(m_impulse,"m_impulse");
	HX_VISIT_MEMBER_NAME(m_motorMass,"m_motorMass");
	HX_VISIT_MEMBER_NAME(m_motorImpulse,"m_motorImpulse");
	HX_VISIT_MEMBER_NAME(m_lowerTranslation,"m_lowerTranslation");
	HX_VISIT_MEMBER_NAME(m_upperTranslation,"m_upperTranslation");
	HX_VISIT_MEMBER_NAME(m_maxMotorForce,"m_maxMotorForce");
	HX_VISIT_MEMBER_NAME(m_motorSpeed,"m_motorSpeed");
	HX_VISIT_MEMBER_NAME(m_enableLimit,"m_enableLimit");
	HX_VISIT_MEMBER_NAME(m_enableMotor,"m_enableMotor");
	HX_VISIT_MEMBER_NAME(m_limitState,"m_limitState");
	 ::box2D::dynamics::joints::B2Joint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val B2PrismaticJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m_K") ) { return hx::Val( m_K ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"m_s1") ) { return hx::Val( m_s1 ); }
		if (HX_FIELD_EQ(inName,"m_s2") ) { return hx::Val( m_s2 ); }
		if (HX_FIELD_EQ(inName,"m_a1") ) { return hx::Val( m_a1 ); }
		if (HX_FIELD_EQ(inName,"m_a2") ) { return hx::Val( m_a2 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_axis") ) { return hx::Val( m_axis ); }
		if (HX_FIELD_EQ(inName,"m_perp") ) { return hx::Val( m_perp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setLimits") ) { return hx::Val( setLimits_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_impulse") ) { return hx::Val( m_impulse ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getAnchorA") ) { return hx::Val( getAnchorA_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnchorB") ) { return hx::Val( getAnchorB_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_refAngle") ) { return hx::Val( m_refAngle ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"enableLimit") ) { return hx::Val( enableLimit_dyn() ); }
		if (HX_FIELD_EQ(inName,"enableMotor") ) { return hx::Val( enableMotor_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_motorMass") ) { return hx::Val( m_motorMass ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_motorSpeed") ) { return hx::Val( m_motorSpeed ); }
		if (HX_FIELD_EQ(inName,"m_limitState") ) { return hx::Val( m_limitState ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getJointSpeed") ) { return hx::Val( getJointSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLowerLimit") ) { return hx::Val( getLowerLimit_dyn() ); }
		if (HX_FIELD_EQ(inName,"getUpperLimit") ) { return hx::Val( getUpperLimit_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMotorSpeed") ) { return hx::Val( setMotorSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMotorSpeed") ) { return hx::Val( getMotorSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMotorForce") ) { return hx::Val( getMotorForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_localXAxis1") ) { return hx::Val( m_localXAxis1 ); }
		if (HX_FIELD_EQ(inName,"m_localYAxis1") ) { return hx::Val( m_localYAxis1 ); }
		if (HX_FIELD_EQ(inName,"m_enableLimit") ) { return hx::Val( m_enableLimit ); }
		if (HX_FIELD_EQ(inName,"m_enableMotor") ) { return hx::Val( m_enableMotor ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isLimitEnabled") ) { return hx::Val( isLimitEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMotorEnabled") ) { return hx::Val( isMotorEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_localAnchor1") ) { return hx::Val( m_localAnchor1 ); }
		if (HX_FIELD_EQ(inName,"m_localAnchor2") ) { return hx::Val( m_localAnchor2 ); }
		if (HX_FIELD_EQ(inName,"m_motorImpulse") ) { return hx::Val( m_motorImpulse ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_maxMotorForce") ) { return hx::Val( m_maxMotorForce ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getReactionForce") ) { return hx::Val( getReactionForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMaxMotorForce") ) { return hx::Val( setMaxMotorForce_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getReactionTorque") ) { return hx::Val( getReactionTorque_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"m_lowerTranslation") ) { return hx::Val( m_lowerTranslation ); }
		if (HX_FIELD_EQ(inName,"m_upperTranslation") ) { return hx::Val( m_upperTranslation ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getJointTranslation") ) { return hx::Val( getJointTranslation_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"initVelocityConstraints") ) { return hx::Val( initVelocityConstraints_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"solveVelocityConstraints") ) { return hx::Val( solveVelocityConstraints_dyn() ); }
		if (HX_FIELD_EQ(inName,"solvePositionConstraints") ) { return hx::Val( solvePositionConstraints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2PrismaticJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m_K") ) { m_K=inValue.Cast<  ::box2D::common::math::B2Mat33 >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"m_s1") ) { m_s1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_s2") ) { m_s2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_a1") ) { m_a1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_a2") ) { m_a2=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_axis") ) { m_axis=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_perp") ) { m_perp=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_impulse") ) { m_impulse=inValue.Cast<  ::box2D::common::math::B2Vec3 >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_refAngle") ) { m_refAngle=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_motorMass") ) { m_motorMass=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_motorSpeed") ) { m_motorSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_limitState") ) { m_limitState=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_localXAxis1") ) { m_localXAxis1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_localYAxis1") ) { m_localYAxis1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_enableLimit") ) { m_enableLimit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_enableMotor") ) { m_enableMotor=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_localAnchor1") ) { m_localAnchor1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_localAnchor2") ) { m_localAnchor2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_motorImpulse") ) { m_motorImpulse=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_maxMotorForce") ) { m_maxMotorForce=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"m_lowerTranslation") ) { m_lowerTranslation=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_upperTranslation") ) { m_upperTranslation=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2PrismaticJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_localXAxis1","\x91","\x6a","\xba","\x8d"));
	outFields->push(HX_HCSTRING("m_localYAxis1","\xf0","\xc6","\x15","\xf4"));
	outFields->push(HX_HCSTRING("m_refAngle","\xd2","\x2e","\x30","\x86"));
	outFields->push(HX_HCSTRING("m_axis","\xf3","\x8c","\x70","\x88"));
	outFields->push(HX_HCSTRING("m_perp","\x45","\x5d","\x4c","\x92"));
	outFields->push(HX_HCSTRING("m_s1","\x30","\xbc","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_s2","\x31","\xbc","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_a1","\x82","\xac","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_a2","\x83","\xac","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_K","\xb9","\x08","\x53","\x00"));
	outFields->push(HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78"));
	outFields->push(HX_HCSTRING("m_motorMass","\x77","\xc2","\x33","\xe8"));
	outFields->push(HX_HCSTRING("m_motorImpulse","\x12","\x63","\x1d","\xf1"));
	outFields->push(HX_HCSTRING("m_lowerTranslation","\xc2","\x1f","\x0a","\xc8"));
	outFields->push(HX_HCSTRING("m_upperTranslation","\x01","\xea","\xf9","\x0a"));
	outFields->push(HX_HCSTRING("m_maxMotorForce","\x68","\x42","\x63","\x1e"));
	outFields->push(HX_HCSTRING("m_motorSpeed","\xa4","\x68","\x5d","\xc3"));
	outFields->push(HX_HCSTRING("m_enableLimit","\xa6","\x83","\xcf","\x58"));
	outFields->push(HX_HCSTRING("m_enableMotor","\xe0","\xb4","\x32","\xf0"));
	outFields->push(HX_HCSTRING("m_limitState","\xa8","\x2a","\xe1","\x56"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2PrismaticJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PrismaticJoint_obj,m_localAnchor1),HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PrismaticJoint_obj,m_localAnchor2),HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PrismaticJoint_obj,m_localXAxis1),HX_HCSTRING("m_localXAxis1","\x91","\x6a","\xba","\x8d")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PrismaticJoint_obj,m_localYAxis1),HX_HCSTRING("m_localYAxis1","\xf0","\xc6","\x15","\xf4")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_refAngle),HX_HCSTRING("m_refAngle","\xd2","\x2e","\x30","\x86")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PrismaticJoint_obj,m_axis),HX_HCSTRING("m_axis","\xf3","\x8c","\x70","\x88")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PrismaticJoint_obj,m_perp),HX_HCSTRING("m_perp","\x45","\x5d","\x4c","\x92")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_s1),HX_HCSTRING("m_s1","\x30","\xbc","\x54","\x48")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_s2),HX_HCSTRING("m_s2","\x31","\xbc","\x54","\x48")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_a1),HX_HCSTRING("m_a1","\x82","\xac","\x54","\x48")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_a2),HX_HCSTRING("m_a2","\x83","\xac","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Mat33*/ ,(int)offsetof(B2PrismaticJoint_obj,m_K),HX_HCSTRING("m_K","\xb9","\x08","\x53","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec3*/ ,(int)offsetof(B2PrismaticJoint_obj,m_impulse),HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_motorMass),HX_HCSTRING("m_motorMass","\x77","\xc2","\x33","\xe8")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_motorImpulse),HX_HCSTRING("m_motorImpulse","\x12","\x63","\x1d","\xf1")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_lowerTranslation),HX_HCSTRING("m_lowerTranslation","\xc2","\x1f","\x0a","\xc8")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_upperTranslation),HX_HCSTRING("m_upperTranslation","\x01","\xea","\xf9","\x0a")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_maxMotorForce),HX_HCSTRING("m_maxMotorForce","\x68","\x42","\x63","\x1e")},
	{hx::fsFloat,(int)offsetof(B2PrismaticJoint_obj,m_motorSpeed),HX_HCSTRING("m_motorSpeed","\xa4","\x68","\x5d","\xc3")},
	{hx::fsBool,(int)offsetof(B2PrismaticJoint_obj,m_enableLimit),HX_HCSTRING("m_enableLimit","\xa6","\x83","\xcf","\x58")},
	{hx::fsBool,(int)offsetof(B2PrismaticJoint_obj,m_enableMotor),HX_HCSTRING("m_enableMotor","\xe0","\xb4","\x32","\xf0")},
	{hx::fsInt,(int)offsetof(B2PrismaticJoint_obj,m_limitState),HX_HCSTRING("m_limitState","\xa8","\x2a","\xe1","\x56")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2PrismaticJoint_obj_sStaticStorageInfo = 0;
#endif

static ::String B2PrismaticJoint_obj_sMemberFields[] = {
	HX_HCSTRING("getAnchorA","\x36","\x72","\x03","\x52"),
	HX_HCSTRING("getAnchorB","\x37","\x72","\x03","\x52"),
	HX_HCSTRING("getReactionForce","\x0c","\x7f","\x58","\x41"),
	HX_HCSTRING("getReactionTorque","\x89","\x66","\x20","\x85"),
	HX_HCSTRING("getJointTranslation","\x7d","\x48","\x91","\xd8"),
	HX_HCSTRING("getJointSpeed","\x13","\x3e","\xdb","\x3b"),
	HX_HCSTRING("isLimitEnabled","\x90","\x19","\xb5","\x29"),
	HX_HCSTRING("enableLimit","\xb8","\x65","\xd0","\x3f"),
	HX_HCSTRING("getLowerLimit","\xb0","\x0d","\xd2","\x8d"),
	HX_HCSTRING("getUpperLimit","\xaf","\x8e","\x00","\x93"),
	HX_HCSTRING("setLimits","\x1a","\xaa","\xa1","\x4b"),
	HX_HCSTRING("isMotorEnabled","\x96","\xe3","\xf7","\x31"),
	HX_HCSTRING("enableMotor","\xf2","\x96","\x33","\xd7"),
	HX_HCSTRING("setMotorSpeed","\x14","\x2d","\xca","\x93"),
	HX_HCSTRING("getMotorSpeed","\x08","\x4b","\xc4","\x4e"),
	HX_HCSTRING("setMaxMotorForce","\xf8","\xe3","\x50","\x31"),
	HX_HCSTRING("getMotorForce","\x6c","\x65","\xef","\xd1"),
	HX_HCSTRING("initVelocityConstraints","\x29","\xf9","\xf0","\x64"),
	HX_HCSTRING("solveVelocityConstraints","\x1a","\x56","\xac","\xc2"),
	HX_HCSTRING("solvePositionConstraints","\x0e","\x6b","\x88","\xfa"),
	HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e"),
	HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e"),
	HX_HCSTRING("m_localXAxis1","\x91","\x6a","\xba","\x8d"),
	HX_HCSTRING("m_localYAxis1","\xf0","\xc6","\x15","\xf4"),
	HX_HCSTRING("m_refAngle","\xd2","\x2e","\x30","\x86"),
	HX_HCSTRING("m_axis","\xf3","\x8c","\x70","\x88"),
	HX_HCSTRING("m_perp","\x45","\x5d","\x4c","\x92"),
	HX_HCSTRING("m_s1","\x30","\xbc","\x54","\x48"),
	HX_HCSTRING("m_s2","\x31","\xbc","\x54","\x48"),
	HX_HCSTRING("m_a1","\x82","\xac","\x54","\x48"),
	HX_HCSTRING("m_a2","\x83","\xac","\x54","\x48"),
	HX_HCSTRING("m_K","\xb9","\x08","\x53","\x00"),
	HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78"),
	HX_HCSTRING("m_motorMass","\x77","\xc2","\x33","\xe8"),
	HX_HCSTRING("m_motorImpulse","\x12","\x63","\x1d","\xf1"),
	HX_HCSTRING("m_lowerTranslation","\xc2","\x1f","\x0a","\xc8"),
	HX_HCSTRING("m_upperTranslation","\x01","\xea","\xf9","\x0a"),
	HX_HCSTRING("m_maxMotorForce","\x68","\x42","\x63","\x1e"),
	HX_HCSTRING("m_motorSpeed","\xa4","\x68","\x5d","\xc3"),
	HX_HCSTRING("m_enableLimit","\xa6","\x83","\xcf","\x58"),
	HX_HCSTRING("m_enableMotor","\xe0","\xb4","\x32","\xf0"),
	HX_HCSTRING("m_limitState","\xa8","\x2a","\xe1","\x56"),
	::String(null()) };

static void B2PrismaticJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2PrismaticJoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2PrismaticJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2PrismaticJoint_obj::__mClass,"__mClass");
};

#endif

hx::Class B2PrismaticJoint_obj::__mClass;

void B2PrismaticJoint_obj::__register()
{
	hx::Object *dummy = new B2PrismaticJoint_obj;
	B2PrismaticJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.joints.B2PrismaticJoint","\x68","\x9e","\x87","\xb1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2PrismaticJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2PrismaticJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2PrismaticJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2PrismaticJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2PrismaticJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2PrismaticJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints
