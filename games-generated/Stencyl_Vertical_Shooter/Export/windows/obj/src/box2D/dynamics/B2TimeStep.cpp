// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_dynamics_B2TimeStep
#include <box2D/dynamics/B2TimeStep.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8ccfd4421fb17b28_27_new,"box2D.dynamics.B2TimeStep","new",0x06687b84,"box2D.dynamics.B2TimeStep.new","box2D/dynamics/B2TimeStep.hx",27,0xaed07c8c)
HX_LOCAL_STACK_FRAME(_hx_pos_8ccfd4421fb17b28_29_set,"box2D.dynamics.B2TimeStep","set",0x066c46c6,"box2D.dynamics.B2TimeStep.set","box2D/dynamics/B2TimeStep.hx",29,0xaed07c8c)
namespace box2D{
namespace dynamics{

void B2TimeStep_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8ccfd4421fb17b28_27_new)
            	}

Dynamic B2TimeStep_obj::__CreateEmpty() { return new B2TimeStep_obj; }

void *B2TimeStep_obj::_hx_vtable = 0;

Dynamic B2TimeStep_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2TimeStep_obj > _hx_result = new B2TimeStep_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2TimeStep_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50eae3ba;
}

void B2TimeStep_obj::set( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_8ccfd4421fb17b28_29_set)
HXLINE(  30)		this->dt = step->dt;
HXLINE(  31)		this->inv_dt = step->inv_dt;
HXLINE(  32)		this->positionIterations = step->positionIterations;
HXLINE(  33)		this->velocityIterations = step->velocityIterations;
HXLINE(  34)		this->warmStarting = step->warmStarting;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2TimeStep_obj,set,(void))


B2TimeStep_obj::B2TimeStep_obj()
{
}

hx::Val B2TimeStep_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"dt") ) { return hx::Val( dt ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inv_dt") ) { return hx::Val( inv_dt ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dtRatio") ) { return hx::Val( dtRatio ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"warmStarting") ) { return hx::Val( warmStarting ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"velocityIterations") ) { return hx::Val( velocityIterations ); }
		if (HX_FIELD_EQ(inName,"positionIterations") ) { return hx::Val( positionIterations ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2TimeStep_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"dt") ) { dt=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inv_dt") ) { inv_dt=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dtRatio") ) { dtRatio=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"warmStarting") ) { warmStarting=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"velocityIterations") ) { velocityIterations=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positionIterations") ) { positionIterations=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2TimeStep_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("dt","\x90","\x57","\x00","\x00"));
	outFields->push(HX_HCSTRING("inv_dt","\x5e","\x4d","\xd4","\x9f"));
	outFields->push(HX_HCSTRING("dtRatio","\x5b","\xe3","\x19","\x17"));
	outFields->push(HX_HCSTRING("velocityIterations","\xb3","\x9f","\x71","\xb7"));
	outFields->push(HX_HCSTRING("positionIterations","\x3f","\x65","\x42","\x76"));
	outFields->push(HX_HCSTRING("warmStarting","\x25","\x6d","\x93","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2TimeStep_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(B2TimeStep_obj,dt),HX_HCSTRING("dt","\x90","\x57","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(B2TimeStep_obj,inv_dt),HX_HCSTRING("inv_dt","\x5e","\x4d","\xd4","\x9f")},
	{hx::fsFloat,(int)offsetof(B2TimeStep_obj,dtRatio),HX_HCSTRING("dtRatio","\x5b","\xe3","\x19","\x17")},
	{hx::fsInt,(int)offsetof(B2TimeStep_obj,velocityIterations),HX_HCSTRING("velocityIterations","\xb3","\x9f","\x71","\xb7")},
	{hx::fsInt,(int)offsetof(B2TimeStep_obj,positionIterations),HX_HCSTRING("positionIterations","\x3f","\x65","\x42","\x76")},
	{hx::fsBool,(int)offsetof(B2TimeStep_obj,warmStarting),HX_HCSTRING("warmStarting","\x25","\x6d","\x93","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2TimeStep_obj_sStaticStorageInfo = 0;
#endif

static ::String B2TimeStep_obj_sMemberFields[] = {
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("dt","\x90","\x57","\x00","\x00"),
	HX_HCSTRING("inv_dt","\x5e","\x4d","\xd4","\x9f"),
	HX_HCSTRING("dtRatio","\x5b","\xe3","\x19","\x17"),
	HX_HCSTRING("velocityIterations","\xb3","\x9f","\x71","\xb7"),
	HX_HCSTRING("positionIterations","\x3f","\x65","\x42","\x76"),
	HX_HCSTRING("warmStarting","\x25","\x6d","\x93","\xf2"),
	::String(null()) };

static void B2TimeStep_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2TimeStep_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2TimeStep_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2TimeStep_obj::__mClass,"__mClass");
};

#endif

hx::Class B2TimeStep_obj::__mClass;

void B2TimeStep_obj::__register()
{
	hx::Object *dummy = new B2TimeStep_obj;
	B2TimeStep_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.B2TimeStep","\x92","\xa9","\xa3","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2TimeStep_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2TimeStep_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2TimeStep_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2TimeStep_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2TimeStep_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2TimeStep_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
