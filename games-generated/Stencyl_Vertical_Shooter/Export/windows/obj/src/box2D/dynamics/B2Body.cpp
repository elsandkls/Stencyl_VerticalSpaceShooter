// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_collision_IBroadPhase
#include <box2D/collision/IBroadPhase.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2EdgeShape
#include <box2D/collision/shapes/B2EdgeShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2MassData
#include <box2D/collision/shapes/B2MassData.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2BodyDef
#include <box2D/dynamics/B2BodyDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactManager
#include <box2D/dynamics/B2ContactManager.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2FixtureDef
#include <box2D/dynamics/B2FixtureDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2World
#include <box2D/dynamics/B2World.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactEdge
#include <box2D/dynamics/contacts/B2ContactEdge.h>
#endif
#ifndef INCLUDED_box2D_dynamics_controllers_B2ControllerEdge
#include <box2D/dynamics/controllers/B2ControllerEdge.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointEdge
#include <box2D/dynamics/joints/B2JointEdge.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1250_new,"box2D.dynamics.B2Body","new",0xd7ec542d,"box2D.dynamics.B2Body.new","box2D/dynamics/B2Body.hx",1250,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_47_connectEdges,"box2D.dynamics.B2Body","connectEdges",0x21bb4bdf,"box2D.dynamics.B2Body.connectEdges","box2D/dynamics/B2Body.hx",47,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_71_createFixture,"box2D.dynamics.B2Body","createFixture",0x22faba3a,"box2D.dynamics.B2Body.createFixture","box2D/dynamics/B2Body.hx",71,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_164_createFixture2,"box2D.dynamics.B2Body","createFixture2",0x786838b8,"box2D.dynamics.B2Body.createFixture2","box2D/dynamics/B2Body.hx",164,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_181_DestroyFixture,"box2D.dynamics.B2Body","DestroyFixture",0x43ae6362,"box2D.dynamics.B2Body.DestroyFixture","box2D/dynamics/B2Body.hx",181,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_258_setPositionAndAngle,"box2D.dynamics.B2Body","setPositionAndAngle",0xadd1c4d4,"box2D.dynamics.B2Body.setPositionAndAngle","box2D/dynamics/B2Body.hx",258,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_299_setPositionFast,"box2D.dynamics.B2Body","setPositionFast",0xbfbcedf4,"box2D.dynamics.B2Body.setPositionFast","box2D/dynamics/B2Body.hx",299,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_328_setTransform,"box2D.dynamics.B2Body","setTransform",0xf64407fd,"box2D.dynamics.B2Body.setTransform","box2D/dynamics/B2Body.hx",328,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_336_getTransform,"box2D.dynamics.B2Body","getTransform",0xe14ae489,"box2D.dynamics.B2Body.getTransform","box2D/dynamics/B2Body.hx",336,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_344_getPosition,"box2D.dynamics.B2Body","getPosition",0x9492fc2c,"box2D.dynamics.B2Body.getPosition","box2D/dynamics/B2Body.hx",344,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_353_setPosition,"box2D.dynamics.B2Body","setPosition",0x9f000338,"box2D.dynamics.B2Body.setPosition","box2D/dynamics/B2Body.hx",353,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_361_getAngle,"box2D.dynamics.B2Body","getAngle",0xdb8ee870,"box2D.dynamics.B2Body.getAngle","box2D/dynamics/B2Body.hx",361,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_370_setAngle,"box2D.dynamics.B2Body","setAngle",0x89ec41e4,"box2D.dynamics.B2Body.setAngle","box2D/dynamics/B2Body.hx",370,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_378_getWorldCenter,"box2D.dynamics.B2Body","getWorldCenter",0x93b23224,"box2D.dynamics.B2Body.getWorldCenter","box2D/dynamics/B2Body.hx",378,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_385_getLocalCenter,"box2D.dynamics.B2Body","getLocalCenter",0x857f3dfd,"box2D.dynamics.B2Body.getLocalCenter","box2D/dynamics/B2Body.hx",385,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_392_setLinearVelocity,"box2D.dynamics.B2Body","setLinearVelocity",0x313434f1,"box2D.dynamics.B2Body.setLinearVelocity","box2D/dynamics/B2Body.hx",392,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_405_getLinearVelocity,"box2D.dynamics.B2Body","getLinearVelocity",0x0dc65ce5,"box2D.dynamics.B2Body.getLinearVelocity","box2D/dynamics/B2Body.hx",405,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_412_setAngularVelocity,"box2D.dynamics.B2Body","setAngularVelocity",0x8276bc70,"box2D.dynamics.B2Body.setAngularVelocity","box2D/dynamics/B2Body.hx",412,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_425_getAngularVelocity,"box2D.dynamics.B2Body","getAngularVelocity",0xa5c789fc,"box2D.dynamics.B2Body.getAngularVelocity","box2D/dynamics/B2Body.hx",425,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_433_getDefinition,"box2D.dynamics.B2Body","getDefinition",0x911657d6,"box2D.dynamics.B2Body.getDefinition","box2D/dynamics/B2Body.hx",433,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_457_applyForce,"box2D.dynamics.B2Body","applyForce",0x19196d70,"box2D.dynamics.B2Body.applyForce","box2D/dynamics/B2Body.hx",457,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_481_applyTorque,"box2D.dynamics.B2Body","applyTorque",0x76300fa5,"box2D.dynamics.B2Body.applyTorque","box2D/dynamics/B2Body.hx",481,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_501_applyImpulse,"box2D.dynamics.B2Body","applyImpulse",0x398bb77a,"box2D.dynamics.B2Body.applyImpulse","box2D/dynamics/B2Body.hx",501,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_526_split,"box2D.dynamics.B2Body","split",0xd309bbe7,"box2D.dynamics.B2Body.split","box2D/dynamics/B2Body.hx",526,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_595_merge,"box2D.dynamics.B2Body","merge",0x576173c5,"box2D.dynamics.B2Body.merge","box2D/dynamics/B2Body.hx",595,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_643_getMass,"box2D.dynamics.B2Body","getMass",0x2593def7,"box2D.dynamics.B2Body.getMass","box2D/dynamics/B2Body.hx",643,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_651_getInertia,"box2D.dynamics.B2Body","getInertia",0x354f76d7,"box2D.dynamics.B2Body.getInertia","box2D/dynamics/B2Body.hx",651,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_658_getMassData,"box2D.dynamics.B2Body","getMassData",0x4510a8c1,"box2D.dynamics.B2Body.getMassData","box2D/dynamics/B2Body.hx",658,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_673_setMassData,"box2D.dynamics.B2Body","setMassData",0x4f7dafcd,"box2D.dynamics.B2Body.setMassData","box2D/dynamics/B2Body.hx",673,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_724_resetMassData,"box2D.dynamics.B2Body","resetMassData",0xf4ad603a,"box2D.dynamics.B2Body.resetMassData","box2D/dynamics/B2Body.hx",724,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_804_getWorldPoint,"box2D.dynamics.B2Body","getWorldPoint",0xd744e6e1,"box2D.dynamics.B2Body.getWorldPoint","box2D/dynamics/B2Body.hx",804,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_820_getWorldVector,"box2D.dynamics.B2Body","getWorldVector",0x2534bd12,"box2D.dynamics.B2Body.getWorldVector","box2D/dynamics/B2Body.hx",820,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_829_getLocalPoint,"box2D.dynamics.B2Body","getLocalPoint",0xa38bd928,"box2D.dynamics.B2Body.getLocalPoint","box2D/dynamics/B2Body.hx",829,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_838_getLocalVector,"box2D.dynamics.B2Body","getLocalVector",0x1701c8eb,"box2D.dynamics.B2Body.getLocalVector","box2D/dynamics/B2Body.hx",838,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_849_getLinearVelocityFromWorldPoint,"box2D.dynamics.B2Body","getLinearVelocityFromWorldPoint",0xe3838e6d,"box2D.dynamics.B2Body.getLinearVelocityFromWorldPoint","box2D/dynamics/B2Body.hx",849,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_859_getLinearVelocityFromLocalPoint,"box2D.dynamics.B2Body","getLinearVelocityFromLocalPoint",0xafca80b4,"box2D.dynamics.B2Body.getLinearVelocityFromLocalPoint","box2D/dynamics/B2Body.hx",859,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_875_getLinearDamping,"box2D.dynamics.B2Body","getLinearDamping",0x32f0a6fa,"box2D.dynamics.B2Body.getLinearDamping","box2D/dynamics/B2Body.hx",875,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_883_setLinearDamping,"box2D.dynamics.B2Body","setLinearDamping",0x8932946e,"box2D.dynamics.B2Body.setLinearDamping","box2D/dynamics/B2Body.hx",883,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_891_getAngularDamping,"box2D.dynamics.B2Body","getAngularDamping",0xf109e9c3,"box2D.dynamics.B2Body.getAngularDamping","box2D/dynamics/B2Body.hx",891,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_899_setAngularDamping,"box2D.dynamics.B2Body","setAngularDamping",0x1477c1cf,"box2D.dynamics.B2Body.setAngularDamping","box2D/dynamics/B2Body.hx",899,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_907_setType,"box2D.dynamics.B2Body","setType",0x1d4821c9,"box2D.dynamics.B2Body.setType","box2D/dynamics/B2Body.hx",907,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_943_getType,"box2D.dynamics.B2Body","getType",0x2a4690bd,"box2D.dynamics.B2Body.getType","box2D/dynamics/B2Body.hx",943,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_950_setBullet,"box2D.dynamics.B2Body","setBullet",0x9644e311,"box2D.dynamics.B2Body.setBullet","box2D/dynamics/B2Body.hx",950,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_964_isBullet,"box2D.dynamics.B2Body","isBullet",0x85cfc2df,"box2D.dynamics.B2Body.isBullet","box2D/dynamics/B2Body.hx",964,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_972_setSleepingAllowed,"box2D.dynamics.B2Body","setSleepingAllowed",0xca77898e,"box2D.dynamics.B2Body.setSleepingAllowed","box2D/dynamics/B2Body.hx",972,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_988_setAwake,"box2D.dynamics.B2Body","setAwake",0x8fda9f16,"box2D.dynamics.B2Body.setAwake","box2D/dynamics/B2Body.hx",988,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1009_isAwake,"box2D.dynamics.B2Body","isAwake",0xd0113308,"box2D.dynamics.B2Body.isAwake","box2D/dynamics/B2Body.hx",1009,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1017_setFixedRotation,"box2D.dynamics.B2Body","setFixedRotation",0xf09e7de3,"box2D.dynamics.B2Body.setFixedRotation","box2D/dynamics/B2Body.hx",1017,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1036_isFixedRotation,"box2D.dynamics.B2Body","isFixedRotation",0x5e5553d5,"box2D.dynamics.B2Body.isFixedRotation","box2D/dynamics/B2Body.hx",1036,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1053_setActive,"box2D.dynamics.B2Body","setActive",0xd7fa9295,"box2D.dynamics.B2Body.setActive","box2D/dynamics/B2Body.hx",1053,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1105_isActive,"box2D.dynamics.B2Body","isActive",0xc7857263,"box2D.dynamics.B2Body.isActive","box2D/dynamics/B2Body.hx",1105,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1113_isSleepingAllowed,"box2D.dynamics.B2Body","isSleepingAllowed",0x34054000,"box2D.dynamics.B2Body.isSleepingAllowed","box2D/dynamics/B2Body.hx",1113,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1120_getFixtureList,"box2D.dynamics.B2Body","getFixtureList",0xb59b9524,"box2D.dynamics.B2Body.getFixtureList","box2D/dynamics/B2Body.hx",1120,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1127_getJointList,"box2D.dynamics.B2Body","getJointList",0xc723a5e5,"box2D.dynamics.B2Body.getJointList","box2D/dynamics/B2Body.hx",1127,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1134_getControllerList,"box2D.dynamics.B2Body","getControllerList",0x9d43bedd,"box2D.dynamics.B2Body.getControllerList","box2D/dynamics/B2Body.hx",1134,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1141_getContactList,"box2D.dynamics.B2Body","getContactList",0xdb4c0b7b,"box2D.dynamics.B2Body.getContactList","box2D/dynamics/B2Body.hx",1141,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1148_getNext,"box2D.dynamics.B2Body","getNext",0x264022f6,"box2D.dynamics.B2Body.getNext","box2D/dynamics/B2Body.hx",1148,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1155_getUserData,"box2D.dynamics.B2Body","getUserData",0xcec0f198,"box2D.dynamics.B2Body.getUserData","box2D/dynamics/B2Body.hx",1155,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1163_setUserData,"box2D.dynamics.B2Body","setUserData",0xd92df8a4,"box2D.dynamics.B2Body.setUserData","box2D/dynamics/B2Body.hx",1163,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1171_getWorld,"box2D.dynamics.B2Body","getWorld",0x87113aef,"box2D.dynamics.B2Body.getWorld","box2D/dynamics/B2Body.hx",1171,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1176_setFriction,"box2D.dynamics.B2Body","setFriction",0x6bcedb89,"box2D.dynamics.B2Body.setFriction","box2D/dynamics/B2Body.hx",1176,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1187_setBounciness,"box2D.dynamics.B2Body","setBounciness",0x52ee2072,"box2D.dynamics.B2Body.setBounciness","box2D/dynamics/B2Body.hx",1187,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1199_setPaused,"box2D.dynamics.B2Body","setPaused",0xb138917d,"box2D.dynamics.B2Body.setPaused","box2D/dynamics/B2Body.hx",1199,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1212_isPaused,"box2D.dynamics.B2Body","isPaused",0xa0c3714b,"box2D.dynamics.B2Body.isPaused","box2D/dynamics/B2Body.hx",1212,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1216_setIgnoreGravity,"box2D.dynamics.B2Body","setIgnoreGravity",0x35ccfa6d,"box2D.dynamics.B2Body.setIgnoreGravity","box2D/dynamics/B2Body.hx",1216,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1225_isIgnoringGravity,"box2D.dynamics.B2Body","isIgnoringGravity",0xaa9c6702,"box2D.dynamics.B2Body.isIgnoringGravity","box2D/dynamics/B2Body.hx",1225,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1229_setAlwaysActive,"box2D.dynamics.B2Body","setAlwaysActive",0xeef6a004,"box2D.dynamics.B2Body.setAlwaysActive","box2D/dynamics/B2Body.hx",1229,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1238_isAlwaysActive,"box2D.dynamics.B2Body","isAlwaysActive",0xcab84e52,"box2D.dynamics.B2Body.isAlwaysActive","box2D/dynamics/B2Body.hx",1238,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1372_synchronizeFixtures,"box2D.dynamics.B2Body","synchronizeFixtures",0x9ef739c7,"box2D.dynamics.B2Body.synchronizeFixtures","box2D/dynamics/B2Body.hx",1372,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1392_synchronizeTransform,"box2D.dynamics.B2Body","synchronizeTransform",0xb40f1d8f,"box2D.dynamics.B2Body.synchronizeTransform","box2D/dynamics/B2Body.hx",1392,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1403_shouldCollide,"box2D.dynamics.B2Body","shouldCollide",0x268e1198,"box2D.dynamics.B2Body.shouldCollide","box2D/dynamics/B2Body.hx",1403,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1424_advance,"box2D.dynamics.B2Body","advance",0xf9c6f6cf,"box2D.dynamics.B2Body.advance","box2D/dynamics/B2Body.hx",1424,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1370_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1370,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1483_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1483,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1484_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1484,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1485_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1485,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1486_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1486,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1487_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1487,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1488_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1488,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1490_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1490,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1491_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1491,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1492_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1492,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1502_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1502,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1503_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1503,0x26bd9c03)
HX_LOCAL_STACK_FRAME(_hx_pos_cb5431ac0c6c1901_1504_boot,"box2D.dynamics.B2Body","boot",0x0ef653c5,"box2D.dynamics.B2Body.boot","box2D/dynamics/B2Body.hx",1504,0x26bd9c03)
namespace box2D{
namespace dynamics{

void B2Body_obj::__construct( ::box2D::dynamics::B2BodyDef bd, ::box2D::dynamics::B2World world){
            	HX_GC_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1250_new)
HXLINE(1252)		this->m_xf =  ::box2D::common::math::B2Transform_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1253)		this->m_sweep =  ::box2D::common::math::B2Sweep_obj::__alloc( HX_CTX );
HXLINE(1254)		this->m_linearVelocity =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1255)		this->m_force =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1267)		this->m_flags = (int)0;
HXLINE(1269)		if (bd->bullet) {
HXLINE(1271)			 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1271)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2Body_obj::e_bulletFlag);
            		}
HXLINE(1273)		if (bd->fixedRotation) {
HXLINE(1275)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1275)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags | (int)::box2D::dynamics::B2Body_obj::e_fixedRotationFlag);
            		}
HXLINE(1277)		if (bd->allowSleep) {
HXLINE(1279)			 ::box2D::dynamics::B2Body _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1279)			_hx_tmp2->m_flags = ((int)_hx_tmp2->m_flags | (int)::box2D::dynamics::B2Body_obj::e_allowSleepFlag);
            		}
HXLINE(1281)		if (bd->awake) {
HXLINE(1283)			 ::box2D::dynamics::B2Body _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1283)			_hx_tmp3->m_flags = ((int)_hx_tmp3->m_flags | (int)::box2D::dynamics::B2Body_obj::e_awakeFlag);
            		}
HXLINE(1285)		if (bd->active) {
HXLINE(1287)			 ::box2D::dynamics::B2Body _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1287)			_hx_tmp4->m_flags = ((int)_hx_tmp4->m_flags | (int)::box2D::dynamics::B2Body_obj::e_activeFlag);
            		}
HXLINE(1291)		if (bd->ignoreGravity) {
HXLINE(1293)			 ::box2D::dynamics::B2Body _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1293)			_hx_tmp5->m_flags = ((int)_hx_tmp5->m_flags | (int)::box2D::dynamics::B2Body_obj::e_ignoreGravityFlag);
            		}
HXLINE(1296)		this->m_world = world;
HXLINE(1298)		{
HXLINE(1298)			 ::box2D::common::math::B2Vec2 _this = this->m_xf->position;
HXDLIN(1298)			 ::box2D::common::math::B2Vec2 v = bd->position;
HXDLIN(1298)			_this->x = v->x;
HXDLIN(1298)			_this->y = v->y;
            		}
HXLINE(1299)		this->m_xf->R->set(bd->angle);
HXLINE(1301)		{
HXLINE(1301)			 ::box2D::common::math::B2Vec2 _this1 = this->m_sweep->localCenter;
HXDLIN(1301)			_this1->x = ((Float)0.0);
HXDLIN(1301)			_this1->y = ((Float)0.0);
            		}
HXLINE(1302)		this->m_sweep->t0 = ((Float)1.0);
HXLINE(1303)		this->m_sweep->a0 = (this->m_sweep->a = bd->angle);
HXLINE(1307)		 ::box2D::common::math::B2Mat22 tMat = this->m_xf->R;
HXLINE(1308)		 ::box2D::common::math::B2Vec2 tVec = this->m_sweep->localCenter;
HXLINE(1310)		Float _hx_tmp6 = (tMat->col1->x * tVec->x);
HXDLIN(1310)		this->m_sweep->c->x = (_hx_tmp6 + (tMat->col2->x * tVec->y));
HXLINE(1312)		Float _hx_tmp7 = (tMat->col1->y * tVec->x);
HXDLIN(1312)		this->m_sweep->c->y = (_hx_tmp7 + (tMat->col2->y * tVec->y));
HXLINE(1314)		 ::box2D::common::math::B2Vec2 _hx_tmp8 = this->m_sweep->c;
HXDLIN(1314)		_hx_tmp8->x = (_hx_tmp8->x + this->m_xf->position->x);
HXLINE(1315)		 ::box2D::common::math::B2Vec2 _hx_tmp9 = this->m_sweep->c;
HXDLIN(1315)		_hx_tmp9->y = (_hx_tmp9->y + this->m_xf->position->y);
HXLINE(1317)		{
HXLINE(1317)			 ::box2D::common::math::B2Vec2 _this2 = this->m_sweep->c0;
HXDLIN(1317)			 ::box2D::common::math::B2Vec2 v1 = this->m_sweep->c;
HXDLIN(1317)			_this2->x = v1->x;
HXDLIN(1317)			_this2->y = v1->y;
            		}
HXLINE(1319)		this->m_jointList = null();
HXLINE(1320)		this->m_controllerList = null();
HXLINE(1321)		this->m_contactList = null();
HXLINE(1322)		this->m_controllerCount = (int)0;
HXLINE(1323)		this->m_prev = null();
HXLINE(1324)		this->m_next = null();
HXLINE(1326)		{
HXLINE(1326)			 ::box2D::common::math::B2Vec2 _this3 = this->m_linearVelocity;
HXDLIN(1326)			 ::box2D::common::math::B2Vec2 v2 = bd->linearVelocity;
HXDLIN(1326)			_this3->x = v2->x;
HXDLIN(1326)			_this3->y = v2->y;
            		}
HXLINE(1327)		this->m_angularVelocity = bd->angularVelocity;
HXLINE(1329)		this->m_linearDamping = bd->linearDamping;
HXLINE(1330)		this->m_angularDamping = bd->angularDamping;
HXLINE(1332)		{
HXLINE(1332)			 ::box2D::common::math::B2Vec2 _this4 = this->m_force;
HXDLIN(1332)			_this4->x = ((Float)0.0);
HXDLIN(1332)			_this4->y = ((Float)0.0);
            		}
HXLINE(1333)		this->m_torque = ((Float)0.0);
HXLINE(1335)		this->m_sleepTime = ((Float)0.0);
HXLINE(1337)		this->m_type = bd->type;
HXLINE(1339)		if ((this->m_type == ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE(1341)			this->m_mass = ((Float)1.0);
HXLINE(1342)			this->m_invMass = ((Float)1.0);
            		}
            		else {
HXLINE(1346)			this->m_mass = ((Float)0.0);
HXLINE(1347)			this->m_invMass = ((Float)0.0);
            		}
HXLINE(1350)		this->m_I = ((Float)0.0);
HXLINE(1351)		this->m_invI = ((Float)0.0);
HXLINE(1353)		this->m_inertiaScale = bd->inertiaScale;
HXLINE(1355)		this->m_userData = bd->userData;
HXLINE(1357)		this->m_fixtureList = null();
HXLINE(1358)		this->m_fixtureCount = (int)0;
HXLINE(1361)		this->groupID = bd->groupID;
HXLINE(1362)		this->origin =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1363)		this->size =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}

Dynamic B2Body_obj::__CreateEmpty() { return new B2Body_obj; }

void *B2Body_obj::_hx_vtable = 0;

Dynamic B2Body_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Body_obj > _hx_result = new B2Body_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool B2Body_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28b6bfe3;
}

Float B2Body_obj::connectEdges( ::box2D::collision::shapes::B2EdgeShape s1, ::box2D::collision::shapes::B2EdgeShape s2,Float angle1){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_47_connectEdges)
HXLINE(  48)		Float angle2 = s2->getDirectionVector()->y;
HXDLIN(  48)		Float angle21 = ::Math_obj::atan2(angle2,s2->getDirectionVector()->x);
HXLINE(  49)		Float coreOffset = ::Math_obj::tan(((angle21 - angle1) * ((Float)0.5)));
HXLINE(  50)		 ::box2D::common::math::B2Vec2 core = ::box2D::common::math::B2Math_obj::mulFV(coreOffset,s2->getDirectionVector());
HXLINE(  51)		core = ::box2D::common::math::B2Math_obj::subtractVV(core,s2->getNormalVector());
HXLINE(  52)		core = ::box2D::common::math::B2Math_obj::mulFV(::box2D::common::B2Settings_obj::b2_toiSlop,core);
HXLINE(  53)		core = ::box2D::common::math::B2Math_obj::addVV(core,s2->getVertex1());
HXLINE(  54)		 ::box2D::common::math::B2Vec2 cornerDir = s1->getDirectionVector();
HXDLIN(  54)		 ::box2D::common::math::B2Vec2 cornerDir1 = ::box2D::common::math::B2Math_obj::addVV(cornerDir,s2->getDirectionVector());
HXLINE(  55)		cornerDir1->normalize();
HXLINE(  56)		 ::box2D::common::math::B2Vec2 convex = s1->getDirectionVector();
HXDLIN(  56)		bool convex1 = (::box2D::common::math::B2Math_obj::dot(convex,s2->getNormalVector()) > ((Float)0.0));
HXLINE(  57)		s1->setNextEdge(s2,core,cornerDir1,convex1);
HXLINE(  58)		s2->setPrevEdge(s1,core,cornerDir1,convex1);
HXLINE(  59)		return angle21;
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2Body_obj,connectEdges,return )

 ::box2D::dynamics::B2Fixture B2Body_obj::createFixture( ::box2D::dynamics::B2FixtureDef def){
            	HX_GC_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_71_createFixture)
HXLINE(  73)		if ((this->m_world->isLocked() == true)) {
HXLINE(  75)			return null();
            		}
HXLINE( 125)		 ::box2D::dynamics::B2Fixture fixture =  ::box2D::dynamics::B2Fixture_obj::__alloc( HX_CTX );
HXLINE( 126)		fixture->create(hx::ObjectPtr<OBJ_>(this),this->m_xf,def);
HXLINE( 129)		if ((((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_activeFlag) != (int)0)) {
HXLINE( 131)			::Dynamic broadPhase = this->m_world->m_contactManager->m_broadPhase;
HXLINE( 132)			fixture->createProxy(broadPhase,this->m_xf);
            		}
HXLINE( 135)		fixture->m_next = this->m_fixtureList;
HXLINE( 136)		this->m_fixtureList = fixture;
HXLINE( 137)		++this->m_fixtureCount;
HXLINE( 139)		fixture->m_body = hx::ObjectPtr<OBJ_>(this);
HXLINE( 142)		if ((fixture->m_density > ((Float)0.0))) {
HXLINE( 144)			this->resetMassData();
            		}
HXLINE( 149)		 ::box2D::dynamics::B2World _hx_tmp = this->m_world;
HXDLIN( 149)		_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2World_obj::e_newFixture);
HXLINE( 151)		return fixture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,createFixture,return )

 ::box2D::dynamics::B2Fixture B2Body_obj::createFixture2( ::box2D::collision::shapes::B2Shape shape,hx::Null< Float >  __o_density){
Float density = __o_density.Default(((Float)0.0));
            	HX_GC_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_164_createFixture2)
HXLINE( 165)		 ::box2D::dynamics::B2FixtureDef def =  ::box2D::dynamics::B2FixtureDef_obj::__alloc( HX_CTX );
HXLINE( 166)		def->shape = shape;
HXLINE( 167)		def->density = density;
HXLINE( 169)		return this->createFixture(def);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Body_obj,createFixture2,return )

void B2Body_obj::DestroyFixture( ::box2D::dynamics::B2Fixture fixture){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_181_DestroyFixture)
HXLINE( 183)		if ((this->m_world->isLocked() == true)) {
HXLINE( 185)			return;
            		}
HXLINE( 190)		 ::box2D::dynamics::B2Fixture node = this->m_fixtureList;
HXLINE( 191)		 ::box2D::dynamics::B2Fixture ppF = null();
HXLINE( 192)		bool found = false;
HXLINE( 193)		while(hx::IsNotNull( node )){
HXLINE( 195)			if (hx::IsEq( node,fixture )) {
HXLINE( 197)				if (hx::IsNotNull( ppF )) {
HXLINE( 198)					ppF->m_next = fixture->m_next;
            				}
            				else {
HXLINE( 200)					this->m_fixtureList = fixture->m_next;
            				}
HXLINE( 202)				found = true;
HXLINE( 203)				goto _hx_goto_4;
            			}
HXLINE( 206)			ppF = node;
HXLINE( 207)			node = node->m_next;
            		}
            		_hx_goto_4:;
HXLINE( 214)		 ::box2D::dynamics::contacts::B2ContactEdge edge = this->m_contactList;
HXLINE( 215)		while(hx::IsNotNull( edge )){
HXLINE( 217)			 ::box2D::dynamics::contacts::B2Contact c = edge->contact;
HXLINE( 218)			edge = edge->next;
HXLINE( 220)			 ::box2D::dynamics::B2Fixture fixtureA = c->getFixtureA();
HXLINE( 221)			 ::box2D::dynamics::B2Fixture fixtureB = c->getFixtureB();
HXLINE( 222)			bool _hx_tmp;
HXDLIN( 222)			if (hx::IsNotEq( fixture,fixtureA )) {
HXLINE( 222)				_hx_tmp = hx::IsEq( fixture,fixtureB );
            			}
            			else {
HXLINE( 222)				_hx_tmp = true;
            			}
HXDLIN( 222)			if (_hx_tmp) {
HXLINE( 226)				this->m_world->m_contactManager->destroy(c);
            			}
            		}
HXLINE( 231)		if ((((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_activeFlag) != (int)0)) {
HXLINE( 233)			::Dynamic broadPhase = this->m_world->m_contactManager->m_broadPhase;
HXLINE( 234)			fixture->destroyProxy(broadPhase);
            		}
HXLINE( 241)		fixture->destroy();
HXLINE( 242)		fixture->m_body = null();
HXLINE( 243)		fixture->m_next = null();
HXLINE( 245)		--this->m_fixtureCount;
HXLINE( 248)		this->resetMassData();
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,DestroyFixture,(void))

void B2Body_obj::setPositionAndAngle( ::box2D::common::math::B2Vec2 position,Float angle){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_258_setPositionAndAngle)
HXLINE( 260)		 ::box2D::dynamics::B2Fixture f;
HXLINE( 263)		if ((this->m_world->isLocked() == true)) {
HXLINE( 265)			return;
            		}
HXLINE( 268)		this->m_xf->R->set(angle);
HXLINE( 269)		{
HXLINE( 269)			 ::box2D::common::math::B2Vec2 _this = this->m_xf->position;
HXDLIN( 269)			_this->x = position->x;
HXDLIN( 269)			_this->y = position->y;
            		}
HXLINE( 273)		 ::box2D::common::math::B2Mat22 tMat = this->m_xf->R;
HXLINE( 274)		 ::box2D::common::math::B2Vec2 tVec = this->m_sweep->localCenter;
HXLINE( 276)		Float _hx_tmp = (tMat->col1->x * tVec->x);
HXDLIN( 276)		this->m_sweep->c->x = (_hx_tmp + (tMat->col2->x * tVec->y));
HXLINE( 278)		Float _hx_tmp1 = (tMat->col1->y * tVec->x);
HXDLIN( 278)		this->m_sweep->c->y = (_hx_tmp1 + (tMat->col2->y * tVec->y));
HXLINE( 280)		 ::box2D::common::math::B2Vec2 _hx_tmp2 = this->m_sweep->c;
HXDLIN( 280)		_hx_tmp2->x = (_hx_tmp2->x + this->m_xf->position->x);
HXLINE( 281)		 ::box2D::common::math::B2Vec2 _hx_tmp3 = this->m_sweep->c;
HXDLIN( 281)		_hx_tmp3->y = (_hx_tmp3->y + this->m_xf->position->y);
HXLINE( 283)		{
HXLINE( 283)			 ::box2D::common::math::B2Vec2 _this1 = this->m_sweep->c0;
HXDLIN( 283)			 ::box2D::common::math::B2Vec2 v = this->m_sweep->c;
HXDLIN( 283)			_this1->x = v->x;
HXDLIN( 283)			_this1->y = v->y;
            		}
HXLINE( 285)		this->m_sweep->a0 = (this->m_sweep->a = angle);
HXLINE( 287)		::Dynamic broadPhase = this->m_world->m_contactManager->m_broadPhase;
HXLINE( 288)		f = this->m_fixtureList;
HXLINE( 289)		while(hx::IsNotNull( f )){
HXLINE( 291)			f->synchronize(broadPhase,this->m_xf,this->m_xf);
HXLINE( 292)			f = f->m_next;
            		}
HXLINE( 294)		this->m_world->m_contactManager->findNewContacts();
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Body_obj,setPositionAndAngle,(void))

void B2Body_obj::setPositionFast( ::box2D::common::math::B2Vec2 position){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_299_setPositionFast)
HXLINE( 300)		if ((this->m_world->isLocked() == true)) {
HXLINE( 302)			return;
            		}
HXLINE( 305)		{
HXLINE( 305)			 ::box2D::common::math::B2Vec2 _this = this->m_xf->position;
HXDLIN( 305)			_this->x = position->x;
HXDLIN( 305)			_this->y = position->y;
            		}
HXLINE( 307)		 ::box2D::common::math::B2Mat22 tMat = this->m_xf->R;
HXLINE( 308)		 ::box2D::common::math::B2Vec2 tVec = this->m_sweep->localCenter;
HXLINE( 310)		Float _hx_tmp = (tMat->col1->x * tVec->x);
HXDLIN( 310)		this->m_sweep->c->x = (_hx_tmp + (tMat->col2->x * tVec->y));
HXLINE( 311)		Float _hx_tmp1 = (tMat->col1->y * tVec->x);
HXDLIN( 311)		this->m_sweep->c->y = (_hx_tmp1 + (tMat->col2->y * tVec->y));
HXLINE( 313)		 ::box2D::common::math::B2Vec2 _hx_tmp2 = this->m_sweep->c;
HXDLIN( 313)		_hx_tmp2->x = (_hx_tmp2->x + this->m_xf->position->x);
HXLINE( 314)		 ::box2D::common::math::B2Vec2 _hx_tmp3 = this->m_sweep->c;
HXDLIN( 314)		_hx_tmp3->y = (_hx_tmp3->y + this->m_xf->position->y);
HXLINE( 316)		{
HXLINE( 316)			 ::box2D::common::math::B2Vec2 _this1 = this->m_sweep->c0;
HXDLIN( 316)			 ::box2D::common::math::B2Vec2 v = this->m_sweep->c;
HXDLIN( 316)			_this1->x = v->x;
HXDLIN( 316)			_this1->y = v->y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setPositionFast,(void))

void B2Body_obj::setTransform( ::box2D::common::math::B2Transform xf){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_328_setTransform)
HXDLIN( 328)		 ::box2D::common::math::B2Vec2 xf1 = xf->position;
HXDLIN( 328)		this->setPositionAndAngle(xf1,xf->getAngle());
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setTransform,(void))

 ::box2D::common::math::B2Transform B2Body_obj::getTransform(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_336_getTransform)
HXDLIN( 336)		return this->m_xf;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getTransform,return )

 ::box2D::common::math::B2Vec2 B2Body_obj::getPosition(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_344_getPosition)
HXDLIN( 344)		return this->m_xf->position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getPosition,return )

void B2Body_obj::setPosition( ::box2D::common::math::B2Vec2 position){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_353_setPosition)
HXDLIN( 353)		this->setPositionAndAngle(position,this->getAngle());
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setPosition,(void))

Float B2Body_obj::getAngle(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_361_getAngle)
HXDLIN( 361)		return this->m_sweep->a;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getAngle,return )

void B2Body_obj::setAngle(Float angle){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_370_setAngle)
HXDLIN( 370)		this->setPositionAndAngle(this->getPosition(),angle);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setAngle,(void))

 ::box2D::common::math::B2Vec2 B2Body_obj::getWorldCenter(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_378_getWorldCenter)
HXDLIN( 378)		return this->m_sweep->c;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getWorldCenter,return )

 ::box2D::common::math::B2Vec2 B2Body_obj::getLocalCenter(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_385_getLocalCenter)
HXDLIN( 385)		return this->m_sweep->localCenter;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getLocalCenter,return )

void B2Body_obj::setLinearVelocity( ::box2D::common::math::B2Vec2 v){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_392_setLinearVelocity)
HXLINE( 393)		if ((this->m_type == ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE( 395)			return;
            		}
HXLINE( 397)		{
HXLINE( 397)			 ::box2D::common::math::B2Vec2 _this = this->m_linearVelocity;
HXDLIN( 397)			_this->x = v->x;
HXDLIN( 397)			_this->y = v->y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setLinearVelocity,(void))

 ::box2D::common::math::B2Vec2 B2Body_obj::getLinearVelocity(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_405_getLinearVelocity)
HXDLIN( 405)		return this->m_linearVelocity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getLinearVelocity,return )

void B2Body_obj::setAngularVelocity(Float omega){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_412_setAngularVelocity)
HXLINE( 413)		if ((this->m_type == ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE( 415)			return;
            		}
HXLINE( 417)		this->m_angularVelocity = omega;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setAngularVelocity,(void))

Float B2Body_obj::getAngularVelocity(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_425_getAngularVelocity)
HXDLIN( 425)		return this->m_angularVelocity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getAngularVelocity,return )

 ::box2D::dynamics::B2BodyDef B2Body_obj::getDefinition(){
            	HX_GC_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_433_getDefinition)
HXLINE( 434)		 ::box2D::dynamics::B2BodyDef bd =  ::box2D::dynamics::B2BodyDef_obj::__alloc( HX_CTX );
HXLINE( 435)		bd->type = this->getType();
HXLINE( 436)		bd->allowSleep = (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_allowSleepFlag) == ::box2D::dynamics::B2Body_obj::e_allowSleepFlag);
HXLINE( 437)		bd->angle = this->getAngle();
HXLINE( 438)		bd->angularDamping = this->m_angularDamping;
HXLINE( 439)		bd->angularVelocity = this->m_angularVelocity;
HXLINE( 440)		bd->fixedRotation = (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_fixedRotationFlag) == ::box2D::dynamics::B2Body_obj::e_fixedRotationFlag);
HXLINE( 441)		bd->bullet = (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_bulletFlag) == ::box2D::dynamics::B2Body_obj::e_bulletFlag);
HXLINE( 442)		bd->awake = (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_awakeFlag) == ::box2D::dynamics::B2Body_obj::e_awakeFlag);
HXLINE( 443)		bd->linearDamping = this->m_linearDamping;
HXLINE( 444)		{
HXLINE( 444)			 ::box2D::common::math::B2Vec2 _this = bd->linearVelocity;
HXDLIN( 444)			 ::box2D::common::math::B2Vec2 v = this->getLinearVelocity();
HXDLIN( 444)			_this->x = v->x;
HXDLIN( 444)			_this->y = v->y;
            		}
HXLINE( 445)		bd->position = this->getPosition();
HXLINE( 446)		bd->userData = this->getUserData();
HXLINE( 447)		return bd;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getDefinition,return )

void B2Body_obj::applyForce( ::box2D::common::math::B2Vec2 force, ::box2D::common::math::B2Vec2 point){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_457_applyForce)
HXLINE( 458)		if ((this->m_type != ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE( 460)			return;
            		}
HXLINE( 463)		if ((this->isAwake() == false)) {
HXLINE( 465)			this->setAwake(true);
            		}
HXLINE( 469)		 ::box2D::common::math::B2Vec2 _hx_tmp = this->m_force;
HXDLIN( 469)		_hx_tmp->x = (_hx_tmp->x + force->x);
HXLINE( 470)		 ::box2D::common::math::B2Vec2 _hx_tmp1 = this->m_force;
HXDLIN( 470)		_hx_tmp1->y = (_hx_tmp1->y + force->y);
HXLINE( 472)		 ::box2D::dynamics::B2Body _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 472)		Float _hx_tmp3 = ((point->x - this->m_sweep->c->x) * force->y);
HXDLIN( 472)		_hx_tmp2->m_torque = (_hx_tmp2->m_torque + (_hx_tmp3 - ((point->y - this->m_sweep->c->y) * force->x)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Body_obj,applyForce,(void))

void B2Body_obj::applyTorque(Float torque){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_481_applyTorque)
HXLINE( 482)		if ((this->m_type != ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE( 484)			return;
            		}
HXLINE( 487)		if ((this->isAwake() == false)) {
HXLINE( 489)			this->setAwake(true);
            		}
HXLINE( 491)		 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 491)		_hx_tmp->m_torque = (_hx_tmp->m_torque + torque);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,applyTorque,(void))

void B2Body_obj::applyImpulse( ::box2D::common::math::B2Vec2 impulse, ::box2D::common::math::B2Vec2 point){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_501_applyImpulse)
HXLINE( 502)		if ((this->m_type != ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE( 504)			return;
            		}
HXLINE( 507)		if ((this->isAwake() == false)) {
HXLINE( 509)			this->setAwake(true);
            		}
HXLINE( 512)		 ::box2D::common::math::B2Vec2 _hx_tmp = this->m_linearVelocity;
HXDLIN( 512)		_hx_tmp->x = (_hx_tmp->x + (this->m_invMass * impulse->x));
HXLINE( 513)		 ::box2D::common::math::B2Vec2 _hx_tmp1 = this->m_linearVelocity;
HXDLIN( 513)		_hx_tmp1->y = (_hx_tmp1->y + (this->m_invMass * impulse->y));
HXLINE( 515)		 ::box2D::dynamics::B2Body _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 515)		Float _hx_tmp3 = this->m_invI;
HXDLIN( 515)		Float _hx_tmp4 = ((point->x - this->m_sweep->c->x) * impulse->y);
HXDLIN( 515)		_hx_tmp2->m_angularVelocity = (_hx_tmp2->m_angularVelocity + (_hx_tmp3 * (_hx_tmp4 - ((point->y - this->m_sweep->c->y) * impulse->x))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Body_obj,applyImpulse,(void))

 ::box2D::dynamics::B2Body B2Body_obj::split( ::Dynamic callbackMethod){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_526_split)
HXLINE( 527)		 ::box2D::common::math::B2Vec2 linearVelocity = this->getLinearVelocity()->copy(null());
HXLINE( 528)		Float angularVelocity = this->getAngularVelocity();
HXLINE( 529)		 ::box2D::common::math::B2Vec2 center = this->getWorldCenter();
HXLINE( 530)		 ::box2D::dynamics::B2Body body1 = hx::ObjectPtr<OBJ_>(this);
HXLINE( 531)		 ::box2D::dynamics::B2World body2 = this->m_world;
HXDLIN( 531)		 ::box2D::dynamics::B2Body body21 = body2->createBody(this->getDefinition());
HXLINE( 533)		 ::box2D::dynamics::B2Fixture prev = null();
HXLINE( 534)		 ::box2D::dynamics::B2Fixture f = body1->m_fixtureList;
HXLINE( 535)		while(hx::IsNotNull( f )){
HXLINE( 537)			if (( (bool)(callbackMethod(f)) )) {
HXLINE( 539)				 ::box2D::dynamics::B2Fixture next = f->m_next;
HXLINE( 541)				if (hx::IsNotNull( prev )) {
HXLINE( 543)					prev->m_next = next;
            				}
            				else {
HXLINE( 545)					body1->m_fixtureList = next;
            				}
HXLINE( 547)				body1->m_fixtureCount--;
HXLINE( 550)				f->m_next = body21->m_fixtureList;
HXLINE( 551)				body21->m_fixtureList = f;
HXLINE( 552)				body21->m_fixtureCount++;
HXLINE( 554)				f->m_body = body21;
HXLINE( 556)				f = next;
            			}
            			else {
HXLINE( 558)				prev = f;
HXLINE( 559)				f = f->m_next;
            			}
            		}
HXLINE( 563)		body1->resetMassData();
HXLINE( 564)		body21->resetMassData();
HXLINE( 567)		 ::box2D::common::math::B2Vec2 center1 = body1->getWorldCenter();
HXLINE( 568)		 ::box2D::common::math::B2Vec2 center2 = body21->getWorldCenter();
HXLINE( 570)		 ::box2D::common::math::B2Vec2 velocity1 = ::box2D::common::math::B2Math_obj::addVV(linearVelocity,::box2D::common::math::B2Math_obj::crossFV(angularVelocity,::box2D::common::math::B2Math_obj::subtractVV(center1,center),null()));
HXLINE( 574)		 ::box2D::common::math::B2Vec2 velocity2 = ::box2D::common::math::B2Math_obj::addVV(linearVelocity,::box2D::common::math::B2Math_obj::crossFV(angularVelocity,::box2D::common::math::B2Math_obj::subtractVV(center2,center),null()));
HXLINE( 578)		body1->setLinearVelocity(velocity1);
HXLINE( 579)		body21->setLinearVelocity(velocity2);
HXLINE( 580)		body1->setAngularVelocity(angularVelocity);
HXLINE( 581)		body21->setAngularVelocity(angularVelocity);
HXLINE( 583)		body1->synchronizeFixtures();
HXLINE( 584)		body21->synchronizeFixtures();
HXLINE( 586)		return body21;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,split,return )

void B2Body_obj::merge( ::box2D::dynamics::B2Body other){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_595_merge)
HXLINE( 596)		 ::box2D::dynamics::B2Fixture f = other->m_fixtureList;
HXLINE( 600)		 ::box2D::dynamics::B2Body body1 = hx::ObjectPtr<OBJ_>(this);
HXLINE( 601)		 ::box2D::dynamics::B2Body body2 = other;
HXLINE( 603)		while(hx::IsNotNull( f )){
HXLINE( 605)			 ::box2D::dynamics::B2Fixture next = f->m_next;
HXLINE( 608)			other->m_fixtureCount--;
HXLINE( 611)			f->m_next = this->m_fixtureList;
HXLINE( 612)			this->m_fixtureList = f;
HXLINE( 613)			this->m_fixtureCount++;
HXLINE( 615)			f->m_body = body2;
HXLINE( 617)			f = next;
            		}
HXLINE( 619)		body1->m_fixtureCount = (int)0;
HXLINE( 622)		 ::box2D::common::math::B2Vec2 center1 = body1->getWorldCenter();
HXLINE( 623)		 ::box2D::common::math::B2Vec2 center2 = body2->getWorldCenter();
HXLINE( 625)		 ::box2D::common::math::B2Vec2 velocity1 = body1->getLinearVelocity()->copy(null());
HXLINE( 626)		 ::box2D::common::math::B2Vec2 velocity2 = body2->getLinearVelocity()->copy(null());
HXLINE( 628)		Float angular1 = body1->getAngularVelocity();
HXLINE( 629)		Float angular = body2->getAngularVelocity();
HXLINE( 633)		body1->resetMassData();
HXLINE( 635)		this->synchronizeFixtures();
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,merge,(void))

Float B2Body_obj::getMass(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_643_getMass)
HXDLIN( 643)		return this->m_mass;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getMass,return )

Float B2Body_obj::getInertia(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_651_getInertia)
HXDLIN( 651)		return this->m_I;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getInertia,return )

void B2Body_obj::getMassData( ::box2D::collision::shapes::B2MassData data){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_658_getMassData)
HXLINE( 659)		data->mass = this->m_mass;
HXLINE( 660)		data->I = this->m_I;
HXLINE( 661)		{
HXLINE( 661)			 ::box2D::common::math::B2Vec2 _this = data->center;
HXDLIN( 661)			 ::box2D::common::math::B2Vec2 v = this->m_sweep->localCenter;
HXDLIN( 661)			_this->x = v->x;
HXDLIN( 661)			_this->y = v->y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,getMassData,(void))

void B2Body_obj::setMassData( ::box2D::collision::shapes::B2MassData massData){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_673_setMassData)
HXLINE( 674)		::box2D::common::B2Settings_obj::b2Assert((this->m_world->isLocked() == false));
HXLINE( 675)		if ((this->m_world->isLocked() == true)) {
HXLINE( 677)			return;
            		}
HXLINE( 680)		if ((this->m_type != ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE( 682)			return;
            		}
HXLINE( 685)		this->m_invMass = ((Float)0.0);
HXLINE( 686)		this->m_I = ((Float)0.0);
HXLINE( 687)		this->m_invI = ((Float)0.0);
HXLINE( 689)		this->m_mass = massData->mass;
HXLINE( 692)		if ((this->m_mass <= ((Float)0.0))) {
HXLINE( 694)			this->m_mass = ((Float)1.0);
            		}
HXLINE( 696)		this->m_invMass = ((Float)((Float)1.0) / (Float)this->m_mass);
HXLINE( 698)		bool _hx_tmp;
HXDLIN( 698)		if ((massData->I > ((Float)0.0))) {
HXLINE( 698)			_hx_tmp = (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_fixedRotationFlag) == (int)0);
            		}
            		else {
HXLINE( 698)			_hx_tmp = false;
            		}
HXDLIN( 698)		if (_hx_tmp) {
HXLINE( 701)			Float massData1 = massData->I;
HXDLIN( 701)			Float _hx_tmp1 = this->m_mass;
HXDLIN( 701)			Float _hx_tmp2 = (massData->center->x * massData->center->x);
HXDLIN( 701)			this->m_I = (massData1 - (_hx_tmp1 * (_hx_tmp2 + (massData->center->y * massData->center->y))));
HXLINE( 702)			this->m_invI = ((Float)((Float)1.0) / (Float)this->m_I);
            		}
HXLINE( 706)		 ::box2D::common::math::B2Vec2 oldCenter = this->m_sweep->c->copy(null());
HXLINE( 707)		{
HXLINE( 707)			 ::box2D::common::math::B2Vec2 _this = this->m_sweep->localCenter;
HXDLIN( 707)			 ::box2D::common::math::B2Vec2 v = massData->center;
HXDLIN( 707)			_this->x = v->x;
HXDLIN( 707)			_this->y = v->y;
            		}
HXLINE( 708)		{
HXLINE( 708)			 ::box2D::common::math::B2Vec2 _this1 = this->m_sweep->c0;
HXDLIN( 708)			 ::box2D::common::math::B2Vec2 v1 = ::box2D::common::math::B2Math_obj::mulX(this->m_xf,this->m_sweep->localCenter,null());
HXDLIN( 708)			_this1->x = v1->x;
HXDLIN( 708)			_this1->y = v1->y;
            		}
HXLINE( 709)		{
HXLINE( 709)			 ::box2D::common::math::B2Vec2 _this2 = this->m_sweep->c;
HXDLIN( 709)			 ::box2D::common::math::B2Vec2 v2 = this->m_sweep->c0;
HXDLIN( 709)			_this2->x = v2->x;
HXDLIN( 709)			_this2->y = v2->y;
            		}
HXLINE( 713)		 ::box2D::common::math::B2Vec2 _hx_tmp3 = this->m_linearVelocity;
HXDLIN( 713)		_hx_tmp3->x = (_hx_tmp3->x + (this->m_angularVelocity * -((this->m_sweep->c->y - oldCenter->y))));
HXLINE( 714)		 ::box2D::common::math::B2Vec2 _hx_tmp4 = this->m_linearVelocity;
HXDLIN( 714)		Float _hx_tmp5 = this->m_angularVelocity;
HXDLIN( 714)		_hx_tmp4->y = (_hx_tmp4->y + (_hx_tmp5 * (this->m_sweep->c->x - oldCenter->x)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setMassData,(void))

void B2Body_obj::resetMassData(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_724_resetMassData)
HXLINE( 726)		this->m_mass = ((Float)0.0);
HXLINE( 727)		this->m_invMass = ((Float)0.0);
HXLINE( 728)		this->m_I = ((Float)0.0);
HXLINE( 729)		this->m_invI = ((Float)0.0);
HXLINE( 730)		{
HXLINE( 730)			 ::box2D::common::math::B2Vec2 _this = this->m_sweep->localCenter;
HXDLIN( 730)			_this->x = ((Float)0.0);
HXDLIN( 730)			_this->y = ((Float)0.0);
            		}
HXLINE( 733)		bool _hx_tmp;
HXDLIN( 733)		if ((this->m_type != ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE( 733)			_hx_tmp = (this->m_type == ::box2D::dynamics::B2Body_obj::b2_kinematicBody);
            		}
            		else {
HXLINE( 733)			_hx_tmp = true;
            		}
HXDLIN( 733)		if (_hx_tmp) {
HXLINE( 735)			return;
            		}
HXLINE( 740)		 ::box2D::common::math::B2Vec2 center = ::box2D::common::math::B2Vec2_obj::make((int)0,(int)0);
HXLINE( 742)		 ::box2D::dynamics::B2Fixture f = this->m_fixtureList;
HXLINE( 744)		while(hx::IsNotNull( f )){
HXLINE( 746)			if ((f->m_density == ((Float)0.0))) {
HXLINE( 748)				continue;
            			}
HXLINE( 751)			 ::box2D::collision::shapes::B2MassData massData = f->getMassData(null());
HXLINE( 752)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 752)			_hx_tmp1->m_mass = (_hx_tmp1->m_mass + massData->mass);
HXLINE( 753)			 ::box2D::common::math::B2Vec2 center1 = center;
HXDLIN( 753)			center1->x = (center1->x + (massData->center->x * massData->mass));
HXLINE( 754)			 ::box2D::common::math::B2Vec2 center2 = center;
HXDLIN( 754)			center2->y = (center2->y + (massData->center->y * massData->mass));
HXLINE( 755)			 ::box2D::dynamics::B2Body _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 755)			_hx_tmp2->m_I = (_hx_tmp2->m_I + massData->I);
HXLINE( 757)			f = f->m_next;
            		}
HXLINE( 761)		if ((this->m_mass > ((Float)0.0))) {
HXLINE( 763)			this->m_invMass = ((Float)((Float)1.0) / (Float)this->m_mass);
HXLINE( 764)			 ::box2D::common::math::B2Vec2 center3 = center;
HXDLIN( 764)			center3->x = (center3->x * this->m_invMass);
HXLINE( 765)			 ::box2D::common::math::B2Vec2 center4 = center;
HXDLIN( 765)			center4->y = (center4->y * this->m_invMass);
            		}
            		else {
HXLINE( 770)			this->m_mass = ((Float)1.0);
HXLINE( 771)			this->m_invMass = ((Float)1.0);
            		}
HXLINE( 774)		bool _hx_tmp3;
HXDLIN( 774)		if ((this->m_I > ((Float)0.0))) {
HXLINE( 774)			_hx_tmp3 = (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_fixedRotationFlag) == (int)0);
            		}
            		else {
HXLINE( 774)			_hx_tmp3 = false;
            		}
HXDLIN( 774)		if (_hx_tmp3) {
HXLINE( 777)			 ::box2D::dynamics::B2Body _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 777)			Float _hx_tmp5 = this->m_mass;
HXDLIN( 777)			Float _hx_tmp6 = (center->x * center->x);
HXDLIN( 777)			_hx_tmp4->m_I = (_hx_tmp4->m_I - (_hx_tmp5 * (_hx_tmp6 + (center->y * center->y))));
HXLINE( 778)			 ::box2D::dynamics::B2Body _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 778)			_hx_tmp7->m_I = (_hx_tmp7->m_I * this->m_inertiaScale);
HXLINE( 779)			::box2D::common::B2Settings_obj::b2Assert((this->m_I > (int)0));
HXLINE( 780)			this->m_invI = ((Float)((Float)1.0) / (Float)this->m_I);
            		}
            		else {
HXLINE( 782)			this->m_I = ((Float)0.0);
HXLINE( 783)			this->m_invI = ((Float)0.0);
            		}
HXLINE( 787)		 ::box2D::common::math::B2Vec2 oldCenter = this->m_sweep->c->copy(null());
HXLINE( 788)		{
HXLINE( 788)			 ::box2D::common::math::B2Vec2 _this1 = this->m_sweep->localCenter;
HXDLIN( 788)			_this1->x = center->x;
HXDLIN( 788)			_this1->y = center->y;
            		}
HXLINE( 789)		{
HXLINE( 789)			 ::box2D::common::math::B2Vec2 _this2 = this->m_sweep->c0;
HXDLIN( 789)			 ::box2D::common::math::B2Vec2 v = ::box2D::common::math::B2Math_obj::mulX(this->m_xf,this->m_sweep->localCenter,null());
HXDLIN( 789)			_this2->x = v->x;
HXDLIN( 789)			_this2->y = v->y;
            		}
HXLINE( 790)		{
HXLINE( 790)			 ::box2D::common::math::B2Vec2 _this3 = this->m_sweep->c;
HXDLIN( 790)			 ::box2D::common::math::B2Vec2 v1 = this->m_sweep->c0;
HXDLIN( 790)			_this3->x = v1->x;
HXDLIN( 790)			_this3->y = v1->y;
            		}
HXLINE( 794)		 ::box2D::common::math::B2Vec2 _hx_tmp8 = this->m_linearVelocity;
HXDLIN( 794)		_hx_tmp8->x = (_hx_tmp8->x + (this->m_angularVelocity * -((this->m_sweep->c->y - oldCenter->y))));
HXLINE( 795)		 ::box2D::common::math::B2Vec2 _hx_tmp9 = this->m_linearVelocity;
HXDLIN( 795)		Float _hx_tmp10 = this->m_angularVelocity;
HXDLIN( 795)		_hx_tmp9->y = (_hx_tmp9->y + (_hx_tmp10 * (this->m_sweep->c->x - oldCenter->x)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,resetMassData,(void))

 ::box2D::common::math::B2Vec2 B2Body_obj::getWorldPoint( ::box2D::common::math::B2Vec2 localPoint){
            	HX_GC_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_804_getWorldPoint)
HXLINE( 806)		 ::box2D::common::math::B2Mat22 A = this->m_xf->R;
HXLINE( 807)		Float u = (A->col1->x * localPoint->x);
HXDLIN( 807)		Float u1 = (u + (A->col2->x * localPoint->y));
HXLINE( 808)		Float u2 = (A->col1->y * localPoint->x);
HXLINE( 807)		 ::box2D::common::math::B2Vec2 u3 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,u1,(u2 + (A->col2->y * localPoint->y)));
HXLINE( 809)		 ::box2D::common::math::B2Vec2 u4 = u3;
HXDLIN( 809)		u4->x = (u4->x + this->m_xf->position->x);
HXLINE( 810)		 ::box2D::common::math::B2Vec2 u5 = u3;
HXDLIN( 810)		u5->y = (u5->y + this->m_xf->position->y);
HXLINE( 811)		return u3;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,getWorldPoint,return )

 ::box2D::common::math::B2Vec2 B2Body_obj::getWorldVector( ::box2D::common::math::B2Vec2 localVector){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_820_getWorldVector)
HXDLIN( 820)		return ::box2D::common::math::B2Math_obj::mulMV(this->m_xf->R,localVector,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,getWorldVector,return )

 ::box2D::common::math::B2Vec2 B2Body_obj::getLocalPoint( ::box2D::common::math::B2Vec2 worldPoint){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_829_getLocalPoint)
HXDLIN( 829)		return ::box2D::common::math::B2Math_obj::mulXT(this->m_xf,worldPoint,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,getLocalPoint,return )

 ::box2D::common::math::B2Vec2 B2Body_obj::getLocalVector( ::box2D::common::math::B2Vec2 worldVector){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_838_getLocalVector)
HXDLIN( 838)		return ::box2D::common::math::B2Math_obj::mulTMV(this->m_xf->R,worldVector,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,getLocalVector,return )

 ::box2D::common::math::B2Vec2 B2Body_obj::getLinearVelocityFromWorldPoint( ::box2D::common::math::B2Vec2 worldPoint){
            	HX_GC_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_849_getLinearVelocityFromWorldPoint)
HXDLIN( 849)		Float _hx_tmp = this->m_linearVelocity->x;
HXDLIN( 849)		Float _hx_tmp1 = this->m_angularVelocity;
HXDLIN( 849)		Float _hx_tmp2 = (_hx_tmp - (_hx_tmp1 * (worldPoint->y - this->m_sweep->c->y)));
HXLINE( 850)		Float _hx_tmp3 = this->m_linearVelocity->y;
HXDLIN( 850)		Float _hx_tmp4 = this->m_angularVelocity;
HXLINE( 849)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp2,(_hx_tmp3 + (_hx_tmp4 * (worldPoint->x - this->m_sweep->c->x))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,getLinearVelocityFromWorldPoint,return )

 ::box2D::common::math::B2Vec2 B2Body_obj::getLinearVelocityFromLocalPoint( ::box2D::common::math::B2Vec2 localPoint){
            	HX_GC_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_859_getLinearVelocityFromLocalPoint)
HXLINE( 861)		 ::box2D::common::math::B2Mat22 A = this->m_xf->R;
HXLINE( 862)		Float worldPoint = (A->col1->x * localPoint->x);
HXDLIN( 862)		Float worldPoint1 = (worldPoint + (A->col2->x * localPoint->y));
HXLINE( 863)		Float worldPoint2 = (A->col1->y * localPoint->x);
HXLINE( 862)		 ::box2D::common::math::B2Vec2 worldPoint3 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,worldPoint1,(worldPoint2 + (A->col2->y * localPoint->y)));
HXLINE( 864)		 ::box2D::common::math::B2Vec2 worldPoint4 = worldPoint3;
HXDLIN( 864)		worldPoint4->x = (worldPoint4->x + this->m_xf->position->x);
HXLINE( 865)		 ::box2D::common::math::B2Vec2 worldPoint5 = worldPoint3;
HXDLIN( 865)		worldPoint5->y = (worldPoint5->y + this->m_xf->position->y);
HXLINE( 866)		Float _hx_tmp = this->m_linearVelocity->x;
HXDLIN( 866)		Float _hx_tmp1 = this->m_angularVelocity;
HXDLIN( 866)		Float _hx_tmp2 = (_hx_tmp - (_hx_tmp1 * (worldPoint3->y - this->m_sweep->c->y)));
HXLINE( 867)		Float _hx_tmp3 = this->m_linearVelocity->y;
HXDLIN( 867)		Float _hx_tmp4 = this->m_angularVelocity;
HXLINE( 866)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp2,(_hx_tmp3 + (_hx_tmp4 * (worldPoint3->x - this->m_sweep->c->x))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,getLinearVelocityFromLocalPoint,return )

Float B2Body_obj::getLinearDamping(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_875_getLinearDamping)
HXDLIN( 875)		return this->m_linearDamping;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getLinearDamping,return )

void B2Body_obj::setLinearDamping(Float linearDamping){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_883_setLinearDamping)
HXDLIN( 883)		this->m_linearDamping = linearDamping;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setLinearDamping,(void))

Float B2Body_obj::getAngularDamping(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_891_getAngularDamping)
HXDLIN( 891)		return this->m_angularDamping;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getAngularDamping,return )

void B2Body_obj::setAngularDamping(Float angularDamping){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_899_setAngularDamping)
HXDLIN( 899)		this->m_angularDamping = angularDamping;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setAngularDamping,(void))

void B2Body_obj::setType(int type){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_907_setType)
HXLINE( 908)		if ((this->m_type == type)) {
HXLINE( 910)			return;
            		}
HXLINE( 913)		this->m_type = type;
HXLINE( 915)		this->resetMassData();
HXLINE( 917)		if ((this->m_type == ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE( 919)			{
HXLINE( 919)				 ::box2D::common::math::B2Vec2 _this = this->m_linearVelocity;
HXDLIN( 919)				_this->x = ((Float)0.0);
HXDLIN( 919)				_this->y = ((Float)0.0);
            			}
HXLINE( 920)			this->m_angularVelocity = ((Float)0.0);
            		}
HXLINE( 923)		this->setAwake(true);
HXLINE( 925)		{
HXLINE( 925)			 ::box2D::common::math::B2Vec2 _this1 = this->m_force;
HXDLIN( 925)			_this1->x = ((Float)0.0);
HXDLIN( 925)			_this1->y = ((Float)0.0);
            		}
HXLINE( 926)		this->m_torque = ((Float)0.0);
HXLINE( 929)		 ::box2D::dynamics::contacts::B2ContactEdge ce = this->m_contactList;
HXLINE( 930)		while(hx::IsNotNull( ce )){
HXLINE( 932)			ce->contact->flagForFiltering();
HXLINE( 933)			ce = ce->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setType,(void))

int B2Body_obj::getType(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_943_getType)
HXDLIN( 943)		return this->m_type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getType,return )

void B2Body_obj::setBullet(bool flag){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_950_setBullet)
HXDLIN( 950)		if (flag) {
HXLINE( 952)			 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 952)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2Body_obj::e_bulletFlag);
            		}
            		else {
HXLINE( 956)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 956)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_bulletFlag));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setBullet,(void))

bool B2Body_obj::isBullet(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_964_isBullet)
HXDLIN( 964)		return (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_bulletFlag) == ::box2D::dynamics::B2Body_obj::e_bulletFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,isBullet,return )

void B2Body_obj::setSleepingAllowed(bool flag){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_972_setSleepingAllowed)
HXDLIN( 972)		if (flag) {
HXLINE( 974)			 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 974)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2Body_obj::e_allowSleepFlag);
            		}
            		else {
HXLINE( 978)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 978)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_allowSleepFlag));
HXLINE( 979)			this->setAwake(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setSleepingAllowed,(void))

void B2Body_obj::setAwake(bool flag){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_988_setAwake)
HXDLIN( 988)		if (flag) {
HXLINE( 990)			 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 990)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2Body_obj::e_awakeFlag);
HXLINE( 991)			this->m_sleepTime = ((Float)0.0);
            		}
            		else {
HXLINE( 995)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 995)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_awakeFlag));
HXLINE( 996)			this->m_sleepTime = ((Float)0.0);
HXLINE( 997)			{
HXLINE( 997)				 ::box2D::common::math::B2Vec2 _this = this->m_linearVelocity;
HXDLIN( 997)				_this->x = ((Float)0.0);
HXDLIN( 997)				_this->y = ((Float)0.0);
            			}
HXLINE( 998)			this->m_angularVelocity = ((Float)0.0);
HXLINE( 999)			{
HXLINE( 999)				 ::box2D::common::math::B2Vec2 _this1 = this->m_force;
HXDLIN( 999)				_this1->x = ((Float)0.0);
HXDLIN( 999)				_this1->y = ((Float)0.0);
            			}
HXLINE(1000)			this->m_torque = ((Float)0.0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setAwake,(void))

bool B2Body_obj::isAwake(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1009_isAwake)
HXDLIN(1009)		return (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_awakeFlag) == ::box2D::dynamics::B2Body_obj::e_awakeFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,isAwake,return )

void B2Body_obj::setFixedRotation(bool fixed){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1017_setFixedRotation)
HXLINE(1018)		if (fixed) {
HXLINE(1020)			 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1020)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2Body_obj::e_fixedRotationFlag);
            		}
            		else {
HXLINE(1024)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1024)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_fixedRotationFlag));
            		}
HXLINE(1027)		this->resetMassData();
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setFixedRotation,(void))

bool B2Body_obj::isFixedRotation(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1036_isFixedRotation)
HXDLIN(1036)		return (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_fixedRotationFlag) == ::box2D::dynamics::B2Body_obj::e_fixedRotationFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,isFixedRotation,return )

void B2Body_obj::setActive(bool flag){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1053_setActive)
HXLINE(1054)		if ((flag == this->isActive())) {
HXLINE(1056)			return;
            		}
HXLINE(1059)		::Dynamic broadPhase;
HXLINE(1060)		 ::box2D::dynamics::B2Fixture f;
HXLINE(1061)		if (flag) {
HXLINE(1063)			 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1063)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2Body_obj::e_activeFlag);
HXLINE(1066)			broadPhase = this->m_world->m_contactManager->m_broadPhase;
HXLINE(1067)			f = this->m_fixtureList;
HXLINE(1068)			while(hx::IsNotNull( f )){
HXLINE(1070)				f->createProxy(broadPhase,this->m_xf);
HXLINE(1071)				f = f->m_next;
            			}
            		}
            		else {
HXLINE(1077)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1077)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_activeFlag));
HXLINE(1080)			broadPhase = this->m_world->m_contactManager->m_broadPhase;
HXLINE(1081)			f = this->m_fixtureList;
HXLINE(1082)			while(hx::IsNotNull( f )){
HXLINE(1084)				f->destroyProxy(broadPhase);
HXLINE(1085)				f = f->m_next;
            			}
HXLINE(1089)			 ::box2D::dynamics::contacts::B2ContactEdge ce = this->m_contactList;
HXLINE(1090)			while(hx::IsNotNull( ce )){
HXLINE(1092)				 ::box2D::dynamics::contacts::B2ContactEdge ce0 = ce;
HXLINE(1093)				ce = ce->next;
HXLINE(1094)				this->m_world->m_contactManager->destroy(ce0->contact);
            			}
HXLINE(1096)			this->m_contactList = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setActive,(void))

bool B2Body_obj::isActive(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1105_isActive)
HXDLIN(1105)		return (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_activeFlag) == ::box2D::dynamics::B2Body_obj::e_activeFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,isActive,return )

bool B2Body_obj::isSleepingAllowed(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1113_isSleepingAllowed)
HXDLIN(1113)		return (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_allowSleepFlag) == ::box2D::dynamics::B2Body_obj::e_allowSleepFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,isSleepingAllowed,return )

 ::box2D::dynamics::B2Fixture B2Body_obj::getFixtureList(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1120_getFixtureList)
HXDLIN(1120)		return this->m_fixtureList;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getFixtureList,return )

 ::box2D::dynamics::joints::B2JointEdge B2Body_obj::getJointList(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1127_getJointList)
HXDLIN(1127)		return this->m_jointList;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getJointList,return )

 ::box2D::dynamics::controllers::B2ControllerEdge B2Body_obj::getControllerList(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1134_getControllerList)
HXDLIN(1134)		return this->m_controllerList;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getControllerList,return )

 ::box2D::dynamics::contacts::B2ContactEdge B2Body_obj::getContactList(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1141_getContactList)
HXDLIN(1141)		return this->m_contactList;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getContactList,return )

 ::box2D::dynamics::B2Body B2Body_obj::getNext(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1148_getNext)
HXDLIN(1148)		return this->m_next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getNext,return )

 ::com::stencyl::models::Actor B2Body_obj::getUserData(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1155_getUserData)
HXDLIN(1155)		return this->m_userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getUserData,return )

void B2Body_obj::setUserData( ::com::stencyl::models::Actor data){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1163_setUserData)
HXDLIN(1163)		this->m_userData = data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setUserData,(void))

 ::box2D::dynamics::B2World B2Body_obj::getWorld(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1171_getWorld)
HXDLIN(1171)		return this->m_world;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,getWorld,return )

void B2Body_obj::setFriction(Float friction){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1176_setFriction)
HXLINE(1177)		 ::box2D::dynamics::B2Fixture fixture = this->m_fixtureList;
HXLINE(1179)		while(hx::IsNotNull( fixture )){
HXLINE(1181)			fixture->m_friction = friction;
HXLINE(1182)			fixture = fixture->m_next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setFriction,(void))

void B2Body_obj::setBounciness(Float bounciness){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1187_setBounciness)
HXLINE(1188)		 ::box2D::dynamics::B2Fixture fixture = this->m_fixtureList;
HXLINE(1190)		while(hx::IsNotNull( fixture )){
HXLINE(1192)			fixture->m_restitution = bounciness;
HXLINE(1193)			fixture = fixture->m_next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setBounciness,(void))

void B2Body_obj::setPaused(bool flag){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1199_setPaused)
HXDLIN(1199)		if (flag) {
HXLINE(1201)			 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1201)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2Body_obj::e_pausedFlag);
            		}
            		else {
HXLINE(1206)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1206)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_pausedFlag));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setPaused,(void))

bool B2Body_obj::isPaused(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1212_isPaused)
HXDLIN(1212)		return (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_pausedFlag) == ::box2D::dynamics::B2Body_obj::e_pausedFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,isPaused,return )

void B2Body_obj::setIgnoreGravity(bool flag){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1216_setIgnoreGravity)
HXDLIN(1216)		if (flag) {
HXLINE(1217)			 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1217)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2Body_obj::e_ignoreGravityFlag);
            		}
            		else {
HXLINE(1220)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1220)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_ignoreGravityFlag));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setIgnoreGravity,(void))

bool B2Body_obj::isIgnoringGravity(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1225_isIgnoringGravity)
HXDLIN(1225)		return (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_ignoreGravityFlag) == ::box2D::dynamics::B2Body_obj::e_ignoreGravityFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,isIgnoringGravity,return )

void B2Body_obj::setAlwaysActive(bool flag){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1229_setAlwaysActive)
HXDLIN(1229)		if (flag) {
HXLINE(1230)			 ::box2D::dynamics::B2Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1230)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags | (int)::box2D::dynamics::B2Body_obj::e_alwaysActiveFlag);
            		}
            		else {
HXLINE(1233)			 ::box2D::dynamics::B2Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1233)			_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_alwaysActiveFlag));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,setAlwaysActive,(void))

bool B2Body_obj::isAlwaysActive(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1238_isAlwaysActive)
HXDLIN(1238)		return (((int)this->m_flags & (int)::box2D::dynamics::B2Body_obj::e_alwaysActiveFlag) == ::box2D::dynamics::B2Body_obj::e_alwaysActiveFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,isAlwaysActive,return )

void B2Body_obj::synchronizeFixtures(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1372_synchronizeFixtures)
HXLINE(1374)		 ::box2D::common::math::B2Transform xf1 = ::box2D::dynamics::B2Body_obj::s_xf1;
HXLINE(1375)		xf1->R->set(this->m_sweep->a0);
HXLINE(1377)		 ::box2D::common::math::B2Mat22 tMat = xf1->R;
HXLINE(1378)		 ::box2D::common::math::B2Vec2 tVec = this->m_sweep->localCenter;
HXLINE(1379)		Float _hx_tmp = this->m_sweep->c0->x;
HXDLIN(1379)		Float _hx_tmp1 = (tMat->col1->x * tVec->x);
HXDLIN(1379)		xf1->position->x = (_hx_tmp - (_hx_tmp1 + (tMat->col2->x * tVec->y)));
HXLINE(1380)		Float _hx_tmp2 = this->m_sweep->c0->y;
HXDLIN(1380)		Float _hx_tmp3 = (tMat->col1->y * tVec->x);
HXDLIN(1380)		xf1->position->y = (_hx_tmp2 - (_hx_tmp3 + (tMat->col2->y * tVec->y)));
HXLINE(1382)		 ::box2D::dynamics::B2Fixture f;
HXLINE(1383)		::Dynamic broadPhase = this->m_world->m_contactManager->m_broadPhase;
HXLINE(1384)		f = this->m_fixtureList;
HXLINE(1385)		while(hx::IsNotNull( f )){
HXLINE(1387)			f->synchronize(broadPhase,xf1,this->m_xf);
HXLINE(1388)			f = f->m_next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,synchronizeFixtures,(void))

void B2Body_obj::synchronizeTransform(){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1392_synchronizeTransform)
HXLINE(1393)		this->m_xf->R->set(this->m_sweep->a);
HXLINE(1395)		 ::box2D::common::math::B2Mat22 tMat = this->m_xf->R;
HXLINE(1396)		 ::box2D::common::math::B2Vec2 tVec = this->m_sweep->localCenter;
HXLINE(1397)		Float _hx_tmp = this->m_sweep->c->x;
HXDLIN(1397)		Float _hx_tmp1 = (tMat->col1->x * tVec->x);
HXDLIN(1397)		this->m_xf->position->x = (_hx_tmp - (_hx_tmp1 + (tMat->col2->x * tVec->y)));
HXLINE(1398)		Float _hx_tmp2 = this->m_sweep->c->y;
HXDLIN(1398)		Float _hx_tmp3 = (tMat->col1->y * tVec->x);
HXDLIN(1398)		this->m_xf->position->y = (_hx_tmp2 - (_hx_tmp3 + (tMat->col2->y * tVec->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Body_obj,synchronizeTransform,(void))

bool B2Body_obj::shouldCollide( ::box2D::dynamics::B2Body other){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1403_shouldCollide)
HXLINE(1405)		bool _hx_tmp;
HXDLIN(1405)		if ((this->m_type != ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE(1405)			_hx_tmp = (other->m_type != ::box2D::dynamics::B2Body_obj::b2_dynamicBody);
            		}
            		else {
HXLINE(1405)			_hx_tmp = false;
            		}
HXDLIN(1405)		if (_hx_tmp) {
HXLINE(1407)			return false;
            		}
HXLINE(1410)		 ::box2D::dynamics::joints::B2JointEdge jn = this->m_jointList;
HXLINE(1411)		while(hx::IsNotNull( jn )){
HXLINE(1413)			if (hx::IsEq( jn->other,other )) {
HXLINE(1414)				if ((jn->joint->m_collideConnected == false)) {
HXLINE(1416)					return false;
            				}
            			}
HXLINE(1418)			jn = jn->next;
            		}
HXLINE(1421)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,shouldCollide,return )

void B2Body_obj::advance(Float t){
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1424_advance)
HXLINE(1426)		this->m_sweep->advance(t);
HXLINE(1427)		{
HXLINE(1427)			 ::box2D::common::math::B2Vec2 _this = this->m_sweep->c;
HXDLIN(1427)			 ::box2D::common::math::B2Vec2 v = this->m_sweep->c0;
HXDLIN(1427)			_this->x = v->x;
HXDLIN(1427)			_this->y = v->y;
            		}
HXLINE(1428)		this->m_sweep->a = this->m_sweep->a0;
HXLINE(1429)		this->synchronizeTransform();
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Body_obj,advance,(void))

 ::box2D::common::math::B2Transform B2Body_obj::s_xf1;

int B2Body_obj::e_islandFlag;

int B2Body_obj::e_awakeFlag;

int B2Body_obj::e_allowSleepFlag;

int B2Body_obj::e_bulletFlag;

int B2Body_obj::e_fixedRotationFlag;

int B2Body_obj::e_activeFlag;

int B2Body_obj::e_ignoreGravityFlag;

int B2Body_obj::e_alwaysActiveFlag;

int B2Body_obj::e_pausedFlag;

int B2Body_obj::b2_staticBody;

int B2Body_obj::b2_kinematicBody;

int B2Body_obj::b2_dynamicBody;


hx::ObjectPtr< B2Body_obj > B2Body_obj::__new( ::box2D::dynamics::B2BodyDef bd, ::box2D::dynamics::B2World world) {
	hx::ObjectPtr< B2Body_obj > __this = new B2Body_obj();
	__this->__construct(bd,world);
	return __this;
}

hx::ObjectPtr< B2Body_obj > B2Body_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::B2BodyDef bd, ::box2D::dynamics::B2World world) {
	B2Body_obj *__this = (B2Body_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Body_obj), true, "box2D.dynamics.B2Body"));
	*(void **)__this = B2Body_obj::_hx_vtable;
	__this->__construct(bd,world);
	return __this;
}

B2Body_obj::B2Body_obj()
{
}

void B2Body_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Body);
	HX_MARK_MEMBER_NAME(m_flags,"m_flags");
	HX_MARK_MEMBER_NAME(m_type,"m_type");
	HX_MARK_MEMBER_NAME(m_islandIndex,"m_islandIndex");
	HX_MARK_MEMBER_NAME(m_xf,"m_xf");
	HX_MARK_MEMBER_NAME(m_sweep,"m_sweep");
	HX_MARK_MEMBER_NAME(m_linearVelocity,"m_linearVelocity");
	HX_MARK_MEMBER_NAME(m_angularVelocity,"m_angularVelocity");
	HX_MARK_MEMBER_NAME(m_force,"m_force");
	HX_MARK_MEMBER_NAME(m_torque,"m_torque");
	HX_MARK_MEMBER_NAME(m_world,"m_world");
	HX_MARK_MEMBER_NAME(m_prev,"m_prev");
	HX_MARK_MEMBER_NAME(m_next,"m_next");
	HX_MARK_MEMBER_NAME(m_fixtureList,"m_fixtureList");
	HX_MARK_MEMBER_NAME(m_fixtureCount,"m_fixtureCount");
	HX_MARK_MEMBER_NAME(m_controllerList,"m_controllerList");
	HX_MARK_MEMBER_NAME(m_controllerCount,"m_controllerCount");
	HX_MARK_MEMBER_NAME(m_jointList,"m_jointList");
	HX_MARK_MEMBER_NAME(m_contactList,"m_contactList");
	HX_MARK_MEMBER_NAME(m_mass,"m_mass");
	HX_MARK_MEMBER_NAME(m_invMass,"m_invMass");
	HX_MARK_MEMBER_NAME(m_I,"m_I");
	HX_MARK_MEMBER_NAME(m_invI,"m_invI");
	HX_MARK_MEMBER_NAME(m_inertiaScale,"m_inertiaScale");
	HX_MARK_MEMBER_NAME(m_linearDamping,"m_linearDamping");
	HX_MARK_MEMBER_NAME(m_angularDamping,"m_angularDamping");
	HX_MARK_MEMBER_NAME(m_sleepTime,"m_sleepTime");
	HX_MARK_MEMBER_NAME(m_userData,"m_userData");
	HX_MARK_MEMBER_NAME(groupID,"groupID");
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_END_CLASS();
}

void B2Body_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_flags,"m_flags");
	HX_VISIT_MEMBER_NAME(m_type,"m_type");
	HX_VISIT_MEMBER_NAME(m_islandIndex,"m_islandIndex");
	HX_VISIT_MEMBER_NAME(m_xf,"m_xf");
	HX_VISIT_MEMBER_NAME(m_sweep,"m_sweep");
	HX_VISIT_MEMBER_NAME(m_linearVelocity,"m_linearVelocity");
	HX_VISIT_MEMBER_NAME(m_angularVelocity,"m_angularVelocity");
	HX_VISIT_MEMBER_NAME(m_force,"m_force");
	HX_VISIT_MEMBER_NAME(m_torque,"m_torque");
	HX_VISIT_MEMBER_NAME(m_world,"m_world");
	HX_VISIT_MEMBER_NAME(m_prev,"m_prev");
	HX_VISIT_MEMBER_NAME(m_next,"m_next");
	HX_VISIT_MEMBER_NAME(m_fixtureList,"m_fixtureList");
	HX_VISIT_MEMBER_NAME(m_fixtureCount,"m_fixtureCount");
	HX_VISIT_MEMBER_NAME(m_controllerList,"m_controllerList");
	HX_VISIT_MEMBER_NAME(m_controllerCount,"m_controllerCount");
	HX_VISIT_MEMBER_NAME(m_jointList,"m_jointList");
	HX_VISIT_MEMBER_NAME(m_contactList,"m_contactList");
	HX_VISIT_MEMBER_NAME(m_mass,"m_mass");
	HX_VISIT_MEMBER_NAME(m_invMass,"m_invMass");
	HX_VISIT_MEMBER_NAME(m_I,"m_I");
	HX_VISIT_MEMBER_NAME(m_invI,"m_invI");
	HX_VISIT_MEMBER_NAME(m_inertiaScale,"m_inertiaScale");
	HX_VISIT_MEMBER_NAME(m_linearDamping,"m_linearDamping");
	HX_VISIT_MEMBER_NAME(m_angularDamping,"m_angularDamping");
	HX_VISIT_MEMBER_NAME(m_sleepTime,"m_sleepTime");
	HX_VISIT_MEMBER_NAME(m_userData,"m_userData");
	HX_VISIT_MEMBER_NAME(groupID,"groupID");
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(size,"size");
}

hx::Val B2Body_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m_I") ) { return hx::Val( m_I ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"m_xf") ) { return hx::Val( m_xf ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { return hx::Val( split_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_type") ) { return hx::Val( m_type ); }
		if (HX_FIELD_EQ(inName,"m_prev") ) { return hx::Val( m_prev ); }
		if (HX_FIELD_EQ(inName,"m_next") ) { return hx::Val( m_next ); }
		if (HX_FIELD_EQ(inName,"m_mass") ) { return hx::Val( m_mass ); }
		if (HX_FIELD_EQ(inName,"m_invI") ) { return hx::Val( m_invI ); }
		if (HX_FIELD_EQ(inName,"origin") ) { return hx::Val( origin ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getMass") ) { return hx::Val( getMass_dyn() ); }
		if (HX_FIELD_EQ(inName,"setType") ) { return hx::Val( setType_dyn() ); }
		if (HX_FIELD_EQ(inName,"getType") ) { return hx::Val( getType_dyn() ); }
		if (HX_FIELD_EQ(inName,"isAwake") ) { return hx::Val( isAwake_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNext") ) { return hx::Val( getNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"advance") ) { return hx::Val( advance_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_flags") ) { return hx::Val( m_flags ); }
		if (HX_FIELD_EQ(inName,"m_sweep") ) { return hx::Val( m_sweep ); }
		if (HX_FIELD_EQ(inName,"m_force") ) { return hx::Val( m_force ); }
		if (HX_FIELD_EQ(inName,"m_world") ) { return hx::Val( m_world ); }
		if (HX_FIELD_EQ(inName,"groupID") ) { return hx::Val( groupID ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getAngle") ) { return hx::Val( getAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAngle") ) { return hx::Val( setAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"isBullet") ) { return hx::Val( isBullet_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAwake") ) { return hx::Val( setAwake_dyn() ); }
		if (HX_FIELD_EQ(inName,"isActive") ) { return hx::Val( isActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"getWorld") ) { return hx::Val( getWorld_dyn() ); }
		if (HX_FIELD_EQ(inName,"isPaused") ) { return hx::Val( isPaused_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_torque") ) { return hx::Val( m_torque ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setBullet") ) { return hx::Val( setBullet_dyn() ); }
		if (HX_FIELD_EQ(inName,"setActive") ) { return hx::Val( setActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPaused") ) { return hx::Val( setPaused_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_invMass") ) { return hx::Val( m_invMass ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"applyForce") ) { return hx::Val( applyForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInertia") ) { return hx::Val( getInertia_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_userData") ) { return hx::Val( m_userData ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getPosition") ) { return hx::Val( getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyTorque") ) { return hx::Val( applyTorque_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMassData") ) { return hx::Val( getMassData_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMassData") ) { return hx::Val( setMassData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getUserData") ) { return hx::Val( getUserData_dyn() ); }
		if (HX_FIELD_EQ(inName,"setUserData") ) { return hx::Val( setUserData_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFriction") ) { return hx::Val( setFriction_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_jointList") ) { return hx::Val( m_jointList ); }
		if (HX_FIELD_EQ(inName,"m_sleepTime") ) { return hx::Val( m_sleepTime ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"connectEdges") ) { return hx::Val( connectEdges_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTransform") ) { return hx::Val( setTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTransform") ) { return hx::Val( getTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyImpulse") ) { return hx::Val( applyImpulse_dyn() ); }
		if (HX_FIELD_EQ(inName,"getJointList") ) { return hx::Val( getJointList_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createFixture") ) { return hx::Val( createFixture_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDefinition") ) { return hx::Val( getDefinition_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetMassData") ) { return hx::Val( resetMassData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getWorldPoint") ) { return hx::Val( getWorldPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLocalPoint") ) { return hx::Val( getLocalPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"setBounciness") ) { return hx::Val( setBounciness_dyn() ); }
		if (HX_FIELD_EQ(inName,"shouldCollide") ) { return hx::Val( shouldCollide_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_islandIndex") ) { return hx::Val( m_islandIndex ); }
		if (HX_FIELD_EQ(inName,"m_fixtureList") ) { return hx::Val( m_fixtureList ); }
		if (HX_FIELD_EQ(inName,"m_contactList") ) { return hx::Val( m_contactList ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createFixture2") ) { return hx::Val( createFixture2_dyn() ); }
		if (HX_FIELD_EQ(inName,"DestroyFixture") ) { return hx::Val( DestroyFixture_dyn() ); }
		if (HX_FIELD_EQ(inName,"getWorldCenter") ) { return hx::Val( getWorldCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLocalCenter") ) { return hx::Val( getLocalCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"getWorldVector") ) { return hx::Val( getWorldVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLocalVector") ) { return hx::Val( getLocalVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFixtureList") ) { return hx::Val( getFixtureList_dyn() ); }
		if (HX_FIELD_EQ(inName,"getContactList") ) { return hx::Val( getContactList_dyn() ); }
		if (HX_FIELD_EQ(inName,"isAlwaysActive") ) { return hx::Val( isAlwaysActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_fixtureCount") ) { return hx::Val( m_fixtureCount ); }
		if (HX_FIELD_EQ(inName,"m_inertiaScale") ) { return hx::Val( m_inertiaScale ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setPositionFast") ) { return hx::Val( setPositionFast_dyn() ); }
		if (HX_FIELD_EQ(inName,"isFixedRotation") ) { return hx::Val( isFixedRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAlwaysActive") ) { return hx::Val( setAlwaysActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_linearDamping") ) { return hx::Val( m_linearDamping ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getLinearDamping") ) { return hx::Val( getLinearDamping_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLinearDamping") ) { return hx::Val( setLinearDamping_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFixedRotation") ) { return hx::Val( setFixedRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"setIgnoreGravity") ) { return hx::Val( setIgnoreGravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_linearVelocity") ) { return hx::Val( m_linearVelocity ); }
		if (HX_FIELD_EQ(inName,"m_controllerList") ) { return hx::Val( m_controllerList ); }
		if (HX_FIELD_EQ(inName,"m_angularDamping") ) { return hx::Val( m_angularDamping ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setLinearVelocity") ) { return hx::Val( setLinearVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLinearVelocity") ) { return hx::Val( getLinearVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAngularDamping") ) { return hx::Val( getAngularDamping_dyn() ); }
		if (HX_FIELD_EQ(inName,"setAngularDamping") ) { return hx::Val( setAngularDamping_dyn() ); }
		if (HX_FIELD_EQ(inName,"isSleepingAllowed") ) { return hx::Val( isSleepingAllowed_dyn() ); }
		if (HX_FIELD_EQ(inName,"getControllerList") ) { return hx::Val( getControllerList_dyn() ); }
		if (HX_FIELD_EQ(inName,"isIgnoringGravity") ) { return hx::Val( isIgnoringGravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_angularVelocity") ) { return hx::Val( m_angularVelocity ); }
		if (HX_FIELD_EQ(inName,"m_controllerCount") ) { return hx::Val( m_controllerCount ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setAngularVelocity") ) { return hx::Val( setAngularVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAngularVelocity") ) { return hx::Val( getAngularVelocity_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSleepingAllowed") ) { return hx::Val( setSleepingAllowed_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setPositionAndAngle") ) { return hx::Val( setPositionAndAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"synchronizeFixtures") ) { return hx::Val( synchronizeFixtures_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"synchronizeTransform") ) { return hx::Val( synchronizeTransform_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"getLinearVelocityFromWorldPoint") ) { return hx::Val( getLinearVelocityFromWorldPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLinearVelocityFromLocalPoint") ) { return hx::Val( getLinearVelocityFromLocalPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2Body_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"s_xf1") ) { outValue = ( s_xf1 ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"e_awakeFlag") ) { outValue = ( e_awakeFlag ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"e_islandFlag") ) { outValue = ( e_islandFlag ); return true; }
		if (HX_FIELD_EQ(inName,"e_bulletFlag") ) { outValue = ( e_bulletFlag ); return true; }
		if (HX_FIELD_EQ(inName,"e_activeFlag") ) { outValue = ( e_activeFlag ); return true; }
		if (HX_FIELD_EQ(inName,"e_pausedFlag") ) { outValue = ( e_pausedFlag ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"b2_staticBody") ) { outValue = ( b2_staticBody ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"b2_dynamicBody") ) { outValue = ( b2_dynamicBody ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"e_allowSleepFlag") ) { outValue = ( e_allowSleepFlag ); return true; }
		if (HX_FIELD_EQ(inName,"b2_kinematicBody") ) { outValue = ( b2_kinematicBody ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"e_alwaysActiveFlag") ) { outValue = ( e_alwaysActiveFlag ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"e_fixedRotationFlag") ) { outValue = ( e_fixedRotationFlag ); return true; }
		if (HX_FIELD_EQ(inName,"e_ignoreGravityFlag") ) { outValue = ( e_ignoreGravityFlag ); return true; }
	}
	return false;
}

hx::Val B2Body_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m_I") ) { m_I=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"m_xf") ) { m_xf=inValue.Cast<  ::box2D::common::math::B2Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_type") ) { m_type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_prev") ) { m_prev=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_next") ) { m_next=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_mass") ) { m_mass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_invI") ) { m_invI=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_flags") ) { m_flags=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_sweep") ) { m_sweep=inValue.Cast<  ::box2D::common::math::B2Sweep >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_force") ) { m_force=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_world") ) { m_world=inValue.Cast<  ::box2D::dynamics::B2World >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groupID") ) { groupID=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_torque") ) { m_torque=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_invMass") ) { m_invMass=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_userData") ) { m_userData=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_jointList") ) { m_jointList=inValue.Cast<  ::box2D::dynamics::joints::B2JointEdge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_sleepTime") ) { m_sleepTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_islandIndex") ) { m_islandIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_fixtureList") ) { m_fixtureList=inValue.Cast<  ::box2D::dynamics::B2Fixture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_contactList") ) { m_contactList=inValue.Cast<  ::box2D::dynamics::contacts::B2ContactEdge >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_fixtureCount") ) { m_fixtureCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_inertiaScale") ) { m_inertiaScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_linearDamping") ) { m_linearDamping=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"m_linearVelocity") ) { m_linearVelocity=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_controllerList") ) { m_controllerList=inValue.Cast<  ::box2D::dynamics::controllers::B2ControllerEdge >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_angularDamping") ) { m_angularDamping=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"m_angularVelocity") ) { m_angularVelocity=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_controllerCount") ) { m_controllerCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2Body_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"s_xf1") ) { s_xf1=ioValue.Cast<  ::box2D::common::math::B2Transform >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"e_awakeFlag") ) { e_awakeFlag=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"e_islandFlag") ) { e_islandFlag=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"e_bulletFlag") ) { e_bulletFlag=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"e_activeFlag") ) { e_activeFlag=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"e_pausedFlag") ) { e_pausedFlag=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"b2_staticBody") ) { b2_staticBody=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"b2_dynamicBody") ) { b2_dynamicBody=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"e_allowSleepFlag") ) { e_allowSleepFlag=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"b2_kinematicBody") ) { b2_kinematicBody=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"e_alwaysActiveFlag") ) { e_alwaysActiveFlag=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"e_fixedRotationFlag") ) { e_fixedRotationFlag=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"e_ignoreGravityFlag") ) { e_ignoreGravityFlag=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void B2Body_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_flags","\xb5","\x02","\x17","\xb3"));
	outFields->push(HX_HCSTRING("m_type","\x0c","\x63","\x00","\x95"));
	outFields->push(HX_HCSTRING("m_islandIndex","\xeb","\xa5","\xcd","\x2a"));
	outFields->push(HX_HCSTRING("m_xf","\xc0","\xc0","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_sweep","\x5a","\xed","\x94","\x36"));
	outFields->push(HX_HCSTRING("m_linearVelocity","\xf4","\xc7","\x5d","\xb2"));
	outFields->push(HX_HCSTRING("m_angularVelocity","\x0d","\xcc","\xad","\x05"));
	outFields->push(HX_HCSTRING("m_force","\x59","\x89","\x1f","\xb5"));
	outFields->push(HX_HCSTRING("m_torque","\x9c","\x5f","\x82","\x5f"));
	outFields->push(HX_HCSTRING("m_world","\xc0","\x6d","\xef","\x7e"));
	outFields->push(HX_HCSTRING("m_prev","\x45","\x2f","\x56","\x92"));
	outFields->push(HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90"));
	outFields->push(HX_HCSTRING("m_fixtureList","\xb5","\x3a","\x31","\x0c"));
	outFields->push(HX_HCSTRING("m_fixtureCount","\x98","\xb2","\x3f","\x74"));
	outFields->push(HX_HCSTRING("m_controllerList","\xec","\x29","\xdb","\x41"));
	outFields->push(HX_HCSTRING("m_controllerCount","\x81","\x13","\x47","\x33"));
	outFields->push(HX_HCSTRING("m_jointList","\x36","\x15","\xc2","\x65"));
	outFields->push(HX_HCSTRING("m_contactList","\x0c","\xb1","\xe1","\x31"));
	outFields->push(HX_HCSTRING("m_mass","\x46","\xb1","\x4d","\x90"));
	outFields->push(HX_HCSTRING("m_invMass","\x73","\x55","\x89","\x38"));
	outFields->push(HX_HCSTRING("m_I","\xb7","\x08","\x53","\x00"));
	outFields->push(HX_HCSTRING("m_invI","\x8a","\xb6","\xb2","\x8d"));
	outFields->push(HX_HCSTRING("m_inertiaScale","\x82","\xd5","\xf6","\xb7"));
	outFields->push(HX_HCSTRING("m_linearDamping","\xcb","\x92","\x67","\x96"));
	outFields->push(HX_HCSTRING("m_angularDamping","\xd2","\x54","\xa1","\x95"));
	outFields->push(HX_HCSTRING("m_sleepTime","\x32","\xb3","\xca","\x9c"));
	outFields->push(HX_HCSTRING("m_userData","\x67","\x97","\x73","\x2c"));
	outFields->push(HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"));
	outFields->push(HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Body_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(B2Body_obj,m_flags),HX_HCSTRING("m_flags","\xb5","\x02","\x17","\xb3")},
	{hx::fsInt,(int)offsetof(B2Body_obj,m_type),HX_HCSTRING("m_type","\x0c","\x63","\x00","\x95")},
	{hx::fsInt,(int)offsetof(B2Body_obj,m_islandIndex),HX_HCSTRING("m_islandIndex","\xeb","\xa5","\xcd","\x2a")},
	{hx::fsObject /*::box2D::common::math::B2Transform*/ ,(int)offsetof(B2Body_obj,m_xf),HX_HCSTRING("m_xf","\xc0","\xc0","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Sweep*/ ,(int)offsetof(B2Body_obj,m_sweep),HX_HCSTRING("m_sweep","\x5a","\xed","\x94","\x36")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Body_obj,m_linearVelocity),HX_HCSTRING("m_linearVelocity","\xf4","\xc7","\x5d","\xb2")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_angularVelocity),HX_HCSTRING("m_angularVelocity","\x0d","\xcc","\xad","\x05")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Body_obj,m_force),HX_HCSTRING("m_force","\x59","\x89","\x1f","\xb5")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_torque),HX_HCSTRING("m_torque","\x9c","\x5f","\x82","\x5f")},
	{hx::fsObject /*::box2D::dynamics::B2World*/ ,(int)offsetof(B2Body_obj,m_world),HX_HCSTRING("m_world","\xc0","\x6d","\xef","\x7e")},
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2Body_obj,m_prev),HX_HCSTRING("m_prev","\x45","\x2f","\x56","\x92")},
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2Body_obj,m_next),HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90")},
	{hx::fsObject /*::box2D::dynamics::B2Fixture*/ ,(int)offsetof(B2Body_obj,m_fixtureList),HX_HCSTRING("m_fixtureList","\xb5","\x3a","\x31","\x0c")},
	{hx::fsInt,(int)offsetof(B2Body_obj,m_fixtureCount),HX_HCSTRING("m_fixtureCount","\x98","\xb2","\x3f","\x74")},
	{hx::fsObject /*::box2D::dynamics::controllers::B2ControllerEdge*/ ,(int)offsetof(B2Body_obj,m_controllerList),HX_HCSTRING("m_controllerList","\xec","\x29","\xdb","\x41")},
	{hx::fsInt,(int)offsetof(B2Body_obj,m_controllerCount),HX_HCSTRING("m_controllerCount","\x81","\x13","\x47","\x33")},
	{hx::fsObject /*::box2D::dynamics::joints::B2JointEdge*/ ,(int)offsetof(B2Body_obj,m_jointList),HX_HCSTRING("m_jointList","\x36","\x15","\xc2","\x65")},
	{hx::fsObject /*::box2D::dynamics::contacts::B2ContactEdge*/ ,(int)offsetof(B2Body_obj,m_contactList),HX_HCSTRING("m_contactList","\x0c","\xb1","\xe1","\x31")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_mass),HX_HCSTRING("m_mass","\x46","\xb1","\x4d","\x90")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_invMass),HX_HCSTRING("m_invMass","\x73","\x55","\x89","\x38")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_I),HX_HCSTRING("m_I","\xb7","\x08","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_invI),HX_HCSTRING("m_invI","\x8a","\xb6","\xb2","\x8d")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_inertiaScale),HX_HCSTRING("m_inertiaScale","\x82","\xd5","\xf6","\xb7")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_linearDamping),HX_HCSTRING("m_linearDamping","\xcb","\x92","\x67","\x96")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_angularDamping),HX_HCSTRING("m_angularDamping","\xd2","\x54","\xa1","\x95")},
	{hx::fsFloat,(int)offsetof(B2Body_obj,m_sleepTime),HX_HCSTRING("m_sleepTime","\x32","\xb3","\xca","\x9c")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(B2Body_obj,m_userData),HX_HCSTRING("m_userData","\x67","\x97","\x73","\x2c")},
	{hx::fsInt,(int)offsetof(B2Body_obj,groupID),HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Body_obj,origin),HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Body_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2Body_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Transform*/ ,(void *) &B2Body_obj::s_xf1,HX_HCSTRING("s_xf1","\x77","\x62","\x3b","\x76")},
	{hx::fsInt,(void *) &B2Body_obj::e_islandFlag,HX_HCSTRING("e_islandFlag","\xfb","\x71","\xe2","\x04")},
	{hx::fsInt,(void *) &B2Body_obj::e_awakeFlag,HX_HCSTRING("e_awakeFlag","\xb7","\x0b","\x30","\x97")},
	{hx::fsInt,(void *) &B2Body_obj::e_allowSleepFlag,HX_HCSTRING("e_allowSleepFlag","\x74","\x30","\x1b","\x0b")},
	{hx::fsInt,(void *) &B2Body_obj::e_bulletFlag,HX_HCSTRING("e_bulletFlag","\xe8","\x1f","\x5b","\xcf")},
	{hx::fsInt,(void *) &B2Body_obj::e_fixedRotationFlag,HX_HCSTRING("e_fixedRotationFlag","\x04","\x32","\x15","\x73")},
	{hx::fsInt,(void *) &B2Body_obj::e_activeFlag,HX_HCSTRING("e_activeFlag","\x6c","\xe1","\xf8","\xaf")},
	{hx::fsInt,(void *) &B2Body_obj::e_ignoreGravityFlag,HX_HCSTRING("e_ignoreGravityFlag","\x8e","\xbb","\x7d","\x0c")},
	{hx::fsInt,(void *) &B2Body_obj::e_alwaysActiveFlag,HX_HCSTRING("e_alwaysActiveFlag","\x9b","\x4c","\xcf","\xf4")},
	{hx::fsInt,(void *) &B2Body_obj::e_pausedFlag,HX_HCSTRING("e_pausedFlag","\x54","\x74","\x04","\xc8")},
	{hx::fsInt,(void *) &B2Body_obj::b2_staticBody,HX_HCSTRING("b2_staticBody","\xff","\xb3","\x64","\x00")},
	{hx::fsInt,(void *) &B2Body_obj::b2_kinematicBody,HX_HCSTRING("b2_kinematicBody","\x18","\x68","\x8c","\x70")},
	{hx::fsInt,(void *) &B2Body_obj::b2_dynamicBody,HX_HCSTRING("b2_dynamicBody","\x52","\x8d","\xa5","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2Body_obj_sMemberFields[] = {
	HX_HCSTRING("connectEdges","\x4c","\x31","\x5a","\x95"),
	HX_HCSTRING("createFixture","\x2d","\x94","\x64","\xda"),
	HX_HCSTRING("createFixture2","\x65","\x13","\x9d","\x3d"),
	HX_HCSTRING("DestroyFixture","\x0f","\x3e","\xe3","\x08"),
	HX_HCSTRING("setPositionAndAngle","\x07","\x17","\x84","\x84"),
	HX_HCSTRING("setPositionFast","\xa7","\x6a","\xc7","\x88"),
	HX_HCSTRING("setTransform","\x6a","\xed","\xe2","\x69"),
	HX_HCSTRING("getTransform","\xf6","\xc9","\xe9","\x54"),
	HX_HCSTRING("getPosition","\x5f","\x63","\xee","\xf0"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	HX_HCSTRING("getAngle","\x5d","\x53","\xb9","\x82"),
	HX_HCSTRING("setAngle","\xd1","\xac","\x16","\x31"),
	HX_HCSTRING("getWorldCenter","\xd1","\x0c","\xe7","\x58"),
	HX_HCSTRING("getLocalCenter","\xaa","\x18","\xb4","\x4a"),
	HX_HCSTRING("setLinearVelocity","\x64","\x84","\x5d","\x2f"),
	HX_HCSTRING("getLinearVelocity","\x58","\xac","\xef","\x0b"),
	HX_HCSTRING("setAngularVelocity","\x9d","\xf1","\x72","\xe8"),
	HX_HCSTRING("getAngularVelocity","\x29","\xbf","\xc3","\x0b"),
	HX_HCSTRING("getDefinition","\xc9","\x31","\x80","\x48"),
	HX_HCSTRING("applyForce","\x9d","\x2d","\xe6","\xaf"),
	HX_HCSTRING("applyTorque","\xd8","\x76","\x8b","\xd2"),
	HX_HCSTRING("applyImpulse","\xe7","\x9c","\x2a","\xad"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("getMass","\xaa","\xf0","\xd8","\x1a"),
	HX_HCSTRING("getInertia","\x04","\x37","\x1c","\xcc"),
	HX_HCSTRING("getMassData","\xf4","\x0f","\x6c","\xa1"),
	HX_HCSTRING("setMassData","\x00","\x17","\xd9","\xab"),
	HX_HCSTRING("resetMassData","\x2d","\x3a","\x17","\xac"),
	HX_HCSTRING("getWorldPoint","\xd4","\xc0","\xae","\x8e"),
	HX_HCSTRING("getWorldVector","\xbf","\x97","\x69","\xea"),
	HX_HCSTRING("getLocalPoint","\x1b","\xb3","\xf5","\x5a"),
	HX_HCSTRING("getLocalVector","\x98","\xa3","\x36","\xdc"),
	HX_HCSTRING("getLinearVelocityFromWorldPoint","\x20","\xe1","\xc1","\x8a"),
	HX_HCSTRING("getLinearVelocityFromLocalPoint","\x67","\xd3","\x08","\x57"),
	HX_HCSTRING("getLinearDamping","\xe7","\x46","\x13","\x53"),
	HX_HCSTRING("setLinearDamping","\x5b","\x34","\x55","\xa9"),
	HX_HCSTRING("getAngularDamping","\x36","\x39","\x33","\xef"),
	HX_HCSTRING("setAngularDamping","\x42","\x11","\xa1","\x12"),
	HX_HCSTRING("setType","\x7c","\x33","\x8d","\x12"),
	HX_HCSTRING("getType","\x70","\xa2","\x8b","\x1f"),
	HX_HCSTRING("setBullet","\x84","\x07","\x38","\x34"),
	HX_HCSTRING("isBullet","\xcc","\x2d","\xfa","\x2c"),
	HX_HCSTRING("setSleepingAllowed","\xbb","\xbe","\x73","\x30"),
	HX_HCSTRING("setAwake","\x03","\x0a","\x05","\x37"),
	HX_HCSTRING("isAwake","\xbb","\x44","\x56","\xc5"),
	HX_HCSTRING("setFixedRotation","\xd0","\x1d","\xc1","\x10"),
	HX_HCSTRING("isFixedRotation","\x88","\xd0","\x5f","\x27"),
	HX_HCSTRING("setActive","\x08","\xb7","\xed","\x75"),
	HX_HCSTRING("isActive","\x50","\xdd","\xaf","\x6e"),
	HX_HCSTRING("isSleepingAllowed","\x73","\x8f","\x2e","\x32"),
	HX_HCSTRING("getFixtureList","\xd1","\x6f","\xd0","\x7a"),
	HX_HCSTRING("getJointList","\x52","\x8b","\xc2","\x3a"),
	HX_HCSTRING("getControllerList","\x50","\x0e","\x6d","\x9b"),
	HX_HCSTRING("getContactList","\x28","\xe6","\x80","\xa0"),
	HX_HCSTRING("getNext","\xa9","\x34","\x85","\x1b"),
	HX_HCSTRING("getUserData","\xcb","\x58","\x1c","\x2b"),
	HX_HCSTRING("setUserData","\xd7","\x5f","\x89","\x35"),
	HX_HCSTRING("getWorld","\xdc","\xa5","\x3b","\x2e"),
	HX_HCSTRING("setFriction","\xbc","\x42","\x2a","\xc8"),
	HX_HCSTRING("setBounciness","\x65","\xfa","\x57","\x0a"),
	HX_HCSTRING("setPaused","\xf0","\xb5","\x2b","\x4f"),
	HX_HCSTRING("isPaused","\x38","\xdc","\xed","\x47"),
	HX_HCSTRING("setIgnoreGravity","\x5a","\x9a","\xef","\x55"),
	HX_HCSTRING("isIgnoringGravity","\x75","\xb6","\xc5","\xa8"),
	HX_HCSTRING("setAlwaysActive","\xb7","\x1c","\x01","\xb8"),
	HX_HCSTRING("isAlwaysActive","\xff","\x28","\xed","\x8f"),
	HX_HCSTRING("synchronizeFixtures","\xfa","\x8b","\xa9","\x75"),
	HX_HCSTRING("synchronizeTransform","\xfc","\xb7","\x64","\xb9"),
	HX_HCSTRING("shouldCollide","\x8b","\xeb","\xf7","\xdd"),
	HX_HCSTRING("advance","\x82","\x08","\x0c","\xef"),
	HX_HCSTRING("m_flags","\xb5","\x02","\x17","\xb3"),
	HX_HCSTRING("m_type","\x0c","\x63","\x00","\x95"),
	HX_HCSTRING("m_islandIndex","\xeb","\xa5","\xcd","\x2a"),
	HX_HCSTRING("m_xf","\xc0","\xc0","\x54","\x48"),
	HX_HCSTRING("m_sweep","\x5a","\xed","\x94","\x36"),
	HX_HCSTRING("m_linearVelocity","\xf4","\xc7","\x5d","\xb2"),
	HX_HCSTRING("m_angularVelocity","\x0d","\xcc","\xad","\x05"),
	HX_HCSTRING("m_force","\x59","\x89","\x1f","\xb5"),
	HX_HCSTRING("m_torque","\x9c","\x5f","\x82","\x5f"),
	HX_HCSTRING("m_world","\xc0","\x6d","\xef","\x7e"),
	HX_HCSTRING("m_prev","\x45","\x2f","\x56","\x92"),
	HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90"),
	HX_HCSTRING("m_fixtureList","\xb5","\x3a","\x31","\x0c"),
	HX_HCSTRING("m_fixtureCount","\x98","\xb2","\x3f","\x74"),
	HX_HCSTRING("m_controllerList","\xec","\x29","\xdb","\x41"),
	HX_HCSTRING("m_controllerCount","\x81","\x13","\x47","\x33"),
	HX_HCSTRING("m_jointList","\x36","\x15","\xc2","\x65"),
	HX_HCSTRING("m_contactList","\x0c","\xb1","\xe1","\x31"),
	HX_HCSTRING("m_mass","\x46","\xb1","\x4d","\x90"),
	HX_HCSTRING("m_invMass","\x73","\x55","\x89","\x38"),
	HX_HCSTRING("m_I","\xb7","\x08","\x53","\x00"),
	HX_HCSTRING("m_invI","\x8a","\xb6","\xb2","\x8d"),
	HX_HCSTRING("m_inertiaScale","\x82","\xd5","\xf6","\xb7"),
	HX_HCSTRING("m_linearDamping","\xcb","\x92","\x67","\x96"),
	HX_HCSTRING("m_angularDamping","\xd2","\x54","\xa1","\x95"),
	HX_HCSTRING("m_sleepTime","\x32","\xb3","\xca","\x9c"),
	HX_HCSTRING("m_userData","\x67","\x97","\x73","\x2c"),
	HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"),
	HX_HCSTRING("origin","\xe6","\x19","\x01","\x4b"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	::String(null()) };

static void B2Body_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Body_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2Body_obj::s_xf1,"s_xf1");
	HX_MARK_MEMBER_NAME(B2Body_obj::e_islandFlag,"e_islandFlag");
	HX_MARK_MEMBER_NAME(B2Body_obj::e_awakeFlag,"e_awakeFlag");
	HX_MARK_MEMBER_NAME(B2Body_obj::e_allowSleepFlag,"e_allowSleepFlag");
	HX_MARK_MEMBER_NAME(B2Body_obj::e_bulletFlag,"e_bulletFlag");
	HX_MARK_MEMBER_NAME(B2Body_obj::e_fixedRotationFlag,"e_fixedRotationFlag");
	HX_MARK_MEMBER_NAME(B2Body_obj::e_activeFlag,"e_activeFlag");
	HX_MARK_MEMBER_NAME(B2Body_obj::e_ignoreGravityFlag,"e_ignoreGravityFlag");
	HX_MARK_MEMBER_NAME(B2Body_obj::e_alwaysActiveFlag,"e_alwaysActiveFlag");
	HX_MARK_MEMBER_NAME(B2Body_obj::e_pausedFlag,"e_pausedFlag");
	HX_MARK_MEMBER_NAME(B2Body_obj::b2_staticBody,"b2_staticBody");
	HX_MARK_MEMBER_NAME(B2Body_obj::b2_kinematicBody,"b2_kinematicBody");
	HX_MARK_MEMBER_NAME(B2Body_obj::b2_dynamicBody,"b2_dynamicBody");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Body_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Body_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2Body_obj::s_xf1,"s_xf1");
	HX_VISIT_MEMBER_NAME(B2Body_obj::e_islandFlag,"e_islandFlag");
	HX_VISIT_MEMBER_NAME(B2Body_obj::e_awakeFlag,"e_awakeFlag");
	HX_VISIT_MEMBER_NAME(B2Body_obj::e_allowSleepFlag,"e_allowSleepFlag");
	HX_VISIT_MEMBER_NAME(B2Body_obj::e_bulletFlag,"e_bulletFlag");
	HX_VISIT_MEMBER_NAME(B2Body_obj::e_fixedRotationFlag,"e_fixedRotationFlag");
	HX_VISIT_MEMBER_NAME(B2Body_obj::e_activeFlag,"e_activeFlag");
	HX_VISIT_MEMBER_NAME(B2Body_obj::e_ignoreGravityFlag,"e_ignoreGravityFlag");
	HX_VISIT_MEMBER_NAME(B2Body_obj::e_alwaysActiveFlag,"e_alwaysActiveFlag");
	HX_VISIT_MEMBER_NAME(B2Body_obj::e_pausedFlag,"e_pausedFlag");
	HX_VISIT_MEMBER_NAME(B2Body_obj::b2_staticBody,"b2_staticBody");
	HX_VISIT_MEMBER_NAME(B2Body_obj::b2_kinematicBody,"b2_kinematicBody");
	HX_VISIT_MEMBER_NAME(B2Body_obj::b2_dynamicBody,"b2_dynamicBody");
};

#endif

hx::Class B2Body_obj::__mClass;

static ::String B2Body_obj_sStaticFields[] = {
	HX_HCSTRING("s_xf1","\x77","\x62","\x3b","\x76"),
	HX_HCSTRING("e_islandFlag","\xfb","\x71","\xe2","\x04"),
	HX_HCSTRING("e_awakeFlag","\xb7","\x0b","\x30","\x97"),
	HX_HCSTRING("e_allowSleepFlag","\x74","\x30","\x1b","\x0b"),
	HX_HCSTRING("e_bulletFlag","\xe8","\x1f","\x5b","\xcf"),
	HX_HCSTRING("e_fixedRotationFlag","\x04","\x32","\x15","\x73"),
	HX_HCSTRING("e_activeFlag","\x6c","\xe1","\xf8","\xaf"),
	HX_HCSTRING("e_ignoreGravityFlag","\x8e","\xbb","\x7d","\x0c"),
	HX_HCSTRING("e_alwaysActiveFlag","\x9b","\x4c","\xcf","\xf4"),
	HX_HCSTRING("e_pausedFlag","\x54","\x74","\x04","\xc8"),
	HX_HCSTRING("b2_staticBody","\xff","\xb3","\x64","\x00"),
	HX_HCSTRING("b2_kinematicBody","\x18","\x68","\x8c","\x70"),
	HX_HCSTRING("b2_dynamicBody","\x52","\x8d","\xa5","\xf2"),
	::String(null())
};

void B2Body_obj::__register()
{
	hx::Object *dummy = new B2Body_obj;
	B2Body_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.B2Body","\xbb","\xb9","\x71","\xdf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2Body_obj::__GetStatic;
	__mClass->mSetStaticField = &B2Body_obj::__SetStatic;
	__mClass->mMarkFunc = B2Body_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2Body_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Body_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Body_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Body_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Body_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Body_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2Body_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1370_boot)
HXDLIN(1370)		s_xf1 =  ::box2D::common::math::B2Transform_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1483_boot)
HXDLIN(1483)		e_islandFlag = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1484_boot)
HXDLIN(1484)		e_awakeFlag = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1485_boot)
HXDLIN(1485)		e_allowSleepFlag = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1486_boot)
HXDLIN(1486)		e_bulletFlag = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1487_boot)
HXDLIN(1487)		e_fixedRotationFlag = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1488_boot)
HXDLIN(1488)		e_activeFlag = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1490_boot)
HXDLIN(1490)		e_ignoreGravityFlag = (int)128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1491_boot)
HXDLIN(1491)		e_alwaysActiveFlag = (int)256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1492_boot)
HXDLIN(1492)		e_pausedFlag = (int)512;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1502_boot)
HXDLIN(1502)		b2_staticBody = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1503_boot)
HXDLIN(1503)		b2_kinematicBody = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cb5431ac0c6c1901_1504_boot)
HXDLIN(1504)		b2_dynamicBody = (int)2;
            	}
}

} // end namespace box2D
} // end namespace dynamics
