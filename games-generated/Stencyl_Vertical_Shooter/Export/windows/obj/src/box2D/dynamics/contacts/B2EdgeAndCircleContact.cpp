// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2ContactID
#include <box2D/collision/B2ContactID.h>
#endif
#ifndef INCLUDED_box2D_collision_B2Manifold
#include <box2D/collision/B2Manifold.h>
#endif
#ifndef INCLUDED_box2D_collision_B2ManifoldPoint
#include <box2D/collision/B2ManifoldPoint.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2CircleShape
#include <box2D/collision/shapes/B2CircleShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2EdgeShape
#include <box2D/collision/shapes/B2EdgeShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2EdgeAndCircleContact
#include <box2D/dynamics/contacts/B2EdgeAndCircleContact.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_796613836ecc4181_35_new,"box2D.dynamics.contacts.B2EdgeAndCircleContact","new",0x9fe64d0a,"box2D.dynamics.contacts.B2EdgeAndCircleContact.new","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",35,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_63_reset,"box2D.dynamics.contacts.B2EdgeAndCircleContact","reset",0x6d72c4f9,"box2D.dynamics.contacts.B2EdgeAndCircleContact.reset","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",63,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_71_evaluate,"box2D.dynamics.contacts.B2EdgeAndCircleContact","evaluate",0xe9e7bb6f,"box2D.dynamics.contacts.B2EdgeAndCircleContact.evaluate","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",71,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_88_b2CollideEdgeAndCircle,"box2D.dynamics.contacts.B2EdgeAndCircleContact","b2CollideEdgeAndCircle",0x0bac4d32,"box2D.dynamics.contacts.B2EdgeAndCircleContact.b2CollideEdgeAndCircle","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",88,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_289_multiplyTransformsInverse,"box2D.dynamics.contacts.B2EdgeAndCircleContact","multiplyTransformsInverse",0x0b3d324f,"box2D.dynamics.contacts.B2EdgeAndCircleContact.multiplyTransformsInverse","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",289,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_304_multiplyRotationsInverse,"box2D.dynamics.contacts.B2EdgeAndCircleContact","multiplyRotationsInverse",0x41551015,"box2D.dynamics.contacts.B2EdgeAndCircleContact.multiplyRotationsInverse","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",304,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_312_multiplyRotationVector,"box2D.dynamics.contacts.B2EdgeAndCircleContact","multiplyRotationVector",0x4703a77b,"box2D.dynamics.contacts.B2EdgeAndCircleContact.multiplyRotationVector","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",312,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_318_multiplyRotationVectorInverse,"box2D.dynamics.contacts.B2EdgeAndCircleContact","multiplyRotationVectorInverse",0x5e4e8175,"box2D.dynamics.contacts.B2EdgeAndCircleContact.multiplyRotationVectorInverse","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",318,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_324_multiplyTransformVector,"box2D.dynamics.contacts.B2EdgeAndCircleContact","multiplyTransformVector",0x7350e735,"box2D.dynamics.contacts.B2EdgeAndCircleContact.multiplyTransformVector","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",324,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_54_create,"box2D.dynamics.contacts.B2EdgeAndCircleContact","create",0xca90b092,"box2D.dynamics.contacts.B2EdgeAndCircleContact.create","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",54,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_58_destroy,"box2D.dynamics.contacts.B2EdgeAndCircleContact","destroy",0x872546a4,"box2D.dynamics.contacts.B2EdgeAndCircleContact.destroy","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",58,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_37_boot,"box2D.dynamics.contacts.B2EdgeAndCircleContact","boot",0x41b61c48,"box2D.dynamics.contacts.B2EdgeAndCircleContact.boot","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",37,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_38_boot,"box2D.dynamics.contacts.B2EdgeAndCircleContact","boot",0x41b61c48,"box2D.dynamics.contacts.B2EdgeAndCircleContact.boot","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",38,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_39_boot,"box2D.dynamics.contacts.B2EdgeAndCircleContact","boot",0x41b61c48,"box2D.dynamics.contacts.B2EdgeAndCircleContact.boot","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",39,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_40_boot,"box2D.dynamics.contacts.B2EdgeAndCircleContact","boot",0x41b61c48,"box2D.dynamics.contacts.B2EdgeAndCircleContact.boot","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",40,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_41_boot,"box2D.dynamics.contacts.B2EdgeAndCircleContact","boot",0x41b61c48,"box2D.dynamics.contacts.B2EdgeAndCircleContact.boot","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",41,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_42_boot,"box2D.dynamics.contacts.B2EdgeAndCircleContact","boot",0x41b61c48,"box2D.dynamics.contacts.B2EdgeAndCircleContact.boot","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",42,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_43_boot,"box2D.dynamics.contacts.B2EdgeAndCircleContact","boot",0x41b61c48,"box2D.dynamics.contacts.B2EdgeAndCircleContact.boot","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",43,0xeaa3b765)
HX_LOCAL_STACK_FRAME(_hx_pos_796613836ecc4181_45_boot,"box2D.dynamics.contacts.B2EdgeAndCircleContact","boot",0x41b61c48,"box2D.dynamics.contacts.B2EdgeAndCircleContact.boot","box2D/dynamics/contacts/B2EdgeAndCircleContact.hx",45,0xeaa3b765)
namespace box2D{
namespace dynamics{
namespace contacts{

void B2EdgeAndCircleContact_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_35_new)
HXDLIN(  35)		super::__construct();
            	}

Dynamic B2EdgeAndCircleContact_obj::__CreateEmpty() { return new B2EdgeAndCircleContact_obj; }

void *B2EdgeAndCircleContact_obj::_hx_vtable = 0;

Dynamic B2EdgeAndCircleContact_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2EdgeAndCircleContact_obj > _hx_result = new B2EdgeAndCircleContact_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2EdgeAndCircleContact_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5f46c30c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x5f46c30c;
	} else {
		return inClassId==(int)0x60073f8a;
	}
}

void B2EdgeAndCircleContact_obj::reset( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_63_reset)
HXDLIN(  63)		this->super::reset(fixtureA,fixtureB);
            	}


void B2EdgeAndCircleContact_obj::evaluate(){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_71_evaluate)
HXLINE(  72)		 ::box2D::dynamics::B2Body bA = this->m_fixtureA->getBody();
HXLINE(  73)		 ::box2D::dynamics::B2Body bB = this->m_fixtureB->getBody();
HXLINE(  77)		 ::box2D::collision::B2Manifold _hx_tmp = this->m_manifold;
HXLINE(  78)		 ::box2D::collision::shapes::B2EdgeShape _hx_tmp1 = hx::TCast<  ::box2D::collision::shapes::B2EdgeShape >::cast(this->m_fixtureA->getShape());
HXDLIN(  78)		 ::box2D::common::math::B2Transform bA1 = bA->m_xf;
HXLINE(  75)		this->b2CollideEdgeAndCircle(_hx_tmp,_hx_tmp1,bA1,hx::TCast<  ::box2D::collision::shapes::B2CircleShape >::cast(this->m_fixtureB->getShape()),bB->m_xf);
            	}


void B2EdgeAndCircleContact_obj::b2CollideEdgeAndCircle( ::box2D::collision::B2Manifold manifold, ::box2D::collision::shapes::B2EdgeShape edge, ::box2D::common::math::B2Transform xf1, ::box2D::collision::shapes::B2CircleShape circle, ::box2D::common::math::B2Transform xf2){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_88_b2CollideEdgeAndCircle)
HXLINE(  89)		manifold->m_pointCount = (int)0;
HXLINE(  93)		this->multiplyTransformVector(xf2,circle->m_p,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1);
HXLINE(  94)		{
HXLINE(  94)			 ::box2D::common::math::B2Vec2 _this = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q;
HXDLIN(  94)			 ::box2D::common::math::B2Vec2 v = ::box2D::common::math::B2Math_obj::mulXT(xf1,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1,null());
HXDLIN(  94)			_this->x = v->x;
HXDLIN(  94)			_this->y = v->y;
            		}
HXLINE(  98)		this->m_v0 = edge->m_v0;
HXLINE(  99)		this->m_v1 = edge->m_v1;
HXLINE( 100)		this->m_v2 = edge->m_v2;
HXLINE( 101)		this->m_v3 = edge->m_v3;
HXLINE( 103)		{
HXLINE( 103)			 ::box2D::common::math::B2Vec2 _this1 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::e;
HXDLIN( 103)			_this1->x = (this->m_v2->x - this->m_v1->x);
HXDLIN( 103)			_this1->y = (this->m_v2->y - this->m_v1->y);
            		}
HXLINE( 107)		{
HXLINE( 107)			 ::box2D::common::math::B2Vec2 _this2 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1;
HXDLIN( 107)			_this2->x = (this->m_v2->x - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->x);
HXDLIN( 107)			_this2->y = (this->m_v2->y - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->y);
            		}
HXLINE( 108)		Float u = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::e,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1);
HXLINE( 110)		{
HXLINE( 110)			 ::box2D::common::math::B2Vec2 _this3 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1;
HXDLIN( 110)			_this3->x = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->x - this->m_v1->x);
HXDLIN( 110)			_this3->y = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->y - this->m_v1->y);
            		}
HXLINE( 111)		Float v1 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::e,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1);
HXLINE( 114)		Float radius = (edge->m_radius + circle->m_radius);
HXLINE( 117)		if ((v1 <= ((Float)0.0))) {
HXLINE( 122)			{
HXLINE( 122)				 ::box2D::common::math::B2Vec2 _this4 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p;
HXDLIN( 122)				 ::box2D::common::math::B2Vec2 v2 = this->m_v1;
HXDLIN( 122)				_this4->x = v2->x;
HXDLIN( 122)				_this4->y = v2->y;
            			}
HXLINE( 123)			{
HXLINE( 123)				 ::box2D::common::math::B2Vec2 _this5 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1;
HXDLIN( 123)				_this5->x = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->x - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p->x);
HXDLIN( 123)				_this5->y = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->y - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p->y);
            			}
HXLINE( 124)			Float dd = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1);
HXLINE( 126)			if ((dd > (radius * radius))) {
HXLINE( 128)				return;
            			}
HXLINE( 132)			if (edge->m_hasVertex0) {
HXLINE( 138)				{
HXLINE( 138)					 ::box2D::common::math::B2Vec2 _this6 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1;
HXDLIN( 138)					_this6->x = (this->m_v1->x - this->m_v0->x);
HXDLIN( 138)					_this6->y = (this->m_v1->y - this->m_v0->y);
            				}
HXLINE( 139)				{
HXLINE( 139)					 ::box2D::common::math::B2Vec2 _this7 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp2;
HXDLIN( 139)					_this7->x = (this->m_v1->x - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->x);
HXDLIN( 139)					_this7->y = (this->m_v1->y - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->y);
            				}
HXLINE( 140)				Float u1 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp2);
HXLINE( 143)				if ((u1 > ((Float)0.0))) {
HXLINE( 145)					return;
            				}
            			}
HXLINE( 159)			manifold->m_pointCount = (int)1;
HXLINE( 160)			manifold->m_type = (int)1;
HXLINE( 161)			{
HXLINE( 161)				 ::box2D::common::math::B2Vec2 _this8 = manifold->m_localPlaneNormal;
HXDLIN( 161)				_this8->x = ((Float)0.0);
HXDLIN( 161)				_this8->y = ((Float)0.0);
            			}
HXLINE( 162)			{
HXLINE( 162)				 ::box2D::common::math::B2Vec2 _this9 = manifold->m_localPoint;
HXDLIN( 162)				 ::box2D::common::math::B2Vec2 v3 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p;
HXDLIN( 162)				_this9->x = v3->x;
HXDLIN( 162)				_this9->y = v3->y;
            			}
HXLINE( 164)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->set_key((int)0);
HXLINE( 165)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->indexA = (int)0;
HXLINE( 166)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->indexB = (int)0;
HXLINE( 167)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->typeA = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 168)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->typeB = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 169)			{
HXLINE( 169)				 ::box2D::common::math::B2Vec2 _this10 = manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_localPoint;
HXDLIN( 169)				 ::box2D::common::math::B2Vec2 v4 = circle->m_p;
HXDLIN( 169)				_this10->x = v4->x;
HXDLIN( 169)				_this10->y = v4->y;
            			}
HXLINE( 171)			return;
            		}
HXLINE( 175)		if ((u <= ((Float)0.0))) {
HXLINE( 180)			{
HXLINE( 180)				 ::box2D::common::math::B2Vec2 _this11 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p;
HXDLIN( 180)				 ::box2D::common::math::B2Vec2 v5 = this->m_v2;
HXDLIN( 180)				_this11->x = v5->x;
HXDLIN( 180)				_this11->y = v5->y;
            			}
HXLINE( 181)			{
HXLINE( 181)				 ::box2D::common::math::B2Vec2 _this12 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1;
HXDLIN( 181)				_this12->x = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->x - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p->x);
HXDLIN( 181)				_this12->y = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->y - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p->y);
            			}
HXLINE( 182)			Float dd1 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1);
HXLINE( 184)			if ((dd1 > (radius * radius))) {
HXLINE( 186)				return;
            			}
HXLINE( 190)			if (edge->m_hasVertex3) {
HXLINE( 197)				{
HXLINE( 197)					 ::box2D::common::math::B2Vec2 _this13 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1;
HXDLIN( 197)					_this13->x = (this->m_v3->x - this->m_v2->x);
HXDLIN( 197)					_this13->y = (this->m_v3->y - this->m_v2->y);
            				}
HXLINE( 198)				{
HXLINE( 198)					 ::box2D::common::math::B2Vec2 _this14 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp2;
HXDLIN( 198)					_this14->x = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->x - this->m_v2->x);
HXDLIN( 198)					_this14->y = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->y - this->m_v2->y);
            				}
HXLINE( 199)				Float v21 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp2);
HXLINE( 202)				if ((v21 > ((Float)0.0))) {
HXLINE( 204)					return;
            				}
            			}
HXLINE( 219)			manifold->m_pointCount = (int)1;
HXLINE( 220)			manifold->m_type = (int)1;
HXLINE( 221)			{
HXLINE( 221)				 ::box2D::common::math::B2Vec2 _this15 = manifold->m_localPlaneNormal;
HXDLIN( 221)				_this15->x = ((Float)0.0);
HXDLIN( 221)				_this15->y = ((Float)0.0);
            			}
HXLINE( 222)			{
HXLINE( 222)				 ::box2D::common::math::B2Vec2 _this16 = manifold->m_localPoint;
HXDLIN( 222)				 ::box2D::common::math::B2Vec2 v6 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p;
HXDLIN( 222)				_this16->x = v6->x;
HXDLIN( 222)				_this16->y = v6->y;
            			}
HXLINE( 224)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->set_key((int)0);
HXLINE( 225)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->indexA = (int)1;
HXLINE( 226)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->indexB = (int)0;
HXLINE( 227)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->typeA = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 228)			manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->typeB = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 229)			{
HXLINE( 229)				 ::box2D::common::math::B2Vec2 _this17 = manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_localPoint;
HXDLIN( 229)				 ::box2D::common::math::B2Vec2 v7 = circle->m_p;
HXDLIN( 229)				_this17->x = v7->x;
HXDLIN( 229)				_this17->y = v7->y;
            			}
HXLINE( 231)			return;
            		}
HXLINE( 237)		Float den = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::e,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::e);
HXLINE( 238)		::box2D::common::B2Settings_obj::b2Assert((den > ((Float)0.0)));
HXLINE( 243)		Float _hx_tmp = (this->m_v1->x * u);
HXDLIN( 243)		Float _hx_tmp1 = (_hx_tmp + (this->m_v2->x * v1));
HXDLIN( 243)		::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p->x = (_hx_tmp1 * ((Float)((Float)1.0) / (Float)den));
HXLINE( 244)		Float _hx_tmp2 = (this->m_v1->y * u);
HXDLIN( 244)		Float _hx_tmp3 = (_hx_tmp2 + (this->m_v2->y * v1));
HXDLIN( 244)		::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p->y = (_hx_tmp3 * ((Float)((Float)1.0) / (Float)den));
HXLINE( 245)		::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1->x = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->x - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p->x);
HXLINE( 246)		::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1->y = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->y - ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::p->y);
HXLINE( 247)		Float dd2 = ::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1);
HXLINE( 249)		if ((dd2 > (radius * radius))) {
HXLINE( 251)			return;
            		}
HXLINE( 255)		{
HXLINE( 255)			 ::box2D::common::math::B2Vec2 _this18 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1;
HXDLIN( 255)			Float y_ = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::e->x;
HXDLIN( 255)			_this18->x = -(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::e->y);
HXDLIN( 255)			_this18->y = y_;
            		}
HXLINE( 256)		{
HXLINE( 256)			 ::box2D::common::math::B2Vec2 _this19 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp2;
HXDLIN( 256)			_this19->x = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->x - this->m_v1->x);
HXDLIN( 256)			_this19->y = (::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::q->y - this->m_v1->y);
            		}
HXLINE( 258)		if ((::box2D::common::math::B2Math_obj::dot(::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp2) < ((Float)0.0))) {
HXLINE( 260)			 ::box2D::common::math::B2Vec2 _this20 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1;
HXDLIN( 260)			_this20->x = -(_this20->x);
HXDLIN( 260)			_this20->y = -(_this20->y);
            		}
HXLINE( 263)		::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1->normalize();
HXLINE( 275)		manifold->m_pointCount = (int)1;
HXLINE( 276)		manifold->m_type = (int)2;
HXLINE( 277)		{
HXLINE( 277)			 ::box2D::common::math::B2Vec2 _this21 = manifold->m_localPlaneNormal;
HXDLIN( 277)			 ::box2D::common::math::B2Vec2 v8 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp1;
HXDLIN( 277)			_this21->x = v8->x;
HXDLIN( 277)			_this21->y = v8->y;
            		}
HXLINE( 278)		{
HXLINE( 278)			 ::box2D::common::math::B2Vec2 _this22 = manifold->m_localPoint;
HXDLIN( 278)			 ::box2D::common::math::B2Vec2 v9 = this->m_v1;
HXDLIN( 278)			_this22->x = v9->x;
HXDLIN( 278)			_this22->y = v9->y;
            		}
HXLINE( 280)		manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->set_key((int)0);
HXLINE( 281)		manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->indexA = (int)0;
HXLINE( 282)		manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->indexB = (int)0;
HXLINE( 283)		manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->typeA = ::box2D::collision::B2ContactID_obj::FACE;
HXLINE( 284)		manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_id->typeB = ::box2D::collision::B2ContactID_obj::VERTEX;
HXLINE( 285)		{
HXLINE( 285)			 ::box2D::common::math::B2Vec2 _this23 = manifold->m_points->__get((int)0).StaticCast<  ::box2D::collision::B2ManifoldPoint >()->m_localPoint;
HXDLIN( 285)			 ::box2D::common::math::B2Vec2 v10 = circle->m_p;
HXDLIN( 285)			_this23->x = v10->x;
HXDLIN( 285)			_this23->y = v10->y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(B2EdgeAndCircleContact_obj,b2CollideEdgeAndCircle,(void))

void B2EdgeAndCircleContact_obj::multiplyTransformsInverse( ::box2D::common::math::B2Transform A, ::box2D::common::math::B2Transform B, ::box2D::common::math::B2Transform out){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_289_multiplyTransformsInverse)
HXLINE( 291)		this->multiplyRotationsInverse(A->R,B->R,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::mat);
HXLINE( 294)		{
HXLINE( 294)			 ::box2D::common::math::B2Vec2 _this = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp2;
HXDLIN( 294)			 ::box2D::common::math::B2Vec2 v = B->position;
HXDLIN( 294)			_this->x = v->x;
HXDLIN( 294)			_this->y = v->y;
            		}
HXLINE( 295)		::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp2->subtract(A->position);
HXLINE( 296)		this->multiplyRotationVectorInverse(A->R,::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::temp2,out->position);
HXLINE( 298)		{
HXLINE( 298)			 ::box2D::common::math::B2Vec2 _this1 = out->R->col1;
HXDLIN( 298)			 ::box2D::common::math::B2Vec2 v1 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::mat->col1;
HXDLIN( 298)			_this1->x = v1->x;
HXDLIN( 298)			_this1->y = v1->y;
            		}
HXLINE( 299)		{
HXLINE( 299)			 ::box2D::common::math::B2Vec2 _this2 = out->R->col2;
HXDLIN( 299)			 ::box2D::common::math::B2Vec2 v2 = ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::mat->col2;
HXDLIN( 299)			_this2->x = v2->x;
HXDLIN( 299)			_this2->y = v2->y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2EdgeAndCircleContact_obj,multiplyTransformsInverse,(void))

void B2EdgeAndCircleContact_obj::multiplyRotationsInverse( ::box2D::common::math::B2Mat22 q, ::box2D::common::math::B2Mat22 r, ::box2D::common::math::B2Mat22 out){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_304_multiplyRotationsInverse)
HXLINE( 305)		Float _hx_tmp = (q->col1->x * r->col1->x);
HXDLIN( 305)		out->col1->x = (_hx_tmp + (q->col1->y * r->col1->y));
HXLINE( 306)		Float _hx_tmp1 = (q->col2->x * r->col1->x);
HXDLIN( 306)		out->col1->y = (_hx_tmp1 + (q->col2->y * r->col1->y));
HXLINE( 307)		Float _hx_tmp2 = (q->col1->x * r->col2->x);
HXDLIN( 307)		out->col2->x = (_hx_tmp2 + (q->col1->y * r->col2->y));
HXLINE( 308)		Float _hx_tmp3 = (q->col2->x * r->col2->x);
HXDLIN( 308)		out->col2->y = (_hx_tmp3 + (q->col2->y * r->col2->y));
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2EdgeAndCircleContact_obj,multiplyRotationsInverse,(void))

void B2EdgeAndCircleContact_obj::multiplyRotationVector( ::box2D::common::math::B2Mat22 q, ::box2D::common::math::B2Vec2 v, ::box2D::common::math::B2Vec2 out){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_312_multiplyRotationVector)
HXLINE( 313)		Float _hx_tmp = (q->col1->x * v->x);
HXDLIN( 313)		out->x = (_hx_tmp + (q->col2->x * v->y));
HXLINE( 314)		Float _hx_tmp1 = (q->col1->y * v->x);
HXDLIN( 314)		out->y = (_hx_tmp1 + (q->col2->y * v->y));
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2EdgeAndCircleContact_obj,multiplyRotationVector,(void))

void B2EdgeAndCircleContact_obj::multiplyRotationVectorInverse( ::box2D::common::math::B2Mat22 q, ::box2D::common::math::B2Vec2 v, ::box2D::common::math::B2Vec2 out){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_318_multiplyRotationVectorInverse)
HXLINE( 319)		Float _hx_tmp = (q->col1->x * v->x);
HXDLIN( 319)		out->x = (_hx_tmp + (q->col1->y * v->y));
HXLINE( 320)		Float _hx_tmp1 = (q->col2->x * v->x);
HXDLIN( 320)		out->y = (_hx_tmp1 + (q->col2->y * v->y));
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2EdgeAndCircleContact_obj,multiplyRotationVectorInverse,(void))

void B2EdgeAndCircleContact_obj::multiplyTransformVector( ::box2D::common::math::B2Transform T, ::box2D::common::math::B2Vec2 v, ::box2D::common::math::B2Vec2 out){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_324_multiplyTransformVector)
HXLINE( 325)		Float _hx_tmp = (T->R->col1->x * v->x);
HXDLIN( 325)		out->x = ((_hx_tmp + (T->R->col2->x * v->y)) + T->position->x);
HXLINE( 326)		Float _hx_tmp1 = (T->R->col1->y * v->x);
HXDLIN( 326)		out->y = ((_hx_tmp1 + (T->R->col2->y * v->y)) + T->position->y);
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2EdgeAndCircleContact_obj,multiplyTransformVector,(void))

 ::box2D::common::math::B2Transform B2EdgeAndCircleContact_obj::m_xf;

 ::box2D::common::math::B2Vec2 B2EdgeAndCircleContact_obj::q;

 ::box2D::common::math::B2Vec2 B2EdgeAndCircleContact_obj::p;

 ::box2D::common::math::B2Vec2 B2EdgeAndCircleContact_obj::e;

 ::box2D::common::math::B2Vec2 B2EdgeAndCircleContact_obj::temp1;

 ::box2D::common::math::B2Vec2 B2EdgeAndCircleContact_obj::temp2;

 ::box2D::common::math::B2Vec2 B2EdgeAndCircleContact_obj::m_centroidB;

 ::box2D::common::math::B2Mat22 B2EdgeAndCircleContact_obj::mat;

 ::box2D::dynamics::contacts::B2Contact B2EdgeAndCircleContact_obj::create( ::Dynamic allocator){
            	HX_GC_STACKFRAME(&_hx_pos_796613836ecc4181_54_create)
HXDLIN(  54)		return  ::box2D::dynamics::contacts::B2EdgeAndCircleContact_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(B2EdgeAndCircleContact_obj,create,return )

void B2EdgeAndCircleContact_obj::destroy( ::box2D::dynamics::contacts::B2Contact contact, ::Dynamic allocator){
            	HX_STACKFRAME(&_hx_pos_796613836ecc4181_58_destroy)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(B2EdgeAndCircleContact_obj,destroy,(void))


hx::ObjectPtr< B2EdgeAndCircleContact_obj > B2EdgeAndCircleContact_obj::__new() {
	hx::ObjectPtr< B2EdgeAndCircleContact_obj > __this = new B2EdgeAndCircleContact_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2EdgeAndCircleContact_obj > B2EdgeAndCircleContact_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2EdgeAndCircleContact_obj *__this = (B2EdgeAndCircleContact_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2EdgeAndCircleContact_obj), true, "box2D.dynamics.contacts.B2EdgeAndCircleContact"));
	*(void **)__this = B2EdgeAndCircleContact_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2EdgeAndCircleContact_obj::B2EdgeAndCircleContact_obj()
{
}

void B2EdgeAndCircleContact_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2EdgeAndCircleContact);
	HX_MARK_MEMBER_NAME(m_v0,"m_v0");
	HX_MARK_MEMBER_NAME(m_v1,"m_v1");
	HX_MARK_MEMBER_NAME(m_v2,"m_v2");
	HX_MARK_MEMBER_NAME(m_v3,"m_v3");
	 ::box2D::dynamics::contacts::B2Contact_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void B2EdgeAndCircleContact_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_v0,"m_v0");
	HX_VISIT_MEMBER_NAME(m_v1,"m_v1");
	HX_VISIT_MEMBER_NAME(m_v2,"m_v2");
	HX_VISIT_MEMBER_NAME(m_v3,"m_v3");
	 ::box2D::dynamics::contacts::B2Contact_obj::__Visit(HX_VISIT_ARG);
}

hx::Val B2EdgeAndCircleContact_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"m_v0") ) { return hx::Val( m_v0 ); }
		if (HX_FIELD_EQ(inName,"m_v1") ) { return hx::Val( m_v1 ); }
		if (HX_FIELD_EQ(inName,"m_v2") ) { return hx::Val( m_v2 ); }
		if (HX_FIELD_EQ(inName,"m_v3") ) { return hx::Val( m_v3 ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"evaluate") ) { return hx::Val( evaluate_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"b2CollideEdgeAndCircle") ) { return hx::Val( b2CollideEdgeAndCircle_dyn() ); }
		if (HX_FIELD_EQ(inName,"multiplyRotationVector") ) { return hx::Val( multiplyRotationVector_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"multiplyTransformVector") ) { return hx::Val( multiplyTransformVector_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"multiplyRotationsInverse") ) { return hx::Val( multiplyRotationsInverse_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"multiplyTransformsInverse") ) { return hx::Val( multiplyTransformsInverse_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"multiplyRotationVectorInverse") ) { return hx::Val( multiplyRotationVectorInverse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2EdgeAndCircleContact_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { outValue = ( q ); return true; }
		if (HX_FIELD_EQ(inName,"p") ) { outValue = ( p ); return true; }
		if (HX_FIELD_EQ(inName,"e") ) { outValue = ( e ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mat") ) { outValue = ( mat ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"m_xf") ) { outValue = ( m_xf ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"temp1") ) { outValue = ( temp1 ); return true; }
		if (HX_FIELD_EQ(inName,"temp2") ) { outValue = ( temp2 ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { outValue = destroy_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_centroidB") ) { outValue = ( m_centroidB ); return true; }
	}
	return false;
}

hx::Val B2EdgeAndCircleContact_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"m_v0") ) { m_v0=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v1") ) { m_v1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v2") ) { m_v2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_v3") ) { m_v3=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2EdgeAndCircleContact_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { q=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"p") ) { p=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"e") ) { e=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mat") ) { mat=ioValue.Cast<  ::box2D::common::math::B2Mat22 >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"m_xf") ) { m_xf=ioValue.Cast<  ::box2D::common::math::B2Transform >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"temp1") ) { temp1=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		if (HX_FIELD_EQ(inName,"temp2") ) { temp2=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_centroidB") ) { m_centroidB=ioValue.Cast<  ::box2D::common::math::B2Vec2 >(); return true; }
	}
	return false;
}

void B2EdgeAndCircleContact_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_v0","\xcc","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2EdgeAndCircleContact_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeAndCircleContact_obj,m_v0),HX_HCSTRING("m_v0","\xcc","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeAndCircleContact_obj,m_v1),HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeAndCircleContact_obj,m_v2),HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2EdgeAndCircleContact_obj,m_v3),HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2EdgeAndCircleContact_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Transform*/ ,(void *) &B2EdgeAndCircleContact_obj::m_xf,HX_HCSTRING("m_xf","\xc0","\xc0","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2EdgeAndCircleContact_obj::q,HX_HCSTRING("q","\x71","\x00","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2EdgeAndCircleContact_obj::p,HX_HCSTRING("p","\x70","\x00","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2EdgeAndCircleContact_obj::e,HX_HCSTRING("e","\x65","\x00","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2EdgeAndCircleContact_obj::temp1,HX_HCSTRING("temp1","\x9d","\xee","\x90","\x0d")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2EdgeAndCircleContact_obj::temp2,HX_HCSTRING("temp2","\x9e","\xee","\x90","\x0d")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(void *) &B2EdgeAndCircleContact_obj::m_centroidB,HX_HCSTRING("m_centroidB","\x70","\x7e","\x94","\x8b")},
	{hx::fsObject /*::box2D::common::math::B2Mat22*/ ,(void *) &B2EdgeAndCircleContact_obj::mat,HX_HCSTRING("mat","\xa0","\x0a","\x53","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2EdgeAndCircleContact_obj_sMemberFields[] = {
	HX_HCSTRING("m_v0","\xcc","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v1","\xcd","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v2","\xce","\xbe","\x54","\x48"),
	HX_HCSTRING("m_v3","\xcf","\xbe","\x54","\x48"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("evaluate","\x59","\x60","\x50","\x01"),
	HX_HCSTRING("b2CollideEdgeAndCircle","\x9c","\xf7","\x6b","\xa9"),
	HX_HCSTRING("multiplyTransformsInverse","\x25","\x66","\x34","\xf3"),
	HX_HCSTRING("multiplyRotationsInverse","\xff","\xa8","\x23","\x8e"),
	HX_HCSTRING("multiplyRotationVector","\xe5","\x51","\xc3","\xe4"),
	HX_HCSTRING("multiplyRotationVectorInverse","\x4b","\x58","\x1b","\xb5"),
	HX_HCSTRING("multiplyTransformVector","\x8b","\x59","\x46","\xdd"),
	::String(null()) };

static void B2EdgeAndCircleContact_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2EdgeAndCircleContact_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2EdgeAndCircleContact_obj::m_xf,"m_xf");
	HX_MARK_MEMBER_NAME(B2EdgeAndCircleContact_obj::q,"q");
	HX_MARK_MEMBER_NAME(B2EdgeAndCircleContact_obj::p,"p");
	HX_MARK_MEMBER_NAME(B2EdgeAndCircleContact_obj::e,"e");
	HX_MARK_MEMBER_NAME(B2EdgeAndCircleContact_obj::temp1,"temp1");
	HX_MARK_MEMBER_NAME(B2EdgeAndCircleContact_obj::temp2,"temp2");
	HX_MARK_MEMBER_NAME(B2EdgeAndCircleContact_obj::m_centroidB,"m_centroidB");
	HX_MARK_MEMBER_NAME(B2EdgeAndCircleContact_obj::mat,"mat");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2EdgeAndCircleContact_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2EdgeAndCircleContact_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2EdgeAndCircleContact_obj::m_xf,"m_xf");
	HX_VISIT_MEMBER_NAME(B2EdgeAndCircleContact_obj::q,"q");
	HX_VISIT_MEMBER_NAME(B2EdgeAndCircleContact_obj::p,"p");
	HX_VISIT_MEMBER_NAME(B2EdgeAndCircleContact_obj::e,"e");
	HX_VISIT_MEMBER_NAME(B2EdgeAndCircleContact_obj::temp1,"temp1");
	HX_VISIT_MEMBER_NAME(B2EdgeAndCircleContact_obj::temp2,"temp2");
	HX_VISIT_MEMBER_NAME(B2EdgeAndCircleContact_obj::m_centroidB,"m_centroidB");
	HX_VISIT_MEMBER_NAME(B2EdgeAndCircleContact_obj::mat,"mat");
};

#endif

hx::Class B2EdgeAndCircleContact_obj::__mClass;

static ::String B2EdgeAndCircleContact_obj_sStaticFields[] = {
	HX_HCSTRING("m_xf","\xc0","\xc0","\x54","\x48"),
	HX_HCSTRING("q","\x71","\x00","\x00","\x00"),
	HX_HCSTRING("p","\x70","\x00","\x00","\x00"),
	HX_HCSTRING("e","\x65","\x00","\x00","\x00"),
	HX_HCSTRING("temp1","\x9d","\xee","\x90","\x0d"),
	HX_HCSTRING("temp2","\x9e","\xee","\x90","\x0d"),
	HX_HCSTRING("m_centroidB","\x70","\x7e","\x94","\x8b"),
	HX_HCSTRING("mat","\xa0","\x0a","\x53","\x00"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null())
};

void B2EdgeAndCircleContact_obj::__register()
{
	hx::Object *dummy = new B2EdgeAndCircleContact_obj;
	B2EdgeAndCircleContact_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.contacts.B2EdgeAndCircleContact","\x18","\xc0","\x2c","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2EdgeAndCircleContact_obj::__GetStatic;
	__mClass->mSetStaticField = &B2EdgeAndCircleContact_obj::__SetStatic;
	__mClass->mMarkFunc = B2EdgeAndCircleContact_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2EdgeAndCircleContact_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2EdgeAndCircleContact_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2EdgeAndCircleContact_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2EdgeAndCircleContact_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2EdgeAndCircleContact_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2EdgeAndCircleContact_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2EdgeAndCircleContact_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_796613836ecc4181_37_boot)
HXDLIN(  37)		m_xf =  ::box2D::common::math::B2Transform_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_796613836ecc4181_38_boot)
HXDLIN(  38)		q =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_796613836ecc4181_39_boot)
HXDLIN(  39)		p =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_796613836ecc4181_40_boot)
HXDLIN(  40)		e =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_796613836ecc4181_41_boot)
HXDLIN(  41)		temp1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_796613836ecc4181_42_boot)
HXDLIN(  42)		temp2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_796613836ecc4181_43_boot)
HXDLIN(  43)		m_centroidB =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_796613836ecc4181_45_boot)
HXDLIN(  45)		mat =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
            	}
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts
