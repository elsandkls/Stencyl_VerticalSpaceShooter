// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2TimeStep
#include <box2D/dynamics/B2TimeStep.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2World
#include <box2D/dynamics/B2World.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointDef
#include <box2D/dynamics/joints/B2JointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2PulleyJoint
#include <box2D/dynamics/joints/B2PulleyJoint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2PulleyJointDef
#include <box2D/dynamics/joints/B2PulleyJointDef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2aea35b8428583b9_129_new,"box2D.dynamics.joints.B2PulleyJoint","new",0xc626ce77,"box2D.dynamics.joints.B2PulleyJoint.new","box2D/dynamics/joints/B2PulleyJoint.hx",129,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_43_getAnchorA,"box2D.dynamics.joints.B2PulleyJoint","getAnchorA",0xfb3474ff,"box2D.dynamics.joints.B2PulleyJoint.getAnchorA","box2D/dynamics/joints/B2PulleyJoint.hx",43,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_47_getAnchorB,"box2D.dynamics.joints.B2PulleyJoint","getAnchorB",0xfb347500,"box2D.dynamics.joints.B2PulleyJoint.getAnchorB","box2D/dynamics/joints/B2PulleyJoint.hx",47,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_55_getReactionForce,"box2D.dynamics.joints.B2PulleyJoint","getReactionForce",0x36913e95,"box2D.dynamics.joints.B2PulleyJoint.getReactionForce","box2D/dynamics/joints/B2PulleyJoint.hx",55,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_62_getReactionTorque,"box2D.dynamics.joints.B2PulleyJoint","getReactionTorque",0x218f3ee0,"box2D.dynamics.joints.B2PulleyJoint.getReactionTorque","box2D/dynamics/joints/B2PulleyJoint.hx",62,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_69_getGroundAnchorA,"box2D.dynamics.joints.B2PulleyJoint","getGroundAnchorA",0x44e6c978,"box2D.dynamics.joints.B2PulleyJoint.getGroundAnchorA","box2D/dynamics/joints/B2PulleyJoint.hx",69,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_80_getGroundAnchorB,"box2D.dynamics.joints.B2PulleyJoint","getGroundAnchorB",0x44e6c979,"box2D.dynamics.joints.B2PulleyJoint.getGroundAnchorB","box2D/dynamics/joints/B2PulleyJoint.hx",80,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_91_getLength1,"box2D.dynamics.joints.B2PulleyJoint","getLength1",0x802d3d5e,"box2D.dynamics.joints.B2PulleyJoint.getLength1","box2D/dynamics/joints/B2PulleyJoint.hx",91,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_107_getLength2,"box2D.dynamics.joints.B2PulleyJoint","getLength2",0x802d3d5f,"box2D.dynamics.joints.B2PulleyJoint.getLength2","box2D/dynamics/joints/B2PulleyJoint.hx",107,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_123_getRatio,"box2D.dynamics.joints.B2PulleyJoint","getRatio",0xfcc4d31e,"box2D.dynamics.joints.B2PulleyJoint.getRatio","box2D/dynamics/joints/B2PulleyJoint.hx",123,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_174_initVelocityConstraints,"box2D.dynamics.joints.B2PulleyJoint","initVelocityConstraints",0x45dd2cc0,"box2D.dynamics.joints.B2PulleyJoint.initVelocityConstraints","box2D/dynamics/joints/B2PulleyJoint.hx",174,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_319_solveVelocityConstraints,"box2D.dynamics.joints.B2PulleyJoint","solveVelocityConstraints",0xb06d46a3,"box2D.dynamics.joints.B2PulleyJoint.solveVelocityConstraints","box2D/dynamics/joints/B2PulleyJoint.hx",319,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_437_solvePositionConstraints,"box2D.dynamics.joints.B2PulleyJoint","solvePositionConstraints",0xe8495b97,"box2D.dynamics.joints.B2PulleyJoint.solvePositionConstraints","box2D/dynamics/joints/B2PulleyJoint.hx",437,0xce8942fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2aea35b8428583b9_674_boot,"box2D.dynamics.joints.B2PulleyJoint","boot",0x93e6da3b,"box2D.dynamics.joints.B2PulleyJoint.boot","box2D/dynamics/joints/B2PulleyJoint.hx",674,0xce8942fa)
namespace box2D{
namespace dynamics{
namespace joints{

void B2PulleyJoint_obj::__construct( ::box2D::dynamics::joints::B2PulleyJointDef def){
            	HX_GC_STACKFRAME(&_hx_pos_2aea35b8428583b9_129_new)
HXLINE( 132)		super::__construct(def);
HXLINE( 135)		this->m_groundAnchor1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 136)		this->m_groundAnchor2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 137)		this->m_localAnchor1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 138)		this->m_localAnchor2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 140)		this->m_u1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 141)		this->m_u2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 144)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 145)		Float tX;
HXLINE( 146)		Float tY;
HXLINE( 148)		this->m_ground = this->m_bodyA->m_world->m_groundBody;
HXLINE( 150)		this->m_groundAnchor1->x = (def->groundAnchorA->x - this->m_ground->m_xf->position->x);
HXLINE( 151)		this->m_groundAnchor1->y = (def->groundAnchorA->y - this->m_ground->m_xf->position->y);
HXLINE( 153)		this->m_groundAnchor2->x = (def->groundAnchorB->x - this->m_ground->m_xf->position->x);
HXLINE( 154)		this->m_groundAnchor2->y = (def->groundAnchorB->y - this->m_ground->m_xf->position->y);
HXLINE( 156)		{
HXLINE( 156)			 ::box2D::common::math::B2Vec2 _this = this->m_localAnchor1;
HXDLIN( 156)			 ::box2D::common::math::B2Vec2 v = def->localAnchorA;
HXDLIN( 156)			_this->x = v->x;
HXDLIN( 156)			_this->y = v->y;
            		}
HXLINE( 158)		{
HXLINE( 158)			 ::box2D::common::math::B2Vec2 _this1 = this->m_localAnchor2;
HXDLIN( 158)			 ::box2D::common::math::B2Vec2 v1 = def->localAnchorB;
HXDLIN( 158)			_this1->x = v1->x;
HXDLIN( 158)			_this1->y = v1->y;
            		}
HXLINE( 161)		this->m_ratio = def->ratio;
HXLINE( 163)		Float def1 = def->lengthA;
HXDLIN( 163)		this->m_constant = (def1 + (this->m_ratio * def->lengthB));
HXLINE( 165)		Float def2 = def->maxLengthA;
HXDLIN( 165)		Float _hx_tmp = this->m_constant;
HXDLIN( 165)		this->m_maxLength1 = ::box2D::common::math::B2Math_obj::min(def2,(_hx_tmp - (this->m_ratio * ::box2D::dynamics::joints::B2PulleyJoint_obj::b2_minPulleyLength)));
HXLINE( 166)		Float def3 = def->maxLengthB;
HXDLIN( 166)		this->m_maxLength2 = ::box2D::common::math::B2Math_obj::min(def3,((Float)(this->m_constant - ::box2D::dynamics::joints::B2PulleyJoint_obj::b2_minPulleyLength) / (Float)this->m_ratio));
HXLINE( 168)		this->m_impulse = ((Float)0.0);
HXLINE( 169)		this->m_limitImpulse1 = ((Float)0.0);
HXLINE( 170)		this->m_limitImpulse2 = ((Float)0.0);
            	}

Dynamic B2PulleyJoint_obj::__CreateEmpty() { return new B2PulleyJoint_obj; }

void *B2PulleyJoint_obj::_hx_vtable = 0;

Dynamic B2PulleyJoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2PulleyJoint_obj > _hx_result = new B2PulleyJoint_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool B2PulleyJoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x13310c20) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x13310c20;
	} else {
		return inClassId==(int)0x56325dcb;
	}
}

 ::box2D::common::math::B2Vec2 B2PulleyJoint_obj::getAnchorA(){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_43_getAnchorA)
HXDLIN(  43)		return this->m_bodyA->getWorldPoint(this->m_localAnchor1);
            	}


 ::box2D::common::math::B2Vec2 B2PulleyJoint_obj::getAnchorB(){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_47_getAnchorB)
HXDLIN(  47)		return this->m_bodyB->getWorldPoint(this->m_localAnchor2);
            	}


 ::box2D::common::math::B2Vec2 B2PulleyJoint_obj::getReactionForce(Float inv_dt){
            	HX_GC_STACKFRAME(&_hx_pos_2aea35b8428583b9_55_getReactionForce)
HXDLIN(  55)		Float _hx_tmp = ((inv_dt * this->m_impulse) * this->m_u2->x);
HXDLIN(  55)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp,((inv_dt * this->m_impulse) * this->m_u2->y));
            	}


Float B2PulleyJoint_obj::getReactionTorque(Float inv_dt){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_62_getReactionTorque)
HXDLIN(  62)		return ((Float)0.0);
            	}


 ::box2D::common::math::B2Vec2 B2PulleyJoint_obj::getGroundAnchorA(){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_69_getGroundAnchorA)
HXLINE(  71)		 ::box2D::common::math::B2Vec2 a = this->m_ground->m_xf->position->copy(null());
HXLINE(  72)		a->add(this->m_groundAnchor1);
HXLINE(  73)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PulleyJoint_obj,getGroundAnchorA,return )

 ::box2D::common::math::B2Vec2 B2PulleyJoint_obj::getGroundAnchorB(){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_80_getGroundAnchorB)
HXLINE(  82)		 ::box2D::common::math::B2Vec2 a = this->m_ground->m_xf->position->copy(null());
HXLINE(  83)		a->add(this->m_groundAnchor2);
HXLINE(  84)		return a;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PulleyJoint_obj,getGroundAnchorB,return )

Float B2PulleyJoint_obj::getLength1(){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_91_getLength1)
HXLINE(  92)		 ::box2D::common::math::B2Vec2 p = this->m_bodyA->getWorldPoint(this->m_localAnchor1);
HXLINE(  94)		Float sX = (this->m_ground->m_xf->position->x + this->m_groundAnchor1->x);
HXLINE(  95)		Float sY = (this->m_ground->m_xf->position->y + this->m_groundAnchor1->y);
HXLINE(  97)		Float dX = (p->x - sX);
HXLINE(  98)		Float dY = (p->y - sY);
HXLINE( 100)		return ::Math_obj::sqrt(((dX * dX) + (dY * dY)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PulleyJoint_obj,getLength1,return )

Float B2PulleyJoint_obj::getLength2(){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_107_getLength2)
HXLINE( 108)		 ::box2D::common::math::B2Vec2 p = this->m_bodyB->getWorldPoint(this->m_localAnchor2);
HXLINE( 110)		Float sX = (this->m_ground->m_xf->position->x + this->m_groundAnchor2->x);
HXLINE( 111)		Float sY = (this->m_ground->m_xf->position->y + this->m_groundAnchor2->y);
HXLINE( 113)		Float dX = (p->x - sX);
HXLINE( 114)		Float dY = (p->y - sY);
HXLINE( 116)		return ::Math_obj::sqrt(((dX * dX) + (dY * dY)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PulleyJoint_obj,getLength2,return )

Float B2PulleyJoint_obj::getRatio(){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_123_getRatio)
HXDLIN( 123)		return this->m_ratio;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2PulleyJoint_obj,getRatio,return )

void B2PulleyJoint_obj::initVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_174_initVelocityConstraints)
HXLINE( 175)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 176)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 178)		 ::box2D::common::math::B2Mat22 tMat = bA->m_xf->R;
HXLINE( 182)		Float r1X = (this->m_localAnchor1->x - bA->m_sweep->localCenter->x);
HXLINE( 183)		Float r1Y = (this->m_localAnchor1->y - bA->m_sweep->localCenter->y);
HXLINE( 184)		Float tX = (tMat->col1->x * r1X);
HXDLIN( 184)		Float tX1 = (tX + (tMat->col2->x * r1Y));
HXLINE( 185)		Float r1Y1 = (tMat->col1->y * r1X);
HXDLIN( 185)		r1Y = (r1Y1 + (tMat->col2->y * r1Y));
HXLINE( 186)		r1X = tX1;
HXLINE( 188)		tMat = bB->m_xf->R;
HXLINE( 189)		Float r2X = (this->m_localAnchor2->x - bB->m_sweep->localCenter->x);
HXLINE( 190)		Float r2Y = (this->m_localAnchor2->y - bB->m_sweep->localCenter->y);
HXLINE( 191)		Float tX2 = (tMat->col1->x * r2X);
HXDLIN( 191)		tX1 = (tX2 + (tMat->col2->x * r2Y));
HXLINE( 192)		Float r2Y1 = (tMat->col1->y * r2X);
HXDLIN( 192)		r2Y = (r2Y1 + (tMat->col2->y * r2Y));
HXLINE( 193)		r2X = tX1;
HXLINE( 196)		Float p1X = (bA->m_sweep->c->x + r1X);
HXLINE( 197)		Float p1Y = (bA->m_sweep->c->y + r1Y);
HXLINE( 199)		Float p2X = (bB->m_sweep->c->x + r2X);
HXLINE( 200)		Float p2Y = (bB->m_sweep->c->y + r2Y);
HXLINE( 203)		Float s1X = (this->m_ground->m_xf->position->x + this->m_groundAnchor1->x);
HXLINE( 204)		Float s1Y = (this->m_ground->m_xf->position->y + this->m_groundAnchor1->y);
HXLINE( 206)		Float s2X = (this->m_ground->m_xf->position->x + this->m_groundAnchor2->x);
HXLINE( 207)		Float s2Y = (this->m_ground->m_xf->position->y + this->m_groundAnchor2->y);
HXLINE( 211)		{
HXLINE( 211)			 ::box2D::common::math::B2Vec2 _this = this->m_u1;
HXDLIN( 211)			_this->x = (p1X - s1X);
HXDLIN( 211)			_this->y = (p1Y - s1Y);
            		}
HXLINE( 213)		{
HXLINE( 213)			 ::box2D::common::math::B2Vec2 _this1 = this->m_u2;
HXDLIN( 213)			_this1->x = (p2X - s2X);
HXDLIN( 213)			_this1->y = (p2Y - s2Y);
            		}
HXLINE( 215)		Float length1 = this->m_u1->length();
HXLINE( 216)		Float length2 = this->m_u2->length();
HXLINE( 218)		if ((length1 > ::box2D::common::B2Settings_obj::b2_linearSlop)) {
HXLINE( 221)			 ::box2D::common::math::B2Vec2 _hx_tmp = this->m_u1;
HXDLIN( 221)			_hx_tmp->multiply(((Float)((Float)1.0) / (Float)length1));
            		}
            		else {
HXLINE( 225)			 ::box2D::common::math::B2Vec2 _this2 = this->m_u1;
HXDLIN( 225)			_this2->x = ((Float)0.0);
HXDLIN( 225)			_this2->y = ((Float)0.0);
            		}
HXLINE( 228)		if ((length2 > ::box2D::common::B2Settings_obj::b2_linearSlop)) {
HXLINE( 231)			 ::box2D::common::math::B2Vec2 _hx_tmp1 = this->m_u2;
HXDLIN( 231)			_hx_tmp1->multiply(((Float)((Float)1.0) / (Float)length2));
            		}
            		else {
HXLINE( 235)			 ::box2D::common::math::B2Vec2 _this3 = this->m_u2;
HXDLIN( 235)			_this3->x = ((Float)0.0);
HXDLIN( 235)			_this3->y = ((Float)0.0);
            		}
HXLINE( 238)		Float C = (this->m_constant - length1);
HXDLIN( 238)		Float C1 = (C - (this->m_ratio * length2));
HXLINE( 239)		if ((C1 > ((Float)0.0))) {
HXLINE( 241)			this->m_state = (int)0;
HXLINE( 242)			this->m_impulse = ((Float)0.0);
            		}
            		else {
HXLINE( 246)			this->m_state = (int)2;
            		}
HXLINE( 249)		if ((length1 < this->m_maxLength1)) {
HXLINE( 251)			this->m_limitState1 = (int)0;
HXLINE( 252)			this->m_limitImpulse1 = ((Float)0.0);
            		}
            		else {
HXLINE( 256)			this->m_limitState1 = (int)2;
            		}
HXLINE( 259)		if ((length2 < this->m_maxLength2)) {
HXLINE( 261)			this->m_limitState2 = (int)0;
HXLINE( 262)			this->m_limitImpulse2 = ((Float)0.0);
            		}
            		else {
HXLINE( 266)			this->m_limitState2 = (int)2;
            		}
HXLINE( 271)		Float cr1u1 = (r1X * this->m_u1->y);
HXDLIN( 271)		Float cr1u11 = (cr1u1 - (r1Y * this->m_u1->x));
HXLINE( 273)		Float cr2u2 = (r2X * this->m_u2->y);
HXDLIN( 273)		Float cr2u21 = (cr2u2 - (r2Y * this->m_u2->x));
HXLINE( 275)		Float bA1 = bA->m_invMass;
HXDLIN( 275)		this->m_limitMass1 = (bA1 + ((bA->m_invI * cr1u11) * cr1u11));
HXLINE( 276)		Float bB1 = bB->m_invMass;
HXDLIN( 276)		this->m_limitMass2 = (bB1 + ((bB->m_invI * cr2u21) * cr2u21));
HXLINE( 277)		Float _hx_tmp2 = this->m_limitMass1;
HXDLIN( 277)		this->m_pulleyMass = (_hx_tmp2 + ((this->m_ratio * this->m_ratio) * this->m_limitMass2));
HXLINE( 281)		this->m_limitMass1 = ((Float)((Float)1.0) / (Float)this->m_limitMass1);
HXLINE( 282)		this->m_limitMass2 = ((Float)((Float)1.0) / (Float)this->m_limitMass2);
HXLINE( 283)		this->m_pulleyMass = ((Float)((Float)1.0) / (Float)this->m_pulleyMass);
HXLINE( 285)		if (step->warmStarting) {
HXLINE( 288)			 ::box2D::dynamics::joints::B2PulleyJoint _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 288)			_hx_tmp3->m_impulse = (_hx_tmp3->m_impulse * step->dtRatio);
HXLINE( 289)			 ::box2D::dynamics::joints::B2PulleyJoint _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 289)			_hx_tmp4->m_limitImpulse1 = (_hx_tmp4->m_limitImpulse1 * step->dtRatio);
HXLINE( 290)			 ::box2D::dynamics::joints::B2PulleyJoint _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 290)			_hx_tmp5->m_limitImpulse2 = (_hx_tmp5->m_limitImpulse2 * step->dtRatio);
HXLINE( 294)			Float P1X = ((-(this->m_impulse) - this->m_limitImpulse1) * this->m_u1->x);
HXLINE( 295)			Float P1Y = ((-(this->m_impulse) - this->m_limitImpulse1) * this->m_u1->y);
HXLINE( 297)			Float P2X = (((-(this->m_ratio) * this->m_impulse) - this->m_limitImpulse2) * this->m_u2->x);
HXLINE( 298)			Float P2Y = (((-(this->m_ratio) * this->m_impulse) - this->m_limitImpulse2) * this->m_u2->y);
HXLINE( 300)			 ::box2D::common::math::B2Vec2 bA2 = bA->m_linearVelocity;
HXDLIN( 300)			bA2->x = (bA2->x + (bA->m_invMass * P1X));
HXLINE( 301)			 ::box2D::common::math::B2Vec2 bA3 = bA->m_linearVelocity;
HXDLIN( 301)			bA3->y = (bA3->y + (bA->m_invMass * P1Y));
HXLINE( 303)			 ::box2D::dynamics::B2Body bA4 = bA;
HXDLIN( 303)			Float bA5 = bA->m_invI;
HXDLIN( 303)			bA4->m_angularVelocity = (bA4->m_angularVelocity + (bA5 * ((r1X * P1Y) - (r1Y * P1X))));
HXLINE( 305)			 ::box2D::common::math::B2Vec2 bB2 = bB->m_linearVelocity;
HXDLIN( 305)			bB2->x = (bB2->x + (bB->m_invMass * P2X));
HXLINE( 306)			 ::box2D::common::math::B2Vec2 bB3 = bB->m_linearVelocity;
HXDLIN( 306)			bB3->y = (bB3->y + (bB->m_invMass * P2Y));
HXLINE( 308)			 ::box2D::dynamics::B2Body bB4 = bB;
HXDLIN( 308)			Float bB5 = bB->m_invI;
HXDLIN( 308)			bB4->m_angularVelocity = (bB4->m_angularVelocity + (bB5 * ((r2X * P2Y) - (r2Y * P2X))));
            		}
            		else {
HXLINE( 312)			this->m_impulse = ((Float)0.0);
HXLINE( 313)			this->m_limitImpulse1 = ((Float)0.0);
HXLINE( 314)			this->m_limitImpulse2 = ((Float)0.0);
            		}
            	}


void B2PulleyJoint_obj::solveVelocityConstraints( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_319_solveVelocityConstraints)
HXLINE( 322)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 323)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 325)		 ::box2D::common::math::B2Mat22 tMat = bA->m_xf->R;
HXLINE( 329)		Float r1X = (this->m_localAnchor1->x - bA->m_sweep->localCenter->x);
HXLINE( 330)		Float r1Y = (this->m_localAnchor1->y - bA->m_sweep->localCenter->y);
HXLINE( 331)		Float tX = (tMat->col1->x * r1X);
HXDLIN( 331)		Float tX1 = (tX + (tMat->col2->x * r1Y));
HXLINE( 332)		Float r1Y1 = (tMat->col1->y * r1X);
HXDLIN( 332)		r1Y = (r1Y1 + (tMat->col2->y * r1Y));
HXLINE( 333)		r1X = tX1;
HXLINE( 335)		tMat = bB->m_xf->R;
HXLINE( 336)		Float r2X = (this->m_localAnchor2->x - bB->m_sweep->localCenter->x);
HXLINE( 337)		Float r2Y = (this->m_localAnchor2->y - bB->m_sweep->localCenter->y);
HXLINE( 338)		Float tX2 = (tMat->col1->x * r2X);
HXDLIN( 338)		tX1 = (tX2 + (tMat->col2->x * r2Y));
HXLINE( 339)		Float r2Y1 = (tMat->col1->y * r2X);
HXDLIN( 339)		r2Y = (r2Y1 + (tMat->col2->y * r2Y));
HXLINE( 340)		r2X = tX1;
HXLINE( 343)		Float v1X;
HXLINE( 344)		Float v1Y;
HXLINE( 345)		Float v2X;
HXLINE( 346)		Float v2Y;
HXLINE( 347)		Float P1X;
HXLINE( 348)		Float P1Y;
HXLINE( 349)		Float P2X;
HXLINE( 350)		Float P2Y;
HXLINE( 351)		Float Cdot;
HXLINE( 352)		Float impulse;
HXLINE( 353)		Float oldImpulse;
HXLINE( 355)		if ((this->m_state == (int)2)) {
HXLINE( 358)			Float bA1 = bA->m_linearVelocity->x;
HXDLIN( 358)			v1X = (bA1 + (-(bA->m_angularVelocity) * r1Y));
HXLINE( 359)			Float bA2 = bA->m_linearVelocity->y;
HXDLIN( 359)			v1Y = (bA2 + (bA->m_angularVelocity * r1X));
HXLINE( 361)			Float bB1 = bB->m_linearVelocity->x;
HXDLIN( 361)			v2X = (bB1 + (-(bB->m_angularVelocity) * r2Y));
HXLINE( 362)			Float bB2 = bB->m_linearVelocity->y;
HXDLIN( 362)			v2Y = (bB2 + (bB->m_angularVelocity * r2X));
HXLINE( 365)			Float Cdot1 = (this->m_u1->x * v1X);
HXDLIN( 365)			Float Cdot2 = -((Cdot1 + (this->m_u1->y * v1Y)));
HXDLIN( 365)			Float Cdot3 = this->m_ratio;
HXDLIN( 365)			Float Cdot4 = (this->m_u2->x * v2X);
HXDLIN( 365)			Cdot = (Cdot2 - (Cdot3 * (Cdot4 + (this->m_u2->y * v2Y))));
HXLINE( 366)			impulse = (this->m_pulleyMass * -(Cdot));
HXLINE( 367)			oldImpulse = this->m_impulse;
HXLINE( 368)			this->m_impulse = ::box2D::common::math::B2Math_obj::max(((Float)0.0),(this->m_impulse + impulse));
HXLINE( 369)			impulse = (this->m_impulse - oldImpulse);
HXLINE( 372)			P1X = (-(impulse) * this->m_u1->x);
HXLINE( 373)			P1Y = (-(impulse) * this->m_u1->y);
HXLINE( 375)			P2X = ((-(this->m_ratio) * impulse) * this->m_u2->x);
HXLINE( 376)			P2Y = ((-(this->m_ratio) * impulse) * this->m_u2->y);
HXLINE( 378)			 ::box2D::common::math::B2Vec2 bA3 = bA->m_linearVelocity;
HXDLIN( 378)			bA3->x = (bA3->x + (bA->m_invMass * P1X));
HXLINE( 379)			 ::box2D::common::math::B2Vec2 bA4 = bA->m_linearVelocity;
HXDLIN( 379)			bA4->y = (bA4->y + (bA->m_invMass * P1Y));
HXLINE( 381)			 ::box2D::dynamics::B2Body bA5 = bA;
HXDLIN( 381)			Float bA6 = bA->m_invI;
HXDLIN( 381)			bA5->m_angularVelocity = (bA5->m_angularVelocity + (bA6 * ((r1X * P1Y) - (r1Y * P1X))));
HXLINE( 383)			 ::box2D::common::math::B2Vec2 bB3 = bB->m_linearVelocity;
HXDLIN( 383)			bB3->x = (bB3->x + (bB->m_invMass * P2X));
HXLINE( 384)			 ::box2D::common::math::B2Vec2 bB4 = bB->m_linearVelocity;
HXDLIN( 384)			bB4->y = (bB4->y + (bB->m_invMass * P2Y));
HXLINE( 386)			 ::box2D::dynamics::B2Body bB5 = bB;
HXDLIN( 386)			Float bB6 = bB->m_invI;
HXDLIN( 386)			bB5->m_angularVelocity = (bB5->m_angularVelocity + (bB6 * ((r2X * P2Y) - (r2Y * P2X))));
            		}
HXLINE( 389)		if ((this->m_limitState1 == (int)2)) {
HXLINE( 392)			Float bA7 = bA->m_linearVelocity->x;
HXDLIN( 392)			v1X = (bA7 + (-(bA->m_angularVelocity) * r1Y));
HXLINE( 393)			Float bA8 = bA->m_linearVelocity->y;
HXDLIN( 393)			v1Y = (bA8 + (bA->m_angularVelocity * r1X));
HXLINE( 396)			Float Cdot5 = (this->m_u1->x * v1X);
HXDLIN( 396)			Cdot = -((Cdot5 + (this->m_u1->y * v1Y)));
HXLINE( 397)			impulse = (-(this->m_limitMass1) * Cdot);
HXLINE( 398)			oldImpulse = this->m_limitImpulse1;
HXLINE( 399)			this->m_limitImpulse1 = ::box2D::common::math::B2Math_obj::max(((Float)0.0),(this->m_limitImpulse1 + impulse));
HXLINE( 400)			impulse = (this->m_limitImpulse1 - oldImpulse);
HXLINE( 403)			P1X = (-(impulse) * this->m_u1->x);
HXLINE( 404)			P1Y = (-(impulse) * this->m_u1->y);
HXLINE( 406)			 ::box2D::common::math::B2Vec2 bA9 = bA->m_linearVelocity;
HXDLIN( 406)			bA9->x = (bA9->x + (bA->m_invMass * P1X));
HXLINE( 407)			 ::box2D::common::math::B2Vec2 bA10 = bA->m_linearVelocity;
HXDLIN( 407)			bA10->y = (bA10->y + (bA->m_invMass * P1Y));
HXLINE( 409)			 ::box2D::dynamics::B2Body bA11 = bA;
HXDLIN( 409)			Float bA12 = bA->m_invI;
HXDLIN( 409)			bA11->m_angularVelocity = (bA11->m_angularVelocity + (bA12 * ((r1X * P1Y) - (r1Y * P1X))));
            		}
HXLINE( 412)		if ((this->m_limitState2 == (int)2)) {
HXLINE( 415)			Float bB7 = bB->m_linearVelocity->x;
HXDLIN( 415)			v2X = (bB7 + (-(bB->m_angularVelocity) * r2Y));
HXLINE( 416)			Float bB8 = bB->m_linearVelocity->y;
HXDLIN( 416)			v2Y = (bB8 + (bB->m_angularVelocity * r2X));
HXLINE( 419)			Float Cdot6 = (this->m_u2->x * v2X);
HXDLIN( 419)			Cdot = -((Cdot6 + (this->m_u2->y * v2Y)));
HXLINE( 420)			impulse = (-(this->m_limitMass2) * Cdot);
HXLINE( 421)			oldImpulse = this->m_limitImpulse2;
HXLINE( 422)			this->m_limitImpulse2 = ::box2D::common::math::B2Math_obj::max(((Float)0.0),(this->m_limitImpulse2 + impulse));
HXLINE( 423)			impulse = (this->m_limitImpulse2 - oldImpulse);
HXLINE( 426)			P2X = (-(impulse) * this->m_u2->x);
HXLINE( 427)			P2Y = (-(impulse) * this->m_u2->y);
HXLINE( 429)			 ::box2D::common::math::B2Vec2 bB9 = bB->m_linearVelocity;
HXDLIN( 429)			bB9->x = (bB9->x + (bB->m_invMass * P2X));
HXLINE( 430)			 ::box2D::common::math::B2Vec2 bB10 = bB->m_linearVelocity;
HXDLIN( 430)			bB10->y = (bB10->y + (bB->m_invMass * P2Y));
HXLINE( 432)			 ::box2D::dynamics::B2Body bB11 = bB;
HXDLIN( 432)			Float bB12 = bB->m_invI;
HXDLIN( 432)			bB11->m_angularVelocity = (bB11->m_angularVelocity + (bB12 * ((r2X * P2Y) - (r2Y * P2X))));
            		}
            	}


bool B2PulleyJoint_obj::solvePositionConstraints(Float baumgarte){
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_437_solvePositionConstraints)
HXLINE( 440)		 ::box2D::dynamics::B2Body bA = this->m_bodyA;
HXLINE( 441)		 ::box2D::dynamics::B2Body bB = this->m_bodyB;
HXLINE( 443)		 ::box2D::common::math::B2Mat22 tMat;
HXLINE( 446)		Float s1X = (this->m_ground->m_xf->position->x + this->m_groundAnchor1->x);
HXLINE( 447)		Float s1Y = (this->m_ground->m_xf->position->y + this->m_groundAnchor1->y);
HXLINE( 449)		Float s2X = (this->m_ground->m_xf->position->x + this->m_groundAnchor2->x);
HXLINE( 450)		Float s2Y = (this->m_ground->m_xf->position->y + this->m_groundAnchor2->y);
HXLINE( 453)		Float r1X;
HXLINE( 454)		Float r1Y;
HXLINE( 455)		Float r2X;
HXLINE( 456)		Float r2Y;
HXLINE( 457)		Float p1X;
HXLINE( 458)		Float p1Y;
HXLINE( 459)		Float p2X;
HXLINE( 460)		Float p2Y;
HXLINE( 461)		Float length1;
HXLINE( 462)		Float length2;
HXLINE( 463)		Float C;
HXLINE( 464)		Float impulse;
HXLINE( 465)		Float oldImpulse;
HXLINE( 466)		Float oldLimitPositionImpulse;
HXLINE( 468)		Float tX;
HXLINE( 470)		Float linearError = ((Float)0.0);
HXLINE( 472)		if ((this->m_state == (int)2)) {
HXLINE( 475)			tMat = bA->m_xf->R;
HXLINE( 476)			r1X = (this->m_localAnchor1->x - bA->m_sweep->localCenter->x);
HXLINE( 477)			r1Y = (this->m_localAnchor1->y - bA->m_sweep->localCenter->y);
HXLINE( 478)			Float tX1 = (tMat->col1->x * r1X);
HXDLIN( 478)			tX = (tX1 + (tMat->col2->x * r1Y));
HXLINE( 479)			Float r1Y1 = (tMat->col1->y * r1X);
HXDLIN( 479)			r1Y = (r1Y1 + (tMat->col2->y * r1Y));
HXLINE( 480)			r1X = tX;
HXLINE( 482)			tMat = bB->m_xf->R;
HXLINE( 483)			r2X = (this->m_localAnchor2->x - bB->m_sweep->localCenter->x);
HXLINE( 484)			r2Y = (this->m_localAnchor2->y - bB->m_sweep->localCenter->y);
HXLINE( 485)			Float tX2 = (tMat->col1->x * r2X);
HXDLIN( 485)			tX = (tX2 + (tMat->col2->x * r2Y));
HXLINE( 486)			Float r2Y1 = (tMat->col1->y * r2X);
HXDLIN( 486)			r2Y = (r2Y1 + (tMat->col2->y * r2Y));
HXLINE( 487)			r2X = tX;
HXLINE( 490)			p1X = (bA->m_sweep->c->x + r1X);
HXLINE( 491)			p1Y = (bA->m_sweep->c->y + r1Y);
HXLINE( 493)			p2X = (bB->m_sweep->c->x + r2X);
HXLINE( 494)			p2Y = (bB->m_sweep->c->y + r2Y);
HXLINE( 498)			{
HXLINE( 498)				 ::box2D::common::math::B2Vec2 _this = this->m_u1;
HXDLIN( 498)				_this->x = (p1X - s1X);
HXDLIN( 498)				_this->y = (p1Y - s1Y);
            			}
HXLINE( 500)			{
HXLINE( 500)				 ::box2D::common::math::B2Vec2 _this1 = this->m_u2;
HXDLIN( 500)				_this1->x = (p2X - s2X);
HXDLIN( 500)				_this1->y = (p2Y - s2Y);
            			}
HXLINE( 502)			length1 = this->m_u1->length();
HXLINE( 503)			length2 = this->m_u2->length();
HXLINE( 505)			if ((length1 > ::box2D::common::B2Settings_obj::b2_linearSlop)) {
HXLINE( 508)				 ::box2D::common::math::B2Vec2 _hx_tmp = this->m_u1;
HXDLIN( 508)				_hx_tmp->multiply(((Float)((Float)1.0) / (Float)length1));
            			}
            			else {
HXLINE( 512)				 ::box2D::common::math::B2Vec2 _this2 = this->m_u1;
HXDLIN( 512)				_this2->x = ((Float)0.0);
HXDLIN( 512)				_this2->y = ((Float)0.0);
            			}
HXLINE( 515)			if ((length2 > ::box2D::common::B2Settings_obj::b2_linearSlop)) {
HXLINE( 518)				 ::box2D::common::math::B2Vec2 _hx_tmp1 = this->m_u2;
HXDLIN( 518)				_hx_tmp1->multiply(((Float)((Float)1.0) / (Float)length2));
            			}
            			else {
HXLINE( 522)				 ::box2D::common::math::B2Vec2 _this3 = this->m_u2;
HXDLIN( 522)				_this3->x = ((Float)0.0);
HXDLIN( 522)				_this3->y = ((Float)0.0);
            			}
HXLINE( 525)			Float C1 = (this->m_constant - length1);
HXDLIN( 525)			C = (C1 - (this->m_ratio * length2));
HXLINE( 526)			linearError = ::box2D::common::math::B2Math_obj::max(linearError,-(C));
HXLINE( 527)			C = ::box2D::common::math::B2Math_obj::clamp((C + ::box2D::common::B2Settings_obj::b2_linearSlop),-(::box2D::common::B2Settings_obj::b2_maxLinearCorrection),((Float)0.0));
HXLINE( 528)			impulse = (-(this->m_pulleyMass) * C);
HXLINE( 530)			p1X = (-(impulse) * this->m_u1->x);
HXLINE( 531)			p1Y = (-(impulse) * this->m_u1->y);
HXLINE( 532)			p2X = ((-(this->m_ratio) * impulse) * this->m_u2->x);
HXLINE( 533)			p2Y = ((-(this->m_ratio) * impulse) * this->m_u2->y);
HXLINE( 535)			 ::box2D::common::math::B2Vec2 bA1 = bA->m_sweep->c;
HXDLIN( 535)			bA1->x = (bA1->x + (bA->m_invMass * p1X));
HXLINE( 536)			 ::box2D::common::math::B2Vec2 bA2 = bA->m_sweep->c;
HXDLIN( 536)			bA2->y = (bA2->y + (bA->m_invMass * p1Y));
HXLINE( 537)			 ::box2D::common::math::B2Sweep bA3 = bA->m_sweep;
HXDLIN( 537)			Float bA4 = bA->m_invI;
HXDLIN( 537)			bA3->a = (bA3->a + (bA4 * ((r1X * p1Y) - (r1Y * p1X))));
HXLINE( 538)			 ::box2D::common::math::B2Vec2 bB1 = bB->m_sweep->c;
HXDLIN( 538)			bB1->x = (bB1->x + (bB->m_invMass * p2X));
HXLINE( 539)			 ::box2D::common::math::B2Vec2 bB2 = bB->m_sweep->c;
HXDLIN( 539)			bB2->y = (bB2->y + (bB->m_invMass * p2Y));
HXLINE( 540)			 ::box2D::common::math::B2Sweep bB3 = bB->m_sweep;
HXDLIN( 540)			Float bB4 = bB->m_invI;
HXDLIN( 540)			bB3->a = (bB3->a + (bB4 * ((r2X * p2Y) - (r2Y * p2X))));
HXLINE( 542)			bA->synchronizeTransform();
HXLINE( 543)			bB->synchronizeTransform();
            		}
HXLINE( 546)		if ((this->m_limitState1 == (int)2)) {
HXLINE( 549)			tMat = bA->m_xf->R;
HXLINE( 550)			r1X = (this->m_localAnchor1->x - bA->m_sweep->localCenter->x);
HXLINE( 551)			r1Y = (this->m_localAnchor1->y - bA->m_sweep->localCenter->y);
HXLINE( 552)			Float tX3 = (tMat->col1->x * r1X);
HXDLIN( 552)			tX = (tX3 + (tMat->col2->x * r1Y));
HXLINE( 553)			Float r1Y2 = (tMat->col1->y * r1X);
HXDLIN( 553)			r1Y = (r1Y2 + (tMat->col2->y * r1Y));
HXLINE( 554)			r1X = tX;
HXLINE( 556)			p1X = (bA->m_sweep->c->x + r1X);
HXLINE( 557)			p1Y = (bA->m_sweep->c->y + r1Y);
HXLINE( 560)			{
HXLINE( 560)				 ::box2D::common::math::B2Vec2 _this4 = this->m_u1;
HXDLIN( 560)				_this4->x = (p1X - s1X);
HXDLIN( 560)				_this4->y = (p1Y - s1Y);
            			}
HXLINE( 562)			length1 = this->m_u1->length();
HXLINE( 564)			if ((length1 > ::box2D::common::B2Settings_obj::b2_linearSlop)) {
HXLINE( 567)				 ::box2D::common::math::B2Vec2 _hx_tmp2 = this->m_u1;
HXDLIN( 567)				_hx_tmp2->x = (_hx_tmp2->x * ((Float)((Float)1.0) / (Float)length1));
HXLINE( 568)				 ::box2D::common::math::B2Vec2 _hx_tmp3 = this->m_u1;
HXDLIN( 568)				_hx_tmp3->y = (_hx_tmp3->y * ((Float)((Float)1.0) / (Float)length1));
            			}
            			else {
HXLINE( 572)				 ::box2D::common::math::B2Vec2 _this5 = this->m_u1;
HXDLIN( 572)				_this5->x = ((Float)0.0);
HXDLIN( 572)				_this5->y = ((Float)0.0);
            			}
HXLINE( 575)			C = (this->m_maxLength1 - length1);
HXLINE( 576)			linearError = ::box2D::common::math::B2Math_obj::max(linearError,-(C));
HXLINE( 577)			C = ::box2D::common::math::B2Math_obj::clamp((C + ::box2D::common::B2Settings_obj::b2_linearSlop),-(::box2D::common::B2Settings_obj::b2_maxLinearCorrection),((Float)0.0));
HXLINE( 578)			impulse = (-(this->m_limitMass1) * C);
HXLINE( 581)			p1X = (-(impulse) * this->m_u1->x);
HXLINE( 582)			p1Y = (-(impulse) * this->m_u1->y);
HXLINE( 584)			 ::box2D::common::math::B2Vec2 bA5 = bA->m_sweep->c;
HXDLIN( 584)			bA5->x = (bA5->x + (bA->m_invMass * p1X));
HXLINE( 585)			 ::box2D::common::math::B2Vec2 bA6 = bA->m_sweep->c;
HXDLIN( 585)			bA6->y = (bA6->y + (bA->m_invMass * p1Y));
HXLINE( 587)			 ::box2D::common::math::B2Sweep bA7 = bA->m_sweep;
HXDLIN( 587)			Float bA8 = bA->m_invI;
HXDLIN( 587)			bA7->a = (bA7->a + (bA8 * ((r1X * p1Y) - (r1Y * p1X))));
HXLINE( 589)			bA->synchronizeTransform();
            		}
HXLINE( 592)		if ((this->m_limitState2 == (int)2)) {
HXLINE( 595)			tMat = bB->m_xf->R;
HXLINE( 596)			r2X = (this->m_localAnchor2->x - bB->m_sweep->localCenter->x);
HXLINE( 597)			r2Y = (this->m_localAnchor2->y - bB->m_sweep->localCenter->y);
HXLINE( 598)			Float tX4 = (tMat->col1->x * r2X);
HXDLIN( 598)			tX = (tX4 + (tMat->col2->x * r2Y));
HXLINE( 599)			Float r2Y2 = (tMat->col1->y * r2X);
HXDLIN( 599)			r2Y = (r2Y2 + (tMat->col2->y * r2Y));
HXLINE( 600)			r2X = tX;
HXLINE( 602)			p2X = (bB->m_sweep->c->x + r2X);
HXLINE( 603)			p2Y = (bB->m_sweep->c->y + r2Y);
HXLINE( 606)			{
HXLINE( 606)				 ::box2D::common::math::B2Vec2 _this6 = this->m_u2;
HXDLIN( 606)				_this6->x = (p2X - s2X);
HXDLIN( 606)				_this6->y = (p2Y - s2Y);
            			}
HXLINE( 608)			length2 = this->m_u2->length();
HXLINE( 610)			if ((length2 > ::box2D::common::B2Settings_obj::b2_linearSlop)) {
HXLINE( 613)				 ::box2D::common::math::B2Vec2 _hx_tmp4 = this->m_u2;
HXDLIN( 613)				_hx_tmp4->x = (_hx_tmp4->x * ((Float)((Float)1.0) / (Float)length2));
HXLINE( 614)				 ::box2D::common::math::B2Vec2 _hx_tmp5 = this->m_u2;
HXDLIN( 614)				_hx_tmp5->y = (_hx_tmp5->y * ((Float)((Float)1.0) / (Float)length2));
            			}
            			else {
HXLINE( 618)				 ::box2D::common::math::B2Vec2 _this7 = this->m_u2;
HXDLIN( 618)				_this7->x = ((Float)0.0);
HXDLIN( 618)				_this7->y = ((Float)0.0);
            			}
HXLINE( 621)			C = (this->m_maxLength2 - length2);
HXLINE( 622)			linearError = ::box2D::common::math::B2Math_obj::max(linearError,-(C));
HXLINE( 623)			C = ::box2D::common::math::B2Math_obj::clamp((C + ::box2D::common::B2Settings_obj::b2_linearSlop),-(::box2D::common::B2Settings_obj::b2_maxLinearCorrection),((Float)0.0));
HXLINE( 624)			impulse = (-(this->m_limitMass2) * C);
HXLINE( 627)			p2X = (-(impulse) * this->m_u2->x);
HXLINE( 628)			p2Y = (-(impulse) * this->m_u2->y);
HXLINE( 631)			 ::box2D::common::math::B2Vec2 bB5 = bB->m_sweep->c;
HXDLIN( 631)			bB5->x = (bB5->x + (bB->m_invMass * p2X));
HXLINE( 632)			 ::box2D::common::math::B2Vec2 bB6 = bB->m_sweep->c;
HXDLIN( 632)			bB6->y = (bB6->y + (bB->m_invMass * p2Y));
HXLINE( 634)			 ::box2D::common::math::B2Sweep bB7 = bB->m_sweep;
HXDLIN( 634)			Float bB8 = bB->m_invI;
HXDLIN( 634)			bB7->a = (bB7->a + (bB8 * ((r2X * p2Y) - (r2Y * p2X))));
HXLINE( 636)			bB->synchronizeTransform();
            		}
HXLINE( 639)		return (linearError < ::box2D::common::B2Settings_obj::b2_linearSlop);
            	}


Float B2PulleyJoint_obj::b2_minPulleyLength;


hx::ObjectPtr< B2PulleyJoint_obj > B2PulleyJoint_obj::__new( ::box2D::dynamics::joints::B2PulleyJointDef def) {
	hx::ObjectPtr< B2PulleyJoint_obj > __this = new B2PulleyJoint_obj();
	__this->__construct(def);
	return __this;
}

hx::ObjectPtr< B2PulleyJoint_obj > B2PulleyJoint_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::dynamics::joints::B2PulleyJointDef def) {
	B2PulleyJoint_obj *__this = (B2PulleyJoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2PulleyJoint_obj), true, "box2D.dynamics.joints.B2PulleyJoint"));
	*(void **)__this = B2PulleyJoint_obj::_hx_vtable;
	__this->__construct(def);
	return __this;
}

B2PulleyJoint_obj::B2PulleyJoint_obj()
{
}

void B2PulleyJoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2PulleyJoint);
	HX_MARK_MEMBER_NAME(m_ground,"m_ground");
	HX_MARK_MEMBER_NAME(m_groundAnchor1,"m_groundAnchor1");
	HX_MARK_MEMBER_NAME(m_groundAnchor2,"m_groundAnchor2");
	HX_MARK_MEMBER_NAME(m_localAnchor1,"m_localAnchor1");
	HX_MARK_MEMBER_NAME(m_localAnchor2,"m_localAnchor2");
	HX_MARK_MEMBER_NAME(m_u1,"m_u1");
	HX_MARK_MEMBER_NAME(m_u2,"m_u2");
	HX_MARK_MEMBER_NAME(m_constant,"m_constant");
	HX_MARK_MEMBER_NAME(m_ratio,"m_ratio");
	HX_MARK_MEMBER_NAME(m_maxLength1,"m_maxLength1");
	HX_MARK_MEMBER_NAME(m_maxLength2,"m_maxLength2");
	HX_MARK_MEMBER_NAME(m_pulleyMass,"m_pulleyMass");
	HX_MARK_MEMBER_NAME(m_limitMass1,"m_limitMass1");
	HX_MARK_MEMBER_NAME(m_limitMass2,"m_limitMass2");
	HX_MARK_MEMBER_NAME(m_impulse,"m_impulse");
	HX_MARK_MEMBER_NAME(m_limitImpulse1,"m_limitImpulse1");
	HX_MARK_MEMBER_NAME(m_limitImpulse2,"m_limitImpulse2");
	HX_MARK_MEMBER_NAME(m_state,"m_state");
	HX_MARK_MEMBER_NAME(m_limitState1,"m_limitState1");
	HX_MARK_MEMBER_NAME(m_limitState2,"m_limitState2");
	 ::box2D::dynamics::joints::B2Joint_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void B2PulleyJoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_ground,"m_ground");
	HX_VISIT_MEMBER_NAME(m_groundAnchor1,"m_groundAnchor1");
	HX_VISIT_MEMBER_NAME(m_groundAnchor2,"m_groundAnchor2");
	HX_VISIT_MEMBER_NAME(m_localAnchor1,"m_localAnchor1");
	HX_VISIT_MEMBER_NAME(m_localAnchor2,"m_localAnchor2");
	HX_VISIT_MEMBER_NAME(m_u1,"m_u1");
	HX_VISIT_MEMBER_NAME(m_u2,"m_u2");
	HX_VISIT_MEMBER_NAME(m_constant,"m_constant");
	HX_VISIT_MEMBER_NAME(m_ratio,"m_ratio");
	HX_VISIT_MEMBER_NAME(m_maxLength1,"m_maxLength1");
	HX_VISIT_MEMBER_NAME(m_maxLength2,"m_maxLength2");
	HX_VISIT_MEMBER_NAME(m_pulleyMass,"m_pulleyMass");
	HX_VISIT_MEMBER_NAME(m_limitMass1,"m_limitMass1");
	HX_VISIT_MEMBER_NAME(m_limitMass2,"m_limitMass2");
	HX_VISIT_MEMBER_NAME(m_impulse,"m_impulse");
	HX_VISIT_MEMBER_NAME(m_limitImpulse1,"m_limitImpulse1");
	HX_VISIT_MEMBER_NAME(m_limitImpulse2,"m_limitImpulse2");
	HX_VISIT_MEMBER_NAME(m_state,"m_state");
	HX_VISIT_MEMBER_NAME(m_limitState1,"m_limitState1");
	HX_VISIT_MEMBER_NAME(m_limitState2,"m_limitState2");
	 ::box2D::dynamics::joints::B2Joint_obj::__Visit(HX_VISIT_ARG);
}

hx::Val B2PulleyJoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"m_u1") ) { return hx::Val( m_u1 ); }
		if (HX_FIELD_EQ(inName,"m_u2") ) { return hx::Val( m_u2 ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_ratio") ) { return hx::Val( m_ratio ); }
		if (HX_FIELD_EQ(inName,"m_state") ) { return hx::Val( m_state ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getRatio") ) { return hx::Val( getRatio_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_ground") ) { return hx::Val( m_ground ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_impulse") ) { return hx::Val( m_impulse ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getAnchorA") ) { return hx::Val( getAnchorA_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnchorB") ) { return hx::Val( getAnchorB_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLength1") ) { return hx::Val( getLength1_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLength2") ) { return hx::Val( getLength2_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_constant") ) { return hx::Val( m_constant ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_maxLength1") ) { return hx::Val( m_maxLength1 ); }
		if (HX_FIELD_EQ(inName,"m_maxLength2") ) { return hx::Val( m_maxLength2 ); }
		if (HX_FIELD_EQ(inName,"m_pulleyMass") ) { return hx::Val( m_pulleyMass ); }
		if (HX_FIELD_EQ(inName,"m_limitMass1") ) { return hx::Val( m_limitMass1 ); }
		if (HX_FIELD_EQ(inName,"m_limitMass2") ) { return hx::Val( m_limitMass2 ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_limitState1") ) { return hx::Val( m_limitState1 ); }
		if (HX_FIELD_EQ(inName,"m_limitState2") ) { return hx::Val( m_limitState2 ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_localAnchor1") ) { return hx::Val( m_localAnchor1 ); }
		if (HX_FIELD_EQ(inName,"m_localAnchor2") ) { return hx::Val( m_localAnchor2 ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_groundAnchor1") ) { return hx::Val( m_groundAnchor1 ); }
		if (HX_FIELD_EQ(inName,"m_groundAnchor2") ) { return hx::Val( m_groundAnchor2 ); }
		if (HX_FIELD_EQ(inName,"m_limitImpulse1") ) { return hx::Val( m_limitImpulse1 ); }
		if (HX_FIELD_EQ(inName,"m_limitImpulse2") ) { return hx::Val( m_limitImpulse2 ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getReactionForce") ) { return hx::Val( getReactionForce_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroundAnchorA") ) { return hx::Val( getGroundAnchorA_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroundAnchorB") ) { return hx::Val( getGroundAnchorB_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getReactionTorque") ) { return hx::Val( getReactionTorque_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"initVelocityConstraints") ) { return hx::Val( initVelocityConstraints_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"solveVelocityConstraints") ) { return hx::Val( solveVelocityConstraints_dyn() ); }
		if (HX_FIELD_EQ(inName,"solvePositionConstraints") ) { return hx::Val( solvePositionConstraints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2PulleyJoint_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"b2_minPulleyLength") ) { outValue = ( b2_minPulleyLength ); return true; }
	}
	return false;
}

hx::Val B2PulleyJoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"m_u1") ) { m_u1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_u2") ) { m_u2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_ratio") ) { m_ratio=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_state") ) { m_state=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_ground") ) { m_ground=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_impulse") ) { m_impulse=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_constant") ) { m_constant=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_maxLength1") ) { m_maxLength1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_maxLength2") ) { m_maxLength2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_pulleyMass") ) { m_pulleyMass=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_limitMass1") ) { m_limitMass1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_limitMass2") ) { m_limitMass2=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_limitState1") ) { m_limitState1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_limitState2") ) { m_limitState2=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_localAnchor1") ) { m_localAnchor1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_localAnchor2") ) { m_localAnchor2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_groundAnchor1") ) { m_groundAnchor1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_groundAnchor2") ) { m_groundAnchor2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_limitImpulse1") ) { m_limitImpulse1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_limitImpulse2") ) { m_limitImpulse2=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2PulleyJoint_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"b2_minPulleyLength") ) { b2_minPulleyLength=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void B2PulleyJoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_ground","\x59","\xcb","\x19","\xe5"));
	outFields->push(HX_HCSTRING("m_groundAnchor1","\xc3","\x55","\x02","\x93"));
	outFields->push(HX_HCSTRING("m_groundAnchor2","\xc4","\x55","\x02","\x93"));
	outFields->push(HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e"));
	outFields->push(HX_HCSTRING("m_u1","\xee","\xbd","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_u2","\xef","\xbd","\x54","\x48"));
	outFields->push(HX_HCSTRING("m_constant","\xb6","\xc2","\xe8","\xcc"));
	outFields->push(HX_HCSTRING("m_ratio","\x79","\x0c","\xaf","\x94"));
	outFields->push(HX_HCSTRING("m_maxLength1","\x19","\xa8","\xca","\xc2"));
	outFields->push(HX_HCSTRING("m_maxLength2","\x1a","\xa8","\xca","\xc2"));
	outFields->push(HX_HCSTRING("m_pulleyMass","\xdf","\x36","\x02","\x47"));
	outFields->push(HX_HCSTRING("m_limitMass1","\x54","\x49","\xf8","\xd5"));
	outFields->push(HX_HCSTRING("m_limitMass2","\x55","\x49","\xf8","\xd5"));
	outFields->push(HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78"));
	outFields->push(HX_HCSTRING("m_limitImpulse1","\xa5","\x51","\x6b","\xd6"));
	outFields->push(HX_HCSTRING("m_limitImpulse2","\xa6","\x51","\x6b","\xd6"));
	outFields->push(HX_HCSTRING("m_state","\x7f","\x4d","\x96","\x34"));
	outFields->push(HX_HCSTRING("m_limitState1","\x89","\x28","\x24","\xae"));
	outFields->push(HX_HCSTRING("m_limitState2","\x8a","\x28","\x24","\xae"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2PulleyJoint_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2PulleyJoint_obj,m_ground),HX_HCSTRING("m_ground","\x59","\xcb","\x19","\xe5")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PulleyJoint_obj,m_groundAnchor1),HX_HCSTRING("m_groundAnchor1","\xc3","\x55","\x02","\x93")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PulleyJoint_obj,m_groundAnchor2),HX_HCSTRING("m_groundAnchor2","\xc4","\x55","\x02","\x93")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PulleyJoint_obj,m_localAnchor1),HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PulleyJoint_obj,m_localAnchor2),HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PulleyJoint_obj,m_u1),HX_HCSTRING("m_u1","\xee","\xbd","\x54","\x48")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2PulleyJoint_obj,m_u2),HX_HCSTRING("m_u2","\xef","\xbd","\x54","\x48")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_constant),HX_HCSTRING("m_constant","\xb6","\xc2","\xe8","\xcc")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_ratio),HX_HCSTRING("m_ratio","\x79","\x0c","\xaf","\x94")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_maxLength1),HX_HCSTRING("m_maxLength1","\x19","\xa8","\xca","\xc2")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_maxLength2),HX_HCSTRING("m_maxLength2","\x1a","\xa8","\xca","\xc2")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_pulleyMass),HX_HCSTRING("m_pulleyMass","\xdf","\x36","\x02","\x47")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_limitMass1),HX_HCSTRING("m_limitMass1","\x54","\x49","\xf8","\xd5")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_limitMass2),HX_HCSTRING("m_limitMass2","\x55","\x49","\xf8","\xd5")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_impulse),HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_limitImpulse1),HX_HCSTRING("m_limitImpulse1","\xa5","\x51","\x6b","\xd6")},
	{hx::fsFloat,(int)offsetof(B2PulleyJoint_obj,m_limitImpulse2),HX_HCSTRING("m_limitImpulse2","\xa6","\x51","\x6b","\xd6")},
	{hx::fsInt,(int)offsetof(B2PulleyJoint_obj,m_state),HX_HCSTRING("m_state","\x7f","\x4d","\x96","\x34")},
	{hx::fsInt,(int)offsetof(B2PulleyJoint_obj,m_limitState1),HX_HCSTRING("m_limitState1","\x89","\x28","\x24","\xae")},
	{hx::fsInt,(int)offsetof(B2PulleyJoint_obj,m_limitState2),HX_HCSTRING("m_limitState2","\x8a","\x28","\x24","\xae")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2PulleyJoint_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &B2PulleyJoint_obj::b2_minPulleyLength,HX_HCSTRING("b2_minPulleyLength","\x02","\x32","\x94","\x64")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2PulleyJoint_obj_sMemberFields[] = {
	HX_HCSTRING("getAnchorA","\x36","\x72","\x03","\x52"),
	HX_HCSTRING("getAnchorB","\x37","\x72","\x03","\x52"),
	HX_HCSTRING("getReactionForce","\x0c","\x7f","\x58","\x41"),
	HX_HCSTRING("getReactionTorque","\x89","\x66","\x20","\x85"),
	HX_HCSTRING("getGroundAnchorA","\xef","\x09","\xae","\x4f"),
	HX_HCSTRING("getGroundAnchorB","\xf0","\x09","\xae","\x4f"),
	HX_HCSTRING("getLength1","\x95","\x3a","\xfc","\xd6"),
	HX_HCSTRING("getLength2","\x96","\x3a","\xfc","\xd6"),
	HX_HCSTRING("getRatio","\x95","\x44","\xfb","\x43"),
	HX_HCSTRING("initVelocityConstraints","\x29","\xf9","\xf0","\x64"),
	HX_HCSTRING("solveVelocityConstraints","\x1a","\x56","\xac","\xc2"),
	HX_HCSTRING("solvePositionConstraints","\x0e","\x6b","\x88","\xfa"),
	HX_HCSTRING("m_ground","\x59","\xcb","\x19","\xe5"),
	HX_HCSTRING("m_groundAnchor1","\xc3","\x55","\x02","\x93"),
	HX_HCSTRING("m_groundAnchor2","\xc4","\x55","\x02","\x93"),
	HX_HCSTRING("m_localAnchor1","\x43","\x30","\xee","\x9e"),
	HX_HCSTRING("m_localAnchor2","\x44","\x30","\xee","\x9e"),
	HX_HCSTRING("m_u1","\xee","\xbd","\x54","\x48"),
	HX_HCSTRING("m_u2","\xef","\xbd","\x54","\x48"),
	HX_HCSTRING("m_constant","\xb6","\xc2","\xe8","\xcc"),
	HX_HCSTRING("m_ratio","\x79","\x0c","\xaf","\x94"),
	HX_HCSTRING("m_maxLength1","\x19","\xa8","\xca","\xc2"),
	HX_HCSTRING("m_maxLength2","\x1a","\xa8","\xca","\xc2"),
	HX_HCSTRING("m_pulleyMass","\xdf","\x36","\x02","\x47"),
	HX_HCSTRING("m_limitMass1","\x54","\x49","\xf8","\xd5"),
	HX_HCSTRING("m_limitMass2","\x55","\x49","\xf8","\xd5"),
	HX_HCSTRING("m_impulse","\xa3","\x5f","\x3f","\x78"),
	HX_HCSTRING("m_limitImpulse1","\xa5","\x51","\x6b","\xd6"),
	HX_HCSTRING("m_limitImpulse2","\xa6","\x51","\x6b","\xd6"),
	HX_HCSTRING("m_state","\x7f","\x4d","\x96","\x34"),
	HX_HCSTRING("m_limitState1","\x89","\x28","\x24","\xae"),
	HX_HCSTRING("m_limitState2","\x8a","\x28","\x24","\xae"),
	::String(null()) };

static void B2PulleyJoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2PulleyJoint_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2PulleyJoint_obj::b2_minPulleyLength,"b2_minPulleyLength");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2PulleyJoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2PulleyJoint_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2PulleyJoint_obj::b2_minPulleyLength,"b2_minPulleyLength");
};

#endif

hx::Class B2PulleyJoint_obj::__mClass;

static ::String B2PulleyJoint_obj_sStaticFields[] = {
	HX_HCSTRING("b2_minPulleyLength","\x02","\x32","\x94","\x64"),
	::String(null())
};

void B2PulleyJoint_obj::__register()
{
	hx::Object *dummy = new B2PulleyJoint_obj;
	B2PulleyJoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.joints.B2PulleyJoint","\x05","\xc7","\xfa","\x83");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2PulleyJoint_obj::__GetStatic;
	__mClass->mSetStaticField = &B2PulleyJoint_obj::__SetStatic;
	__mClass->mMarkFunc = B2PulleyJoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2PulleyJoint_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2PulleyJoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2PulleyJoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2PulleyJoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2PulleyJoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2PulleyJoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2PulleyJoint_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2aea35b8428583b9_674_boot)
HXDLIN( 674)		b2_minPulleyLength = ((Float)2.0);
            	}
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace joints
