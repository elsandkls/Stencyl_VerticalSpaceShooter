// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2DebugDraw
#include <box2D/dynamics/B2DebugDraw.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2TimeStep
#include <box2D/dynamics/B2TimeStep.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2World
#include <box2D/dynamics/B2World.h>
#endif
#ifndef INCLUDED_box2D_dynamics_controllers_B2Controller
#include <box2D/dynamics/controllers/B2Controller.h>
#endif
#ifndef INCLUDED_box2D_dynamics_controllers_B2ControllerEdge
#include <box2D/dynamics/controllers/B2ControllerEdge.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_06c287cc3c64f6a2_34_step,"box2D.dynamics.controllers.B2Controller","step",0xe9a9028e,"box2D.dynamics.controllers.B2Controller.step","box2D/dynamics/controllers/B2Controller.hx",34,0x8951ff11)
HX_LOCAL_STACK_FRAME(_hx_pos_06c287cc3c64f6a2_36_draw,"box2D.dynamics.controllers.B2Controller","draw",0xdfbd4746,"box2D.dynamics.controllers.B2Controller.draw","box2D/dynamics/controllers/B2Controller.hx",36,0x8951ff11)
HX_LOCAL_STACK_FRAME(_hx_pos_06c287cc3c64f6a2_39_addBody,"box2D.dynamics.controllers.B2Controller","addBody",0x728e9761,"box2D.dynamics.controllers.B2Controller.addBody","box2D/dynamics/controllers/B2Controller.hx",39,0x8951ff11)
HX_LOCAL_STACK_FRAME(_hx_pos_06c287cc3c64f6a2_60_removeBody,"box2D.dynamics.controllers.B2Controller","removeBody",0x4f56adc8,"box2D.dynamics.controllers.B2Controller.removeBody","box2D/dynamics/controllers/B2Controller.hx",60,0x8951ff11)
HX_LOCAL_STACK_FRAME(_hx_pos_06c287cc3c64f6a2_88_clear,"box2D.dynamics.controllers.B2Controller","clear",0x4e86300b,"box2D.dynamics.controllers.B2Controller.clear","box2D/dynamics/controllers/B2Controller.hx",88,0x8951ff11)
HX_LOCAL_STACK_FRAME(_hx_pos_06c287cc3c64f6a2_92_getNext,"box2D.dynamics.controllers.B2Controller","getNext",0x10bb0ea7,"box2D.dynamics.controllers.B2Controller.getNext","box2D/dynamics/controllers/B2Controller.hx",92,0x8951ff11)
HX_LOCAL_STACK_FRAME(_hx_pos_06c287cc3c64f6a2_93_getWorld,"box2D.dynamics.controllers.B2Controller","getWorld",0xc8248a1e,"box2D.dynamics.controllers.B2Controller.getWorld","box2D/dynamics/controllers/B2Controller.hx",93,0x8951ff11)
HX_LOCAL_STACK_FRAME(_hx_pos_06c287cc3c64f6a2_97_getBodyList,"box2D.dynamics.controllers.B2Controller","getBodyList",0x54282fd4,"box2D.dynamics.controllers.B2Controller.getBodyList","box2D/dynamics/controllers/B2Controller.hx",97,0x8951ff11)
namespace box2D{
namespace dynamics{
namespace controllers{

void B2Controller_obj::__construct() { }

Dynamic B2Controller_obj::__CreateEmpty() { return new B2Controller_obj; }

void *B2Controller_obj::_hx_vtable = 0;

Dynamic B2Controller_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Controller_obj > _hx_result = new B2Controller_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2Controller_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3eb422f2;
}

void B2Controller_obj::step( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_06c287cc3c64f6a2_34_step)
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Controller_obj,step,(void))

void B2Controller_obj::draw( ::box2D::dynamics::B2DebugDraw debugDraw){
            	HX_STACKFRAME(&_hx_pos_06c287cc3c64f6a2_36_draw)
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Controller_obj,draw,(void))

void B2Controller_obj::addBody( ::box2D::dynamics::B2Body body){
            	HX_GC_STACKFRAME(&_hx_pos_06c287cc3c64f6a2_39_addBody)
HXLINE(  40)		 ::box2D::dynamics::controllers::B2ControllerEdge edge =  ::box2D::dynamics::controllers::B2ControllerEdge_obj::__alloc( HX_CTX );
HXLINE(  41)		edge->controller = hx::ObjectPtr<OBJ_>(this);
HXLINE(  42)		edge->body = body;
HXLINE(  44)		edge->nextBody = this->m_bodyList;
HXLINE(  45)		edge->prevBody = null();
HXLINE(  46)		this->m_bodyList = edge;
HXLINE(  47)		if (hx::IsNotNull( edge->nextBody )) {
HXLINE(  48)			edge->nextBody->prevBody = edge;
            		}
HXLINE(  49)		this->m_bodyCount++;
HXLINE(  51)		edge->nextController = body->m_controllerList;
HXLINE(  52)		edge->prevController = null();
HXLINE(  53)		body->m_controllerList = edge;
HXLINE(  54)		if (hx::IsNotNull( edge->nextController )) {
HXLINE(  55)			edge->nextController->prevController = edge;
            		}
HXLINE(  56)		body->m_controllerCount++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Controller_obj,addBody,(void))

void B2Controller_obj::removeBody( ::box2D::dynamics::B2Body body){
            	HX_STACKFRAME(&_hx_pos_06c287cc3c64f6a2_60_removeBody)
HXLINE(  61)		 ::box2D::dynamics::controllers::B2ControllerEdge edge = body->m_controllerList;
HXLINE(  62)		while(true){
HXLINE(  62)			bool _hx_tmp;
HXDLIN(  62)			if (hx::IsNotNull( edge )) {
HXLINE(  62)				_hx_tmp = hx::IsNotEq( edge->controller,hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(  62)				_hx_tmp = false;
            			}
HXDLIN(  62)			if (!(_hx_tmp)) {
HXLINE(  62)				goto _hx_goto_3;
            			}
HXLINE(  63)			edge = edge->nextController;
            		}
            		_hx_goto_3:;
HXLINE(  68)		if (hx::IsNotNull( edge->prevBody )) {
HXLINE(  69)			edge->prevBody->nextBody = edge->nextBody;
            		}
HXLINE(  70)		if (hx::IsNotNull( edge->nextBody )) {
HXLINE(  71)			edge->nextBody->prevBody = edge->prevBody;
            		}
HXLINE(  72)		if (hx::IsNotNull( edge->nextController )) {
HXLINE(  73)			edge->nextController->prevController = edge->prevController;
            		}
HXLINE(  74)		if (hx::IsNotNull( edge->prevController )) {
HXLINE(  75)			edge->prevController->nextController = edge->nextController;
            		}
HXLINE(  76)		if (hx::IsEq( this->m_bodyList,edge )) {
HXLINE(  77)			this->m_bodyList = edge->nextBody;
            		}
HXLINE(  78)		if (hx::IsEq( body->m_controllerList,edge )) {
HXLINE(  79)			body->m_controllerList = edge->nextController;
            		}
HXLINE(  80)		body->m_controllerCount--;
HXLINE(  81)		this->m_bodyCount--;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Controller_obj,removeBody,(void))

void B2Controller_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_06c287cc3c64f6a2_88_clear)
HXDLIN(  88)		while(hx::IsNotNull( this->m_bodyList )){
HXLINE(  89)			this->removeBody(this->m_bodyList->body);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Controller_obj,clear,(void))

 ::box2D::dynamics::controllers::B2Controller B2Controller_obj::getNext(){
            	HX_STACKFRAME(&_hx_pos_06c287cc3c64f6a2_92_getNext)
HXDLIN(  92)		return this->m_next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Controller_obj,getNext,return )

 ::box2D::dynamics::B2World B2Controller_obj::getWorld(){
            	HX_STACKFRAME(&_hx_pos_06c287cc3c64f6a2_93_getWorld)
HXDLIN(  93)		return this->m_world;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Controller_obj,getWorld,return )

 ::box2D::dynamics::controllers::B2ControllerEdge B2Controller_obj::getBodyList(){
            	HX_STACKFRAME(&_hx_pos_06c287cc3c64f6a2_97_getBodyList)
HXDLIN(  97)		return this->m_bodyList;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Controller_obj,getBodyList,return )


B2Controller_obj::B2Controller_obj()
{
}

void B2Controller_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Controller);
	HX_MARK_MEMBER_NAME(m_next,"m_next");
	HX_MARK_MEMBER_NAME(m_prev,"m_prev");
	HX_MARK_MEMBER_NAME(m_bodyList,"m_bodyList");
	HX_MARK_MEMBER_NAME(m_bodyCount,"m_bodyCount");
	HX_MARK_MEMBER_NAME(m_world,"m_world");
	HX_MARK_END_CLASS();
}

void B2Controller_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_next,"m_next");
	HX_VISIT_MEMBER_NAME(m_prev,"m_prev");
	HX_VISIT_MEMBER_NAME(m_bodyList,"m_bodyList");
	HX_VISIT_MEMBER_NAME(m_bodyCount,"m_bodyCount");
	HX_VISIT_MEMBER_NAME(m_world,"m_world");
}

hx::Val B2Controller_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_next") ) { return hx::Val( m_next ); }
		if (HX_FIELD_EQ(inName,"m_prev") ) { return hx::Val( m_prev ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addBody") ) { return hx::Val( addBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNext") ) { return hx::Val( getNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_world") ) { return hx::Val( m_world ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getWorld") ) { return hx::Val( getWorld_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeBody") ) { return hx::Val( removeBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_bodyList") ) { return hx::Val( m_bodyList ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getBodyList") ) { return hx::Val( getBodyList_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_bodyCount") ) { return hx::Val( m_bodyCount ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2Controller_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"m_next") ) { m_next=inValue.Cast<  ::box2D::dynamics::controllers::B2Controller >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_prev") ) { m_prev=inValue.Cast<  ::box2D::dynamics::controllers::B2Controller >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_world") ) { m_world=inValue.Cast<  ::box2D::dynamics::B2World >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_bodyList") ) { m_bodyList=inValue.Cast<  ::box2D::dynamics::controllers::B2ControllerEdge >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_bodyCount") ) { m_bodyCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2Controller_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90"));
	outFields->push(HX_HCSTRING("m_prev","\x45","\x2f","\x56","\x92"));
	outFields->push(HX_HCSTRING("m_bodyList","\x72","\xbd","\x21","\xee"));
	outFields->push(HX_HCSTRING("m_bodyCount","\x3b","\x95","\xc1","\x44"));
	outFields->push(HX_HCSTRING("m_world","\xc0","\x6d","\xef","\x7e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Controller_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::dynamics::controllers::B2Controller*/ ,(int)offsetof(B2Controller_obj,m_next),HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90")},
	{hx::fsObject /*::box2D::dynamics::controllers::B2Controller*/ ,(int)offsetof(B2Controller_obj,m_prev),HX_HCSTRING("m_prev","\x45","\x2f","\x56","\x92")},
	{hx::fsObject /*::box2D::dynamics::controllers::B2ControllerEdge*/ ,(int)offsetof(B2Controller_obj,m_bodyList),HX_HCSTRING("m_bodyList","\x72","\xbd","\x21","\xee")},
	{hx::fsInt,(int)offsetof(B2Controller_obj,m_bodyCount),HX_HCSTRING("m_bodyCount","\x3b","\x95","\xc1","\x44")},
	{hx::fsObject /*::box2D::dynamics::B2World*/ ,(int)offsetof(B2Controller_obj,m_world),HX_HCSTRING("m_world","\xc0","\x6d","\xef","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2Controller_obj_sStaticStorageInfo = 0;
#endif

static ::String B2Controller_obj_sMemberFields[] = {
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("addBody","\x63","\xbd","\x58","\x7d"),
	HX_HCSTRING("removeBody","\x06","\xb5","\x3a","\xbe"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("getNext","\xa9","\x34","\x85","\x1b"),
	HX_HCSTRING("getWorld","\xdc","\xa5","\x3b","\x2e"),
	HX_HCSTRING("getBodyList","\xd6","\x7e","\xca","\xec"),
	HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90"),
	HX_HCSTRING("m_prev","\x45","\x2f","\x56","\x92"),
	HX_HCSTRING("m_bodyList","\x72","\xbd","\x21","\xee"),
	HX_HCSTRING("m_bodyCount","\x3b","\x95","\xc1","\x44"),
	HX_HCSTRING("m_world","\xc0","\x6d","\xef","\x7e"),
	::String(null()) };

static void B2Controller_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Controller_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Controller_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Controller_obj::__mClass,"__mClass");
};

#endif

hx::Class B2Controller_obj::__mClass;

void B2Controller_obj::__register()
{
	hx::Object *dummy = new B2Controller_obj;
	B2Controller_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.controllers.B2Controller","\x6c","\x0c","\x61","\x96");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2Controller_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Controller_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Controller_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Controller_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Controller_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Controller_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace controllers
