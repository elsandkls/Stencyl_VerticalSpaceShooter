// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTreeNode
#include <box2D/collision/B2DynamicTreeNode.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastInput
#include <box2D/collision/B2RayCastInput.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastOutput
#include <box2D/collision/B2RayCastOutput.h>
#endif
#ifndef INCLUDED_box2D_collision_IBroadPhase
#include <box2D/collision/IBroadPhase.h>
#endif
#ifndef INCLUDED_box2D_collision_QueryCallback
#include <box2D/collision/QueryCallback.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2CircleShape
#include <box2D/collision/shapes/B2CircleShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2EdgeShape
#include <box2D/collision/shapes/B2EdgeShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2PolygonShape
#include <box2D/collision/shapes/B2PolygonShape.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_B2Color
#include <box2D/common/B2Color.h>
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_AABBQueryCallback
#include <box2D/dynamics/AABBQueryCallback.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2BodyDef
#include <box2D/dynamics/B2BodyDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactFilter
#include <box2D/dynamics/B2ContactFilter.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactListener
#include <box2D/dynamics/B2ContactListener.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactManager
#include <box2D/dynamics/B2ContactManager.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2DebugDraw
#include <box2D/dynamics/B2DebugDraw.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2DestructionListener
#include <box2D/dynamics/B2DestructionListener.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Island
#include <box2D/dynamics/B2Island.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2TimeStep
#include <box2D/dynamics/B2TimeStep.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2World
#include <box2D/dynamics/B2World.h>
#endif
#ifndef INCLUDED_box2D_dynamics_PointQueryCallback
#include <box2D/dynamics/PointQueryCallback.h>
#endif
#ifndef INCLUDED_box2D_dynamics_ShapeQueryCallback
#include <box2D/dynamics/ShapeQueryCallback.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactEdge
#include <box2D/dynamics/contacts/B2ContactEdge.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactSolver
#include <box2D/dynamics/contacts/B2ContactSolver.h>
#endif
#ifndef INCLUDED_box2D_dynamics_controllers_B2Controller
#include <box2D/dynamics/controllers/B2Controller.h>
#endif
#ifndef INCLUDED_box2D_dynamics_controllers_B2ControllerEdge
#include <box2D/dynamics/controllers/B2ControllerEdge.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2Joint
#include <box2D/dynamics/joints/B2Joint.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointDef
#include <box2D/dynamics/joints/B2JointDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2JointEdge
#include <box2D/dynamics/joints/B2JointEdge.h>
#endif
#ifndef INCLUDED_box2D_dynamics_joints_B2PulleyJoint
#include <box2D/dynamics/joints/B2PulleyJoint.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_54_new,"box2D.dynamics.B2World","new",0x65902e8b,"box2D.dynamics.B2World.new","box2D/dynamics/B2World.hx",54,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_107_setDestructionListener,"box2D.dynamics.B2World","setDestructionListener",0xd9d957b9,"box2D.dynamics.B2World.setDestructionListener","box2D/dynamics/B2World.hx",107,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_115_setContactFilter,"box2D.dynamics.B2World","setContactFilter",0xb7a0406b,"box2D.dynamics.B2World.setContactFilter","box2D/dynamics/B2World.hx",115,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_122_setContactListener,"box2D.dynamics.B2World","setContactListener",0x342cf3e7,"box2D.dynamics.B2World.setContactListener","box2D/dynamics/B2World.hx",122,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_131_setDebugDraw,"box2D.dynamics.B2World","setDebugDraw",0x01d5946a,"box2D.dynamics.B2World.setDebugDraw","box2D/dynamics/B2World.hx",131,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_140_setBroadPhase,"box2D.dynamics.B2World","setBroadPhase",0x25bcedc6,"box2D.dynamics.B2World.setBroadPhase","box2D/dynamics/B2World.hx",140,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_161_validate,"box2D.dynamics.B2World","validate",0xe36b368b,"box2D.dynamics.B2World.validate","box2D/dynamics/B2World.hx",161,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_169_getProxyCount,"box2D.dynamics.B2World","getProxyCount",0x0f2ff5a2,"box2D.dynamics.B2World.getProxyCount","box2D/dynamics/B2World.hx",169,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_177_createBody,"box2D.dynamics.B2World","createBody",0x6f4dc8f3,"box2D.dynamics.B2World.createBody","box2D/dynamics/B2World.hx",177,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_208_destroyBody,"box2D.dynamics.B2World","destroyBody",0xb384d9e7,"box2D.dynamics.B2World.destroyBody","box2D/dynamics/B2World.hx",208,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_300_createJoint,"box2D.dynamics.B2World","createJoint",0x8ffa71d9,"box2D.dynamics.B2World.createJoint","box2D/dynamics/B2World.hx",300,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_361_destroyJoint,"box2D.dynamics.B2World","destroyJoint",0xfbf23665,"box2D.dynamics.B2World.destroyJoint","box2D/dynamics/B2World.hx",361,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_457_addController,"box2D.dynamics.B2World","addController",0x8801c408,"box2D.dynamics.B2World.addController","box2D/dynamics/B2World.hx",457,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_470_removeController,"box2D.dynamics.B2World","removeController",0x1b6598f5,"box2D.dynamics.B2World.removeController","box2D/dynamics/B2World.hx",470,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_483_createController,"box2D.dynamics.B2World","createController",0x96e9f9ad,"box2D.dynamics.B2World.createController","box2D/dynamics/B2World.hx",483,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_501_destroyController,"box2D.dynamics.B2World","destroyController",0x584239a1,"box2D.dynamics.B2World.destroyController","box2D/dynamics/B2World.hx",501,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_516_setWarmStarting,"box2D.dynamics.B2World","setWarmStarting",0xc5efb292,"box2D.dynamics.B2World.setWarmStarting","box2D/dynamics/B2World.hx",516,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_521_setContinuousPhysics,"box2D.dynamics.B2World","setContinuousPhysics",0xb88a9aeb,"box2D.dynamics.B2World.setContinuousPhysics","box2D/dynamics/B2World.hx",521,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_528_getBodyCount,"box2D.dynamics.B2World","getBodyCount",0xd18c0fcc,"box2D.dynamics.B2World.getBodyCount","box2D/dynamics/B2World.hx",528,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_536_getJointCount,"box2D.dynamics.B2World","getJointCount",0x1dcecd46,"box2D.dynamics.B2World.getJointCount","box2D/dynamics/B2World.hx",536,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_544_getContactCount,"box2D.dynamics.B2World","getContactCount",0x5a4c7e70,"box2D.dynamics.B2World.getContactCount","box2D/dynamics/B2World.hx",544,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_552_setGravity,"box2D.dynamics.B2World","setGravity",0xe6832001,"box2D.dynamics.B2World.setGravity","box2D/dynamics/B2World.hx",552,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_559_getGravity,"box2D.dynamics.B2World","getGravity",0xe305818d,"box2D.dynamics.B2World.getGravity","box2D/dynamics/B2World.hx",559,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_567_getGroundBody,"box2D.dynamics.B2World","getGroundBody",0x4c5a56ea,"box2D.dynamics.B2World.getGroundBody","box2D/dynamics/B2World.hx",567,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_578_step,"box2D.dynamics.B2World","step",0x7bf1eec1,"box2D.dynamics.B2World.step","box2D/dynamics/B2World.hx",578,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_633_clearForces,"box2D.dynamics.B2World","clearForces",0xa5cb0ac0,"box2D.dynamics.B2World.clearForces","box2D/dynamics/B2World.hx",633,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_647_drawDebugData,"box2D.dynamics.B2World","drawDebugData",0x9dcfef64,"box2D.dynamics.B2World.drawDebugData","box2D/dynamics/B2World.hx",647,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_805_queryAABB,"box2D.dynamics.B2World","queryAABB",0xebdaea13,"box2D.dynamics.B2World.queryAABB","box2D/dynamics/B2World.hx",805,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_819_queryShape,"box2D.dynamics.B2World","queryShape",0xeac7582e,"box2D.dynamics.B2World.queryShape","box2D/dynamics/B2World.hx",819,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_843_queryPoint,"box2D.dynamics.B2World","queryPoint",0x353a295d,"box2D.dynamics.B2World.queryPoint","box2D/dynamics/B2World.hx",843,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_879_rayCast,"box2D.dynamics.B2World","rayCast",0x453aad74,"box2D.dynamics.B2World.rayCast","box2D/dynamics/B2World.hx",879,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_875_rayCast,"box2D.dynamics.B2World","rayCast",0x453aad74,"box2D.dynamics.B2World.rayCast","box2D/dynamics/B2World.hx",875,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_901_rayCastOne,"box2D.dynamics.B2World","rayCastOne",0xe1d88552,"box2D.dynamics.B2World.rayCastOne","box2D/dynamics/B2World.hx",901,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_898_rayCastOne,"box2D.dynamics.B2World","rayCastOne",0xe1d88552,"box2D.dynamics.B2World.rayCastOne","box2D/dynamics/B2World.hx",898,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_913_rayCastAll,"box2D.dynamics.B2World","rayCastAll",0xe1cde40d,"box2D.dynamics.B2World.rayCastAll","box2D/dynamics/B2World.hx",913,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_910_rayCastAll,"box2D.dynamics.B2World","rayCastAll",0xe1cde40d,"box2D.dynamics.B2World.rayCastAll","box2D/dynamics/B2World.hx",910,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_927_getBodyList,"box2D.dynamics.B2World","getBodyList",0x01218001,"box2D.dynamics.B2World.getBodyList","box2D/dynamics/B2World.hx",927,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_936_getJointList,"box2D.dynamics.B2World","getJointList",0xf28c8fc7,"box2D.dynamics.B2World.getJointList","box2D/dynamics/B2World.hx",936,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_947_getContactList,"box2D.dynamics.B2World","getContactList",0x622cb1dd,"box2D.dynamics.B2World.getContactList","box2D/dynamics/B2World.hx",947,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_955_isLocked,"box2D.dynamics.B2World","isLocked",0x90b80689,"box2D.dynamics.B2World.isLocked","box2D/dynamics/B2World.hx",955,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_963_solve,"box2D.dynamics.B2World","solve",0xf4763e6a,"box2D.dynamics.B2World.solve","box2D/dynamics/B2World.hx",963,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1211_solveTOI,"box2D.dynamics.B2World","solveTOI",0xfad52244,"box2D.dynamics.B2World.solveTOI","box2D/dynamics/B2World.hx",1211,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1585_drawJoint,"box2D.dynamics.B2World","drawJoint",0xf2253f11,"box2D.dynamics.B2World.drawJoint","box2D/dynamics/B2World.hx",1585,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1628_drawShape,"box2D.dynamics.B2World","drawShape",0x1c19e8e8,"box2D.dynamics.B2World.drawShape","box2D/dynamics/B2World.hx",1628,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1673_setScreenBounds,"box2D.dynamics.B2World","setScreenBounds",0x1697d46e,"box2D.dynamics.B2World.setScreenBounds","box2D/dynamics/B2World.hx",1673,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1677_getScreenBounds,"box2D.dynamics.B2World","getScreenBounds",0x1acc5762,"box2D.dynamics.B2World.getScreenBounds","box2D/dynamics/B2World.hx",1677,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_570_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",570,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_643_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",643,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1206_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",1206,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1207_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",1207,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1208_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",1208,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1209_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",1209,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1583_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",1583,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1713_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",1713,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1716_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",1716,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1719_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",1719,0xb09d3b25)
HX_LOCAL_STACK_FRAME(_hx_pos_9ecf9649aee0ceb2_1720_boot,"box2D.dynamics.B2World","boot",0x70b18ba7,"box2D.dynamics.B2World.boot","box2D/dynamics/B2World.hx",1720,0xb09d3b25)
namespace box2D{
namespace dynamics{

void B2World_obj::__construct( ::box2D::common::math::B2Vec2 gravity,bool doSleep){
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_54_new)
HXLINE(1724)		this->pointQueryCallback =  ::box2D::dynamics::PointQueryCallback_obj::__alloc( HX_CTX );
HXLINE(1723)		this->shapeQueryCallback =  ::box2D::dynamics::ShapeQueryCallback_obj::__alloc( HX_CTX );
HXLINE(1722)		this->aabbQueryCallback =  ::box2D::dynamics::AABBQueryCallback_obj::__alloc( HX_CTX );
HXLINE(  64)		this->s_stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(  65)		this->m_contactManager =  ::box2D::dynamics::B2ContactManager_obj::__alloc( HX_CTX );
HXLINE(  66)		this->m_contactSolver =  ::box2D::dynamics::contacts::B2ContactSolver_obj::__alloc( HX_CTX );
HXLINE(  67)		this->m_island =  ::box2D::dynamics::B2Island_obj::__alloc( HX_CTX );
HXLINE(  69)		this->m_destructionListener = null();
HXLINE(  70)		this->m_debugDraw = null();
HXLINE(  72)		this->m_bodyList = null();
HXLINE(  73)		this->m_contactList = null();
HXLINE(  74)		this->m_jointList = null();
HXLINE(  75)		this->m_controllerList = null();
HXLINE(  77)		this->m_bodyCount = (int)0;
HXLINE(  78)		this->m_contactCount = (int)0;
HXLINE(  79)		this->m_jointCount = (int)0;
HXLINE(  80)		this->m_controllerCount = (int)0;
HXLINE(  82)		::box2D::dynamics::B2World_obj::m_warmStarting = true;
HXLINE(  83)		::box2D::dynamics::B2World_obj::m_continuousPhysics = false;
HXLINE(  85)		this->m_allowSleep = doSleep;
HXLINE(  86)		this->m_gravity = gravity;
HXLINE(  88)		this->m_inv_dt0 = ((Float)0.0);
HXLINE(  90)		this->m_flags = (int)0;
HXLINE(  92)		this->m_contactManager->m_world = hx::ObjectPtr<OBJ_>(this);
HXLINE(  94)		 ::box2D::dynamics::B2BodyDef bd =  ::box2D::dynamics::B2BodyDef_obj::__alloc( HX_CTX );
HXLINE(  95)		this->m_groundBody = this->createBody(bd);
            	}

Dynamic B2World_obj::__CreateEmpty() { return new B2World_obj; }

void *B2World_obj::_hx_vtable = 0;

Dynamic B2World_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2World_obj > _hx_result = new B2World_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool B2World_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1578f655;
}

void B2World_obj::setDestructionListener( ::box2D::dynamics::B2DestructionListener listener){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_107_setDestructionListener)
HXDLIN( 107)		this->m_destructionListener = listener;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,setDestructionListener,(void))

void B2World_obj::setContactFilter( ::box2D::dynamics::B2ContactFilter filter){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_115_setContactFilter)
HXDLIN( 115)		this->m_contactManager->m_contactFilter = filter;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,setContactFilter,(void))

void B2World_obj::setContactListener( ::box2D::dynamics::B2ContactListener listener){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_122_setContactListener)
HXDLIN( 122)		this->m_contactManager->m_contactListener = listener;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,setContactListener,(void))

void B2World_obj::setDebugDraw( ::box2D::dynamics::B2DebugDraw debugDraw){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_131_setDebugDraw)
HXDLIN( 131)		this->m_debugDraw = debugDraw;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,setDebugDraw,(void))

void B2World_obj::setBroadPhase(::Dynamic broadPhase){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_140_setBroadPhase)
HXLINE( 141)		::Dynamic oldBroadPhase = this->m_contactManager->m_broadPhase;
HXLINE( 142)		this->m_contactManager->m_broadPhase = broadPhase;
HXLINE( 143)		 ::box2D::dynamics::B2Body b = this->m_bodyList;
HXLINE( 144)		while(hx::IsNotNull( b )){
HXLINE( 146)			 ::box2D::dynamics::B2Fixture f = b->m_fixtureList;
HXLINE( 147)			while(hx::IsNotNull( f )){
HXLINE( 149)				f->m_proxy = ::box2D::collision::IBroadPhase_obj::createProxy(broadPhase,::box2D::collision::IBroadPhase_obj::getFatAABB(oldBroadPhase,f->m_proxy),f);
HXLINE( 150)				f = f->m_next;
            			}
HXLINE( 152)			b = b->m_next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,setBroadPhase,(void))

void B2World_obj::validate(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_161_validate)
HXDLIN( 161)		::box2D::collision::IBroadPhase_obj::validate(this->m_contactManager->m_broadPhase);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,validate,(void))

int B2World_obj::getProxyCount(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_169_getProxyCount)
HXDLIN( 169)		return ::box2D::collision::IBroadPhase_obj::getProxyCount(this->m_contactManager->m_broadPhase);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getProxyCount,return )

 ::box2D::dynamics::B2Body B2World_obj::createBody( ::box2D::dynamics::B2BodyDef def){
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_177_createBody)
HXLINE( 180)		if ((this->isLocked() == true)) {
HXLINE( 182)			return null();
            		}
HXLINE( 186)		 ::box2D::dynamics::B2Body b =  ::box2D::dynamics::B2Body_obj::__alloc( HX_CTX ,def,hx::ObjectPtr<OBJ_>(this));
HXLINE( 189)		b->m_prev = null();
HXLINE( 190)		b->m_next = this->m_bodyList;
HXLINE( 191)		if (hx::IsNotNull( this->m_bodyList )) {
HXLINE( 193)			this->m_bodyList->m_prev = b;
            		}
HXLINE( 195)		this->m_bodyList = b;
HXLINE( 196)		++this->m_bodyCount;
HXLINE( 198)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,createBody,return )

void B2World_obj::destroyBody( ::box2D::dynamics::B2Body b){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_208_destroyBody)
HXLINE( 212)		if ((this->isLocked() == true)) {
HXLINE( 214)			return;
            		}
HXLINE( 218)		 ::box2D::dynamics::joints::B2JointEdge jn = b->m_jointList;
HXLINE( 219)		while(hx::IsNotNull( jn )){
HXLINE( 221)			 ::box2D::dynamics::joints::B2JointEdge jn0 = jn;
HXLINE( 222)			jn = jn->next;
HXLINE( 224)			if (hx::IsNotNull( this->m_destructionListener )) {
HXLINE( 226)				this->m_destructionListener->sayGoodbyeJoint(jn0->joint);
            			}
HXLINE( 229)			this->destroyJoint(jn0->joint);
            		}
HXLINE( 233)		 ::box2D::dynamics::controllers::B2ControllerEdge coe = b->m_controllerList;
HXLINE( 234)		while(hx::IsNotNull( coe )){
HXLINE( 236)			 ::box2D::dynamics::controllers::B2ControllerEdge coe0 = coe;
HXLINE( 237)			coe = coe->nextController;
HXLINE( 238)			coe0->controller->removeBody(b);
            		}
HXLINE( 242)		 ::box2D::dynamics::contacts::B2ContactEdge ce = b->m_contactList;
HXLINE( 243)		while(hx::IsNotNull( ce )){
HXLINE( 245)			 ::box2D::dynamics::contacts::B2ContactEdge ce0 = ce;
HXLINE( 246)			ce = ce->next;
HXLINE( 247)			this->m_contactManager->destroy(ce0->contact);
            		}
HXLINE( 249)		b->m_contactList = null();
HXLINE( 253)		 ::box2D::dynamics::B2Fixture f = b->m_fixtureList;
HXLINE( 254)		while(hx::IsNotNull( f )){
HXLINE( 256)			 ::box2D::dynamics::B2Fixture f0 = f;
HXLINE( 257)			f = f->m_next;
HXLINE( 259)			if (hx::IsNotNull( this->m_destructionListener )) {
HXLINE( 261)				this->m_destructionListener->sayGoodbyeFixture(f0);
            			}
HXLINE( 264)			f0->destroyProxy(this->m_contactManager->m_broadPhase);
HXLINE( 265)			f0->destroy();
            		}
HXLINE( 270)		b->m_fixtureList = null();
HXLINE( 271)		b->m_fixtureCount = (int)0;
HXLINE( 274)		if (hx::IsNotNull( b->m_prev )) {
HXLINE( 276)			b->m_prev->m_next = b->m_next;
            		}
HXLINE( 279)		if (hx::IsNotNull( b->m_next )) {
HXLINE( 281)			b->m_next->m_prev = b->m_prev;
            		}
HXLINE( 284)		if (hx::IsEq( b,this->m_bodyList )) {
HXLINE( 286)			this->m_bodyList = b->m_next;
            		}
HXLINE( 289)		--this->m_bodyCount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,destroyBody,(void))

 ::box2D::dynamics::joints::B2Joint B2World_obj::createJoint( ::box2D::dynamics::joints::B2JointDef def){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_300_createJoint)
HXLINE( 304)		 ::box2D::dynamics::joints::B2Joint j = ::box2D::dynamics::joints::B2Joint_obj::create(def,null());
HXLINE( 307)		j->m_prev = null();
HXLINE( 308)		j->m_next = this->m_jointList;
HXLINE( 309)		if (hx::IsNotNull( this->m_jointList )) {
HXLINE( 311)			this->m_jointList->m_prev = j;
            		}
HXLINE( 313)		this->m_jointList = j;
HXLINE( 314)		++this->m_jointCount;
HXLINE( 317)		j->m_edgeA->joint = j;
HXLINE( 318)		j->m_edgeA->other = j->m_bodyB;
HXLINE( 319)		j->m_edgeA->prev = null();
HXLINE( 320)		j->m_edgeA->next = j->m_bodyA->m_jointList;
HXLINE( 321)		if (hx::IsNotNull( j->m_bodyA->m_jointList )) {
HXLINE( 321)			j->m_bodyA->m_jointList->prev = j->m_edgeA;
            		}
HXLINE( 322)		j->m_bodyA->m_jointList = j->m_edgeA;
HXLINE( 324)		j->m_edgeB->joint = j;
HXLINE( 325)		j->m_edgeB->other = j->m_bodyA;
HXLINE( 326)		j->m_edgeB->prev = null();
HXLINE( 327)		j->m_edgeB->next = j->m_bodyB->m_jointList;
HXLINE( 328)		if (hx::IsNotNull( j->m_bodyB->m_jointList )) {
HXLINE( 328)			j->m_bodyB->m_jointList->prev = j->m_edgeB;
            		}
HXLINE( 329)		j->m_bodyB->m_jointList = j->m_edgeB;
HXLINE( 331)		 ::box2D::dynamics::B2Body bodyA = def->bodyA;
HXLINE( 332)		 ::box2D::dynamics::B2Body bodyB = def->bodyB;
HXLINE( 335)		if ((def->collideConnected == false)) {
HXLINE( 337)			 ::box2D::dynamics::contacts::B2ContactEdge edge = bodyB->getContactList();
HXLINE( 338)			while(hx::IsNotNull( edge )){
HXLINE( 340)				if (hx::IsEq( edge->other,bodyA )) {
HXLINE( 344)					edge->contact->flagForFiltering();
            				}
HXLINE( 347)				edge = edge->next;
            			}
            		}
HXLINE( 353)		return j;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,createJoint,return )

void B2World_obj::destroyJoint( ::box2D::dynamics::joints::B2Joint j){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_361_destroyJoint)
HXLINE( 365)		bool collideConnected = j->m_collideConnected;
HXLINE( 368)		if (hx::IsNotNull( j->m_prev )) {
HXLINE( 370)			j->m_prev->m_next = j->m_next;
            		}
HXLINE( 373)		if (hx::IsNotNull( j->m_next )) {
HXLINE( 375)			j->m_next->m_prev = j->m_prev;
            		}
HXLINE( 378)		if (hx::IsEq( j,this->m_jointList )) {
HXLINE( 380)			this->m_jointList = j->m_next;
            		}
HXLINE( 384)		 ::box2D::dynamics::B2Body bodyA = j->m_bodyA;
HXLINE( 385)		 ::box2D::dynamics::B2Body bodyB = j->m_bodyB;
HXLINE( 388)		bodyA->setAwake(true);
HXLINE( 389)		bodyB->setAwake(true);
HXLINE( 392)		if (hx::IsNotNull( j->m_edgeA->prev )) {
HXLINE( 394)			j->m_edgeA->prev->next = j->m_edgeA->next;
            		}
HXLINE( 397)		if (hx::IsNotNull( j->m_edgeA->next )) {
HXLINE( 399)			j->m_edgeA->next->prev = j->m_edgeA->prev;
            		}
HXLINE( 402)		if (hx::IsEq( j->m_edgeA,bodyA->m_jointList )) {
HXLINE( 404)			bodyA->m_jointList = j->m_edgeA->next;
            		}
HXLINE( 407)		j->m_edgeA->prev = null();
HXLINE( 408)		j->m_edgeA->next = null();
HXLINE( 411)		if (hx::IsNotNull( j->m_edgeB->prev )) {
HXLINE( 413)			j->m_edgeB->prev->next = j->m_edgeB->next;
            		}
HXLINE( 416)		if (hx::IsNotNull( j->m_edgeB->next )) {
HXLINE( 418)			j->m_edgeB->next->prev = j->m_edgeB->prev;
            		}
HXLINE( 421)		if (hx::IsEq( j->m_edgeB,bodyB->m_jointList )) {
HXLINE( 423)			bodyB->m_jointList = j->m_edgeB->next;
            		}
HXLINE( 426)		j->m_edgeB->prev = null();
HXLINE( 427)		j->m_edgeB->next = null();
HXLINE( 429)		::box2D::dynamics::joints::B2Joint_obj::destroy(j,null());
HXLINE( 432)		--this->m_jointCount;
HXLINE( 435)		if ((collideConnected == false)) {
HXLINE( 437)			 ::box2D::dynamics::contacts::B2ContactEdge edge = bodyB->getContactList();
HXLINE( 438)			while(hx::IsNotNull( edge )){
HXLINE( 440)				if (hx::IsEq( edge->other,bodyA )) {
HXLINE( 444)					edge->contact->flagForFiltering();
            				}
HXLINE( 447)				edge = edge->next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,destroyJoint,(void))

 ::box2D::dynamics::controllers::B2Controller B2World_obj::addController( ::box2D::dynamics::controllers::B2Controller c){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_457_addController)
HXLINE( 458)		c->m_next = this->m_controllerList;
HXLINE( 459)		c->m_prev = null();
HXLINE( 460)		this->m_controllerList = c;
HXLINE( 462)		c->m_world = hx::ObjectPtr<OBJ_>(this);
HXLINE( 464)		this->m_controllerCount++;
HXLINE( 466)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,addController,return )

void B2World_obj::removeController( ::box2D::dynamics::controllers::B2Controller c){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_470_removeController)
HXLINE( 472)		if (hx::IsNotNull( c->m_prev )) {
HXLINE( 473)			c->m_prev->m_next = c->m_next;
            		}
HXLINE( 474)		if (hx::IsNotNull( c->m_next )) {
HXLINE( 475)			c->m_next->m_prev = c->m_prev;
            		}
HXLINE( 476)		if (hx::IsEq( this->m_controllerList,c )) {
HXLINE( 477)			this->m_controllerList = c->m_next;
            		}
HXLINE( 479)		this->m_controllerCount--;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,removeController,(void))

 ::box2D::dynamics::controllers::B2Controller B2World_obj::createController( ::box2D::dynamics::controllers::B2Controller controller){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_483_createController)
HXLINE( 484)		if (hx::IsNotEq( controller->m_world,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 485)			HX_STACK_DO_THROW(HX_("Controller can only be a member of one world",b9,a1,b6,79));
            		}
HXLINE( 488)		controller->m_next = this->m_controllerList;
HXLINE( 489)		controller->m_prev = null();
HXLINE( 490)		if (hx::IsNotNull( this->m_controllerList )) {
HXLINE( 491)			this->m_controllerList->m_prev = controller;
            		}
HXLINE( 492)		this->m_controllerList = controller;
HXLINE( 493)		++this->m_controllerCount;
HXLINE( 495)		controller->m_world = hx::ObjectPtr<OBJ_>(this);
HXLINE( 497)		return controller;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,createController,return )

void B2World_obj::destroyController( ::box2D::dynamics::controllers::B2Controller controller){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_501_destroyController)
HXLINE( 503)		controller->clear();
HXLINE( 504)		if (hx::IsNotNull( controller->m_next )) {
HXLINE( 505)			controller->m_next->m_prev = controller->m_prev;
            		}
HXLINE( 506)		if (hx::IsNotNull( controller->m_prev )) {
HXLINE( 507)			controller->m_prev->m_next = controller->m_next;
            		}
HXLINE( 508)		if (hx::IsEq( controller,this->m_controllerList )) {
HXLINE( 509)			this->m_controllerList = controller->m_next;
            		}
HXLINE( 510)		--this->m_controllerCount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,destroyController,(void))

void B2World_obj::setWarmStarting(bool flag){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_516_setWarmStarting)
HXDLIN( 516)		::box2D::dynamics::B2World_obj::m_warmStarting = flag;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,setWarmStarting,(void))

void B2World_obj::setContinuousPhysics(bool flag){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_521_setContinuousPhysics)
HXDLIN( 521)		::box2D::dynamics::B2World_obj::m_continuousPhysics = flag;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,setContinuousPhysics,(void))

int B2World_obj::getBodyCount(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_528_getBodyCount)
HXDLIN( 528)		return this->m_bodyCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getBodyCount,return )

int B2World_obj::getJointCount(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_536_getJointCount)
HXDLIN( 536)		return this->m_jointCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getJointCount,return )

int B2World_obj::getContactCount(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_544_getContactCount)
HXDLIN( 544)		return this->m_contactCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getContactCount,return )

void B2World_obj::setGravity( ::box2D::common::math::B2Vec2 gravity){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_552_setGravity)
HXDLIN( 552)		this->m_gravity = gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,setGravity,(void))

 ::box2D::common::math::B2Vec2 B2World_obj::getGravity(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_559_getGravity)
HXDLIN( 559)		return this->m_gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getGravity,return )

 ::box2D::dynamics::B2Body B2World_obj::getGroundBody(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_567_getGroundBody)
HXDLIN( 567)		return this->m_groundBody;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getGroundBody,return )

void B2World_obj::step(Float dt,int velocityIterations,int positionIterations){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_578_step)
HXLINE( 579)		::box2D::common::math::B2Vec2_obj::freePool();
HXLINE( 581)		if ((((int)this->m_flags & (int)::box2D::dynamics::B2World_obj::e_newFixture) != (int)0)) {
HXLINE( 583)			this->m_contactManager->findNewContacts();
HXLINE( 584)			 ::box2D::dynamics::B2World _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 584)			_hx_tmp->m_flags = ((int)_hx_tmp->m_flags & (int)~(::box2D::dynamics::B2World_obj::e_newFixture));
            		}
HXLINE( 587)		 ::box2D::dynamics::B2World _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 587)		_hx_tmp1->m_flags = ((int)_hx_tmp1->m_flags | (int)::box2D::dynamics::B2World_obj::e_locked);
HXLINE( 589)		 ::box2D::dynamics::B2TimeStep step = ::box2D::dynamics::B2World_obj::s_timestep2;
HXLINE( 590)		step->dt = dt;
HXLINE( 591)		step->velocityIterations = velocityIterations;
HXLINE( 592)		step->positionIterations = positionIterations;
HXLINE( 593)		if ((dt > ((Float)0.0))) {
HXLINE( 595)			step->inv_dt = ((Float)((Float)1.0) / (Float)dt);
            		}
            		else {
HXLINE( 599)			step->inv_dt = ((Float)0.0);
            		}
HXLINE( 602)		step->dtRatio = (this->m_inv_dt0 * dt);
HXLINE( 604)		step->warmStarting = ::box2D::dynamics::B2World_obj::m_warmStarting;
HXLINE( 607)		this->m_contactManager->collide();
HXLINE( 610)		if ((step->dt > ((Float)0.0))) {
HXLINE( 612)			this->solve(step);
            		}
HXLINE( 616)		bool _hx_tmp2;
HXDLIN( 616)		if (::box2D::dynamics::B2World_obj::m_continuousPhysics) {
HXLINE( 616)			_hx_tmp2 = (step->dt > ((Float)0.0));
            		}
            		else {
HXLINE( 616)			_hx_tmp2 = false;
            		}
HXDLIN( 616)		if (_hx_tmp2) {
HXLINE( 618)			this->solveTOI(step);
            		}
HXLINE( 621)		if ((step->dt > ((Float)0.0))) {
HXLINE( 623)			this->m_inv_dt0 = step->inv_dt;
            		}
HXLINE( 625)		 ::box2D::dynamics::B2World _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 625)		_hx_tmp3->m_flags = ((int)_hx_tmp3->m_flags & (int)~(::box2D::dynamics::B2World_obj::e_locked));
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2World_obj,step,(void))

void B2World_obj::clearForces(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_633_clearForces)
HXLINE( 634)		 ::box2D::dynamics::B2Body body = this->m_bodyList;
HXLINE( 635)		while(hx::IsNotNull( body )){
HXLINE( 637)			{
HXLINE( 637)				 ::box2D::common::math::B2Vec2 _this = body->m_force;
HXDLIN( 637)				_this->x = ((Float)0.0);
HXDLIN( 637)				_this->y = ((Float)0.0);
            			}
HXLINE( 638)			body->m_torque = ((Float)0.0);
HXLINE( 639)			body = body->m_next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,clearForces,(void))

void B2World_obj::drawDebugData(){
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_647_drawDebugData)
HXLINE( 648)		if (hx::IsNull( this->m_debugDraw )) {
HXLINE( 650)			return;
            		}
HXLINE( 653)		this->m_debugDraw->m_sprite->get_graphics()->clear();
HXLINE( 655)		int flags = this->m_debugDraw->getFlags();
HXLINE( 657)		int i;
HXLINE( 658)		 ::box2D::dynamics::B2Body b;
HXLINE( 659)		 ::box2D::dynamics::B2Fixture f;
HXLINE( 660)		 ::box2D::collision::shapes::B2Shape s;
HXLINE( 661)		 ::box2D::dynamics::joints::B2Joint j;
HXLINE( 662)		::Dynamic bp;
HXLINE( 663)		 ::box2D::common::math::B2Vec2 invQ =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 664)		 ::box2D::common::math::B2Vec2 x1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 665)		 ::box2D::common::math::B2Vec2 x2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 666)		 ::box2D::common::math::B2Transform xf;
HXLINE( 667)		 ::box2D::collision::B2AABB b1 =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
HXLINE( 668)		 ::box2D::collision::B2AABB b2 =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
HXLINE( 669)		 ::box2D::common::math::B2Vec2 vs =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 669)		 ::box2D::common::math::B2Vec2 vs1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 669)		 ::box2D::common::math::B2Vec2 vs2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 669)		::Array< ::Dynamic> vs3 = ::Array_obj< ::Dynamic>::__new(4)->init(0,vs)->init(1,vs1)->init(2,vs2)->init(3, ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 672)		 ::box2D::common::B2Color color =  ::box2D::common::B2Color_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0);
HXLINE( 674)		if ((((int)flags & (int)::box2D::dynamics::B2DebugDraw_obj::e_shapeBit) != (int)0)) {
HXLINE( 676)			b = this->m_bodyList;
HXLINE( 677)			while(hx::IsNotNull( b )){
HXLINE( 679)				xf = b->m_xf;
HXLINE( 680)				f = b->getFixtureList();
HXLINE( 681)				while(hx::IsNotNull( f )){
HXLINE( 683)					s = f->getShape();
HXLINE( 684)					if ((b->isActive() == false)) {
HXLINE( 686)						color->set(((Float)0.5),((Float)0.5),((Float)0.3));
HXLINE( 687)						this->drawShape(s,xf,color);
            					}
            					else {
HXLINE( 689)						int _hx_tmp = b->getType();
HXDLIN( 689)						if ((_hx_tmp == ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE( 691)							color->set(((Float)0.5),((Float)0.9),((Float)0.5));
HXLINE( 692)							this->drawShape(s,xf,color);
            						}
            						else {
HXLINE( 694)							int _hx_tmp1 = b->getType();
HXDLIN( 694)							if ((_hx_tmp1 == ::box2D::dynamics::B2Body_obj::b2_kinematicBody)) {
HXLINE( 696)								color->set(((Float)0.5),((Float)0.5),((Float)0.9));
HXLINE( 697)								this->drawShape(s,xf,color);
            							}
            							else {
HXLINE( 699)								if ((b->isAwake() == false)) {
HXLINE( 701)									color->set(((Float)0.6),((Float)0.6),((Float)0.6));
HXLINE( 702)									this->drawShape(s,xf,color);
            								}
            								else {
HXLINE( 706)									color->set(((Float)0.9),((Float)0.7),((Float)0.7));
HXLINE( 707)									this->drawShape(s,xf,color);
            								}
            							}
            						}
            					}
HXLINE( 709)					f = f->m_next;
            				}
HXLINE( 711)				b = b->m_next;
            			}
            		}
HXLINE( 715)		if ((((int)flags & (int)::box2D::dynamics::B2DebugDraw_obj::e_jointBit) != (int)0)) {
HXLINE( 717)			j = this->m_jointList;
HXLINE( 718)			while(hx::IsNotNull( j )){
HXLINE( 720)				this->drawJoint(j);
HXLINE( 721)				j = j->m_next;
            			}
            		}
HXLINE( 725)		if ((((int)flags & (int)::box2D::dynamics::B2DebugDraw_obj::e_controllerBit) != (int)0)) {
HXLINE( 727)			 ::box2D::dynamics::controllers::B2Controller c = this->m_controllerList;
HXLINE( 728)			while(hx::IsNotNull( c )){
HXLINE( 730)				c->draw(this->m_debugDraw);
HXLINE( 731)				c = c->m_next;
            			}
            		}
HXLINE( 735)		if ((((int)flags & (int)::box2D::dynamics::B2DebugDraw_obj::e_pairBit) != (int)0)) {
HXLINE( 737)			color->set(((Float)0.3),((Float)0.9),((Float)0.9));
HXLINE( 738)			 ::box2D::dynamics::contacts::B2Contact contact = this->m_contactManager->m_contactList;
HXLINE( 739)			while(hx::IsNotNull( contact )){
HXLINE( 741)				 ::box2D::dynamics::B2Fixture fixtureA = contact->getFixtureA();
HXLINE( 742)				 ::box2D::dynamics::B2Fixture fixtureB = contact->getFixtureB();
HXLINE( 744)				 ::box2D::common::math::B2Vec2 cA = fixtureA->getAABB()->getCenter();
HXLINE( 745)				 ::box2D::common::math::B2Vec2 cB = fixtureB->getAABB()->getCenter();
HXLINE( 747)				this->m_debugDraw->drawSegment(cA,cB,color);
HXLINE( 748)				contact = contact->getNext();
            			}
            		}
HXLINE( 752)		if ((((int)flags & (int)::box2D::dynamics::B2DebugDraw_obj::e_aabbBit) != (int)0)) {
HXLINE( 754)			bp = this->m_contactManager->m_broadPhase;
HXLINE( 756)			 ::box2D::common::math::B2Vec2 vs4 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 756)			 ::box2D::common::math::B2Vec2 vs5 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 756)			 ::box2D::common::math::B2Vec2 vs6 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 756)			vs3 = ::Array_obj< ::Dynamic>::__new(4)->init(0,vs4)->init(1,vs5)->init(2,vs6)->init(3, ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 758)			b = this->m_bodyList;
HXLINE( 759)			while(hx::IsNotNull( b )){
HXLINE( 761)				if ((b->isActive() == false)) {
HXLINE( 763)					b = b->getNext();
HXLINE( 764)					continue;
            				}
HXLINE( 766)				f = b->getFixtureList();
HXLINE( 767)				while(hx::IsNotNull( f )){
HXLINE( 769)					 ::box2D::collision::B2AABB aabb = ::box2D::collision::IBroadPhase_obj::getFatAABB(bp,f->m_proxy);
HXLINE( 770)					{
HXLINE( 770)						 ::box2D::common::math::B2Vec2 _this = vs3->__get((int)0).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 770)						_this->x = aabb->lowerBound->x;
HXDLIN( 770)						_this->y = aabb->lowerBound->y;
            					}
HXLINE( 771)					{
HXLINE( 771)						 ::box2D::common::math::B2Vec2 _this1 = vs3->__get((int)1).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 771)						_this1->x = aabb->upperBound->x;
HXDLIN( 771)						_this1->y = aabb->lowerBound->y;
            					}
HXLINE( 772)					{
HXLINE( 772)						 ::box2D::common::math::B2Vec2 _this2 = vs3->__get((int)2).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 772)						_this2->x = aabb->upperBound->x;
HXDLIN( 772)						_this2->y = aabb->upperBound->y;
            					}
HXLINE( 773)					{
HXLINE( 773)						 ::box2D::common::math::B2Vec2 _this3 = vs3->__get((int)3).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXDLIN( 773)						_this3->x = aabb->lowerBound->x;
HXDLIN( 773)						_this3->y = aabb->upperBound->y;
            					}
HXLINE( 775)					this->m_debugDraw->drawPolygon(vs3,(int)4,color);
HXLINE( 776)					f = f->getNext();
            				}
HXLINE( 778)				b = b->getNext();
            			}
            		}
HXLINE( 782)		if ((((int)flags & (int)::box2D::dynamics::B2DebugDraw_obj::e_centerOfMassBit) != (int)0)) {
HXLINE( 784)			b = this->m_bodyList;
HXLINE( 785)			while(hx::IsNotNull( b )){
HXLINE( 787)				xf = ::box2D::dynamics::B2World_obj::s_xf;
HXLINE( 788)				xf->R = b->m_xf->R;
HXLINE( 789)				xf->position = b->getWorldCenter();
HXLINE( 790)				this->m_debugDraw->drawTransform(xf);
HXLINE( 791)				b = b->m_next;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,drawDebugData,(void))

void B2World_obj::queryAABB( ::Dynamic callbackMethod, ::box2D::collision::B2AABB aabb){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_805_queryAABB)
HXLINE( 806)		this->aabbQueryCallback->broadPhase = this->m_contactManager->m_broadPhase;
HXLINE( 807)		this->aabbQueryCallback->callbackMethod = callbackMethod;
HXLINE( 808)		::box2D::collision::IBroadPhase_obj::query(this->m_contactManager->m_broadPhase,this->aabbQueryCallback,aabb);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2World_obj,queryAABB,(void))

void B2World_obj::queryShape( ::Dynamic callbackMethod, ::box2D::collision::shapes::B2Shape shape, ::box2D::common::math::B2Transform transform){
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_819_queryShape)
HXLINE( 820)		this->shapeQueryCallback->broadPhase = this->m_contactManager->m_broadPhase;
HXLINE( 821)		this->shapeQueryCallback->callbackMethod = callbackMethod;
HXLINE( 822)		if (hx::IsNull( transform )) {
HXLINE( 824)			transform =  ::box2D::common::math::B2Transform_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 825)			transform->setIdentity();
            		}
HXLINE( 827)		this->shapeQueryCallback->transform = transform;
HXLINE( 829)		 ::box2D::collision::B2AABB aabb =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
HXLINE( 830)		shape->computeAABB(aabb,transform);
HXLINE( 831)		this->shapeQueryCallback->shape = shape;
HXLINE( 833)		::box2D::collision::IBroadPhase_obj::query(this->m_contactManager->m_broadPhase,this->shapeQueryCallback,aabb);
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2World_obj,queryShape,(void))

void B2World_obj::queryPoint( ::Dynamic callbackMethod, ::box2D::common::math::B2Vec2 p){
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_843_queryPoint)
HXLINE( 844)		this->pointQueryCallback->broadPhase = this->m_contactManager->m_broadPhase;
HXLINE( 845)		this->pointQueryCallback->callbackMethod = callbackMethod;
HXLINE( 846)		this->pointQueryCallback->p = p;
HXLINE( 849)		 ::box2D::collision::B2AABB aabb =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
HXLINE( 850)		{
HXLINE( 850)			 ::box2D::common::math::B2Vec2 _this = aabb->lowerBound;
HXDLIN( 850)			_this->x = (p->x - ::box2D::common::B2Settings_obj::b2_linearSlop);
HXDLIN( 850)			_this->y = (p->y - ::box2D::common::B2Settings_obj::b2_linearSlop);
            		}
HXLINE( 851)		{
HXLINE( 851)			 ::box2D::common::math::B2Vec2 _this1 = aabb->upperBound;
HXDLIN( 851)			_this1->x = (p->x + ::box2D::common::B2Settings_obj::b2_linearSlop);
HXDLIN( 851)			_this1->y = (p->y + ::box2D::common::B2Settings_obj::b2_linearSlop);
            		}
HXLINE( 853)		::box2D::collision::IBroadPhase_obj::query(this->m_contactManager->m_broadPhase,this->pointQueryCallback,aabb);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2World_obj,queryPoint,(void))

void B2World_obj::rayCast( ::Dynamic callbackMethod, ::box2D::common::math::B2Vec2 point1, ::box2D::common::math::B2Vec2 point2){
            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,::Dynamic,broadPhase, ::box2D::collision::B2RayCastOutput,output, ::box2D::common::math::B2Vec2,point2, ::Dynamic,callbackMethod, ::box2D::common::math::B2Vec2,point1) HXARGC(2)
            		Float _hx_run( ::box2D::collision::B2RayCastInput input, ::Dynamic proxy){
            			HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_879_rayCast)
HXLINE( 880)			 ::Dynamic userData = ::box2D::collision::IBroadPhase_obj::getUserData(broadPhase,proxy);
HXLINE( 881)			 ::box2D::dynamics::B2Fixture fixture = hx::TCast<  ::box2D::dynamics::B2Fixture >::cast(userData);
HXLINE( 882)			bool hit = fixture->rayCast(output,input);
HXLINE( 883)			if (hit) {
HXLINE( 885)				Float fraction = output->fraction;
HXLINE( 887)				Float point = ((((Float)1.0) - fraction) * point1->x);
HXDLIN( 887)				Float point3 = (point + (fraction * point2->x));
HXLINE( 888)				Float point4 = ((((Float)1.0) - fraction) * point1->y);
HXLINE( 886)				 ::box2D::common::math::B2Vec2 point5 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,point3,(point4 + (fraction * point2->y)));
HXLINE( 889)				return ( (Float)(callbackMethod(fixture,point5,output->normal,fraction)) );
            			}
HXLINE( 891)			return input->maxFraction;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_875_rayCast)
HXLINE( 876)		::Dynamic broadPhase = this->m_contactManager->m_broadPhase;
HXLINE( 877)		 ::box2D::collision::B2RayCastOutput output =  ::box2D::collision::B2RayCastOutput_obj::__alloc( HX_CTX );
HXLINE( 878)		 ::Dynamic rayCastWrapper =  ::Dynamic(new _hx_Closure_0(broadPhase,output,point2,callbackMethod,point1));
HXLINE( 893)		 ::box2D::collision::B2RayCastInput input1 =  ::box2D::collision::B2RayCastInput_obj::__alloc( HX_CTX ,point1,point2,null());
HXLINE( 894)		::box2D::collision::IBroadPhase_obj::rayCast(broadPhase,rayCastWrapper,input1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2World_obj,rayCast,(void))

 ::box2D::dynamics::B2Fixture B2World_obj::rayCastOne( ::box2D::common::math::B2Vec2 point1, ::box2D::common::math::B2Vec2 point2){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,result) HXARGC(4)
            		Float _hx_run( ::box2D::dynamics::B2Fixture fixture, ::box2D::common::math::B2Vec2 point, ::box2D::common::math::B2Vec2 normal,Float fraction){
            			HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_901_rayCastOne)
HXLINE( 902)			result[(int)0] = fixture;
HXLINE( 903)			return fraction;
            		}
            		HX_END_LOCAL_FUNC4(return)

            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_898_rayCastOne)
HXLINE( 899)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 900)		 ::Dynamic rayCastOneWrapper =  ::Dynamic(new _hx_Closure_0(result));
HXLINE( 905)		this->rayCast(rayCastOneWrapper,point1,point2);
HXLINE( 906)		return result->__get((int)0).StaticCast<  ::box2D::dynamics::B2Fixture >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2World_obj,rayCastOne,return )

::Array< ::Dynamic> B2World_obj::rayCastAll( ::box2D::common::math::B2Vec2 point1, ::box2D::common::math::B2Vec2 point2){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,result) HXARGC(4)
            		Float _hx_run( ::box2D::dynamics::B2Fixture fixture, ::box2D::common::math::B2Vec2 point, ::box2D::common::math::B2Vec2 normal,Float fraction){
            			HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_913_rayCastAll)
HXLINE( 914)			result[result->length] = fixture;
HXLINE( 915)			return (int)1;
            		}
            		HX_END_LOCAL_FUNC4(return)

            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_910_rayCastAll)
HXLINE( 911)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE( 912)		 ::Dynamic rayCastAllWrapper =  ::Dynamic(new _hx_Closure_0(result));
HXLINE( 917)		this->rayCast(rayCastAllWrapper,point1,point2);
HXLINE( 918)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2World_obj,rayCastAll,return )

 ::box2D::dynamics::B2Body B2World_obj::getBodyList(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_927_getBodyList)
HXDLIN( 927)		return this->m_bodyList;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getBodyList,return )

 ::box2D::dynamics::joints::B2Joint B2World_obj::getJointList(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_936_getJointList)
HXDLIN( 936)		return this->m_jointList;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getJointList,return )

 ::box2D::dynamics::contacts::B2Contact B2World_obj::getContactList(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_947_getContactList)
HXDLIN( 947)		return this->m_contactList;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getContactList,return )

bool B2World_obj::isLocked(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_955_isLocked)
HXDLIN( 955)		return (((int)this->m_flags & (int)::box2D::dynamics::B2World_obj::e_locked) > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,isLocked,return )

void B2World_obj::solve( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_963_solve)
HXLINE( 964)		 ::box2D::dynamics::B2Body b;
HXLINE( 967)		 ::box2D::dynamics::controllers::B2Controller controller = this->m_controllerList;
HXLINE( 968)		while(hx::IsNotNull( controller )){
HXLINE( 970)			controller->step(step);
HXLINE( 971)			controller = controller->m_next;
            		}
HXLINE( 975)		 ::box2D::dynamics::B2Island island = this->m_island;
HXLINE( 976)		island->initialize(this->m_bodyCount,this->m_contactCount,this->m_jointCount,null(),this->m_contactManager->m_contactListener,this->m_contactSolver);
HXLINE( 979)		b = this->m_bodyList;
HXLINE( 980)		while(hx::IsNotNull( b )){
HXLINE( 982)			 ::box2D::dynamics::B2Body b1 = b;
HXDLIN( 982)			b1->m_flags = ((int)b1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_islandFlag));
HXLINE( 983)			b = b->m_next;
            		}
HXLINE( 985)		 ::box2D::dynamics::contacts::B2Contact c = this->m_contactList;
HXLINE( 986)		while(hx::IsNotNull( c )){
HXLINE( 988)			 ::box2D::dynamics::contacts::B2Contact c1 = c;
HXDLIN( 988)			c1->m_flags = ((int)c1->m_flags & (int)~(::box2D::dynamics::contacts::B2Contact_obj::e_islandFlag));
HXLINE( 989)			c = c->m_next;
            		}
HXLINE( 991)		 ::box2D::dynamics::joints::B2Joint j = this->m_jointList;
HXLINE( 992)		while(hx::IsNotNull( j )){
HXLINE( 994)			j->m_islandFlag = false;
HXLINE( 995)			j = j->m_next;
            		}
HXLINE( 999)		int stackSize = this->m_bodyCount;
HXLINE(1001)		::Array< ::Dynamic> stack = this->s_stack;
HXLINE(1002)		 ::box2D::dynamics::B2Body seed = this->m_bodyList;
HXLINE(1003)		while(hx::IsNotNull( seed )){
HXLINE(1005)			if ((((int)seed->m_flags & (int)::box2D::dynamics::B2Body_obj::e_islandFlag) != (int)0)) {
HXLINE(1007)				seed = seed->m_next;
HXLINE(1008)				continue;
            			}
HXLINE(1012)			bool _hx_tmp;
HXDLIN(1012)			bool _hx_tmp1;
HXDLIN(1012)			if (!(seed->isActive())) {
HXLINE(1012)				_hx_tmp1 = !(seed->isAlwaysActive());
            			}
            			else {
HXLINE(1012)				_hx_tmp1 = false;
            			}
HXDLIN(1012)			if (_hx_tmp1) {
HXLINE(1014)				bool _hx_tmp2;
HXDLIN(1014)				bool _hx_tmp3;
HXDLIN(1014)				if ((((seed->m_xf->position->x + seed->origin->x) + seed->size->x) >= this->m_aabb->lowerBound->x)) {
HXLINE(1014)					_hx_tmp3 = (((seed->m_xf->position->y + seed->origin->y) + seed->size->y) >= this->m_aabb->lowerBound->y);
            				}
            				else {
HXLINE(1014)					_hx_tmp3 = false;
            				}
HXDLIN(1014)				if (_hx_tmp3) {
HXLINE(1014)					_hx_tmp2 = ((seed->m_xf->position->x + seed->origin->x) <= this->m_aabb->upperBound->x);
            				}
            				else {
HXLINE(1014)					_hx_tmp2 = false;
            				}
HXLINE(1013)				if (_hx_tmp2) {
HXLINE(1012)					_hx_tmp = ((seed->m_xf->position->y + seed->origin->y) <= this->m_aabb->upperBound->y);
            				}
            				else {
HXLINE(1012)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(1012)				_hx_tmp = false;
            			}
HXDLIN(1012)			if (_hx_tmp) {
HXLINE(1021)				seed->setActive(true);
HXLINE(1022)				seed->setAwake(true);
            			}
HXLINE(1026)			bool _hx_tmp4;
HXDLIN(1026)			bool _hx_tmp5;
HXDLIN(1026)			if ((seed->isAwake() != false)) {
HXLINE(1026)				_hx_tmp5 = (seed->isActive() == false);
            			}
            			else {
HXLINE(1026)				_hx_tmp5 = true;
            			}
HXDLIN(1026)			if (!(_hx_tmp5)) {
HXLINE(1026)				_hx_tmp4 = seed->isPaused();
            			}
            			else {
HXLINE(1026)				_hx_tmp4 = true;
            			}
HXDLIN(1026)			if (_hx_tmp4) {
HXLINE(1028)				seed = seed->m_next;
HXLINE(1029)				continue;
            			}
HXLINE(1033)			int _hx_tmp6 = seed->getType();
HXDLIN(1033)			if ((_hx_tmp6 == ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE(1035)				seed = seed->m_next;
HXLINE(1036)				continue;
            			}
HXLINE(1040)			bool _hx_tmp7;
HXDLIN(1040)			bool _hx_tmp8;
HXDLIN(1040)			if (seed->isActive()) {
HXLINE(1040)				_hx_tmp8 = !(seed->isAlwaysActive());
            			}
            			else {
HXLINE(1040)				_hx_tmp8 = false;
            			}
HXDLIN(1040)			if (_hx_tmp8) {
HXLINE(1042)				bool _hx_tmp9;
HXDLIN(1042)				bool _hx_tmp10;
HXDLIN(1042)				if (!((((seed->m_xf->position->x + seed->origin->x) + seed->size->x) < this->m_aabb->lowerBound->x))) {
HXLINE(1042)					_hx_tmp10 = (((seed->m_xf->position->y + seed->origin->y) + seed->size->y) < this->m_aabb->lowerBound->y);
            				}
            				else {
HXLINE(1042)					_hx_tmp10 = true;
            				}
HXDLIN(1042)				if (!(_hx_tmp10)) {
HXLINE(1042)					_hx_tmp9 = ((seed->m_xf->position->x + seed->origin->x) > this->m_aabb->upperBound->x);
            				}
            				else {
HXLINE(1042)					_hx_tmp9 = true;
            				}
HXLINE(1041)				if (!(_hx_tmp9)) {
HXLINE(1040)					_hx_tmp7 = ((seed->m_xf->position->y + seed->origin->y) > this->m_aabb->upperBound->y);
            				}
            				else {
HXLINE(1040)					_hx_tmp7 = true;
            				}
            			}
            			else {
HXLINE(1040)				_hx_tmp7 = false;
            			}
HXDLIN(1040)			if (_hx_tmp7) {
HXLINE(1049)				seed->setAwake(false);
HXLINE(1050)				seed->setActive(false);
HXLINE(1052)				seed = seed->m_next;
HXLINE(1053)				continue;
            			}
HXLINE(1058)			island->clear();
HXLINE(1059)			int stackCount = (int)0;
HXLINE(1060)			stackCount = (stackCount + (int)1);
HXDLIN(1060)			stack[(stackCount - (int)1)] = seed;
HXLINE(1061)			 ::box2D::dynamics::B2Body seed1 = seed;
HXDLIN(1061)			seed1->m_flags = ((int)seed1->m_flags | (int)::box2D::dynamics::B2Body_obj::e_islandFlag);
HXLINE(1064)			while((stackCount > (int)0)){
HXLINE(1067)				stackCount = (stackCount - (int)1);
HXDLIN(1067)				b = stack->__get(stackCount).StaticCast<  ::box2D::dynamics::B2Body >();
HXLINE(1069)				island->addBody(b);
HXLINE(1072)				if ((b->isAwake() == false)) {
HXLINE(1074)					b->setAwake(true);
            				}
HXLINE(1079)				int _hx_tmp11 = b->getType();
HXDLIN(1079)				if ((_hx_tmp11 == ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE(1081)					continue;
            				}
HXLINE(1084)				 ::box2D::dynamics::B2Body other;
HXLINE(1086)				 ::box2D::dynamics::contacts::B2ContactEdge ce = b->m_contactList;
HXLINE(1087)				while(hx::IsNotNull( ce )){
HXLINE(1090)					if ((((int)ce->contact->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_islandFlag) != (int)0)) {
HXLINE(1092)						ce = ce->next;
HXLINE(1093)						continue;
            					}
HXLINE(1097)					bool _hx_tmp12;
HXDLIN(1097)					bool _hx_tmp13;
HXDLIN(1097)					if ((ce->contact->isSensor() != true)) {
HXLINE(1097)						_hx_tmp13 = (ce->contact->isEnabled() == false);
            					}
            					else {
HXLINE(1097)						_hx_tmp13 = true;
            					}
HXDLIN(1097)					if (!(_hx_tmp13)) {
HXLINE(1097)						_hx_tmp12 = (ce->contact->isTouching() == false);
            					}
            					else {
HXLINE(1097)						_hx_tmp12 = true;
            					}
HXDLIN(1097)					if (_hx_tmp12) {
HXLINE(1101)						ce = ce->next;
HXLINE(1102)						continue;
            					}
HXLINE(1105)					island->addContact(ce->contact);
HXLINE(1106)					 ::box2D::dynamics::contacts::B2Contact ce1 = ce->contact;
HXDLIN(1106)					ce1->m_flags = ((int)ce1->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_islandFlag);
HXLINE(1109)					other = ce->other;
HXLINE(1112)					if ((((int)other->m_flags & (int)::box2D::dynamics::B2Body_obj::e_islandFlag) != (int)0)) {
HXLINE(1114)						ce = ce->next;
HXLINE(1115)						continue;
            					}
HXLINE(1119)					stackCount = (stackCount + (int)1);
HXDLIN(1119)					stack[(stackCount - (int)1)] = other;
HXLINE(1120)					 ::box2D::dynamics::B2Body other1 = other;
HXDLIN(1120)					other1->m_flags = ((int)other1->m_flags | (int)::box2D::dynamics::B2Body_obj::e_islandFlag);
HXLINE(1121)					ce = ce->next;
            				}
HXLINE(1125)				 ::box2D::dynamics::joints::B2JointEdge jn = b->m_jointList;
HXLINE(1126)				while(hx::IsNotNull( jn )){
HXLINE(1128)					if ((jn->joint->m_islandFlag == true)) {
HXLINE(1130)						jn = jn->next;
HXLINE(1131)						continue;
            					}
HXLINE(1134)					other = jn->other;
HXLINE(1137)					if ((other->isActive() == false)) {
HXLINE(1139)						jn = jn->next;
HXLINE(1140)						continue;
            					}
HXLINE(1143)					island->addJoint(jn->joint);
HXLINE(1144)					jn->joint->m_islandFlag = true;
HXLINE(1146)					if ((((int)other->m_flags & (int)::box2D::dynamics::B2Body_obj::e_islandFlag) != (int)0)) {
HXLINE(1148)						jn = jn->next;
HXLINE(1149)						continue;
            					}
HXLINE(1153)					stackCount = (stackCount + (int)1);
HXDLIN(1153)					stack[(stackCount - (int)1)] = other;
HXLINE(1154)					 ::box2D::dynamics::B2Body other2 = other;
HXDLIN(1154)					other2->m_flags = ((int)other2->m_flags | (int)::box2D::dynamics::B2Body_obj::e_islandFlag);
HXLINE(1155)					jn = jn->next;
            				}
            			}
HXLINE(1158)			island->solve(step,this->m_gravity,this->m_allowSleep);
HXLINE(1161)			{
HXLINE(1161)				int _g1 = (int)0;
HXDLIN(1161)				int _g = island->m_bodyCount;
HXDLIN(1161)				while((_g1 < _g)){
HXLINE(1161)					_g1 = (_g1 + (int)1);
HXDLIN(1161)					int i = (_g1 - (int)1);
HXLINE(1164)					b = island->m_bodies->__get(i).StaticCast<  ::box2D::dynamics::B2Body >();
HXLINE(1165)					int _hx_tmp14 = b->getType();
HXDLIN(1165)					if ((_hx_tmp14 == ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE(1167)						 ::box2D::dynamics::B2Body b2 = b;
HXDLIN(1167)						b2->m_flags = ((int)b2->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_islandFlag));
            					}
            				}
            			}
HXLINE(1170)			seed = seed->m_next;
            		}
HXLINE(1174)		{
HXLINE(1174)			int _g11 = (int)0;
HXDLIN(1174)			int _g2 = stack->length;
HXDLIN(1174)			while((_g11 < _g2)){
HXLINE(1174)				_g11 = (_g11 + (int)1);
HXDLIN(1174)				int i1 = (_g11 - (int)1);
HXLINE(1176)				if (hx::IsNull( stack->__get(i1).StaticCast<  ::box2D::dynamics::B2Body >() )) {
HXLINE(1176)					goto _hx_goto_66;
            				}
HXLINE(1177)				stack[i1] = null();
            			}
            			_hx_goto_66:;
            		}
HXLINE(1181)		b = this->m_bodyList;
HXLINE(1182)		while(hx::IsNotNull( b )){
HXLINE(1184)			bool _hx_tmp15;
HXDLIN(1184)			if ((b->isAwake() != false)) {
HXLINE(1184)				_hx_tmp15 = (b->isActive() == false);
            			}
            			else {
HXLINE(1184)				_hx_tmp15 = true;
            			}
HXDLIN(1184)			if (_hx_tmp15) {
HXLINE(1186)				b = b->m_next;
HXLINE(1187)				continue;
            			}
HXLINE(1190)			int _hx_tmp16 = b->getType();
HXDLIN(1190)			if ((_hx_tmp16 == ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE(1192)				b = b->m_next;
HXLINE(1193)				continue;
            			}
HXLINE(1197)			b->synchronizeFixtures();
HXLINE(1198)			b = b->m_next;
            		}
HXLINE(1202)		this->m_contactManager->findNewContacts();
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,solve,(void))

void B2World_obj::solveTOI( ::box2D::dynamics::B2TimeStep step){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1211_solveTOI)
HXLINE(1213)		 ::box2D::dynamics::B2Body b;
HXLINE(1214)		 ::box2D::dynamics::B2Fixture fA;
HXLINE(1215)		 ::box2D::dynamics::B2Fixture fB;
HXLINE(1216)		 ::box2D::dynamics::B2Body bA;
HXLINE(1217)		 ::box2D::dynamics::B2Body bB;
HXLINE(1218)		 ::box2D::dynamics::contacts::B2ContactEdge cEdge;
HXLINE(1219)		 ::box2D::dynamics::joints::B2Joint j;
HXLINE(1222)		 ::box2D::dynamics::B2Island island = this->m_island;
HXLINE(1223)		island->initialize(this->m_bodyCount,::box2D::common::B2Settings_obj::b2_maxTOIContactsPerIsland,::box2D::common::B2Settings_obj::b2_maxTOIJointsPerIsland,null(),this->m_contactManager->m_contactListener,this->m_contactSolver);
HXLINE(1234)		::Array< ::Dynamic> queue = ::box2D::dynamics::B2World_obj::s_queue;
HXLINE(1236)		b = this->m_bodyList;
HXLINE(1237)		while(hx::IsNotNull( b )){
HXLINE(1239)			 ::box2D::dynamics::B2Body b1 = b;
HXDLIN(1239)			b1->m_flags = ((int)b1->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_islandFlag));
HXLINE(1240)			b->m_sweep->t0 = ((Float)0.0);
HXLINE(1241)			b = b->m_next;
            		}
HXLINE(1244)		 ::box2D::dynamics::contacts::B2Contact c = this->m_contactList;
HXLINE(1245)		while(hx::IsNotNull( c )){
HXLINE(1248)			 ::box2D::dynamics::contacts::B2Contact c1 = c;
HXDLIN(1248)			c1->m_flags = ((int)c1->m_flags & (int)~(((int)::box2D::dynamics::contacts::B2Contact_obj::e_toiFlag | (int)::box2D::dynamics::contacts::B2Contact_obj::e_islandFlag)));
HXLINE(1249)			c = c->m_next;
            		}
HXLINE(1252)		j = this->m_jointList;
HXLINE(1253)		while(hx::IsNotNull( j )){
HXLINE(1255)			j->m_islandFlag = false;
HXLINE(1256)			j = j->m_next;
            		}
HXLINE(1262)		while(true){
HXLINE(1265)			 ::box2D::dynamics::contacts::B2Contact minContact = null();
HXLINE(1266)			Float minTOI = ((Float)1.0);
HXLINE(1268)			c = this->m_contactList;
HXLINE(1269)			while(hx::IsNotNull( c )){
HXLINE(1272)				bool _hx_tmp;
HXDLIN(1272)				bool _hx_tmp1;
HXDLIN(1272)				if ((c->isSensor() != true)) {
HXLINE(1272)					_hx_tmp1 = (c->isEnabled() == false);
            				}
            				else {
HXLINE(1272)					_hx_tmp1 = true;
            				}
HXDLIN(1272)				if (!(_hx_tmp1)) {
HXLINE(1272)					_hx_tmp = (c->isContinuous() == false);
            				}
            				else {
HXLINE(1272)					_hx_tmp = true;
            				}
HXDLIN(1272)				if (_hx_tmp) {
HXLINE(1276)					c = c->m_next;
HXLINE(1277)					continue;
            				}
HXLINE(1282)				Float toi = ((Float)1.0);
HXLINE(1283)				if ((((int)c->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_toiFlag) != (int)0)) {
HXLINE(1286)					toi = c->m_toi;
            				}
            				else {
HXLINE(1291)					fA = c->m_fixtureA;
HXLINE(1292)					fB = c->m_fixtureB;
HXLINE(1293)					bA = fA->m_body;
HXLINE(1294)					bB = fB->m_body;
HXLINE(1296)					bool _hx_tmp2;
HXDLIN(1296)					bool _hx_tmp3;
HXDLIN(1296)					int _hx_tmp4 = bA->getType();
HXDLIN(1296)					if ((_hx_tmp4 == ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE(1296)						_hx_tmp3 = (bA->isAwake() == false);
            					}
            					else {
HXLINE(1296)						_hx_tmp3 = true;
            					}
HXDLIN(1296)					if (_hx_tmp3) {
HXLINE(1297)						int _hx_tmp5 = bB->getType();
HXDLIN(1297)						if ((_hx_tmp5 == ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE(1296)							_hx_tmp2 = (bB->isAwake() == false);
            						}
            						else {
HXLINE(1296)							_hx_tmp2 = true;
            						}
            					}
            					else {
HXLINE(1296)						_hx_tmp2 = false;
            					}
HXDLIN(1296)					if (_hx_tmp2) {
HXLINE(1299)						c = c->m_next;
HXLINE(1300)						continue;
            					}
HXLINE(1304)					Float t0 = bA->m_sweep->t0;
HXLINE(1306)					if ((bA->m_sweep->t0 < bB->m_sweep->t0)) {
HXLINE(1308)						t0 = bB->m_sweep->t0;
HXLINE(1309)						bA->m_sweep->advance(t0);
            					}
            					else {
HXLINE(1311)						if ((bB->m_sweep->t0 < bA->m_sweep->t0)) {
HXLINE(1313)							t0 = bA->m_sweep->t0;
HXLINE(1314)							bB->m_sweep->advance(t0);
            						}
            					}
HXLINE(1320)					toi = c->computeTOI(bA->m_sweep,bB->m_sweep);
HXLINE(1321)					bool _hx_tmp6;
HXDLIN(1321)					if ((((Float)0.0) <= toi)) {
HXLINE(1321)						_hx_tmp6 = (toi <= ((Float)1.0));
            					}
            					else {
HXLINE(1321)						_hx_tmp6 = false;
            					}
HXDLIN(1321)					::box2D::common::B2Settings_obj::b2Assert(_hx_tmp6);
HXLINE(1324)					bool _hx_tmp7;
HXDLIN(1324)					if ((toi > ((Float)0.0))) {
HXLINE(1324)						_hx_tmp7 = (toi < ((Float)1.0));
            					}
            					else {
HXLINE(1324)						_hx_tmp7 = false;
            					}
HXDLIN(1324)					if (_hx_tmp7) {
HXLINE(1328)						toi = (((((Float)1.0) - toi) * t0) + toi);
HXLINE(1329)						if ((toi > (int)1)) {
HXLINE(1329)							toi = (int)1;
            						}
            					}
HXLINE(1333)					c->m_toi = toi;
HXLINE(1334)					 ::box2D::dynamics::contacts::B2Contact c2 = c;
HXDLIN(1334)					c2->m_flags = ((int)c2->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_toiFlag);
            				}
HXLINE(1337)				bool _hx_tmp8;
HXDLIN(1337)				if ((((Float)2.2250738585072014e-308) < toi)) {
HXLINE(1337)					_hx_tmp8 = (toi < minTOI);
            				}
            				else {
HXLINE(1337)					_hx_tmp8 = false;
            				}
HXDLIN(1337)				if (_hx_tmp8) {
HXLINE(1340)					minContact = c;
HXLINE(1341)					minTOI = toi;
            				}
HXLINE(1344)				c = c->m_next;
            			}
HXLINE(1347)			bool _hx_tmp9;
HXDLIN(1347)			if (hx::IsNotNull( minContact )) {
HXLINE(1347)				_hx_tmp9 = (((Float)1.) < minTOI);
            			}
            			else {
HXLINE(1347)				_hx_tmp9 = true;
            			}
HXDLIN(1347)			if (_hx_tmp9) {
HXLINE(1350)				goto _hx_goto_72;
            			}
HXLINE(1354)			fA = minContact->m_fixtureA;
HXLINE(1355)			fB = minContact->m_fixtureB;
HXLINE(1356)			bA = fA->m_body;
HXLINE(1357)			bB = fB->m_body;
HXLINE(1358)			::box2D::dynamics::B2World_obj::s_backupA->set(bA->m_sweep);
HXLINE(1359)			::box2D::dynamics::B2World_obj::s_backupB->set(bB->m_sweep);
HXLINE(1360)			bA->advance(minTOI);
HXLINE(1361)			bB->advance(minTOI);
HXLINE(1364)			minContact->update(this->m_contactManager->m_contactListener);
HXLINE(1365)			 ::box2D::dynamics::contacts::B2Contact minContact1 = minContact;
HXDLIN(1365)			minContact1->m_flags = ((int)minContact1->m_flags & (int)~(::box2D::dynamics::contacts::B2Contact_obj::e_toiFlag));
HXLINE(1368)			bool _hx_tmp10;
HXDLIN(1368)			if ((minContact->isSensor() != true)) {
HXLINE(1368)				_hx_tmp10 = (minContact->isEnabled() == false);
            			}
            			else {
HXLINE(1368)				_hx_tmp10 = true;
            			}
HXDLIN(1368)			if (_hx_tmp10) {
HXLINE(1372)				bA->m_sweep->set(::box2D::dynamics::B2World_obj::s_backupA);
HXLINE(1373)				bB->m_sweep->set(::box2D::dynamics::B2World_obj::s_backupB);
HXLINE(1374)				bA->synchronizeTransform();
HXLINE(1375)				bB->synchronizeTransform();
HXLINE(1376)				continue;
            			}
HXLINE(1380)			if ((minContact->isTouching() == false)) {
HXLINE(1383)				continue;
            			}
HXLINE(1387)			 ::box2D::dynamics::B2Body seed = bA;
HXLINE(1388)			int _hx_tmp11 = seed->getType();
HXDLIN(1388)			if ((_hx_tmp11 != ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE(1390)				seed = bB;
            			}
HXLINE(1394)			island->clear();
HXLINE(1395)			int queueStart = (int)0;
HXLINE(1396)			int queueSize = (int)0;
HXLINE(1397)			queueSize = (queueSize + (int)1);
HXDLIN(1397)			queue[(queueStart + (queueSize - (int)1))] = seed;
HXLINE(1398)			 ::box2D::dynamics::B2Body seed1 = seed;
HXDLIN(1398)			seed1->m_flags = ((int)seed1->m_flags | (int)::box2D::dynamics::B2Body_obj::e_islandFlag);
HXLINE(1401)			while((queueSize > (int)0)){
HXLINE(1404)				queueStart = (queueStart + (int)1);
HXDLIN(1404)				b = queue->__get((queueStart - (int)1)).StaticCast<  ::box2D::dynamics::B2Body >();
HXLINE(1405)				queueSize = (queueSize - (int)1);
HXLINE(1407)				island->addBody(b);
HXLINE(1410)				if ((b->isAwake() == false)) {
HXLINE(1412)					b->setAwake(true);
            				}
HXLINE(1417)				int _hx_tmp12 = b->getType();
HXDLIN(1417)				if ((_hx_tmp12 != ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE(1419)					continue;
            				}
HXLINE(1423)				cEdge = b->m_contactList;
HXLINE(1424)				 ::box2D::dynamics::B2Body other;
HXLINE(1425)				while(hx::IsNotNull( cEdge )){
HXLINE(1428)					if ((island->m_contactCount == island->m_contactCapacity)) {
HXLINE(1430)						cEdge = cEdge->next;
HXLINE(1431)						goto _hx_goto_75;
            					}
HXLINE(1435)					if ((((int)cEdge->contact->m_flags & (int)::box2D::dynamics::contacts::B2Contact_obj::e_islandFlag) != (int)0)) {
HXLINE(1437)						cEdge = cEdge->next;
HXLINE(1438)						continue;
            					}
HXLINE(1442)					bool _hx_tmp13;
HXDLIN(1442)					bool _hx_tmp14;
HXDLIN(1442)					if ((cEdge->contact->isSensor() != true)) {
HXLINE(1442)						_hx_tmp14 = (cEdge->contact->isEnabled() == false);
            					}
            					else {
HXLINE(1442)						_hx_tmp14 = true;
            					}
HXDLIN(1442)					if (!(_hx_tmp14)) {
HXLINE(1442)						_hx_tmp13 = (cEdge->contact->isTouching() == false);
            					}
            					else {
HXLINE(1442)						_hx_tmp13 = true;
            					}
HXDLIN(1442)					if (_hx_tmp13) {
HXLINE(1446)						cEdge = cEdge->next;
HXLINE(1447)						continue;
            					}
HXLINE(1450)					island->addContact(cEdge->contact);
HXLINE(1451)					 ::box2D::dynamics::contacts::B2Contact cEdge1 = cEdge->contact;
HXDLIN(1451)					cEdge1->m_flags = ((int)cEdge1->m_flags | (int)::box2D::dynamics::contacts::B2Contact_obj::e_islandFlag);
HXLINE(1454)					other = cEdge->other;
HXLINE(1457)					if ((((int)other->m_flags & (int)::box2D::dynamics::B2Body_obj::e_islandFlag) != (int)0)) {
HXLINE(1459)						cEdge = cEdge->next;
HXLINE(1460)						continue;
            					}
HXLINE(1464)					int _hx_tmp15 = other->getType();
HXDLIN(1464)					if ((_hx_tmp15 != ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE(1466)						other->advance(minTOI);
HXLINE(1467)						other->setAwake(true);
            					}
HXLINE(1471)					queue[(queueStart + queueSize)] = other;
HXLINE(1472)					queueSize = (queueSize + (int)1);
HXLINE(1473)					 ::box2D::dynamics::B2Body other1 = other;
HXDLIN(1473)					other1->m_flags = ((int)other1->m_flags | (int)::box2D::dynamics::B2Body_obj::e_islandFlag);
HXLINE(1474)					cEdge = cEdge->next;
            				}
            				_hx_goto_75:;
HXLINE(1477)				 ::box2D::dynamics::joints::B2JointEdge jEdge = b->m_jointList;
HXLINE(1478)				while(hx::IsNotNull( jEdge )){
HXLINE(1480)					if ((island->m_jointCount == island->m_jointCapacity)) {
HXLINE(1481)						jEdge = jEdge->next;
HXLINE(1482)						continue;
            					}
HXLINE(1485)					if ((jEdge->joint->m_islandFlag == true)) {
HXLINE(1486)						jEdge = jEdge->next;
HXLINE(1487)						continue;
            					}
HXLINE(1490)					other = jEdge->other;
HXLINE(1491)					if ((other->isActive() == false)) {
HXLINE(1493)						jEdge = jEdge->next;
HXLINE(1494)						continue;
            					}
HXLINE(1497)					island->addJoint(jEdge->joint);
HXLINE(1498)					jEdge->joint->m_islandFlag = true;
HXLINE(1500)					if ((((int)other->m_flags & (int)::box2D::dynamics::B2Body_obj::e_islandFlag) != (int)0)) {
HXLINE(1501)						jEdge = jEdge->next;
HXLINE(1502)						continue;
            					}
HXLINE(1506)					int _hx_tmp16 = other->getType();
HXDLIN(1506)					if ((_hx_tmp16 != ::box2D::dynamics::B2Body_obj::b2_staticBody)) {
HXLINE(1508)						other->advance(minTOI);
HXLINE(1509)						other->setAwake(true);
            					}
HXLINE(1513)					queue[(queueStart + queueSize)] = other;
HXLINE(1514)					queueSize = (queueSize + (int)1);
HXLINE(1515)					 ::box2D::dynamics::B2Body other2 = other;
HXDLIN(1515)					other2->m_flags = ((int)other2->m_flags | (int)::box2D::dynamics::B2Body_obj::e_islandFlag);
HXLINE(1516)					jEdge = jEdge->next;
            				}
            			}
HXLINE(1520)			 ::box2D::dynamics::B2TimeStep subStep = ::box2D::dynamics::B2World_obj::s_timestep;
HXLINE(1521)			subStep->warmStarting = false;
HXLINE(1522)			subStep->dt = ((((Float)1.0) - minTOI) * step->dt);
HXLINE(1523)			subStep->inv_dt = ((Float)((Float)1.0) / (Float)subStep->dt);
HXLINE(1524)			subStep->dtRatio = ((Float)0.0);
HXLINE(1525)			subStep->velocityIterations = step->velocityIterations;
HXLINE(1526)			subStep->positionIterations = step->positionIterations;
HXLINE(1528)			island->solveTOI(subStep);
HXLINE(1530)			int i;
HXLINE(1532)			{
HXLINE(1532)				int _g1 = (int)0;
HXDLIN(1532)				int _g = island->m_bodyCount;
HXDLIN(1532)				while((_g1 < _g)){
HXLINE(1532)					_g1 = (_g1 + (int)1);
HXDLIN(1532)					int i1 = (_g1 - (int)1);
HXLINE(1535)					b = island->m_bodies->__get(i1).StaticCast<  ::box2D::dynamics::B2Body >();
HXLINE(1536)					 ::box2D::dynamics::B2Body b2 = b;
HXDLIN(1536)					b2->m_flags = ((int)b2->m_flags & (int)~(::box2D::dynamics::B2Body_obj::e_islandFlag));
HXLINE(1538)					if ((b->isAwake() == false)) {
HXLINE(1540)						continue;
            					}
HXLINE(1543)					int _hx_tmp17 = b->getType();
HXDLIN(1543)					if ((_hx_tmp17 != ::box2D::dynamics::B2Body_obj::b2_dynamicBody)) {
HXLINE(1545)						continue;
            					}
HXLINE(1549)					b->synchronizeFixtures();
HXLINE(1553)					cEdge = b->m_contactList;
HXLINE(1554)					while(hx::IsNotNull( cEdge )){
HXLINE(1556)						 ::box2D::dynamics::contacts::B2Contact cEdge2 = cEdge->contact;
HXDLIN(1556)						cEdge2->m_flags = ((int)cEdge2->m_flags & (int)~(::box2D::dynamics::contacts::B2Contact_obj::e_toiFlag));
HXLINE(1557)						cEdge = cEdge->next;
            					}
            				}
            			}
HXLINE(1561)			{
HXLINE(1561)				int _g11 = (int)0;
HXDLIN(1561)				int _g2 = island->m_contactCount;
HXDLIN(1561)				while((_g11 < _g2)){
HXLINE(1561)					_g11 = (_g11 + (int)1);
HXDLIN(1561)					int i2 = (_g11 - (int)1);
HXLINE(1564)					c = island->m_contacts->__get(i2).StaticCast<  ::box2D::dynamics::contacts::B2Contact >();
HXLINE(1565)					 ::box2D::dynamics::contacts::B2Contact c3 = c;
HXDLIN(1565)					c3->m_flags = ((int)c3->m_flags & (int)~(((int)::box2D::dynamics::contacts::B2Contact_obj::e_toiFlag | (int)::box2D::dynamics::contacts::B2Contact_obj::e_islandFlag)));
            				}
            			}
HXLINE(1568)			{
HXLINE(1568)				int _g12 = (int)0;
HXDLIN(1568)				int _g3 = island->m_jointCount;
HXDLIN(1568)				while((_g12 < _g3)){
HXLINE(1568)					_g12 = (_g12 + (int)1);
HXDLIN(1568)					int i3 = (_g12 - (int)1);
HXLINE(1571)					j = island->m_joints->__get(i3).StaticCast<  ::box2D::dynamics::joints::B2Joint >();
HXLINE(1572)					j->m_islandFlag = false;
            				}
            			}
HXLINE(1577)			this->m_contactManager->findNewContacts();
            		}
            		_hx_goto_72:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,solveTOI,(void))

void B2World_obj::drawJoint( ::box2D::dynamics::joints::B2Joint joint){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1585_drawJoint)
HXLINE(1587)		 ::box2D::dynamics::B2Body b1 = joint->getBodyA();
HXLINE(1588)		 ::box2D::dynamics::B2Body b2 = joint->getBodyB();
HXLINE(1589)		 ::box2D::common::math::B2Transform xf1 = b1->m_xf;
HXLINE(1590)		 ::box2D::common::math::B2Transform xf2 = b2->m_xf;
HXLINE(1591)		 ::box2D::common::math::B2Vec2 x1 = xf1->position;
HXLINE(1592)		 ::box2D::common::math::B2Vec2 x2 = xf2->position;
HXLINE(1593)		 ::box2D::common::math::B2Vec2 p1 = joint->getAnchorA();
HXLINE(1594)		 ::box2D::common::math::B2Vec2 p2 = joint->getAnchorB();
HXLINE(1597)		 ::box2D::common::B2Color color = ::box2D::dynamics::B2World_obj::s_jointColor;
HXLINE(1599)		{
HXLINE(1599)			int _g = joint->m_type;
HXDLIN(1599)			switch((int)(_g)){
            				case (int)3: {
HXLINE(1602)					this->m_debugDraw->drawSegment(p1,p2,color);
            				}
            				break;
            				case (int)4: {
HXLINE(1606)					 ::box2D::dynamics::joints::B2PulleyJoint pulley = hx::TCast<  ::box2D::dynamics::joints::B2PulleyJoint >::cast(joint);
HXLINE(1607)					 ::box2D::common::math::B2Vec2 s1 = pulley->getGroundAnchorA();
HXLINE(1608)					 ::box2D::common::math::B2Vec2 s2 = pulley->getGroundAnchorB();
HXLINE(1609)					this->m_debugDraw->drawSegment(s1,p1,color);
HXLINE(1610)					this->m_debugDraw->drawSegment(s2,p2,color);
HXLINE(1611)					this->m_debugDraw->drawSegment(s1,s2,color);
            				}
            				break;
            				case (int)5: {
HXLINE(1615)					this->m_debugDraw->drawSegment(p1,p2,color);
            				}
            				break;
            				default:{
HXLINE(1618)					if (hx::IsNotEq( b1,this->m_groundBody )) {
HXLINE(1619)						this->m_debugDraw->drawSegment(x1,p1,color);
            					}
HXLINE(1620)					this->m_debugDraw->drawSegment(p1,p2,color);
HXLINE(1621)					if (hx::IsNotEq( b2,this->m_groundBody )) {
HXLINE(1622)						this->m_debugDraw->drawSegment(x2,p2,color);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,drawJoint,(void))

void B2World_obj::drawShape( ::box2D::collision::shapes::B2Shape shape, ::box2D::common::math::B2Transform xf, ::box2D::common::B2Color color){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1628_drawShape)
HXDLIN(1628)		int _g = shape->m_type;
HXDLIN(1628)		switch((int)(_g)){
            			case (int)0: {
HXLINE(1632)				 ::box2D::collision::shapes::B2CircleShape circle = hx::TCast<  ::box2D::collision::shapes::B2CircleShape >::cast(shape);
HXLINE(1634)				 ::box2D::common::math::B2Vec2 center = ::box2D::common::math::B2Math_obj::mulX(xf,circle->m_p,null());
HXLINE(1635)				Float radius = circle->m_radius;
HXLINE(1636)				 ::box2D::common::math::B2Vec2 axis = xf->R->col1;
HXLINE(1638)				this->m_debugDraw->drawSolidCircle(center,radius,axis,color);
            			}
            			break;
            			case (int)1: {
HXLINE(1643)				int i;
HXLINE(1644)				 ::box2D::collision::shapes::B2PolygonShape poly = hx::TCast<  ::box2D::collision::shapes::B2PolygonShape >::cast(shape);
HXLINE(1645)				int vertexCount = poly->getVertexCount();
HXLINE(1646)				::Array< ::Dynamic> localVertices = poly->getVertices();
HXLINE(1648)				::Array< ::Dynamic> vertices = ::Array_obj< ::Dynamic>::__new();
HXLINE(1650)				{
HXLINE(1650)					int _g1 = (int)0;
HXDLIN(1650)					int _g2 = vertexCount;
HXDLIN(1650)					while((_g1 < _g2)){
HXLINE(1650)						_g1 = (_g1 + (int)1);
HXDLIN(1650)						int i1 = (_g1 - (int)1);
HXLINE(1652)						vertices[i1] = ::box2D::common::math::B2Math_obj::mulX(xf,localVertices->__get(i1).StaticCast<  ::box2D::common::math::B2Vec2 >(),null());
            					}
            				}
HXLINE(1655)				this->m_debugDraw->drawSolidPolygon(vertices,vertexCount,color);
            			}
            			break;
            			case (int)2: {
HXLINE(1660)				 ::box2D::collision::shapes::B2EdgeShape edge = hx::TCast<  ::box2D::collision::shapes::B2EdgeShape >::cast(shape);
HXLINE(1662)				 ::box2D::dynamics::B2DebugDraw _hx_tmp = this->m_debugDraw;
HXDLIN(1662)				 ::box2D::common::math::B2Vec2 _hx_tmp1 = ::box2D::common::math::B2Math_obj::mulX(xf,edge->getVertex1(),null());
HXDLIN(1662)				_hx_tmp->drawSegment(_hx_tmp1,::box2D::common::math::B2Math_obj::mulX(xf,edge->getVertex2(),null()),color);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2World_obj,drawShape,(void))

void B2World_obj::setScreenBounds( ::box2D::collision::B2AABB bounds){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1673_setScreenBounds)
HXDLIN(1673)		this->m_aabb = bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2World_obj,setScreenBounds,(void))

 ::box2D::collision::B2AABB B2World_obj::getScreenBounds(){
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1677_getScreenBounds)
HXDLIN(1677)		return this->m_aabb;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2World_obj,getScreenBounds,return )

 ::box2D::dynamics::B2TimeStep B2World_obj::s_timestep2;

 ::box2D::common::math::B2Transform B2World_obj::s_xf;

 ::box2D::common::math::B2Sweep B2World_obj::s_backupA;

 ::box2D::common::math::B2Sweep B2World_obj::s_backupB;

 ::box2D::dynamics::B2TimeStep B2World_obj::s_timestep;

::Array< ::Dynamic> B2World_obj::s_queue;

 ::box2D::common::B2Color B2World_obj::s_jointColor;

bool B2World_obj::m_warmStarting;

bool B2World_obj::m_continuousPhysics;

int B2World_obj::e_newFixture;

int B2World_obj::e_locked;


hx::ObjectPtr< B2World_obj > B2World_obj::__new( ::box2D::common::math::B2Vec2 gravity,bool doSleep) {
	hx::ObjectPtr< B2World_obj > __this = new B2World_obj();
	__this->__construct(gravity,doSleep);
	return __this;
}

hx::ObjectPtr< B2World_obj > B2World_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::common::math::B2Vec2 gravity,bool doSleep) {
	B2World_obj *__this = (B2World_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2World_obj), true, "box2D.dynamics.B2World"));
	*(void **)__this = B2World_obj::_hx_vtable;
	__this->__construct(gravity,doSleep);
	return __this;
}

B2World_obj::B2World_obj()
{
}

void B2World_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2World);
	HX_MARK_MEMBER_NAME(s_stack,"s_stack");
	HX_MARK_MEMBER_NAME(m_aabb,"m_aabb");
	HX_MARK_MEMBER_NAME(m_flags,"m_flags");
	HX_MARK_MEMBER_NAME(m_contactManager,"m_contactManager");
	HX_MARK_MEMBER_NAME(m_contactSolver,"m_contactSolver");
	HX_MARK_MEMBER_NAME(m_island,"m_island");
	HX_MARK_MEMBER_NAME(m_bodyList,"m_bodyList");
	HX_MARK_MEMBER_NAME(m_jointList,"m_jointList");
	HX_MARK_MEMBER_NAME(m_contactList,"m_contactList");
	HX_MARK_MEMBER_NAME(m_bodyCount,"m_bodyCount");
	HX_MARK_MEMBER_NAME(m_contactCount,"m_contactCount");
	HX_MARK_MEMBER_NAME(m_jointCount,"m_jointCount");
	HX_MARK_MEMBER_NAME(m_controllerList,"m_controllerList");
	HX_MARK_MEMBER_NAME(m_controllerCount,"m_controllerCount");
	HX_MARK_MEMBER_NAME(m_gravity,"m_gravity");
	HX_MARK_MEMBER_NAME(m_allowSleep,"m_allowSleep");
	HX_MARK_MEMBER_NAME(m_groundBody,"m_groundBody");
	HX_MARK_MEMBER_NAME(m_destructionListener,"m_destructionListener");
	HX_MARK_MEMBER_NAME(m_debugDraw,"m_debugDraw");
	HX_MARK_MEMBER_NAME(m_inv_dt0,"m_inv_dt0");
	HX_MARK_MEMBER_NAME(aabbQueryCallback,"aabbQueryCallback");
	HX_MARK_MEMBER_NAME(shapeQueryCallback,"shapeQueryCallback");
	HX_MARK_MEMBER_NAME(pointQueryCallback,"pointQueryCallback");
	HX_MARK_END_CLASS();
}

void B2World_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(s_stack,"s_stack");
	HX_VISIT_MEMBER_NAME(m_aabb,"m_aabb");
	HX_VISIT_MEMBER_NAME(m_flags,"m_flags");
	HX_VISIT_MEMBER_NAME(m_contactManager,"m_contactManager");
	HX_VISIT_MEMBER_NAME(m_contactSolver,"m_contactSolver");
	HX_VISIT_MEMBER_NAME(m_island,"m_island");
	HX_VISIT_MEMBER_NAME(m_bodyList,"m_bodyList");
	HX_VISIT_MEMBER_NAME(m_jointList,"m_jointList");
	HX_VISIT_MEMBER_NAME(m_contactList,"m_contactList");
	HX_VISIT_MEMBER_NAME(m_bodyCount,"m_bodyCount");
	HX_VISIT_MEMBER_NAME(m_contactCount,"m_contactCount");
	HX_VISIT_MEMBER_NAME(m_jointCount,"m_jointCount");
	HX_VISIT_MEMBER_NAME(m_controllerList,"m_controllerList");
	HX_VISIT_MEMBER_NAME(m_controllerCount,"m_controllerCount");
	HX_VISIT_MEMBER_NAME(m_gravity,"m_gravity");
	HX_VISIT_MEMBER_NAME(m_allowSleep,"m_allowSleep");
	HX_VISIT_MEMBER_NAME(m_groundBody,"m_groundBody");
	HX_VISIT_MEMBER_NAME(m_destructionListener,"m_destructionListener");
	HX_VISIT_MEMBER_NAME(m_debugDraw,"m_debugDraw");
	HX_VISIT_MEMBER_NAME(m_inv_dt0,"m_inv_dt0");
	HX_VISIT_MEMBER_NAME(aabbQueryCallback,"aabbQueryCallback");
	HX_VISIT_MEMBER_NAME(shapeQueryCallback,"shapeQueryCallback");
	HX_VISIT_MEMBER_NAME(pointQueryCallback,"pointQueryCallback");
}

hx::Val B2World_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return hx::Val( step_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"solve") ) { return hx::Val( solve_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"m_aabb") ) { return hx::Val( m_aabb ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"s_stack") ) { return hx::Val( s_stack ); }
		if (HX_FIELD_EQ(inName,"m_flags") ) { return hx::Val( m_flags ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { return hx::Val( validate_dyn() ); }
		if (HX_FIELD_EQ(inName,"isLocked") ) { return hx::Val( isLocked_dyn() ); }
		if (HX_FIELD_EQ(inName,"solveTOI") ) { return hx::Val( solveTOI_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_island") ) { return hx::Val( m_island ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"queryAABB") ) { return hx::Val( queryAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawJoint") ) { return hx::Val( drawJoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawShape") ) { return hx::Val( drawShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_gravity") ) { return hx::Val( m_gravity ); }
		if (HX_FIELD_EQ(inName,"m_inv_dt0") ) { return hx::Val( m_inv_dt0 ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createBody") ) { return hx::Val( createBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGravity") ) { return hx::Val( setGravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGravity") ) { return hx::Val( getGravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"queryShape") ) { return hx::Val( queryShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"queryPoint") ) { return hx::Val( queryPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayCastOne") ) { return hx::Val( rayCastOne_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayCastAll") ) { return hx::Val( rayCastAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_bodyList") ) { return hx::Val( m_bodyList ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"destroyBody") ) { return hx::Val( destroyBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"createJoint") ) { return hx::Val( createJoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearForces") ) { return hx::Val( clearForces_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBodyList") ) { return hx::Val( getBodyList_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_jointList") ) { return hx::Val( m_jointList ); }
		if (HX_FIELD_EQ(inName,"m_bodyCount") ) { return hx::Val( m_bodyCount ); }
		if (HX_FIELD_EQ(inName,"m_debugDraw") ) { return hx::Val( m_debugDraw ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setDebugDraw") ) { return hx::Val( setDebugDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroyJoint") ) { return hx::Val( destroyJoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBodyCount") ) { return hx::Val( getBodyCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"getJointList") ) { return hx::Val( getJointList_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_jointCount") ) { return hx::Val( m_jointCount ); }
		if (HX_FIELD_EQ(inName,"m_allowSleep") ) { return hx::Val( m_allowSleep ); }
		if (HX_FIELD_EQ(inName,"m_groundBody") ) { return hx::Val( m_groundBody ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setBroadPhase") ) { return hx::Val( setBroadPhase_dyn() ); }
		if (HX_FIELD_EQ(inName,"getProxyCount") ) { return hx::Val( getProxyCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"addController") ) { return hx::Val( addController_dyn() ); }
		if (HX_FIELD_EQ(inName,"getJointCount") ) { return hx::Val( getJointCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroundBody") ) { return hx::Val( getGroundBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawDebugData") ) { return hx::Val( drawDebugData_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_contactList") ) { return hx::Val( m_contactList ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getContactList") ) { return hx::Val( getContactList_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_contactCount") ) { return hx::Val( m_contactCount ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setWarmStarting") ) { return hx::Val( setWarmStarting_dyn() ); }
		if (HX_FIELD_EQ(inName,"getContactCount") ) { return hx::Val( getContactCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScreenBounds") ) { return hx::Val( setScreenBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"getScreenBounds") ) { return hx::Val( getScreenBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_contactSolver") ) { return hx::Val( m_contactSolver ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setContactFilter") ) { return hx::Val( setContactFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeController") ) { return hx::Val( removeController_dyn() ); }
		if (HX_FIELD_EQ(inName,"createController") ) { return hx::Val( createController_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_contactManager") ) { return hx::Val( m_contactManager ); }
		if (HX_FIELD_EQ(inName,"m_controllerList") ) { return hx::Val( m_controllerList ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"destroyController") ) { return hx::Val( destroyController_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_controllerCount") ) { return hx::Val( m_controllerCount ); }
		if (HX_FIELD_EQ(inName,"aabbQueryCallback") ) { return hx::Val( aabbQueryCallback ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setContactListener") ) { return hx::Val( setContactListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"shapeQueryCallback") ) { return hx::Val( shapeQueryCallback ); }
		if (HX_FIELD_EQ(inName,"pointQueryCallback") ) { return hx::Val( pointQueryCallback ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setContinuousPhysics") ) { return hx::Val( setContinuousPhysics_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"m_destructionListener") ) { return hx::Val( m_destructionListener ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"setDestructionListener") ) { return hx::Val( setDestructionListener_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2World_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"s_xf") ) { outValue = ( s_xf ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"s_queue") ) { outValue = ( s_queue ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"e_locked") ) { outValue = ( e_locked ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"s_backupA") ) { outValue = ( s_backupA ); return true; }
		if (HX_FIELD_EQ(inName,"s_backupB") ) { outValue = ( s_backupB ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"s_timestep") ) { outValue = ( s_timestep ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"s_timestep2") ) { outValue = ( s_timestep2 ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"s_jointColor") ) { outValue = ( s_jointColor ); return true; }
		if (HX_FIELD_EQ(inName,"e_newFixture") ) { outValue = ( e_newFixture ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_warmStarting") ) { outValue = ( m_warmStarting ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"m_continuousPhysics") ) { outValue = ( m_continuousPhysics ); return true; }
	}
	return false;
}

hx::Val B2World_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"m_aabb") ) { m_aabb=inValue.Cast<  ::box2D::collision::B2AABB >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"s_stack") ) { s_stack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_flags") ) { m_flags=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_island") ) { m_island=inValue.Cast<  ::box2D::dynamics::B2Island >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_gravity") ) { m_gravity=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_inv_dt0") ) { m_inv_dt0=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_bodyList") ) { m_bodyList=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_jointList") ) { m_jointList=inValue.Cast<  ::box2D::dynamics::joints::B2Joint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_bodyCount") ) { m_bodyCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_debugDraw") ) { m_debugDraw=inValue.Cast<  ::box2D::dynamics::B2DebugDraw >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_jointCount") ) { m_jointCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_allowSleep") ) { m_allowSleep=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_groundBody") ) { m_groundBody=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_contactList") ) { m_contactList=inValue.Cast<  ::box2D::dynamics::contacts::B2Contact >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_contactCount") ) { m_contactCount=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"m_contactSolver") ) { m_contactSolver=inValue.Cast<  ::box2D::dynamics::contacts::B2ContactSolver >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"m_contactManager") ) { m_contactManager=inValue.Cast<  ::box2D::dynamics::B2ContactManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_controllerList") ) { m_controllerList=inValue.Cast<  ::box2D::dynamics::controllers::B2Controller >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"m_controllerCount") ) { m_controllerCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aabbQueryCallback") ) { aabbQueryCallback=inValue.Cast<  ::box2D::dynamics::AABBQueryCallback >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"shapeQueryCallback") ) { shapeQueryCallback=inValue.Cast<  ::box2D::dynamics::ShapeQueryCallback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointQueryCallback") ) { pointQueryCallback=inValue.Cast<  ::box2D::dynamics::PointQueryCallback >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"m_destructionListener") ) { m_destructionListener=inValue.Cast<  ::box2D::dynamics::B2DestructionListener >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2World_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"s_xf") ) { s_xf=ioValue.Cast<  ::box2D::common::math::B2Transform >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"s_queue") ) { s_queue=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"e_locked") ) { e_locked=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"s_backupA") ) { s_backupA=ioValue.Cast<  ::box2D::common::math::B2Sweep >(); return true; }
		if (HX_FIELD_EQ(inName,"s_backupB") ) { s_backupB=ioValue.Cast<  ::box2D::common::math::B2Sweep >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"s_timestep") ) { s_timestep=ioValue.Cast<  ::box2D::dynamics::B2TimeStep >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"s_timestep2") ) { s_timestep2=ioValue.Cast<  ::box2D::dynamics::B2TimeStep >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"s_jointColor") ) { s_jointColor=ioValue.Cast<  ::box2D::common::B2Color >(); return true; }
		if (HX_FIELD_EQ(inName,"e_newFixture") ) { e_newFixture=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_warmStarting") ) { m_warmStarting=ioValue.Cast< bool >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"m_continuousPhysics") ) { m_continuousPhysics=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void B2World_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("s_stack","\x3c","\x07","\x17","\x2e"));
	outFields->push(HX_HCSTRING("m_aabb","\xf2","\x12","\x5f","\x88"));
	outFields->push(HX_HCSTRING("m_flags","\xb5","\x02","\x17","\xb3"));
	outFields->push(HX_HCSTRING("m_contactManager","\x7f","\x9e","\xea","\x80"));
	outFields->push(HX_HCSTRING("m_contactSolver","\x41","\x6c","\xc1","\xee"));
	outFields->push(HX_HCSTRING("m_island","\xa7","\x47","\x2c","\x43"));
	outFields->push(HX_HCSTRING("m_bodyList","\x72","\xbd","\x21","\xee"));
	outFields->push(HX_HCSTRING("m_jointList","\x36","\x15","\xc2","\x65"));
	outFields->push(HX_HCSTRING("m_contactList","\x0c","\xb1","\xe1","\x31"));
	outFields->push(HX_HCSTRING("m_bodyCount","\x3b","\x95","\xc1","\x44"));
	outFields->push(HX_HCSTRING("m_contactCount","\x61","\xc8","\xf6","\x48"));
	outFields->push(HX_HCSTRING("m_jointCount","\xf7","\x08","\x6e","\x79"));
	outFields->push(HX_HCSTRING("m_controllerList","\xec","\x29","\xdb","\x41"));
	outFields->push(HX_HCSTRING("m_controllerCount","\x81","\x13","\x47","\x33"));
	outFields->push(HX_HCSTRING("m_gravity","\x3c","\x7d","\x81","\x82"));
	outFields->push(HX_HCSTRING("m_allowSleep","\xa0","\xf1","\x9b","\x7a"));
	outFields->push(HX_HCSTRING("m_groundBody","\x9b","\x92","\xf9","\xa7"));
	outFields->push(HX_HCSTRING("m_destructionListener","\x74","\x21","\xcc","\x7b"));
	outFields->push(HX_HCSTRING("m_debugDraw","\x65","\xf6","\x11","\x60"));
	outFields->push(HX_HCSTRING("m_inv_dt0","\x00","\x74","\x71","\x44"));
	outFields->push(HX_HCSTRING("aabbQueryCallback","\x2d","\xb2","\x70","\x4a"));
	outFields->push(HX_HCSTRING("shapeQueryCallback","\x0c","\x75","\xca","\x8f"));
	outFields->push(HX_HCSTRING("pointQueryCallback","\x7d","\x52","\xfb","\x64"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2World_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(B2World_obj,s_stack),HX_HCSTRING("s_stack","\x3c","\x07","\x17","\x2e")},
	{hx::fsObject /*::box2D::collision::B2AABB*/ ,(int)offsetof(B2World_obj,m_aabb),HX_HCSTRING("m_aabb","\xf2","\x12","\x5f","\x88")},
	{hx::fsInt,(int)offsetof(B2World_obj,m_flags),HX_HCSTRING("m_flags","\xb5","\x02","\x17","\xb3")},
	{hx::fsObject /*::box2D::dynamics::B2ContactManager*/ ,(int)offsetof(B2World_obj,m_contactManager),HX_HCSTRING("m_contactManager","\x7f","\x9e","\xea","\x80")},
	{hx::fsObject /*::box2D::dynamics::contacts::B2ContactSolver*/ ,(int)offsetof(B2World_obj,m_contactSolver),HX_HCSTRING("m_contactSolver","\x41","\x6c","\xc1","\xee")},
	{hx::fsObject /*::box2D::dynamics::B2Island*/ ,(int)offsetof(B2World_obj,m_island),HX_HCSTRING("m_island","\xa7","\x47","\x2c","\x43")},
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2World_obj,m_bodyList),HX_HCSTRING("m_bodyList","\x72","\xbd","\x21","\xee")},
	{hx::fsObject /*::box2D::dynamics::joints::B2Joint*/ ,(int)offsetof(B2World_obj,m_jointList),HX_HCSTRING("m_jointList","\x36","\x15","\xc2","\x65")},
	{hx::fsObject /*::box2D::dynamics::contacts::B2Contact*/ ,(int)offsetof(B2World_obj,m_contactList),HX_HCSTRING("m_contactList","\x0c","\xb1","\xe1","\x31")},
	{hx::fsInt,(int)offsetof(B2World_obj,m_bodyCount),HX_HCSTRING("m_bodyCount","\x3b","\x95","\xc1","\x44")},
	{hx::fsInt,(int)offsetof(B2World_obj,m_contactCount),HX_HCSTRING("m_contactCount","\x61","\xc8","\xf6","\x48")},
	{hx::fsInt,(int)offsetof(B2World_obj,m_jointCount),HX_HCSTRING("m_jointCount","\xf7","\x08","\x6e","\x79")},
	{hx::fsObject /*::box2D::dynamics::controllers::B2Controller*/ ,(int)offsetof(B2World_obj,m_controllerList),HX_HCSTRING("m_controllerList","\xec","\x29","\xdb","\x41")},
	{hx::fsInt,(int)offsetof(B2World_obj,m_controllerCount),HX_HCSTRING("m_controllerCount","\x81","\x13","\x47","\x33")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2World_obj,m_gravity),HX_HCSTRING("m_gravity","\x3c","\x7d","\x81","\x82")},
	{hx::fsBool,(int)offsetof(B2World_obj,m_allowSleep),HX_HCSTRING("m_allowSleep","\xa0","\xf1","\x9b","\x7a")},
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2World_obj,m_groundBody),HX_HCSTRING("m_groundBody","\x9b","\x92","\xf9","\xa7")},
	{hx::fsObject /*::box2D::dynamics::B2DestructionListener*/ ,(int)offsetof(B2World_obj,m_destructionListener),HX_HCSTRING("m_destructionListener","\x74","\x21","\xcc","\x7b")},
	{hx::fsObject /*::box2D::dynamics::B2DebugDraw*/ ,(int)offsetof(B2World_obj,m_debugDraw),HX_HCSTRING("m_debugDraw","\x65","\xf6","\x11","\x60")},
	{hx::fsFloat,(int)offsetof(B2World_obj,m_inv_dt0),HX_HCSTRING("m_inv_dt0","\x00","\x74","\x71","\x44")},
	{hx::fsObject /*::box2D::dynamics::AABBQueryCallback*/ ,(int)offsetof(B2World_obj,aabbQueryCallback),HX_HCSTRING("aabbQueryCallback","\x2d","\xb2","\x70","\x4a")},
	{hx::fsObject /*::box2D::dynamics::ShapeQueryCallback*/ ,(int)offsetof(B2World_obj,shapeQueryCallback),HX_HCSTRING("shapeQueryCallback","\x0c","\x75","\xca","\x8f")},
	{hx::fsObject /*::box2D::dynamics::PointQueryCallback*/ ,(int)offsetof(B2World_obj,pointQueryCallback),HX_HCSTRING("pointQueryCallback","\x7d","\x52","\xfb","\x64")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2World_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::box2D::dynamics::B2TimeStep*/ ,(void *) &B2World_obj::s_timestep2,HX_HCSTRING("s_timestep2","\x2d","\x8a","\x5e","\xe5")},
	{hx::fsObject /*::box2D::common::math::B2Transform*/ ,(void *) &B2World_obj::s_xf,HX_HCSTRING("s_xf","\x7a","\x08","\x4c","\x4c")},
	{hx::fsObject /*::box2D::common::math::B2Sweep*/ ,(void *) &B2World_obj::s_backupA,HX_HCSTRING("s_backupA","\xb3","\x66","\xbe","\xf7")},
	{hx::fsObject /*::box2D::common::math::B2Sweep*/ ,(void *) &B2World_obj::s_backupB,HX_HCSTRING("s_backupB","\xb4","\x66","\xbe","\xf7")},
	{hx::fsObject /*::box2D::dynamics::B2TimeStep*/ ,(void *) &B2World_obj::s_timestep,HX_HCSTRING("s_timestep","\x65","\x0e","\xee","\xaa")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &B2World_obj::s_queue,HX_HCSTRING("s_queue","\x85","\x2d","\xf6","\x07")},
	{hx::fsObject /*::box2D::common::B2Color*/ ,(void *) &B2World_obj::s_jointColor,HX_HCSTRING("s_jointColor","\x45","\xc7","\xe3","\x03")},
	{hx::fsBool,(void *) &B2World_obj::m_warmStarting,HX_HCSTRING("m_warmStarting","\x77","\x7f","\xce","\xb8")},
	{hx::fsBool,(void *) &B2World_obj::m_continuousPhysics,HX_HCSTRING("m_continuousPhysics","\xe6","\xef","\x41","\xfe")},
	{hx::fsInt,(void *) &B2World_obj::e_newFixture,HX_HCSTRING("e_newFixture","\x23","\xec","\x33","\xf2")},
	{hx::fsInt,(void *) &B2World_obj::e_locked,HX_HCSTRING("e_locked","\xe4","\x1c","\x25","\x59")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2World_obj_sMemberFields[] = {
	HX_HCSTRING("setDestructionListener","\x04","\x4f","\x3b","\x62"),
	HX_HCSTRING("setContactFilter","\x76","\x5d","\xa2","\x5a"),
	HX_HCSTRING("setContactListener","\xb2","\xa9","\xb8","\x31"),
	HX_HCSTRING("setDebugDraw","\xf5","\x8f","\x0b","\x4a"),
	HX_HCSTRING("setBroadPhase","\xdb","\x0b","\xc3","\x0c"),
	HX_HCSTRING("validate","\x96","\xd0","\xe3","\x04"),
	HX_HCSTRING("getProxyCount","\xb7","\x13","\x36","\xf6"),
	HX_HCSTRING("createBody","\xbe","\x3b","\xa9","\x53"),
	HX_HCSTRING("destroyBody","\xbc","\xd8","\x2d","\x9f"),
	HX_HCSTRING("createJoint","\xae","\x70","\xa3","\x7b"),
	HX_HCSTRING("destroyJoint","\xf0","\x31","\x28","\x44"),
	HX_HCSTRING("addController","\x1d","\xe2","\x07","\x6f"),
	HX_HCSTRING("removeController","\x00","\xb6","\x67","\xbe"),
	HX_HCSTRING("createController","\xb8","\x16","\xec","\x39"),
	HX_HCSTRING("destroyController","\x36","\x86","\x19","\x57"),
	HX_HCSTRING("setWarmStarting","\xe7","\x3f","\x49","\x11"),
	HX_HCSTRING("setContinuousPhysics","\x76","\x99","\xc7","\xf8"),
	HX_HCSTRING("getBodyCount","\x57","\x0b","\xc2","\x19"),
	HX_HCSTRING("getJointCount","\x5b","\xeb","\xd4","\x04"),
	HX_HCSTRING("getContactCount","\xc5","\x0b","\xa6","\xa5"),
	HX_HCSTRING("setGravity","\xcc","\x92","\xde","\xca"),
	HX_HCSTRING("getGravity","\x58","\xf4","\x60","\xc7"),
	HX_HCSTRING("getGroundBody","\xff","\x74","\x60","\x33"),
	HX_HCSTRING("step","\x4c","\xe7","\x5b","\x4c"),
	HX_HCSTRING("clearForces","\x95","\x09","\x74","\x91"),
	HX_HCSTRING("drawDebugData","\x79","\x0d","\xd6","\x84"),
	HX_HCSTRING("queryAABB","\xa8","\x19","\xe9","\x13"),
	HX_HCSTRING("queryShape","\xf9","\xca","\x22","\xcf"),
	HX_HCSTRING("queryPoint","\x28","\x9c","\x95","\x19"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("rayCastOne","\x1d","\xf8","\x33","\xc6"),
	HX_HCSTRING("rayCastAll","\xd8","\x56","\x29","\xc6"),
	HX_HCSTRING("getBodyList","\xd6","\x7e","\xca","\xec"),
	HX_HCSTRING("getJointList","\x52","\x8b","\xc2","\x3a"),
	HX_HCSTRING("getContactList","\x28","\xe6","\x80","\xa0"),
	HX_HCSTRING("isLocked","\x94","\xa0","\x30","\xb2"),
	HX_HCSTRING("s_stack","\x3c","\x07","\x17","\x2e"),
	HX_HCSTRING("solve","\x7f","\xbf","\xc5","\x80"),
	HX_HCSTRING("solveTOI","\x4f","\xbc","\x4d","\x1c"),
	HX_HCSTRING("drawJoint","\xa6","\x6e","\x33","\x1a"),
	HX_HCSTRING("drawShape","\x7d","\x18","\x28","\x44"),
	HX_HCSTRING("m_aabb","\xf2","\x12","\x5f","\x88"),
	HX_HCSTRING("setScreenBounds","\xc3","\x61","\xf1","\x61"),
	HX_HCSTRING("getScreenBounds","\xb7","\xe4","\x25","\x66"),
	HX_HCSTRING("m_flags","\xb5","\x02","\x17","\xb3"),
	HX_HCSTRING("m_contactManager","\x7f","\x9e","\xea","\x80"),
	HX_HCSTRING("m_contactSolver","\x41","\x6c","\xc1","\xee"),
	HX_HCSTRING("m_island","\xa7","\x47","\x2c","\x43"),
	HX_HCSTRING("m_bodyList","\x72","\xbd","\x21","\xee"),
	HX_HCSTRING("m_jointList","\x36","\x15","\xc2","\x65"),
	HX_HCSTRING("m_contactList","\x0c","\xb1","\xe1","\x31"),
	HX_HCSTRING("m_bodyCount","\x3b","\x95","\xc1","\x44"),
	HX_HCSTRING("m_contactCount","\x61","\xc8","\xf6","\x48"),
	HX_HCSTRING("m_jointCount","\xf7","\x08","\x6e","\x79"),
	HX_HCSTRING("m_controllerList","\xec","\x29","\xdb","\x41"),
	HX_HCSTRING("m_controllerCount","\x81","\x13","\x47","\x33"),
	HX_HCSTRING("m_gravity","\x3c","\x7d","\x81","\x82"),
	HX_HCSTRING("m_allowSleep","\xa0","\xf1","\x9b","\x7a"),
	HX_HCSTRING("m_groundBody","\x9b","\x92","\xf9","\xa7"),
	HX_HCSTRING("m_destructionListener","\x74","\x21","\xcc","\x7b"),
	HX_HCSTRING("m_debugDraw","\x65","\xf6","\x11","\x60"),
	HX_HCSTRING("m_inv_dt0","\x00","\x74","\x71","\x44"),
	HX_HCSTRING("aabbQueryCallback","\x2d","\xb2","\x70","\x4a"),
	HX_HCSTRING("shapeQueryCallback","\x0c","\x75","\xca","\x8f"),
	HX_HCSTRING("pointQueryCallback","\x7d","\x52","\xfb","\x64"),
	::String(null()) };

static void B2World_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2World_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2World_obj::s_timestep2,"s_timestep2");
	HX_MARK_MEMBER_NAME(B2World_obj::s_xf,"s_xf");
	HX_MARK_MEMBER_NAME(B2World_obj::s_backupA,"s_backupA");
	HX_MARK_MEMBER_NAME(B2World_obj::s_backupB,"s_backupB");
	HX_MARK_MEMBER_NAME(B2World_obj::s_timestep,"s_timestep");
	HX_MARK_MEMBER_NAME(B2World_obj::s_queue,"s_queue");
	HX_MARK_MEMBER_NAME(B2World_obj::s_jointColor,"s_jointColor");
	HX_MARK_MEMBER_NAME(B2World_obj::m_warmStarting,"m_warmStarting");
	HX_MARK_MEMBER_NAME(B2World_obj::m_continuousPhysics,"m_continuousPhysics");
	HX_MARK_MEMBER_NAME(B2World_obj::e_newFixture,"e_newFixture");
	HX_MARK_MEMBER_NAME(B2World_obj::e_locked,"e_locked");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2World_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2World_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2World_obj::s_timestep2,"s_timestep2");
	HX_VISIT_MEMBER_NAME(B2World_obj::s_xf,"s_xf");
	HX_VISIT_MEMBER_NAME(B2World_obj::s_backupA,"s_backupA");
	HX_VISIT_MEMBER_NAME(B2World_obj::s_backupB,"s_backupB");
	HX_VISIT_MEMBER_NAME(B2World_obj::s_timestep,"s_timestep");
	HX_VISIT_MEMBER_NAME(B2World_obj::s_queue,"s_queue");
	HX_VISIT_MEMBER_NAME(B2World_obj::s_jointColor,"s_jointColor");
	HX_VISIT_MEMBER_NAME(B2World_obj::m_warmStarting,"m_warmStarting");
	HX_VISIT_MEMBER_NAME(B2World_obj::m_continuousPhysics,"m_continuousPhysics");
	HX_VISIT_MEMBER_NAME(B2World_obj::e_newFixture,"e_newFixture");
	HX_VISIT_MEMBER_NAME(B2World_obj::e_locked,"e_locked");
};

#endif

hx::Class B2World_obj::__mClass;

static ::String B2World_obj_sStaticFields[] = {
	HX_HCSTRING("s_timestep2","\x2d","\x8a","\x5e","\xe5"),
	HX_HCSTRING("s_xf","\x7a","\x08","\x4c","\x4c"),
	HX_HCSTRING("s_backupA","\xb3","\x66","\xbe","\xf7"),
	HX_HCSTRING("s_backupB","\xb4","\x66","\xbe","\xf7"),
	HX_HCSTRING("s_timestep","\x65","\x0e","\xee","\xaa"),
	HX_HCSTRING("s_queue","\x85","\x2d","\xf6","\x07"),
	HX_HCSTRING("s_jointColor","\x45","\xc7","\xe3","\x03"),
	HX_HCSTRING("m_warmStarting","\x77","\x7f","\xce","\xb8"),
	HX_HCSTRING("m_continuousPhysics","\xe6","\xef","\x41","\xfe"),
	HX_HCSTRING("e_newFixture","\x23","\xec","\x33","\xf2"),
	HX_HCSTRING("e_locked","\xe4","\x1c","\x25","\x59"),
	::String(null())
};

void B2World_obj::__register()
{
	hx::Object *dummy = new B2World_obj;
	B2World_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.B2World","\x19","\x8d","\x85","\xbb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2World_obj::__GetStatic;
	__mClass->mSetStaticField = &B2World_obj::__SetStatic;
	__mClass->mMarkFunc = B2World_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2World_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2World_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2World_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2World_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2World_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2World_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2World_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_570_boot)
HXDLIN( 570)		s_timestep2 =  ::box2D::dynamics::B2TimeStep_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_643_boot)
HXDLIN( 643)		s_xf =  ::box2D::common::math::B2Transform_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1206_boot)
HXDLIN(1206)		s_backupA =  ::box2D::common::math::B2Sweep_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1207_boot)
HXDLIN(1207)		s_backupB =  ::box2D::common::math::B2Sweep_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1208_boot)
HXDLIN(1208)		s_timestep =  ::box2D::dynamics::B2TimeStep_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1209_boot)
HXDLIN(1209)		s_queue = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1583_boot)
HXDLIN(1583)		s_jointColor =  ::box2D::common::B2Color_obj::__alloc( HX_CTX ,((Float)0.5),((Float)0.8),((Float)0.8));
            	}
{
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1713_boot)
HXDLIN(1713)		m_warmStarting = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1716_boot)
HXDLIN(1716)		m_continuousPhysics = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1719_boot)
HXDLIN(1719)		e_newFixture = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9ecf9649aee0ceb2_1720_boot)
HXDLIN(1720)		e_locked = (int)2;
            	}
}

} // end namespace box2D
} // end namespace dynamics
