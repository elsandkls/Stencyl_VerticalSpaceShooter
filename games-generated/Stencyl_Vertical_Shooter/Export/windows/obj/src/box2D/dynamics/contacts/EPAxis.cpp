// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_dynamics_contacts_EPAxis
#include <box2D/dynamics/contacts/EPAxis.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_Type
#include <box2D/dynamics/contacts/Type.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3bc75ad9c2a1a86f_864_new,"box2D.dynamics.contacts.EPAxis","new",0x59245170,"box2D.dynamics.contacts.EPAxis.new","box2D/dynamics/contacts/B2PolyAndEdgeContact.hx",864,0x86a2ad23)
namespace box2D{
namespace dynamics{
namespace contacts{

void EPAxis_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3bc75ad9c2a1a86f_864_new)
            	}

Dynamic EPAxis_obj::__CreateEmpty() { return new EPAxis_obj; }

void *EPAxis_obj::_hx_vtable = 0;

Dynamic EPAxis_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EPAxis_obj > _hx_result = new EPAxis_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EPAxis_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2150a328;
}


EPAxis_obj::EPAxis_obj()
{
}

void EPAxis_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EPAxis);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(separation,"separation");
	HX_MARK_END_CLASS();
}

void EPAxis_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(separation,"separation");
}

hx::Val EPAxis_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"separation") ) { return hx::Val( separation ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EPAxis_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::box2D::dynamics::contacts::Type >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"separation") ) { separation=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EPAxis_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("separation","\x46","\x68","\xf0","\x1d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EPAxis_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::dynamics::contacts::Type*/ ,(int)offsetof(EPAxis_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(EPAxis_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsFloat,(int)offsetof(EPAxis_obj,separation),HX_HCSTRING("separation","\x46","\x68","\xf0","\x1d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EPAxis_obj_sStaticStorageInfo = 0;
#endif

static ::String EPAxis_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("separation","\x46","\x68","\xf0","\x1d"),
	::String(null()) };

static void EPAxis_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EPAxis_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EPAxis_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EPAxis_obj::__mClass,"__mClass");
};

#endif

hx::Class EPAxis_obj::__mClass;

void EPAxis_obj::__register()
{
	hx::Object *dummy = new EPAxis_obj;
	EPAxis_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.contacts.EPAxis","\x7e","\x19","\xeb","\xd7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EPAxis_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EPAxis_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EPAxis_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EPAxis_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EPAxis_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EPAxis_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace dynamics
} // end namespace contacts
