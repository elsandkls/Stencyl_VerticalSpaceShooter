// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_collision_B2AABB
#include <box2D/collision/B2AABB.h>
#endif
#ifndef INCLUDED_box2D_collision_B2DynamicTreeNode
#include <box2D/collision/B2DynamicTreeNode.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastInput
#include <box2D/collision/B2RayCastInput.h>
#endif
#ifndef INCLUDED_box2D_collision_B2RayCastOutput
#include <box2D/collision/B2RayCastOutput.h>
#endif
#ifndef INCLUDED_box2D_collision_IBroadPhase
#include <box2D/collision/IBroadPhase.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2MassData
#include <box2D/collision/shapes/B2MassData.h>
#endif
#ifndef INCLUDED_box2D_collision_shapes_B2Shape
#include <box2D/collision/shapes/B2Shape.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2FilterData
#include <box2D/dynamics/B2FilterData.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2FixtureDef
#include <box2D/dynamics/B2FixtureDef.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2Contact
#include <box2D/dynamics/contacts/B2Contact.h>
#endif
#ifndef INCLUDED_box2D_dynamics_contacts_B2ContactEdge
#include <box2D/dynamics/contacts/B2ContactEdge.h>
#endif
#ifndef INCLUDED_com_stencyl_models_Actor
#include <com/stencyl/models/Actor.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_33a893e557aa2471_265_new,"box2D.dynamics.B2Fixture","new",0x57ce3b42,"box2D.dynamics.B2Fixture.new","box2D/dynamics/B2Fixture.hx",265,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_52_getType,"box2D.dynamics.B2Fixture","getType",0x56122652,"box2D.dynamics.B2Fixture.getType","box2D/dynamics/B2Fixture.hx",52,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_61_getShape,"box2D.dynamics.B2Fixture","getShape",0x5b20d489,"box2D.dynamics.B2Fixture.getShape","box2D/dynamics/B2Fixture.hx",61,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_68_setSensor,"box2D.dynamics.B2Fixture","setSensor",0x935067de,"box2D.dynamics.B2Fixture.setSensor","box2D/dynamics/B2Fixture.hx",68,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_96_isSensor,"box2D.dynamics.B2Fixture","isSensor",0x4326afa2,"box2D.dynamics.B2Fixture.isSensor","box2D/dynamics/B2Fixture.hx",96,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_104_setFilterData,"box2D.dynamics.B2Fixture","setFilterData",0x00ddb5a6,"box2D.dynamics.B2Fixture.setFilterData","box2D/dynamics/B2Fixture.hx",104,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_127_getFilterData,"box2D.dynamics.B2Fixture","getFilterData",0xbbd7d39a,"box2D.dynamics.B2Fixture.getFilterData","box2D/dynamics/B2Fixture.hx",127,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_136_getBody,"box2D.dynamics.B2Fixture","getBody",0x4a24ae3a,"box2D.dynamics.B2Fixture.getBody","box2D/dynamics/B2Fixture.hx",136,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_145_getNext,"box2D.dynamics.B2Fixture","getNext",0x520bb88b,"box2D.dynamics.B2Fixture.getNext","box2D/dynamics/B2Fixture.hx",145,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_154_getUserData,"box2D.dynamics.B2Fixture","getUserData",0xbb2f75ad,"box2D.dynamics.B2Fixture.getUserData","box2D/dynamics/B2Fixture.hx",154,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_162_SetUserData,"box2D.dynamics.B2Fixture","SetUserData",0xa9cf1499,"box2D.dynamics.B2Fixture.SetUserData","box2D/dynamics/B2Fixture.hx",162,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_172_testPoint,"box2D.dynamics.B2Fixture","testPoint",0x57aab300,"box2D.dynamics.B2Fixture.testPoint","box2D/dynamics/B2Fixture.hx",172,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_182_rayCast,"box2D.dynamics.B2Fixture","rayCast",0x5bc2e1ab,"box2D.dynamics.B2Fixture.rayCast","box2D/dynamics/B2Fixture.hx",182,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_192_getMassData,"box2D.dynamics.B2Fixture","getMassData",0x317f2cd6,"box2D.dynamics.B2Fixture.getMassData","box2D/dynamics/B2Fixture.hx",192,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_208_setDensity,"box2D.dynamics.B2Fixture","setDensity",0xe343f9c4,"box2D.dynamics.B2Fixture.setDensity","box2D/dynamics/B2Fixture.hx",208,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_216_getDensity,"box2D.dynamics.B2Fixture","getDensity",0xdfc65b50,"box2D.dynamics.B2Fixture.getDensity","box2D/dynamics/B2Fixture.hx",216,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_224_getFriction,"box2D.dynamics.B2Fixture","getFriction",0x4dd05892,"box2D.dynamics.B2Fixture.getFriction","box2D/dynamics/B2Fixture.hx",224,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_232_setFriction,"box2D.dynamics.B2Fixture","setFriction",0x583d5f9e,"box2D.dynamics.B2Fixture.setFriction","box2D/dynamics/B2Fixture.hx",232,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_240_getRestitution,"box2D.dynamics.B2Fixture","getRestitution",0x25141bd2,"box2D.dynamics.B2Fixture.getRestitution","box2D/dynamics/B2Fixture.hx",240,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_248_setRestitution,"box2D.dynamics.B2Fixture","setRestitution",0x45340446,"box2D.dynamics.B2Fixture.setRestitution","box2D/dynamics/B2Fixture.hx",248,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_258_getAABB,"box2D.dynamics.B2Fixture","getAABB",0x49587218,"box2D.dynamics.B2Fixture.getAABB","box2D/dynamics/B2Fixture.hx",258,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_286_create,"box2D.dynamics.B2Fixture","create",0x32d5755a,"box2D.dynamics.B2Fixture.create","box2D/dynamics/B2Fixture.hx",286,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_316_destroy,"box2D.dynamics.B2Fixture","destroy",0x5b0cb0dc,"box2D.dynamics.B2Fixture.destroy","box2D/dynamics/B2Fixture.hx",316,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_322_createProxy,"box2D.dynamics.B2Fixture","createProxy",0x821e42b4,"box2D.dynamics.B2Fixture.createProxy","box2D/dynamics/B2Fixture.hx",322,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_333_destroyProxy,"box2D.dynamics.B2Fixture","destroyProxy",0x3b360ff2,"box2D.dynamics.B2Fixture.destroyProxy","box2D/dynamics/B2Fixture.hx",333,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_345_synchronize,"box2D.dynamics.B2Fixture","synchronize",0xc5548832,"box2D.dynamics.B2Fixture.synchronize","box2D/dynamics/B2Fixture.hx",345,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_360_boot,"box2D.dynamics.B2Fixture","boot",0x74be9f10,"box2D.dynamics.B2Fixture.boot","box2D/dynamics/B2Fixture.hx",360,0xdd1b2a4e)
HX_LOCAL_STACK_FRAME(_hx_pos_33a893e557aa2471_361_boot,"box2D.dynamics.B2Fixture","boot",0x74be9f10,"box2D.dynamics.B2Fixture.boot","box2D/dynamics/B2Fixture.hx",361,0xdd1b2a4e)
namespace box2D{
namespace dynamics{

void B2Fixture_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_33a893e557aa2471_265_new)
HXLINE( 266)		this->m_filter =  ::box2D::dynamics::B2FilterData_obj::__alloc( HX_CTX );
HXLINE( 267)		this->m_aabb =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
HXLINE( 268)		this->m_userData = null();
HXLINE( 269)		this->m_body = null();
HXLINE( 270)		this->m_next = null();
HXLINE( 272)		this->m_shape = null();
HXLINE( 273)		this->m_density = ((Float)0.0);
HXLINE( 275)		this->m_friction = ((Float)0.0);
HXLINE( 276)		this->m_restitution = ((Float)0.0);
HXLINE( 278)		this->groupID = (int)3;
            	}

Dynamic B2Fixture_obj::__CreateEmpty() { return new B2Fixture_obj; }

void *B2Fixture_obj::_hx_vtable = 0;

Dynamic B2Fixture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Fixture_obj > _hx_result = new B2Fixture_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2Fixture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x44167528;
}

int B2Fixture_obj::getType(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_52_getType)
HXDLIN(  52)		return this->m_shape->getType();
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getType,return )

 ::box2D::collision::shapes::B2Shape B2Fixture_obj::getShape(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_61_getShape)
HXDLIN(  61)		return this->m_shape;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getShape,return )

void B2Fixture_obj::setSensor(bool sensor){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_68_setSensor)
HXLINE(  69)		if ((this->m_isSensor == sensor)) {
HXLINE(  70)			return;
            		}
HXLINE(  72)		this->m_isSensor = sensor;
HXLINE(  74)		if (hx::IsNull( this->m_body )) {
HXLINE(  75)			return;
            		}
HXLINE(  77)		 ::box2D::dynamics::contacts::B2ContactEdge edge = this->m_body->getContactList();
HXLINE(  78)		while(hx::IsNotNull( edge )){
HXLINE(  80)			 ::box2D::dynamics::contacts::B2Contact contact = edge->contact;
HXLINE(  81)			 ::box2D::dynamics::B2Fixture fixtureA = contact->getFixtureA();
HXLINE(  82)			 ::box2D::dynamics::B2Fixture fixtureB = contact->getFixtureB();
HXLINE(  83)			bool _hx_tmp;
HXDLIN(  83)			if (hx::IsNotEq( fixtureA,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  83)				_hx_tmp = hx::IsEq( fixtureB,hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(  83)				_hx_tmp = true;
            			}
HXDLIN(  83)			if (_hx_tmp) {
HXLINE(  84)				bool _hx_tmp1;
HXDLIN(  84)				if (!(fixtureA->isSensor())) {
HXLINE(  84)					_hx_tmp1 = fixtureB->isSensor();
            				}
            				else {
HXLINE(  84)					_hx_tmp1 = true;
            				}
HXDLIN(  84)				contact->setSensor(_hx_tmp1);
            			}
HXLINE(  85)			edge = edge->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Fixture_obj,setSensor,(void))

bool B2Fixture_obj::isSensor(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_96_isSensor)
HXDLIN(  96)		return this->m_isSensor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,isSensor,return )

void B2Fixture_obj::setFilterData( ::box2D::dynamics::B2FilterData filter){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_104_setFilterData)
HXLINE( 105)		this->m_filter = filter->copy();
HXLINE( 107)		if (hx::IsNotNull( this->m_body )) {
HXLINE( 108)			return;
            		}
HXLINE( 110)		 ::box2D::dynamics::contacts::B2ContactEdge edge = this->m_body->getContactList();
HXLINE( 111)		while(hx::IsNotNull( edge )){
HXLINE( 113)			 ::box2D::dynamics::contacts::B2Contact contact = edge->contact;
HXLINE( 114)			 ::box2D::dynamics::B2Fixture fixtureA = contact->getFixtureA();
HXLINE( 115)			 ::box2D::dynamics::B2Fixture fixtureB = contact->getFixtureB();
HXLINE( 116)			bool _hx_tmp;
HXDLIN( 116)			if (hx::IsNotEq( fixtureA,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 116)				_hx_tmp = hx::IsEq( fixtureB,hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE( 116)				_hx_tmp = true;
            			}
HXDLIN( 116)			if (_hx_tmp) {
HXLINE( 117)				contact->flagForFiltering();
            			}
HXLINE( 118)			edge = edge->next;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Fixture_obj,setFilterData,(void))

 ::box2D::dynamics::B2FilterData B2Fixture_obj::getFilterData(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_127_getFilterData)
HXDLIN( 127)		return this->m_filter->copy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getFilterData,return )

 ::box2D::dynamics::B2Body B2Fixture_obj::getBody(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_136_getBody)
HXDLIN( 136)		return this->m_body;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getBody,return )

 ::box2D::dynamics::B2Fixture B2Fixture_obj::getNext(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_145_getNext)
HXDLIN( 145)		return this->m_next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getNext,return )

 ::com::stencyl::models::Actor B2Fixture_obj::getUserData(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_154_getUserData)
HXDLIN( 154)		return this->m_userData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getUserData,return )

void B2Fixture_obj::SetUserData( ::com::stencyl::models::Actor data){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_162_SetUserData)
HXDLIN( 162)		this->m_userData = data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Fixture_obj,SetUserData,(void))

bool B2Fixture_obj::testPoint( ::box2D::common::math::B2Vec2 p){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_172_testPoint)
HXDLIN( 172)		 ::box2D::collision::shapes::B2Shape _hx_tmp = this->m_shape;
HXDLIN( 172)		return _hx_tmp->testPoint(this->m_body->getTransform(),p);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Fixture_obj,testPoint,return )

bool B2Fixture_obj::rayCast( ::box2D::collision::B2RayCastOutput output, ::box2D::collision::B2RayCastInput input){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_182_rayCast)
HXDLIN( 182)		 ::box2D::collision::shapes::B2Shape _hx_tmp = this->m_shape;
HXDLIN( 182)		return _hx_tmp->rayCast(output,input,this->m_body->getTransform());
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Fixture_obj,rayCast,return )

 ::box2D::collision::shapes::B2MassData B2Fixture_obj::getMassData( ::box2D::collision::shapes::B2MassData massData){
            	HX_GC_STACKFRAME(&_hx_pos_33a893e557aa2471_192_getMassData)
HXLINE( 193)		if (hx::IsNull( massData )) {
HXLINE( 195)			massData =  ::box2D::collision::shapes::B2MassData_obj::__alloc( HX_CTX );
            		}
HXLINE( 197)		this->m_shape->computeMass(massData,this->m_density);
HXLINE( 198)		return massData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Fixture_obj,getMassData,return )

void B2Fixture_obj::setDensity(Float density){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_208_setDensity)
HXDLIN( 208)		this->m_density = density;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Fixture_obj,setDensity,(void))

Float B2Fixture_obj::getDensity(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_216_getDensity)
HXDLIN( 216)		return this->m_density;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getDensity,return )

Float B2Fixture_obj::getFriction(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_224_getFriction)
HXDLIN( 224)		return this->m_friction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getFriction,return )

void B2Fixture_obj::setFriction(Float friction){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_232_setFriction)
HXDLIN( 232)		this->m_friction = friction;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Fixture_obj,setFriction,(void))

Float B2Fixture_obj::getRestitution(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_240_getRestitution)
HXDLIN( 240)		return this->m_restitution;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getRestitution,return )

void B2Fixture_obj::setRestitution(Float restitution){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_248_setRestitution)
HXDLIN( 248)		this->m_restitution = restitution;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Fixture_obj,setRestitution,(void))

 ::box2D::collision::B2AABB B2Fixture_obj::getAABB(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_258_getAABB)
HXDLIN( 258)		return this->m_aabb;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,getAABB,return )

void B2Fixture_obj::create( ::box2D::dynamics::B2Body body, ::box2D::common::math::B2Transform xf, ::box2D::dynamics::B2FixtureDef def){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_286_create)
HXLINE( 287)		this->m_userData = ( ( ::com::stencyl::models::Actor)(def->userData) );
HXLINE( 288)		this->m_friction = def->friction;
HXLINE( 289)		this->m_restitution = def->restitution;
HXLINE( 291)		this->m_body = body;
HXLINE( 292)		this->m_next = null();
HXLINE( 294)		this->m_filter = def->filter->copy();
HXLINE( 296)		this->m_isSensor = def->isSensor;
HXLINE( 298)		this->m_shape = def->shape->copy();
HXLINE( 300)		this->m_density = def->density;
HXLINE( 303)		this->groupID = def->groupID;
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2Fixture_obj,create,(void))

void B2Fixture_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_316_destroy)
HXDLIN( 316)		this->m_shape = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Fixture_obj,destroy,(void))

void B2Fixture_obj::createProxy(::Dynamic broadPhase, ::box2D::common::math::B2Transform xf){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_322_createProxy)
HXLINE( 326)		this->m_shape->computeAABB(this->m_aabb,xf);
HXLINE( 327)		this->m_proxy = ::box2D::collision::IBroadPhase_obj::createProxy(broadPhase,this->m_aabb,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Fixture_obj,createProxy,(void))

void B2Fixture_obj::destroyProxy(::Dynamic broadPhase){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_333_destroyProxy)
HXLINE( 334)		if (hx::IsNull( this->m_proxy )) {
HXLINE( 336)			return;
            		}
HXLINE( 340)		::box2D::collision::IBroadPhase_obj::destroyProxy(broadPhase,this->m_proxy);
HXLINE( 341)		this->m_proxy = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Fixture_obj,destroyProxy,(void))

void B2Fixture_obj::synchronize(::Dynamic broadPhase, ::box2D::common::math::B2Transform transform1, ::box2D::common::math::B2Transform transform2){
            	HX_STACKFRAME(&_hx_pos_33a893e557aa2471_345_synchronize)
HXLINE( 346)		if (hx::IsNull( this->m_proxy )) {
HXLINE( 347)			return;
            		}
HXLINE( 352)		this->m_shape->computeAABB(::box2D::dynamics::B2Fixture_obj::tempAABB1,transform1);
HXLINE( 353)		this->m_shape->computeAABB(::box2D::dynamics::B2Fixture_obj::tempAABB2,transform2);
HXLINE( 355)		this->m_aabb->combine(::box2D::dynamics::B2Fixture_obj::tempAABB1,::box2D::dynamics::B2Fixture_obj::tempAABB2);
HXLINE( 356)		 ::box2D::common::math::B2Vec2 displacement = ::box2D::common::math::B2Math_obj::subtractVVPooled(transform2->position,transform1->position);
HXLINE( 357)		::box2D::collision::IBroadPhase_obj::moveProxy(broadPhase,this->m_proxy,this->m_aabb,displacement);
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2Fixture_obj,synchronize,(void))

 ::box2D::collision::B2AABB B2Fixture_obj::tempAABB1;

 ::box2D::collision::B2AABB B2Fixture_obj::tempAABB2;


hx::ObjectPtr< B2Fixture_obj > B2Fixture_obj::__new() {
	hx::ObjectPtr< B2Fixture_obj > __this = new B2Fixture_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2Fixture_obj > B2Fixture_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2Fixture_obj *__this = (B2Fixture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Fixture_obj), true, "box2D.dynamics.B2Fixture"));
	*(void **)__this = B2Fixture_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2Fixture_obj::B2Fixture_obj()
{
}

void B2Fixture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Fixture);
	HX_MARK_MEMBER_NAME(m_massData,"m_massData");
	HX_MARK_MEMBER_NAME(m_aabb,"m_aabb");
	HX_MARK_MEMBER_NAME(m_density,"m_density");
	HX_MARK_MEMBER_NAME(m_next,"m_next");
	HX_MARK_MEMBER_NAME(m_body,"m_body");
	HX_MARK_MEMBER_NAME(m_shape,"m_shape");
	HX_MARK_MEMBER_NAME(m_friction,"m_friction");
	HX_MARK_MEMBER_NAME(m_restitution,"m_restitution");
	HX_MARK_MEMBER_NAME(m_proxy,"m_proxy");
	HX_MARK_MEMBER_NAME(m_filter,"m_filter");
	HX_MARK_MEMBER_NAME(m_isSensor,"m_isSensor");
	HX_MARK_MEMBER_NAME(m_userData,"m_userData");
	HX_MARK_MEMBER_NAME(groupID,"groupID");
	HX_MARK_END_CLASS();
}

void B2Fixture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_massData,"m_massData");
	HX_VISIT_MEMBER_NAME(m_aabb,"m_aabb");
	HX_VISIT_MEMBER_NAME(m_density,"m_density");
	HX_VISIT_MEMBER_NAME(m_next,"m_next");
	HX_VISIT_MEMBER_NAME(m_body,"m_body");
	HX_VISIT_MEMBER_NAME(m_shape,"m_shape");
	HX_VISIT_MEMBER_NAME(m_friction,"m_friction");
	HX_VISIT_MEMBER_NAME(m_restitution,"m_restitution");
	HX_VISIT_MEMBER_NAME(m_proxy,"m_proxy");
	HX_VISIT_MEMBER_NAME(m_filter,"m_filter");
	HX_VISIT_MEMBER_NAME(m_isSensor,"m_isSensor");
	HX_VISIT_MEMBER_NAME(m_userData,"m_userData");
	HX_VISIT_MEMBER_NAME(groupID,"groupID");
}

hx::Val B2Fixture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_aabb") ) { return hx::Val( m_aabb ); }
		if (HX_FIELD_EQ(inName,"m_next") ) { return hx::Val( m_next ); }
		if (HX_FIELD_EQ(inName,"m_body") ) { return hx::Val( m_body ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getType") ) { return hx::Val( getType_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBody") ) { return hx::Val( getBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNext") ) { return hx::Val( getNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayCast") ) { return hx::Val( rayCast_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAABB") ) { return hx::Val( getAABB_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_shape") ) { return hx::Val( m_shape ); }
		if (HX_FIELD_EQ(inName,"m_proxy") ) { return hx::Val( m_proxy ); }
		if (HX_FIELD_EQ(inName,"groupID") ) { return hx::Val( groupID ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getShape") ) { return hx::Val( getShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"isSensor") ) { return hx::Val( isSensor_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_filter") ) { return hx::Val( m_filter ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setSensor") ) { return hx::Val( setSensor_dyn() ); }
		if (HX_FIELD_EQ(inName,"testPoint") ) { return hx::Val( testPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_density") ) { return hx::Val( m_density ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setDensity") ) { return hx::Val( setDensity_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDensity") ) { return hx::Val( getDensity_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_massData") ) { return hx::Val( m_massData ); }
		if (HX_FIELD_EQ(inName,"m_friction") ) { return hx::Val( m_friction ); }
		if (HX_FIELD_EQ(inName,"m_isSensor") ) { return hx::Val( m_isSensor ); }
		if (HX_FIELD_EQ(inName,"m_userData") ) { return hx::Val( m_userData ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getUserData") ) { return hx::Val( getUserData_dyn() ); }
		if (HX_FIELD_EQ(inName,"SetUserData") ) { return hx::Val( SetUserData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMassData") ) { return hx::Val( getMassData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFriction") ) { return hx::Val( getFriction_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFriction") ) { return hx::Val( setFriction_dyn() ); }
		if (HX_FIELD_EQ(inName,"createProxy") ) { return hx::Val( createProxy_dyn() ); }
		if (HX_FIELD_EQ(inName,"synchronize") ) { return hx::Val( synchronize_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"destroyProxy") ) { return hx::Val( destroyProxy_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setFilterData") ) { return hx::Val( setFilterData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFilterData") ) { return hx::Val( getFilterData_dyn() ); }
		if (HX_FIELD_EQ(inName,"m_restitution") ) { return hx::Val( m_restitution ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getRestitution") ) { return hx::Val( getRestitution_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRestitution") ) { return hx::Val( setRestitution_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2Fixture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"tempAABB1") ) { outValue = ( tempAABB1 ); return true; }
		if (HX_FIELD_EQ(inName,"tempAABB2") ) { outValue = ( tempAABB2 ); return true; }
	}
	return false;
}

hx::Val B2Fixture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"m_aabb") ) { m_aabb=inValue.Cast<  ::box2D::collision::B2AABB >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_next") ) { m_next=inValue.Cast<  ::box2D::dynamics::B2Fixture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_body") ) { m_body=inValue.Cast<  ::box2D::dynamics::B2Body >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_shape") ) { m_shape=inValue.Cast<  ::box2D::collision::shapes::B2Shape >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_proxy") ) { m_proxy=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groupID") ) { groupID=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_filter") ) { m_filter=inValue.Cast<  ::box2D::dynamics::B2FilterData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_density") ) { m_density=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_massData") ) { m_massData=inValue.Cast<  ::box2D::collision::shapes::B2MassData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_friction") ) { m_friction=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_isSensor") ) { m_isSensor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_userData") ) { m_userData=inValue.Cast<  ::com::stencyl::models::Actor >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_restitution") ) { m_restitution=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2Fixture_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"tempAABB1") ) { tempAABB1=ioValue.Cast<  ::box2D::collision::B2AABB >(); return true; }
		if (HX_FIELD_EQ(inName,"tempAABB2") ) { tempAABB2=ioValue.Cast<  ::box2D::collision::B2AABB >(); return true; }
	}
	return false;
}

void B2Fixture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_massData","\x90","\x4e","\xc3","\xa2"));
	outFields->push(HX_HCSTRING("m_aabb","\xf2","\x12","\x5f","\x88"));
	outFields->push(HX_HCSTRING("m_density","\xd6","\x4e","\x57","\x4d"));
	outFields->push(HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90"));
	outFields->push(HX_HCSTRING("m_body","\xf4","\xea","\x12","\x89"));
	outFields->push(HX_HCSTRING("m_shape","\x8f","\xba","\xa7","\x2c"));
	outFields->push(HX_HCSTRING("m_friction","\x4c","\x7a","\x14","\xbf"));
	outFields->push(HX_HCSTRING("m_restitution","\x58","\x4a","\x4c","\x21"));
	outFields->push(HX_HCSTRING("m_proxy","\xdc","\xc5","\x1a","\x79"));
	outFields->push(HX_HCSTRING("m_filter","\x8a","\xc8","\x26","\x4e"));
	outFields->push(HX_HCSTRING("m_isSensor","\x16","\xcf","\x44","\xeb"));
	outFields->push(HX_HCSTRING("m_userData","\x67","\x97","\x73","\x2c"));
	outFields->push(HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Fixture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::collision::shapes::B2MassData*/ ,(int)offsetof(B2Fixture_obj,m_massData),HX_HCSTRING("m_massData","\x90","\x4e","\xc3","\xa2")},
	{hx::fsObject /*::box2D::collision::B2AABB*/ ,(int)offsetof(B2Fixture_obj,m_aabb),HX_HCSTRING("m_aabb","\xf2","\x12","\x5f","\x88")},
	{hx::fsFloat,(int)offsetof(B2Fixture_obj,m_density),HX_HCSTRING("m_density","\xd6","\x4e","\x57","\x4d")},
	{hx::fsObject /*::box2D::dynamics::B2Fixture*/ ,(int)offsetof(B2Fixture_obj,m_next),HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90")},
	{hx::fsObject /*::box2D::dynamics::B2Body*/ ,(int)offsetof(B2Fixture_obj,m_body),HX_HCSTRING("m_body","\xf4","\xea","\x12","\x89")},
	{hx::fsObject /*::box2D::collision::shapes::B2Shape*/ ,(int)offsetof(B2Fixture_obj,m_shape),HX_HCSTRING("m_shape","\x8f","\xba","\xa7","\x2c")},
	{hx::fsFloat,(int)offsetof(B2Fixture_obj,m_friction),HX_HCSTRING("m_friction","\x4c","\x7a","\x14","\xbf")},
	{hx::fsFloat,(int)offsetof(B2Fixture_obj,m_restitution),HX_HCSTRING("m_restitution","\x58","\x4a","\x4c","\x21")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(B2Fixture_obj,m_proxy),HX_HCSTRING("m_proxy","\xdc","\xc5","\x1a","\x79")},
	{hx::fsObject /*::box2D::dynamics::B2FilterData*/ ,(int)offsetof(B2Fixture_obj,m_filter),HX_HCSTRING("m_filter","\x8a","\xc8","\x26","\x4e")},
	{hx::fsBool,(int)offsetof(B2Fixture_obj,m_isSensor),HX_HCSTRING("m_isSensor","\x16","\xcf","\x44","\xeb")},
	{hx::fsObject /*::com::stencyl::models::Actor*/ ,(int)offsetof(B2Fixture_obj,m_userData),HX_HCSTRING("m_userData","\x67","\x97","\x73","\x2c")},
	{hx::fsInt,(int)offsetof(B2Fixture_obj,groupID),HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2Fixture_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::box2D::collision::B2AABB*/ ,(void *) &B2Fixture_obj::tempAABB1,HX_HCSTRING("tempAABB1","\xfd","\x75","\x1b","\x3b")},
	{hx::fsObject /*::box2D::collision::B2AABB*/ ,(void *) &B2Fixture_obj::tempAABB2,HX_HCSTRING("tempAABB2","\xfe","\x75","\x1b","\x3b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2Fixture_obj_sMemberFields[] = {
	HX_HCSTRING("getType","\x70","\xa2","\x8b","\x1f"),
	HX_HCSTRING("getShape","\xab","\xf2","\xf3","\xdb"),
	HX_HCSTRING("setSensor","\x7c","\xa7","\x37","\xcb"),
	HX_HCSTRING("isSensor","\xc4","\xcd","\xf9","\xc3"),
	HX_HCSTRING("setFilterData","\x44","\x1c","\x20","\xf0"),
	HX_HCSTRING("getFilterData","\x38","\x3a","\x1a","\xab"),
	HX_HCSTRING("getBody","\x58","\x2a","\x9e","\x13"),
	HX_HCSTRING("getNext","\xa9","\x34","\x85","\x1b"),
	HX_HCSTRING("getUserData","\xcb","\x58","\x1c","\x2b"),
	HX_HCSTRING("SetUserData","\xb7","\xf7","\xbb","\x19"),
	HX_HCSTRING("testPoint","\x9e","\xf2","\x91","\x8f"),
	HX_HCSTRING("rayCast","\xc9","\x5d","\x3c","\x25"),
	HX_HCSTRING("getMassData","\xf4","\x0f","\x6c","\xa1"),
	HX_HCSTRING("setDensity","\x66","\x64","\xb4","\x95"),
	HX_HCSTRING("getDensity","\xf2","\xc5","\x36","\x92"),
	HX_HCSTRING("getFriction","\xb0","\x3b","\xbd","\xbd"),
	HX_HCSTRING("setFriction","\xbc","\x42","\x2a","\xc8"),
	HX_HCSTRING("getRestitution","\x74","\x7f","\xeb","\x8f"),
	HX_HCSTRING("setRestitution","\xe8","\x67","\x0b","\xb0"),
	HX_HCSTRING("getAABB","\x36","\xee","\xd1","\x12"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("createProxy","\xd2","\x25","\x0b","\xf2"),
	HX_HCSTRING("destroyProxy","\x14","\xe7","\x8f","\xba"),
	HX_HCSTRING("synchronize","\x50","\x6b","\x41","\x35"),
	HX_HCSTRING("m_massData","\x90","\x4e","\xc3","\xa2"),
	HX_HCSTRING("m_aabb","\xf2","\x12","\x5f","\x88"),
	HX_HCSTRING("m_density","\xd6","\x4e","\x57","\x4d"),
	HX_HCSTRING("m_next","\x45","\xf5","\xf9","\x90"),
	HX_HCSTRING("m_body","\xf4","\xea","\x12","\x89"),
	HX_HCSTRING("m_shape","\x8f","\xba","\xa7","\x2c"),
	HX_HCSTRING("m_friction","\x4c","\x7a","\x14","\xbf"),
	HX_HCSTRING("m_restitution","\x58","\x4a","\x4c","\x21"),
	HX_HCSTRING("m_proxy","\xdc","\xc5","\x1a","\x79"),
	HX_HCSTRING("m_filter","\x8a","\xc8","\x26","\x4e"),
	HX_HCSTRING("m_isSensor","\x16","\xcf","\x44","\xeb"),
	HX_HCSTRING("m_userData","\x67","\x97","\x73","\x2c"),
	HX_HCSTRING("groupID","\xda","\x80","\xf7","\x86"),
	::String(null()) };

static void B2Fixture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Fixture_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2Fixture_obj::tempAABB1,"tempAABB1");
	HX_MARK_MEMBER_NAME(B2Fixture_obj::tempAABB2,"tempAABB2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Fixture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Fixture_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2Fixture_obj::tempAABB1,"tempAABB1");
	HX_VISIT_MEMBER_NAME(B2Fixture_obj::tempAABB2,"tempAABB2");
};

#endif

hx::Class B2Fixture_obj::__mClass;

static ::String B2Fixture_obj_sStaticFields[] = {
	HX_HCSTRING("tempAABB1","\xfd","\x75","\x1b","\x3b"),
	HX_HCSTRING("tempAABB2","\xfe","\x75","\x1b","\x3b"),
	::String(null())
};

void B2Fixture_obj::__register()
{
	hx::Object *dummy = new B2Fixture_obj;
	B2Fixture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.B2Fixture","\x50","\x32","\x83","\x22");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2Fixture_obj::__GetStatic;
	__mClass->mSetStaticField = &B2Fixture_obj::__SetStatic;
	__mClass->mMarkFunc = B2Fixture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2Fixture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Fixture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Fixture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Fixture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Fixture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Fixture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2Fixture_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_33a893e557aa2471_360_boot)
HXDLIN( 360)		tempAABB1 =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_33a893e557aa2471_361_boot)
HXDLIN( 361)		tempAABB2 =  ::box2D::collision::B2AABB_obj::__alloc( HX_CTX );
            	}
}

} // end namespace box2D
} // end namespace dynamics
