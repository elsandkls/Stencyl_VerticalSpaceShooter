// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_dynamics_B2Body
#include <box2D/dynamics/B2Body.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2ContactFilter
#include <box2D/dynamics/B2ContactFilter.h>
#endif
#ifndef INCLUDED_box2D_dynamics_B2Fixture
#include <box2D/dynamics/B2Fixture.h>
#endif
#ifndef INCLUDED_com_stencyl_models_GameModel
#include <com/stencyl/models/GameModel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3f0e78c7a05edc96_28_new,"box2D.dynamics.B2ContactFilter","new",0x01c788b1,"box2D.dynamics.B2ContactFilter.new","box2D/dynamics/B2ContactFilter.hx",28,0x577fc7bf)
HX_LOCAL_STACK_FRAME(_hx_pos_3f0e78c7a05edc96_36_shouldCollide,"box2D.dynamics.B2ContactFilter","shouldCollide",0xf0a1931c,"box2D.dynamics.B2ContactFilter.shouldCollide","box2D/dynamics/B2ContactFilter.hx",36,0x577fc7bf)
HX_LOCAL_STACK_FRAME(_hx_pos_3f0e78c7a05edc96_81_rayCollide,"box2D.dynamics.B2ContactFilter","rayCollide",0x10185683,"box2D.dynamics.B2ContactFilter.rayCollide","box2D/dynamics/B2ContactFilter.hx",81,0x577fc7bf)
HX_LOCAL_STACK_FRAME(_hx_pos_3f0e78c7a05edc96_87_boot,"box2D.dynamics.B2ContactFilter","boot",0x84e912c1,"box2D.dynamics.B2ContactFilter.boot","box2D/dynamics/B2ContactFilter.hx",87,0x577fc7bf)
namespace box2D{
namespace dynamics{

void B2ContactFilter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3f0e78c7a05edc96_28_new)
            	}

Dynamic B2ContactFilter_obj::__CreateEmpty() { return new B2ContactFilter_obj; }

void *B2ContactFilter_obj::_hx_vtable = 0;

Dynamic B2ContactFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2ContactFilter_obj > _hx_result = new B2ContactFilter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2ContactFilter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4c7c5117;
}

bool B2ContactFilter_obj::shouldCollide( ::box2D::dynamics::B2Fixture fixtureA, ::box2D::dynamics::B2Fixture fixtureB){
            	HX_STACKFRAME(&_hx_pos_3f0e78c7a05edc96_36_shouldCollide)
HXLINE(  37)		int g1 = fixtureA->m_body->groupID;
HXLINE(  38)		int g2 = fixtureB->m_body->groupID;
HXLINE(  40)		int gf1 = fixtureA->groupID;
HXLINE(  41)		int gf2 = fixtureB->groupID;
HXLINE(  43)		if ((gf1 != (int)-1000)) {
HXLINE(  45)			g1 = gf1;
            		}
HXLINE(  48)		if ((gf2 != (int)-1000)) {
HXLINE(  50)			g2 = gf2;
            		}
HXLINE(  53)		bool _hx_tmp;
HXDLIN(  53)		if ((g1 != (int)-1)) {
HXLINE(  53)			_hx_tmp = (g2 == (int)-1);
            		}
            		else {
HXLINE(  53)			_hx_tmp = true;
            		}
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  55)			return false;
            		}
HXLINE(  59)		bool _hx_tmp1;
HXDLIN(  59)		if ((g1 != (int)-2)) {
HXLINE(  59)			_hx_tmp1 = (g2 == (int)-2);
            		}
            		else {
HXLINE(  59)			_hx_tmp1 = true;
            		}
HXDLIN(  59)		if (_hx_tmp1) {
HXLINE(  61)			bool _hx_tmp2;
HXDLIN(  61)			if ((g1 != (int)1)) {
HXLINE(  61)				_hx_tmp2 = (g2 == (int)1);
            			}
            			else {
HXLINE(  61)				_hx_tmp2 = true;
            			}
HXDLIN(  61)			if (_hx_tmp2) {
HXLINE(  62)				return false;
            			}
            			else {
HXLINE(  64)				return true;
            			}
            		}
HXLINE(  69)		return ::com::stencyl::models::GameModel_obj::collisionMap->__get(g1).StaticCast< ::Array< bool > >()->__get(g2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2ContactFilter_obj,shouldCollide,return )

bool B2ContactFilter_obj::rayCollide( ::Dynamic userData, ::box2D::dynamics::B2Fixture fixture){
            	HX_STACKFRAME(&_hx_pos_3f0e78c7a05edc96_81_rayCollide)
HXLINE(  82)		if (hx::IsNull( userData )) {
HXLINE(  83)			return true;
            		}
HXLINE(  84)		return this->shouldCollide(hx::TCast<  ::box2D::dynamics::B2Fixture >::cast(userData),fixture);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2ContactFilter_obj,rayCollide,return )

 ::box2D::dynamics::B2ContactFilter B2ContactFilter_obj::b2_defaultFilter;


hx::ObjectPtr< B2ContactFilter_obj > B2ContactFilter_obj::__new() {
	hx::ObjectPtr< B2ContactFilter_obj > __this = new B2ContactFilter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2ContactFilter_obj > B2ContactFilter_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2ContactFilter_obj *__this = (B2ContactFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2ContactFilter_obj), false, "box2D.dynamics.B2ContactFilter"));
	*(void **)__this = B2ContactFilter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2ContactFilter_obj::B2ContactFilter_obj()
{
}

hx::Val B2ContactFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"rayCollide") ) { return hx::Val( rayCollide_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shouldCollide") ) { return hx::Val( shouldCollide_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2ContactFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"b2_defaultFilter") ) { outValue = ( b2_defaultFilter ); return true; }
	}
	return false;
}

bool B2ContactFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"b2_defaultFilter") ) { b2_defaultFilter=ioValue.Cast<  ::box2D::dynamics::B2ContactFilter >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *B2ContactFilter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo B2ContactFilter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::box2D::dynamics::B2ContactFilter*/ ,(void *) &B2ContactFilter_obj::b2_defaultFilter,HX_HCSTRING("b2_defaultFilter","\x2a","\xd5","\x94","\x17")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2ContactFilter_obj_sMemberFields[] = {
	HX_HCSTRING("shouldCollide","\x8b","\xeb","\xf7","\xdd"),
	HX_HCSTRING("rayCollide","\xb4","\xf2","\x2e","\x52"),
	::String(null()) };

static void B2ContactFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2ContactFilter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2ContactFilter_obj::b2_defaultFilter,"b2_defaultFilter");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2ContactFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2ContactFilter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2ContactFilter_obj::b2_defaultFilter,"b2_defaultFilter");
};

#endif

hx::Class B2ContactFilter_obj::__mClass;

static ::String B2ContactFilter_obj_sStaticFields[] = {
	HX_HCSTRING("b2_defaultFilter","\x2a","\xd5","\x94","\x17"),
	::String(null())
};

void B2ContactFilter_obj::__register()
{
	hx::Object *dummy = new B2ContactFilter_obj;
	B2ContactFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.dynamics.B2ContactFilter","\x3f","\x5c","\xef","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2ContactFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &B2ContactFilter_obj::__SetStatic;
	__mClass->mMarkFunc = B2ContactFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2ContactFilter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2ContactFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2ContactFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2ContactFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2ContactFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2ContactFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2ContactFilter_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_3f0e78c7a05edc96_87_boot)
HXDLIN(  87)		b2_defaultFilter =  ::box2D::dynamics::B2ContactFilter_obj::__alloc( HX_CTX );
            	}
}

} // end namespace box2D
} // end namespace dynamics
