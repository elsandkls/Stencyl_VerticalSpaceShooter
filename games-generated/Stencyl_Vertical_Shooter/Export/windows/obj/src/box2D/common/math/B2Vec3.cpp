// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_common_math_B2Vec3
#include <box2D/common/math/B2Vec3.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eeaf305335253a6b_32_new,"box2D.common.math.B2Vec3","new",0x135af4f5,"box2D.common.math.B2Vec3.new","box2D/common/math/B2Vec3.hx",32,0x292a021a)
HX_LOCAL_STACK_FRAME(_hx_pos_eeaf305335253a6b_43_setZero,"box2D.common.math.B2Vec3","setZero",0xf092e2ff,"box2D.common.math.B2Vec3.setZero","box2D/common/math/B2Vec3.hx",43,0x292a021a)
HX_LOCAL_STACK_FRAME(_hx_pos_eeaf305335253a6b_50_set,"box2D.common.math.B2Vec3","set",0x135ec037,"box2D.common.math.B2Vec3.set","box2D/common/math/B2Vec3.hx",50,0x292a021a)
HX_LOCAL_STACK_FRAME(_hx_pos_eeaf305335253a6b_57_setV,"box2D.common.math.B2Vec3","setV",0xdf89703f,"box2D.common.math.B2Vec3.setV","box2D/common/math/B2Vec3.hx",57,0x292a021a)
HX_LOCAL_STACK_FRAME(_hx_pos_eeaf305335253a6b_66_getNegative,"box2D.common.math.B2Vec3","getNegative",0x22832ac0,"box2D.common.math.B2Vec3.getNegative","box2D/common/math/B2Vec3.hx",66,0x292a021a)
HX_LOCAL_STACK_FRAME(_hx_pos_eeaf305335253a6b_68_negativeSelf,"box2D.common.math.B2Vec3","negativeSelf",0x21a4dd6c,"box2D.common.math.B2Vec3.negativeSelf","box2D/common/math/B2Vec3.hx",68,0x292a021a)
HX_LOCAL_STACK_FRAME(_hx_pos_eeaf305335253a6b_71_copy,"box2D.common.math.B2Vec3","copy",0xd4fd9980,"box2D.common.math.B2Vec3.copy","box2D/common/math/B2Vec3.hx",71,0x292a021a)
HX_LOCAL_STACK_FRAME(_hx_pos_eeaf305335253a6b_75_add,"box2D.common.math.B2Vec3","add",0x135116b6,"box2D.common.math.B2Vec3.add","box2D/common/math/B2Vec3.hx",75,0x292a021a)
HX_LOCAL_STACK_FRAME(_hx_pos_eeaf305335253a6b_80_subtract,"box2D.common.math.B2Vec3","subtract",0xf7d4945f,"box2D.common.math.B2Vec3.subtract","box2D/common/math/B2Vec3.hx",80,0x292a021a)
HX_LOCAL_STACK_FRAME(_hx_pos_eeaf305335253a6b_85_multiply,"box2D.common.math.B2Vec3","multiply",0x9a50016f,"box2D.common.math.B2Vec3.multiply","box2D/common/math/B2Vec3.hx",85,0x292a021a)
namespace box2D{
namespace common{
namespace math{

void B2Vec3_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float z = __o_z.Default(0);
            	HX_STACKFRAME(&_hx_pos_eeaf305335253a6b_32_new)
HXLINE(  33)		this->x = x;
HXLINE(  34)		this->y = y;
HXLINE(  35)		this->z = z;
            	}

Dynamic B2Vec3_obj::__CreateEmpty() { return new B2Vec3_obj; }

void *B2Vec3_obj::_hx_vtable = 0;

Dynamic B2Vec3_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Vec3_obj > _hx_result = new B2Vec3_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool B2Vec3_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54ce01ff;
}

void B2Vec3_obj::setZero(){
            	HX_STACKFRAME(&_hx_pos_eeaf305335253a6b_43_setZero)
HXDLIN(  43)		this->x = (this->y = (this->z = ((Float)0.0)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec3_obj,setZero,(void))

void B2Vec3_obj::set(Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_eeaf305335253a6b_50_set)
HXLINE(  51)		this->x = x;
HXLINE(  52)		this->y = y;
HXLINE(  53)		this->z = z;
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2Vec3_obj,set,(void))

void B2Vec3_obj::setV( ::box2D::common::math::B2Vec3 v){
            	HX_STACKFRAME(&_hx_pos_eeaf305335253a6b_57_setV)
HXLINE(  58)		this->x = v->x;
HXLINE(  59)		this->y = v->y;
HXLINE(  60)		this->z = v->z;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec3_obj,setV,(void))

 ::box2D::common::math::B2Vec3 B2Vec3_obj::getNegative(){
            	HX_GC_STACKFRAME(&_hx_pos_eeaf305335253a6b_66_getNegative)
HXDLIN(  66)		return  ::box2D::common::math::B2Vec3_obj::__alloc( HX_CTX ,-(this->x),-(this->y),-(this->z));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec3_obj,getNegative,return )

void B2Vec3_obj::negativeSelf(){
            	HX_STACKFRAME(&_hx_pos_eeaf305335253a6b_68_negativeSelf)
HXDLIN(  68)		this->x = -(this->x);
HXDLIN(  68)		this->y = -(this->y);
HXDLIN(  68)		this->z = -(this->z);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec3_obj,negativeSelf,(void))

 ::box2D::common::math::B2Vec3 B2Vec3_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_eeaf305335253a6b_71_copy)
HXDLIN(  71)		return  ::box2D::common::math::B2Vec3_obj::__alloc( HX_CTX ,this->x,this->y,this->z);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec3_obj,copy,return )

void B2Vec3_obj::add( ::box2D::common::math::B2Vec3 v){
            	HX_STACKFRAME(&_hx_pos_eeaf305335253a6b_75_add)
HXLINE(  76)		 ::box2D::common::math::B2Vec3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  76)		_hx_tmp->x = (_hx_tmp->x + v->x);
HXDLIN(  76)		 ::box2D::common::math::B2Vec3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  76)		_hx_tmp1->y = (_hx_tmp1->y + v->y);
HXDLIN(  76)		 ::box2D::common::math::B2Vec3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  76)		_hx_tmp2->z = (_hx_tmp2->z + v->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec3_obj,add,(void))

void B2Vec3_obj::subtract( ::box2D::common::math::B2Vec3 v){
            	HX_STACKFRAME(&_hx_pos_eeaf305335253a6b_80_subtract)
HXLINE(  81)		 ::box2D::common::math::B2Vec3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  81)		_hx_tmp->x = (_hx_tmp->x - v->x);
HXDLIN(  81)		 ::box2D::common::math::B2Vec3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  81)		_hx_tmp1->y = (_hx_tmp1->y - v->y);
HXDLIN(  81)		 ::box2D::common::math::B2Vec3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  81)		_hx_tmp2->z = (_hx_tmp2->z - v->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec3_obj,subtract,(void))

void B2Vec3_obj::multiply(Float a){
            	HX_STACKFRAME(&_hx_pos_eeaf305335253a6b_85_multiply)
HXLINE(  86)		 ::box2D::common::math::B2Vec3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)		_hx_tmp->x = (_hx_tmp->x * a);
HXDLIN(  86)		 ::box2D::common::math::B2Vec3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)		_hx_tmp1->y = (_hx_tmp1->y * a);
HXDLIN(  86)		 ::box2D::common::math::B2Vec3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)		_hx_tmp2->z = (_hx_tmp2->z * a);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec3_obj,multiply,(void))


B2Vec3_obj::B2Vec3_obj()
{
}

hx::Val B2Vec3_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"setV") ) { return hx::Val( setV_dyn() ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setZero") ) { return hx::Val( setZero_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn() ); }
		if (HX_FIELD_EQ(inName,"multiply") ) { return hx::Val( multiply_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getNegative") ) { return hx::Val( getNegative_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"negativeSelf") ) { return hx::Val( negativeSelf_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2Vec3_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2Vec3_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Vec3_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(B2Vec3_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(B2Vec3_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(B2Vec3_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2Vec3_obj_sStaticStorageInfo = 0;
#endif

static ::String B2Vec3_obj_sMemberFields[] = {
	HX_HCSTRING("setZero","\xea","\x4f","\x75","\x16"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("setV","\x74","\x92","\x50","\x4c"),
	HX_HCSTRING("getNegative","\x2b","\xe9","\x35","\x77"),
	HX_HCSTRING("negativeSelf","\xa1","\xbc","\x58","\xe9"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	::String(null()) };

static void B2Vec3_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Vec3_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Vec3_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Vec3_obj::__mClass,"__mClass");
};

#endif

hx::Class B2Vec3_obj::__mClass;

void B2Vec3_obj::__register()
{
	hx::Object *dummy = new B2Vec3_obj;
	B2Vec3_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.common.math.B2Vec3","\x83","\x56","\x3e","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2Vec3_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Vec3_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Vec3_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Vec3_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Vec3_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Vec3_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace common
} // end namespace math
