// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Math
#include <box2D/common/math/B2Math.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_82871975fb1d5629_28_new,"box2D.common.math.B2Vec2","new",0x7ff46074,"box2D.common.math.B2Vec2.new","box2D/common/math/B2Vec2.hx",28,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_30_setZero,"box2D.common.math.B2Vec2","setZero",0x1da179fe,"box2D.common.math.B2Vec2.setZero","box2D/common/math/B2Vec2.hx",30,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_31_set,"box2D.common.math.B2Vec2","set",0x7ff82bb6,"box2D.common.math.B2Vec2.set","box2D/common/math/B2Vec2.hx",31,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_32_setV,"box2D.common.math.B2Vec2","setV",0x792e13e0,"box2D.common.math.B2Vec2.setV","box2D/common/math/B2Vec2.hx",32,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_36_getNegative,"box2D.common.math.B2Vec2","getNegative",0xdcc2ad3f,"box2D.common.math.B2Vec2.getNegative","box2D/common/math/B2Vec2.hx",36,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_40_getNegativePooled,"box2D.common.math.B2Vec2","getNegativePooled",0x4702e2da,"box2D.common.math.B2Vec2.getNegativePooled","box2D/common/math/B2Vec2.hx",40,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_48_negativeSelf,"box2D.common.math.B2Vec2","negativeSelf",0x5ef78a0d,"box2D.common.math.B2Vec2.negativeSelf","box2D/common/math/B2Vec2.hx",48,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_58_copy,"box2D.common.math.B2Vec2","copy",0x6ea23d21,"box2D.common.math.B2Vec2.copy","box2D/common/math/B2Vec2.hx",58,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_76_add,"box2D.common.math.B2Vec2","add",0x7fea8235,"box2D.common.math.B2Vec2.add","box2D/common/math/B2Vec2.hx",76,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_81_subtract,"box2D.common.math.B2Vec2","subtract",0x378a1c80,"box2D.common.math.B2Vec2.subtract","box2D/common/math/B2Vec2.hx",81,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_86_multiply,"box2D.common.math.B2Vec2","multiply",0xda058990,"box2D.common.math.B2Vec2.multiply","box2D/common/math/B2Vec2.hx",86,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_91_mulM,"box2D.common.math.B2Vec2","mulM",0x7542e935,"box2D.common.math.B2Vec2.mulM","box2D/common/math/B2Vec2.hx",91,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_98_mulTM,"box2D.common.math.B2Vec2","mulTM",0x25492b91,"box2D.common.math.B2Vec2.mulTM","box2D/common/math/B2Vec2.hx",98,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_105_crossVF,"box2D.common.math.B2Vec2","crossVF",0xe67db4c4,"box2D.common.math.B2Vec2.crossVF","box2D/common/math/B2Vec2.hx",105,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_112_crossFV,"box2D.common.math.B2Vec2","crossFV",0xe67da6e4,"box2D.common.math.B2Vec2.crossFV","box2D/common/math/B2Vec2.hx",112,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_119_minV,"box2D.common.math.B2Vec2","minV",0x7539cff0,"box2D.common.math.B2Vec2.minV","box2D/common/math/B2Vec2.hx",119,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_125_maxV,"box2D.common.math.B2Vec2","maxV",0x7533c69e,"box2D.common.math.B2Vec2.maxV","box2D/common/math/B2Vec2.hx",125,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_131_abs,"box2D.common.math.B2Vec2","abs",0x7fea8086,"box2D.common.math.B2Vec2.abs","box2D/common/math/B2Vec2.hx",131,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_138_length,"box2D.common.math.B2Vec2","length",0xdf594952,"box2D.common.math.B2Vec2.length","box2D/common/math/B2Vec2.hx",138,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_143_lengthSquared,"box2D.common.math.B2Vec2","lengthSquared",0xaa9a15f5,"box2D.common.math.B2Vec2.lengthSquared","box2D/common/math/B2Vec2.hx",143,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_147_normalize,"box2D.common.math.B2Vec2","normalize",0xf5bb0ea1,"box2D.common.math.B2Vec2.normalize","box2D/common/math/B2Vec2.hx",147,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_162_perpDot,"box2D.common.math.B2Vec2","perpDot",0x8885916a,"box2D.common.math.B2Vec2.perpDot","box2D/common/math/B2Vec2.hx",162,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_166_winding,"box2D.common.math.B2Vec2","winding",0xef9c732e,"box2D.common.math.B2Vec2.winding","box2D/common/math/B2Vec2.hx",166,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_178_isValid,"box2D.common.math.B2Vec2","isValid",0xd56a42c6,"box2D.common.math.B2Vec2.isValid","box2D/common/math/B2Vec2.hx",178,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_186_toString,"box2D.common.math.B2Vec2","toString",0x77e77818,"box2D.common.math.B2Vec2.toString","box2D/common/math/B2Vec2.hx",186,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_191_reset,"box2D.common.math.B2Vec2","reset",0xfbbc06e3,"box2D.common.math.B2Vec2.reset","box2D/common/math/B2Vec2.hx",191,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_54_make,"box2D.common.math.B2Vec2","make",0x7533bb5a,"box2D.common.math.B2Vec2.make","box2D/common/math/B2Vec2.hx",54,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_201_freePool,"box2D.common.math.B2Vec2","freePool",0x4cdab714,"box2D.common.math.B2Vec2.freePool","box2D/common/math/B2Vec2.hx",201,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_205_getFromPool,"box2D.common.math.B2Vec2","getFromPool",0x33a8d630,"box2D.common.math.B2Vec2.getFromPool","box2D/common/math/B2Vec2.hx",205,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_196_boot,"box2D.common.math.B2Vec2","boot",0x6df9059e,"box2D.common.math.B2Vec2.boot","box2D/common/math/B2Vec2.hx",196,0x2880cb7b)
HX_LOCAL_STACK_FRAME(_hx_pos_82871975fb1d5629_197_boot,"box2D.common.math.B2Vec2","boot",0x6df9059e,"box2D.common.math.B2Vec2.boot","box2D/common/math/B2Vec2.hx",197,0x2880cb7b)
namespace box2D{
namespace common{
namespace math{

void B2Vec2_obj::__construct(hx::Null< Float >  __o_x_,hx::Null< Float >  __o_y_){
Float x_ = __o_x_.Default(0);
Float y_ = __o_y_.Default(0);
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_28_new)
HXDLIN(  28)		this->x = x_;
HXDLIN(  28)		this->y = y_;
            	}

Dynamic B2Vec2_obj::__CreateEmpty() { return new B2Vec2_obj; }

void *B2Vec2_obj::_hx_vtable = 0;

Dynamic B2Vec2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Vec2_obj > _hx_result = new B2Vec2_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool B2Vec2_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54ce01fe;
}

void B2Vec2_obj::setZero(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_30_setZero)
HXDLIN(  30)		this->x = ((Float)0.0);
HXDLIN(  30)		this->y = ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,setZero,(void))

void B2Vec2_obj::set(hx::Null< Float >  __o_x_,hx::Null< Float >  __o_y_){
Float x_ = __o_x_.Default(0);
Float y_ = __o_y_.Default(0);
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_31_set)
HXDLIN(  31)		this->x = x_;
HXDLIN(  31)		this->y = y_;
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Vec2_obj,set,(void))

void B2Vec2_obj::setV( ::box2D::common::math::B2Vec2 v){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_32_setV)
HXDLIN(  32)		this->x = v->x;
HXDLIN(  32)		this->y = v->y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,setV,(void))

 ::box2D::common::math::B2Vec2 B2Vec2_obj::getNegative(){
            	HX_GC_STACKFRAME(&_hx_pos_82871975fb1d5629_36_getNegative)
HXDLIN(  36)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,-(this->x),-(this->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,getNegative,return )

 ::box2D::common::math::B2Vec2 B2Vec2_obj::getNegativePooled(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_40_getNegativePooled)
HXLINE(  41)		 ::box2D::common::math::B2Vec2 v = ::box2D::common::math::B2Vec2_obj::getFromPool();
HXLINE(  42)		v->x = -(this->x);
HXLINE(  43)		v->y = -(this->y);
HXLINE(  44)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,getNegativePooled,return )

void B2Vec2_obj::negativeSelf(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_48_negativeSelf)
HXLINE(  49)		this->x = -(this->x);
HXDLIN(  49)		this->y = -(this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,negativeSelf,(void))

 ::box2D::common::math::B2Vec2 B2Vec2_obj::copy(hx::Null< bool >  __o_fromPool){
bool fromPool = __o_fromPool.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_82871975fb1d5629_58_copy)
HXLINE(  59)		 ::box2D::common::math::B2Vec2 vec;
HXLINE(  61)		if (fromPool) {
HXLINE(  63)			vec = ::box2D::common::math::B2Vec2_obj::getFromPool();
HXLINE(  64)			{
HXLINE(  64)				vec->x = this->x;
HXDLIN(  64)				vec->y = this->y;
            			}
            		}
            		else {
HXLINE(  69)			vec =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,this->x,this->y);
            		}
HXLINE(  72)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,copy,return )

void B2Vec2_obj::add( ::box2D::common::math::B2Vec2 v){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_76_add)
HXLINE(  77)		 ::box2D::common::math::B2Vec2 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  77)		_hx_tmp->x = (_hx_tmp->x + v->x);
HXDLIN(  77)		 ::box2D::common::math::B2Vec2 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  77)		_hx_tmp1->y = (_hx_tmp1->y + v->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,add,(void))

void B2Vec2_obj::subtract( ::box2D::common::math::B2Vec2 v){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_81_subtract)
HXLINE(  82)		 ::box2D::common::math::B2Vec2 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  82)		_hx_tmp->x = (_hx_tmp->x - v->x);
HXDLIN(  82)		 ::box2D::common::math::B2Vec2 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  82)		_hx_tmp1->y = (_hx_tmp1->y - v->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,subtract,(void))

void B2Vec2_obj::multiply(Float a){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_86_multiply)
HXLINE(  87)		 ::box2D::common::math::B2Vec2 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  87)		_hx_tmp->x = (_hx_tmp->x * a);
HXDLIN(  87)		 ::box2D::common::math::B2Vec2 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  87)		_hx_tmp1->y = (_hx_tmp1->y * a);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,multiply,(void))

void B2Vec2_obj::mulM( ::box2D::common::math::B2Mat22 A){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_91_mulM)
HXLINE(  92)		Float tX = this->x;
HXLINE(  93)		Float _hx_tmp = (A->col1->x * tX);
HXDLIN(  93)		this->x = (_hx_tmp + (A->col2->x * this->y));
HXLINE(  94)		Float _hx_tmp1 = (A->col1->y * tX);
HXDLIN(  94)		this->y = (_hx_tmp1 + (A->col2->y * this->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,mulM,(void))

void B2Vec2_obj::mulTM( ::box2D::common::math::B2Mat22 A){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_98_mulTM)
HXLINE(  99)		Float tX = ::box2D::common::math::B2Math_obj::dot(hx::ObjectPtr<OBJ_>(this),A->col1);
HXLINE( 100)		this->y = ::box2D::common::math::B2Math_obj::dot(hx::ObjectPtr<OBJ_>(this),A->col2);
HXLINE( 101)		this->x = tX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,mulTM,(void))

void B2Vec2_obj::crossVF(Float s){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_105_crossVF)
HXLINE( 106)		Float tX = this->x;
HXLINE( 107)		this->x = (s * this->y);
HXLINE( 108)		this->y = (-(s) * tX);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,crossVF,(void))

void B2Vec2_obj::crossFV(Float s){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_112_crossFV)
HXLINE( 113)		Float tX = this->x;
HXLINE( 114)		this->x = (-(s) * this->y);
HXLINE( 115)		this->y = (s * tX);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,crossFV,(void))

void B2Vec2_obj::minV( ::box2D::common::math::B2Vec2 b){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_119_minV)
HXLINE( 120)		Float _hx_tmp;
HXDLIN( 120)		if ((this->x < b->x)) {
HXLINE( 120)			_hx_tmp = this->x;
            		}
            		else {
HXLINE( 120)			_hx_tmp = b->x;
            		}
HXDLIN( 120)		this->x = _hx_tmp;
HXLINE( 121)		Float _hx_tmp1;
HXDLIN( 121)		if ((this->y < b->y)) {
HXLINE( 121)			_hx_tmp1 = this->y;
            		}
            		else {
HXLINE( 121)			_hx_tmp1 = b->y;
            		}
HXDLIN( 121)		this->y = _hx_tmp1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,minV,(void))

void B2Vec2_obj::maxV( ::box2D::common::math::B2Vec2 b){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_125_maxV)
HXLINE( 126)		Float _hx_tmp;
HXDLIN( 126)		if ((this->x > b->x)) {
HXLINE( 126)			_hx_tmp = this->x;
            		}
            		else {
HXLINE( 126)			_hx_tmp = b->x;
            		}
HXDLIN( 126)		this->x = _hx_tmp;
HXLINE( 127)		Float _hx_tmp1;
HXDLIN( 127)		if ((this->y > b->y)) {
HXLINE( 127)			_hx_tmp1 = this->y;
            		}
            		else {
HXLINE( 127)			_hx_tmp1 = b->y;
            		}
HXDLIN( 127)		this->y = _hx_tmp1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,maxV,(void))

void B2Vec2_obj::abs(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_131_abs)
HXLINE( 132)		if ((this->x < (int)0)) {
HXLINE( 132)			this->x = -(this->x);
            		}
HXLINE( 133)		if ((this->y < (int)0)) {
HXLINE( 133)			this->y = -(this->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,abs,(void))

Float B2Vec2_obj::length(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_138_length)
HXDLIN( 138)		Float _hx_tmp = (this->x * this->x);
HXDLIN( 138)		return ::Math_obj::sqrt((_hx_tmp + (this->y * this->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,length,return )

Float B2Vec2_obj::lengthSquared(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_143_lengthSquared)
HXDLIN( 143)		Float _hx_tmp = (this->x * this->x);
HXDLIN( 143)		return (_hx_tmp + (this->y * this->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,lengthSquared,return )

Float B2Vec2_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_147_normalize)
HXLINE( 148)		Float length = (this->x * this->x);
HXDLIN( 148)		Float length1 = ::Math_obj::sqrt((length + (this->y * this->y)));
HXLINE( 149)		if ((length1 < ((Float)2.2250738585072014e-308))) {
HXLINE( 151)			return ((Float)0.0);
            		}
HXLINE( 153)		Float invLength = ((Float)((Float)1.0) / (Float)length1);
HXLINE( 154)		 ::box2D::common::math::B2Vec2 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 154)		_hx_tmp->x = (_hx_tmp->x * invLength);
HXLINE( 155)		 ::box2D::common::math::B2Vec2 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 155)		_hx_tmp1->y = (_hx_tmp1->y * invLength);
HXLINE( 157)		return length1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,normalize,return )

Float B2Vec2_obj::perpDot( ::box2D::common::math::B2Vec2 b){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_162_perpDot)
HXDLIN( 162)		Float _hx_tmp = (-(this->y) * b->x);
HXDLIN( 162)		return (_hx_tmp + (this->x * b->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Vec2_obj,perpDot,return )

Float B2Vec2_obj::winding( ::box2D::common::math::B2Vec2 b, ::box2D::common::math::B2Vec2 c){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_166_winding)
HXLINE( 167)		 ::box2D::common::math::B2Vec2 clone = b->copy(null());
HXLINE( 168)		clone->subtract(hx::ObjectPtr<OBJ_>(this));
HXLINE( 170)		 ::box2D::common::math::B2Vec2 clone2 = c->copy(null());
HXLINE( 171)		clone2->subtract(b);
HXLINE( 173)		return clone->perpDot(clone2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Vec2_obj,winding,return )

bool B2Vec2_obj::isValid(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_178_isValid)
HXDLIN( 178)		if (::box2D::common::math::B2Math_obj::isValid(this->x)) {
HXDLIN( 178)			return ::box2D::common::math::B2Math_obj::isValid(this->y);
            		}
            		else {
HXDLIN( 178)			return false;
            		}
HXDLIN( 178)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,isValid,return )

::String B2Vec2_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_186_toString)
HXDLIN( 186)		return ((((HX_("(",28,00,00,00) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,toString,return )

void B2Vec2_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_191_reset)
HXLINE( 192)		this->x = (int)0;
HXLINE( 193)		this->y = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,reset,(void))

 ::box2D::common::math::B2Vec2 B2Vec2_obj::make(Float x_,Float y_){
            	HX_GC_STACKFRAME(&_hx_pos_82871975fb1d5629_54_make)
HXDLIN(  54)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,x_,y_);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(B2Vec2_obj,make,return )

::Array< ::Dynamic> B2Vec2_obj::pool;

int B2Vec2_obj::pooli;

void B2Vec2_obj::freePool(){
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_201_freePool)
HXDLIN( 201)		::box2D::common::math::B2Vec2_obj::pooli = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,freePool,(void))

 ::box2D::common::math::B2Vec2 B2Vec2_obj::getFromPool(){
            	HX_GC_STACKFRAME(&_hx_pos_82871975fb1d5629_205_getFromPool)
HXLINE( 207)		if ((::box2D::common::math::B2Vec2_obj::pooli > (int)500)) {
HXLINE( 209)			::box2D::common::math::B2Vec2_obj::pooli = (int)0;
            		}
HXLINE( 212)		if ((::box2D::common::math::B2Vec2_obj::pooli < ::box2D::common::math::B2Vec2_obj::pool->length)) {
HXLINE( 214)			 ::box2D::common::math::B2Vec2 contact = ::box2D::common::math::B2Vec2_obj::pool->__get(::box2D::common::math::B2Vec2_obj::pooli).StaticCast<  ::box2D::common::math::B2Vec2 >();
HXLINE( 215)			contact->x = (int)0;
HXLINE( 216)			contact->y = (int)0;
HXLINE( 217)			::box2D::common::math::B2Vec2_obj::pooli++;
HXLINE( 218)			return contact;
            		}
            		else {
HXLINE( 223)			 ::box2D::common::math::B2Vec2 contact1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 224)			::box2D::common::math::B2Vec2_obj::pool->push(contact1);
HXLINE( 225)			::box2D::common::math::B2Vec2_obj::pooli++;
HXLINE( 226)			return contact1;
            		}
HXLINE( 212)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(B2Vec2_obj,getFromPool,return )


hx::ObjectPtr< B2Vec2_obj > B2Vec2_obj::__new(hx::Null< Float >  __o_x_,hx::Null< Float >  __o_y_) {
	hx::ObjectPtr< B2Vec2_obj > __this = new B2Vec2_obj();
	__this->__construct(__o_x_,__o_y_);
	return __this;
}

hx::ObjectPtr< B2Vec2_obj > B2Vec2_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x_,hx::Null< Float >  __o_y_) {
	B2Vec2_obj *__this = (B2Vec2_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Vec2_obj), false, "box2D.common.math.B2Vec2"));
	*(void **)__this = B2Vec2_obj::_hx_vtable;
	__this->__construct(__o_x_,__o_y_);
	return __this;
}

B2Vec2_obj::B2Vec2_obj()
{
}

hx::Val B2Vec2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"abs") ) { return hx::Val( abs_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"setV") ) { return hx::Val( setV_dyn() ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"mulM") ) { return hx::Val( mulM_dyn() ); }
		if (HX_FIELD_EQ(inName,"minV") ) { return hx::Val( minV_dyn() ); }
		if (HX_FIELD_EQ(inName,"maxV") ) { return hx::Val( maxV_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mulTM") ) { return hx::Val( mulTM_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setZero") ) { return hx::Val( setZero_dyn() ); }
		if (HX_FIELD_EQ(inName,"crossVF") ) { return hx::Val( crossVF_dyn() ); }
		if (HX_FIELD_EQ(inName,"crossFV") ) { return hx::Val( crossFV_dyn() ); }
		if (HX_FIELD_EQ(inName,"perpDot") ) { return hx::Val( perpDot_dyn() ); }
		if (HX_FIELD_EQ(inName,"winding") ) { return hx::Val( winding_dyn() ); }
		if (HX_FIELD_EQ(inName,"isValid") ) { return hx::Val( isValid_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn() ); }
		if (HX_FIELD_EQ(inName,"multiply") ) { return hx::Val( multiply_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getNegative") ) { return hx::Val( getNegative_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"negativeSelf") ) { return hx::Val( negativeSelf_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthSquared") ) { return hx::Val( lengthSquared_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getNegativePooled") ) { return hx::Val( getNegativePooled_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2Vec2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"make") ) { outValue = make_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pool") ) { outValue = ( pool ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pooli") ) { outValue = ( pooli ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"freePool") ) { outValue = freePool_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getFromPool") ) { outValue = getFromPool_dyn(); return true; }
	}
	return false;
}

hx::Val B2Vec2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool B2Vec2_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pool") ) { pool=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pooli") ) { pooli=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void B2Vec2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Vec2_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(B2Vec2_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(B2Vec2_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo B2Vec2_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &B2Vec2_obj::pool,HX_HCSTRING("pool","\xdc","\x80","\x5c","\x4a")},
	{hx::fsInt,(void *) &B2Vec2_obj::pooli,HX_HCSTRING("pooli","\x0d","\x40","\x94","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String B2Vec2_obj_sMemberFields[] = {
	HX_HCSTRING("setZero","\xea","\x4f","\x75","\x16"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("setV","\x74","\x92","\x50","\x4c"),
	HX_HCSTRING("getNegative","\x2b","\xe9","\x35","\x77"),
	HX_HCSTRING("getNegativePooled","\xc6","\xd7","\xdd","\x81"),
	HX_HCSTRING("negativeSelf","\xa1","\xbc","\x58","\xe9"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("mulM","\xc9","\x67","\x65","\x48"),
	HX_HCSTRING("mulTM","\x7d","\x6e","\x55","\x10"),
	HX_HCSTRING("crossVF","\xb0","\x8a","\x51","\xdf"),
	HX_HCSTRING("crossFV","\xd0","\x7c","\x51","\xdf"),
	HX_HCSTRING("minV","\x84","\x4e","\x5c","\x48"),
	HX_HCSTRING("maxV","\x32","\x45","\x56","\x48"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("lengthSquared","\xe1","\x24","\x45","\x35"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("perpDot","\x56","\x67","\x59","\x81"),
	HX_HCSTRING("winding","\x1a","\x49","\x70","\xe8"),
	HX_HCSTRING("isValid","\xb2","\x18","\x3e","\xce"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	::String(null()) };

static void B2Vec2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Vec2_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2Vec2_obj::pool,"pool");
	HX_MARK_MEMBER_NAME(B2Vec2_obj::pooli,"pooli");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Vec2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Vec2_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2Vec2_obj::pool,"pool");
	HX_VISIT_MEMBER_NAME(B2Vec2_obj::pooli,"pooli");
};

#endif

hx::Class B2Vec2_obj::__mClass;

static ::String B2Vec2_obj_sStaticFields[] = {
	HX_HCSTRING("make","\xee","\x39","\x56","\x48"),
	HX_HCSTRING("pool","\xdc","\x80","\x5c","\x4a"),
	HX_HCSTRING("pooli","\x0d","\x40","\x94","\xc6"),
	HX_HCSTRING("freePool","\xa8","\x0f","\x62","\x0d"),
	HX_HCSTRING("getFromPool","\x1c","\x12","\x1c","\xce"),
	::String(null())
};

void B2Vec2_obj::__register()
{
	hx::Object *dummy = new B2Vec2_obj;
	B2Vec2_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.common.math.B2Vec2","\x82","\x56","\x3e","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2Vec2_obj::__GetStatic;
	__mClass->mSetStaticField = &B2Vec2_obj::__SetStatic;
	__mClass->mMarkFunc = B2Vec2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2Vec2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Vec2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Vec2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Vec2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Vec2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Vec2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2Vec2_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_196_boot)
HXDLIN( 196)		pool = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_82871975fb1d5629_197_boot)
HXDLIN( 197)		pooli = (int)0;
            	}
}

} // end namespace box2D
} // end namespace common
} // end namespace math
