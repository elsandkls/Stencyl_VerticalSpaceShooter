// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_474d1e2e10833325_32_new,"box2D.common.math.B2Transform","new",0x3d78c0ba,"box2D.common.math.B2Transform.new","box2D/common/math/B2Transform.hx",32,0x09863597)
HX_LOCAL_STACK_FRAME(_hx_pos_474d1e2e10833325_49_initialize,"box2D.common.math.B2Transform","initialize",0xc2d06036,"box2D.common.math.B2Transform.initialize","box2D/common/math/B2Transform.hx",49,0x09863597)
HX_LOCAL_STACK_FRAME(_hx_pos_474d1e2e10833325_58_setIdentity,"box2D.common.math.B2Transform","setIdentity",0x6603e95a,"box2D.common.math.B2Transform.setIdentity","box2D/common/math/B2Transform.hx",58,0x09863597)
HX_LOCAL_STACK_FRAME(_hx_pos_474d1e2e10833325_63_set,"box2D.common.math.B2Transform","set",0x3d7c8bfc,"box2D.common.math.B2Transform.set","box2D/common/math/B2Transform.hx",63,0x09863597)
HX_LOCAL_STACK_FRAME(_hx_pos_474d1e2e10833325_76_getAngle,"box2D.common.math.B2Transform","getAngle",0xc5ccdcc3,"box2D.common.math.B2Transform.getAngle","box2D/common/math/B2Transform.hx",76,0x09863597)
HX_LOCAL_STACK_FRAME(_hx_pos_474d1e2e10833325_80_multiply,"box2D.common.math.B2Transform","multiply",0xdda06b8a,"box2D.common.math.B2Transform.multiply","box2D/common/math/B2Transform.hx",80,0x09863597)
namespace box2D{
namespace common{
namespace math{

void B2Transform_obj::__construct( ::box2D::common::math::B2Vec2 pos, ::box2D::common::math::B2Mat22 r){
            	HX_GC_STACKFRAME(&_hx_pos_474d1e2e10833325_32_new)
HXLINE(  34)		this->position =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  35)		this->R =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
HXLINE(  37)		if (hx::IsNotNull( pos )) {
HXLINE(  39)			{
HXLINE(  39)				 ::box2D::common::math::B2Vec2 _this = this->position;
HXDLIN(  39)				_this->x = pos->x;
HXDLIN(  39)				_this->y = pos->y;
            			}
HXLINE(  40)			this->R->setM(r);
            		}
            	}

Dynamic B2Transform_obj::__CreateEmpty() { return new B2Transform_obj; }

void *B2Transform_obj::_hx_vtable = 0;

Dynamic B2Transform_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Transform_obj > _hx_result = new B2Transform_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool B2Transform_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x634cef94;
}

void B2Transform_obj::initialize( ::box2D::common::math::B2Vec2 pos, ::box2D::common::math::B2Mat22 r){
            	HX_STACKFRAME(&_hx_pos_474d1e2e10833325_49_initialize)
HXLINE(  50)		{
HXLINE(  50)			 ::box2D::common::math::B2Vec2 _this = this->position;
HXDLIN(  50)			_this->x = pos->x;
HXDLIN(  50)			_this->y = pos->y;
            		}
HXLINE(  51)		this->R->setM(r);
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Transform_obj,initialize,(void))

void B2Transform_obj::setIdentity(){
            	HX_STACKFRAME(&_hx_pos_474d1e2e10833325_58_setIdentity)
HXLINE(  59)		{
HXLINE(  59)			 ::box2D::common::math::B2Vec2 _this = this->position;
HXDLIN(  59)			_this->x = ((Float)0.0);
HXDLIN(  59)			_this->y = ((Float)0.0);
            		}
HXLINE(  60)		this->R->setIdentity();
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Transform_obj,setIdentity,(void))

void B2Transform_obj::set( ::box2D::common::math::B2Transform x){
            	HX_STACKFRAME(&_hx_pos_474d1e2e10833325_63_set)
HXLINE(  65)		{
HXLINE(  65)			 ::box2D::common::math::B2Vec2 _this = this->position;
HXDLIN(  65)			 ::box2D::common::math::B2Vec2 v = x->position;
HXDLIN(  65)			_this->x = v->x;
HXDLIN(  65)			_this->y = v->y;
            		}
HXLINE(  67)		this->R->setM(x->R);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Transform_obj,set,(void))

Float B2Transform_obj::getAngle(){
            	HX_STACKFRAME(&_hx_pos_474d1e2e10833325_76_getAngle)
HXDLIN(  76)		return ::Math_obj::atan2(this->R->col1->y,this->R->col1->x);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Transform_obj,getAngle,return )

 ::box2D::common::math::B2Vec2 B2Transform_obj::multiply( ::box2D::common::math::B2Vec2 v){
            	HX_STACKFRAME(&_hx_pos_474d1e2e10833325_80_multiply)
HXLINE(  81)		 ::box2D::common::math::B2Vec2 v2 = this->R->multiplyV(v);
HXLINE(  82)		v2->add(this->position);
HXLINE(  83)		return v2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Transform_obj,multiply,return )


hx::ObjectPtr< B2Transform_obj > B2Transform_obj::__new( ::box2D::common::math::B2Vec2 pos, ::box2D::common::math::B2Mat22 r) {
	hx::ObjectPtr< B2Transform_obj > __this = new B2Transform_obj();
	__this->__construct(pos,r);
	return __this;
}

hx::ObjectPtr< B2Transform_obj > B2Transform_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::common::math::B2Vec2 pos, ::box2D::common::math::B2Mat22 r) {
	B2Transform_obj *__this = (B2Transform_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Transform_obj), true, "box2D.common.math.B2Transform"));
	*(void **)__this = B2Transform_obj::_hx_vtable;
	__this->__construct(pos,r);
	return __this;
}

B2Transform_obj::B2Transform_obj()
{
}

void B2Transform_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Transform);
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(R,"R");
	HX_MARK_END_CLASS();
}

void B2Transform_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(R,"R");
}

hx::Val B2Transform_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"R") ) { return hx::Val( R ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getAngle") ) { return hx::Val( getAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"multiply") ) { return hx::Val( multiply_dyn() ); }
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initialize") ) { return hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setIdentity") ) { return hx::Val( setIdentity_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2Transform_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"R") ) { R=inValue.Cast<  ::box2D::common::math::B2Mat22 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2Transform_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("R","\x52","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Transform_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Transform_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsObject /*::box2D::common::math::B2Mat22*/ ,(int)offsetof(B2Transform_obj,R),HX_HCSTRING("R","\x52","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2Transform_obj_sStaticStorageInfo = 0;
#endif

static ::String B2Transform_obj_sMemberFields[] = {
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("setIdentity","\x00","\x0f","\x90","\xe9"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("getAngle","\x5d","\x53","\xb9","\x82"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("R","\x52","\x00","\x00","\x00"),
	::String(null()) };

static void B2Transform_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Transform_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Transform_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Transform_obj::__mClass,"__mClass");
};

#endif

hx::Class B2Transform_obj::__mClass;

void B2Transform_obj::__register()
{
	hx::Object *dummy = new B2Transform_obj;
	B2Transform_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.common.math.B2Transform","\xc8","\x9b","\x2f","\x17");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2Transform_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Transform_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Transform_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Transform_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Transform_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Transform_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace common
} // end namespace math
