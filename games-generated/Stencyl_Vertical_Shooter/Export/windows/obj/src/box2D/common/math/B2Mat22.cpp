// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d95a76fe29304616_28_new,"box2D.common.math.B2Mat22","new",0x0cd9ddae,"box2D.common.math.B2Mat22.new","box2D/common/math/B2Mat22.hx",28,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_48_set,"box2D.common.math.B2Mat22","set",0x0cdda8f0,"box2D.common.math.B2Mat22.set","box2D/common/math/B2Mat22.hx",48,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_56_setVV,"box2D.common.math.B2Mat22","setVV",0x3e4e1030,"box2D.common.math.B2Mat22.setVV","box2D/common/math/B2Mat22.hx",56,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_61_copy,"box2D.common.math.B2Mat22","copy",0x2a8a52a7,"box2D.common.math.B2Mat22.copy","box2D/common/math/B2Mat22.hx",61,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_68_setM,"box2D.common.math.B2Mat22","setM",0x3516295d,"box2D.common.math.B2Mat22.setM","box2D/common/math/B2Mat22.hx",68,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_74_addM,"box2D.common.math.B2Mat22","addM",0x292f81fe,"box2D.common.math.B2Mat22.addM","box2D/common/math/B2Mat22.hx",74,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_83_multiplyV,"box2D.common.math.B2Mat22","multiplyV",0x1850f980,"box2D.common.math.B2Mat22.multiplyV","box2D/common/math/B2Mat22.hx",83,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_91_setIdentity,"box2D.common.math.B2Mat22","setIdentity",0x73f91a4e,"box2D.common.math.B2Mat22.setIdentity","box2D/common/math/B2Mat22.hx",91,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_97_setZero,"box2D.common.math.B2Mat22","setZero",0xfcc71c38,"box2D.common.math.B2Mat22.setZero","box2D/common/math/B2Mat22.hx",97,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_103_setAngle,"box2D.common.math.B2Mat22","setAngle",0xd257a4c3,"box2D.common.math.B2Mat22.setAngle","box2D/common/math/B2Mat22.hx",103,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_112_getAngle,"box2D.common.math.B2Mat22","getAngle",0x23fa4b4f,"box2D.common.math.B2Mat22.getAngle","box2D/common/math/B2Mat22.hx",112,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_119_getInverse,"box2D.common.math.B2Mat22","getInverse",0xbab72a2c,"box2D.common.math.B2Mat22.getInverse","box2D/common/math/B2Mat22.hx",119,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_137_solve,"box2D.common.math.B2Mat22","solve",0x44e43c4d,"box2D.common.math.B2Mat22.solve","box2D/common/math/B2Mat22.hx",137,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_156_abs,"box2D.common.math.B2Mat22","abs",0x0ccffdc0,"box2D.common.math.B2Mat22.abs","box2D/common/math/B2Mat22.hx",156,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_34_fromAngle,"box2D.common.math.B2Mat22","fromAngle",0x4f0329d7,"box2D.common.math.B2Mat22.fromAngle","box2D/common/math/B2Mat22.hx",34,0x6d9f4ea3)
HX_LOCAL_STACK_FRAME(_hx_pos_d95a76fe29304616_41_fromVV,"box2D.common.math.B2Mat22","fromVV",0x8c55569c,"box2D.common.math.B2Mat22.fromVV","box2D/common/math/B2Mat22.hx",41,0x6d9f4ea3)
namespace box2D{
namespace common{
namespace math{

void B2Mat22_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d95a76fe29304616_28_new)
HXLINE(  29)		this->col1 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,(int)0,((Float)1.0));
HXLINE(  30)		this->col2 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,(int)0,((Float)1.0));
            	}

Dynamic B2Mat22_obj::__CreateEmpty() { return new B2Mat22_obj; }

void *B2Mat22_obj::_hx_vtable = 0;

Dynamic B2Mat22_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Mat22_obj > _hx_result = new B2Mat22_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2Mat22_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4cf6ac88;
}

void B2Mat22_obj::set(Float angle){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_48_set)
HXLINE(  49)		Float c = ::Math_obj::cos(angle);
HXLINE(  50)		Float s = ::Math_obj::sin(angle);
HXLINE(  51)		this->col1->x = c;
HXDLIN(  51)		this->col2->x = -(s);
HXLINE(  52)		this->col1->y = s;
HXDLIN(  52)		this->col2->y = c;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Mat22_obj,set,(void))

void B2Mat22_obj::setVV( ::box2D::common::math::B2Vec2 c1, ::box2D::common::math::B2Vec2 c2){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_56_setVV)
HXLINE(  57)		{
HXLINE(  57)			 ::box2D::common::math::B2Vec2 _this = this->col1;
HXDLIN(  57)			_this->x = c1->x;
HXDLIN(  57)			_this->y = c1->y;
            		}
HXLINE(  58)		{
HXLINE(  58)			 ::box2D::common::math::B2Vec2 _this1 = this->col2;
HXDLIN(  58)			_this1->x = c2->x;
HXDLIN(  58)			_this1->y = c2->y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Mat22_obj,setVV,(void))

 ::box2D::common::math::B2Mat22 B2Mat22_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_d95a76fe29304616_61_copy)
HXLINE(  62)		 ::box2D::common::math::B2Mat22 mat =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
HXLINE(  63)		mat->setM(hx::ObjectPtr<OBJ_>(this));
HXLINE(  64)		return mat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Mat22_obj,copy,return )

void B2Mat22_obj::setM( ::box2D::common::math::B2Mat22 m){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_68_setM)
HXLINE(  69)		{
HXLINE(  69)			 ::box2D::common::math::B2Vec2 _this = this->col1;
HXDLIN(  69)			 ::box2D::common::math::B2Vec2 v = m->col1;
HXDLIN(  69)			_this->x = v->x;
HXDLIN(  69)			_this->y = v->y;
            		}
HXLINE(  70)		{
HXLINE(  70)			 ::box2D::common::math::B2Vec2 _this1 = this->col2;
HXDLIN(  70)			 ::box2D::common::math::B2Vec2 v1 = m->col2;
HXDLIN(  70)			_this1->x = v1->x;
HXDLIN(  70)			_this1->y = v1->y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Mat22_obj,setM,(void))

void B2Mat22_obj::addM( ::box2D::common::math::B2Mat22 m){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_74_addM)
HXLINE(  75)		 ::box2D::common::math::B2Vec2 _hx_tmp = this->col1;
HXDLIN(  75)		_hx_tmp->x = (_hx_tmp->x + m->col1->x);
HXLINE(  76)		 ::box2D::common::math::B2Vec2 _hx_tmp1 = this->col1;
HXDLIN(  76)		_hx_tmp1->y = (_hx_tmp1->y + m->col1->y);
HXLINE(  77)		 ::box2D::common::math::B2Vec2 _hx_tmp2 = this->col2;
HXDLIN(  77)		_hx_tmp2->x = (_hx_tmp2->x + m->col2->x);
HXLINE(  78)		 ::box2D::common::math::B2Vec2 _hx_tmp3 = this->col2;
HXDLIN(  78)		_hx_tmp3->y = (_hx_tmp3->y + m->col2->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Mat22_obj,addM,(void))

 ::box2D::common::math::B2Vec2 B2Mat22_obj::multiplyV( ::box2D::common::math::B2Vec2 v){
            	HX_GC_STACKFRAME(&_hx_pos_d95a76fe29304616_83_multiplyV)
HXLINE(  85)		Float _hx_tmp = (this->col1->x * v->x);
HXDLIN(  85)		Float _hx_tmp1 = (_hx_tmp + (this->col2->x * v->y));
HXLINE(  86)		Float _hx_tmp2 = (this->col1->y * v->x);
HXLINE(  83)		return  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,_hx_tmp1,(_hx_tmp2 + (this->col2->y * v->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Mat22_obj,multiplyV,return )

void B2Mat22_obj::setIdentity(){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_91_setIdentity)
HXLINE(  92)		this->col1->x = ((Float)1.0);
HXDLIN(  92)		this->col2->x = ((Float)0.0);
HXLINE(  93)		this->col1->y = ((Float)0.0);
HXDLIN(  93)		this->col2->y = ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Mat22_obj,setIdentity,(void))

void B2Mat22_obj::setZero(){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_97_setZero)
HXLINE(  98)		this->col1->x = ((Float)0.0);
HXDLIN(  98)		this->col2->x = ((Float)0.0);
HXLINE(  99)		this->col1->y = ((Float)0.0);
HXDLIN(  99)		this->col2->y = ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Mat22_obj,setZero,(void))

void B2Mat22_obj::setAngle(Float n){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_103_setAngle)
HXLINE( 104)		this->col1->x = ::Math_obj::cos(n);
HXLINE( 105)		this->col1->y = ::Math_obj::sin(n);
HXLINE( 106)		this->col2->x = -(this->col1->y);
HXLINE( 107)		this->col2->y = this->col1->x;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Mat22_obj,setAngle,(void))

Float B2Mat22_obj::getAngle(){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_112_getAngle)
HXDLIN( 112)		return ::Math_obj::atan2(this->col1->y,this->col1->x);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Mat22_obj,getAngle,return )

 ::box2D::common::math::B2Mat22 B2Mat22_obj::getInverse( ::box2D::common::math::B2Mat22 out){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_119_getInverse)
HXLINE( 120)		Float a = this->col1->x;
HXLINE( 121)		Float b = this->col2->x;
HXLINE( 122)		Float c = this->col1->y;
HXLINE( 123)		Float d = this->col2->y;
HXLINE( 125)		Float det = ((a * d) - (b * c));
HXLINE( 126)		if ((det != ((Float)0.0))) {
HXLINE( 128)			det = ((Float)((Float)1.0) / (Float)det);
            		}
HXLINE( 130)		out->col1->x = (det * d);
HXDLIN( 130)		out->col2->x = (-(det) * b);
HXLINE( 131)		out->col1->y = (-(det) * c);
HXDLIN( 131)		out->col2->y = (det * a);
HXLINE( 132)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Mat22_obj,getInverse,return )

 ::box2D::common::math::B2Vec2 B2Mat22_obj::solve( ::box2D::common::math::B2Vec2 out,Float bX,Float bY){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_137_solve)
HXLINE( 139)		Float a11 = this->col1->x;
HXLINE( 140)		Float a12 = this->col2->x;
HXLINE( 141)		Float a21 = this->col1->y;
HXLINE( 142)		Float a22 = this->col2->y;
HXLINE( 144)		Float det = ((a11 * a22) - (a12 * a21));
HXLINE( 145)		if ((det != ((Float)0.0))) {
HXLINE( 147)			det = ((Float)((Float)1.0) / (Float)det);
            		}
HXLINE( 149)		out->x = (det * ((a22 * bX) - (a12 * bY)));
HXLINE( 150)		out->y = (det * ((a11 * bY) - (a21 * bX)));
HXLINE( 152)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2Mat22_obj,solve,return )

void B2Mat22_obj::abs(){
            	HX_STACKFRAME(&_hx_pos_d95a76fe29304616_156_abs)
HXLINE( 157)		this->col1->abs();
HXLINE( 158)		this->col2->abs();
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Mat22_obj,abs,(void))

 ::box2D::common::math::B2Mat22 B2Mat22_obj::fromAngle(Float angle){
            	HX_GC_STACKFRAME(&_hx_pos_d95a76fe29304616_34_fromAngle)
HXLINE(  35)		 ::box2D::common::math::B2Mat22 mat =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
HXLINE(  36)		mat->set(angle);
HXLINE(  37)		return mat;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(B2Mat22_obj,fromAngle,return )

 ::box2D::common::math::B2Mat22 B2Mat22_obj::fromVV( ::box2D::common::math::B2Vec2 c1, ::box2D::common::math::B2Vec2 c2){
            	HX_GC_STACKFRAME(&_hx_pos_d95a76fe29304616_41_fromVV)
HXLINE(  42)		 ::box2D::common::math::B2Mat22 mat =  ::box2D::common::math::B2Mat22_obj::__alloc( HX_CTX );
HXLINE(  43)		mat->setVV(c1,c2);
HXLINE(  44)		return mat;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(B2Mat22_obj,fromVV,return )


hx::ObjectPtr< B2Mat22_obj > B2Mat22_obj::__new() {
	hx::ObjectPtr< B2Mat22_obj > __this = new B2Mat22_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2Mat22_obj > B2Mat22_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2Mat22_obj *__this = (B2Mat22_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Mat22_obj), true, "box2D.common.math.B2Mat22"));
	*(void **)__this = B2Mat22_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2Mat22_obj::B2Mat22_obj()
{
}

void B2Mat22_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Mat22);
	HX_MARK_MEMBER_NAME(col1,"col1");
	HX_MARK_MEMBER_NAME(col2,"col2");
	HX_MARK_END_CLASS();
}

void B2Mat22_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(col1,"col1");
	HX_VISIT_MEMBER_NAME(col2,"col2");
}

hx::Val B2Mat22_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"abs") ) { return hx::Val( abs_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"setM") ) { return hx::Val( setM_dyn() ); }
		if (HX_FIELD_EQ(inName,"addM") ) { return hx::Val( addM_dyn() ); }
		if (HX_FIELD_EQ(inName,"col1") ) { return hx::Val( col1 ); }
		if (HX_FIELD_EQ(inName,"col2") ) { return hx::Val( col2 ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"setVV") ) { return hx::Val( setVV_dyn() ); }
		if (HX_FIELD_EQ(inName,"solve") ) { return hx::Val( solve_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setZero") ) { return hx::Val( setZero_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setAngle") ) { return hx::Val( setAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAngle") ) { return hx::Val( getAngle_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiplyV") ) { return hx::Val( multiplyV_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getInverse") ) { return hx::Val( getInverse_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setIdentity") ) { return hx::Val( setIdentity_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool B2Mat22_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"fromVV") ) { outValue = fromVV_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromAngle") ) { outValue = fromAngle_dyn(); return true; }
	}
	return false;
}

hx::Val B2Mat22_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"col1") ) { col1=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"col2") ) { col2=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2Mat22_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("col1","\xf1","\xb7","\xc4","\x41"));
	outFields->push(HX_HCSTRING("col2","\xf2","\xb7","\xc4","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Mat22_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Mat22_obj,col1),HX_HCSTRING("col1","\xf1","\xb7","\xc4","\x41")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Mat22_obj,col2),HX_HCSTRING("col2","\xf2","\xb7","\xc4","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2Mat22_obj_sStaticStorageInfo = 0;
#endif

static ::String B2Mat22_obj_sMemberFields[] = {
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("setVV","\x62","\x93","\x2f","\x7a"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setM","\x6b","\x92","\x50","\x4c"),
	HX_HCSTRING("addM","\x0c","\xeb","\x69","\x40"),
	HX_HCSTRING("multiplyV","\xb2","\xfd","\xb8","\xa0"),
	HX_HCSTRING("setIdentity","\x00","\x0f","\x90","\xe9"),
	HX_HCSTRING("setZero","\xea","\x4f","\x75","\x16"),
	HX_HCSTRING("setAngle","\xd1","\xac","\x16","\x31"),
	HX_HCSTRING("getAngle","\x5d","\x53","\xb9","\x82"),
	HX_HCSTRING("getInverse","\xba","\xd1","\x52","\x8d"),
	HX_HCSTRING("solve","\x7f","\xbf","\xc5","\x80"),
	HX_HCSTRING("abs","\x72","\xf0","\x49","\x00"),
	HX_HCSTRING("col1","\xf1","\xb7","\xc4","\x41"),
	HX_HCSTRING("col2","\xf2","\xb7","\xc4","\x41"),
	::String(null()) };

static void B2Mat22_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Mat22_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Mat22_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Mat22_obj::__mClass,"__mClass");
};

#endif

hx::Class B2Mat22_obj::__mClass;

static ::String B2Mat22_obj_sStaticFields[] = {
	HX_HCSTRING("fromAngle","\x09","\x2e","\x6b","\xd7"),
	HX_HCSTRING("fromVV","\x2a","\x9f","\xc6","\xb5"),
	::String(null())
};

void B2Mat22_obj::__register()
{
	hx::Object *dummy = new B2Mat22_obj;
	B2Mat22_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.common.math.B2Mat22","\xbc","\x2e","\x1a","\xab");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2Mat22_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2Mat22_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2Mat22_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Mat22_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Mat22_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Mat22_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Mat22_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Mat22_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace common
} // end namespace math
