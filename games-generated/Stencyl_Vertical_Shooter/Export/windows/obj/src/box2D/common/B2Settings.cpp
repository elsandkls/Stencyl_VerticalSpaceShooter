// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_box2D_common_B2Settings
#include <box2D/common/B2Settings.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_150_b2MixFriction,"box2D.common.B2Settings","b2MixFriction",0x9b573fdd,"box2D.common.B2Settings.b2MixFriction","box2D/common/B2Settings.hx",150,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_158_b2MixRestitution,"box2D.common.B2Settings","b2MixRestitution",0x712a9567,"box2D.common.B2Settings.b2MixRestitution","box2D/common/B2Settings.hx",158,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_185_b2Assert,"box2D.common.B2Settings","b2Assert",0x783e5aff,"box2D.common.B2Settings.b2Assert","box2D/common/B2Settings.hx",185,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_30_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",30,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_36_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",36,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_44_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",44,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_58_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",58,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_65_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",65,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_73_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",73,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_80_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",80,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_86_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",86,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_94_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",94,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_99_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",99,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_104_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",104,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_110_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",110,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_116_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",116,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_122_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",122,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_128_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",128,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_129_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",129,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_135_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",135,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_136_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",136,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_143_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",143,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_168_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",168,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_172_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",172,0xc79dd6b9)
HX_LOCAL_STACK_FRAME(_hx_pos_df41a20749e4d1b2_176_boot,"box2D.common.B2Settings","boot",0x006b0a3b,"box2D.common.B2Settings.boot","box2D/common/B2Settings.hx",176,0xc79dd6b9)
namespace box2D{
namespace common{

void B2Settings_obj::__construct() { }

Dynamic B2Settings_obj::__CreateEmpty() { return new B2Settings_obj; }

void *B2Settings_obj::_hx_vtable = 0;

Dynamic B2Settings_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Settings_obj > _hx_result = new B2Settings_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2Settings_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55501c17;
}

::String B2Settings_obj::VERSION;

Float B2Settings_obj::b2_pi;

int B2Settings_obj::b2_maxManifoldPoints;

Float B2Settings_obj::b2_aabbExtension;

Float B2Settings_obj::b2_aabbMultiplier;

Float B2Settings_obj::b2_linearSlop;

Float B2Settings_obj::b2_polygonRadius;

Float B2Settings_obj::b2_angularSlop;

Float B2Settings_obj::b2_toiSlop;

int B2Settings_obj::b2_maxTOIContactsPerIsland;

int B2Settings_obj::b2_maxTOIJointsPerIsland;

Float B2Settings_obj::b2_velocityThreshold;

Float B2Settings_obj::b2_maxLinearCorrection;

Float B2Settings_obj::b2_maxAngularCorrection;

Float B2Settings_obj::b2_maxTranslation;

Float B2Settings_obj::b2_maxTranslationSquared;

Float B2Settings_obj::b2_maxRotation;

Float B2Settings_obj::b2_maxRotationSquared;

Float B2Settings_obj::b2_contactBaumgarte;

Float B2Settings_obj::b2MixFriction(Float friction1,Float friction2){
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_150_b2MixFriction)
HXDLIN( 150)		return ::Math_obj::sqrt((friction1 * friction2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(B2Settings_obj,b2MixFriction,return )

Float B2Settings_obj::b2MixRestitution(Float restitution1,Float restitution2){
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_158_b2MixRestitution)
HXDLIN( 158)		if ((restitution1 > restitution2)) {
HXDLIN( 158)			return restitution1;
            		}
            		else {
HXDLIN( 158)			return restitution2;
            		}
HXDLIN( 158)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(B2Settings_obj,b2MixRestitution,return )

Float B2Settings_obj::b2_timeToSleep;

Float B2Settings_obj::b2_linearSleepTolerance;

Float B2Settings_obj::b2_angularSleepTolerance;

void B2Settings_obj::b2Assert(bool a){
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_185_b2Assert)
HXDLIN( 185)		if (!(a)) {
HXLINE( 188)			HX_STACK_DO_THROW(HX_("Assertion Failed",9b,63,3f,5d));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(B2Settings_obj,b2Assert,(void))


B2Settings_obj::B2Settings_obj()
{
}

bool B2Settings_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"b2_pi") ) { outValue = ( b2_pi ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { outValue = ( VERSION ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"b2Assert") ) { outValue = b2Assert_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"b2_toiSlop") ) { outValue = ( b2_toiSlop ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"b2_linearSlop") ) { outValue = ( b2_linearSlop ); return true; }
		if (HX_FIELD_EQ(inName,"b2MixFriction") ) { outValue = b2MixFriction_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"b2_angularSlop") ) { outValue = ( b2_angularSlop ); return true; }
		if (HX_FIELD_EQ(inName,"b2_maxRotation") ) { outValue = ( b2_maxRotation ); return true; }
		if (HX_FIELD_EQ(inName,"b2_timeToSleep") ) { outValue = ( b2_timeToSleep ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"b2_aabbExtension") ) { outValue = ( b2_aabbExtension ); return true; }
		if (HX_FIELD_EQ(inName,"b2_polygonRadius") ) { outValue = ( b2_polygonRadius ); return true; }
		if (HX_FIELD_EQ(inName,"b2MixRestitution") ) { outValue = b2MixRestitution_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"b2_aabbMultiplier") ) { outValue = ( b2_aabbMultiplier ); return true; }
		if (HX_FIELD_EQ(inName,"b2_maxTranslation") ) { outValue = ( b2_maxTranslation ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"b2_contactBaumgarte") ) { outValue = ( b2_contactBaumgarte ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"b2_maxManifoldPoints") ) { outValue = ( b2_maxManifoldPoints ); return true; }
		if (HX_FIELD_EQ(inName,"b2_velocityThreshold") ) { outValue = ( b2_velocityThreshold ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"b2_maxRotationSquared") ) { outValue = ( b2_maxRotationSquared ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"b2_maxLinearCorrection") ) { outValue = ( b2_maxLinearCorrection ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"b2_maxAngularCorrection") ) { outValue = ( b2_maxAngularCorrection ); return true; }
		if (HX_FIELD_EQ(inName,"b2_linearSleepTolerance") ) { outValue = ( b2_linearSleepTolerance ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"b2_maxTOIJointsPerIsland") ) { outValue = ( b2_maxTOIJointsPerIsland ); return true; }
		if (HX_FIELD_EQ(inName,"b2_maxTranslationSquared") ) { outValue = ( b2_maxTranslationSquared ); return true; }
		if (HX_FIELD_EQ(inName,"b2_angularSleepTolerance") ) { outValue = ( b2_angularSleepTolerance ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"b2_maxTOIContactsPerIsland") ) { outValue = ( b2_maxTOIContactsPerIsland ); return true; }
	}
	return false;
}

bool B2Settings_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"b2_pi") ) { b2_pi=ioValue.Cast< Float >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { VERSION=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"b2_toiSlop") ) { b2_toiSlop=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"b2_linearSlop") ) { b2_linearSlop=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"b2_angularSlop") ) { b2_angularSlop=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"b2_maxRotation") ) { b2_maxRotation=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"b2_timeToSleep") ) { b2_timeToSleep=ioValue.Cast< Float >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"b2_aabbExtension") ) { b2_aabbExtension=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"b2_polygonRadius") ) { b2_polygonRadius=ioValue.Cast< Float >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"b2_aabbMultiplier") ) { b2_aabbMultiplier=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"b2_maxTranslation") ) { b2_maxTranslation=ioValue.Cast< Float >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"b2_contactBaumgarte") ) { b2_contactBaumgarte=ioValue.Cast< Float >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"b2_maxManifoldPoints") ) { b2_maxManifoldPoints=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"b2_velocityThreshold") ) { b2_velocityThreshold=ioValue.Cast< Float >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"b2_maxRotationSquared") ) { b2_maxRotationSquared=ioValue.Cast< Float >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"b2_maxLinearCorrection") ) { b2_maxLinearCorrection=ioValue.Cast< Float >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"b2_maxAngularCorrection") ) { b2_maxAngularCorrection=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"b2_linearSleepTolerance") ) { b2_linearSleepTolerance=ioValue.Cast< Float >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"b2_maxTOIJointsPerIsland") ) { b2_maxTOIJointsPerIsland=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"b2_maxTranslationSquared") ) { b2_maxTranslationSquared=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"b2_angularSleepTolerance") ) { b2_angularSleepTolerance=ioValue.Cast< Float >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"b2_maxTOIContactsPerIsland") ) { b2_maxTOIContactsPerIsland=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *B2Settings_obj_sMemberStorageInfo = 0;
static hx::StaticInfo B2Settings_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &B2Settings_obj::VERSION,HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_pi,HX_HCSTRING("b2_pi","\x88","\xfc","\x99","\x8e")},
	{hx::fsInt,(void *) &B2Settings_obj::b2_maxManifoldPoints,HX_HCSTRING("b2_maxManifoldPoints","\x68","\x92","\x7f","\xca")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_aabbExtension,HX_HCSTRING("b2_aabbExtension","\x90","\x5e","\xe9","\x67")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_aabbMultiplier,HX_HCSTRING("b2_aabbMultiplier","\x50","\xcb","\xf1","\xfb")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_linearSlop,HX_HCSTRING("b2_linearSlop","\x0e","\xf4","\x2b","\xa1")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_polygonRadius,HX_HCSTRING("b2_polygonRadius","\x3d","\x40","\xeb","\x4e")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_angularSlop,HX_HCSTRING("b2_angularSlop","\x8d","\xed","\xfa","\x31")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_toiSlop,HX_HCSTRING("b2_toiSlop","\xb9","\x8e","\xf9","\xee")},
	{hx::fsInt,(void *) &B2Settings_obj::b2_maxTOIContactsPerIsland,HX_HCSTRING("b2_maxTOIContactsPerIsland","\xa6","\x2e","\xb3","\xba")},
	{hx::fsInt,(void *) &B2Settings_obj::b2_maxTOIJointsPerIsland,HX_HCSTRING("b2_maxTOIJointsPerIsland","\x10","\x2e","\x53","\xad")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_velocityThreshold,HX_HCSTRING("b2_velocityThreshold","\x1f","\x94","\x42","\x47")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_maxLinearCorrection,HX_HCSTRING("b2_maxLinearCorrection","\x38","\xcd","\xe8","\x85")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_maxAngularCorrection,HX_HCSTRING("b2_maxAngularCorrection","\x2b","\x0c","\xb8","\xec")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_maxTranslation,HX_HCSTRING("b2_maxTranslation","\xbc","\xed","\x6a","\xe4")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_maxTranslationSquared,HX_HCSTRING("b2_maxTranslationSquared","\xcb","\x32","\xa8","\xd9")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_maxRotation,HX_HCSTRING("b2_maxRotation","\x93","\x63","\x48","\x0a")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_maxRotationSquared,HX_HCSTRING("b2_maxRotationSquared","\xd4","\x35","\xf1","\xf0")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_contactBaumgarte,HX_HCSTRING("b2_contactBaumgarte","\x61","\xcb","\x02","\x16")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_timeToSleep,HX_HCSTRING("b2_timeToSleep","\xa0","\xcc","\x9a","\x49")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_linearSleepTolerance,HX_HCSTRING("b2_linearSleepTolerance","\x0a","\x7c","\x29","\xca")},
	{hx::fsFloat,(void *) &B2Settings_obj::b2_angularSleepTolerance,HX_HCSTRING("b2_angularSleepTolerance","\x49","\xea","\x20","\xed")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void B2Settings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Settings_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(B2Settings_obj::VERSION,"VERSION");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_pi,"b2_pi");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_maxManifoldPoints,"b2_maxManifoldPoints");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_aabbExtension,"b2_aabbExtension");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_aabbMultiplier,"b2_aabbMultiplier");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_linearSlop,"b2_linearSlop");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_polygonRadius,"b2_polygonRadius");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_angularSlop,"b2_angularSlop");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_toiSlop,"b2_toiSlop");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_maxTOIContactsPerIsland,"b2_maxTOIContactsPerIsland");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_maxTOIJointsPerIsland,"b2_maxTOIJointsPerIsland");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_velocityThreshold,"b2_velocityThreshold");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_maxLinearCorrection,"b2_maxLinearCorrection");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_maxAngularCorrection,"b2_maxAngularCorrection");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_maxTranslation,"b2_maxTranslation");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_maxTranslationSquared,"b2_maxTranslationSquared");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_maxRotation,"b2_maxRotation");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_maxRotationSquared,"b2_maxRotationSquared");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_contactBaumgarte,"b2_contactBaumgarte");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_timeToSleep,"b2_timeToSleep");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_linearSleepTolerance,"b2_linearSleepTolerance");
	HX_MARK_MEMBER_NAME(B2Settings_obj::b2_angularSleepTolerance,"b2_angularSleepTolerance");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Settings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Settings_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::VERSION,"VERSION");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_pi,"b2_pi");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_maxManifoldPoints,"b2_maxManifoldPoints");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_aabbExtension,"b2_aabbExtension");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_aabbMultiplier,"b2_aabbMultiplier");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_linearSlop,"b2_linearSlop");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_polygonRadius,"b2_polygonRadius");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_angularSlop,"b2_angularSlop");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_toiSlop,"b2_toiSlop");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_maxTOIContactsPerIsland,"b2_maxTOIContactsPerIsland");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_maxTOIJointsPerIsland,"b2_maxTOIJointsPerIsland");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_velocityThreshold,"b2_velocityThreshold");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_maxLinearCorrection,"b2_maxLinearCorrection");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_maxAngularCorrection,"b2_maxAngularCorrection");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_maxTranslation,"b2_maxTranslation");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_maxTranslationSquared,"b2_maxTranslationSquared");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_maxRotation,"b2_maxRotation");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_maxRotationSquared,"b2_maxRotationSquared");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_contactBaumgarte,"b2_contactBaumgarte");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_timeToSleep,"b2_timeToSleep");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_linearSleepTolerance,"b2_linearSleepTolerance");
	HX_VISIT_MEMBER_NAME(B2Settings_obj::b2_angularSleepTolerance,"b2_angularSleepTolerance");
};

#endif

hx::Class B2Settings_obj::__mClass;

static ::String B2Settings_obj_sStaticFields[] = {
	HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"),
	HX_HCSTRING("b2_pi","\x88","\xfc","\x99","\x8e"),
	HX_HCSTRING("b2_maxManifoldPoints","\x68","\x92","\x7f","\xca"),
	HX_HCSTRING("b2_aabbExtension","\x90","\x5e","\xe9","\x67"),
	HX_HCSTRING("b2_aabbMultiplier","\x50","\xcb","\xf1","\xfb"),
	HX_HCSTRING("b2_linearSlop","\x0e","\xf4","\x2b","\xa1"),
	HX_HCSTRING("b2_polygonRadius","\x3d","\x40","\xeb","\x4e"),
	HX_HCSTRING("b2_angularSlop","\x8d","\xed","\xfa","\x31"),
	HX_HCSTRING("b2_toiSlop","\xb9","\x8e","\xf9","\xee"),
	HX_HCSTRING("b2_maxTOIContactsPerIsland","\xa6","\x2e","\xb3","\xba"),
	HX_HCSTRING("b2_maxTOIJointsPerIsland","\x10","\x2e","\x53","\xad"),
	HX_HCSTRING("b2_velocityThreshold","\x1f","\x94","\x42","\x47"),
	HX_HCSTRING("b2_maxLinearCorrection","\x38","\xcd","\xe8","\x85"),
	HX_HCSTRING("b2_maxAngularCorrection","\x2b","\x0c","\xb8","\xec"),
	HX_HCSTRING("b2_maxTranslation","\xbc","\xed","\x6a","\xe4"),
	HX_HCSTRING("b2_maxTranslationSquared","\xcb","\x32","\xa8","\xd9"),
	HX_HCSTRING("b2_maxRotation","\x93","\x63","\x48","\x0a"),
	HX_HCSTRING("b2_maxRotationSquared","\xd4","\x35","\xf1","\xf0"),
	HX_HCSTRING("b2_contactBaumgarte","\x61","\xcb","\x02","\x16"),
	HX_HCSTRING("b2MixFriction","\x06","\x4f","\x29","\x7f"),
	HX_HCSTRING("b2MixRestitution","\xde","\xa5","\xe5","\x41"),
	HX_HCSTRING("b2_timeToSleep","\xa0","\xcc","\x9a","\x49"),
	HX_HCSTRING("b2_linearSleepTolerance","\x0a","\x7c","\x29","\xca"),
	HX_HCSTRING("b2_angularSleepTolerance","\x49","\xea","\x20","\xed"),
	HX_HCSTRING("b2Assert","\x76","\x9c","\x18","\x85"),
	::String(null())
};

void B2Settings_obj::__register()
{
	hx::Object *dummy = new B2Settings_obj;
	B2Settings_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.common.B2Settings","\x05","\x97","\xe4","\xc5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &B2Settings_obj::__GetStatic;
	__mClass->mSetStaticField = &B2Settings_obj::__SetStatic;
	__mClass->mMarkFunc = B2Settings_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(B2Settings_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< B2Settings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Settings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Settings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Settings_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void B2Settings_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_30_boot)
HXDLIN(  30)		VERSION = HX_("2.1alpha",49,f6,c8,5d);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_36_boot)
HXDLIN(  36)		b2_pi = ::Math_obj::PI;
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_44_boot)
HXDLIN(  44)		b2_maxManifoldPoints = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_58_boot)
HXDLIN(  58)		b2_aabbExtension = ((Float)0.1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_65_boot)
HXDLIN(  65)		b2_aabbMultiplier = ((Float)2.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_73_boot)
HXDLIN(  73)		b2_linearSlop = ((Float)0.005);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_80_boot)
HXDLIN(  80)		b2_polygonRadius = (((Float)2.0) * ::box2D::common::B2Settings_obj::b2_linearSlop);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_86_boot)
HXDLIN(  86)		b2_angularSlop = (((Float)0.011111111111111112) * ::box2D::common::B2Settings_obj::b2_pi);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_94_boot)
HXDLIN(  94)		b2_toiSlop = (((Float)8.0) * ::box2D::common::B2Settings_obj::b2_linearSlop);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_99_boot)
HXDLIN(  99)		b2_maxTOIContactsPerIsland = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_104_boot)
HXDLIN( 104)		b2_maxTOIJointsPerIsland = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_110_boot)
HXDLIN( 110)		b2_velocityThreshold = ((Float)1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_116_boot)
HXDLIN( 116)		b2_maxLinearCorrection = ((Float)0.2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_122_boot)
HXDLIN( 122)		b2_maxAngularCorrection = (((Float)0.044444444444444446) * ::box2D::common::B2Settings_obj::b2_pi);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_128_boot)
HXDLIN( 128)		b2_maxTranslation = ((Float)2.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_129_boot)
HXDLIN( 129)		b2_maxTranslationSquared = (::box2D::common::B2Settings_obj::b2_maxTranslation * ::box2D::common::B2Settings_obj::b2_maxTranslation);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_135_boot)
HXDLIN( 135)		b2_maxRotation = (((Float)0.5) * ::box2D::common::B2Settings_obj::b2_pi);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_136_boot)
HXDLIN( 136)		b2_maxRotationSquared = (::box2D::common::B2Settings_obj::b2_maxRotation * ::box2D::common::B2Settings_obj::b2_maxRotation);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_143_boot)
HXDLIN( 143)		b2_contactBaumgarte = ((Float)0.2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_168_boot)
HXDLIN( 168)		b2_timeToSleep = ((Float)0.5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_172_boot)
HXDLIN( 172)		b2_linearSleepTolerance = ((Float)0.01);
            	}
{
            	HX_STACKFRAME(&_hx_pos_df41a20749e4d1b2_176_boot)
HXDLIN( 176)		b2_angularSleepTolerance = (((Float)0.011111111111111112) * ::box2D::common::B2Settings_obj::b2_pi);
            	}
}

} // end namespace box2D
} // end namespace common
