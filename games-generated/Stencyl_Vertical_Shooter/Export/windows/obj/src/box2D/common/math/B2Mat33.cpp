// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_common_math_B2Mat33
#include <box2D/common/math/B2Mat33.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec3
#include <box2D/common/math/B2Vec3.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d57b3229ec361070_28_new,"box2D.common.math.B2Mat33","new",0x069bce8e,"box2D.common.math.B2Mat33.new","box2D/common/math/B2Mat33.hx",28,0x01af19c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d57b3229ec361070_49_setVVV,"box2D.common.math.B2Mat33","setVVV",0x5223f546,"box2D.common.math.B2Mat33.setVVV","box2D/common/math/B2Mat33.hx",49,0x01af19c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d57b3229ec361070_56_copy,"box2D.common.math.B2Mat33","copy",0xba7b25c7,"box2D.common.math.B2Mat33.copy","box2D/common/math/B2Mat33.hx",56,0x01af19c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d57b3229ec361070_60_setM,"box2D.common.math.B2Mat33","setM",0xc506fc7d,"box2D.common.math.B2Mat33.setM","box2D/common/math/B2Mat33.hx",60,0x01af19c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d57b3229ec361070_67_addM,"box2D.common.math.B2Mat33","addM",0xb920551e,"box2D.common.math.B2Mat33.addM","box2D/common/math/B2Mat33.hx",67,0x01af19c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d57b3229ec361070_80_setIdentity,"box2D.common.math.B2Mat33","setIdentity",0x7c66eb2e,"box2D.common.math.B2Mat33.setIdentity","box2D/common/math/B2Mat33.hx",80,0x01af19c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d57b3229ec361070_87_setZero,"box2D.common.math.B2Mat33","setZero",0x9002fd18,"box2D.common.math.B2Mat33.setZero","box2D/common/math/B2Mat33.hx",87,0x01af19c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d57b3229ec361070_95_solve22,"box2D.common.math.B2Mat33","solve22",0x06e1b62d,"box2D.common.math.B2Mat33.solve22","box2D/common/math/B2Mat33.hx",95,0x01af19c3)
HX_LOCAL_STACK_FRAME(_hx_pos_d57b3229ec361070_115_solve33,"box2D.common.math.B2Mat33","solve33",0x06e1b70d,"box2D.common.math.B2Mat33.solve33","box2D/common/math/B2Mat33.hx",115,0x01af19c3)
namespace box2D{
namespace common{
namespace math{

void B2Mat33_obj::__construct( ::box2D::common::math::B2Vec3 c1, ::box2D::common::math::B2Vec3 c2, ::box2D::common::math::B2Vec3 c3){
            	HX_GC_STACKFRAME(&_hx_pos_d57b3229ec361070_28_new)
HXLINE(  30)		this->col1 =  ::box2D::common::math::B2Vec3_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  31)		this->col2 =  ::box2D::common::math::B2Vec3_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  32)		this->col3 =  ::box2D::common::math::B2Vec3_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  34)		bool _hx_tmp;
HXDLIN(  34)		bool _hx_tmp1;
HXDLIN(  34)		if (hx::IsNull( c1 )) {
HXLINE(  34)			_hx_tmp1 = hx::IsNull( c2 );
            		}
            		else {
HXLINE(  34)			_hx_tmp1 = false;
            		}
HXDLIN(  34)		if (_hx_tmp1) {
HXLINE(  34)			_hx_tmp = hx::IsNull( c3 );
            		}
            		else {
HXLINE(  34)			_hx_tmp = false;
            		}
HXDLIN(  34)		if (_hx_tmp) {
HXLINE(  36)			this->col1->setZero();
HXLINE(  37)			this->col2->setZero();
HXLINE(  38)			this->col3->setZero();
            		}
            		else {
HXLINE(  42)			this->col1->setV(c1);
HXLINE(  43)			this->col2->setV(c2);
HXLINE(  44)			this->col3->setV(c3);
            		}
            	}

Dynamic B2Mat33_obj::__CreateEmpty() { return new B2Mat33_obj; }

void *B2Mat33_obj::_hx_vtable = 0;

Dynamic B2Mat33_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Mat33_obj > _hx_result = new B2Mat33_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool B2Mat33_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4cf6ad68;
}

void B2Mat33_obj::setVVV( ::box2D::common::math::B2Vec3 c1, ::box2D::common::math::B2Vec3 c2, ::box2D::common::math::B2Vec3 c3){
            	HX_STACKFRAME(&_hx_pos_d57b3229ec361070_49_setVVV)
HXLINE(  50)		this->col1->setV(c1);
HXLINE(  51)		this->col2->setV(c2);
HXLINE(  52)		this->col3->setV(c3);
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2Mat33_obj,setVVV,(void))

 ::box2D::common::math::B2Mat33 B2Mat33_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_d57b3229ec361070_56_copy)
HXDLIN(  56)		return  ::box2D::common::math::B2Mat33_obj::__alloc( HX_CTX ,this->col1,this->col2,this->col3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Mat33_obj,copy,return )

void B2Mat33_obj::setM( ::box2D::common::math::B2Mat33 m){
            	HX_STACKFRAME(&_hx_pos_d57b3229ec361070_60_setM)
HXLINE(  61)		this->col1->setV(m->col1);
HXLINE(  62)		this->col2->setV(m->col2);
HXLINE(  63)		this->col3->setV(m->col3);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Mat33_obj,setM,(void))

void B2Mat33_obj::addM( ::box2D::common::math::B2Mat33 m){
            	HX_STACKFRAME(&_hx_pos_d57b3229ec361070_67_addM)
HXLINE(  68)		 ::box2D::common::math::B2Vec3 _hx_tmp = this->col1;
HXDLIN(  68)		_hx_tmp->x = (_hx_tmp->x + m->col1->x);
HXLINE(  69)		 ::box2D::common::math::B2Vec3 _hx_tmp1 = this->col1;
HXDLIN(  69)		_hx_tmp1->y = (_hx_tmp1->y + m->col1->y);
HXLINE(  70)		 ::box2D::common::math::B2Vec3 _hx_tmp2 = this->col1;
HXDLIN(  70)		_hx_tmp2->z = (_hx_tmp2->z + m->col1->z);
HXLINE(  71)		 ::box2D::common::math::B2Vec3 _hx_tmp3 = this->col2;
HXDLIN(  71)		_hx_tmp3->x = (_hx_tmp3->x + m->col2->x);
HXLINE(  72)		 ::box2D::common::math::B2Vec3 _hx_tmp4 = this->col2;
HXDLIN(  72)		_hx_tmp4->y = (_hx_tmp4->y + m->col2->y);
HXLINE(  73)		 ::box2D::common::math::B2Vec3 _hx_tmp5 = this->col2;
HXDLIN(  73)		_hx_tmp5->z = (_hx_tmp5->z + m->col2->z);
HXLINE(  74)		 ::box2D::common::math::B2Vec3 _hx_tmp6 = this->col3;
HXDLIN(  74)		_hx_tmp6->x = (_hx_tmp6->x + m->col3->x);
HXLINE(  75)		 ::box2D::common::math::B2Vec3 _hx_tmp7 = this->col3;
HXDLIN(  75)		_hx_tmp7->y = (_hx_tmp7->y + m->col3->y);
HXLINE(  76)		 ::box2D::common::math::B2Vec3 _hx_tmp8 = this->col3;
HXDLIN(  76)		_hx_tmp8->z = (_hx_tmp8->z + m->col3->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Mat33_obj,addM,(void))

void B2Mat33_obj::setIdentity(){
            	HX_STACKFRAME(&_hx_pos_d57b3229ec361070_80_setIdentity)
HXLINE(  81)		this->col1->x = ((Float)1.0);
HXDLIN(  81)		this->col2->x = ((Float)0.0);
HXDLIN(  81)		this->col3->x = ((Float)0.0);
HXLINE(  82)		this->col1->y = ((Float)0.0);
HXDLIN(  82)		this->col2->y = ((Float)1.0);
HXDLIN(  82)		this->col3->y = ((Float)0.0);
HXLINE(  83)		this->col1->z = ((Float)0.0);
HXDLIN(  83)		this->col2->z = ((Float)0.0);
HXDLIN(  83)		this->col3->z = ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Mat33_obj,setIdentity,(void))

void B2Mat33_obj::setZero(){
            	HX_STACKFRAME(&_hx_pos_d57b3229ec361070_87_setZero)
HXLINE(  88)		this->col1->x = ((Float)0.0);
HXDLIN(  88)		this->col2->x = ((Float)0.0);
HXDLIN(  88)		this->col3->x = ((Float)0.0);
HXLINE(  89)		this->col1->y = ((Float)0.0);
HXDLIN(  89)		this->col2->y = ((Float)0.0);
HXDLIN(  89)		this->col3->y = ((Float)0.0);
HXLINE(  90)		this->col1->z = ((Float)0.0);
HXDLIN(  90)		this->col2->z = ((Float)0.0);
HXDLIN(  90)		this->col3->z = ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Mat33_obj,setZero,(void))

 ::box2D::common::math::B2Vec2 B2Mat33_obj::solve22( ::box2D::common::math::B2Vec2 out,Float bX,Float bY){
            	HX_STACKFRAME(&_hx_pos_d57b3229ec361070_95_solve22)
HXLINE(  97)		Float a11 = this->col1->x;
HXLINE(  98)		Float a12 = this->col2->x;
HXLINE(  99)		Float a21 = this->col1->y;
HXLINE( 100)		Float a22 = this->col2->y;
HXLINE( 102)		Float det = ((a11 * a22) - (a12 * a21));
HXLINE( 103)		if ((det != ((Float)0.0))) {
HXLINE( 105)			det = ((Float)((Float)1.0) / (Float)det);
            		}
HXLINE( 107)		out->x = (det * ((a22 * bX) - (a12 * bY)));
HXLINE( 108)		out->y = (det * ((a11 * bY) - (a21 * bX)));
HXLINE( 110)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(B2Mat33_obj,solve22,return )

 ::box2D::common::math::B2Vec3 B2Mat33_obj::solve33( ::box2D::common::math::B2Vec3 out,Float bX,Float bY,Float bZ){
            	HX_STACKFRAME(&_hx_pos_d57b3229ec361070_115_solve33)
HXLINE( 116)		Float a11 = this->col1->x;
HXLINE( 117)		Float a21 = this->col1->y;
HXLINE( 118)		Float a31 = this->col1->z;
HXLINE( 119)		Float a12 = this->col2->x;
HXLINE( 120)		Float a22 = this->col2->y;
HXLINE( 121)		Float a32 = this->col2->z;
HXLINE( 122)		Float a13 = this->col3->x;
HXLINE( 123)		Float a23 = this->col3->y;
HXLINE( 124)		Float a33 = this->col3->z;
HXLINE( 126)		Float det = (((a11 * ((a22 * a33) - (a32 * a23))) + (a21 * ((a32 * a13) - (a12 * a33)))) + (a31 * ((a12 * a23) - (a22 * a13))));
HXLINE( 129)		if ((det != ((Float)0.0))) {
HXLINE( 131)			det = ((Float)((Float)1.0) / (Float)det);
            		}
HXLINE( 134)		out->x = (det * (((bX * ((a22 * a33) - (a32 * a23))) + (bY * ((a32 * a13) - (a12 * a33)))) + (bZ * ((a12 * a23) - (a22 * a13)))));
HXLINE( 138)		out->y = (det * (((a11 * ((bY * a33) - (bZ * a23))) + (a21 * ((bZ * a13) - (bX * a33)))) + (a31 * ((bX * a23) - (bY * a13)))));
HXLINE( 142)		out->z = (det * (((a11 * ((a22 * bZ) - (a32 * bY))) + (a21 * ((a32 * bX) - (a12 * bZ)))) + (a31 * ((a12 * bY) - (a22 * bX)))));
HXLINE( 145)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC4(B2Mat33_obj,solve33,return )


hx::ObjectPtr< B2Mat33_obj > B2Mat33_obj::__new( ::box2D::common::math::B2Vec3 c1, ::box2D::common::math::B2Vec3 c2, ::box2D::common::math::B2Vec3 c3) {
	hx::ObjectPtr< B2Mat33_obj > __this = new B2Mat33_obj();
	__this->__construct(c1,c2,c3);
	return __this;
}

hx::ObjectPtr< B2Mat33_obj > B2Mat33_obj::__alloc(hx::Ctx *_hx_ctx, ::box2D::common::math::B2Vec3 c1, ::box2D::common::math::B2Vec3 c2, ::box2D::common::math::B2Vec3 c3) {
	B2Mat33_obj *__this = (B2Mat33_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Mat33_obj), true, "box2D.common.math.B2Mat33"));
	*(void **)__this = B2Mat33_obj::_hx_vtable;
	__this->__construct(c1,c2,c3);
	return __this;
}

B2Mat33_obj::B2Mat33_obj()
{
}

void B2Mat33_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Mat33);
	HX_MARK_MEMBER_NAME(col1,"col1");
	HX_MARK_MEMBER_NAME(col2,"col2");
	HX_MARK_MEMBER_NAME(col3,"col3");
	HX_MARK_END_CLASS();
}

void B2Mat33_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(col1,"col1");
	HX_VISIT_MEMBER_NAME(col2,"col2");
	HX_VISIT_MEMBER_NAME(col3,"col3");
}

hx::Val B2Mat33_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"setM") ) { return hx::Val( setM_dyn() ); }
		if (HX_FIELD_EQ(inName,"addM") ) { return hx::Val( addM_dyn() ); }
		if (HX_FIELD_EQ(inName,"col1") ) { return hx::Val( col1 ); }
		if (HX_FIELD_EQ(inName,"col2") ) { return hx::Val( col2 ); }
		if (HX_FIELD_EQ(inName,"col3") ) { return hx::Val( col3 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"setVVV") ) { return hx::Val( setVVV_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setZero") ) { return hx::Val( setZero_dyn() ); }
		if (HX_FIELD_EQ(inName,"solve22") ) { return hx::Val( solve22_dyn() ); }
		if (HX_FIELD_EQ(inName,"solve33") ) { return hx::Val( solve33_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setIdentity") ) { return hx::Val( setIdentity_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2Mat33_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"col1") ) { col1=inValue.Cast<  ::box2D::common::math::B2Vec3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"col2") ) { col2=inValue.Cast<  ::box2D::common::math::B2Vec3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"col3") ) { col3=inValue.Cast<  ::box2D::common::math::B2Vec3 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2Mat33_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("col1","\xf1","\xb7","\xc4","\x41"));
	outFields->push(HX_HCSTRING("col2","\xf2","\xb7","\xc4","\x41"));
	outFields->push(HX_HCSTRING("col3","\xf3","\xb7","\xc4","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Mat33_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec3*/ ,(int)offsetof(B2Mat33_obj,col1),HX_HCSTRING("col1","\xf1","\xb7","\xc4","\x41")},
	{hx::fsObject /*::box2D::common::math::B2Vec3*/ ,(int)offsetof(B2Mat33_obj,col2),HX_HCSTRING("col2","\xf2","\xb7","\xc4","\x41")},
	{hx::fsObject /*::box2D::common::math::B2Vec3*/ ,(int)offsetof(B2Mat33_obj,col3),HX_HCSTRING("col3","\xf3","\xb7","\xc4","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2Mat33_obj_sStaticStorageInfo = 0;
#endif

static ::String B2Mat33_obj_sMemberFields[] = {
	HX_HCSTRING("setVVV","\xb4","\x62","\x71","\x6f"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("setM","\x6b","\x92","\x50","\x4c"),
	HX_HCSTRING("addM","\x0c","\xeb","\x69","\x40"),
	HX_HCSTRING("setIdentity","\x00","\x0f","\x90","\xe9"),
	HX_HCSTRING("setZero","\xea","\x4f","\x75","\x16"),
	HX_HCSTRING("solve22","\xff","\x08","\x54","\x8d"),
	HX_HCSTRING("solve33","\xdf","\x09","\x54","\x8d"),
	HX_HCSTRING("col1","\xf1","\xb7","\xc4","\x41"),
	HX_HCSTRING("col2","\xf2","\xb7","\xc4","\x41"),
	HX_HCSTRING("col3","\xf3","\xb7","\xc4","\x41"),
	::String(null()) };

static void B2Mat33_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Mat33_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Mat33_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Mat33_obj::__mClass,"__mClass");
};

#endif

hx::Class B2Mat33_obj::__mClass;

void B2Mat33_obj::__register()
{
	hx::Object *dummy = new B2Mat33_obj;
	B2Mat33_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.common.math.B2Mat33","\x9c","\x2f","\x1a","\xab");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2Mat33_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Mat33_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Mat33_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Mat33_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Mat33_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Mat33_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace common
} // end namespace math
