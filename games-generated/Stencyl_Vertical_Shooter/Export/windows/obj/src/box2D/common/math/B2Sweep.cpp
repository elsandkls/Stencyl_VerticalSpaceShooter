// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_box2D_common_math_B2Mat22
#include <box2D/common/math/B2Mat22.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Sweep
#include <box2D/common/math/B2Sweep.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Transform
#include <box2D/common/math/B2Transform.h>
#endif
#ifndef INCLUDED_box2D_common_math_B2Vec2
#include <box2D/common/math/B2Vec2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_076209b06582b038_31_new,"box2D.common.math.B2Sweep","new",0x90218b3a,"box2D.common.math.B2Sweep.new","box2D/common/math/B2Sweep.hx",31,0xdeb69697)
HX_LOCAL_STACK_FRAME(_hx_pos_076209b06582b038_40_set,"box2D.common.math.B2Sweep","set",0x9025567c,"box2D.common.math.B2Sweep.set","box2D/common/math/B2Sweep.hx",40,0xdeb69697)
HX_LOCAL_STACK_FRAME(_hx_pos_076209b06582b038_50_copy,"box2D.common.math.B2Sweep","copy",0x85fa7f9b,"box2D.common.math.B2Sweep.copy","box2D/common/math/B2Sweep.hx",50,0xdeb69697)
HX_LOCAL_STACK_FRAME(_hx_pos_076209b06582b038_66_getTransform,"box2D.common.math.B2Sweep","getTransform",0xbdfee3dc,"box2D.common.math.B2Sweep.getTransform","box2D/common/math/B2Sweep.hx",66,0xdeb69697)
HX_LOCAL_STACK_FRAME(_hx_pos_076209b06582b038_84_advance,"box2D.common.math.B2Sweep","advance",0xf699385c,"box2D.common.math.B2Sweep.advance","box2D/common/math/B2Sweep.hx",84,0xdeb69697)
namespace box2D{
namespace common{
namespace math{

void B2Sweep_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_076209b06582b038_31_new)
HXLINE(  33)		this->localCenter =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  34)		this->c0 =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  35)		this->c =  ::box2D::common::math::B2Vec2_obj::__alloc( HX_CTX ,null(),null());
            	}

Dynamic B2Sweep_obj::__CreateEmpty() { return new B2Sweep_obj; }

void *B2Sweep_obj::_hx_vtable = 0;

Dynamic B2Sweep_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< B2Sweep_obj > _hx_result = new B2Sweep_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool B2Sweep_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3127874c;
}

void B2Sweep_obj::set( ::box2D::common::math::B2Sweep other){
            	HX_STACKFRAME(&_hx_pos_076209b06582b038_40_set)
HXLINE(  41)		{
HXLINE(  41)			 ::box2D::common::math::B2Vec2 _this = this->localCenter;
HXDLIN(  41)			 ::box2D::common::math::B2Vec2 v = other->localCenter;
HXDLIN(  41)			_this->x = v->x;
HXDLIN(  41)			_this->y = v->y;
            		}
HXLINE(  42)		{
HXLINE(  42)			 ::box2D::common::math::B2Vec2 _this1 = this->c0;
HXDLIN(  42)			 ::box2D::common::math::B2Vec2 v1 = other->c0;
HXDLIN(  42)			_this1->x = v1->x;
HXDLIN(  42)			_this1->y = v1->y;
            		}
HXLINE(  43)		{
HXLINE(  43)			 ::box2D::common::math::B2Vec2 _this2 = this->c;
HXDLIN(  43)			 ::box2D::common::math::B2Vec2 v2 = other->c;
HXDLIN(  43)			_this2->x = v2->x;
HXDLIN(  43)			_this2->y = v2->y;
            		}
HXLINE(  44)		this->a0 = other->a0;
HXLINE(  45)		this->a = other->a;
HXLINE(  46)		this->t0 = other->t0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Sweep_obj,set,(void))

 ::box2D::common::math::B2Sweep B2Sweep_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_076209b06582b038_50_copy)
HXLINE(  51)		 ::box2D::common::math::B2Sweep copy =  ::box2D::common::math::B2Sweep_obj::__alloc( HX_CTX );
HXLINE(  52)		{
HXLINE(  52)			 ::box2D::common::math::B2Vec2 _this = copy->localCenter;
HXDLIN(  52)			 ::box2D::common::math::B2Vec2 v = this->localCenter;
HXDLIN(  52)			_this->x = v->x;
HXDLIN(  52)			_this->y = v->y;
            		}
HXLINE(  53)		{
HXLINE(  53)			 ::box2D::common::math::B2Vec2 _this1 = copy->c0;
HXDLIN(  53)			 ::box2D::common::math::B2Vec2 v1 = this->c0;
HXDLIN(  53)			_this1->x = v1->x;
HXDLIN(  53)			_this1->y = v1->y;
            		}
HXLINE(  54)		{
HXLINE(  54)			 ::box2D::common::math::B2Vec2 _this2 = copy->c;
HXDLIN(  54)			 ::box2D::common::math::B2Vec2 v2 = this->c;
HXDLIN(  54)			_this2->x = v2->x;
HXDLIN(  54)			_this2->y = v2->y;
            		}
HXLINE(  55)		copy->a0 = this->a0;
HXLINE(  56)		copy->a = this->a;
HXLINE(  57)		copy->t0 = this->t0;
HXLINE(  58)		return copy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(B2Sweep_obj,copy,return )

void B2Sweep_obj::getTransform( ::box2D::common::math::B2Transform xf,Float alpha){
            	HX_STACKFRAME(&_hx_pos_076209b06582b038_66_getTransform)
HXLINE(  67)		Float _hx_tmp = ((((Float)1.0) - alpha) * this->c0->x);
HXDLIN(  67)		xf->position->x = (_hx_tmp + (alpha * this->c->x));
HXLINE(  68)		Float _hx_tmp1 = ((((Float)1.0) - alpha) * this->c0->y);
HXDLIN(  68)		xf->position->y = (_hx_tmp1 + (alpha * this->c->y));
HXLINE(  69)		Float angle = ((((Float)1.0) - alpha) * this->a0);
HXDLIN(  69)		Float angle1 = (angle + (alpha * this->a));
HXLINE(  70)		xf->R->set(angle1);
HXLINE(  74)		 ::box2D::common::math::B2Mat22 tMat = xf->R;
HXLINE(  75)		 ::box2D::common::math::B2Vec2 xf1 = xf->position;
HXDLIN(  75)		Float _hx_tmp2 = (tMat->col1->x * this->localCenter->x);
HXDLIN(  75)		xf1->x = (xf1->x - (_hx_tmp2 + (tMat->col2->x * this->localCenter->y)));
HXLINE(  76)		 ::box2D::common::math::B2Vec2 xf2 = xf->position;
HXDLIN(  76)		Float _hx_tmp3 = (tMat->col1->y * this->localCenter->x);
HXDLIN(  76)		xf2->y = (xf2->y - (_hx_tmp3 + (tMat->col2->y * this->localCenter->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(B2Sweep_obj,getTransform,(void))

void B2Sweep_obj::advance(Float t){
            	HX_STACKFRAME(&_hx_pos_076209b06582b038_84_advance)
HXDLIN(  84)		bool _hx_tmp;
HXDLIN(  84)		if ((this->t0 < t)) {
HXDLIN(  84)			_hx_tmp = ((((Float)1.0) - this->t0) > ((Float)2.2250738585072014e-308));
            		}
            		else {
HXDLIN(  84)			_hx_tmp = false;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  86)			Float alpha = (t - this->t0);
HXDLIN(  86)			Float alpha1 = ((Float)alpha / (Float)(((Float)1.0) - this->t0));
HXLINE(  88)			Float _hx_tmp1 = ((((Float)1.0) - alpha1) * this->c0->x);
HXDLIN(  88)			this->c0->x = (_hx_tmp1 + (alpha1 * this->c->x));
HXLINE(  89)			Float _hx_tmp2 = ((((Float)1.0) - alpha1) * this->c0->y);
HXDLIN(  89)			this->c0->y = (_hx_tmp2 + (alpha1 * this->c->y));
HXLINE(  90)			Float _hx_tmp3 = ((((Float)1.0) - alpha1) * this->a0);
HXDLIN(  90)			this->a0 = (_hx_tmp3 + (alpha1 * this->a));
HXLINE(  91)			this->t0 = t;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(B2Sweep_obj,advance,(void))


hx::ObjectPtr< B2Sweep_obj > B2Sweep_obj::__new() {
	hx::ObjectPtr< B2Sweep_obj > __this = new B2Sweep_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< B2Sweep_obj > B2Sweep_obj::__alloc(hx::Ctx *_hx_ctx) {
	B2Sweep_obj *__this = (B2Sweep_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(B2Sweep_obj), true, "box2D.common.math.B2Sweep"));
	*(void **)__this = B2Sweep_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

B2Sweep_obj::B2Sweep_obj()
{
}

void B2Sweep_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(B2Sweep);
	HX_MARK_MEMBER_NAME(localCenter,"localCenter");
	HX_MARK_MEMBER_NAME(c0,"c0");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_MEMBER_NAME(a0,"a0");
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(t0,"t0");
	HX_MARK_END_CLASS();
}

void B2Sweep_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(localCenter,"localCenter");
	HX_VISIT_MEMBER_NAME(c0,"c0");
	HX_VISIT_MEMBER_NAME(c,"c");
	HX_VISIT_MEMBER_NAME(a0,"a0");
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(t0,"t0");
}

hx::Val B2Sweep_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { return hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"c0") ) { return hx::Val( c0 ); }
		if (HX_FIELD_EQ(inName,"a0") ) { return hx::Val( a0 ); }
		if (HX_FIELD_EQ(inName,"t0") ) { return hx::Val( t0 ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"advance") ) { return hx::Val( advance_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"localCenter") ) { return hx::Val( localCenter ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getTransform") ) { return hx::Val( getTransform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val B2Sweep_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"c0") ) { c0=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"a0") ) { a0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"t0") ) { t0=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"localCenter") ) { localCenter=inValue.Cast<  ::box2D::common::math::B2Vec2 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void B2Sweep_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("localCenter","\xa0","\xc5","\x15","\xc3"));
	outFields->push(HX_HCSTRING("c0","\x6d","\x56","\x00","\x00"));
	outFields->push(HX_HCSTRING("c","\x63","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("a0","\xaf","\x54","\x00","\x00"));
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("t0","\x3c","\x65","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo B2Sweep_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Sweep_obj,localCenter),HX_HCSTRING("localCenter","\xa0","\xc5","\x15","\xc3")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Sweep_obj,c0),HX_HCSTRING("c0","\x6d","\x56","\x00","\x00")},
	{hx::fsObject /*::box2D::common::math::B2Vec2*/ ,(int)offsetof(B2Sweep_obj,c),HX_HCSTRING("c","\x63","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(B2Sweep_obj,a0),HX_HCSTRING("a0","\xaf","\x54","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(B2Sweep_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(B2Sweep_obj,t0),HX_HCSTRING("t0","\x3c","\x65","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *B2Sweep_obj_sStaticStorageInfo = 0;
#endif

static ::String B2Sweep_obj_sMemberFields[] = {
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("getTransform","\xf6","\xc9","\xe9","\x54"),
	HX_HCSTRING("advance","\x82","\x08","\x0c","\xef"),
	HX_HCSTRING("localCenter","\xa0","\xc5","\x15","\xc3"),
	HX_HCSTRING("c0","\x6d","\x56","\x00","\x00"),
	HX_HCSTRING("c","\x63","\x00","\x00","\x00"),
	HX_HCSTRING("a0","\xaf","\x54","\x00","\x00"),
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("t0","\x3c","\x65","\x00","\x00"),
	::String(null()) };

static void B2Sweep_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(B2Sweep_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void B2Sweep_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(B2Sweep_obj::__mClass,"__mClass");
};

#endif

hx::Class B2Sweep_obj::__mClass;

void B2Sweep_obj::__register()
{
	hx::Object *dummy = new B2Sweep_obj;
	B2Sweep_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("box2D.common.math.B2Sweep","\x48","\x26","\x01","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = B2Sweep_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(B2Sweep_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< B2Sweep_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = B2Sweep_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = B2Sweep_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = B2Sweep_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace box2D
} // end namespace common
} // end namespace math
