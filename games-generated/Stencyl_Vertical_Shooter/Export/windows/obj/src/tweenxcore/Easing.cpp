// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_tweenxcore_Easing
#include <tweenxcore/Easing.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_20_linear,"tweenxcore.Easing","linear",0x6bb10ac6,"tweenxcore.Easing.linear","tweenxcore/Tools.hx",20,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_27_sineIn,"tweenxcore.Easing","sineIn",0x38307c73,"tweenxcore.Easing.sineIn","tweenxcore/Tools.hx",27,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_36_sineOut,"tweenxcore.Easing","sineOut",0xf240fc40,"tweenxcore.Easing.sineOut","tweenxcore/Tools.hx",36,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_45_sineInOut,"tweenxcore.Easing","sineInOut",0x4884e5db,"tweenxcore.Easing.sineInOut","tweenxcore/Tools.hx",45,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_54_sineOutIn,"tweenxcore.Easing","sineOutIn",0xc1a8cc45,"tweenxcore.Easing.sineOutIn","tweenxcore/Tools.hx",54,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_71_quadIn,"tweenxcore.Easing","quadIn",0x4bb0316d,"tweenxcore.Easing.quadIn","tweenxcore/Tools.hx",71,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_75_quadOut,"tweenxcore.Easing","quadOut",0xee7fa206,"tweenxcore.Easing.quadOut","tweenxcore/Tools.hx",75,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_79_quadInOut,"tweenxcore.Easing","quadInOut",0xce0d0921,"tweenxcore.Easing.quadInOut","tweenxcore/Tools.hx",79,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_83_quadOutIn,"tweenxcore.Easing","quadOutIn",0x4730ef8b,"tweenxcore.Easing.quadOutIn","tweenxcore/Tools.hx",83,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_92_cubicIn,"tweenxcore.Easing","cubicIn",0x3f16cfce,"tweenxcore.Easing.cubicIn","tweenxcore/Tools.hx",92,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_96_cubicOut,"tweenxcore.Easing","cubicOut",0xf4e39885,"tweenxcore.Easing.cubicOut","tweenxcore/Tools.hx",96,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_100_cubicInOut,"tweenxcore.Easing","cubicInOut",0x2e3add60,"tweenxcore.Easing.cubicInOut","tweenxcore/Tools.hx",100,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_106_cubicOutIn,"tweenxcore.Easing","cubicOutIn",0xa75ec3ca,"tweenxcore.Easing.cubicOutIn","tweenxcore/Tools.hx",106,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_115_quartIn,"tweenxcore.Easing","quartIn",0xf7dc8bc3,"tweenxcore.Easing.quartIn","tweenxcore/Tools.hx",115,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_119_quartOut,"tweenxcore.Easing","quartOut",0xe92252f0,"tweenxcore.Easing.quartOut","tweenxcore/Tools.hx",119,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_123_quartInOut,"tweenxcore.Easing","quartInOut",0xbb6d488b,"tweenxcore.Easing.quartInOut","tweenxcore/Tools.hx",123,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_127_quartOutIn,"tweenxcore.Easing","quartOutIn",0x34912ef5,"tweenxcore.Easing.quartOutIn","tweenxcore/Tools.hx",127,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_136_quintIn,"tweenxcore.Easing","quintIn",0x906c554f,"tweenxcore.Easing.quintIn","tweenxcore/Tools.hx",136,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_140_quintOut,"tweenxcore.Easing","quintOut",0xce62e3e4,"tweenxcore.Easing.quintOut","tweenxcore/Tools.hx",140,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_144_quintInOut,"tweenxcore.Easing","quintInOut",0xdeaafe7f,"tweenxcore.Easing.quintInOut","tweenxcore/Tools.hx",144,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_148_quintOutIn,"tweenxcore.Easing","quintOutIn",0x57cee4e9,"tweenxcore.Easing.quintOutIn","tweenxcore/Tools.hx",148,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_156_expoIn,"tweenxcore.Easing","expoIn",0x438e2698,"tweenxcore.Easing.expoIn","tweenxcore/Tools.hx",156,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_159_expoOut,"tweenxcore.Easing","expoOut",0xd8d8327b,"tweenxcore.Easing.expoOut","tweenxcore/Tools.hx",159,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_162_expoInOut,"tweenxcore.Easing","expoInOut",0x6c0260d6,"tweenxcore.Easing.expoInOut","tweenxcore/Tools.hx",162,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_173_expoOutIn,"tweenxcore.Easing","expoOutIn",0xe5264740,"tweenxcore.Easing.expoOutIn","tweenxcore/Tools.hx",173,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_187_circIn,"tweenxcore.Easing","circIn",0xd51e0c7d,"tweenxcore.Easing.circIn","tweenxcore/Tools.hx",187,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_190_circOut,"tweenxcore.Easing","circOut",0xa53174f6,"tweenxcore.Easing.circOut","tweenxcore/Tools.hx",190,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_193_circInOut,"tweenxcore.Easing","circInOut",0xf30d7811,"tweenxcore.Easing.circInOut","tweenxcore/Tools.hx",193,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_196_circOutIn,"tweenxcore.Easing","circOutIn",0x6c315e7b,"tweenxcore.Easing.circOutIn","tweenxcore/Tools.hx",196,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_204_bounceIn,"tweenxcore.Easing","bounceIn",0x3c09aaae,"tweenxcore.Easing.bounceIn","tweenxcore/Tools.hx",204,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_215_bounceOut,"tweenxcore.Easing","bounceOut",0x4c7041a5,"tweenxcore.Easing.bounceOut","tweenxcore/Tools.hx",215,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_226_bounceInOut,"tweenxcore.Easing","bounceInOut",0x011c0e80,"tweenxcore.Easing.bounceInOut","tweenxcore/Tools.hx",226,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_249_bounceOutIn,"tweenxcore.Easing","bounceOutIn",0x7a3ff4ea,"tweenxcore.Easing.bounceOutIn","tweenxcore/Tools.hx",249,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_278_backIn,"tweenxcore.Easing","backIn",0xc9a9eacd,"tweenxcore.Easing.backIn","tweenxcore/Tools.hx",278,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_287_backOut,"tweenxcore.Easing","backOut",0xab081ca6,"tweenxcore.Easing.backOut","tweenxcore/Tools.hx",287,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_296_backInOut,"tweenxcore.Easing","backInOut",0x19a16bc1,"tweenxcore.Easing.backInOut","tweenxcore/Tools.hx",296,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_307_backOutIn,"tweenxcore.Easing","backOutIn",0x92c5522b,"tweenxcore.Easing.backOutIn","tweenxcore/Tools.hx",307,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_325_elasticIn,"tweenxcore.Easing","elasticIn",0xa64c6ad9,"tweenxcore.Easing.elasticIn","tweenxcore/Tools.hx",325,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_335_elasticOut,"tweenxcore.Easing","elasticOut",0xdc95a71a,"tweenxcore.Easing.elasticOut","tweenxcore/Tools.hx",335,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_345_elasticInOut,"tweenxcore.Easing","elasticInOut",0xf17d7b35,"tweenxcore.Easing.elasticInOut","tweenxcore/Tools.hx",345,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_360_elasticOutIn,"tweenxcore.Easing","elasticOutIn",0x6aa1619f,"tweenxcore.Easing.elasticOutIn","tweenxcore/Tools.hx",360,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_384_warpOut,"tweenxcore.Easing","warpOut",0xba9b9f25,"tweenxcore.Easing.warpOut","tweenxcore/Tools.hx",384,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_387_warpIn,"tweenxcore.Easing","warpIn",0x39167d2e,"tweenxcore.Easing.warpIn","tweenxcore/Tools.hx",387,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_390_warpInOut,"tweenxcore.Easing","warpInOut",0xd6f9cc00,"tweenxcore.Easing.warpInOut","tweenxcore/Tools.hx",390,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_393_warpOutIn,"tweenxcore.Easing","warpOutIn",0x501db26a,"tweenxcore.Easing.warpOutIn","tweenxcore/Tools.hx",393,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_11_boot,"tweenxcore.Easing","boot",0xf95292d3,"tweenxcore.Easing.boot","tweenxcore/Tools.hx",11,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_12_boot,"tweenxcore.Easing","boot",0xf95292d3,"tweenxcore.Easing.boot","tweenxcore/Tools.hx",12,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_13_boot,"tweenxcore.Easing","boot",0xf95292d3,"tweenxcore.Easing.boot","tweenxcore/Tools.hx",13,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_14_boot,"tweenxcore.Easing","boot",0xf95292d3,"tweenxcore.Easing.boot","tweenxcore/Tools.hx",14,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_272_boot,"tweenxcore.Easing","boot",0xf95292d3,"tweenxcore.Easing.boot","tweenxcore/Tools.hx",272,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_322_boot,"tweenxcore.Easing","boot",0xf95292d3,"tweenxcore.Easing.boot","tweenxcore/Tools.hx",322,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_68717d69d68dbeef_323_boot,"tweenxcore.Easing","boot",0xf95292d3,"tweenxcore.Easing.boot","tweenxcore/Tools.hx",323,0x7b87d9c6)
namespace tweenxcore{

void Easing_obj::__construct() { }

Dynamic Easing_obj::__CreateEmpty() { return new Easing_obj; }

void *Easing_obj::_hx_vtable = 0;

Dynamic Easing_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Easing_obj > _hx_result = new Easing_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Easing_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3095fb17;
}

Float Easing_obj::PI;

Float Easing_obj::PI_H;

Float Easing_obj::LN_2;

Float Easing_obj::LN_2_10;

Float Easing_obj::linear(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_20_linear)
HXDLIN(  20)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,linear,return )

Float Easing_obj::sineIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_27_sineIn)
HXDLIN(  27)		if ((t == (int)0)) {
HXLINE(  28)			return (int)0;
            		}
            		else {
HXLINE(  29)			if ((t == (int)1)) {
HXLINE(  30)				return (int)1;
            			}
            			else {
HXLINE(  32)				return ((int)1 - ::Math_obj::cos((t * ((Float)1.5707963267948966))));
            			}
            		}
HXLINE(  27)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,sineIn,return )

Float Easing_obj::sineOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_36_sineOut)
HXDLIN(  36)		if ((t == (int)0)) {
HXLINE(  37)			return (int)0;
            		}
            		else {
HXLINE(  38)			if ((t == (int)1)) {
HXLINE(  39)				return (int)1;
            			}
            			else {
HXLINE(  41)				return ::Math_obj::sin((t * ((Float)1.5707963267948966)));
            			}
            		}
HXLINE(  36)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,sineOut,return )

Float Easing_obj::sineInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_45_sineInOut)
HXDLIN(  45)		if ((t == (int)0)) {
HXLINE(  46)			return (int)0;
            		}
            		else {
HXLINE(  47)			if ((t == (int)1)) {
HXLINE(  48)				return (int)1;
            			}
            			else {
HXLINE(  50)				return (((Float)-0.5) * (::Math_obj::cos((((Float)3.1415926535897932384626433832795) * t)) - (int)1));
            			}
            		}
HXLINE(  45)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,sineInOut,return )

Float Easing_obj::sineOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_54_sineOutIn)
HXDLIN(  54)		if ((t == (int)0)) {
HXLINE(  55)			return (int)0;
            		}
            		else {
HXLINE(  56)			if ((t == (int)1)) {
HXLINE(  57)				return (int)1;
            			}
            			else {
HXLINE(  58)				if ((t < ((Float)0.5))) {
HXLINE(  59)					return (((Float)0.5) * ::Math_obj::sin(((t * (int)2) * ((Float)1.5707963267948966))));
            				}
            				else {
HXLINE(  61)					return ((((Float)-0.5) * ::Math_obj::cos((((t * (int)2) - (int)1) * ((Float)1.5707963267948966)))) + (int)1);
            				}
            			}
            		}
HXLINE(  54)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,sineOutIn,return )

Float Easing_obj::quadIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_71_quadIn)
HXDLIN(  71)		return (t * t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quadIn,return )

Float Easing_obj::quadOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_75_quadOut)
HXDLIN(  75)		return (-(t) * (t - (int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quadOut,return )

Float Easing_obj::quadInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_79_quadInOut)
HXDLIN(  79)		if ((t < ((Float)0.5))) {
HXDLIN(  79)			return (((int)2 * t) * t);
            		}
            		else {
HXDLIN(  79)			t = (t - (int)1);
HXDLIN(  79)			return (((int)-2 * (t * t)) + (int)1);
            		}
HXDLIN(  79)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quadInOut,return )

Float Easing_obj::quadOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_83_quadOutIn)
HXDLIN(  83)		if ((t < ((Float)0.5))) {
HXDLIN(  83)			t = (t * (int)2);
HXDLIN(  83)			Float _hx_tmp = (((Float)-0.5) * t);
HXDLIN(  83)			return (_hx_tmp * (t - (int)2));
            		}
            		else {
HXDLIN(  83)			t = ((t * (int)2) - (int)1);
HXDLIN(  83)			return (((((Float)0.5) * t) * t) + ((Float)0.5));
            		}
HXDLIN(  83)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quadOutIn,return )

Float Easing_obj::cubicIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_92_cubicIn)
HXDLIN(  92)		return ((t * t) * t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,cubicIn,return )

Float Easing_obj::cubicOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_96_cubicOut)
HXDLIN(  96)		t = (t - (int)1);
HXDLIN(  96)		return (((t * t) * t) + (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,cubicOut,return )

Float Easing_obj::cubicInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_100_cubicInOut)
HXDLIN( 100)		t = (t * (int)2);
HXDLIN( 100)		if ((t < (int)1)) {
HXLINE( 101)			return (((((Float)0.5) * t) * t) * t);
            		}
            		else {
HXLINE( 102)			t = (t - (int)2);
HXDLIN( 102)			return (((Float)0.5) * (((t * t) * t) + (int)2));
            		}
HXLINE( 100)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,cubicInOut,return )

Float Easing_obj::cubicOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_106_cubicOutIn)
HXDLIN( 106)		t = ((t * (int)2) - (int)1);
HXDLIN( 106)		return (((Float)0.5) * (((t * t) * t) + (int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,cubicOutIn,return )

Float Easing_obj::quartIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_115_quartIn)
HXDLIN( 115)		t = (t * t);
HXDLIN( 115)		return (t * t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quartIn,return )

Float Easing_obj::quartOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_119_quartOut)
HXDLIN( 119)		t = (t - (int)1);
HXDLIN( 119)		t = (t * t);
HXDLIN( 119)		return ((int)1 - (t * t));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quartOut,return )

Float Easing_obj::quartInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_123_quartInOut)
HXDLIN( 123)		t = (t * (int)2);
HXDLIN( 123)		if ((t < (int)1)) {
HXDLIN( 123)			t = (t * t);
HXDLIN( 123)			return ((((Float)0.5) * t) * t);
            		}
            		else {
HXDLIN( 123)			t = (t - (int)2);
HXDLIN( 123)			t = (t * t);
HXDLIN( 123)			return (((Float)-0.5) * ((t * t) - (int)2));
            		}
HXDLIN( 123)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quartInOut,return )

Float Easing_obj::quartOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_127_quartOutIn)
HXDLIN( 127)		if ((t < ((Float)0.5))) {
HXDLIN( 127)			t = ((t * (int)2) - (int)1);
HXDLIN( 127)			t = (t * t);
HXDLIN( 127)			return (((((Float)-0.5) * t) * t) + ((Float)0.5));
            		}
            		else {
HXDLIN( 127)			t = ((t * (int)2) - (int)1);
HXDLIN( 127)			t = (t * t);
HXDLIN( 127)			return (((((Float)0.5) * t) * t) + ((Float)0.5));
            		}
HXDLIN( 127)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quartOutIn,return )

Float Easing_obj::quintIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_136_quintIn)
HXDLIN( 136)		Float t1 = t;
HXDLIN( 136)		t = (t * t);
HXDLIN( 136)		return ((t1 * t) * t);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quintIn,return )

Float Easing_obj::quintOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_140_quintOut)
HXDLIN( 140)		t = (t - (int)1);
HXDLIN( 140)		Float _hx_tmp = t;
HXDLIN( 140)		t = (t * t);
HXDLIN( 140)		return (((_hx_tmp * t) * t) + (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quintOut,return )

Float Easing_obj::quintInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_144_quintInOut)
HXDLIN( 144)		t = (t * (int)2);
HXDLIN( 144)		if ((t < (int)1)) {
HXDLIN( 144)			Float _hx_tmp = (((Float)0.5) * t);
HXDLIN( 144)			t = (t * t);
HXDLIN( 144)			return ((_hx_tmp * t) * t);
            		}
            		else {
HXDLIN( 144)			t = (t - (int)2);
HXDLIN( 144)			Float _hx_tmp1 = (((Float)0.5) * t);
HXDLIN( 144)			t = (t * t);
HXDLIN( 144)			return (((_hx_tmp1 * t) * t) + (int)1);
            		}
HXDLIN( 144)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quintInOut,return )

Float Easing_obj::quintOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_148_quintOutIn)
HXDLIN( 148)		t = ((t * (int)2) - (int)1);
HXDLIN( 148)		Float _hx_tmp = t;
HXDLIN( 148)		t = (t * t);
HXDLIN( 148)		return (((Float)0.5) * (((_hx_tmp * t) * t) + (int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,quintOutIn,return )

Float Easing_obj::expoIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_156_expoIn)
HXDLIN( 156)		if ((t == (int)0)) {
HXDLIN( 156)			return (int)0;
            		}
            		else {
HXDLIN( 156)			return ::Math_obj::exp((((Float)6.931471805599453) * (t - (int)1)));
            		}
HXDLIN( 156)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,expoIn,return )

Float Easing_obj::expoOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_159_expoOut)
HXDLIN( 159)		if ((t == (int)1)) {
HXDLIN( 159)			return (int)1;
            		}
            		else {
HXDLIN( 159)			return ((int)1 - ::Math_obj::exp((((Float)-6.9314718055994531) * t)));
            		}
HXDLIN( 159)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,expoOut,return )

Float Easing_obj::expoInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_162_expoInOut)
HXDLIN( 162)		if ((t == (int)0)) {
HXLINE( 163)			return (int)0;
            		}
            		else {
HXLINE( 164)			if ((t == (int)1)) {
HXLINE( 165)				return (int)1;
            			}
            			else {
HXLINE( 166)				t = (t * (int)2);
HXDLIN( 166)				if ((t < (int)1)) {
HXLINE( 167)					return (((Float)0.5) * ::Math_obj::exp((((Float)6.931471805599453) * (t - (int)1))));
            				}
            				else {
HXLINE( 169)					return (((Float)0.5) * ((int)2 - ::Math_obj::exp((((Float)-6.9314718055994531) * (t - (int)1)))));
            				}
            			}
            		}
HXLINE( 162)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,expoInOut,return )

Float Easing_obj::expoOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_173_expoOutIn)
HXDLIN( 173)		if ((t < ((Float)0.5))) {
HXLINE( 174)			return (((Float)0.5) * ((int)1 - ::Math_obj::exp((((Float)-13.862943611198906) * t))));
            		}
            		else {
HXLINE( 175)			if ((t == ((Float)0.5))) {
HXLINE( 176)				return ((Float)0.5);
            			}
            			else {
HXLINE( 178)				return (((Float)0.5) * (::Math_obj::exp((((Float)13.862943611198906) * (t - (int)1))) + (int)1));
            			}
            		}
HXLINE( 173)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,expoOutIn,return )

Float Easing_obj::circIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_187_circIn)
HXDLIN( 187)		bool _hx_tmp;
HXDLIN( 187)		if (!((t < (int)-1))) {
HXDLIN( 187)			_hx_tmp = ((int)1 < t);
            		}
            		else {
HXDLIN( 187)			_hx_tmp = true;
            		}
HXDLIN( 187)		if (_hx_tmp) {
HXDLIN( 187)			return (int)0;
            		}
            		else {
HXDLIN( 187)			return ((int)1 - ::Math_obj::sqrt(((int)1 - (t * t))));
            		}
HXDLIN( 187)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,circIn,return )

Float Easing_obj::circOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_190_circOut)
HXDLIN( 190)		bool _hx_tmp;
HXDLIN( 190)		if (!((t < (int)0))) {
HXDLIN( 190)			_hx_tmp = ((int)2 < t);
            		}
            		else {
HXDLIN( 190)			_hx_tmp = true;
            		}
HXDLIN( 190)		if (_hx_tmp) {
HXDLIN( 190)			return (int)0;
            		}
            		else {
HXDLIN( 190)			return ::Math_obj::sqrt((t * ((int)2 - t)));
            		}
HXDLIN( 190)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,circOut,return )

Float Easing_obj::circInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_193_circInOut)
HXDLIN( 193)		bool _hx_tmp;
HXDLIN( 193)		if (!((t < ((Float)-0.5)))) {
HXDLIN( 193)			_hx_tmp = (((Float)1.5) < t);
            		}
            		else {
HXDLIN( 193)			_hx_tmp = true;
            		}
HXDLIN( 193)		if (_hx_tmp) {
HXDLIN( 193)			return ((Float)0.5);
            		}
            		else {
HXDLIN( 193)			t = (t * (int)2);
HXDLIN( 193)			if ((t < (int)1)) {
HXDLIN( 193)				return (((Float)-0.5) * (::Math_obj::sqrt(((int)1 - (t * t))) - (int)1));
            			}
            			else {
HXDLIN( 193)				t = (t - (int)2);
HXDLIN( 193)				return (((Float)0.5) * (::Math_obj::sqrt(((int)1 - (t * t))) + (int)1));
            			}
            		}
HXDLIN( 193)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,circInOut,return )

Float Easing_obj::circOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_196_circOutIn)
HXDLIN( 196)		if ((t < (int)0)) {
HXDLIN( 196)			return (int)0;
            		}
            		else {
HXDLIN( 196)			if (((int)1 < t)) {
HXDLIN( 196)				return (int)1;
            			}
            			else {
HXDLIN( 196)				if ((t < ((Float)0.5))) {
HXDLIN( 196)					t = ((t * (int)2) - (int)1);
HXDLIN( 196)					return (((Float)0.5) * ::Math_obj::sqrt(((int)1 - (t * t))));
            				}
            				else {
HXDLIN( 196)					t = ((t * (int)2) - (int)1);
HXDLIN( 196)					return (((Float)-0.5) * ((::Math_obj::sqrt(((int)1 - (t * t))) - (int)1) - (int)1));
            				}
            			}
            		}
HXDLIN( 196)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,circOutIn,return )

Float Easing_obj::bounceIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_204_bounceIn)
HXDLIN( 204)		t = ((int)1 - t);
HXDLIN( 204)		if ((t < ((Float)0.36363636363636365))) {
HXLINE( 205)			return ((int)1 - ((((Float)7.5625) * t) * t));
            		}
            		else {
HXLINE( 206)			if ((t < ((Float)0.72727272727272729))) {
HXLINE( 207)				t = (t - ((Float)0.54545454545454541));
HXDLIN( 207)				return ((int)1 - (((((Float)7.5625) * t) * t) + ((Float)0.75)));
            			}
            			else {
HXLINE( 208)				if ((t < ((Float)0.90909090909090906))) {
HXLINE( 209)					t = (t - ((Float)0.81818181818181823));
HXDLIN( 209)					return ((int)1 - (((((Float)7.5625) * t) * t) + ((Float)0.9375)));
            				}
            				else {
HXLINE( 211)					t = (t - ((Float)0.95454545454545459));
HXDLIN( 211)					return ((int)1 - (((((Float)7.5625) * t) * t) + ((Float)0.984375)));
            				}
            			}
            		}
HXLINE( 204)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,bounceIn,return )

Float Easing_obj::bounceOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_215_bounceOut)
HXDLIN( 215)		if ((t < ((Float)0.36363636363636365))) {
HXLINE( 216)			return ((((Float)7.5625) * t) * t);
            		}
            		else {
HXLINE( 217)			if ((t < ((Float)0.72727272727272729))) {
HXLINE( 218)				t = (t - ((Float)0.54545454545454541));
HXDLIN( 218)				return (((((Float)7.5625) * t) * t) + ((Float)0.75));
            			}
            			else {
HXLINE( 219)				if ((t < ((Float)0.90909090909090906))) {
HXLINE( 220)					t = (t - ((Float)0.81818181818181823));
HXDLIN( 220)					return (((((Float)7.5625) * t) * t) + ((Float)0.9375));
            				}
            				else {
HXLINE( 222)					t = (t - ((Float)0.95454545454545459));
HXDLIN( 222)					return (((((Float)7.5625) * t) * t) + ((Float)0.984375));
            				}
            			}
            		}
HXLINE( 215)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,bounceOut,return )

Float Easing_obj::bounceInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_226_bounceInOut)
HXDLIN( 226)		if ((t < ((Float)0.5))) {
HXLINE( 227)			t = ((int)1 - (t * (int)2));
HXDLIN( 227)			if ((t < ((Float)0.36363636363636365))) {
HXLINE( 228)				return (((int)1 - ((((Float)7.5625) * t) * t)) * ((Float)0.5));
            			}
            			else {
HXLINE( 229)				if ((t < ((Float)0.72727272727272729))) {
HXLINE( 230)					t = (t - ((Float)0.54545454545454541));
HXDLIN( 230)					return (((int)1 - (((((Float)7.5625) * t) * t) + ((Float)0.75))) * ((Float)0.5));
            				}
            				else {
HXLINE( 231)					if ((t < ((Float)0.90909090909090906))) {
HXLINE( 232)						t = (t - ((Float)0.81818181818181823));
HXDLIN( 232)						return (((int)1 - (((((Float)7.5625) * t) * t) + ((Float)0.9375))) * ((Float)0.5));
            					}
            					else {
HXLINE( 234)						t = (t - ((Float)0.95454545454545459));
HXDLIN( 234)						return (((int)1 - (((((Float)7.5625) * t) * t) + ((Float)0.984375))) * ((Float)0.5));
            					}
            				}
            			}
            		}
            		else {
HXLINE( 237)			t = ((t * (int)2) - (int)1);
HXDLIN( 237)			if ((t < ((Float)0.36363636363636365))) {
HXLINE( 238)				return ((((((Float)7.5625) * t) * t) * ((Float)0.5)) + ((Float)0.5));
            			}
            			else {
HXLINE( 239)				if ((t < ((Float)0.72727272727272729))) {
HXLINE( 240)					t = (t - ((Float)0.54545454545454541));
HXDLIN( 240)					return (((((((Float)7.5625) * t) * t) + ((Float)0.75)) * ((Float)0.5)) + ((Float)0.5));
            				}
            				else {
HXLINE( 241)					if ((t < ((Float)0.90909090909090906))) {
HXLINE( 242)						t = (t - ((Float)0.81818181818181823));
HXDLIN( 242)						return (((((((Float)7.5625) * t) * t) + ((Float)0.9375)) * ((Float)0.5)) + ((Float)0.5));
            					}
            					else {
HXLINE( 244)						t = (t - ((Float)0.95454545454545459));
HXDLIN( 244)						return (((((((Float)7.5625) * t) * t) + ((Float)0.984375)) * ((Float)0.5)) + ((Float)0.5));
            					}
            				}
            			}
            		}
HXLINE( 226)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,bounceInOut,return )

Float Easing_obj::bounceOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_249_bounceOutIn)
HXDLIN( 249)		if ((t < ((Float)0.5))) {
HXLINE( 250)			t = (t * (int)2);
HXDLIN( 250)			if ((t < ((Float)0.36363636363636365))) {
HXLINE( 251)				return (((Float)0.5) * ((((Float)7.5625) * t) * t));
            			}
            			else {
HXLINE( 252)				if ((t < ((Float)0.72727272727272729))) {
HXLINE( 253)					t = (t - ((Float)0.54545454545454541));
HXDLIN( 253)					return (((Float)0.5) * (((((Float)7.5625) * t) * t) + ((Float)0.75)));
            				}
            				else {
HXLINE( 254)					if ((t < ((Float)0.90909090909090906))) {
HXLINE( 255)						t = (t - ((Float)0.81818181818181823));
HXDLIN( 255)						return (((Float)0.5) * (((((Float)7.5625) * t) * t) + ((Float)0.9375)));
            					}
            					else {
HXLINE( 257)						t = (t - ((Float)0.95454545454545459));
HXDLIN( 257)						return (((Float)0.5) * (((((Float)7.5625) * t) * t) + ((Float)0.984375)));
            					}
            				}
            			}
            		}
            		else {
HXLINE( 260)			t = ((int)1 - ((t * (int)2) - (int)1));
HXDLIN( 260)			if ((t < ((Float)0.36363636363636365))) {
HXLINE( 261)				return ((((Float)0.5) - (((Float)0.5) * ((((Float)7.5625) * t) * t))) + ((Float)0.5));
            			}
            			else {
HXLINE( 262)				if ((t < ((Float)0.72727272727272729))) {
HXLINE( 263)					t = (t - ((Float)0.54545454545454541));
HXDLIN( 263)					return ((((Float)0.5) - (((Float)0.5) * (((((Float)7.5625) * t) * t) + ((Float)0.75)))) + ((Float)0.5));
            				}
            				else {
HXLINE( 264)					if ((t < ((Float)0.90909090909090906))) {
HXLINE( 265)						t = (t - ((Float)0.81818181818181823));
HXDLIN( 265)						return ((((Float)0.5) - (((Float)0.5) * (((((Float)7.5625) * t) * t) + ((Float)0.9375)))) + ((Float)0.5));
            					}
            					else {
HXLINE( 267)						t = (t - ((Float)0.95454545454545459));
HXDLIN( 267)						return ((((Float)0.5) - (((Float)0.5) * (((((Float)7.5625) * t) * t) + ((Float)0.984375)))) + ((Float)0.5));
            					}
            				}
            			}
            		}
HXLINE( 249)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,bounceOutIn,return )

Float Easing_obj::overshoot;

Float Easing_obj::backIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_278_backIn)
HXDLIN( 278)		if ((t == (int)0)) {
HXLINE( 279)			return (int)0;
            		}
            		else {
HXLINE( 280)			if ((t == (int)1)) {
HXLINE( 281)				return (int)1;
            			}
            			else {
HXLINE( 283)				return ((t * t) * ((((Float)2.70158) * t) - ((Float)1.70158)));
            			}
            		}
HXLINE( 278)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,backIn,return )

Float Easing_obj::backOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_287_backOut)
HXDLIN( 287)		if ((t == (int)0)) {
HXLINE( 288)			return (int)0;
            		}
            		else {
HXLINE( 289)			if ((t == (int)1)) {
HXLINE( 290)				return (int)1;
            			}
            			else {
HXLINE( 292)				t = (t - (int)1);
HXDLIN( 292)				Float _hx_tmp = (t * t);
HXDLIN( 292)				return ((_hx_tmp * ((((Float)2.70158) * t) + ((Float)1.70158))) + (int)1);
            			}
            		}
HXLINE( 287)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,backOut,return )

Float Easing_obj::backInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_296_backInOut)
HXDLIN( 296)		if ((t == (int)0)) {
HXLINE( 297)			return (int)0;
            		}
            		else {
HXLINE( 298)			if ((t == (int)1)) {
HXLINE( 299)				return (int)1;
            			}
            			else {
HXLINE( 300)				t = (t * (int)2);
HXDLIN( 300)				if ((t < (int)1)) {
HXLINE( 301)					return (((Float)0.5) * ((t * t) * ((((Float)3.5949095) * t) - ((Float)2.5949095))));
            				}
            				else {
HXLINE( 303)					t = (t - (int)2);
HXDLIN( 303)					Float _hx_tmp = (t * t);
HXDLIN( 303)					return (((Float)0.5) * ((_hx_tmp * ((((Float)3.5949095) * t) + ((Float)2.5949095))) + (int)2));
            				}
            			}
            		}
HXLINE( 296)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,backInOut,return )

Float Easing_obj::backOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_307_backOutIn)
HXDLIN( 307)		if ((t == (int)0)) {
HXLINE( 308)			return (int)0;
            		}
            		else {
HXLINE( 309)			if ((t == (int)1)) {
HXLINE( 310)				return (int)1;
            			}
            			else {
HXLINE( 311)				if ((t < ((Float)0.5))) {
HXLINE( 312)					t = ((t * (int)2) - (int)1);
HXDLIN( 312)					Float _hx_tmp = (t * t);
HXDLIN( 312)					return (((Float)0.5) * ((_hx_tmp * ((((Float)2.70158) * t) + ((Float)1.70158))) + (int)1));
            				}
            				else {
HXLINE( 314)					t = ((t * (int)2) - (int)1);
HXDLIN( 314)					Float _hx_tmp1 = ((((Float)0.5) * t) * t);
HXDLIN( 314)					return ((_hx_tmp1 * ((((Float)2.70158) * t) - ((Float)1.70158))) + ((Float)0.5));
            				}
            			}
            		}
HXLINE( 307)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,backOutIn,return )

Float Easing_obj::amplitude;

Float Easing_obj::period;

Float Easing_obj::elasticIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_325_elasticIn)
HXDLIN( 325)		if ((t == (int)0)) {
HXLINE( 326)			return (int)0;
            		}
            		else {
HXLINE( 327)			if ((t == (int)1)) {
HXLINE( 328)				return (int)1;
            			}
            			else {
HXLINE( 330)				Float s = ((Float)7.5e-005);
HXLINE( 331)				t = (t - (int)1);
HXDLIN( 331)				Float _hx_tmp = ::Math_obj::exp((((Float)6.931471805599453) * t));
HXDLIN( 331)				return -((_hx_tmp * ::Math_obj::sin(((Float)(((t * ((Float)0.001)) - s) * ((Float)6.2831853071795862)) / (Float)((Float)0.0003)))));
            			}
            		}
HXLINE( 325)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,elasticIn,return )

Float Easing_obj::elasticOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_335_elasticOut)
HXDLIN( 335)		if ((t == (int)0)) {
HXLINE( 336)			return (int)0;
            		}
            		else {
HXLINE( 337)			if ((t == (int)1)) {
HXLINE( 338)				return (int)1;
            			}
            			else {
HXLINE( 340)				Float s = ((Float)7.5e-005);
HXLINE( 341)				Float _hx_tmp = ::Math_obj::exp((((Float)-6.9314718055994531) * t));
HXDLIN( 341)				return ((_hx_tmp * ::Math_obj::sin(((Float)(((t * ((Float)0.001)) - s) * ((Float)6.2831853071795862)) / (Float)((Float)0.0003)))) + (int)1);
            			}
            		}
HXLINE( 335)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,elasticOut,return )

Float Easing_obj::elasticInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_345_elasticInOut)
HXDLIN( 345)		if ((t == (int)0)) {
HXLINE( 346)			return (int)0;
            		}
            		else {
HXLINE( 347)			if ((t == (int)1)) {
HXLINE( 348)				return (int)1;
            			}
            			else {
HXLINE( 350)				Float s = ((Float)7.5e-005);
HXLINE( 352)				t = (t * (int)2);
HXDLIN( 352)				if ((t < (int)1)) {
HXLINE( 353)					t = (t - (int)1);
HXDLIN( 353)					Float _hx_tmp = ::Math_obj::exp((((Float)6.931471805599453) * t));
HXDLIN( 353)					return (((Float)-0.5) * (_hx_tmp * ::Math_obj::sin(((Float)(((t * ((Float)0.001)) - s) * ((Float)6.2831853071795862)) / (Float)((Float)0.0003)))));
            				}
            				else {
HXLINE( 355)					t = (t - (int)1);
HXDLIN( 355)					Float _hx_tmp1 = ::Math_obj::exp((((Float)-6.9314718055994531) * t));
HXDLIN( 355)					return (((_hx_tmp1 * ::Math_obj::sin(((Float)(((t * ((Float)0.001)) - s) * ((Float)6.2831853071795862)) / (Float)((Float)0.0003)))) * ((Float)0.5)) + (int)1);
            				}
            			}
            		}
HXLINE( 345)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,elasticInOut,return )

Float Easing_obj::elasticOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_360_elasticOutIn)
HXDLIN( 360)		if ((t < ((Float)0.5))) {
HXLINE( 361)			t = (t * (int)2);
HXDLIN( 361)			if ((t == (int)0)) {
HXLINE( 362)				return (int)0;
            			}
            			else {
HXLINE( 364)				Float s = ((Float)7.5e-005);
HXLINE( 365)				Float _hx_tmp = (((Float)0.5) * ::Math_obj::exp((((Float)-6.9314718055994531) * t)));
HXDLIN( 365)				return ((_hx_tmp * ::Math_obj::sin(((Float)(((t * ((Float)0.001)) - s) * ((Float)6.2831853071795862)) / (Float)((Float)0.0003)))) + ((Float)0.5));
            			}
            		}
            		else {
HXLINE( 368)			if ((t == ((Float)0.5))) {
HXLINE( 369)				return ((Float)0.5);
            			}
            			else {
HXLINE( 370)				if ((t == (int)1)) {
HXLINE( 371)					return (int)1;
            				}
            				else {
HXLINE( 373)					t = ((t * (int)2) - (int)1);
HXLINE( 374)					Float s1 = ((Float)7.5e-005);
HXLINE( 375)					t = (t - (int)1);
HXDLIN( 375)					Float _hx_tmp1 = (((Float)0.5) * ::Math_obj::exp((((Float)6.931471805599453) * t)));
HXDLIN( 375)					return (-((_hx_tmp1 * ::Math_obj::sin(((Float)(((t * ((Float)0.001)) - s1) * ((Float)6.2831853071795862)) / (Float)((Float)0.0003))))) + ((Float)0.5));
            				}
            			}
            		}
HXLINE( 360)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,elasticOutIn,return )

Float Easing_obj::warpOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_384_warpOut)
HXDLIN( 384)		if ((t <= (int)0)) {
HXDLIN( 384)			return (int)0;
            		}
            		else {
HXDLIN( 384)			return (int)1;
            		}
HXDLIN( 384)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,warpOut,return )

Float Easing_obj::warpIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_387_warpIn)
HXDLIN( 387)		if ((t < (int)1)) {
HXDLIN( 387)			return (int)0;
            		}
            		else {
HXDLIN( 387)			return (int)1;
            		}
HXDLIN( 387)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,warpIn,return )

Float Easing_obj::warpInOut(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_390_warpInOut)
HXDLIN( 390)		if ((t < ((Float)0.5))) {
HXDLIN( 390)			return (int)0;
            		}
            		else {
HXDLIN( 390)			return (int)1;
            		}
HXDLIN( 390)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,warpInOut,return )

Float Easing_obj::warpOutIn(Float t){
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_393_warpOutIn)
HXDLIN( 393)		if ((t <= (int)0)) {
HXDLIN( 393)			return (int)0;
            		}
            		else {
HXDLIN( 393)			if ((t < (int)1)) {
HXDLIN( 393)				return ((Float)0.5);
            			}
            			else {
HXDLIN( 393)				return (int)1;
            			}
            		}
HXDLIN( 393)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Easing_obj,warpOutIn,return )


Easing_obj::Easing_obj()
{
}

bool Easing_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"linear") ) { outValue = linear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sineIn") ) { outValue = sineIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quadIn") ) { outValue = quadIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"expoIn") ) { outValue = expoIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"circIn") ) { outValue = circIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"backIn") ) { outValue = backIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"warpIn") ) { outValue = warpIn_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sineOut") ) { outValue = sineOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quadOut") ) { outValue = quadOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cubicIn") ) { outValue = cubicIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quartIn") ) { outValue = quartIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quintIn") ) { outValue = quintIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"expoOut") ) { outValue = expoOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"circOut") ) { outValue = circOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"backOut") ) { outValue = backOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"warpOut") ) { outValue = warpOut_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cubicOut") ) { outValue = cubicOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quartOut") ) { outValue = quartOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quintOut") ) { outValue = quintOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounceIn") ) { outValue = bounceIn_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sineInOut") ) { outValue = sineInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sineOutIn") ) { outValue = sineOutIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quadInOut") ) { outValue = quadInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quadOutIn") ) { outValue = quadOutIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"expoInOut") ) { outValue = expoInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"expoOutIn") ) { outValue = expoOutIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"circInOut") ) { outValue = circInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"circOutIn") ) { outValue = circOutIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounceOut") ) { outValue = bounceOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"backInOut") ) { outValue = backInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"backOutIn") ) { outValue = backOutIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"elasticIn") ) { outValue = elasticIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"warpInOut") ) { outValue = warpInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"warpOutIn") ) { outValue = warpOutIn_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cubicInOut") ) { outValue = cubicInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cubicOutIn") ) { outValue = cubicOutIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quartInOut") ) { outValue = quartInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quartOutIn") ) { outValue = quartOutIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quintInOut") ) { outValue = quintInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quintOutIn") ) { outValue = quintOutIn_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"elasticOut") ) { outValue = elasticOut_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bounceInOut") ) { outValue = bounceInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bounceOutIn") ) { outValue = bounceOutIn_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"elasticInOut") ) { outValue = elasticInOut_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"elasticOutIn") ) { outValue = elasticOutIn_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Easing_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Easing_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Easing_obj::PI,HX_HCSTRING("PI","\xf9","\x45","\x00","\x00")},
	{hx::fsFloat,(void *) &Easing_obj::PI_H,HX_HCSTRING("PI_H","\x42","\xc9","\x18","\x35")},
	{hx::fsFloat,(void *) &Easing_obj::LN_2,HX_HCSTRING("LN_2","\xf5","\xb9","\x77","\x32")},
	{hx::fsFloat,(void *) &Easing_obj::LN_2_10,HX_HCSTRING("LN_2_10","\x29","\x6e","\x9b","\x5c")},
	{hx::fsFloat,(void *) &Easing_obj::overshoot,HX_HCSTRING("overshoot","\x0b","\xa0","\xbb","\x4c")},
	{hx::fsFloat,(void *) &Easing_obj::amplitude,HX_HCSTRING("amplitude","\x43","\x15","\xfb","\x69")},
	{hx::fsFloat,(void *) &Easing_obj::period,HX_HCSTRING("period","\x01","\x61","\x1b","\x3b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Easing_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Easing_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Easing_obj::PI,"PI");
	HX_MARK_MEMBER_NAME(Easing_obj::PI_H,"PI_H");
	HX_MARK_MEMBER_NAME(Easing_obj::LN_2,"LN_2");
	HX_MARK_MEMBER_NAME(Easing_obj::LN_2_10,"LN_2_10");
	HX_MARK_MEMBER_NAME(Easing_obj::overshoot,"overshoot");
	HX_MARK_MEMBER_NAME(Easing_obj::amplitude,"amplitude");
	HX_MARK_MEMBER_NAME(Easing_obj::period,"period");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Easing_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Easing_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Easing_obj::PI,"PI");
	HX_VISIT_MEMBER_NAME(Easing_obj::PI_H,"PI_H");
	HX_VISIT_MEMBER_NAME(Easing_obj::LN_2,"LN_2");
	HX_VISIT_MEMBER_NAME(Easing_obj::LN_2_10,"LN_2_10");
	HX_VISIT_MEMBER_NAME(Easing_obj::overshoot,"overshoot");
	HX_VISIT_MEMBER_NAME(Easing_obj::amplitude,"amplitude");
	HX_VISIT_MEMBER_NAME(Easing_obj::period,"period");
};

#endif

hx::Class Easing_obj::__mClass;

static ::String Easing_obj_sStaticFields[] = {
	HX_HCSTRING("PI","\xf9","\x45","\x00","\x00"),
	HX_HCSTRING("PI_H","\x42","\xc9","\x18","\x35"),
	HX_HCSTRING("LN_2","\xf5","\xb9","\x77","\x32"),
	HX_HCSTRING("LN_2_10","\x29","\x6e","\x9b","\x5c"),
	HX_HCSTRING("linear","\xe5","\x51","\xa0","\xec"),
	HX_HCSTRING("sineIn","\x92","\xc3","\x1f","\xb9"),
	HX_HCSTRING("sineOut","\x41","\xf0","\xaf","\x42"),
	HX_HCSTRING("sineInOut","\x1c","\x9c","\x99","\xc9"),
	HX_HCSTRING("sineOutIn","\x86","\x82","\xbd","\x42"),
	HX_HCSTRING("quadIn","\x8c","\x78","\x9f","\xcc"),
	HX_HCSTRING("quadOut","\x07","\x96","\xee","\x3e"),
	HX_HCSTRING("quadInOut","\x62","\xbf","\x21","\x4f"),
	HX_HCSTRING("quadOutIn","\xcc","\xa5","\x45","\xc8"),
	HX_HCSTRING("cubicIn","\xcf","\xc3","\x85","\x8f"),
	HX_HCSTRING("cubicOut","\x64","\x25","\x8a","\x05"),
	HX_HCSTRING("cubicInOut","\xff","\x9f","\x45","\x9f"),
	HX_HCSTRING("cubicOutIn","\x69","\x86","\x69","\x18"),
	HX_HCSTRING("quartIn","\xc4","\x7f","\x4b","\x48"),
	HX_HCSTRING("quartOut","\xcf","\xdf","\xc8","\xf9"),
	HX_HCSTRING("quartInOut","\x2a","\x0b","\x78","\x2c"),
	HX_HCSTRING("quartOutIn","\x94","\xf1","\x9b","\xa5"),
	HX_HCSTRING("quintIn","\x50","\x49","\xdb","\xe0"),
	HX_HCSTRING("quintOut","\xc3","\x70","\x09","\xdf"),
	HX_HCSTRING("quintInOut","\x1e","\xc1","\xb5","\x4f"),
	HX_HCSTRING("quintOutIn","\x88","\xa7","\xd9","\xc8"),
	HX_HCSTRING("expoIn","\xb7","\x6d","\x7d","\xc4"),
	HX_HCSTRING("expoOut","\x7c","\x26","\x47","\x29"),
	HX_HCSTRING("expoInOut","\x17","\x17","\x17","\xed"),
	HX_HCSTRING("expoOutIn","\x81","\xfd","\x3a","\x66"),
	HX_HCSTRING("circIn","\x9c","\x53","\x0d","\x56"),
	HX_HCSTRING("circOut","\xf7","\x68","\xa0","\xf5"),
	HX_HCSTRING("circInOut","\x52","\x2e","\x22","\x74"),
	HX_HCSTRING("circOutIn","\xbc","\x14","\x46","\xed"),
	HX_HCSTRING("bounceIn","\x8d","\x37","\xb0","\x4c"),
	HX_HCSTRING("bounceOut","\xe6","\xf7","\x84","\xcd"),
	HX_HCSTRING("bounceInOut","\x01","\x97","\x7b","\x79"),
	HX_HCSTRING("bounceOutIn","\x6b","\x7d","\x9f","\xf2"),
	HX_HCSTRING("overshoot","\x0b","\xa0","\xbb","\x4c"),
	HX_HCSTRING("backIn","\xec","\x31","\x99","\x4a"),
	HX_HCSTRING("backOut","\xa7","\x10","\x77","\xfb"),
	HX_HCSTRING("backInOut","\x02","\x22","\xb6","\x9a"),
	HX_HCSTRING("backOutIn","\x6c","\x08","\xda","\x13"),
	HX_HCSTRING("amplitude","\x43","\x15","\xfb","\x69"),
	HX_HCSTRING("period","\x01","\x61","\x1b","\x3b"),
	HX_HCSTRING("elasticIn","\x1a","\x21","\x61","\x27"),
	HX_HCSTRING("elasticOut","\xb9","\x69","\xa0","\x4d"),
	HX_HCSTRING("elasticInOut","\x94","\x63","\xb5","\xcc"),
	HX_HCSTRING("elasticOutIn","\xfe","\x49","\xd9","\x45"),
	HX_HCSTRING("warpOut","\x26","\x93","\x0a","\x0b"),
	HX_HCSTRING("warpIn","\x4d","\xc4","\x05","\xba"),
	HX_HCSTRING("warpInOut","\x41","\x82","\x0e","\x58"),
	HX_HCSTRING("warpOutIn","\xab","\x68","\x32","\xd1"),
	::String(null())
};

void Easing_obj::__register()
{
	hx::Object *dummy = new Easing_obj;
	Easing_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("tweenxcore.Easing","\x6d","\xd5","\x59","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Easing_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Easing_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Easing_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Easing_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Easing_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Easing_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Easing_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Easing_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_11_boot)
HXDLIN(  11)		PI = ((Float)3.1415926535897932384626433832795);
            	}
{
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_12_boot)
HXDLIN(  12)		PI_H = ((Float)1.5707963267948966);
            	}
{
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_13_boot)
HXDLIN(  13)		LN_2 = ((Float)0.6931471805599453);
            	}
{
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_14_boot)
HXDLIN(  14)		LN_2_10 = ((Float)6.931471805599453);
            	}
{
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_272_boot)
HXDLIN( 272)		overshoot = ((Float)1.70158);
            	}
{
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_322_boot)
HXDLIN( 322)		amplitude = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_68717d69d68dbeef_323_boot)
HXDLIN( 323)		period = ((Float)0.0003);
            	}
}

} // end namespace tweenxcore
