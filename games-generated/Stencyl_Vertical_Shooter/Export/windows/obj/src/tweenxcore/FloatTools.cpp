// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_tweenxcore_FloatTools
#include <tweenxcore/FloatTools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_406_revert,"tweenxcore.FloatTools","revert",0x44839211,"tweenxcore.FloatTools.revert","tweenxcore/Tools.hx",406,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_412_clamp,"tweenxcore.FloatTools","clamp",0x33f1336e,"tweenxcore.FloatTools.clamp","tweenxcore/Tools.hx",412,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_418_lerp,"tweenxcore.FloatTools","lerp",0x22dc6164,"tweenxcore.FloatTools.lerp","tweenxcore/Tools.hx",418,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_424_inverseLerp,"tweenxcore.FloatTools","inverseLerp",0x95cf3afa,"tweenxcore.FloatTools.inverseLerp","tweenxcore/Tools.hx",424,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_428_repeat,"tweenxcore.FloatTools","repeat",0x408c3b88,"tweenxcore.FloatTools.repeat","tweenxcore/Tools.hx",428,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_434_shake,"tweenxcore.FloatTools","shake",0x67b59f39,"tweenxcore.FloatTools.shake","tweenxcore/Tools.hx",434,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_442_spread,"tweenxcore.FloatTools","spread",0xfda266a0,"tweenxcore.FloatTools.spread","tweenxcore/Tools.hx",442,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_446_sinByRate,"tweenxcore.FloatTools","sinByRate",0x19f0f782,"tweenxcore.FloatTools.sinByRate","tweenxcore/Tools.hx",446,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_450_cosByRate,"tweenxcore.FloatTools","cosByRate",0x11f465f1,"tweenxcore.FloatTools.cosByRate","tweenxcore/Tools.hx",450,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_461_yoyo,"tweenxcore.FloatTools","yoyo",0x2b7bc419,"tweenxcore.FloatTools.yoyo","tweenxcore/Tools.hx",461,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_466_zigzag,"tweenxcore.FloatTools","zigzag",0xbb1e7435,"tweenxcore.FloatTools.zigzag","tweenxcore/Tools.hx",466,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_480_mixEasing,"tweenxcore.FloatTools","mixEasing",0x3f69655a,"tweenxcore.FloatTools.mixEasing","tweenxcore/Tools.hx",480,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_494_crossfadeEasing,"tweenxcore.FloatTools","crossfadeEasing",0x0f7268fa,"tweenxcore.FloatTools.crossfadeEasing","tweenxcore/Tools.hx",494,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_511_connectEasing,"tweenxcore.FloatTools","connectEasing",0x7c19b3a8,"tweenxcore.FloatTools.connectEasing","tweenxcore/Tools.hx",511,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_524_oneTwoEasing,"tweenxcore.FloatTools","oneTwoEasing",0x0fe62bfe,"tweenxcore.FloatTools.oneTwoEasing","tweenxcore/Tools.hx",524,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_543_binarySearch,"tweenxcore.FloatTools","binarySearch",0x0a4aca36,"tweenxcore.FloatTools.binarySearch","tweenxcore/Tools.hx",543,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_578_polyline,"tweenxcore.FloatTools","polyline",0xc7fd75ad,"tweenxcore.FloatTools.polyline","tweenxcore/Tools.hx",578,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_596_bezier2,"tweenxcore.FloatTools","bezier2",0x657a1e66,"tweenxcore.FloatTools.bezier2","tweenxcore/Tools.hx",596,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_601_bezier3,"tweenxcore.FloatTools","bezier3",0x657a1e67,"tweenxcore.FloatTools.bezier3","tweenxcore/Tools.hx",601,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_606_bezier,"tweenxcore.FloatTools","bezier",0xe175a44c,"tweenxcore.FloatTools.bezier","tweenxcore/Tools.hx",606,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_618__bezier,"tweenxcore.FloatTools","_bezier",0xa97d14f1,"tweenxcore.FloatTools._bezier","tweenxcore/Tools.hx",618,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_631_uniformQuadraticBSpline,"tweenxcore.FloatTools","uniformQuadraticBSpline",0xb285ffa2,"tweenxcore.FloatTools.uniformQuadraticBSpline","tweenxcore/Tools.hx",631,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_652_frameToSecond,"tweenxcore.FloatTools","frameToSecond",0x792e0c0f,"tweenxcore.FloatTools.frameToSecond","tweenxcore/Tools.hx",652,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_655_secondToFrame,"tweenxcore.FloatTools","secondToFrame",0x2cdf9f11,"tweenxcore.FloatTools.secondToFrame","tweenxcore/Tools.hx",655,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_658_degreeToRate,"tweenxcore.FloatTools","degreeToRate",0x4177b654,"tweenxcore.FloatTools.degreeToRate","tweenxcore/Tools.hx",658,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_661_rateToDegree,"tweenxcore.FloatTools","rateToDegree",0x9daf9a14,"tweenxcore.FloatTools.rateToDegree","tweenxcore/Tools.hx",661,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_664_radianToRate,"tweenxcore.FloatTools","radianToRate",0xbc9153a9,"tweenxcore.FloatTools.radianToRate","tweenxcore/Tools.hx",664,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_667_rateToRadian,"tweenxcore.FloatTools","rateToRadian",0xe711d9a9,"tweenxcore.FloatTools.rateToRadian","tweenxcore/Tools.hx",667,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_671_millisecondToBeat,"tweenxcore.FloatTools","millisecondToBeat",0x60a513a5,"tweenxcore.FloatTools.millisecondToBeat","tweenxcore/Tools.hx",671,0x7b87d9c6)
HX_LOCAL_STACK_FRAME(_hx_pos_e036425ffcf727dd_675_beatToMillisecond,"tweenxcore.FloatTools","beatToMillisecond",0x9cba2723,"tweenxcore.FloatTools.beatToMillisecond","tweenxcore/Tools.hx",675,0x7b87d9c6)
namespace tweenxcore{

void FloatTools_obj::__construct() { }

Dynamic FloatTools_obj::__CreateEmpty() { return new FloatTools_obj; }

void *FloatTools_obj::_hx_vtable = 0;

Dynamic FloatTools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FloatTools_obj > _hx_result = new FloatTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FloatTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0ad8fd77;
}

Float FloatTools_obj::revert(Float rate){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_406_revert)
HXDLIN( 406)		return ((int)1 - rate);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatTools_obj,revert,return )

Float FloatTools_obj::clamp(Float value,hx::Null< Float >  __o_min,hx::Null< Float >  __o_max){
Float min = __o_min.Default(((Float)0.0));
Float max = __o_max.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_412_clamp)
HXDLIN( 412)		if ((value <= min)) {
HXDLIN( 412)			return min;
            		}
            		else {
HXDLIN( 412)			if ((max <= value)) {
HXDLIN( 412)				return max;
            			}
            			else {
HXDLIN( 412)				return value;
            			}
            		}
HXDLIN( 412)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatTools_obj,clamp,return )

Float FloatTools_obj::lerp(Float rate,Float from,Float to){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_418_lerp)
HXDLIN( 418)		return ((from * ((int)1 - rate)) + (to * rate));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatTools_obj,lerp,return )

Float FloatTools_obj::inverseLerp(Float value,Float from,Float to){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_424_inverseLerp)
HXDLIN( 424)		return ((Float)(value - from) / (Float)(to - from));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatTools_obj,inverseLerp,return )

Float FloatTools_obj::repeat(Float value,hx::Null< Float >  __o_from,hx::Null< Float >  __o_to){
Float from = __o_from.Default(((Float)0.0));
Float to = __o_to.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_428_repeat)
HXLINE( 429)		Float p = ::tweenxcore::FloatTools_obj::inverseLerp(value,from,to);
HXLINE( 430)		return (p - ::Math_obj::floor(p));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatTools_obj,repeat,return )

Float FloatTools_obj::shake(Float rate,hx::Null< Float >  __o_center, ::Dynamic randomFunc){
Float center = __o_center.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_434_shake)
HXLINE( 435)		if (hx::IsNull( randomFunc )) {
HXLINE( 435)			randomFunc = ::Math_obj::random_dyn();
            		}
HXLINE( 436)		return (center + ::tweenxcore::FloatTools_obj::spread(( (Float)(randomFunc()) ),rate));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatTools_obj,shake,return )

Float FloatTools_obj::spread(Float rate,Float scale){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_442_spread)
HXDLIN( 442)		return ::tweenxcore::FloatTools_obj::lerp(rate,-(scale),scale);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,spread,return )

Float FloatTools_obj::sinByRate(Float rate){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_446_sinByRate)
HXDLIN( 446)		return ::Math_obj::sin(((rate * (int)2) * ::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatTools_obj,sinByRate,return )

Float FloatTools_obj::cosByRate(Float rate){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_450_cosByRate)
HXDLIN( 450)		return ::Math_obj::cos(((rate * (int)2) * ::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatTools_obj,cosByRate,return )

Float FloatTools_obj::yoyo(Float rate, ::Dynamic easing){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_461_yoyo)
HXDLIN( 461)		Float _hx_tmp;
HXDLIN( 461)		if ((rate < ((Float)0.5))) {
HXDLIN( 461)			_hx_tmp = rate;
            		}
            		else {
HXDLIN( 461)			_hx_tmp = ((int)1 - rate);
            		}
HXDLIN( 461)		return ( (Float)(easing((_hx_tmp * (int)2))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,yoyo,return )

Float FloatTools_obj::zigzag(Float rate, ::Dynamic easing){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_466_zigzag)
HXDLIN( 466)		if ((rate < ((Float)0.5))) {
HXDLIN( 466)			return ( (Float)(easing((rate * (int)2))) );
            		}
            		else {
HXDLIN( 466)			return ((int)1 - ( (Float)(easing(((rate - ((Float)0.5)) * (int)2))) ));
            		}
HXDLIN( 466)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,zigzag,return )

Float FloatTools_obj::mixEasing(Float rate, ::Dynamic easing1, ::Dynamic easing2,hx::Null< Float >  __o_easing2Strength){
Float easing2Strength = __o_easing2Strength.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_480_mixEasing)
HXLINE( 481)		Float _hx_tmp = ( (Float)(easing1(rate)) );
HXLINE( 480)		return ::tweenxcore::FloatTools_obj::lerp(easing2Strength,_hx_tmp,( (Float)(easing2(rate)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FloatTools_obj,mixEasing,return )

Float FloatTools_obj::crossfadeEasing(Float rate, ::Dynamic easing1, ::Dynamic easing2, ::Dynamic easing2StrengthEasing,hx::Null< Float >  __o_easing2StrengthStart,hx::Null< Float >  __o_easing2StrengthEnd){
Float easing2StrengthStart = __o_easing2StrengthStart.Default(0);
Float easing2StrengthEnd = __o_easing2StrengthEnd.Default(1);
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_494_crossfadeEasing)
HXDLIN( 494)		Float _hx_tmp = ::tweenxcore::FloatTools_obj::lerp(( (Float)(easing2StrengthEasing(rate)) ),easing2StrengthStart,easing2StrengthEnd);
HXLINE( 498)		Float _hx_tmp1 = ( (Float)(easing1(rate)) );
HXLINE( 494)		return ::tweenxcore::FloatTools_obj::lerp(_hx_tmp,_hx_tmp1,( (Float)(easing2(rate)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FloatTools_obj,crossfadeEasing,return )

Float FloatTools_obj::connectEasing(Float time, ::Dynamic easing1, ::Dynamic easing2,hx::Null< Float >  __o_switchTime,hx::Null< Float >  __o_switchValue){
Float switchTime = __o_switchTime.Default(((Float)0.5));
Float switchValue = __o_switchValue.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_511_connectEasing)
HXDLIN( 511)		if ((time < switchTime)) {
HXLINE( 512)			return ::tweenxcore::FloatTools_obj::lerp(( (Float)(easing1(::tweenxcore::FloatTools_obj::inverseLerp(time,(int)0,switchTime))) ),(int)0,switchValue);
            		}
            		else {
HXLINE( 514)			return ::tweenxcore::FloatTools_obj::lerp(( (Float)(easing2(::tweenxcore::FloatTools_obj::inverseLerp(time,switchTime,(int)1))) ),switchValue,(int)1);
            		}
HXLINE( 511)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FloatTools_obj,connectEasing,return )

Float FloatTools_obj::oneTwoEasing(Float time, ::Dynamic easingOne, ::Dynamic easingTwo,hx::Null< Float >  __o_switchTime){
Float switchTime = __o_switchTime.Default(((Float)0.5));
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_524_oneTwoEasing)
HXDLIN( 524)		if ((time < switchTime)) {
HXLINE( 525)			return ( (Float)(easingOne(::tweenxcore::FloatTools_obj::inverseLerp(time,(int)0,switchTime))) );
            		}
            		else {
HXLINE( 527)			return ( (Float)(easingTwo(::tweenxcore::FloatTools_obj::inverseLerp(time,switchTime,(int)1))) );
            		}
HXLINE( 524)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FloatTools_obj,oneTwoEasing,return )

int FloatTools_obj::binarySearch(::Array< Float > sortedValues,Float value,hx::Null< int >  __o_boundaryMode){
int boundaryMode = __o_boundaryMode.Default(0);
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_543_binarySearch)
HXLINE( 544)		int min = (int)0;
HXLINE( 545)		int max = sortedValues->length;
HXLINE( 546)		if ((boundaryMode == (int)0)) {
HXLINE( 547)			while(true){
HXLINE( 548)				int next = (::Std_obj::_hx_int(((Float)(max - min) / (Float)(int)2)) + min);
HXLINE( 549)				Float dv = sortedValues->__get(next);
HXLINE( 550)				if ((dv <= value)) {
HXLINE( 551)					min = (next + (int)1);
            				}
            				else {
HXLINE( 553)					max = next;
            				}
HXLINE( 555)				if ((min == max)) {
HXLINE( 555)					goto _hx_goto_15;
            				}
            			}
            			_hx_goto_15:;
            		}
            		else {
HXLINE( 558)			while(true){
HXLINE( 559)				int next1 = (::Std_obj::_hx_int(((Float)(max - min) / (Float)(int)2)) + min);
HXLINE( 560)				Float dv1 = sortedValues->__get(next1);
HXLINE( 561)				if ((dv1 < value)) {
HXLINE( 562)					min = (next1 + (int)1);
            				}
            				else {
HXLINE( 564)					max = next1;
            				}
HXLINE( 566)				if ((min == max)) {
HXLINE( 566)					goto _hx_goto_16;
            				}
            			}
            			_hx_goto_16:;
            		}
HXLINE( 569)		return min;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FloatTools_obj,binarySearch,return )

Float FloatTools_obj::polyline(Float rate,::Array< Float > values){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_578_polyline)
HXDLIN( 578)		if ((values->length < (int)2)) {
HXLINE( 579)			HX_STACK_DO_THROW(HX_("points length must be more than 2",db,b5,b9,b0));
            		}
            		else {
HXLINE( 581)			int max = (values->length - (int)1);
HXLINE( 582)			Float scaledRate = (rate * max);
HXLINE( 583)			int index = ::Math_obj::floor(::tweenxcore::FloatTools_obj::clamp(scaledRate,(int)0,(max - (int)1)));
HXLINE( 584)			Float innerRate = (scaledRate - index);
HXLINE( 585)			return ::tweenxcore::FloatTools_obj::lerp(innerRate,values->__get(index),values->__get((index + (int)1)));
            		}
HXLINE( 578)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,polyline,return )

Float FloatTools_obj::bezier2(Float rate,Float from,Float control,Float to){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_596_bezier2)
HXDLIN( 596)		Float _hx_tmp = ::tweenxcore::FloatTools_obj::lerp(rate,from,control);
HXDLIN( 596)		return ::tweenxcore::FloatTools_obj::lerp(rate,_hx_tmp,::tweenxcore::FloatTools_obj::lerp(rate,control,to));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FloatTools_obj,bezier2,return )

Float FloatTools_obj::bezier3(Float rate,Float from,Float control1,Float control2,Float to){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_601_bezier3)
HXDLIN( 601)		Float _hx_tmp = ::tweenxcore::FloatTools_obj::lerp(rate,from,control1);
HXDLIN( 601)		Float _hx_tmp1 = ::tweenxcore::FloatTools_obj::lerp(rate,control1,control2);
HXDLIN( 601)		return ::tweenxcore::FloatTools_obj::bezier2(rate,_hx_tmp,_hx_tmp1,::tweenxcore::FloatTools_obj::lerp(rate,control2,to));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FloatTools_obj,bezier3,return )

Float FloatTools_obj::bezier(Float rate,::Array< Float > values){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_606_bezier)
HXDLIN( 606)		if ((values->length < (int)2)) {
HXLINE( 607)			HX_STACK_DO_THROW(HX_("points length must be more than 2",db,b5,b9,b0));
            		}
            		else {
HXLINE( 608)			if ((values->length == (int)2)) {
HXLINE( 609)				return ::tweenxcore::FloatTools_obj::lerp(rate,values->__get((int)0),values->__get((int)1));
            			}
            			else {
HXLINE( 610)				if ((values->length == (int)3)) {
HXLINE( 611)					return ::tweenxcore::FloatTools_obj::bezier2(rate,values->__get((int)0),values->__get((int)1),values->__get((int)2));
            				}
            				else {
HXLINE( 613)					return ::tweenxcore::FloatTools_obj::_bezier(rate,values);
            				}
            			}
            		}
HXLINE( 606)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,bezier,return )

Float FloatTools_obj::_bezier(Float rate,::Array< Float > values){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_618__bezier)
HXLINE( 619)		if ((values->length == (int)4)) {
HXLINE( 620)			return ::tweenxcore::FloatTools_obj::bezier3(rate,values->__get((int)0),values->__get((int)1),values->__get((int)2),values->__get((int)3));
            		}
HXLINE( 623)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 623)		{
HXLINE( 623)			int _g2 = (int)0;
HXDLIN( 623)			int _g1 = (values->length - (int)1);
HXDLIN( 623)			while((_g2 < _g1)){
HXLINE( 623)				_g2 = (_g2 + (int)1);
HXDLIN( 623)				int i = (_g2 - (int)1);
HXDLIN( 623)				_g->push(::tweenxcore::FloatTools_obj::lerp(rate,values->__get(i),values->__get((i + (int)1))));
            			}
            		}
HXDLIN( 623)		return ::tweenxcore::FloatTools_obj::_bezier(rate,_g);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,_bezier,return )

Float FloatTools_obj::uniformQuadraticBSpline(Float rate,::Array< Float > values){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_631_uniformQuadraticBSpline)
HXDLIN( 631)		if ((values->length < (int)2)) {
HXLINE( 632)			HX_STACK_DO_THROW(HX_("points length must be more than 2",db,b5,b9,b0));
            		}
            		else {
HXLINE( 633)			if ((values->length == (int)2)) {
HXLINE( 634)				return ::tweenxcore::FloatTools_obj::lerp(rate,values->__get((int)0),values->__get((int)1));
            			}
            			else {
HXLINE( 636)				int max = (values->length - (int)2);
HXLINE( 637)				Float scaledRate = (rate * max);
HXLINE( 638)				int index = ::Math_obj::floor(::tweenxcore::FloatTools_obj::clamp(scaledRate,(int)0,(max - (int)1)));
HXLINE( 639)				Float innerRate = (scaledRate - index);
HXLINE( 640)				Float p0 = values->__get(index);
HXLINE( 641)				Float p1 = values->__get((index + (int)1));
HXLINE( 642)				Float p2 = values->__get((index + (int)2));
HXLINE( 643)				return (((((innerRate * innerRate) * ((((Float)p0 / (Float)(int)2) - p1) + ((Float)p2 / (Float)(int)2))) + (innerRate * (-(p0) + p1))) + ((Float)p0 / (Float)(int)2)) + ((Float)p1 / (Float)(int)2));
            			}
            		}
HXLINE( 631)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,uniformQuadraticBSpline,return )

Float FloatTools_obj::frameToSecond(Float frame,Float fps){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_652_frameToSecond)
HXDLIN( 652)		return ((Float)frame / (Float)fps);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,frameToSecond,return )

Float FloatTools_obj::secondToFrame(Float second,Float fps){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_655_secondToFrame)
HXDLIN( 655)		return (second * fps);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,secondToFrame,return )

Float FloatTools_obj::degreeToRate(Float degree){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_658_degreeToRate)
HXDLIN( 658)		return ((Float)degree / (Float)(int)360);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatTools_obj,degreeToRate,return )

Float FloatTools_obj::rateToDegree(Float rate){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_661_rateToDegree)
HXDLIN( 661)		return (rate * (int)360);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatTools_obj,rateToDegree,return )

Float FloatTools_obj::radianToRate(Float radian){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_664_radianToRate)
HXDLIN( 664)		return ((Float)radian / (Float)((int)2 * ::Math_obj::PI));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatTools_obj,radianToRate,return )

Float FloatTools_obj::rateToRadian(Float rate){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_667_rateToRadian)
HXDLIN( 667)		return ((rate * (int)2) * ::Math_obj::PI);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FloatTools_obj,rateToRadian,return )

Float FloatTools_obj::millisecondToBeat(Float millisecond,Float bpm){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_671_millisecondToBeat)
HXDLIN( 671)		return ((Float)(millisecond * bpm) / (Float)(int)60000);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,millisecondToBeat,return )

Float FloatTools_obj::beatToMillisecond(Float beat,Float bpm){
            	HX_STACKFRAME(&_hx_pos_e036425ffcf727dd_675_beatToMillisecond)
HXDLIN( 675)		return ((Float)(beat * (int)60000) / (Float)bpm);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FloatTools_obj,beatToMillisecond,return )


FloatTools_obj::FloatTools_obj()
{
}

bool FloatTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"yoyo") ) { outValue = yoyo_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shake") ) { outValue = shake_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"revert") ) { outValue = revert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"repeat") ) { outValue = repeat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"spread") ) { outValue = spread_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zigzag") ) { outValue = zigzag_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bezier") ) { outValue = bezier_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bezier2") ) { outValue = bezier2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bezier3") ) { outValue = bezier3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_bezier") ) { outValue = _bezier_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"polyline") ) { outValue = polyline_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sinByRate") ) { outValue = sinByRate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cosByRate") ) { outValue = cosByRate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mixEasing") ) { outValue = mixEasing_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inverseLerp") ) { outValue = inverseLerp_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"oneTwoEasing") ) { outValue = oneTwoEasing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"binarySearch") ) { outValue = binarySearch_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"degreeToRate") ) { outValue = degreeToRate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rateToDegree") ) { outValue = rateToDegree_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"radianToRate") ) { outValue = radianToRate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rateToRadian") ) { outValue = rateToRadian_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"connectEasing") ) { outValue = connectEasing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"frameToSecond") ) { outValue = frameToSecond_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"secondToFrame") ) { outValue = secondToFrame_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"crossfadeEasing") ) { outValue = crossfadeEasing_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"millisecondToBeat") ) { outValue = millisecondToBeat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"beatToMillisecond") ) { outValue = beatToMillisecond_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"uniformQuadraticBSpline") ) { outValue = uniformQuadraticBSpline_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FloatTools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FloatTools_obj_sStaticStorageInfo = 0;
#endif

static void FloatTools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FloatTools_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FloatTools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FloatTools_obj::__mClass,"__mClass");
};

#endif

hx::Class FloatTools_obj::__mClass;

static ::String FloatTools_obj_sStaticFields[] = {
	HX_HCSTRING("revert","\xe4","\xed","\x73","\x0a"),
	HX_HCSTRING("clamp","\xfb","\x72","\x58","\x48"),
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("inverseLerp","\x47","\x22","\x02","\x21"),
	HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06"),
	HX_HCSTRING("shake","\xc6","\xde","\x1c","\x7c"),
	HX_HCSTRING("spread","\x73","\xc2","\x92","\xc3"),
	HX_HCSTRING("sinByRate","\x8f","\x81","\xe3","\x5b"),
	HX_HCSTRING("cosByRate","\xfe","\xef","\xe6","\x53"),
	HX_HCSTRING("yoyo","\x2c","\x75","\x4f","\x50"),
	HX_HCSTRING("zigzag","\x08","\xd0","\x0e","\x81"),
	HX_HCSTRING("mixEasing","\x67","\xef","\x5b","\x81"),
	HX_HCSTRING("crossfadeEasing","\xc7","\x7a","\x7f","\x01"),
	HX_HCSTRING("connectEasing","\x35","\xc8","\x4e","\x67"),
	HX_HCSTRING("oneTwoEasing","\x11","\xa8","\x3d","\x51"),
	HX_HCSTRING("binarySearch","\x49","\x46","\xa2","\x4b"),
	HX_HCSTRING("polyline","\x40","\xac","\x9a","\x2f"),
	HX_HCSTRING("bezier2","\x33","\x1b","\xda","\xd1"),
	HX_HCSTRING("bezier3","\x34","\x1b","\xda","\xd1"),
	HX_HCSTRING("bezier","\x1f","\x00","\x66","\xa7"),
	HX_HCSTRING("_bezier","\xbe","\x11","\xdd","\x15"),
	HX_HCSTRING("uniformQuadraticBSpline","\x6f","\x26","\xdd","\xec"),
	HX_HCSTRING("frameToSecond","\x9c","\x20","\x63","\x64"),
	HX_HCSTRING("secondToFrame","\x9e","\xb3","\x14","\x18"),
	HX_HCSTRING("degreeToRate","\x67","\x32","\xcf","\x82"),
	HX_HCSTRING("rateToDegree","\x27","\x16","\x07","\xdf"),
	HX_HCSTRING("radianToRate","\xbc","\xcf","\xe8","\xfd"),
	HX_HCSTRING("rateToRadian","\xbc","\x55","\x69","\x28"),
	HX_HCSTRING("millisecondToBeat","\xb2","\xf2","\x73","\xbd"),
	HX_HCSTRING("beatToMillisecond","\x30","\x06","\x89","\xf9"),
	::String(null())
};

void FloatTools_obj::__register()
{
	hx::Object *dummy = new FloatTools_obj;
	FloatTools_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("tweenxcore.FloatTools","\xa1","\x78","\x84","\x55");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FloatTools_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FloatTools_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FloatTools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FloatTools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FloatTools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FloatTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FloatTools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace tweenxcore
